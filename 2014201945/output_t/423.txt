          new constraint programming approaches computation                     leximinoptimal solutions constraint networks                                   sylvain bouveret    michel lemaˆıtre                          ofﬁce national d’etudes´ et recherches a´erospatiales                         sylvainbouveretonerafr michellemaitreonerafr                        abstract                          variables possibly used ensure kind equity                                                        set agents equity studied operational      study problem computing leximin                                                        research example ogryczak sliwi´´ nski       optimal solution constraint network prob                                                        investigate way solving linear programs aggre      lem highly motivated fairness efﬁciency                                                        gating multiple criteria using ordered weighted average      requirements realworld applications im                                                        operator owa yager  depending weights      plying human agents compare generic                                                        used owa kind aggregators provide equi      algorithms solve problem constraint                                                        table compromises      programming framework ﬁrst entirely                                                          microeconomy social choice theory provide im      original ones partially based                                                        portant literature fairness collective decision making      existing works adapted ﬁt problem                                                        theoretical background borrow idea rep                                                        resenting agents preferences utility levels    introduction                                       adopt leximin preorder utility proﬁles conveying                                                        fairness efﬁciency requirements reﬁnement  advances recent years modeling                      solving combinatorial problems constraint program maximin approach  inclination fairness  ming cp advances concern abil avoiding socalled drowning effect approach  ity framework deal human reasoning schemes apart fact conveys formalizes  example expression preferences soft cept equity multiagent contexts leximin preorder  constraints aspect importance subject contexts fuzzy csp  ceived attention constraints community date fargier et al  symmetrybreaking constraint  way handle fairness requirements multiagent combi satisfaction problems frisch et al   natorial problems                                      contribution organized follows section  gives    seek fairness stands subjective strong minimal background social choice theory justiﬁes  quirement wide set realworld problems implying hu leximin preorder fairness criterion sec  man agents particularly relevant crew worker tion  deﬁnes search leximinoptimality constraint  timetabling rostering problems optimization programming framework main contribution pa  long shortterm planning ﬁremen emergency ser section  presents three algorithms com  vices fairness ubiquitous multiagent resource al puting leximinoptimal solutions ﬁrst entirely  location problems like bandwidth allocation original ones adapted existing works  network users fair share airspace airport proposed algorithms implemented tested  sources airlines earth observing satellite constraint programming section  presents  scheduling sharing problems lemaˆıtre et al  experimental comparison algorithms    spite wide range problems concerned fair  ness issues lacks theoretical generic approach  background social choice theory  constraint programming operational research ﬁrst introduce notations calligraphic letters  works fairness enforced speciﬁc heuristic local                                                           will−→ stand sets vectors written an−→ arrow  choices guiding search supposed equitable solu  brackets xxn                                                                                                     −→↑  tions works cited approach                                                                                   used shortcut fx fx   vector −→x  fairness requirement lemaˆıtre et al  make stand vector composed each element rear                                                                                             ↑  use earth observation satellite scheduling sharing ranged increasing order write ith compo                                                                    −→                        problem investigate three ways handling fairness nent vector ↑ finally interval integers  agents context constraint satisfaction recently written k l  pesant r´egin  proposed new constraint based  statistics enforces relative balance given set trying maximize utility unhappiest agent                                                    ijcai                                                       collective decision making welfarism         better ﬁrst words min ag                                                        gregation function lead non paretooptimal decisions  let beasetof    agents set admissible                                                      desirable  alternatives concerning benevo                                                          leximin preorder wellknown reﬁnement  lent arbitrator choose classical model                                                        der induced min function overcomes draw  describing situation welfarism keeney                                                        classically introduced social choice literature  raiffa  moulin  choice arbitrator                                                        moulin  social welfare ordering rec  basis utility levels enjoyed indi                                                        oncile egalitarianism paretoefﬁciency fuzzy  vidual agents levels each agent ∈n                                                        csp  fargier et al itisdeﬁnedasfollows  individual utility function ui maps each admissi                                      −→                ∈s                                                                               ble alternative numerical index uiswemake   deﬁnition−→  leximin preorder−→ moulin−→   let  classical assumption individual utilities vectors nn said leximin                                                                        −→         −→            −→↑   −→↑  comparable agents each alternative indifferent written ∼leximin                                                                  −→                    −→       −→ ≺  attached single utility proﬁle usuns  −→the vector leximinpreferred written leximin  according welfarism comparing alternatives  ∃i ∈ n −  ∀j ∈ i                                                         ↑     ↑     ↑       ↑            −→          −→  formed comparing respective utility proﬁles            write  leximin                                                        −→j       −→i −→      −→    standard way compare individual utility proﬁles ≺leximin ∼leximin  binary relation  aggregate each collective utility index stand  leximin total preorder  ing collective welfare agents community  wellchosen aggregation function collective words leximin preorder lexicographic pre  utility function uc maps each alternative collec order ordered utility vectors example                                                               ≺                tive utility level ucsgusuns optimal     leximin       alternative maximizing collective utility known result collective utility function rep                                                        resent leximin preorder unless set possible utility                                                        proﬁles ﬁnite case represented    leximin preorder fairness                                             −→     n                                                                                              →−        −xi       efﬁciency criterion                              following nonlinear functions   ii                                                        adapted leximin remark frisch et al                                                                 −→      n    −q  main difﬁculty equitable decision problems   →− xi whereq   large  reconcile contradictory wishes agents moulin  using kind functions  generally solution fully satisﬁes ag                                                        main drawback rapidly becomes−→ unreasonable  gregation function lead fair paretoefﬁcient upper bound possible values increases  compromises                                          hides semantics leximin preorder hinders    problem choosing right aggregation function computational beneﬁts possibly advantage  far scope paper following use leximin preorder  classical ones corresponding opposite points criterion ensuring fairness paretoefﬁciency  view social welfare classical utilitarianism egalitar seeking nondominated solutions sense  ianism rule advocated defenders classical util leximin preorder solutions called leximin  itarianism best decision maximizes optimal problem expressed section  sum individual utilities corresponding  cp framework  kind aggregation function lead huge  differences utility levels agents ruling  constraint programming  aggregator context equitable decisions  egalitarian point view best decision leximinoptimality  maximizes happiness satisﬁed agent cor constraint programming framework effective  responding min kind aggregation ﬂexible tool modeling solving different com  function particularly wellsuited problems fair binatorial problems planning scheduling prob  ness essential major drawback idempo lems resource allocation problems conﬁguration prob  tency min operator known “drowning effect” lems paradigm based notion constraint  community fuzzy csp egdubois fortemps network montanari  constraint network consists   leaves alternatives indistinguishable set variables  xxp following  example ones utility proﬁles  variables written uppercase letters set asso                         second appears ciated domains  dx dxp wheredxi set                                                        possible values xi set constraints cwhere    words expressed using common utility scale each ∈cspeciﬁes set allowed tuples rc set    decision paretoefﬁcient strictly variables make additional assumption  increase satisfaction agent unless strictly decrease domains use following notations  satisfaction agent paretoefﬁciency generally taken mindx  maxdx   basic postulate collective decision making                                                                                        −→         −→ ⇔     compromises extremes possible −→in other−→ words leximin  moulin  page  yager  owa aggregators  ≤ seemoulin                                                     ijcai                                                       instantiation set variables function deﬁnition  metaconstraint atleast let Γ set  maps each variable ∈sto value vx domain dx  constraints ∈ p integer metaconstraint    instantiation said complete atleastΓk holds union scopes  partial s  projection instantiation straints Γ allows tuple  s restriction instantiation s straints Γ satisﬁed  written v↓s  instantiation said consistent  satisﬁes constraints complete consistent genericity metaconstraint provide  instantiation constraint network called solution efﬁcient ﬁltering procedures case  set solutions  written solx  constraints Γ linear metaconstraint simply  write vx ← instantiation value counting constraint boundconsistency achieved  replaced                                      speciﬁc metaconstraint atleast                                                                                                      given constraint network problem determining implemented set linear constraints garﬁnkel                                                        nemhauser  introducing – variables  solution called constraint satisfaction                                       ≥  problem cspandisnpcomplete  csp clas   ΔΔn   set linear constraints Δy                                                                         ≥         ≤   −    sically adapted optimization problem fol yxn Δny Δi    lowing way given constraint network  ﬁrst approach computing leximinoptimal solu  objective variable ∈x ﬁnd value   tion presented algorithm   maxvo    ∈ solx  write         max     subset solutions maxi algorithm  computation leximinoptimal solution  mize objective variable                         using cardinality combinator    expressing collective decision making problem                             ∈xn  numerical collective utility criterion csp objective input  const network    uun                                                          output solution maxleximincsp problem  variable straightforward consider collective utility  objective variable link variables represent  solvex  c“inconsistent” return “inconsistent”                                                           d  ←  ing individual utilities constraint                                                                ←   directly encode problem computing leximinoptimal  ←x     ∪    solution kind multicriteria optimization prob  i−  yi                                                               ←d    ∪d         min    max     lem introduce formally maxleximincsp problem           i−   yi  yi      uj    uj   follows                                               ci ←ci−  ∪                                                                   atleast  ≤          ≤      −               maxleximincsp                                                   yi  uyi         deﬁnition                 problem                      vbi ← maximizexi di ciyi  input constraint network  vector variables                                                             di ←di  dyi ←vbiyi  −→                               n∈x            called objective vector     return vbn↓x   output                      ∅         “inconsistent” sol   −→ otherwiseaso−→  lution v ∀v ∈ solx  vu   leximin vu                                                           functions solve maximize    section generic constraint                                                        concern solving techniques constraints satisfaction  programming algorithms solve problem ﬁrst                                                        problems lines   respectively return solution  entirely original ones based exist                                                        ∈ solx  “inconsistent” solution does  ing works adapted ﬁt problem                                                        exist optimal solution v ∈ maxxi di ciyi                                                        “inconsistent” solxi di ci∅ assume –    proposed algorithms                                trary usual constraint solvers – functions    using cardinality combinator                   modify input constraint network  ﬁrst algorithm based iterative computation following example illustrates                                                        behavior algorithm  components leximinoptimal vector ﬁrst computes                                                                                        ∀     simple resource allocation problem  maximal value that solution                                         ≤    orinotherwords      ≤             objects allocated     vu                   iy   vu                                                         convention value ≤ vui  inequality  agents following  satisﬁed  having ﬁxed straints each agent object  value computes maximal value object allocated agent  solution iy ≤ vui ≥ −  perfect matching agentobjects utility associated  until maximal value yn solution each pair agentobject respect array    iyn ≤ vui ≥                                     problem  feasible solutions each permu    enforce constraint yiwemakeuseofthe  tation   producing  utility proﬁles shown  metaconstraint atleast derived cardinality com columns following array  binator introduced van hentenryck et al                                                                                present cp systems                                                                                          convention inspired constraint modeling language                    opl van hentenryck                                                                                                              ijcai                                                       algorithm runs  steps step  having intro proof proposition  solx  c∅andifsolve  duced variable look maximal value y correct algorithm  obviously returns “inconsistent”                                                                                                  each  agent gets yweﬁnd wise following lemma  outputs instantiation vn ↓x                                                                                          y thevariabley ﬁxed value implicitly according lemma  solution                                                                suppose   ∈       moving proﬁles step  having introduced −→           −→           sol                                                          vu  leximin vbnu  following deﬁnition  ∃i ∈ n  variable look maximal value          −→         −→       −→         −→                                                                          ↑         ↑         ↑         ↑   agents yweﬁndy thevari ∀ji vu  vbnu vu  vbnu   able  ﬁxed value implicitly removing proﬁle                                                      let vi extension respectively instantiating yyi−  step  having introduced variable look                         −→ ↑                                                        vbnyvbnyi− yi vu   following lemma   maximal value y  agent gets        −→                                                                      ∀         ↑  yweﬁndy  instantiation maximizes vn yj vn  gathering previous equalities                                                                                       −→ ↑      −→ ↑  finally returned leximinoptimal allocation ∀jiviyj vbnyj vu viu  ← ← ←                                          −→ ↑     −→  ↑                                                        yivu  lemma  ∀j ≤                                                                              i−→                                 maximize      solve                              proposition  functions                − numbers viu  greater equal  correct halt algorithm  halts                     maxleximincsp                                 vi yj  proving vi satisﬁes cardinality constraints  solves              problem                      iteration satisﬁes each constraint maps each                                                       variable xi possible values solution soli    proofs write soli soli respec       −→        −→                                                                  ↑     ↑      tively solxi di ci solxi di ci write vi yi  vn vi yi  contradicts                                                                 maximize                        soli↓xj soli↓xj sets solutions pro deﬁnition  proving proposition   jected xj ji notice sol                                                          using sorting constraint  solx  candthat∀i soli ⊆ soli               −→                                       second algorithm directly based deﬁnition   lemma   let vector size natleastn −               −→                          ↑             leximin preorder involves sorted version  components greater equal                                                       objective vector naturally expressed−→ cp    proof useful lemma obvious omit paradigm introducing−→ vector−→ variables enforc                                                        ing constraint sortuy  deﬁned follows  lemma   sol  ∅ vn welldeﬁned equal                        −→    −→  “inconsistent”                                    deﬁnition  constraint sort let  vec                                                       tors variables length instantiation    proof let ∈ n suppose soli−   ∅andletvi ∈           −→ −→                                                       constraint sortxx  holds set variables  soli− extending vi instantiating yi minj uj  leads                                                                   −→      −→  solution xi di ci constraint added ing  satisﬁed                                                          −→                      −→  satisﬁed instantiation soli   ∅ sorted version increasing order                                                       vx                     vx   maximize correct vbi   “inconsistent” vbi ∈ soliso                                                         constraint particularly studied works  soli   ∅ proves lemma  induction                                                         introduce ﬁltering algorithm enforcing    lemma   sol  ∅thenvn↓xi ∈ soli ∀i ∈ n bound consistency constraint ﬁrst algorithm                                                                                                                                                            comes bleuzenguernalec colmerauer−→     proof soli ⊆ soliandsoli↓xi ⊆ soli                                                       runs log size mehlhorn  xi di ci xi di ci just add constraint                                                       thiel  designed simpler algorithm runs  generally soli↓xj ⊆ soli↓xj andsoli↓xj ⊆                                               −→                                              soli↓xj  soon ≤ vbn↓xi ∈ soln↓xi ⊆ plus time required sort interval endpoints                                                       asymptotically faster      soln↓xi ⊆···⊆soli↓xi ⊆ soli ⊆ soli                                              log                                          −→                  ∅     −→                ↑  lemma   sol   vn  equal vnu    algorithm  computation leximinoptimal solution                                                         using sorting constraint    proof ∈ n vbn↓xi solution soli                                           −→                                                                                                     ↑                                      n∈x  lemma  lemma  vbn↓x yi ← vbnu   satis input  const network                                                                            maxleximincsp  ﬁes cardinality constraint iteration solu output solution problem                                maximize                    solvex  tion soli deﬁnition−→ function             “inconsistent” return “inconsistent”                   ↑                                       ←x∪             vbiyi ≥ vbnu sincevbiyivbnyiwehave          yyn                −→ ↑                                                                                                    ←d∪dy        dy   dy   minj   maxj    vbnyi ≥ vbnu                                                                                                                                      −→ −→    vbn solution soln − numbers  ←c∪sortuy            −→                                                 ←                                                    vector vn greater equal vn                                               −→                            vbi ← maximizex   yi  − greatest numbers vbnu  greater                                                            dy  ←bi                                           −→ ↑                        equal vbnyi components include vbnu                                                                bn↓x                     −→ ↑                                return     leads vbnyi ≤ vbnu  proving lemma     things prove proposition                                                     ijcai                                                     proposition  functions maximize solve  algorithm  computation leximinoptimal solution  correct halt algorithm  halts branch bound manner          maxleximincsp                                                                               solves              problem                        input  const network  uun∈x    proof solx  c∅ solve correct al output solution maxleximincsp problem  gorithm  obviously returns “inconsistent” suppose  vb ← null ← solvex                   ∅  following sol    use following nota    “inconsistent”                                     d c  tions soli soli sets solutions   respec  vb ←  tively beginning end iteration                        −→  −→                                                           c←c∪leximinvbu         obviously ∀i ∈ n−  soli  soli proves                                                            ← solvex   soli   ∅ maximize line  does  return “inconsistent” soli   ∅ vbn welldeﬁned  vb   null return vb return “inconsistent”  obviously vbn↓x solution     note vb  vbn instantiation computed  maximize  algorithm  suppose instantiation work enumerating each step subsets fuzzy                         −→           −→             ∈ solx  vbu  ≺leximin vu wedeﬁnev constraints corresponding agents having property                                       −→ ↑  extension instantiates each yi vu  connected notion consistency degree                  −→        constraint sort vby   respective sorted ver ehrgott   describes simple algo         −→        sion vbu  following deﬁnition  ∈ rithms solving closely related “lexicographic max                                                       ordering” problem called “leximaxoptimal”  n−  ∀j ∈ i vbyj yj  vbyi                                                        terms realistic  yi line  vbyivbnyi                                                    text combinatorial problems based  vbiyi solution maxx   yi                                                       enumeration utility proﬁles  objective value viyi strictly greater vbiyi  contradicts hypothesis maximize                                                            experimental results    using multiset ordering constraint             algorithms    ﬁrst algorithm proposed  algorithm computing leximinoptimal solution dubois fortemps  implemented  intuitive proceeds pseudo branch tested using constraint programming tool choco labur  bound manner computes ﬁrst solution tries  test realistic instances  improve specifying solution better extracted realworld problem simpliﬁed multiagent  sense leximin preorder current resource allocation problem problem resource  constraint network inconsistent set objects allocated agents  approach based following constraint        volume consumption constraints individual utility                                    −→                  functions speciﬁed set weights wao pair  deﬁnition−→  constraint leximin let vector agent object given allocation objects indi  variables λ vector integers−→ →− instanti vidual utility agent sum weights wio                     leximin                            objects receives weights generated  ation constraint −→    λx holds set  variables belonging satisﬁed uniformly concentrated powers   −→         −−−→                                       simulate kind priorities    ≺  λ   leximin vx                                       developed customizable generator random    constraint does exist literature instances available online tested algorithms sev  work frisch et al  introduces algorithm en eral instances different characteristics leading  forcing generalized arcconsistency quite similar different kind problems brief description  straint multiset ordering constraint each kind instances appearing table  default  text multisets equivalent leximax constraint weights nonuniformly distributed constraints  vectors variables price slight modiﬁca medium tightness  tions algorithm introduce easily used en   agents  objects   agents  objects    force constraint leximin                  agents  objects   agents  objects lowtightness                                                        constraints   agents  objects hardtightness  proposition  function solve correct halts                             maxleximincsp              straints   agents  objects uniform weights low  algorithm  halts solves           problem   values hardtightness constraints   agents  objects    proof straightforward omit   results table  show algorithm  best                                                        running times instances followed algo    approaches                                 rithm  fast efﬁcient  context fuzzy constraints algorithms dedicated number agents increases instances kind  al  computation leximinoptimal solutions gorithm  better kind instances expected  published dubois fortemps  algorithms algorithm dubois fortemps  explodes      leximax based increasing reordering values approximating conditions realworld application  instead decreasing leximin                 httpwwwcertfrdcsdthesessbouveretbenchmark                                                    ijcai                                                     
