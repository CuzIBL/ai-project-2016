                 nonmonotonic temporal            logics goal speciﬁcation                                       chitta baral    jicheng zhao                             department science engineering                                          arizona state university                                           tempe arizona                                          chittajichengasuedu                        abstract                          nonmonotonic goal speciﬁcation language allow                                                        specify simple goal initially allow reﬁne      main ways specify goals agents adding new exceptions      use temporal logics existing temporal log nonmonotonic versions various modal logics      ics monotonic representing goals mcdermott  proposed past far      agents require goals changed come fujiwara honiden       nonmonotonically example initial goal saeki  nonmonotonic versions temporal logics                                                  theagentmaybetobealwaysinstateswhere           ﬁrst extends autoepistemic logic temporal operators      true agent later realize certain does explore issues elaboration tolerant represen      conditions exceptions ok states tation exceptions weak exceptions second            true paper propose simple ex semantics issues mentioned ﬁrst      tension ltl nltl allows                                                          paper start developing nonmonotonic      nonmonotonic speciﬁcation goals study                                                        temporal logic based linear temporal logic ltl      properties nltl consider transla  brieﬂy mention nonmonotonic versions branching      tion nltl logic programs study                                                        time temporal logic designing nonmonotonic ver      relationship nltl logic programs                                                        sions temporal logics focus overall aim                                                        having nonmonotonic goal languages follow    introduction motivation                        path nonmonotonic modal logics autoepistemic  specifying goals agents bacchus kabanza  logic focus speciﬁc aspects knowledge represen  niyogi sarkar  baral et al  baral zhao tation need nonmonotonicity borrow speciﬁc    used temporal logics linear techniques allow nonmonotonicity  temporal logic ltl branching time temporal logics ctl∗ important use nonmonotonicity ability  πctl∗ extensions logics express normative statements “normally q’s  monotonic specifying goals agents property p” resonates need non  need able specify goals nonmonotonically monotonic goal languages need specify  example initially agent given goal having “normally state satisfy property p” accompa  true through trajectory reaching later agent nying normative statements various kinds excep  decide weaken goal certain exceptional tions example consider age old normative statement  cases does true way “birds normally ﬂy” kind exception called “strong  agent replace original goal revised goal exceptions” statement “penguins birds  coming completely new revised goal obtaining ﬂy” kind exception referred  revised goal doing surgery original goal spec weak exceptions “injured birds weak exceptions  iﬁcation violate principle elaboration tolerance mc normative statement birds ﬂying” wounded  carthy  use existing temporal logics birds know ﬂy  choice need goal speciﬁcation need similar exceptions respect goal speciﬁcations  language allows update goal speciﬁcation normative goal speciﬁcation specify “normally  simply adding new statements original speciﬁcation state satisfy property p” strong exceptions  goal speciﬁcation language nonmonotonic states satisfy speciﬁc conditions weak ex    motivation having nonmonotonic goal spec ceptions states satisfy speciﬁc  iﬁcation language allows easy updating through adding conditions  want agent directive papers giannotti et al   speciﬁc complicated takes account stein morgenstern  macnish fallside  possible exceptions beginning titles like dealing nonmonotonic temporal log  know exceptions initially good ics quite related                                                    ijcai                                                       accommodate introduce special nota nonmonotonicity proposed language  tions                                                formal deﬁnition language semantics                                                          rest paper organized follows    • rφ                                                        ﬁrst nonmonotonic goal language nltl based ltl    • rφ                                            ﬁrst overview temporal logic ltl  intuitive meaning ﬁrst normally φ holds section  propose syntax semantics new lan  state label lists weak exceptions intu guage nltl properties section   itive meaning second normally φ holds study relationship nltl logic programs  state label lists strong exceptions    brieﬂy discuss use similar approach                                                        develop nonmonotonic versions temporal logics    theroleofr similar role labeling defaults    ∗                                                        ctl   normative statements representing logic  programming label used parameter  respect ab predicates                       background goal representation using    nonmonotonicity goal languages ltl  having incomplete knowledge states section summarize linear temporal logic ltl  speciﬁer quite precisely knowing wants means sequence actions plan  use operators negation failure opera respect goal ltl syntactically ltl formulas      tor ‘ ’ logic programming issue different propositions propositional connectives ∨ ∧  inferring assuming negation default       ¬ future temporal connectives    uwe    hand borrow idea program formally deﬁne truth values temporal formulas  completion logic programming specify interpret respect trajectories trajectory inﬁnite sequence  conditions listed corresponding label states  set conditions written                                                        deﬁnition  let p atomic proposition f ltl                   ψ      ψk                                    formula  specify strong exception weak exception condi f  pf∧ff∨f¬ff  tions respect given overall condition                                                                                  fffuf  associated ψ ∨  ∨ ψk allowed  add additional conditions example r  ψk                                              added set overall condition associated  ψ ∨ ∨ ψk ∨ ψk                   deﬁnition  let σ given ssskskbe tra                                                                                               ≥      illustrate respect example jectory denote propositional formula sj  denote                                                        state fisi   denote ltl formulas                                                example  suppose initially want maintain true    •        reaching know aim   sjσ    iff true sj  maintain strict just know • sjσ  ¬f iff sj σ   der conditions truth necessary                                                          • sjσ  ∨ iff sjσ  sjσ   realize true need  true                                                 • sjσ  ∧ iff sjσ  sjσ                                                           •                    initial goal written language g     sjσ      iff sjσ    rp∧s says maintain reach • sjσ  iff skσ  fforallk ≥  ing strong exception happens states                                                          • sjσ  iff skσ  fforsomek ≥  need maintain states weak excep  tion speciﬁed r  q                     • sjσ  iff exists ≥                                                            skσ  ≤ ik siσ     informally illustrate nonmonotonicity mani    fested example ﬁrst deﬁne language  monotonic                                           bacchus kabanza  baral et al                                                         planning respect ltl goals formalized  deﬁnition  logic query language assumption complete information ini  entailment relation  monotonic                                Φ                                                       tial state actions deterministic let tran   implies ∪                      sition function deﬁnes transitions states                                                                Φ         respect example  let g rp ∧ s actions siak sj iff action ak transits agent    r  q intuitively  ∪  equivalent state si state sjlets state designated  p∨q∧s ltl ∪t   illustrates initial state let aan sequence deterministic                                                        actions effects described domain description    unlike traditional exceptions weak exceptions want truth ltl formulas deﬁned respect  speciﬁer predecided control particular goal reference state trajectory inﬁnite se  fragment weak exception exception quence states deﬁne correctness plan consisting                                                    ijcai                                                     ﬁnite sequence actions respect initial state deﬁnition  atom dependency let e  f bearulein  ltl goal ﬁnite sequence states obtained ap nltl formula ∈ occurs body e  f  plying plan initial state appended depends dependency relation transitive  state inﬁnitely                                          trajectory corresponding aan                                                        deﬁnition  loop free nltl formula loop free  sequence ss satisﬁes following conditions                                                        formula atom depends      si Φsiaifor   ≤  ≤  −  sj  sjforj ≥                                   example   following formula  deﬁnition  plans respect ltl goals se                                                                         g rpuq  quence actions aan plan initial state                                                                                  ltl goal fifs σ  fwhereσ trajectory                   corresponding aan                                       r rt    role ltl specifying planning goals                                                        loop free depends depends  studied examples bacchus  kabanza  niyogi sarkar  baral et al  nltl speciﬁcation loop free nltl formula    nltl nonmonotonic extension ltl              semantics nltl speciﬁcations  section extend ltl capture nonmonotonic mentioned earlier deﬁne semantics nltl  quirements specifying goal new language speciﬁcations following approach taken reiter  nltl stands nonmonotonic ltlweﬁrstdeﬁne  reason actions compile nltl speciﬁcations  syntax semantics language             ltl theories    syntax                                           deﬁnition  given loopfree nltl formula                                                        ltl speciﬁcation  translate ltl formula  designing language asked ques trt  follows  tions                                                                         ···         • syntactically goal temporal formula  let    fn  rules                                                            head ∈g∪r construct formula      revise new goals just adding ∨  ∨···∨                        original formula                                           fn                                                             atom set rules head    • refer speciﬁcation      speciﬁcation                                 atom depends atom aandea deﬁned                                                            replace occurrence af ea ∨  ﬁrst borrow ideas reiter’s approach                                                            ea revised formula called ea  reason actions reiter  compiles  speciﬁcation classical logic classical logic  atom depends atom aandea deﬁned  monotonic reasoning respect speciﬁca replace occurrence af ea  tion language nonmonotonic nonmonotonicity ea revised formula called ea  achieved through compilation process second  step  step  recursively atoms  borrow ideas logic programming similar logic depending ee occurs  program consisting set rules consider each nltl                                                                                                    formula set rules use rule labels  finally  replace remaining                                                                                                 example  link rules temporal formula  revised goal formula tr   deﬁnition  let randp  three disjoint sets                                                   atoms let r atom p atom                                                         example   let consider nltl formula follows  ∈g∪r  f formula deﬁned  f  pf∧ff∨f¬fff                        g rp ∧ rq                ffufrf rf                         r rv    nltl formula set rules e  fwheree                       r  t  headandf body rule e  f                                       r  s  nltl formula special symbol stands                                                        according deﬁnition know initially  ﬁnal goal formula set labels used                                                        rp ∧ rq errv ∨ ers  deﬁne corresponding strong exceptions weak exceptions                                                        replacing formulas according dependence rela  aformulaf  deﬁnes conditions atoms                                                        tions egp∨rv∨t∧r qp∨  ditions intuitively rf means normally                                                        ∨ ∧ rq rules head  true weak exceptions denoted through rf                                                        egp∨s∨t∧qfurthertrt     p∨s∨t∧q  means normally true strong exceptions  noted through weak strong exception conditions loopfree nltl formulas called nltl speciﬁca  corresponding deﬁned through rules    tion following properties                                                    ijcai                                                     proposition  given nltl speciﬁcation  trt  let consider example illustrate use nltl  deﬁned ltl formula                              example   professor asks robot make photo    given property deﬁne plan satisﬁes copy document fetch cup coffee  nltl goal                                           fore robot goes ofﬁce professor ﬁnds  deﬁnition  let nltl speciﬁcation given state coffee sold plan satisfy goal given  trajectory σ  ss ··· sk ··· σ  robot professor like weaken goal  nltl σ  trt  respect ltl       following three possibilities  deﬁnition  plans respect nltl goals let   happy cup tea instead  nltl speciﬁcation sequence actions ···  just needs copy document willing  plan initial state nltl goal forget coffee  σ trajectory corresponding ··· anand                                                      robot come ofﬁce document   σ   nltl                                       copied looking coffee later    nltl speciﬁcations strong excep professor using nltl past experience  tions weak exceptions make goal knows revise goal especially  weaker accepting plans adding new rules respect coffee express initial goal  proposition  nltl speciﬁcation ∪ if  plan respect does strong  g  rcoffee ∧ copy ∧ office  exceptions weak exceptions plan                            ∧     ∧                                                                equivalent satisfying coffee copy office  respect ∪                                ltl    temporal logics ltl different property later according new conditions new alter  consider ltl goal formula set tem natives professor revise original goal adding  poral formulas add new formulas existing theory following three rules                                             plan respect ltl goal ∪  adding new rule r  tea makes overall  plan respect  ltl adding formulas goal equivalent coffee∨tea∧copy ∧office  reduces best leaves unchanged set plans satis ltl  fying nltl does strong exceptions                                                                        true    ⊥       false  adding rules enlarges set plans satisfying  let denote denote      adding new                                                                r     leaves unchanged case rule    makes overall goal equivalent                                                            coffee ∨   ∧ copy ∧ office  nltl theory strong exceptions                                                        ltl                                                            equivalent copy ∧ office ltl  example  consider problem example  initial                                                           adding new rule r  coffee∧ office  nltl formula speciﬁcation given                                                            makes overall goal equivalent coffee∧copy ∧                                                            office∨copy∧office∧coffee∧office                   g  rp ∧ s                                                            ltl allows agent document  according deﬁnition rules head copied ﬁrst waiting coffee  sj σ  nltl iff sjσ  ∧  ltl                                                    want tea instead coffee know    suppose add  given          initially subtask getting coffee replaced                                                        different goal initial formulation                        r  q                                                                g  rcoffee ∧ copy ∧ office  according deﬁnition know egrp∧s                                                        add new goal r  tea goal  erq revision makes egp   ∨                                                       equivalent tea ∧ copy ∧ office ltl  ∧ sjσ ∪  nltl iff sjσ                                                                     copy  ∨ ∧ ltl                                   note “   ” satisﬁed domain    check plan satisﬁes ltl formula ∧ professor does want weaken condition  satisﬁes ∨ ∧ does strong robot way getting things excep  exceptions proposition  holds             tions happen nltl reﬁne                                                        goal    let deﬁne mean say                                                                                                   rf  ltl nonmonotonic ltl monotonic  im note rule formula substring                                                                        r  ⊥  plies ∪t  sets ltl temporal removing rules affect semantics                                                                                    rf  formulas ltl temporal formula consider formula substring                                                                                     r  ⊥  following entailment nltl                        formula remove rules    affecting                                                        semantics formula                            trt         deﬁnition  entailment                        nltl speciﬁcation ltl formula       design decision consciously unlike logic                                                        programming default strong exceptions  proposition  entailment deﬁnition  non  weak exceptions empower initial goal speciﬁer  monotonic                                            make decision                                                    ijcai                                                       complexity nltl                                 following rules corresponding temporal oper                                                                 complexity various problems planning ator program  spect nltl speciﬁcations level poly nfirsts sf ← futures  nomial hierarchy respect ltl speciﬁcations                                                                                  futuressholdssf  loopfree criteria fact  polynomial number special symbols like en  firsts sf ←   nfirsts sf  sure nltl speciﬁcation converted ltl                      futures sholdssf  speciﬁcation polynomial time increase size nholdss fuf ←  firsts sf futures  polynomial                                                                                  futuressholdss ¬f                                                                         ←                      relation logic programs                               holds      nholds   consider relation nltl goals logic                                               programs especially respect planning use tempo deﬁnition  encode nltl formula logic  ral domain knowledge planning ﬁrst proposed bac program denoted lp  follows                          chus kabanza   planning temporal logic   each rule e  f  create list atoms                             ltl studied neljanko niemel¨a  set rule labels occur atom                 son et al   section translate domain occurs multiple times include times  scription goal speciﬁed nltl logic program list revise set new formulas simplifyf  consider relations stable models translated  programs original planning problems follow • atom rk list head                                                                                                       ing translation  jevenifsi sj trajectory rule replace occurrences rk fk  referring state assign different labels rkfk fk                                                          • suppose ith atom list ejifit  deﬁnition  let σ given ss ··· sk ··· trajec                                                            occurs formula ejfj replace  tory denote atom sj denote state fandf denote                                                                          ejfj     ej  ltl formulas elements atoms subformula          deﬁne encoding σ called encodingσ wheret • suppose list atoms eiei ··· eil remaininfor  nltl formula encoding consists following  mula calculate cartesian product sets  parts                                                    sth set eisfis sth atom eis occurs                                                            formula eisfis replace each occurrence     ≤ rule                                                            eisfis eis fis according value                                                                                                                           nextsisi ←                         element cartesian product                                                            different combinations consider each combination                                                                                          ≤ ij rule                      instance simplify  revised formula                                                                                          ←                   future sisj                        add rule    true state rule                   holdss ← holdss simplifyf                        holdssip ←                    lp  each formula simplifyf         si ith state trajectory corre example  suppose rule nltl goal fol      sponds state                            lows    following rules corresponding ¬ ∨and∧    r rf ∧ rh ∧ rs ∧ rt      program                                                        rules head rules           holdss ¬f ←   holdss            head rules head need                                                                                   lp         holdss ∨ ← holdss               add following  rules         holdss ∨ ← holdss                                                                        ←           ∧   ∧   ∧          holdss ∧ ← holdss fholdss        holds      holds                                                                  holdss ←   holdss ∧ ∧ ∧    following rules corresponding temporal operators holdss ←   holdss ∧ ∧ ∧        program                                                              holdss ←   holdss ∧ ∧ ∧        holdss f  ←   holdssfnexts                                                          note translated program atom         holdss ←   holdssf futures                                                        holdss ∧ ∧ ∧ atoms         holdss ←   holdss ¬f            transition deﬁned rules                                                    ijcai                                                     
