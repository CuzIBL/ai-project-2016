   automatic synthesis new behaviors library available behaviors                      giuseppe giacomo                            sebastian sardina          dipartimento di informatica sistemistica        department science              universita di roma “la sapienza”                     rmit university                          roma italy                             melbourne australia             degiacomodisuniromait                      ssardinacsrmiteduau                        abstract                          devices question arm used paint block                                                        central come know arm ran      consider problem synthesizing fully                                                        paint maybe sensor light finally cen      controllable target behavior set available                                                        tral partially knowledgeable shared      partially controllable behaviors execute                                                        environment components ought execute      shared partially predictable fully ob                                                        devices possesses nondeterminis      servable environment behaviors represented                                                        tic model real environment observability      sort nondeterministic transition systems                                                        question central al      transitions conditioned current                                                        ways guarantee speciﬁc deterministic overall behavior      state environment represented non                                                        partially controlling available devices components      deterministic ﬁnite transition                                                        stepbystep manner instructing      hand target behavior assumed fully                                                        action execute observing outcome      deterministic stands behavior                                                        device used environment      needs guarantee      mally deﬁne problem abstract frame   hard setting recast                                                        variety forms context agentoriented pro      work characterize computational complexity                                                                           propose solution appealing satisﬁability gramming    intelligent agent control exe      propositional dynamic logic   cution set predeﬁned nondeterministic agent plans                                                        order realize desired deterministic planintention      optimal respect computational complexity                                                                                                         claim problem novel    turn obtained planning    simi                                                                                                   best knowledge instantiated mul larly comes plan coordination   think                                                        coordinating merging approximate models multiple      tiple speciﬁc settings different contexts      linked different research areas ai agents’ plans global fully deterministic multiagent                                                                                                           cluding agentoriented programming cognitive  plan context webservice composition                                                           existing web services composed internet      robotics control multiagent coordination plan      tegration automatic webservice composition implement new complex web service                                                        cases challenge automatically synthesize fully    introduction                                       trollable module set partially controllable existing  imagine intelligent built variety different modules executing partially predictable environment  components devices operating performing actions setting technical contributions paper  shared environment example consider threefold formally deﬁne problem  case blocks world scenario different kind ver abstract framework second devise formal technique  sions robotic arms paint clean dispose blocks perform automatic synthesis fully controllable module  imagine central possesses show technique proposed sound complete  information logic components terminating lastly characterize computational com  devices—eg particular arm type paint clean block plexity problem show proposed technique  picking type arm capable optimal respect computational complexity  painting blocks knowledge devices  partial internal logic potentially expose  setting  nondeterministic features instance let start deﬁning synthesis problem   information regarding use paint painting arm subject research end develop abstract  unable predict arm framework based sort ﬁnite state transition systems  run paint painting action does arm  used paint recharged nonethe particular  seen simpler variant setting  central observability state studied environment deterministic behaviors                                                     ijcai                                                    environment  assume shared observable en  say behavior sgδbf en  vironment provides abstract account observ vironment eisdeterministic environment state  able effect preconditions actions giving exist distinct transitions gas  account consideration general gas δb gege notice  incomplete information actual effects precondi given state deterministic behavior legal action  tions actions allow observable environment state know exactly state  nondeterministic general way incomplete behavior words deterministic behaviors  information actual world shows nondeterminism fully controllable through selection action  formalization                                 form case nondeterministic ones    formally environment aeeδe  character  ized following ﬁve entities                   runs traces  given behavior sgδf    •ais ﬁnite set shared actions                 environment  aeeδe   wedeﬁnethe    •                                                   runs possibly inﬁnite alternating sequences      ﬁnite set possible environment states                                        •   ∈                                               following form  ···where        initial state environment                                                                                    • δe ⊆ ×a×e    transition relation states                                                                 δe  holds action performed state                                                                                       lead environment successor state        • exists transition  ∈ δe                                                          •                        ∈    note notion environment shares lot sim exists transition δbsuch                                                                 true  ilarities socalled “transition system” action lan ei     guages  think using kind run ﬁnite form  malism compactly represent environment setting sea ···asethens ∈                                                           apart runs interested traces gener                                                        ated behavior trace sequence pairs ga  behavior  behavior essentially program agent    ∈                    ∈a  logic available device component guard action                                                        form ga · ga ··· exists run  program leaves selection action perform        ···           true  agent precisely each step pro  ei−                                                        trace ga ···ga ﬁnite  gram presents agent choice available actions                 ···         ∈  agent selects action executed exists ﬁnite run     obviously behaviors intended executed traces deterministic behaviors particular  executed environment cf initial fragment trace leads single state  equip ability testing behavior sense deterministic behavior  ditions guards environment needed seen speciﬁcation set traces    formally behavior sgδbf envi  ronment characterized following entities bbn formed                                                                                   • ﬁnite set behavior states              observable environment  predeﬁned nondeter                                                        ministic behaviors bi called available behaviorsa    • ∈ single initial state behavior                                          •                                                  conﬁguration tuple ssne denoting      set guards boolean functions snapshot behavior bi state si      →true  falsewheree  set environ                                                              environment  state assume      ment states                                   speciﬁc component called scheduler able acti    •    ⊆   ×   ×a×      δb           behavior transition relation vate stop resume behaviors each point time      set actions e—we ×a      components tuples label transition                                                        problem   problem interested fol    • ﬁnally ⊆ set ﬁnal states behavior                                                        lowing given bbn determin      states behavior stop execut                                                        istic behavior called target behavior synthe      ing does necessarily                                                        size program scheduler target behavior  observe general behaviors nondeterministic realized suitably scheduling available behaviors  sense allow transition order make precise need clarify  action compatible guards evaluating basic capabilities scheduler scheduler  truth value result central mak ability activatingresuming available  ing choice action execute cer haviors instructing execute action  tain choices later depends possible current state taking account envi  transition actually executed words non ronment scheduler ability keeping track  deterministic behaviors partially controllable runtime current state each available behavior      note kind nondeterminism devilish nature simplicity assume scheduler activatesresumes  capture idea through choice actions behavior each step approach extended  fully control behavior                    case available services activated each step                                                     ijcai                                                                                                                                           technically capability called observability • ∈htp wheressne   states available behaviors choices conﬁguration  possible  observability natural choice • a action ai i  context available behaviors suitable ab scheduler states action a  stractions actual behaviors rea history executed behavior bi                                                                                       son make states partially unobservable details • si ga si ∈ δi ge truethatis                                                                                                          hidden directly abstract behavior bi evolve current state si  havior exposed possibly making use nondeterminism                                                                                                              state si wrt current environment state       ready formally deﬁne synthesis        •       ∈                                                             δe  environment  problem  let                         evolve current state e state e  aeeδe    environment bi                                                                                         • si     si sj   sjforj       available behaviors let tar   δ                                                behavior bi allowed perform step  behavior ssδf    history alternating sequence trace ﬁnite ends                                           ·  ·   actions guards satisﬁed  ﬁgurations actions form ssne                                            −      −                   histories htp end behaviors  sne  ··· sn  · · sne                                                      ﬁnal state finally say scheduler program  following constraints hold                                                                                                                     realizes target behavior realizes traces           • si  si ∈n each behavior starts order understand deﬁnitions let observe      initial state                             intuitively scheduler program realizes trace           •   environment starts initial state long guards trace satisﬁed choose    • each step  ≤ ≤  exists ∈n step available behavior perform requested ac                                          tion certain point guard trace satisﬁed      si gi si   ∈ δi                                                   current environment state consider trace      sj    sj  each step history                                                      ﬁnished ﬁnal state      behaviors legal transition available behaviors nondeterministically choose      according transition relation δi transition actually perform executing action      ones remained                         scheduler program scheduler    •            ≤   ≤                ∈      each step    wehavethat            able continue execution ac      δe  environment legal transi tion matter activated behavior envi      tion according transition relation        ronment evolve each step finally requirement    scheduler program function  h×a     →     makes sure available behaviors left ﬁnal state  nu given history ∈hwhere set ﬁnite trace reaches end guards satisﬁed  histories deﬁned action ∈a observe general scheduler program require  perform returns behavior actually behavior index inﬁnite states show later scheduler  scheduled perform action observe realizes target behavior does exist exists  function return special value “undeﬁned” ﬁnite number states note scheduler  technical convenience make total function observe states available behaviors order  turning values histories decide behavior select given action  actions behavior perform given history requested target behavior makes scheduler    deﬁne scheduler program composi programs akin advanced form conditional plans   tion realizes target behavior—a solution prob  lem point target behavior  example  deterministic transition behavior completely come original blocks world example  characterized set traces set order illustrate abstract framework developed  ﬁnite sequences actions faithful transitions previous section complete scenario depicted figure  ﬁnite sequences addition lead ﬁnal state  aim paint existing blocks                        ·    ···    given trace      target blocks processed cleaning painting  havior say scheduler program realizes trace fore processing block necessary prepare                                        ∈h     h  iff  histories tp  tp example moving special processing location                              deﬁned ehtrue en furthermore block disposed                                         vironment state eh hwehavethatp    block prepared processing finally cleaning                                                    painting require resources water  htp nonempty set histories htp  inductively deﬁned follows                        paint respectively assume tanks                                                        water paint respectively recharged si            •htp   ssne                        multaneously pressing recharging button    •h                      tp set  length histories recall target behavior deterministic                               form ·  · sn          seen speciﬁcation possibly inﬁnite set traces                                                     ijcai                                                     arm  dispose      paint clean arm       clean       synthesis technique        clean                                      ready investigate check exis                         prepare  paint   prepare        recharge                                        tence scheduler program realizes target behavior                             recharge   dispose                                              actually compute start     environment         target                     preliminary considerations computational com       dispose                      prepare                    paint                           plexity expect result muscholl                                               prepare      clean              paint            walukiewicz  easily rephrased                             recharge        recharge                                clean   framework gives exptime lowerbound     recharge    clean       prepare                dispose   paint             precisely let environment envi              paint                      ronment form aeeoδe wheree    eo        dispose     clean                               observable environment single state                                                        δe  eae  ∈a preconditions         figure  painting blocks world scenario    actions actions effect environment                                                        let deterministic guardless behavior behav                                                        ioroftheformb   gtrueδbfwheregtrue    desired target behavior want achieve                                                        constant function returning trueandδb func  follows block prepared processing tional each state ∈sand action ∈athereisat  block question painted right away                                                                                 state  ∈ δb muscholl  painted cleaned—some dirty blocks need walukiewicz’s result stated follows  washed painted note decision  block needs cleaned lays outside frame theorem  muscholl  walukiewicz  checking  work block painted disposed finally existence scheduler program realizes target  recharging button pushed target behavior deterministic guardless behavior consisting  “conservative” recharges tanks environment set available deterministic  block processed                             guardless behaviors exptimehard    think target behavior arm checking existence scheduler program  like arm does exist general framework exponential time  reality instead different arms available show problem actually exptimecomplete  ﬁrst arm cleaningdisposing arm able clean resorting reduction satisﬁability propositional dy  dispose blocks second arm capable preparing namic logic pdl reduction ex  cleaning painting blocks arms able press ploited generate actual scheduler program  recharge button reﬁll tanks                   ﬁnite doing extend approach origi    composed environment nally developed context service composition deal  arms shown figure  let note environments deterministic guardless behav  interesting points environment provides gen iors dealing nontrivial environment especially  eral preconditions actions domain dispose dealing nondeterminism available behaviors  executed prepare action environ requires solving subtle points reﬂects sophisti  ment includes information water tank cated notion scheduler program needed  water tank  water tank notice conceiv  propositional dynamic logic  able clean block state method does propositional dynamic logic pdl modal logic specif  rely water arm does use water ically developed reasoning programs   clean blocks environment syntactically pdl formulas built set atomic  fact state second observe propositions set Σ atomic actions  second arm prepare block ﬁrst arm dis                                                                                                       pose block lastly interesting remark comes φ −→ ¬φ   φ ∧ φ  φ ∨ φ  φ → φ   arm b’s internal logic partial     φ  rφ  true  false                                                                                        ∗  information painting block arm evolve non −→   ∪    φ  deterministically different states intuitively                                                        atomic proposition regular ex  arm evolves state soon paint tank                                                        pression set actions Σanda atomic ac  arm evolves state arm                                                        tion Σ pdl formulas composed atomic  runs paint clean blocks tanks                                                        propositions applying arbitrary propositional connectives  eventually recharged notice unlike arm aarmb                                                        modal operators  φ rφformula φ means  does require environment state clean                                                        exists execution sequence actions  block cleaning mechanism does rely water                                                                            forming regular expression reaching state φ    aim automatically synthesize scheduler program  realize target behavior  making use fact muscholl walukiewicz show exptimehardness  available behaviors arms considering en setting service composition studied  whereall  vironment section                  available services deterministic                                                      ijcai                                                    holds formula rφ intended mean terminat each bi each ∈a assertions encode  ing executions reach state φ holds          current environment state available    pdl formula φ satisﬁable exists model behavior bi state selected execution  φ—an interpretation φ true checking satisﬁability action execia true each possible  pdl formula exptimecomplete                  atransition bi guard true ewe    pdl enjoys properties particular possible asuccessor models Φ   ﬁrst tree model property says • ∧ ∧ execia → afalse each environment state                                                                                                        model formula unwound possi each state bi                                                                                   bly inﬁnite treeshaped model considering domain elements wehavethats  ∈ δi getrue                                                                    nodes partial functions interpreting actions edges ∈ δe  states current environment  second small model property says state bi current state selected  satisﬁable formula admits ﬁnite model size par execution abuta executed bi  ticular number domain elements exponential asuccessor models Φ  size formula                      • ∧¬execia  →  each state bi each                                                            action  assertion encodes behavior bi    reduction pdl                                                                                                      state selected execution athen     sb                                  let       beasystemwhere       eeδe         performed available behavior bi  environment bi sisigiδifi avail does change state  able behaviors eandletb ssδf  target behavior build pdl addition formula φadd general  mula Φ check satisﬁability follows         straints obtained conjunction                                                                                                actions Φ actions easatomic  •  →¬s    pairs states biandfor  propositions                                   ∈ stating propositions represent                                                                                 • atomic proposition each state ewhich  ing different states disjoint                                                          •   ↔             ∈               intuitively denotes state                   s∈fi sfori      highlighting                                                                           • atomic proposition each state bifori ∈ ﬁnal states       denoting bi state       • undef  →  aundef  each action ∈ Σ stating                                                                                            undef    • atomic propositions fifori ∈ denoting    situation reached holds                                                            undef      bi ﬁnal state                                 holds successor situations                                                          •¬undef   ∧   true →            exec           ∈    • atomic propositions execiafori ∈n ∈                         i∈n ia each      denoting executed behavior bi denoting unless undef true performed    • atomic proposition undef denoting reached available behaviors se      situation scheduler left undeﬁned lected execution                                                          • exec   →¬exec                ∈              let build formula Φ representing tran  ia         ja each                                                                         ∈a  sitions target behavior construct formula φ each  stating available behavior  conjunction each      selected execution                                                          •    →    • s∧e → true∧as each transition s ∈   i∈n fi stating target behav      δ getrue encoding target  ior ﬁnal state available behaviors      havior atransition guard satisﬁed finally deﬁne Φ      going state state s                                                                                                  • ∧ → aundef  each      init ∧ uφ ∧      φi ∧ φadd                            ∈ δ getrue takes                    i∈n      account target behavior perform                                                              init          ∧    ∧   ∧···∧      atransition                                         stands    sn represents                                                        initial state environment behaviors bi    representing transitions each available behavior                       ∗                                                        including target  a∈Σ a  acts  bi construct formula φi conjunction                                                        master modality isusedtoforceφ∧       φi∧φadd    •                                                                                      i∈n      formula                                     true point model note                                                     s∧e∧execia→       ∧e ∧a     ∧e   complex program appears pdl formula Φ                  se∈Δ           s e∈Δ        state main result                                                                                 Φ      Δs        ∈ δige   theorem  pdl formula   constructed                        true  ∈ δe  each environment state satisﬁable iff exists scheduler program                                                        bbn realizes target behavior    paper concerned compact representa  tions states environment behaviors bihow proof sketch “if ” pdl treemodel property  observe states succinctly represented Φ satisﬁable model tree  binary format general exploit representation shaped each node tree correspondence  Φ corresponding compact formula  history truth value assignment                                                     ijcai                                                    
