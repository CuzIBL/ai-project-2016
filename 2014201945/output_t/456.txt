         representing flexible temporal behaviors situation calculus                                        alberto finzi    fiora pirri                                  dis universita di roma “la sapienza”                                    salaria  rome italy                                        ﬁnzipirridisuniromait                        abstract                          cope ﬂexible behaviors cognitive capabilities                                                        enabling reasoning processes combined      paper present approach represent temporal flexible situation calculus present      ing managing temporallyﬂexible behaviors  new approach ﬂexible behaviors exploits ex      situation calculus based model time   pressiveness situation calculus sc        concurrent situations deﬁne new hybrid  computational concerns related time monitored      framework combining temporal constraint reason   temporal network obtained transformation added      ing reasoning actions show constraints embed concepts elaborated cbi      constraint based interval planning approach   framework extend sc concurrency time ex      imported situation calculus deﬁn  tensions sc time explored        ing temporal concurrent extension ba  deploying allen’s interval relations       sic action theory finally provide version straining language represent concurrent timelines      golog interpreter suitable managing ﬂexible framework conjugate advantages sc      plans multiple timelines                      expressive power cbi paradigm aim                                                        twofold hand possible intro                                                        duce separated timeline each component dynamic    introduction                                       each entity autonomous  realworld domains robots perform multiple tasks robot concurrency ﬂexibility  simultaneously rapid alternation employing di clearly addressed hand causal rela  verse sensing actuating tools like motion navigation tionships processes dealt sc lan  visual exploration mapping modes percep guage provides clear framework preconditions  tion ensure suitable multipletask performance postconditions actions simple solution  approaches   recommended executive frame problem show cbi perspective  control processes supervise selection initiation execu arsenal speciﬁcations terms ﬂexible time al  tion termination actions ideas new ternation constraints resources optimization failure recover  paradigm proposed called constraint based ing tasks scheduling imported sc   terval planning cbi essentially amalgamates plan  deﬁning temporal concurrent extension ba  ning scheduling resources optimization reasoning sic action theory related approaches       competing activities involved ﬂexible  finally provide version golog language  current plan    cbi approach simi interpreter manipulating ﬂexible plans multiple time  lar approaches emerged planning community lines  shown strong practical impact comes real world  applications rax  ixtet  inova   preliminaries  rmpl   standpoint cognitive  robotics important ensure optimal performance  situation calculus golog  practical applications provide logical framework situation calculus   sorted ﬁrst order lan  ensuring coherence actions preconditions effects guage representing dynamic domains means ac  coherence emerges core issue tions situations ﬂuents actions situations ﬁrst  trol processes negotiate resources allocation individual order terms situationterms stand history actions  perceptualmotor cognitive processes exec compound binary symbol doa situation  utive establish priorities individual processes obtained executing action sequence  allot resources multipletask performance dis dynamic domain described basic action theory bat    cussion    different concurrent  Σ ds  dssa duna dap refer reader   interleaving behaviors subject switchingtime criteria complete introduction sc temporal concurrent sit  current situation needs lead new integration paradigm uation calculus csc earlier introduced   paper suggest reactive aspects   actions instantaneous time selectedby function time durative actions considered location  processes   represented ﬂuents durationless  actions start terminate processes exam  atp          gopp      atp  ple goinghill started action startgohill engine                               ended endgohill                             stop           running           stop    golog  golog situation calculusbased programming  language denoting complex actions composed prim      figure  timelines constraints  itive simple concurrent actions deﬁned bat   golog programs deﬁned means standard  sostandard algollike control constructs action se planning problem cbi given cbi model mcbi  quence ii test φ iii nondeterministic action choice planning problem deﬁned pcbi  mcbi pc pc  pp iv conditionals loops procedure calls candidate plan representing incomplete instance  example golog program                        plan candidate plan deﬁnes initial situation                                                        goals particular pc consists  planning horizon   ¬athill                                 ii set temporal properties satisﬁed each state      ¬∃xgoingx πt   startgohill                                                        variable xi ∈ atp ends      semantics golog program δ sc formula  timeline figure  iii set precedence constraints                                                      ﬂuents pk ≺ pk hold timeline  doδ  meaning possible situation reached  δ executed example doap  atp ≺ atp iv set constraints rrij  dop doa ∧ ossa deﬁnes execution associated temporal properties pij mentioned  action followed program details timelines ﬂuent pijx mentioned candidate plan  sc golog refer reader              fully supported  associated constraints rij                                                        satisﬁed figure  atp atp fully sup    constraint based interval paradigm               ported candidate plan said complete plan  constraint based interval framework cbi   each temporal property each timeline fully supported  known framework temporal planning systems com ii timelines fully cover planning horizon given  bining temporal reasoning scheduling including planning problem mcbi pc planning task provide  rax   ixtet  inova cbi paradigm sufﬁcient plan  complete plan maximum  accounts concurrency time action instances ﬂexibility planner minimally ground temporal  states described terms temporal intervals linked variables allow online binding values  constraints refer timelinebased version cbi   domain behavior seen continuous inter  temporal flexible situation calculus  action different components each component repre section present temporal flexible situa  sented state variables single state variable relevant tion calculus framework tfsc integrates cbi  feature components represents concurrent thread paradigm introduced language sc  states activities uniformly treated temporal  intervals history states state variable actions deﬁne partition αv ∈ set  period time called timeline figure  illustrates actions according different components  timelines state variables repr engine naviga care example component pantiltunit  tion processes mobile robot initially robot atp manages actions like startscan spts endscan epts  stop starts gop engine running induce partition introduce type operator ν  engine stop rover arrives atp tem extend sc foundational axioms following deﬁ                                                                        sn  poral constraints activities atx holds nitions let  hi set specifying types  stop holds gox followed aty            actions assume set ﬁnite each action                                                        following holds                                                                                                     domain constraints cbi model   mcbix    hia∧hja  →¬a    ij νaxνa  deﬁned set xx     xn state variables wn                                                                      ≡   hiax ∧ hia unique  each component xloc xeng fig  ii actions indices stay different com  set      jn st each xi set ji collects ponents names denotes action variable denotes  associated temporal ﬂuents pijy atx gox action function  location state variable fig  iii set temporal  constraints rrij usually called compatibilities each situations typization actions induces partition  temporal ﬂuent property compatibility relation set situations set histories histo                        ij                             ries streams situations timelines typization  rij representing possible legal relations  temporal ﬂuents temporal property proceed inherited situations follows  follow cotemporal pij legal plan ∀a νa  νdoa  speciﬁed terms metric version temporal relations ∀a νa  νs ≡  la allen  arrows fig  illustrate compat ∀ass  doa s→νa  νa ∧ νa  νs  ibility associated ﬂuent atx meets gox                                            atx during stop  each component ∈ timeline speciﬁed intervals intervals mention temporal variables  tory actions concerning evolution set time free assigned according speciﬁed  lines set situations sc  svv ∈ called situation set behaviors suited representing  class spanning different types words ∃ss ∈ sc ﬂexible behaviors paragraph show embedding                                 wn                     intervals sc leads construction temporal  abbreviates ∃s    sn ∃a     doai si∧                                                      network following formula Ψ speciﬁes conditions  νa   νs ∧v      νa   νs  νs              jij                         process hold induced timeline t−  type situation corresponding component ∈                                                                                              arg  nc sc class equipped following ≤c rela  tion                                                             −                                                                     Ψix   sc  ∃sisisi si ∈ sc∧          sc ≤c sc ≡ ∀s ss ∈ sc ∧ ∈ sc →s ≤                                                                                                           −                                                                    si ≥ doepi ti  si  dospi ti  si ∧    doav sc denotes sequence resulting adding                                                                                                     ¬∃t ssi ≥ doep ≥ si  action av typecompatible situation mentioned sc                         time   time sorted domain sc let abbreviate usual precedes meets  noted section  extend time selection function overlaps during starts ﬁnishes equals deﬁned  actions situations  different notation temporal intervals literature started  op ranging  situation classes follows                         relations let γop denote           times  timedoa  timea                     −             −        −    −                                                       γp  ti  tj  γm  ti  tj  γs  ti  tj          times ≤ times  ≡ ∃a  doa ∧                              −    −                                                       γf  ti  tj  γe  ti  tj ∧ ti  tj             doa   ∧ timea ≤ timea                    −    −   −                                                                      γo  ti  tj ∧ tj  ti ∧ ti  tj                                                                   −    −          −   −         time situation class sc depends time γd  ti  tj ∧ tj ≥ ti ∨ ti ≤ tj ∧ tj  ti   situations sc timesc  abbreviates                                                    represent interval relations processes given  ∃s∀s ∈ sc ∧ times  ∧ ∈ sc ∧ times   →t ≥  situationsuppressed form mentioning situations                                                     taking “endtime” argument according                                                        following macrodeﬁnition free variables men  consistency extension axioms concern tioned Ψi  just hidden  ing types time situation classes added foun                                                                   −            −   ∆  dational axioms Σ conservative obtained pix ti  ti  op pj tj  tj   Ψi→Ψj ∧ γop   extending language extended set                                                                                           denote Σ consistent            note metrical version like   including durative                                                        relations analogously deﬁned letting each operator  processes processes span subtree situations macro commutative inverse deﬁned                                                             −  single interval speciﬁed start end action pi op pj  pj op  implicitly typed actions process each process assume domain theory dt associated  actions starting ending process abbreviated temporal relations given  specifying tem  sp  meaning starts process ep  meaning ends pro poral interactions processes constraint patterns  cess  process denoted ﬂuent t− t− example wanting say going  start time successor state axioms ssp  processes preceded beingat associate set                ssa                                                                                 extend set  ﬂuents deﬁned follows goingt− beingatt− set              −                    −                                                    doa ≡  sp ∨        temporal compatibilities abbreviated                           −                                                                                  ∧ ∀ta  ep  denote iτ sc set  interval relations  example moving θ deﬁned      sociated situation class sc τ set time                                                        variables varying intervals t− related                 −                     −         moveθ  doa ≡ asmoveθ ∨        set timelines sc iτ sc obtained abducing                       −                                 moveθ  ∧ ∀t  emoveθ   time constraints τ according construction illustrated                                                        paragraphs instance suitable sc   action preconditions axioms deﬁne conditions   −      −     −     −    start end actions executed let process τ          set  say linear does mention pro     −        −       −         −                                                           τ sc pt   pt   pt   pt    cess righthand side deﬁnition set dssp    −        −       −         −                                                              pt   pt   pt   pt    successor state axioms processes linear pro  −        −       −         −                                                               pt   pt   pt   pt    cesses mentioned linear let dssp set lin  ear successor state axioms processes let bat constraints depicted network fig   ∪    Σ  ∪   ∪    ∪  ∪    ∪         ssp           una    ss    ap    ssp          temporal constraint network  satisﬁability problem  lemma   ∪    consistent iff                 ssp                                 concerned following let dt  d∪dssp ∪  proof sketch proof relies relative consistency iτ sc basic theory actions extended time spec  sc furthermore linearity dssp ensures iﬁcations eq  successor state axioms pro  loops wrt time each start end action cesses time interval constraints time variables  deﬁned processes possible introduce depen free associated set compatibilities tc                                                     dencies lead instance sp  sqy  seek assignment set time variables feasi                       sp  sqy                           ble solution constraints st substitution                                                      ture sc sorted domain interpre                                                        tation extend deﬁned mapping                                                        mhhd hi mh  model d∪iτ sc iff                                                        consistent temporal network hiτ sc                                                        signment free timevariables satisfying iτ sc                                                        given deﬁnitions state following                                                          lemma    let dt consistent action theory dt ∪                                                        iτ sc consistent iff exists consistent temporal                                                        straint network hiτ sc assignment                                                                                                                             mh   ∧ Ψτ                                                        proofsketch let hiτ sc consistent temporal net                                                        work assignment  consider formula Ψτ                                                                                                                  ij≤m Ψi→Ψj ∧γopij  τ set free timevariables                                                        Ψ let model dt   ex  figure  cn representing set interval constraints                                                        tended model γop according  follows  processes                                                          ij                                                    each process pi build chain situations kind                                                                                                                                                  Γi  dospi ti σ  ≤ σ ≤ doepi ti  σ  ≤ σi  free variables set induces interpretation σ sequence epi mentioned σ                                                      freetemporal variables τ according time  model dt ∪ τ sc ﬁnd assignment ap                                          si  peal concept general temporal constraint networks line sc extend structure dt ∪ Γi  cn introduced meiri  following developed choosing suitable assignment free variables τ  discrete constraint networks  cn involves vari appearing each Γi according constraints                                                                                     ables denoting intervals points unary γopij  corresponding τ sc each  binary constraints cn associated direct sequence satisﬁed possible each  constraint graph each node labeled temporal process true situation start action false  variable labeleddirected edges represent binary rela end action sequence construction timeline                                                        assignment τ st   model  tions according underly                        ing temporal algebra cns express different forms rea dt ∪ Γiτ finally show model                                                                                                         soning allen’s interval algebra  point algebra  dt ∪ Γiτ model Ψτ                                                                                                    metric point algebra  particular  let lemma  dt ∪ τ sc consistent iff ds ∪ τ sc                       −        −                     consistent logical implication deﬁned fol  τ      xn         set time                                                  lows let   hd hi βτ formula  variables denoting intervals each variable xi denotes           −                                            free temporal variables τ  interval   let set binary relations  assignment set      sn en  si ei ∈ si  ∪ iτ sc  βτ iff                                                                                                         ei called solution set      xn  mh  dt ∪ iτ sc implies mh  βτ  sn en satisﬁes constraints deﬁning network  consistent solution set exists sequel                 cn                                   tcn construction  cn  construction involves  shall identify  labeled direct graph following inference mechanisms abduce iτ sc ob  note solution set say satisﬁes                                                        tain temporal network topology hiτ sc ii imple  constraints                                          ment temporal constraints situations according  mapping sc   tcn   let    iτ sc → cn    network show inference process through ex  hiτ sc temporal network net cardinality ample let tc  compatibilities spec                                                                                                −         speciﬁed nodes labeled deﬁned processes iﬁed domain theory let sc  dosp  ep    opp             iτ sc                        −              −               mentioned                         sp ep  sp  ep  abduced    deﬁnitions network net consistent constraints according tc sc τ  exists assignment temporal variables τ                                                                   −         −         −        −    feasible solution iτ sc example τ scpt   pt   pt   pt    set         solution                                                                                                 constraints three nodes network hiτ sc                   τt− t− t− t−  set variables                        constructed time range solutions  network depicted figure  given relations network – given free temporal variables situation                 note macro deﬁnition  class sc – ﬂexible situation class triple                                             deﬁnien  parts lefthand component   kind hsc τ ii iτ constraint free  dum t− op t− mapped                                            variables iτ   ≤ t− ∧    temporal network righthand component                         deﬁniens Ψi→Ψj ∧γopτ interpreted struc progression want determine according tim  ture sc assignments free tempo ing advancements current situation class  ral variables τ obtained cn semantic cor forget past scheduled processes think future  respondence network formulae sc sources allocation known progression prob  established follows let mhd ii struc lem  sc face simpliﬁed version progression problem regressable formulas ﬁrst program action applicable si ∈ sc   need let state problem follows given ai scheduled horizon neglected   sentence ϕ needs ﬁrst determine set situations each action started horizon   sc progressed given timelines postponed                        −     candidate interval    end order • partial order action choice   situation terms ϕ according relation ≤sc intro                 ∆                                                                              doprog ≺ prog sc sc   doprog  prog sc sc  h∨   duced  smallest situations set wrt ≤sc                                     mentioning let min consider domain   ∃aselecta sc ∧ doprog ≺ ≺ prog sc sc           min                                            second program directly executed   theory dt  equal dt ds replaced         min                                             possible insert primitive action selected suit   set    ϕdt   ϕ ϕ mentions ground   situations σ σ  min free variables sort able ﬂuent predicate selecta representing selection                      sc                               criterion set true selection holds   time let Φt    tn sc formula mentioning situations   σi ≥sc min ground possible free vari • parallel execution                                                                                      ∆   able sort time     tn             doprog prog sc sc                                                                                                                              min           min                doprog sc sc  ∧ doprog sc sc    lemma   dt  ∪ τ sc  dt   ∪ τ sc ∪                                                           • test action                                              min   theorem  dt  ∪  τ sc  Φt     tn iff dt ∪                      ∆                        min                                                     doφ prog sc sc   φsc ∧ doprog sc sc        ∪ iτ sc  Φt     tn                                                         φsc stands generalization standard φs   proof sketch direction follows cut sc extended situation classes sc ∧ sc                                                                                                   direction suppose dt ∪ τ sc  Φt     tn let ps ∧ ps ∈ sc each ﬂuent evaluated   regress Φt     tn different timelines wrt speciﬁc timeline   separating Φ dnf considering each                                                         • semantics nondet action choice nondet argument   conjunct separately regress respect min let                                                         selection conditionals loops procedures deﬁned   regressed formula – note change needed                                                         usual way   regression account regressed sentences time vari   ables kept turning quantiﬁed   variables through successor state axioms univer flexible temporal behaviors golog cbi planning   sally quantiﬁed linear  deﬁnition min problem mcbi pc introduced section  easily                         ssp                             coded solved sc framework given rep   ∈ min previous lemma claim follows                                                                                                  resenting timelines processes mcbi candidate                                                         plan pc encoded golog program progc     flexible high level programming golog           possible introduce each interval constraint                                                            golog syntax given extended action theory presented ij golog procedure kind                                                                               −        −     following constructs inductively build golog pro   procπij  ψi   ∧ γt      grams                                                                                                                                                         ψi macro  associated process pi    primitive action α                               ith process jth timeline γ temporal    nondeterministic choice αβ α β           constraint example god ends   repre    test action φ test φ true current sit class sented                                                                          nav     −             nondet arg choice choose progx             procπ ψgo   ∧  ≤ ≤                                                           given πij procedures partial speciﬁcation single    action sequence followed                                                         timeline tj easily deﬁned using ≺ operator    partial order act choice ≺                                                              procplan tj πj ≺ πj ≺ πj ≺    ≺ πkj    parallel execution pkp concurrently    conditionals φ                  given set timelines ti candidate plan pc                                                       represented parallel execution plan     loops φ                                                                                                                          procprog   plan  nil    plan  nil    procedures including recursion                                                                                                                cbi complete plan associated fully sup                                                                                                iτ                                                        ported set timelines set constraints   golog semantics  macro dop sc sc  gives section  introduce mapping transforming   semantics constructs program sc                      hsc τ ii                                                        cbi plan   ﬂexible situation    following   sc situation classes speciﬁes ﬁnite horizon holds   • null program                                       proposition  given cbi planning problem mcbi pc                                                         pc candidate plan  complete plan     donil sc sc ∆ timesc ≤ ∧ ∀ss ∈ sc ≡ ∈ sc mcbi pc maximally ﬂexible time variables τ                                                         exists dt  golog program progc   • primitive ﬁrst program action horizon                 dt ∪ iτ sc  doprogc ini scτ                                                         hsc τ ii ﬂexible situation                      ∆    doai prog sc sc   ∃sisi ∈ sc ∧ ossai si∧                                                                          gp   hsc τ ii     timesi ≤ ∧ timeai ≤ ∧ doprog doai sc sc  h∨                                   timeai  ∧ doprog sc sc                 proof omitted
