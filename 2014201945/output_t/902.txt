   algorithms identifying rigid subsystems geometric constraint systems                           christophe jermann                     bertrand neveu gilles trombettoni                                 ai lab                      coprin team inriaiscnrscermcs                         epfl  lausanne                            route des lucioles bp                                switzerland                              sophia antipolis france                 email christophe  jermannepf ch            email bertrand neveusophia  inria  fr                                                                       gillestrombettoni©sophiainriafr                             abstract                              like adhoc geometric rules proposed enhance                                                                 structural rigidity capabilities succeeded        structural rigidity property generalization                                                                 cover gap structural rigidity rigidity jer•       lamans theorem characterizes rigid bar                                                                 mann et al  defined extended structural        frameworks generally considered good                                                                 rigidity new approximation rigidity supersedes        approximation rigidity geometric constraint                                                                 heuristically enhanced characterizations        satisfaction problems gcsps                                                                    paper focus algorithmic aspects        fail simple gcsps does                                                                 structural characterization rigidity hoffmann et ai         geometric properties account                                                                 proposed flowbased algorithm called dense        paper question flowbased algorithm      purpose providing necessary background sec•       used hoffmann et ai identify rigid subgc          tion  exemplify limits algorithm ca•       sps show algorithm fail        pabilities new algorithm section  section  presents        structural rigidity design   specificities new algorithm explains advan•       troduce new flowbased algorithm uses jer•       tages uses extended structural rigidity instead        mann et als characterization rigidity show      structural rigidity designed geometrically cor•       algorithm correct     rect way conclude explain algorithm        used tackle major issues related rigid•     used tackle major issues related rigidity        ity deciding gcsp rigid        identifying rigid overrigid subgcsps               background        keywords geometric constraints rigidity char•       acterization flow algorithms                            section provides necessary background pa•                                                                formally defines gcsps rigidity concept    introduction                                                structural characterizations rigidity   geometric constraint satisfaction problems gcsps arise   naturally areas cad robotics molec•  ular biology rigidity concept heart   problems deciding gcsp rigid de•  tecting rigid overrigid subparts     methods kramer  bouma et ai    dufourd et ai  lamure michelucci  hoff•  mann et ai  jermann et ai  jermann    solving gcsps deal rigidity geometric   decompositions produce sequences rigid subgcsps   solved separately assembled     techniques used rigidity detection classi•  fied categories patternbased approaches bouma et   al  kramer  depend repertoire rigid   bodies known shape cover practical   instances flowbased approaches hoffmann et ai    lamure michelucci  use flow maximum match•  ing machinery identify subgcsps verifying structural   rigidity property based degree freedom count     approaches general eventhough struc•       fig presents gcsp composed  lines con•  tural rigidity approximation rigidity heuristics strained  parallelisms  lineline distances fig       constraints                                                                                                            depicts gcsp composed  line  points bound     pointline incidences  pointpoint distances      assume geometric objects indeformable    circle variable radius geometric constraints    involve positions orientations objects    independent global reference sys•   tem constraints fix objects relatively an•   limitations make structural characteriza•   tions rigidity easier mandatory geometric solv•   ing methods based rigidity      according restrictions solution gcsp —     composed position orientation each    object satisfies constraints solv•   ing purpose gcsp translated equations    each object represented set unknowns re•   als determine position orientation each con•   straint equations unknowns    objects constrains     rigidity                                                                   extended structural rigidity    rigidity defined wrt movements movement                                                                  extended structural rigidity esrigidity short based    gcsp deformation does preserve                                                                  degree rigidity dor concept dor sub•   relative positions objects displacement rota•                                                                 gcsp number independent displacements admits    tion translation intuitively gcsp rigid admits                                                                  depends geometric properties verifies exam•   deformation displacements geometric                                                                  ple dor lines  parallel     space underrigid admits deformations                                                                  parallel parallelism property explicit    overrigid does admit displacements                                                                  constraint induced constraints    solution formal definitions rigidity                                                                  gcsp embedding lines second case computing    inwhiteley                                            dor equivalent geometric theorem proving      fig subgcsp cdf rigid triangle                                                                    principle extended structural rigidity    indeformable admits translations rotations                                                                  following gcsp rigid movements displace•   subgcsp af underrigid point indepen•                                                                 ments comparing dof dor allows    dently line constraint   determine admits movements dof arc dis•   subgcsp acdef overrigid solution     placements dor deformations    generically impossible place point intersection     spheres   distance constraints centers    aligned       structural rigidity   structural rigidity corresponds analysis degrees   freedom dof gcsp intuitively dof represents   independent movement gcsp formally               esrigidity superior srigidity                                                                  esrigidity exactly corresponds rigidity subgc                                                                 sps fig  jermann et al  comparison                                                                  srigidity esrigidity details dor                                                                  concept          structural rigidity generalization lamans theo•  rem laman  characterizes generic rigidity   bar frameworks based following intuition   gcsp admits resp movements num•  ber independent displacements considered geometric                                                                                                              constraints                                                                properties lines parallel   in•                                                                 stead  algorithm dense flow satu•                                                                 rated capacity  constraints plus overflow exactly                                                                  matches  dofs ab gcsp identified                                                                 rigid algorithm overflow applications                                                                  allow identify gcsp wellrigid                                                                  example                                                                   second example fig illustrates second                                                                  difference objectconstraint network depicted fig                                                                  figure shows application overflow                                                                   virtual constraint   points algo•                                                                 rithm overflow distributed completely                                                                  signals overrigid subgcsp acdef adding                                                                  reachable objects residual graph                                                                    algorithm dense applies overflow directly through    figure  objectconstraint networks flow distributions   constraintnode constraints binary exam•                                                                 ple dense apply overflow set ob•                                                                 jects algorithm generally dense apply                                                                  overflow subgcsps miss rigid overrigid                                                                  ones applying overflow  pair objects                                                                  gcsp leads incorrect answer case                                                                  previous example segments rigid                                                                  identified overrigid                                                                    examples show simple common                                                                  subgcsps like parallel lines triangles seg•                                                                   ments treated correctly algorithm dense                                                                    following section differences                                                                  algorithm dense new algorithm present                                                                  consequences      overview                                                      algorithms                                                                  section present hoffmann et als dense algo•  section exemplify contribution presented   paper gcsps fig  illustrate main  rithm comparison new algorithm use flow   differences algorithm dense algorithm         machinery objectconstraint network representing                                                                  gcsp algorithm main differences algo•     algorithm overflow depends geometric   rithm dense        properties objects applied depends                                                                    • uses esrigidity instead srigidity        dimension geometric space dense                                                                    • distributes flow geometrically correct way      algorithm overflow applied dedicated      network        node attached subset objects        applied directly constraintnode     new features achieved thanks major mod•       dense                                                    ifications distribute function used dense sec                                                                  beginning section    example                                                         introduce principle flowbased character•  example fig highlights differ• ization rigidity present discuss function   ence fig presents objectconstraint network associ•  distribute key contribution finally   ated gcsp picture overload   explain function used design algorithms     applied constraint algorithm dense     main problems related rigidity   constraint linked lines   parallel lie prescribed distance plane ab   flowbased rigidity detection   rigid subgcsp easily overload   geometric point view principle structural   distributed completely capacity  con•  characterization rigidity check gcsp admits   straints plus overload applied lines having displacements flowbased rigidity identification    dofs gcsp identified overrigid   understood follows   contains subgcsp  dofs                        practice sitharam  dense embeds heuristic rules      fig displays algorithm behavior virtual   prevent kind simple failures complicated examples   constraint linked subgcsp ab value      mistake algorithm rulebased approach han•  overflow computed according geometric       dle singular cases       constraints                                                                                                                remove displacements gcsp introducing      flow algorithm like fordfulkerson ford fulkerson        dofs constraint side                            function returns set objects reachable                                                                  virtual constraint residual graph max•     check overconstrained subgcsp exists                                                                  imum flow distribute overload        computing maximum flow overloaded object                                                                 set function objectinducedsubgcsp        constraint network                                                                  returns subgcsp induced verifies      verifies dofsk                               dofsa      maximum flow objectconstraint network   represents optimal distribution dofs con•  straints dofs objects does satu•  rate arcs outgoing source constraints   dofs absorbed objects gcsp   overconstrained case exists subgcsp   dofs overflow applied   network constraint side identified subgcsp   verifies dofsa hoffmann et al  proven   induced objects traversed during   search augmenting path objects reachable    differences version   overloaded constraintnode residual graph     distribute function hoffmann et version                                                                  mentioned use dedicated constraint                                                                  overflow distribution allows distribute overflow                                                                  subset objects adaptation overflow                                                                  set objects applied renders over•                                                                 flow application geometrically correct    function distribute   function distribute hoffmann et al  implements         example distribute sdab hoff•  principle presented present version  mann et version gcsp fig presented   function explain differs hoffmann      fig overflow fully distributed   et al                                                 subgcsp ab returned correct flow point      said applying overflow corresponds   view dofab     geometric point view removing displacements      geometric point view incorrect interpret   objects linked constraint ensures result overrigidity gcsp   subgcsp linked single constraint allows inde•   subgcsp distribute function   pendent displacements removing dofs subgcsp          called differently dors overflow                                                                   fig presents   dorsk geometrically incorrect                                                                  distribute  ab overflow distributed      instance consider subgcsp composed  points                                                                  fully subgcsp returned similar calls   linked pointpoint distance gcsp allows                                                                  allow conclude gcsp overrigid     independent displacements  rotations     translations space lack rotation   line going through removing       time complexity complexity func•  displacements couple points geometrically     tion distribute dominated function     correct hoffmann et als function distribute        fordfulkerson nn    does distance constraint binding points    number nodes number arcs strictly   overloaded                                 equivalent complexity hoffmann et als version      order distribute flow geometrically correct    note calls function performed   way propose introduce active constraint having     modified compute maximum flow   dofra constraint linked subset    incremental way yielding better complexity   objects  allowing independent displacements induc•  ing subgcsp having dors            algorithms rigidity detection   parameters function distribute                                                                  based distribute function algorithms     function overloadednetwork returns object              designed tackle major problems related rigid•  constraint network corresponding fictive con•   ity concept hoffmann et al  proposed   straint  set capacity linked objects dense minimaldense algorithms identify   maximum flow computation achieved standard                                                                       hoffmann et al  function distribute specifi•     remember dor represents number independent cally designed binary constraints flow distribution merged   displacements admitted subgcsp                           network construction subgcsp identification                                                                                                              constraints overrigid subgcsp minimize using classical lin•  subgcsps generated dorminimals  algorithm   ear minimization process algorithms repro•      overrigid proceeds follows   duced using function distribute allows   tackle problems geometrically correct manner        turn  bc dorc fig   better characterization rigidity extended        represents distribute   structural rigidity show algorithm dense         arcs outgoing source saturated  introduce distribute function existing algorithms           csrigid subgcsp identified                                                                     turn  cef dorcef   algorithm dense versus algorithm overrigid                                                                       distribute scef represented fig•  schematically algorithm dense operates calling              ure turn arc  unsaturated   distribute function each constraint gcsp           set objectnodes traversed during search   nonempty subgcsp returned overload induced            augmenting path identi•  dimension considered geometric space rep•         fied subgcsp acdef overesrigid   resents maximum number independent displacements   space   dense supposed re•       example algorithm dense identify   turn overrigid subgcsps returned gcsps      each segment  points   distance each point   admit displacements allowed considered geo•     line overrigid subgcsp false   metric space      fact dense incorrect remove        properties algorithm overrigid   dofs number displacements admitted sub•  gcsp instance parallel lines admit  displace•  prove correctness completeness algorithm   ments removing  displacements par•     overrigid need following lemmas estab•  allel lines geometrically incorrect                  lish properties dor concept flow distribution      obtain geometrically correct version algorithm                                                                  lemma  let gcsp subgc  dense propose use esrigidity instead                                                                  sps dors  dors   srigidity dor overload use   distribute function instead hoffmann et al          proof each unit dor gcsp represents indepen•     results new algorithm called dent displacement translation rotation adding new   overrigid performs function                                                                  object constraints subgcsp sf re•  distribute dor each iden•         independent displacements granted   tify overesrigid subgcsps given constraints independent global reference   returns nonempty subgcsp verifies dofs       dors  dors ou    dor sufficient condition overesrigid   def  unfortunately number subgcsps   exponential lead exponential number   calls function distribute show   sufficient correct apply function   dorminimal subgcsps def  gives   following algorithm                                                                  proof let objectconstraint network overloaded                                                                  gs network overloaded                                                                  difference networks resides fact                                                                  arcs type — gs •                                                                    difficult distribute overflow gs gsm                                                                  maximum flow gs saturate arcs outgoing                                                                  source maximum flow gs eitheru                                                                    prove completeness correctness dis•                                                                 cuss time complexity algorithm       constraints                                                                                                            
