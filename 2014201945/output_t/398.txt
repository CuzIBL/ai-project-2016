    techniques efﬁcient interactive conﬁguration distribution networks                       tarik hadžic´   andrzej wasowski ˛    henrik andersen                 computational logic algorithms    group university copenhagen                        rued langgaards vej  dk copenhagen denmark                                  tarikwasowskihraitudk                          abstract                            general csp models ﬁnite domains enforcing                                                        gac nphard order provide realtime      recovering power outages essential task guarantees current approaches use offline compilation      distribution electricity industrial partner csp model tractable data structure representing      postulates recovery interactive space valid conﬁgurations møller et al       automatic supporting operator amilhastre et al  observed com      preventing choices destabilize network  piled representations based reduced ordered binary deci      interactive conﬁgurators successfully used spec sion diagrams bdd bryant  having expo      ifying products services support users se nential worstcase size usually kept small      lecting logically constrained parameters sound dustrial instances product conﬁguration subbarayan et al      complete backtrackfree manner interactive         restoration algorithms based reduced ordered bi advance state art recent application      nary decision diagrams bdds devel     interactive conﬁguration domain power supply      oped power distribution networks restoration hadzic andersen  psr      did scale large instances bdds domain received lot attention blackouts      representing compiled         caused ﬁnancial loss raised security      discuss theoretical hardness interac siderations north america europe      tive conﬁguration provide techniques used turn inspired host research automatic recovery      compile classes networks handle     power outages based search planning techniques      largest industrial instances available tech thiébaux cordier  bertoli et al  ﬁrst      niques rely symbolic reachability computation high voltage transport networks later com      early variable quantiﬁcation domain speciﬁc order plex dense distribution networks      ing heuristics conjunctive decomposition       industrial partner nesa power distribution op                                                        erator copenhagen area insisted power restora                                                        tion process interactive automatic leav    introduction                                       ing control operator interactively reconﬁguring  interactive conﬁguration application constraint satis network guiding process makes  faction csp assists user search valid vari standard solutions based networkﬂow algorithms  able assignment conﬁguration combinatorial problem adequate instead ﬁnding just possibly optimal  major application areas include sales services airplane wrt cost conﬁguration need reason  tickets insurance policies goods personal computers possible valid network conﬁgurations addition  cars                                                strongly required account entire combinatorial    assistance takes form proposing choices hardness problem guaranteeing uninterrupted  globally consistent lead legal solution ﬂow electricity circuits connectivity constraints  problem csp terms interactive conﬁgurator enforces gen meeting constraints maximum load carried  eralized arc consistency gac wrt implicit conjunction line load constraints  constraints computes valid domain each unas numerous cyclic dependencies industrial  signed variable consisting valuations guaran stances provided nesa proved harder  teed globally completable consequence long product conﬁguration instances encoun  user assigns values valid domains interaction tered far larger psr instances  complete valid conﬁgurations reachable through seen making existing conﬁgurators unable  user interaction backtrackfree user forced work basic bdd based techniques ex  change earlier choice additionally computation ample monolithic approach hadzic  run realtime facilitate use interactive setting dersen  required representing network sin                                                    ijcai                                                     gle bdd investigated number techniques                             crease size network compiled                       paper present successful  scribe improvements psr models achieved reduc                                                                                  ing number network elements represented bdd  use psr speciﬁc variable orderings intro  duce alternative way compile bdds representing figure  lines eeee incident sink vforsim  nectivity constraints only—an important subclass prob plicity arrows denote direction ﬂow edge direc  lem widely used psr research finally tions lines lead power connec  scribe decomposition approach allows scale tivity rules according kirchhoff’s                                                                  largest instance collection  power sources law      consumer sinks  line segments figure   believe largest network handled                    ⊆vs    backtrackfree complete manner given time rent sinks consuming        reality                                                        sinks transformer stations transmit electricity ﬁ  requirements far instances publicly available                  ∈ ×v  httpwwwitudktarikpsr                         nal consumers each edge              representsa                                                        power line capable transporting current    related work bdds successfully applied                                                        direction state forward transmitting  product conﬁguration subbarayan et al                                                        nonzero current vandbackward trans  network topology psr harder bdds rep                                                        mitting state denote  resent standard compilation techniques experience size ex                                                        current load le ≥ whene le   plosion bdds smaller instances interaction                                                          asinkv  consumes units power sink  decomposed set bdds explored meer                                                        iff connected line forward backward state  et al  authors provide strong guarantees inter                                                        provides units current sink  action acyclic network bdds dynamically                                                        sink connected powered line  extended unlimited number new bdds contrast                                                        case current ﬂows through loss  provide support dynamic structures unbounded                                                          following connectivity constraints hold  size handle cyclic dependencies    psr problem investigated context • short circuits undirected cycles sources  automated planing instances presented  active sinks resistance forbidden  relatively small thiébaux cordier  disre • self feeding cycles undirected cycles  garded combinatorial hardness problem caused active sinks sources forbidden  load constraints recently shown psr •  planning problem easy constraints ignored sink powered power line  helmert  show interactive conﬁguration distribution network instances  psr postulated nesa nphard load seen psr research enforce connectiv  straints polynomial constraints ignored ity rules effectively ignoring relation    work likely applications sumption sinks capacity lines means  exploiting bdd representations networks auto sink switched based  matic reconﬁguration hadzic andersen  nected powered line special subclass  automated planning jensen et al  reliability anal networks connectivity distribution networksthey  ysis dutuit et al  techniques perform important study basis  kinds networks distributing water natu psr research serve reference  ral gas sewage telecommunication networks  comparisons industrial partner requires    proceed follows section  describes problem following load distribution constraints hold  deﬁning load networks connectivity networks com • kirchhoff’s laws load distribution preserved  plexity properties basics models section  dis illustrated figure   cusses techniques supporting compilation load networks                                                          • each line current load le exceed  medium size instances section  describes tech                        ≤e  niques compiling connectivity networks largest stant maximum capacity   instances available section  brings decomposition case line failure operator supported  approach allows interactive conﬁguration largest interactively conﬁgure affected network  available instances load networks experimental evalua advantage interactive instead automatic recovery lies  tion discussed sections – summarize fact lot information network  conclude section                                 encoded csp models operator likely make                                                        qualiﬁed decisions reconﬁgure    psr conﬁguration problems                          automatic hadzic andersen                                                         scribe interactive reconﬁguration process  view power network directed graph gvewhere operator interactively decides power lines  vertices represent power sources supplying electrical cur use broken lines forced                                                    ijcai                                                     important sinks hospitals dummy sinks sss     each interaction step ﬁxing line let ep  ep  ep  sink operator gets valid domains remaining each sink vk add lines esvk esvk capacity  network elements distinguish problem comput maxcc notice connectivity constraints  ing connectivityvaliddomains   loadvalid     legal conﬁguration each vi sink powered  domains depending kinds distribu line coming  tion networks working                    sider solving loadvaliddomains  created graph                                                               ∅        ∈  problem connectivityvaliddomains    set               requires deciding                                                        constraints satis  lines eoff ⊆ required set sinks son ⊆                                                        ﬁed suitable partition sifit  required decide each line e∈eeoff                                                        answer original problem yes obtain  possible power sinks son using lines eeoff∪                                                        witness ∈s vk powered  each sink ∈ son set son ∪v                                                        powered  powered using lines eeoff connectivity  constraints satisﬁed                               cost computing valid domains spaces rep  theorem  connectivityvaliddomains    easy     resented bdds given polynomial parameterized                                                                                                                                        omn     bdd size hadzic et al   thm  implies  proof sketch following algorithm checks       exist instances load networks exponentially  time given selection eoff son satisﬁed                                                      large bdd representations regardless variable order  number lines number sinks      ing additionally complexity results  connectivitysatg                             perceived indications proofs hard rep                                                 resent respective problems using bdds     g ← gv ee     s ←∅                                                                       soon experience relatively easier construct repre    each power source                           sentations connectivity networks load networks                                 g                     dfs traversal nodes reachable      built models nesa’s instances using cus                  s  addtoon           visited nodes             ⊆ s                                     tomized version bddbased conﬁguration library clab    return                                     jensen online nesa require model network                                                        load distribution network network  sufﬁces connectivitysat                                                      der consideration contains lines maximum current capac  times verify remaining lines forced                                                        ity  transformer stations size  kva   remaining sinks forced                                                        corresponds current consumption     similar models connectivity networks used bench each transformer means power line max  marks planing uncertainty thiébaux cordier imum current intensity feed  sinks al   complexity analysis helmert  indicates lows discretize domain current load    networks easy planning algorithms   assuming each transformer station                                                        sumes unit current sufﬁces enforce kirchoff’s  problem loadvaliddomains    given set lines   ⊆  required set sinks ⊆ distribution laws discrete domains achieve                                                 close sound approximation network models  quired decide each line ∈  eoff  possible power sinks using lines tinuous current values conﬁguration satisfying                                                     discrete model range continuous valuations sat   eoff ∪e each sink ∈  son     ∪v                              ee            isfying realvalued model  set    powered using lines                 ∈                        ∈  connectivity load constraints satisﬁed each vertex        variable pow                                                        indicating consumes produces current    let formulate auxiliary problem          idle each line ∈ introduce  problem setsumpartition  given ﬁnite set  variable indicating direction current ﬂow edir ∈  positive integers integer constants backward forward variable modelling load           ≤                                   ∈     s∈s        decide exist subsets              kirchoff’s laws modelled using ﬁ     s∈s ≤ ci nite arithmetic constraints implicitly expanded clab                                                      boolean formulæ    problem nphard hadzic ander  sen  shown straightforward reduc  tion subsetsum garey johnson    compilation techniques load networks  theorem  loadvaliddomains    involves solving np theoretical intuition bdds representing load net  hard problems                                        works hard construct conﬁrmed practice                                                        instances structural properties instances  proof sketch show decision problems contained reported table  instances created hen  loadvaliddomains    nphard reduction  ney bak jensen sonne bak henney   setsumpartition instance cc create net lars sonne rene jensen  collaboration  work follows each ∈ create sink vk nesa ﬁrst column table shows names  sumption vk  add source connected new  instances subsequent three columns list numbers                                                    ijcai                                                                                                                                  despite employing  quantiﬁcation scheduling                                                      heuristics unable compile large complex                                                       column table  ob                                                        served smaller intermediary bdds hinting                                                      technique helpful combination improve                                                       ments importantly observed drastic decrease                                                        ﬁnal bdd sizes projection big                                                      crease surprising fact given half                                                       boolean variables model encoding loads                                                       known size bdd representations                                                        logical rules strongly depends variable orderingthe                                                     orderings bdds table  created using general                                                        purpose fanin heuristic meinel theobald  p–                                                         operates directly logical rules model          figure  complex largest instance      follows network topology decided apply heuristics                                                        operating directly graph structure instead recog                                                        nized direct relationship topological distance  lines sinks power sources respectively size network elements sinks lines logical interdepen  resulting bdd indicated ﬁfth column dencies variables encoding  medium sized instances lead enormous bdds place each vertex variable vpow proximity variables  largest ones compiled                      edirle lines incident    largest instance complex set nesa placed vertex order place vertex  goal ﬁrst stage collaboration focused groups respect each search optimal  scaling techniques able handle figure  linear layout input graph gve diaz et al   shows topology instance believe complex using minimum linear arrangement minla measure  largest realworld instance publicly available objective cost measures suited    begun observation operator  conﬁguring network information loads constructing applying ordering observed  necessary long load constraints guaranteed signiﬁcant improvement size generated bdds  met sufﬁces just represent onoff state sinks ﬁnally managed compile large  kb  kb  lines bdd decreased projecting quantifying loads combination  relevant nonload variables satisfying conﬁguration techniques does sufﬁce reach mile  variables projected bdd extended stone interactive conﬁguration complex  conﬁguration including loads original bdd    beneﬁt projection during compilation  techniques connectivity networks  use early variable quantiﬁcation meinel theobald    clab compiles models compiling present compilation technique  straints separately conjoining results early vari nectivity distribution networks shown sec  able quantiﬁcation allows quantify variables interme tion  exists truly polynomial algorithm  diate steps long conjunction soon load variable connectivityvaliddomains using bdds  appearing constraints remaining conjoined bdds connectivity networks interesting  existentially quantiﬁed technique keeps selves useful comparison psr  termediary bdds smaller making easier reach ﬁnal research used cost bounded interactive  result known ﬁnal bdd smaller ﬁguration hadzic andersen  operator  biggest intermediate bdds long conjunction interactively prune valid domains based notion                                                        cost example operator limit maximum                                                        number notpowered sinks cost assigned              table  benchmark properties            changing status each network line operator                                                        limit total cost introduced changes     instance           simple  quantiﬁed     experiencing large intermediate bdds          lines sinks sources sizekb size kb   conjoining connectivity constraints regular fashion   stddiagram                                developed alternative way compile connectivity                                   networks remodelled problem transition sys   complexp                               tem reachable state space equals set   complexp                              legal conﬁgurations construction simple                                     initial state sinks transition step      large                                      powers lines sinks ways violate connectiv    complex                                    ity constraints lines close cycles powered sinkslines                                                        connected powered lines compute state                                                    ijcai                                                                                                                                          space using regular algorithm applies tran                               sition relation transitively initial state ﬁxpoint   reached meinel theobald     created instances connectivity networks figure  decomposing complex regions rrrr  instances section  imposing connectivity  straints instead load constraints maintaining topol                                                          user assigns ← solution space φi  ogy experienced smaller intermediate bdds                                                        belongs restricted assigning φi ← φi ∧  vthis  using regular compilation scheme clab                                                        make neighboring components allow  able compile bdds instances                                                        consistent assignments synchronization step  including large  kb approx   nodes com                                                        needed global consistency restored new  plex  kb   nodes                                                        lution space φi projected neighboring inter                                                        faces iij φi ∧  v↓iij  sent respective    decomposition load networks                    neighbors φj neighbors propagate information                                                        recursively ﬁxpoint reached main algorithm  tried range techniques scale                                                        stripped technicalities presented assume  biggest instance conjunctive decomposition                                                        node restricted   successful strongly related meer et al   divide graph gve overlapping components restoreconsistencyi φφn     ⊆  ⊆                           ev   ←i  ery vertex belongs exactly component each edge   belongs components cross   remove element                                       ∀ev ∈  component edges belong two components                  each interface inm incident component  vi ∧ ∈vj ∧   ⇒ ∈ei ej                                                                        remaining edges belong             φm  ← φm  single components sink consumption load capac          φm  ← φn↓inm ∧ φm                                                                             ities lines naturally inherited global problem      φm   φm add  refer shared lines regions interfaces  iij  ei  ej                                           partitioned complex geographical com                                                                    wecompileabddφi    each component gi separately ponents –  shown figures – each region shares                                                                                      modelling closely follows network topology neighbors line variables dir interface                                                             minor modiﬁcations needed generate logical sets ij  interface sizes    bits ex  rules representing subnetworks particular load lev ample bdds each components built sep  els directions interface lines quantiﬁed arately using techniques described previous sections    computing valid domains conjunctive partitions np variable ordering optimized each modules  hard general represented bdds separately using minla heuristic means  validdomains calculated time polynomial projections need perform renamings  sum sizes components component restoring consistency return beneﬁt        φi                                            ing able optimize each ordering separately sizes  bdds    globally consistent dechter                                               each component satisﬁable component bdds   nodes  kb                                                                                                   assignment σi φi exist satisﬁable assignment σ    kb     kb                                                                                 φ  φ ∧ ··· ∧ φn extension σi   nodes  kb  bdds  acyclic decompositions reduces arc consistency smaller industrial quality implementation introduc  computation valid domains globally consistent ing components numbers satisfactory  space φ reduces standard bddbased computation „proof concept” implementation                                                          computation valid domains complex lasts  each subnetwork separately loadvaliddomainsφ                                                      using state art implementation clab   loadvaliddomainsφi giving algorithm  cost polynomial size component bdds    restoration global consistency takes using    conjunctive decomposition constructed crude implementation structure sim  main problem lies maintaining global consistency ple restoration requires conjunc  network conﬁguration process success tions simplistic implementation does twice  ful way meer et al  authors observe experiments carried ghz pc  growth bdds runtime exponential size times decrease dramatically network nearly                                                        ﬁgured case realistic situations  interface sets iij  making essential ﬁnd partition  ing small interfaces observe use conjunctive  decomposition sacriﬁces polynomial response time guar  conclusions future work  antees previous sections sizes bdds created discussed range techniques interactive  during interaction exponential exponential ﬁguration power distribution networks shown  small number interface size experiments show interactive conﬁguration connectivity distribu  worstcase time complexity does appear prac tion networks easy realistic model load  tice                                                 distribution networks makes interaction nphard                                                    ijcai                                                     
