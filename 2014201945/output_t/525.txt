                    automated reasoning past story new trends                                                 andrei voronkov                                         university manchester                            abstract                          complexity firstorder reasoning compromised                                                          favor faster inference mechanism       overview development firstorder auto•     despite complexity theorem proving       mated reasoning systems starting early  firstorder logic impressive progress area       years based analysis current poten• achieved recent years progress fac•      tial applications systems try pre• tors development theory implementation techniques       dict new trends firstorder automated reasoning experience applications modern theorem provers       presentation centered main  powerful programs able seconds       motives efficiency usefulness existing complex combinatorial proofs require       future potential applications                     manmonth solved mathematicians ideas de•                                                         veloped theoretical papers area way     paper expresses views author past implementation extensive research aspects   present future theorem proving firstorder logic theorem proving vital applications proof  gained during years working development im• checking interfacing proof assistants gen•  plementation applications theorem prover vam• eration theorem provers incorporate   pire riazanov voronkov reflects re• ideas powerful tools increasingly used   cent experience applications vampire verification applications currently reach   proof assistants theorem proving semantic web aim paper brief overview  analysis future potential applications      order provers point new trends theorem proving                                                          likely implemented theorem provers    theorem proving firstorder logic                 generation                                                            currently theorem provers used following way   idea automatic theorem proving long history user specifies problem giving set axioms set   mathematics science long time order formulas clauses conjecture   believed hard theorems mathematics firstorder formula set clauses input given   proved completely automatic way using ability firstorder formulas prover check   computers perform fast combinatorial calculations conjecture logically follows axioms input   experiments automated theorem proving given set clauses prover check   shown purely combinatorial methods proving set clauses inconsistent case appli•  order theorems week proving theorems re• cations desirable prover output proof log•  garded relatively easy mathematicians           ical consequence inconsistency established     provability firstorder logic hard combinato• proofs humanreadable example   rial problem firstorder logic undecidable means provers used proving theorems mathematics   terminating procedure checking provability machinecheckable example provers used   formulas decidable classes firstorder formulas subsystems proof assistants verification systems   formulas classes arise applica•  tions undecidability short formulas turn  applications   extremely complex long ones easy   firstorder provers proofs consisting sev• main application area theorem provers   eral thousand steps seconds takes continues verification software hardware   hours tenstep proof theory firstorder rea• applications kind usually directly repre•  soning centered completeness theorems sented firstorder form provers normally used   practice completeness issue intrinsic prove subgoals generated systems example                                                          vhdltofirstorder transformation systems proof assis•     partially supported grant epsrc         tants based higherorder logic type theories       invited speakers                                                                                        papers subject mentioned finite    clause proved terminate success    state model checkers interactive proof assistants cur•     inference rule applicable terminate failure    rently prevailing verification growing com•  set current search space simple    plexity hardware firstorder logic extensions  implementation loop hardly solve    likely play increasingly important role                problems considered trivial modern theorem provers      theorem proving mathematics appli•    fast growth search space    cation area theorem provers provers good paper resolution robinson noted    working structured mathematical theories clauses removed search space losing    efficient fields mathematics combinatorial rea•   completeness    soning required example algebra applications                                                                    precisely observed clauses sub•   provers algebra numerous monograph mccune                                                                  sumed clauses removed search space    padmanabhan  gives example algebra                                                                  losing completeness regarded redundant    developed help theorem prover                                                                  later notions redundancy discovered      symbolic computation algebra systems need      example brand  proved function reflexiv   help theorem provers example side condi•      ity inferences paramodulation variable redun•  tions applying simplification rule checked   dant modern theorem provers use redundancy criteria   systems complex     prune search space criteria divided   use provers use primitive ones inter•   categories redundant inferences redundant clauses   facing theorem provers symbolic computation systems     useful notions redundancy based simplifica•  important application theorem provers          tion orders introduced knuth bendix       knowledge bases play significant role semantic     orders orders terms extended literals   web project knowledge bases use firstorder     clauses example inference redundant   logic simple extensions example ieee suo   orderings restrictions paramodulation inference   kif project       teaching logic mathematics area  order provers serve valuable tools experi•  ments teaching mathematics using firstorder provers   reported mcmath et al                              ss notions      application firstorder provers include retrieval redundant inferences clauses investigated   software components schumann fischer  reason•      general theory redundancies described   ing nonclassical logics fde nivelle et al  bachmair ganzinger al nearly stateoftheart   program synthesis stickel et ai  firstorder theorem   resolution theorem provers based theory reso•  provers arc practice used reported  lution redundancy based following saturation   literature companies organizations  algorithm   disclose proprietary use provers                              apply nonredundant inferences clauses                                                                      adding conclusions inferences    modern theorem provers                                           nonredundant   main currently supported systems given figure       clause proved terminate success   systems setheo based model elimination         inference rule applicable terminate failure   provers based resolution rest  remove clauses redundant   paper overview resolution theorem provers            addition conclusions inferences      early papers robinson  robinson   wos  resolution defined logical consist•  addition standard inference rules algorithms   ing inference rules operating clauses exam• operate simplifications inference called simpli•  ple resolution paramodulation                           fication makes clause  redundant                                                                  modern provers implement eager search simplifying                                                                  inferences ordinary generating inferences applied                                                                  lazily                                                                    modern provers inference selection performed   mgu denotes general unifier rules  clause selection reason saturation algorithms im•  local applicability identified small plemented provers called given clause algo•  number clauses result rule application does                                                                  rithms main concretisations saturation   change previously generated clauses resolution imple•                                                                 algorithm based clause selection otter algorithm   mented using saturation algorithms                                                                  lusk  mccune  discount algorithm     algorithms operate set clauses  initially denzinger et al  algorithms described   set input clauses roughly speaking based  analyzed riazanov voronkov   following loop                                               simple description algorithms given      apply inferences clauses  adding  con•   create illusion simplicity fact        clusions inferences                             algorithms extremely complex problems related                                                                                                       invited speakers                       prover     affiliation                        references                                                    generalpurpose provers                         otter      argonne national laboratory        imccune                         setheo     munich university technology    moser et al                          spass      maxplanck institute               weidenbach ef al                          vampire    university manchester           riazanov voronkov                         gandalf    tallinn university technology   tammet                          scott      australian national university     slaney et al                                   munich university technology    lschulz                         snark      sri                                stickel et al                          bliksem    maxplanck institute               nivelle                                                 figure  firstorder theorem provers                                                                    uses flatterms constant memory storing tempo•                                                                 rary clauses code trees voronkov  forward sub•                                                                 sumption code trees precompiled ordering constraints                                                                  forward simplification unit equalities perfectly shared                                                                  terms storing clauses shared terms renaming lists                                                                  backward simplification unit equalities path index                                                                  compiled database joins backward subsumption                                                                  indexes                                                                    work theorem provers requires extensive ex•                                                                 periments simple modification prover                                                                  tested bugs efficiency typical experiment                                                                  vampire consists running hours                                                                   tptp problems number modes network                                                                   computers experiments require good infras•                                                                 tructure software hardware facilitate debugging         figure  given clause algorithm vampire            evaluation vampire augmented number pro•                                                                 grams intended performing largescale experiments   memory management algorithms       necessity having programs interfacing   properly solved example given clause algo•    vampire adds complexity   rithms vampire schematically shown figure  taken   riazanov voronkov                           history development      proofsearch inference systems redundancy      early work automated theorem proving area   creates enormously large spaces example storing     witnessed impressive progress progress   fi clauses unusual clauses  par•     factors described   ticipate inferences operations clauses   expensive implemented naively example subsumption        development theory saturationbased   multiliteral clauses npcomplete ideally         theorem proving redundancy bachmair   performed each pair clauses search space         ganzinger  nieuwenhuis rubio    difficult imagine implementation able perform        tableau model elimination proofsearch                                                                       hahnle  letz stenz  degtyarev    operations reasonable time      stateoftheart theorem provers expensive op•        voronkov    erations implemented using term indexing graf          development implementation techniques term index•  sekar et al  problem term indexing             ing new algorithms graf  sekar et al    formulated abstractly follows given set indexed          nieuwenhuis et al    terms clauses binary relation terms clauses                                                                     growing experience including experiments appli•  called retrieval condition term clause called                                                                       cations development tptp sutcliffe suttner   query term clause identify subset con•                                                                       annual competitions theorem provers   sists terms clauses rl holds typical                                                                       casc sutcliffe et al    retrieval condition used theorem proving subsumption   retrieve clauses subsumed order support   naively implemented theorem prover powerful   rapid retrieval candidate clauses need process in• solve problems collected tptp library   dexed set data structure called index modern the•  created automatically proof assistants   orem provers maintain indexes support expensive     considerable progress solving difficult prob•  operations example vampire riazanov voronkov       lems years enhancements theory im      invited speakers                                                                                                      plementation techniques resulted large number problems following builtin theories arise application   solved orders magnitude faster likely attract attention automated reasoning   previous generations theorem provers provers im•  plemented  inefficient especially • ac theory associative commutative func•  equality reasoning  paramodulation rule tions axioms occur axiomatizations of•  generally adopted general architecture saturation results related buildingin ac   based provers understood  provers started use   theorem provers implementation techniques in•  routinely simplification orderings term indexing  cluding term indexing modulo ac in•  provers used  employ general theory resolution fancy associativity commutativity built   redundancy particular literal selection junctions eqp theorem prover mccune  consider•  provers  likely benefit better clause able success essentially term indexing term   selection builtin theories maybe parallel indexing modulo ac considered bachmair et al   current architectures                                      special case                                                            • theories transitive relations orders bachmair    future generation theorem provers                        ganzinger   theorem proving hard problem gener•  • various firstorder theories arithmetic   ation theorem provers incorporate new theory data • term algebras constructorbased structures   structures algorithms implementation techniques   development driven quest flexibility ef• step buildingin important theories   ficiency flexibility required adapt provers new appli• consider creation libraries axiomstheorems   cations efficiency reformulated controlling redun• commonly used data types example project   dancy large search spaces lusk              standard upper ontology ieee suokif project     unreasonable expect future theorem provers  enhance theorem provers constructs   faster possible problems specifying builtin theories example constraints   increase performance provers orders magni• additional inference rules   tude large number problems coming applica• inductively defined types applications inter•  tions problems routinely solved active proof assistants deal inductively de•  saving time application developers development fined types functions types proof assis•  generation provers require                  tants isabelle paulson  hol gordon                                                          melham  coq coq development team        development new theory                                                          twelf pfenning schuermann  facilities de•     addition new features                         fine data types functions inductively firstorder theo•     development new algorithms data structures rem provers facilities work buildingin                                                          inductively defined types developed following      understanding theory developed far directions       efficiently implemented existing architec•      tures theorem provers                            • firstorder reasoning data types given inductive                                                              definitions   development impossible considerable imple•  mentation efforts extensive experiments             • firstorder reasoning functions defined     large number research areas pursued data types   automated reasoning near future let mention • limited forms inductive reasoning       builtin theories case equality naive working large axiomatizations theo•  addition equality axioms inefficient solving rem provers work large axiomatizations contain•  simple problems development superpositionbased ing irrelevant axioms typical applica•  equality reasoning resulted impressive improvement tions reasoning ontologies assisting proof assis•  theorem provers important theories tants verification using hierarchically defined theories   equality arise applications development recognition irrelevant axioms impor•  specialized reasoning methods theories tant problems theorem proving axioms   central problem theorem proving problem dif• definitions relations functions various forms   ferent problem designing decision procedures recognition typical definitions efficient work   theories presburger arithmetic relations play major role future provers   functions used theories used steps direction reported ganzinger et al    relations functions arbitrary quantifiers afshordel et al  degtyarev et al    procedures combination decision unification ontologybased knowledge representation firstorder   algorithms help nelson oppen  formulations applied problems created man•  shostak  baader schulz  rueb shankar ually refer large axiomatizations situation                                                    common knowledgebase reasoning proof assistants                                                                                           invited speakers theorem proving mathematics using large axiom       naive users know usually want   atizations trying extract small number rele•  know theorem proving theorem provers   vant axioms hopeless task problem arises      strong automode try select automati•  structuring large axiomatizations way   cally strategy strategies best suited solving given   relevant subset easily extracted automati•  problem advanced users options   cally particular properties axiomatization specify term orderings literal selection clause selection   exploited provers example provers use   fact subset axioms axiomatize properties rela•  references   tion terms relations development knowledge    afshordel et al afshordel hillenbrand wei  representation formalisms suitable representing large ap•  denbach firstorder atom definitions extended nieuwenhuis   plied theories adaptation provers formalisms    voronkov editors lpar  volume  lnai pages   important problem automated reasoning       springer verlag       proof checking strangely modern theorem           appel  aw appcl foundational proofcarrying code   provers good producing proofs          lics  pages     print detailed resolution paramodulation proofs   baader schulz  baader ku schulz unification   gives proof preprocessing steps        union disjoint equational theories combining decision pro•  skolemisation proofchecking use        cedures journal symbolic computations     provers verification assisting proof assistants bachmair ganzinger bachmair ganzinger   expect near future proofchecking components       rewritebased equational theorem proving selection sim•  added major firstorder provers conjecture  plification journal logic computation     main approaches proofchecking similar bachmair ganzinger bachmair ganzinger   used proofcarrying code necula lee       rewrite techniques transitive relations lics ieee com•  proof built using number inference rules    puter society press    foundational proofcarrying code appel    bachmair ganzinger  bachmair ganzinger   proof given language rich   resolution theorem proving robinson voronkov edi•                                                                 tors handbook automated reasoning volume  chapter  pages   prove preprocessing steps hol                                                                   elsevier science       reasoning nonstandard quantifiers                                                                 bachmair et al  bachmair chen iv ramakrish  specifying restrictions number elements satisfying                                                                  nan associativecommutative discrimination nets mc gaudel   relation example exists        jp jouannaud editors tapsoft volume  lncs   quantifiers familiar description logic community   pages  springer verlag    translate formulas quantifiers  baumgartner  baumgartner fdpll — firstorder davis  order logic equality translation create for• putnamlogemannloveland procedure mcallester editor   mulas prohibitive size interesting develop special cade volume  lna pages  springer verlag   ways reasoning quantifiers     obvious task                                              brand  brand proving theorems modification      distributed nonstandard architectures        method sam journal computing     observed cooperating heterogeneous theorem      ide nivelle et al  nivelle ra schmidt hus  provers perform better mere sum     tadt resolutionbased methods modal logics logic journal   components mp bonacina  denzinger fuchs           igpl       modern theorem prover architectures      nivelle  nivelle bliksem  users manual mpi   suited cooperative distributed theorem proving     fur informatik saarbriicken       nonresolution inference recent rapid          degtyarev voronkov  degtyarev voronkov   progress dpllbased satisfiability checkers zhang      equality reasoning sequentbased calculi robinson   malik  suggests nonresolution systems    voronkov editors handbook automated reasoning volume                                                                  chapter  pages  elsevier science    play significant role firstorder theorem proving   implementation firstorder dpll baumgartner    degtyarev etal  degtyarev nieuwenhuis                                                                  voronkov stratified resolution journal symbolic computa•   encouraging imple•                                                                 tions pages   appear   mentations resolution generally applicable                                                                 denzinger fuchs  denzinger fuchs coopera•  nonresolution musts efficient solution                                                                  tion heterogeneous provers dean editor proc ijca   problem builtin theories degtyarev voronkov    volume  pages        satisfiabilitychecking model building                                                                 denzinger et al  denzinger kroncnburg   applications desirable able establish satisfiability schulz discount — distributed learning equa•  sets clauses build models satisfiable sets sat• tional prover journal automated reasoning     isfiability firstorder conceptually harder prob•    lem unsatisfiability set satisfiable formulas ganzinger et al  ganzinger nieuwenhuis   recursively enumerable means semi     nivcla saturate maxplanck institute fur infor•  decision procedure satisfiabilitychecking                matik      features features required   gordon mclham  gordon melham introduc•  generation firstorder theorem provers example  tion hol cambridge university press        invited speakers                                                                                                     
