                          modeling multiagent task scheduling                      distributed constraint optimization problem                      evan sultanik    pragnesh jay modi      william regli                             easpmodiwreglicsdrexeledu                  department science drexel university philadelphia usa                          abstract                            key step addressing distributed scheduling                                                        problem devise appropriate representations pa      paper investigates represent solve three goals mind desire representa      multiagent task scheduling distributed  tion captures problem’s distributed multiagent      straint optimization problem dcop recently     pects gives formal guarantees solution quality      multiagent researchers adopted tÆms    amenable distributed solving existing methods      language standard multiagent task schedul                                                          regard goal coordinators task analysis en      ing contribute automated mapping                                                        vironmental modeling simulation tÆms represen      transforms tÆms  dcop                                                        tation boddy et al  general language based      propose set representational compromises                                                        original tÆms language decker  jointly      tÆms  allow existing distributed algorithms                                                        designed multiagent systems researchers explic      dcop immediately brought bear                                                        itly multiagent task scheduling problems tÆms      tÆms  problems demonstrate key                                                        hierarchical task network htn style representation      advantage constraint based representation                                                        task nodes network probabilistic utility      ability leverage representation efﬁ                                                        duration tÆms  extremely challenging class      cient solving contribute set preprocessing                                                        scheduling problem adopted common chal      algorithms leverage existing constraint propa                                                        lenge problem domain representation distributed multia      gation techniques variable domain pruning                                                        gent task scheduling research      dcop show algorithms result       reduction state space size given set propose distributed constraint reasoning approach                                                                                             tÆms      tÆms problems finally demonstrate    solving problems expressed    language       increase ability optimally solve methodology problem transformation                                                                                          tÆms      tÆms  problems reasonable time   create mapping converts   instance      distributed manner result applying instance distributed constraint optimization prob      mapping domain pruning algorithms        lem dcop  modi et al  dcop devised                                                        model constraint reasoning problems agents                                                        communicate ensure solutions globally op    introduction                                       timal distributed algorithms dcop currently ex  coordinated management interdependent plans ist literature including distributed dynamic program  schedules belonging different agents important com ming dpop petcu faltings  cooperative media  plex realworld problem diverse application domains tion optapo mailler lesser  asynchronous  disaster rescue smallteam reconnaissance security pa backtracking adopt modi et al   trolling require human teams schedule expressivity tÆms comes cost arguable  tasks activities coordination primary concern design tÆms lan  envisioned automated planning scheduling processes guage comprehensively express complexities  form agents operating portable computing hard distributed scheduling problem concern  ware assist human teams domains prob placed goals enumerated current  lem inherently distributed agent manages distributed solution techniques applied straightfor  schedule human user effectively manage inter wardly unable provide solution quality guarantees  dependencies schedule schedules make progress difﬁcult problem  users exchanging information coordinating tribute set representational compromises form  agents single agent global view problem subset tÆms called dsc tÆms soluble  instead each make local planning scheduling deci current dcop algorithms  sions through collaboration agents ensure high finally demonstrate three key advantages  quality global schedule                              straint based approach provide mapping au                                                    ijcai                                                    tomatically transforms tÆms problem equiva  distributed constraint optimization  lent dcop optimal solution given tÆms dcop subclass distributed decision processes  problem optimal solution dcop obtained set agents responsible assigning values  applying problem transformation mapping respective variables subject set constraints  mapping preserves problem exactly second arguably dcop deﬁned tuple a dfασ  primary advantages adopting constraint based set agents  approach ability apply existing constraint propaga set variables vvvv   tion techniques constraint programming literature set domains dddv  each  leverage problem transformation applying    ∈  ﬁnite set containing feasible values  constraint propagation preprocessing techniques perform associated variable  domain pruning signiﬁcantly reduce search space set  cost functions each pair  demonstrate  reduction state space size set variables fij  di × dj → ∪ ∞  benchmark problems finally advantage ap   each cost function maps possible variable  proach mapping tÆms problem dcop   signment associated cost pairs vari  able immediately apply existing solution techniques ables possible assignments func  dcop tÆms problem domain                      tions thought constraints                                                         α    function α  → mapping variables                                                              associated agent αvi → aj means aj’s    related work                                             responsibility assign value vi                                                         σ    function σ  → aggregates indi  numerous techniques  employed  address         vidual costs  problem multiagent coordination scheduling objective dcop each agent assign val  musliner et al map tÆms markov decision pro ues associated variables order minimize σf   cess used generate policy dictating given assignment variables deﬁnition  agents execute methods musliner et al  adapted davin modi  modiﬁed  musliner et al propose distributed constraint sat sake brevity clarity applicability  isfaction method negotiating feasible schedule  maximizing previouslycalculated local expected quali  tÆms                         ties musliner et al   smith et al address prob tÆms derivative tÆms modeling lan  lem dynamic schedule revision changes guage decker  used representing                                                    model using simple temporal networks smith et al   stances task domains distributed multiagent schedul  phelps rye address problem through domain ing problem unlike htn representations tÆms  independent implementation generalized partial global emphasizes modeling interrelationships tasks  planning proxy methods allow distributed ap agents environ  proximation performance characteristics potentially ment musliner et al  sake exposition                                  complex tasks phelps rye                    formalism represent tÆms instances using set theory    constraint propagation general family techniques actual speciﬁcation grammar represent  check constraint based representation consistency ac tÆms instance tuple nm  gμφω  reduce problem search space preprocessing phase set agents  bartak´ provides survey general topic bartak´ set methods   primary advantages adopting   set tasks  straint based approach ability apply constraint prop set “nonlocal effects”  agation techniques node arc path consistency special task known “task group”  constraint propagation wellstudied algo μ function μ  →  rithms available vary complexity preprocessing φ function φ  ∪ → ∪ ∅ maps  resource requirements ﬁrst arc consistency algorithms  methods tasks parent task  formalized mackworth  including widely ω quality accumulation function ω  ∪ →  used ac algorithm bessiere et al improve average ∪ returns quality method task  case efﬁciency ac ac algorithms bessiere ∈  ωt  usually deﬁned function  et al  recently researchers introduced dis associated qualities ∈ φ−t   tributed methods arc consistency processing including each ∈ tuple l d  disac algorithm hamadi  dmac proto      earliest start time method  col silaghi et al                                deadline method                                                            expected duration method                                                        note ≤ ubutl  necessarily    formalization                                      equal each ∈ deﬁned similar tuple                                                        tasks type virtual method aggregator  section formalizes notion dcop speciﬁes                                                             subset tÆms focus                  use notation “n” denote nonnegative integers                                                    ijcai                                                    explicit durations bounds execution time solving problems containing greaterthanbinary  inherited parents words lφx ≤ lx straints open problem modi et al   uφx ≥ ux  assumed φ creates parentchild rela finite domains regardless problem repre  tionships resulting hierarchy tree rooted sented time discretized number  range φ ensures methods leaves    variables cardinality variables’ domains    tÆms  prescribes primary types quality accumu ﬁnite  lation function qaf summinmax syncsum  qualities children summed  method  children scheduled start execution time representational challenge met creating dcop    tuple containing sets functions called “nonlocal variable each method variables assigned  effects” nles tÆms deﬁne temporal precedence start times associated methods variables’  constraints methods tasks edfh each mains contain feasible start times  function each sets maps pairs methods tasks associated method time discretized quanta  boolean function maps true associ domains likewise probability distributions tÆms  ated nle holds pair methodstasks contains discretized using expected values  set hard “enables” nles enables  each agent tÆms instance ∈ create  execute accumulated positive quality set associated dcop agent ∈ each method ∈  “disables” nles opposite enables nle  create associated variable vm ∈   finally respectively “facilitates” “hinders” α function dcop deﬁned analog  soft nles increase decrease qual μ function tÆms domains variables  ity targeted methodstasks depending quality contain possible start times method including  source methodtask                                   option method forgo execution order encode    “schedule” grammar tÆms speciﬁca mutex constraints  tion deﬁning chosen start times methods                  −       −                                                          ∀n ∈ ∀mimj  ∈ μ   × μ   formalized function  → ∪ ∅ start time                                                                       ∈ ∈  →∞  ∅ means method executed feasible          ij           j                  schedule obeys mutex precedence constraints xyx   dmi  ∨ yxy     dmj   agent execute method time                                                        words agents ∈ ﬁnd pairs methods  nles obeyed objective create feasible sched                                                        mi mj share agent create hard dcop  ule maximizes ωg                                                        straint inﬁnite cost pairs equal domain val                                                        ues associated variables ensure agent    mapping     tÆms  dcop                      execute multiple methods nles prece  basis approach map given tÆms rep dence constraints encoded similarly example  resentation distributed scheduling problem equiva enables nles encoded follows each ∈ func  lent dcop solution leads optimal schedule tion ∪t ×m ∪t  → mapping pairs methods  technical challenge lies ensuring resulting dcop’s tasks boolean let ϕ  × ∪  →  solution leads optimal schedule following sections function ϕx  → true ⇐⇒ φx →                                                                                           formalize approach                               let ϕ transitive closure ϕ ϕ  implies                                                         subtree rooted     challenges                                                          ex ⇒   ∀xy  ϕxx ∧ x method  dcops promising solution technique exist                         challenges ﬁrst addressed                   ∧ ϕ  ∧  method                                                             x                                        representation different semantics   ﬁnished executing start      problem represented variable words ex  means methods subtree      each method tÆms instance assigned rooted ﬁnished executing      value start time variable methods subtree rooted executedfor                                                                                             each instance time assigned method each ∈ transitive closure  maps true      executed time                said precede “nle chain”  determinism tÆms  prescribes probability distributions ∀e ∈ ∀x    ex       certain parameters method duration      ∀m      ϕm  ∧  ∈  ∧      problem dcops deterministic                                                                                                                         aggregation functions dcop solution algorithms                        ϕ  mjy ∧ mj  ∈                                         σ      allow arbitrary aggregation functions   exam                 fijx ∈ diy ∈ dj →∞      ple adopt requires associativity commutativity                                                                                yx    dm       monotonicity aggregation function order en                                      sure optimality modi et al                  note deﬁnition slightly restrictive  nary constraints dcops allow constraints boddy et al  execute      arbitrary arity discovery efﬁcient algorithms accumulated positive quality ωx                                                      ijcai                                                      finally create soft ary constraint ac tÆms instance methods earliest start  variables aggregates qafs htn    time zero case assuming methods                                                        executed optimal start time method    dcopsolvable   tÆms                           greater sum expected durations  fundamental shortcoming mapping proposed methods general case heterogeneous earliest  previous section use nary constraints ex start times deﬁne upper bound start time  tremely inefﬁcient supported current solu method maximum ﬁnite earliest start time  tion techniques dcopsolvable tÆms dsc tÆmsis    plus duration methods  proposed subset tÆms allows immediate  application current dcop algorithms                 bound propagation    dsc  tÆms  consists enables disables nles nature distributed scheduling problem im  contain  sum syncsum  plies child’s bounds inherited  qafs  max qafs  min qafs each case                                                        looser parent’s tÆms requires  mapping exactly previously introduced                                                    enforces bounds propagated tree  ary soft constraint decomposed root improve na¨ıve bounding dis  unary constraints add unary soft constraint meth                       ∀m   ∈   ∅ → ω     tributed method implementing procedure requiring  ods’ variables follows                     local knowledge given algorithm  calculate    method scheduled execute unary bounds methods agent algorithm  straint cost equal quality method                                                        invoked recurseexecboundsa  ∞  contributed executed map  ping produce dcop variables worstcase  om constraints case  qafs algorithm  recurseexecboundsa  υ  summation use summation dcop aggregation function require agent perspective create bounds task  σ                                      σ                 rooting tree bounds create tÆms problem instance     likewise case  use maximization  finally lower bound bounds  υ upper bound bounds   case minimization create dual mini ensure βa  → ∪∞ × ∪∞ function mapping tasks                                                                        mization problem apply max aggregation function subtree rooted lower upper bounds start times subscript                                                           exists emphasize point each agent β function mapping    theoretically possible extend dsc tÆms allow each β function contingent extent knowledge agent  cases addition three listed assuming nary given problem instance                                                       ←   constraints feasible small  example  ← υ  encode dcop containing types qaf adding  visibletoc  nary soft constraint each maximal subtree htn  ←earlieststarttimec                                                           ←deadlinec   rooted max min qaf adding unary   ∞∧elthen  soft constraint usual dsc tÆms each method  ←  member maximal subtree                   end                                                           −∞ ∧ duthen                                                           ←    ∀ti ∈  ωti max min ∧                      end                                                        end     ∀tj ∈ ϕ titjωtj  sum syncsum         βat   →                                                       ∈subtasksc       create ary soft constraint encoding qafs    ismethodc                                                                                               subtree rooted ti   means method special type task                                                           visibletoc                                                             lm ←    detailed analysis correctness complexity  um ←  mapping available sultanik               ←earlieststarttimec                                                             ←deadlinec                                                             ←expecteddurationc    efﬁciency optimizations                                  ∞∧elm                                                              lm ←  far mapping precludes domains  end  ing inﬁnite challenges limitations   −∞ ∧ − aum                                                              um ←  using dcop practical standpoint  end  problem dcop solution techniques expo   βas  → lmum  nential computational complexity respect  end                                                           main size number variables number vari  means regular task  ables generally inﬂexible need make  recurseexecboundsa                                                          end  domains ﬁnite ideally need make small  end  possible ensuring solution space dcop  contains optimal solution    na¨ıve domain bounding                             constraint propagation  possible create ﬁnite necessarily tight binary constraint fijisarc consistent  upper bound start times methods let consider ∀di ∈ di ∃dj ∈ dj  fij didj  ∞ dcop                                                    ijcai                                                    said arc consistent ∈ arc consis versus days necessitated threshold—that we’ve set  tent bartak´  use forward constraint propagation  dcop cycles—above tÆms instance  nle chains prune domains ensuring arc simply declared “insoluble” single  consistency dcop distributed method constraint tÆms instance soluble greater   propagation given algorithm  note algorithm cycles given reasonable computation time  makes use function broadcastboundsc βaa      used dcop algorithm adopt modi et al   following postcondition agent a’s bounds solve resulting dcops  random prob  broadcast agents share nle lems soluble na¨ıve domain bounding ap  methodtask associated given bound algorithm  proach applying bound propagation algorithm   works having agents continually broadcast current na¨ıve bounding resulted  problems sol  start time bounds methods receive bound uble applying methods resulted  solubil  violates arc consistency increase lower bound ity using upper onesided paired ttest say  method’s start time constraint arc  certainty algorithm  average domain size  consistent rebroadcast new bounds lower reduction  domains produced algo  bounds monotonically increase bounded rithm  look reduction terms state space  algorithm terminate analysis messaging size signiﬁcant average  overhead algorithm presented §         decrease state space size table  presents state                                                        space reduction efﬁciency constraint propagation tech  algorithm  distconstraintpropc βaaq           nique terms problem solubility constraint prop  require tÆms problem instance βa associated bound function agation fairly consistent percentage state space     agent running instance algorithm queue reduced problems soluble     continuously updated incoming broadcasts    broadcastboundsc β                         insoluble suggests  prob     ∅                                   lems remained insoluble large state space      ←popq                      size inherent structure example insoluble     source      βas  →                                 problems’ state spaces average million times      ls ←                                          large soluble      ←      ltut ← βat                                   conducted tests tÆms problems differ                                                 ing complexity varying number windows nle        β  →                                                   chains number windows correlated number     lt ←     ut ←                                          variables resulting dcop number nles     lsus ← βas                                 correlated number constraints data pre    end    δ ← lsexpecteddurationc − lt              sented table  notice problems bounded na¨ıvely    δ ∧ lt  δ ≤ ut                        soluble complex problems  win     βat  → lt  δ ut                           dows  nles chains algorithm  required average     βat  → lt  δ ut     broadcastboundsc βaa                        messages standard deviation     end                                           negligible comparison number messages   end                                         quired arrive optimal solution      results                                               discussion  using tÆms scenario generator created darpa’s                                                        presented mapping tÆms modeling  coordinators project randomlygenerated set                                                        language equivalent dcop shown   tÆms  instances each agents threetofour                                                        resulting dcop subset language dsc tÆms  windows onetothree agents window onetothree                                                        soluble using existing techniques solution  nle chains scenario generator does ensure ex                                                        guaranteed lead optimal schedule empir  istence feasible schedule resulting tÆms                                                        ically validated approach using various existing tech  stances small simulation parameters                                                        niques constraint processing literature indicating  ing domain reduction techniques average state                                                        problems fact soluble using method  space size problems astronomical order   problems inevitably require optimistic extending mapping sub  inordinate amounts computation time sume larger subset tÆms various  phase transition problems soluble heuristic techniques literature variable order  ﬁrst couple thousand cycles dcop algo ing chechetka sycara  applied  rithm rest searching optimal solution mapping retaining formal guarantees solution qual  millions cycles terms computation time ity resulting schedule need optimal feasibil  equates orders magnitude difference seconds ity sufﬁcient approximation techniques dcops exist                                                          groundwork laid solving distributed multiagent    “windows” tasks parent task group coordination problems distributed constraint optimiza  tasks second layer root htn tion extensions investigate                                                    ijcai                                                    
