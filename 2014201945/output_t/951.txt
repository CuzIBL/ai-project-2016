application leastcommitment heuristic search temporal planning                                   antonio garrido evaonaindia                              dpto sistemas informaticos computation                                  universidad politecnica valencia                               camino vera sn  valencia spain                                   agarridotonaindiadsicupves                        abstract                      optimality backward search ineffi•                                                   ciencies impose important limitations large temporal       graphplan planning graphs structures widely problems problems search space vastly in•      used modern planners exclusion relations creased performance algorithm degrades       calculated planning graph extension pro• suggest new twostage search process overcome       vide useful information especially tempo• inefficiencies backward search generates initial       ral planning actions different duration relaxed plan relaxed plan used outline       graphplan backward search  generating solution plan means noncomplete       inefficiencies impose limitations dealing heuristic process actions definitively allo•      large temporal problems paper presents cated plan applicable mutex       new search process temporal planning avoid leastcommitment allows increase scalability       inefficiencies search uses informa• search producing nonoptimal good quality plans       tion planning graph shows beneficial       scalability planner ex•  review tpsys       periments show planner new search       competitive stateoftheart planners tpsys based threestage process garrido et al       wrt plan quality                      combines ideas graphplan tgp                                                    means tpsys incrementally extends temporal                                                    planning graph performs backward search through    introduction                                   graph extracts plan                                                      unlike conservative actions durative actions present   current challenges ai planning focus in• conditions guaranteed success action   creasing functionalities planners deal real conditions sconda econda inva   features temporal capabilities explicit management conditions guaranteed start end   resources expressive domain definition languages execution respectively durative actions   heuristic techniques optimisation criteria fox types effects seffa eeffa effects   long  gerevini serina  smith weld asserted start end respectively    paper deals three previous func• stage tpsys calculates actionaction   tionalities planning temporal features actions propositionaction static mutex relationships mutex   duration ii expressive domain definition languages relationships static depend def•  pddl fox long  iii plan optimisa• inition actions hold second   tion makespan traditional temporal planners adopted stage extends temporal planning graph alternates   conservative model actions actions temporal levels propositions ify actions un•  overlap way conflicting preconditions like graphplan levels tpsys represent instants time   effects model adequate planning domains  propositions present actions   exist require richer model actions startend actionaction propositionaction proposition  level  pddl used ipc provides model proposition mutex relationships calculated during ex•  durative actions allows accurate exploitation tension temporal planning graph stage per•  action concurrency obtain shorter makespan plans forms search graphplan backward way extracting     paper describes experiences temporal optimal plan through planning graph   planning tpsys based graph stage starts soon propositions final situa•  plan blum furst  tgp smith weld tion present non pairwise mutex plan extraction    manage model durative actions proposed complete tpsys obtains plan optimal makespan   level  pddl tpsys performs graphplan back• backward search tpsys preserves proper•  ward search guarantees properties completeness ties completeness optimality graphplan en                                                                                         planning                                                        worst performance happens gcd dura•                                                         tions  forcing algorithm generate maximum                                                          number levels consequence previous inefficiencies                                                          wasted search repeated frequently                                                          combining leastcommitment                                                             heuristics improve search process                                                          section substitute backward search                                                         stage search avoid previous inefficiencies temporal   figure  outline temporal planning graph planning approach backward chaining stage gener•  ferry problem shaded propositions represent non ates initial relaxed plan information tem•  pairwise mutex problem goals time  mutex relations poral planning graph second forward chaining stage allo•  propositions represented lines  cates execution time actions relaxed plan                                                          generation initial relaxed plan   tails time consuming stage furthermore search stage generates initial relaxed plan informa•  presents inefficiencies inherited graphplan tion temporal planning graph tg   impose important limitations temporal problems used skeleton final plan define relaxed plan ii   let consider simple problem ferry domain partially ordered set actions problem   domain consists transporting number cars goals action conditions hold called relaxed   location using ferry carry mutex relationships actions commitment   car time problem simple assume start time considered   three cars cl transported location  relaxed plan contains fictitious actions    ferry actions board              duration called fs achieves propositions   sail debark                                       initial situation fs requires problem goals   durations    respectively optimal plan ii generated similarly relaxed solution plan ff   contains  actions xboard xsail debark planner hoffmann  exception handle   makespan  mutex relations binary sec• durative actions algorithm    ond stage ends time  search starts   figure  pair actions mutex  goals problem goals hold plan problem   action planned each level assume applica•  ft obligatory actions   ble actions selected each level  goals   planning graph figure  action firstly planned  extract goals                                                           supported ii   time  actions al planned times  arg minnumber mutex imposes ii     feasible plan                                                                    vaf supports   search backs time  permutations actions  action supports condition   planned schema success    obligatory action   indication inefficiency lot effort  mark obligatory ii   wasted trying unsuccessfully plan nearly identical actions  ii commitment start time oj   problems symmetry plan time  goals goals sconda    planning graph extended time  search algorithm  generation initial relaxed plan ii   restarted scratch entails second indication   inefficiency actions planned previous stages search step  studies actions support qi selects   reused current plan committing similar action minimises number mutex prob•  failures new onedeeperlevel search space lems multiple resources selection tends use   memoization helps reduce failures committed resources available instance ferry prob•  during search way prunes branch search lem ferries  step  distributes   does allow solve real conflict exhausting use ferries homogeneous way action  level indication inefficiency barkcljll used debarking car cl action  proposition unsupported new actions supporting barkcfl selected debarking car be•  studied branch discarded algorithm cause debarkcflj mutex debarkc  fl im•  performs backtracking stage                        poses mutex ii selection provides relaxed     inefficiencies negative influence graph plan information structure problem   planbased temporal approaches classical graph increasing quality number actions parallel   plans planning graph problem  levels tem• final plan note step  need perform   poral planning plan level  extended real search backtracking mutexes   explored particularly tpsys number levels gener• considered strategy leads so•  ated depends dispersion durations actions lution introduce term obligatory action       planning                                                                                               action supports goal hold supported algorithm exits success step  oth•  plan problem helpful means erwise actions relaxi start current   present ii steps  obviously timeofexecution tried allocated step    fs obligatory                         action mutex actions alloci non    important property ii mutex obligatory removed step  delaying ful•  overlapping actions actions ii form feasible fillment goals future time execution reason   optimal plan proof straightforward relies remove nonobligatory action bad   complete extension temporal graph level choice plan obligatory removed   temporal graph extension ends indicates mini• start time postponed step  mutex ap•  mal time goals achieved nonpairwise plicable allocated time step  step entails   mutex actions level provides minimal bound indication loss completeness exist   makespan feasible plan mutex alternative actions allocated actions arc   actions holds plan feasible optimal considered iij step  branching point   unfortunately common situation mutex new actions inserted generating new plans achieve   relations break plan relaxation entails postpone unsupported conditions each action supporting   allocation actions andor plan new actions solve each condition new plan iij generated inserted   unsupported subgoals                            setof plans aj marked obligatory iij im•                                                         portant note allocated time inserted    planning allocating actions                 earliest start time execution extracted tg   stage performs allocation time actions re• leastcommitment technique performed   laxed plan use structure called setof plans allocation actions inserted plans   search space formed generated plans  ac• step  moves relevant timeofexecution   tions each divided disjunctive sets   actions start extending tg necessary   contains actions al•             algorithm important points selection steps   located time removed  relaxj   step  selects plan ili lowest cost   contains actions allocated setof plans cost estimated follows   removed initially   contains actions initial iij   relaxed plan computed previous section stage   finishes gets obtaining inthe ac•  tions plan support problem goals       setof plans  generated algorithm      setof plans     extract lowest cost ili setof plans       cost plan iij consists sum cost     alloa supports problem goals       allod estimation     exit success                                  number actions necessary solve unsupported         arg max allocation priority  conditions current timeofexecution                                                          estimated through tg ignoring delete effects     mutex alloci                       actions heuristic used ff     obligatory                        number conditions fs supports    remove relaxi                                 del fs number conditions fs deletes                                                  pajmutex fs number mutex condi•   postpone start time                        tions fs action mutex information extracted                                                  tg indicates impossibility simulta•   applicable                              neously conditions fs duration represents    allocate timeof execution               duration planaction account makespan                                                  note  pos•   insert new plans setof plans make ap•             plicable                                    itive impact cost plan opposition    update imeofexecut io                         negative impact cost                                                            step  action maximal allocation priority        algorithm  planning allocating actions  selected studied timeof execution                                                         priority estimated follows     idea forward time simulating real ex•  ecution iij progressively taking care actions   start execution algorithm  current time   execution ili timeofexecution initialised    algorithm selects plan ftj lowest cost allocation priority action depends local   setofplans step  problem goals factors succ number direct successor                                                                                                    planning dependent actions rneetsuccis proaches difficulties solve problems fig•  number direct successor actions start ures cdef leastcommitment search solve   soon ends meet values in•  problems hand backward search difficulties rise   dicate importance action successor actions result redundancy complete blind search pro•  intuitively successor actions directly cess hand leastcommitment search difficulties   supported important plan similarly rise result heuristic greedy approach   meeting successor actions indicate number succes• lead wrong path search ii noncomplete   sor actions immediately executed mu preserving search zenotravel satellite do•  tex unsup duration defined coefficients mains show highest speedups important note           imply select appropriate action best improvement produced satellite do•  allocated indicate   main domain competition ex•  action promising allocated    ploits end conditions durative actions     previous evaluation functions   fourth experiments aimed evaluating   heuristic factors according experimental analysis quality plans generated new approach   general temporal planning prob• mainly interested makespan plans   lems implement different heuristic methods consider number actions additional indica•  setting values coefficients case tion plan quality experiment uses plans   domains values co• generated experiment  figures ab compares   efficients influence search precise value plans generated lpg gerevini serina   relevant heuristic approaches based local  mips edelkamp  chosen   search lpg gerevini serina  instance planners handle temporal features showed   static cost inserting action lpg based distinguished performance ipc date inter•  number unsupported conditions represent est focussed code optimisation experi•  real complexity solving each condition contrary ment compare execution time planners   coefficient deals complexity  plan quality table  shows comparison be•  estimates real cost support tg       tween three planners taking account makespan     important note plans incrementally gener• number actions each plan in•  ated discarding allocated actions redun• cluded results ferry domain three   dancy symmetry algorithm  explores planners generate fully sequential plans   complete space actions make actions applicable al• plans gripper domain actions paral•  location priority imposes order execution discards lel gripper resource capacity balls   rest feasible orderings second indication loss planner exploit better concurrency order   completeness instance ferry problem sec• simplify resulting plans actions assigned   tion  studying actions debark            duration  optimal makespan    algorithm allocates action postpones number actions optimal plan    avoids complete exploration permutations number balls problem surprisingly lpg   preventing planner generation mips generate sequential plans easily noticed   symmetric plans                                    fact makespan comes directly number                                                          actions plan tpsyslc three    experimental results                                 planners generates optimal plans problems                                                          highly exploiting action parallelism   implemented previous search tpsys                                                            fourth experiment used plans gen•  conducting experiments experiments   compare new search vs graphplan backward search erated ipc perform comparison   experiment studied impact new tpsyslc stateoftheart planners   search problems high degree symmetry participated simpletime track analysed   ferry gripper focussing planner scala•  bility figures ab show results problems httpwwwduracukdplongipc   domains surprising  lpg based nondeterministic local search con•                                                         sequently fair work plan   commitment search tpsyslc faster graphplan  execution experiments lpg   backward search tpsysgp worthy mention run each problem times extracted average val•  tpsyslc scales better tpsysgp espe•    ues wc used lpg  version provided   cially gripper domain tpsyslc httpprometeoingunibsitlpg   optimal plans backtracking problems used mips version provided     second experiment deals problems httpwwwinformatikunifreiburgdemmips   simpletime track ipc ap lpg mips arc clearly faster tpsyslc instance                                                          solve simple problems tpsys  lc finishes       experiments run pentium iv  ghz  mb st nd stages currently stages represent impor•     information domains problems re•  tant bottleneck implementation think   sults international planning competition ipc drastically reduced       planning                                                                                                 figure  comparison leastcommitment search vs graphplan backward search tests censored           problem    tpsyslc     lpg       mips           improved shop tlpian no•       gripper                       ticed tpsyslc generates plans nearly        grippcr                      fewer actions rest planners        gripper                    experimental results show new approach significantly        gripper                     improves scalability graphplan backward search        grippcr                    gripper                      conclusions through related work        gripper                   gripper                 leastcommitment techniques widely used plan•       grippcr                ning relying consistency temporal constraints        gripper                ixtet hsts postponing assignment values                                                         variables order execution actions weld   table  comparison makespan number actions  use leastcommitment approach overcome   brackets plans gripper domain obtained limitations graphplan backward search detected   tpsyslc lpg mips planners                   previous works fox long  zimmerman                                                         kambhampati  approach basically postpones                                                         allocation time actions mutex   plans generated domainindependent di planners applicable algorithm generates relaxed plan sim•  lpg mips vhpop domaindependent dd    ilarly ff used skeleton plan   planners shop talpianner tlpian lpg    allocates actions time according mutex relations   mips run problems rest local heuristic criteria line lpg   planners used results competition al• critical difference lpg relies points   sapa tp ixtet participated com• planning graph temporal moves chronologically   petition results simpletime time instead planning steps second tg   track considered comparison figure  shows used extract heuristic information generate   results comparison lack space include relaxed plan plan repaired forward chain•  domains problems solved driver ing direction unlike lpg allocated actions   log domain plans tpsyslc generally longer removed fourth heuristics exploit better structure   rest planners exception lpg plan real importance each action plan fi•  shop satellite domain tpsyslc behaves      nally tpsyslc uses precise model action mutex   average better rest planners implies fewer constraints execution actions   exception tlpian rovers domain tpsyslc   larger search space   generates plans good quality paper contributes way                                                                                                  planning 
