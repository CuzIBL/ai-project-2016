           integrating planning temporal reasoning domains                                   durations time windows                        alfonso gerevini      alessandro saetti      ivan serina∗       dip elettronica l’automazione universita di brescia branze   brescia italy           ∗ dept information systems university strathclyde glasgow uk                     email gerevinisaettiingunibsit ivanserinacisstrathacuk                        abstract                          domain action obvious meaning     treatment exogenous events planning prac true time set assertions involving     tically important domains paper ground predicate deﬁnes sequence disjoint time     focus planning exogenous events happen windows timed predicate holds example     known times affect plan actions impos known benchmark domain “ zenotravel”     ing execution certain plan actions  openfuelstation city     during time windows actions du       openfuelstation city     rations handling constraints adds extra dif  openfuelstation city     ﬁculty planning address integrating   openfuelstation city     temporal reasoning planning propose new   assertions deﬁne time windows     approach planning domains durations openfuelstation city   true timed initial literal     time windows combining graphbased planning   relevant planning process precondition     disjunctive constraintbased temporal reasoning domain action timed precondition     techniques implemented planner took action each timed precondition action seen     th international planning competition showing temporal scheduling constraint action deﬁning     good performance benchmark problems  feasible time windows action executed                                                          actions plan durations timed precondi    introduction                                       tions ﬁnding valid plan complex task requires inte                                                        grating planning reasoning time check  realworld planning domains execution cer                                                        execution planned actions satisfy schedul  tain actions occur during predeﬁned time win                                                        ing constraints action plan scheduled  dows necessary conditions hold                                                        plan valid revised  stance refuel car gas station during speciﬁc                                                          main contributions organization work  periods day gas station open truth                                                        new representation temporal plans ac  conditions determined exogenous events                                                        tion durations timed preconditions integrating disjunc  happen known times inﬂuenced                                                        tive constraintbased temporal reasoning recent graph  actions available planning agent closing                                                        based approach planning section  ii polynomial  fuel station                                                        method solving disjunctive temporal reasoning prob    frameworks supporting durations time win                                                        lems arise context section  iii new local  dows proposed vere  muscettola                                                        search heuristics guide planning process using rep   laborie  ghallab  schwartz  pollack                                                         resentation section  iv experimental analysis evaluat  domaindependent systems                                                        ing implementation approach showing good perfor  fast largescale problems paper                                                        mance respect recent domainindependent tem  propose new approach planning temporal                                                        poral planners section   features combines graphbased planning constraint  based temporal reasoning    versions language interna  temporally disjunctive action graph  tional planning competition pddl pddl support approach represent partial plan domain  planning action durations deterministic exogenous timed initial literals through extension linear  events fox  long   edelkamp  hoffmann  action graph representation gerevini et al    particular pddl deterministic exogenous temporallydisjunctive action graph tdagraph  events represented timed initial literals  new pddl features  competition focused  background linear action graph  timed initial literals stated description ini linear action graph lagraph planning problem  tial state planning problem through assertions Π directed acyclic leveled graph alternating fact level  form “at l” real number ground action level fact levels contain fact nodes each  literal predicate does appear effects labeled ground predicate Π each fact nodef level associated noop action node level level     level     level    goal level                                                                                        −                                                                 representing dummy action having predicate                  precondition effect each action level contains                                                                        mutex                        action node labeled domain action                                                                                                                  represents noop nodes corresponding level                                                                                      action node labeled level connected incom                                                                                                                              ing edges fact nodes level representing pre                                                                                                                            conditions precondition nodes outgoing edges                                       end                                                         astart           −                                                                                            fact nodes level representing effects ef      fect nodes initial level contains special action node                           astart level special action node aend                                                                                                       effect nodes astart represent positive facts initial                                                                                                      state Π precondition nodes aend goals Π                                      pair action nodes possibly noop nodes  strained persistent mutex relation mutually ex figure  example lagraph nodes labeled   clusive relation holding level graph imposing values square nodes action nodes circle nodes fact nodes  involved actions occur parallel valid dashed edges form chains noops blocked mutex actions  plan relations efﬁciently precomputed using values numbers inside round brackets action dura  algorithm given gerevini et al           tions numbers inside square brackets unsupported precon    lagraph contains set ordering constraints dition nodes labeled “–”  actions partial plan represented graph  constraints constraints imposed during search encoded simple temporal problem stp dechter  deal mutually exclusive actions action level et al  set constraints form − ≤  mutex action level point variables real number  constrained ﬁnish start ii constraints instance ai ∈ π used support precondition node                                                                     −  actions implied causal structure plan aj − ≤  ai aj mutex  action used achieve precondition action                                                         actions π ordered  − a− ≤   constrained ﬁnish start                                           effects action node automatically propa action ∈ π following stp  gated levels graph through correspond constraints  ing noops interfering action “blocking” − a− ≤ dura a− − ≤ −dura  propagation level graph reached scheduling constraint imposes execution                                                        action occur during time windows associated    augmenting lagraph disjunctive         timed precondition action syntactically dis       temporal constraints                                                        junctive constraint ∨ · · · ∨ cn ci form  let timed precondition set time win                                                                   − ≤ ∧ − ≤  dows following x− indicate start time                                                                                     end time respectively time window yi  xi  yi  xi action start times action end times                                                               action techniques focusing ac ki  ki ∈  action ∈ π timed precondition  tion preconditions hold during execution following disjunctive constraint added  action end action pddl        −       −                  “over all” conditions operator effects hold astart − ≤ −w   ∧  − astart ≤     end action execution                          w∈w     order represent plans actions durations deﬁnition  temporally disjunctive action graph tda  time windows possible scheduling augment graph tuple ha  ci  ordering constraints la graph action dura • linear action graph  tion constraints ii action scheduling constraints du  ration constraints form − a−  dura    • assignment real values nodes  dura denotes duration action duration   • set time point variables corresponding  constraints supported representation presented start times end times actions labeling ac  gerevini et al  representation treat tion nodes  ment scheduling constraints major contribution • set ordering constraints duration constraints  work                                                scheduling constraints involving variables    let π plan represented lagraph tdagraph  ha  ci represents partial plan  easy set ordering constraints formed actions labeling action nodes  extended duration constraints actions π start times assigned  figure  gives lagraph                                                       values simple tdagraph ordering constraints     methods planner support types operator duration constraints  dition effect speciﬁed pddl                                      −                                                                  duration astart aend  astart  astart brevity examples omit constraints astart −   −                                                    −            −  aend  aend                                          ai ≤  ai − aend ≤  each action ai       −           −                                solvedtpx    − ≤  − ≤          −            −            −                   ∅ stop return    −   −   −                                                           ← selectvariablex ← −  assuming timed precondition windows  dx  ∅      scheduling constraint  ← selectvaluedx dx ← dx −            −                                           ← ∪ ←    astart − ≤ − ∧ − astart ≤  ∨                               −                                           ← dx  saving domain values     astart − ≤ − ∧ − astart ≤                forwardcheckingdtpx    pair hp ci deﬁnes disjunctive temporal problem  solvedtpx  dtp stergiou  koubarakis  tsamardinos  pol   dx ← dx  restoring domain values               lack  let ds set scheduling constraints  return fail  backtracking   represents set Θ stps each  consists constraints −ds disjunct pair forwardcheckingdtpx  stpconstraints each disjunction subset                                                        forall ∈  consistent stp Θ induced stp induced  forall ∈ dx  stp contains disjunct disjunction ds say  consistencystps ∪ ←  consistent stp complete induced stp  dx ← dx −    stp consistent iff solution solution  dx  ∅ return false  deadend   stp assignment real values variables  return true  stp consistent constraint stp given  induced stp compute · time solution figure  basic algorithm solving dtp input set  each variable shortest possible distance metavariables meta csp dtp partial    dechter et al  gerevini  cristani  solution meta csp dx global variable storing   start                                                current domain meta variable  variables constraints solution optimal  solution induced stp consideration    values assigned action nodes time backtrackfree algorithm algo                                                                                              −  action start times corresponding optimal solution rithm computes optimal induced stp aend  induced stp start times schedule ac loss generality assume each action  tions value labeling fact node timed precondition easy  earliest time  ta  dura supports replace set timed preconditions action  starts ta                                   single equivalent timed precondition time windows    induced stp derive schedule obtained intersecting windows forming differ  incomplete violate scheduling constraint ent original timed preconditions  action nodes say unscheduled         observed stergiou  koubarakis  tsamardi    following deﬁnition gives notion optimality nos  pollack  dtp seen “meta csp”  complete induced stps dtp used variables constraints values  section                                         metavariables disjuncts forming constraints                                                        constraints meta csp explicitly stated instead  deﬁnition  given dtp point variable com                                                        implicitly deﬁned follows assignment θ  plete induced stp optimal induced stp                                                        values metavariables satisﬁes constraints  iff solution assigning value                                                        meta csp iff θ forms consistent stp induced stp  equal value assigned solution                                                        dtp solution meta csp complete induced  complete induced stp                                                        stp dtp    optimal schedule optimal solution optimal figure  shows algorithm solving meta csp                  −                                     dtp tsamardinos  pollack  variant  induced stp aend note optimal solution mini  mizes makespan represented possibly partial plan forwardchecking backtracking algorithm solving gen                                                        eral csps appropriately choosing metavariable    solving dtp tdagraph                   handle function selectvariable value function se                                                        lectvalue show algorithm ﬁnds solution  general computing complete induced stp dtp                                                        exists backtracking simple  exists nphard problem solved                                                        modiﬁcation basic algorithm derive algo  backtracking algorithm stergiou  koubarakis                                                         rithm backtrack free meta csp  tsamardinos  pollack  given particular                                                        solution achieved exploiting information  structure temporal constraints forming tdagraph                                                        lagraph tdagraph decomposing  show task accomplished polynomial                                                        dtp  sequence “growing dtps”         disjunctive constraints exactly dtpform  dlast ⊃ dlast− ⊃  ⊃  disjunction ∨ · · · ∨  form − ≤                                                                                   yi time points ki real number easy number levels  ii vari  disjunctive constraint translated ables vi di  variables corre  equivalent conjunction constraints exact dtpform use sponding action nodes level iii  compact notation clarity efﬁciency reasons constraints di constraints involving onlyvariables vi decomposed dtp derive • forward checking performed each meta  ordered partition set metavariables meta variable ﬁrst value chosen selectvalue  csp original dtp                                   feasible forwardcheckingdtp returns false                 ∪ ∪  ∪ xlast                   solution stop algorithm  xi set metavariables corresponding • ﬁnally improved algorithm incremental  constraints di − di−    section each search step    ordered partition used deﬁne order dtp tdagraph updated consequence  selectvariable chooses variable handle adding new action node graph removing  crucial avoid backtrack variable single existing  main value ordering constraint duration constraint order use local search techniques  selected variable possible scribed section need change ba  value scheduling constraint time sic algorithm algorithm detects solu  window xi ∈ xi xj ∈ xj  xi selected tion instead returning failure processes meta  xj                                            variables ii terminates returns partial    order selectvalue chooses value induced stp formed stpconstraints dtp  metavariable important given metavariable values assigned metavariables optimal  value choose value corresponding ear solution deﬁnes assignment tdagraph  liest available time window current domain                                                          section sg denotes induced stp  metavariable                                                                        −      −                       dtp tdagraph  computed method           astart − ≤ −ki   ∧  − astart ≤ ki      im                                                 local search techniques tdagraphs  selectvalue chooses jth value time window       −      −                                                      ha  ci  kj   kh  ∈    tdagraph            contain types ﬂaw    using techniques selecting variable unsupported precondition nodes propositional ﬂaws  handle domain value algorithm figure  action nodes unscheduled temporal ﬂaws  derive following result                     level contains ﬂaw say level ﬂawed                                                        tdagraph ﬂawed level represents valid plan  theorem  given dtp  tdagraph meta                                                        called solution graph  csp  solvable solvedtp ﬁnds solution                                                          section present new heuristics searching  backtracking solution optimal                     −                                  solution graph space tdagraphs heuristics  induced stp aend                            used guide local search procedure called walkplan    consequence previous theorem originally proposed gerevini et al   solvedtp performs backtracking step  dtp heart search engine planner  consideration solution obtain initial tdagraph contains astart aend each  backtrack free algorithm replacing step     search step identiﬁes neighborhood ng successor     stop return fail                           states current tdagraph search state                                                                                         easy modiﬁed algorithm called solve set tdagraphs obtained adding helpful ac                                                       tion node removing harmful action node attempt  dtp   variable instantiated                              value follows assumptions repair earliest ﬂawed level following ai  constant maximum number action preconditions denotes action node level la level  scheduling constraint constant maximum given ﬂawed level action node ai helpful                                                                              ≤  number windows total runtime complexity solve insertion level removes propositional                                                                                                ≤  dtp polynomial                                   ﬂaw  harmful removal level                                                        remove propositional ﬂaw ii  theorem  given tdagraph dtp solvedtp                                                        decrease value al al unscheduled intuitively  processes meta csp corresponding polynomial                                                        al unscheduled forces start “too late”  time respect number action nodes   additionremoval action node requires    actual algorithm developed planner update dtp addingremoving ordering  ﬁnd induced stp dtp tdagraph contains straints actions lagraph  improvements making efﬁcient lack duration constraints scheduling constraint  space simplicity presentation omit detailed updated dtp use method  scription improved algorithm indicate described previous section revise  compute  main differences following ones       possibly new schedule actions optimal    • consistency stp formed values solution sg      variables meta csp singlevalued elements ng evaluated using heuristic eval      mains checked beginning solvedtp uation function consisting weighted terms estimat      using singlesource shortestpath algorithm ing additional search cost temporal cost el      stp inconsistent solution                                                           add action node graph extended level    lack space proofs omitted available remove action node “shrunk” level  extended version paper gerevini et al  details gerevini et al ements number search steps required ﬁnd straints actions values facts  solution graph plan makespan respectively ele initial state  ment lowest cost selected ng using order compute timethreatsb use notion  “noise parameter” randomizing search escape lo time slack action nodes  cal minima gerevini et al  lack space deﬁnition  given action nodes tda  rest section focus search cost term graph ha  ci   a− slacka    search cost adding helpful action node maximum time value a−  estimated constructing temporal relaxed plan π                                                        sistently increased sg violating time window  achieving  unsupported precondition nodes  chosen scheduling  propositional ﬂaws remaining adding   supported precondition nodes action nodes estimate time threat action node  unsupported adding ak ≤ check ∆πb al  slackal ak holds  count number  action nodes πb portion relaxed plan computed far  unscheduled adding  unsatisﬁed timed precon ∆πb al estimates delay start time al  ditions  actions π scheduling constraint addition actions πb determine  estimate satisﬁed context search  cost adding number actions π plus   experimental results                                             implemented approach planner called lpg    evaluation tdagraph derived removing td obtained nd prize suboptimal metric  harmful action node similar π achieving precon temporal track th international planning competition  dition nodes supported unsupported ipc lpgtd performed especially domain  removing la precedes ﬂawed level variants timed initial literals terms cputime  reparation unsupported precondition nodes level ﬁnd plan quality best plan computed  supported removing             cputime limit  minutes lpgtd incremental    π constructed using polymomial backward process planner ﬁnding succession valid plans section  similar algorithm proposed gerevini et al  present experimental results using test problems  giving output values set actions forming ipc problems airport domain specify  subrelaxed plan estimated earliest ﬁnishing time  time windows each timed precondition prob  initial state state obtained applying actions lems satellite domain  windows  level la −  ordered according levels domains time window additional    main difference extended algorithm concerns results available web sites planner  choice actions forming relaxed plan ac ipc technical report including experimental  tion chosen achieve subgoal action minimiz analysis solving problems windows associated  ing sum estimated minimum number addi timed preconditions gerevini et al   tional actions required support propositional precondi figure  shows cputime lpgtd three ipc  tions ii number supported precondition nodes mains respect best three planners  lagraph unsupported adding ipc support timed initial literals sgplan pmep                                                                      iii number timed preconditions estimate tilsapa domains lpgtd generally faster  unsatisﬁed extended π timedpreb planners solves problems  iv number action nodes scheduled table  gives summary results ipc  estimated unscheduled adding  domain variants timed initial literals  test problems  timethreatsb iii computed described total compare lpgtd’s results best results  gerevini et al  iiiiv new components corresponding results ipc planners  action selection method computed follows “allothers” general lpgtd solves problems    order compute timedpreb estimate earliest allothers percentage problems faster  start time estb earliest ﬁnishing time higher slower percentage  eftb using values count number produces better quality plans higher  timed preconditions satisﬁed eftb finally worth noting cputime compar  estb  durb estb maximum     ison consider problems lpgtd                                                        order magnitude faster slower allothers    • lowest earliest start time computed ex results rd column table  favorable      tension reachability analysis algorithm given                                                        lpgtd lpgtd faster  problems                              gerevini et al   derives lower bound slower  problems      start time each domain action                                                               • values action nodes ci  la tests conducted intel xeontm  ghz  gbytes      mutex addition ram description formalization ipc bench      determine addition − b− ≤       mark problems domains httplswwwcsuni                                                      dortmundde∼edelkampipcindexhtml    • maximum estimated lower bound time abstract ipc planner available edelkamp et      preconditions achieved relaxed al  lpgtd tilsapa planners ipc      plan estimate computed causal structure addressed variant pipesworld timed initial literals      relaxed plan duration scheduling tilsapa did address umtsflaw timed initial literals
