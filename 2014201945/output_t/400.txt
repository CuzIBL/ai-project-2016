                       building structure local search sat                       duc nghia pham     john thornton     abdul sattar                        safeguarding australia program national ict australia                institute integrated intelligent systems grifﬁth university australia           ducnghiapham johnthornton abdulsattarnictacomau                          abstract                          basic importance area local search techniques learn                                                        success newer complete methods      local search procedures solving satisﬁabil     current research goes core problem      ity problems attracted considerable attention modelling problem structure local search procedure      development gsat        involves twopart process ﬁrstly problem structure      recent work indicates realworld recognized original problem represen      problems complete search methods ad    tation considering satisﬁability problems ex      vantage modern heuristics able ef pressed conjunctive normal form cnf secondly      fectively exploit problem structure structure represented local search pro      velop local search technique effectively cedure way local neighbourhood possible      deal variable dependencies open  moves contain structure respecting ﬂips      challenge                                                           ideas approach come sources      paper show local search techniques firstly recent work modelling constraint sat      effectively exploit information prob   isfaction problems csps sat problems pham et al      lem structure producing signiﬁcant improvements    presence csp multivalued variables      performance structured problem instances   automatically detected clausal structure cnf prob      building earlier work ostrowski et al lem information embedded local search      information variable dependen way each group binary valued sat vari      cies built local search ables corresponding single multivalued csp variable      independent variables considered ﬂipping sat variable true time      cost effect ﬂip dynamically cal enforces underlying csp variable instanti      culated using dependency lattice models ated single domain value satbased local search      pendent variables using gates speciﬁcally achieves doing twoﬂip lookahead en      equivalence gates experimental study counters literal associated csp domain value      hard structured benchmark problems demonstrates   effect lookahead turns current csp domain value      new approach signiﬁcantly outperforms ﬂip turns new value second ﬂip      previously reported best local search techniques signiﬁcant advantage approach encoding binary                                                        csps cost doubleﬂip equals sum                                                        costs individual ﬂips ﬂip pairs    introduction                                       appear conﬂict clause reason  fundamental challenge facing local search researchers csp structure exploiting algorithms easily embedded  satisﬁability sat domain increasing scope existing sat local search architecture add neg  performance complete search methods ligible processing overhead individual ﬂip shall  taken granted local search general structure exploiting approaches cause  practical method solving large complex real interactions literals clauses  world satisﬁability problems selman et al  kautz require sophisticated ﬂip cost calculation procedures  selman  b´ejar manya  latest generation second source current research comes os  complete sat solvers turned tables solving trowski et al’s  work extraction gates  structured problems reach local search cnf encoded sat problems gates represent relation  zhang et al  e´en biere  ships sat variables form  fxxn                                                        ∈⇔   ∧ ∨ xi boolean variables    information performance complete search original problem gate recognized  versus local search available sat competitions value determined xxn removed  httpwwwsatcompetitionorg                       ostrowski et al used method simplify range struc                                                    ijcai                                                    tured sat benchmark problems producing signiﬁcant necessarily false example “and” gate  formance gains systematic dpll solver represented  best knowledge structure exploiting ap                ∧b  proaches applied local search domain commonly occurring clausal structure “equiv    problem facing local search approach implement alence” gate “xnor” gate illustrated follows  ing gates efﬁciency ostrowski et al’s approach  detect independent variables values determine set ∨ ∨ ∧ ¬a ∨¬b ∨ ∧ ¬a ∨ ∨¬c ∧ ∨¬b ∨¬c  dependent variables clausal gate connections using  information implement local search ﬂips order satisfy formula true iff  values independent variables dynamically cal true false equivalent  culates effects ﬂips overall solution cost differ false                                                        represented  local search needs know ﬂip cost                   ⇔       candidate ﬂips advance making generally                      achieved maintaining make cost break cost finally “xor” gate negation “equivalence”  each literal problem number clauses gate illustrated follows  true literal ﬂipped number clauses ¬ ∨¬ ∨¬  ∧  ∨ ∨¬  ∧  ∨¬ ∨  ∧ ¬ ∨ ∨    false costs updated                       each ﬂip major advantage sat local search false equivalent  speed cost effects calculated represented  achieved using clever data structures exploit sat               ⊕b  cnf problem structure tompkins hoos  taking approach ﬂips independent variables “equivalence” “xor” gate depends  renders standard sat local search architecture redundant variables equivalence difference calculated                                                                               ⇔        case ﬁnding potential cost independent vari pairwise fashion false                                                              ⇔                               ⇔    ⇔     able ﬂip requires solve minisat problem involving true true  affected dependent variables associated clauses true gate true general represent                                                                       ⊕              rest paper organized follows ﬁrst ex “xor”gateasy xxn  “equivalence” gate                                                          ⇔                            ∨           plain cost ﬂipping independent variable xxn an“or”gateasy      xxn                                                                          ∧           local search efﬁciently calculated using dependency “and” gate xxn herey dependent  lattice data structure structure models various variable value determined independent  pendencies original problem dynamically calcu variables xxn sake simplicity treat                                                                         ⊕     lates independent variables ﬂipped cause “xor” gate  special case “equiva                                                                      ¬  ⇔       clause change truth value details construc lence” gate  rest paper  tion operation lattice given  sections evaluate usefulness new approach  dependency lattice  conduct empirical study examines ostrowski et al  described pro  structured sat benchmarks proved cess recognizing gates cnf problem reduced  difﬁcult local search past finally discuss searching appropriate clausal structures during pre  signiﬁcance results indicate future directions processing phase information used clas  research                                          sify dependent independent variables complete                                                        search method means search space immediately    gates dependencies                             reduced consider independent variable instantia  following discussion shall broadly follow termi tions dependent variable values automatically  nology used ostrowski et al  firstly consider ﬁxed propagation  following cnf formula                                  local search builtin propagation                                                        mechanism fact local search strategy precludes propa      ¬ ∨   ∨  ∨   ∧  ∨¬  ∧  ∨¬   ∧  ∨¬                                      gation deliberately allows inconsistent assignments    clauses satisﬁed persist exploit information inherent dependent  false necessarily false nec variable relationships requires remove  essarily true example “or” gate domain “free” variables including effect  value determined truth value ∨ ∨ overall cost particular ﬂip achieve  represented                                 developed dependency lattice data structure lattice                        ∨                            formed result analyzing original cnf problem                                              independent variables relationships inter    similarly reverse signs literals nal external gates firstly independent variable      ∨¬  ∨¬   ∨¬   ∧ ¬ ∨   ∧ ¬ ∨  ∧ ¬ ∨        simply variable determines value depen                                    dent variable gate relationship determining    formula satisﬁed variables turn determined gate inde  true necessarily true pendent variable variable determined                                                    ijcai                                                    gate relationship secondly internal gate gate  calculating flip costs  recognized structure original cnf illustrate process cost calculation instanti  formula thirdly external gate gate                                                        ated independent variables figure  follows ←  pendent variable represents clause original cnf                                                        false ← false ← true ← falsemovingdown  formula internal gate clarify                                                        lattice “and” gate node fol  concepts consider following cnf formula example                                                        lows values make gate variable false                                                        similarly moving        ¬g ∨ ∨ ∧ ∨¬v ∧ ∨¬v∧                                                        corresponding “or” gate variable true following       ∨¬v ∨¬v  ∧ ¬g ∨ ∧ ¬g ∨ v∧       gates “equivalence” gate                                                        gate variable false            ∨ ∨ ∧ ¬g ∨¬g ∨ g∧                                                        way lattice reﬂects necessary consequences          ¬g ∨ ∨¬g ∧ ∨¬g ∨¬g∧             independent variable instantiations rest problem                       ∨                          calculate cost ﬂipping particular independent                                                        variable vi need know external gate variables  equivalent                                                        false true result            ∧vv ∧  ∨vv∧           ﬂip achieved storing each gate node                                                        set independent variables ﬂipped cause            ⇔ vv ∧  ∨vg           gate variable change truth value example node                                                                                                       additional variable depends clause stores independent variable  signifying                                                        ﬂipped  change        similarly  ∨ ∨ true true                 false  true  false general each original cnf clause sub falseif ﬂipped moving  sumed gate dependency represented addi lattice true  tional variable subsumes clause external change values ﬂipping change truth  “or” gate dependency                                 value ﬂipping change truth value    having translated original problem set gates ﬂips change truth value gso  represent dependency lattice figure  inherits variable set node similarly                                                        inherits change variable make                                                        true                                              correct variable sets each ex                                            ternal gates read make cost break cost                        vv                                                               each independent variable simply counting number                                                 times variable appears false external gate  make cost                          fg                    number times appears true external gate                                                                             break cost example make                                                       cost make break costs equal zero                                                  general case                                                                                    realistic problems easily happen          figure  example dependency lattice      dependent variable appears multiple branches leading                                                        gate handle cases require gen    original variables nodes lat eral deﬁnitions variable sets each gate type                                                        composed  tice nodes correspond independent  variables nodes internal gates node firstly “and” gate true parent nodes  external gate form satisfying assignment true change parent node’s truth  original cnf formula equivalent assignment value change truth value gate means  independent variables ci external nodes eval gate’s variable set  inherit union  uate true result follows trivially structure parent variable sets psets follows  lattice implements structure internal                                                                 trueand ←∪truepsets  gates ensures internal gate relationships  necessarily satisﬁed external nodes eval alternatively “and” gate false  uate true means remaining cnf clauses parent nodes true gate truethis  subsumed internal gates true requires false parent nodes true true  satisfying assignment               parent node false follows    purpose lattice embody structure gate  dependencies way cost ﬂipping inde falseand ←∩falsepsets ∪truepsets  pendent variable efﬁciently calculated analo  gous existing local search sat solvers existing rules “or” gate similarly deﬁned  solvers equipped handle “or” gate dependencies verse                                                    ijcai                                                             falseor ←∪falsepsets         changes variable set vv vvthis    trueor ←∩truepsets ∪falsepsets change causes make costs reduced                                                        break costs increased    “equivalence” gates parents process terminates external nodes set  truth value single parent changes value true meaning satisfying solution  gate change follows                       situation illustrated figure                   ←∪psets  ∩psets                                                             vvvv    general “equivalence” gate true iff count                                                                                                            true parents parity count parents                            did discover “equivalence” gates                               parents problem set did implement                                                                            ggt            morethantwoparent case                                                                                                                              addition did ﬁnd rare problem instances sin  gle variable dependent gate              circumstances added additional dependent variable                                                                                                           each extra gate connected variables ﬁrst vari                       able additional “equivalence” gates                                                                 figure  dependency lattice solution    implementation  motivation dependency lattice develop  efﬁcient method update make break costs  experimental validation  independent variables clearly potential ad order validate approach handling gate dependen  ditional work calculating ﬂip costs using lattice cies implemented noncnf version adaptnovelty  weigh beneﬁts reducing size search space hoos  operates new dependency lattice  eliminating dependent variables internal gate clauses platform evaluated performance algo  problem signiﬁcance exactly rithm selection satlib ssa parity andbit  lattice updated current implementation problems table  ﬁrstly shows effect gate detection  representing total set independent variables                                                th      number variables clauses problem set  each node using nind bit pattern detailing number independent dependent gates  dependent variable variable set particular node          th                                            corresponding noncnf dependency lattices total  position bit pattern node time taken each conversion  set using representation efﬁciently implement compared performance new noncnf  set operations necessary propagate effects ﬂip adaptnovelty algorithm original cnf based  ping independent variable through lattice propa variant running algorithms  times each  gation starts independent variable selected ssa par instances  times each par  ﬂipping beginning lattice node corresponding instances table  shows success rate average num  variable update works lattice ber ﬂips time seconds taken solve instances  nected internal nodes example ﬂipped figure each run timed  hour ssa par   nodes selected update instances  hours par instances  date process performs appropriate set operations shown table  noncnf  version  parent variable sets produce updated variable set adaptnovelty signiﬁcantly outperforms original cnf  truth value selected gate truth value node counterpart terms ﬂips time new  contents variable set remain unchanged noncnf approach  times better orig  update propagation required node inal cnf approach instances addition  process continues reaches external ﬁrst time local search solver managed ﬁnd  nodes external node’s variable set changed solutions parity bit problems  hours  updates make break costs affected independent sls method solve problems  variables process terminated                 dlm  wah wu  dlm    follow process ﬂipping figure                                                                                            solve compacted par instances producing  alter variable set vv change successful run  attempts taking nearly  hours  true variable set changed effects ﬁnd solution  propagated internal node left unchanged ver  true situation parents share                                                                 sions adaptnovelty  conclude extraor  variable vv  dinary performance gains successful recogni  case ﬂipped parents tion exploitation variable dependencies new non  change truth value remain equivalent leaving cnf approach shown figure  dependency lattice  unchanged inherits variable set  finally external node changes truth value true available httpwwwsatliborg                                                    ijcai                                                                                                                                    cnf        extracted    noncnf                                                                                     problem vars clauses ﬁxed eq andor input output seconds                                                                                                   ssa                                                                                                   ssa                                      ssa                                                                   ssa                                                                    par                                                                                                                                                                                par                                                                                                                     par                                                                                                                   par                                                                                                              par                                                                                                                           par                                                                                                   par                                                                                          par                                                     par                                            par                                                                                                                         table  effects gate extracting algorithm            ssa∗ parity problems table shows number           “ﬁxed” “equivalence” eq “andor” gates extracted        each instance number “independent” “exter     nal dependent” gates each processed noncnf instance  described table input output respectively figure  dependency lattice par instance                                                        graph independent gates depicted shaded rect                 cnf based           noncnf based      angular boxes dependent “equivalence” “and”                                                        “or” gates represented hexagon house inverse   problem solved ﬂips seconds solved ﬂips seconds                                                        house shaped boxes respectively external dependent gates   ssa          lightly shaded solid arrow outputs gate value   ssa            dashed arrow outputs negation gate value   ssa                            ssa                                                                  cnf based      noncnf based                   par                                                       problem solved ﬂips seconds solved ﬂips seconds   par                                                                       bart             par                                                                       bart             par                                                                       bart             par                                                                       bart             par         na       na                                                                bart             par         na      na     par         na      na    table  results solving aloul’s bart fpga   par         na      na     problems using cnf noncnf based versions                                                                       par         na      na    adaptnovelty theflips  seconds average                                                        number ﬂips seconds taken solve each instance  table  results solving ssa parity  problems using cnf noncnf based versions  adaptnoveltytheflips   seconds  aver fort discover solutions respect dependencies  age number ﬂips seconds taken solve each instance cost maintaining consistency  original adaptnovelty flipsvalues newly discovered gates noncnf approach sig  approximated ﬂip counter maximum exceeded niﬁcant measure conducted additional exper                                                        iment using set bart fpga problems exhibit                                                        pendency structure aloul et al  table  shows  par instance highly connected access noncnf adaptnovelty solver   times  extra knowledge enables new solver maintain slower problems performance deﬁcit  sistency dependent variables efﬁciently partly explained initial cost searching  navigate search space ﬁnd solution structure gate dependencies original cnf representation  variable dependencies ﬂattened signiﬁcant problems  hidden original cnf representation means solution time signiﬁcantly exceeds preprocessing time  cnf based sls solvers expend considerable extra ef used builtin set class update lattice                                                    ijcai                                                    
