               machine learning online hardware reconﬁguration                     jonathan wildstrom∗ peter stone emmett witchel mike dahlin                                     department sciences                                     university texas austin                               jwildstrpstonewitcheldahlincsutexasedu                          abstract                            previous research wildstrom et al  shown                                                        potential exists performance improved through      systems continue increase com                                                        autonomous reconﬁguration cpu memory resources      plexity need aibased solutions becom                                                        speciﬁcally work showed single conﬁguration      ing urgent example highend servers                                                        optimal workloads introduced approach      partitioned logical subsystems                                                        learning based lowlevel statistics conﬁg      repartitioned ﬂy avail                                                        uration effective current workload di      able development raises possibility                                                        rectly observing workload work indicated      conﬁguring distributed systems online optimize                                                        online reconﬁguration theory improve perfor      dynamically changing workloads                                                        mance best knowledge estab      introduces need decide                                                        lished online hardware reconﬁguration actually produces      reconﬁgure paper presents approach                                                        signiﬁcant improvement overall performance practice      solving online reconﬁguration problem                                                          paper demonstrates increased performance trans      particular learn identify lowlevel                                                        action processing using learned model reconﬁg      statistics set possible conﬁg                                                        ures hardware online speciﬁcally train ro      urations lead better performance                                                        bust model expected performance different hardware      current unknown workload approach requires                                                        conﬁgurations use model guide online      instrumentation system’s middleware                                                        conﬁguration agent show agent able make      operating systems introduce agent                                                        signiﬁcant improvement performance tested      able learn model use switch conﬁg                                                        variety workloads compared static conﬁgurations      urations online workload varies agent                                                          remainder paper organized follows      fully implemented tested publicly avail                                                        section gives overview experimental testbed      able multimachine multiprocess distributed sys                                                        section  details methodology handling unexpected      tem online transaction processing benchmark                                                        workload changes including training agent sec      tpcw demonstrate adaptive                                                        tion  experiments used test agent sec      ﬁguration able outperform single ﬁxed                                                        tion  section  contains results experiments      conﬁguration set variety work                                                        discussion implications section  gives      loads including gradual changes abrupt work                                                        overview related work section  concludes      load spikes                                                           experimental testbed overview    introduction                                                        servers support partitioning multiple logical subsys  recent introduction partitionable servers enabled tems partitions commercially available quintero et  potential adaptive hardware reconﬁguration proces al  each partition independent memory pro  sors memory added removed cessors available enabling function  incurring downtime including single proces dependent physical machine way partitions ap  sors shared separate logical systems plications running separate partitions prevented  allows ﬂexibility operation sys interfering each through resource contention  tems raises questions furthermore servers highly ﬂexible allow  reconﬁgured paper establishes automated ing different quantities memory processing resources  adaptive hardware reconﬁguration signiﬁcantly improve assigned partitions supporting addition  overall performance workloads vary       removal resources operating contin    ∗currently employed ibm systems storage group ues running hardware available allows partition  opinions expressed paper necessarily opinions ing subprocessor level partition use little                                                             ibm                                                physical processor hosting quintero                                                    ijcai                                                    et al  reconﬁgurable hardware      rbe         frontend      backend  easily available research reported paper simulates eb          application  reconﬁguration partitions multiple desktop computers                   server                                                                  eb                        database    remainder section gives highlevel overview                                server  testbed setup brief description tpcw bench   eb            image  mark discussion modiﬁcations testbed                     server  section  software packages use     tuningagent  given section  hardware simulation  subprocessor partitioning reconﬁguration explained                                                              figure   machines used physical setup  section  finally overview implementation  tuning agent presented section  testbed  details wildstrom et al  implementation set items cached  seconds                                                        reused pages desiring promotional items during    tpcw                                            time period modiﬁed speciﬁcations  tpcw standardized benchmark published trans wildstrom et al   action processing performance council dictates instan primary reason speciﬁcations modiﬁed  tiation online bookstore  dynamically generated intention overwhelm tpcw  web pages user interface pages divided speciﬁcations explicitly designed prevent  browsing ordering pages relative performance happening nonetheless use tpcw  test sut determined using venient way generating realistic workloads  external machines called remote browser em  ulators rbes running set emulated browsers ebs  software  ebs represent individual users site tpcw implementation implement  mod  browsing store searching andor placing orders ules sut database application server    each user follows three deﬁned workloads mixes image server implementation used work uses  shopping browsingorordering given current page postgresql  database apache jakarta tom  quested speciﬁcation deﬁnes respective probabilities cat  application image servers  each possible page each mix results differ java code used application server dynamic  ent ratios browsing ordering page references each web page generation database interaction derived  mix relative percentages summarized table  freely available tpcw implementation univer                                                        sity wisconsin pharm project cain et al  slight                                 mix                    modiﬁcations code ﬁrst use tomcat                     browsing  shopping  ordering       postgresql second allow limited caching data       browsing pages                            allow number connections database       ordering pages                             limited number connections controlled through  table  expected access percentages different pages tpc java semaphore fairness enabled number  mixes speciﬁed garcia garcia        nections allowed reconﬁgurable resource controlled                                                        through new administrative servlet    single run benchmark involves measuring  furthermore rbe modiﬁed ways  throughput during ﬁxedlength measurement interval nection timeouts treated fatal retried  allowed warm prior measurement inter ebs required run mix  val throughput measured web interactions second change mix using during benchmark run  wips overall average number page requests  returning second                                  hardware    commercial systems publish performance physical hardware used work consists  identi  sults involve large numbers heterogeneous machines cal dell precision systems each  ghz proces  complex setups simplicity work considers sor gb ram gigabit ethernet switch networks  situation single database server backend sin systems through builtin gigabit ethernet interfaces  gle web server frontend illustration fig show figure  machine used each  ure  throughput relatively small backend systems separate machine hosts  reported section  signiﬁcantly com rbe tuning agent true reconﬁgurable  mercially built substantial difference tuning agent likely reside inside parti  overall resources throughput unexpected tionable management  experimental                                 practice backend systems    tpcw speciﬁcation places strict restrictions physically independent machines meant represent  various facets example pages partitions single reconﬁgurable total  contain set random promotional items displayed ghz processing power  gb ram order  items expected randomly selected each simulate partitioning  partitions cpu  time page generated relax requirement memory artiﬁcially constrained machines                                                    ijcai                                                    cpu constrained highly favored periodic busyloop workload require customizing mid  process memory constrained using linux mlock sub dleware each online store  routine constraints systems set previous work wildstrom et al   way allow overall  ghz processor shown lowlevel operating statistics used  gb memory used combined instead help suggest conﬁguration used  ends example backend allowed  ghz workloadoblivious way approach advantage  frontend  ghz available                 requiring customized instrumentation instead    using constraining processes simultane using outofthebox versions software method allows  ously simulation desired hardware conﬁguration easy replacement need  possible additionally processes designed change ing signiﬁcant reimplementation lowlevel statistics  constraints ﬂy simulate recon refer workload features easier gen  ﬁguring order ensure exceed eralize workloads reasons use low  total combined resources constrain level statistics preference customized instrumentation  “partition” losing resources granting operating middleware  resources “partition”                                                          training model learning agent    tuning agent                                                        order automatically handle workload changes train  tuning agent handles realtime reconﬁguration                                                        model predict target conﬁguration given statistics  three phases reconﬁguration number                                                        overall resource use collect statistics each  allowed database connections modiﬁed com                                                        machine runs vmstat command logs statistics  pletes cpu resources moved constrained                                                        assumed true automatic reconﬁgurable  machine losing cpu added memory                                                        supply statistics through efﬁcient  removed donor added receiving                                                        kernellevel interface command allowed prece  each step completes begun                                                        dence cpu constraining process    types tuning agents simulate ﬁrst  omniscient agent told conﬁguration vmstat reports  statistics  concerning process quantity  switch reconﬁguration occur based  concerning memory use  swapping  io  cpu use  perfect knowledge omniscient agent used obtain interrupts context switches order make  upper bound results uses known set conﬁgurations conﬁgurationindependent memory statistics  maximizes performance allowing converted percentages resulting vector  statis  known optimal performance compare tics  each partition current conﬁg                                                        uration comprise input representation    second agent makes decisions  alter conﬁguration decision based trained model model predicts conﬁgura                                                        tion result higher throughput agent framework  set handcoded rules learned model number                                                        reconﬁgures accordingly  methods agent discuss paper based  learned model uses lowlevel statistics predict experiments consider possible  better option conﬁgurations learned version ﬁgurations using  resources cpu memory number  tuning agent discussed section  connections table  wide range possible cpu mem                                                        ory connection limits investigated selected                                                        conﬁgurations maximize throughput extreme situ    handling workload changes                          ations particular connection limits hard  provisioning resources predictable ware resource necessary database  workload fairly common wellunderstood   overwhelmed large numbers queries during  sue oslake et al  static conﬁgurations perform heavy browsing periods  poorly completely different workload ex  ample common phenomenon known “slash              database      webserver  dot effect” littleknown site inundated trafﬁc conﬁg cpu  mem    cpu    mem    conn  featured news site consider situation                                                                              browsing       gb       gb     site online store conﬁgured                                                                                 ordering        gb         gb    normal workload ordering shopping users large                          number unexpected browsing users appearing table  conﬁgurations resource distributions database  whelm site prepared unexpected nections allowed used experiments  change workload situation workload spike    addition drastic changes situation order acquire training data  pairs varied tpc  workload gradually changes possible han runs each pair runs consists run  dled appropriately                                   set workload each conﬁguration workload consists    unfortunately practice workload eas  shopping users random number   ily observable quantity possible  browsing ordering users  pairs each  instrument various ways help observe each run  seconds rampup time followed                                                    ijcai                                                     second measurement interval during  seconds  evaluating learned model  vmstat data collected                    present types workload changes gradual    combination wips statistics gath change workload spike concentrate evalu  ered each run set training data points created ation workload spike sudden changes workload  each pair following way statistics require faster adaptation gradual change  each run divided nonoverlapping  second simplicity simulation  tervals average statistics each interval browsing spike ordering spikes simulated  input representation data point conﬁg similar fashion three random numbers generated  uration higher throughput wips determined xxx∈  base workload consists  preferred conﬁguration data points generated  shopping users ordering users work  pair way each  pairs runs gen load reaches steady state  seconds rampup time  erates  data points                                 seconds measurement time    given training data weka witten frank  point workload abruptly changes browsing inten  package implements machine learning algorithms sive workload browsing users replacing order  build models used prediction ing users spike continues  seconds  order obtain humanunderstandable output jrip time workload abruptly reverts ordering intensive  hen  rule learner applied training data workload ordering users  seconds  generated data jrip learned rules shown figure  measurement interval ends    seen figure  jrip determines complex rule simulate gradual change begin  set used identify optimal conﬁguration workload consists  shopping users   unobserved workload   supplied systems statistics browsing users  seconds rampup time   determined importance  evenly split seconds measurement time  browsing users  backend machines verted ordering mix repeats  seconds  frontend statistics used related execution til users running ordering mix point  time memory use backend statistics sample al measurement interval continues  seconds  statistic areas note rules specify each workload tested  hardware conﬁgurations  means identifying conﬁguration baselines static conﬁgurations execute workload  browsingintensive conﬁguration taken “default” additionally know spike takes place    look rules depth identify ends test optimal set conﬁgura  certain patterns indicate rules logical tions omniscient agent gradual change  example rules   set threshold each conﬁguration optimal force om  time spent database waiting io rule  indi niscient agent reconﬁgure point finally  cates large percentage memory database learning agent allowed completely control  use three indicators point situation ﬁguration based observations  memory useful databaseintensive agent continuously samples partitions’  conﬁguration memory constrained database statistics predicts optimal conﬁguration using slid  ﬁles paged frequently time ing window recent  seconds statis  spent waiting pages read trends tics conﬁguration chance determined beneﬁcial  discussed wildstrom et al             immediately each conﬁguration change                                                        agent sleeps  seconds allow statistics    verify learned model ﬁrst evaluate perfor reﬂect new conﬁguration  mance jrip’s rules using stratiﬁed fold cross valida  tion order prevent contamination results hav  ing samples single run appearing training  results discussion  test sets hand partitioning  evaluation learning agent performed  ran  training runs  sets  runs each set having  data dom spike workloads workloads half browsing  points  trials each used distinct set test set spikes half ordering spikes each workload run  training remaining  sets test jrip correctly  times each static conﬁgurations  predicts better target conﬁguration  time learning agent making conﬁguration decisions ﬁnally    important facet rules learned omniscient agent forcing optimal hardware  domainspeciﬁc rules make sense dis ﬁguration average wips each workload com  tributed different rules necessary sys pared using student’s ttest signiﬁcances   tem example processes cpuheavy conﬁdence noted  perform io distributed mathematical overall learning agent does signiﬁcantly outper  expect rules learned apply forming static conﬁguration  trials  completely different training new set rules outperforming static conﬁgurations   using methodology similar beneﬁts  situations adaptive agent does  learning model remove need explore set highest raw throughput case adaptive  possibly relevant features thresholds manually agent  wips better static conﬁguration                                                    ijcai                                                    orderingbiased conﬁguration used column following table satisﬁed                 execution time waiting io                                    memory active                                                                                context switches second                                                                                            database blocks received second                 execution time user space                                 execution time kernel space                                                    memory active                                app              server memory idle                                             browsingbiased conﬁguration used                     figure  jrip rules learned weka numbers averages second interval                             conﬁguration                 provement ordering spike tests average    spike type  adapt  browsing  ordering omnisc      learning agent  wips omniscient agent     ordering                             trials sudden anomalous     browsing                           drops throughput approximately  seconds  table  average results wips different conﬁgurations run browsing omniscient conﬁgurations figure   ning spike workload                                drops confuse agent believe                                                        confusion abnormal database activity during                                                        anomaly cause anomalies identiﬁed  agent loses signiﬁcantly static conﬁgura future work eliminate anomalies  tion results table                   addition spikes activity test gradual changes    addition performing compared static workload verify agent capable handling grad  ﬁgurations learning agent approaches accuracy ual changes detailed section   runs aver  omniscient agent   ordering spike tests age throughputs browsing orderingintensive  adaptive agent worse  wips omni                                                       ﬁguration   wips respectively learning  scient agent actually showing higher throughput  tests  agent handles gradual change gracefully winning overall  typical example throughputs each average throughput  wips room  conﬁgurations ordering spike seen figure  improvement omniscient agent switches                                                        conﬁgurations  users running each                                                        browsing ordering workloads signiﬁcantly outperforms                                                        learning agent average throughput  wips                                                          method automatic online reconﬁguration hard                                                        ware deﬁnite beneﬁts use static hardware                                                        conﬁguration wide variety tested workloads                                                        apparent adaptive agent better static                                                        conﬁguration considered agent room im                                                        provement approach omniscient agent omniscience                                                        realistic goal additionally based rule set learned                                                        agent apparent problem deciding                                                        alter conﬁguration does trivial solution                                                             related work                                                        adaptive performance tuning through hardware reconﬁgura                                                        tion recently possible papers address                                                        directly work ﬁeld far deals  figure  wips throughput each conﬁgurations during maintaining service level agreement sla  ordering spike averaged  runs graph work similar relevant examples cited  shows learning agents chosen each conﬁguration fundamentally different problem  given time choices averaged “adaptive” graph vestigating formal sla                                                        determine compliance section reviews related    handling browsing spikes agent consistently ex work reported paper  ceeds throughput static conﬁguration ibm’s partition load manager plm quintero et al  performs static conﬁguration   handles automatic reallocation resources   tests agent actually wins signiﬁcantly  conﬁgurations agent room im  database reanalyzed population result                                                        administrative tasks took long time performing sorts    presumably measurement noise               massive strain database                                                    ijcai                                                    
