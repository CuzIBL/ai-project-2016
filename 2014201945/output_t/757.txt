               greedy    approach      establish    singleton   arc   consistency                                 christophe  lecoutre    stephane´ cardon                                          crilcnrs     fre                                               universite´ d’artois                                                lens france                                   lecoutre cardoncrilunivartoisfr                        abstract                          practical utilizing consistencies instead                                                        arc consistency during search      paper propose new approach estab  recent focus singleton consistencies      lish singleton arc consistency sac constraint particularly sac singleton arc consistency      networks principle existing sac al illustrated recent works debruyne bessiere      gorithms involves performing breadthﬁrst search prosser et al  bartak  bessiere debruyne                                depth equal  principle   constraint network singleton arc consistent      algorithms introduced paper involves iff singleton check does show unsatisﬁability iff      forming runs greedy search performing variable assignment enforcing arc      each step arc consistency maintained sistency resulting network does entail domain      original illustration applying inference wipeout      establishing singleton arc consistency search  paper propose new algorithms denoted      using greedy search allows beneﬁting   sac  sac establish singleton arc consistency      incrementality arc consistency learning relevant sac algorithms introduced far perform breadth      information conﬂicts potentially ﬁnding ﬁrst search depth equal  new algorithms      solutions during inference process perform runs greedy search each step      space time complexities quite  arc consistency maintained unlike sac      competitive                                      sac does record context performed runs                                                           identiﬁed advantages adopt ap    introduction                                       proach  inference search categories techniques pro • extra space requirement limited                                cessing constraints dechter   hand infer • algorithms beneﬁt incrementality arc  ence used transform problem equivalent form consistency  directly used show satisﬁability  satisﬁability problem simpler handled • using greedy search enables learning relevant informa  search algorithm inference aims modifying constraint tion conﬂicts  network employing structural methods variable • possible ﬁnd solutions establishing  elimination tree clustering ﬁltering methods based consistency  properties arc consistency path consistency  hand search used traverse space delim • time complexity algorithms quite competitive  ited domains variables problem search precisely good space complexity algo  systematic complete relying breadthﬁrst rithms allows use large constraint networks  depthﬁrst exploration backtracking stochastic particular sac admits space complexity  incomplete relying greedy exploration randomized lying arc consistency algorithm greedy search  heuristics                                           maintaining arc consistency used naturally beneﬁt    popular systematic search algorithms incrementality arc consistency fact itera  solve instances constraint satisfaction problem csp tively establishing arc consistency  called mac sabin freuder  mac interleaves duced search space penalizing repeatedly estab  inference search each step depthﬁrst ex lishing original search space dead  ploration backtracking local consistency called arc end encountered during greedy search nogood  consistency maintained introduction recorded andor origin failure taken account  stronger consistencies maxrestricted path consis solutions algorithm finally  tency debruyne bessiere singleton arc instance contains large underconstrained  sistency debruyne bessiere issue efﬁcient time complexity expected  preliminaries                                      omd  omnd denotes number vari                                                        ables size largest domain number  constraint network consists ﬁnite set variables                                                        constraints  each variable associated domain domx  noting set values allowed ﬁnite set second algorithm denoted sac proposed                                                                       constraints each constraint associated rela bartak   idea check singleton  tion relc denoting set tuples allowed variables arc consistency value removal value  varsc involved solution constraint network xa xa does support does  assignment values variables long acp algorithm allows avoiding  constraints satisﬁed constraint network said usefulness singleton checks recording each value  satisﬁable admits solution          set values supported expected supported                                                                                          constraint satisfaction problem csp task experimentation bartak   sac offers signif  determine given constraint network sat icant improvement practical time efﬁciency respect                                                        sac worstcase space time complexities sac  isﬁable npcomplete constraint network called                         csp instance solve csp instance depthﬁrst search al respectively  omn   gorithm backtracking applied each step bessiere debruyne  remarked sac  search variable assignment performed followed does present improvement terms worstcase time  ﬁltering process called constraint propagation usually complexity singleton arc consistency  constraint propagation algorithms based value xa checked perform  constraint network properties arc consistency remove arc consistency enforcement xa scratch  values occur solution      words sac does exploit incrementality arc                                                        consistency arc consistency algorithm said incremen  deﬁnition  let    constraint network ∈ tal worstcase time complexity ap   ∈ varsc ∈ domx   said plied time given network applied  arc consistent wrt iff exists support nd times consecutive executions  tuple ∈ relc tx  said value deleted current arc consis  arc consistent iff ∀x ∈  domx  ∅ ∀c ∈  tency algorithms incremental beneﬁt incre  ∀x ∈  varsc ∀a ∈ domx arc consistent wrt mentality arc consistency bessiere debruyne                                                       proposed new algorithm sacopt dupli                                                                                           nd    acp  denote constraint network obtained cates original constraint network dedicated                                                                                          enforcing arc consistency ac given constraint net straint networks each value    instance                                                                                                        work  acp  values arc simply singleton consistency value     consistent removed note value usu checked dedicated constraint network used  ally refer pair xa ∈ ∈ domx worstcase space time complexities sacopt                                                                    mnd        mnd  variable domain acp  spectively    best time  noted acp   ⊥ clearly unsatisﬁable  complexity expected algorithm enforc                                                                                                        ⊂    ax  ∈  ∧ ∈  domx  constraint ing singleton arc consistency bessiere debruyne                                                           finally observation space complexity  network obtained restricting domain     singleton variable assignment  ∈ omnd  prevents use sacopt large constraint                                                        networks bessiere debruyne  proposed  deﬁnition  let    constraint network ∈ algorithm called sacsds represents tradeoff   ∈  domx  said singleton arc time space respect each value  consistent iff acp xa  ⊥ said singleton arc domain called sacsupport recorded  consistent iff ∀x ∈  domx  ∅ ∀a ∈ domx  propagation list used arc consistency return data  singleton arc consistent                   structures required establish arc consistency                                                        dedicated shared experimental study random     called domain                                                           stances highlighted good performance algo  note ∈ respectively ∈  iff ∈                                                        rithm worstcase space time complexities sacsds  ∈ domx respectively ∈ domx                                                        respectively ond omnd    overview   sac  algorithms                                                           sac  ﬁrst algorithm proposed establish single  ton arc consistency called sac debruyne bessiere algorithms previously mentioned involve performing  principle algorithm check sin breadthﬁrst search depth equal  each branch  gleton arc consistency variables value size  search corresponds check singleton  detected singleton arc inconsistent removed worst arc consistency value allows removing value  case space time complexities sac respectively inconsistency establishing arc consistency                                                        alternative check singleton arc consistency    assumed  ∈ ∧  ∈ ⇒  value continuity previous checks words  convenience xa simply denoted xa try build branches greater sizes using greedysearch each step arc consistency maintained algorithm  buildbranch  long current branch inconsistency  br ← ∅  try extend inconsistency  pbefore ←  branch size  value detected inconsistent  consistent ← true  variable assignments correspond singleton arc  repeat  consistent values statement relies proposition   pick delete xa ∈ qsac st ∈ varsbr                                                           ←  acp xax  proposition  let    constraint network   ⊥  let ⊂  ax ∈  ∧ ∈ domx acp  ⊥      add xa br  pair xa ∈ domx    acp singleton arc consistent                     consistent ← false                                                            br  ∅    proof acp  ⊥ clearly element      add xa qsac  ∈ singleton arc consistent consequence  end  monotony arc consistency observe  consistent ∨ varsqsac − varsbr  ∅  ﬁnd values ∈ domy   ← pbefore                                                             br  ∅   acp  ∈ values    clearly singleton arc consistent                      remove domx                                                          ←  acpx    mentioned proof values                                                          qsac ← qsac −y ∈ dompbefore−domp   tected singleton arc consistent checking singleton  end  arc consistency ones proposition   seen generalization property  chmeiss sais   related exploitation singleton algorithm  sacp     csp  valued variables sabin freuder           ← acp     primary goal approach exploit  repeat  incrementality arc consistency nice features  pbefore ←                                                                                 observed using greedy search ﬁnd  qsac ←  ∈ ∧ ∈ domx  solutions learn conﬂicts recording  qsac  ∅                                                             buildbranch  goods weighting failure culprits                                                           pbefore    description ﬁrst algorithm uses  greedy search order establish singleton arc consistency  description given context using underlying inconsistency detected solution  coarsegrained arc consistency algorithm ac mack way extending current branch finally  worth  ac lecoutre et al  der maximally beneﬁt incrementality arc  variableoriented propagation scheme                                                    sistency build branches long possible    let introduce notations     indicated algorithm important se  acp ⊆ means enforcing arc consistency                                                        lect ﬁrst values xa ∈ qsac ∈ domx  given propagation set description  ac instance function propagateac bessiere proposition  sac correct algorithm worst  debruyne   set values sin case space complexity omd time complexity                       sac                                      gleton arc consistency checked branch corre obmd  denotes number branches built  sponds set values assigned sac                                  set values ⊆  ∈    ∧ ∈ domx       proof correctness results proposition  sac  varss  xx ∈ finally instruction  uses optimal coarsegrained arc consistency algorithm  form pbefore ← systematically considered ac overall space complexity omd  duplication problem time corre space complexity ac omd data struc  spond store restore domain network                                                        ture qsac ond each branch built  structures underlying arc consistency algorithm time complexity obmd incrementality    algorithm  starts enforcing arc consistency each branch built algorithm omd   given network values structure qsac remark include “empty” branches cor  order check singleton arc consistency succes respond detection inconsistent sac values  sive branches built process continues ﬁxpoint respect singleton arc consistent constraint net  reached algorithm  allows building branch works corollary  indicates sac outperform  forming successive variable assignments maintaining sacopt sacsds admitting time complexity  arc consistency line  inconsistency detected omnd interestingly suggests sac  non branch value outperform sacopt sacsds structured nec  qsac line  information sin essarily singleton arc consistent instances contain large  gleton arc consistency inconsistency value underconstrained parts expected realworld ap  branch manage removal value plications  reestablish arc consistency lines   note thatcorollary  sac admits worstcase time complexity          omn   applied singleton arc algorithm  updateset  set values                                                 sistent constraint network sac admits bestcase time         set                                                          sac ←  sac −  complexity omd  worstcase time complexity  each br ∈ brs                                                                     omnd                                                  each xa ∈ set                              ndnd                       xa ∈ br    proof worstcase     obtain       remove xa br  omnd applied singleton arc consis  add qbr  tent constraint network best worst cases correspond  endif  branches maximum size size   consistent  signment followed inconsistent respectively  respectively  branches delivering solu  tion  nd branches                           algorithm  buildbranch                                                          br ← ∅    sac                                               pbefore ←                                                          consistent ← true    possible improve behaviour algorithm  repeat  sac recording domain constraint networks  pick delete xa ∈ qsac st ∈ varsbr  obtained each greedy run say each branch  ← acp xax   value removed possible determine   ⊥  previously built branches reconsidered  add xa br  deed removed value does support branch does  pstore ←  belong domain associated branch val   ues branch remain singleton arc consistent  consistent ← false  hand supports branch verify  br  ∅                                                                        branch remains valid reestablishing arc consistency  add    sac                                                          end  recorded domain branch valid                                                         consistent ∨ varsqsac − varsbr  ∅  delete summary sac exploits incremen  ← pbefore  tality sacsds does                                br  ∅    order manage domain propagation constraint  remove domx  networks corresponding branches consider arrays  ← acpx  denoted  given branch br br corre  updatey ∈ dompbefore − domp   sponds constraint network associated branch   br fact need record domain  br ← pstore  straint network qbr contains variables  add br brs                                                          lost values considered end  reestablishing arc consistency    enforcing arc consistency given network al  gorithm  builds successive branches calling function  buildbranch  singleton arc consistency algorithm  checkbranches  values qsac tested check valid  each branch br ∈ brs  ity branches built recorded brs  br ← acp br qbr  function checkbranches values  br  ⊥  deleted branch built each  qsac ← qsac∪ br                                                             remove br brs  branch br reestablish arc consistency br line                                                            end  algorithm  case domain wipeout delete  end  branch update qsac lines      algorithm  differs algorithm  aspects  need record domain constraint network cor  responding branch built line  add                    branch brs line  note variable assign algorithm  sacp      csp                                                                      ment entails domain wipeout pstore updated line  ← acp                           br                          brs ← ∅    implementation  directly set                      tracking step necessary duplication  qsac ←  ∈ ∧ ∈ domx                                                                qsac  ∅  main second reestablishing arc consistency line                                                             qsac  ∅  values removed including singleton arc  buildbranch  inconsistent line  taken account order  checkbranches                                                          end    worstcase time complexity underlying arc  consistency algorithm considered                                                                      update state branches line  each branch  line  algorithm  remove values line   update propagation list line   proposition  sac correct algorithm space  complexity obmaxnd  md   time complexity            obmd  bmax denotes maximum number  branches recorded sac denotes number                 times branch built checked sac    proof correctness comes proposition  fact  singleton arc consistency values  checked branches recorded verify  property holds calling checkbranches addition                     space requirement omd underlying optimal                                                                                            coarsegrained arc consistency algorithm necessary    record domain constraint networks corresponding                     valid branches built recording cpu  time seconds  domain ond obtain obmaxnd  md                                   remark corollary  holds sac  optimistic average time complexity                                                                                             algorithm avoids building new branches                   unnecessary                                                                                       experiments                                                                 prove practical algorithms introduced                                                                                 paper implemented al                           gorithms sac sacsds considered                 current efﬁcient sac algorithm bessiere                                                                                                             tightness  debruyne  used ac lecoutre et al figure  mean cpu time  random instances class   underlying arc consistency algorithms each value  conducted experimentation pc pentium iv ghz  mo linux respect different classes ran dealt following academic instances  dom academic realworld instances performances  measured terms number singleton arc • chessboard coloration instances denoted cc  sistency checks scks cpu time seconds cpu cc involving quaternary constraints  information given each instance number • golomb ruler instances denoted gr gr  × values removed sac algorithm ×    involving binary ternary instances  means instance initially singleton arc consistent                                                          • prime queen attacking instances denoted qa    experimented classes random bi                                                            qa involving binary constraints  nary csp instances introduced bessiere debruyne   lack space present table  shows sac especially sac  ﬁgure depicting results class corre instances better behaviour sac  sponding sparse constraint networks  variables  sacsds roughly speaking explained fact  values domain density   constraints instances regular structure  denotes constraint tightness proportion unal tested realworld instances taken  lowed tuples relations associated constraints fullrlfap archive contains instances radio link    figure  observe   frequency assignment problems table  shows results  ginning phase transition sac sac obtained representative instances expected  behaviour outperform sac sacsds singleton arc consistent instances scen graph  phase transition sac sacsds respectively signiﬁcant improvement obtained true  worst best approaches complete networks instances contain large underconstrained  class similar results depicted parts clearly appears structured instances  obtained pic difﬁculty sacsds  using sac sac best approach especially  three times efﬁcient sac  sac sacsds memory instances    times efﬁcient sac  interesting note sac sac  really surprise generated instances faster sac sacsds number  structure corresponds worstcase sac singleton checks example cc scen  sac average size branches built similar results exploitation incrementality  critical point quite small ≈          arc consistency building branches point
