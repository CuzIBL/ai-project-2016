                        conﬂict directed backjumping maxcsps∗                                      roie zivan amnon meisels                                     department science                                    bengurion university negev                                         beersheva  israel                          abstract                          constraints violated solution maxcsps weights                                                        equal  requirement solving wcsps ﬁnd      maxcsps  constraint optimization problems    minimal cost optimal solution wcsps maxcsps      commonly solved using branch       termed constraint optimization problems      bound algorithm      algorithm en                                                      paper focus simplicity maxcsps max      hanced consistency maintenance procedures                                                        csp optimization problem search tree bounded      wallace freuder  larrosa meseguer                                                        depth like optimization problems common       larrosa et al  larrosa schiex                                                        choice solving use branch bound algo        algorithms traverse                                                        rithm dechter  decade various algorithms      search space chronological order gain                                                        developed max weighted csps wallace      efﬁciency quality consistency main                                                        freuder  larrosa meseguer  larrosa et al      tenance procedure                                                         larrosa schiex  algorithms      present study introduces conﬂictdirected     based standard backtracking gain efﬁciency      backjumping cbj branch bound algo      quality consistency maintenance procedure      rithms proposed algorithm maintains     use larrosa schiex  authors present      ﬂict sets include assignments maintenance procedures local consistency levels nc      placement lead better solution algo ac improve versions nodeconsistency      rithm backtracks according sets cbj arcconsistency improved result maxcsps      added classes branch bound   presented larrosa schiex  result      algorithm particular versions branch    achieved enforcing extended consistency generates              bound use advanced maintenance proce      larger lower bounds                                      ∗     ∗      dures local consistency levels nc  ac      present paper improves previous results adding                                               fdac    larrosa schiex         conﬂictdirected backjumping cbj bb algo      experimental evaluation bb cbj random      rithms presented larrosa schiex  lar      maxcsps shows performance algo  rosa schiex  conﬂictdirected backjumping      rithms improved number assign  cbj prosser  method known improve      ments time completion             standard csp algorithms dechter  ginsberg                                                         kondrak van beek  chen van beek    introduction                                       order perform standard cbj algorithm stores each                                                        variable set assignments caused removal  standard csps algorithm detects solution values domain domain empties algo  given problem does exist algorithm reports rithm backtracks assignment corresponding  search terminated cases solution conﬂict set chen van beek  dechter   does exist wish produce best complete assign                                                          previous attempt conﬂict directed bb used rea  ment assignment problem includes                                                        soning conﬂicts during each forward search step li  smallest number conﬂicts problems form scope                                                        williams  conﬂicts used order guide  maxcsps larrosa meseguer  maxcsps                                                        forward search away infeasible suboptimal  special case general weighted csps wc                                                        states contrast use conﬂict reasoning  sps larrosa schiex  each constraint                                                        backjumping proposed present paper attempt  assigned weight deﬁnes cost violated                                                        combine conﬂict directed intelligent backtracking  solution cost solution sum weights                                                        bb   reported openshop problem gueret´ et    ∗the research supported lynn william frankel al  algorithm proposed gueret´ et al   center science paul ivanier center speciﬁc problem similarly cbj standard  robotics                                             csps explanations removal values domains                                                    ijcai                                                     recorded used resolving intelligently backtrack bb                                                         current state ← initial state  destination                                                  ←    performing backjumping maxcsps compli  cps    assignment                                                         ←   cated standard csps order generate consistent  whilei ≥   conﬂict set conﬂicts contributed current  ifi   lower bound taken consideration furthermore  upper bound ← lower bound  additional conﬂicts unassigned values equal higher  ← −   costs added conﬂict set order achieve  foreach ∈ di  completeness                                              temp state ← current state    required information needed detection  update statetemp state  culprit variables targets algorithm  iflocal consistenttemp state                                                              statesi ← current state  backjumps polynomial maintenance data struc                ←  tures does require additional iterations algorithm  current state temp state                                                              ←     results presented paper show reported  ← ﬁnd culprit variable  standard csps chen van beek  im  current state ← statesi  provement runtime dependent degree  sistency maintenance procedure factor im update statetemp state val  provement number assignments using cbj  add val temp statecp  consistent large                                  temp statecp scost ← temp statecp scost  costi val    maxcsps presented section  description  ← −                                                           foreach ∈ temp statedj   standard bb algorithm maintenance proce                     dures nc∗ ac∗ fdac  presented section  sec  ifconﬂicts val                                                              costa ← costa  tion  presents cbj algorithm bb nc∗ ac∗  fdac extensive experimental evaluation           figure  standard bb algorithm  contribution conﬂict directed backjumping bb state algorithm set state stored  nc∗ ac∗  fdac presented section  culprit assignment performed space com  clusions section                             plexity stays recursive procedure case                                                        larger single state factor simplicity    max constraint satisfaction problems               presentation use ﬁxed order variables function                                                        ﬁnd culprit variable simply returns −   max  constraint satisfaction problem maxcspis                              composed like standard csp set variables    naive exhaustive algorithm improved                                                        increasing level maintained local consistency  xx  xn each variable assigned single                                                        result value lower bound current partial  value discrete ﬁnite domain dd  dn respec  tively similarly studies maxcsps larrosa solution increased each assignment algorithm  meseguer  larrosa et al  larrosa schiex performs consistency maintenance procedure updates   assume constraints binary binary costs potential future assignments increases                                                        chance detect early need backtrack three  constraint rij variables xj xi sub                                                        successful consistency check functions described  set cartesian product domains rij ⊆ dj ×di                                             assignment label pair var val  var  node consistency nc  variable val value var’s domain  assigned partial solution set assignments node consistency standard consistency mainte  values variables cost partial solution max nance method analogous forwardchecking standard                                                                            csp number constraints violated conﬂicts csps dechter   main idea ensure  optimal solution maxcsp partial solution domains each unassigned variables  includes variables includes minimal number value consistent current partial solution  unsatisﬁed constraints solution minimal cost cps each value domain unassigned vari                                                        able determine assigning increase                                                        lower bound limit upper boundto    branch bound algorithm                     end algorithm maintains value cost  optimization problems ﬁnite searchspace number conﬂicts assignments cps  solved branch bound bb algorithm    each assignment costs values domains  weighted csps maxcsps fall category   unassigned variables updated sum    bb  algorithm presented figure  gen value’s cost cost cps higher equal  eral structure algorithm different recursive upper bound value eliminated variable’s  presentation larrosa schiex  order domain domain triggers backtrack  able perform backjumping need iterative formula side method maxcsps  tion cf prosser  use array states number conﬂicts counted stored value’s cost  hold each successful assignment state algorithm does contribute global lower bound affects  performed each backtrack current search exceeds upper boundinlarrosa                                                    ijcai                                                     nci                                                  detailed description fdac demonstrations   ← ton −           ←                                           fdac   increases lower bound reader      cj  min  cost dj                               ferred larrosa schiex       foreach ∈ dj          acost ← acost − cj       cφ ← cφ  cj                                      branch bound cbj              ←            φ     lower bound  cpscost                            use backjumping standard csp search known   ← ton −       foreach ∈ dj                                improve runtime performance search         ifacost  lower bound ≥ upper bound       large factor prosser  kondrak van beek           dj ←  dj                               dechter frost  chen van beek    return lower bound  upper bound               ﬂict directed backjumping cbj maintains set conﬂicts                 figure  standard nc                 each variable includes assignments caused                                                        removal value variable’s domain  schiex  authors suggest improved version backtrack operation performed variable selected  node consistency term ncinnc algorithm target variable conﬂict set  maintains global cost cφ initially zero tracking variable order algorithm complete  assignment costs values updated standard during backjumping conﬂict set target variable  nc each variable minimal cost values updated union conﬂict set conﬂict set  domain ci added cφ value costs decreased backtracking variable prosser   ci means method completed data structure conﬂict sets described  step domain unassigned variable includes cbj standard csps used bb  value cost zero global lower bound calcu algorithm solving maxcsps additional  lated sum cps’s cost cφ            pects taken consideration case max    value  lower bound sum   csps  cps’s cost cφ cost exceeds limit description creation maintenance  upper bound removed variable’s domain sistent conﬂict set bb algorithm following deﬁni  standard nc larrosa schiex                tions used    nc∗  consistency maintenance function presented                                                        deﬁnition  global conflict set gcs  set  figure                                                         assignments  replacement  decrease    arc consistency ac                          lower bound  stronger consistency maintenance procedure deﬁnition  current cost variable cost  known  effective csps  arc consistency   assigned value case assigned variable  ac bessiere regin                       minimal cost value current domain case                                                        unassigned variable    maxcsps form arcconsistency used project    costs conﬂicts unassigned variables larrosa deﬁnition  conflict list value vij ∈ diis  meseguer  larrosa et al  larrosa schiex ordered list assignments variables    ac∗  combines advantages ac   current partial solution assigned vari     ∗  nc   performing ac updated cost values able conﬂict vij   used nc∗ procedure increase global cost                                                        deﬁnition  conflict set variable xi cost ci  cφ values removed nc∗ removal initi                                                        union ﬁrst recent ci assignments each  ates rechecking ac said ac∗                                                        conflict lists values xi conflict list  ac nc∗ each domain value                                                        value shorter ci assignments included  zero cost larrosa schiex                                                         variables’ conflict set    directed arc consistency                      case simple bb global conflict set  fdac    consistency method enforces stronger ver union conflict sets assigned variables val  sion arcconsistency ac∗ cf larrosa schiex ues assigned using mincost heuristic   consider csp order unassigned vari value assigned value smallest cost                                                        variable’s current domain assigning variable  ables each value vali variable vi domain                                                      cost each value calculated counting number  unassigned variable vj placed vi                                                        conﬂicts current partial solution  order value valj cost zero binary                                                      variable’s current cost determined lowest cost  constraint valik valjs  say csp  dac  state csp fdac state dac values current domain result  ac∗                                             variable’s conflict set generated reason need                                                        add conﬂicts values variable’s conflict set    code ac∗ fdacprocedures used just conﬂicts assigned value  paper reader referred larrosa schiex  possibilities decreasing minimal number conﬂicts                                                  variables’ values explored                                                    ijcai                                                     update statei val   add val cps   cpscost ← cpscost  costi val   foreacha ∈ di      valcost       gcs  ← gcs  ∪ element aconflict list       remove element aconflict list   ← −      foreach ∈ dj      ifconﬂictsi val j a      acost ← acost       aconflict list ← aconflict list ∪ val      figure  conﬂict set unassigned variable  ﬁnd culprit variablei                                                        replacing current assignment lower   ifgcs  φ    return −                                       cost value variable   culprit ← latest assignment gcs   gcs ← gcs   culprit                               node consistency cbj   return culprit                                   order perform cbj bb algorithm uses node                                                        consistency maintenance conflict sets unassigned   figure  changes bb required backjumping                                                        variables maintained achieve goal                                                        value future variable conflict list initialized                                                        maintained conflict list includes assignments                                                        cps conﬂict corresponding value                                                        length conflict list equal cost value                                                        nc∗   adds cost ci value minimal                                                        cost domain xi global cost cφ ﬁrst ci                                                        assignments each conflict lists xi’s values                                                        added global conﬂict set removed value’s                                                        conflict lists includes values xi including                                                        values removed domain backtracking head       figure  conﬂict set assigned variable                                                        list cause return removed values vari  latest assignment replaced possibly ables current domain means each run  crease cost variables values smaller nc∗ procedure global conﬂict set includes union  variable’s current cost considered  conﬂict sets assigned unassigned variables    figure  presents changes needed adding cbj figure  presents state unassigned variable xi  standard bb successful assignment added cps includes assignments three variables  cps cost added cost cps lines  example figure  values variable xi  added cost valcost used determine conﬂict assignment variable  signments added global conﬂict set gcs value xi conﬂict assignments  each values domain variable ﬁrst xi’s cost  minimal cost values  valcost assignments removed added gcs conﬂict set includes assignments  lines  result performing backjump ﬁrst conflict list  left function ﬁnd culprit variable return ﬁrst conflict list nc∗ procedure cφ  latest assignment highest variable index incremented assignments  gcs lines  case gcs function added global conﬂict set  ﬁnd culprit variable returns − result terminates figure  presents changes nc∗ required  algorithm lines                           performing cbj each value cost decreased    space complexity overhead needed perform minimal cost variable cj ﬁrst cj assignments  cbj bb simple bound csp conflict list removed added global  variables values each domain worst case ﬂict set lines  note revised procedure uses  each value algorithm holds list assignments conflict lists removed values remaining val                                                                                             ˆ  bounds space complexity algorithm’s state ues each domain di additional set di maintained       hold states overall space used holds values removed di  bounded ond    figure  presents state three variables  ac fdac cbj  cluded current partial solution variables adding cbj bb algorithm includes arc  assigned values respectively costs consistency similar case node consistency  values variable  conflict set vari minimum cost future variable added  able includes assignments global cost cφ preﬁxes values’ conflict lists  assigned value conﬂict assignment added global conflict set ac∗ costs                                                    ijcai                                                     nc bji   ← −      cj ← min costdj                        ˆ     foreach ∈ dj ∪ dj        acost ← acost − cj         cj          gcs  ←  gcs∪  element aconflict list          remove element aconflict list     cφ ← cφ  cj    lower bound ← cpscost  cφ   ← ton −                            figure  assignments runtime nc nc cbj    foreach ∈ dj                                        ifacost  lower bound ≥ upper bound           ˆ     ˆ        dj ← dj ∪        dj ← dj    return lower bound  upper bound         figure  changes nc∗ enable cbj  values incremented conﬂicts unas  signed values result cost variable larger  length conflict list order ﬁnd right  conﬂict set case mind                                                        figure  assignments runtime ac ac cbj  cps cost value vk variable xi  creased arcconsistency removal                                     value conﬂict  unas tightness commonly used experimental  signed variable xj means removal evaluations maxcsp algorithms larrosa meseguer  assignment cps return value  larrosa et al  larrosa schiex   conﬂict vk domain xj cost experiments maxcsps included  variables  value raised arcconsistency assignment   values each variable   cps  added end value’s conflict list values constraint density    addition restores correlation length used generate maxcsps tightness value  conflict list cost value variable’s varied   hardest instances  conflict set global conﬂict set generated                                          ∗                                 maxcsps high larrosa meseguer   way nc                               larrosa et al  each pair ﬁxed density tight    maintaining consistent conflict set fdac                         ∗                                    ness    different random problems solved  similar ac  cost value ex each algorithm results presented average  tended binary constraint cost decreased  runs  conflict list shortened binary constraint pro order evaluate contribution cbj bb algo  jected value’s cost cost increased rithms using consistency maintenance procedures bb  assignment cps added conflict list cau algorithm nc∗ ac∗ fdac implemented  tion taken performing assignment results presented show performance algo  constant change cost values interfere rithms cbj nc∗ procedure tested  mincost order selecting values simple way avoid                                                        low density problems  does  problem maintain each value different cost                                                        complete reasonable time   term priority costthepriority cost updated left hand side lhs figure  presents num  value’s cost updated updates ber assignments performed nc nc cbj  formed dac procedure choose                                                        hardest instances higher  nc cbj  value assigned break ties costs using value                                                        performs nc factor     priority cost                                                         right hand side rhs figure  shows                                                        similar results cputime    experimental evaluation                              lhs figure  presents number assignments  common approach evaluating performance csp performed ac ac cbj hardest instances  algorithms measure time logic steps eliminate im higher  ac cbj outperforms ac  plementation technical parameters affecting factor  rhs figure  presents result  sults measures performance used present cputime similar difference smaller  evaluation total number assignments cputime number assignments note performance  accordance work maxcsp algo measures decrease values  ac cbj  rithms larrosa schiex                demonstrates phase transition larrosa meseguer    experiments conducted random csps vari  larrosa schiex   ables values each domain constraint density figure  presents similar results ac algorithm                                                    ijcai                                                     
