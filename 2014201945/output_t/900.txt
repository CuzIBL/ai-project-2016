                  decidable reasoning modiﬁed situation calculus                           yilan gu                               mikhail soutchanski                  dept science                 department science                     university toronto                         ryerson university                     king’s college road                      church street eng                toronto ms canada                toronto mb canada                 email yilancstorontoedu                   email messcsryersonca                        abstract                          knowledge representation formalisms play im                                                        portant role providing formal foundations      consider modiﬁed version situation cal widely used web ontology languages including owl      culus built using twovariable fragment  area semantic web expressive dls trans                                                                        ﬁrstorder logic extended counting quantiﬁers lated fo offer considerable expressive power going      mention additional groups axioms    far propositional logic ensuring reasoning      introduced capture taxonomic rea  decidable borgida  dls used      soning show regression operator static knowledge bases research      framework deﬁned similarly regression groups consider formalization actions using dls exten      reiter’s version situation calculus using sions dls following key observation reasoning      new regression operator show pro complex actions carried fragment      jection executability problems decidable propositional situation calculus giacomo et al       modiﬁed version initial knowledge  epistemic extension dls provide framework      base incomplete open incomplete    representation dynamic systems representa      knowledge base contextdependent actions tion reasoning actions framework strictly      consider type progression sound propositional reduces representation power      respect classical progression show framework baader et al  baader et al provide      new knowledge base resulting progres proposal integrating description logics ac      sion deﬁnable modiﬁed situation calculus tion formalisms known description logic      allows actions local effects alcqio  sublanguages foundation show      mention possible applications formalization complexity executability projection problems      semantic web services                            basic reasoning problems possibly sequentially composed                                                        actions coincides complexity standard dl rea                                                        soning actions services represented    introduction                                       paper metatheoretically ﬁrstorder fo terms  situation calculus popular understood pred potentially lead complications speciﬁca  icate logic language reasoning actions ef tions reasoning tasks planning consid  fects reiter  used provide welldeﬁned se ered possible quantify actions  mantics web services foundation highlevel framework paper different approach  programming language golog reiter  mcilraith represent actions fo terms achieve integration tax  son  situation calculus onomic reasoning reasoning actions restricting  mulated general predicate logic reasoning effects syntax situation calculus introducing addi  sequences actions undecidable unless restric tional axioms represent taxonomy  tions imposed theory axiomatizes initial doing longer longer sequences ac  state world ﬁrst motivation paper tions solving projection problems increasingly  intention overcome difﬁculty propose use difﬁcult beneﬁcial progress initial incom                          twovariable fragment fo ﬁrstorder logic fol plete knowledge base kb represent current state  foundation modiﬁed situation calculus sat world subsequent projection problems  isﬁability problem fragment known decidable solved respect new progressed kb task com  nexptime demonstrate reducing rea puting progressed kb called progression problem  soning effects actions reasoning fragment paper structured follows section  brieﬂy  guarantee decidability second motiva review reiter’s situation calculus extension                                                             tion paper comes description logics description fo counting quantiﬁers section  discuss  logics dls baader et al  wellknown family tails proposal modiﬁed situation calculus section                                                     ijcai                                                     consider extension regression main reasoning rally regression central computational mechanism  mechanism situation calculus finally section  forms basis automated solution executability  discuss progression problem section  discuss projection tasks sc reiter  recursive  brieﬂy related approaches reasoning actions deﬁnition regression operator regressable                                                        formula φ given reiter  use notation rφ                                                                                                 poss    background                                         denote formula results eliminating atoms                                                        favor deﬁnitions given action precondition  situation calculus sc lsc predicate language axioms replacing ﬂuent atoms doα logically  axiomatizing dynamic systems dialects sc lsc equivalent expressions given ssas repeatedly  include three disjoint sorts actions situations objects make replacement  actions fo terms consisting action function sym formula gdoα ··· αns particularly simple  bol arguments actions change world situa example regressable formula uniform  tions fo terms denote world histories distin doα ··· αns generally regressable formulas  guished constant used denote initial situation mention different ground situation terms  function doa denotes situation results gression theorem shows reduce evaluation  performing action situation situation corre regressable formula φ fol theorem proving task  sponds uniquely sequence actions objects initial theory unique names axioms actions                                                                     φ     ∪d      rφ  fo terms actions situations depend               iff    una  domain application fluents relations func fact key result paper demonstrates  tions values vary situation executability projection task reduced    normally ﬂuent denoted predicate function sym fol theorem proving task ds  bol argument sort situation example arbitrary fo theory type reasoning undecidable  x doα ··· αns represents relational ﬂuent common ways overcome difﬁculty  situation doαndo··· doαs ··· resulting introduce closed world assumption introduce  execution ground action terms α ··· αn swedo domain closure assumption assume domain  consider functional ﬂuents paper         ﬁnite application domains assumptions    sc includes distinguished predicate possa unrealistic consider version sc                                                                         characterize actions possible execute sfor formulated fo orinc                                                                                    sc formula φ term sort situation say φ twovariable fo logic fo fragment ordinary  formula uniform iff does mention predicates fo logic equality formulas use  poss does quantify variables sort situation variable symbols free bound                                                                                                  does mention equality situations men variable fo logic counting extends fo allowing  tions term sort situation situation argument position fo counting quantiﬁers ∃≥m ∃≤m ≥  pa  ﬂuent term reiter  φs cholski et al  show satisﬁability problem  uniform formula situation argument clear decidable recently pratthartmann  proves  context suppress situation argument problem nexptime counting quantiﬁers  write formula simply φ introduce notation coded succinctly additional background dls  φs represent sc formula obtained restoring situa discussion connections dls baader  tion ﬂuents andor poss predicates et al  borgida  gu soutchanski   φ obvious φs uniform                               basic action theory bat sc set axioms  modeling dynamic systems modiﬁed  written lsc following ﬁve classes axioms  model actions effects reiter  action precon situation calculus                                          dition axioms ap successor state axioms ssas ss initial section consider dynamic systems formulated                             theory  unique axioms una domain independent modiﬁcation language sc                               Σ                                                 foundational axioms situations                   sidered extension additional situation ar                   ∪d    ∪d    ∪d   ∪ Σ                        suppose     una      ap    ss    bat  gument key idea consider syntactic modiﬁcation  α ··· αn sequence ground action terms gs sc executability projection problems  uniform formula free variable guaranteed decidable consequence  important reasoning tasks sc projection problem cidability satisﬁability problem  determine gdoα ··· αns modiﬁed sc strong connections description log   basic  reasoning task    executabil  ics explained denote                        executabledoα  ··· α                dl  ity problem     let                              language lsc   be abbreviation  formula possαs  ∧      three sorts ldl actions situations     possα doα  ··· α                                                sc                    i−               objects lsc  executability problem     determine       executabledoα ··· αns planning    reason ”modiﬁed” sc ”re  highlevel program execution important settings stricted” sc extend sc features  executability projection problems arise natu adding acyclic tbox axioms basic action theories                                                     ijcai                                                      obey following restrictions  terms sort object each variable vector xinb xjnb respectively    variables constants object functional mjmn ∈ ∈ − represents    symbols allowed  action functions include vector object variables x     arguments each argument term sort y  ∃x ∃y represents quantiﬁer                                                                                          action constant object variable    included optional each φi xiim    variable sort situation andor variable sort action φ−x                                                       d−Σ   −d          j−          respectively formula    additional variables allowed una    variables free quantiﬁed    addition variables                                                          note respectively equal                          ldl      second ﬂuent sc predicate corresponding disjunctive subformula equivalent false    three arguments including sort situation acyclic tbox axioms dt  similar tbox axioms    ﬂuents arguments dynamic concepts dl deﬁne new concepts using tbox axioms                                                  ldl    ﬂuents three arguments dynamic rolesinsc  group tbox axioms dt include subclasses    static concepts unary predicates situation ar static tbox dtst dynamic tbox dtdyn formula    gument static roles binary predicates sit static tbox concept deﬁnition formula form    uation argument considered unchangeable tax            gx ≡ φ     onomic properties unchangeable classes application                                                                                                                                domain each concept static dynamic unary predicate symbol φgx    primitive deﬁned                           mula domain free variable ﬂuent      apart standard fo logical symbols ∧ ∨ formula dynamic tbox concept deﬁnition    ∃ usual deﬁnition set connectives formula form gx ≡ φgxs                   dl                               ≥m          φ                              quantiﬁers lsc includes counting quantiﬁers ∃    formula free variable         ≤m                                    dl    ∃   ≥  equality  allowed lsc  ﬂuent concepts appeared      dynamic systems dealing sat   lefthand side tbox axioms called deﬁned concepts    isfy open world assumption owa     require set tbox axioms acyclic                                                                        stated explicitly currently unknown false acyclicity deﬁned exactly deﬁned tbox     paper dynamic systems interested  rbox axioms  dr similar idea rbox dl    formalized basic action theory bat specify group axioms called rbox axioms    using following seven groups axioms ldl    low support role taxonomy each role inclusion axiom                                                   sc                       ys ⊃ ys    Σ∪dap     ∪dss  ∪dt  ∪dr   ∪duna  ∪ds   fiveof    represented                                                                                              Σ dap dss duna ds  similar groups   primitive roles static dy                                                                                                      inabatinlsc dt  dr introduced namic axioms included bat     axiomatize description logic related facts properties assumed speciﬁed correctly sense                                    dl    lsc   allows   meaning rbox axiom included theory cor    object variables axioms conform following rectly compiled ssas prove induc    additional requirements                              tion d−dr   ∀srx ys ⊃ rx ys al                                                          rbox axioms used regression operator    action  precondition axioms  dap     each  ac                 dl                                       used taxonomic reasoning initial theory    tion  lsc    axiom  form                                                                                                initial theory ds  ﬁnite set sentences assum    possa ≡   Πas possaxs  ≡  Πaxs                                                                            ing suppress situation term ﬂuents    possax ys ≡ Πax ys respectively                                                          speciﬁes incomplete information initial prob    action constant unary binary action term respectively                                                         lem state describes facts change    Πa  ΠaxorΠax respectively                                                          able time domain application particular    formula free variables                                                           includes static tbox axioms dtst rbox axioms    free variables respectively set                                                          initial situation addition ds    axioms characterize preconditions actions                                                                                                      cludes unique axioms object constants    successor state axioms dss  types              dl                                            remaining classes foundational axioms situ    ﬂuents lsc  primitive dynamic concepts form      Σ                                                                                ations  unique axioms actions una           ﬂuents exactly nonsituation argument bats usual sc note    primitive dynamic roles form ﬂuents                                                          axioms dap dss use variables    exactly nonsituation arguments let variable                                                          dss use action situation variables addition ob    vector x xoryorx  ssa speciﬁed each         x doa                                 ject variables section    ﬂuent              according general syntactic axioms eliminated process regressing    form ssas provided reiter  loss gressable formula sentence use    generality assume axiom form object variables variables                x doa ≡ ψf x       general structure ψf x follows  modiﬁed regression lazy unfolding       m           ∃x∃yaax      ∧ φx   ∨                                                dl                                 giving deﬁnition bat lsc                           −            −  x ∧¬ j∃x∃yaaj xj− ∧ φj xj−s turn attention reasoning tasks                                                       ijcai                                                                             dl                                         given formula lsc domain deﬁni possatσ terms sort action situation respec                                 dl                              dl  tion regressable called lsc regressable tively lsc  action precondition  slightly different deﬁnition regress axiom form possaxs ≡ Πax  able lsc reiter  adding following argument x sort object  conditions variable free bounded action constant single variable twovariable vector                                                                                                   dl  ii term sort situation ground x  syntactic restrictions lsc  each          dl  lsc careful deﬁnition term t variable constant                                                                 regression operator main reasons deal     r∃yx  ∧ Π σ t  x x                                         ldl                                               tbox extend regression sc regress       r∃xy  ∧ Π σ   t  y y                                                                                         able formula weextend regression operator rw   rΠ  t σ                  t  x c                                                                                               ﬁned reiter  lazy unfolding technique                               t  x y t                                                                                                     baader et al  expand deﬁned dynamic concepts                                                     dl                        rΠat σ                denote operator second lsc uses  object variables make sure                 φ                                  dl                       constant denotes dual formula  gressing ﬂuent atom lsc formula formula φ obtained replacing variable symbol  need introduce new free bound object vari free quantiﬁed variable symbol replacing  ables deal twovariable restriction modify variable symbol free quantiﬁed variable                       regression operator comparison conventional symbol φ φ  φxy yx  operator deﬁned reiter  example replac  ing possatom ﬂuent atoms doα σ deﬁnition deﬁned dynamic concept form  conventional regression operator reiter  gt σ object term situation term σ  assumption quantiﬁed variables righthand tbox axiom form gx ≡ φgx                                                                                             ldl       side corresponding axioms renamed new restrictions language sc  term  variables different free variables atoms variable constant use lazy                                                        unfolding technique follows  replaced assumption using new variables     naming assures equivalence original formula      rφgt σ variable                                                         rw        mula regression avoid introducing new variables    rφgy σ  required reiter’s regression operator assure                                                             primitive concept primitive role  ﬁned dynamic concepts handled modify regres                      dl                                respectively form tdoα σ  sion operator each lsc regressable formula possibility                                                        ttdoα σ terms sort  reusing variables guaranteed general format                                                        object term α sort action term σ sort situation  ssas given previous section additional condi                             dl                         ssa ﬂuent eq   tion ii deﬁnition lsc regressable formula                         dl                                                        restriction language  term    complete formal deﬁnition follows                            sc                                                        variable constant α  σ denotes term sort situation α denotes                                                        action function arguments sort  term sort action                                                        object concept                                                                  •   atomic form ∨                                                                 rψf tασ variable  ∧ ¬w   qvw  represents quantiﬁer rw                                                                       rψf α σ   cluding counting quantiﬁers represents variable sym                                                        role  bol                                                         rw  ∨ rw    ∨rw     r¬w ¬rw                  r∃yx  ∧ ψf α σ                                                                  rw  ∧ rw    ∧rw   rqvw qvrw                r∃xy  ∧ ψf α σ                                                                                                                            rw     rψf α σ             •  atom cases                                                                                                                                                   form atat  action            rψf ttασ                                                                function symbols using axioms duna based deﬁnition able prove  deﬁne regression                       following theorems                                                                              ldl                    ⊥                       theorem   suppose   sc regressable formula          rw                                                   rw                         t                       regression    deﬁned terminates ﬁnite num                                      ber steps    situation independent atom including proof immediately follows conditions iiof                                                                        dl  equality object constants variables deﬁnition lsc regressable formula acyclicity  concept role uniform                   tbox axioms assumption rbox axioms                      rw                          compiled ssas consequently partici                                                                                                                                 poss                          pate regression      regressable   atom form                           dl                                                        theorem   suppose lsc regressable formula                                                                                                        dl    notice action functions different number argu background basic action theory rw  lsc  ments use different function symbols different names formula uniform variables                                                     ijcai                                                         ≡rw               progression relationship progression iter                 rw                  iff                                 atively repeated progressed kb format                                                        initial kb consider computed progression  proof  according deﬁnition modiﬁed regres                                                        new initial kb iteration lin reiter  sion operator prove induction structure                                                          shows classical progression ﬁnite fo  ﬁrst statement holds replacements                                                        kb fol deﬁnable deﬁnable  transform logically equivalent formula sec                                                        secondorder logic using example similar lin  ond statement follows regression theorem reiter                                                       reiter  prove                                                                                    dl                                                        theorem   progression theory lsc fo                         ldl                                                                     dl  theorem  suppose    sc regressable formula deﬁnable deﬁnitely deﬁnable lsc   background basic action theory problem                                                                              proof    consider theory  obtained modify        decidable                           ing theory given lin reiter  follows    proof   according theorem    iff ds     replace constant symbol  inﬁnite set  rw        rw                                   axioms   formu   constant symbols    ···  replace function symbol  las problem equivalent succxy predicate succx true               ∧¬rw     ds         unsatisﬁable iff successor  replace initial kb    decidable problem according fact satisﬁability new ds includes inﬁnitely axioms               problem decidable                           form  nonidentical constant symbols                                                                                                             theorem important guarantees given form succc  constant                                      dl  projection executability problems lsc decidable successor constant sense natural numbers    initial kb ds incomplete gu soutchan rest proof exactly proof given  ski  detailed examples illustrate ba lin reiter                    sic reasoning tasks described reduction techniques                               dl                                                          notice proof assumes lsc theory  dealing properties need variables                     dl                                 inﬁnite problem progression ﬁnite theory  show using lsc  model realistic dynamic dl                                                        lsc fo deﬁnable remains open  domains school enrollment services online shop consider weaker classical modiﬁed pro  ping services                                        gression certain type incomplete kbs    say ssa ﬂuent contextfree                                                      special case incomplete kbs show mod  ssa  form                                 iﬁed progression kb ldl sound wrt    x doa ≡ γx ∨ x ∧¬γ−x                            sc                                                    classical progression kb  following theorem complexity restrict syntactic form kbs al  analysis reasoning projection problem      lowed use range ewffs quantiﬁerfree                                          dl  theorem  given basic action theory lsc  suppose boolean formulas equalities inequalities  ssa ﬂuent contextfree com vector x x  variable xory vec                                                                             putational complexity answering queries form tor object constants bb  single constant                                                                       xσ conexptime  vector object write x  abbreviation  ∧   constants σ ground situation term            respectively use lx range ﬂuent  proof  result follows complexity analysis literals ground situation term formu  projection problem reiter  chapter  theorem  las form ∀xex ⊃ lx equalitybased formulas  theorem pratthartmann  satisﬁa deﬁne cnfbased kb ds  kbi ∪kbs kbi                    bility problem decidable nexptime        set situationindependent formulas including unique                                                        axioms object constants kbi subset                                                        ds   kbs ﬁnite set sentences uniform    progression   cnfbased kbs                                                                                each sentence called clause disjunc  progression problem known ﬁltering update tion ﬁnitely equalitybased formulas particular    compute new theory response given se ds kbi ∪kbs  cnf formula composed ground  quence actions section consider progres ﬂuent literals uniform simple example kbs                                 dl  sion problem kbs language lsc  section let secondly consider action theory local   dss ∪dap  ∪ Σ ∪duna                              effect let ssa ﬂuent syntactic form                                                                                             −    formal deﬁnition classical progression given x doa ≡ γf x ∨ x ∧¬γf x                                                                                     −  reiter  set sentences sα classical pro ssa localeffect γf x γf x disjunc                                              gression initial kb wrt basic action theory  af tions formulas form ∃za  ay ∧ φy                           α                  ter performing ground action situation  iff sα action function y contains x z  y − x φ           doα                       uniform             sα  model α quantiﬁerfree action theory localeffect each ssa  d∪d                                        sα  model  α   localeffect let ∗  − consider ground ac  domain interpret situation independent predi tion α ﬂuent fi localeffect action theory                                                                  dl  cates function symbols possand ﬂuents future language lsc  easy righthand side  doα identically sequel say mα rhs ssa fix doα following syntactic                                                     ijcai                                                    
