                                                                          ∗                                limited   discrepancy      beam    search                           david  furcy                                 sven  koenig               university wisconsin  oshkosh             university southern california                  science department                  science department                   oshkosh  wi                     los angeles  ca                        furcyduwoshedu                              skoeniguscedu                                                                   layer   start state                      abstract                                 layer                                                                layer       beam search reduces memory consumption best      layer                                                                layer       ﬁrst search cost ﬁnding longer paths   layer       memory consumption exceed given mem       layer                                                                layer       ory capacity quickly develop bulb beam                          search using limited discrepancy backtracking com                    breadth−first search      plete memorybounded search method able      solve problem instances large search problems    layer   start state                                                               layer         beam search does reasonable runtime  layer               slice       time bulb tends ﬁnd shorter paths   layer            slice  slice                                                                layer          slice  slice  slice       beam search able use larger beam widths layer       slice  slice  slice  slice       running memory demonstrate      layer    slice  slice  slice  slice  slice                                                                layer       properties bulb experimentally three standard            slice  slice  slice  slice  slice  slice       benchmark domains                                                       beam search                                                                   layer   start state                                                               layer     introduction                                              layer                                                                layer   bestﬁrst search methods scale     layer   large search problems memory consumption   layer                                                                layer   linearspace best ﬁrst search methods korf  unac layer           ceptable runtimes large search problems beam search                                                                               depth−first beam search  duces memory consumption bestﬁrst search cost  ﬁnding longer paths uses breadthﬁrst search build figure  visualization search methods  search tree keeps states each level  search tree smallest heuristic values value  beam width set beginning search reduce memory consumption bestﬁrst search  smaller beam width states beam search prunes cost ﬁnding longer paths develop bulb beam search  each step search memory needs using limited discrepancy backtracking able solve  store each level search tree unfortunately prun problem instances large search problems beam  ing typically increases probability pruning states search does reasonable runtime  short paths start state goal state time bulb tends ﬁnd shorter paths beam search  increases lengths paths excessive pruning cause able use larger beam widths running  prevent ﬁnding path beam memory behaves like beam search exhausts  width large experiments show example memory capacity ﬁnding path uses lim  beam search beam width  solves ited discrepancy backtracking retract previous pruning  eighty percent random problem instances puzzle decisions choice good backtracking strategy im  average path length average order portant example beam search chronological  magnitude smaller variants wa backtracking unacceptable runtimes  pearl  alternatives beam search    ∗the intelligent decisionmaking group partly supported  beam search  nsf awards sven koenig contracts iis iis   views conclusions contained document beam search search technique “in number  authors interpreted representing  alternatives beam examined parallel  ofﬁcial policies expressed implied sponsoring heuristic technique heuristic rules used discard  organizations agencies companies government prune nonpromising alternatives order size                                                       variants wa           table  beam search puzzle            path  generated stored runtime problems             length  states  states seconds solved              na     na     na    na                improving   beam  search                                        study increase number solved problem                                  instances percent reducing path                   lengths solved problem instances                                varying beam width increasing reduces                number solved problem instances decreasing         na     na     na    na             increases average path length solved problem                                                        stances notice unsolved problem  beam small possible” bisiani  assume instances misleading heuristic values prevent  actions cost study beamsearch vari states included beam example  ants breadthﬁrst search paper objective goal state slice seventh layer  reduce memory consumption breadthﬁrst search figure  beam search does ﬁnd goal state  exponential linear depth search tree illus visits ﬁrst slice each layer solution  trated shaded areas figure  breadth problem backtrack choose different slice  ﬁrst search beam search respectively beam search uses figure  shows db depthﬁrst beam search sim  breadthﬁrst search build search tree splits each level plest variant beam search backtracking db behaves  search tree slices states like beam search exhausts memory capacity  called beam width number slices stored mem ﬁnding path uses chronological backtracking  ory limited each level beam search expands purge existing slices replace db  level generates successors states current fortunately unacceptable runtimes explain  level sorts order increasing heuristic values follows chronological backtracking revisits recent  left right ﬁgure splits slices decisions ﬁrst decisions close  states each extends beam storing ﬁrst search tree problematic heuristic values  slice beam search terminates generates goal usually inaccurate farther state away  state runs memory                          goal state closer search    table  shows experimental results beam search tree important revisit decisions close  puzzle memory limitation  states search tree quickly use limited  created  problem instances random start conﬁgura discrepancy search chronological backtracking  tions goal conﬁguration blank build sophisticated variant beam search  upper left corner used manhattan distance heuris tracking  tic function used pattern databases instead  korf taylor  did use later  original limited discrepancy search  paper context  additional benchmark domains lds limited discrepancy search harvey ginsberg  runtime beam search small ran  designed work ﬁnite binary trees suc  memory seconds beam search beam width  cessors state sorted order increasing heuristic  solved problem instances surprising values heuristic values recommend left  similar greedy search gradient descent successor right choosing right successor  likely ﬁnd long paths unless gets stuck dead recommendation heuristic values called  ends current state successors al discrepancy lds searches tree greedily  ready memory case does ﬁnd path discrepancy lds does ﬁnd goal state  beam search beam width  solved wrong decision misleading heuristic  problem instances beam width increased memory values lds searches tree increasing numbers  consumption increased average path length solved allowed discrepancies figure  contains pseudo code  problem instances decreased number solved prob lds toplevel function lds repeatedly performs  lem instances eventually decreased beam search beam limited discrepancy search start state line   width  solved problem instances calling ldsprobe increasing number allowed dis  surprising beam search beam width inﬁn crepancies line  starting discrepancy line   ity breadthﬁrst search guaranteed ﬁnd shortest unless current state leaf tree line  lds  paths unless runs memory does ﬁnd probe generates successors recursively calls  path likely given exponential memory maximum number allowed discrepancies  consumption breadthﬁrst search consider beam search zero subtree best successor vis  large beam width solved substantial number ited discrepancy allowed line   problem instances say beam search beam width subtree worst successor visited   solved eighty percent problem instances discrepancy allowed just consumed line   average path length solved problem instances subtree best successor visited  order magnitude smaller reported furcy number allowed discrepancies     procedure   ldssstart   path length                                                               procedure  bulbsstart     path length          discrepancies                                                                                           discrepancies       gsstart     hashtable     sstart            true                                                                                            true                  cost    ldsprobesstart     discrepancies                                                      pathlength      bulbprobe     discrepancies                    cost   ∞    return cost                                                                         pathlength     ∞   return  pathlength                discrepancies      discrepancies                                                                       discrepancies      discrepancies                 end                                                                                                  end       procedure   ldsprobestate   depth   discrepancies    path length                                procedure  bulbprobedepth      discrepancies     path length           state leaf  return ∞                                                                       hslice     value  index    nextslicedepth           hbest secondi      generatesuccessorsstate                                                       value ≥     return value          best   sgoal  second     sgoal   return depth                                        discrepancies                 discrepancies        return ldsprobebest    depth                                      slice     ∅   return ∞                                                                                                                    pathlength      bulbprobedepth                        cost    ldsprobesecond     depth      discrepancies    −                                   each slice     hashtable     hashtables     end                 cost   ∞    return cost                                                                       return pathlength               return  ldsprobebest   depth      discrepancies                                                                                                                                                                     slice    ∅                                                                                                                                    each slice     hashtable     hashtables     end              figure        original       limited       discrepancy           search                                       true                                                                                                                                    hslice    value   index    nextslicedepth  index                                                                                                                                     value ≥                                                                                                                                            value   ∞    return value       procedure   gldssstart    pathlength                                                                                  break          discrepancies       hashtable     sstart                                                                       slice     ∅   continue           true                                                                                                      pathlength      bulbprobedepth        discrepancies    −                  pathlength      gldsprobesstart      discrepancies                                                 each slice     hashtable     hashtables     end                  pathlength     ∞    return pathlength                                                                pathlength     ∞   return  pathlength                discrepancies      discrepancies                                                                      end          end                                                                                                       hslice     value  index    nextslicedepth                                                                                                                               value ≥    return  value       procedure   gldsprobestate    depth  discrepancies     path length                                                                                                                             slice     ∅   return ∞          set     ∅                                                                                                                            pathlength      bulbprobedepth         discrepancies            each successor  state                                                                                                                            each slice     hashtable     hashtables     end                        return depth                                  goal                                                                                           return pathlength                ∈ hashtable   set     set    ∪          end                                                                                                procedure  nextslicedepthindex    hb  array states integer integer          set     ∅  return ∞                                                                           currentlayer       ∈  hashtable    gs    depth          hashtable   slot  return ∞                                                  succs        generatenewsuccessorscurrentlayer              best    arg mins∈set      hs                                                                         succs      ∅ index     succs       return h∅ ∞   −i          discrepancies                                                                                 sgoal ∈ succs       return h∅ depth      −i               hashtable     hashtable    ∪ best                                                               slice      ∅  index               pathlength      gldsprobebest    depth                                                  succs      slice                                                                                                                            succsi    ∈ hashtable                   set     setbest                                                                                            gsuccsi        depth  slice      slice     ∪  succsi                set     ∅                                                                                         hashtable     hashtable   ∪  succsi                     state    arg mins∈set      hs                                                                        hashtable                       set     setstate                                                                                           each slice    hashtable     hashtables      end                      hashtable     hashtable    ∪ state                                                                          return h∅ ∞   −i                     pathlength      gldsprobestate     depth      discrepancies     −                                                                                                                                             end                     hashtable     hashtablestate                                                             return hslice     −  ii                      pathlength     ∞    return pathlength               end                                                                                        procedure  generatenewsuccessorsstateset      array states               hashtable     hashtable    ∪ best                                                               index                   pathlength      ldsprobebest    depth     discrepancies                               each state  stateset          hashtable     hashtablebest                                                                                each successor state          return  pathlength                                                                                                     ∈ hashtable                                                                                                                                          succsindex         index    index                                                                                                                                end          figure        generalized          limited       discrepancy           search                             end                                                                                                                      sort states succs    order increasing hvalues                                                                                                                    return succs  sumed           current      level      following           heuristic      recom  mendation          line          lds      terminates              generates                                                     figure         bulb  goal    state    line                generalized              limited         discrepancy              search                           limited     discrepancy          search          given     state     given     num                                                                                                               ber    allowed       discrepancies              generates        successors    apply      lds       beam      search         need      generalize                                                                                                                          state                   hash    table    lines        binary      trees      arbitrary      graphs           lds             able                                                                                                                  backtracks            goal    state         line                handle      branching         factors          nonuniform             larger                                                                                                                   successors        line             hash    table       line         oth     second        lds           able     avoid     cycles      glds       gen                                                                                                               erwise      identiﬁes          best    successor                 smallest  eralized       limited       discrepancy           search       addresses           ﬁrst                                                                                                                  heuristic      value     line              number         allowed        discrep  sue      picking        successor            given     state         smallest                                                                                                               ancies      zero        gldsprobe             calls          best    suc  heuristic      value     hs     choosing               successor        counted                                                                                                               cessor            allowed       discrepancies           line                discrepancy                successors           tried        left                                                                                                                 gldsprobe             calls      repeatedly            remaining         succes  right     glds         addresses           second      issue        performing          cy                                                                                                               sors              allowed        discrepancy          line               cle   detection            hash    table          generating         successors                                                                                                               calls          best    successor                  number         al               hash     table     figure        shows        pseudo                                                                                                               lowed      discrepancies          line       code        glds            toplevel       function        glds         repeatedly  performs        generalized          limited      discrepancy          searches             start   state   line         calling     gldsprobe                  increasing                      bulb  number          allowed        discrepancies           line        starting                   bulb        beam       search      using      limited        discrepancy          backtrack  discrepancy          line         gldsprobe              performs         generalized                ing    combines         beam      search          glds        figure        shows                                                                beams linearspace search methods store           table  taxonomy search methods              siblings states makes unnec   beam width             type backtracking                  chronological limited discrepancy    essary regenerate successors states            greedy search guided    limited discrepancy search                 gradient descent depthﬁrst search ldsglds  creases memory consumption substantially bulb   intermediate beam depthﬁrst beam search beam search using limited memorybounded search method contin     values   search     db     discrepancy backtracking bulb            breadthﬁrst breadthﬁrst  breadthﬁrst         ues search memory runs purging states      ∞              search     search          search             memory resulting complete search method                                                            means bulb ﬁnds path long                                                            length maximum search tree depth  pseudo code bulb toplevel function bulb    smaller approximately equals mb  basically identical glds function bulbprobe   memory capacity measured maximal num  performs beam search generalized limited discrepancy ber states store bulb improves  search given number allowed discrepancies ﬁrst beam search incomplete breadthﬁrst  generates ﬁrst slice level line  search complete maximum search  slice contains goal state slice subtree                                                            tree depth approximately equals logbm  searched exhaustively hash table stores average branching factor search tree  beam aborts lines   num solve smaller search problems bulb  ber allowed discrepancies zero line  slice  line  bulbprobe calls • runtime bulb small fact bulb  allowed discrepancies line  clears hash table frequently ﬁnds path backtracking  slice line  bulbprobe clears hash limited backtracking elim  table slice line  calls repeatedly inates cycles loops transpositions differ  maining slices allowed discrepancy line  ent paths start state given state  calls best slice number responsible large runtimes depth  allowed discrepancies line  function nextslice ﬁrst search bulb generalization breadthﬁrst  generates successor slice slice search eliminates cycles generates  hash table given depth ﬁrst locates given slice states hash table bulb does  line  generates successors states line  make effort eliminating transpositions neverthe  locates slice given index successors bulb generalization beam search elim  does inserting successors slice inates transpositions does reexpand  line  hash table line  starting suc states beam  cessor given index line  successors  inserted slice end layer  reached line  hash table line   experimental evaluation  clears hash table incomplete slice line  present experimental study bulb three stan  aborts line  function generatenewsuccessors dard benchmark domains npuzzle peg towers  generates successors given set states hanoi rubik’s cube note ﬁgures show  hash table sorts order graphs search methods able solve  creasing heuristic values hs successors contain random problem instances interested increas  duplicates                                          ing number solved problem instances                                                        percent additional results reported furcy     properties bulb  heuristic search methods repeatedly ﬁll purge  npuzzle  memory complicated chakrabarti et al                                                         ﬁrst benchmark domain npuzzle  russell  kaindl khorsand  zhou                                                        scribed context table  beam search solved  hansen  contrast bulb relatively simple                                                        problem instances small npuzzles small average  cause purges contiguous regions memory                                                        path length did fractions second  approximation algorithm does necessarily ﬁnd short                                                        fore surprising db bulb signiﬁcantly  est paths table  shows taxonomy search methods                                                        improved beam search smaller  sit  bulb  generalizes beam search beam search                                                        uation different puzzle db did signiﬁ  tracking limited discrepancy search beam widths larger                                                        cantly improve beam search puzzle  breadthﬁrst search beam widths smaller                                                        hand bulb able solve problem instances  inﬁnity                                                        beam width  beam search    • memory  consumption bulb obd   able solve problem instances beam widths       maximum search tree depth achieved smaller bulb able ﬁnd paths average length      storing slice each level requires  beam width beam search able      bulb  regenerate successors states ﬁnd paths average length  beam widths      slice time backtracks resulting small mem allowed solve problem instances        ory consumption allows deeper searches wider shown table  bulb able reduce                     path length                                                              table  beam search towers hanoi                                  beam search                      path  generated stored runtime problems                                 bulb                         length  states states seconds solved                                                                     na     na   na     na                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      na     na   na     na                                                           beam width allowed beam search solve       solution  cost log scale                        random problem instances bulb able solve                                                        wide range beam widths smallest average run                                         time bulb beam width solved problem                          log scale                 stances  seconds obtained beam                      memory usage                   width  resulted average path length                                                         larger beam width  solved                                  beam search                                       bulb             problem instances increased average runtime                                                   seconds reduced average path length                                                          times shortest path length figure                                                         shows bulb able improve average path                                                    length multistate commitment search methods                                                        puzzle order magnitude aver                                                        age runtime  seconds alternatives                                                        beam search msckwa  furcy koenig                                                                 combination kwa felner et al  mscwa                                                        kitamura et al  msckrta furcy                                                                                                              number  stored nodes log scale               combination kwa felner et al   mscwa ki                                                  tamura et al  rta korf                           log scale                                                          towers  hanoi        figure  bulb puzzle varies      second benchmark domain  peg towers                                                        hanoi  created  random problem instances                                                         disks goal state disks stacked                                  beam search                                       bulb             peg  set memory capacity  states                                    msckwa            used pattern database similar felner et al                                    msckrta                                                        heuristic function table  shows similarly                                                                 puzzle beam search large beam widths solved                                                        problem instances average length paths                                                        short beam width allowed                                                        beam search solve  random problem instances                                                                  reason figure  contains graphs beam                                                        search bulb able solve wide range                                                        beam widths smallest average runtime bulb      time  seconds log scale                      beam width solved problem instances                                                      seconds obtained beam width                                                       solution cost log scale           sulted average path length  larger                                                        beam width  solved problem instances    figure  search methods puzzle varies increased average runtime  seconds reduced                                                        average path length  figure  contains                                                        tailed data points bulb  path length synonymously solution cost fac  tor  time average runtime  rubik’s cube  bulb  order  seconds pentium  benchmark domain rubik’s cube cre  pc clocked  ghz figure  contains detailed data ated  random problem instances goal state  points bulb bulb generates states exactly original conﬁguration cube set memory ca  order beam search graphs bulb simply pacity  states used pattern databases  extend ones beam search larger beam widths korf  heuristic function beam search  puzzle memory capacity  states able ﬁnd paths average length  beam widths
