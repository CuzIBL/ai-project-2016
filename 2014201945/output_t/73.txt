                                   concurrent continuous flux                                                          yves martin                                              technische universitat dresden                                                dresden germany                                                  ymlinftudresdende                               abstract                               time car moving road constant veloc•                                                                 ity instance represented process fluent        flux belongs highlevel programming lan•                                                                 movement parameter denotes        guages cognitive agents devel•         location car time motion initi•       oped recent years based established           ated fluent movement describes        general action representation formalism flu•       particular continuous change        ent calculus flux allows implement complex            location car time stay unchanged        strategies concise modular fashion           action affect continuous change        paper extend flux language reason         modeled fluents describing arbitrarily complex continu•       domains involving continuous change             ous processes fluents remain stable oc•       actions occur concurrently using constraint        currence consecutive actions internally        logic programming show reasoning         represent continuous change        performed efficient way                                                                    world ongoing processes agent ex•                                                                 ecuting plan source change laws    introduction                                                 physics frequently imply evolution environment                                                                  like example action falling ball bouncing   challenging promising goals artificial  reaches floor fundamental property socalled   intelligence research design autonomous agents in•  natural actions reiter  occur   cluding robots solve complex tasks dynamic world   predicted times provided earlier actions natural delib•  reach autonomy partially known constantly changing      erative prevent occurring actions   environments requires highlevel cognitive capabilities occur simultaneously concurrency accommo•  reasoning planning using mental model state      dated   environment allows agents calculate      paper present flux allows   outcome different action sequences advance      design intelligent agents reason plan do•  choose best plan execute specific goal mind   mains involving continuous change actions occur      formal theories reasoning actions change       concurrently using paradigm constraint logic pro•  expressive power provide highlevel capa•     gramming extension flux integrates kinds   bilities fluent calculus thielscher  actions deliberative natural method   established action representation formalisms uses con•    planning execution actions reasoning terms   cept state update axioms solve representational  time intervals method allows efficient genera•  inferential aspect classical frame problem based       tion plans concurrent continuous environments   formal theory highlevel programming method       work based theoretical approach presented herr•  flux developed recent years thielscher     mann thielscher  thielscher exist•  using paradigm constraint logic programming        ing agent programming methods like robot control lan•  powerful flux kernel provides general reasoning facilities    guage developed shanahan witkowski    agent programmer focus highlevel de•   golog programming language levesque et al    sign intelligent agents                                    handle domains involving concurrency continu•     autonomous agents realworld environments        ous change concept natural action   account execution actions takes differ•  separate accounts natural actions hand   ent amounts time actions modeled dis•       reiter  deliberative actions hand   crete changes involve continuous change     grosskreutz    seen initiation termination complex pro•  section introduce example scenario   cesses processes contain parameters values     shortly recapitulate fundamentals flux   change continuously formalized functions      briefly theoretic solution fluent cal      reasoning actions change                                                                                    cuius present extension flux con•   current continuous domains discuss employed con•   strained handling techniques section conclude    show possible future work programs avail•   able web site http www fluxagent org     flux    example agent program paper set waterway   scenario agent steer barge through    canals water levels canals dependent tides    places canals locks ship    pass high tide geographical facts tide    levels differ different locks canals   small turn intersections    agent steering barge choose direction   figure  example waterway scenario goal   fig                                              agent steer barge cell  harbor      develop agent scenario use high     cell  three locks cells       level programming method flux grounded   action theory fluent calculus fluent calculus    manysorted predicate logic language stan•       waterway scenario elementary actions   dard sorts fluent state action sltfor situations     gobyshipd deliberative action agent steer    thielscher  states compose fluents atomic  barge cell lies direction   states using standard function  state state            turntide natural action indicating turn    state constant state denoting state          tide lock fundamental frame problem solved   program agent example uses flu•    fluent calculus socalled state update axiom   ents representing barge cell                   each action describes effects action terms   time tide denoting time wa•                 difference states ex•  ter level lock highlow tide similarly   ecution example action turntide    situation calculus reiter  constant denotes   specified   initial situation situation having per•  formed action situation time state situation    denoted standard function states example   initial state waterway scenario fig      axiomatized                                                                      macros fluent removal addi•                                                                 tion macro poss denot•                                                                 ing fluent calculus time action possible   reader notice incomplete state addi•                                                                 state states   tional negative information specified sub                                                                   reflect incomplete knowledge agent   state contain fluents                                                                  environment incomplete states encoded flux open    tide fluents foundational axioms fluent calculus                                                                  lists lists variable tail fluents thielscher   ensure composition function exhibits proper•                                                                  lists accompanied constraints negated   ties union function sets set                                                                  state knowledge variable range restrictions   state identified fluents hold                                                                  constraints form notholds  indicating flu•  basis macros holds holds defined                                                                  ent does hold state notholdsalll indicat•  follows                                                                  ing instance holds order process                                                                  constraints socalled declarative constraint handling rules                                                                  friihwirth  defined proved correct un•                                                                 der foundational axioms fluent calculus details      anticipation integration continuous change ar• thielscher    gument denotes time fluent true action example initial state depicted fig    takes place                                                   specified clause      predicate function symbols including constants start initzo   capital letter variables arc lower case free variables zattidelocklhightide   formulas assumed universally quantified variables sorts   lockhightidelockhigh   fluent state actlonand sit shall denoted letters  notholdsallat   respectively function written infix notation notholdsalltide                                                                              reasoning actions change reflects negative information  fluent  action   occurs substate location agent unique   tide fluents specified                                                                  state update axioms concurrent actions recursive   state                                                                  specify effect action relative effect      predicate poss realizes precondition ax•                                                                 arbitrary concurrent actions   ioms actions defines conditions   action possible time state pred•  icate clause each action conditioning flux based   foundational predicates knows knowsnot   knows val representing agent knows           additional negative positive re•  fluent  holds respectively does hold state                                                                  spectively effects occur action performed be•  exist ground instances variables   fluent  known true state example       sides single action compound action   precondition axiom action turntide        produces synergic effects effects sin•  implemented follows                                        gle action performed using recursive                                                                  state update axioms effect say simultaneous   poss turntidelw                                   independent actions inferred inferring ef•    whigh knowsvalltrtidellowtrz                 fect inferring effect      durationllowd                                          action result inference recursions stops      wlow knowsvalltrtidelhightrz                 base case action defined      durationlhighd      tr      auxiliary predicate duration denotes             actions interfere executed concur•  duration corresponding tide lock execu•        rently condition state update   tion time action constrained using syn•    axiom restrict applicability implication view   tax constraint handling library clpr eclipse  concurrent action   prolog sum starting time old     integrating continuous change fluent calculus re•  tide plus duration old tide                                                                  quires introduction process fluents repre•     fluent calculus effects actions       sent arbitrarily complex continuous processes   encoded state update axioms purpose          processes modeled equations motions contin•  flux kernel provides definition auxiliary predi•      uous time represented end new sort   cate update intuitive meaning                      real added interpreted real numbers   state result positive negative effects thielscher sort accompanied usual        respectively wrt state words pred•        arithmetic operations standard interpretation   icate encodes state equation                                                                  continuous fluent calculus includes predefined flu•  basis agent programmer easily implement                                                                  ent starttime sort real determining   update axioms clauses define predicate                                                                  time start state arises provided starttime   stateupdate example following en•                                                                 unique   coding action turntide   stateupdatezlturntidelwtz    holdstidelwotozl    whigh updatezltidelhight                            tidelwotoz                  indicated paper parameter    wlow updatezltidellowt                             sort real used denote time fluent                           tidelwotoz                   arises represent occurrence                                                                  action standard requirement possi•                                                                 bility perform concurrent action time state      concurrent continuous fluent calculus                   expressed follows   fluent calculus concurrent actions based   additional predefined sort concurrent action   subsort thielscher single actions      fluent calculus continuous change includes   performed simultaneously composed terms sort         distinction deliberative natural actions   concurrent new binary function de•         thielscher subject free   noted • written infix notation function      planning agent happen automatically   shares function combining fluents states prop• specific circumstances example domain   erties associativity commutativity idempotency exis•                                                                     variables new sort concurrent denoted let•  tence unit element constant read ter   sort concurrent acts unit element wrt function        example domain actions mutual   similar holds macro abbreviation used            conflict need specify additional constraints   denote concurrent action included concurrent  precondition axiom       reasoning actions change                                                                                    action turn tide natural standard continuous change new value similar    predicate natural adopted reiter  declares      encoding macros fluent removal addition    action natural facilitate formalization   predicate update used clause recursive case    automatic evolution natural actions continu•   implement elimination single action term    ous fluent calculus introduces macros expression     arbitrary concurrent actions    expectednatactions shall indicate state ac•            consider example state update axiom single    tions natural actions expected happen action gobyshipd implemented    time                                                     stateupdatezlgobyshipd tz                                                                    knowsvalxyatxytozl                                                                   holdsstarttimestz  st                                                                     adjacentxydxyl                                                                   updatezlatxiyltatxytoz   given notion macro nextnatactions                                                                  location barge   stands concurrent action natural actions                                                                  agent updated old position   happen state time earliest possible new cell auxiliary predicate   time point natural actions expected              adjacent computes adjacent cell                                                                  lying direction cell travel cell                                                                  assumed hour example scenario                                                                  execution time action                                                                  fixed clause way effects action man•  fluent calculus continuous change uses notion   ifest hour later formation old state   situation tree trajectories thielscher flux query   trajectory associated situation denotes fur•                                                                 initz reszsogobyship   ther evolution state determined natural actions                 turntidelocklowzs   expected happen follow approach   paper original motivation employing tra•   definition state update axiom                                                                  definitions predicate init addi•  jectories domains uncertainty occur•                                                                 tional inclusion fluent starttime  state up•  rence natural actions consider domains  date axiom action turntide given section    incorporation domains uncertain natural ac•  appropriate encoding fact high tide lasts   tions left work instead include natural hours lock duration lock  high    actions situation terms deliberative actions  knowledge going south represented direc•                                                                 tion number  extension flux infer effects    integrating concurrency continuous                       concurrent action inferring effects ac•                                                                 tion gobyship result inference infer        change flux                                          effects action turntide lock low flux yields   similar binary function denotes compo•        correct substitution   sition states single fluents represented flux zlattidelocklhigh   list fluents represent binary function •     tidelockhightidelocklow   list actions flux way introduce concur•          starttimez   rency flux actions list performed sldogobyship   concurrently basis unit element function           turntidelocklowso   • constant encoded list                continuous time shown sec•    given notion list concurrent actions state up• tion  easily integrated flux eclipseprolog sys•  date axioms actions defined recursively flux   tem version  use includes constraint han•  predicate res specifies                                dling library clpr library allows solving linear   effect performing time list concurrent actions li constraints real numbers syntax requires con•  state situation si leading new state                                                                  straints included braces   new situation execution                                                                    precondition axioms state update axioms nat•  concurrent actions represents plan step encoded                                                                  ural actions encoded extension flux   follows                                                                  fashion deliberative actions section  ad•  reszlsl tzs                                       ditionally include implementation predicate    holdsstarttimeto zl                                     naturala follows example domain    updatezlstarttimetstarttimetoz                                                                                 aturntidelw                                                                                     llockl llock llock   reszlslaltzdoalts    update al                                   given predicate model macro    stateupdatezl                                   expectednatactions builtin second order    reszlltz                                          predicate setof follows   clause base case recursion extends    setofa naturalapossatz   effect constant   basis macro nextnatactionsi defined   update predefined fluent startmet needed flux     flux                                                                              reasoning actions change nextnattimetz                                             given predicate goal define recursive predicate     natural  possatz                                   ida representing sequence actions     naturalal possatz tt                    leads initial state initial situation                                                                  goal state steps predicate implements   nextnatactionsctz  nextnattimetz                     iterative deepening algorithm optimal complete     setofa naturalapossatz                       russell norvig  encoded follows      having defined natural actions way delib•    idazszsn   erative ones leads question combine delibera•    execzszsn goalz    tive natural actions common approach plan•     nl nl findplanzosozsnl   ning natural actions occur predicted times       precondition axiom action gobyship speci•  times execution deliberative actions    fied following way   fixed advance determine execution times   examination possible time lead com•    possgobyshipd tz    binatorial explosion general possible time  knowsvalxyatxy   sort real general solution reduces search    directionsxydl memberddl   space minimum yields answers possible    adjacent ydx yd    domains use qualitative instead quantitative infor•    lockplacelxlyl   mation consider periods time approach         knowsvallwttidelwtoz   discriminate three time intervals deliberative     whigh wlow   action wrt expected natural actions firstly      durationllowtd tttd   deliberative action postponed plan step    lockplacelxlyl   possible set natural actions executed secondly having determined current location aux•  deliberative action performed natural actions iliary predicate directions delivers list possi•  expected finally deliberative action                                                                  ble directions cell standard predicate   natural actions joined toeether new concurrent   action predicate exec encodes                         member selects direction ri help                                                                  auxiliary predicate lockplace denoting oc•  recursive planner plan depth steps integrating de•  liberative natural actions method computed   currence lock  cell adjacent cell                                                                  searched lock action possi•  plan leads state situation si new state   new situation predicate implemented      ble constraints execution time   execzlslzlsl                                           case water level lock high                                                                  action executed disappearance low   execzlsizsdepth                                      tide specifying preconditions actions gobyship     depth nextnatactionsctz                              turntide given section  respectively      cc                                               fulfills general condition possibility perform      actiona possatazl                                   concurrent action given section       holdsstarttimeto zl tat                           consider example specified flux clauses to•     tat tta ca                                     gether suitably specified facts example domain       tat tt appendacc                          following query     reszlslcltlzs depthl depth                                                                  initzo idazszsl     execzszsdepthl                                                                  extended flux generates plan   predicate actiona defines action de•   steps yields following substitutions linear con•  liberative auxiliary builtin predicate append appends straints   list example domain predicate action en•                                                                  starttaattatidelock   coded fact action gobyship ensure                    hightidelockllow    time goes backward execution time ta           tidelockhigh   deliberative action constrained appropriate way      reasoning time constraints instead real time ren•    dogobyship dogobyship   ders planning efficient using plan method left         turntidelockllowturntidelockhigh   three choices regarding execution time de•       dogobyshipturntidelocklow   liberative action furthermore order choices         dogobyshipjsotalta   represents kind heuristic adjusted                                                                  linear constraints ta ta   concrete domain hand plan con•                                                                                           ta ta   straint solution lies appropriate time intervals   computed concrete time execution actions  sequence actions constitutes solution   fixed actions executed                            planning problem given fig  completely                                                                  specified execution times deliberative      complete planning method include follow•                                                                 actions given time intervals reader notice   ing definition predicate goalz denoting goal state deliberative actions planned simultaneously to•                                                              gether natural actions finally apply builtin   goalz  knowsatz                                 predicate minimizet tries minimal solution   goal example scenario barge       constraint variable linear constraints   situated harbor cell  fig      following       reasoning actions change                                                                                    
