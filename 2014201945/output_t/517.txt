                       computational complexity planning                 approximate planning presence incompleteness                               chitta baral vladik kreinovich raul trejo                                           department science                                             university texas el paso                                                el paso tx  usa                                      emails chittavladikrtrejocsutepedu                            abstract                                language brief reminder                                                                 language start finite list proper•       years computational com•         ties fluents possible proper•       plexity classical planning htn planning           ties state state defined finite set        studied cases as•           fluents  assuming        sumed planner complete knowl•               complete knowledge initial state        edge initial state recently                means initial state properties        proposal use sensing actions plan              true properties        presence incompleteness paper          false properties initial state described        study complexity planning cases          formulas type        study use action description lan•                                                                                       initially         guage proposed  gelfond        lifschitz extensions                         fluent literal fluent        language allows planning situa•               negation         tions complete information known               possible changes states need finite        consider plans feasible              set actions language effect each action        polynomial length planning problem            described formulas type        situations npcomplete checking                              causes         given objective attainable           fluent literals reason•       given initial state npcomplete pa•          ably straightforward semantics describes state        show planning problem pres•                                                                changes action        ence incompleteness harder be•       longs level complexity hierarchy            • action literals        precise terms complete over•                 true domain description contains rule ac•       come complexity problem baral                 cording causes        son proposed approxima•                  rule activated action        tions show certain conditions                true fluents conclude        approximations  oapproximation                 holds state         makes problem npcomplete in•                  • fluent activated rule enables        deed reducing complexity                                conclude true false means                                                                      action does change truth fluent                                                                      true new state     introduction                                                    true old state                                                                 formally domain description finite set value   action description language proposed            propositions type initially   gelfond lifschitz gelfond lifschitz      initial state finite set effect propositions   mid successors easier understand      type causes results   fundamentals inertia ramification qualifica•       actions state finite set fluents   tion concurrency sensing involved formalizing     initial state consists fluents   actions effects world getting    corresponding value proposition initially contained   details particular logics paper      domain description say fluent holds   analyzing complexity planning based         say holds   language extensions let start    transition function describes effect   brief description language                         action state defined follows        planning scheduling    ♦ say effect proposition causes         actual state set possible                     activated state fluent   states consistent current knowledge        literals hold                                      initially set consists states       define set fluents fi                 • fluent true domain description        rule causes activated                        contains proposition initially                                                              • fluent fi false domain description      • similarly define set fluents                contains proposition initially            rule causes proposition initially proposi­       activated                                          tion initially domain description      ♦ say result                                contains states true false        action undefined                               actual initial state state set                                                                 transition function defined follows      • result action undefined                                                   define       • proper nonsensing actions mapped                                                                                                                                                                       plan defined sequence actions                                                                          resoa defined case complete    result resr applying plan initial                                                                        information    state defined                                                                     •for sensing action senses fluents    planning problem given domain de­                                  sensing propositions   sired fluent literal plan leads          determines belong domain     state true complicated goals            actual state remains unchanged    reformulated terms                                 states values       extension language          describes sensing actions brief          reminder                                               presence sensing action plan longer                                                                 predetermined sequence actions   language describes planning situations                                                                 actions sensing action depend    complete information know exactly flu­                                                                result sensing general choice   ents hold initial state dont real life                                                                 action depend results previous sensing   partial information initial                                                                 actions action plan called conditional   state fluents know true                                                                   examples shown adding sensing actions  initial state fluents know                                                                 creases computational complexity problem   false initial state pos­                                                                paper show corresponding planning   sible fluents know                                                                 problem harder belongs level   initially true false situations                                                                complexity hierarchy precise terms   required action depends state want                                                                 complete   door closed required action depends   door initially open close      notion oapproximation   closed                                                                 overcome complexity problem baral   situations include sensing actions  ac­                                                                son proposed approximations   tion checki checks fluent  holds                                                                 plans correct miss plan   given state  list actions allow conditional                                                                 approximation  called oapproximation  fol­  plans plans action depends                                                                 lows astate approximate state finite set   result previous sensing action                                                                fluent literals fluents negations      fluents difficult detect         initial astate consists fluent literals   sensing actions fluents real        corresponding value proposition initially   life sensing actions sense fluents time     contained domain description say   view possibilities precise formulation                                                                   • fluent fi true    language follows domain description   addition value propositions effect proposi­        • fluent fi false    tions sensing propositions type       • fluent fi unknown   determines kstate defined pair                                                                 transition function resias describes      formulation given based earlier work   formalizing sensing actions moore  scherl   effect proper action astate defined   levesqne                                              follows                                                                                 baral kreinovich trejo      • say effect proposition causes worry time takes actually im                     activated astate fluent plement plan action plan consists sequence         literals hold                                         actions plan feasible                                                                 fore reasonable restrict feasible plans       • say effect proposition causes                                                                  plans length  number actions                      possibly activated astate                                                                  bounded polynomial input         fluent literals possibly hold                                                                  feasibility mind formulate         true unknown                                                                 planning problem precise terms       • define set fluent literals                                                                    • given polynomial domain descrip­        rule causes acti­                                                                     tion description initial state         vated rule causes                                                                      possible consequences different actions         possibly activated                                                                      goal  fluent want true      • define resrdas                                                                    • determine possible feasibly achieve                                                                      goal exists feasible plan                                                                                          achieves goal    sensing actions result applying astate    simply means adding astate fluent literals   interested analyzing computational com   turned true result sensing      plexity planning problem    action                                                                  complexity planning problem     results                                                           situations complete                                                                        information     kind planning problems                                                                 situations complete information           interested                                                                 planning problem     informally speaking interested following    problem                                                     theorem  situations complete information                                                                 planning problem complete      • given domain description description        initial state possible consequences dif­   comments        ferent actions goal fluent                                                                   • result similar result liberatore lib       want true                                                                      eratore  main difference libera­     • determine possible achieve goal         tore considers arbitrary queries language        exists plan achieves        consider queries exis­       goal                                                        tence feasible action plan   interested analyzing computational com           • result liberatore preceded results   plexity planning problem analyzing com­          erol et al erol et al  study com­  putation time necessary solve problem            plexity strips use extensions      ideally want cases planning            instead strips best knowledge   problem solved feasible algorithm        formal treatment exten­  algorithm computational time each in­                     sions strips dealing sensing actions   bounded polynomial length                                                                   • lack space able present        input length                                                                      proofs paper   measured bitwise symbolwise problems    solved polynomialtime algorithms           • problem remains npcomplete con­  called problems class stands                   sider planning problems fixed finite num­  polynomialtime polynomialtime              ber actions actions    algorithm like algo­           allow single action planning   rithm close class feasible algorithms        possible plan state ap­   possible                                                      ply possible action check      short interested restricting time       achieved goal corresponding plan­  takes check planning problem solv­            ning problem course solvable polynomial   able justified planning appli­        time   cations want resulting plan produced   real time possible produce        useful complexity notions   plan like know impossibility        situations incomplete information planning   early possible able add new      problem complicated  actually belongs   actions simply operating        levels polynomial hierarchy exact results   timebounded environment worry          precise definitions polynomial hierar­  time computing plan          chy papadimitriou  crudely speaking        planning scheduling decision problem problem deciding          problem called complete certain class   given input satisfies certain property set      crudely speaking toughest problem   theoretic terms belongs corresponding     class general problem class   set                                                          reduced feasibletime reduction     • decision problem belongs class         known  solve prob•      feasible polynomialtime algorithm solving    lem class polynomial time precise       problem                                            terms widely believed                                                                believed     • problem belongs class checked            solve complete acomplete problem       formula equivalentlycan rep•                        need exponential time solving com•      resented feasible                          plete problem secondlevel classes       property quantifier runs words fea•          requires computation time solving np      sible length length limited given      complete problems solving complete problems       polynomial length input class        class takes longer            denoted indicate formu•      las class defined adding  exis•      complexity planning problem       tential quantifier  polynomial                situations incomplete       predicate                                                       information situations                                                                       sensing actions     • problem belongs class checked                                                                let start analysis case sensing       formula equivalently rep•      resented feasible                          theorem  situations incomplete informa•      property quantifier runs words fea•     tion sensing planning problem       sible length length limited given      complete       polynomial length input class        proof problem check existence               denoted indicate for•         feasiblelength action plan set       mulas class defined adding          values unknown fluents successful       universal quantifier  polyno•          check       mial predicate                                    know know initial state     • positive integer problem be•                 actions determine stepbystep follow•      longs class ifthe checked for•                    ing states check polynomial time       mula equivalently rep•                          final state desired predicate true       resented                         feasible property           show complete reduce       quantifiers run words feasible length     known complete propositional problem checking       length limited given polynomial                                          propositional vari•      length input                                    ables propositional formula reduce                                                                    parse represent computing     • similarly positiveinteger prob•             sequence elementary steps each       lem belongs class checked for•             apply  compute intermediate results       mula equivalently rep•                                              compute       resented compute planning problem                         feasible property        actions fluents        quantifiers run words feasible length                   meaning true iff time  initially       length limited given polynomial           true false false       length input                                    unknown goal moments                                                                time select variables selects      • classes subclasses                                                                selects causes ifsame foralso ev•       larger class formed problems                                                                ery action increases time causes       solved polynomialspace algorithm                                                                causes moments        known papadimitriou                                                                 compute causes        class equivalently reformulated                                                                causes causes        class problems checked formula                                                                 rules increase time  plan               equivalently represented                                                                exists iff exist values                                        number                                                                                 true reduction proves       quantifiers bounded polynomial                                                                complete       length input feasible       property quantifiers run words          problem remains consider       feasible length length limited given   planning problems fixed finite number ac•      polynomial length input                  tions actions                                                                                 baral kreinovich trejo ssi theorem  situations incomplete informa•             problems fixed finite number actions   tion sensing approximation           proper actions single sensing action re•  planning problem npcomplete                               veals truth value fluent  al•                                                                 lowed repeat sensing action different moments   words use oapproximation cuts        time   level complexity problem               real life control planning situations   approximation computationally efficient        desirable monitor environment continuously      reduction good accordance intuitive     make sensing actions time ne  understanding problem oapproximation         cessity caused fact reallife sit     • case oi complete information represent         uations consequences each action sta•        state know fluents true          tistically known need constantly monitor          false state uniquely      situation actual state paper          described subset set fluents     consider situations result each action          subset consisting fluents     uniquely determined action initial          true state total number states    state idealized situations need          equal total number subsets     constant monitoring makes sense          total number fluents    allow limited repetition sensing actions        • case incomplete information gen•        action plan limitation complexity          eral know states      planning drops oapproximation starts helping          state knowledge called kstate son               baral  represented set possible     definition  let positive integer          completeinformation states num•                                                                     • say sensing action klimited reveals          ber possible kstates equal number           values fluents          possible subsets set complete         information states                                • say action plan kbounded                                                                        sensing actions        • oapproximation astate represented                                                                   theorem  given situations incom•         stating fluents true false                                                                   plete information klimited sensing actions          unknown each fluents                                                                   problem checking existence kbounded action          three different possibilities totally                                                                   plan           approximation possible astates      going problem oapproximation         theorem  given situations in•     decreases number possible states doubly         complete information klimited sensing actions                                                                    problem checking existence kbounded      exponential singly exponential plan•                                                                   approximation action plan npcomplete      ning involves analyzing different possible states      wonder oapproximation computation time         comments      smaller argument           • result holds instead assuming      proof theorem  argument makes result            constant allow grow      theorem  intuitively reasonable                              square root logarithm length       complexity planning problem                            input             situations incomplete                           • difficulty general situation incom•            information situations sensing                       plete information comes fact                                                                        know exact states know      let consider happen allow sens•            values fluents reason•     ing actions allow unlimited sensing situ•                                                                       able analyze situations sensing      ation changes radically planning problem                                                                        situations fluent fi       complicated oapproximation                                                                         sensing action check  reveals value       helping anymore                                                                                                                                              fluent sensing does make planning prob      theorem  situations incomplete in•                     lem simpler simpler       formation sensing planning problem               approximation help       pspacecomplete                                                                     theorem  situations incomplete informa•      theorem  situations incomplete informa            tion sensing planning problem       tion sensing oapproximation plan•       complete       ning problem pspacecomplete                                                                     theorem  situations incomplete informa•      proofs similar littman            tion sensing oapproximation       planning problem oapproximation remain        planning problem        pspacecomplete consider planning                                                                     results represented following table            planning scheduling 
