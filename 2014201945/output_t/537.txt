                                  parameterized      compilability                                                  hubie  chen                                        departament   tecnologia                                         universitat pompeu   fabra                                              barcelona spain                                         hubiechenupfedu                        abstract                          cadoli et al    gogic et al                                                         based ad hoc proofs did explicitly use uniÔ¨Åed      compilability measure effectively com proof technique      pilation preprocessing applied knowl cadoli et al  robust theory compilability      edge bases speciÔ¨Åed particular knowledge rep developed possible systematically orga      resentation formalism aim compilation  nize knowledge representation formalisms according      allow efÔ¨Åcient online query processing compilability way classical complexity      theory compilability established ory possible systematically organize languages      ganizing knowledge representation formalisms ac  according intractability particular theory      cording scheme ‚Äúcompilability classes‚Äù   compilability provides way deÔ¨Åne clas      bears strong analogies classical theory sical complexity class analogous compilability class      complexity permits organization  compc  theory provides notion reduction      computational problems according complexity    use compilability classes compc compilabil      classes develop novel theory compilabil ity class compp analog languages      ity called parameterized compilability decidable polynomial time contains formalisms      corporates notion parameterization used compilable second formalism query pro      parameterized complexity permits reÔ¨Åned   cessing performed polynomial time saying      analysis compilability                        formalism compilable second formalism mean                                                        roughly knowledge base Ô¨Årst formal    introduction                                       ism knowledge base fx second formal                                                        ism having answers queries  compilability computational reasoning problems  size fx polynomial size  involve deciding query entailed ‚Äúpolynomial size‚Äù requirement models intuition com  knowledge base database reasoning problems pilation useful does greatly increase size  computationally intractable methodology cop knowledge base  ing intractability compilation called prepro demonstration formalism compp pos  cessing involves translating knowledge base itive compilation result analogous demonstration  form allows efÔ¨Åcient query processing compi language positive tractability result likewise  lation appropriate knowledge bases remain stable demonstration formalism compnphard neg  time queried numerous times ative compilation result implies formalism  compilation performed efÔ¨Åciently compp complexitytheoretic assumption  cost compilation amortized speedup just demonstration language nphard implies  query processing recent years seen language standard assumption  teresting results compilation basic idea simplifying  np  sequence computations preprocessing set useful                                                          cadoli et al   later papers  values old mathematics discussed cadoli et al                                                        including liberatore  liberatore schaerf                                                           liberatore   theory compilability pre                                                        sented cadoli et al  applied successfully  systematic theory number results nineties classify knowledge representation formalisms ap  demonstrated noncompilability results show peared artiÔ¨Åcial intelligence literature particular  stance knowledge bases particular knowledge multitude formalisms including propositional logic cir  representation formalism compilable cumscription default logic demonstrated  formalism query processing performed contained compp complete analog compc  polynomial time initial results type including standard complexity class downside theseclassiÔ¨Åcation results negative show viewed classically example languages  ing formalism complete compilability ver npcomplete demonstrate parameterized  sion intractable complexity class compnp complexity somewhat orthogonal classical complexity  compconp                                           example vertex cover indicates pa                                                        rameterized complexity provide tractability results                                                        classical complexity does allowance  parameterized complexity abundance  negative  nonpolynomial dependence parameter input  compilability results mirrors state affairs complexity stance Ô¨Åxedparameter tractability permits use al  theory problems classiÔ¨Åed gorithmic ideas utilized proving standard polynomial  according developed scheme complexity classes time tractability results Ô¨Åeld parameterized com  np conp abundance negative results plexity developed rich mathematically deep suite  show completeness hardness classes believed algorithmic techniques  strictly larger generally intractable  problems need dealt practice number parameterized compilability contribution pa  theoretical frameworks developed provide Ô¨Åner parameterized compilability new theory compil  analysis hard problems offered standard com ability incorporating notion parameterization used  plexity theory examples frameworks include parameterized complexity theory provides novel  ory approximation algorithms averagecase analysis set concepts proving compilability results allowing  relatively recent alternative framework parameterized use sophisticated toolkit developed                                     complexity downey fellows                 proving Ô¨Åxedparameter tractability intractability    parameterized complexity theory classical sults provides avenue reÔ¨Åning negative  complexity theory compilability theory provides classes noncompilability results proved using es  notion reduction categorizing objects case tablished theory compilability articulated downey  parameterized complexity objects categorized pa et al  beneÔ¨Åt using parameterized notion  rameterized languages languages instances consisting computational tractability possible en  parts main parameter languages gage extended dialogue single problem  classically studied viewed naturally investigation variety parameters provide  parameterized languages example each instance theoretical framework anticipate formu  vertex  cover  problem viewed consisting lation exploration interesting parameters context  graph main natural number pa parameterized compilability lead reÔ¨Åned analysis  rameter question decide graph compilability results  vertex cover size similarly inde results paper follows parame  pendent  set problem viewed parameterized terized complexity class deÔ¨Åne compilability variant  language instance graph paired natu parcompc deÔ¨Åne notion reduction use  ral number question decide parcompc classes demonstrate robustness  graph independent set size    ‚Äì particular transitive compatible formal    parameterized Ô¨Çavor tractability called Ô¨Åxed sense classes parcompc develop gen  parameter tractability formally parameterized language eral method demonstrating hardness formalism  Ô¨Åxedparameter tractable class fpt exists class parcompc study structure classes  constant instances main parcompc relating structure directly structure                                           size parameter solved time  ex nonuniform versions parameterized complexity classes                                              ample vertex cover solved time kn  constant parameter size  main consequently Ô¨Åxed instances  preliminaries  vertex  cover  main size parame  ter solved time vertex cover attempted make paper selfcontained  considered Ô¨Åxedparameter tractable possible familiarity basic notions com  running time Ô¨Åxedparameter tractable languages exhibits plexity theory including nonuniform complexity classes  restricted form dependence parameter lan parameterized complexity compilability theory  guages solvable practice parameter falls helpful balcazar¬¥ et al  downey fel  limited range fact given time lows cadoli et al  references  bound vertex cover problem solved topics respectively recommend surveys  polynomial time parameter olog downey fellows downey et al  pa  hand independent set believed require time rameterized complexity  main exhibits exponential dependence  parameter ‚Äì time form similar ‚Ñ¶nk  deÔ¨Ånitions notation  deed independent  set complete parameterized strings assume Œ£ Ô¨Åxed Ô¨Ånite alphabet  complexity class believed properly contain fpt ac used form strings length string denoted  cordingly believed outside fpt           times assume pairs strings thatis elements Œ£‚àó √ó Œ£‚àó represented strings denoted cppoly contains parameterized lan  elements Œ£‚àó pairing function h¬∑ ¬∑i make stan guages exists parameterized polynomial  dard assumptions pairing function size function  ‚àó √ó Œ£‚àó ‚Üí Œ£‚àó language  length hx yi linear  hx yi computed ‚àà Œ£‚àó √ó Œ£‚àó ‚àà  time polynomial  polynomialtime hfx xi ‚àà                                        ‚àó      ‚àó  computable projection functions œÄ œÄ  Œ£ ‚Üí Œ£      parameterized language deÔ¨Åne l  œÄhx yi  œÄhx yi  h¬∑ ¬∑i length set   ‚àà  monotone ‚â§ hx yi ‚â§ hx zi  hy xi ‚â§ hz xi assume tripling knowledge representation formalisms knowledge  function    representing triples strings single         h¬∑ ¬∑ ¬∑i                                        representation formalism krf subset Œ£‚àó √ó Œ£‚àó  strings similar assumptions hold          parameterized knowledge representation formalism pkrf                                                        subset Œ£‚àó √ó Œ£‚àó √ó Œ£‚àó  functions usual consider function  ‚Üí  polynomial exists constant ‚àà conventions view ternary function  Œ£‚àó √ó Œ£‚àó √ó                                 ‚àó  pn  function  √ó Œ£ ‚Üí param   Œ£‚àó ‚Üí  Œ£‚àó binary function  Œ£‚àó √ó Œ£‚àó ‚Üí Œ£‚àó pair  eterized polynomial exists constant ‚àà ing Ô¨Årst arguments ghx yi                ‚àó                                   ‚àó  function  Œ£ ‚Üí  ‚àà √ó Œ£  fx example ternary function  Œ£‚àó √ó Œ£‚àó √ó                                           ‚àó  pn ‚â§ hkn    words  √ó Œ£ ‚Üí Œ£‚àó ‚Üí Œ£‚àó considered parameterized polynomialsize  parameterized polynomial exists constant ‚àà exists parameterized polynomial  √ó Œ£‚àó ‚Üí                       ‚àó  each ‚àà Œ£  function pk  ‚Üí deÔ¨Åned ‚àà Œ£‚àó √ó Œ£‚àó √ó Œ£‚àó fx ‚â§                         pkn  pn                           phx yi similarly pkrf viewed parameter    function  Œ£‚àó ‚Üí Œ£‚àó polynomialsize ex ized language pairing Ô¨Årst strings each  ists polynomial  ‚Üí ‚àà Œ£‚àó triple considered belong parameterized com                                        ‚àó    ‚àó     ‚àó  fx ‚â§ px similarly function  Œ£ √ó Œ£ ‚Üí Œ£  plexity class language  hx yi  ‚àà  parameterized polynomialsize exists parame  belongs                              ‚àó  terized polynomial  √ó Œ£  ‚Üí     readability times use natural number ‚àà           ‚àó    ‚àó  ‚àà Œ£ √ó Œ£  fx ‚â§ px               place unary representation    function  Œ£‚àó ‚Üí Œ£‚àó polynomialtime computable  exist polynomial  ‚Üí turing machine  compilability   ‚àà Œ£‚àó turing machine input subsection review theory compilability  produces output gx time px similarly deÔ¨Ånitions theorems subsection  function  Œ£‚àó√óŒ£‚àó ‚Üí Œ£‚àó parameterized polynomialtime cadoli et al  presentation based  computable exist parameterized polynomial  √ó subsection following assumptions  Œ£‚àó ‚Üí  turing machine ‚àà concerning complexity classes languages effect  Œ£‚àó √ó Œ£‚àó turing machine input hx ki produces just cadoli et al   output gx time px                                                        assumption  complexity class compatible    function  Œ£‚àó ‚Üí Œ£‚àó recursively computable                                                        complete problems polynomialtime  exists turing machine ‚àà Œ£‚àó                                                        reduction ‚â§p   turing machine input produces output hx                                                                        assumption  languages sufÔ¨Åxed blanks considered                                                        irrelevant string x considered  languages complexity classes language sub language  set Œ£‚àó set strings parameterized language  subset Œ£‚àó √ó Œ£‚àó set pairs strings krf  refer each ‚àà œÄf  knowl  parameterized complexity class set parameterized edge base knowledge base considered represent                                                                         ‚àó  languages parameterized complexity class knowledge ‚àà Œ£  ‚àà  roughly speaking  ‚â§ reduction say compatible ‚â§ krf considered compilable complexity class  parameterized languages ‚â§ ‚àà following preprocessing each knowledge base pos  imply ‚àà parameterized com ing query knowledge base ‚Äì deciding  plexity class ‚â§ reduction say hard ‚àà ‚Äì performed formal deÔ¨Ånition  alternatively chard ‚â§ reductions ‚àà krfs compilable complexity class includes  ‚â§ say complete alternatively ingredients Ô¨Årst preprocessing function  ccomplete ‚â§ reductions ‚àà chard preprocessing knowledge base useful greatly    complexity class nonuniform version increases size knowledge base required                                                                                                   ‚Äúadvice‚Äù version denoted cpoly contains polynomial size second ‚Äútarget‚Äù krf  mandated  languages exists polynomialsize func inside class krf translated  tion  ‚àó ‚Üí Œ£‚àó language function  ‚àà Œ£‚àó ‚àà  hfx xi ‚àà deÔ¨Ånition  compc let complexity class krf  parameterized complexity class nonuniform version belongs compc exist  ‚Ä¢ binary polynomialsize function  Œ£‚àó √ó ‚àó ‚Üí Œ£‚àó properly contained cpoly                                                    properly contained cpoly    ‚Ä¢ krf                                                           parameterized  complexity  pairs ‚àà Œ£‚àó √ó Œ£‚àó                                                        parameterized complexity theory classiÔ¨Åcation         ‚àà fx ‚àà  parameterized languages ‚Äì languages constituents    obtain compilability class compc components classical complexity theory  complexity class compc classes offer rich base complexity class modeling feasible computation  scheme classify krfs just conventional deÔ¨Åned using notion polynomialtime pa  complexity classes offer rich scheme clas rameterized complexity theory base complexity class  sify computational problems Ô¨Årst reading deÔ¨Å fpt ‚ÄúÔ¨Åxedparameter tractable‚Äù deÔ¨Ånable using  nition  conceptually easiest notion parameterized polynomialtime  complexity class equal polynomialtime         fpt                                                                               deÔ¨Ånition      parameterized language belongs  case requirement means queries                        fpt                                                       parameterized complexity class exists pa  posed processed efÔ¨Åciently trans rameterized polynomialtime computable function  Œ£‚àó √ó  lates each knowledge base ‚Äì necessarily Œ£‚àó ‚Üí   pairs ‚àà Œ£‚àó √ó Œ£‚àó  form allows efÔ¨Åcient resolution queries  ‚Äì knowledge base fx ‚Äì form      ‚àà gx                                             allows efÔ¨Åcient resolution queries       roughly speaking parameterized language    following notion reduction associated class fpt exists constant ‚àà each  compc  classes allows compare compilability      def                                                        ‚Äúkslice‚Äù        computable poly  different krfs                                                        ‚àà                                                          nomial time polynomial degree degree  deÔ¨Ånition  comp reducibility krf comp reducible polynomials bounding time lk ‚Äúuniversal‚Äù                                  krf denoted ‚â§comp  exist     constant depend hand                                          ‚àó   ‚àó    ‚àó    coefÔ¨Åcients polynomials arbitrary depen    ‚Ä¢ binary polynomialsize functions  Œ£ √ó  ‚Üí Œ£                                                    dence                                                 ‚àó        following notion reducibility used com    ‚Ä¢ binary polynomialtime computable function  Œ£ √ó pare complexity parameterized languages      Œ£‚àó ‚Üí  Œ£‚àó                                                        deÔ¨Ånition  parameterized reducibility parameterized  pairs ‚àà Œ£‚àó √ó Œ£‚àó                                                        language parameterized reducible parameterized                                                     ‚àà fx gfx ‚àà  language denoted ‚â§par exist  theorem  complexity class comp reduc ‚Ä¢ parameterized polynomialtime computable function  tion transitive compatible class compc  Œ£‚àó √ó Œ£‚àó ‚Üí Œ£‚àó    structure compilability classes compc ‚Ä¢ recursively computable function  Œ£‚àó ‚Üí Œ£‚àó  directly related structure complexity classes                    ‚àó   ‚àó  cpoly                                               pairs ‚àà Œ£ √ó Œ£                                                                                                      theorem  let complexity classes      ‚àà fx hk ‚àà   tainment compc ‚äÜ compc  holds deÔ¨Åne parameterized complexity classes  tainment cpoly ‚äÜ cpoly holds                      contrast class fpt each classes deÔ¨Åned      complexity classes obey directly languages reducible particular language                            proper containment   theorem  gives strong evi deÔ¨Ånition  deÔ¨Åne following parameterized lan  dence corresponding compilability classes compc guages weight truth assignment deÔ¨Åned               compc  obey similar proper containment compc  number variables maps true  compc note making observation appeal  widely held belief relationships ‚Äústandard‚Äù ‚Ä¢ weighted formula satisfiability  complexity classes affected nonuniformity input boolean formula                                                             question does   satisfying assignment    deÔ¨Ånition compc ‚Äúnonuniform‚Äù prepro weight  cessing translation function takes knowledge base  input addition given length query ‚Äúuni ‚Ä¢ weighted circuit satisfiability  form‚Äù version classes compc translation function input boolean circuit  given knowledge base studied compared question does satisfying assignment  compc classes cadoli et al  paper present weight  nonuniform theory parameterized compilability fur  ther discuss uniform compc classes use ideas note term ‚Äúnonuniformity‚Äù intended  concepts present paper develop corresponding usual complexitytheoretic sense opposed slightly  uniform theory                                       different sense compc called nonuniformdeÔ¨Ånition  deÔ¨Åne following parameterized com classes natural way substantiate claim  plexity classes                                      sidering special cases deÔ¨Ånition  lend                                                        intuition reader    ‚Ä¢ wsat class parameterized languages                                                          consider case preprocessing function      parameterized reducible weighted formula                                                        simply returns output Ô¨Årst argument equal      satisfiability                                                                                                                                       projection œÄ follows equal  conse    ‚Ä¢ wp class parameterized languages quently pkrf contained parcompc      parameterized reducible weighted circuit sat  contained intuitively func      isfiability                                      tion does perform preprocessing compilabil    straightforward verify parameterized com ity class parcompc simpliÔ¨Åes original class  plexity classes deÔ¨Åned fpt wsat wp consider case pkrf property                                                                                  ‚àó  compatible parameterized reduction strings ‚àà Œ£  holds ‚àà                                                                            paper assume discussed parameterized  ‚àà  ‚Äúignores‚Äù  complexity classes property component ‚Äúparameter‚Äù strings case  complete problems                                    pkrf  naturally induces krf fÀú deÔ¨Åned  assumption  parameterized complexity class  ‚àÉkx ‚àà    ‚àÄkx ‚àà   compatible complete problems pa pkrf contained parcompfpt  rameterized reduction ‚â§par                                                        induced krf fÀú contained compp ‚Äúignor                                                        ing‚Äù parameter pkrf  compilability class    parameterized    compilability                     parcompfpt  simpliÔ¨Åes nonparameterized vari    classes reductions                           ant compp mention imposing  theory compilability starting point strictions discussed cases simultaneously ef  theory parameterized compilability deÔ¨Ånition fectively obtain class think fpt  compilability classes compilability version compp different generalizations  each nonparameterized complexity class deÔ¨Åned deÔ¨Å uniÔ¨Åed obtained specializations  nition  deÔ¨Åne compilability version parcompc parcompfpt  each parameterized complexity class               following notion reducibility comparing    deÔ¨Ånition compc  deÔ¨Ånition  compilability pkrfs  parcompc  includes translation function space deÔ¨Ånition  parcomp reducibility pkrf par                                                                                               par      bound ‚Äútarget‚Äù pkrf  required compreducible pkrf denoted ‚â§comp   inside                                             exist                                                                                                        ‚àó  deÔ¨Ånition  let parameterized complexity class ‚Ä¢ parameterized polynomialsize functions  Œ£ √ó  pkrf  belongs parcompc exist              ‚àó √ó Œ£‚àó ‚Üí Œ£‚àó    ‚Ä¢ parameterized polynomialsize function  Œ£‚àó √ó ‚àó √ó ‚Ä¢ parameterized polynomialtime function  Œ£‚àó √óŒ£‚àó √ó      Œ£‚àó ‚Üí  Œ£‚àó                                         Œ£‚àó ‚Üí  Œ£‚àó                                                                                             ‚àó     ‚àó    ‚Ä¢ pkrf                                      ‚Ä¢ recursively computable function  Œ£ ‚Üí Œ£                                                                                      ‚àó    ‚àó    ‚àó  triples ‚àà Œ£‚àó √ó Œ£‚àó √ó Œ£‚àó natural triples ‚àà Œ£ √ó Œ£ √ó Œ£ natural  numbers ‚â•                                      numbers ‚â•                                        ‚àà            ‚àà          ‚àà                                                                                                                     fx gfx hk ‚àà     implication containment pkrf inside  parcompc function pkrf  fol note deÔ¨Ånition parcomp reducibility  lowing deÔ¨Åne each ‚àà Œ£‚àó ‚Äúkslice‚Äù pkrf direct analog deÔ¨Ånition compreducibility deÔ¨Åni            def                                         tion  ‚Äúpreprocessing phase‚Äù given upper bound  gk    ‚àà deÔ¨Åne size query opposed length       ‚àó   ‚àó     ‚àó  fk  Œ£ √ó ‚Üí  Œ£  function fkx  fx query deÔ¨Ånition  believe notion                        ‚àó                notice each ‚àà Œ£  krfs fk fk binary duction preferable assumption like assumption  function fk satisfy condition deÔ¨Ånition  each  necessary establish transitivity                                                      kslice fk compilable corresponding kslice fk allows simpler proof transitivity proof transi        function fk size bounded tivity specialized proof transitivity ‚Äúupper  parameterized polynomial falling limited bound‚Äù variant deÔ¨Ånition  removing parameter  range functions fk behave polynomially likewise   ‚àà fpt falling limited range krf sketch direction claim suppose pkrf  slices  time complexity behaving polynomially described form parcompfpt fix arbitrary                                                           ‚àó                     ‚àó    ‚àó     ‚àó    initial acquaintance deÔ¨Ånition  appear ‚àà Œ£  deÔ¨Åne function fÀú  Œ£ √ó  ‚Üí Œ£ fÀúx   complex believe classes parcompc fx deÔ¨Åne krffÀú  ‚àà   unify classes compc parameterized complexity veriÔ¨Åed thatfÀú contained compp fÀú fÀú
