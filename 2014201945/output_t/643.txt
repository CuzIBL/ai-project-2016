     sat encodings statespace reachability problems numeric domains               jorg¨ hoffmann            carla gomes  bart selman                 henry kautz            deri innsbruck                   cornell university             university rochester           innsbruck austria                 ithaca ny usa                 rochester ny usa        joerghoffmannderiorg        gomesselmancscornelledu          kautzcsrochesteredu                          abstract                          software veriﬁcation method method                                                                                                           translation boolean satisﬁability impor explored example clarke et al                                                                                tant approach solving statespace reachability ganzinger et al   respectively planning far                                                                                                        problems arise planning veriﬁcation  method explored lpsat wolfman                                                                                                           important problems involve nu     weld  tmlpsat  shin davis        meric variables example programs plan   disadvantage method involves cum      ning resources focussing planning    bersome implementation bitwise operations cnf      propose method translating problems    disadvantage method expressivity smt      propositional sat based approximation languages comes price solvers com      reachable variable domains compare    plex sat solvers generally scale      direct translation “sat modulo theory”  explore option      smt sat extended numeric vari   approximate reachable variable domains      ables arithmetic constraints transla     termine sets dt variable      tion sat generates larger formulas        value transitions contained      show typically outperforms translation     dt ﬁnite domains serve basis      smt point formulas         boolean encoding atoms represent numeric      don’t ﬁt memory longer show         variables taking particular values      planner optimal tends                                                        course method work sets dt      outperform stateoftheart suboptimal heuris grow large underlying intuition actual      tic planners domains tightly constrained number distinct values numeric variable achieve      sources finally present encouraging initial boundedlength problem quite small experi      sults applying approach model checking mental results conﬁrm                                                          focus planning approximate reachable variable    introduction                                       domains constructing “numeric relaxed planning graph”  satisﬁability testing signiﬁcant method solving state nrpg inspired work generating heuristic functions  space reachability problems   winners hoffmann  kupferschmid et al  add  track optimal planners international planning intelligence order obtain smaller dt based  competition translated boundedlength planning sat test nrpg obtain propositional cnfs manner inspired  ing model checking determining sat testing kautz selman  cnfs handed  error states reachable ﬁxed number steps stateoftheart sat solver minisat een sorensson¨  succeeds bdd methods fail clarke et al   plan length bound starts  incremented    important planning veriﬁcation problems ﬁrst satisﬁable formula – way gen  naturally involve numeric variables constraints erated plans optimal minimal length  example programs planning operators resulting planning numreachsat  sume resources question arises best gener run largescale experiments broad variety plan  alize “encode sat” approach numeric problems ning problems compare existing plan  far different methods pursued         ning systems using method lpsat outdated  interprete numbers bitstrings numeric operations tmlpsat available section       bitwise operations “implement” operations comparison implemented called      propositional cnf                                                           related work seshia bryant  using notion  translate boolean satisﬁability “sat mod relevant variable domains solving presburger formulas      ulo theory” smt sat extended numeric context techniques quite different vari      variables arithmetic constraints             able domains arise through iterated interaction sat solver                                                     ijcai                                                    numreachsmt  identical numreachsat ex  line  denote plan length bound  cept encoding numeric variables smt formu currently considering writing φy conjuntion φ  las handed stateoftheart smt solver math propositions numeric constraints lines    mean  sat bozzano et al  numreachsat consistently ⊆ set variables mentioned numeric  performs numreachsmt point constraints φbydt lines    denote cross  larger sat encodings longer ﬁt memory      product dt ∈v dt  dt v××dt vn    compare planners “suboptimal heuris  vvn set value vectors                                                    tic planner” family metricff hoffmann   single value vectorc ¯bycx respectivelyc ¯x lines    lpg gerevini et al  sgplan chen et al    denote vector set restricted variables  planners fast respectively won competi set propositions set value vectors  tions – usually compared optimal conjunction φx propositions numeric constraints  planners comparison unfair ﬁnd                                                        say pcx   φ lines    iff φ’s propositions  contrast usual competition results                                                        subset existsc ¯ ∈ thatc ¯x satisﬁes  text optimal planners quite competitive numreachsat φ’s numeric constraints expc¯ line  expression  outperforms heuristic planners basic domain value vector mean outcome inserting values  tightly constrained resources important result expression  planning community suggesting seriously reconsider                                                          words nrpg built follows reached propo  numeric planning ﬁnally present initial encouraging                                                        sitions variable domains ﬁrst set initial values  results using approach modelchecking domains                                                        iterates time steps desired bound                                                        reached each step action set set ac    approximating variable domains                     tions precondition satisﬁed  spell algorithm building nrpg need effect set et  propositions reached    notations respectively denote initial state set reached added effect  numeric variables action set planning task reached variable values    initial state set propositions – initially reached result effect  true assigns value variable ∈ nu value vector reached satisﬁes conjunction  meric constraint form expx  expy  ∈ precondition condition respective action  ≤≥ exp exp expresssions effect – intuitively means insertion new values  constants operators −∗ variables ⊆ “guarded” corresponding conditions  spectively ⊆ each action ∈ consists precon                                            ∈           example  consider task single variable  dition prea set ea effects each effect ea initially  single action effect condi  sists condition cone adds adde deletes dele                                                        tion ≥  effect  v− dv  additionally annotated set numeric effects                                                                                   algorithm  form  exp adds deletes usual proposi stop – effect  v− guarded condi  tion sets preconditions prea effect conditions cone tion ≥  value  −isnot inserted  conjunctions propositions numeric constraints                                        semantics deﬁned obvious standard way       nrpg admissible value reachable                                                        variable steps guaranteed contained                       ∈                              dt algorithm exponential arity –                                        number variables mentioned – conjunctions pre       ∈ apt dt   preax        conditions effect conditions effect expressions     et  ∃a ∈  ∈ eapt dt   conex maximum arity largest involved variable     pt  pt ∪p ∃e ∈ et  ∈ adde              main size number vectors considered                                                                               ∈ dtv  dt ∪c            bounded  hoffmann  avoids blow                                                                                                                ∃a ∈ ∈ ea ∩ et  expx ∈ ec¯ ∈ dt x∪y  keeping max min value each dt         expc¯x pt c¯y  prea ∧ coney accordingly approximating satisfaction linear nu   endwhile                                           meric constraints kupferschmid et al  largely avoid  figure  numeric relaxed planning graph nrpg algo blowup treating numeric constraint separate  rithm approximating reachable variable domains      addressing conjunctions potentially decreas                                                        ing lot rationale  dif    pseudo code nrpg shown figure  al ference works need compute nrpg  gorithm keeps track sets pt reached propositions state forward search   sets dt reached values reached variable domains arity numeric constraints conjunctions  time steps note slight abuse notation line tends small planning domains – express                                                        ing constraints resource availability usually involves    implementing evaluating planner using method fu  ture work                                               difference hoffmann ’s kupfer    heuristic planners employ greedy searches schmid et al ’s algorithms lies “guarding” value  work resources tight section  sertions described new technique                                                     ijcai                                                    single variable experiments did ﬁnd note speciﬁcation makes use nrpg  single domain potential blowup problem deﬁnition set decision variables corre    potential blowup turned severe sponds current implementation  size domain variable grows exponentially easily deﬁne smt encoding does use  sequence actions results different value nrpg runtime building nrpg included  happens test domains numreachsmt runtimes experiments  source action using resource random ﬂoat numreachsat nrpg essential run  cost remedy admissibility time course included encoding identical  nrpg plan optimality treatment numeric variables pre  try greedy approximations variable domains instead cisely instead vt variables separate  example build nonnumeric planning graph ﬁrst boolean decision variable  ct vandc ∈ dt  build variable domains seemingly rel decision variable cstrt  evant subset actions relaxed plan leave numeric constraint different cstr exp  exp oc  topic open future work show  curing task finally decision vari   numeric domains international planning com able cstr¯ct cstrx value tuplec ¯ ∈ dt  petition problem does occur granularity nu satisﬁes cstr intended behavior cstr¯ct true  meric effects random ﬂoats action iff values speciﬁes true cstrt true iff  sequences result value                   value tuples true ensure behavior    ﬁnally remark insert intelli following additional clauses  gence nrpg prune nonreachable variable val • constraints cstrx cstrt equivalent dis  ues example extension graphplan mutex reason junction cstr¯ct wherec ¯ ∈ dt satisﬁes cstr                         ing blum furst  turn beneﬁcial • value tuples cstrx each ctr¯c equivalent  domains leave open future work                                                                                                    conjunction  ct xk  ckt                                                              xxk andc ¯ cck    sat smt encodings                              “conditions” clauses “actions ef  ﬁrst smt  encoding underlying num    fects” clauses translate effortlessly decision  reachsmt encoding simpler ex variable numeric constraint occuring precon  plain obtain sat encoding underlying num  dition effect condition use variables  reachsat smt encoding makes use decision vari just like variables propositions similarly frame  ables propositions numeric variables actions effects clauses numeric values look like  time steps precisely decision variables pt propositions example et ¬v   –ife   ≤ ≤ ∈ pt  vt  ≤ ≤ ∈ applied  att  att    ≤  ∈  et  ≤  pect somewhat complicated “effect state  ∈ et  variables xt boolean change” clauses numeric variables say  following clauses illustrated example        numeric effect  expx effect ∈ ea    • initial state specify initial values propositions tuple  cxk  ck complies                                                                                      ∧          numeric variables example       tuple dt satisfying pre     •                                                   applied xi  cit false  expc¯t true      conditions action implies preconditions    ¬ ¬                effect implies conditions example example et         ¬et vt ≥     • actions effects effect implies corre  experimental results      sponding action action implies each experiments run cluster machines each      effect occurs e’s conditions gbyte main memory running pentium iii processors      false example ¬at ¬vt ≥ et            ghz applied memory cutoff gbyte each run    • effect state change effect implies adds timeout  seconds  seconds num      negated deletes  implies numeric effects reachsat numreachsmt implemented                                                        compare metricff lpg sgplan com        example −et vt  vt −                                                         pare smtbased planners lpsat tmlpsat lp    • frame axioms proposition true stays                                                       sat outdated particular does parse pddl      true  unless deleted proposition translate instances input format      false stays false   unless added                                                       compare tmlpsat contacting      numeric variable value  unless authors did manage obtain executable      affected example vt  vt et     • goal goal condition true time         competition examples    • mutex interfering actions effects occur ﬁrst consider numeric domains run international      step actionseffects interfere harm each planning competition precisely consider numeric      other’s preconditionsconditionsadds affect mains run  competition reason      numeric variable                        run domains                                                        ijcai                                                          instance  sat    smt    ff  sgplan lpg          ily different action costs explore topic        depots                     depots                      section  run experiment explicitly scaling size        depots     –                   set numbers action costs drawn        depots                        each competition test suit contains  instances        depots       –                   stance solved numreachsmt solved num        settlers                   settlers                       reachsat depots zenotravel table  shows data        settlers   –      –                   largest instances solved numreachsat        settlers                   settlers show  smallest instances contain        settlers    –                   solved numreachsat metricff        settlers   –      –                 settlers   –      –     –               small settlers instances comparatively large requir        zeno                           ing plans dozen steps rovers        zeno                         consider particularly interesting show instances        zeno                      smallest ones quick glance sees        zeno                       zeno                     numreachsat convincingly outperforms numreachsmt        rovers                       domains underlines merits approach        rovers       –     –     –             quite impressively suboptimal planners        rovers                      depots settlers zenotravel constitutes prob        rovers                     rovers                        lem single exception metricff settlers        rovers      –     –             marginally faster numreachsat rovers        rovers        –     –             numreachsat outperforms numreachsmt        rovers      –                                                                         rovers      –     –            metricff sgplan beat lpg        rovers      –     –     –           nature energy consumption recharge        rovers       –     –     –            domain recharge ﬁrst reach sunny spot        rovers  mem      –     –     –            rovers  mem      –     –     –     –          metricff sgplan presumably spend excessive time                                                        large dead ends energy left  table  runtime results seconds reach spot lpg’s search stochastic   competition domains text dashes mean timeout starting nature affected sec   seconds mem memory gbyte tion run experiment explicitly scaling constrained  main planner names abbreviated obvious        ness resources    focus competition shifted away numeric plan  transport  ning far “solved” constructed simple transportation domain called trans   numeric domains main benchmark port run targeted experiments truck moves  context named depots driverlog rovers weighted graph set packages transported  satellite settlers zenotravel depots combination tween nodes actions edges loadunload  logistics blocksworld numeric restrictions packages each edge costs weight fuel  load status trucks driverlog trucks need refuelling truck ran fuel it’s “game over”  drivers numeric variables distances walked driven domain simplistic believe serves  mentioned optimization metric rovers abstract model relevant issues planning  gathering rocksoil samples images energy sources particular scale instances variable  usage recharge operator applied domain size resource constrainedness follows  “sunny spots” satellite gathering images instance generator takes parameters  energy usage recharge zenotravel simple logistics random connected undirected graph nodes cre  type problem fuel usage refuel operator ated packages added random origins  applied anytime table  shows data  destinations edge weights uniformly drawn    driverlog left table  tested planners set domainspeciﬁc branchandbound  ignore optimization metric – numeric vari procedure developed especially purpose  ables – satellite left table computes minimum fuel min uel needed  domain approach trivially nonsense “satellite” solve task initial fuel supply truck set  turn “directions” doing costs respec  ∗ min uel  way size reachable vari  tive “slew time” energy competition instances able domains controlled resource  slew times assigned basically random ﬂoats strainedness controlled close   sequence turning actions differ                                                           instances   numreachsat’s cnfs  rent summed cost yielding different possible numeric large ﬁt memory section  value reachable variable domains grow exponentially consider single truck multiple trucks  depth nrpg exhausts memory sake simplicity note puts satbased approach  smallest instance competition suite ﬁnd doubt disadvantage vs heuristic planners satbased planners  ful scenario random ﬂoat costs makes known work better lot parallelism  sense – need distinguish arbitrar reducing number time steps considered                                                     ijcai                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   solved         runtime  sec                                    runtime  sec                                                                                                                                                                                                     numreachsat                                                                   ff                                                                                                   lpg                                                                    sgplan                                                                   ffsolved                                                                                             lpgsolved                                                                 sgplansolved                                                                                                                                                                                                                                                         figure  scaling variable domain size             figure  scaling resource constrainedness    ﬁrst experiment aim variable domain heuristic planners’ runtime curves  size affects planners scale   just artefact runtime cutoff sharp  ﬁxed  challenging feasible ﬁx   drops solution percentage reliably reveal main  relevant shall region message figure  heuristic planners efﬁcient  satbased approach efﬁcient stateoftheart sources plenty tend fail resources  heuristic planners runtime plots numreachsat scarce ﬁrst experiment making important  numreachsmt figure  each data point mean point absolutely clear numreachsat opti  value  instances numreachsat mal outperforms heuristic planners inverts al  strong advantage low expected gets worse result planning competitions   growing numreachsmt reacts slightly note transport awkward artiﬁcial problem  value                                    natural relevant application planning    ran experiment scaled    expected numreachsmt’s      jugsandwater  behavior does change numreachsat jugsandwater domain set jugs varying  grades timeout  seconds num sizes wants achieve given ﬁll status  reachsat’s solution percentage increase steps jugs actions ﬁll jug pour content           remark lim jug domain numeric variables  iting factor nrpg building cnf building ﬁll status jugs resources constitute highly  sat reasoning size cnfs makes teracting phenomena similar rubic’s cube  solution rate drop rule thumb  “point view” general purpose solver  million clauses numreachsat beats numreachsmt  obtained random instances jugs maximum jug  tween   million clauses numreachsmt beats num size choosing jug size uniformly  reachsat experiment hap using repeated greatest common divisor computation  pens starting   propositional cnfs don’t ﬁt obtain solvable goals  gbyte memory longer note provides way corresponds parameter  simple rule automatically choose numreachsat transport scales possible variable value ranges  numreachsmt just compute number clauses unlike transport jugsandwater  propositional cnf apply threshhold        huge effect instance hardness larger longer    emphasize competition domainstable  plan typically making harder ﬁnd ta  advantage numreachsat numreachsmt   ble  shows results scaling simultaneously  larger   figure  presumably num readability show solution rates  reachsmt trouble numreachsat run lpg handle conditional effects  mix planning aspects domains – remember action pouring content jug num  transport basic                              reachsat vastly outperforms numreachsmt    experiment shown figure  scales  goes metricff giving example unusual   ﬁxed  ﬁxed  left dominance optimal suboptimal planner  hand side axis logscaled runtime each data point unclear reason sgplan’s efﬁciency  average  instances timeout  seconds  inserted average computation unsolved  model checking  cases complement right hand side axis shows point new method make sense  percentage solved instances numreachsat’s curve cases model checking run prelim  horizontal line instances solved solution inary experiments modelled model checking toy  percentage shown note seemingly linear nature examples pddl examples make use                                                     ijcai                                                    
