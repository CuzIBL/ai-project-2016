                                   existential   arc  consistency                   getting   closer   arc  consistency    weighted    csps∗                       simon   givry                              federico heras              degivrytoulouseinrafr                         fheraslsiupcedu                      matthias  zytnicki                             javier larrosa             zytnickitoulouseinrafr                         larrosalsiupcedu                             inra                                       lsi upc                       toulouse  france                            barcelona  spain                      abstract                             preliminaries      weighted csp framework soft constraint   valuation structures algebraic objects specify costs      framework wide range applications valued constraint satisfaction problems schiex et al       current stateoftheart complete solvers deﬁned triple  e⊕ set      scribed basic depthﬁrst branch bound    costs totally ordered  maximum minimum      search maintain form arc consistency costs noted  ⊥ respectively ⊕ operation      during search paper introduce new used combine costs      stronger form arc consistency exis following larrosa schiex  valuation struc      tential directional arc consistency provide ture weighted csp wcsp sk  k⊕≥      algorithm enforce efﬁciency al   natural number ⊕ deﬁned ⊕  minka       gorithm empirically demonstrated variety ≥ standard order naturals observe      domains                                          sk   ⊥   useful deﬁne                                                        subtraction   costs let ab ∈ costs                                                        ≥    introduction                                                              −                                                                            weighted constraint satisfaction problems wcsp                         known optimization version csp framework  practical applications recently celebrated arc binary weighted constraint satisfaction problem wcsp  consistency property generalized classi tuple  skx dc sk valuation structure  cal csp framework wcsp  cooper schiex    xxn set variables  larrosa schiex  three known gener just index each variable xi ∈ ﬁnite domain  alizations ac fdac fac collapsing di ∈ values assigned ia denotes  classical arc consistency csp case larrosa assignment value ∈ di variable xi set unary  schiex  shown maintaining fdac during binary weighted constraints cost functions  search usually best option                   valuation structure sk unary weighted constraint ci    paper introduce new form local consis cost function cixi → binary constraint ci  tency called existential directional arc consistency edac cost function ci jxix → assume existence  show edac  stronger fdac unary constraint ci variable zeroarity  troduce algorithm enforce edac runs time constraint constant noted c∅ constraint  oed × maxnd number deﬁned deﬁne dummy ones cixi  ⊥  constraints variables domain values respectively  c∅  ⊥  upper bound wcsp instance deﬁned later constraint assigns cost  means forbids  main use edac  associated ﬁltering algo corresponding assignment permitted  rithm embed complete depthﬁrst branch corresponding cost cost assignment  bound solver maintains edac visited node  xxn noted sum problem  experimentally evaluated idea random max cost functions  sat maxcsp uncapacitated warehouse location prob  lems observe maintaining edac worse         ∑  ci jxix ⊕ ∑ cixi ⊕c∅  maintaining fdac instances orders          ci j∈c         ci∈c  magnitude better                                                          assignment consistent   usual    ∗this research partially supported frenchspanish col task ﬁnd consistent assignment mini  laboration picasso sm  integrated action hf mum cost nphard observe wcsp    repli project ticc                     reduces classical csp                                              wcsp   easily transformed equivalent                                                nc  instance projecting unary constraints                                                                        c∅ subsequently pruning unfeasible value func                                                       tions projectunary prunevar algorithm perform                                                                                              projection unary constraint c∅ prune unfea                                                  sible values respectively                                                          arc consistency properties based notion sim                                                        ple support given binary constraint  say      figure  equivalent wcsp instances                                                                                                      ∈ simple support ∈ di ci jab  ⊥                                                        similarly say ∈ support ∈ di  algorithm  algorithms propagate costs           ci jab ⊕cjb  ⊥  function prunevari  boolean                                                        deﬁnition  variable xi arc consistent value ∈    lag  false                                                         di simple support constraint ci wcsp    foreach ∈ di                                   arc consistent ac variable node arc consis      c∅ ⊕c ≥                                                       tent        di  di −         lag  true                                  deﬁnition  variable xi arc consistent value                                                        ∈ support constraint  wcsp    return lag                                                                                                                                   arc consistent fac variable node                                                        arc consistent  procedure projectunaryi    α  mina∈d cia                                simple supports ∈ di enforced pro             iα    c∅  c∅ ⊕                                         jecting binary costs ci ja· cia performed                               α    foreach ∈ di cia  cia                   procedure project algorithm  procedure findsupports                                                        algorithm  enforces simple supports value                     α  procedure projectia                            di    cia  cia ⊕ α     foreach ∈ ci jab  ci jab   α      example   wcsp depicted figurea ac                                                        cause value ∈ di does simple support variable  procedure extendia jα                            ac enforced executing findsupportsi produc    foreach ∈ ci jab  ci jab ⊕ α      ing problem projectunaryi producing    cia  cia   α                                 problem                                                          enforce supports di values procedure                                                        findfullsupports algorithm  need extend unary  example  consider problem depicted figurea costs cj· ci j·· procedure extend algo  variables values ab domains rithm  binary costs projected cia  unary costs depicted small circles binary costs csp case   simple support ia  represented edges connecting corresponding val equivalent support notions  ues label each edge corresponding cost duce classical notion support ac  values connected binary cost  fac reduce classical arc consistency wcsp case  problem optimal cost  attained support stronger sim  assignment ba                                     ple support larrosa schiex  shown                                                        wcsp  transformed equivalent arc                                                        sistent time oed unfortunately wcsp      local consistencies wcsp                 transformed equivalent arc consistent  wcsps  deﬁned variables said example  problem figurea ac  equivalent deﬁne cost distribution com fac value ∈ di fully supported en  plete assignments local consistency properties widely force support calling findfullsupportsi  used transform problems equivalent simpler ones resulting problem depicted figureb fac  general constraints given explicitly tables costs value ∈ fully supported enforce  implicitly mathematical expressions algorithmic pro support calling findfullsupports ji return  cedures simplicity exposition assume problem figurea easily proved prob  explicit form loss generality dis lem does equivalent fac  cussed cooper schiex  simplest form fac practical property circumvent  local consistency node consistency nc          problem weaker property proposed  deﬁnition  variable node consistent values sequel assume set variables totally ordered                                                        ∈ di c∅ ⊕cia    exists value ∈ di  cia  ⊥ wcsp node consistent nc deﬁnition  variable xi directional arc consistent  variable node consistent                          value ∈ di support constraint ci  algorithm  algorithms enforce supports                                                                                                                                       function findsupportsi  boolean                                                                                                                                        lag  false                                                                                                                                                                              foreach ∈ di                                                                                                                                                                        α  minb∈d ci jab                                                                                                                                                                                                α  ⊥ ∧cia  ⊥ lag  true                                                                                                                                              projectia jα                                                                               projectunaryi                                                                          return lag                                                                                                                                                                                                                                                       function findfullsupportsi  boolean                                                                                                                            lag  false                                                                                                                                                                        foreach ∈ di                                                                                                                                                                                                                                                             pa  minb∈d ci jab ⊕cjb                                                                                                                                                   pa  ⊥ ∧cia  ⊥ lag  true                                                       foreach ∈                                                                            eb  maxa∈di pa  ci jab                                                                                                                                                 foreach ∈ extend jbieb                                            foreach ∈ di projectia jpa                                                  projectunaryi                                                                                                                                                                                           return lag                                                                                                                                                                                                                                                                                                                                                                      function findexistentialsupporti  boolean                                                                                                                                             lag  false                                                                                                α                                            mina∈di cialci j∈c st ji minb∈d ci ja b⊕cjb      α  ⊥       foreach ci ∈ st                     figure  equivalent wcsp problems    origi          lag  lag ∨ findfullsupportsi        nal problem ac fdac        return lag                                       edac                                                            consequence unary cost values dk     directional arc consistent fdac increased enforcing supports figure    addition value ∈ di simple support unary costs di values larger zero node consistency    constraint ci  wcsp directional arc lost lower bound increased figure      consistent fdac variable node direc general supports safely enforced direc    tional arc consistent                                tions enforcement produces increment lower    example  problem ac fdac bound show natural local consistency    cause value ∈ does support variable property observation existential arc    fdac  enforced executing findfullsupportsi consistency eac    producing problem figure                                                          deﬁnition  variable xi existential arc consistent      wcsp    transformed equivalent value ∈ di cia  ⊥                                               fdac  wcsp  time complexity oend  larrosa support constraint ci wcsp existential arc    schiex  csp case fdac reduces consistent eac variable node existential arc    classical arcconsistency general case fac implies consistent    fdac  fdac implies ac satisfaction    property implies satisfaction im previous forms arc consistency required    portant question possible strengthen condition domain value eac requires    fdac  property make closer fac having existence variable special value impor    guarantee existence arbitrary wcsp instance tant fact note variable xi eac    section address issue               domain value cia  ⊥ variable                                                          ∀b ∈ jci jab ⊕cjb  ⊥ enforcing supports      existential arc consistency  stronger  new      xi break nc property possible                                                          crease lower bound possible integrate eac       property                                           fdac  order exploit beneﬁts each achieved    consider fdac problem figured observe existential directional arc consistency edac prop    value ∈ dk simple support required erty    fdac  property does support    situation value ∈ dk variable xi deﬁnition  wcsp edac fdac eac  words edac requires value fully sup algorithm  enforcing edac initially      ported direction simply supported di procedure edac  rection satisfy fdac additionally value   ∅ ∨  ∅ ∨  ∅  variable fully supported directions    ∈ sl  icil ∈ ∪   satisfy eac special value called fully supported  ∅   value observe csp case edac instantiates   ∅  classical arc consistency edac weaker     popminp   fac stronger fdac                              findexistentialsupporti                                                                ∪                                                                foreach ∈ st   ∪      algorithm                                                                                                                             ∅  present algorithm enforcement edac     case binary wcsps edac  algorithm  trans        popmaxr                                                              foreach ci ∈ st   forms arbitrary problem equivalent verifying   findfullsupportsi  edac local property uses three propagation queues      ∪   implemented priority queues      ∪   lowest highest variable queue popped  constant time ∈ means value   ∅  pruned neighbors higher lost  popminq   simple support revised ∈ means foreach ci ∈ st   value increased unary cost ⊥    findsupportsi  neighbors lower lost support    ∪   revised ∈ means value      ∪     neighbor increased unary cost ⊥  lost support fully supported value  foreach ∈  revised auxiliary queue prunevari  ∪   used efﬁciently build    algorithm formed main loop inner  loops loops lines    respectively en  force eac dac ac line  enforces nc each proof  regarding space use structure suggested  time costs projected enforcement local cooper schiex  bring space complexity  property property broken variables oed larrosa schiex  proved projectu  local property broken stored queue nary project extend prunevar time od  revision enforcement nc ac dac supports findfullsupports time od let  achieved proposed larrosa schiex  focus loop complexities edac loop  focus enforcement eac                  line  enforces dac described previous papers    eac  enforcement mainly encoded function time oed each variable pushed  existentialsupporti enforces existential sup each constraint ci checked line   port xi ﬁnding supports wrt lower neighbor similarly loop line  enforces ac directed                                                                                                          does worry higher neighbors lowest variables highest ones oed   dac  enforcement takes care enforcing loop line  enforces eac directed highest  existential support xi cost function cj decreases variables single run loop variable  mains consequence need revise pushed twice popped variable xi  existential consistency directional arc lowest pushed variables higher xi  sistencies lowest neighbors furthermore implies loop iterates times leading  existential consistency stronger arc enforc oe time complexity line  amortized complex                                                                                                ing ac xi useless direc ity time findexistentialsupport oed   tional arc consistency variable xi checked function called each variable binary  cause unary cost xi increased line constraint line   observed time   similarly existential consistency higher neighbors complexity eac oed  xi veriﬁed line                   line  time line  time ond    prunevar enforces node consistency unary cost oed graph supposed  lower bound increments line  function exe connected compiling different results complexity  cuted order avoid unnecessary value exami inside line  oed loops  nations during loops does change worst • line  pruned  case time complexity simplicity reasons case value nd times  consistent problems c∅ reaches  described                                                          • ac enqueued variable  theorem    complexity    edac      time       preceding remark        oed maxnd  space oed                         ond times  • element enqueued   solved problem instances cap stan      enforcing ac dac ﬁrst case dard library benchmarks uwlp mo      happen ond second case happens   mp  instances courtesy kratica kratica et al       omaxnd  times condition line  instances challenging mathematical pro      true ac added element ond times gramming approaches large number      eac added element times  suboptimal solutions      each time eac violated c∅ increases                                                                     cnf  vars             cnf  vars  consequently overall complexity oed maxnd                                                                                    mfdac                     mfdac                                                            medac                     medac                                                                                                                                                                                                                                      experimental    results                                                                                                                   section perform empirical comparison                                                                                    cpu  time                 cpu  time                                                                                      edac  fdac task proving optimality                                                                                          main use edac fdac properties use                                                                                        inside depthﬁrst branch bound solver idea                                                                                                                maintain edac fdac  during search algorithms           clauses              clauses  called medac mfdac  respectively im figure  time seconds solve random maxsat  plemented code idea efﬁcient incremental ver maxsat problems  sion uses tables supports la ac bessiere  regin  nonbinary problems delay propaga  tion nonbinary constraints binary                                                                    sparse loose               sparse tight                                                                                     variable selection use domdeg heuristics selects mfdac               mfdac                                                            medac                    medac                                                             variable smallest ratio domain size divided                       future degree value selection consider values                                                                                       creasing order unary cost ci variable ordering                                                           cpu  time                 cpu  time  directional arc consistency given index opti                                                                                mum  each problem instance maxsat                                                                                           good upper bound provided given branch                                                                                                                  bound ﬁrst upper bound experimented             variables           variables                                                                    dense loose                dense tight  three domains easily modeled wcsp given cnf                                                                                       mfdac                     mfdac  mula maxsat problem ﬁnding complete assign medac                     medac  ment maximum number satisﬁed clauses                             generated solved variable sat variable                              sat instances varying number clauses using cn cpu  time           cpu  time         fgen  random ksat generator note generator                           prevents duplicate opposite literals clauses du                                                                                                                                                                                   plicate clauses given overconstrained csp maxcsp         variables            variables  problem ﬁnding complete assignment maxi          complete loose            complete tight                                                                                                                                              mfdac                     mfdac                                                            medac                     medac  mum  number satisﬁed constraints generated                                                                                         classes binary random problems domain size set                                                                                          sparseloose constraint graph connectivity                                                                                        cpu  time                 cpu  time     variables sparsetight denseloose constraint graph                                                                                          connectivity  densetight completeloose     completetight proposed larrosa schiex                                                                                                                  maxsat resp maxcsp samples  resp                                                                                                   variables            variables  instances report mean values uncapacitated  warehouse location problem uwlp company considers figure  time seconds prove optimality binary ran  opening warehouses candidate locations order dom maxcsps  supply existing stores objective determine  warehouses open warehouses experiments performed  ghz pen  supply various stores sum mainte tium   mb time results seconds  nance supply costs minimized each store given figures   table  maxsat resp  supplied exactly open warehouse simply model maxcsp classes search effort grow exponen  problem boolean variables candidate loca tially number clauses resp number variables  tions integer variables stores domain size set summed computation times samples   soft unary constraints costs × hard bi completely solved algorithms computed  nary constraints connecting stores warehouses took                                                           program named toolbar benchmarks avail    van gelder ftpdimacsrutgersedupubchallenge able httpcarlittoulouseinrafrcgibin  satisﬁabilitycontributeducscinstances              awkicgisoftcsp
