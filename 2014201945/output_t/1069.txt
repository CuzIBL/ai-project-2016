                              logic normative systems                 thomas   agotnes˚   wiebe van der hoekjuanarodr´ıguezaguilar                                  carles sierra   michael wooldridge         bergen university college      university liverpool        csiciiia          norway                           united kingdom                 catalonia spain          taghibno                      wiebemjwcsclivacuk         jarcarlesiiiacsices                        abstract                          normative η” ϕ temporal logic expres                                                                                                                                                      sion usual ctl temporal operators  ♦      introduce normative temporal logic ntl     temporal operator preceded deontic      logic reasoning normative systems ntl                                                        operator cf ctl syntax η denotes normative      generalisation wellknown branching                                                        ntl obligations permissions ﬁrst contextu      time temporal logic ctl path quan                           η                                                    alised normative second temporal      tiﬁers  “on paths   ” “on      dimension argued help avoid      path   ” replaced indexed deontic                                                        paradoxes classical deontic logic ntl gener      operators oη pη example oηϕ                                 η             ϕ                                          alises ctl letting ∅ denote normative      means “  obligatory context norma   universal path quantiﬁer interpreted      tive η” deﬁning logic                                                        oη  technical machinery developed reason      sound complete axiomatisation discuss    ∅                                                        ing ctl adapted ntl emerson       logic’s relationship standard deontic logics                                                        clarke et al  ntl fact descendent norma      present symbolic representation language                                                        tive atl natl logic introduced wooldridge van der      models normative systems identify                                                        hoek howeverntl simpler believe      different model checking problems corresponding                                                        intuitive natl able present      model represented symboli technical results logic ﬁrst sound      cally explicitly given complete axiomatisation discuss logic’s rela      interpretation normative systems named tionship standard deontic logics introduce symbolic      formulae checked show com  representation language normative systems investi      plexity model checking varies pcomplete                                                        gate complexity model checking ntl showing      exptimehard variations                                                        varies pcomplete simplest case exptime                                                        hard worst present example illustrate    introduction                                       approach present brief conclusions  normative systems social laws widely pro  moted approach coordinating multiagent sys    normative temporal logic  tems shoham tennenholtz  crudely norma                                                        kripke structures let Φp   beaﬁnitesetof  tive deﬁnes set constraints behaviour                                                        atomic propositional variablesakripke structure Φ  agents corresponding obligations                                                                     quad  s  vwheres ﬁnite nonempty  observed agents number formalisms                                                                               set states ⊆  ∅beingtheinitial states  proposed reasoning normative behaviour multi                                                        ⊆  × total binary relation refer  agent systems typically based deontic logic meyer                               Φ                                                        transition relationandv  →  labels each state  wieringa  computational properties                                                        set propositional variables true state  formalisms – particular use practical                                                        path inﬁnite sequence states π   sign synthesis normative systems complexity                                                        satisfy property ∀u ∈   ∈  reasoning – received little attention                                                                                       ∈ denote πu component indexed  paper rectify omission present normative tem                                                        π π denotes ﬁrst element π second  poral logic ntl logic reasoning normative sys                                                        path π π  spath  tems closely related wellknown widely  used branching time logic ctl emerson inntlthe  universal existential path quantiﬁers ctl replaced normative systems paper normative  indexed deontic operators oη pηwhereoηϕ means set constraints behaviour agents  “ϕ obligatory context normative                                                                                              η” pηϕ means “ϕ permissible context relation ⊆ × total iff ∀s ∃s  ∈                                                    ijcai                                                    precisely normative deﬁnes possi kripke structure state interpretation  ble transition transition kandϕ formulae language follows  sidered legal different normative systems    differ transition legal formally                                                                  ∈             ∈ Φ  mative η wrt kripke structure  s  v iff      simply subset  η total relation ¬ϕ iff ϕ                 η  requirement total reasonableness constraint ϕ ∨ ψ iff ϕ ψ  prevents normative systems lead states suc                                                                    oη ϕ iff ∀π ∈cηskπ  ϕ  cessor let nrη  η ⊆   η total                                                                                               fϕ   ∃π ∈c    kπ  ϕ  set normative systems intended interpretation  η    iff    iη                                           normative η  ∈ η means transition  oηϕ ψ iff ∀π ∈cηs ∃u ∈ nstkπu                                                                                                        forbidden context η  η denotes ψ ∀v  ≤  ukπv ϕ  legal transitions η assumed η reasonable                                                            pηϕ ψ iff ∃π ∈ciηs ∃u ∈ nstkπu  guaranteed legal outward transition exists ψ ∀v  ≤  ukπv ϕ  state π path η normative                                                                                              ∧   →    ↔  rthenπ ηconformant ∀u ∈ πuπu  ∈ η remaining classical logic connectives “ ” “ ” “ ”                                                                                                       ¬ ∨  let cηs set ηconformant spaths wrt assumed deﬁned abbreviations terms                                                                                           ϕ     ϕ    normative systems just sets disallowed tran conventional manner write                                                                ∈   ϕ    ϕ             ϕ  ϕ  sitions compare determine example      iand                                                                liberal restrictive  remaining ctl temporal operators deﬁned  η ⊂ ηthenη places fewer constraints η  η liberal notice assuming explicit rep oη♦ϕ ≡ oηuϕ   pη♦ϕ    ≡   pηuϕ  resentation normative systems representing norma oη ϕ ≡¬pη♦¬ϕ      pη   ϕ  ≡¬oη♦¬ϕ  tive η directly subset checking prop  erties polynomial time operate recalling η∅ denotes normative  standard set theoretic operations union obtain conventional path quantiﬁers ctl follows                                                        aα ≡   α eα  ≡  α  intersection taking union normative systems η∅        η∅   η η yield depending  η ∪ η  total normative restrictive liberal properties axiomatisation following proposi  parent systems taking intersection tion makes precise expected property liberal  normative systems yields normative obligations permissions  restrictive liberal care taken oper liberal  ating normative systems way ensure resulting                                                        proposition  let kripke structure interpre  reasonable                                                        tation ηη ∈ Σηifiη ⊆ iη ki                                                         ϕ →   ϕ       ϕ →   ϕ                                                          η      η     η      η   syntax ntl  language ntl generalisation                                                        present sound complete axiomatisation ntl  ctl issue cause confusion                             −  language refer explicitly normative systems variants let ntl ntl                                                                                                 −  semantic objects assume stock normative η∅ formally ntl deﬁned  syntactic elements Ση denote normative systems exactly ntl requirement Ση contains                                                   η  avoid proliferation notation use symbol η∅ symbol corresponding restriction interpre                                                                                     −          −  syntactic element normative systems lan tations axiom ntl  denoted  isdeﬁned                                                                                                   −  guage symbol denote corresponding se axioms rules ax–r figure  ntl  mantic object interpretation symbols Ση respect                                   Σ  →              seen multidimensional variant ctl  transition relation function η indexed versions each path quantiﬁer  transition relation kripke structure say                                                        goingontontl add axioms obl perm fig  interpretation  assume symbol                                           η∅ denotes emptyset normative ure  corresponding inference denoted  normative forbids transitions note following chain implications ntl  normative reasonable kripke structure second element chain variant deontic ax  require iη∅∅ syntax ntl iom discussed naturally physically  deﬁned following grammar                   inevitable obligatory normative                                                    obligation given normative  ϕ  p ¬ϕ  ϕ∨ϕ  pη ϕ  pηϕ ϕ  oη ϕ  oηϕ ϕ                                                        η permissible η permissible  ∈ Φ η ∈ Ση α occurring given normative naturally physically  expression oηα pηα temporal formula possible  α wellformed formula                                                         aϕ →  oηϕ      oηϕ  → pηϕ      pηϕ →  eϕ                                                                         semantic rules semantics ntl given finally let ntl extension ntl obtained ex  spect satisfaction relation “” ϕ holds tending logical language propositions form                                                    ijcai                                                    ax validities propositional logic           require interpretations interpret  set union   ax pη♦ϕ ↔ pη uϕ                                 set intersection discussed                                                                                       η  ∪ η   axb oη  ϕ ↔¬pη♦¬ϕ                                  restrict interpretations                                                          total kind calculus normative sys  ax oη♦ϕ ↔  oηuϕ                                                        tems let beakripkestructureandi interpretation                   ♦¬ϕ  axb  η  ϕ ↔¬oη                                     mentioned properties                             ax pη ϕ ∨ ψ ↔ pη ϕ ∨ pη  ψ                                                              pηη ϕ → pηϕ      pηϕ →  pηη ϕ         fϕ ↔¬p   f¬ϕ                                                                ax  η        η                                           oηϕ →  oηη ϕ     oηη ϕ → oηϕ                                                                                     ax pηϕ ψ ↔ ψ ∨ ϕ ∧ pη pηϕ ψ                                                      follow proposition  having cal  ax oηϕ ψ ↔ ψ ∨ ϕ ∧ oη oηϕ ψ            culus allows reason composition norma                 ax pη ∧oη                                        tive systems                          ax oη  ϕ → ¬ψ ∧ pη  ϕ → ϕ →¬oηγ ψ                           axb oη  ϕ → ¬ψ ∧ pη  ϕ → ϕ →¬oη♦ψ            relationship deontic logic main differ           ϕ  →  ¬ψ ∧  γ →    fϕ →   ϕ →     ences language ntl language  ax  η                        η                    conventional deontic logic henceforth “deontic logic”      ¬pηγ ψ                                                        ﬁrst contextual deontic operators allowing formula refer                                       ♦ψ  axb  η  ϕ → ¬ψ ∧ oη  ϕ → ϕ →¬pη              different normative systems second tempo                                  ax oη  ϕ → ψ → pη  ϕ → pη  ψ                  ral operators deontic expressions ntl refer time                                                                                                                  pη   ϕ                              η     ϕ    ϕ   oη ϕ generalization                     “it permissible context true                                                                             ϕ          ϕ      ϕ → ψ      ψ                           time point” η “it obligatory context             modus ponens            η ϕ true” deontic logic contains        α →  α  obl η∅      η                                       notion time order compare temporal deon         α →  α  perm  η     η∅                                      tic statements deontic logic                                                       temporal dimension implicit  obl η   η → oηα → oη α                                                       natural ways doing “obliga         η   η →   α → α  perm           η     η                             tory” oϕ mean “always obligatory” oη ϕ “oblig                                                                                                                                               atory point time”oη ϕ respectively                             −  figure  three systems ntl ax–r derived similarly permission case principles  axiomatisation ctl ntl ax–roblperm standard deontic logic sdl hold ndlviz       ntl  ax–roblperm α stands temporal oϕ → ψ → oϕ →  oψ  ¬o⊥ ϕ  formula                                              infer oϕ mentioned temporal interpretations                                                        crucial deontic axiom ntl validities                                                                                        η ≡ η  η  η  deﬁned interpreted               ¬oη   ⊥     ¬oη   ⊥                                                                               obvious way η  η iff iη ⊂ iη                                               −  axiom ntl  denoted   obtained  translations commonly discussed  adding schemes obl perm figure      socalled paradoxes deontic logic holds ntlhow                                                        argued cf meyer wieringa  theorem  soundness completeness inference   causes instances            −  mechanism    sound complete respect validity paradoxes particularly involving contrarytoduty        −                            ϕ  ntl  formulas formula language obligations language conventional deontic logic        −         ϕ   −  ϕ                    ntl     iff     holds  weak incorporating temporal operators                                                  respect formulas ntl respect ntl  instances paradoxes avoided  proof  three cases proven adjusting tech                                              −  nique presented emerson forthentl  case      symbolic representations  tableaubased construction emerson  immedi  ately carries through encounter generated practice explicit state representations kripke structures                                                        rarely used reasoning systems  state successors different dimensions case ntl                         η                              cause state explosion problem given  includes symbol ∅wehavetoaddclausescorre                                              sponding obl perm construction clo boolean variables typically states       ϕ            ϕ     α             α         instead practical reasoning tools provide succinct symbolic  sure cl  formula η∅  respectively η isin   ϕ         α              α              ϕ    representation languages deﬁning kripke structures  cl   η respectively η∅  cl                                                        present language deﬁning models intro  case ntl wehavetocloseoffclϕ                                                        duce associated symbolic language deﬁning normative  implications axioms obl perm                                                               systems                        going ntl  impose structure  Ση interpretations example add unions symbolic language models present sim  intersections normative systems requiring Ση ple reactive modules language srml “stripped                                                   clude symbols η  η  η  η includes η η  down” version alur henzinger’s reactive modules                                                    ijcai                                                                                                                                    language  rml alur henzinger whichwas   each rule enabled obtained executing  introduced hoek et al  srml represents core collection rules  rml “syntactic sugar” removed simplify  presentation semantics basic idea present  kripke structure means number symbolically symbolic language normative systems  represented agents choices available agent introduce srml norm language snl representing  deﬁned number rules deﬁning actions normative systems corresponds srml language  available agent state transition s models general form snl normative  corresponds tuple actions each agent deﬁnition  example agent deﬁnition srml                                                                     normativesystem  id  agents referred “modules” srml                       χ                                                                                       disables                                                                                 ···                module toggle controls                                                                         χ disables                     init                                                                 mk                                                                               id ∈ Ση normative                         ⊥                                                     names used refer normative systems formulae                  update                                                       ntl body normative deﬁned set                      ⊥                                                       constraint rules constraint rule                   ¬x     module named toggle controls single boolean vari                                                                       χ disables     able choices available agent deﬁned                                 init update  rulestheinit  rules deﬁne  consists condition χ propositional logic  choices available agent respect initialisation formula variables set rule  variables update rules deﬁne agent’s labels k require  ∈k χi  choices subsequently example init satisﬁed particular state srml rule label  rules update rules init rules deﬁne  appears rhs constraint rule illegal  choices initialisation variable assign value state according normative systemansnl   value ⊥ rules ﬁre initially interpretation simply set snl normative systems  conditions  satisﬁed fact each distinct  available rules actually ﬁre corresponding given snl normative systems η ηforsomesrml  “choice made” agent decision round ρwesayη liberal η ρ  effect ﬁring rule execute assignment state state ∈ sρ rule legal according η  ments rhs rule modify agent’s legal according ηandtheyareequivalent  trolled variables “prime” notation variables state ∈ sρ set rules legal according η η      means “the value afterwards” rules identiﬁed  labels i labels form original  rml language fact play semantics theorem  problem testing snl normative                                                              η                                        η  srml – used identify rules normative systems  liberal snl normative   shall assume distinguished label “ ” pspacecomplete problem testing equivalence  rules used identify rules systems  illegal normative respect                                                        proof  proof checking equivalence lib  update  rules ﬁrst rule says value                                                         erality case similar membership pspace consider  corresponding action assign value ⊥                                                        complement problem guess state check ∈ sρ  second rule says value ⊥ sub                                                        reachability states rml pspace alur hen  sequently assigned value  sum module non                                                        zinger  check rule legal according  deterministically chooses value initially                                                        η legal according η vice versa  subsequent rounds toggles value example                                                        complement problem npspace problem  init rules nondeterministic update rules                                                        pspaceforpspacehardness reduce problem  deterministic srml ρ set mod                                                        propositional invariant checking srml modules alur  ules controlled variables modules mutually                                                        henzinger  given srml ρ propositional  disjoint                                                       formula ϕ deﬁne normative systems η η follows    kripke structure kρ  sρ  rρ vρ corresponding                                ρ                        does occur ρ  srml ρ given follows state set sρ val  uation function vρ corresponds states valuations vari                            ρ                           normativesystem   η       normativesystem   η  ables reached  initial states sρ ¬ϕ                     ⊥            states generated init rules transition  disables                   disables                         ∈  relation rρ deﬁned rρ iff exists tuple according η  enabled η equiva  update  rules each module lent η iff ϕ holds reachable states                                                            precise rules guarded commands                                                    ijcai                                                      model checking                                                                                                      tx     tx                txk                                                                                                   sk  model checking important computational problem                                                                                     modal temporal logic clarke et al        sider versions model checking problem ntl                                                              fx        fx                fxk  depending model presented explicitly           symbolically each cases fur  ther possibilities depending given     figure  reduction theorem   terpretation normative systems named formulae  given interpretation normative sys  tems named formula ntl model checking essen symbolic model checking noted explicit  tially amounts conventional veriﬁcation problem show state model checking problems limited inter  ing given interpretation model asso est representations exponentially large  ciated normative systems certain properties number propositional variables consider  uninterpreted model checking problem corresponds srml model checking problem ntlagainwehavetwo  synthesis normative systems ask exist versions depending given interpreta  normative systems desired properties tion                                                        theorem   interpreted srml model checking problem                                                        ntl pspacecomplete  explicit state model checking interpreted explicit  state model checking problem ntl follows   proof  pspacehardness reduction prob                                                                                                                                                             lem propositional invariant veriﬁcation srml alur      given kripke structure  s  v interpreta henzinger  given propositional formula ϕ      tion Ση → nr formula ϕ ntl case          ρ       η           ϕ                                         srml  leti     ∅  simply check                                                       ϕ                                                          ρ   η∅     membership pspace adapting                                                                                                          ctl model checking problem pcomplete schnoebe ctl symbolic model checking algorithm cheng    len  standard dynamic programming algorithm                                                        theorem   uninterpreted srml model checking prob  ctl model checking easily adapted interpreted ex                                                        lem ntl exptimehard  plicit state ntl model checking worst case  time complexity interesting case proof reduction problem determin  given interpretation uninterpreted explicit state ing given player winning strategy  model checking problem ntl follows         twoplayer game peekg stockmeyer chandra                                                                                                ϕ      given kripke structure  s  v formula  instance peekg quad                                                                           ϕ ntl does exist interpretation Ση → disjoint ﬁnite sets boolean variables      nr ki ϕ                            – variables control agent                                                         control agent  ⊆ ∪x variables  theorem  uninterpreted explicit state model checking true initial state game ϕ propositional  problem ntl npcomplete                       formula ∪ representing winning condition                                                        agents try make ϕ true taking turns  proof  membership np simply guess interpre alter value variables deci  tation verify ki ϕ interpretations sion problem determine agent  winning  polynomial size kripke structure formula strategy given game idea proof deﬁne  guessing nondeterministic polynomial time srml runs correspond  checking interpreted explicit state model checking plays given game instance deﬁne  problem problem npfornphardness ntl formula model checked names normative  reduce satgivensat instance ϕ variables xxk η transitions legal according η corre  each variable xi create variables txi xiand spond winning strategy player  construction  deﬁne kripke structure states illustrated srml follows exptimecompleteness  figure  state initial state state sk ﬁnal proof atl model checking hoek et al             ∗  state let ϕ denote ntl formula obtained ϕ difference player ’s update rules given labels  systematically replacing variable xi pη♦txi disabled formula model check  deﬁne formula model checked             deﬁnes three properties agent ’s turn accord                                                        ing η possible moves legal iiallof            ∗                                                  agent ’s moves legal according η agent     ϕ ∧       pη♦tx  ∨  ∧        ≤i≤k                                     win iii legal paths according         pη♦tx  →¬pη♦f pη♦f  →¬pη♦tx      ≤i≤k                                      η represent wins agent                   formula satisﬁed structure interpreta                                                                                                tion iff ϕ satisﬁable                               fact result alur henzinger  stated                                                        rml proof makes use features srml                                                    ijcai                                                    
