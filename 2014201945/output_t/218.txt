   automated      composition      web   services     planning     knowledge      level                             pistore                 marconi    bertoli  traverso                      university trento                              itcirst                       sommarive                              sommarive                         povo  tn italy                       povo  tn italy                      pistoreditunitnit                  marconi bertoli traversoitcit                        abstract                            recent works address problem practicality                                                        proposed solutions web service composition      paper address problem auto instance traverso pistore  pistore et al       mated composition web services planning  propose framework web services modeled      “knowledge level” models start stateful nondeterministic partially observable behaviors      scriptions web services standard process mod planning techniques based symbolic model checking      eling execution languages like bpelws  used address scalability problem      automatically translate planning  techniques work unrealistic assumption      main models interactions services  web services exchange small number data      knowledge level allows avoid   values instance experimental results reported      explosion search space usu traverso pistore  pistore et al  show rea      ally large possibly inﬁnite ranges data val sonable performances obtained web services      ues exchanged services   variables contain values amounts say      scale applicability stateoftheart tech amazoncom sell just books      niques automated composition web ser    luckily stated pistore et al       vices present theoretical framework im  composition solution depend actual data      plement provide experimental evaluation exchanged web services way op      shows practical advantage approach erations perform buy book      wrt techniques based knowledge pend precise book wants buy ﬂow      level representation                             operations interactions depends instead                                                        desired book available cost af                                                        fordable relevant issues interacting    introduction                                       amazoncom   knows book  research planning focusing prob available knows value price  lem automated composition web services given set hope apply planning techniques  services published web given goal knowledge level style proposed petrick  generate composition available services satis bacchus  used mcilraith son   ﬁes goal narayanan mcilraith  martinez lesperance  make pos  spite fact approaches proposed sible model features services  far mcilraith son  wu et al  relevant compose allow efﬁcient au  sheshagiri et al  traverso pistore  solv tomated composition  ing problem practice scaling realistic unfortunately applying knowledgelevel planning solve  scriptions web services far trivial automated composition problem presents major difﬁ  widely recognized web services modeled culty petrick bacchus  planning  nondeterministic partially observable behaviors koehler domain knowledge level deﬁned hand  srivastava  hull et al  berardi et al  impractical web service automated composition tasks  mcilraith fadel  traverso pistore  mar knowledge level domain extracted automatically  tinez lesperance  planning algorithms description services published  work incomplete information actions standard languages like bpelws andrews et al   uncertain effects application domains problem devise proper knowledge level  web services simply modeled atomic compo model suited automated composition task  nents stateful processes interactions intrin obtained automatically published  sically asynchronous fu et al  foster et al  descriptions web services  pistore et al                                   paper propose novel approach problem                              inforequestitem      shipper start request transporting product                                  infosize                                 requestitem          given size given location possi                                offercostdelay producer                         purchase                       ble case requester notiﬁed protocol             requestitemloc   notavail             offercostdelay ship acknack            terminates failure cost delivery time       user    notavail                                computed sent requester ship               acknack   ps requestsizeloc                                offercostdelay       waits acceptance refusal offer                                  notavail shipper     invoker case delivery contract                                  acknack              deﬁned protocol terminates success                                                        terminates failure case similar proto          figure  purchase  ship example        cols deﬁned producer user messages                                                        exchanged involved services described fig                                                        ure   automated composition based planning                                                          ps goal sell homedelivered furniture  knowledge level achieve following steps                                                        reach situation user conﬁrmed      formally deﬁne knowledge level model web ser der service conﬁrmed corresponding sub      vices obtained automatically speciﬁ orders producer shipper interacting shipper      cations standard languages modeling imple producer user according protocols typical      menting services show bpelws pro interaction follows      cesses automatically translated knowl                                                           user asks ps article ¡  wants      edge level models                                    transported location ¢       show automated composition problem      described planning problem knowledge  ps asks producer size cost      level models available services com time does produce article ¡       position goal generate planning problem  ps asks shipper price time needed          solution plan encodes desired composition      transport object size ¢            apply planning techniques described pistore  ps sends user offer takes account      et al  knowledge level planning problem overall cost plus added cost ps time      obtain previous steps key advan achieve goal      tage wrt pistore et al       deal possible values variables  user sends conﬁrmation order dis      exchanged services                             patched ps shipper producer      implement proposed framework provide normal case interactions      preliminary experimental evaluation clearly shows considered cases producer andor      beneﬁts approach                      delivery services able satisfy request                                                        user refuses ﬁnal offer  paper structured follows ﬁrst sim  ple example composition bpelws processes  automated composition web services mean  use paper section  brieﬂy generation new composite service ps  recall framework planning asynchronous domains case interacts set existing component services  ﬁrst introduced pistore et al  section shipper producer user case order satisfy   section  knowledge level represen given composition goal sell homedelivered furniture  tation web services resulting planning framework assume interaction protocols component  knowledge level ﬁnally experimental services composite service described  evaluation section  conclusions related work bpelws processes figure  graphical representa                                                        tion shipper bpelws process notice ex    composition    bpel  processes                  isting services described abstract bpelws processes                                                        providing essentially communication protocol syn  reference example purchase ship ps                                                        thesized service executable bpelws process exporting  example introduced pistore et al  traverso                                                        details directly deployed run bpelws                  pistore                                     description speciﬁes types internal variables ser  example  ps  example consists providing furni vice input output capabilities behavior  ture purchase  ship service combining independent process described using input receive  existing services furniture producer producer invoke reply activities combined standard  livery service shipper way user described structs sequences loops parallel executions condi  service directly ask composite service ps tional choices nondeterministic choices  purchase given item deliver given place sim bpelws process automatically extract  plicity assume shipment origin ﬁxed leave formal model interactions service cover  implicit                                         ing static aspects communication chan    interactions existing services follow nels behavioral aspects deﬁned term transi  speciﬁc protocols instance interactions tion steps moment translation restricted                                                      process shipper                                                        type                                                          size location cost delay                                                        input                                                          requestsize location ack nack                                                        output                                                          offerdelay cost avail                                                        func                                                          costofsize location  cost delayofsize location  delay                                                        variable                                                              pc   start getrequest checkavailable end checkavailable sequence sequence                                                           prepareoffer sendoffer waitanswer endwaitanswer preparenotavail                                                               sendnotavail succ fail ¡                                                           customer size size customer loc location                                                          offer delay delay offer cost cost                                                        init                                                          pc  start                                                        trans                                                              pc  start tau ¢ pc  getrequest                                                              pc  getrequest input requestcustomer size customer loc ¢ pc  checkavailable                                                              pc  checkavailable tau ¢ pc  sequence                                                              pc  checkavailable tau ¢ pc  sequence                                                              pc  sequence tau ¢ pc  prepareoffer                                                              pc  prepareoffer tau ¢ pc  sendoffer                                                                         offer costcostofcustomer sizecustomer loc                                                                         offer delaydelayofcustomer sizecustomer loc                                                              pc  sendoffer output offeroffer cost offer delay ¢ pc  waitanswer                                                              pc  waitanswer input nack ¢ pc  fail                                                              pc  waitanswer input ack ¢ pc                                                               pc  tau ¢ pc  endwaitanswer                                                              pc  endwaitanswer tau ¢ pc  endcheckavailable                                                              pc  endcheckavailable tau ¢ pc  succ                                                              pc  sequence tau ¢ pc  preparenotavail                                                              pc  preparenotavail tau ¢ pc  sendnotavail                                                              pc  sendnotavail output avail ¢ pc fail         figure  shipper bpelws process                                                                figure  formal model shipper  subset bpelws processes support bpelws ba  sic structured activities like invoke reply receive  sequence switch  flow  links      planning  framework     service  pick support assignments  limited      composition  form correlation   steps dealing work pistore et al  presents formal frame  scopes fault event compensation    work automated composition web services  handlers                                             based planning techniques component services deﬁne     lack  space   omit  formal  deﬁni   planning domain composition requirements formal  tion  translation details    ized planning goal planning algorithms used  httpastroprojectorg        illustrate generate composite service nature web  case shipper process                   services resulting planning domain nondeterministic  example  figure  shows formal model shipper partially observable framework pistore et al  automatically extracted bpelws process fig  differs planning frameworks  ure  shipper process characterized set ab sumes asynchronous messagebased interaction  stract types used interactions size cost domain encoding component services plan  set inputs outputs request offer respec encoding composite service precisely plan  tively set typed functions used manipulate ning domain modeled state transition sts  internal variables function costof used possible states subset  obtain cost particular shipping request variables initial evolve new states result  used store information state process performing actions particular input actions rep  figure  variables abstract types customer size resent messages sent component services output  store values used communications additional actions messages received component services  variable pc implements “program counter” holds private actions actions composite service  current execution step service model describes form internally interacting component ser                                                              evolution process through set possible transi vices  special action £ used model internal  tions each corresponding “step” bpelws pro evolutions component services visible  cess each transition deﬁnes applicability condition ﬁr service user finally labeling function associates    ing action effect deﬁned list assignment each state set properties ¤¦¥¨§ © holding state    variables possible actions inputs outputs spe   cial action tau used model internal evolutions private actions used model operations  process assignments decision making computing total cost user costs received                                                        producer shipper private actions speciﬁc                        prepareoffer  transition state           inter knowledgelevel approach presented reason  nal functions costof delayof used compute appear pistore et al  extension  shipping price delivery time                    theory pistore et al  private actions straightforward                                                                                                                               ¡ ea¤ ¡r¤lecn   ¡      ¡ev¤ ¡r¤lecno                                                                                                            deﬁnition  state transition sts                                                                                  ¡£¢¥¤¦¢¨§©¤   ¤ ¤¤¦¤¦ ecn ¢  state transition tuple                                                                                         pistore et al  composition problem                   ¢                                                                                             ﬁnite set states                     main   composition goal deﬁned problem                                                                                                                                                                                                                     yi        ¢§¢ set initial states             ﬁnding deadlockfree sts      satisﬁes                                                             planning techniques based planning model check            ﬁnite set input actions              ing framework used solve problem exper               ﬁnite set output actions             imental results show effectiveness approach                                                            approach pistore et al  requires       ﬁnite set private actions                                                            ﬁnite set data values data types ﬁnite                                      £¢          ¢  ¥    transition relation number articles locations costs   deﬁned             ¢ labeling function       ps  domain assumption guarantees formal                                                        model bpelws process figure     composition problem composite service deﬁned                                                        mapped ﬁnitestate sts number    “controller”   described sts interacts                                                        data values impact dramatically size generated    domain    orchestrating component services                                                        sts small sets values need used allow  invoking operations handling results                                                        effective plan generation instance experiments    formal deﬁnition behavior sts                                                          pistore et al  assume values each data    controlled                                                           type following show adapt framework      deﬁnition  controlled                       pistore et al  knowledgelevel planning approach                      ¡¢¥¤¢¨§¤ ¤ ¤¤¦¤¦         let                                               order remove restriction allow automated      ¡£¢a¤¦¢§ ¤b ¤ ¤¤c¤¦dc                             state transition sys  composition realistic inﬁnite number data                 d©  fg      ¢                                                              i      tems               sts          values                                                         describing behaviors controlled        deﬁned                                            service composition   knowledgelevel           j¡¢ ¢¥¤¢¨§ k¢¨§¤ ¤ ¤¤¦ ¤                                                                                                                   planning                                                              key aspect extending approach pistore et al          ¡  ¤leb¤ £m¤a ean ¤ec  £  ¡ ¤ £m¤ean                                                                                                                                                                                                                                                          knowledge level deﬁnition appropri          ¡  ea¤leb¤ £m¤a eca¤eano¦    ¡e¤ £m¤eano                                                                                                  ate model providing knowledge level description                   ¡  ea¤leb¤ ¡p¤c  ecn ¤lecno¦  £  ¡q  £                                                                              component services section formally deﬁne          ¡e ¤ ¡p¤ecn   ¡ e¤ ¡r¤ecno                                                                                     model terms suitable knowledge base                                                        zu    asynchronous nature web service interac   show construct sts corresponding  tions order guarantee correct execution planning domain composing knowledge bases  composite service need rule explicitly cases component services  sender ready send message receiver deﬁnition  knowledge base      able accept according pistore et al  knowledge base set propositions following                               ¡      state able accept message exists suc form                                                                                                            cessor   reachable through possibly                                                                                                                                             variable abstract type        sequence £ transitions input transition labeled                                                                                                                                                                                                 ©                          en      ¡ performed  intuition captured          enumerative variable                                                      following deﬁnition denote £ closure possible values                                                                                                                                                                        £  set states reachable through chain transitions                                                               bac variables  concerns private actions correspond type          internal operations composite service simply                                                                                                                                                      ¤¦a©f¤hgaghgj¤avi                                                               edywatf¤aghgagh¤¦ai© vari  sume executable current state                                                                 ables abstract type function compati      deﬁnition  deadlockfree controller                                                                                                                                                                          ¤hghgagh¤a                                                                ble types ¤¦a              s¡¢¥¤¢§t¤   ¤ ¤¤¦¤¦                                                               let                            sts                                                                                  ©r                                  ©                                                                 mean know proposition true           §      ¡£¢a¤¦¢ ¤b ¤ ¤¤c¤¦dc                                                                                                                                                                        controller   said                                                                                                                                                                         wr know value variable                                         ea¤ec ¢u¢  deadlock free states                                                                   deﬁnition knowledge base simple                                             reachable initial states satisfy fol  lowing conditions                                    experiments show powerful model web                                                            service composition problems                                                                                                 zu            ¡ev¤ ¡r¤lecn£  ¡                     ecn                                                                                     say knowledge base consistent does                                                            £                e     ¡e ¤ ¡r¤le                                                                                                                         closure                     contain contradictory knowledge propositions                                                                                                     zu            ¢                                                                             k©no  lq m©n                                                               wkc              say                      ¡ ea¤ ¡r¤lecn   ¡                  en                                                                                  closed deduction contains propositions                                                                                               zu              £                     ¡ enw¤ ¡p¤ecn no  en ¢                                                      closure                   deduced propositions  instance    zu               z                                                                                                           ac          containing   wr        contain        restrict kb    knowledge  kpc                                                            getrequest   associated transition condi    knowledge base component service ob    tion speciﬁc case kb remains unchanged    tained variables functions types service   update kb knowledge carried  example  example knowledge base shipper    input action variables used action parame  process figure                                    ters consists removing kb knowl              ¡                                                     edge customer size customer  loc                            £             ¢ £            ¢   kb kpc  waitanswer ¢ customer size customer loc adding new knowledge kcustomer size      koffer cost  costofcustomer size customer loc ¢  kcustomer  loc   closing deduction           koffer delay  delayofcustomer size customer loc ¢ obtain          £             £           ¤¦¥           offer cost offer delay                                  ¡                                                                                          £                                                                    kb’   kpc  getrequest ¢                                                                           ¢ £             ¢  £            ¢      following transition exe      £ customer size customer loc                            zu                                                                                                      ¤  cuted knowledge base execution affects         kcustomer size  ¢ kcustomer loc    zu                                                             ﬁnally update knowledge base effects    model transition §  presented fig                                                                removing kb’ knowledge                     ©¨¤ ¡r¤   ¨     cf ghgag jip  ure  triple                                                                                       variables modiﬁed assignments adding new                                           fhgaghg im  conditions ¡ ﬁring action             knowledge case kpc  checkavailable  effects start deﬁning auxiliary restriction closing deduction obtain          update operations                                                  ¡                                       zu                                                                                                  ¢        restriction knowledge base condition        kb’’   kpc  checkavailable £                                                                                                      ¢ £             ¢  £            ¢                                                                      £ customer size customer loc                     ¥e§ ¥ §j ¤¨       ¨  denoted              performed adding      zu                                                                                                      ¤                                                                  kcustomer size  ¢ kcustomer loc        knowledge obtained ¨ closing  duction instance                          ¡                                 deﬁnition  kl applicability execution                      restrict kx  ¤                                                                          § ©¨¤ ¡r¤                  ¡                     ¡                                        transition         corresponding action                                                                       zu                                         kx  ky  kx  ¤¦¥                                                                                    § ¤ ¡                                                             applicable   written                                                                                                                  update knowledge base  effect                                                                                                                                                              ¡cb ¤hgaghgj¤  ¡cb wa ¤aghgagj¤¦a                                                                                                                                                                            z                   zu                 © ¡§ © ¤       noted             consists performing fol                                                                                                                                                                                                                              b¤hgaghga¤                                                                    input                                                                                                zu        lowing steps each assignment    remove                                                                e§ ¥ §j ¤¨                                                             ¥               consistent      knowledge modiﬁed variable add knowl                                                                                                                                                                                                                                                                      cb §c  ¤aghghgh¤¦  ¡c §c wa ¤hghgagj¤¦a  §      edge derived assignment close      ¡                                                                                                                zu                                                                          e§ ¥ §j ¤¨       deduction instance                                  output ¥             consistent                                                                                                   ¡                                                                         update kx  ¤                                                                    cb ¡c £  ¥e§ ¥ §j ¤¨                                                                 ¡                      consistent             ¡               update kx  kz  kz  ¤              ¡                                                                        zu              kz  kx  ¤¥                                                                          §   ¤ ¡cl                                                             ¦     denote                                                             zu          zu                      zu                                                                no §  ¤ ¡                   §       deﬁnitions applicability execution                execution                                                                   ¡                                                               depend service transition § action  deﬁned follows                                                                                                  zu                                                                      ¡  performed peer interacting service                                                                  ©b £   §  ©¨¤ £m¤  no © ¡§ t nw¤                                                                  ¡                                                                                                       zu           zu                      §                   ¡m      ﬁring action ¡ peer action  correspond                                                                          n£ ¥e§ ¥ ¦§j ¤¨                                                                                      action instantiated                                                                                                                                                                                                                 c ¤hgaghgj¤          service variables variables peer ¡                                                                                                          ©¨¤ba©f¤hghgagh¤avimb¤                                                                          §                                                                                                zu      consider instance following example action                                                                      © ¡§ © nw¤atf ¥fhghgagavir  ri                                                                      n£                                                                                                           zu      requests  performed peer corresponds                                                                      ¥e§ ¥ ¦§j ¤¨       shipper requestcustomer size  customer  loc                                                                                                                                                                 ¡  §c ¤hgaghgj¤pi §      example  let’s consider input transition ship                                                                                                                                                                                                          ¨¤ §c ¤aghgagh¤¦a j¤                                                                       §                                                                                                zu                                                                                                                                                                 © ¡§ © nw¤   hghgag                pc  getrequest                                          n£                                                                                                           zu                                                                                                                                                                                         ¥e§ ¥ ¦§j ¤¨   a©fhj¤hghgagh¤  wavim        input requestcustomer size customer loc                                                          pc  checkavailable                             notice execution transition increases knowl                                                                suppose current knowledge base       edge    information effects                     ¡                                          condition transition                                     £      £                                            ¤         kb   kpc  getrequest ¢                                                         executed means condition known hold  ssize llocation  additional variables  planning domain knowledge level constructed  action requests corresponding invoking ship knowledgelevel models each component service  action using parameters applicable kb knowledgelevel representation composi  know values condition tion goal deﬁnes variables  transition obviously consistent kb         functions composite service like instance cost    knowledge base obtained executing kb transition offer user special function adds mark  action requests deﬁned follows     sum costs shipper producer
