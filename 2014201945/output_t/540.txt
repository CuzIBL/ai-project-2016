                             heuristics hard asp programs             ∗                          wolfgang faber†     nicola leone    francesco ricca               department mathematics university calabria   rende cs italy                                  email faberleonericcamatunicalit                          abstract                            optimization work asp systems fo                                                        cused efﬁcient evaluation nondisjunctive programs      deﬁne new heuristic asp imple                             ds                         power limited npconp opti      ment disjunctive asp dlv                                                        mization disjunctive asp programs treated      new heuristic improves evaluation Σp Πp                                                       fewer works janhunen et al  koch et al      hard asp programs maintaining benign                                                         particular aware work concern      behaviour wellassessed heuristic dlv                                                        ing heuristics Σp Πp hard asp programs      np  problems experiment new                                                                                    paper address following questions      heuristic qbfs signiﬁcantly outperforms                        ds                              ◮ heuristics asp systems reﬁned deal      heuristic dlv hard qbf problems                                                        efﬁciently Σp Πp hard asp programs      compare dlv new                                                                               ◮ hard Σp Πp problems asp systems compete      heuristic  three prominent qbf solvers                                 ds                                       ai systems like qbf solvers      results comparison performed                                                          deﬁne new heuristic hds disjunctive asp      stances used qbf competition indicate                                            Σp Πp      asp systems faster qbf systems   dlv aiming improving evaluation          Σp Πp hard problems                         hard asp programs maintaining benign behaviour                                                      heuristic dlv np problems experimen                                                        tally compare hds dlv heuristic hard qbf    introduction                                       instances showing clear beneﬁt experiment  answer set programming asp novel programming   competitiveness asp wrt qbf solvers hard problems  paradigm recently proposed area indicating asp systems competitive qbf                                                                  Σp Πp  nonmonotonic reasoning logic programming idea systems    hard problems  answer set programming represent given computa  tional problem logic program answer sets corre  answer set computation heuristics  spond solutions use answer set solver ﬁnd  solution lifschitz  knowledge represen ﬁrst recall main steps computational process  tation language asp expressive precise math performed asp systems particular dlv  ematical sense general form allowing disjunction used experiments  rule heads nonmonotonic negation rule bodies asp answer set program general contains variables                                              Σp        ﬁrst step computation asp eliminates  represent problem complexity class   Πp                                                    variables following algorithm invoked    brave cautious reasoning respectively eiter  et al  asp strictly powerful sat function modelgeneratori interpretation boolean  based programming allows solve problems begin  translated sat polynomial time     detconsi  high expressive power asp proﬁtably exploited    return false  inconsistency   ai deal problems high complex   atom undeﬁned return isanswerseti  ity instance problems diagnosis planning  select undeﬁned ground atom according heuristic  incomplete knowledge complete complexity     modelgeneratori ∪ return true      Σp    Πp                                                 return modelgeneratori ∪  class    naturally encoded asp baral   leone et al                             end    ∗this work partially supported european commission roughly model generator produces “candidate”  projects ist infomix ist answer sets stability each subsequently ver  wasp fwf austrian science funds projects iﬁed function isanswerseti veriﬁes  pn pn                            given “candidate” minimal model gl    †funded apart austrian academy sciences transformed program outputs model isanswerseti returns true computation stopped  asp vs qbf solvers  false                                      main goal paper improve performance                                                  function detcons computes extension asp systems problems located second level  literals deterministically inferred set polynomial hierarchy wonder  literals inconsistency detcons does Σp Πp hard problems asp systems competitive                                                            detect inconsistency atom selected according ai systems like qbf solvers order                                                 heuristic criterion modelgenerator called ∪   ﬁrst answer question performed com                    ∪       atom plays role branching parison qbf solvers quantor biere  semprop  variable sat solver                             letz  yquafﬂe zhang malik     heuristic hut  proposed faber et al  cur Σp      Πp                                                        set    complete qbf formulas  rently employed dlv based number qbf competition results report number  unsupportedtrue ut atoms called mbts faber et al stances solved show dlv heuristic   atoms true current interpretation  generally outperformed qbf solvers  miss supporting rule trying minimize ut atoms ds  likely arrive supported models                     dlv hds  quantor semprop   yquaffle                                                           robot                  hard asp programs nonhcf programs ben    random                                                    Σp                ree                 eliyahu dechter  – express  complete                                                           kp                  problems brave reasoning supported models otal           answer sets answerset checking computa  tionally expensive conp consume large portion references  resources needed computing answer set                                                        baral  baral knowledge representation reason    propose new heuristic hds tries  addition maximize degree supportedness av ing declarative problem solving cup   erage number supporting rules nonhcf true atoms beneliyahu dechter  beneliyahu  intuitively true atoms supporting rules dechter propositional semantics disjunctive logic  model elimination atom model  programs amai –   violate rules likely ﬁnd biere  biere resolve expand  sat’  subset model reduct pm  disproving eiter et al  eiter gottlob mannila dis  answer set deﬁne hds reﬁnement  junctive datalog acm tods –     heuristic hut hut ⇒ hds faber et al  faber leone pfeifer ex  way hds keeps behaviour wellassessed hut perimenting heuristics answer set programming  np problems section  sensibly ijcai  pp –                                      Σp  improves ut hard qbf problems   complete gent walsh  gent walsh qsat                                                           phase transition aaai     comparing    hut  vs hds experiments              janhunen et al  janhunen niemela¨ simons  generated randomly data set  qbf formulas fol jh partiality disjunctions stable model  lowing gent walsh  used asp encoding semantics kr   pp –  described leone et al                     koch et al  koch leone pfeifer en    experiments performed pentiumiv  mhz     hancing disjunctive logic programming systems sat  machine mb ram running suse linux  ev   checkers artiﬁcial intelligence ––   ery instance allowed maximum running time  leone et al  leone rosati scarcello  seconds hours results experiments dis enhancing answer set planning ijcai workshop  played following graphs line stops planning uncertainty incomplete informa  instance solved time limit tion pp –                                                         leone et al  leone pfeifer faber eiter           ut                                                          ut           ds                        hds                                                   gottlob perri scarcello dlv                                                           knowledge representation reasoning acm tocl                                                              appear                                                    letz  letz lemma model caching                                                           cision procedures quantiﬁed boolean formulas                                                           tableaux  pp – denmark    average  execution time                         maximum  execution time  lifschitz  lifschitz answer set planning                                                     iclp’ pp –                                      number propositional variables number propositional variables zhang malik  zhang malik                                                           symmetric treatment satisfaction conﬂicts    clear new heuristic outperforms                                   ds                      quantiﬁed boolean formula evaluation cp  pp  heuristic experiments advancing “maximum          ut                                               – ny usa   solvablesize”  size  reducing average  execution times smaller instances
