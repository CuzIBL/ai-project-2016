                              sampling model counting            carla gomes†       joerg hoffmann‡        ashish sabharwal†        bart selman†            †department science cornell university ithaca ny  usa∗                              gomessabharselmancscornelledu                   ‡university innsbruck technikerstraße  innsbruck austria                                       joerghoffmannderiorg                        abstract                          sample uniformly set solutions use                                                        samples obtain highly accurate count total num      introduce new technique counting models  ber solutions explain strategy      boolean satisﬁability problems approach   approach exploited work approxcount wei      incorporates information obtained sampling   selman  model sampling procedure called      solution space unlike previous approaches samplesat wei et al  wasusedtoprovidesamplesof      method does require uniform nearuniform   satisfying assignments underlying sat instance      samples instead converts local search sampling setting counting approximate — guaran      guarantees good bounds   tees accuracy — samplesat does general      model count guarantees formal sample purely uniformly uses markov chain monte      analysis provide experimental results showing carlo mcmc methods  madras  metropolis et al      effectiveness approach                 kirkpatrick et al  exponential                                                        impractical mixing times fact main draw    introduction                                       jerrum et al’s counting strategy work                                                        needs nearuniform sampling hard  boolean satisﬁability sat solvers successfully problem biased sampling lead ar  applied range domains prominently ai plan bitrarily bad overestimates true count  ning hardware software veriﬁcation appli key new insight paper somewhat sur  cations basic task decide sat encoding prisingly using sampling modiﬁed strategy  underlying problem domain satisﬁable given good lowerbounds total model count  tremendous progress state art sat solvers high conﬁdence guarantees requirement  applications researchers interested pur quality sampling provide formal anal  suing questions concerning sat encodings ysis approach experimental results demonstrating  extend reach sat technology example practical effectiveness  randomly sample set satisfying assignments strategy samplecount provides provably proba  count total number satisfying assignments bilistic guaranteed lowerbounds model counts  formal complexity theoretic sense boolean formulas using solution sampling interestingly  practice computational questions harder correctness obtained bounds holds sam  “just” determining satisﬁability versus unsatisﬁability pling method used arbitrarily bad quality  formula formally counting number solutions bounds bound farther away  pcomplete problem making complete complexity true count lower side strategy  class hard polynomialtime hierarchy ph mains sound heuristicbased practical solution              toda    positive side efﬁcient methods sampling method used instead true sampler  sampling counting open wide range new                                                          samplecount  viewed way extend  applications involving various forms probabilistic                                                        ing reach exact model counting procedures  reasoning darwiche  roth  littman et al                                                         relsat  bayardo jr pehoushek  cachet  park  sang et al                                                         sang et al  speciﬁcally samplecount ﬁrst    uniform sampling model counting closely related                                                        uses sampling select set variables formula  tasks particular jerrum valiant vazirani                                                         ﬁx sufﬁcient number variables set  showed combinatorial problems      ∗research supported intelligent information systems insti conversely design uniform solution sampler  tute iisi cornell university afosr grant ing solution counter  darpa real grant fa                 exact counters provide lowerbound true    class np ﬁrst inﬁnite sequence levels ph model count aborted terminating                                                    ijcai                                                    remaining formula counted using exact model rate counts expectation key strength samplecount  counter exact residual model count num works matter biased model sampling  ber ﬁxed variables obtain lowerbound circumventing main drawback approach  total number models experiments show instead using sampler select variable setting  bounds surprisingly close optimal compute multiplier use sampler heuristic  problem classes method scales determine order set variables particu  mention just example consider circuit synthesis lar use sampler select variable positive  mula literature called bitadd cnf negative setting occurs balanced set sam  mula solved quite easily local search style sat ples ties broken randomly note variable  solver walksat mcallester et al highest possible multiplier closest   reach recent dpll style solvers samplecount setting discussed informally setting  minisat e´en s¨orensson  takes hours balanced variable divide solution space  ﬁnd single solution consequently completely evenly compared setting variables  reach exact model counters based dpll origi course noted sampler heavily biased  nal formula nearly  variables samplecount sets really rely observed ratio   variables  minutes positive negative settings variable interestingly  maining formula solved cachet minutes simply set variable randomly selected truth value  overall lowerbound model count —  use multiplier  strategy — ex  conﬁdence — obtained astonishing  models pectation — true model count simple example shows  formula remarkable number truth consider formula assume oc  signments exact counters ﬁnd models curs balanced sample let model count   hours run time                            f− select probability                                                         set true obtain total model count  ×    main idea                                        high probability  set vari  provide reader intuitive understanding able false obtaining total count ×m low  approach ﬁrst highlevel description sam overall expected average count exactly  pling used count discuss technically expected total model count correct  work practice                     cause linearity expectation    sampling counting jerrum et al  signiﬁcant variance speciﬁc  sider boolean formula satisfying assignments counts especially setting series variables  assuming sample satisfying assignments uni row obtaining sequence multipliers   formly random measure fraction models simpliﬁed formula counted exactly fact                          set true  taking ratio num practice total counts distributions different runs  ber assignments sample set true heavytailed kilby et al  mitigate  sample size fraction converge increasing ﬂuctuations runs use samples select  sample size true fraction models set posi best variables set clearly good heuristic  tively γ  mm assume γ   follows set “balanced” variables ﬁrst use samplesat  immediately  γm γ “mul guidance ﬁnding balanced variables ran  tiplier”   reduced problem counting dom value setting selected variable leads expected  models counting models simpler formula model count equal actual model count  recursively repeat process leading se formula show property exploited  ries multipliers variables assigned ing markov’s inequality obtain lowerbounds total  count number models remaining formulas model count predeﬁned conﬁdence guarantees  exact counter robustness usually sets se guarantees arbitrarily strong repeated itera  lected variable truth value occurs tions process  sample avoids problem having γ  boost effectiveness approach using  inﬁnite multiplier note frequently variable “equivalence” single variable appears suf  occurring truth value gives multiplier  ﬁciently balanced sampled solutions instance    approxcount    wei   selman      variables occur polarity  approxcount strategy practical  positive negative nearly half sampled solutions  using sat solution sampling method called samplesat different polarity remaining randomly  wei et al  unfortunately guarantees replace simplify turns  uniformity samples samplesatal   positive effect setting single variable  counts obtained surprisingly close advantageous single variable balanced  true model counts observe cases experimental results demonstrate practice  method signiﬁcantly overestimates underestimates samplecount provides surprisingly good lowerbounds —  experimental results conﬁrm behavior       high conﬁdence minutes — model    samplecount approach presented uses counts problems completely reach  probabilistic modiﬁcation strategy obtain true accu current exact counting methods                                                    ijcai                                                      preliminaries                                        paramsintegerstz real α                                                            input acnfformulaf  variables  let set propositional boolean variables output  lowerbound model count  value set  think  true  false begin  let propositional formula solution model mincount ←  referred satisfying assignment fisa iteration ←                                                                  ←   assignment variables evaluates   ←   propositional satisﬁability sat decision problem                                                                    feasible exactmodelcount  determining models canon       ←    ical npcomplete problem practice interested     ← samplesolutionsgz  ﬁnding model exists propositional model       ← getmostbalancedvars  counting problem computing number models         vw ← getmostbalancedvarpairs  canonical pcomplete problem      ← random value chosen uniformly   oretically believed signiﬁcantly harder sat       balanceu ≥ balancevw  turns practice                                 set    correctness guarantee algorithm relies ba                                                                               replace  sic concepts probability theory let             replace ¬v  discrete random variables expected value denoted                                                             simplifyg     equals ∑x xpr theconditional expectation                 −α                                                            count ← · exactmodelcountg  given  denoted  function deﬁned                             ∑                                      count mincount  follows        xpr     need             mincount ← count  following results proof stan                                                             return lowerbound mincount  dard texts probability theory                       end  proposition  law total expectation dis        algorithm  samplecount  crete random variables exeex                                                                                proposition  markov’s inequality random vari selects variable pair different occur  able prx  ex                          rences balanced possible “same occurrence”                                                        solution means appear positively                                                        appear negatively balanced    model counting using solution sampling             vw samplecount uniformly randomly sets toor  section describes samplebased model counting al ing uniformly randomly replaces                                                                  ¬  gorithm samplecount algorithm  algorithm forcing literal equivalence sim  three parameters number iterations num pliﬁed unit propagating variable restriction tested  ber samples each variable setting α “slack” possibility exact counting necessary  factor positive real number input formula sampling simpliﬁcation process repeated  variables output lowerbound model comes range exact counting subroutine                                                        simpliﬁcation steps number remaining models  count samplecount randomized algorithm                              s−α  high probability success shortly formalize computed multiplied   ﬁnal count  success probability quantitatively theorem       iteration iterations minimum counts    samplecount  formally stated algorithm  reported lowerbound  scribed samplecount performs iterations   setting variables equivalences original formula  ﬁnally reports minimum counts obtained reduced size doing repeatedly eventually  iterations iteration makes copy reach formula counted exactly samplecount  long hard solved provides practically effective way selecting variables  exact model counting subroutine does following set equivalence assert each time looks  calls samplesolutionsgz sample solutions evenly way divide set remaining solutions  sampling subroutine times picking subsets randomly obtain real guar  turn fewer samples set solutions antees section  formula eventually sufﬁ  getmostbalancedvars   selects variable ciently simpliﬁed enable exact count sampling  positive negative occurrences balanced pos used attempt evenly possible division solu  sible close each possible ties bro tion space better works better lowerbound  ken randomly similarly getmostbalancedvarpairs    don’t need guarantees sampling quality                                                        obtain valid nontrivial lowerbound         decided based number remaining variables  correctness analysis samplecount  natural heuristics common strategy run exact  counter predeﬁned time wei selman  analyze samplecount randomized algorithm    samples procedure continue show probability provides incorrect  selecting random variable course quality bound lowerbound input formula decreases exponentially  obtained suffer                                 zero number iterations slack factor α                                                    ijcai                                                    somewhat surprisingly discuss bound implies conditional expectation count given                                                                            s−α            s−α  error probability obtain independent number ecount  se ∑σ yσ  ∑σ eyσ                                                          s−α                  s−α     −s   −α  samples used quality samples  ∑σ pryσ    ∑σ     ∑σ                                                              ∗                                ∗  uniformly distributed solution space solutions ecount  ss −α  applying                              α                     the law total expectation ecounteecount    theorem   parameters   lowerbound     ∗−α     ∗−α  turned samplecount correct probability        −α                                                                                              ∗    −  independent number quality solution finally using markov’s inequality pr count                                                                     ∗  samples                                              ecounts  −α  proves error probability                                                                                   −α             ∗                                          single iteration  fact strictly             ∗                                      −α  proof let     true model count sup     argument beginning proof  pose samplecount  returns incorrect lowerbound overall probability error iterations −αt              s∗                        s∗  mincount    implies count   did use property number quality  iterations show happens single iter samples error bound holds independent  ation probability −α  probabilistic indepen  dence iterations overall error probability end discussion effect number  −αt proving theorem            samples zonsamplecount natural expect    fix iteration samplecount executing samples lead “better” bound cost higher  algorithm variables ﬁxed replaced runtime note does factor formal  variable inner untildo loop repeat result fact key points  edly simpliﬁed number variables reduced paper provide guaranteed bounds making  analysis simpler consider closely related assumptions whatsoever quality sampling  mula ρg variables start iteration process structure formula  ρgg    inner loop instead assumptions reason samples guide  ﬁxing variable   replacing ¬v samplecount better lowerbound worst  simplifying did add additional constraints case highly biased sampler output small set       vorw  ¬v respectively ρg clearly solutions making samples futile  point during execution samplecountthesolu practice gain sampling pro  tions ρg isomorphic solutions geveryso cess totally biased guides balanced  lution uniquely extends solution ρg variables true multipliers close  reduces  solution ρg restricted variables solution probabilistic ﬂuctuations arising randomly ﬁxing se  particular number solutions lected variables weak uniformityrelated  ρg solution ρg sumptions sampler assuming formula  solution                                      mix balanced imbalanced variables higher number    let g denote ﬁnal formula subroutine samples reduce variation lowerbound  exactmodelcountg   applied variable restric ported samplecount runs  tions note random variable value  determined variables restricted random  experimental results  value propagates simplify resid  ual models counted exactly consider variant conducted experiments cluster  ghz intel                        ρ  ρ                     xeon machines gb memory node running linux  deﬁned variables  random formula model counters used samplecount relsat ver  determined random bits used iteration fi sion  counting cachet version  extended  nally variable count iteration random variable port partial counts approxcount version                 s−α                      ρ   value  times model count weare    samplecount  approxcount internally use samplesat  interested behavior count random variable                                                       obtaining solution samples samplecount created    recall solution ρg solution modifying approxcount ignore samplebased mul  solution σ fletyσ indicator random tipliers ﬁx balanced variables random ana  variable  iff σ solution g count  lyze equivalences creating wrapper perform mul   s−α     ∑σ yσ  compute expected value count tiple iterations speciﬁed slack factor α  ing law total expectation ecounteecount  experiments samplecount α    fix each σpryσ    equals probability set αt   giving correctness conﬁdence  −  each variable restrictions inner loop −   theorem  ranged    sistent σ σ  thenu restricted  runtimes samplecount hours  σ  replaced ¬v model counters allowed  hours  uniformly random value used restrictions number samples variable setting typically                                happens probability exactly  each restriction note chosen  results demonstrate samplecount  restrictions set replace different variables quite robust samples course  probabilistically independent respect produce better results samples                                                  −  ing consistent σ consequently pryσ    better quality using “buckets” strategy                                                    ijcai                                                     table  performance samplecount compared exact counters approximate counter guarantees                            samplecount                    exact counters                approxcount                             conﬁdence         relsat             cachet          guarantees     instance true count                            models     time      models     time    models     time     models      time      circuit synth    bitmax ×    ≥ ×     sec   ×    sec   ×   sec   ≈ ×     sec    bitadd   —        ≥ ×   min   —hrs—hrs≈                           ×   min      random   kcnf    wff ×   ≥ ×    min     ×    hrs    ×   min   ≈ ×     sec    wff ×   ≥ ×    min    ≥ ×   hrs   ×   hrs   ≈ ×     sec    wff   —        ≥ ×    min    ≥ ×   hrs ≥ ×    hrs ≈ ×     sec       latin square     lsnorm ×   ≥ ×     min  ≥ ×    hrs ≥ ×     hrs ≈ ×     sec     lsnorm ×   ≥ ×     min  ≥ ×    hrs ≥ ×     hrs ≈ ×     sec    lsnorm ×   ≥ ×     min  ≥ ×    hrs ≥ ×     hrs ≈ ×     sec    lsnorm ×   ≥ ×     min  ≥ ×    hrs ≥ ×     hrs ≈ ×    min    lsnorm   —        ≥ ×     min  ≥ ×    hrs ≥ ×     hrs ≈ ×    min    lsnorm   —        ≥ ×     min  ≥ ×    hrs ≥ ×     hrs ≈ ×    min    lsnorm   —        ≥ ×     min  ≥ ×    hrs ≥ ×     hrs ≈ ×    min    lsnorm   —        ≥ ×     min   —hrs≥             ×     hrs ≈ ×    hrs    lsnorm   —        ≥ ×     min   —hrs≥             ×     hrs ≈ ×   hrs     langford probs    lang ×    ≥ ×      min   ×     min   ×    hrs   ≈ ×    min    lang ×    ≥ ×      min  ≥ ×    hrs ≥ ×     hrs ≈ ×    min    lang ×    ≥ ×      min  ≥ ×    hrs ≥ ×     hrs ≈ ×    min    lang ×   ≥ ×      min  ≥ ×    hrs ≥ ×     hrs ≈ ×    min    lang ×   ≥ ×      min  ≥ ×    hrs ≥ ×     hrs ≈ ×    min    lang ×   ≥ ×     min  ≥ ×    hrs ≥ ×     hrs ≈ ×    min    lang   —        ≥ ×     min  ≥ ×    hrs   —hrs≈             ×    hrs    lang   —        ≥ ×    min  ≥ ×    hrs   —hrs≈             ×     hrs    lang   —        ≥ ×    min  ≥ ×    hrs   —hrs≈             ×     hrs    brieﬂy outline section  hand approxcount approxcount comparison really  signiﬁcantly overestimated number meaningful approxcount does provide correct  solutions  samples allowed ness guarantees example underestimates   samples variable setting runs count  bitadd  overestimates  easy instances circuit synthesis random  increasing trend latin square  mulas used  samples parameters mulas course classes formulas  approxcount  set obtain desired number approxcount appears count quite accurately given  samples reasonable time samplesata good quality samples discuss results  local search “cutoff”   sufﬁcient circuit synthesis formulas ﬁnding minimal size  problems langford instances required circuits given boolean function known  cutoff  obtain samples finally quickly difﬁcult dpll style procedures  samplecount  approxcount  set cachet instance bitmax  easy exact model count  typically   variables remained unset ing procedures samplecount gets good    table  summarizes main results evaluate lowerbound quickly bitadd  hand  approach formulas domains circuit syn recently solved single solution using minisat  thesis random kcnf latin square langford problems  seconds bitadd  certainly far  samplecount scales problem size reach exact counting total solution count  provides good highconﬁdence lowerbounds close formula astonishing samplecount reports lower  true counts cases hour clearly bound  ×  note formula close  performs exact counters time  variables solution set expo   hours providing counts orders magni nentially small fraction total number assignments  tude samplecount report results samplecount sets  variables  min                                                    ijcai                                                    
