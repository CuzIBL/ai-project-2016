                solution   correspondences        answerset     programming∗                              thomas   eiter hans  tompits  stefan  woltran                       institut fur¨ informationssysteme technische universitat¨ wien                               favoritenstraße –   vienna austria                                    eitertompitsstefankrtuwienacat                        abstract                          equivalence inoue sakama  informally                                                        mer notions consider programs equivalent      introduce general framework specifying   ∪ ∪ answer sets      program correspondence answerset se   set rules particular collection rules      mantics framework allows deﬁne different  regarded possible input equivalent      kinds equivalence notions including previously guaranteed compute answer sets note      deﬁned notions like strong uniform equiva    open logic programs bonatti       lence programs extended rules  rules added runtime ﬁt scheme      given context correspondence deter  works considered practi      mined means binary relation particu  cably important setting projected answer sets asp      lar reﬁned equivalence notions based projected answer set program      answer sets deﬁned framework  intersection subset ⊆ letters includes      parts answer set relevance particular removal auxiliary letters computation      study general characterizations inclusion simple example consider programs      equivalence problems introducing novel semanti      cal structures furthermore deal issue   selx ← sx outx      determining counterexamples given corre         outx ∨ outy  ← sx sy         spondence problem analyze computa                                                            selx ← sx skipx      tional complexity correspondence checking                                                                skipx ← selx sy       introduction                                       select means sel element satisfying                                                        answer sets important issue  availability efﬁcient implementations programs equivalent respect “output” predicate  answerset semantics gelfond lifschitz  non sel “inputs” deﬁned rules  monotonic logic programs answerset programming asp predicates set say given facts  recognized fruitful paradigm declarative aspect apart equivalence rela  problem solving approach problem encoded tionships sets answer sets  logic program models called answer sets cor natural example inclusion means  respond solutions problem easily each answer set answer set  extracted availability default nega viewed approximation  sound  tion asp important host solving ai respect cautious reasoning   problems including planning diagnosis information integra motivated observations paper consider  tion inheritance reasoning cf gelfond leone  solution correspondences asp generic level main  overview asp                              contributions brieﬂy summarized follows    support engineering asp solutions important                                                           introduce general framework correspondences  sue determining equivalence different encodings given                                                        answer sets programs  programs end various notions equivalence                                                        augmented rules context possible ex  programs answerset semantics                                                        tensions correspondence determined binary  studied recent past viz strong equivalence lifschitz                                                        relation ρ previous notions equivalence projected  et al  uniform equivalence eiter fink                                                         swer sets particular instances framework  relativized notions thereof woltran  update                                                           provide characterizations inclusion correspon    ∗     work supported austrian science fund dence equivalence programs projected  grant ec projects fet wasp answer sets terms novel semantical structures called  ist infomix ist colognet  spoilers refute property certiﬁcates whichcapture essence equivalence similar semodels answerset semantics programs  uemodels strong uniform equivalence respec regarded ordinarily equivalent iff asp   asq  tively based characterizations present restrictive forms strong equivalence lifschitz  ing correspondence results varying projection sets asp et al  uniform equivalence eiter fink      show spoilers used construct coun recently generalized follows woltran   terexamples inclusion resp equivalence correspon let programs let ⊆  dence consisting suitable interpretation rule strongly resp uniformly equivalent relative iff  set answer set exactly ∪ ∈ pa resp ⊆ asp ∪  asq ∪  ∪                                               strong resp uniform equivalence relative     finally determine computational complexity reduces strong resp uniform equivalence simpliciter  correspondence checking propositional disjunctive pro  ∅ ordinary equivalence results case  grams projected answer sets main result use following notation interpretation                          equivalence checking Π complete general set pairs interpretations write si  ∩   feasible polynomial space compared naive guess ∈ si  ∩i ∩i   ∈   andcheck procedure requires exponential space fur write si instead si  convenient  thermore show restricted settings complexity ⊆ ⊆ pair  interpre                          gradually decreases Π conp                  tations aseinterpretation iff     results presented paper signiﬁcantly advance ⊂  asemodel program iff  current state equivalence testing asp highly    relevant settings practical applications provide novel                                                         ii  ⊂         insight structure equivalent programs                         papers quoted related work ad iii ⊂ implies existence  ⊆                                                                                    dresses semantic complexity characterizations equiva   holds  lence lin  turner  describes implementation pair  total iff   nontotal  methods eiter et al  oikarinen janhunen  set asemodels denoted se ap   recent work pearce valverde  addresses  aseinterpretations resp asemodels  strong equivalence programs disjoint alphabets simply called seinterpretations resp semodels coincid  synonymous structurally deﬁned mappings    ing notions deﬁned turner  write    characterizations present nontrivial                                                                     sep  instead se   shown complexity results necessarily involved  sense “simple” criteria exist counterex proposition  woltran  programs  amples provide basis powerful program optimiza strongly equivalent relative iff se ap   se aq  tion debugging tools asp lacking date                                                        example   consider following programs                                                         shall use running example    preliminaries                                         deal propositional disjunctive logic programs  ∪ ∨ ← ∨ ←  ﬁnite sets rules form                          ∪ ∨ ← ← ←     ∨ · · · ∨ al ← al                                                                  ← ← ← ← ←                                                                                          ≥ ≥ ≥  ai propositional atoms following semodels  denotes default negation    usually identify                                                          sep∅abc∅abd∅abcdabcdabcd  rule atom atoms occurring program  given set atoms say program   abcabcdabdabcdabcabcabdabd  set programs denoted pa sep sep ∪babcaabdbabcdaabcd  rule resp program normal iff contains disjunc       tion ∨ program unary contains rules form strongly equivalent                 ← ← pa denotes set unary programs hand asp  asp  ∅ ordinar   set atoms      denotes ily equivalent strongly equivalent  set     accordingly rules form  relative iff ∩  ∅   written ∨ · · · ∨ al ←                                                          se   al              ∅ abc ∅ abd abc abc abd abd                                                                        following gelfond lifschitz  interpreta se  se  ∪ abc abd  tion set atoms answer set program  iff minimal model reduct  results  general framework  deleting rules containing default negated atoms order deal differing notions program equivalence  ∈ ii deleting default negated uniform manner taking particular currently ex  atoms remaining rules set answer sets isting notions equivalence presented  program denoted asp  relation   tween interpretation program deﬁned usual write abc instead instead etcequivalence notions based projection answer sets proposition  let equivalence frame  account introduce general framework express ∈ pu  following conditions hold  ing solution correspondences logic programs                                                                                                  ucb  uc  ⊆  framework parameterize hand set ⊆  rules added programs                                                                   iff                  hand relation hold collection ucb        uc⊆b         uc⊆b   answer sets ∪ ∪ concerning pa recall important result woltran  ex  rameter equality comparison relations like set tending analogous result lifschitz et al   inclusion used leads following notion proposition  consider frame pa  ⊆                                                        let ∈        iff      deﬁnition  correspondence frame simply frame                upa        upa   understand triple ρ set atoms example  seen ex  called universe ii ⊆ pu  called context ample  upa holds                                                                                                                                 programs simply context iii ρ ⊆  ×       proposition   upa      programs ∈ pu  say witnessed fact asp ∪a  abc abd  fcorresponding symbolically iff ∈ asp ∪  abc  asp  ∪ asq ∪ ∈ ρ                            relevance proposition  allows dras                                                        tically reduce number required rules equivalence    intuitively correspondence frame  ρ                                                        checking proposition does generalize  determines general alphabet consideration                                                        projections answer sets  termines kind rules used comparison ρ  speciﬁc operation used checking correspondence theorem  equivalence frame pa  programs                                         ⊆  ∈ pu  upab                                                                converse does hold general    quite obvious equivalence notions discussed upa                                                                                                special cases fcorrespondence proof upab implies upa im  universe ⊆ strong equivalence mediate  proposition  running exam                                                                                                    relative coincides pa correspondence ple shows failure converse                                                                                                   uniform equivalence relative coincides    holds     correspondence consequently holds strong equiv                                                        pupab holds view asp ∪  alence coincides pu  correspondence ii uni                                                      ∨ ←   abc abd asp ∪ ∨ ←  ∅  form equivalence coincides   correspondence easily shown                              iii ordinary equivalence coincides ∅                                                                                               correspondence                                         theorem holds set pa substituted    paper mainly concerned correspon class normal programs programs  dence frames form pa ⊆b pa running example corresponding  ⊆ set atoms ⊆b projections respect frame using normal programs   standard subset setequality relation respectively context each stable model ∪ resp ∪                                            set ⊆ deﬁned follows sets interpre true rules ⊆ pa  tations                                              negative literals body immaterial    • ⊆  iff ⊆                           theorem  indicates equivalence projected answer                                                  sets involved holds inclusion                           •  iff sb                            easy corollary theorem  upa⊆b  implies                                                                                                                        ⊆b  vice versa fact    particular amounts answerset existence      ∅ correspondence answer sets  sult shows general smallest extension violating                                                        inclusion exponential size    follows form refer  equivalence frame accordingly theorem  exists family problems Π   correspondence fequivalence frame pa ⊆a each ⊆ pa witnessing asp ∪ra ⊆  form ⊆b referred inclusion frame asq ∪ ra exponential size    later purposes introduce following proof sketch idea encode propositional cnf                                                               tion correspondence problem Π quadru φ  vi ci atoms  ci  ci ∨ · · · ∨ ciki   ple ρ ∈ pu ρ frame Π  pa ⊆a ∈ pa asp ∪  say Π holds iff ucρ holds accord ra ⊆ asq ∪ ra ¬r˜ include dnf φ  designations Π equivalence problem r˜ result interpreting classical formula  ρ equivalence frame inclusion problem let v¯  v¯  ∈     ∈  v¯   v¯  ∈  ρ inclusion frame                                                              gn sets new atoms deﬁne    correspondence problem Π  ρ                                                                ∨ v¯ ← ← ← v¯  ∈  ∪  usually leave implicit assuming consists  atoms occurring                                  ←  u¯ v¯ ← u¯  ∈  ∪                                                                          ∗        ∗    list basic properties fequivalence           ←  ci  v¯ ← ci  ∈   ≤ ≤       ∗    ∗      ∗    ∗            ∗                                ci  ci     ciki   v¯ ¬v   ∈ se       ∨ v¯ ← ←v¯not v¯ v¯ ←vnot  ∈  ∪ ii each ∈ nontotal ∈ exists                                                                              a∪b            ←  v¯  ←  v¯  ∈  ∪       iii ∈ iff ∈ σy se                                            ←  v¯ ←  ← u¯  v¯ ← u¯  ∈  ∪ iv ∈ implies  ∈ se ap          gi ← cij    ki ∪ ←     gn                                                        intuitively spoiler interpretation   ¬v  v¯ let  ∪ v¯  informally ∪ answer set ∪ ∪  admitsb answerc sets containing holds semantically given  ∈ sep ∪ra seq∪ra                                                          example   running example  semodels ⊂ precisely    spoilers                                                ˜a                                countermodel φ means pa ⊆a  abc  abd  cnf ¬φ ¬r˜a amounts dnf φ  abd abc abc abc abd abd lat  proves claim wellknown smallest dnf ter subset σa se ap   σa se ap                                                                                                  cnf φ exponential φ proves result ∪ ∅abc ∅abd required deﬁnition     similarly construct family problems showing central property spoilers follows  smallest extension violating equivalence expo                                                        theorem   let  pa ⊆b frame  nential size naive guess check algorithm q∈p   iff spoiler  ⊆   disprove inclusion equivalence needs exponential space                                       better algorithm develop suitable semanti immediate consequence theorem  cal characterizations disjunctive extensions  proposition  following result  account                                                        corollary  let  pa equivalence frame                                                        ∈ pu  iff pa ⊆b    characterizations                                  pa ⊆b spoiler  section ﬁrst present characteristic structures discussed later spoilers provide semantical basis  associated inclusion equivalence problems counterexample generation  projections answer sets termed spoilers certiﬁcates  based discuss interesting invariance  certiﬁcates  results                                                        having introduced structures disprove program    start general properties                                                        correspondence discuss structures prove pro  deﬁnition  set seinterpretations complete iff gram correspondence roughly speaking structures  each  ∈  ∈ ∈ troduced express essence program   ⊆ ∈                        spect program equivalence terms semantic condi    shown set sep  semodels tion  program complete                         deﬁnition  let set atoms set se    following guarantees complete set se interpretations pair   set inter  interpretations represented program  pretations ⊆ cprojection iff exists  proposition  let complete set seinterpretations set ∈ ii zc    let set atoms exists program iii   ∈ ⊂  psa ∈ pa sepsaa  sa                   program   ∪ bprojection                                                              possibility obtain psa follows se  bcertiﬁcate   rules ←   each ⊆  ∈ following lemma shown means spoilers  sa rules wp∈y ←   each ⊂ expresses programs corresponding respect   ∈ sa  ∈ sa         inclusion frames iff certiﬁcates satisfy certain                                                        tainment relation    spoilers                                                                                   ⊆   ﬁrst class characteristic structures associated pro lemma  correspondence holds iff                                                                             gram correspondence dealing nature each certiﬁcate            certiﬁcate                                                                    ⊆  existence prevents equivalence programs  exists       der projected answer sets                              result expresses central property certiﬁ    need following auxiliary notation let set cates formulation require concept                                               seinterpretations  sets atoms σy  abcertiﬁcate  program minimal iff  ∈  zc                             abcertiﬁcate zy   ⊆x implies     deﬁnition  let Π  pa ⊆b inclusion prob theorem  let  pa equivalence frame  lem let ⊆ interpretation consider ∈ pu  iff minimal       a∪b      ⊆ σy   se  pair spoiler Π iff certiﬁcates coincide  note result pendant proposition  • ∈ pa asp ∪ ⊆ basq ∪    deals modeltheoretic characterization relativized • ∈ asp ∪ mb ∈ asq ∪ rb  strong equivalence programs ∈                                                        furthermore counterexample equivalence prob  strongly equivalent relative iff minimal                                                        lem    counterexample  certiﬁcates coincide relations program                                                                ⊆   ⊆   correspondence relativized nonrelativized strong                                                                     notion spoiler deﬁnition  provides basis  equivalence respectively given subsection                                                        counterexamples  example  running example   theorem   suppose spoiler correspondence  single acertiﬁcate ∅ ab                                                        problem Π   pa ⊆b psa  coun  acertiﬁcates ∅ ab                                                        terexample Π psa proposition   ∅ ab minimal                                                          result follows theorem  proposition   coincide obtain pa  equivalent expected                              fact sa complete spoiler                                                        example   example sketched construction    invariance results                               proposition  derive counterexamples abc  theorem  allows derive interesting invariance abd  ∨ ←  ← ←  results respect varying projection sets    ←  obviously rule redundant                                                          note inclusion problem  ⊆  fails  theorem  let set atoms ⊆                                        ∈           iff                counterexample theorem  does exist                 upab         upaa∪b           observe programs counterexamples    result follows immediately theorem  deﬁ theorem  contain redundant clauses succinctness  nition  observing bcertiﬁcates program concern spoilers instance example  a∪bcertiﬁcates actually identical objects  ∨ ← yield simpler counterexample  ∪ bprojections se ap  trivially coincide fact spoilers geared providing minimal coun  ∪ ∪ bprojections se ap                 terexamples respect particular syntactic subclasses    theorem  interesting consequences     contexts                                                          facilitating special counterexamples ex  corollary  programs set atoms tend notion spoiler pairs ⊆  pa ∅ holds iff pa holds         a∪b                                                            σy   se  admitted complete replacing                                                                                                answerset existence relevant regarding deﬁnition  set ii ∩ σy se  boolean properties relative additions pa tanta               a∪b                                                            iii iv ∩ σy se calling result  mount relativized strong equivalence projection extended spoiler    corollary  let set atoms programs example  running example Π  pa ⊆a  ∈ pu set ⊆ atoms upu  iff spoilers abc abd  abd  strongly equivalent                      abc abc abc abd abd ab ab ∈                                                                                    result quite striking shows strong equivalence se abcd abcd ∈ se verify                                                                                corresponds  bequivalence projection complete superset containing ∅                                                                                                      set derived fact za  ab yields extended spoilers abc                                                                                              certiﬁcates program onetoone correspon abd  particular set  ∪                                                                             dence semodels follows      xm  note  ab ab                                                                                          bcertiﬁcate iff       xm   ab ab simpler program  ∨ ← ful                                                                                                 semodels ﬁxed second component  ﬁlls ser   abc  abd    particular consistency answerset semantics counterexamples Π   ∅ coincides strong equivalence generally theorems   generalize extended spoilers  corollary  let set atoms programs counterexamples constructed using spoilers                                                        general include counterexample particular  ∈ pu  sets atoms ∪                                                        form example adding ordinary   upab  iff strongly equivalent  relative                                        spoiler allowed counterexample program                                                        positive hand show coun  fact setting correspondence ase terexample program normal exists ∅  models program bcertiﬁcates analo za  ab added elaboration issue  gously established                          mains work    counterexamples                                       computational    complexity  given correspondence problem Π  pa ⊆b ﬁrst result concerned recognizing  does hold interesting know case terpretation discriminating answer set extended  deﬁne counterexample Π pair programs ∪ ∪ “partial” spoiler
