         general framework scheduling stochastic environment∗           julien bidot              thierry vidal            philippe laborie          christopher beck       universit¨at ulm               enit                     ilog sa              university toronto        ulm germany               tarbes france            gentilly france           toronto canada    julienbidotuniulmde        thierryenitfr           plaborieilogfr         jcbmieutorontoca                          abstract                          augmented rescheduling capabilities case failure oc                                                        curs schedule generation execution interleaved      systems techniques ad    predict short range uncertainty      dress stochastic scheduling problems based dis mains low approaches different      tinct opposite approaches espe    unclear best      cially terms scheduling schedule    swer given application context paper pro      execution combined knowl    pose section  thorough classiﬁcation techniques      edge uncertainties taken ac   scheduling uncertainty exhibiting strengths      count reallife problems appears weaknesses conclusion reallife applications      approaches needed com mixing techniques single appears      bined knowledge      highly desirable purpose propose sec      ﬁrst desirable deﬁne thor tion  conceptual theoretical model encompassing      ough classiﬁcation techniques systems generation execution schedule      exhibiting relevant features paper pro large number techniques dealing uncertainty      pose treedimension typology distinguishes concurrently implemented section  present experi      proactive progressive revision tech mental prototypes partially validate model      niques theoretical representation model      integrating three distinct approaches   background      ﬁned model serves general template      parameters tuned implement standard scheduling problem comprises set activities      ﬁt speciﬁc application needs resources each activity duration each      brieﬂy introduce paper ﬁrst experimental source limited capacity objective assign      prototypes validate model              sources times activities given temporal resource                                                        constraints general scheduling problems optimization                                                        problems typical optimization criteria makespan number    introduction                                       tardy activities tardiness allocation cost assume                                                        execution environment uncertainty generate  approaches scheduling assume execution envi predictive schedule ofﬂine executed online  ronment uncertainty problem allo problem possible sources  cate resources assign start times set given activ uncertainty scheduling activity durations  ities temporal resource constraints satisﬁed resource capacities imprecise resources  resulting predictive schedule sent execu break  tion controller practical applications deﬁnitions avoid ambiguity terms  schedule incomplete imprecise andor uncertain data commonly used different communities  simply executing strictly completely determined pre  dictive schedule right answer anymore deﬁnition  ﬂexibility ﬂexible schedule schedule  high chance schedule ﬁt real situation fully set decisions  arise scheduling schedule execution decisions make change heterogeneous  reconsidered ways instance setting activity types allocation sequencing decisions  start times sequence activities postponed  execution adding ﬂexibility schedule bet deﬁnition  conditional schedule conditional sched  ter adapt observed events execution controller ule special kind ﬂexible schedule distinct al                                                        ternative subsets partially ordered activities mod    ∗partially supported convention industrielle formation par eled remaining decisions choose  la recherche                                 alternatives execution time                                                    ijcai                                                     deﬁnition  executable schedule executable sched react indicate relevant change decisions  ule schedule does violate constraint current predictive schedule sadeh et al                                                         veloped simple rules adapt current schedule through  deﬁnition  adaptive scheduling adaptive                                                        activities shifting elaborated local reschedul  scheduling able generate new                                                        ing techniques problem acute  executable schedule current executing schedule  longer executable                                progressive techniques  deﬁnition  robustness robust schedule schedule idea progressive techniques interleave  quality according optimization criterion does scheduling execution solving problem  deviate during execution respect known piece piece each piece corresponds time hori  online perturbations deviation robustness zon slice reasoning background task online  deﬁnition  stability stable schedule schedule afford time search incrementally commit  decision changed during execution   scheduling decisions periodically new information                                                        arrives decisions changed    classiﬁcation                                        way proceeding using progressive approach                                                        select schedule new subsets activities extend  section concisely taxonomy schedul current executing schedule gliding time horizon  ing systems techniques independent speciﬁc vidal et al  allocate container transfer activities  representation model reasoning technique classiﬁ harbor robots long temporal uncertainty remains  cations especially operations low reasonably sure chosen robot  research community herroelen et al  actually ﬁrst available decision  totally satisfactory need distinguish certainty level used information high andor  ofﬂine online techniques anticipation horizon interval cur  distinction consider issues rent time expected end time scheduled ac  decisions optimality requirements     tivity small needs execution                                                        monitoring able react indicate    proactive techniques                             type new decisions make  proactive technique takes account uncertainty pro  duce schedules sensitive online perturbations  discussion    ﬁrst naive method making schedule insensitive compare three families techniques respect  online perturbations produce ofﬂine unique predictive following criteria online memory need online cpu  robust schedule taking account worst scenario need schedule qualityrobustness stability    approach consists introducing ﬂexibility revision techniques consume lot memory  schedule subset decisions ofﬂine line store schedule  search rest online search quire lot cpu online depending time spent  kind commitment approach respect decision rescheduling expect high schedule quality  making make decisions information able reoptimize globally revise  precise andor certain morris et al  current schedule robustness guaranteed stability  instance maintain plan uncertain activity durations bad change lot decisions  start times set provide algorithms guar online memory vary proactive techniques depend  antee executability schedules actual ing store schedules  durations incomplete ﬂexible sched ditional schedules require lot memory general  ule way build undecided ﬂexible schedule online computational power keeps low  set alternative branches leading search solutions backtracking expect  conditional schedule                                 high schedule robustness stability ac    different uncertainty models probability distributions count occur online make decisions  possibility theory used proactive techniques progressive techniques permit limit online memory  representation problem solving need minimum store piece schedule  ﬁnd schedule highest probability requirement cpu online limited solve  makespan exceed given value          subproblems difﬁcult guarantee high schedule    revision techniques                              qualityrobustness decisions taking                                                        account knowledge uncertainty make schedul  revision techniques consist changing decisions during ing decisions shorttermaggregated  xecution necessary change decisions view family techniques generates stable schedules  current predictive schedule inconsistent features help decider choose technique  estimated quality deviates predicted speciﬁc application domain memory usage limited  opportunistic way positive event occurs  example activity ﬁnishes earlier expected alternatively new subsets activities simply integrated  words need executionmonitoring able periodically complex conditions monitored                                                    ijcai                                                     conditional schedules probably right answer set probabilisticpossibilisticetc distri  easily mixed techniques nec butions possible values attached each contingent  essary instance highly stochastic world time variable distributions updated during execution  spent rescheduling reduced proactive deﬁne basic objects scheduling prob  progressive approach used contrary pure lem resources activities  proactive technique realistic deﬁnition  resource resource associated  unpredicted unmodeled deviations dealt variables represent capacity efﬁciency  revision technique combinatorial explosion andor state capacity maximal  conditional schedules suggests develop contain accommodate time efﬁciency  branches add piece piece progres scribes fast respect  sive way matter conclusion decider available capacity state describes physical condition  given global encompassing three kinds resource capacity efﬁciency state vary  approaches allowing tune levels proactivity time variables controllable contingent  progression revision best ﬁt needs                                                        states global resource constraint ctr variables  mixed techniques proposed making scheduling variables activities require schedul  decisions stochastic environment far know ing problem comprises ﬁnite set resources noted  proposed approach combines  three ways scheduling                           model state execution environment                                                        set state resources outside temperature modeled                                                        resource three states depending    representation model                               time hot mild cool  section describes generic representation model deﬁnition  activity activity  scheduling stochastic execution environment model ay  startaydayenday ct ay deﬁned three vari  integrates three families approaches presented ables start time variable startay duration variable day  previous section                                     end time variable enday variables                                                        controllable contingent ay associated op    schedule                                                        tional set resource constraints ct ay involve vari  interested extended scheduling problems mu ables resources requires  tually exclusive subsets activities way similar constraintbased model propagate bounds  tsamardinos et al  roots variable domains usually post following constraint  model need variables constraints inspired                                                        each activity enday − startay ≥ day course constraints  straint paradigm                                     type variables posted schedul  deﬁnition  variable variable associated ing problem  main values symbols instantiated scheduling problem composed resources activ  values symbols domain     ities constraints relating possibly additional                                                        variables describing state execution environment  deﬁnition  constraint constraint function relat ﬁt classiﬁcation described section  additional  ing unary constraint binary constraint constraints posted schedule generation  kary constraint variables restrict values algorithm set resource allocations make se  variables                                   quencing decisions set precise activity start times    domain variable reduced decision need add model achieve  decision propagated constraints  central model notion conditions    distinguish types variables problem subsets variables related logical andor mathematical  controllable variables contingent variables relations conditions guide branching condi                                                        tional schedules selection new subsets activities  deﬁnition  controllable variable controllable vari progressive technique  able variable instantiated decision agent  deﬁnition  condition condition    decisions inﬂuence state environment cond  funcatw logical andor mathematical rela  issues depends application domains decide tion funcin variable involved  instantiate controllable variables example associated optional active temporal window  difﬁcult set activity start times advance activity interval atw st et timepoints st et  durations imprecise temporal constraints current schedule st  et means condition                                                        checked precise timepoint schedule  deﬁnition  contingent variable contingent variable  variable instantiated nature                   condition involve characteristics distributions                                                        contingent variables condition expressed    controllable variables correspond decision variables conjunctions disjunctions conditions  contingent variables state variables mixed constraint typical example condition  satisfaction problem framework fargier et al  branching condition branching condition condition                                                    ijcai                                                     attached mutually exclusive subsets use revision progressive techniques need  activities condition checked sider dynamic problem solution executed  speciﬁc timepoint branching node stochastic environment requiring scheduling    propose following recursive deﬁnition schedule decisions executing need  model respect particular mutu sign model interleaving schedule generation execution  ally exclusive subsets activities                resulting able react know                                                        reschedule schedule subset make new scheduling                                   deﬁnition  schedule schedule         decisions know  •      ∅   void                                               types algorithms needed execution algo  •s  ay   ct ∗ s          ay                    activity partially ordered rithms charge dealing current ﬂexible                 ct  ∗  constraints   respect activities schedule deﬁned previous section making          s  schedule                                          scheduling decisions remain actually executing activ  •s    bnd nb   rcp ∗cnd          nb                          set mutu   ities generation algorithms charge changing                     rcp  ally exclusive recipes  mutually exclusive recipes current schedule valid  represent different ways attaining goal modiﬁed revision approach                                            bnd  ﬁned recipes follow branching node new activities added progressive approach                        cnd  lead converging node  node dummy activity dynamic evolution model monitored  aydum        null duration does require resource condition meeting condition met know  aydum  startdum enddum    startdum  enddum               ay        ay      ay       ay     make change decisions branching                                                        dition deﬁned previous section actually used  deﬁnition  recipe recipe rcp  s pyrcpbcrcp  schedule associated optional probability possi execution algorithms guiding adequate alterna                                                        tive need introduce new types condition  bility plausibility executed pyrcp branch                                                        activation condition met activates new generation  ing condition bcrcp executed bcrcp  met                                                  step through generation algorithm ﬁre condition                                                        actually enforce global monitoring turn    recipe possibilities newly generated schedule activation ﬁre condi  forming action product different tions needed revision progressive approaches  ways mutually exclusive execution each set typical examples activation ﬁre conditions vio  mutually exclusive recipes executed lations constraints current schedule arrivals    ﬁrst ways deﬁning schedule just al new activities execute critical resources longer avail  ternatives deﬁne recursively classical partially ordered able implying revision mechanism simply  schedule alternatives introduces parts dition stating anticipation horizon small  schedule divide given timepoint mutu need schedule new subset activities  ally exclusive recipes each recipe rcpi executed ticipate execution implying progressive mechanism  branching condition met point               generation execution model represented    noted conditions designed automaton states called execution contexts  actually mutually exclusive cover cases deﬁnition  execution context execution context    previous recursive deﬁnitions actually constructive ect  sectαect composed schedule sect  deﬁnitions permit build schedule piece piece execution algorithm αect  building subsets partially ordered activities  composed set mutually exclusive recipes set execution context schedule solution  ing turn integrated subset partially ordered activ scheduling problem addition ex  ities turn mutually exclusive recipes ecution context contain recipes starting                                                                                                       py  alternatives nested alternatives branching node highest values                                                         example activation condition    tractability reasons assume temporal    py  constraint activities belong value remaining recipe high  recipe precedence constraints recipe developed included current sched  added constrain branching conditions checked ule generate progressive way new schedule  related recipes executed              current augmented additional recipe                                                          αect makes decisions start time setting resource alloca    generation execution                         tions branching recipe candidates                                                        run greedily change decisions al  deﬁned model proactive method use ready case pure execution approach dis  generate ﬂexible schedule patching αect makes decisions  entirely sent execution controller make possible automaton includes transitions generating ex                                                         ecution contexts going execution context     notice schedule better  referred solution scheduling problem possibly  fully set deﬁnes partial order schedule implying deﬁnition  transition transition                                                                  src   tat    act    ﬁr  operations research community start times set tr  ecttr ecttr condtr condtr βtr composed                                                    ijcai                                                                               src  source execution context ecttr  target execution best schedules set executable schedules        tat                         act  text ecttr  activation condition condtr  ﬁre condition greedy return ﬁrst executable ﬁnd      ﬁr  condtr  generation algorithm βtr                matter conclusion ‘pure’ technique                                                        easily instantiated model pure proactive    default situation temporal windows acti technique barely need single context generation  vation ﬁre conditions transition tr source                    src                                 ofﬂine remaining decisions taken  execution context ecttr  temporal windows equal                                               ectsrc   sole execution algorithm pure revision resp pro  interval start point end point tr  gressive approach contexts contain nonﬂexible predictive             tr    transition activated activation condition schedules basic execution algorithms activationﬁre           tr                            β  met   activated generation algorithm tr generates conditions associated failures quality deviations                      ecttat  target execution context tr source execution context current context resp horizon getting small  ectsrc    tr  data problem model execution algo uncertainty level decreasing generation algorithms  rithm αecttat set βtr library template execution          tr                                            change current schedule ﬁt new situation resp add  algorithms βtr run ofﬂine online decide new subset activities great strength model  change decisions particular select three kinds approaches integrated                                 ecttat  subset activities include tr progressive ap parameters tuned ﬂexibility  proach transition tr ﬁred ﬁre condition met revision capabilities needs driven  tr ﬁred change contexts source exe                 src                         tat        application  cution context ecttr target execution context ecttr  acti                    act  vation condition condtr general equal                    ﬁr         act                         experimental  ﬁre condition condtr condtr met           ﬁr  condtr met                                   section simply recall software prototypes    template transitions deﬁned ofﬂine each implemented show actually  implicit description transitions ﬁred special cases global model partly validate  automaton model template transition associated experimental results appear cited papers  resource constraint rct ﬁred each time  activities involved rct executing allocated  scheduling problem                   rct  resource involved                                ﬂexible jobshop scheduling problem ﬂexible jsp                                   ect    generation algorithm generating trl execu scheduling problem set activities ay parti                           ect  tion algorithm associated trl complementary tioned jobs each job associated total  makes decisions subset activities dering subset ay  each activity speciﬁes set  makes remaining decisions activities alternative resources execute inter  makes allocation sequencing decisions ruption activities require resource  sets activity start times             lap executions represent formally partition    noted conditions checked set ay resource setsasolution corresponds  execution algorithms branching condition met allocating resource each activity total ordering  change contexts activation condition met each resource set union resource  new execution context generated ﬁre condition job orderings acyclic relation ay   met change execution contexts                   experimental investigations focused prob    ﬁrst assumption uncertainty level decreases abilistic ﬂexible jobshop problems random variables  executing context ergo leave decisions fully independent associated probability distribu  execution algorithm limit computational effort tions conducted experiments criteria mini  used revise decisions perturbations mize makespan sum tardiness allocation costs  instability revision decisions  advance concern variables low  architecture  certainty taken generation algorithms remaining experimental composed following mod  decisions taken later generation execution ules solver controller world solver module  algorithms uncertainty lower      charge making decisions backtrack search    second assumption dynamics underly straint propagation montecarlo simulation deci  ing controlled physical low respect sions solver module sent controller  time allotted reasoning search sched module responsible choosing activity start  ules online time ﬁnd times given decisions solver module  schedule optimal generation algorithms happens during execution observations sent world  anytime generation algorithms able module controller module monitors progression  produce schedule quality robustness stability revision conditions start selection new activi  increases search time principle decisions ties reoptimization relevant controller  generation algorithms better respect opti  mization criterion decisions execution algo world module real execution environment  rithms time reason choose simulator instantiates random variables                                                    ijcai                                                     
