                         compset      algorithm subset selection                                     yaniv hamo     shaul markovitch                                     hamoshaulmcstechnionacil                       science department technion haifa  israel                          abstract                          function try optimize com                                                        mon modiﬁcations algorithms trade      subset selection problems relevant ing general additional domainspeciﬁc knowledge      mains unfortunately combinatorial nature  sat domain variants gent walsh       prohibits solving optimally cases lo hoos stutzle¨  common      cal search algorithms applied subset mains khuri back¨  evans       selection varying degrees success     paper present general modiﬁcation known      work presents compset general algorithm    local search algorithms improve performance      subset selection invokes existing local   ssps idea exploit attributes      search algorithm random subset com speciﬁc search spaces subset selection knowing      plementary set exchanging information    subset search space allows infer moves      runs help identify wrong moves prelimi likely wrong reversing moves try      nary results complex sat max clique  mul ing start new context probability      tidimensional knapsack vertex cover prob     repeat mistake reduced experiments performed      lems show compset improves efﬁcient      complex sat max clique  multidimensional knapsack      stochastic hill climbing tabu search algorithms vertex cover problems new method shown sig      orders magnitudes                niﬁcantly improve underlying search algorithm                                                              compset    algorithm    introduction                                                        subset selection expressed search graph each  subset selection problem ssp simply deﬁned given node state graph represents unique subset edges  set elements      en utility function correspond adding removing element subset   → ﬁnd subset ⊆ opti  edges node following  mal reallife problems ssps formulated ﬁgure shows search graph  elements  classic examples include sat max clique indepen  dent set vertex cover knapsack set covering set partitioning  feature subset selection classiﬁcation instance selection  nearestneighbor classiﬁers    search space exponential size  ﬁnding optimal subset relaxing assumptions  tractable problems associated subset selection typ state represented bit vector bit si  ically nphard npcomplete local search algorithms  iff ei ∈ moving neighboring state graph  common methods solving hard combinatorial equivalent ﬂipping bit  optimization problems subset selection hill climb each state associated utility value  ing simulated annealing kirkpatrick et al  tabu value subset represents local search algo  search glover laguna  proven rithms typically start random state make suc  provide good solutions variety domains gen cessive improvements moving neighboring states  eral technique random restarts applicable vary each mainly deﬁnition neigh  yielding anytime behavior pac property prob borhood selection method  ability ﬁnd optimal solution converges  run using representation local search algorithms  ning time approaches inﬁnity                        applicable subset selection general    problem local search algorithms overlook speciﬁc characteristics subset selection  general heuristic compset guides given local search algorithm using knowl  domain form blackbox utility edge speciﬁc subset selection  characteristics subset selection              observations try identify wrong invocations  selection problem elements operators operators cancels reverses effect                                                        resumes run local optimum hopefully       fn fi operator toggling solution  membership element set set remove   add applying fi equivalent ﬂip procedure compsets localsearchalg  ping ith bit bit vector representation ←  ←  agree ← false  following discussion assume single optimal subset                                ∗                               loop agree  solution donate                             ls ← localsearchalgs    make following observations subset search                                                            ls ← localsearchalgs                       observation  let arbitrary state subset ← σs ls  ∩ σs ls   state exists subset operators σs ⊆   applied results                   agree ← true                                                             proof bits long vector ← cls   apply operators ls                  bits agree need    ← cls                                                           return better  ﬂipped using operator                                                                                                               end  observation  let complementary state  state derived ﬂipping bits subset given start state compset initiates runs                ∗                             ∗  operators σs  leading solution  given local search algorithm  complementary subset σs s∗  σs s∗ ∪ complementary local optima achieved  σs s∗  σs s∗ ∩ σs s∗  ∅             series operators led each examined                                                        operator appears series wrong  proof need show fi∈f fi ∈ know runs went       ∗              ∗           ∗                ∗  σs  fi ∈ σs  si  si fi ∈ σs  wrong reverse effect operators                                              ∗  does need ﬂipped si  si local optima obviously wrong operators                   ∗                                    undone local search continued process repeats  necessarily si  si bits ﬂipped            ∗              ∗                            encountering pair local optima  fi ∈ σs  → fi ∈ σs  goes                             ∗                          conﬂicting operators exist optimal solution  possible case si  si                  compset ends returns better local                                                        optima hand    inherent problem ﬁnding σs s∗ using local                                                          rational compset illustrated  search operators applied successively ef                                                                                           ∗   fect necessarily monotonic improvement                          σs                                                                             ls  terdependencies elements nonmonotonic                      s∗     havior confuses local search algorithms makes  trapped local optima case                  ∗                                                                         σs                                                                         options search progressing correct path                          solution algorithm does way                           tinuing correct path altogether solution s∗ reachable applying operators  beneﬁcial distinguish scenarios σs s∗ order applying operators    consider independent hill climbing runs                                                        σs s∗ underlying search algorithm  given optimal solution                                                        correct path using operators σs s∗  runs stopped local optima ls ls respec  tively consider subsets operators leading search easily divert path   observation  possible necessary overall convergence solution                                                    diversion occurs operator σs s∗ applied  operator fi appears operator subsets               ∗  path s∗ observe operator operator σs  applied problem  clear sign wrong know σs s∗ σs s∗ difﬁcult  idea compset described         detect diversions know                                                        solution s∗ conforms σs s∗ ∩ σs s∗  ∅    description compset  algorithm            use fact try identify diversions  interdependencies elements distracting stopped local optima ls ls  searching good solutions elements inde check σs ls ∩ σs  intersection  pendent simple linear search adds element                                                                             deﬁnition ls ls path  element long utility value improves sufﬁce note intersection local optima  local optima example interdependency                                                        path σs ls uses operator  brings search stop likely applying  ∗                                    ∗  operators different order eliminating σs  σs ls uses operator σs   local optimum avoided compset uses   σs ls ∩ σs ls  ∅ means sure local optima path             resented conjunction clauses cnf ∧    ∧ cm     general possible search algorithm sat classic ssp look subset variables   continue applying operators ﬁnally return path assigned true value makes entire formula   local optimum means essentially ”given true utility function number unsatisﬁed clauses   up” elimination conﬂicting operators sides assigning true variables   brings ls → ls →                                                                ≡ cici false  ≤ ≤   common operators eliminated σs ∩ σs    ∅ possibly correct path global minimum  satisﬁed formulas                                                    ∗   possible σs contains operators σs  search algorithm using utility function attempt                                            ∗   σs contains operators σs  maximize number satisﬁed clauses general   obstacle reaching solution           ization sat called maxsat problem instances sat     important point notice nec obtained satlib hoos stutzle¨    essarily states algorithm visited groups repository random sat use problems sol   operators simultaneously eliminated operation ubility phase transition region cheeseman et al    interdependencies prohibit operators suc • max clique  classic ssp goal   cessively eliminated compset effectively switches ﬁnd maximum subset vertices forms clique   context correct eliminated graph given graph  subset ⊆    operators tried                          deﬁne following utility function                                                                  ½                                                                      −                 clique     empirical evaluation                                 ≡                                                                      −    · −  −    following algorithms considered                                                       •  stochastic hill climbing shc  starts random sub clique maximized implementation al   set iteratively picks neighboring subset differs exactly ways minimizes use  − incomplete   element random moves better solutions penalized number additional edges   equal utility value simplicity shc misleads require clique · −  − es plus   works mitchell et al  baluja  showed ﬁxed value  used separate legal   shc does fall complex ga mechanism  solutions striving minimize search algorithm   sat domain stochastic local search sls meth ﬁnds feasible solutions ﬁrst continues minimiz   ods shown comparable stateoftheart ing size global minimum corresponds   domainspeciﬁc algorithms hoos stutzle¨    maximum clique problem instances obtained                                                                        •  tabu search ts glover laguna   examines dimacs   benchmark maximum clique   neighborhood current state best replace •  multidimensional knapsack mkp  problem   ment moves chosen state does improve ﬁlling knapsacks objects each object   current state result cycles avoid cy placed knapsacks ””   cles ts introduces notion tabu list stores knapsacks capacities     cm each ob   tabu tenure operators used ts prevented ject associated proﬁt pi different weights   ing operators tabu list generates neigh each knapsack object weighs wij   borhood examined unless certain conditions called knapsack goal ﬁnd subset objects yielding                                                          maximum proﬁt overﬁlling knapsacks   piration criteria met paper use common                                 aspiration criterion allows operators lead better                                                                                   knapsack overﬁlled state iff si · wij  cj   state best obtained far                   let number overﬁlled knapsacks deﬁne  •  simulated annealing sa kirkpatrick et al                 pn                                                                             −       ·    gins high temperature enables arbitrary   ≡                                                                                                     neighboring states including worse   current temperature declines search utility feasible subsets simply proﬁt   likely choose nonimproving state settles minus sign minimization purposes infeasible solu   state local minimum escape tions penalized each knapsack overﬁll prob   low temperatures                                   lem instances mkp obtained orlibrary                                                          beasley      test effectiveness compset applied   shc ts compset applicable sa sa • vertex cover  goal ﬁnd smallest subset   gins high temperature randomly moves far vertices graph covers edges given graph   initial state concept compset set new  deﬁne   start points underlying algorithm randomly         ½                                                                                      covers edges   moving away sa defeats purpose              ≡                                                                          ee      algorithms tested following domains                              •  propositional satisﬁability sat  problem ﬁnding random sat problem  clauses variable   truth assignment satisﬁes given boolean formula rep hardest solve using local searchfor legal vertex covers takes values equal compsetshc average success ratio compsetts   incomplete solutions penalized number  compsetshc  comparison  edges cover plus ﬁxed value  used success ratios sa ts shc     separate legal solutions global minimum respectively speedup factor gained using compset  corresponds optimal vertex cover         large  shc instance uf large  complementary graphs instances original  ts instance uf note lower  dimacs benchmark taken known maxi  bounds shc ts terminated  mum clique sizes translated corresponding mini source limit runs  mum vertex covers                                     best performing algorithms max clique                                                        main compsetshc shc average success    experimental methodology                         ratios   respectively speed fac  tested ﬁve algorithms shc ts sa   tor compsetshc shc large  instnace   α   compset shc compset ts sanr   ts used   domains sat knapsack domain best performing algorithm    sat each run limited  evaluations compsetshc average success ratio     algorithms use random restart escape local comparison success ratios ts sa compsetshc  optima exhausted evaluations shc     respectively  quota use random restart im speedup factor gained using compset large   provement steps use   domains ts instance weish large  shc  sat   sat sat characterized stance weish  wide frequent plateaus frank et al  best performing algorithms vertex cover  chose higher values                main compsetshc shc average success ra     runs each algorithm performed each prob tios   respectively sa relatively close  lem test sets each run started random state  ts far  improved compset  common algorithms measured number  speedup factor gained using compset  evaluations needed obtain optimal solution each large  ts instance hamming large   run time taken                       shc instance sanr                                                           interesting statistics number random    results                                          restarts required underlying search algorithm  results summarized tables     compset number operator elimina  brevity did include timing information tions performed compset operators  tables considered algorithms introduce signif spanned collected data  runs  icant overhead execution time linear function hat vertex cover problem graph  ver  number evaluations tables show charac tices shc required  random restarts average  teristics problem instance followed number each run compset required  compset  successful runs columns titled ok average number performed  operator eliminations reversing ef  evaluations each algorithm successful run fect  operators each time  run algorithm optimal solution  limit tested statistical signiﬁcance  conclusions future work  improvement introduced compset using wilcoxon                                                        paper provided useful insights  matchedpairs signedranks test extension etzioni                                                        main subset selection realized using lo  etzioni  cope censored data ”” sign                                                        cal search paths complementary subsets solution  sg column shc compsetshc indicates                                                        distinct terms operators used led  compset improved shc   ”” sign                                                        conclude paths contain common operators  dicates shc performed better   ”” sign                                                        serve indication mistake test conjec  indicates difference signiﬁcant                                                        ture introduced compset new guiding policy local  possible draw deﬁnitive conclusions                                                        search algorithms context ssp results show  censored data na appears holds sg                                                        signiﬁcant improvement ts shc  column ts compsetts                                                        orders magnitudes    superiority compset algorithms                                                          currently process running compset  striking number evaluations num                                                        subset selection domains progressing better  ber difﬁculty instances solved sat                                                        standing behavior interesting direction  main best performing algorithms compsetts                                                        search ways incorporate knowledge entire search    note possible complementary graph paths instead local minima end ad  solve max clique problem translate vertex dition beneﬁcial ﬁnd characteristics  cover algorithms paper speciﬁc problem affect performance overall general    information runs solution idea incorporating ssp speciﬁc insights  given bound called truncated censored promising lead better subset selection algorithms                                       sat instances                 shc                  compsetshc                ts                  compsetts                sa                                            vars   clauses    ok       evals     sg   ok       evals      ok      evals      sg   ok      evals      ok       evals                                    uf                                                                                                                               uf                                                                                                                                    uf                                                                                                                             uf                                                                                                                               uf                                                                                                                                 uf                                                                                                               uf                                                                                                               uf                                                                                                                 uf                                                                                                                uf                                                                                                                  uf                                                                                                                      uf                                                                                                                      uf                                                                                                                        uf                                                                                                                       uf                                                                                                                      uf                                                                                                                            uf                                                                                                                            uf                                                                                                                            uf                                                                                                                            uf                                                                                                                            uf                                                                                                                            uf                                                                                                                          uf                                  na                                                                                      uf                                  na                               na                                                      uf                                                                                                                        uf                                                                                                                          uf                                  na                                na                                                     uf                                                                                                                         uf                                  na                                                                                      uf                                  na                               na                                                     uf                                  na                                na                                                      uf                                  na                                        na                                                     uf                                  na                                na                                                     uf                                  na                                na                                                     uf                                  na                                na                                                                          table  sat average  runs including censored data                                                   graphs                     shc                  compsetshc               ts                   compsetts               sa                                                     opt   ok       evals     sg   ok      evals      ok       evals     sg   ok      evals       ok      evals                                    brock                                                           na                                                              hamming                                                                                                                         hamming                                                                                                                               hamming                                                       na                                                         hamming                                                       na                                                       hamming                                                   na                                                        hamming                        na                              na                                                              johnson                                                                                                                                   johnson                                                                                                                   johnson                                                                                                                           johnson                                                                                                               hat                                                  na                                                       hat                                                     na                                                       hat                                                            na                                                             hat                                                 na                                                      hat                                                        na                                                             hat                                                       na                                                              hat                                 na                               na                                                                        hat                                                         na                                                              hat                                                       na                                                              sanr                                                          na                                                      sanr                                                           na                                                              sanr                                                          na                                                               sanr                                                          na                                                                      table  maximum clique average  runs including censored data    references                                                                                                  dimacs                  dimacs challenge problems maxi                                                                                                                   mum clique dimacsrutgersedu   baluja             baluja empirical comparison seven                                                                                                              etzioni etzioni                     etzioni etzioni statis       iterative evolutionary function optimization heuristics                                                                                                                   tical methods analyzing speedup learning experiments       technical report cmucs school                                                                                                                   machine learning –        science cmu                                                                                                               evans             isaac evans evolutionary algorithms  beasley              beasley orlibrary collection test                                      vertex cover porto saravanan waagen       data sets technical report management school imperial                                                    eiben editors                  evolutionary programming vii       college london                                                                                       pages –   cheeseman            et al          cheeseman kanefsky                                  frank      et al          frank cheeseman stutz       taylor really hard problems                                                        gravity fails local search topology                              journal ar       proceedings ijcai pages –                                                                tiﬁcial intelligence research – 
