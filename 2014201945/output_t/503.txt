             efﬁcient hpsg parsing supertagging cfgﬁltering            takuya matsuzaki                  yusuke miyao                jun’ichi tsujii                             department science university tokyo                             hongo  bunkyoku tokyo  japan                          school science university manchester                                nactem national center text mining                                matuzaki yusuke tsujiiissutokyoacjp                        abstract                          lexical entry each word number supertags                                                        generally large  case      efﬁcient parsing technique hpsg pre    tagging errors sentence cause parse failure      sented recent research shown supertag  cases previous research clark curran       ging key technology improve speed ninomiya et al  problem overcome assign      accuracy lexicalized grammar parsing   ing supertags each word sentence multi      show speedup possible elimi  supertagging supertagger initially assigns small      nating nonparsable lexical entry sequences  number lexical entries each word number      output supertagger parsability lexical entries gradually increased parser ﬁnds      lexical entry sequences tested technique successful parse short parser ‘takes over’      called cfgﬁltering cfg approxi    supertagger’s task resolves certain lexical      mates hpsg used test lexical  ambiguity avoid parse failures      entry sequences passed through cfgﬁlter      combined parse trees using simple     paper show making supertagger      shiftreduce parsing algorithm structural powerful workload parser      ambiguities resolved using classiﬁer duced overall efﬁcient specif      syntactic constraints represented original ically combine supertagger cfg approxi      grammar checked experimental results show    mates original lexicalized grammar enumerate maybe      gives comparable accuracy    parsable supertag assignments order scores      speedup factor  msecsentence  given supertagger say supertag sequence      compared best published result using maybeparsable sequence parsable approxi      grammar                                     mating cfg timeconsuming enumer                                                        ation algorithm parsing input sentence ap                                                        proximating cfg cfg parsing ef    introduction                                       ﬁciently cfg generally sparse combi  deep syntactic analysis lexicalized grammar parsing nation symbols appear cfrule highly restricted  fers solid basis intelligent text processing enumerated supertag sequences parsed  questionanswering text mining machine translation hpsg parser successful parse obtained  tasks large text pro enumerated supertag sequences necessar  cessed build useful main difﬁculties ily parsable original hpsg observed exper  using lexicalized grammars largescale applica iments parser ﬁnds successful parse  tions inefﬁciency parsing caused complicated data maybeparsable supertag sequences sentences  structures used grammars                       biggest advantage approach hpsg    recent research showed importance supertagging parser used stage  speed accuracy lexicalized gram computationally demanding previous approach  mar parsing clark curran  ninomiya et al  replaced simpler efﬁcient parsing  supertagging tagging process lexical entries algorithm hpsg parser implemented classiﬁer  assigned words input sentence bangalore based deterministic shiftreduce parser guided  joshi  lexicalized grammars lexical entry encodes cfgforest cfgforest created approximating  constraints word combined surround cfg approximates hpsgforest ob  ing words phrases parsing efﬁciency tained input supertag sequence fully parsed  creased supertagging makes search space hpsg need hypothetical sub  explored parser narrower                 analyses represented complex feature structures    current accuracy supertagger general chart parsers used previous approach input  sufﬁcient use singletagger assigns hpsg parser singlesupertagged know                                                    ijcai                                                    surely subanalysis grows wellformed                   parse tree referring cfgforest                                                                                background                                                                  headdriven phrase structure grammar                                   like  hpsg  pollard sag  linguistic theory based  figure  analysis approximating cfg  lexicalized grammar formalism instance hpsg  grammar mainly consists parts small number  rule schemata large number lexical entries rule  cfgﬁltering  schemata represent general grammatical constraints cfgﬁltering kiefer krieger  torisawa et al  lexical entries lexicon express wordspeciﬁc char  parsing technique uniﬁcationbased grammars  acteristics hpsg lexical entries phrasal hpsg parsing based cfgﬁltering input sentence  stituents represented typed feature structures called ﬁrst parsed cfg approximates original hpsg  signs applications rule schemata implemented cfgparsing ‘replayed’ using hpsg  uniﬁcation signs schemata                  cfg parsing ﬁrst stage faster normal    figure  presents example hpsg parsing sen hpsg parsing uniﬁcation operations replaced  tence “i like it” three lexical entries selected identity checking atomic symbols cfg  ones associated each word lexicon faster operation uniﬁcation  lexical entries “like”and“it” combined applying nonterminal symbols terminal symbols  headcomplement schema resultant set cfrules approximating cfg respectively  phrasal sign verb phrase “like it” combined represent abstracted phrasal signs abstracted lexical en  lexical entry “i” subjecthead schema      tries instantiations rule schemata example    variations syntactic constructions allowed word cfg tree figure  analysis sentence “i  represented different lexical entries associated word like it” approximating cfg corresponds hpsg  lexicon variations include ones parse tree figure  figure  tandt  different subcategorization frames transitive nonterminal terminal symbols approximating  transitive ‘transformational’ variations pas cfg represent feature structures corresponding  sivization whextraction form parse tree positions hpsg parse tree  structed word sequence highly constrained number possible phrasal signs hpsg  lexical entry selected each word       ﬁnite general approximate hpsg cfg                                                        need abstract away parts phrasal signs    supertagging                                     number abstracted signs ﬁnite abstraction                                                        feature structures speciﬁed means restrictor  supertagging process words input sen                                                        shieber  feature structures restrictor takes  tence tagged ‘supertags’ case supertag                                                        feature structure overwrites feature values  lexical template common structure shared                                                        general values allowed features  lexical entries different words                                                          use algorithms proposed kiefer    supertagging formulated sequence labeling task                                                        krieger  approximate hpsg algorithm  types techniques applied                                                        ﬁnds possible abstracted phrasal signs iteratively ap  selected simple approach proposed clark                                                        plying schemata abstracted signs  uses maximum entropy classiﬁer conditional probabil                                                        far sketch algorithm follows  ity supertag sequence  tn given postagged  sentence calculated                            restrict lexical entries obtain set termi                                                            nal symbols             n          n                                                          ←  ni ←    ts                   ·  st                    exp     Φ          ni  ni                                                                                ni ← ni                                                            nn ∈ ni  vector feature weights Φstii fea                                                              schema  ture vector zi normalization constant                                                                apply daughters obtain    clear equation supertagger ne                                                                  mother phrasal sign  glects parsability supertag sequence empiri                                                                                  restrict  cally show combining cfgﬁlter supertag                                                                       ∈ ni  ger possible enumerate supertag sequences                                                                                       ni ←  ni ∪m    case parsable order probability                                                                                 ←  ∪m   → nn  ﬁned eq small additional processing time                                                         ←  ni    feature structures used example simpliﬁed ones restrictor deﬁnes manytoone mapping set  complicated grammar used experiments supertags lexical entries set terminal sym                                                    ijcai                                                                                              figure  hpsg parsing    bols  pretend onetoone mapping tion describes algorithm enumerating maybeparsable  sets allowing multiple occurrences supertag sequences line  disambiguator line   terminal symbols  necessary remember  ing supertag mapped terminal symbol  enumeration maybeparsable supertag  rest paper assume onetoone relation sequences  treat terminal symbols supertags interchangeably                                                        algorithm based jim´enez marzal’s algorithm    important property cfg approximation                                                        jim´enez marzal  enumerates given  language obtained cfg superset set                                                        weighted cfg sentence nbest parse trees  parsable supertag sequences words supertag                                                        sentence order weights algorithm  sequence parsable cfg parsable                                                        input sentence ﬁrst parsed weighted cfg using  hpsg use property eliminate nonparsable                                                        cky algorithm nbest parse trees obtained  supertag sequences output supertagger                                                        enumerating derivations root edge                                                        edge spans input label    efﬁcient multistage parsing algorithm          start symbol nbest derivations edge recur     hpsg                                           sively obtained combining nbest subderivations                                                        subedges selecting derivations  parsing takes input postagged sentence combinations reality necessary calculate   w  w                                  word pos nbest derivations edge chart  tag outputs hpsg parse tree algorithm nbest subderivations enumerated ‘lazy’ manner  follows                                              paper details algorithm    wipi input sentence            obtain nbest parsable supertag sequences instead     assign scores supertagger supertags associ nbest parse trees modify jim´enez marzal’s       ated wi lexicon                        algorithm follows algorithm takes input sentence     ←                                                      ww   list scored supertags each    repeat                                            word tij sij wheretij jth scored supertag       ←                                                     wi sij logprobability tij  given input       ←           th best maybeparsable supertag sequence   approximating cfg ga make weighted cfg                parse  approximating cfg                each cfrule ga weight zero each ‘leaf rule’     select hpsg parse tree disambiguator using tij → wi weight sij  note score deriva       cfg forest step            tion deﬁned weighted cfg equals logprobability    wellformed hpsg parse tree obtained   supertag sequence fringe derivation   return selected hpsg parse tree               fringe derivation sequence preterminals    approximating cfg generally equivalent tij tree derivation ﬁrst phase al  hpsg maybeparsable supertag sequence gorithm parse input sentence weighted cfg  parsable hpsg cases dis using cky algorithm second phase al  ambiguator line  fails ﬁnd wellformed hpsg parse gorithm enumerate nbest fringes derivations  tree supertag sequence tried iter root edge just jim´enez marzal’s algorithm  ation disambiguator fail maybe recursively obtain nbest fringes edge  parsable sequence truly parsable hpsg concatenating nbest subfringes subedges  cfgforest created line  contain tree licensed selecting fringes lazy manner  hpsg disambiguator mistakenly try modiﬁcations basic algorithm  reproduce tree hpsg scribed order make efﬁcient ﬁrst  cases empirically rare decided simply try replace cky algorithm used ﬁrst step  supertag sequence cases rest sec algorithm agendabased bestﬁrst parsing al                                                    ijcai                                                    gorithm split agendabased parsing approximating cfg using cky algorithm disam  stages ﬁrst stage bestﬁrst parsing stops biguation algorithm follows  root edge cases ﬁrst maybeparsable su  ← stack ← tt  pertag sequence truly parsable original hpsg  lengths    cases need bestscored parse tree  Γs fφ  ﬁrst maybeparsable supertag sequence fringe   return fail  second supertag sequence requested start sec  ← argmax · Φs  ond stage bestﬁrst parsing continued a∈Γsf  edges scored greater α − θ added chart  s q←applya s q  α score bestscored parse tree θ  ← pops  userdeﬁned threshold end second stage  return  edge used parse tree score greater α − θ algorithm denotes parser action Γs set  stored chart ﬁnd maybe possible parser actions given stack forest  parsable sequences scored greater α − θ fully vector feature weights Φs  parsing input sentence                           feature vector types parser action    modiﬁcation set weight leaf                                                        shift  pops lexical sign pushes  rule tij → wi sij −si instead sij  note mod  iﬁcation does alter supertag sequences enumerated apply schema applies nary schema  algorithm orders modiﬁcation generation elements replaces resulting  edges small scores suppressed reason mother phrasal sign        ∗                              parsing klein manning              example hpsg parse tree figure  constructed    modiﬁcation agendabased pars following sequence actions shift shift shift                                             ing starts discard supertags word apply schema head complement                   − β       β  scores userdeﬁned thresh apply schema   subject head weight vector  old modiﬁcation lose maybe   obtained averagedperceptron algorithm collins  parsable sequences discarded supertags ap duffy  polynomial kernel degree   pear experiments accu set possible actions Γs determined  racy parse trees created supertag sequences parser ‘goes forest’ Γs cre  low scores generally low decided use ated ﬁrst mapping each element signs sub                 β  thresholding efﬁciency enumeration trees corresponding node selecting actions                                                        lead complete cfg parse tree    disambiguation shiftreduce parsing    includes nodes stack elements       guiding forest                                   mapped ﬁnally eliminating ap                                                        ply  schema   xs schema applicable  use algorithm based deterministic shiftreduce pars                                                        stack elements  ing select hpsg parse tree  constructed given supertag sequence  use disambiguation algorithms deterministic  experiments  parserlike algorithm suited framework section ﬁrst brief summary speciﬁc  need multiple hypothetical sub hpsg grammar used experiments  analyses bottomup chart parsing algorithms avoid testtraining data used implementation  search failure supertag sequence given parser tails supertagger cfgﬁlter disambiguator  maybeparsable cfgforest su finally experiments results discussed  pertag sequence guides shiftreduce parser just like  lrtable inﬁnite lookahead                    enju grammar    deterministic classiﬁerbased approaches disambigua used enju version  hpsg grammar english                                               tion applied dependency parsing yamada miyao et al  design grammar basically                                            matsumoto  nivre scholz  andcfg   follows deﬁnition pollard sag                                   parsing sagae lavie   note schemata deﬁned grammar  binary schemata  apply algorithms hpsg parsing straightfor  unary schemata lexicon grammar extracted  ward manner cause parse failures highly sections  penn treebank marcus et al  constrained grammars hpsg avoid parse failures   sentences grammar consists   need approximating cfg ﬁltering supertag se lexical entries  words  quences making guiding cfg forest          program converts penn treebank hpsg    disambiguator components stack phrasal treebank distributed grammar used  lexical signs queue lexical signs su                                                      make training test data experiment standard  pertags   input disambiguator pos trainingdevelopmenttest split data used  tagged sentence maybeparsable supertag assignment   tt forest created parsing httpwwwtsujiiissutokyoacjpenjuindexhtml                                                    ijcai                                                          description           feature templates              surface form head word     surrounding words          w−                  pos tag head word    surrounding pos tags    p−p−pppp              lexical template head word                       w−w ww p−w pw pw       phrasal category np nx        combinations     pppp p−p−p p−pp                      ssqq                                               ∈                                         − − −                     left dep   right dep                                                                             sleft depsright dep          table  features used supertagger          distance head words                                                             comma exists                                                             comma exists inside                                                             pair srmost pos slmost pos  used hpsg treebanks created section                                penn treebank trainingdevelopmenttest data    number words dominated                                                             valence features ssqandq    implementation details                                                                   table  features used parser  hpsg supertagger  table  lists features used supertagger ta  ble px wx respectively denote pos tag word harmonic mean lp lr timing informa  relative position target word used tion collected amd opteron server ghz  feature set used ninomiya et al’s hpsg supertag cpu parameters β θ manually tuned  ger comparison theirs ing development set β  log θ  log  meaningful number supertags  table  lists results parsing experiments  number lexical entries                          test set table lists reported results  cfgﬁlter                                             test set hpsg parsers grammar                                                        ninomiya et al’s parser model iii ninomiya et al  created approximating cfg enju grammar                                                         supertaggerbased hpsg parser brieﬂy  kiefer krieger’s algorithm examples features                                                        explained section  miyao tsujii’s parser cky  restricted approximation phon phonology fea                                                        style hpsg parser miyao tsujii bothparsers  ture synsemlocalcont    semantic structures                                                        use maximum entropy models disambiguation  phrase synsemlocalcatheadagr       agree                                                        main difference inclusion supertag  ment feature cfg contains  terminal symbols                                                        ger ninomiya et al’s parser higher efﬁciency   nonterminal symbols  rules                                                        approach clear table runs  disambiguator                                         times faster ninomiya et al’s parser comparable  table  lists features used disambiguator features  accuracy   adaptations features used sagae lavie’s test set sentences ≤  words method                                                                                                         cfg shiftreduce parser sagae lavie  fea wellformed parse  sentences  tures  adaptations ones used miyao tsujii’s preliminary experiments development set  ckystyle hpsg parser miyao tsujii  feature rate successfully parsed sentences reached nearly    includes types valency constraint read chose larger values β set  phrasallexical signs example lexical sign tings average parse time signiﬁcantly increased  ditransitive usage “give” extract features “sub score did improve recall slightly im  jectnp” “complementnp np”                      proved precision slightly deteriorated example                                                        β   log  sentences development    experimental results                             set got parse average parse time  ms  evaluated speed accuracy proposed fact means ﬁrst maybeparsable supertag se  method sentences test data ≤  words  quence assigned low probability supertagger  sentences ≤  words  sentences measured enumeration algorithm needs generate edges  accuracy parse results precision lp til ﬁnds sequence hpsg parse created  lr labeled predicateargument relations output sequence accurate  parser miyao tsujii  details table  shows cumulative percentages sentences                                                        parser wellformed parse cer  deﬁnition predicateargument relations score                                                        tain number maybeparsable supertag sequences ex    appear training treebank periment development set  ‘effective’ size tag set  rest parameter values experiment   supertags appear training data assigned sentences ﬁrst maybeparsable supertag sequence  low probabilities supertagger rarely used    si qi denote ith elements stack enju parser ver httpwwwtsujiiissutokyoacjpenju  queue snleft dep resp snright dep denotes sentences parser failed collected par  cently lexical dependent head word sn tial parse results applying disambiguator guiding  left resp right sn’s head snlmost pos snrmost pos forest best supertag sequence evaluated predicate  denotes pos tag leftmost rightmost word sn argument relations identiﬁed partial parse results                                                    ijcai                                                    
