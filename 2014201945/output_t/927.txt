     improved      knowledge      acquisition    highperformance         heuristic   search                                 jp bekmann    achim  hoffmann                              school   science engineering                           university new  south wales nsw     australia                      national ict australia nicta  atp nsw     australia                                    jbekmannachimcseunsweduau                        abstract                          strategies allows stop knowledge acquisi                                                        tion process time smaller knowledge base kb      present new incremental knowledge acquisi                                                        results effective search process ﬁnd      tion approach incrementally improves                                                        satisfactory near satisfactory solution challenging      formance probabilistic search algorithm                                                        problem instances incremental additions kb improve      approach addresses known difﬁculty tuning                                                        effectiveness search      probabilistic search algorithms genetic al                                                          discussion present novel technique      gorithms simulated annealing given search                                                        varying ga mutation strategy based execution history      problem introduction domain knowledge                                                        having implications work gas general      show approach effective develop                                                          knowledge acquisition process build idea      ing heuristic algorithms difﬁcult combinatorial                                                        ripple rules  allows incrementally      problems solving benchmarks industri                                                        reﬁne given initially knowledge base ripple      ally relevant domain vlsi detailed routing                                                         rules rdr ensure knowledge base      paper present advanced techniques  amended way does deteriorate accuracy      improving knowledge acquisition approach     previously seen instances      present novel method uses domain     variant rdr signiﬁcant extension rdr      knowledge prioritisation mutation opera approach introduce expanded knowledge acqui      tors increasing ga’s efﬁciency noticeably   sition process help expert ﬁnd examples                                                        past search history quality kb needs atten    introduction                                       tion work based   searching good optimal solutions complex section  provide short overview genetic algo  combinatorial problems challenge artiﬁcial rithms rdr followed section   telligence research ai’s earliest days    scribe framework heureaka section  introduces    long recognized effectiveness case study heureaka applied detailed rout  particular search approach depends chosen rep ing industrially relevant problem vlsi design dis  resentation certain characteristics problem cuss experiments results section  demon  solved date systematic approach avail strating approach successful conclusions fol  able allows efﬁciently engineer specialpurpose low section   search strategy given search problem    paper present approach allows humans  background  articulate intuition search effectively discuss approach combining gas  given search problem appears promising ap knowledge acquisition start brief summary  proach humans good intuitions areas  ﬁnd acceptable good solutions search problems  search manually                                 probabilistic search genetic algorithms     embedded approach probabilistic search number evolutionary algorithms exist base ap  framework genetic algorithms ga gas proach genetic algorithms algorithm  reputation general purpose practice requires basic gas relatively easy implement solution candi  usually substantial adaptation effort search problem date given problem instance encoded genome  hand complex problems process set genomes makes population potential solu  months order allow ga ﬁnd acceptable solu tions ga performs search through solution space  tion reasonable time                          modifying population genomes guided evolu    chose probabilistic search algorithm em tionary heuristic suitable solution identi  bed problem speciﬁc knowledge effective search ﬁed search terminates  gas usually start randomly initialized population able maintained initialised default conclusion  individuals guide search ﬁtness function node’s rule condition satisﬁed conclusion  individuals probabilistic fashion using operators writes current conclusion exceptlink exists  selection mutation crossover ga attempts direct followed corresponding child node evaluated  search promising areas ga maintains certain ifnot link followed exists cor  population size replacing ﬁt individuals newly gen responding child node evaluated node reached  erated ones new individuals generated mutation link follow current conclusion  crossover based parent individuals high ﬁtness returned result    generality ﬂexibility gas ap  plied domains demonstrating effectiveness true   hard problems   complex domains sig       niﬁcant challenges generic ga techniques scale                                                                                                 includes high sensitivity problem encoding                                                                                                false         false  operator formulation selection strategies selection                                                                               ef  hij  operator weightings population size running time    practice substantial tuning ga nec                                                            figure  simple rdr structure dashed line  essary augment generic algorithms                                                                                                 ade    approach use encoding prob indicates path taken  rule executed                                                               bold box indicates action added  lem binary code seen conventional gas adghij  instead encoding direct representation solution  better description crossover operator  designed representation effective figure  shows simple rdr tree structure bold  maintaining subsolution coherence genome rule user added case  identifying areas genome appear ﬁtter ditions adghij hold causing action executed instead  simple effective crossover operator  chose concentrate work mutation operator purpose integrating genetic algorithm   mainly better suited knowledge approach each case genome conclusions ac  acquisition approach                                 tually sequence actions applied genome    approach integrates ga knowledge base  typical rdr implementations kb modiﬁcation  humans codify intuition useful search adding exception rules using conditions  steps strategies given type problem   apply current case current knowl    addition present novel method uses domain edge base inappropriate doing ensured  knowledge prioritisation mutation operators proper performance kb previous cases main  creasing ga’s efﬁciency noticeably tained  sufﬁcient domain knowledge ﬁtness function nesting rdrs allows user deﬁne multiple rdrs  identify parts genome desirable undesirable knowledge base rdr rule use  use knowledge inﬂuence mutation strategy nested rdr tree condition heureaka  show using mutation history identiﬁed action section  nested rdr tree eval  characteristics change mutation selection strategy uated order determine condition satisﬁed                                                        strict hierarchy rules required avoid circular deﬁni    knowledge  acquisition using ripple         tions       rules  rdr   allows add rules knowledge base  heureaka      framework     crementally compromising previously shown sat  isfactory performance kb extension rdr      improving   search  domain   knowledge  allows hierarchical structuring rdrs  “nested rdr” heureaka  heuristic evolutionary algorithm  nrdr  nrdr allows reuse deﬁnitions kb knowledge acquisition framework composed general  abstraction concepts allows ga scheme knowledge acquisition ka component  compact kbs                                            each genome ga population represents potential    single classiﬁcation ripple rules scrdr use solution problem solved searching  binary tree root node called default node ga needs perform ﬁtness evaluation mutation  each node tree rule associated condition genome uses knowledge bases  conclusion usually class  case mutation kb fitness kb ga presents genome  operator application node relevant kb responds suggesting mutation  children attached link ﬁtness score crossover function handled differently  attached socalled ifnot link condition details  default rule default node true ka module handles maintenance kbs  clusion default conclusion evaluating tree contain collections nrdrs nrdrs incremen  case object classiﬁed current conclusion vari tally developed expert through addition rulesthe section contains detailed description pro execution history recreating conditions repeated  cess                                                testing    fitness kb contains rules based past examples  expert review actions applied genome  given expert desirable undesirable traits make modiﬁcations kb heshe feels needed  genomes ga requires ﬁtness value rules modiﬁcations typically adding exceptions  tain various calculations expert adds reﬂect traits nrdr accordance rdr methodology described    mutation kb similarly contains rules accumulated edit existing rule ad  expert recommendations each rule contains action dition new nrdr  executed certain conditions each action traditional ripple rules approach  commands modify genome kb  sumed rule entered correct reason  contains set nrdrs contain rules modiﬁcation rule undesirable side ef  genome presented mutation kb evaluated fects difﬁcult control valid  nrdrs accordance rdr algorithm reasons modifying rules experiments suggest  actions satisfy relevant conditions selected sensible modify rules beginning building  execution nondeterministic element introduced let knowledge base particular deﬁnition mutation  ting expert attach probabilistic weights selected nr operators proved useful option modify rules  drs letting random procedure pick exe  cute allows expert leeway speculate  best actions effectively letting gas heuris  tics “decide” appropriate action    opposed methods related casebased reason  ing gas   expert uses past cases  formulate rules explain improvements using  past examples similar solutions injected evolution  ary process trying extract rules automatically    overall architecture heureaka domain neutral  implementation contains kb management modules ga  graphical user interface range utilities support  ing expert evaluate past searches complemented  smaller component needs implemented  each problem domain containing relevant solution repre  sentation user interface requires small addition  translate representation visualisation    general purpose language extended primitives  make suitable describing domain speciﬁc represen figure  interactive screen allows user inspect  tation rules entered expert speciﬁed using individual genome step through rule application amend  simple language loosely based “c” syntax kb needed  rule conditions use logical expressions actions include  range commands including variables loops refer  ences nrdrs evaluated analogously  advanced features supporting knowledge  function calls section  gives examples rule speciﬁcation acquisition    knowledge   acquisition process           sufﬁciently large kb created based small       heureaka                                        scale evaluation automated methods needed sup                                                        port user’s interaction  overall approach allows user run genetic al  gorithm current kbs monitor inspect genome visualisation strengths using rdr  wards ﬁtness function computed individ approach successful eliciting tacit knowl  ual applied mutation operator appropri edge  rules formulated  atepromising steps                            use justiﬁcation example complex    genetic algorithm started stopped problems described section  visualisation  reset graphical user interface snapshot ga solution important allowing user form  population presented visually user pick intuitive understanding evaluation module  individual closer inspection                  immidiate visual feedback rules applied    figure  shows individual genome inspected trigger functions during execution ga thou  user step through process mutation evaluation sands hundreds thousands rule applications  genome solution ga popu manner genomes possible expert  lation given nondeterministic elements operator selec supervise each case user deﬁne trigger func  tion interactive debugger maintains complete state tion applied each genome during execution  scriptions allowing user step forward backwards ga function’s condition met exception isthrown halting ga’s execution providing pointer created weightings giving preference relevant  individual execution trace recently applied nrdrs ﬁnal stages reﬁning kb  rules                                                allowed  modiﬁcations decided ran                                                        domly  based probabilistic weightings based                                                        problem classiﬁcations saw measurable                                  comparing different kbs improvement search results                                 avg run layout  pin  tracks density                                                        experiments conducted test domain saw                                               minimal kb                                                                              small kb measurable improvement search                                                                                                                                        large kb                                                      identifying genome modiﬁcations                                                                                times genome mutation plays role long term success                                                                     genome immediate result mutation                                total mutations  population size reduction change ﬁtness general gas cope                                note axis abridged compactness                                  large kb reaches  conflicts having large population pool pre                                                        venting premature ﬁtness convergence throw  figure   nrdr  usage figure  “minimal” kb  genomes soon traditional gas hard oth  genome legend shows “small” kb unable erwise account cases given expert  number conﬂicts bet solve problem mature make judgment individual examples using intu  ter arrow nrdr kb solve effectively ition hindsight ﬁtness function augmented  useful er                      bridge interval needed promising mutation come  ror introduced expert  graph error                   fruition  lower                                   problem comes identifying candidate muta                                                        tions order present expert identiﬁed                                                        mutations falling window size  actions    nrdr  usage proﬁle execution statistics kept each prior ﬁtness improvement exceeding given threshold  nrdr  execution recording frequency use collected review expert’s considera  ga  runs comparing proﬁle aggregate use nr tion practice data effec  drs successful vs successful genomes judging tively judge cases hand  ﬁtness function soon eliminated tried using discounted reward scheme  ga population provides impression nrdrs methods help reduce candidate space  “usefulness” role gas lifetime figure  shows able improve matters aspect  frequency selected nrdrs relative genome’s project currently worked  age examples vlsi case study discussed  section                                      advanced  features use knowledge    ﬁt genomes operators high count acquisition  compared ﬁtter genomes operators turn  “high churn” operators  affect large sections preferences choosing parts genome mutate  genome earlier stages ga nrdrs support hinted genetic algorithms section   high entropy allow search cover search introduced novel method choosing parts genome  space genome closer ideal solution mutation ﬁtness function able identify parts  desirable characteristics place nrdrs dis genome undesirable  rupt established “good” conﬁgurations relative usage track modiﬁcation parts time  frequency ﬁtter populations lower         higher preference weighting newly arising prob    characterisation nrdr utility provide lem areas keeping list existing problem  expert rough idea “usefulness” context areas discounting preference weighting each  did contribute somewhat intuition expert devel ﬁtness evaluation comes choosing  oped doing ka quite useful genome mutate normalise weights make  expert introduced modiﬁcation probabilistic choice identiﬁed problems results  nrdr inhibited functioning newer problem areas having higher chance picked  previously  meaning used arriving scheme allow continuity search direc  ﬁt genomes helped catch errors tion potentially overcoming local minima search space  ﬁgure  arrow indicates nrdr               context experimental domain empirically                                                         discount factor gave best results compared    tuning probabilistic weighting nrdrs section   mentioned notion using probabilistic weightings discount scheme giving identiﬁed problem areas  affect ga’s selection nrdrs allows expert equal chance number successful ga trials   “tune” kb heshe good intuition higher successful trials took average half time  action useful entirely sure     complete    experiments identiﬁed set nrdrs  mutation lookahead added feature allows  probably useful various types problems expert make use “mutation lookahead” function inthe rule speciﬁcation function allows compari layout problems groups wires mutually exclusive sets  son genome mutation sets exchanged parents cor  effectively allows local search mutation nrdr responding wires exchanged crossover operator  similar lamarckian learning mechanism evolutionary highly sensitive structure problem  algorithms                                          interaction elements formulation    knowledge base incorporated local search com crossover operator domain speciﬁc plan make  paring ﬁtness genome candidate knowledge acquisition cycle future versions  mutation used rdr point  evaluation using evaluation kb typically  successfully used generalised mutation look user uses ﬁtness criteria number layers  ahead each mutation series  steps each rec ﬂicts layout length wires number vias  ommended  mutation kb used ﬁtness possible crosstalk electronic interference occurring par  values recorded point highest ﬁtness value allel wires useful ﬁtness criteria  sequence picked ﬁnal mutation           mutation kb contains rules designed manipulate     using lookahead mechanism ga trials layout typically resolution  signiﬁcantly higher success rate each successful trial ﬂict identiﬁed using ﬁndconﬂict command primitive  faster converge solution measured overall function returning conﬂict layout  execution time                                                          example  rules applied switchbox routing                                                        problem initially kb built deﬁning operators    case  study   detailed vlsi  routing              ing primitives based node wire manipulation  order demonstrate genetic algorithms enhanced form foundation highlevel concepts  knowledge acquisition used develop algorithms used intuitively expert  solving complex combinatorial problems detailed channel assuming start kb relatively highlevel  routing switchbox routing industrially rele actions deﬁned moveverticalsegmentright  vant problems realm vlsi design chosen horizontalsegmentup applied example ﬁg  demonstrate approach                          ure  action moveverticalsegmentright                                                        unlikely lead promising solution expert    domain  speciﬁcs                                 amend kb suggest alternative action nodes  channel routing problem crp given channel labeled ﬁgure  case user ﬁnd  certain width sides channel connection moveverticalsegmentright undesirable formulate  points each connection point belongs certain electrical rule condition verticaln  horizontaln  net connection points net need phys  right ofnnextn action movehorizontalseg  ically connected each routing wire through mentupnprev rule added exception  channel course nets crossing kb operators referenced deﬁned rdrs  width channel determines wires run kb verticaln returns true seg  parallel through channel length channel ment succeeding node vertical change  termines connection points sides row horizontaln returns true segment  channel furthermore layout tween successor horizontal change column  small number different layers   layers right ofnnextn return true node succeeding  make connection nets crossing possible lies right  adjacent layers connected point using  socalled    switchbox routing problem srp similar crp  usually difﬁcult deals connections  sides solution crp  srp referred layout    genome  encoding genome describes layout  crp srp solution takes form list straight figure  exception created expert replacing ac  wire segments                                        tion moveverticalsegmentright suggested kb ac    initially genome usually represent valid solu tion movehorizontalsegmentupnprev tags  tion wires usually crossing referenced text  crossings eliminated pre  scribed number layers used ﬁtness value  genome reach satisfactory level                     experiments    results    genome  operations individuals ga initialised  random wire layout regard conﬂicts experiments order test approach imple  ga operates genome crossover mutation eval mented tool kb created initial tests  uation ga’s crossover operation currently kb containing  rdrs  rules later tests run  controlled knowledge base crossover  rdrs  rules  rdrs  rules
