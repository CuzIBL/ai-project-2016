        awa  window constrained anytime heuristic search algorithm                             sandip aine      chakrabarti     rajeev kumar                              department science  engineering                              indian institute technology kharagpur india                      sandip ppchak rkumarcseiitkgpernetin                          abstract                          gradually decrementing weight using chosen Δ af                                                        ter each iteration likhachev et al  algorithm      work presents iterative anytime heuris   proposed modify weighted technique se      tic search algorithm called anytime window     lective commitments kitamura et al  ma      awa node expansion localized   jor disadvantages using weighted based techniques      sliding window comprising levels search weighing heuristic introduces nonadmissibility      treegraph search starts depthﬁrst mode  basic characteristics change substantially      gradually proceeds increment   nonadmissible heuristics pearl  dif      ing window size analysis uniform tree ﬁcult establish relation node expansions      model provides useful properties weighing factors wΔ use weighted      algorithm modiﬁcation awa presented     technique lengthy simulations required ﬁnd appropri      guarantee bounded optimal solutions each ate parameter settings applications      eration experimental results  knapsack speciﬁc heuristic remaining path available      problem tsp demonstrate efﬁcacy    search guided gn information pearl      proposed techniques existing anytime     lower bound fnvalue used dis      search methods                                   tinct gn hn components kumar et al insuch                                                        cases weighted techniques directly applicable                                                          hand beam search chosen number    introduction                                       promising nodes each level search treegraph  development optimization methods work selected expansion remaining nodes  time limitations major need modern practitioners fac pruned anytime variants basic beam  ing largesized problems nphard nature search technique zhang  zhou hansen   quirement spawned research direction designing furcy  applied different problems  anytime algorithms dean boddy  algo reasonably good results lack models  rithms work time limitations anytime provide user apriori estimate qualitytime  algorithms expected regularly produce solutions im tradeoff remains problem algorithms  proved quality suddenly terminated return best work present alternative anytime heuristic  solution produced far result               search algorithm anytime window awa local    heuristic search techniques depthﬁrst branch izes global competition performed ﬁxed  bound dfbb approach variants sarkar et size window comprising levels search treegraph  al  zhang  default anytime algorithms nodes lie outside active window  produce stream gradually improving solu sidered expansion point window slid  tions general depthﬁrst techniques suf wards provide depthﬁrst component bestﬁrst  fer excessive node expansions actually search occurs window window size set  reach optimal solutionthe bestﬁrst anytime search algo  start depthﬁrst mode increased iter  rithms broadly classiﬁed categories atively proceeding pure bestﬁrst search algorithms  weighted heuristic search pohl  hansen et al  like solution quality expected improve  zhou hansen  likhachev et al  beam erations larger window size awa use  search zhou hansen  furcy           basic anytime principles depth guided pruning    weighted heuristic search heuristic estimate mul erative relaxation algorithm retains admissibility  tiplied weight ≥  yield fngn   heuristic estimate continues search bestﬁrst  ∗ hn anytime variants weighted series mode given window noted awa  solutions produced iterating cho does need explicit decomposition evaluation func  sen weight hansen et al  zhou hansen  tion fnintog components analyze char                                                    ijcai                                                    acteristics presented algorithm using uniform search algorithm  procedure window  tree model reveals interesting properties  curlevel ←−  algorithm terms heuristic accuracy versus solution  openlist                                                          return bestsol  quality related search complexity                 end    present bounded optimal version awa  select node fnvalue node openlist  algorithm called bounded quality anytime window    insert closedlist                                                         fn ≥ bestsol  bqawa guaranteed produce solutions  return bestsol  prespeciﬁed suboptimality bound each iteration  leveln ≤ curlevel − windowsizethen                                                          remove closedlistinsertn suspendlist  bqawa search backtracks dynamically adjusts  goto line   window size iteration bound restric  leveln curlevelthen  tion adhered                                     curlevel ← leveln                                                         end    demonstrate efﬁcacy presented strategies  isgoaln  optimization problems traveling salesman  bestsol ← fn goal ←  problem tsp  knapsack problem compara    return bestsol                                                         end                                                                             tive results existing anytime techniques like dfbb  each successor node                                                                                                                               calculate fn   ara beamstack search show considerable improvement                                                                 openlist closedlist suspendlist                                                                                  performance                                          parentn  ← leveln  ← leveln                                                                                                                              insert openlist                                                                                                                            openlist suspendlist                                                                                                                             fn   previously calculated path estimation    anytime window algorithm                                                                                                                      parentn  ← update fn  leveln                                                            end  algorithm considers each node equivalent                                                                  closedlist  terms information content performs global compe                                                                  fn   previously calculated path estimation                                                                                           tition partially explored paths select new  parentn  ← update fn  leveln                                                                       node practice heuristic errors usually distance  insert openlist                                                         end  pendent pearl   nodes lying  end  locality expected comparable errors  end  error vary substantially nodes distant  goto line   each global competition performed  localized boundaries tighter pruning size increased predecided manner used grad  obtained better nodes level generally ual increment  window called  competitive small localities expect good algorithm terminated through external interrupts best  quality solutions localized expansions observation solution obtained far returned  forms basis awa localize node expan  sions using sliding window awa algorithm works algorithm  anytime window awa  phases inner loop uses window algo                                                          input  search treegraph start node  routine ﬁxed window size computes solution  closedlist ← φ suspendlist ← φ windowsize ←  calculate  current restriction outer loop algo  fs levels ← inserts openlist bestsol ←∞  window restrictions gradually relaxed obtain iteratively  bestsol ← window window                                                         suspendlist  improving solutions                                    terminate bestsol optimal solution    window routine works prespeciﬁed win                                                           add openlist closedlist suspendlist openlist  dow size window size used restrict active queue windowsize ← windowsize  algorithm given window size ωtheex   goto line   pansions localized following way ﬁrst  end  node level say expanded nodes open  list level − ω suspended anytime algorithm desirable proper  iteration window slides depthﬁrst man ties interruptibility progress ﬁrst property  ner deeper nodes explored window terminates ensures anytime nature algorithm pro  ﬁrst goal node expanded like termination vide solution premature terminations second  open list does contain node having estimated states solution quality improve time  cost cost best solution obtained previous time allocated algorithm eventually  iterations                                           return optimal solution ﬁnite search spaces awa    awa algorithm calls window routine multi adheres properties mentioned starts depth  ple times gradual relaxation window bounds ﬁrst mode backtracking trying obtain fast possi  start window size set  depthﬁrst mode bly suboptimal solutions iteratively increases  window routine terminates awa checks window size produce better quality solutions eventually  nodes suspended previous iteration window size ’optimal  suspended list algorithm terminated return path’ nodes lie active window optimal solution  ing optimal solution open list emptied returned  suspended list moved open list window iterative algorithms provide opportunities attain                                                    ijcai                                                    different tradeoffs through anytime terminations search window size ω  efforts increase substantially reexpansions       ≤    Γ Γ              trolled awa consistent heuristic node ex rgjω ngj min        min   ωn  panded window routine                                                reexpanded later iteration gvalue use search tree model obtain ex  lowered awa requires minimal reexpansion     pressions expected node expansions convergence    noted generalized case awa does probability given ω expected node expansions  guarantee solution each iteration window loop convergence probabilities given window size pre  property requirement easy way attain sented following lemmas  through backtracking moving suspended list lemma  expected number node expansions enω                    open list line algo  solution window size  ωforamary uniform cost search tree  propose better method bqawa depth given  sec  provides solution guarantees                                                                     ln           − Σil  l−i ∗        bounded quality solution each iteration           en   ω      pg glω         im     pn  ω                                                                       Πjl                                                         pg glω     jrgjω    analyzing awa using search tree model                   Πjl       ∗ Πki−                                                         pn ω   jiqijω   rgkω  section analyze qualitytime response win                                           dow algorithm terms uniform cost tree model lemma  expected probability reaching optimal goal  suggested pearl  model search space                                                        node psω window size  ωforamary uniform cost  uniform mary tree  unique start state leaf search tree depth given  nodes grouped parts unique optimal  goal node situated distance               Πjn                                                                         ps ω     rgjω              nodes level suboptimal terminal nodes window  terminates optimal goal node sub try estimate expansion probability values  optimal terminal node reached optimal solution path qijωrgjω heuristic information available  given −gwheren   denotes  assume relative estimation errors eqn  inde                 gi  gn            gi                                                     ≤  ≤  solution path node level trees ttitn ’off pendent random variables bound   course’ subtrees  level removed solution  arbitrary distribution function  path ’offcourse’ node labeled nij wherej denotes     nh∗n  − hnh∗n           level node denotes root level ’off  course’ subtree ti node belongs using node nij depth belonging ’offcourse’                                                        subtree ti figure                                                                                               gnij                                                                      ∗                                                                                                    nij  −                                                                                          similarly ’onpath’ node ngjwehave                                                                                                                                                            gngjj                                                                           ∗                                                                                                   ngjn  −                                                                                                     tn                    chosen error model eqn                                                             fnij − −  nn  −                                                           fn    − gn −           figure  uniform binary tree model             gj                                                                                                                                                                identically distributed random vari  model fig  try quantify expected node expan                                                        ables bounds combining eqn  earlier  sions probability reaching optimal goal node                                                        deﬁnitions obtain  speciﬁc window restriction present termi  nologies                                               qijω − ≤  α − minΓα                                                                        −        Γ              deﬁnition      denotes expansion probability α               min   ωn               ijω ijω                                                                                ’offcourse’ node nij open list  window size ω                                                                                                    −       ≤   −      Γ  −      qijω  fnij  ≤ minΓ  Γminl  ωn       rgjω            min               minlminfn  ∀n ∈ open list                                                                                                        eqns   observe apart     level                                     value node expansion probability depends                                                     minl  ω value minl value given level  deﬁnition  rgjω  rgjω denotes expansion probability bounded minimum maximum possible fvalues  ’onpath’ node ngj open list level consistent heuristic minl                                                    ijcai                                                    function nondecreasing obtain                                                                                               following properties minl                                                                                                                              − en  − ≤ minl ≤                                                                                         minl ≥ minl −                                          observations represent minl function                                                                                                     follows                                                           expected probability convergence                                                                                             window size        minlmaxminl     −         − − sl  le − esl      figure  convergence probability versus window size       sl function  ≤ sl ≤     uniform binary tree height  awa  minl function denotes minimum value set  numbers statistics know increase                                                                                  max density heuristic  set cardinality probability minimum converging          fitting heuristic                                                                                     lower limit increases exponentially implication           suggests increase probability minl             converging lower limit increases exponentially                                                                                             approximated using decreasing function            probably decrease exponential                average node expansions                                                                                              using presented results estimate ex                   window size   pected node expansion optimal convergence proba  bilities chosen error distribution sl function figure  average node expansions versus window size   assume simple linear distribution approximate knapsack problem  sl exponential function assume                                                                                                         size curves fig  show variability dif            ≤              ≤   ≤                    xe                ferent errors convergence probability given                                                                        window size increases heuristic accuracy improve                                                   ment marginal expected node expansions                  slcl   ≤ ≤                given window increases substantially error                                                        fig  observation explained fact  substituting variables eqns   obtain error minl fn values                                                        expected decrease causing relatively small changes                                         qijω rgjω probabilities difference pro                                                                                                       nounced rgjω values ’optimalpath’                                                         nodes expected remain close minl values                                                                     hand expected node expansions increase expo                                                      nentially increase qijω values eqn                                                    increased error ’offcourse’ nodes expanded                expected node expansions                                                       causing appreciable variance node expansions                                                              window size                     conclude section presenting experimental                                                        results average node expansions convergence prob  figure  expected node expansions versus window size abilities changing window size  knapsack  uniform binary tree height  awa           problem using different heuristics max density                                                        ﬁtting based dominates fig    expected values node expansions convergence  probabilities different window constraints figures                                                                          max density heuristic   present curves expected node expansions                 fitting heuristic  convergence probabilities different window size                                      uniform binary tree height  expected values             computed using error boundaries                                                                                                              chosen constants    curves observe node expansions convergence                                                                                 avergae  probability convergence    probabilities obtained independent choice                               explained exponential nature                       window size   chosen sl function rapidly converges lower  limit investigating trends different heuristic errors figure  average optimal convergence versus window size  observe convergence probability versus window  knapsack problem                                                    ijcai                                                    ﬁgures depict average node expansions algo  works principle ara technique  convergence probabilities different heuristics show iden algorithm starts high initial bound  iter  tical trends obtained analytical model atively reduces bound improved solutions uses                                                        bqwa routine algo  obtain intermediate solutions    bqawa  anytime window                    chosen suboptimality bound each iteration                                                        suspended list moved open list weight bound     provable quality bounds                            reduced bqwa rerun improved solutions  awa anytime algorithm attempts algorithm terminates suspended list  produce stream gradually improving solutions iteration  bound obtained solution established sec  tion present modiﬁed version awa termed  experimental results  bounded quality anytime window bqawa     section present empirical results comparing  each solution produced bounded pre  performance awa existing anytime tech  speciﬁed factor  optimal solution bound itera niques dfbb ara beamstack search  tively tightened produce iteratively improving stream formed experiments optimization problems  solutions                                             knapsack euclidean traveling salesman tsp prob                                                        lem time spent usually proportional number  algorithm  procedure bounded quality window       nodes expanded present results terms node ex   curlevel ←− minsus ←∞                           pansions   openlist    goto line   end                                                                                                                                     select node value node openlist          insert closedlist                                                  fn ≥ bestsol fn ≥ minsus ∗                                       goto line  update window size backtrack                   leveln ≤ curlevel − windowsizethen                                                                         closedlist suspendlist update minsus   goto line                                                    average  cost                                                                                 dfbb   level curlevelthen                                                   ara      curlevel ← leveln                                                       beamstack search                                                                                awa   end   goal evaluation window                                                  expansion window                                           nodes expanded    goto line    fn bestsolthen   closedlist openlist               figure  average cost versus node expansions   knap   end                                            sack problem   merge suspendlist openlist increment windowsize   openlist   return bestsol                                      knapsack estimated heuristic ﬁtting   end                                            remaining objects decreasing order costdensities   goto line                                                         performed experiments set  random instances                                                        object  knapsack problem weight costs    achieve prespeciﬁed bounds each iteration individual objects generated randomly  modify window routine obtain bounded quality straint chosen  −  sum weights  window bqwa algo  bqwa routine    figure  present cost versus nodes expansion results  intermediate point minimum fvalue sus obtained dfbb ara beamstack search awa  pended nodes minfsus noted fvalue figure  includes percentage optimal convergence versus  node open list greater  ∗ minfsus node expansion curves ara weight limits  minimization problems open list suspended list initialized  decreased  iteration  merged search backtracks incrementing euclidean tsp used minimum spanning tree  window size ﬁrst solution produced algorithm mst heuristic performed experiments ran  published  bound guarantee bqawa algorithm domly generated set  city problem instances                                                        intermediate tour length percentage optimality results  algorithm  bounded quality anytime window         comparing awa dfbb ara beamstack search                                                        included figures   respectively   input  search treegraph start node initial bound    closedlist ← φ suspendlist ← φ windowsize ←  calculate results obtained  knapsack tsp    fs levels ← inserts openlist bestsol ←∞ observe performance awa superior   bestsol ← bounded quality window   suspendlist                       dfbb ara beamstack search terms    terminate bestsol optimal solution   termediate solution qualities percentage optimal                                                 convergences    add openlist closedlist suspendlist openlist     ←  − Δ                                          table  present average node expansions    goto line                                        ara bqawa applied  knapsack tsp   end                                            different suboptimality bounds results shows                                                    ijcai                                                    
