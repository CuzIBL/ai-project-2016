 bincompletion       algorithms      multicontainer      packing      covering    problems                                      alex fukunaga   richard  korf                                        science  department                                   university california los angeles                                  fukunagacsuclaedu  korfcsuclaedu                          abstract                            paper consider complete algorithms ﬁnding                                                        optimal solutions multicontainer packing problems multi      bincompletion binoriented branchandbound   container packing problems generally strongly nphard      approach recently shown promising  garey johnson  including problems      bin packing problem propose im   covered paper state art complete      provements bincompletion signiﬁcantly im algorithms ﬁnding optimal solutions based branch      proves search efﬁciency show gen    andbound contrast note singlecontainer problems      erality bincompletion packing cover  classical  knapsack problem weakly np      ing problems involving multiple containers   hard pseudopolynomial time dynamic programming al      present bincompletion algorithms multiple gorithms exist cf kellerer et al       knapsack bin covering mincost covering liq previous branchandbound algorithms problems      uid loading problems signiﬁcantly outperform tended “itemoriented” example classi      previous state art show cal algorithm bin packing martello toth algo      bin packing problem bincompletion rithm martello toth  items considered      competitive state art solver     time each node search corresponds decision                                                        regarding assignment item nonfull                                                        tainer contrast bincompletion “binoriented” branch    introduction                                       andbound strategy node represents assignment  nphard problems involve packing set dis set items single container addition standard  crete objects multiple containers “bins” class branchandbound pruning methods combinatorial domi  problems objective pack items set nance criterion used prune search  containers exceeding containers’ capacities paper begins reviewing previous work bin  related class problems goal cover set completion propose improvements  tainers ﬁlling minimal level using cluding generalization nogood pruning method pro  set items containers items posed korf  signiﬁcantly improves search efﬁ  modeled onedimensional objects possibly associ ciency demonstrate generality bincompletion  ated costvalue function refer collectively prob approach presenting new bincompletion algorithms  lems onedimensional multicontainer packing cover multiple knapsack bin covering mincost covering  ing problems multicontainer packing problems short problems signiﬁcantly outperform state art al  multicontainer packing problems ubiquitous model gorithms  ai applications including allocation rationing  resources tasks group agents op  bincompletion  erations research problems cargo loading trans bincompletion binoriented branchandbound strategy  port                                                 exploits dominance properties reduce search space    widely studied instance problem class clarity bincompletion algorithm  bin packing problem given set items numbers extensions context bin packing problem  ﬁxed bin capacity assign each item bin familiarity simplicity focus empirical  sum items assigned each bin does exceed bin work multicontainer problems  capacity example given set items     feasible set set items sum satisﬁes ca    bin capacity  assign   pacity constraint does exceed bin capacity   bin    total say feasible set bin assignment maximal addi  bins optimal solution instance tional item added set making set  sum items  greater  feasible items sorted decreasing order size  bins required                       generate maximal feasible sets include largestitem set search branch apparently investigated recently  point each node search tree root bison algorithm bin packing scholl klein  node represents complete feasible assignment items jurgens scholl et al  hybrid algorithm  particular bin children root represent different tegrates suite complex lower bounding procedures upper  ways completing bin containing largest item bounding heuristics branchandbound algorithm  nodes level represent different complete feasible branchandbound component bison bincompletion  sets include largest remaining item depth algorithm each node corresponds maximal feasi  branch tree number bins cor ble bin assignment limited form martellototh  responding solution bincompletion branchandbound dominance criterion applied follows maximal fea  algorithm starts upper bound best sible bin assignment pair items replaced  ﬁt decreasing solution applies lowerbound heuristic single unassigned item decreasing sum  function prune search assigning items assignment dominated node pruned  time bins branches different maximal feasi korf implemented bincompletion algorithm bin  ble sets assigned each bin            packing using martello toth dominance cri    key making bincompletion efﬁcient use terion showed signiﬁcantly outperformed  dominance criterion maximal feasible sets allows martellototh itemoriented branchandbound algorithm      consider small subset           korf  improvements achieved using                                                           ¡    let  ¡ feasible sets elements efﬁcient algorithm generating undominated bin  partitioned subsets subsets matched assignments nogood pruning korf   elements   sum elements  each subset doesn’t exceed corresponding element                                                                extensions  bincompletion      set dominates set ¡  words elements                                                          nogood  dominance   pruning      ¡ packed bins capacities ele                                 ments  set dominates set ¡  example let suppose bin packing instance numbers       £¢¥¤§¦©¨    ¨  ¨ ¢¤ ¨  ¨    ¦                        ¡                     let                       parti   bin capacity let ¡ represent                         ¤ ¨ ¤§¦ ¤¨                                                                                          ¤          ¤           ¡      tion  subsets                   bin assignment depth                    ¦   ¨    ¨   ¨                                                                                                               ¢                                                                   set dominates   undominated feasible bin assignments ¡                                                                                ¢¤¨                                                            ¤¨  ¦         ¡                                                                        set  given feasible sets contain common ele   ¡            possible assignments      ment   undominated sets need considered bin node depth     assignment bin containing   reason korf korf  proposed following nogood pruning        complete bin containing  dominated set technique exhausting subproblem                                                                        ¢£¤¨    ¦                                                                        swap each subset items dominated set signment ¡     exploring subprob                                                                                 ¢¤¨               corresponding element dominating set lem assignment ¡  assume ﬁnd                                                                                                          ¤ ¦                                                                             ¢¤    ¦          solution increasing total number bins solution assigns ¡      swap                                                                           ¤§                                                                                                                                                                           ¡        dominance criterion proposed martello ¡     resulting solution                                                               ¢¤¨  ¦     ¢¤                                                                 ¡                   ¡      toth martello toth  used branch                                                                                                              ¢¤¨    ¦      andbound algorithm bincompletion exhausted subtree ¡        branchandbound algorithm itemoriented prune branch redundant  exploit dominance property limited way general given node child      particular each item   starting largest ele searching subtree child ﬁrst don’t  ment check single assignment need consider bin assignments assign bin      elements dominates feasible sets containing   items used complete current bin previously          place  elements bin explored child node largest element                                                                        ¤                                                                                  apply reduction remaining subproblem precisely let       set brother nodes                                                                                ¤§                                                                                     use dominance relations prune element placements search tree let      sets items  korf’s bincompletion algorithm korf  makes used complete bin each node excluding ﬁrst item      greater use martellototh dominance criterion assigned bin common brother nodes                                                                                                                                                                                                            particular branching completion bin searching subtree node acb                                                                                           ¡      considers undominated completions               edfa  exclude bin assignment  includes                                                                                                    ig        historically ﬁrst bincompletion algorithm items hg bin swapping                                                                                  aware proposed christoﬁdes mingozzi toth ¡ items results feasible bin assign   liquid loading problem ments rejecting bin assignments redundant  mincost covering problem section  christoﬁdes et number node generations reduced  al  algorithm performs binoriented propose extension idea allows prun  branchandbound considers undominated com ing nodes nogood dominance prun      pletions use weaker dominance criterion ing ndp suppose exhausting subproblem                                                                              ¢k¤¨    ¦          section  subsequent research branchand assignment ¡        exploring                                                                                                ¢l¤¨                                                                                                     bound algorithms multicontainer problems focused subproblem assignment ¡                                                                                         ¢m¤ n ¦      itemoriented approaches bincompletion approach consider assignment ¡     swap    ¤§ ¦             ¤§                                                                             ¡            ¡        end   tend easily solved using heuristics bestﬁt                           ¢  ¤¨ n ¦ ¢  ¤ n                                                                 ¡  solution ¡                            creasing solution heuristic equals      according martellototh dominance crite lower bound search required              ¢¥¤¨  ¦           ¢¤¨  ¦                                   ¡  rion ¡          dominated               need compute undominated completions      exhausted search node three problems considered ob                     ¢  ¤¨     ¦                  subtree ¡            prune search served likely heuristics match      possible improve best solution optimistic bound allow termination search              ¢ ¤¨  ¦                                                                                               ¡                                            instances high  algorithm    general given node child long time complete termi  searching subtree child ﬁrst don’t need nate reasonable time limit spending  consider assignments dominated bin assign inordinate time computing set undominated      ment previouslyexplored child node precisely completions each node signiﬁcant drawback                                                                                           searching subtree node  ex  completely enumerating undominated bin assignments      clude bin assignments dominated items each node memory required store                             da        note assignment dominates alternative approach start search      bin completion node  dominated tree explore children node ﬁrst enumerat                                                         items                                   ing sorting children cases good optimistic    nogood dominance pruning strictly powerful bound lower bound bin packing upper bound  korf’s nogood pruning node pruned nogood prun bin covering multiple knapsack available  ing pruned ndp vice versa course takes relatively little search ﬁnd optimal solution  ndp detect dominance relationships opposed approach result signiﬁcant speedups compared  equivalence relationships ndp incur overhead original scheme generating completions going  node compared nogood pruning current implemen search tree  tation propagates list nogood sets tree hand observed value  generating undominated completions given bin ordering strategy used sort undominated children  check each dominated current node signiﬁcant impact simply traverse  good ignore bincompletion           search tree depthﬁrst ﬁrst enumerating sort    size nogood list increases depth ing children lose beneﬁts ordering search  compare each bincompletion each nogood tree according valueordering heuristic negative  pernode overhead ndp increases depth means impact alleviated hybrid strategy gen  pruning tree pruning erates small number children applies valueordering  lowest utility expensive pruning heuristic recursively calls bincompletion  tree pruning highest utility simple strategy remaining subproblem hybrid incremen  address issue depthlimited ndp ndp tal branching strategy      pruning applied nodes ndp depth limit note absence explicit value ordering  ¡    nodes depth limit korf’s original nogood strategy algorithm used generate undominated chil  pruning technique applied                         dren each problem use adaptation algorithm    section described nogood pruning given korf korf  imposes implicit ordering  ndp context bin packing problem adaptations undominated assignments currently evaluating  technique multiple knapsack bin cover various combinations hybrid incremental branching  ing problem straightforward given dominance criteria various value ordering strategies choices reported  used problems                        paper value ordering strategies number                                                        undominated assignments generated hybrid incre    modiﬁcations  search algorithm    mental branching preliminary  korf’s algorithm bin packing each node  dominated feasible bin assignments generated sorted  multiple knapsack problem  according decreasing sum algorithm branches  completions according sorted order words multiple knapsack problem mkp generalization          largestsumﬁrst value ordering heuristic applied classical  knapsack problem consider ¢ bins ca                                                                                                                                                                                                                     £   £             ¤      each node                                            pacities £         set items weight                                                                                                                                         ¥     ¥§¦                  ¦                                                                                                                                                                  ¨    issue enumerating undominated completions         proﬁt ¨      goal mkp  applying value ordering computing undom assign subset items each bin   inated sets npcomplete korf korf  gives each item assigned bin   algorithm generates undominated bin sum weights items assigned bin does  completions need generate dominated comple exceed bin’s capacity  total proﬁt items      tions intermediate results let  average number assigned bin maximized example sup  items ﬁt container time generate undom pose bins capacity    items      inated feasible assignments bin increases    ﬁrst element each pair      issue bin packing problems large  weight item second element proﬁt                                                                                                                                                                                        ¥        item optimal solution mkp instance ered  uncorrelated instances ¨ uniformly                                                                                                                                                                                                             ¥        assign   bin capacity  distributed ¨   weakly correlated instances uni                                                                                                 item  bin capacity  mkp numerous formly distributed  ¨ randomly distributed                                                                 ©             m                                                               ¥        ¥        industrial applications example problem loading          ¨     strongly cor                                                                                                                                                       ¥                                ¤      ¢ vehicles cargo selected items order max related instances uniformly distributed                                                                                                                                                                                                                                            ¢                                                                  ¨                                                                                                         ¥                                                             ¥        imize value transported items mkp instance ¨      multiple subset sum instances uni                                                                                           g¢                                                                                            ¥                                                              formly distributed  ¨  bin capac                                                                                            ©                                                                                                                                                                                                    ¢              £                                                                                                  ¦        mulknap   algorithm                          ities set follows ﬁrst¦ capacities                                                                                            g¡           g                                                                                  ¨         ¨                                                                                        g            g                                                                                          ¥              ¥                                                                                              ¢             ¢                                                                                                          state art algorithm mkp pisinger’s mulk uniformly distributed                                                                 ¢   ©                           ¢                                                                                                                                                  ¢                     £            £                                                                nap algorithm pisinger   mulknap branchand ¦           capacity chosen                                                                                                                                     ¨                                                                    ©                                                                                                                                                                                                                                                                                                   g                                                                                                                                                                                                                    ¥          bound algorithm each node represents decision                £                                                                                                                                               ensure sum capaci                                                                                                   bin place item leave en                                   ©                                                        ties half total weight sum ﬁrst ¢ capacities  tirely wellknown upper bounds exceeded half total weight instance discarded  mkp recent algorithms including mulknap rely each problem class  instances generated vari      solution surrogate relaxed multiple knapsack prob                                                                         ¤                                                        ous values ¢  trivial instances discarded  lem smkp instance martello toth  pisinger  class uniform random instances  singlecontainer  knapsack problem items require search branchandbound solvers appear      original mkp instance                                                                                            ¢                                                        generated ¤ relatively low pisinger       single container capacity sum capaci                                                                                                                    ¢                                                        martello toth  ¤ ratio mkp  ties containers original mkp instance appears critical parameter determines search dif       knapsack problem npcomplete weakly np                                                                                                                                                       ¢                                                        ﬁculty pisinger shown problems high ¤  complete pseudopolynomial algorithm ratio mulknap highly effective solving large  upper bound computation fast practice each stances instantaneously little search      node mulknap attempts validate upper bound                                                                                     ¢                                                        ¤ ranged   ranged        remaining subproblem distributing set items chosen                                                                                   ¢                                                        hand small ¤ ratios  result hardest  solution smkp bins distribu problems focus hard problems  tion possible violating bin capacities each instance ran mulknap bincompletion  upper bound achieved backtrack bincompletion nogood dominance pruning  search current branch distribution bcndp comparison used pisinger’s mulknap  solving series subsetsum problems code available website  compiled using gcc com  smallest knapsack ﬁlled possible piler optimization settings bincompletion  items smkp solution second smallest code implemented common lisp table  shows  ﬁlled items remainder smkp solution results experiments run ghz amd  entails solution ¢ sub athlon each algorithm given time limit  sec  set sum instances fast practice takes time onds solve each instance fail column indicates  upper bound computation using smkp addition number instances  solved  mulknap incorporates techniques reducing prob algorithm time limit time nodes  lem instance node tightening capacity column show total time spent nodes generated  constraints pisinger  details        successful runs excluding failed runs    bincompletion  mkp                      important indicator performance number failed                                                        runs      deﬁne dominance criterion mkp follows bincompletion bcndp signiﬁcantly outper                                           ¡       feasible bin assignment bin capacity £  sum form mulknap difference performance                                ¢       item weights £                                                                                                      pronounced problem size increased                                                   ¡        let  ¡ feasible assignments dominates                                                                                                dicates bincompletion asymptotically efﬁcient                                  ¡   ¡      ¡ partitioned subsets   each mulknap class problems bc  ndp        ¤£      subset ¡ mapped onetoone necessarily                                                                                     ¥                           sistently outperforms bincompletion signiﬁcant margin       £                                              £                                    element     weight respect number nodes searched signiﬁcant  greater equal sum item weights items                                                            improvements success rate runtimes observed                                  £    ¦£      ¡   proﬁt item greater equal larger problems sets similar results obtained                                §£  sum proﬁts items ¡              items weights proﬁts range     bincompletion algorithm mkp uses  bound reduction techniques mulknap current                                                           httpwwwdikudk pisinger  implementation uses hybrid incremental branching strategy                                                           bincompletion algorithms described paper   generates undominated children time compiled using cmucl version serve point  uses value ordering strategy sorted according reference ported korf’s bincompletion algorithm bin pack  descending order proﬁt sums                    ing common lisp cmucl generated code    evaluated mkp algorithm using  classes ran approximately half speed korf’s code compiled  instances used pisinger pisinger  consid gcc optimization        mulknap     bincompletion  bincompletion  ndp    labb´e      bincompletion  bincompletion  ndp   mn fail time fail time   nodes fail time   nodes        fail time fail time   nodes fail time   nodes   uncorrelated instances                                         instances row                                                                                                                                                                                                                                                                                                                                                   weakly correlated instances                                                                                   instances row                              na   na                                                                                                 na   na                                                 na   na                                         na   na            strongly correlated instances                                                          table  bin covering results times seconds                                                                                                                                      subset sum instances                                 search immediately solved root node                                                     heuristics described labbe´ et al  compute                                                                                lower bound equals upper bound                                                                                                                  bincompletion  bin covering  table  multiple knapsack results times seconds                                                            deﬁne dominance criterion bin covering follows                                                                                                                                                                                                        ¡                                                            let   ¡ feasible assignments dominates                                                                                                    range                                                                                                                                                                                                                                                             ¡                                                                                    ¡                                                            ¡ partitioned subsets      each                                                                                                                                    £¢                                                            item  £    mapped onetoone necessarily                                                                                       ¥                                                                    ¡                             bin  covering  problem                        subset £    sum item                                                                                                                       ¡¤£                                       ¥    ¥                                              ¦             weights subset  greater equal corre                                                                                                                                       suppose ¤ items weights                                                                                     ¡¤£         £                                                        sponding item £ “covers”      ﬁnite supply containers quota ¡  bin covering  problem known dual bin packing problem dominance criterion gives valid pruning                                                        criterion suppose solution bincompletion instance    pack items containers number                                                                                              signs ¡ bin exchange items corre  tainers contain sets items sum ¡    maximized goal distribute ration sponding subsets ¡  result valid solu  items containers possible given tion satisﬁes bins  containers speciﬁed quota satisﬁed note llm apply lower bounding heuristics  total weight items placed container root node apply upper bounds used llm      greater ¡                                       labbe´ et al  each node use hybrid incremen    bin covering model resource task allocation tal branching strategy generates undominated chil  multiple agents goal maximize dren time using smallestsumsﬁrst value ordering  number agents fulﬁll quota model order  industrial problems  packing peach slices compared implementation bincompletion  cans each contains advertised net weight bin covering problem implementation  peaches  breaking monopolies smaller com llm algorithm implementations common lisp  panies each large viable assman run mhz pentium  generated   et al                                         random instances each set items chosen                                                        uniformly range  quota     labbe´ laporte martello algorithm       ran implementations llm bincompletion  state art complete algorithm bin covering bincompletion  ndp each instance time limit  problem labbe´ laporte martello labbe´ et al  seconds instance compared   shall refer llm algorithm llm bincompletion variants larger instances  items  branchandbound algorithm items sorted using sets  random instances table  shows  creasing order size each node represents decision results show number failed runs  bin item leave entirely timed solving instance time  each node lower bounds based combinatorial arguments spent nodes generated excluding failed runs bin  computed remaining subproblem reduced completion signiﬁcantly outperformed llm increasing  ing reduction criteria labbe´ et al  gap performance problem size increases suggests  root node set heuristics applied order compute bincompletion asymptotically efﬁcient llm  lower bound bin packing problem cf korf harder problems bin completion  ndp signiﬁcantly   instances bin covering problem require outperforms bincompletion
