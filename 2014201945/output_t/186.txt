                                          diagnostic reasoning software fault localization                                                                     robert sedlmeyer                                                                  william thompson                                                                      paul johnson                                                                     university       minnesota                                     abstract                                            faults fault localization             present diagnostic model software                                          model partitions diagnostic knowledge   fault localization diagnoatic approach                                       software fault localization task knowledge   fault localization proven effective                                      uspd locate known novel faults diag•  domains medicine digital hardware apply•                                    nosing known faults knowledge base contains   ing approach software domain requires                                   hierarchy faults known occur   extensions heuristic abstraction mechanism                                   programs particular applications domain   infers program function structure using                                  set empirical associations relate fault   recognition transformation tactics                                       manifestations possible causes diagnosing   search mechanism integrates prototypic                                   novel faults knowledge base contains models   causal reasoning faults                                                  implementation alternatives execution behavior                                                                                       functions indigenous domain know•                           introduction                                            ledge sources utilized set localization                                                                                       tactics generate select test fault hypo•          paper present model fault                                   theses   localization program debugging based   troubleshooting paradigm diagnostic                                    ii knowledge program structure function   framework define software fault localization   task follows fault exists program when•                                          knowledge program structure function   output differs expected                                   necessary diagnosis known novel   user descrepancies called fault mani•                                    faults case used confirm    festations task identify cause                                   expectations associated given fault hypo•  each manifestation specific                                      thesis case used trace   effect program repair                                                              violations expected behavior source                                                                                       model knowledge captured           application troubleshooting strategy                                functional phototypes   proven effective constructing intelligent   systems hardware  medical                                            functional phototype consists com•  diagnosis contrast ve rificationbased                                       ponents set recognition triggers list   approaches cf  strategy concen•                                   pre postconditions describing execution   trates computational resources suspect compo•                                    behavior description prototype components   nents applying diagnostic approach                                      topology list constraints   software domain requires extensions                                          components hold recognition proto•  heuristic abstraction mechanism infers func•                                   types defined three levels abstraction   tion structure using recognition transfor•                                 language programming applications levels   mation tactics search mechanism inte•                                   hierarchically organized portion   grates prototypic causal reasoning                                      functional prototype hierarchy describing com•  localize faults                                                                    ponent topology master file priming read                                                                                       mfpr function given figure            program debugging systems evidence   troubleshooting tactics    based comprehensive diagnostic theory   sussman  primarily interested developing   theory skill acquisition examined role   debugging context miller   goldstein  addressed debugging task direct•  ly faults mycroft analyzed tightly   constrained simplicity programs   involved shapiro  addresses realistic   debugging environments formulates theory     current address department tech   purdue university fort wayne indiana    sedlmeyer et al        figure shows mfpr consists single                                  abstraction mechanism test    component file priming read filepriming                                     hypothesis fails related hypothesis    read recognized mfpr con•                                        proposed different fault model applied    straints met input record used                                      tactic abandoned    master record input file used   master file recognition triggers include                                                 functiondriven localization uses output dis•   file primingread file input stmt prototypes                                     crepancies suggest particular functional    language keyword read                                              prototype improperly implemented abstrac•                                                                                        tion mechanism invoked identify                     iii knowledge faults                                            code implements prototype tf pro•                                                                                        totype source code pro•          functional prototypes expected                                 ducing feasible match considered   program structure function fault modals des•                                     intended implementation fault identi•  cribe expected defects program structure                                       fied statement causing failure match•  function fault model embodies knowledge                                       ing process tactic directed   particular implementation error class errors                                   examine particular abstraction level fault   knowledge consists conditions                                     prototypes defined chosen level con•  model applicable set fault hypotheses                                   sidered suspect application function  set related fault models fault hypo•                                      driven tactic directed usually   thesis expected defect functional pro•                                     desirable output discrepancies   totype defects defined missing prototype                                      offer basis prototype selection does   components violated constraints like function•                                    alternative attractive   al prototypes fault models hierarchically   organized figure  details fault model                                               computationdriven localization traces   master file input error                                                              computation particular set program vari•                                                                                        ables computation analyzed extracting                                                                                         program statements directly                                                                                         affect values variables set                                                                                         extraction process known slicing                                                                                          computation followed forward                                                                                         reverse order execution flow faults                                                                                         using abstraction mechanism inter•                                                                                        pret statements slice members                                                                                         abstract functional prototypes comparing                                                                                         expected computational results derived                                                                                                               program abstraction                         iv localization tactics                                                  program abstraction performed matching                                                                                         functional prototypes source code ab•          localization performed using three tactics                                straction expectationdriven   faultdriven functiondriven computation                                        datadriven depending localization tactic   dntvan vaultdrivenn localization directs search                                    selected expectationdriven abstraction matches   finding particular kind fault                                     prototypes code topdown manner recursive•  unexpected endof file functiondriven locali•                                       ly matching components direct match   zataon analyzes particular functional prototype                                    source code previously recog•  error computationdriven localization                                         nized prototypes datadriven abstraction employs   concentrates search computation set                                    languagelevel triggers select prototypes   program variables each makes use abstrac•                                      matching prototypes matched lower levels   tion mechanism section  generate test                                       abstraction serve triggers matching   fault hypotheses                                                                     higher levels functional prototype                                                                                         identified corresponding code bound          multiple localization tactics desirable   three reasons enhance pro•                                               recognitionbased abstraction efficient   bability finding faults different tactics                                    technique limitations recognition   analyze source code different perspectives                                  functional prototype fail three   secondly tactics best fit available in•                                    reasons defect exists source code   formation chosen thirdly each tactic                                      implementing prototype wrong prototype   optimal sense minimizing computational                                     selected source code represents un•  resources particular localization task                                        familiar correct implementation effec•                                                                                        tiveness recognition mechanism depends          faultdriven localization uses fault model                                 exactness triggering process   hierarchy generate fault hypotheses output                                        richness alternative implementation set   discrepancies serve triggers selecting                                       purely structural matching augmented func•  particular fault model salient                                          tional matching behavior program segment   trigger set specific fault model                                     inferred language semantics   associated fault hypotheses given fault                                        compared functional descriptions   model localization continues choosing                                       prototype hierarchy   fault hypotheses invoking                                                                                                                                   sedlmeyer et al                                   vi example                                            hole fis bound  does                                                                                              precede role update loop bound          implemented initial version                                         model program named falosy fault localization                                  match fails   falosy addresses faults master file                                      matching pr read transfile transbuf   update programs  section illus•                                       checking constraint fis update loop   trate falosys reasoning master file                                         role bound gooo does   priming read error                                                                        precede role update loop bound                                                                                                      falosy presented discrepancy list                                   match fpr fails   list representation programs source                                    recognition pr fails   code discrepancy list formally describes                                        fault hypothesis verified   differences expected observed output                                    fault pr missing   abridged trace falosys reasoning given   appendix numbers parentheses refer                                                                  bibliography   line numbers appendix                                                                                         dekleer local methods localization          production antecedents                                          faults electonic circuits mta memo    sets discrepancies used select                                                  initial localization tactic case lhe                                       mgenesereth diagnosis using hierarchic   faultdriven tactic chosen master file                                          design models proceeding second aaa   priming read fault model triggered  falosy                                          conference august    hypothesizes priming read master                                    davis shrobe hamscher wieckert   file missing  abstraction mechanism                                          shirley pol diagnosis based   invoked identify corresponding prototype                                            description structure function    check determine                                          proceeding second aaa coference   previously identified                                          august    recognition mechanism invoked recursively                                       hartlev expert expert   components oi master file priming                                             proceeding ijcai august    read prototype                                                                       patil szolovits schwartz causal                                                                                              understanding patient illness medical           eventually search carried source                                     diagnosis proceedings jca august   level three read statements                                                    selected matching constraints                                        short life based medical consulta•  checked starting lowest level                                        tions mycin american elsevier new york   abstraction hierarchy candidate                                          new york    rejected file identifier used                                     chandrasekaran mittal deep versus   master file  second                                              compiled knowledge approaches diagnostic   candidates rejectee pre•                                          problemsolving proceeding second   cede update loop  candidate satis•                                         aaai conference august    fies constraints recognition fails                                       wertz understanding improving lisp   original hypothesis verified                                                      programs  tcai proceeding                                                                                         ruth intelligent program analysis                                                                                             artifical intelligence vol                                                                                           adam laura debug                                                                                             student programs artificial intelligence                                                                                              november                                                                                          understanding debugging                                                                                             programs international journal manmachine                                                                                             studies vol  pp                                                                                          sussman computational model skill                                                                                             acquisition american elsevier new york                                                                                         miller structured planning debugging                                                                                             environment international journal man                                                                                            machine studies vol                                                                                           shapiro sniffer understands                                                                                              bug mitai memo  june                                                                                         weiser program slices formal psychologi•                                                                                            cal practical investigations                                                                                             automatic program abstraction method                                                                                             university michigan phd thesis                                                                                         dwyer time  update                                                                                             master file communications acm                                                                                             vol   january  
