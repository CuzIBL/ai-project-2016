                        backbone travelling salesperson                philip kilby                      john slaney                       toby walsh                  anu                        nicta anu                    nicta unsw           canberra australia              canberra australia                sydney australia        philipkilbyanueduau           johnslaneyanueduau               twcseunsweduau                        abstract                             backbones                                                        decision problems concept backbone proven      study backbone travelling salesper useful understanding problem hardness ex      son optimization problem prove ample backbone satisÔ¨Åability sat problem      tractable approximate backbone    set literals true model monasson et al      performance guarantee assuming pnp     backbone size appears closely correlated problem      limit number edges falsely hardness parkes  monasson et al  sat      turned practice appears problem large backbone opportunities      backbone present close optimal assign variables incorrectly problems tend hard      solutions Ô¨Ånd systematic methods like davisputnam large      backbone using approximation methods based     backbone means solutions clustered prob      good heuristics demonstrate   lems hard solve local search methods      bone information used guide search  like walksat      optimal solution variance   backbones studied context      runtimes using backbone guided heuristic optimization slaney walsh  backbone      large suggests need combine  optimization problem deÔ¨Åned frozen decisions      heuristics randomization restarts Ô¨Åxed outcomes optimal solutions ex      addition backbone guided heuristics   ample backbone tsp problem set edges      useful Ô¨Ånding optimal solutions occur tours minimal cost concept      help proving optimality                       useful understanding problem hardness                                                        instance cost Ô¨Ånding optimal near optimal solu                                                        tions positively correlated backbone size slaney                                                        walsh     introduction                                                           computing backbone  recent years research makes  search problem hard decision problems difÔ¨Åcult nphard Ô¨Ånd backbone  rich picture based rapid transitions solubility tsp problem optimal tour unique  corresponding thrashing search algorithms crit backbone complete procedure compute backbone  ical constrained problems close ‚Äúphase transitions‚Äù trivially gives optimal tour length complications  cheeseman et al  mitchell et al  picture arise optimal tour unique backbone  clear optimization optimization problems incomplete example suppose disjoint  transition solubility optimal solutions optimal tours backbone  exist strong candidate replace transition Ô¨Ånd optimal tour length using polynomial number  solubility transition backbone size monasson et calls procedure determines backbone edges           al   paper study complexity comput theorem  tsp backbone problem problem  ing approximating backbone look deciding edge backbone tsp problem  ing backbone information help Ô¨Ånd optimal solutions nphard  prove optimality paper focus  symmetric travelling salesperson tsp optimization proof rescale tsp problem opti  problem problem computing shortest tour mal tour remains loss generality assume  visits city intercity distance matrix intercity distances integers problem  symmetric results easily generalise cities multiply each intercity distance nn  asymmetric case                                  gives nn   new bits signiÔ¨Åcant digits eachnumber note requires polynomial space example approximation procedure returns  divide new bits sections each city possible edges returns backbone  length   bits intercity distance city consider approximation procedures limit number  city set jth bit ith section ith bit edges falsely assigned backbone approxima  jth section each tour length encodes list edges tion procedure ‚Äúmajorityapproximation‚Äù iff  visited particular ith section tour length backbone nonempty edges returned come  bits say set represents fact tour backbone come backbone  cludes edges old distance backbone number edges falsely  matrix optimal tours new distance matrix returned  let ci cities tour theorem   np majorityapproximation pro  nected ith city optimal unique tour cedure guaranteed return Ô¨Åxed fraction Œ±  rescaled problem optimal tour unrescaled prob greater backbone edges polynomial time  lem hmaxc minc     maxcn mincni  lexicographically optimal tour unique proof show procedure determine  backbone complete compute polyno graph hamiltonian path designated start  mial number calls procedure deciding edge ing ending vertex polynomial time contradicting   backbone                                     np construct tsp problem sorts    remains open tsp backbone problem shortest tours hamiltonian path start  npcomplete completeness require ing ending vertex corresponding tour length  short witness tour optimal say ‚àí    tours nonempty set  nphard npeasy npeasy deciding backbone edges taken set hand  edge backbone reduced polynomial num hamiltonian path starting ending  ber calls tsp decision procedure garey johnson vertex shortest tour length nonempty  suggest problems nphard npeasy set backbone edges denoted  disjoint  called npequivalent garey johnson  approximation procedure returns Ô¨Åxed  class contains problems belong fraction backbone returns correct  np class property npcomplete decision prob bone edge majorityapproximation procedure  lems unless pnp problem class solved number edges backbone correctly returned  polynomial time pnp problems class number incorrectly returned computing ra  solved polynomial time words tsp tio number edges types returned  backbone  problem polynomial pnp  determine backbone drawn edges                                                         determine hamiltonian    approximating backbone                         path polynomial time                                                          need special gadgets Ô¨Årst ‚Äúbackbone free‚Äù  computing backbone intractable gen connector connects nodes intro  eral able approximate             ducing backbone edges example connect node    sound approximation                              node use following small circuit introduces                                                         new intermediate nodes   marked edges  suppose approximation procedure                                                                                      cost  unmarked edges cost  turns subset backbone edges easy  assuming  np procedure guaranteed                   return Ô¨Åxed fraction backbone polynomial time               ¬†                                                                             ¬†         rescale distance matrix op               timal tour unique backbone complete sound                      ¬†                                                                            jj¬†      approximation procedure called return                backbone edge  say create new tsp collapsing                                                                                      single node  cost ca  node tour goes through permutation  set min ca cb costs edge possible tours edge ap  procedure repeatedly called construct optimal pears backbone note modify  tour edge edge polynomial time                 circuits nonzero edges costs increasing    similar argument shows sound approximation edge costs appropriately draw gadget  procedure guaranteed return backbone rectangular box nodes  edge backbone nonempty polynomial time   second gadget ‚Äúswitch‚Äù circuit uses three                                                        backbone free connector gadgets edges    unsound approximation                            circuit horizontally vertically switch  suppose edges returned approximation procedure modes Ô¨Årst mode tour enters exits  guaranteed backbone limit vertical edges mode tour enters  number edges incorrectly returned exists exits horizontal edges switch circuit contains   polynomial time approximation meets approxima nodes visited modes note  tion ratio returns given fraction backbone backbone edges common modes thegadget show marked edges  epsilon backbone                                          cost  unmarked edges cost  despite negative complexity results backbones  different modes circuit draw easy compute practice study pos  switch gadget square box containing ‚Äúx‚Äù sibility using approximation procedures deÔ¨Åne                                                         backbone tsp problem set edges occur                                                        tours factor    optimal figure                                                         plot fractional size backbone size            xf  f       xf           f                                                    xx           xx                         backbone normalized    random                                            euclidean tsp problems                                                                                                   epsilon vs size backbone                                                                            trials random euclidean tsp      use gadget construct tsp problem                                                                                              trial data  required shortest tours problem n‚àí nodes                            regression line degree   correspond vertices graph    rest ‚àí  switch gadgets graph  edge vertex tsp problem edge     cost  node shall assume  starting ending verticesnodes  respectively     Ô¨Ånish tour zero cost edge node   ‚àí  switch circuits horizon      fraction  nodes epsilonbackbone   tal wires ith switch circuit connected node                                                                                                                                                    ‚â§ ‚â§ ‚àí  vertical wires jth switch                  approximation ratio  circuit connected ‚àí th  th switch circuit     ‚àí  vertical wires st switch cir  cuit connected node  nd switch circuit figure  fractional size backbone yaxis plotted  vertical wires ‚àí th switch circuit connected approximation ratio      random eu  ‚àí th switch circuit node edge costs clidean tsp problems  nodes degree  regression  tween switch circuits nodes switch circuits line Ô¨Åtted  zero edge node  horizon                                                          tours  optimal approximately  tal input st switch circuit cost cost                                                         backbone optimal tours observe similar  unmarked nodes                                                        results nonrandom instances taken tsplib ap    example   graph                                                        pears backbone tsp problem present  edges nodes       near optimal solution heuristics                                                        Ô¨Ånd near optimal solutions short time                                                                      zz                  easy compute large backbone practice                                                                                        ¬†¬†m                                     approximation methods                                                  ¬†¬†                                tsp heuristics used basis                                                                                      approximation method computing backbone com                                    zz                  pute edge backbone commit                                                  edge compute optimal tour throw                                                                                           edge recompute optimal tour edge            tsp problem   derivedm graph            backbone iff Ô¨Årst tour shorter length sec                                                        ond suppose instead computing optimal    hamiltonian path graph follow tour lengths run good heuristic method like lin  corresponding path tsp starting node  ending kernighan  polynomially bounded time  node exit node enter vertical true heuristic good frequently Ô¨Ånd close  wire ‚àí th switch continue through vertical optimal length tours guarantee  wires switch  exit zero cost edge does yields simple approximation method com  node  completes tour length ‚àí  puting edges likely backbone  hand hamiltonian path shortest tests run random euclidean tsp problems size  tour visits nodes  alternating ‚àí  switch    nodes problems unique solu  circuits takes zero cost edge node tions complete backbones exceptions   node  completes tour length           problems size   size   size     similar arguments show  np majority backbones size  table  shows percentage  approximation procedure guaranteed return backbone correctly identiÔ¨Åed using heuristic proceedure  backbone edge backbone nonempty poly percentage ‚Äúfalse positive‚Äù results lin  nomial time                                           kernighan heuristic accurate problem sizes                                                        mean            median      ave approx ratio                     method    timess  nodes   times  nodes      correct                                 bb                                    median                          freqbb                                                            long                             false                                     longish                         positive median                                                                                                 rand                                                                                  short                     table  estimation backbone using linkernighan  heuristic  trials random euclidean tsp prob   table  branching heuristics ‚Äì Ô¨Ånding optimal solution  lems each size  approx ratio mean heuristic  solutionoptimalsolution original problem                    mean            median        limit                                                         method    times  nodes   times  nodes   exceeded  approximation ratios small heuristic good bb                    identifying backbone edges gives falsepositives freqbb               main weakness missing backbone edges           long                                                                              longish                       backbone guided heuristics                                                                                                        rand                       motivation identifying backbone try reduce short                 search example climer zhang use backbone vari  ables asymmetric tsp problems preprocess simplify  climer zhang  second example dubois table  branching heuristics ‚Äì proving optimality  dequen use backbone guided heuristic solve  variable                                                  hard random  sat problems dubois dequen   each edge updated edges higher frequency  following section show whilst backbone guided likely backbone edges branch choice  heuristics helpful Ô¨Ånding optimal solutions edge greatest frequency  use care median runtime good                                                           unused edge tour chosen  long runs suggesting randomization restarts  strategy useful addition show exper long longest unused edge tour chosen  imentally theoretically backbone guided heuristics short shortest unused edge tour chosen  poor comes proving optimality longish method suggested results test  make demonstration direct use method use long Ô¨Årst branches use  solving tsp problems relies heavily branching rand  random edge chosen  non  heuristic method does use ‚Äúcuts‚Äù charac deterministic heuristic run Ô¨Åve times each prob  terise stateoftheart solvers lets compare lem  directly efÔ¨Åcacy various branching decisions    branchandbound solver phases Ô¨Ånding op    use branch bound solver lower bounds pro timal solution proving optimality different heuristics  vided lagrangean relation trees reinelt  better different phases report results separately  upper bounding single deterministic run oropt table  table  used  node random euclidean   testing forward reverse moves blocks tsp problems time limit  seconds each run  size  mst bound enhanced elim table  shows number times limit exceeded  inating edges node incident edges time node results include problems  forced solution depthÔ¨Årst search used time limit exceeded  node having lower bound explored results show ‚Äúheavytailed‚Äù distribution gomes et  algorithm branches edge currently tour repre al  problems solved quickly  senting upper bound edge chosen low median taking long time  ways                                         high average randomised algorithms restarts    bb  exclude turn possible edge solu shown reduce average time nphard problems  tion comparison new objective meisels kaplansky  selman et al   current upper bound new objective reduced wished look ‚Äúpure‚Äù algorithms compar  improvement upper bound ison  improving edge giving largest results show bb heuristic quite effective  improvement chosen improvement Ô¨Ånding optimal terms median number nodes  edge giving largest increase objective visited average quite large indicating  likely backbone edge chosen method beneÔ¨Åt multiple restarts reduced    freqbb  frequency table kept during search each number nodes comes price terms runtime  new upperbound tour created frequency appearence methods long outperform runtime termsof proving optimality bb heuristic performed relatively                                                                                                                        poorly little better random                                                                                                                                                                                                                                            pathological example                                                                                                                                                                                                caution using backbone guided branching                                                                                                                                                                                       sp            heuristics present pathological instance                                problem branch nonbackbone edge instance                                                                                                                                  solved single branch branch                                                                                          Ô¨Årst backbone edges visit exponential number                                      branches proving optimality search space                                                                                          deÔ¨Åned particular algorithm deÔ¨Åne solu                                                         tsp problem optimal tour  minimum   spanning  tion method following algorithm sensible simple                                                          ‚Äì cost   tree ‚Äì cost   predict behavior theoretically lacks  reÔ¨Åned lpbased cuts allow modern tsp codes  solve huge problems fairly standard basic algorithm figure  tsp problem mst  reinelt  following features                                                                                                 uses branch bound                                                                                                                                                          stops lower bound equals upper bound                                                                                                                                                                                                                       upper bound provided current best tour                                                                                                                                          lower bound provided tree relaxation tree                                              simply minimum spanning tree mst extra                                                                                                                                edge added leaf node                                             tree tree contains exactly cycle       complete tour                                                                          edges forced incident single node                                lowerbounding procedure does consider force  ‚Äì mst cost  force  ‚Äì mst cost       edges incident node             tree bound           tree bound     preprocessing identiÔ¨Åes nodes       figure  forcing edges forced edges bold      ‚Äúuseful‚Äù incident edges forced      solution ‚Äúuseful‚Äù edge deÔ¨Åned edge      cost available upper bound edge forcing edgec  solution forcing  gives      cost greater estimate entire tour mst cost  tree connected using edge      used optimal solution initial upper like   cost  giving lower bound       bound calculated using tour     clones  forced                                                        solution lower bound approach    tsp problem given figure node  upper bound edges clones forced  ‚Äúcloned‚Äù arbitrarily times cloned nodes forcing  leaves problem looks similar    clones connect each neighbour cost  original backbone edges round perimeter  node  cost  clones cost  arcs msttree uses ‚Äúspoke‚Äùtype edges  shown cost   used node  gives unachievable lower bound  optimal solution upper bound graph given backtracking forcing  gives lower  tour      cost  minimum span bound parent problem new upper bound  ning tree shown figure cost  bold using cost  edges lowerbound  edges   Ô¨Åxed preprocessing upper stop recursive argument shows  onetree adds example  cost  lower right branch completely explored  bound                                excluded backbone edges forced    forcing nonbackbone edge  excludes ‚Äúspoke‚Äù forced algorithm moves branch  edges nodes  node   edges incident edge   optimal deterimend  mst shown figure cost  tree backbone heursitic need visit exponential number  bound using edge   connect  branches solve problem  lower bound upper bound branch  bound algorithm completes  symmetric  argument  chosen branch node proce  related work  dure terminates immediately hand branching slaney walsh demonstrated cost Ô¨Ånding op  backbone edges force edges like   timal near optimal solutions postively correlated  cloned described arbitrarily backbone size slaney walsh   edges figure shows effect lower bound showed cost proving optimality negatively cor
