                   delayed duplicate detection extended abstract                                                       richard korf                                             science department                                         university california los angeles                                                  los angeles ca                                                       korfcsuclaedu                              abstract                                each node stores usedoperator bit each op                                                                 erator indicate neighboring state reached        bestfirst search limited memory                operator generated exam•       needed store nodes order detect dupli•           ple slidingtile puzzles require bits each        cates disks greatly expand             state each direction tile        storage available randomly accessing disk          parent node expanded children        impractical checking newly               reached unused operators generated par•       generated nodes soon generated            ent node deleted memory each child node        append disk file sort              operator generates parent marked used        file finally scan sorted file pass        duplicate states open list        detect remove duplicate nodes                copy kept operator marked        speeds searches fit entirely            used copy marked used retained copy        memory improving cache performance                closed list stored reconstructing so•       implement idea breadthfirst search          lution path requires additional work korf         performing complete searches             korf zhang  ways        slidingtile puzzle disk peg                                                                    memory required frontier search propor•       towers hanoi puzzle                                                                  tional maximum size open list width                                                                  problem space size space                                                                  example grid space mentioned    introduction problem                                    width space grows linearly search   bestfirst search algorithms breadthfirst search     radius entire space grows quadratically   bfs dijkstras algorithm dijkstra            example width ndisk peg towers   hart nilsson raphael  store node        hanoi space states entire space   generated open list closed list      contains states frontier search limited   reason doing detect duplicate nodes        memory required store open list   avoid expanding state result   algorithms limited available memory           delayed duplicate detection ddd      problems memory limitation   avoided depthfirst searches dfs depth           hard disks hundreds gigabytes storage   iterativedeepening dfid iterativedeepening       available dollar gigabyte   ida korf  dfs generate ex•               times cheaper memory high   ponentially nodes bfs example             latency disk behaves like sequential     rectangulargrid problem space bfs generate        device magnetictape drive large capac•  nodes radius dfid generate           ity high bandwidth accessed se•    nodes ways detecting            quentially quickly detect duplicate states search   duplicate nodes dfstaylor korf          algorithm nodes usually stored hash   apply problem spaces                               table designed accessed randomly                                                                    solution problem checking    frontier search                                              each newlygenerated node duplicates soon                                                                  generated append each node disk file containing   algorithm called frontier searcikorf  korf        previously generated nodes point later sort   zhang  saves open list nodes          file bringing nodes representing   frontier search closed list nodes       state scan sorted list nodes   expanded saving memory              pass merging duplicate nodes       poster papers                                                                                                          breadthfirst frontier search                              slidingtile puzzles    simple example breadthfirst frontier       schofield  published complete breadthfirst    search delayed duplicate detection bfs normally      search   puzzle completed bfs    implemented fifo queue implement             slidingtile puzzles thirteen puzzle    disks files input file output file ini•  table  shows results column gives    tially input file contains initial state read dimensions puzzle second    each node input file expand write      column gives number moves needed reach    children output file duplicate checking      solvable states starting blank corner posi•   input file exhausted delete       tion worstcase optimal solution length   point output file contains nodes      goal blank corner column   depth including duplicate nodes sort         gives number solvable states xy   nodes output file state representations       fourth column gives width problem space   brings duplicate nodes representing         maximum number nodes depth   state linearly scan output file   merging duplicate nodes oring used operator            size moves total states max width   bits write copy each state new input file          deleting output file completes             level breadthfirst search algorithm con•            tinues expanding nodes input file doesnt           generate nodes output file                                                                                                sorting disk files                                                                                                                algorithms sorting disk files wellknown   garciamolina ullman  widom  pp                        table  slidingtile puzzle results   basic algorithm read unsorted   file fit memory sort memory using quick•     puzzles largest   sort example write sorted portion         solve memory implemented   file new subfile continue entire original      standard bfs algorithm using bit memory   file read written set sorted sub•       state breadthfirst frontier search delayed   files sorted subfiles merged pass   duplicate detection standard bfs required    storing head each file memory writing       minutes frontier search ddd required   lowest record final sorted output file                    minutes  megahertz sun ultra  work•                                                                 station demonstrates ddd frontier search    ddd memory                                              useful problems fit memory                                                                    fourteen puzzle largest   surprisingly delayed duplicate detection useful       search exhaustively  gigabyte disk    nodes fit memory resulting reduced run•        bytes state problem required  gigabytes   ning time improved cache performance            disk storage ran  hours  minutes   standard implementation breadthfirst search mem•        ratio problem size problem width   ory open list stored hash table each           illustrating advantage frontier search   new node generated looked hash table   results cache miss hash func•       towers hanoi   tion designed randomly scatter nodes ddd          standard peg towers hanoi problem   implementation doesnt use hash table single          simple algorithm guarantees shortest path   fifo queue memory reading nodes head            pair states peg towers hanoi   queue appending tail level        puzzle known reves puzzle interest•  search completed queue sorted mem•        ing exists algorithm finding solution   ory using algorithm quicksort sorted       conjecture generates optimal solutions   queue scanned merging duplicate nodes advan•          conjecture remains unproven van liefvoort    tage approach queue accessed       contains good bibliography problem szegedy   head tail points during        gives bounds apeg version in•  quicksort memory references reside        clude unspecified constant exponent   cache reducing running time                             slidingtile puzzles paths pair                                                                  states evenodd parity algo•   experiments                                                  rithm described section  works correctly                                                                  towers hanoi states   implemented breadthfirst search slidingtile          odd length paths case fron•  puzzles peg towers hanoi problem                tier search delayed duplicate detection fail                                                                                                          poster papers leaking interior search solution       acknowledgments   problem store complete levels search                                                                 larry taylor brought peg towers hanoi problem   time paper details korf                                                                  attention used disk storage breadth     using algorithm able exhaustively                                                                 search duplicate operator strings taylor    search problems through  disks starting                                                                 korf  thanks jianming verifying   disks peg table  shows results                                                                 towers hanoi results research supported   column gives number disks second col•                                                                nsf grant eia nasa   umn shows minimum number moves required                                                                 jpl contract  state   disks peg                                                                 california micro grant    column gives total number states problem   number disks fourth       references   column shows maximum width graph starting   state disks peg cases     dijkstra  dijkstra  note prob•  optimal number moves equals conjectured mini•             lems connexion graphs numerische mathe  mal number moves disk problem took             matik     days run  bytes state required      garciamolina ullman  widom    gigabytes disk space note ratio total        garciamolina ullman widom   number states problem width disk             database implementation upper saddle   problem                                           river nj prenticehall     disks   moves      total states     max width               hart nilsson  raphael  hart nilsson                                                               raphael  formal basis heuristic                                                               determination minimum cost paths ieee trans                                                              systems science cybernetics ssc                                                          korf  zhang  korf zhang                                                          divideandconquer frontier search applied opti•                                                        mal sequence alignment proceedings na•                                                     tional conference artificial intelligence aaai                                                                                                                                                            korf  korf  depthfirst iterative                                                                                                    deepening optimal admissible tree search ar•                                                                                                    tificial intelligence                                                                         korf  korf  divideandconquer bidi•                                         rectional search results proceedings                                        sixteenth international joint conference artificial                                       intelligence ijcai                                    korf  korf  delayed duplicate detection                                    initial results proceedings ijcai work•                                                                   shop model checking artificial intelligence           table  peg towers hanoi results                                                                 schofield  schofield  complete solution                                                                    puzzle meltzer michie    conclusions work                                   eds machine intelligence  new york american el•                                                                   sevier    showed delaying detection duplicate                                                                 szegedy  szegedy  steps   nodes breadthfirst search effectively make use                                                                   peg version towers hanoi game   large capacity diskstorage systems                                                                    solved proceedings th annual symposium   showed combine idea frontier search                                                                    theoretical aspects science stacs   addition demonstrated ideas                                                                     lncs  trier germany springervcrlag   speed search occurs entirely memory using   algorithms completed breadthfirst searches      taylor  korf  taylor korf    slidingtile puzzles  billion nodes peg      pruning duplicate nodes depthfirst search pro•  towers hanoi problems  billion nodes            ceedings national conference artificial in•  peg towers hanoi verified conjecture          telligence aaai    regarding optimal solution lengths  disks               van liefvoort  van liefvoort      current work focussed implementing tech•          iterative algorithm reves puzzle com•  niques complex bestfirst search algorithms       puter journal   dijkstras algorithm dijkstra  hart   nilsson  raphael        poster papers                                                                                                       
