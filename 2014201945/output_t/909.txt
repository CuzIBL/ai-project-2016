                                backdoors typical case complexity                 ryan williams                        carla gomes                           bart selman               science dept                dept science              dept science             carnegie mellon university                 cornell university                     cornell university                pittsburgh pa                     ithaca ny                        ithaca ny                ryanwcsemuedu                    gomescscornelledu                  selmancscornelledu                               abstract                               based planners    somewhat surprisingly                                                                  practical problem instances methods scale        significant recent progress rea•        expect based formal complexity anal•       soning constraint processing methods areas        ysis fact current stateoftheart sat solvers han•       planning finite modelchecking cur•          dle problem instances arise finite modelchecking        rent solution techniques handle combinatorial         planning million variables million        problems million variables          clauses  success methods appears hinge        million constraints good scaling behavior         combination factors  practical combinato•       methods appears defy ex•          rial problem instances generally substantial        pect based worstcase complexity analysis        hidden tractable substructure  new algorithmic        order bridge gap theory prac•         techniques exploit tractable structure through ran•       tice propose new framework studying         domization constraint learning        complexity techniques practical prob•                                                                   developments suggest standard worstcase        lem instances particular approach incorpo•                                                                 complexity analysis does capture true complex•       rates general structural properties observed prac•                                                                 ity typical problem instances encountered practical ap•       tical problem instances formal complexity                                                                  plications theoretical scientists       analysis introduce notion backdoors                                                                  aware limitations worstcase complexity results        small sets variables capture                                                                  explored alternatives averagecase complexity        overall combinatorics problem instance                                                                  smoothed analysis  averagecase analysis        provide empirical results showing existence                                                                  studies computational cost solving problem instances        backdoors realworld problems                                                                  drawn predefined problem distribution anal•       present series complexity results explain                                                                  ysis provide valuable insights demonstrated        good scaling behavior current reasoning                                                                  work uniform random instance distributions ran•       constraint methods observed practical problem                                                                  dom ksat relatively basic distributions        instances                                                                  obtain averagecomplexity results appear                                                                  quite far removed instance distributions en•   introduction                                                 counters practice fact formally defining distribution                                                                  realworld problem instances generally open prob•  interesting ai formalisms reasoning planning    lem smoothed analysis attempts unify worstcase   learning shown worstcase intractable      averagecase suffers limited applicability   eighties early nineties negative complexity re•  works algorithms problems defined dense   sults led extensive search tractable subclasses   fields simplex algorithm applicability   general formalisms unfortunately tractable sub•    smoothed analysis discrete problem domains unclear   classes restrictive realworld applications                                                                    alternative approach pursue pa•  midnineties saw emergence practical                                                                  identify special structural properties common   approach computationally hard problems ai                                                                  known problem instances rigorously show clever   introduction fast satisfiability solvers fast constraint                                                                  algorithms exploit properties informal insights   based reasoning methods  example planning                                                                  special structure currently al•  saw success constraintbased planners graph                                                                 ready used design example branching vari•  plan  satplan  recently heuristic search                                                                  able choice heuristics combinatorial search methods      supported nsf graduate fellowship nsf common feature techniques understanding   aladdin center                                                different groups variables problem encoding      research supported afosr darpa nsf            play quite distinct roles example highest level       satisfiability                                                                                                        distinguish dependent independent vari•  ables dependent auxiliary variables needed ob•  tain compact problem encodings true combinatorics   arises independent variables independent   variables encoding planning domain represent   various operators applicable given state world   dependent variables encode consequences             table  time bounds solving csps various scenarios                                                                          considered work upper bound size   selecting particular operator plan search technique                                                                          smallest backdoor number variables   branches purely independent variables obtain sub•           problem fixed constant empirical results section  suggest   stantial speedups search methods exploit vari•        practical instances backdoor relatively small   able dependencies                                                  fraction size log         powerful intuition design search methods   wants select variables simplify prob•          scenario exhaustive search backdoor sets show   lem instance possible variables              obtains provably better search complexity   assigned values intuition leads common heuristic          backdoor contains certain fraction variables   branching constrained variable terms          show randomized search technique ef•  boolean satisfiability amounts effect focusing        fect repeatedly guesses backdoor sets provably outperforms   tractable substructure problem            deterministic search finally scenario con•  unit clauses sat structure binary clauses sat           sider availability variable selection heuristic   structure true effectiveness approach arises        provides guidance backdoor set strategy   fact setting constraint variables simplifies        reduce search space table  gives high  higher arity clauses satisfied turn         level summary results exploiting restart strategies   shrink eventually binary unary clauses               identify polynomially solvable case                                                                         door contains logn variables believe      general insights incorporated stateof          final scenario closest behavior current effective   theart sat constraint solvers effectiveness            sat constraint solvers formal analysis sug•  demonstrated empirically significant number              gests novel algorithmic strategies warrant   benchmark problems  formal un•                 empirical exploration   derpinning explaining practical success strate•  gies lacking paper introduce formal             hidden structure backbones   framework directly inspired techniques present   rigorous complexity results support effectiveness               backdoors        preview results introduce notion         approach analysis applies sat csp   door variables set variables         problems  sat abbreviation wellstudied   value assignment simplified problem             boolean satisfiability problem csp abbreviation   solved polytime algorithm called subsolver          general problem constraint satisfaction   subsolver captures form polytime simplification pro•  cedure used current satcsp solvers con•                   csp problem characterized set    sider notion strong backdoor setting                                 variables respective domains    backdoor variables leads polytime solvable sub                          list possible values each vari•  problem set problem variables forms trivial        able set constraints constraint defined   door set interesting practical problem instances             subset variables denoting variables simulta•  possess smaller backdoors strong backdoors                neous legal assignments   study backdoors practical problem instances           constraint defines subset cartesian product   identify backdoors contain fraction to•                             simplify notation assume   tal number variables example sat encoding            variables domain use denote   logistics planning problem logistics  cnf contains               size assignment function variables   backdoor  variables total nearly             solution csp complete variable assignment    variables given set backdoor variables             satisfies constraints partial assignment defines   problem instance restrict combinatorial search          values subset variables sat special case   branching backdoor variables search            csp boolean variables   drastically reduced space                                           constraints given form clauses clause                                                                          disjunction literals literal boolean variable     general finding small set backdoor variables                                                                          negation   problem instance computationally hard   problem contribution paper formally              use notation denote simplified csp   show presence small backdoor problem pro•            obtained csp setting value variable   vides concrete computational advantage solving             value constraint involving simplified keeping   analyze three scenarios consider deterministic            allowed tuples assigned let                                                                                                                           satisfiability              partial assignment use denote         satisfiability instance given subsolver algo•    simplified csp obtained setting variables defined   rithm introduce stronger notion backdoor   sat problem corresponds simplifying       deal satisfiable unsatisfiable inconsistent   formula fixing truth values variables   problem instances      goal capture structural properties real world   problem instances start reviewing concept      definition  strong backdoor nonempty subset   backbone satcsp problem introduced         variables strong backdoor   variable called backbone variable solutions           returns satisfying assignment concludes   csp variable assigned value variables    unsatisfiability    called frozen variables  backbone variables   useful studying properties solution space     contrast backbones necessarily set cer•  constraint satisfaction problem                               tain value strong backdoor sufficient solving                                                                  problem example given backdoor sat   definition  backbone backbone        problem search cost order simply check   unique partial assignment  possible assignments means relatively   satisfiable                                                   small obtains large improvement searching                                                                  space variablevalue assignments      contrast variable type kind introduce                                                                    observe independent variables particular kind   backdoors backdoors variable subsets defined re•                                                                 backdoor stated set variables   spect particular algorithm backdoor variables                                                                  variables thought defined   assigned value problem easy                                                                  terms example maximal subset independent   algorithm note contrarily backbone                                                                  variables sat encoding hardware verification prob•  different sets backdoor variables                                                                  lem backdoor unit propagation variables      begin exposition backdoors define sort values directly determined setting indepen•  algorithms mind subsolvers     dent ones    solve tractable subcases general constraint sat•                                                                   key questions concerning backdoors   isfaction problem     definition  subsolver given input csp sat         size backdoor practical problem   isfies following                                               instances                                                                       taking account cost searching        trichotomy rejects input deter•                                                                      backdoor set obtain overall computa•  mines correctly unsatisfiable satisfiable returning                                                                       tional advantage solving csp   solution satisfiable       efficiency runs polynomial time                      address key questions                                                                  show practical problem instances surprisingly       trivial solvability determine trivially true                                                                  small backdoors subsequent section show   constraints trivially false contradictory                                                                  taking account cost searching  constraint                                                                  door provably obtain overall computational ad       selfreducibility determines vari•  vantage using backdoor magnitude   able value determines                          improvement course function size                                                                  backdoor      instance algorithm solves sat in•  stances rejects instances important note  size backdoors   results show paper independent   particular subsolver results hold satis• did empirical study size backdoors sev•  fying properties                               eral practical sat instances using sat solver satzrand      follows let subsolver csp     randomized version satz  satz incorporates power•                                                                 ful variable selection heuristics efficient simplification      consider notion backdoor suitable strategy good subsolver modified satzrand   satisfiable csps                                              trace variables selected branching track                                                                  minimum number variables need set   definition  backdoor nonempty subset vari•     satzrands simplification satisfying assignment effi•  ables backdoor ciently currently modifying procedure   returns satisfying assignment                             handle unsatisfiable instances strong backdoors        intuitively backdoor corresponds set variables   observe satisfiable csp backdoor size   set correctly subsolver solve re•      wc significantly smaller backdoors arise   maining problem sense backdoor witness       practice computational advantage search       satisfiability                                                                                                               instance                     backdoor    fract         following say holds strong backdoors         logisticsd                            unsatisfiable csps modified algorithm         bitadd                              pipe                                  note procedure uses polynomial time csps          qg                                 constant sized backdoor interested case          qg                                backdoor size exists                                                                   following gives simple runtime    table  size backdoors practical sat in•      bound terms     stances        table  summarizes results instances    variety domains  instances    range fastest current solvers chaff     nontrivial solved    previous generation sat solvers tableau  clearly    new solvers better able discover exploit hidden    structure small backdoors fact    table instances fairly tiny backdoors    small fraction variables used un•   lock satisfying assignment conjecture small    backdoors occur realworld problem instances      exploiting backdoors formally     analyze three increasingly powerful strategies     theorem implies small backdoors strong   terministic randomized heuristic branching variable se•  backdoors present substantial speedup   lection meant work csp     results example   instance small fraction backdoor variables   respect subsolver randomized strategy gener•  ally outperforms deterministic high probabil•  ity   number variables   reflects performance gain practice back•       exposition heuristic branching variable selection   tracking sat solvers augmented randomization      improvement polytime bound    strategy yields tighter runtime bounds  visual representation deterministic strategys runtime   requires assume existence good   —  backdoors size considered   heuristic choosing backdoor variables   figure  graph indicates following corollary   case practice                                     case sat proof omitted      deterministic strategy                                     corollary  boolean formulas backdoor size                                                                 algorithm  solves formula   deterministic procedure construed gener•       time    alization iterative deepening runs possible   search trees each depth assume algorithm          seen previous section practice  access particular subsolver running poly•         doors quite tiny variables   nomial time defines backdoor variables  logistics  cnf results real   arbitrary csp instance                                    bearing improved solvability realworld csps     algorithm  given csp variables                  randomized strategy                                                                    better performance results adding randomization      subsets  variables                    speedup formally verifies wellknown fact realworld                                                                 solvers augmenting solver randomization dramat•     perform standard backtrack search just vari•                                                                ically improve performance     ables assignment results   solved subsolver                                          assume subsolver tap runtime                                                                        let polytime computable function     analogous algorithm works finding exploiting     bounds backdoor size parameter   strong backdoors csp prove unsatisfiability simply   later determined idea repeatedly choose random   track assignments variables   subsets variables larger searching   result contradiction determined   subsets backdoor        algorithm  given csp variables   repeat times        randomly choose subset variables     size perform standard backtrack      search variables solvable      return satisfying assignment       analogous algorithm works general sat  isfiable unsatisfiable csps strong backdoors   leaf search tree ends reporting unsatisfiability   unsatisfiable     algorithm stated requires priori knowledge          corrected choosing constant   running algorithm assuming backdoor size    fails run assuming backdoor size       solution     theorem  backdoor size algorithm    finds satisfying assignment probability approach•  ing      proof given sized backdoor             figure  improved exponential time   sat                                                                 size backbone constant fraction number vari•  probability randomly chosen size                  ables runtime alg  deterministic   contains entire backdoor                       randomized form vertical axis function                                                                 curve gives function deterministic                                                                 procedure curve gives randomized procedure                                                                 note randomized algorithm performs expo•                                                                nentially better exponential improvement     setting probability backtracking re•               deterministic algorithm does occur      sults finding solution                      heuristic strategy                       selfreducibility property far considered general systematic ran•  repeating experiment times al•                      domized search strategies finding exploiting  gorithm succeeds probability                    doors practical combinatorial solvers generally                                                                 use heuristics guide variable selection process     show algorithm runs                     noted introduction common principle                                                  time branch variables simplify instance   remains choose minimize expression         effect means heuristics steer variable choice   depends directly evaluate natural cases         variables backdoor set formally                                                                 analyze heuristic guidance         bn  klogu constant runtime          restart strategies heuristic search incorporat•                                                                ing notion variable choice heuristic frame  constant work results sharpened consider case   large runtime optimized constant        randomized depthfirst search dfs solver                  improvement deterministic bound   subsolver running instance having backdoor                                                                 size solver chooses variables branch accord•      constant show                        ing heuristic success probability   runtime minimized resulting                  choosing backdoor variable point                                                                 search use notation dfsh denote                                            time bound                                                                 solver properties   example   case sat   following holds                                            informally restart strategy simply policy restarts                                                                 solver running specified time   corollary  boolean formulas               solution main result gives condition   backdoor variables algorithm  solves formula       polynomial time restart strategy exists dfs          time                                        solving csps small backdoors       corollary function figure       theorem  size backdoor csp        satisfiability                                                                                                      
