                               theory alignment generators                                                                           applications statistical machine translation                                raghavendra udupa         hemanta maji                                ibm india research laboratory new delhi                                     uraghave hemantkminibmcom                        abstract                          previous approaches viterbi alignment problem                                                        focussed deﬁning graph possible alignments      viterbi alignment decoding fundamen  connectivity based local modiﬁcations      tal search problems statistical machine trans best known algorithm decoding terms speed      lation problems known np     translation quality employs greedy search algorithm      hard unlikely exists approaches look polynomial num      optimal polynomial time algorithm ber alignments polynomial time      search problems paper charac   paper characterize exponentially large subspaces      terize exponentially large subspaces solution solution space viterbi alignment decoding      space viterbi alignment decoding each     propose polynomial time optimal dynamic programming al      subspaces admits polynomial time opti   gorithms solve viterbi alignment decoding      mal search algorithms propose local search  search space restricted particular subspace      heuristic using neighbourhood relation exponentially subspaces perform local      subspaces experimental results show al search subspaces suitable neighbourhood      gorithms produce better solutions taking substan lation polynomial bound number      tially time previously known algo  iterations local search experiments show      rithms problems                        algorithms procduce better solutions signiﬁcantly time                                                        current algorithms    introduction                                       introduce notion alignment generator sec                                                        tion  distinct alignment generators  statistical machine translation smt data driven ap length source language sentence each align                                                 proach machine translation brown et al   al ment generator   ≤ ≤ associated                                                                     onaizan et al   berger et al   fun exponentially large subspace alignments  solu                                                                                               damental problems smt brown et al       tion space viterbi alignment decoding written        a∗  argmax ae viterbialignment     union subspaces consider graph                                                      induced set ais neighbourhood relation   e∗ a∗  argmax ae decoding    perform local search graph explicit mathematical               ea                                                        deﬁnition ai neighbourhood relation presented  viterbi alignment lot applications natural lan section  present polynomial time optimal algorithms  guage processing wang waibel  marcu  viterbi alignment decoding particular ai sec  wong  exist simple polynomial time al tion  section  respectively experiments show  gorithms computing viterbi alignment ibm mod search algorithms produce better solutions taking subtantially  els  heuristics known models  recently time current algorithms section   udupa maji showed computation  viterbi alignment nphard ibm models          preliminaries  decoding algorithm essential component smt ibm models  assume hidden alignment                                                  systems wang waibel   tillman ney   tween source target sentences  och et al  germann et al  udupa et al   problem known nphard ibm mod deﬁnition  alignment alignment  function  els  language model bigram model knight       →                                                                     set source positions        unless  np unlikely exist polynomial                                                        set target positions target position  known  time algorithms viterbi alignment decoding                                                                                           lot ﬁnding fast heuristics null position denote aj                                                                                                 ﬁnd acceptable solutions problems         fertility target position alignment φi                 pm                                             lemma    gm gm generators gm    δ aj     φi   target position                                                                          gm  infertile position fertile position let obtained series swap operations       γ −  ⊆      longest range proof follows properties permutations  secutive infertile positions γ ≥  say align                                                 apply sequence swap  operators modify  ment     infertility width γ                                                                                            given generator     source position  representation alignments source positions                 connected target positions      rv  ≤ ≤ corresponds source position                                                             assumed connected null position   brevity denote sequence vi vi    vj  represent alignment loss generality set vj source sentence represented target                                                                                            tuples aj aj   let  − φ sentence represented el   sequence representation alignment tuples                      sorting tuples ascending order using second ﬁeld  key represented sequence  framework      l       l                   jm      non                   jm              jk               common framework solving viterbi  decreasing increasing note  alignment decoding solution space viterbi  possible alignments given   let                                 gm                                                 vu  alignment written ∪gm al  solution  alignment      →      tu                                gm                                                        space decoding approximated ∪ aγ         l                                                                       ples aj     aj      large γ key idea ﬁnd optimal solution  removed                                              exponentially large subspace corresponding gen                                                                                                                                      erator  ag   ag    viterbi alignment  deﬁnition  generator generator bijection gm                   γ       →                           decoding respectively given optimal search algorithm                                                        use lemma  augment search space  representation generators generator gm framework follows  represented sequence tuples     jm note                different possible generators given  choose generator initial generator     identity function gmj  denoted  best solution problem  gm                                                          pick better generator gm swap operation  deﬁnition  gm −→ alignment  gm                    l       l  tuple sequence        jm    said                                 jm                    repeat steps   solution im  generated generator gm tuple sequence     proved      km    jm subsequence     km                                            algorithms  note deﬁnition does account viterbi alignment  infertility width alignment reﬁne                                                         algorithm ﬁnding   good  approximate  deﬁnition                                                        lution  viterbi alignment  employs   subroutine                   γ  deﬁnition  gm −→ alignment said viterbi generator ﬁnd best solution                                                                                                   γgenerated gm gm −→ infer exponentially large subspace deﬁned ag                                                                                           γ  tility width γ                       implementation subroutine discussed section                gm  deﬁnition  aγ                                                         algorithm  viterbi alignment                           γ                  ag       gm −→                               γ                                           ←                                                             true                                                           ∗m                              generator integer γ ≥           viterbi generator                                        gm                                         associated family alignments aγ given ∈   alignment higher score using                                                                               ∗m          gm       gm                                     swap operations     aγ  ∪l aγ                                                                                                       nil   swap   operation   let        generator           break                                                                         jk    jk      jm tuple se  end  quence result swap operation kth     gm ← generator  kth tuples sequence tuple sequence                                                         end      jk     jk     jm new tuple  output a∗m  sequence deﬁnes generator gm relationship  generators given                                                                                 decoding                                                            ml−s                                                           theorem        ∈ aγ l−s φl−s     algorithm  decoding  employs   subroutine                                                                              obtained series shrink merge  decode generator  ﬁnd best solution                                                             gm             γ kgrow operations  exponentially large subspace deﬁned aγ  im  plementation subroutine discussed section                                                                                                    proof wlog assume generator                                                         provide construction phases vth step                                                        construct l−s  gv following manner  algorithm  decoding                                                   vu                      gm ←                                                          l−s           v−                                                         • construct      v−u  employ    true                                                                           l−s         ∗l  ∗m                           m       shrink operation tuple av               decode generator           alignment higher score using             l−s           v−                                                          • construct      v−u  employ       swap operations a∗m e∗l                                                           merge  operation tuple φu        am  nil                                                                            l−s        break                                           • φu   let       vu deﬁne φt   −     end                                               ≤  ≤ −  φu−k−    ≤ ≤ γ                               ←  generator                                      l−s               v−                                                            construct                    apply    end                                                               v−u−k−                                                                  γ  row                 u−k  −    output e∗l                                                       tuple note                                                            consider alignment      −                                                             aligned null position      theory generators                             possibilities vth phase end                                                        mth phase aml−s  section prove important results genera dynamic programs viterbi alignment decoding  tors                                                 based ideas lemma  theorem     structure transformation operations                                                                                                                                 deﬁne set structure transformation operations lemma   aγ   given coefﬁcient  generators application each operations                                                                                            generator modiﬁes structure generator pro        αγ −             αγ  −                                                                            αγ −                     duces alignment loss generality  assume                        αγ −   generator identity generator gm deﬁne                                                                      pγ      structural transformation operations tuple se  αγ                  quence       given alignment proof refer udupa maji             j−   j−i        ∈ aγi   φi   explain modiﬁcations                                                                                                    ag      γ   γγ   introduced each operators jth tuple theorem    γ                γ                                 gj−           gj                      j−i            ji            proof substitute   equation     shrink extend       ∈ aγi      ∈ aγi               ji                                    decode generator  ﬁnds optimal solution                                                                                   gm                                                        possible alignments aγ polynomial time                                gj−            gj        erge          j−i           ji               extend     ∈ aγi       ∈ aγi                                                                                                                                     ji                                    theorem   ﬁxed aγ  Ω        aj                                                                                                               gj−      proof refer udupa maji    γ kgrow  ≤ ≤ γ extend aj−i ∈                                                 γi     viterbi  generator ﬁnds optimal solution                     gj            jik         jik                                                          gm            ∈ aγik aj      ik     possible alignments polynomial time                                                                           γ                                                                                       removing infertile positions end obtain                                                                         lemma    let          gn set genera  following result                                                                                                                                                     gi                                                    tors deﬁne span  ∪i aγl let poly               lemma       ∈ aγ fertile posi nomial ≥   pm exists                                                                   tion iff exists  ≤ ≤ γ  l−s ∈ alignment ∈ span       aγ l−s φl−s                                       proof refer udupa maji                                                        lemma shows considering polynomially    permuting given generator gm identity generator large set generators obtain optimal solu                                                       tions viterbi alignment decoding  viterbi alignment                                      − −        develop  algorithm  subroutine                                 v−                                                                     − ϕ    m−ϕ   ϕ  viterbi generator  ibm   model     recall        sk                     fpe                                                                       ϕ  subroutine solves following problem                                                                                                                                  u−         ∗m                                                                                argmax                        × eu fveu rvu ep                                                              ∈aγ                                                                pu−k  algorithm time complexity polynomial choose operation gives best score                                                sult ϕ ϕ represents best partial alignment  loss generality assume             ∗m                                      far ϕ ϕ represents score  note     l−s  ≤ ≤ γ φl−s    obtained using structure transformation                               u  operations described section  build ϕ ϕ  argmax                                                                             gv  viterbi alignment left right scan tuple se                 ∈aγ  quence left right phases phase                φuϕ φϕ  determine best structure transformation operation determine ϕ ϕ ϕ ϕ  ≤                                                                                                          phase                                                ≤   ≤ ≤    ϕ  ≤ ϕmax  ≤ ϕ  ≤                                                    consider possible partial alignments complete scores alignments multiply each                                                                      ql   φu   ϕ      φ     ϕ   let   ϕ ϕ      ep − γ ≤ ≤                                                                        pu  ϕ ϕ best partial alignment                                                     let   ϕ ϕ score  ϕ number                                                             ˆu ϕˆ  ϕˆ  argmax   ϕ  ϕ   french words aligned partial alignment                                                                                                               l−γ ≤ ≤    key  idea compute  ϕ  ϕ                                                                                                       ≤ ϕ ≤   ϕ ϕ recursively using dynamic programming                  ϕ ≤ ϕmax  vth phase corresponding tuple consider                                                        viterbi alignment ˆu ϕˆ ϕˆ  each structure transformation operation                                                          time complexity    shrink ϕ     shrink operation extends      −  ϕ −  φ score resulting algorithm computes ϕ ϕ ϕ ϕ                                                                                            partial alignment                              lm ϕmax entries need                                                        computed note each entries computed incre                  ca −  ϕ −  ϕ          mentally structure transformation operation                            m−ϕm−ϕ           • shrink  operation requires  time       fvnull                                               m−ϕϕ                                                          • merge  operation requires  time    merge  ϕ     merge  operation extends                                                          • γ kgrow  ≤ ≤ γ operation requires ϕ       −  ϕ ϕ −  score resulting                                           max      partial alignment                                  time ﬁnding best alignment                                                             time update score                  ca −  ϕ  ϕ −                                                       each iteration takes γϕmax time computation                                                                                                     nϕeuφ                                tables takes lm γϕmax  time ﬁnal step              fveu rvu               nϕ−eu                                ﬁnding viterbi alignment table entries takes                                                                                                            γ kgrow let                                  mγϕmax time  algorithm takes lm γϕmax                                                        time practice γ ϕmax constants time com                                                                                              ϕ   argmax − −  −  ϕ     plexity algorithm lm                                                                            space complexity      γ kgrow  extends − −  −  ϕ ϕ                                                                                  ϕ    − −    score resulting lm ϕmax entries each tables      partial alignment                              assuming γ ϕmax constants space complexity                                                        viterbi generator  lm                                                         sk  ca − −  −  ϕ ϕ                                                         ibm  models    extending procedure ibm                                                             models   easy leave reader ﬁg                                       u−              ure modiﬁcations                                                                                eu fveu rvu ep                     u−                                                           note product      ep calculated incre                                      pu−k                                 pu−k                                                        mentally each each iterationq multiplication                                                                                         v−                                                                                                    naive implementation table b∗ ∗ ∗ ∗ takes needs similarly score null  size each element instead implemented table calculated incrementallyq loop                                                                      decisions pointer alignment extended obtain factor ep calculated incrementally  makes size each entry           loop takes  time each iteration  decoding                                                        new    hypothesis                                                                              algorithm subroutine decode generator           ϕ  rv    similar    spirit      algorithm    end phase retain best hypothesis                                                                      viterbi generator    provide details  each   ϕ ϕ ρ phases append  ibm model  popular choice decoding γ infertile words hypotheses hypothesis  assume language model trigram model best score output algorithm  ve target language vocabulary ⊂ ve  set infertile words algorithm employs dynamic   time complexity  programming computes following                beginning  vth phase                                                                          ∗l  ∗ml                      ml l                               argmax              ve  ϕmax  distinct partial hypotheses takes                                              ml                                                     γ                      ∈aγ                         ϕmax   ve ϕmax time extend                                                   hypothesis   algorithm takes totally  let   ϕ ϕ ρ set partial hypotheses                                                             γ       translations ve ϕmax time ve ϕmax  words ρ center cept associated ϕ                                                         γ assumed constant time complexity  fertility  observe scores par                                                            algorithm   tial hypothesis   ϕ ϕ ρ incremented  partial hypotheses extended  space complexity  sequence operations                                                                                                       mϕ    ϕ ϕ ρ sufﬁces work best each phase need max  space assuming  partial hypothesis                             ve ϕmax  constant space complexity  initial partial hypothesis      score  m                                                                initially hypothesis set hypothe                                               sis      scan tuple sequence left extending procedure ibm models   easy  right phases build translation left right  vth phase extend each partial hypothesis  experiments results  employing structure transformation operations let   v−                                                 decoding     ϕ ϕ ρ partial hypothesis  ing extended                                         trained models using giza tool och     • shrink     create  new  partial hypothesis  translation direction french english current set                                                                       γ       ϕ             ϕ   ϕ ρ score score experiments set max      compare       v−                                           results state art decoder used           ϕ ϕ ρ times                                                       greedy decoder marcu och  test data                      − ϕ −  − ϕ        sisted corpus french sentences sentence length          fvnull                                                  − ϕ ϕ             range  −   −       −  each sentence class              new     hypothesis        french sentences table  compare mean                                                   logscores negative logarithm probability each        ϕ   ϕ ρ                                                        length classes lower logscore indicates better probabil    • merge      create  new  partial hypothesis                                                   ity score observe scores algorithm        ϕ ϕ   ρ score score         v−                                          better scores greedy algorithm         ϕ ϕ ρ times                   table report average time required decoding                  ϕ                         each sentence class algorithm faster                            new                                                      greedy algorithm length classes demonstrates                    ϕe         dold                                                        power algorithm search exponentially large      dold distortion probability score subspace polynomial time      tableau expansion  distortion prob                             dnew                       compare nist bleu scores solutions      ability expanded hypothesis inserted                                                      greedy solutions nist scores  better      tableau ρ new center cept                                                        bleu scores  better greedy      associated new hypothesis                                                  solutions        ϕ ϕ   ρ                                           k    • γ kgrow choose words        viterbi alignment                         k      word        ve   create   compare results local search algorithm                                                 giza  och  set γ   ϕ           new partial hypothesis   ϕ  rv                                         max                                           initial generator algorithm obtained            ϕ  rv score                             v−                     solution local search algorithm      hypothesis score   ϕ ϕ ρ times table  report mean logscores alignments                                                      each length class algorithm local                                                  ek fvekd rv − ρa   fv epsearch algorithm scores  better                                                    local search algorithm
