                   order decision diagrams relational mdps                         chenggang wang       saket joshi   roni khardon                                      department science                                              tufts university                                             college avenue                                         medford ma  usa                              cwansjoshironicstuftsedu                        abstract                          compact allowing problems represented                                                        solved efﬁciently      dynamic programming algorithms provide basic      order decision trees decision diagrams      tool identifying optimal solutions markov deci considered literature blockeel      sion processes mdp paper develops rep   raedt  groote tveretina  se      resentation decision diagrams suitable mantics diagrams possible particular groote      scribing value functions transition probabilities tveretina  provide notation ﬁrst order bdds      domain dynamics order relational  capture formulas skolemized conjunctive normal      mdps fomdp developing appropriate op       form provide theorem prover based repre      erations diagrams paper shows    sentation paper adapt extend approach      value iteration performed compactly    handle ﬁrst order mdps particular extend deﬁni      problems improves previous ap      tions handle existential quantiﬁcation numerical leaves      proaches representation combines com   through use aggregation function allows      pact form efﬁcient operations work capture value functions using algebraic diagrams natural      raises interesting issues suitability different way provide additional reduction transformations      representations different fomdps tasks        algebraic diagrams help size small al                                                        low use background knowledge reductions                                                        develop appropriate representation algorithms showing    introduction                                       value iteration performed using decision dia  past years increased grams  veloping relational ﬁrst order mdps examples useful compare solutions propositional  clude symbolic dynamic programming sdp boutilier et ones main difﬁculty lifting ideas rela  al  relational bellman algorithm rebel ker tional domains transition function speciﬁes schemas  sting et al  approximate linear programming conditional probabilities propositional solution uses  fomdps  guestrin et al  sanner boutilier  concrete conditional probability calculate regression  approximate policy iteration fern et al  induc function possible schemas  tive policy selection using ﬁrst order regression gretton ﬁrst ground domain problem hand  thiebaux                                       perform reasoning sanghai et al    sdp rebel exact solution  does allow solutions abstracting domains  methods knowledge working implemen problems like sdp rebel constructions perform  tation sdp hard state formulas general reasoning using decision diagrams  consistent manageable size context situation space constraints proofs details  calculus compared sdp rebel provides prac omitted paper  tical solution rebel uses simpler language probabilistic  stripslike language represent fomdps reason  markov decision processes  ing formulas easier perform               assume familiarity standard notions mdps    inspired successful application algebraic deci value iteration puterman  following intro  sion diagrams add bryant  bahar et al  duce notions notation mdp  solving propositionally factored mdps hoey et al  characterized state space action space aastate  staubin et al  lift propositional adds handle transition function prsjsia denoting probability  relational structure use solution fomdps transition state sj given state si action imme  intuition idea add representation diate reward function rs specifying immediate utility  allows information sharing sharing state parti state solution mdp optimal policy  tions sufﬁcient regularity model adds maximizes expected discounted total reward deﬁned                                                    ijcai                                                    bellman equation value iteration algorithm uses  bellman equation iteratively reﬁne estimate  value function                                                                vnsmaxa∈arsγ       s∈s prs avns     vns represents current estimate value  function vns estimate    themainobservationusedbyhoeyet al               figure  simple fodd                                   represent each rs prs aandvks com  pactly using adds value iteration directly tion variables focus following syntactic  using representation avoiding need enumerate deﬁnition does explicit quantiﬁers  state space implicit equation    deﬁnition order decision diagrams    taking step sdp approach boutilier et al  assume signature ﬁxed set predicates   developed context situation calcu constant symbols enumerable set variables  lus stochastic actions speciﬁed nondeterministic allow use equality pair terms  choice deterministic alternatives way stants variables  separate regression action effects  order decision diagram fodd labeled di  terministic probabilistic choice action each rected acyclic graph each nonleaf node exactly  regression step during value iteration value stochastic children outgoing edges marked values  action ax parameterized free variables x determined true false  following manner                               each nonleaf node labeled atom ttn                                                                         axsrcases⊕                              equality ti variable constant      γ⊕jpcasenjxs ⊗ regrvcasedonj xs  leaves labeled numerical values    rcases vcases denote reward value   figure  shows fodd binary leaves left going                                                                     true  functions compact “case notation” boutilier et edges represent  branches simplify diagrams  al  njx denotes possible outcomes axand paper draw multiple copies leaves    pcasenjxs choice probabilities njx  represent node fodd    regression need maximize action semantics ﬁrst order formulas given relative  parameters each qfunction maximum value interpretations interpretation domain elements  achieved using instance action sdp mapping constants domain elements each  adding negation higher value partitions predicate relation domain elements speci  description lower value partitions leading com ﬁes predicate true way  plex formulas reasoning finally value deﬁne meaning fodd interpretation iinthe  function maximize choice action       following discuss possibilities    solution rebel kersting et al  follows semantics based single path semantics deci  outline uses probabilistic stripslike language sion trees given blockeel raedt   representing fomdps importantly paper uses adapted fodds semantics deﬁne unique path  decision list rivest  style representation value followed traversing relative variables  functions decision list gives implicit maximization existential node evaluated relative path lead  operator rules higher list evaluated ﬁrst ing example evaluate diagram figure   result object maximization step simple interpretation domain    relations  hand regression rebel requires enumerate pqh follow true branch  possible matches subset state partition root ∃x px satisﬁed follow false  action effects reason each separately branch qx ∃x px ∧ qx satisﬁed                                                        leaf labeled  say does satisfy                                                        attractive approach builds mutually exclu    order decision diagrams                      sive partitions states various fodd operations  algebraic decision diagram labeled directed acyclic developed reasons discuss later  graph nonleaf nodes labeled propositional semantics suited value iteration  variables each nonleaf node exactly children cor used paper  responding true false  branches leaves  semantics based multiple paths following groote  labeled numerical values ordered decision diagrams tveretina  deﬁne semantics ﬁrst relative  specify ﬁxed order propositions require node la variable valuation ζ given fodd variables x  bels respect order path diagram interpretation valuation ζ maps each variable x  case function unique canonical representation domain element each node predicate  diagrams efﬁcient manipulation algorithms leading evaluates true false traverse  successful applications bryant  bahar et al  single path leaf value leaf denoted    various ways generalize adds capture rela mapbiζ  tional structure use closed open formulas deﬁne mapbiaggregateζ mapbiζ  nodes case interpret quantiﬁca aggregation function consider possible                                                    ijcai                                                    valuations ζ each calculate mapbiζ andthenwe lower labels recursively combines cor  aggregate values groote tveretina responding subdiagrams according relation   leaf labels   variables universally labels   quantiﬁed easily captured using minimum additional reduction operators context es  aggregation function paper use maximum pecially algebraic fodds want reduce  aggregation function corresponds existential quan diagrams distinguish strong reduction pre  tiﬁcation binary case gives useful maximization serves mapbiζ ζ weak reduction  value functions general case deﬁne preserves mapbi following let represent  mapbimaxζ    mapbiζ                          background knowledge domain exam    consider evaluating diagram figure  inter ple blocks world know ∀x onx →  pretation valuation xy leads leaf ¬cleary  value  maximum  say satisﬁes strong reduction implied branches consider    deﬁne node formulas nf edge formulas ef node label lnletx variables efn↓t  cursively follows node labeled ln incom ∀x nfn → ln node reached  ing edges eek node formula nfn∨iefei true branch followed case  denote true branch node n↓t false connect parent directly true branch  branch n↓f  edge formula true outgoing clear map preserved valuation sim  edge efn↓tnfn ∧ ln edge formula ilar reduction formulated false branch  false outgoing edge efn↓f nfn∧¬ln   weak reduction removing dominated siblings  formulas variables existentially quanti consider node reach  ﬁed capture reachability conditions node edge reach n↓tifn↓t gives better values n↓f    basic  reduction   fodds         groote     able remove n↓f diagram start  tveretina  deﬁne operators reduce giving special case condition  diagram “normal form” total order open predi let x variables appear nfnandy vari  cates node labels assumed operators ables ln nfn consider condition  brieﬂy main properties                 ∀x nfn →∃yln requires valu    neglect operator children node ation reaching extended reach n↓t  fodd lead node remove link let minn↓t minimum leaf value n↓tand  parents directly join operator nodes maxn↓f  maximum leaf value n↓f  consider  label point children additional condition minn↓t ≥ maxn↓f  join remove link q’s parents case regardless valuation know better  merge operator node child label follow n↓t n↓f  hold ac  parent point directly grandchild sort cording maximum aggregation value mapb  operator node parent label ordering determined false branch  violated lp lq reorder nodes locally safely replace n↓f constant value   using copies labels nodes minn↓t changing map symmetric operation  violate ordering                             applied exchanging roles n↓t n↓f     deﬁne fodd reduced operators cases drop node completely  applied following                connect parents directly n↓t ia                                                         ∀   ∃      →  ∃           theorem  groote tveretina                        u v nf     vw  ef n↓t u   let ∈neglect join merge sort operator variables appear subdiagram n↓t v vari                                                        ables appear nf  ↓tand variables  ob result applying fodd ζ                                w                                                        ln u w condition requires ev  mapbiζmapobiζ                                                        ery valuation ζ reaches n↓f valuation ζ   bb reduced satisfy ∀ζ mapb iζ                                                        reaches n↓t andsuchthatζ ζ agree variables  mapb iζ identical                                                        n↓t easy ia follows ib  property  gives soundness property  shows variable y appears subdiagram n↓t  ducing fodd gives normal form holds important special case occurs ln  maps identical ζ condition stronger equality  variable does occur  normal equivalence weak normal form fodd node case condition holds  sufﬁces groote tveretina  use pro choose value holds  vide theorem prover ﬁrst order logic           remove node connecting parents n↓t    combining fodds    given algebraic diagrams substituting diagram n↓t  need add corresponding functions max general case conditions replacing n↓f  imum use binary operation op values constant dropping completely relaxed  represented functions adopt solution space constraints sketch details  propositional case bryant  form relaxed b∃x nfn → ∃x yefn↓twhich  procedure applyp op roots requires reachable n↓t reachable does  diagrams procedure chooses new root label restriction valuations contrast                                                    ijcai                                                                                                          state aa performed current state                                                        a action parameters x predicate parameters                                                        variables allowed tvd                                                          notice tvd simultaneously captures truth val                                                        ues instances px state notice                                                        tvds different predicates separate independent                                                        safely action correlated ef                                                        fects conditionally independent actions                                                        terministic                                                          domain tvd predicate px deﬁned             figure  template tvd                                                        generically figure  idea predicate             −  let    n↓t   n↓f calculate using apply true true “undone” action  relaxed leaves nonnegative false “brought about” action tvds  values using requires condition stronger logistics domain running example given    weak reduction removing dominated edges       figure  tvds omitted ﬁgure trivial    consider fodd nodes sense predicate affected action order  subfodd p↓f formulas satisfy simplify presentation tvds generic  follow q↓t follow p↓t case form did sort diagrams  min    ≥ max                     p↓t         q↓t mapb   deter  notice utilize multiple path semantics  mined q↓t replace q↓t constant  maximum aggregation predicate true true ac     min                       min    ≥ max          p↓t  addition p↓t       q↓f    cording paths speciﬁed disjunction  safe remove completely space conditions free use single path seman  straints omit details general case tics single path tvd capture possibilities    weak reduction uniﬁcation consider fodd  predicate true state different  sets variables x y cardinality ditions tested sequentially bindings             xy denote fodd resulting replacing combined corresponding notion tvd signiﬁcantly  variables x corresponding variables y complicated                     −  sider fodd xy  calculate using  probabilistic action choice multiple path semantics  apply leaves diagram non negative makes hard specify mutually exclusive conditions  ∀                         imapb     mapbxy safely replace ing existentially quantiﬁed variables way specify                                                        distribution restrict conditions ei    decision diagrams mdps                         ther propositional depend directly action parame  follow boutilier et al  specify stochastic ac ters notice restriction interpretation fol  tions nondeterministic choice deterministic al lows exactly path variables  ternatives need use fodds represent valuation aggregation function does  deterministic domain dynamics actions probabilistic interact probabilities assigned diagram show  choice actions value functions            ing choice probability unloads logistics exam    example domain    use logistics problem vari ple given figure   ant boutilier et al  illustrate constructions reward value functions represented directly  mdps domain includes boxes trucks cities using algebraic fodds example given figure   predicates binboxcity tintruckcityand  onboxtruck  obvious meaning reward    value iteration fodds  function capturing planning goal awards reward  general ﬁrst order value iteration algorithm works fol  formula ∃b binb aris true lows given input reward function action  box paris                                         model set  perform following    domain includes  actions load unloadanddrive steps termination  actions effect preconditions met ac  each action type ax compute  tions fail probability attempting ax                                                              vn⊕jprobaj  x ⊗ regrvnajx  load successful version loads executed probability                                                                  ⊕  ⊗         ax    unsuccessful version loadf effectively  qn γ  objmax tn  vn    operation probability  drive action executed  vn obtained maximizing qn                                                                max      deterministically attempting unload probabilities vn   qn  depend raining raining rain regression block replacement consider vn  ing unloads executed probability   nodes fodd each node copy  unloadf probability                     corresponding tvd predicate parameters renamed    domain dynamics  deﬁned truth value dia correspond node’s arguments action  grams tvds action schema aa each pred parameters unmodiﬁed block replacement regression  icate schema px tvd aapx fodd brregressvnajx fodd resulting replacing    leaves tvd gives truth value px each node vn corresponding tvd outgoing                                                    ijcai                                                                                                                                           ≠      figure  logistics domain tvds action choice probabilities reward function regression ab tvds  binbc  onbt  action choice unloadsb∗t∗ cd tvds binbc onbt ac  tion choice loadsb∗t∗c∗ note c∗ action parameter valid tvd tvd tintc  action drivet∗c∗ probability fodd action choice unloadsb∗t∗ reward function                                                        ∗ ∗  value function regression through unloadsb  multiply choice probability fodd                              ∗  ∗  regression unloadf  multiplied probability unreduced result adding outcomes  unloadb∗t∗ reduced result addition notice left branch reduces  using recursive  apply middle dropped multiply γ  perform object maximization add reward         unload     notice object maximization dropped equality right branch special case                                                                      unload  turns value function ﬁrst iteration  case diagram unload                                                                                           ∗  ∗  dominates actions shown block replacement computing through action unloadsb                                                        ijcai                                                    
