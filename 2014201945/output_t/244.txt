                                 optimal soft arc consistency                           mc cooper                           givry   schiex                irit univ toulouse iii france        inra applied math  cs dept france                         cooperiritfr                    degivrytschiextoulouseinrafr                          abstract                          functions different arities preserve problem equiva                                                        lence local consistency offers services local      valued vcsp framework generic opti      mization framework wide range applica  sistency classical csp speciÔ¨Åcally capable pro                                                        ducing strong incrementally maintained lower bounds      tions soft arc consistency operations transform                                                        crucial efÔ¨Åcient branch bound search      vcsp equivalent problem shifting      weights cost functions principal aim plagued absence uniqueness Ô¨Åxpoint                                                        socalled arc consistent closure fact Ô¨Ånding      produce good lower bound cost                                                        closure maximizes lower bound nphard      solutions essential ingredient branch                                                                                          bound search                                     problem cooper schiex   led def                                                        inition large number variants arc consistency di      soft ac complex tradi      rectional cooper  existential larrosa et al       tional ac closures Ô¨Åxpoints cyclic cooper  each using different strategies try      Ô¨Ånding closure maximum lower       closer optimal closure      bound shown nphard integer                                                          paper show relaxing condition      costs cooper schiex                                                         costs integers allowing simultaneous cost      introduce relaxed variant soft arc consis ments cost functions possible deÔ¨Åne new      tency using rational costs case optimal class local consistency Ô¨Ånding optimal closure      closure polynomial time polynomial time problem large class problems      Ô¨Ånite rational costs associated lower show lower bound produced better      bound shown provide optimal arc consistent previous integer arc consistency variants provides      reformulation initial problem             optimal reformulation initial problem      preliminary experiments random structured    better understanding local consistency wc      problems reported showing strength sps preliminary experiments optimal soft arc consis      lower bound produced                             tency random structured wcsps show                                                        used practice preprocessing algorithm    introduction  valued constraint satisfaction problem schiex et al  preliminaries   generic cost function optimization framework  applications vcsp deÔ¨Åned set variables valued csp extends csp framework associating costs  Ô¨Ånite domains set local cost functions soft tuples schiex et al  general costs speciÔ¨Åed  straints associate costs tuples goal means socalled valuation structure deÔ¨Åned triple                                                        e‚äï           Ô¨Ånd assignment variables minimum com                set costs totally ordered                                                                                                       bined cost costs different constraints combined  maximum minimum costs noted                                                        ‚ä•             ‚äï  domain dependent operator ‚äï paper focus  respectively commutative associative mono                                                                                           ‚ä•  weighted csp wcsp costs natural numbers tonic operation used combine costs identity                                                                     combined addition vcsp subcase shown element absorbing  capture essential complexity nonidempotent vcsp weighted csps wcsp form speciÔ¨Åc subclass valued  cooper  lot direct applications csp relies speciÔ¨Åc valuation structure sk  mains resource allocation combinatorial auctions deÔ¨Ånition  sk triple  ‚äï ‚â•  bioinformatics probabilistic reasoning graph theory    following initial deÔ¨Ånition arc consistency non ‚Ä¢ ‚àà‚àû  idempotent operators schiex  local consistency ‚Ä¢‚äïis deÔ¨Åned ‚äï mink   considered crucial mechanism solving wc  sps based iterated integer cost movements cost ‚Ä¢‚â•is standard order numbers                                                    ijcai                                                     observe skwehave‚ä•     Ô¨Ånite inÔ¨Ånite    awcspp     deÔ¨Åned kthevalu  ation structure sk sets variables  domains standard csp set variables ‚äÇ  note s set tuples set cost func                                                         figure  simple wcsp arc consistent closures  tions each cost function soft constraint cs  Ô¨Åned set variables called scope cost func  tion cs assigns costs assignments variables unary cost function ci cost function cs guaran  cs  s ‚Üík simplicity assume ev tee problem obtained each application valid  ery constraint different scope binary unary guarantee cost functions remain val  constraints use simpliÔ¨Åed notations binary soft uation structure avoid negative costs  straint variables denoted cij  unary ‚àícia ‚â§ Œ± ‚â§ mint‚ààstiacst similarly projec  straint variable denoted ci assume existence tunary works subproblem deÔ¨Åned just variable  unary constraint ci variable zeroarity ‚àà moves cost Œ± unary cost function ci                 constraint noted ‚àÖ constraint deÔ¨Åned nullary cost function c‚àÖ ‚àíc‚àÖ ‚â§ Œ± ‚â§ mina‚ààdi cia  deÔ¨Åne dummy ones cia ‚àÄa ‚àà di c‚àÖ   order valid wcsp    constraint cs assigns cost   tuple tit  means cs forbids totherwiset permitted cs  corresponding cost cost complete tuple algorithm  project unaryproject soft arc                                                         node consistency enforcing  wcsp   noted vp sum costs                                                         procedure projectcsiaŒ±                 vp      csts                       cia ‚Üê cia ‚äï Œ±                                                                     ‚àà s        tia                         cs ‚ààc                               foreach                                                                               cst ‚Üê cst   Œ±    ts denotes usual projection tuple  set variables complete assignment feasible procedure unaryprojecti Œ±  cost optimal complete assign c‚àÖ ‚Üê c‚àÖ ‚äï Œ±  ment lower cost problem Ô¨Ånd complete   foreach ‚àà di  optimal assignment nphard                                  cia ‚Üê cia   Œ±    say wcsps  deÔ¨Åned  variables equivalent deÔ¨Åne global cost                    function identical                   avariablei said node consistent larrosa                                                          values ‚àà di cia ‚äï c‚àÖ   exists    node arc consistencies                         value ‚àà di cib wcsp node consistent  local consistency algorithms characterized fact nc variable node consistent  reason subproblem level preserve stronger arc level consistencies rely notion sup  equivalence captured following notion port simplicity introduce notions binary                                                        wcsp generalized arbitrary arities  deÔ¨Ånition  valued csp set variables cooper schiex  value ‚àà dj sup  equivalence preserving transformation ept ‚äÜ port value ‚àà di cij cij  operation transforms cost functions scope variable arc consistent value ‚àà di sup  included produce equivalent valued csp port constraint cij ‚àà wcsp arc consistent                                                        ac variable arc node consistent    wcsp basic ept costs cost functions             order preserve equivalence problem value    support constraint  costs necessary able subtract costs ori create using project operation exempli  gin using   operation deÔ¨Åned    Ô¨Åed figure wcsp variables  val                                                       ues vertices representing values weighted                        ‚àí                    unary costs edge connecting values represents                                                                cost  values connected means                                                        corresponding cost  notice value sup    restrict presentation wcsps port variable  apply projectc  sake simplicity remind reader pseudo creates unary cost  ac apply  difference operator exists large class vcsps fair ing unaryproject  resulting wcsp figure  vcsp cooper schiex                       makes problem ac increases c‚àÖ     algorithm  gives elementary ept project works different sequencing lead different result  scope single constraint cs moves Ô¨Årst note value support apply  cost Œ± cs unary cost function cii ‚àà sfora projectc problem figure  value ‚àà diifthecostŒ±  negative cost moves ac lower bound c‚àÖ                                                     ijcai                                                       given initial wcsp  wcsp obtained  ac  mohr masini  Ô¨Ånite costs  iterated applications project unaryproject propagated project unaryprojectwethen  positive integer Œ± Ô¨Åxpoint reached called want determine set sac operations ap  arc consistent closure anacclosureofawcspp   plied simultaneously maximize increase c‚àÖ each                                                                                                          optimal maximum lower bound c‚àÖ ac cs ‚àà   variable ‚àà sletpia  closures  cooper schiex  showed Ô¨Ånding cost projected cs cia remember  optimal ac closure wcsp nphard problem costs moved cia cs counted negative    alternative deÔ¨Ånitions ac pro project let ui ‚â•  cost projected                                             posed exploit notion support unaryproject ci c‚àÖ problem maxi                 ‚äï  support ij ij             replacing  mize   ui keeping wcsp valid negative cost  notion support stronger notion supports appears  ac attractive corresponding property en                                                                                                                            forced schiex  restricted versions used  ‚àÄi ‚àà ‚àÄa ‚àà dicia ‚àí ui        pia ‚â•     given variable ordering variablei directional arc                         ‚ààci‚ààs                                                                                         consistent dac value ‚àà di support                                                        ‚àÄc  ‚àà   ‚àÄt ‚àà s ‚àí  ps    ‚â•   constraint cij ‚àà jiawcsp                                         iti  dac variable dac node consistent                             i‚ààs  directional arc consistent fdac ac dac inequalities cia  ‚àû cst  heuristics ordering variables fdac ignored necessarily satisÔ¨Åed remain  tried heras larrosa                     ing inequalities deÔ¨Åne linear programming problem              variable existential arc consistent larrosa et al  oed  variables solved polynomial              ‚àà                 exists          time karmarkar   support constraint cij  wcsp existential arc  consistent eac variable eac node consis local version theorem limited subprob  tent existential directional arc consistent edac lems  variables actually basis algorithm en  eac fdac deÔ¨Ånitions seen forcing cyclic consistency cooper  case  deÔ¨Åned polynomial time heuristics trying closer problem called optimal soft arc consistent osac  optimal closure guarantee                                                        c‚àÖ improved obviously sq‚àû                                                        osac stronger ac dac fdac edac    optimal arc consistency                              note k‚àû things involved  relax deÔ¨Ånition wcsp allowing crease c‚àÖ through node consistency lead dele  rational costs mean use new valuation structure tion values requiring new optimization  sqkk ‚äï ‚â• denotes set rational value deletion occur nd times  numbers elements including  polynomial time proof optimality Ô¨Ånal clo  deÔ¨Ånition  givenawcspp   soft arc consistent sac sure open question  transformation set soft arc consistency operations                        better understand  project unaryproject applied simultane                         osac works consider   ously transform valid wcsp                                           variable wcsp left                                                                                  unary costs equal    note deÔ¨Ånition precondition                    edges represent unit  costs moved individually each ept application just                       cost omitted clarity c‚àÖ  want Ô¨Ånal equivalent wcsp valid positive ra                    assumed   tional costs guarantees c‚àÖ lower bound                 basic epts transform  optimal cost previously affane bennaceur                       problem valid  proposed split integer costs propagating fraction wij                   simultane  binary constraint cij variable remain                 ously perform following  ing fraction  ‚àí wij  ‚â§ wij ‚â§  sug                        operations                                               gested determining optimal wij just used wij   ben                                                          projectc c‚àí virtual cost                          naceur osamni  suggested use different value  pairs inside  weights wiajb pair values ‚àà di √ó dj                                                                               turns using weight each triple  project   project   moves                                                                                  ‚àà di allows Ô¨Ånd optimal weights polynomial time unary costs                                                                        a‚àí         b‚àí  theorem  valuation structure sq‚àû used  project       project                                                                                                   possible Ô¨Ånd polynomial time sac transformation unary costs moved inside   respectively  maximizes lower bound c‚àÖ provided arity  projectc moves unary cost   constraints bounded                        proof  assume Ô¨Årst cooper  inÔ¨Å   projectc projectc moves  nite costs propagated using standard generalized unary costs                                                     ijcai                                                       projectc a‚àí projectc reim bound produced compared lower bound pro      burse initial loan value            duced edac               c‚àí                         Ô¨Årst set instances processed random maxcsp    project        project      send                                         unary cost value                        created random vcsp generator using usual                                                        parameters model aim Ô¨Ånd assignment                                                        minimizes number violated constraints differ                                                        ent categories problems domain size  gener                                                        ated following protocol larrosa et al                                                         sparse loose sl  var sparse tight st  var dense                                                        loose dl  var dense tight dt  var                                                        benchmarks section givry et al                                                                           sl     st    dl     dt                                                                optimum                                                                          edac lb                                                                                 osac lb                                                                         samples  instances table shows    finally application unaryproject  yields spectively average optimum value average values  problem lower bound c‚àÖ  set ept edac lower bound average value osac  corresponds solution previous linear programming                                              lower bound loose problems osac edac leave  problem pc  pa  pb  pa  pc  ‚àí    lower bound unchanged shows higher level local                            pa  pb  pc  pa  pc  pc  pa    consistencies required tight problems  variables equal                     osac extremely powerful providing lower bounds                                                        three times better edac    properties                                           second  set benchmarks deÔ¨Åned   open                          ‚àû                         instances   radio   link  frequency  assign  theorem  shows    osac provides  ment problem  celar    cabon et al   optimal lower bound using set arc level preserv problems extensively studied  ing operations actually prove large class httpwwwzibdefapproblemscalma gap  wcsp Ô¨Ånal problem obtained optimal reformula best upper bound computed local search  tion problem using initial set scopes  methods best lower bound computed ex  deÔ¨Ånition  awcspp   inscope c‚àÖirreducible ponential time algorithms closed problem  equivalent wcsp set constraint considered scenreducwcsp                                                                   scopes c‚àÖ c‚àÖ c‚àÖ c‚àÖ graph   reducmorewcsp        nullary constraints                         through different strong preprocessing bench                                                        marks section givry et al  theorem  let wcsp sq‚àû using Ô¨Å  nite costs sac transformation applied produces            cq cp                                                  scen   scen  graph  graph  wcsp    ‚àÖ    ‚àÖthen   inscope ‚àÖirreducible  total  values                proof   direct consequence lemma      best known ub                    cooper                                      best known lb                                                                            edac lb                                Ô¨Ånite rational costs osac used estab osac lb                    lish inscope c‚àÖirreducibility naturally does work cputime  ‚Äù    ‚Äù     ‚Äù    ‚Äù  inÔ¨Ånite costs hard constraints exist clique  table shows osac offers substantial im  coloring problem inconsistent equivalent provements edac especially graph  problem just c‚àÖ set  sac trans graph instances instances optimality gap                                                        ub‚àíosac  formation applied wcsp                   ub     reduced   respectively poly    naturally higherorder consistencies change nomial time lower bounds obtained osac actually  scopes provide possibly stronger lower bounds soft close best known exponential time lower bounds  consistency cooper  soft path inverse consis cputime show cputime computing osac lower  tency heras larrosa applied previous  bound  coloring problem detect infeasibility            actually assess practical osac pre                                                        processing tried solve problems osac ef    experiments                                        fective tight problems difÔ¨Åculty lies fact  applied osac during preprocessing linear pro    wwwinrafrmiatvcsp  gramming problem deÔ¨Åned osac solved using ilog    like thank french centre electronique  cplex version  using barrier algorithm lower l‚Äôarmement making instances available                                                    ijcai                                                     cplex Ô¨Çoating point solver open source strength osac used preprocessing technique remem  wcsp solver used toolbar section algorithms givry ber edac maintained during search  et al deals integer costs address strength osac compared local consistencies  sue use ‚ÄúÔ¨Åxed point‚Äù costs wcsp considered ing supports dac does require  Ô¨Årst multiply costs large integer constant Œª   initial variable ordering dac directly solves tree  solve linear programming problem deÔ¨Åned structured problems variable ordering used  osac using integer variables instead Ô¨Çoating point dac enforcing topological ordering tree eval  Ô¨Årst integer solution used resulting problem uate extent osac overcome limitations  integer costs tackled toolbar means used random problems structured binary clique trees  shift polynomial problem nphard givry et al each clique contains  variables  practice problems obtained domain size  each sharing  variables parent  good linear continuous relaxation expensive clique overall tree height  leading total number  solve integer problems using polytime rational lp  variables graph density   solver allow time complexity remain polynomial                                                              Ô¨Ågure uses logarithmic scale cputime                                                        different constraint tightnesses  problems sat                                                        isÔ¨Åable treelike problems dac ordering                                                        used compatible topological ordering                                                        binary tree good lower bounds                                                        inverse order considered pathological cpu                                                        times medac default toolbar parameters                                                        bound osacmedac previously shown                                                        each case clearly osac leads drastic  fold im                                                        provements bad dac ordering used used                                                        just during preprocessing does totally compensate    figure reports cputime size tree bad ordering good dac ordering  search dense tight problems increasing size used osac allows impressive  fold speedups  time limit set ‚Äù cputimes reported especially tight problems   osac lp time taken cplex solve Ô¨Årst lin finally tried solve challenging open celar  ear relaxation  osac mip time taken Ô¨Årst instances osac preprocessing despite strength  teger solution  medac time taken solve original osac problems remained unsolvable simultaneously  problem maintaining edac larrosa et al  tool taking account strong structure problems  bar default parameters good initial upper bound givry et al attractive direction   osacmedac sum osac mip time  needed toolbar solve osac problem  default parameters upper bound                     related work    clearly small problems  variables reviewer pointed lp program optimized  osac expensive resolution osac dual relaxation linear formu  problem size increases osac effective  lation proposed koster  lp formulation  variables divides overall cputime roughly  osac image processing community  number nodes explored toolbar cases shows schlesinger  werner                                                           constraints binary boolean domains wcsp    code toolbar modiÔ¨Åed accordingly solution reduces weighted maxsat direct encoding  cost Œª known example current lb Œª maxsat quadratic pseudoboolean function optimiza  backtrack occurs global costs original problem tion boros hammer  exists using   repre  integer Ô¨Årst integer   upper bound sent respectively true false √ó disjunction  ‚àí                                                    ijcai                                                     
