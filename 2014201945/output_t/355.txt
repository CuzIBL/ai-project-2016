            recycling computed answers rewrite systems abduction                            fangzhen lin                                 jiahuai                     httpwwwcsust flin                   httpwwwcsualberta                 department science               department science         hong kong university science technolog              university alberta             clear water bay kowloon hong kong                 edmonton alberta canada                          abstract                          lin  main result theorem theo•                                                         rem  says recycling preserves soundness com•      rulebased systems goaloriented computations  pleteness       correspond naturally possible ways                                                            class rewrite procedures proposed lin       observation explained applica•                                                          based idea abduction confluent       tions need compute explanations series                                                          terminating rewriting systems called canonical       observations domain ques•                                                         systems literature rewrite systems dershowitz       tion previously computed answers                                                          jouannaud  confluence termination properties       recycled arises yes answer result sub•                                                         guarantee rewriting terminates unique normal form       stantial savings repeated computations sys•                                                         independent order rewriting each particular       tems based classic logic answer yes                                                          strategy rewriting yields rewrite procedure       nonmonotonic systems tends be•      lieve answer recycling  general idea recycling new recycling       form adding information paper systems based classic logic possible       show computed answers recy•     inferences systems viewed transform•      cled nontrivial way class rewrite ing logic theory logically equivalent dy•      procedures proposed earlier lin  namic programming use answers pre•      logic programs negation present  viously computed subgoals reduces computational       experimental results encoding logistics complexity game playing programs ex•      domain                                            ample world champion checker program shinook                                                          wwwcsualbertacachinook endgame database stores                                                          computed results endgame situations ref•   introduction                                         erenced realtime efficiently                                                            problem recycling nonmonotonic   logic programming answer sets gelfond lifschitz proof rarely investigated note recy•   partial stable models przymusinski  cling use previous proofs differs adding con•  adopted framework abduction number  sequences example known semantics based   formalisms topdown query answering procedures answer sets maximal partial stable models pos•  proposed dung  eshghi kowalski   sess cautious nonmonotonicity property adding   kakas mancarella  kakas et al  lin consequence program gain additional models    satoh iwayama                         losing consequences following example     question shall address paper following dix    sound complete procedure abduction suppose   computed explanations conveniently represented                                                                                                             disjunction es  en observation suppose   course computing explanations   observation run use answer set consequence   proofs es actually proving ques• augmented rule program gains sec•  tion use proofs es proof ond answer set losesas consequence   preserve soundness completeness procedure section defines logic program semantics sec•    paper answer question positively tion  reviews rewriting framework section    nontrivial way class rewrite procedures proposed formulate rewrite systems computed rules prove                                                          recycling preserves soundness completeness sec•     authors work supported hk rgc cerg tion  extends result rewrite systems abduction   hkuste                                         section  reports experimental results       nonmonotonic reasoning                                                                                   logic program semantics                              formula resulted rewriting central mecha•  rule form                                  nisms formalizing goal rewrite systems rewrite chains                                                          contexts                                                            • rewrite chain suppose literal written defi•  atoms underlying propositional        nition wherethen each literal   language called default negations literal   derived goal generated order prove   atom negation normal program fi•        ancestordescendant relation denoted   nite set rules completion program denoted  sequence called rewrite chain   compp set equivalences each atom        abbreviated     does appear head rule   cornpp compp                       • context rewrite chain   default negations replaced corresponding negative lit• records set literals proving   erals exactly rules            write context   head write bi bi                    context used maintain consistency                                                                proved conjunction conjuncts     rewriting lin  sound                                                              need proved contexts nonconflicting   complete wrt partial stable model semantics przy                                                             each simplicity assume when•  musinski  simple way define partial stable models                                                              generated automatically replaced   introducing valued logic called al•                                                             tc set literals corresponding   ternating fixpoints yuan  let program                                                              rewrite chain automatically replaced   set default negations define function sets   default negations re•                            note literal derived goal rewrite chain   lation standard propositional derivation relation leading literal given goal uniquely deter•  each default negation treated named atom mined example suppose completion program                                                      definitions     partial stable model defined fixpoint rewrite sequence    function applies fp twice satisfying       three literals goal rewrite chains               following way atom                                      undefined   answer set defined fixpoint simplification rules let  goal formulas                                                     context  literal    goal rewrite systems   introduce goal rewrite systems formulated lin        goal rewrite rewrite consists   three types rewrite rules  program rules   compp literal rewriting  simplification rules   transform simplify goals  loop rules handling   loops                                                   sr merges contexts contain complemen•    program rule completed definition             tary literals sr makes failure prove re•       cornpp used left right rewritten peated applications sr sr transform goal                called                      formula disjunctive normal form dnf   literal rewriting     goal called goal formula formula  loop rules   involve goal resulted literal rewriting literal  rewritten possible later   goal called derived goal like formula stage   appears goal rewrite   goal transformed goal changing chain rewrite rules formulated handle loops   semantics carried simplification rules     assume goals negation appears   literal achieved simple transformations   using following rules formulas                                                                    called positive loop    simplification rules                                       atoms each literal atom   simplification rules constitute nondeterministic trans•  called negative loop   formation formulated mechanism loop han•      negative literals each literal   dling mind requires keeping track literal se•     negative   quences each goal                             called loop                                                                                  nonmonotonic reasoning  cases called loop literal      loop rules rewrite chain   lr                                      positive loop        odd loop   lr                                      negative loop        loop      rewrite sequence sequence zero rewrite    steps denoted                                     figure  recycling generate extra proofs    initial goal each  obtained                                                  result existence rewrite      • literal rewriting nonloop literal     step implies existence different way prove      • applying simplification rule subformula       • applying loop rule loop literal                                                          contradicting rewritten r°    example  program given introduction  giving example introduce different                                          proved   way understand rewrite sequences goal formula    shown following rewrite sequences transformed dnf using distributive                                                          rules sr sr order rewriting does mat•                                                         ter view rewriting generating sequence dnfs                                                          rewrite sequence dnf initial goal                                                            conveniently represented derivation trees                                                          trees each representing possible way prov•    previous results                                  ing dtree root node    lin  shown  goal rewrite sys• branch leaf node corresponds    tem canonical confluent terminating rewrite chain eventually ends     goal rewrite sound complete wrt tc disjunct conjunction successful proof    partial stable model semantics  rewriting frame• requires each branch succeed union resulting    work extended abduction relatively straight• contexts consistent    forward manner                                         example carefully constructed illustrate                                                          recycling yield answers recycling     goal rewrite systems computed rules            carried particular addi•                                                         tional answers    use examples illustrate main technical re•   sults section                                example  consider program    example  given rewrite suppose    rewrite sequence failure    positive loop recycle computed answer    replacing rewrite rule new rule    new say suppose trying prove fig each dtree consists single branch left                                                  dtrees expanded goal corresponding                                                          following rewrite sequence    step makes use computed answer        question arises way using previ•   ously computed results guarantees soundness com•   pleteness theorem  proved later paper an• dtrees goal corresponding    swers question positively example as• rewrite sequence    sume following successful proof r°      termination loop recycle proof proof com•    sequence existed recycling produced wrong pare recycling clearly successful        nonmonotonic reasoning                                                                                 dtree fourth left succeed   doesn involve focus dtree   middle particular node dtree fails   recycling performed     previously proved context recy•  cling proof amounts terminating context   union context rewrite chain lead•  ing dtree right results   successful proof fails recycling     recycling appears generated wrong re•  sult verify generated contexts   belong partial stable model   recycling example didn  lead incorrect   answer generated redundant theorem  shows   incidental true partial sta•  ble model derivation look dtree middle                                                              important property provability rewriting    rewrite systems computed rules               socalled loop rotation needed order prove   given goal rewrite denote rewrite se• completeness recycling proof successful   quence literal                         branch dtree terminated loop rule captured   definition  computed rule                        rotated forms   let goal rewrite literal rewritten property need following notation   normal form computed rule defined rewrite chains direct dependency relation         computed rule rewrite rule denoted allow segment   ifp computed rule                   rewrite chain denoted greek letter   rewrite rule                                    write denote                                                         rewrite chain mean rewrite     purpose recycling computed rule  chain begins followed segment denoted   meant replace existing literal rewrite rule rewrite chain used denote set   computed rule form representing failed  literals   derivation used directly literal rewrite rule      combine contexts lemma  loop rotation   rewrite chain leading consistent ones let rewrite computed rules let                                                         dtree literal succeeds context suppose   recycling rule                                       branch ends   let rewrite chain gtl nonloop lit• literal proof succeeds   eral let —                                    context   computed rule let          proof loop   subset containing literals rotated   consistent recycling rule gn defined   rc     sequel rewrite includes recycling rule negative loop loop   zero computed rules note resp rotated loop rotation dtree   termination confluence properties remain hold performed follows remove node link   extended systems                                     node attach linkto occurrence     interested soundness completeness assumption existence loop ensures   series rewrite systems each recycles computed round rotation occurrence   answers generated previous purpose node fig  illustration rotation   given program use denote original goal  proceeds left right seen type   rewrite literal rewrite rules defined loop preserved set literals tree   clark completion defined          remains unchanged   terms follows let set computed rules  soundness completeness recycling   generated set literals                                                         theorem  sound complete   rewrite obtained rlp replacing rewrite   rules literals rest sketch proved prove claim   sectin refer fixed program induction computed rules   drop subscript write                    sound complete lin  assume                                                                                 nonmonotonic reasoning  sound complete show           goal rewritten disjunction conjunctions abducible        sound complete                      literals     need consider situations rewriting   differs ofbe set literals   computed rules generated  carry   rewriting rewriting literals each abducible literal   case rewriting terminate             consistent each result re•  expression dnf say    cycled           each represented dtree     soundness assume                         experiments   tds need show   partial stable model consider implemented depthfirst search rewrite procedure   dtree generates suppose root node branch bound procedure used com•  show inductively bottomup fashion pute explanations using nonground program con•  literals belong partial stable model  dition each rule variable appears body     completeness show context appear head condition sat•  generated  context generated  isfied needs instantiate variables   complete simply complete         appear body rule significant departure     let consider proof goes          approaches based ground computation   through particular consider dtree proof functionfree program instantiated ground   contains each branch dtree expanded program intended models computed   eventually terminated independent simplic• check effectiveness idea recycling   ity consider branch • dtree extended tested logistics problem ilin   computed rule used    domain truck pack•                                                      age package outside truck truck   need consider cases rl proved   previously computed rule branch termi• moved location problem   nated loop let consider given state constraints truck pack•  expanding rewrite chain • • form age each location given time   loop say  loop exactly loop package truck truck moves   occurs rewriting goal  new location does package derive                                                        complete specification effects action moving   computed rule  loop crosses                                                         truck location suppose   general form                                                         following propositions ta  truck package                                                         location initially  package truck initially                                                         ta truck package location   loop literal special case loop rotation performing action moving   branch cf lemma  way terminating package truck performing action mov•  rewrite chain presents proving  goal ing truck lin                                              problem solved computing abduction successor                                                         state propositions terms                                                         initial state propositions abducibles us•  loop negative loop loop resp ing following logic program ilin    context generated         details     given corollary recycle failed   proofs exactly contexts generated     corollary  let rewrite each com•  puted rule form let literal   normal form       recycling abductive rewrite systems   shown lin  rewriting framework   extended abduction straightforward way   difference extended framework variables instantiated domain   apply clark completion abducibles locations instance given query pa   abducible appears goal remain unless compute abduction pa meaning   eliminated simplification rule sr sr sim• true package initially    ilar way goal rewrite systems computed rules inside truck   previous section extended abduction subgoals compute want compute       nonmonotonic reasoning                                                                                 
