                        multiobjective frontier search algorithm                                    mandow jl perez´    la cruz                               dpto lenguajes ciencias la computaci´on                               universidad m´alaga   m´alaga spain                                       lawrence perezlccumaes                          abstract                            paper analyzes extension frontier search                                                        multiobjective framework scalar frontier search exploits      paper analyzes extension frontier search monotone property heuristics discard unnecessary      multiobjective framework frontier multi nodes achieving important memory savings ex      objective search algorithm developed  plained paper node deletion criteria      formal properties presented perfor  applied multiobjective context paper presents new      mance compared multiobjective deletion criteria applied broader contexts      search algorithms new algorithm adequate  preserving properties conventional algorithms      monotone nonmonotone heuristics                                                          paper organized follows section  describes                                                        scalar frontier search section  examines fundamental    introduction                                       issues multiobjective search introduces frontier mul  systematic graph search procedures usually classiﬁed tiobjective search algorithm formal properties exper  bestﬁrst search depthﬁrst search strategies imental results presented sections   respectively  advantage socalled principle optimality finally conclusions future work outlined  prune paths lead solutions better  recorded dijkstra’s algorithm hart  et al  members class pruning dras  scalar frontier search  tically reduce number paths explored graph                                                        shortest path problem stated follows let  memory requirements usually exponential solution                                            depth depthﬁrst search presents advantage mem locally ﬁnite labeled directed graph nac                                                        nodes arcs n labeled positive costs  ory requirements linear depth solution   ∈                ∈  certain cases algorithms involve  given start node set goal                                                        nodes Γ ⊆ ﬁnd minimum cost path  sideration exponentially larger set paths com Γ  pared bestﬁrst algorithms algorithms like ida korf node    rbfs korf  members class scalar bestﬁrst algorithms like build search tree  attempts carried retain beneﬁts rooted start node best paths each gen  path pruning keeping reasonable memory require erated node nodes expanded kept list  ments frontier search korf et al  recently closed nodes waiting expansion  reported successful approach sense      kept list open nodes keeping closed    multiobjective search known compu list makes memory requirements exponential solution  tationally demanding scalar counterpart particularly depth nodes serve important purposes  memory requirements practical limiting factors firstly new path known node  multiobjective bestﬁrst search ai applications appli cost compared path search tree  cations route planning alechina logan  best path kept pruned drastically  main independent planning refanidis vlahavas  reduce number paths need explicitly ex  reported queue size limiting factor resorted plored second important use closed nodes return  various schemes limit number generated alternatives solution path goal node reached solution    multiobjective bestﬁrst search algorithms include dif path quickly recovered search tree  ferent extensions multiobjective case moa uses characteristic evaluation function fngn  stewart white andnamoamandow        hn rank open nodes selects expansion  p´erez la cruz  multiobjective depthﬁrst algo nodes minimum fn function gn denotes cost  rithms include idmoa harikumar kumar path stored search tree heuris  moma   dasgupta et al  multiobjective exten tic function hn estimates cost solution node  sions ida rbfs respectively                  goal node hn satisﬁes socalled monotone                                                    ijcai                                                    property                                        fi denotes ith element vector f                                                                                                hncn   ≤ hn  ∀n  ∈          given vectors f f  pos                                                        sible rank better example given  node selected expansion optimal path vectors x   y  andz   x dominates   use monotone heuris y z dominance relation exists vec  tics optimizes simpliﬁes path pruning new paths tors y z  closed nodes pruned straightaway closed given set vectors shall deﬁne nondomx  node open                 set nondominated vectors set following way    following discussion frontier search shall  make following assumptions                              nondomxx    ∈  y ∈ xy ≺ x       interested cost optimal solution                                                                                     goal node reached optimal solution shall use namoa mandow p´erez la cruz                                                                  optimal solution path        reference development frontier multiob                                                        jective algorithm reﬁnement moa stew    graph searched undirected each art white  offers better memory behaviour                                          arc arc         namoa builds acyclic search graph sg rooted    heuristic functions monotone                 store nondominated paths each node    assumptions frontier search keeps beneﬁts new path known node cost compared  path pruning drastically reducing memory require reaching nondominated paths kept  ments key idea store memory open dominated ones pruned namoa keeps differ                                                                                           list closed list expanded nodes      ent sets associated each node gop denotes set    frontier search keeps vector used operators each cost vectors paths reaching explored                                                                   node each vector element indicates neighbor gcl denotes set  ing node n reached operator accessible expanded set open paths sg                                                                                              ∈        through node initially vector elements set ’un explored tuples ng g gop                                                                                                used’ each time node expanded successors reach namoa uses heuristic function estimates  able unused operators generated recall set nondominated cost vectors paths each  node selected expansion optimal path goal node each path psn cost                                                                                                        node means new interesting paths g psn  set heuristic evaluation vectors psn                                                                                                     generated need function multiobjective analogue  open each generated neigh psnnondomf   f  gpsnh ∧ h ∈ hn  bouring node n operator reaches form n namoa selects expansion open path  marked used amounts pruning new paths heuristic evaluation vector nondominated  reach n actually gener opentwosetsgoaln  costs track  ated reached new paths goal nodes costs nodominated solutions far  safely removed memory                        each time new solution dominated alternatives    assumptions   presented basic frontier ﬁltered open search proceeds open  search algorithm relaxed make general  search strategy korf et al  assumption  multiobjective search different nondominated  relaxed compromising admissibility paths reach given node number  frontier search monotone heuristic cost vectors stored gopn gcln dominates  tiebreaking rule basic frontier search algorithm memory requirements number nodes plays  shown mimic sequence node expansions performed minor role regrettably expansion nondominated  standard bestﬁrst search admissible path node does prevent nondominated paths  assumptions                                 enter gopn later stages search mono                                                        tone heuristics used stewart white lemma    multiobjective frontier search                      note vector costs expanded paths    multiobjective search                         discarded expansion consideration                                                        need kept gcln sets prune new domi  multiobjective search problem stated fol nated paths reaching expanded nodes prevents                                                     lows let locally ﬁnite labeled directed graph trivial extension scalar frontier search multiobjective                                nac nodes arcs labeled pos case determining nondominated paths given                  ∈ rq                   ∈  itive vectors c   given start node nand   node central issue  set goal nodes Γ ⊆ ﬁnd set nondominated  cost paths nodes Γ                   frontier search namoa    main distinguishing feature multiobjective prob  lems fact cost vectors cn n induce partial extension frontier search multiobjective search  order preference relation ≺ called dominance         presented assumptions presented section                                                         scalar counterpart key ﬁnd adequate crite                                              ∀f f ∈  f ≺ f ⇔∀ifi      ≤ fi ∧ f   f   rion allow nodes cost vectors expanded paths                                                    ijcai                                                    safely deleted memory previously explained  completely straightforward monotonicity does  provide properties scalar search algorithm  presented table  based following proposals    let denote gngopn     ∪ gcln set  nondominated cost vectors known  frontierthe set known nodes deleted    initialization    create    set    nodes                                                                                               memory each node             store      frontier            andsetgop                                           frontier                                                           vector ’used operators’ deletion ﬂag ’at let open list pairs ng                                                              ∈                   ∈        expanded’ ﬂag                                         frontierand      g gop   create    candidates deletion node candidate dele sets goaln costs  tion nondominated paths     termination  open   return  certain condition ∀n ∈     set goal nodes goaln   nondominated costs                                               frontier∧∀g      ∈ gopn   ∃g ∈ gn g   g          costs    marking used operators node candidate dele  path selection  tion path leading expanded                                                                                         operators successors leading marked select alternative ngn open  ’used’ amounts pruning new paths leading    heuristic evaluation f ∈ ngn nondominated  actually generated                      open   dominated costs    node deletion node candidate deletion    marked deletion remove gn      ∅  gop     thenn actually deleted memory         gopn gn gopn gcln    conditions checked each iteration step                                                            solution recording     ∈ Γ  note new nodes generated algorithm                                                            goaln    gn costs eliminate open  frontier   reached                                                            dominated alternatives  teresting alternative newly path dominated  costs  step bi nodes typically dis  path expansion  ∈ Γthen  carded moa namoa really interesting path  successors nodes cost gm  gn   need kept frontier search cn  case operators marked ’used’                                                             calculate fm set estimates new path    conditions severe im                                                                mgm dominated costs  portant condition multiobjective frontier search involves  cost vector deletion number cost vectors new node  stored memory dominates memory consumption           frontier    cost vector deletion node marked dele      ii fm   ∅ place gm gopm  tion set gcln immediately removed     gm new nondominated gm  memory step ai additionally each time new path  prune gm vectors dominated gm  selected expansion cost vector removed ii fm   ∅ place gm gopm  gopn discarded step    rationale condition costs gcln  update frontier node frontier  kept prune new dominated paths nhowever  node marked deletion neighbouring nodes   expanded  mark operators new path reach  marked deletion candidate dele  notice virtue condition node marked   tion  deletion rid cost vectors mark deletion delete gcln  node actually deleted                              ii successor n frontiermark                                                                               →    example                                                     operator ’used’                                                             marked deletion gopn∅then  figure shows sample graph multiobjective costs   remove frontier  let assume start node Γγγ  loss generality heuristic function used  step   hn∀n heuristic evaluation vector each  path gp  example focus table  fsnamoa frontier multiobjective search algo  attention criteria path node deletion rithm  involve real cost vectors gp  heuristic evaluation vec  tors involved selection open paths expansion  sense fsnamoa does perform differently  namoa    initially node open frontier  gops   selected expansion paths                                                    ijcai                                                    generated setting gopn   gopn   dominates open vec  tors candidate deletion gcls deleted  gops∅  fact deleted memory corre  sponding operators marked ’used’ figure   shows trace fsnamoa example including  nodes frontier graph showing state known  paths each iteration each path gn represented  cost cost space ×≡deleted ◦≡open •≡closed  labeled destination node way state paths  values gop gcl sets easily told    sample problem fsnamoa    assuming ties nondominated paths broken ar  bitrarily iteration  path   selected expan frontier         paths  sion new paths generated  candidate deletion new nondominated  path reach descen  dants closed path remain memory  gcln   iteration  nondominated  path selected candidate deletion  fact deleted marking corresponding operators ’used’   notice new nondominated path  reach cost closed path dom  inates cost open paths node  candidate deletion deleted cost vectors  paths leading dominate open paths  fore candidate deletion  expanded remain memory iteration  path                                                               selected expansion deleted memory  iteration  path selected deleted  node deleted iteration   paths γ nondominated path γ    selected solution path recorded  costs   goaln open paths dominated    ﬁltered removed open iteration   γ   remaining open path selected   recorded solution algorithm terminate  guarantee node γ reached nondominated  solutions costs          properties  section proves each run fsnamoa mimics  workings namoa algorithm terminates      sets nondominated costs goal nodes  result  costs positive marked deletion  nondominated paths generated  proof proof trivial deﬁnition ’candidate  deletion’ let’s assume marked iteration kifanew  node reaches future iterations extension   alternative ng open iteration kletg    cost extension marked    frontier nodes paths cost space  ∃g ∈ gn g   g ⇒ g ≺ g  g                                                                 g gg symbol  denotes ’used    result  replaces monotonicity requirement heuris     operator’ dashed nodes deleted  tics scalar frontier search monotonicity requirement  real cost function gp  following results  analogous presented korf et al                                                                  figure  sample problem solution  result  fsnamoa regenerates node  deleted                                                    ijcai                                                    proof let assume purpose contradiction  ﬁrst node regenerated new path     table  summary test results  node n nifn deleted algorithm   average        σ   min     max  candidate deletion expanded fsnamoa                                            gopn∅ifn  deleted nthenn  cost vectors               regenerated order expanded regenerating time                   contradicts assumption fsnamoa  ﬁrst node regenerated n cost vectors            deleted expanded n time                        frontier   recall graph undirected fsnamoa  marked deletion operator n cost vectors             marked ’used’ path leading n time                         selected expansion regenerate contradicting fsnamo  assumption regenerated                 cost vectors                                                                      time                               result  tiebreaking rule fsnamoa ex namoa  pands nodes order namoa      cost vectors                                                                      time                               proof shall prove induction stronger result moa  each iteration set open alternatives cost vectors      algorithms proposition true iteration time                         s open alternative let assume  algorithms selected paths iteration kandthat  experimental tests  exactly set open alternatives  algorithms share tiebreaking rule select set  experimental tests carried different  open alternative ng expansion       square grids nodes size  ×  random costs                                                             following scenarios possible namoa      objectives grid distance used heuris                                                        tic objectives tests reported section com  each succesor reached cost vector gm  cn mg                                                        pare performance fsnamoa standard    ∈ Γ open alternatives dominated gm elim multiobjective search algorithms intentionally rel      inated                                           atively small size                                                          figures  show performance moa     ∈ Γthesetfm  estimates new paths namoa fsnamoa memory time      dominated costs  calculated case including idmoa problem difﬁculty number      new node fm   ∅thenm search graph iterations paths considered namoa taken      gm gopmbm   known gm ∈ gm   measure problem difﬁculty note xaxis      changes gopm gclmcm   ﬁgure  logarithmic scale allow comparison id      known gm  ∈ gm dominated vectors elimi moa statistics summarized table       nated gmiffm   ∅thengm gopm  moa namoa require storage                                                          cost vectors needed fsnamoa respectively    fsnamoa behave situations  moa fastest average speed moa  situation new node unconditionally namoa barely distinguishable scale ex  placed frontier new open alternative tra ’update frontier’ step fsnamoa places heavy time  added condition finally situation overhead time required algorithm  ignored fsnamoa results change set exponential time requirements linear space  open alternatives summary algorithms algorithm idmoa fact algorithm solve  form changes set open alternatives simplest problems  minutes overhead  algorithms terminate set open alternatives signiﬁcantly reduced delaying frontier updates  perform sequence path selections dates performed evey iterations overhead  expansions                                      reduced maximum branching factor    results   require heuristic function problem increment memory requirements  monotone means fsnamoa mimics namoa       kb cost vectors normally tiny fraction  nonmonotone heuristics used note maximum memory usage figure table  show  singleobjective version fsnamoa amounts ver time requirements     sion frontier search ﬁnds optimal solutions  increase average memory requirements plain  general heuristics nodes selected expansion fsnamoa labeled fsnamoa   respec  deleted achieve minimum value gn tively suggests updates responsible  open nodes ensures optimal path deleted memory savings additional updates  nodes                                 coming increasingly costeffective                                                    ijcai                                                    
