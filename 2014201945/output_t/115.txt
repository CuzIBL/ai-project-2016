                             fast planning iterative macros                  adi botea                     martin muller¨                  jonathan schaeffer         national ict australia         dept computing science        dept computing science     australian national university         university alberta            university alberta             canberra act                   edmonton canada                 edmonton canada        adiboteanictacomau            mmuellercsualbertaca           jonathancsualbertaca                        abstract      research macrooperators long history      planning search applications      revival topic lead      ing systems successfully combine macro      operators current stateoftheart planning ap      proaches based heuristic search      search necessary make macros      standard widelyused enhancement search al      gorithms article introduces sequences    figure  state expansion atomic actions left atomic      macroactions called iterative macros iterative actions  macros center atomic actions  iterative      macros exhibit potential advantages macros right each short line atomic action each      travel fast goal potential limi curved arrow macroaction      tations utility problem classical macros      larger scale family tech      niques introduced balance tradeoff fa time solution quality decreases addressing      vor faster planning experiments collection formance tradeoff key making macros work      planning benchmarks show compared     iterative macros macros macroactions      lowlevel search search classi similar potential beneﬁts limitations classical macros      cal macrooperators iterative macros achieve larger scale iterative macros progress      impressive speedup search                 faster branch search exponentially larger                                                        possible savings downside exponen    introduction                                       tially instantiations iterative macros                                                        leading dead ends iterative macro expen  research macrooperators long history planning sive compute sum instantiating each contained  search applications recent years shown macro tuning performance tradeoff challenging  vival topic leading systems successfully com classical macros  bine macrooperators current stateoftheart planning                                                          model discussed paper extends approach  approaches based heuristic search macros                                                        botea et al  offers framework generating  signiﬁcant capabilities exploited need                                                        ﬁltering using macros runtime contributions  continue previous efforts topic aiming reach                                                        paper  point macros considered standard  performance enhancement hash tables fast  iterative macros runtime combination macros  detection duplicate nodes                            enhance program performance    article introduce sequences macroactions                                                           new techniques address performance tradeoffs  called iterative macros figure  illustrates differences                                                            iterative macros algorithms ofﬂine ﬁltering dy  lowlevel search search classical macros                                                            namic composition instantiating iterative macro  search iterative macros consider lowlevel search                                                            runtime dynamic ﬁltering pruning instanti  versus search classical macros macros add abil                                                            ations iterative macro runtime  ity travel goal big steps inter  mediate nodes expanded evaluated heuristically  experiments using standard planning benchmarks  macros increase branching factor show orders magnitude speed standard  processing cost node inappropriate macros guide domains compared lowlevel search  search wrong direction increases total search search enhanced classical macros                                                     ijcai                                                      section  brieﬂy reviews related work macros section partialorder macros macro extraction phase builds   introduces necessary deﬁnitions section  introduces macros partial ordering steps save  iterative macros algorithms ofﬂine ﬁltering dy computation time possible ordering selected  namic composition dynamic ﬁltering experimental runtime  sults given section  section  contains conclusions let set domain operators set  ideas future work                            ground actions planning problem macro                                                        operator macroschema sequence domain opera    related work                                       tors msi ∈otogether parameter binding σ ms                                                         ms msmslσ  related work macros planning dates strips partially instantiating macro deﬁned equiv                              planner fikes nilsson   subsequent contributions alent ways  replacing variables                                                    include offline ﬁltering set macros minton   stant objects  replacing operators ground                                            partial ordering macro’s steps mooney   gen actions second deﬁnition appropriate  erating macros able escape local minima heuristic work macros reuse actions relaxed plan                       search space iba   problem representation actionwise instantiation needed partial instanti                                                 multivalued variables mccluskey porteous  use ation macro mi mi mimilσwhere  macros change assignment variable given value ∀i ∈lmii ∈a∨mii ∈o  step                                            total macroinstantiation shorter macroinstantiation    recent contributions successfully integrate macros steps instantiated ∀i  mii ∈a macrooperators  stateoftheart heuristic search planners ff macroinstantiations extreme cases partial                                    hoffmann nebel  vidal  composes macros  macroinstantiations distinction clear  runtime applying steps relaxed plan orig context term “macro” refer                                inal problem botea et al  prune instantiations instantiating step partial instantiation  macros based similarity relaxed plan coles mi important ensure new action consis                 smith   generate macros plateauescaping se tent constraints existing mimore                           quences newton et al  use genetic algorithms gen precisely given partial instantiation mi position                                           erate macros contributions vidal  botea state mi built deﬁne consistency             et al  closely related three ap set consmiis containing actions ∈asuch  proaches exploit similarity macro relaxed  corresponds operator ith position mi  plan                                                  does break parameter bindings miandif    applicationspeciﬁc macros applied domains ﬁrst i− steps instantiated adding                                        sliding tile puzzle korf   rubik’s cube ith position makes istep sequence applicable                                           korf  hern´adv¨olgyi   sokoban junghanns actions consmiis used instantiate                    schaeffer   interesting detailed discussion ith step mi obviously instantiating new step  comparison approaches scope introduce additional binding constraints instantiating steps  paper                                        macro order step instan                                                        tiated bindings consistent previously    framework basic deﬁnitions                     instantiated steps including positions larger  basic framework work planning forward finally let γs ak state obtained apply  heuristic search guide search relaxed plan ig ing action sequence ak state  nores delete effects actions computed each eval sequence  γs sif∃i ≤ ai  uated state hoffmann nebel  search enhanced applied γs ai−thenγs ak undeﬁned  iterative macros illustrated figure  right  tailed section  strategy using iterative macros  iterative macros  consists three steps  extract macrooperators section describes technique speeding planning  lutions training problems  statically ﬁlter set using iterative macros section  presents method stat  macrooperators  use selected macrooperators ically ﬁltering set macrooperators identify candidates  compose iterative macros runtime steps   deal composed form iterative macros section   classical macrooperators step  involves new focuses integrating iterative macros search algo  iterative macros model botea et al  serves rithm methods effectively address challenging tasks  starting point implementing ﬁrst steps pro instantiation pruning described  vides framework generating ﬁltering using clas  sical macrooperators runtime planning ex  static filtering  periments iterative macros showed powerful model introduced botea et al  imple  ﬁltering capabilities needed new enhanced method mented enhanced botea et al analyze solutions  ﬁltering step  described section    set test problem instances extract potentially useful set    rest section contains deﬁnitions concepts macrooperators macros ranked favoring  used following sections simplicity totally  appear frequently solutions  signiﬁ  dered macros assumed deﬁnitions generalized cantly reduce search effort required each application                                                     ijcai                                                    important limitations ranking model ig composeiterativemacromssrp                                                              ←∅     ←  nores interactions macros used      itm  sequence  provides automatic way decide number selected true                                                                each ms ∈ ms  macros                                                            ←           γs                                                                  mi   instantiate ms itm rp        enhancement ﬁrst selects macros            instantiating mi succeeded  parameter returned original procedure       ←  ∪ mi ∩ rp  mark used steps  tries ﬁlter subset solves training set itm ← itm  mi  concatenate  efﬁciently terms expanded nodes enumer         break  restart outer loop  ating subsets set elements exponentially   iteration loop instantiated macro  hard use approximation method complexity        return itm  linear each  training set  solved macro mi use macros reordered accord figure  composing iterative macro runtime  ing search effort precisely mi better mj  ni njwherenl   total effort expanded nodes                                                                                  instantiatems rs  solve training set using macro ties broken ac      each ∈ consms  cording original ranking                                    mi ← matchinga mssrs    based new ordering training set solved using       mi ∩ rs≥threshold  macros  ≤ ≤ assume total number             ﬁll remaining gaps mi  nodes expanded solve training set macros         steps mi instantiated        use ni total effort solve training set       return mi  macros                                                       return failure                                                    arg min ni                            ≤i≤k                                                                figure  instantiating macroaction       nb learning procedure returns  macros macros learned domain    experiments described section  small training schemas ms current search state relaxed plan  instances used learning time low set computed state rp each iteration main loop   number useful macros domains tries append macro iterative macro  typically  larger domains macros inner loop iterates through global list macroschemas  beneﬁcial larger value produce better soon instantiating macroschema succeeds  results price longer training time         algorithm greedily commits adding iterative macro                                                        new iteration outer loop starts procedure    iterative macros search                       automatically determines length iterative macro  integrating iterative macros search algorithm raises number contained macros  major challenges instantiation pruning gen code set relaxed plan steps  eral case total number iterative macros applicable inserted iterative macro during subsequent iterations  state order bdwhereb number clas used relaxed steps ignored matching  sical macro instantiations applicable state macro instantiation relaxed plan computed intu  number macros contained iterative macro each itively matching procedure tries maximize number  stantiation expensive compute cost relaxed steps used macroinstantiation formal  total cost instantiating contained macros details matching provided later    instantiation pruning performed separately figure  presents instantiate procedure instantiates  large effort spent building elements macroaction iterative macro input pa  rejected later combined algorithm tries rameters macroschema ms search state  given state build iterative macro shows set relaxed steps original relaxed plan minus  promise search closer goal state guid used steps main loop iterates through ac  ance building iterative macro given relaxed tions used ﬁrst step macro ms  plan state expanded building macro instan applicable instantiations ﬁrst macro’s  tiation founded simple powerful ideas operator  deciding instantiate given step heuristics each action ∈ consms method  used select action allow large number matchinga mssrs creates partial instantiation ms  laxed steps subsequently inserted second steps ﬁrst step followed zero steps instantiated  ﬁlled relaxed plan actions actions used elements rs zero uninstantiated steps  preserve correctness variable bindings iter figure  discussion later number relaxed  ative macro completion important feature steps given threshold corresponding partial  algorithm relaxed plan misses steps stantiation abandoned attempt  unrelaxed solution                    ﬁll remaining gaps uninstantiated steps consis    figure  shows procedure building iterative tent actions soon complete instantiation built  macro pseudocode takes input global list macro method returns considering possible                                                     ijcai                                                      matchinga mssrs                                lowlevel search section  details        ←     mi   ms  create local partial instantiation       figure  shows number expanded nodes each     mi ←     lengthms                            main logarithmic scale each macros classical       consmiis ∩ rs  ∅                       macros iterative macros note lines miss         continueleavemii uninstantiated           ing data point—this represents problem instance       each rp ∈ consmiis ∩ rs                solved planner         undo instantiation miiifany           analyzing expanded nodes performance         mii ← rp                                    tested application domains roughly split cat         count subsequent positions          egories ﬁrst category benchmarks           ﬁlled elements consmijs ∩ rs driverlog freecell pipesworld planning macros       select element rp highest count value                                                    better lowlevel search iterative macros better       undo instantiation mi                    classical macros notable exception philoso       mii ← rp     return mi                                         phers kinds macros perform similarly                                                        application domain classical macros achieve                                                        impressive savings little room im  figure  matching macro instantiation relaxed plan provement zeno travel savings search tree                                                        size come price relatively large increase solution  comes simplicity pseudocode skips details length figure  discussion later compar  threshold computed effective heuristic ing iterative macros vs classical macros domains satellite  set threshold largest matching encountered blocksworld rovers depots airport reduction  ms macroschema used parameter regardless number expanded nodes order magnitude  values parameters rs       seen hard problem instances    matching attempts use elements rs second category beneﬁts macros  possible macro instantiation exact computation limited driverlog macros usually faster  maximal value expensive require exceptions data point  horizon  enumerating possible instantiations ms applicable tal axis classical macros fail iterative macros  state instead greedy procedure presented figure  slower lowlevel search freecell classical  tries step  ≤ ≤ lengthmstocommittousingare macros iterative macros similar performance  laxed step rp instantiating mii step exists instances freecell problems planning macros  rs∩consmiis∅ mii left uninstantiated oth similar planning macros differences  erwise element rs∩consmiis selected using encountered savings frequent larger  heuristic test pseudocode details practice compared cases macros slower lowlevel  number consistent actions quickly decreases new steps search finally pipesworld tankage performance  instantiated each new step introduce additional macros compared lowlevel search varies signiﬁcantly  binding constraints                                  directions iterative macros faster classical                                                        macros solve problem clear                                                        clusion drawn domain analysis    experimental results                               three domains left future work  classic iterative macros implemented ff macros lead solving problems lowlevel                                                                                                hoffmann nebel  ff  handles strips search given domain assume im cm    adl domains numeric variables axioms tem numbers problems solved iterative macros classical  poral planning                                       macros macros respectively data sets                                                                                  −  −        research tested large set benchmarks time constraints value im cm         previous international planning competitions satellite   blocksworld   optical    strips  satellite blocksworld rovers depots zeno philosophers   zeno travel   driverlog  travel driverlog freecell pipesworld tankage non   freecell   pipesworld  temporal pipesworld tankage nontemporal adl       figure  illustrates macros affect quality  promela dining philosophers promela optical telegraph lutions cost node search each chart   airport power supply restoration middle compiled—psr twopoint clusters each domain consider                                                                                                  representations used                            chart given problem instance assume im cmand    experiments run ghz machine cpu lengths solutions iterative macros classical                                                                                                    limit  minutes memory limit gb each prob macros macros used respectively im im  lem instance planning iterative macros planning rcm  lcml leftmost data point cluster                                                                                                        classical macros planning macros com shows average minimum maximum value im  pared plan classical macros length iter problem set corresponding domain right  ative macro limited macro instantiation results data point shows similar statistics rcm macros  shown   domains remaining slightly improve average solution length freecell  domains psr pipes tankage macros learned leave unchanged optical philosophers  performance training set worse mains zeno travel average overhead                                                      ijcai                                                                     satellite                          blocksworld                         rovers                                                                          iterative macros                    iterative macros          regular macros                      regular macros            macros                           macros                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           iterative macros                                                                                               regular macros                                                                                                macros                                                                                                                                                                promela optical telegraph          promela dining philosophers            depots                                                                                                                          iterative macros      iterative macros                                                           regular macros        regular macros                                                             macros             macrositerative macros                          regular macros                          macros                                                                                                                                                           airport                            zeno travel                        driverlog                                                                          iterative macros                    iterative macros                   iterative macros          regular macros                      regular macros                     regular macros            macros                           macros                          macrosfreecell                      pipesworld nontemporal tankage                                                                                iterative macros                             regular macros                               macros                                                                                                                                                                                                                                                                                                                                                                                                                               iterative macros                                                                             regular macros                                                                               macros                                                                                                                          figure  search effort expanded nodes problem sets ordered “no macros” curve monotonically increasing    iterative macros  classical macros blocksworld iterative macros macros solve                                                        problems fast    chart figure  presents similar statistics                     search time                       processing node lowlevel search includes computing  cost node   expanded nodes instead solution relaxed plan checking node vis  length include problem instance statistics ited macros add overhead instantiation  solved corresponding type macros smaller expanded nodes savings shown  lowlevel search time larger  seconds figure  overhead surprisingly high proﬁling  included time threshold better accuracy tests shown main bottleneck current im  statistics small noise reported cpu plementation macros attempting ﬁll gaps partial  time total time order noise instantiation figure  line  fortunately step  cost node measurement unreliable statistics implemented efﬁciently looking  collected philosophers kinds macros sistent action ﬁll gap corresponding operator schema                                                     ijcai                                                    
