                 nearoptimal anytime coalition structure generation            talal rahwan sarvapali ramchurn viet dung dang nicholas jennings                         iam group school electronics science                                 university southampton bj uk                            trrsdrvddnrjecssotonacuk                                                                   ∗                      abstract                              cs   argmaxcs∈cs   cs coalition struc                                                            ture cs  ∈csis partition  disjoint ex      forming effective coalitions major research      haustive coalitions cs set partitions      challenge ﬁeld multiagent systems cen    each agent belongs exactly coalition      tral endeavour problem determin                                                            cs      c∈cs vc search space      ing best set agents participate                                                                            oaa ωa        given team end paper      present novel anytime algorithm coalition     payment calculation compute transfers      structure generation faster previous agents incentivised stay coali      time algorithms designed purpose al    tion assigned payments      gorithm generate solutions     depend stability concept used bargaining      tight bound optimal optimal      set kernel core ﬁnding usually np      pending objective works partition     complete      ing space terms small set elements      represent structures contain coalitions paper focus coalition structure generation      particular sizes performs online heuris problem common practice literatrue sandholm      tic search prunes space considers et al  dang jennings  focus char      valid nonredundant coalition structures  acteristic function games cfgs value      empirically show able ﬁnd solutions coalition given using characteristic function vcup      worst case  efﬁcient  widely used algorithm solve problem                                                        yeh  rothkopf et al  algorithm      time ﬁnd optimal value state                   art dynamic programming dp algorithm   runs Θ  guaranteed ﬁnd optimal solu       agents using  memory                tion based dynamic programming dp                                                        dp approach impractical agents limited                                                        computational power computing optimal cs     introduction                                       agents requires × operations  coalition formation cf coming distinct dynamic environments consider agents typi  autonomous agents order act coherent grouping cally sufﬁcient time perform calculations  long studied cooperative game theory osborne cases approach gives good approximation  rubinstein  recently impor reasonable time valuable  tant topic multiagent systems team agents background paper describes novel  need maximise individual collective ef time search algorithm uses heuristics generate  ﬁciency example agents form efﬁcient optimal nearoptimal tight bound coalition  groups buy goods bulk sensors decide structure algorithm works grouping  group monitor given area dang et al  coalition structures according sizes coalitions  given set agents     ∈ cf process contain term conﬁguration ex                                                                                                 volves three computationally challenging stages      ample coalition structures                                                                 follow conﬁguration   space    coalition value calculation each subset coalition        ⊆                                               coalition structures partitioned smaller subsets        calculate value vc indicating beneﬁcial element given subset conﬁgura      coalition formed note                                                      tion different previous representations used      requires processing  possible coalitions   anytime algorithms looked space    coalition structure generation equivalent interconnected coalition structures sandholm et al       complete set partitioning problem yeh  dang jennings  necessitates searching      means computing optimal set coalitions bigger portion space method order                                                    ijcai                                                    ﬁnd integral worst case guarantees optimal having maintain list coalitions memory  solution using list conﬁgurations coalition build approach compute coalition structure val  structures estimating average upper bound ues  solutions exist each conﬁguration list  able zoom best conﬁgurations search  basic deﬁnitions  ing relatively minute portion search space typically       −                                                deﬁne basic constructs used algorithm   ×  coalition structures reﬁning                                                            let cls ∈   list coalitions size ∈    bound conﬁguration searching                                                        cl set coalition lists cls ﬁg  coalition structures conﬁguration able ure  conﬁgurations  agents let  duce time ﬁnd optimal conﬁguration        ∈g                                                        gg  ggcs  cs set possible unique  discarding conﬁgurations lower upper bound conﬁgurations elements                                                                                            cs  best value far                     coalition sizes let  gcs →  function    paper advances state art following takes particular conﬁguration returns coali  ways provide anytime algorithm compute tion structures conﬁguration denote  optimal coalition structure faster previ list each element set coalition structures  ous anytime algorithm designed purpose second conﬁguration formally deﬁned follows  provide novel representation search space based                                                                                     gfg  ggcs  appropriate  coalition structure conﬁgurations approach permits                      ∈n                                                        use nn  ngcs  note element  selection solution based selection ﬁgure  graphical representation   coalition structures particular conﬁgurations time agents finally optimal coalition structure noted  available ﬁnd solution algorithm pro cs∗ section expand  vide nonintegral worst case guarantees quality notation algorithm searches space  computed solution estimate upper bound  optimal solution improve estimate searches  space finally algorithm empirically shown  solutions worst  optimal value   time seconds takes dp approach  ﬁnd optimal value  agents    rest paper structured follows section   describes related work work section  details formal  model section  details algorithm section  empiri  cally evaluates section  concludes      related work  yun yeh’s dp algorithm later rediscovered rothkopf et al  combinatorial auctions widely regarded fastest   algorithm coalition structure generation use figure   agents elements expanded  benchmark algorithm reasons  anytime coalition structure generation  lined earlier number researchers sought develop                                                        section algorithm coalition struc  heuristics anytime algorithms particular shehory                                                        ture generation input set cl  kraus  devised algorithm ﬁnd coalition structures                                    vc                                                         ∈         ∈clis given ac  constrained certain coalition sizes algo cls      cls                                                        ceptable bound  ∈     optimal value    rithm does guarantee return optimal value         β                         β                                                         stop optimal solution  point does provide means measuring efﬁ                                      β                                                         known     returned given algorithm proceeds  ciency coalition structure chosen approach  cs                                                        three main stages ﬁrst preprocessing stage  assume cs known opposed vc                                                        involves scanning input obtain maximum aver  case case improving sandholm et al                                                        age values  ∈cl values used   dang jennings  devised algorithm             cls                                                        second stage involves generating list unique  provides guarantees worst case bound optimal                                          ∗                                                          ∈gcs  selecting element  search    algorithms search space consists coalition                              cs                                                        computationally costly stage involves  structures section  given values                                    ∗                                                        termining values cs ∈ ﬁnd cs  vc guarantee integral bounds                                                         each stages following subsections note  means guarantee best case produce                                                        ﬁrst stage solution best far  bound  optimal value furthermore                                                        returned quality guaranteed    opposed approach avoid searching                                                                                             optimal  case  agents  space cases order guarantee optimal          solution recently work rahwan jennings  bound proven sandholm et al  pro  reduced time taken cycle through values cedure stage  equates searching second layer                                                    ijcai                                                    stages optimal β  good  β solution guarantees  quality solution given cases second  stage completes    stage  preprocessing  denote coalition index list cl clc  ∈   cl agent coalition index  ck vectors containing maximum av  erage value each cls noted maxs avgs  preprocessing stage detailed algorithm  calculates  maximum average value cls ∈cl  doing possible search elements figure  gcs  agents shaded gs   start possible value cs searched scanning input  containing  coalition grand coalition   cla  coalitions containing coalitions                                                                                                summing values coali require cl vc ∈ cl cl ∈clcs                                                          a  tions cl depicted levels   ﬁgure                                                            let  −   note best structures cs                                      ∈                                                           initialise maxsavgs maxs avgs  maxs maxs max                                                                        ∈  efﬁcient cs far           avgsavgs avg                                                                                                                                       initialise νmax cs     each cls through element                                                           mod       record maximum maxs  max c∈cls vc           ←                                                                                              cend  cls   complement actually  average avg          ∈    vc                           cls  cls                                                                                   ←cl    possible cycle through cl cl −        end                                                         end  time pair elements each lists forms  cend                                                                 ←    −       ←     coalition structure cl cl ﬁgure  line   let  cls  cls  algorithm  doing ensure  vc maxs                                                            maxs ← vc  pairs disjoint coalitions containing  end  agent chosen form cs ensure property  sums ← sums  vc                                                                                                                                                               repeat lines   replacing calculate  upheld indexing cls rahwan jennings                                                                                                                                                          maxs sums  ﬁgure  indexing mechanism actually results   calculate values coalition structures lines                ∈               ∈                                each element  cls  index   exactly                                                                           let ν ← vcvc   matched element ∈ cl − index cl −c                                                                                                        a−c                                                              let ν ← vc  vcl                                                                            pk        time possible compute                  a−ck                                                           let ν ← vc   vcl      value cs follow conﬁguration                                                                             maxννν νmax     achieved looking each coalition  νmax ← maxννν smax ← cmax ←  pair cycling through cls cla−s each  end                                                             end  coalition retrieve value coalitions size             sum                                                                  ← sums       ←                                                             avgs  cl  avgs cl     each element coalition coalition split                                                                       end  constituent parts sum add                                                                    smax ← − smaxcmax ← clsmax − cmax                                                                                       value coalition vice versa lines       cmax          cmax                                                         cmax ← cl   cmax ← cl                                                                       smax           smax   algorithm                                                                                                             cs ←cmaxcmax    searching coalition structures ways shown                                                                     cs ←cmax ∪                                                                            i∈cmax  evaluating complementary sizes coalitions    ←                                                                      cs   cmax i∈cmax  containing actually search space                                                                        return max avg cs arg max      cs  gets smaller increases illustrated                cs∈cscscscs   ﬁgure   agents shaded conﬁgurations repre     algorithm  preprocessing stage  sent fully searched scanning input  covered coalition struc              ≤  tures case  preprocessing stage                                                                                            guarantee best cs far cs returned  size input order  algorithm scans        ∗  bound perform operations algorithm  cs ensured  operations performed loops lines  unsearched conﬁgurations ones                                                        elements repeated coalitions size    algorithm  linear time complex                    ity algorithm oa note value lower cs  having obtained values                                                        maximum average coalition list                                                                                   search space                                         best possible solution cs far    rahwan jennings  use heuristics guaran construct gcs choose element  tee cls ascending order lexicographically search                                                    ijcai                                                      stage  constructing choosing               ub  excluding previously searched conﬁgurations                                                                                        conﬁgurations                                    cs  ubg   ×  β  means  crucial algorithm ﬁnds suitable solution proceed according  tains cs seek necessarily optimal steps described  quickly possible large possible choosing conﬁguration having computed possible                                                        conﬁgurations knowing possible search each  ways doing choose conﬁgurations     search likely contain optimal value element using search procedure described sec  time allow prune search space tion  consider procedure choose ele                                                        ment search av gg  case optimal second updating max                                          ∗                            imum value precise information elements highest upper bound ubgis                                                                 av gg ≥  gathered previously searched  possible ∗ β choose smallest ele                                                               ubg  prune search space carrying operations ments need choose prune  necessary ﬁrst identify possible search space time  ﬁgurations gcs                                    likely contain required solution need  constructing unique conﬁgurations gcs   set   compute expected gain space  conﬁgurations equal integer parti avoided searching element cost searching  tions generated number agents  each ∈none time estimate parameters       skiena      example  num    ﬁrst need estimate arg maxcs∈f gv cs  ber  possible integer partitions conﬁgurations equates value lying ubg av gg                 element absolute uncertainty need com      growth√ rate set conﬁgurations pute given estimates ubs size space  known Θeπ aa lower pruned result value obtained greater  input oa number parti ubs elements performed each                                                           ∈g  tioned fast recursive algorithms generate partitions csg maximum gain chosen  exist chose standard algorithm kreher searched details outlined algorithm   stinson                           consider improve estimates ub    having obtained possible conﬁgurations given allow reduce space searched  computed maximum average values online  each coalition size preprocessing stage pos                                                        require gcsubg av gg ∈gcs  sible calculate upper bound ubg average value       av               ∗                                                                   ∗g ≥    ∅              ∈g                                                          β  ub    β    ubg maxg cs ubg  av gg corresponding ∈nas                                                                             configurations satisfy bound  achieved cycling through sum       →        ∈g                                                                   arg ming β    ming maximum average values coalition  return  size conﬁguration example conﬁguration  end                                                          initialise maxgain        obtain ubg  max  max  max                                                          ∈gcs                                                                            av gg   avg  avg  avg actually              av gg ubg                                                            let emax  “      expected value”                                                                                            minimum  value coalition structure conﬁgu                                 −                                                               let egain  ∈g gub  emax                                                                              cs      ration sizes repeated expected gain choosing element  use second best best end  egain maxgain                                                                        ←         ∗ ←  list example conﬁguration       maxgain egain                                                           end  sum maximum cl  second best  end                                                                  ∗  cl maximum cl second  return  best cl procedure gives precise ub algorithm  selecting element gcs searched  element requires searching coalition lists  values ordered input size                             grows quickly updating ub each element searched  a−ss                                              cs∗ detailed section  possible compute  elements gcs contain smaller elements                                                        maximum value certain combinations sizes splits     meaning precise updates                                                        split ∈ used update ub  elements stop   limit cost                                                       elements similar way procedure described  searching values lower                          maxs                           section  example searching element    having obtained ubg av gg elements                                                       conﬁguration         possible   compare value       far                         cs                         ﬁnd maximum value combinations                                 cl                           used update ub     element appears num          ber times possible coalition structures given conﬁgura       adding max  max  max  tion case repeated coalitions size  coalitions      adding max respectively ub  repeated equal number times position                                                             structure repeat equally considering positions estimates ubg precise  occur coalition structure      value likely tend upper bound element                                                    ijcai                                                    conﬁguration lowered using split  dated accordingly    number splits large includ  ing repeated splits computing maximum value  each time compute cs costly  compute maximum values splits  value known far search starts  initialised split half  searched value splits tracked computed  cs section  search complete      ∈gcsg  updated newly tracked split  updated g add element  conﬁguration split create new split tracked  remove previous split list tracked  case procedures gradually increase each figure  composing coalition structure  agents                                                                               g’s list splits tracked searched ensure conﬁguration       splits computed twice  searched value coalition struc  memory used dp  tures splits computed                                                        avoiding overlapping coalitions basically use    stage  searching element                cycle through possible instances through                                                        set combinations size  taken set a   stage main potential bottleneck                                                                                             each coalition use cycle through pos  volves searching space possibly equal                                                                              sible instances through coalitions size   space coalition structures searched                                                                                                                         using heuristics described section  reduce vector  ac each possi  possibility having search space section ble coalitions use cycle through possible                                                                                                       impact reduction provide instances through coalitions size  heuristics allow minimise redundant com set a  ac   gin  putations cycling through space proce doing avoid repeating agents avoid having  dure builds previous work rahwan jennings coalition structures     coalition   allows construct coalition structures ﬁtting conﬁguration use fast index  unique ﬁt particular time calculate ing techniques provided previous work rahwan                                                                                                values structures main problem jennings  search instances ck  constructing coalition structures procedure avoiding redundant coalition structures redun  performed na¨ıvely repetitions occur cause dant coalition structures      mation redundant invalid coalition structures     possible repeated  main types repetitions occur coalition sizes conﬁguration       structure contain coalitions       formally happen  agents different coalitions overlapping coalitions ck  cj  ak ordered  render cs invalid second struc cending fashion ﬁgure  use mk cycle  tures actually contain coalitions through combinations    ensures  happen conﬁguration requires multiple coalitions combinations ascending order  size coalition appears dif                                                                                          use smallest element coalition ck asakey  ferent positions elements ascending order identify coalitions gone through  procedure described avoids types    rahwan jennings           ∈                                ≤   ≤                                                       let ck  coalition located position   initially through coalitions contain                                         i ≤  i  let ak vector agents ak ak ak  leftmost column ﬁgure  points ﬁrst  members ck selected finally let smallest element ak ak  akck                 mk   mk     ck temporary array used smallest element ck greater smallest                                                                            cycle through possible instances ck use element ck ck  ensures ck  mk  mainly show need equal previous instance ck particularly case  memory coalition structures constructed ck  ck  need cycle through coalition mk cycled through coalitions contain  structures instead just need maintain mem  coalitions contain   ory structure time maintain                                                                               ∈  complete history computed solutions algorithm difference represents index                                                                                                       mi                                                                                                      memory requirement  size input points required agent ai required agent ai                                 alog                                                     opposed dp algorithm’s   yeh  rahwan jennings  mk represents actual  sandholm et al  algorithm agent                                                    ijcai                                                    
