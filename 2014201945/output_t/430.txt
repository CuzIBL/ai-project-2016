coordination avoid starvation bottleneck agents large network                         rajesh gautam                                kazuo miyashita                university tsukuba japan                          aist japan                      rgautamaistgojp                        kmiyashitaaistgojp                          abstract                            network connectivity steps                                                        processed overcapacity      paper present multiagent control   resources ﬁnal throughput limited      method largescale network pro  resource smallest capacity called bottleneck      pose extension tokenbased coordination   maximizing throughput means      technique improve tradeoff ing maximum utilization bottleneck resource high      ﬂicting objectives network reducing utilization bottleneck resource ensured maintain      lead time increasing throughput   ing sufﬁcient jobs safety buffer      cabs information agent’s ur    random events cause starvation      gency jobs fulﬁll demanded throughput improve tradeoff lead time throughput      maintain utilization passed downstream manufacturing methods developed      agents network upstream agents regulate wip lowest safe level prevents starva      provide necessary sufﬁcient jobs bottleneck tion bottleneck machines fowler et al      agents loss capacity degrades    methods subsume bottleneck machines      tal performance empirically evaluate   identiﬁable preliminary static analyses      cabs performance using benchmark problem     problem evolve time course      semiconductor fabrication process manufacturing bottleneck machines shift tem      good example largescale network     porarily unexpected random events ma                                                        chine failures disturb smooth ﬂow jobs phe    introduction                                       nomenon called wandering bottlenecks existing  network systems multiple resources collectively lutions problem philosophical manage                                                                                     perform desired task atomic com rial kaizen imai  theory constraint                                                                                    prises set steps accomplished speciﬁc sequence toc goldratt cox   exceptions                                                                                                     queueing theory allen  addressed analysis identifying wandering bottlenecks roser et al    control network queueing steady state neverthe prevent starvation bottleneck machines lot release  understand control dynamic behavior control regulate workload bottleneck ma  sidered critically important realizing smooth operations chines controlling entry jobs glassey  today’s complicated network transportation com resende  widely used practice  munication manufacturing typical examples theless achieved limited success centralized  large networks uninterrupted stable operations decisionmaking mechanism job entry point  required paper use manufacturing problem spond dynamics manufacturing wan  benchmark controlling largescale network dering bottlenecks controlling job entry    queueing theory little’s law little  states desired jobs processed requested dynamically  expected inventory work process wip equals machine maintain steady ﬂow  average lead time multiplied average throughput jobs leading bottleneck machines desired control  ﬁxed throughput reducing lead time lot ﬂow control possible through coordinated opera  quires wip reduced variable tions machines centralized control machines  predictable manufacturing environment reducing wip tends shares weak point lot release control  decrease throughput cutting job stocks machines centralized coordination method required ma  machine downtimes high probability forc chine decides job request job processing harmony  ing idle time machines lack jobs machines intelligent agent  process paper concerned improving timecritical manufacturing environment machine  tradeoff lead time throughput manu agent afford search gather necessary  facturing unpredictable machine failure  formation machines deciding actions                                                    ijcai                                                    sequently coordination techniques proposed multi addition agents model workstations  agent systems jennings et al  sandholm  falt types synthetic agents exist sinkagent each  ings nguyen  durfee  inappropriate kind job receives completed lots  purpose justintime jit ohno  method agent job’s process route synthetic agent  distributed manufacturing control exchanging sourceagent releases job transferring  kens kanban cards machines control ﬂows agent processing ﬁrst step job  amounts work wip fact jit ex  tensions instances tokenbased coordination wagner  semiconductor fabrication process  et al  xu et al  moyaux et al   widely used manufacturing related ﬁelds semiconductor fabrication complex man  simplicity jit succeeds sta ufacturing processes example production steps  ble leveled environments                         semiconductor manufacturing usually number    paper propose extension tokenbased numerous repetitive reentrant loops lead time ex  coordination method coordination avoiding bottleneck tends couple months atherton atherton   starvation cabs improving tradeoff lead  time throughput largescale uncertain network           source  cabs agents coordinate agents                 fsi  maintain adequate ﬂow jobs satisfy various dfa            dfb                   dfb   mands preventing starvation bottleneck agents                                    dfe   coordination achieved efﬁcient passing messages       dfb       pe   message includes information enables dfa                 agents identify bottleneck agents coordi             qless  nate agents maintaining desired ﬂow       dry   teg  jobs bottleneck agents section  explain                   qless  generic manufacturing problem semiconductor fab       ion    blu    asm wet  rication process used experiments details algo dfe  wet dfa ame ame scrub  rithms cabs explained section  section  illus dfc        meg         dfc  trates basic behaviors cabs using example manufac                   wet              lps  turing scenario section  shows results simulation exper                    osicd  iments validates higher effectiveness cabs                          dfc  conventional manufacturing control methods finally                          anc                                                                       sink product  sink product   section  concludes paper                                                            figure  network agents semiconductor fab  problem  section ﬁrst general model manu empirical validation cabs used measure  facturing problem introduce semiconductor fabri ment improvementof manufacturing capacity mimac  cation process example complicated systems testbed datasets wafer fabrication processes fowler  current manufacturing industry                robinson  available arizona state univer                                                        sity httpwwwwasasuedu˜masmlabhomehtm data    deﬁnition                                        set speciﬁes production steps semiconductor manufac  manufacturing problem requires processing set jobs ture factory model chosen ex     jn set workstations mod periments represents factory  workstations  eled agents   paper each job jl products product product produced sys                                               tem product  processing steps product  consists set steps  ssl processed  according process routing speciﬁes precedence  steps cycles exist process routes involving                                                                                                         straints steps lot jobs ﬂows through products total process time product                                                                                         agents according process route each agent aj iden min  productitis  min  fig                                                  ure  depicts process ﬂows products through  tical pj machines process tj tasks    tt                                                      workstations experiment problem viewed  each job jl demand rate drl number complex network agents  lots jl completed hour furthermore                                                agent aj processes task ti  takes process time pti  task agents corresponds step jobs  coordination through requirements  precedence constraints steps create complicated di                                                      cabs actions agents coordinated using  rectional network agents presume agent aj’s task tq                                                      messages transmitted agents agent uses require  step si preceding agent agent aj terms                                                    ment information incoming messages succeeding  task tq  aprejqisinchargeofastepsi− succeed agents making lot processing decisions generating                                   ing agent asucjq processes step si          messages send preceding agents                                                    ijcai                                                      action selection                                   message passing  cabs utilizes tokenbased coordination dispatching agents cabs decided solely require  agent selects lotprocessing actions based require ments succeeding agents information  ments succeeding agents process ﬂow cabs quirement key coordination agents  realizes pull mechanism like jit does pro agent tries meet requirements succeeding  cess jobs “pulled” downstream agents agents tasks aside meeting require    each agent aj periodically receives requirement pro ments succeeding agents agent minimize                 cessing task tq corresponding succeeding agent workload deﬁcit times satisfying demand rates                                                                                               asucjq requirement consists following three jobs example aj ’s workload task tq time                                                                                             types information detailed deﬁnitions given later quired process lot task ptq each agent  section                                       aggregated workloads tasks based demand  time limit   time agent asucjq needs rates jobs difference workloads                                                      total processing time tasks processed      lot step task tq                                                         current workload deﬁcit agent  request rate   rate agent asucjq needs                                         lots step task tq  starting time                                                        algorithm  calccriticality  agent aj      limit                                                            ∀ ∈  ···                              criticality                                                    tj set wi current wip task ti                criticality agent asucjq                                                                                                      ftj ← current time            pt pj    addition requirement information suc                        ∀i∈···tj                                                          earliest time ﬁnish current wip  ceeding agents each task tq ∈  agent aj                                                                              ∀i ∈ ···tj set dei  sumed local information demand rate                          current wip total number lots produced    total demand task ti ftj                                                                                                                                         ∀i ∈ ···tj set pri                                                                                    algorithm  selecttask message im ofagentaj               total production task ti current time                                                                                                 ∀  ∈  ···                                         wldj ←   ∀i∈···t dei − pri  wi pti          tj set wi current wip task ti                               ←     ∈ ∧                          current estimated workload deﬁcit aj    et      ti   ti       wi                                                                                                                             scj ← pj −  ∀i∈···t  drjobt pti pj    sort et according time limit im tloftasks                                                                set fetj ﬁrst task et                        surplus capacity aj    loop                                                return wldj scj     set start time fetj current time              ←                ∈       ∧     oft            eti        eti         et           agent recover workload deﬁcit processing                                                 eti   overlaps et  ∧  criticalityeti     lots demand rates jobs time needed       criticalityfetj                              cover deﬁcit depends deﬁcit surplus        imcr decides criticality task         capacity available agent algorithm  calculates                  oft   ∅                                agent’s criticality ratio workload deﬁcit sur                                    remove fetj  et                           plus capacity cabs agent large criticality                                         set fetj ﬁrst task et                considered bottleneck agent dynamic change agent’s                                                criticality represents wandering bottlenecks                                                                                                     return fetj                                      maintain continuous lot ﬂow task ti asucji    end                                           requested rate imirr agent requires incoming   end loop                                          lot ﬂow rate corresponding preceding                                                        agent apreji agent need jobs    agent aj uses requirement information suc earlier higher rate order recover workload  ceeding agents choosing lot process deﬁcit agent requires jobs immediately max  dispatching machine agent aj imum rate process materials recover  free algorithm  describes dispatching algorithm deﬁcit rapidly based requirement succeed  agent aj  returns task earliest time ing agent current workload deﬁcit agent generates  limit dispatching delay task higher consolidated outgoing requirement preceding agent  criticality   time limit algorithms algorithm  describes calculation outgoing requirement                                                                                            paper imtl imrr imcr respectively messages agent aj  each ti ∈  requirement  note requirement information time limit request   tuple omitl omirr omicr generated sent  rate criticality   corresponding tasks preceding agent apreji  incoming messages agent addition tasks mutually agent acts satisfy requirement succeeding  overlap intersection exists processing periods agent agent aj critical workload deﬁcit  time limit  process time overlaps    asucji wip tasks  current time  process time         process case agent postpone time                                                    ijcai                                                    algorithm  makerequest message imofagentaj         behavior algorithms mentioned illus                                                    trated using simple scenario production    ∀i ∈ ···tj set wi current wip task ti                                                   produces three job types according process         ←                                     ft   current time     ∀i∈···tj  wi pti routes shown fig  workstation agents labeled      earliest time starved                    ﬁve utilization according demand rate    crj ← calccriticality                         jobs shown attached percentage failures      current criticality aj                       occur time agent fails    ∈ ···tj                         time  recovers time  agent fails time                                     fti ← current time  wi ∗ pti pj             recovers time                                           earliest time starved ti                                                           tli ← imitl − pti  wi imirr                                                 joba                                                                                         jobb        time replenish ti based request asucji                                 jobc                                                                                    demand level     crj imicr ∨ tli tftj                                    omitl ← maxt fti tli                               omicr ← maximicr crj                                                              omirr ← minimirr pjpti                                                              finished  job inventory      aj lagging starving      omitl ← ftj                                       omicr ← crj                                                              omirr ← pjpti    end                                                                                                                                     end                                                                                                                                                return om                                                                     time                                                                      figure  finished job inventory                                limit requesting tasks ti earliest pos                                                 sible timing current wip emptied fti   til timing succeeding agent’s request ex                                 hausts current wip tli  situation realizes                          agent  lean manufacturing intended reduce                                agent  wip shorten lead times criticality agent                               agent  aj intends pass highest criticality pro    cess route choosing higher value suc                                                             ceeding agent request rate truncated                                                         criticality  requested value greater maximum capacity           agent                                                     agent prioritizes recovering workload deﬁcit  satisfying succeeding agent’s requirement agent aj                                                                                        critical sufﬁcient wip process    requirement preceding agent agent sends values                                                              time limit criticality    request                                rate purpose                                                          time                                                                     figure  criticality agents    simpliﬁed example scenario                                                          achieved production products wrt                                                        mand shown fig  criticality three agents                                                        time shown fig  criticality agents                                                        unimportant scenario time line divided                                                        sections shown ﬁgures                                                          second time section agent stops receiving                                                        jobc failure agent criticality rises                                                        requests job joba higher rate agent                                                        meet workload requirement agent propagates                                                        request agent                                                          time section agent stops request           figure  example production          ing jobb failure information prop                                                    ijcai                                                    agated agent agent receiving updated                                                                                      conventional  quirements agent stops processing jobb uses                                                                                             cabs  capacity meet requirement agent processing            demand rate                                                                     joba higher rate agent’s requirement joba                                                                     high rate consistently met criticality remains low                                                                     recovery agent time                                                                                      utilization agent higher agent according    demand rate agent’s criticality rises during failure                                                              critical bottleneck agent leadtime    fourth time section recovery time     agent requests jobb higher rate recover work      load deﬁcit time  agent stops dispatching joba    lower criticality agent requirement                                                              uses capacity dispatch jobb higher                          criticality agent agent starts receiving jobs               throughput  stead agent agent’s workload deﬁcit criticality                                                             figure  throughput lead time product  crease agent increase    ﬁfth time section criticality agent    agent equal time  agent uses capac                        conventional  ity produce joba jobb balancing respec                          cabs                                                                       demand rate  tive criticalities agent agent criticalities     agent agent rise rate agent restarts           processing jobc recovery time                     sixth time section agent large deﬁcit          jobc agent dispatches jobc exclusively recover           deﬁcit reduce criticality time leadime    agent stops getting requests additional joba stops  processing joba starts processing jobb consequently    agent recovers inventory deﬁcit jobb  duces criticality agent recov      ers deﬁcit jobs returns normal time     agent highest utilization                           example relevant unaffected fail             throughput  ure criticality remains low times                                                             figure  throughput lead time product      experiment                                                evaluated performance cabs using data semi        aggregated demand conventional  conductor manufacturing process described section                    cabs    simulation developed model manufactur              ing process agents test proposed algorithms                                                                            cabs built using spades riley riley                middleware httpspadessimsourceforgenet   agentbased discrete event simulation environment    provides libraries apis build agents interact   world sending receiving timebased events   aggregated  leadtime    experimental results                                   experiments induced random failures                                                              workstations failures occur based exponential dis                  tribution mtbf value  min mttr                  aggregated processing time  value  min dynamic changes worksta  tions’ capacity bottleneck workstations shifted temporarily figure  aggregated result products  criticality agents changed dynamically    compared performances cabs figure  shows result throughputs lead times  ventional manufacturing control method constant releasing product different demand rates demand  earliest date ﬁrst edd dispatching rates high agents bottlenecks regulate  able make comparison sophisticated methods throughput starved  fowler et al  inap cases cabs achieved approximately equivalent throughputs  plicable problems wandering bottlenecks      conventional method required lead                                                    ijcai                                                    
