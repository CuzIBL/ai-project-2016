                                arc consistency during search        chavalit likitvivatanavong              yuanlin zhang                      james bowen                                               scott shannon                  eugene freuder          school computing            dept science    cork constraint computation centre    national university singapore    texas tech university usa      university college cork ireland                          abstract                          assignment acstry assignment                                                        argument make decision based return      enforcing arc consistency ac during search  value try explicit abstraction acs notice      proven effective method solving   invocation acs method say acstry      constraint satisfaction problems  residual data left structures acs      widelyused constraint programming sys   explore make use residual data design new      tems effort   acs algorithms new measurements mind empir      sign efﬁcient standalone ac algorithms  ical study carried benchmark new acs al      systematic study efﬁciently enforce  gorithms designed using conventional techniques      ac during search far know signif  new acs algorithms simple shows      icance clear given fact ac clear performance advantage clock time rest nec      enforced millions times solving hard essary background reviewed      problems paper propose framework     binary constraint satisfaction problem csp triple      enforcing ac during search acs com                                                        vdcwherev   ﬁnite set variables dx  ∈      plexity measurements acs algorithms based                                                         dx ﬁnite domain xandc ﬁnite set      framework acs algorithms binary constraints variables asusualwe      signed advantage residual data left assume constraint pair variables      data structures previous invocations use eandd denote number variables      acs algorithms vary worstcase time   number constraints maximum domain size      space complexity complexity mea    csp problem      surements empirical study shows                                                          given constraint cxyavalueb ∈ dy support      new acs algorithms perform better                                                        ∈ dx ∈ cxyandaconstraint check involves deter      conventional implementation ac algorithms                                                        mining ∈ cxy ∈ dx ∈ dy      search procedure                                                        constraint cxy arc consistent each value dx                                                        support dy value dy support dxa    introduction background                        csp problem arc consistent ac constraints  enforcing arc consistency ac constraint satisfaction arc consistent enforce arc consistency csp problem  problems csp during search proven success remove domains values sup  ful decade sabin freuder  mackworth port csp arc inconsistent domain                                                        ac enforced problem   ac enforced millions times solving                                                                   use dx  denote initial domain  hard instances need efﬁcient ac algorithms obvi           ous given numerous attempts optimize standalone ac search starts current domain moment during                                                        ac search value present absent respec  algorithms improvement performance       ∈  u∈  comes challenging paper order improve tively    respectively each domain                                                        dx  ∈ introduce dummy values head tailwe  overall efﬁciency search procedure employing arc                             ∪         consistency focus efﬁciently enforce ac dur assume total ordering head tail                                                        head ﬁrst smallest value tail largest  ingsearchacs standalone ac algorithms                           ad    paper abstract acs separate module value succ pred respec                                                      tively ﬁrst respectively value dx∪head tail  maintains ac changing csp problem meth                                    ods complexity measurements proposed greater smaller respectively   evaluate theoretical efﬁciency acs algorithms term  methods key method acstryx   enforcing arc consistency during search   assignment checks ∪x  csp solver iterative interaction  arc consistent search procedure makes search procedure acs algorithm acs algorithm                                                    ijcai                                                     abstracted data component methods algorithm  mac template acs methods                                         csp problem   init  try   backjump           ———————————–mac algorithm———————————–  addinferx  csp problem ∈ macp   pv     ∈ pd                      pv  pd  ∈          acsinitp  return solution            paper                 create stack  assignments  pv andpc denote set variables domain  freevariables ← pv                                                              freevariables  ∅  set constraints                               select variable xi freevariables value xi    acsp accessible read caller   acstryxi                                                                     spushxia  text clear simply use  instead acsp           freevariables ← freevariables −xi    acsinitpsetsp creates initializes                                                                   acsaddinferxi   internal data structures acs returns false arc     xia ← spop  consistent true acstryx  enforces arc         return solution                  ∪x                                        acsbackjumpxi   consistency              new problem                 freevariables ← freevariables ∪xi  arc consistent sets returns true  wise  discarded problem remains unchanged  return assignments                                                              ———————————–template acs methods———————————–  try returns false general method accept acsxinitp                       ≥                           ← initialize internal data structures acsx  type constraints  acsaddinfer    en         return acp   ac standalone ac algorithm  forces arc consistency  ∪x  new    acsxtryx                                                              backuptimestamp                                    problem   arc consistent sets returns     delete values dx  true addinfer returns false mac infers  ←y  cyx ∈ pc                                                     propagateq return true   value  calls acsaddinfer       acsxrestoretimestamp return false  general constraint added long acsxaddinferx                                                              delete dx ←y  cyx ∈ pc return propagateq  ferred current assignments search procedure acsxbackjumpx                                                       restoretimestamp  acsbackjump      discards constraints added  acsxbackuptimestamp  acstry acsaddinfer including  backup internal data structures acsx following timestamp                                                         backup current domains following timestamp  addition     consequences constraints   acsxrestoretimestamp  caused arc consistency processing retracted  restore internal data structures acsx following timestamp                                                             restore domains  following timestamp  method does return value ignore preﬁx acs acsxpropagateq  method clear context                   ∅                                                                select delete arc    search procedure usually does invoke acs meth    revisex  ods arbitrary order following concept character      dx  ∅ return false                                                                   ← ∪w  cwx ∈ pc   izes typical way search procedure use acs                                                           return true  methods given problem   canonical invocation se    acsxrevisex  quence cis acs methods sequence methods   delete ← false                                                    foreach ∈ dx         satisfying following properties        hassupportx  initpandforanyi  ≤  ≤  mi ∈try addin             delete ← true delete dx                                  ≥  fer backjump   returns true forany         return delete  tryx  addinferx  ∈m  mk ∈       acsxhassupportx                                                             ∃b ∈ dy ∈ cxy  return true  acspv  ∈ dx moment invocation     return false  mibackjumpy   awhere  ≤  ≤ mi−  invocation try addinfer returns false  exists mj  ≤ ji−  mjtryy  ac mackworth  acsxaddinferx   backjumpy  mj mifor line  does backup  infer  miaddinfer  ≤ ≤ returns false mi ence current assignments new backup  backjump note arbitrary canonical invo necessary  cation sequence sequence generated  meaningful search procedure                            complexity acs algorithms    example  algorithm  line – illustrates mac present types time space complexi  sabin freuder  designed using acs  ties acs algorithms nodeforward time complex                                                        ity acs algorithm worstcase time complexity    template implementation acs methods           acstryx  awherex  ∈ pv ∈ dxanincremen  facilitate presentation acs algorithms list tal sequence consecutive invocations acstry  template implementation each acs method algo each invocation returns true invocations involve  rithm  try change internal data structures variable argument pathforward  domains problem  simply backups cur time complexity acs worstcase time complexity  rent state data structures timestampx line  incremental sequence ≤ size pv   fore enforces arc consistency line – alternative invocations nodeforward space complexity acs algo  “backup changes” discussed rithm worst case space complexity internal data  does affect complexity measures acs algorithms structures excluding representation prob  possibly clock time acsxpropagate follows lem  acstryx  pathforward space complexity                                                    ijcai                                                                                                                         yzx                                                                                           acs algorithm worst case space complexity                                                                                                                                                                                                                                                  internal data structures incremental sequence                                                                                                                                                                                                                                             invocations                                                                                                                                                                                                                                                                                                                                                                   empirical studies number constraint checks                                                                                                                                                                                                                                         standard cost measurement constraint processing                                                                                   ﬁne acs types redundant checks given cis                    mm  mk present values ∈ dx ∈ dy                                  mt ≤ ≤ check cxya mt negative repeat          figure  example  positive repeat respectively iff  ∈ cxy ∈ cxy  respectively  cxya performed ms ≤ st satisﬁes following invariants support invariant —                           present                      lastx ∈ cxyandsafety invariant — exists                                                        support dy comes lastx    acs folklore                                    function hassupport line – follows way                                                        ac ﬁnd support note restore removed  traditionally acs simply taken implementation                                                        values restored original ordering domains  standard ac algorithms search procedure let ﬁrst                                                        critical correctness acsrecord  consider algorithm acs employing ac shown  algorithm  methods different  algorithm  listed                               theorem   acsrecord correct respect                                                        cis nodeforward pathforward time complexity                                                        acsrecord oed nodeforward       algorithm  acs acsrecord             pathforward space complexity oed oned        ————————————acs———————————                   spectively fully avoid negative positive     acsinitp       ← initialize internal data structures acsx repeats       return acp      acsbackuptimestamp       backup current domains following timestamp nodeforward space complexity acsrecord     acsrestorep timestamp                 improved oed minn van dongen        restore domains following timestamp     acshassupportx                            example  example focus support       ← head       ← succb dy   tail         cis acsrecord methods consider           ∈ cxy return true             following cis mi tryz  returning false mi       return false                                    tryz   assume mi arc consistent        ————————————acsrecord———————————     acsrecordinitp                             contains constraints domains shown figure       ←                                          supports candd explicitly drawn       ∀cxy ∈ pc ∀a ∈ dx initialize       return acp                               assume  lastx yb miduringmi need     acsrecordbackup                      timestamp                                               ∈ dx               ∀cxy ∈ ∈ dx backup following timestamp ﬁnd new support deleted       backup current domains following timestamp propagation  assume lastx     acsrecordrestoretimestamp                                                          restore data structure  following timestamp dated acsrecord support  returns       restore domains following timestamp false ∪z  arc inconsistent lastx yis     acsrecordhassupportx       ← lastx  ∈ dy return true restored miinmi new support needed           ←            succ  tail                    ∈ dx  deleted propagation         ∈ cxy  lastx ←  return true                                                           acsrecord needs check       return false                                                        ﬁnds support bvalueb present mi mi                                                        ∈ cxy checked mi mithe                                                        constraint check ∈ cxy negative repeat mi  proposition  acs correct respect cis  nodeforward pathforward complexity acs    exploiting residual data  oed nodeforward pathforward space  complexity oed avoid positive nega key feature acs acsrecord  tive repeats                                         faithful respective ac algorithms focus                                                        acs investigate new ways make use fact    known variablebased ac imple methods acs algorithm usually invoked  mented space true acs times millions times solve hard problem search    introduce acsrecord algorithm em procedure  ploys ac bessiere et al  listed algo  rithm  methods template acs  acsresidue  methods omitted ac improves ac simply section design new algorithm acsresidue listed  using data structure lastx remember ﬁrst algorithm  extends ideas ac ac  support dy latest revision cxywhen  like acsrecord acsresidue needs data struc  cxy needs revised each value xac ture lastx cxy ∈ ∈ dxaf  starts search support lastx lastx ter acsresidueinitp lastx initialized                                                    ijcai                                                     ﬁrst support respect cxy invocation support contrast acsrecordtryz  looks  acsresiduetry acsresidueaddinfer ﬁnd support ∈ dy through example  ing support value dx respect cxyacs clear acsresidue save constraint checks  residuehassupportx ﬁrst checks line  lastx acsrecord save converse true obvi  present support ously  searches line – domain scratch ac   does new support used  acsresopt  date lastx line  method called acsresidue acsresidue’s nodeforward complexity optimal  acsresiduetry acsresidueaddinfer simply propose algorithm acsresopt listed algo  reuses data left structure previous invo rithm  optimal nodeforward complexity  cations try addinfer unlike acsrecord acs using residues idea remember  residue does maintain backup restore residues lastx ybystopx line  line                                                         beginning try acsresoptaddinfer                                                        hassupportx looks support ∈ dx       algorithm  acsresidue                                                        lastx yb present looks new support af        ————————————acsresidue———————————     acsresidueinitp acsrecordinitp ter line  instead beginning domain     acsresiduebackuptimestamp       backup current domains following timestamp search through tail head     acsresiduerestoretimestamp              tinue encounter stopx simplicity line        restore domains  following timestamp                                         acsresiduehassupportx                    hassupport initial domain problem used           ∈          ←                                                                 return true head         cirsucca dy  succheaddy succa dy  tailother       ← succb dy   tail                                             ∈ cxy  lastx ←  return true  wise cirsucca dy  succa dy experiment       return false                                    implement hassupport using current domain        ————————————acsresopt———————————     acsresoptinitp       ←                                          theorem   acsresopt correct respect cis       ∀cxy ∈ pc ∀a ∈ dx initialize yandstop                                                                                     nodeforward pathforward time complexity oed        return ac                                               acsresoptbackuptimestamp                oed   respectively nodeforward path       backup current domains  following timestamp     acsresoptrestoretimestamp               forward space complexity oed fully avoids       restore domains following timestamp positive repeats avoids negative repeats     acsresopttryx        ∀cxy ∈ pc ∀a ∈ dx stopx ← lastx       backuptimestamp                         example  consider constraint cxy figure       delete values dx ←y  cyx ∈ pc                       propagateq return true               fore acsresopttry supports drawn explicitly       restoretimestamp return false  graph assume lastx yb try acs     acsresoptaddinferx                                                          ∀cxy ∈ pc ∀a ∈ dx stopx ← lastx resopttry ﬁrst set stop   assume       delete dx ←y  cyx ∈ pc      following constraint propagation deleted       return propagateq     acsresopthassupportx                     constraints acsresopthassupportx search       ← lastx  ∈ dy return true                                                                                               support  ﬁnd new support       ← cirsuccbdy ∈ dy  stop xay                                                                     ∈ cxy lastx ← return true sume later deleted constraint propagation acs                                                                                         return false                                   resopthassupport     start  through                                                        tail head ﬁnally stop                                                        stopx yb support                                                        deleted current domain  theorem  acsresidue correct respect cis  nodeforward pathforward time complexity acs    acs adaptive domain ordering  residue oed oed respectively node  forward pathforward space complexity oed explore theoretical efﬁciency limits acswepro  fully avoids positive repeats avoids negative pose algorithm acsado optimal nodeforward  repeats                                              pathforward time complexity acsado employs adap                                                        tive domain ordering deleted value simply restored    compared acsrecord acsresidue better end domain restore acsrecord  space complexity worse time complexity acsresidue restored regard total ordering initial  does need backup internal data structures main result ﬁnding support using    example  consider example previous section sufﬁcient hassupport search end domain  mi acsresiduetryz  problem arc going head domain  consistent lastx ybduringmi assume acs acsresopt  residue updates lastx ytobeb returns false acsado listed algorithm  needs data structures  mi deleted values restored domains lastpx bufa cxy ∈ pc ∈ dx  structure lastx content lastpx bufa pointer  residue mi acs supporting node components p↑bag p↑for  residuetryz  hassupport tries ﬁnd support bufa yp p↑for p↑bag set  ∈ dy   dx checks ﬁrst lastx present lastpybx↑fora lastpx y↑for value dy                                                    ijcai                                                                                                               bag bag bag bag bag     bag bag bag bag bag       algorithm  acsado                                                          head lastp lastp lastp lastp tail head lastp lastp lastp lastp tail     acsadoinitp       ∀cxy ∈ pc ∀a ∈ dx ← head       ∀cxy ∈ pc ∀a ∈ dx ∪tail lastp ← null          ←           ﬂag ac   ac populate                                                                           bag bag bag bag bag     bag bag bag bag bag       foreach cxy ∈ pc each ∈ dx                                                ←                                                    head  lastp  lastp  lastp  lastp tail head  lastp  lastp  lastp  lastp tail          buf xnull buf ← createnode                ↑    ←          add buf   bag lastp   buf                                                 return ﬂag                                                                                      acsadobackupp  timestamp                     bag bag bag bag bag       bag bag bag bag bag       backup current domains following timestamp                                                          head lastp lastp lastp dlastp tail head lastp lastp lastp lastp tail     acsadorestorep  timestamp       foreach variable ∈ pv         restore deleted values end dy  following timestamp         let ﬁrst restored value                                                          pbag pbag pbag bag pbag bag bag bag bag bag         foreach cxy ∈ pc                                    swap buf  andbuf tail                  head  lastp  lastp  lastp  lastp tail head  lastp  lastp lastp lastp tail              swap buf x↑for buf vtail↑for                                                                                              acsadoremoveb       ← succ dy                                     figure  examples remove restore       buf x↑bag  buf x↑bag           swap buf xandbuf swap buf x↑for buf x↑for       foreach ∈ buf x↑bag update arrow supporting node say value node       delete dy     acsadohassupportx                         means p↑for arrow value node say        ← lastp y↑for                       supporting node implies bufxp arrow       ∈ cxy return true ←       ← succb dy   tail        lastp area value node say supporting node            ∈                    xy update    return true     implies lastpx y↑forp arrow bag area                     update   tail  return false                                                      acsadocreatenodeb                              supporting node say  value node say  implies       create supporting node ↑bag ← ↑for ← ∈ p↑bag note details lastp buf respectively       return                                                                   acsadoupdatea                     structures values  respectively omitted       delete buf bx↑bag                    assume value  removed bufx↑bag larger       buf xnull buf ← createnode       add buf x↑bag lastp ← buf value  ﬁrst present successor                                                         method remove swaps bufx bufx swap                                                        bufx↑for bufx↑fornowa pointing                                                        value  through pthenc p↑bag point  acsado maintains lastpx safety invariant                                                        figure shows structures removal   support value lastpx y↑for                                                          consider data structures shown figure  dyandthepresence invariant lastpx y↑for                                                        sume  needs restored dysince ﬁrst restored  present dy tail dy maintains cor                                                        value values pointing tail point  respondence invariant lastpx y↑forb                                                        method restore simply swaps bufx buftail  ∈ bufb x↑                                                        swaps bufx↑for buftailx↑for figure    safety presence invariants lastpto stant time values previously pointing tail  ﬁnd support ∈  dx  respect cxyacs                                                        pointing  through supporting node      adohassupportx starts lastpx y↑forline   stops tail dy line  new support proposition  consider incremental sequence  lastpx updated line  update invocations cumulated worstcase time complexity  guarantees correspondence invariant line – acs acsadoremove sequence oed lg  adohassupport assures safety invariant lastp                                                        theorem   acsado correct respect cis  removing value say dy acsadoremoveb ﬁnds                                                        nodeforward pathforward time complexity oed  ﬁrst present value line  makes bufb  point node smaller bag line  updates nodeforward pathforward space complexity                                                        oed  line  lastpx yforalla ∈ bufb x↑bag way  acsado fully avoids negative repeats does                                                        avoid positive repeats  update lastp structures smaller number  values restoring deleted values each variable  acsadorestoretimestampx restores deleted  experiments  values timestampx atotheendofdy line  note new acs algorithms benchmarked random bi  tail greater values dy nary constraint problems radio link frequency assign  values lastpx y↑for tail dy need ment problems rlfaps sample results problems  swap supporting nodes bufvx buftail line   phase transition area shown fig  –                                               ure  constraint checks average     example figure shows data structures val stances time total instances  ues dx respect cxy nodes   experiments carried dell poweredge   represent values dy dx value node ghz intel xeon cpus linux  use  disconnected linked list current domain domdeg variable ordering lexicographical value order  nodes area labelled “bag” supporting nodes ing constraint check experiment cheap                                                    ijcai                                                     
