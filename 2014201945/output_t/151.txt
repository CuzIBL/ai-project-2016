          extension conformant planning using logic programming                       ricardo morales                    phan huy tu      tran cao son                     texas tech university                    new mexico state university                science department                 department science                      ricardocsttuedu                       tphantsoncsnmsuedu                          abstract                          operate planning problems complex                                                        scription initial state domain extending      paper extend logic programming     completeness result son tu  action theo      based conformant planner described son et al ries static causal laws      allow work planning problems     paper organized follows section      complex descriptions initial states review basics action description language al      compare extended planner   baral gelfond  deﬁnition approxi      concurrent conformant planners                   mation son et al section                                                         extended logic programming based conformant planner                                                        called cpaspm section  state soundness    introduction                                       implementation provide sufﬁcient condition action  previous work gelfond morales  son et al theories planner complete finally section  tu et al  explored usefulness  compare performance cpaspm  approximations al actions theories conformant plan concurrent conformant planners  ning son et al tu et al   ﬁne different approximations terms logic programs  background  use approximations develop conformant planners  al action theories transition diagrams  logic programming paradigm choice logic pro                                                        dynamic systems modeled transition diagrams  gramming implementation planners general                                                        nodes correspond possible states domain  conformant planners particular offers advantages                                                        arcs correspond actions domain  correctness planner formally proved                                                        state limit attention transition dia  second logic programming allows deal domains                                                        grams deﬁned al action theories  static causal laws called constraints ﬁnally                                                          signature Σ al action theory consists  concurrent planning domain control knowledge                                                        disjoints sets symbols set ﬂuents set el  implemented planner difﬁculty                                                        ementary actions action nonempty set elementary                                                      planners son et al tu et al   actions ﬂuent literal literal short ﬂuent  suffer main drawbacks work                                                        negation ¬f anal action theory collection  planning problems initial situation statements forms  characterized single set ﬂuent literals iithey  general incomplete able                causes               solve problems solvable planners                                        planners based approximation theory                                                                          impossible               problem inevitable remained unclear  planners extended deal elementary action action set  types conformant planning problems plan ﬂuent literals signature Σ statement  called  ning problems set possible initial states given dynamic causal law says executed state  disjunction furthermore important character satisfying hold resulting state statement  ize conditions complete interesting  called static causal law says state satisfying  work issue recently studied son tu satisfy statement  impossibility condition   proposed completeness condition says action performed state  restricted action theories static causal laws satisfying given action theory set literals    paper address limitations expanding closed static causal law  ∈ ⊆  logic programming implementation son et al set literals sbycns denote smallest set  build new conformant planner called cpaspmwhich literals includes closed set static                                                    ijcai                                                    causal laws dastate σ complete consistent sets deﬁnition  approximation son et al d  literals closed set static causal laws dan approximation                                                                      action said prohibited state σ contains  nodes partial states                               ⊆         ⊆                                               impossibility condition  st σ bforan               ∈  d               ∈        action state σ ea σ stands set literals  σ comp   st contains law  ⊆ σ ∈ aelements  executable σand  ea σ called direct effects execution s ⊆ σ σ st σ σ∈t  σ action theory describes transition diagram                                                    difﬁcult following observation holds  nodes   states arcs labeled                                     actions transitions deﬁned follows observation  son et al let ap                                                        proximation chain events αif  deﬁnition  mccain turner  action                                                                 s α ∈t σ ∈ compsaα  states σ σ  transition σ σ ∈t iff                                                                                           executable σ ⊆ σ σ st σ α σ ∈  prohibited σ                                                                                 ∪  ∩                σ   cn  σ    σ  σ                observation states reasoning using approximations  given state σ action asuchσ referred sound wrt reasoning using  possible successor state σ result execution application reasoning partial states confor  awhenσ clear context simply say mant planning conformant planning problem task  σ possible successor state                agent ﬁnd chain events achieves    action theory consistent state σ ac given goal provided complete knowledge  tion prohibited σ possible initial state domain speciﬁcally  successor state paper consider consistent action deﬁnition  conformant planning problem tuple  theories                                        d Γg Γ set possible initial states     introduce terminology used set literals  properties transition diagram convention                                                                                                use letters σ possibly indexed denote actions deﬁnition  chain events α aan− solu  states respectively model chain events tion conformant plan conformant planning problem                                                          d Γg σ ∈ Γ α executable σ  α   aan− alternate sequence states                                                        model α initial state σ   actions σaσan−σn st σiaiσi∈t   ≤ σ resp σnisreferredtoastheinitial state following relationship conformant plans  resp ﬁnal stateofm say entails set literals paths approximation follows observation   written  sifs ⊆ σ  furthermore                                                                        observation  let    approximation   write σασ ∈t denote model α                                                                           s α ∈t ⊆  α solution  initial state ﬁnal state σ σn respectively                                                       conformant planning problem dcompsg    action executable state σ state σ             st σ σ ∈t chain events α  aan− observation  shows way solve conformant plan  executable σ α chain ning problem d Γg look path approximation                                                   events ii executable σ σ st leads goal partial state partial state satisfy                                              σ σ ∈t aan− executable σ   ing goal approach adopted son et al                                                        awherethesetΓ   possible initial states    approximations  conformant          formant planning problem modeled completions       planning problem                                 single partial state sitisshowninson et al  real world applications agent conformant planning problems lit  complete knowledge current state domain erature successfully solved way  der circumstances possible agent di following example conformant planning problem  rectly reason effects actions using transition solved method  diagram domain approach reasoning example  turkey guns guns  complete information based using approximations ac turkey initially guns loaded  tion theories son baral  son et al know objective kill turkey  tu et al  section review deﬁnition shooting let names guns  approximation son et al discuss variable guns planning problem modeled  approximation used ﬁnd solution conformant  d Γg  planning problem                                                                                                      let   action theory set literals partial                                                                                                  shoot  causes dead loaded  state subset state closed set           ¬          static causal laws partial state sacompletion     shoot  causes  loaded  state σ st ⊆ σ comps denote                                                                                                             ¬              ¬          set completions s set partial states Γ    dead loaded  loaded                                                                 ¬     ¬                   comp  denote set s∈s comp                                dead  loaded loaded                                                    ijcai                                                                                                          particular planner work domains disjunc                       dead                       tive information initial state order achieve                                                        distinct label attached partial state considered  easy     deﬁnition   α                 ˜d                                            atoms π    formed following sorted predi    shoot  shoot   solution            cate symbols    following approach son et al bhow                                                         • hl true literal holds time step path  conformant planning modeled                                                             starting initial partial state labeled  d Γ dead Γ  comp¬dead clearly                                                         •       does conformant plan state      true occurs time step  σ      ¬dead ¬loadedg ¬loadedg belongs    • dcl true literal direct effect action  comp¬dead exists path transition di occurs −  agram leads goal state σ                                                             • phl true literal possibly holds time  order address issue extended deﬁni path initial partial state labeled  tion conformant plan son et al program contains auxiliary predicates time  careful examination approximations conclude fluent actionandlabel used enumerating  following observation viewed generaliza stants sorts time step ﬂuent elementary action label  tion observation                                 respectively presentation use short                                                                                               ∈    observation  let  d Γg planning problem hands action      d                                                 set literals dcorphthen      approximation α chain events let           ∈                  set partial states st compsΓ              ∈                                    ∈   d    fl kl ∈ literal lbyl denote    exists partial state st α                 ¯  ⊆ s α solution                 complement  ¬f ¬f   set literal                                                          ∈ finally possibly  observation extends applicability approximations dices variables literals time steps labels respec  conformant planning problems complex tively convenience write π˜dn denote  scription initial state domain particular ˜d                                                                 Γ          restriction π time steps nthesetof  stead viewing set possible initial states rules π˜d listed                                                completions single initial partial state son et                            al view set initial partial states  each dynamic causal law  therules  ﬁnd conformant plan approximation        hl tk  ←   oe hp   look chain events α st possible path α      dcl  ←   oe hp   starting partial state leads goal par     ˜d                                 tial state example set possible initial states belong π  ﬁrst rule states holds  domain example  viewed set    path occurs precondition holds                   ¬             ¬                   path second rule states direct effect  partial states dead loaded  loaded                ¬dead ¬loadedgloadedg Γ easy   kife occurs precondition  verify approximation son et al holds tk  solution α  shootg shootg  state domain time step                                                                               ˜d  method possible path α approx incomplete add π rule  imation starts partial state leads phl ← oe nothp   goal partial state                                                            says possibly holds occurs                                                            precondition possibly holds tk    logic programming implementation                     furthermore add π˜d following rule  answer set planning subrahmanian      phl   ←    hl      zaniolo  based method constructing approxima                                                                                                     tion action theories al method deﬁne                           dc                     ˜  transition diagram terms logic program π˜d says literal possibly holds  called cautious encoding dtheworkinson et al   possibly holds negation direct effect  uses similar construction resulting logic pro action occurs   gram able deal single initial partial state  each static causal law  π˜d contains  work tu et al  does provide method                                                                                ←             structing conditional plans branches operates                      single initial partial state work pa    phl ←  php        viewed combination ideas presented rules state holds possibly holds  works order develop conformant planner tk does  deal complex description initial state                                                           each rule predicates deﬁning sorts variables omitted    note deﬁnition state partial state brevity                                                    ijcai                                                      each impossibility condition  dweaddto    rules generate actions generate action occur      π˜d following rule                             rences add π˜pn following choice rule si                                                                                              ←   oa nothp            mons et al        rule states occur time step pre   oetactione←tn                   condition possibly holds tk path                                                                          π˜pn    inertial law encoded follows              properties         hl  ←    phl kt      section investigate soundness complete                                                        ness π˜pn      says holds time step negation      possibly hold                          soundness    auxiliary rule π˜d contains following rule using theorem  observation  prove cor                                                                           ˜p                          ←   hf kh¬f   rectness planner π             literalf  ←  fluentf                theorem   let answer set π˜pnfor ≤                                                        let   oe ∈ α  a  −          literal¬f  ←   fluentf                                                                                                                solution                                         ﬁrst rule constraint states hftk      h¬ftk hold time    sufﬁcient condition completeness      rules used deﬁne literals                 theorem  tells π˜pn sound pro  action partial state sletΠdas    gram complete sense planning prob  π˜d  ∪ hs   ∪ oa  note Πa stratiﬁed lems solutions π˜p returns answer  program consistent unique answer set set illustrated following example  gelfond lifschitz  deﬁne approximation example  consider action description  t˜d based Πdas follows                                                                                                                   causes  deﬁnition  let partial state action let                                                   ˜                                            ¬  t˜d transition diagram st s ∈t iff                    causes                             Πdas consistent   hl   ∈                     d  Γ         Γ                    Πd                                planning problem          answer set                          set possible states obviously a solution  theorem  consistent t˜d approximation problem ¬f true state belonging                                                 Γ dynamic causal laws  proof theorem similar proofs sound effect executed                                       al                 let  ∅ easy compsΓ  ness logic programming encoding action theo             ˜p                  ˜p    ries son et al  turner              construct π  based π   incon    let   d Γg conformant planning problem sistent means conformant plan length                                                        π˜p  fact shown ev  t˜d approximation use pro                                                        ery π˜pn inconsistent π˜pn solve  gram π˜d ﬁnd solutions remaining                                                        planning problem phoweverifπ˜p  constructed  section logic program π˜pnwherep                                                        based set initial partial states  ¬f  input planning problem length solution                                                        π˜p  return answer set corresponding  wish ﬁnd                                       solution a                                    let    ss  sm set partial states st  Γcomps   refer set initial example shows choosing set initial par  partial states let subindex each element tial states plays important role completeness  act label construct program π˜pn based π˜pn characterize situation example   follows π˜pn contains rules π˜dn ﬁne notion dependencies literals lit  following rules                                      erals actions adapted son tu                                                 ∈    rules encoding initial state si deﬁnition  literal depends literal written lg      ˜p         π   contains rule                          following conditions holds                                                   si                           rules encoding goal guarantee goal  contains law causes st ∈      satisﬁed ﬁnal state path add                                                           contains law st ∈      π˜pn following rules                                                           exists literal st lhand hg                 ←  hl kl ∈                                                           lg    adjustment syntax needed wants  use existing answer set solvers instance need wish ﬁnd sequential plan thing needed  replace ¬f say negf                         change left side rule oetactione                                                    ijcai                                                                                                                                                                                                   guns pl  dlv    cplan cpaspm  deﬁnition  action depends literal written bl                                                                                                                                                                               contains impossibility condition  st ⊆      ¯                                                                                ∈ ψor                                                                                                                                                           exists literal st bgand gl                                                                                                                                  set literals write lwto denote lgfor  ∈ wandl  denote exists ∈  st lg                                                       table  conformant turkey domain    observe according deﬁnition  domain  inexamplewehavethatgfand     g¬f implies                                                                         Γ                                  cpaspm  takes input logic program representation  each state σ  ﬁnd literal produces concurrent conformant plans com  gl case say Γ reducible ∅ wrt                                                        pared cpaspm conformant planning systems  precise deﬁnition reducibility given space limit consider planners capable generat  deﬁnition  let Δ set states partial state ing concurrent plans aforementioned small mod  set literals say Δ reducible wrt iﬁcation logic program make planner act  denoted Δ                                   sequential planner                                Δ                         compare cpaspm    concurrent conformant    subset state σ                                                                                  planners dlv eiter et al  cplan castellini et    each ∈ Δ contains state σ st  σ                                                         al  cplan satbased conformant planner    each action Δ contains state st  σ  planning problem translated satisﬁability problem  say set states Δ reducible set par satisfying assignments variables correspond solu                                                        tions original planning problem dlvk somewhat  tial states wrt set literals written Δ   iff Δcomps    comps      ∈  similar cpaspm run answer set solver                                                                            dlvk  example  according deﬁnition unlike cpaspm does use approximations      Γ             ∅               Γ               algorithm phases looking candidate plans ﬁrst                ¬f                                          checking conformant    deﬁne class action theories follows       prepared test suite problems involves                                                        concurrency complex initial situations  deﬁnition  static causal law simple precondition                                                      problems simple modiﬁcations conformant bench  contains literal action theory simple marks literature test suite consists problems  each static causal laws simple             conformant turkey lost cleaner conformant turkey  notice simple Δ  implies rea modiﬁcation classic yale shooting problem  soning t˜d set partial states agree problem guns loaded  reasoning set possible guns shot concurrently exception gun   initial states Δ set literals base observa  objective kill turkey lost cleaner  tion following result completeness modiﬁcation ring cimatti et al  agent  π˜pn                                              rooms arranged ring fashion each room                                                         objects cleaned agent agent  theorem  let α   aa − solution                                                       room clockwise counterclockwise  d Γgifd  simple π˜pn constructed based                                                        fashion time clean objects room concur  set initial partial states st Γ   π˜pn                                                      rently initially agent does know initial location  consistent answer set st   oe ∈                                                      current status cleaned dirty objects                                                                                                         experiments conducted ghz pentium  ma                                         verify planning problem  example chine running linux each planner given  minutes                 ˜p               ∅   construct π based     complete each instance each problem results                   miss solution  construct based shown tables   each table times seconds                         ¬       ˜p    set partial states     π       pl  number steps shortest solution                                               return answer set corresponding solution  corresponding problem                                                          table  cpaspm outperforms                                                              experiments                                        dlv  cplan conformant turkey domain solu  theorem  suggests simple algorithm ﬁnding minimal tions domain involve  steps step  plans wrt number steps planning problem pse sisting ﬁring multiple guns concurrently domain  quentially run program π˜pn   exploiting concurrency key obtaining short plan  returns answer set assume does triv lost cleaner domain shown table   ial solution  implemented algorithm cpaspm able solve problem instances time  planning called cpaspm use cmodels lier  limit domain length solution ranges   ler maratea  underlying answer set solver  steps determined number rooms                                                    ijcai                                                    
