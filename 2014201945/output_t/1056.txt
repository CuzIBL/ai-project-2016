                  lookahead strategy solving large planning problems                                                         vincent vidal                                                cril  universite dartois                                                rue universite  sp                                                  lens cedex france                                                  vidalcrilunivartoisfr                             abstract                                 determination heuristic value each state                                                                 performed ff planner hoffmann nebel         relaxed plans used heuristic search plan•     offers way compute lookahead plans ff creates        ner ff computing numerical heuristic ex•       planning graph blum furst  each encoun•       tracting helpful actions present novel way         tered state using relaxed problem obtained ignoring        extracting information relaxed plan         deletes actions using initial state relaxed plan        dealing helpful actions consider•       extracted polynomial time space plan•       ing high quality relaxed plans numer•     ning graph length number actions relaxed        ous domains performance heuristic search         plan corresponds heuristic evaluation state        planning size problems        calculated generally relaxed plan state        handled drastically improved                  valid deletes actions ignored during                                                                 computation numerous benchmark domains    computing using lookahead states                        observe relaxed plans good quality                                                                 contain lot actions belong solution plans   classical forward statespace search algorithms node propose way computing lookahead plans re•  search graph represents planning state arc start• laxed plans trying actions possible   ing node represents application action keeping ones collected valid plan   state leads new state order ensure com•   lookahead algorithm modifications   pleteness actions applied state search algorithm following details   considered order states con• vidal  each time state evaluated en•  sidered development depends overall search strat•  tered open list relaxed plan extracted   egy depthfirst breadthfirst bestfirst                evaluation function used compute lookahead plan     let imagine each evaluated state      leads state reachable   knew valid plan applied      action long evaluated added open list   lead state closer goal direct descendants let relaxed plan state lookahead plan    interesting apply  use   computed follows actions observed turn   resulting state new node search state action applicable  added end   simply considered new descendant          updated application ac•    kinds arcs search graph     tions tried process iterated   ones come direct application action  actions applied action used   state ones come application valid    completeness correctness search algorithms pre•  plan state lead state reachable served process information lost ac•  states lookahead states computed  tions applied state considered be•  application plan node considered cause nodes added lookahead plans reach•  search tree direct descendants nodes created able states connected modifi•  lookahead states called lookahead nodes plans label• cation addition new nodes corresponding states   ing arcs lead lookahead nodes called lookahead reached initial state   plans goal state solution plan   concatenation single actions arcs leading classi•  using helpful actions optimistic   cal nodes lookahead plans arcs leading lookahead   nodes                                                            bestfirst search algorithm      work supported iut lens classical search algorithms actions applied   cnrs region nordpasdecalais tact pro•    node considered way states   gramme                                                       lead evaluated heuristic function                                                                                                        poster papers  dered notion preference actions  potentially developed rescue actions    notion preference during search     union helpful actions rescue actions equal set    introduced ff planner concept help•  actions applied  completeness   ful actions relaxed plan extracted state correctness preserved    actions relaxed plan executable con•   sidered helpful actions forgotten  experimental evaluation    local search algorithm ff strategy appeared compare planners ff three different set•   restrictive set helpful actions augmented ff tings planning called yahsp stands    actions executable produce fluents con•                                                                 heuristic search planner implemented ob•   sidered subgoals level planning graph jective caml bfs best search classical wa search    during extraction relaxed plan main draw•       heuristic based computation    strategy used ff does preserve relaxed plan ff obfs optimistic best search    completeness actions executable state identical bfs preference helpful actions res•   considered helpful simply lost ff switches com•  cue actions lobfs lookahead optimistic best   plete bestfirst algorithm solution          search identical obfs lookahead states      present way use notion helpful actions       report complete results logistics domain    complete search algorithms optimistic search figure  show table  data largest   algorithms maximum trust infor•     problems solved ff obfs lobfs order realize    mations returned computation heuristic     progress accomplished size problems   principles following                                  solved strips planner different domains      • classes actions created implemen•       tation use helpful actions re• acknowledgments        stricted ones rescue actions actions thanks lot pierre regnier help        helpful      • newly created state evaluated heuris•    references        tic function returns numerical estimation state blum furst  blum furst fast planning        actions executable partitioned  through planninggraphs analysis artificial intelligence        different classes each class node created            state  contains actions class     hoffmann nebel  hoffmann nebel ff      • nodes containing helpful actions preferred        planning fast plan generation through heuristic search        development nodes containing rescue actions       jair         numerical heuristic values            vidal  vidal lookahead strategy heuristic search                                                                     planning technical report irit universite paul      information lost process way nodes                                                                     sabatier toulouse france    developed simply modified state developed   helpful actions nodes developed          httpwwwcrilunivartoisfrvidalyahsphtml        poster papers                                                                                                        
