                   aggregate functions disjunctive logic programming                         semantics complexity implementation dlv                  tina dellarmi                        wolfgang faber                          giuseppe ielpa            dept mathematics           inst informationssysteme            dept mathematics               univ calabria                           tu wien                           univ calabria            rende cs italy                 awien austria                    rende cs italy            dellarmimatunicalit                 faberkrtuwienacat                    ielpamatunicalit                                nicola leone gerald pfeifer               dept mathematics univ calabria inst informationssysteme  tu wien                         rende cs italy wien austria                             leoneunicalit pfeiferdbaituwienacat                             abstract                               dlp strictly expressive normal disjunction                                                                 free logic programming expressiveness limited        disjunctive logic programming dlp                                                                  properties decidable np dlp express problems        expressive formalism allows express                                                                  translated satisfiability cnf formu•       property finite structures decidable                                                                  las polynomial time importantly enlarging        complexity class np     despite high ex•                               nh                                class applications encoded language        pressiveness dlp simple proper•                                                                 disjunction allows representing problems lower        ties arising realworld applications                                                                  complexity simpler natural fashion eiter        encoded simple natural manner                                                                  et al         properties requiring apply        arithmetic operators like sum times count        problem despite high expressiveness        set elements satisfying conditions can•          simple properties arising realworld applica•       naturally expressed dlp overcome            tions encoded dlp simple nat•       deficiency paper extend dlp           ural manner properties requiring apply        aggregate functions formally define se•           arithmetic operator sum times count set        mantics new language named dlp              elements satisfying conditions suppose instance        show usefulness new constructs rel•         want know sum salaries em•       evant knowledgebased problems analyze            ployees working team exceeds given budget team        computational complexity dlp showing           building section  end order        addition aggregates does bring higher        employees defining successor relation        cost respect provide implementation        define sum predicate recursive way computes          dlp language dlv stateofthe           sum salaries compare result given        art dlp  report experiments          budget approach drawbacks  bad        confirm usefulness proposed extension          kr perspective encoding natural         efficiency computation               inefficient instantiation program quadratic                                                                  cardinality input set employees                                                                  clear need enrich dlp suitable constructs    introduction                                                 natural representation provide means efficient                                                                  evaluation properties   expressiveness dlp disjunctive logic programs dlp   logic programs nonmonotonic negation oc•       contribution overcome deficiency dlp   cur bodies disjunction occur heads   instead inventing new constructs scratch extend   rules language expressive precise math•     language sort aggregate functions studied   ematical sense allows express property fi•     context deductive databases implement     nite structures decidable complexity class ep  dlv eiter el alf   stateoftheart disjunctive   npnp widely believed assumptions          logic programming main contributions      work supported european commission   paper following   projects ist infomix ist icons     • extend disjunctive logic programming aggregate   fetwasp                                            functions formally define semantics resulting       nonmonotonic reasoning                                                                                                  language named dlp                                           simplicity loss generality assume    • address knowledge representation issues showing     body each rule contains aggregate    impact new constructs relevant problems            atom global variable rule variable appearing      • analyze computational complexity dlp im•       standard atom local variable variable    portantly turns addition aggregates does  appearing solely aggregate function    increase computational complexity remains     safety rule safe following conditions hold    reasoning dlp programs                        each global variable appears positive standard literal      • provide implementation dlp dlv sys•       body ii each local variable appearing    tem deriving new algorithms optimization techniques  symbolic set  appears positive literal    efficient evaluation                                     conj iii each guard aggregate atom    • report experimentation evaluating impact  constant global variable program safe    proposed language extension efficiency experiments    rules safe    confirm providing relevant advantages  example  consider following rules    knowledge representation point view aggregate functions    bring significant computational gains      • compare dlp related work    present relevant aspects dlp im•   rule safe second local    plementation referring interested reader techni• variables violate condition ii rule    cal report details dellarmi et al            safe cither guard global variable violating                                                                  condition iii       dlpa language                                             stratification dlp program aggregatestratified    section provide formal definition syntax exists function  called level mapping      semantics dlp language  extension dlp     set standard predicates ordinals each    setoriented functions called aggregate functions  pair standard predicates  each rule    assume reader familiar standard dlp                  appears head  appears    refer atoms literals rules programs dlp stan• aggregate atom body  ii   dard atoms standard literals standard rules standard    appears head occurs standard atom   programs respectively background gelfond   body    lifschitz  eiter etal                         example  consider program consisting set facts                                                                  predicates plus following rules    syntax     dlp set symbolic set ground set   symbolic set pair  vars list                   program aggregatestratified level mapping                                                                                                        satisfies required   variables coiij conjunction standard literals   ground set set pairs form              conditions add rule bxpx legal   list constants conj ground variable free  levelmapping exists program aggregate  conjunction standard literals aggregate function  unstratificd   form   set  function            intuitively aggregatestratification forbids recursion   aggre•                                                through aggregates cause unclear se•  gate atom   fs aggregate                    mantics cases consider instance   function  lg rg called                              aggregateunstratified program consisting rule   left guard right guard respectively terms                                      pa                           omitted atom cither    intuitive meaning program probably   standard dlp atom aggregate atom literal    assert program does answer set   atom atom preceded default negation symbol    defining notion stability aggregates   aggregate atom aggregate literal     positive programs answer set                 rule construct                            integrity constraint following assume                                                                    dlp programs safe aggregatestratified     • • • standard atoms • • • bm atoms   disjunction                                         semantics                    head conjunction         given dlp program denote set constants   bubk body dlp                      appearing set natural numbers oc•  program set dlp rules                               curring bp set standard atoms constructive   syntactic restrictions notation                            standard predicates constants                                                                  furthermore given set denotes set multi•     intuitively symbolic set stands                                                                  sets elements let domains   set avalues making true                                    note negative liter• meanings aggregate functions consider   als occur conjunction conj symbolic set         count defined  number elements set                                                                                             nonmonotonic reasoning   sum defined  sum numbers set      notion model minimal model answer set                                                                 dlp   immediate extension corresponding     times product numbers set                                                                                  notions dlp gelfond lifschitz      min max defined mini•                                                                example  consider aggregate atom — suml    mummaximum element set set contains                                                                 pl    example  let    strings lexicographic ordering considered                                                               ground set appearing interpretation    argument aggregate function does belong                                                                 rtj   application sum   domain aggregate evaluates false denoted                                                                  yields  true wrt       implementation issues warning case                                                                 answer set program example       substitution mapping set variables   set constants appearing program sub•  stitution set global variables rule  knowledge representation dlp   global substitution substitution set section show aggregate functions used   local variables symbolic set  local substi• encode relevant problems   tutionor  given symbolic set global variables                                                                 team building project team built set      vars  conj instantiation set  follow• employees according following specifications   ing ground set pairs insts                              pi team consists certain number employees                                                                 given number different skills   ground instance rule obtained steps    present team   global substitution applied  ev• sum salaries employees working   ery symbolic set replaced instantiation   team exceed given budget   insts instantiation groundv program        pi salary each individual employee spec•  set possible instances rules          ified limit                                                                 pr number women working team reach                                                                 given number   example  consider following program                  suppose employees provided number facts                                                                 form empempidsexskillsalary size team                                                                 minimum number different skills budget max•                                                                imum salary minimum number women speci•   instantiation groundv following               fied facts nempn nskilln budgetb maxsalm                                                                 womenw encode each property pj     interpretation dlp program set stan•   aggregate atom enforce integrity constraint   dard ground atoms  truth valuation          containing   standard ground literal standard ground conjunc•  tion defined usual way assigning truth val•  ues standard ground literals interpretation provides   meaning ground sets aggregate functions ag•  gregate literals meaning set aggregate function   aggregate atom interpretation multiset   value truthvalue respectively let fs ag•  intuitively disjunctive rule guesses em•  gregate function valuation set  wrt  ployee included team con•  multiset constant components ele• straints correspond onetoone requirements pi  ments conjunction true wrt precisely thanks aggregates translation specifi•  let conj true                                              cations surprisingly straightforward example high•  wrt multiset                          lights usefulness representing sets multi•  valuation ifs aggregate function fs wrt   sets language multiset obtained spec•  result application function   ifying variable vans symbolic set   multiset  domain                   vars  conj instance encoding re•    aggregate atom  true                                 quires set want count different skills em•  wrt ii relationships                      ployees team having skill count                                          hold     wrt contrary requires sum ele•  present false                           ments multiset employees salary      using notion truth valuation aggregate    salaries summed ob•  atoms truth valuations aggregate literals rules tained adding variable vars valuation                                                                   cpxfc ain yields set           sum times applied set return     sa salary employee team   respectively                                                 sum function applied multiset      supported rst implementation components sa tuples   section       given substitution dlp object obj rule conjunc•  tion set little abuse notation denote obj seating generate sitting arrangement   object obtained replacing each variable obj number guests ra tables chairs table       nonmonotonic reasoning                                                                                                guests like each sit table guests aggregate literal symbolic set    dislike each sit table      compute instantiation literals      suppose number chairs table specified    binds global variables appearing aux par•   nchairsx personp tablet represent       tially bound atom matched exten•   guests available tables respectively sion bottomup instantiation respects stratifica•   generate seating arrangement following program                                                                  tion extension available match•     guess person sits tabic                                                                  ing facts computed set pairs      atp notatp tpersonp tablet      persons sitting table exceed chairs                                          generated     tabletrnchairscnot countp  atpt                 substitution local variables      person seated precisely table equivalent      admissible instance recall      personpatptatp ut                       dlvs instantiator produces instances predi•    peraonpnot countt  atpt                        cate potentially true faber et al      people like each sit table leone et al  store elements     likeplpatpl notatpt                                                               symbolic set truth value determined      people dislike each                                                                  process dynamically partially evaluating     dislikcph patpltatpt                                                                  aggregate during instantiation process                                                                  repeated instantiations literals    computational complexity dlp    classical nonmonotonic formalisms marek       example  consider following rule   truszczyhski  important decision problems cor•    responding different reasoning tasks arise dlp      brave reasoning given dlp program   ground literal true answer set           standardization rewrites        cautious reasoning given dlp program   ground literal true answer sets            suppose instantiation rule aux gener•     following theorems report complexity      ates  potentially true facts aux auxla auxlb   reasoning tasks propositional variablefree  auxc potentially true facts     dlp programs respect syntactic restrictions im•     following ground instances generated   posed section  safety aggregatestratification im  portantly turns reasoning dlp  does bring                                                                  duplicate sets recognition optimize evaluation   increase computational complexity remains ex•                                                                 designed hashing technique recognizes mul•  actly standard dlp dellarmi et al    proofs                                         tiple occurrences set program dif•                                                                 ferent rules stores saves memory   theorem  brave reasoning ground dlp programs          sets large implies significant per•      complete                                                 formance gain especially model generation sets     theorem  cautious reasoning ground dlp programs          frequently manipulated during backtracking process   complete                                                  example  consider following constraints      implementation issues                                                                   technique recognizes sets equal   implementation dlp required changes mod•                                                                 generates instance shared  ules dlv apart preliminary standardization phase     assume constraints additionally contain   effort concentrated intelligent grounding   standard literal px case instances   model generator modules                                   each number facts px means      standardization parsing each aggregate trans•                                                                 technique each pair instances shares   formed guards present common set reducing number instantiated sets half       set  conjunction conj symbolic   set replaced single new atom aux rule        model generation designed extension   auxconj added program arguments aux        deterministic consequences operator dlv   distinct variables conj                         faber et al dlp programs new opera•     instantiation goal instantiator generate  tor makes forward backward inferences aggre•  ground program precisely answer sets      gate atoms resulting effective pruning search                                                                  space extended dowling gallier al•  theoretical instantiation groundvf sensibly   smaller instantiation proceeds bottomup following    gorithm dowling gallier  compute fixpoint     dependencies induced rules particular respect•    ground atom potentially true   ing ordering imposed aggregatestratification let  generated ground instance head   h—baggr rule head rule           note ground set contains aux atoms   conjunction standard body literals aggr  potentially true                                                                                             nonmonotonic reasoning operator linear time using multilinked data struc•  ture pointers given ground set say                                    structure allows   access aux changes truth   value supporting fast forward propagation   hand provides direct access each aux atom   supporting fast backward propagation      experiments benchmarks   assess usefulness proposed dlp extension   evaluate implementation compare following             figure  experimental results seating   methods solving given problem   • dlv   encode problem dlp   solve using                                                                 ran benchmarks amd athlon  machines   extension dlv aggregates                                                                 mb memory using freebsd  gcc    • dlv encode problem standard dlp solve                                                                 allowed maximum running time  seconds   using standard dlv                                                                 instance maximum memory usage mb cumu•    generate dlp encodings dlp      encodings suit•                                                               lated results provided figures   particular   able logic definitions aggregate functions employed                                                                 timetabling report execution time size   recursive count sum times                                                                 residual ground instantiation total number atoms oc•    compare methods benchmark problems         curring instantiation multiple occurrences     time tabling classical planning problem partic•                                                                atom counted seating execution time   ular consider problem planning timetable    average running time instances size   lectures groups students        symbol tables indicates corresponding   consider number realworld instances university  instance instances size seating   instance deals groups                         solved allowed time memory limits     seating problem described section  con•                                                                  problems dlv clearly outperforms dlv   sider  small instances  larger instances seats                                                                 timetabling execution time dlv order   table increasing numbers tables persons magnitude lower dlv problem instances   numpersons — numseats  numtables each prob•            dlv solve instances allowed   lem size seatstables configuration consider classes memory time limits seating difference   different numbers like resp dislike constraints significant dlv solve instances   percentages relative maximum number like    small size  persons   tables  seats   resp dislike constraints problem                                                                dlv solve significantly larger instances reason•  constrained particular consider following classes able time information instantiation sizes pro•   likedislike constraints   like constraints vides explanation big difference     like  dislike constraints   like con•     execution times dlv dlv thanks aggre•  straints   like  dislike constraints each   gates dla encodings timetabling seating   problem size randomly generated  instances     succinct corresponding encodings standard   each class                                             dlp succinctness reflected ground instan•    seating use dlp encoding reported sec•      tiations programs evaluation algorithms   tion  encodings benchmark data avail•      exponential worst case size instan•  able web httpwwwdlvsystemcom                  tiation execution times dlv turn   examplesijcaizip                                         shorter execution times dlv                                                                    related works                                                                 aggregate functions logic programming languages ap•                                                                peared need emerged de•                                                                ductive databases like ldl chimenti et al                                                                  studied cf ross sagiv  kemp ra                                                                mamohanarao  implementation                                                                 answer set programming based smodels                                                                 recent simons et ai                                                                      comparing dlp language smodels observe                                                                 strong similarity cardinality constraints         figure  experimental results timetabling            count sum weight constraints smodels                                                                       note atoms occurring sets aggregates      maxima trivially solution       counted instantiation size       nonmonotonic reasoning                                                                                               
