                       breaking symmetries different problems                                             jeanfranc¸ois puget                                                   ilog                                             avenue verdun                                        gentilly cedex france                                               pugetilogfr                        abstract                          shown linear number constraints break                                                        symmetries pigeon hole problem simply needs      adding symmetry breaking constraints order variables paper consider gen      oldest ways breaking variable symmetries   eral class problems different problems csps      csps instance known variables subject different constraint      symmetries pigeon hole problem constraints show section       moved ordering variables general csps variable symmetries broken      ized result csps variables −  binary constraints number variables      subject different constraint case roneydougal et al  general purpose method      possible remove variable symmetries breaking value symmetries given getree      partial ordering variables show  method show section  method safely      partial ordering automatically computed combined symmetry breaking constraints      using computational group theory cgt fur   conditions order search tree traversed      ther show partial orders safely used section  apply method complex csps                                         gether getree method roneydougal    summarize ﬁndings discuss possible gener                      et al   experiments show efﬁciency  alizations section       method                                                           symmetries graphs csps    introduction                                                        symmetries consider permutations  symmetry constraint satisfaction problem csp mappings bijections ﬁnite set  mapping csp preserves structure loss generality consider permutations  solutions csp symmetries set integers ranging  −   case symmetrical variants dead stance label variables graph integers  end encountered during search explored variable symmetry completely described  solution problem easy solve permutation labels variables formalized  symmetrical variants solution solutions follows  listing just impossible practice  observations triggered lot detection  computational group theory  removal symmetries constraint programming let sn set permutations set image  community adding symmetry breaking constraints permutation σ denoted iσ permutation σ ∈  oldest ways breaking variable symmetries csps sn fully described vector σ σ     n−σ                                              instance shown crawford et al  product permutations σ θ deﬁned iσθ   variable symmetries broken adding lexico iσθ  graphical ordering constraint symmetry unfortunately given ∈ permutation group ⊆ sn orbit  method tractable general denoted ig set elements  exponential number symmetries shown mapped element  general way break symmetries prob  lem polynomial number constraintsroy luks               ig  iσσ ∈   flener et al  linear number constraints  used break symmetries matrix problems ex given ∈ permutation group ⊆ sn sta  pected polynomial number constraints bilizer denoted ig set permutations  symmetries broken polynomial num leave unchanged  ber constraints sufﬁcient breaking symme                                                                                     σ  tries special cases instance puget           ig  σ ∈ gi    csp symmetries                                                        constraint satisfaction problem csp variables                     triple  ﬁnite set variables  vii∈in  ﬁnite set ﬁnite sets dii∈inn                     straint subset cross product i∈in di                                            loss generality assume di ⊆  breaking variable symmetries                                                         loss generality assume domains    assignment member vector values                                                            subsets usual ordering integers  aii∈in ai ∈ di ∈  denoted  vi  aii∈in  partial assignment sub vector  lex leader constraints  signment    solution assignment consistent adding constraints oldest methods reducing  member                               number variable symmetries csppuget     given permutation σ deﬁne variable permu crawford et al  shown variable  tation partial assignments follows           symmetries csp broken following                                                        straints                         σ           vi  aii∈in   viσ  aii∈in                                                                                         σ    permutation called variable symmetry maps             ∀σ ∈  ¹                  solutions solutions                                 given σ constraint ¹ vσ semantically                             given permutation θ  deﬁne value permutation equivalent disjunction constraints  partial assignments follow                                                                               vσ                        θ          θ−           vi  aii∈in   vi  ai i∈in                            vσ ∧  vσ                                                                                     permutation called value symmetry maps                     lutions solutions                                         vσ ∧    ∧ vi−  vi−σ ∧ vi  viσ                                                                                     graph coloring example                                                    let introduce example used  vσ ∧    ∧ vn−  vn−σ ∧ vn−  vn−σ  paper say graph edges graceful  vσ ∧    ∧ vn−  vn−σ ∧ vn−  vn−σ  exists labeling vertices                                                          constraint omitted set constraints    •  ≤ fi ≤ each vertex                   denoted ≺ vσ    • set values fi different           example constraints given crawford et al    • set values absfi fj edge       different                                                             ¹  straightforward translation csp exists                                                             ¹  variable vi each vertex vi lustig puget   variable symmetries problem induced  ¹  automorphism graph value symmetry    ¹  maps − information symmetries      ¹  graceful graphs available petrie smith        ¹        petrie                                                                                                                                      ¹    let consider following graph ×                                                           ¹                                                                   ¹             ¤                    ¤                                                              ¤                      ¤                             ¹      ¤                      ¤                                                          ¹     ¤                      ¤              ¤      ¨¨               ¤      ¨¨                       ¹     ¤  ¨¨                  ¤     ¨      ¨                         ¨    ¤¨¤                     ¤¨¤ ¨                         polynomial number constraints                                                      number constraints  grow exponentially    group variable symmetries corresponding number variables using fact variable  csp equivalent group symmetries graph subject different constraint signiﬁcantly  group computed packages nautymc reduce number symmetry breaking constraints let  kay  group                          consider symmetries example                              σ         constraint breaking symmetry            remaining stabilizers equal                                                          coset representatives        ¹                                                                                                                                                                  trivially true                                                                               true different constraint constraint                                                                                        simpliﬁed                                                                                                                                                                                                                                                                              simpliﬁcation true general formalized        follows given permutation σ let sσ smallest          σ                              σ   let tσ equal sσ      theorem   given csp variables    lemma  given csp variables subject exists different constraint variables  different constraint variable symmetry group                                                        given coset representatives sets ui variable symme  csp variable symmetries broken try group csp variable symmetries  adding following constraints                     broken nn −  binary constraints                                                        constraints given                   ∀σ ∈ vsσ  vtσ                                                                                      proof deﬁnition kσ   sσ sσσ       ∀i ∈  ∀j ∈ ui  → vi  vj     sσ let look constraint ¹ vσ                                                          proof deﬁnition each element ∈ ui exists  different constraint variables means                               σ                      σ                                 permutation σ ∈ gi    vi  viσ  particular vk  vkσ tσ converse true exists permutation σ   sσ vsσ  vsσσ  disjunct                                                         sσ  tσ ∈ ui  constraint true               constraints  rewritten      vσ ∧    ∧ vsσ−  vsσ−σ ∧ vsσ  vsσσ                                                                             ∀i ∈  ∀j ∈ ui  ⇒ vi  vj  kσ   sσ sσσ  tσ                                                                    n−u  −  constraints  simpliﬁed vsσ  vtσ                                          note permutations σ θ sσ  mutations gi leave numbers      −  unchanged  sθ tσ  tθ corresponding symmetry ui subset     −  ui −  ≤                                                        − −  number constraints bounded  breaking constraints identical sufﬁcient     pn−  state symmetry breaking constraints each pair − −   nn −    exists permutation σ  sσ example constraints    tσ                                                                   set pairs computed using known  schreier sims algorithm seress  algorithm note constraints redundant  constructs stabilizers chain     gn follows stance constraint  entailed ﬁrst                                                        constraints remark used reduce num                                                  ber constraints explained following section                                 ∀i ∈  gi    − gi−                                                          linear number constraints    deﬁnition                     σ                 σ                previous result improved taking account      gi  σ ∈     ∧    ∧ −   −     transitivity  constraints given ∈               gn ⊆  gn− ⊆    ⊆                                                        case belongs sets ui case    schreier sims algorithm computes set coset let deﬁne rj largest different  representatives ui orbits gi      belongs ui belongs ui uj let                                                        rj                              gi                       ui                              stating main result let prove following      deﬁnition ui set values mapped  symmetries leave      −  lemma  notations ∈ ui   unchanged                                            rj ∈ ui rj     assume groups use  described stabilizers chain coset representatives proof let assume ∈ ui  deﬁnition                                                                                                  σ    example stabilizer chain            ui exists permutation σ ∈ gi  let                                                         rj deﬁnition rj ≤ ∈ uk                                                                                          θ                                                        exists permutation θ ∈ gk  let                                                               −         ν     σθ−    θ−                        ν  σθ                                            ν ∈  gi σ ∈ gi θ ∈ gk  ⊆  gi                                                                                               ∈ ui fact rj  immediate consequence  transform new csp  deﬁnition rj                            value symmetries variable symmetries                                                        idea add × additional binary variables xij vari    state main result                   ables domains equal   add follow                                                        ing channeling constraints      theorem  notations given csp                 variables exists different constraint ∀i ∈  ∈  xij   ≡ vi   variables variable symmetries bro constraints state variable equals   ken −  binary constraints constraints                                 ij                                                        variable vj equals adding new variables  given                                         change solutions csp variable                                                      symmetries equivalent permutations rows             ∀j ∈  rj  → vrj  vj                                                              xij matrix value symmetries equivalent                                                        permutations columns matrix    proof number constraints  def let construct vector concatenating rows  inition note   deﬁnition matrix xij  variables xij ranked  number constraints −  let consider increasing values increasing values vector  constraints  given ∈ ui   want prove constraint  vi  vj let consider value symmetry θ θ  implied constraints  let consider sequence permutation matrix columns symmetry broken  rj rrj rrrj    let assume se constraint  quence meets ∈ ui                                                                                     θ  application lemma  rj ∈ ui rj                       ¹                       rj  hypothesis lemma  applied                                                          let  variables ith row matrix  repeated applications lemma  construct inﬁnite                                                         value symmetry θ maps variables given row variables  decreasing sequence integers included                                                       row formalized follows  possible ui ﬁnite exists   rkj established rkj    k−        rrj  rj rj  xi   xi xi     xik−  straints vrkj  vrk−j    vrrj  vrj vrj  vj θ                                                                   θ−  θ−      θ−   constraints  imply vrkj  vj                        ik−  constraint proved constraints                                                           deﬁnition ¹  equivalent  implied constraints  set constraints                                                         disjunction following constraints  subset constraints  sets constraints                                                                                    θ  equivalent theorem  constraints  break             ≺                                                                                θ            θ  variable symmetries                                                  ∧ ≺     example coset representatives                                                                                                                                                                               θ                   θ             θ                ∧    ∧ xi−  i− ∧ xi ≺                                                                                     constraints  given theorem                                                                                        θ                   θ                 θ                                                           ∧    ∧ xn−  n− ∧ xn− ≺ n−                                   θ                   θ                 θ                                                 ∧    ∧ xn−  n− ∧ xn−  n−                                                                                                 θ    note constraint  longer appearing let compare lexicographically xi let ai                                                          value assigned vi xiai   xij      breaking variable symmetries                                                     θ−                                                         ai similarly xijθ−    ai     value symmetries                                    θ                        θ                      θ                                                        ai  xi  ai  ai                                                                     θ                     θ  roneydougal et al  general method break xi ≺ ai  ai   ing value symmetries described method uses  equivalent disjunction  group value symmetries csp show constraints  method combined symmetry breaking constraints                          θ                                                                               variable symmetries value symme                     θ           θ  tries                                                                ∧                                                                                                                                                                       getree symmetry breaking constraints                     θ                    θ          θ                                                              ∧    ∧ ai−  ai− ∧ ai  ai  given csp variables vi subject                       different constraint constraints loss                                                                                    θ                     θ               θ  generality assume domains variables  ∧    ∧ an−  an− ∧ an−  an−                                                                θ                     θ               θ  subsets shown flener et al  ∧    ∧ an−  an− ∧ an−  an−  let consider disjunct      graceful graphs                                                        tested approach graceful graphs petrie               θ                   θ           θ        ∧    ∧ ai−  ai− ∧ ai  ai    smith  variable symmetries broken                                                        constraints  non trivial value symmetry    means θ leaves invariant     ai− maps − number edges  case ai minimal values θ graph orbits symmetry sets  map proved following result −  ≤ ≤ restrict    lemma  notations ai minimum domain keeping smallest value each  orbit group symmetries leave    ai− orbits  unchanged                                              each graph report number solutions    equivalent getree method breaking csp sol size search tree node time  value symmetries roneydougal et al  vari time needed compute solutions running time  ables values tried increasing order during symmetry breaking technique sym  search                                               port ﬁgures sbc method used case    crawford et al  safe add possible running time includes time needed perform  symmetry breaking constraints  particular group computations running times measured   safe state constraints  variable symmetries ghz dell latitude laptop running windows xp  constraints  lemma  implementation ilog solver ilog   set constraints  equivalent getree method  breaking value symmetries just proved follow graph         sym                sbc  ing result                                                       sol      node  time  sol     node  time                                                         ×                                                                                   ×                       theorem  given csp group variable symmetries ×                                                                        ×                                 group value symmetries combi  nation getree method breaking value symmetries  table  computing solutions graceful graphs  symmetry breaking constraints  computes set running times  times smaller ones  solutions                                reported petrie  gapsbdd gap                                                        sbds methods using half speed                                          σθ         ∀s ∈ solp ∃σ ∈ ∃θ ∈ ∃s ∈        shows example symmetry break                                                        ing constraints efﬁcient modiﬁed search    theorem  section  says set methods ﬁnd twice solutions  straints  equivalent constraints  let graph × graph   different constraints variables yields vertices  edges list values variables  following result                                     solutions                                                                                  corollary  given csp variable subject  different constraint group variable symmetries             group value symmetries combi let apply non trivial value symmetry second  nation getree method breaking value symmetries  symmetry breaking constraints  computes set  solutions                                                                                                  σθ         ∀s ∈ solp ∃σ ∈ ∃θ ∈ ∃s ∈          let apply following variable symmetry                                                                                     experimental results                                                          yields ﬁrst solution  implemented algorithm similar nautymc    example shows did break symmetries  kay  computing graph automorphisms product variable symmetry value symme  schreier sims algorithmseress  try despite fact variable symmetries  used following examples implementation value symmetries broken  did fully implement getree method  quires computational group algorithms  perfect magic squares  implemented far simply compute orbits perfect magic squares studied ollerenshaw   group value symmetries minimum given example csp convoluted variables  element each orbit left domain variable symmetries roneydougal et al  authors  refer method sbc symmetry breaking decided use inverse representation order trans  constraints order differentiate methods form variable symmetries value symmetries
