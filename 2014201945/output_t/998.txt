                                                                                  ng atns                                                                tim finin george hadden                                            coordinated sciencence laboratory universit                 illinois                                                                    urbana illinois            augmented transition networks atns                                  code achieves speedup factor     popular effective tool                                            size reduction factor    constructing natural language understanding                                                translation atn network lisp   systems planes waltz                                       code straightforward process each state   based large semantic grammar                                       network resulting simple lisp function    implemented atn network developing                                  compiler attempts produce efficient    frustrated numerous problems                                   code applying three sets optimization   shortcomings basic atn formalism                                       expressed simple pattern matching language    consequently augmented extended                                  rules different stages translation   model overcome problems                                          set rules defines    developed optimizing compiler atn                                     sourcetosource transformations atn networks   networks translates lisp functions                                 individual atn states example rule   interactive program allows                                     bundle adjacent word arcs state   easily extend modify atn grammar                                           single select arc set words tested           extensions thel atn model                                            arcs disjoint           extensions relatively simple                                     second set optimization rules   inclusion new arc types phrase                                      applied atn network translated lisp    matches input words root                                  code domain rules set atn    matches root forras current                                arcs example rule carefully examines   input word involved reexamining                                     condition actions arc determine   basic atn mechanism order alleviate                                 cause sideeffect set    fundamental problems                                                             register sideeffects possible           extended atn provide                                 code generating new register context need   control primitives used                                    included   dynamically prune tree decision points                                          final set optimization rules defines   developing parse primitive fail                                        lisp sourcetosource translations result    included arc type arc                                       faster andor compact code set   action propagate failure message                                     rules includes transformations   point decision tree primitives                                       optionally open code common builtin   allow save environments control                                   atn actions setting accessing   variable binding allows suspend                                   register   processing activated specified push arc                                              network editor   action continue parsing                                                    developed special                purpose editor   failed subsequent attempts darse                                     netedi waltdevelopez hadded specian purpose hadden  knows   fail suspended processing automatically                                  structure atns takes advantage   resumed environment                                                redundancies           ability control backup                                       netedi expects main input list   atn model suffers                                 each element list corresponds new arc   paucitv control primitives evaluating atn                                   atn following exception   state conceptually simple process                                    initial segment input list correspond   evaluates each arc leaving state                                   set arcs atn new arcs    taken leading new                                     added input list   state evaluated does return                                       simple list words form sentence    failure basic control primitive                                  phrase complex form possible arc   ifthenelseifelse applied arcs                                   — complete embedded tests lisp expressions   state convenient add                                      transition modes   ability conjoin disjoin bundles arcs                                             consider elements input   leaving state example ouite common                                   list atom begins    group arcs leaving state                                   represents push arc netedi sees   arc possibly taken                                                adds registersetting code push           standard atn formalism                                 arc register   easy way encode knowledge                                    subnet pushed atom input   arcs followed eventually leads                                 list represents wrd arc   failure arcs possibly                                        arc including wrd push   followed atn supports select                                         represented including   construct allow arc                                     element list preceding    bundle followed select construct                                    putting rest arguments list   additional benefit signaling reader                                  example cat prep form cat   governed arcs locallv exclusive                                       category arc recognizes prepositions   possibilities distinguishing                                          cat prep np produce code   deterministic nondeterministic aspects                                   required recognize prepositional phrases   grammar                                                                      assuming atn contained state called anp           work use long sequences                                   state noun phrase   singlearc states parse special constructions                                   recognizer   idiomatic phrases auickly results   spaghetti like network difficult read   understand avoid situation                                                          abriel     rp finin tw   code logically belongs                                             lisp editor                working paper  advanced   defined construct                                       automation group csl univ    conjoins bundle arcs single unit   destination each arc bundle                                                                                                                         hadden  hadden gdgd             netedi augmented   arc course just arc                                       transition network editor msee thesis univ   bundle                                                                                    extensions atn model                                sussman  sussman gj mcdermott dv   built efficient interpreter written                                         plannerr  conniver — genetic   maclisp uses simple recursive technique                                       approachap    proc fjcc    simulating nondeterministic automata                                        waltz   waltz dl etal planes          compiler fox aim jteimkfe                                                    natural language access large          major component atn                                    data base          cs   technical report   optimizing compiler translates atn                                               networks compact efficient lisp code   lisp code passed through standard   lisp compiler produce machine language code                                           work described report   compilation atn networks used planes                                 supported bby  ththee  officoffice  orf naval reresearcs          large parsing networks                                    contract number nla   resulted corresponding machine language                                                              natural        languagelo            flnin                                                                                 
