       problog probabilistic prolog application link discovery                          luc raedt∗ angelika kimmig hannu toivonen†                   machine learning lab albertludwigsuniversity freiburg germany                          abstract                          – despite great potential –                                                        reallife applications probabilistic logics      introduce problog probabilistic extension reasons assumptions      prolog problog program deﬁnes distribution   strong hard manage user      logic programs specifying each clause solvers slow limited      probability belongs randomly sam                                                          introduce problog – sense – simplest      pled program probabilities mutually                                                        probabilistic extension prolog design problog      independent semantics problog                                                        essentially prolog clauses labeled prob      ﬁned success probability query                                                        ability true – similar pd unlike      corresponds probability query suc                                                        approaches mentioned – probabilities mutu      ceeds randomly sampled program key                                                        ally independent problog motivated reallife      contribution paper introduction                                                        application mining large biological networks edges      effective solver computing success probabili                                                        labeled probabilities networks biological      ties essentially combines sldresolution                                                        concepts genes proteins phenotypes extracted      methods computing probability boolean                                                        large public databases probabilistic links      formulae implementation employs                                                        concepts obtained various prediction techniques      approximation algorithm combines iterative                                                        applications probabilistic links mu      deepening binary decision diagrams                                                        tually independent easily described problog      port experiments context discovering      links real biological networks demonstration   problog program  speciﬁes probability distribu      practical usefulness approach      tion possible nonprobabilistic subprograms                                                        problog program success probability query                                                        deﬁned simply probability succeeds    introduction                                       subprograms semantics problog really                                                        new closely corresponds pd fuhr   past decades increasing number prob                                                        dantsin  key contribution paper  abilistic logics developed prominent                                                        introduction effective inference procedure  examples include pha poole prismsato                                                        semantics application reallife link dis  kameya slpsmuggleton mlnsrichard                                                        covery task  son domingos  probabilistic datalog pd  fuhr  frameworks attach probabilities logi success probability problog query com  cal formulae deﬁnite clauses addition puted probability boolean monotone dnf dis  impose various constraints probabilities instance junctive normal form formula binary random variables  slps clauses deﬁning predicate assumed unfortunately problem nphard valiant   mutually exclusive prism pha attach probabil pd employs naive approach based inclusion  ities factual information constraints imposed exclusion computing probabilities formulae  essentially exclude possibility certain combina evaluation  conjuncts infeasible  tions facts simultaneously true assumptions fa implementation pd according fuhr   cilitate computation probability queries sim trast problog’s approximation algorithm able deal  plify learning algorithms representations formulae containing  formulae problog  approach pd formalism fuhr  intimately solver motivated employs recent advances  related problog does impose restrictions binary decision diagrams bdds dealing boolean  inference engine severe limitations time functions time employs approximation al                                                        gorithm computing success probability lines    ∗recently moved katholieke universiteit leuven poole  using algorithm report exper    †also university helsinki                    iments biological networks demonstrate practical                                                    ijcai                                                    usefulness approach obviously straightforward interact each expressed  transfer problog link network mining domains tissue genes possibly functionally related    paper structured follows moti closely related annotations gene ontology  vating application section  section  introduce  problog semantics shall assume familiar problog  ity prolog programming language instance  flach  introduction section  show problog program consists – prolog – set deﬁnite  problog queries represented monotone dnf clauses problog clause ci labeled  mulae computed bdds section  gives ap probability pi  proximation algorithm problog queries experiments                                                        example   example consider  real biological data reported section  finally                                                         likesxy friendofxy  sections   discuss related work conclude                                                         likesxy friendofxz likeszy                                                         friendofjohnmary    example problog biological graphs              friendofmarypedro  motivating application problog consider link min  friendofmarytom  ing large networks biological concepts enormous  friendofpedrotom  amounts molecular biological data available pub  lic sources ensembl ncbi entrez oth shall focus “pure” subset prolog  ers contain information various types ob deﬁnite clause logic problog allows use  jects genes proteins tissues organisms biological builtin predicates prolog assuming clauses                                                        deﬁning builtin predicates label   processes molecular functions information                          ···         known predicted relationships available problog program  pn   cn                                                         deﬁnes probability distribution logic programs ⊆  gene organism codes protein expressed   ···   tissue genes likely related lt cn following way  cooccur scientiﬁc articles mining data                        identiﬁed important challenging task    lt     pi        − pi         pereziratxeta et al                                      ci∈l  ci∈lt    collection interlinked heterogeneous biological unlike prolog typically interested  data conveniently seen weighted graph net termining query succeeds fails problog  work biological concepts weight edge interested computing probability succeeds  corresponds probability corresponding nodes success probability qt  query problog                             related sevon et al   probabilities edges program deﬁned  obtained methods predict existence based  cooccurrence frequencies sequence similarities                  problog representation graph                          ∃θ   qθ                                                                   ql  simple case consist probabilistic edge facts ﬁner                                grained representations using relations codes ex                                                                lt   ql · lt           presses possible                                                 typical query life scientist want ask     qt         mt              database biological concepts given gene               m⊆lt  connected given disease probabilistic graph  importance connection measured prob words success probability query corre  ability path exists given nodes sponds probability query proof given  suming each edge true speciﬁed probability distribution logic programs  edges mutually independent sevon et al   queries easily expressed logic deﬁning  computing success probabilities  nonprobabilistic predicate pathnn usual way                                                                                        ···        query  path’gene ’ ’disease alzheimer’ given problog program     pn  cn  look paths given nodes edges query trivial way computing success probability                                                              assumed probabilistic query certain success proceeds enumerating possible logic programs                                                           ⊆  probability probability deﬁned directly corre lt cf equation  clearly infeasible  sponds probability path exists nodes tiniest programs  known twoterminal network reliability problem  develop method involving components ﬁrst    obviously logic – problog – easily used concerned computation proofs query  express complex possible relations instance logical theory thatisinlt  result  proteins interact possibly monotone dnf formula second component                                                        computes probability formula    wwwensemblorg    wwwncbinlmnihgoventrez                          wwwgeneontologyorg                                                    ijcai                                                                        ljt                                     proofs goal clb denotes set boolean vari                                                              ables clauses used proof problem com                fojt  fojalat                       puting success probability problog query                                                                 duced computing probability dnf formula                            lmt                               monotone variables appear positively                                                 fomt     fomblbt                  example   continuing running example using                                                                    ll names boolean variables clauses                                                                             ···                        lpt                ltt           deﬁning likes friendof                                                          likesjohn tomt                   fopt  fopclct  fott  fotelet                                                                         ∧ ∧ ∧ ∧ ∨ ∧ ∧ ∧                                                          ltt                             equal                                                                          ∧   ∧   ∧    ∨  ∧   ∧                           fott  fotdldt                                                                                                             computing probability dnf formulae              figure  sldtree goal likesjohntomusing computing probability dnf formulae nphard              obvious abbreviations                                problem variables independent                                                                    case algorithms transforming dis                problog queries dnf formulae                  junction conjunctions mutually disjoint conjunctions                                                                    probability obtained simply sum              study set logic programs given query                                                                    literature referred problem              proved consider logical lt theory                                                                    transforming sumofproducts sumofdisjointproducts              show set logic programs represented                                                                    basic approach relies inclusionexclusion princi              dnf formula                                                                    ple set theory requires computation conjunc                employ sldresolution execution                                                                    tive probabilities sets conjunctions appearing              mechanism prolog derived example sld                                                                    dnf formula clearly intractable general ad              tree query  likesjohntom depicted figure                                                                     vanced techniques expand conjunctions negated              paths root individual leaves sldtree                                                                    subformulae order disjoin each previ              represent successful failed proof path                                                                    ous ones luo trivedi  algorithms              ends goal denoted  construct                                                                    limited dozens variables              answer substitution θ making original goal true                                                                    hundreds sums motivated advances              proofs end underlined goal fails                                                                    manipulation representation boolean formulae using                standard sldresolution computes sldtree                                                                    binary decision diagrams bdds introduction              topdown fashion initializes root sldtree                                                                    bryant  employ class techniques              query −l ··· ln proven recursively gen                                                                       bdd   efﬁcient graphical representation              erates subgoal form  − bθ ··· bmθ lθ ··· lnθ                                                                    boolean function set variables bdd represent              each clause  −b ··· bm logic program                                                                    ing formula equation  shown figure  given              general uniﬁer substitution                                                                    ﬁxed variable ordering boolean function repre              θ flach  extensive treatment                                                                    sented boolean decision tree each node                each succesful proof sldtree set clauses                                                                    ith level labeled ith variable children               ··· pk  dk⊆t employed proof                                                                    called low high each path root leaf              clauses necessary proof proof indepen                                                                    stands complete variable assignment variable              dent clauses  consequence probability                                                                   assigned   branch low high child taken              proof succeeds pi words sum                                                                 each leaf labeled outcome given variable              probabilities programs containing clauses pi                                                                  assignment represented corresponding path starting                let introduce boolean random variable bi each                                                                    tree obtains bdd merging isomorphic              clause pi  ci ∈  indicating ci logic program                                                                    subgraphs deleting redundant nodes              bi probability pi true probability                                                                    duction possible node redundant iff subgraphs              particular proof involving clauses  ··· pk  dk⊆                                                                    rooted children isomorphic figure  dashed              probability conjunctive formula ∧···∧                                                                    edges indicate ’s lead low children solid ones indi              bk goal multiple proofs probability                                                                    cate ’s lead high children              goal succeeds equals probability disjunction                                                                      practice chosen variable ordering determines ex              conjunctions true formally yields                                    ⎛               ⎞               tent substructures shared bdd                                                                   enormous inﬂuence size complexity                                    ⎝               ⎠                         qt               bi             resulting bdd stateoftheart bdd implementations                                        b∈prq bi∈clb              fore employ heuristics automatically reorder variables                                                                    during bdd construction help control combi              use convention prq denotes set natorial explosion                                                                ijcai                                                                                                                   juncts ∧···∧dk corresponds testing                                                          ···   ⊆     ···                                                        dk       bn  kind subsumption                                                                            observation motivates use iterative deepening                                                     instead depthﬁrst search compute sldtree                                                        corresponding dnf formula way                                                   likely later proofs subsumed com                                                        puted ones iterative deepening essentially proceeds depth   figure  bdd representing boolean equation  ﬁrst search does expand goals sldtree                                                        depth exceeds threshold iteratively increases                                                        depthbound iterative deepening avoids getting trapped    given bdd easy compute probability possibly inﬁnite paths sldtree instead using  corresponding boolean function traversing bdd depthbound employ probability bound  root node leaf each inner node probabilities problog resulting bestﬁrst kind search  children calculated recursively combined                                                          ﬁnal observation leading approximations success  wards following procedure practice                                                        probabilities incomplete sldtree used  memorization intermediate results used avoid                                                        during iterative deepening derive upper lower  computation nodes shared multiple paths                                                        bound success probability query obser  probabilityinput bdd node                        vation corresponding algorithm related work                                                        poole  context pha adapted    terminal return                                                         problog problog bounds obtained    terminal return                                                         structing dnf formulae incomplete sldtree  leth  high low children                                                        ﬁrst dnf formula encodes successful proofs al    probhcall probabilityh                                                        ready occurring tree second dnf formula en    problcall probabilityl                                                        codes successful proofs occurring tree  returnpn  · probh−  pn · probl                                                        proofs cut    shall section  resulting algorithm                                                                          ≤      ≤      applied problog programs containing hundreds clauses                             boolean variables bdd tens thousands                                                                                               proofs products variables implementation directly follows fact  problog store conjunctions corresponding proofs boolean dnf formula corresponding sld  preﬁxtree reasons efﬁciency             tree query    interesting use constructed bdd  given query efﬁcient answer example  consider sldtree figure  till depth                                                                                                          conditional probability questions form qtb∧···∧  case encodes left success path                bk bis possibly negated booleans representing additionally encodes paths likespedrotom  truthvalues clauses compute answer likestomtomie  needs reset probabilities corresponding nodes                                                            ∧        ∧   ∧       procedure probability                                                                              ∧ ∧ ∧ ∨ ∧ ∧ ∨ ∧ ∧    approximation algorithm                                                        formula sldtree given equation   section introduce algorithm approximating  success probability queries problog useful better approximations obtained stretching  large problog programs size monotone bound depth sldtrees following algorithm  dnf formula explode                              approximates success probability problog query    ﬁrst obvious observation leading faster algo   rithm – example  – remove boolean  variables correspond clauses probability  approximatequery program  bound     second important observation allows  eliminate complete proofs monotone dnf formula  depthbound                                                                   during computation sldtree proceeds      false  depthﬁrst left right prolog track  repeat                                                                        dnf formula represents dnf             computed proofs proofs encountered        iterateq true depthbound                                                                        conjunction ∧  ∧ bn logically entailed die         probabilityd                                                                         ∧ ∧ bn proofs removed          probabilityd  consideration work monotone dnf        increment depthbound                                                                     −    ≤  formulae condition checked efﬁciently veri    fying ∧  ∧ bn entailed  return                                                    ijcai                                                    iteratequery conjunction depthbound dnf cases results quite accurate levels –                             maximal level used gi  clauses correspond        ∨                               ing search levels running times             ∨                               subgraph typically range seconds small graphs     elseif                            hours largest successful runs figure shows        ∨                               running times  random graphs  edges       let ··· qn                     ghz machine tests bdd construction typically            select rule  −b ··· bm               infeasible number conjunctions used            mguh lθ rule      upper bound exceeded  cases width            represented boolean variable          calculated probability interval smaller            −                                   results indicate approach           iteratebθ ··· bmθ qθ ··· qnθc ∧ good bounds quite large problems                                                        swers question positively  theorem      termination       procedure     partial explanation good scalability given fig  approximateq   returns values   ure shows total number proofs  ≤ qt  ≤ − ≤               numbers proofs needed bounds  fortwo  algorithm terminate inputs illustrative random sequences subgraphs numbers  hardly avoidable given prolog does ter given function maximal size bdd used  minate using iterative deepening         approximation problem complexity                                                        seen number proofs explodes badly num  example  consider calling approximate query bers proofs needed bounds scale nicer   − program   −p bound    procedure terminate sldtree  inﬁnite repetetive                                 related work                                                        problog semantics really new closely corre    experiments                                        sponds semantics proposed dantsin                                                         pd fuhr  subtle differ  implemented approximation algorithm prolog                                                        ences problog approach dantsin em  yap used cudd bdd operations motivated                                                        ploy prolog pd focusses datalog does al  fact simple connection queries num                                                        low functors furthermore work pd comes  ber proofs quickly explodes biological networks                                                        database perspective devoted lot  primarily try answer following question                                                        tention negation dantsin does report  does approximation algorithm scale    implementation pd implemented hyspirit    test graph used real biological graph computes success probabilities steps  random alzheimer genes hgnc ids     ﬁrst step employs magic sets compute answers    edges  nodes graph datalog component query second step em  extracted ncbi databases tak ploys inclusionexclusion principle compute prob  ing union subgraphs radius  genes ability resulting dnf expressions second step  producing weights described sevon et al  makes approach severely limited fuhr   test case focused evaluating connection states “practical experimentation hyspirit shown  tween genes   scaling experiments evaluation  conjuncts fea  randomly subsampled edges obtain subgraphs sible” contrast using problog’s approximation algorithm  ⊂  ⊂  sizes     edges each gi deal  conjuncts shown ex  contains genes consists connected compo periments needed order cope realistic  nent average degree nodes ranges gis approximately applications link mining    subsampling repeated  times         second problog semantics extends distribu    problog approximation algorithm run tional semantics sato kameya  pro  data sets goal obtaining   approximations posal dantsin  allows attaching  minimal length paths nodes probabilities clauses just ground facts   original graph initialized iterative deepening ability exercised caution truth  threshold number used clauses               clauses nonground facts need independent    setting connection query solved clause subsumes does provide    graphs   edges depending new abilities illustrated likes example im  random sample illustrative example figure portantly systems prism sato kameya   shows convergence bounds graph  pha poole  avoid combinatorial prob  edges figure shows average width probability lem second step imposing various constraints  interval  random subgraphs  edges allowed programs basically guarantee formula                                                        describing proofs query sumofdisjointproducts    httpvlsicoloradoedu˜fabiocudd               conditions natural types                                                    ijcai                                                    
