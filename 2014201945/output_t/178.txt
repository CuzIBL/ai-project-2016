                                rules   constraint    modelling               alan  frisch   chris jefferson   bernadette   mart´ınez hernandez´                artiﬁcial intelligence group dept  science univ york uk                                      frischcajbernacsyorkacuk                                                ian  miguel                           school  science univ  st andrews uk                                           ianmdcsstandacuk                        abstract                          supported existing constraint solvers refer                                                        rules reﬁnement rules current focus gener       diverse combinatorial problems     ating set correct models includes human      solved successfully using ﬁnitedomain  expert generate future work focus generating      straint programming apply constraint good models      programming particular domain problem      ﬁrst modelled constraint satisfaction      optimisation problem constraints provide   challenges   contributions      rich language typically alternative models central task arguably central task modelling      exist formulating good model requires combinatorial problems choosing representation com      great deal expertise paper describes   plex decision variables current ﬁnitedomain constraint      conjure reﬁnes speciﬁcation solvers provide decision variables domains contain      problem abstract constraint speciﬁcation lan atomic elements atomic variables com      guage essence set alternative constraint binatorial problems require ﬁnding complex      models reﬁnement compositional alternative   combinatorial structure example social golfers      constraint models generated composing  problem sgp  problem  requires partitioning set      ﬁnements components speciﬁcation   golfers each week play goal ﬁnd      experimental results demonstrate conjure  multiset partitions multiset sets sets      able generate variety models practical modelling sgp requires deciding represent      problems essence speciﬁcations        complex decision variable constrained collection                                                        atomic variables                                                          concert choosing representation complex    introduction                                       cision variables task representing constraints                                                        problem natural form combinatorial prob  employ ﬁnitedomain constraint programming technology lem imposes constraints combinatorial structure  solve problem problem ﬁrst characterised sought constraints “translated”  modelled set constraints decision variables imposed representation decision variables  solutions satisfy modelling difﬁcult requires                                                          paper shows central tasks modelling  expertise limiting widespread use constraint technol                                                        formalised automated doing reports  ogy vast majority research constraint modelling                                                        principal contributions designed language  presents alternative models particular problem eval                                                        called essence enables combinatorial problems  uates alternatives through analysis andor experiment                                                        stated high level abstraction level abstrac  process alternative models generated                                                        tion consequence three features  language sup  rarely discussed each constraint programmer                                                        ports wide range types including sets multisets rela  learn art modelling forming generalisations                                                        tions functions partitions decision variables  studies                                                        types  types nested arbitrary depth    show set rules formalise generation example decision variable type set set sets  alternative models doing requires language set set sets forth  constraints contain  express abstract problem structure models quantiﬁers range decision variables example  function modelling choices open rules decision variable type set sets constraint  language level abstraction  modelling decisions designed ﬁnitedomain constraint solvers support variables  language essence                       domain elements ﬁnite sets atomic elements    rules embedded conjure pects work considered sake simplicity  given essence speciﬁcation generates models type paper pretends variables existbe form ∀x ∈ xφ essence language  given integer ticks ruler size intertick distances  lined sec  enable unique minimise  presentation second principal contribution          given       int    second major contribution formulation au        ≥                                                               letting     bound  tomation set rules reﬁne constraints com      icks set size bound  plex variables essence speciﬁcation constraints  minimising  maxt icks  atomic variables level abstraction pro   ∀i j⊆t icks∀k l⊆t icks                                                                             → −  −  vided existing constraint languages toolkits  mal rules presented sec     attempt formulate set reﬁnement rules figure  essence speciﬁcation golomb ruler prob  fronts primary difﬁculties secondary ones lem  fore proceeding worth considering primary ones    ﬁrst difﬁculty arises expressions particularly appropriate channelling constraints  decision variables nonatomic type usually al conjecture good models problem  ways reﬁned multiple ways furthermore reﬁne generated automatically formulating problem  ment operator depends operands reﬁned essence reﬁning speciﬁcation using rules  example reﬁning constraint  kind presented paper implemented  atomic set variables treatment equality program called conjure currently reﬁnes subset  different combination ways essence called miniessence gives platform  reﬁned possible operator inapplica experimentally tested conjecture  ble certain reﬁnements operands            reported sec     second major difﬁculty arises arbitrary nesting  types reﬁning operator applied expressions  introduction essence  types nested provides biggest challenge  sider reﬁning constraint  section brieﬂy introduces abstract speciﬁca  cision variables type τ nested arbitrarily deep tion language essence evolving grow  generated constraint involve components ing language version  used paper  bound nesting τ speciﬁcation language  complex constraint generated through wwwcsyorkacukaigconstraintsautomodel  cursive rule applications look arbitrarily let begin considering speciﬁcation  deep nesting τ furthermore wish produce golomb ruler problem grp problem  wwwcspliborg  reﬁnements kind shown fig  speciﬁcation list state  representation especially tricky case quanti ments seven kinds signalled  ﬁer ranges decision variable nested type keywords given letting maximising  ∀x⊆a  φ                         minimising    statements composed    modelling constraints involves just represent speciﬁcations according regular expression  ing decision variables problem constraints constraint given  letting  where∗  models contain symmetries enormous      minimising    maximising   that∗  numbers result redundancies search identiﬁers conjure come categories constant  space expert modellers able identify symmetries parameter quantiﬁed variable decision variable “let  break introducing symmetrybreaking ting” statements declare constant symbols val  constraints using symmetryaware search method ues “given” statements declare problem’s parameters  argued detecting symmetries model hard values parameters provided specify  graph isomorphism maintain symmetries enter stance problem class parameter values  model sources symmetry inherent problem speciﬁcation modelling languages  combinatorial problem introduced modelling provided “where” statements impose  process automated modelling ought identify restrictions parameter values parameter values  symmetry introduces model sec  explains meeting restrictions specify problem instance “find”  integrated architecture model statements declare decision variables “minimising”  generation                                           “maximising” statement gives objective function    technique used expert modellers repre finally “such that” statements problem’s constraints  sent complex decision variable multiple representa grp speciﬁcation begins declaring pa  tions simultaneously impose channelling constraints rameter restricting nonnegative declaring bound  representations consistent each   constant used declaration bound   yields propagation declaration bound come declaration  reduced search single representation seen symbol deﬁned used  rules conjure generate models multiple repre striction prevents cyclical deﬁnitions means decision  sentations sec  explains reﬁnement rules gen variables used deﬁnitions constants  erate information needed automatically generate parameters  speciﬁcation language strongly typed ex sonet communication network comprises number rings each joining num                                                         ber nodes node installed ring using adm capacity  pression subexpression type type deci bound number nodes installed ring each node  sion variable icks indicates goal problem installed ring communication routed pair  ﬁnd set containing elements each integer nodes installed common ring given capacity bound                                                         speciﬁcation pairs nodes communicate allocate set nodes  range  bound types supported essence each ring given communication demands met objective  include atomic types int integer bool boolean minimise number adms used common simpliﬁcation  lu integer range type integer expres sonet problem described   sions essence provides enumerated types new given    nringsint nnodesint capacityint  useful atomic type type size α type α    nrings≥  nnodes≥  capacity≥                                                          letting   nodes nnodes  unnamed elements                                      given     demandset size set size  nodes    essence  ﬁrst constraint language support fully rings mset size nrings set maxsize capacity nodes                                                         minimising        compositional type constructors example decision     pr∈rings  variable type integer set integer set set ∀pair ∈ demand ∃r ∈ rings  pair ⊆  integer forth τ type α integer expres                sion      expressions type range figure  essence speciﬁcation sonet problem  following types appear paper     set size α τ set maxsize α τ kinds set     mset size α τ msetmaxsize α τ kinds multiset short step established constraint language     matrix indexed     τ matrix     opl solver eclipse perform step  types essence relations veloping suite backend translators future  types partial total functions type intend translate restricted languages sat  type partitions set type permutations pseudoboolean formulations  type    constraints speciﬁcation language built  architecture conjure  parameters constants decision variables using opera  tors commonly mathematics constraint section discusses reﬁnement rules conjure uses  speciﬁcation languages language includes variable reﬁne essence expression set essence ex                                                        pressions concision small subset  binders ∀x ∃x px range  speciﬁed ﬁnite type integer range integer reﬁnement rules remainder follow similar pattern  constraint grp paraphrased “for  ordered pair ticks unordered pair reﬁning simple essence speciﬁcation  ticks pairs different distance reﬁnement essence speciﬁcation begins reﬁning  distance l” each constraint objective function turn let  clarify notation expression ⊆ icks means gin considering singleconstraint microsonet speci  distinct elements drawn icks loss ﬁcation fig  goal ﬁll rings  generality called called nodes    consider speciﬁcation sonet problem shown key consideration reﬁning microsonet repre  fig  notice nodes declared range subtle sentation each ring each ﬁxedsize set  point line speciﬁcation declaring paper uses representations ﬁxedsize sets explicit  parameters demand parameter instantiated representation onedimensional matrix nodes indexed  particular set sets size outer set known capacity each element matrix corresponds  value given indirectly declaration element set represent set properly elements  requires inner sets cardinality goal matrix constrained distinct values oc  ﬁnd multiset representing rings each element currence representation onedimensional boolean matrix  set nodes representing nodes ring indexed nodes true entry indicates corre  objective minimise sum number nodes sponding node set represent set properly  installed each ring constraint ensures pair number true entries equal capacity count  nodes communicate installed common ing treat truefalse  fig  gives essence mod  ring                                                 els using representations note symbols                                                        essence “∀” “Σ” written textually                                 target language essence                          “forall” “sum” writing essence use  essence  speciﬁcations reﬁned target language textual version  called essence subset essence level reﬁnement operator ρ function maps ev  abstraction similar existing constraint languages ery essence expression set essence expressions  opl  closest types essence explained later each essence expressions  integers integer ranges booleans matrices does tagged information necessary construct  enumerated types types unnamed elements  binders quantiﬁers summations range httpwwwcsyorkacukaigconstraintsautomodel  integer ranges generic constraint language complete set         given      nnodes  int capacity int       decision variables ring decision variable                nnodes ≥  capacity ≥                          gensymbol           letting    nodes nnodes                  deﬁnitions          type information                 ring  set size capacity nodes input expression given right long                      ring  set size capacity nodes vertical bar bar meaning separating            ring  ring                     details rule types deﬁnitions   given    nnodes int capacity int                    sizedsetequality   chooses represent      nnodes ≥  capacity ≥                     sets explicitly expression “ js   letting  nodes nnodes                                                        ∀ ∃       ∧                     ring  matrix indexed  capacity nodes  n” used constrain explicit matrices                          ring  matrix indexed  capacity nodes                                                      represent set note introduction quantiﬁed   forall  capacity exists  capacity ringi  ringj                                                       variables denoted general            alldifferentring                                                                                                    alldifferentring                         case essence  reﬁned                                                        result denoted φ returned example       given     nnodes int capacity int                                              nnodes  capacity                       “∀i ∃j ringi  ringj ∧ capacity  capacity”                      ≥      ≥                                            letting   nodes nnodes                     essence  ρe  brevity model shown                                ring  matrix indexed nodes bool                                                       fig  omits capacity  capacity simpliﬁer eas                 ring  matrix indexed nodes bool                                                      ily remove convention followed subsequent       forall  nodes ringi ringi                                              sum  nodes ringi capacity     models generated sizedsetequality                                              sum  nodes ringi capacity       recall explicit representation setsize                                                        τ matrix distinct elements each type τ  figure  essence speciﬁcation essence models rule generates explicit representation  microsonet problem                           troduce generated model constraint ele                                                        ments matrix different particular sized                                                        setequality   rule introduce constraints                                                                                        ﬁnal model ρ deﬁned inductively set uniquely alldifferents alldifferents ele                                                                       named equations form ρe  ∪ ∪ · · · ∪ en ments reﬁned ρ ap  equation essence expres plied constraints resulting essence                                   sion each ei set essence expressions usually straints named χ ψ rule  given set comprehension perspicuity each equation consider χ ψ occur generated                               ref         ref        model essence model fig  appear  split rules written ρe → ρe →            ref                                           χ ψ conjoined φ returning φ ∧ χ ∧ ψ  rn ρe → en                                         incorrect observe treatment    sizedsetequality   equation responsible                                                        reﬁne ¬ring  ring ¬φ ∧ χ ∧ ψ  ﬁning expressions form  sired reﬁnement ¬φ ∧ χ ∧ ψ correct reﬁnement  expressions type ﬁxedsize set fig  gives obtained returning φ reﬁnement tagging reﬁne  rules equation complete version sizedsete ment χ ∧ ψ essence model generated  quality gives rule each combination repre adding χ ∧ ψ constraints case tag  sentation representation constraint constraint labelled  imposing equality                      rule builds reﬁnement    illustrate operation rule discuss generated recursive ρ tags  sizedsetequality   rule reﬁnes ring  ring default added tags  sizedsetequality   reﬁnes explicit sizedsetequality tags attached reﬁnement                                        dimensional matrices denoted sized φ χ ψ implicitly added tag explic  setequality   rule proceeds similarly reader itly given rule seen later default  wonder strategy reﬁning arguments equal overridden  ity constraint inside equality rule explained space precludes giving derivation explicit  subsection                              essence  model fig  reﬁnements triggered     rule needs introduce new identiﬁer sizedsetequality example straight                       denoted does making use forward universal quantiﬁcation ﬁnite range inte  gensymbol  function function takes arguments gers essence viewed conjunction  ﬁrst explicit category sec  simple ‘for’ loop similarly existential quantiﬁcation  identiﬁer category information copied ﬁnite range integers treated disjunction  second type new identiﬁer ﬁrst constraint explicit essence model comes di  onedimensional matrix used explicit representation rectly sizedsetequality occurrence model  gensymbol  function creates new identiﬁer follows similarly  required category type appears reﬁning constraints objective function  essence model constructed ex   essence  speciﬁcation given letting                                                  ample reﬁning ring sizedsetequality      statements generated scanning set  gensymbolring matrix indexed nodes  constraints adding appropriate deﬁnition each            denote unique identiﬁer matrix unique identiﬁer statements reﬁned                                                  ref   sizedsetequality ρs  set size τ   set size τ →                                                 φ                                gensymbols matrix indexed τ                                                  χ ∧ ψ                  gensymbols matrix indexed τ                                        gensymbol“quantiﬁed variable”                              φ ∈ ρ∀i∃jsi  sj ∧   gensymbol“quantiﬁed variable”                             χ ∈ ρalldifferents                             ψ ∈ ρalldifferents                                                         ref   sizedsetequality ρs  set size τ   set size τ →       φ                              τ ab bool                                                χ ∧ ψ                 gensymbols matrix indexed τ bool                                                                               gensymbols matrix indexed τ bool                            φ ∈ ρ∀isi  si ∧   gensymbol“quantiﬁed variable” τ                       χ ∈ ρΣisi                        ψ ∈ ρΣisi                                   ref   forallrange ρ∀i  nn φ  bool →                           forall  nn φ        forall  nn Γ                φ Γ ∈ ρφ                                          ref   forallsizedset ρ∀i  τ ∈  set size τφ  bool →       forall  φ                gensymboli        χ∧ forall  Γ    gensymbols matrix indexed τ                φ Γ ∈ ρφi → sj        χ ∈ ρalldifferents                                                         ref   sizedsubset ρs  set size τ ⊆  set size τ →       φ                    τ ab bool                                      χ ∧ ψ       gensymbols matrix indexed τ                                                           gensymbols matrix indexed τ bool                         φ ∈ ρ∀issi   gensymbol“quantiﬁed variable”                        χ ∈ ρΣj sj   gensymbol“quantiﬁed variable” τ                             ψ ∈ ρalldifferents                                          figure  example reﬁnement rules    way constraints                              tags impose el                                                        ements matrix sets different el  reﬁning nested types simple example                ements nonatomic type alldifferent  expressions nested type reﬁned straint reﬁned space reasons deﬁnition  sider microsonet speciﬁcation fig  goal alldifferent reﬁnement rules omitted  generate identical sets rings key decision                                                          main constraint generated sizedsetequality  representation rings rings  sets sets                                                      ρ∀i∃jrings  rings forallrange equa  reﬁnement begins ρrings  rings  requiring sized                                                                        tion applicable fig  gives forallrange  setequality   rules given fig  sized                                                        rule works reﬁning φ contains free variable  setequality   applicable “set size capacity                                                        each resulting reﬁnement φ tag Γ  nodes” range integers boolean                                                        tain free variable wrapped “forall  ”  dexing matrix complex type each index                                                                                                      reﬁnement continues ρ∃j rings  rings ex  correspond possible sets nodes                                                                                           istsrange  operates way forallrange  lead unfeasibly large matrices future work consider                                                        omit details  relaxing condition certain cases                                                                                          justiﬁcation reﬁning arguments equal ρringsi  ringsj sized  ity constraint inside equality rule clear setequality used rules applicable                                                                         context nested types seemingly morenatural ap ringsi ringsi sets nodes reﬁnement                                                        fig  uses sizedsetequality generate occur  proach reﬁning  reﬁne  constrain results equal given unbounded rence representation inner sets rule operates  nesting types multiple possible reﬁnements each described earlier highlight gensymbol treats  type constraining results equal straightfor dexed matrices gensymbol respects index structure                                                        ﬁrst argument given indexed onedimensional  ward consider case sets inte                                                        array rings  gensymbol rings  matrix creates  gers sets sets    sets integers having reﬁned                                                                              twodimensional boolean matrix rings fig  ﬁxed constraint reﬁnements                                                                                    turns partiallyindexed ringsi reﬁned ver  enforces equality instead approach  rules designed “peel off” layer nesting sion element set sets  associated constraintoperator formed looking remaining reﬁnements straightforward note                                                                    arbitrarily deep inside reﬁned expression          rings rings model intermediate    performing sizedsetequality   requires reﬁning representations concrete rings
