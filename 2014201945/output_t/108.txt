             robust humancomputer interaction guiding user                                     providing feedback                                     ryoo aggarwal                                 vision research center                           department electrical engineering                          university texas austin austin tx                                  mryoo aggarwaljkmailutexasedu                        abstract                      guide user perform represented activity                                                    user trying perform activity heshe wants       introduce humancomputer interaction                                                    hci makes analysis current status       collaborates user providing feed                                                   activity performed produce feedback       during user activities goal                                                    user does perform correct subevent       help user complete highlevel activity                                                    interface alerts user mistake  goal enable       represented hierarchically user                                                    provide feedback advice user based       performing highlevel activity ana                                                   action representation visual observations       lyzes subevents user completed                                                      hci helping novice task tightening       subevents needed order                                                    nuts installing car tire typical example mo      user finish activity representations                                                    tivated construction algorithm task com      human activities constructed using previously                                                    posed multiple subevents tightening single nut       developed contextfree grammar based representa                                                   follow particular order nuts tightened       tion scheme focus game named ‘penta                                                   order similar drawing star type       gram game’ illustrate experi                                                   tasks user undo subevents untightening nut       ments shows ability guide                                                    recover hisher mistake detailed structure       user complete ‘pentagram game’ providing                                                    characteristic activity discussed section        explicit feedback feedback contains                                                    ability guide user perform       atomic level instructions describes                                                    subevents correct order undo subevents       higherlevel longterm goals composite ac                                                   heshe mistake algorithm designed       tivities                                                    provide feedback accomplish activities                                                    general activities     introduction                                    previous hci systems mainly actionreaction based    humans understand structure activities models systems recognize human actions perform    advantage knowledge structure performing particular reactions encoded research    highlevel activities middle performing complex intelligent environments typical example    activity humans know exactly subevents reactive systems goal little different    occurred subevents need performed goal previous reaction based hci systems pro   explicitly implicitly know consid vide correct reactions corresponding actions    ering order achieve goal guide instruct make    past example during dance expert dancer highlevel activity successful providing feedback reac   dancer explicitly implicitly knows hisher tion based hci systems suitable case order    dancer knows hisher moves reaction based hci systems guide user perform    order dancing activity uses knowledge during represented activities containing concurrent se   dancing activity decide various moves   quential subevents specify possible     motivated ability human experts design steps branches order subevents number   humancomputer interaction hci collabo cases large addition feedback provided   rates user help user complete highlevel human hierarchical difficult reaction   activities similar human experts knowl based systems deal   edge structure activity user wants main technical contribution paper   perform representation activity algorithm provide feedback estimates  describes correct activity look like tempo ternal states incomplete composite activity pre  rally spatially logically uses automatically dicts subevent needed order complete action                                                   ijcai                                                case simple sequential models finite state  languagelike representations    machines hidden markov models estimating state                                                    order hci provide feedback    simple task inherently contain formal complete representation ac  information occurring subevent tivity user trying accomplish use ryoo   case activities represented highly                                                    aggarwal’s cfgbased representation syntax construct   complex models firstorder logic formal representation activity listing necessary tem  longer simple task use human activity representa poral spatial conditions assumed   tion framework developed ryoo aggarwal                                                     programming languagelike representation   activities consisting concurrent subevents easy activity wishes recognize   determine point reached   subevent urgently needed concurrent activities ad example  let’s look spinning figure skating   dition highly complex activities subevents example spinning moves figure skaters   identical sequence beginning confusing complex human activities involve arm leg   decision status activity  movements assume wants provide feed                                                   advice skater perform common combination     related works                                 spin camelsit spin camel spin skater spin                                                    hisher leg arm fully outstretched horizontally    reactive systems mentioned introduction general shape ‘t’ sit spin skater sit    similar aspects coen  presented spinning camelsit spin sequence spins    design principles intelligent environments skater initially spin ‘t’ shape sit    search projects constructed hci systems intelligent en spinning following cfgbased    vironments rooms workspaces hassens et al  representation applying feedback providing algo   kulkarni  introduced concept reactive rithm    behavioral systems extending previous rulebased reactive camelsitspinperson     systems main goal make hci correctly  list def‘a’ spinperson   spond relatively simple user behaviors actions    list def‘b’ sitperson   activity context                                   list def‘c’ stretcharmperson     hand works surveillance        def‘d’ stretchlegperson    children monitoring systems attempted recognize hierar  equalsa   chical human activities minnen et al  park ag duringc duringd    garwal  siskind  works      duringb   focused afterthefact detection activities did meetsc meetsd        attempt provide feedback user performing   activities work ryoo aggarwal    directed graph representations   highlevel human activities represented hierarchically                                                    languagelike representation activities hu  using contextfree grammar cfg syntax specifying tem                                                   manoriented order estimate ongoing status ac  poral spatial logical relationships subevents                                                    tivity generate proper feedback converts   representation similar firstorder logic using                                                    programming languagelike activity representation   allen’s temporal predicates allen  recognition                                                    internal directed graph representation automatically using   hierarchically                                                    following algorithm                                                      directed graph representation vertex time     feedback                                      point starting time ending time subevent    objective algorithm provide feedback edge vertex vertex implies     follows given situation user middle purpose conversion calculate necessary tem   performing action analyze poral ordering times associated activity’s    subevents subevents need subevents feedback providing algorithm uses di   explicit feedback provided finally stating rected graph representation human activities    subevents immediately needed directed graph representation enables calculate    appropriate starting time ending time      order time points easily     assume initially languagelike procedure convert cfgbased representation    representation activities start converting directed graph representation presented    representation activities directed graph representa convert allen’s temporal predicates    tion makes able apply algorithm time intervals equalities inequalities time    discuss principle theorems justifying approach points cfgbased representation temporal relation   finally present general algorithm providing feed ships specified logical formula allen’s temporal    hierarchical activities convey hi predicates following definition temporal predicates    erarchical structure activities generate hierarchical representation converted equalities ine   feedback                                       qualities time points follows                                                   ijcai                                                 let time intervals astartaend bstartbend   consistent state feedback     equalsa     astart  bstart aend  bend subsection describes principle definitions theorems     beforea    aend  bstart                justifies algorithm theoretically     meetsa     aend  bstart                  directed graph representation analyzing status     overlapsa    astart  bstart bstart  aend ongoing activity identical finding vertices     startsa      astart  bstart aend  bend user assigned correct value vertices corre    duringa     bstart  astart aend  bend spond starting ending times subevents assigning     finishesa     aend  bend astart  bstart values vertices means user started ended     add trivial inequality astartaend time subevents time points denote set assigned    intervals result logical concatenations allen’s vertices state graph    temporal predicates converted logical concatenations calculate possible assign   equalities inequalities time points ment state situation multiple     removes predicate follows candidate assignments each vertex subevents     nottt                  occur multiple times addition leave     nottt                  vertices unassigned leaving assigned                                                    future possible states satisfy     converts logical formula dis temporal order specified graph states   junctive normal form dnf end product dis consistent states   junction conjunctive clauses pure equalities ine  qualities suggests activity representation definition  assigned vertex define vertex assigned   divided conjunctive clauses each clause vertex assigned identical value   presents necessary temporal conditions activity time points associated vertex define vertex   semantic difference dnf representation unassigned vertex did assign value   directed graph representation plan construct time points associated vertex define vertex   each clause formulate directed graph help halfassigned vertex subset time points vertex   user visualize representation calculates assigned unassigned   time points equal checking equalities clause definition  consistent state let set assigned   assigns vertex set time points vertices graph let set halfassigned vertices   equal example tt tt vertex say graph consistent state   assigned set edge constructed assignment   vertex vertex      vw exist path    directed graph representation sug   gests activity completed      parents   integer value correctly assigned each vertex      parents   satisfying temporal order graph        consistent state implies contradiction   example  languagelike representation camelsit assigned values graph consistent state   spin discussed example  converted clearly shows point activity proc  directed graph temporal predicates essed definition  know graph   verted equalities inequalities         assignment consistent state consistent               states states particularly interested       start end  start end start end  start end    maximum consistent states additional assignments based     astartthisstart aendthisend astartcstart cendaend                 currently provided time intervals possible          start start end end  start start end end  consistent state maximum consistent state     cend  bstart dend  bstart     dnf composed conjunctive calculating maximum consistent states ongoing    clause figure  shows final directed graph representation activity key component analyzing    example                                 status ongoing activity providing feedback                                                    introduce theorems lead use                                                iterative approach maximum consistent states                                                                          theorem  let set vertices graph                                        ae                      bs                         consistent state let vertex uhs                                                 parents  assign value larger max      thiss                               thise     parents entire time points               ds         bs                                                  consistent state assign value                                                    subset time points making halfassigned                                                                      consistent state      figure  directed graph representation ‘camelsitspin’ theorem  let vertex make vertex    edges         omitted graph assigned vertex assigning identical values time                                    points consistent state                                                   ijcai                                                 iteratively updating consistent states using theorem  calculating maximum valid consistent states    lead maximum consistent states assuming provide feedback user feedback   knows starting times ending times onestep lookahead information activity applying   subevents check update theorem   calculated maximum consis  possible possible assign value tent states able subevents   detected subevents corresponding vertex needed time interval   straint starting time ending time   subevent match example   hierarchical feedback algorithm   time intervals     subevent actual algorithm feedback providing described   assign   ae checked subsection especially focusing hierarchical aspect   applying dynamic programming algorithm feedback   algorithm traverses adding ending time highlevel human activities hierarchical struc  subevent resulting time complexity linear tures subevents subevents im  time quadratic time each case             plies needs hierarchical algorithm recognize   algorithm calculate maximum consistent states time intervals subevents suggests hierarchical      initialize vertices graph unassigned vertices feedback needed                                                  recursive algorithm designed        apply theorem   vertex   base case feedback providing atomic actions di       make assigned vertex half assigned vertex rectly telling user atomic action composite         accordingly                                activities analyzes subevents’ temporal struc       update vvalue list possible assignments tures using directed graph representation activity                                        tells user start end particular subevent           update vvalueip list assignments applying algorithm presented subsection             parent vertex vvaluei subevent atomic action simply tell           vvaluei ending time subevent user action subevent composite             traverse graph using value activity tell user complete              valueip ancestors check subevent examine subevents              starting subevent assigned subevent provide hierarchical feedback            remove vvaluei vvalue process continues atomicity gained      nil                                 example  let’s look spinning moves figure     return assignments graph              skating assume user wants perform     maximum consistent states camelsitsit spin defined camelsit spin   contradiction assignments vertices does sit spin camelsitsit spin combi  imply future assignments contraction nation camelsit spin sit spin skater   possible calculate maximum valid changes hisher axis feet spins set   consistent states based maximum consistent states subevents camelsitsit spin camelsit spin                                                    sit spin assume wants provide   definition  valid consistent state consistent feedback user just started spin time  ap  state valid consistent state possible plying approach presented subsection  result   combination future assignments satisfies temporal telling user ‘start camelsit spin   relationships vertices maximum valid consistent ’ information sufficient   states valid consistent states explicitly specify start subevent   valid consistent states containing         follows   algorithm calculate maximum valid consistent states  order camelsitsit spin        each maximum consistent state assignment camelsit spin                                                           order camelsit spin   stretch              s’   h’                                   arm   stretchleg                                                       stretcharm stretchleg atomic actions                                                                                 vs’ ae assigned  ae current assume knows time intervals              time point  ae assigned v’ h’  subevents occurred using recognition algo             aecurrent time point              rithm cfgbased representations              vh’ ascurrent time point           assume knows starting time subevent           s’  s’   descendent         soon subevent started each subevent           h’  h’   descendent         list time intervals specifies pre        nil                              vious occurrences subevent candidate start     return set s’ h’                  ing times subevent completed                                                   ijcai                                                algorithm provide hierarchical feedback      using previous recognition algorithms       cfgbased representation possible starting       times ending times subevents      convert cfgbased representation directed       graph representations      maximum valid consistent state closest goal      apply theorem   construct feedback       start end corresponding subevent figure  illustration setup ‘pentagram game’       specified                                   locations place place … place black stones          subevent step  composite apply placed each location placement correct order       procedure step  subevent   activity ‘pentagram game’ complete         return concatenated feedback            wise incorrect order activity incomplete note                                                   user freely remove placed stones heshe thinks place    experiments                                  ment wrong    focus activity named ‘pentagram game’                                                                                  experiments ‘pentagram game’ composite action                         sequence moving removing stones particular place                            similar activity tightening tire car xe se xe    se    xe   experiments define three types atomic actions    parameters movestonepersonplace removestone                                                                                person place basicsafeperson place                                                                                                            atomic action describes person moving stone place                                                                                    seconding atomic action describes person removing          se                                                                           stone place placing                     assigned vertex                                                           thiss   atomic action describes person did perform                       halfassigned vertex   action related place notational convenience                                                                                     unassigned vertex   simply write movestoneperson place ‘move’    user moving stones detects figure  directed graph representation ‘pentagramgame’    starting time ending time atomic actions using dotted vertices unassigned vertices halfassigned vertices   vision techniques     order make highlevel activity ‘pentagram game’    def‘x’ movestoneperson place    successful user place stones locations    def‘x’ movestoneperson place    following particular order figure  describes order    def‘x’ movestoneperson place    activity ‘pentagram game’ important characteristic    def‘x’ movestoneperson place    ‘pentagram’ user remove stones    def‘s’ safeperson place … place    previous state makes activity    def‘s’ safeperson place … place    complex example following    def‘s’ safeperson place … place    sequence atomic actions satisfies ‘pentagram    def‘s’ safeperson place … place    game’ activity movemoveremovemovemovemove     def‘s’ safeperson place … place      moveremove interrupted      original sequence mmmmm ‘penta starts‘this’ ‘x’ finishes‘this’ ‘x’    gram game’ activity person removed stone meets‘s’ ‘x’ meets‘x’ ‘s’ meets‘s’ ‘x’    place moves defining composite meets‘x’ ‘s’ meets‘s’ ‘x’meets‘x’ ‘s’    activity ‘pentagram game’ need define followed meets‘s’‘x’ meets‘x’ ‘s’ meets‘s’ ‘x’    remove mmrmrm activity    composite activity safeperson stone place place shot video users doing ‘pentagram game’   place place place playing ‘pentagram game’ performed complete sequence successful   ‘safe’ activity inserted correct moves activities stopped middle     ‘pentagram game’ composed activity sequences mistakes intentionally   ‘movestone’ atomic actions ‘safe’ composite ac inserting movemove initial   tivities safemsafemsafemsafemsafem purpose erroneous insertions test   languagelike representation activity ‘penta feedback providing algorithm correctly guide   gramgame’ follows actual representation user complete overall activity example fed   ‘safe’ omitted limitation space input sequences movemovemove                                                    guide user start remove start remove     pentagramgameperson place … place      videos taken sony vx converted     list  def‘x’ movestoneperson place sequence frames frame rate  second each                                                   ijcai                                               
