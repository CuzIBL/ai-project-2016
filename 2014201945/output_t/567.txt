         compiling bayesian networks symbolic probability calculation                                 based zerosuppressed bdds            shinichi minato                     ken satoh                       taisuke sato        div science      national institute informatics   dept science          hokkaido university                     sokendai               tokyo institute technology        sapporo – japan           tokyo – japan             tokyo – japan                        abstract                          method does use cnf representation directly                                                        translates bn set factored mlfs zbdd      compiling bayesian networks bns hot topic  manipulator generate new zbdd result addi      probabilistic modeling processing  tionmultiplication operations pairs zbdds      paper propose new method compiling ing interzbdd operations bottomup manner ac      bns multilinear functions mlfs based   cording bn structure produce set zbdds      zerosuppressed binary decision diagrams zb     each represents mlf each bn node im      dds graphbased representation   portant property method total product      combinatorial item sets method differs  zbdds bn nodes corresponds factored mlf      original approach darwiche et al en basically equivalent darwiche’s result addition      codes bns conjunctive normal forms cnfs    ally method necessary calculate mlf      translates cnfs factored mlfs  network extract mlfs      approach directly translates bn set fac network related query avoid unnecessary      tored mlfs using zbddbased symbolic proba     calculation redundant terms mlfs      bility calculation mlf exponential    paper show experimental results typ      computational complexity zbddbased      ical benchmark examples algorithm simply      data structure provides compact factored form   based mathematical deﬁnition probability calcula      mlf arithmetic operations ex  tions performance competitive existing stateoftheart      ecuted time linear zbdd size methods      method necessary generate  zbddbased method compared      mlf network extract      cent work sanner mcallester computing bn      mlfs network related  probabilities using afﬁne algebraic dds aadds      query avoiding unnecessary calculation redun method generates aadds result interaadd oper      dant mlf terms present experimental results   ations given bn inference query similar      typical benchmark examples     approach semantics decision diagrams      algorithm simply based mathematical quite different discuss difference later      deﬁnition probability calculation performance section      competitive existing stateoftheart methods                                                          basic concept bn compilation ex                                                        isting methods section  zbdd data    introduction                                       structure representing mlfs section  section                                                         procedure zbdd generation online infer  compiling bayesian networks bns hot topic ence experimental results given section  followed  probabilistic modeling processing recently data struc conclusion  tures decision diagrams      effectively  used accelerating probability computations bns dar  wiche et al  shown efﬁcient method com  preliminary  piling bns factored forms multilinear functions                                                        brieﬂy review method compiling bns  mlfs evaluation differentiation solves ex  act inference problem method ﬁrst given bn  structure encoded conjunctive normal form cnf  bayesian networks mlfs  processed boolean domain cnfs bayesian network bn directed acyclic graph each  factored according boolean algebra compilation pro bn node network variable domain discrete  cedure generates kind decision diagram representing set values each bn node conditional proba  compact arithmetic circuit ac symbolic parameters bility table cpt conditional probabilities    paper propose new method compiling bns value given values parent nodes par  factored mlfs based zerosuppressed binary deci ent bn nodes figure  shows small example bn  sion diagrams zbdds graphbased rep cpts  resentation ﬁrst used vlsi logic design applications multilinear function mlf consists types  method based similar mlf modeling symbolic variables indicator variable λx each value  xand  parameters darwiche’s approach parameter variable θxu each cpt parameter prbxu                                                    ijcai                                                                                                                                          ∧                                                                                        ⊕            prba       bcd      prbdbc                                                   θ           θ                                   dbc                                             ∨          θa          θ                                      dbc                             θ                            figure  shared multiple bdds       ab     prbba           dbc         θ         bcd  θd             ba                             θ         bcd  θd              assign corresponding parameter variable just            ba                             θ         bcd  θd              reduce cnf            ba                             θ         bcd  θd            •            ba                                      different parameter variables related bn                           bcd  θd              node coexist term mlf       ac         ca                                prb        bcd  θd              fore cpt contains number parameters         θ                                 ca          θ                                       dbc                 probability distinguish       ac  θ                  ca        bcd  θ                    assign parameter variable repre         θ                  dbc            ca          θ                    sent cpt parameters technique         θ               dbc            ca                                         times greatly reduces size cnf                                                          darwiche reported method succeeded compil          figure  example bayesian network        ing largescale benchmark networks “pathﬁnder”                                                        “diabetes” practical usage computational time  mlf contains term each instantiation bn space bn compilation method hot topic proba  variables term product indicators bilistic modeling inference practical problems  parameters consistent instantiation  example fig  mlf following forms      zerosuppressed bdds              λ  λ  λ  λ  θ  θ    θ    θ                ba ca dbc      paper present new method manipulating mlfs             λ  λ  λ  λ  θ  θ    θ    θ                using zerosuppressed binary decision diagrams zbdds                ba ca dbc      data structure             λ  λ  λ  λ  θ  θ    θ    θ                ba ca dbc             λ  λ  λ  λ  θ  θ    θ    θ                  zbdds combinatorial item sets                ba ca dbc                                                    reduced ordered binary decision diagram robdd                                                        compact graph representation boolean function             λ  λ  λ  λ  θ  θ    θ    θ                     ba ca dbc      derived reducing binary tree graph representing                                                        recursive shannon expansion robdds provide canon    generated mlf given bn prob ical forms boolean functions variable order  ability evidence calculated setting indicators ﬁxed following sections basically omit “ro”  contradict  indicators  bdds shown fig  set multiple bdds  calculate probability linear time size shared each ﬁxed variable  mlf obviously mlf exponential time space ordering way handle number boolean  complexity mlf factored arithmetic cir functions simultaneously monolithic memory space  cuit ac size exponential gen conventional bdd package supports set basic logic  erate compact ac given bn probability calcula operations xor given pair operand  tion greatly accelerated means compiling bns bdds operation algorithms based hash table  basedonmlfs                                          techniques computation time linear                                                        data size unless data overﬂows main memory using    compiling bns based cnfs                      interbdd operations generate bdds given  darwiche et al efﬁcient method gener boolean expressions logic circuits  ating compact acs processing exponential sized bdds originally developed handling boolean  mlf method ﬁrst given bn structure encoded function data used implicit rep  conjunctive normal form cnf processed resentation combinatorial item sets combinatorial item  boolean domain cnf factored based boolean al set consists elements each combination                                                        number items combinations chosen  gebra kind decision diagram obtained              sulting diagram special property called smooth deter items  variations combinatorial item sets  ministic decomposable negational normal form smooth example domain ﬁve items eex  dnnf directly converted ac prob amples combinatorial item sets  ability calculations                                         ab abc cde bd acde cd ∅    addition following techniques used vari “” denotes combination items ∅ means  able encoding                                        set combinatorial item sets basic data    • parameter deterministic θxu  structures various problems science                                                    ijcai                                                                                                                    table  primitive zbdd operations                                                         “∅”          returns set terminal node                                                         “”          returns   set     null                                                                      combination terminal node                                                               returns itemid root node                                                          factorv subset combinations including                                                                      item                                                         factorv gets − factorv deletes                                                                      each combination                                                         attachv attaches combinations    figure  boolean function combinatorial item set                                                         ∪        returns union                                                         ∩        returns intersection                                                         −        returns difference sets                                                         count     counts number combinations                                                          mlf representation using zbdds                                                        mlf polynomial formula indicator parameter                                                        variables regarded combinatorial item set                                                        each term simply combination variables example                                                        mlf node fig  written follows                                                              mlfbλa       λb θa θb  λa λb θa θb  figure  example                                                                                                                                            λ  λ  θ  θ     λ  λ  θ  θ      zbdd                 figure  zbdd reduction rule                  ba  ba      combinatorial item set mapped boolean rename parameter variables equal param  space input variables example fig  shows eters share variable                                abc   ∨ bc  truth table boolean function               mlfbλa       λb θaθb  λa λb θaθb                                        ab ac                                       represents combinatorial item set                        λ  λ  θ    θ      λ  λ  θ    θ       set input combinations           ing bdds corresponding boolean functions example zbdd mlfb shown fig   implicitly represent manipulate combinatorial item sets                                                      example paths root node    zerosuppressed bdd zbdd  variant bdds terminal node each corresponds term  efﬁcient manipulation combinatorial item sets exam mlf implicit representation mlf  ple zbdd shown fig  zbdds based time structure zbdd represents compact fac  following special reduction rules                    tored form mlf shown fig  each zbdd decision    • delete nodes edge directly points  node interpreted ac nodes simple      terminal node jump through edge’s desti mapping rule means compact ac quite easily      nation shown fig                        obtained generating zbdd mlf    • share equivalent nodes ordinary bdds    zbdd representation mlf important  zerosuppressed deletion rule asymmetric property basically equivalent smooth ddnnf  edges delete nodes edge points obtained darwiche’s cnfbased method inthefol  terminal node proved zbdds lowing sections show new method generating acs  canonical forms ordinary bdds ﬁxed vari cnfs using zbdd operations  able ordering summarize properties zbdds                                                          comparison aadds    • nodes irrelevant items chosen combina      tion automatically deleted zbdd reduction rule sanner mcallester presented afﬁne algebraic deci    • each path root node terminal node cor sion diagrams aadds variant decision di      responds each combination set agram computing bn probabilities aadd      number paths zbdd equals number factored form add contains indicator variables      combinations set                       splitting conditions results respective condi                                                        tional probabilities written leaves graph    •      similar zbdds generated zbdd somewhat similar approach gener      nodes effectively shared monolithic multi ate aadds result algebraic operations aadds      rooted graph memory requirement greatest difference method numerically      storing each zbdd separately                calculate probability values ﬂoatingpoint data    table  shows primitive operations zbdds mat using symbolic probability parameters  operations ∅  executed constant mlfs interesting open problem ef  time linear size graph ﬁcient handle probabilities symbolic numerical form  various processing sets combinations depend probability value instances  composing primitive operations              speciﬁc problem hand                                                    ijcai                                                                                                             figure  conventional bdd construction procedure          figure  example zbdd mlfb                                                                 figure  zbdd construction procedure bn                                                          mlfxi  denotes value mlf for node    figure  mapping zbdd node ac node   value xi mlfx mlfxi                                                          calculating expression using zbdd operations    zbddbased mlf calculation                         mindful differences conven                                                        tional arithmetic algebra combinatorial set algebra    zbdd construction procedure                      stead usual arithmetic sum use union oper  bdds originally developed vlsi logic circuit ations perform sum mlfs mlfs  design basic technique bdd construction contain term need  shown fig  make trivial bdds primary careful product operation product mlfs  inputs apply interbdd logic op produces possible combinations terms  erations according data ﬂow generate bdds spective mlfs term contain vari                                                                                       bdds shared monolithic multi able instead duplicate variables  rooted graph procedure called symbolic simulation                                                        simply appear result addition λxi λxj  logic circuit                                variables representing different values node vari    zbdd construction procedure mlf similar able coexist term mutually  symbolic simulation logic circuits differences exclusive     • bns assume binary values mlf uses  multivalued multiplication algorithm      multiple variables each node respective values    •                                                   multiplication algorithm key technique com      bn node logic gate dependence piling method conventional algorithm product      each node ancestors speciﬁed cpt  zbdds developed minato sketch  asshowninfigweﬁrstmakemlfaandthenwegen         algorithm shown fig  algorithm based  erate mlfbandmlfcusingmlfa finally gen    divideandconquer approach recursive calls  erate mlfdusingmlfbandmlfc      subgraphs obtained assigning   variable  struction procedure mlfs respective nodes com uses hashbased cache technique avoid duplicated  pactly represented shared zbdds               recursive calls computation cost linear    each bn node mlf calculated follow zbdd size  ing operations using mlfs parent nodes unfortunately conventional algorithm does                                                    sider multivalued variable encoding result zbdd         λ   ·           θ    ·             mlf       xi             xpu     mlf          contain redundant terms coexistence                                    ∈u                λ       λ                   u∈cptx                            xi  xj  redundant mlfs correct                                                    ijcai                                                              ·   procedure                                          calculate ac directly zbdd    ftop  gtopreturng ·                                                    ∅return∅                                  example compute prb   bn fig                                                   mlfs follows          return                                       λ   λ  θ     θ     λ  λ  θ     θ       ← cache“f · g”                              mlf             exists return                           mlfcλa   λc θaθc  λa λc θaθc      ← ftop   highest item                 ff ← factors                                                         mlfb  · mlfcλa  λb λc θaθbθc      gg ← factors                                         λ   λ  λ θ     θ    θ       ← ·  ∪ ·  ∪ ·                                                                attach                                              ×  ×          ∪f ·                                    finally obtain probability      cache“f · g” ←                                ×  ×       return                                           method each multiplication requires time                                                       linear zbdd size zbdd size need                                                        increase repeating multiplications inference      figure  conventional multiplication algorithm cause terms contradict evidence elim                                                        inated computation cost inference  proceduref ·                                      smaller cost compilation     ftop  gtop     ·              return                              interesting point mlf prbbc      ∅return∅                                                                                                                    does contain variables node ir        return                                    relevant joint probability words inference     ← cache“f · g”      exists return                            method provides dependency checking given query     ← ftop                                          strategy generate mlf                highest item                                                                    ff ← factors                       network performing product mlf      gg ← factors                       global mlf basically equivalent result dar     fz ←  gz ←                                 wiche’s compilation generating global mlf     whilefz conﬂict fz ← fz factorfz longer perform product mlfs     whilegz conﬂict gz ← gz factorgz mlf contains parameters bn nodes     ←  · ∪ · gz  ∪ fz · gattachv sum parameters irrelevant       ∪f ·                                      query having set local mlfs efﬁcient     cache“f · g” ←                                global set avoid unnecessary calculation     return                                                        parameters related query                                                          finally note method save result                                                        partial product mlfs shared zbdd environment        figure  improved multiplication algorithm                                                        recompute zbdds evidence                                                        set  expressions probability calculation redundant terms  increase computation time unnecessarily example  analyzed mlf construction bn bench  experimental results  mark set typical case zbdds evaluating method implemented bn com  each  decision nodes piler based zbdd package used  product · grows  nodes pentium pc  mhz  gb main memory  zbdd reduced  nodes elimi suse linux  gnu compiler plat  nating redundant terms address problem imple form manipulate  nodes zb  mented improved multiplication algorithm devoted dds  different variables applied  multivalued variable encoding figure  shows sketch method practically sized bn examples provided  new algorithm assume indicator vari httpwwwcshujiacillabscompbiorepository  ables bn node consecutive positions experimental results shown table  ta  zbdd variable ordering algorithm does pro ble ﬁrst columns show network speciﬁcations  duce additional redundant terms recursive proce bn number bn nodes indicator  dure calculate mlfs overhead variables parameter variables used mlf  multivalued encoding                             three columns present results compila                                                        tion method “zbddstotal” shows number decision    online inference based zbdds                  nodes multirooted shared zbdds representing set  compilation procedure each bn node mlfs “zbdda node” average size zbdd  zbdd mlf mlfx node contains each bn node notice total zbdd size usu  variables x’s ancestor nodes variable ally numerical product each zbdd size  relevant x’s value                                subgraphs shared each    online inference method based compilation evaluated performance  zbdds obtain joint probability evidence ewe line inference experiment randomly select                                                                                           ﬁrst compute product mlfxvforallxv ∈ pair bn nodes random values  gener  zbdd multiplication operation contradicting terms au ate zbdd product zbdds mlfxi ·  tomatically eliminated multiplication algorithm mlfyj counted number decision  result zbdd contains variables related joint nodes “zbddproduct” number mlf terms  probability computation set indicators  repeated process times show                                                    ijcai                                                    
