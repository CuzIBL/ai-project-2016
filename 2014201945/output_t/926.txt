pcdpop new partial centralization algorithm distributed optimization                 adrian petcu    boi faltings                      roger mailler          ecole polytechnique f´ed´erale lausanne           ai center sri international          email adrianpetcu boifaltingsepﬂch            email mailleraisricom                          abstract                          agents designated mediators centralize parts                                                        problem dynamic asynchronous mediation      fully decentralized algorithms distributed      constraint optimization require excessive   sessions message complexity signiﬁcantly smaller                                                        adopt’s possible mediators      amounts communication    applied                                                        solve overlapping problems needlessly duplicating      complex  problems   optapo   algorithm      mailler lesser  uses strategy  effort furthermore asynchronous dynamic nature                                                        mediation sessions make impossible predict      partial centralization mitigate problem                                                        centralized problem        introduce  pcdpop     new   partial      eventually centralized big computational burden      centralization technique based dpop       mediators carry suggested davin                                              algorithm petcu faltings  pc        modi  handful nodes centralize      dpop provides better control parts      problem carry computation      problem centralized allows      dpop  petcu faltings  complete algorithm      centralization optimal respect  based dynamic programming generates      chosen communication structure                   linear number messages dpop produce      unlike  optapo   pcdpop    allows         large messages require large amounts memory      priory exact predictions privacy loss     space exponential induced width problem      communication  memory    computational       dpop infeasible problems high      requirements nodes links network induced width      upper bounds communication memory            present pcdpop new  hybrid algorithm      requirements speciﬁed                     controlled parameter characterizes size       report strong efﬁciency gains       largest message available memory      optapo experiments three problem domains   algorithm proceeds normal dpop dense                                                        parts problem width greater    introduction                                       clustered centralized root cluster  constraint satisfaction optimization powerful solves centralized algorithm communication                                                        requirements link network limited  paradigms model large range tasks like scheduling expk  planning optimal process control traditionally  linear number messages preserved  problems gathered single place centralized rest paper structured follows section   algorithm applied order ﬁnd solution formally describes optimization problem introduces  problems naturally distributed distributed dpop optapo algorithms section  introduces  constraint satisfaction discsp formalized yokoo pcdpop hybrid algorithm evaluated empirically  et al yokoo et al  problem divided section  section  relates pcdpop existing work  set agents communicate section  brieﬂy discusses privacy section  concludes  solve address distributed optimization  complete algorithms like adopt optapo dpop     preliminaries  recently introduced                             deﬁnition  discrete distributed constraint optimization    adopt   modi et al  backtracking based problem dcop tuple     bound propagation mechanism  operates completely    •x     xn set variables  decentralized asynchronously downside •d     require large number small messages               set ﬁnite variable domains  producing important communication overheads            •r     rm set relations relation                                                                                         ···x       optapo  hybrid decentralized centralized function scope   ik                                                              ×   × →   methods operates cooperative mediation process         ik      denotes utility                                                    ijcai                                                         assigned each possible combination values  dpop dynamic programming optimization                                                      involved variables negative amounts mean costs  dpop distributed version bucket elimination    dcop each variable constraint owned scheme dechter  works dfs dpop  agent simplifying assumption yokoo et al   phases  each agent controls virtual agent each phase   dfs traversal graph using  variables xi owns simplify notation use distributed dfs algorithm like petcu et al  xi denote variable virtual agent outcome step nodes consistently label each    multiagent instance valued csp framework parentchild pseudoparentpseudochild edges  deﬁned schiex et al  goal ﬁnd identiﬁed treeback edges achieved                      ∗  complete instantiation variables xi maximizes graph linear number messages  sum utilities individual relations       phase   util propagation  bottomup process    assume unary binary relations starts leaves propagates upwards  dpop  pcdpop    easily extend nonbinary  through tree edges agents send util messages  constraints petcu et al                    parents subtree node xi inﬂuence                                                        rest problem through xi’s separator sepi    depthfirst search trees dfs                   message contains optimal utility obtained  pcdpop works dfs traversal problem graph subtree each instantiation sepi messages  deﬁnition  dfs tree dfs arrangement graph exponential separator size bounded induced  rooted tree nodes edges width  property adjacent nodes original graph fall phase   value propagation topdown initiated  branch tree figure  root phase  ﬁnished each node determines    figure  shows example dfs tree shall refer optimal value based messages phase   rest paper distinguish tree edges value message received parent  shown solid lines − edgesshown sends value children through value messages  dashed lines − −                                                           pcdpopk     partial centralization hybrid  deﬁnition  dfs concepts given node xi deﬁne    • parent pi   children ci obvious   overcome space problems dpop introduce                                                                            deﬁnitions   xx               control parameter bounds message dimensionality                                                        parameter chosen st available memory    • pseudoparents ppi   xi’s ancestors directly                                   pp            each node capacity link parent greater      connected through backedges            dk maximal domain size    • pseudochildren pci xi’s descendants directly   dpop pcdpop  phases   dfs      connected xi through backedges pc   construction phase util phase value phase    • sep                                      separator ancestors               util      directly connected xi descendants xi  pcdpop        phase      sep  xx sep  xx removing   algorithm different dpop      nodes sepi completely disconnects subtree propagation proceeds dpop possible reverts      rooted xi rest problem        partial centralization width exceeds                                                           util propagation starts bottomup exactly like    optimal asynchronous partial overlay                 dpop proceeds long dimensionality  optimal asynchronous partial overlay optapo mailler     outgoing util messages threshold  lesser  sound optimal algorithm                                                           soon node’s outgoing util  message  solving dcops uses dynamic partial centralization                                                             dimensions centralization begins  dpc conceptually dpc technique discovers                                                            section  node does compute util  difﬁcult portions shared problem through trial error                                                            message sends parent relation message  centralizes subproblems mediating agent                                                            contains set relations arity  order advantage fast centralized solver                                                            node used input computing  overall protocol exhibits early parallel hill                                                            util message annotates message id  climbing behavior progressively transitions  deliberate controlled search optimal solution  receiving relation message node tests  limit depending difﬁculty problem  separator smaller separator  tightness interdependences variables determined intersection nodes  agents end centralizing entire problem root path current node set nodes  order guarantee optimal solution encountered dimensions messages received                                                            children    hard constraints explicitly forbidenforce certain value  combinations simulated soft constraints assigning • case node cluster  −∞  disallowed tuples  allowed tuples maximizing root reconstructs subproblem   utility avoids assigning value combinations variables incoming relation messages solves                                                    ijcai                                                     figure  problem graph dfs tree lowwidth areas normal util propagation performed high                                                                                                          width areas shaded clusters bounded util propagation used messages size   clusters centralized solved cluster roots bold nodes xxx            section  continues util resulting set relations packaged relation          propagation dpop                       message annotated node’s id sent parent          later during value phase    section  happens follows          node receives value message parent  node xi receives utilrelation messages          retrieves solution local cache children          informs nodes cluster optimal values                                                                                        value messages                               forms  union   relations        • cluster root utilrelation messages relations          pass parent relevant relations parent pseudoparents          ones received children  xi matches pairs relations ui st joining          use compute util message  resulting relation dimensions          details section                      dimensionality resulting relation union                                                            dimensions inputs join successful  pcdpop  centralization                                                            remove inputs ui add result instead  process occurs highwidth areas problem try joins possible relations  shaded areas figure  initiated node                                                            ui process linear size ui  compute send util messages  exceed dimensionality limit imposed  resulting ui setissenttoxi’s parent relation  node produces union relations util message  messages received children relations process proceeds bottomup node xr  parentpseudoparents relations sent separator smaller reached xr declares  parent relation message annotated appending cluster root executes procedures section   node’s id path                                  result phase minimal difﬁcult high                                                    hand ensures dimensionality limit width areas problem identiﬁed distributed                                          observed relation arity larger produced fashion areas algorithm reverts partial  sent network hand allow centralization having nodes send parents high  cluster root reconstruct subproblem dimensional util messages lower arity inputs  centralized enable use structure sensitive used generate util messages  algorithms like dpop aobb    alternatively save bandwidth avoid overload cluster subproblem reconstruction  root nodes improve privacy node selectively let assume cluster root node xi received set    join subsets relationsutil messages st relations rci children each relation ri ∈ rci  dimensionality each resulting relations set variables involves scoperi path                                                    ijcai                                                     traveled through reached xi xi creates internal • cluster root sends util message parent  copy nodes scopes relations process continues just like normal dpop  received xi reconstructs subtree placing each                                                            multiple possibilities choosing  internal variable xk position follows                                                        optimization algorithm solving subproblems      • xk ancestor xi identiﬁed centralized version dpop petcu faltings       xi knows path root    aobb  marinescu dechter      • xk child xi identiﬁed                                                        algorithm  pcdpop  partial centralization dpop    • descendant xi case xi                                                          pcdpopx    rk each agent xi does      deduces place subtree analyzing backwards      path recorded relations involving xkfor util  propagation protocol                                                  example figure  receives rall  wait ut ilrelation messages children                                                                                           pi      annotated path − − −  sepi ≤ send outgoing utili       child easy  incoming util normal dpop node                                                                        pi       ’s child  ’s child       compute utili  dpop send pi      branch − − − reconstructed                                                            means xi root cluster    interesting note technique allows  reconstruct subproblem received relations  identifying different branches consider  solve subproblem each ∈sepi store                                                                                              pi  receives     annotated path utility utili solution local cache  − − − following reasoning                pi                                                            send utili   pi  infer child like                                                                         lie different branches       means cluster    makes possible cluster node reconstruct  join subsets incoming utilrelation relations  subproblem preserving structural informationthis pparent dimension st each join                                                          dimjoin ≤  important enables use highperformance                                                                      optimization algorithms advantage problem  send joins                                                                                              ∗  structure examples include aobb marinescu dechter value propagationxi gets sepi ← sepi pi   centralized dpop petcu faltings  xi cluster root                                                                            ∗                    ∗                                                           ﬁnd cache sol corresponds sepi  solving centralized subproblems                                                    ∗                                                           assign self according sol                                                                     ∗  centralized solving occurs roots clusters  send sol nodes cluster value msgs  determined highwidth areas example                                                         continue value phase dpop  figure  cluster shaded area containing  xxxxx    root cluster maintains cache table  locations possible assignments  pcdpop  value phase                             dk     separator case      locations   labeling phase determined areas bounded  normal node dpop root creates table inference applied excessive width  outgoing util message dimensions following processing  size separator each location cache table areas outside original value propagation  directly corresponds location util message dpop applies  associated certain instantiation separator                                                          value message root xi cluster receives  cache table stores best assignments variables                                                        parent contains optimal assignment  centralized subproblem correspond each instantiation                                                        variables separator sepi xi cluster  separator                                                        xi  simply retrieve cache table optimal    process proceeds follows               assignment corresponding particular instantiation    • each instantiation sepi cluster root solves separator assignment contains value      corresponding centralized subproblem resulting values nodes cluster xi inform      utility optimal solution stored location nodes cluster optimal values      util message cache table location respectively value messages subsequently value propagation      correspond instantiation            proceeds dpop    •         sep        instantiations tried util  pcdpop  complexity      message parent contains optimal utilities      each instantiation separator exactly dpop lowwidth areas problem pcdpop behaves exactly      cache table contains corresponding solutions dpop generates linear number messages      centralized subproblem yield optimal dk size areas width exceeds kthe      utilities                                        clusters formed                                                    ijcai                                                               pc   −  dpopk  theorem                     requires communication              maximal size centralized problem vs total problem size  oexpk                               oexpk                       memory requirements vary                       pcdpop                                                                   pcdpop  oexpw depending algorithm chosen solving        pcdpop                                                               pcdpopdpop                                                                    optapo  centralized subproblems  width graph           proof section  shows separator                     node larger  node included cluster    shows cluster util messages                                                                dimensions computed stored input  components sent instead shown recursively    components dimensions                                                             centralization  max subproblem size vars  proves ﬁrst claim                                                                                                                     assuming wk memory requirements                     number variables agents  oexpk  easily seen roots         agents centralize subproblems vs total problem size                                                                clusters store util messages cache     pcdpop                                                                 pcdpop                       oexpsep                              pcdpop  tables                                   pcdpopdpop    cluster root memory expensive               optapo  algorithm search algorithm aobb                                                                   uses linear memory exponential size cache table                                                                util message dominates memory overall  oexpk                                                                                                                      memory intensive option use              centralized version dpop proved exponential   agents centralize subproblems      induced width subtree induced cluster                                                                                           overall means memory exponential maximal                  number variables agents  width cluster overall induced width                                                       figure  graph coloring centralization optapo                                                        agent centralizes problem                                                        optapo agents centralize subproblem    experimental evaluation                                                                     agents centralize subproblems vs total problem size  performed experiments  different problem domains                                                                        pcdpop  distributed sensor networks dsn graph coloring gc            pcdpop                                                                     pcdpop  meeting scheduling ms versions optapo         pcdpopdpop                                                                        optapo  pcdpop used different centralized solvers  fairness did compare runtimes instead    compared effectiveness centralization protocols  using  metrics communication required  figure  centralization figure         figures   present results gc problems    messages log scale    bound large maximal  arity constraints problem problems                                                                                           contain binary constraints ran pcdpopk                  number variables agents   width problem expected         agents centralize subproblems vs total problem size                                                                larger bound centralization occurs        pcdpop                                                                      pcdpop                                                                      pcdpop  message size memory requirements increase                  pcdpopdpop                                                                        optapo    dsn  dsn instances sparse induced     width  pc − dpopk ≥  runs dpop  centralization message size  contrast                                                                 optapo agents centralize  problem additionally larger instances agents  centralize half problem                                 meeting scheduling generated set relatively large total  message size bytes log scale    distributed meeting scheduling problems model                                                                                               maheswaran et al  brieﬂy optimal schedule                  number variables agents  set meetings set agents  problems large   agents   figure  graph coloring message exchange pc  meetings yielding large problems   variables dpop variants use linear  messages  total                                                        information exchange bytes lower pcdpops    dsn gc instances taken maheswaran et al                                                     ijcai                                                     
