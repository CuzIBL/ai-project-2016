                   reversing actions algorithms complexity∗               thomas eiter                       esra erdem                     wolfgang faber    vienna university technology          sabancı university              university calabria          eiterkrtuwienacat         esraerdemsabanciunivedu             fabermatunicalit                          abstract                          action sequence executing actions exam                                                        ple doing action gohome oﬃce action      reversing actions following problem                                                        gooﬃce home reverse effects bring agent      executing sequence actions sequence                                                        previous state holds regardless state      actions brings agent state just                                                        agent doing gohome oﬃce      execution action reversal notably                                                        gooﬃce home called reverse action      problem different vanilla planning prob                                                        gohome oﬃce generally sequence ac      lem state gen                                                        tions  bbm guaranteed bring agent      eral unknown emerges example agent                                                        state executing sequence  abn      needs ﬁnd action sequences                                                        called reverse plan example       doable ones committed choices                                                        gooﬃce pub gopub home reverse plan      applications related plan execution mon                                                          gohome bus stop gobus stop oﬃce      itoring nondeterministic domains recov                                                          undo actions wellstudied area databases      ering failed execution partially undoing                                                        standard method error recovery      plan dynamically switching executed                                                        general context plan execution recovery      plan restarting plans formal                                                        hayashi et al   use undo actions execution      ize action reversal logicbased action frame                                                        plans mobile agents dynamic environment      work characterize computational complex                                                        undo actions each action need speciﬁed      ity unsurprisingly problem intractable                                                        manually user desirable tools      general present knowledge compilation                                                        automatically generate undo actions gener      approach constructs ofﬂine reverse plan li                                                        ally reverse plans raises following questions given      brary efﬁcient cases linear time                                                        action domain action does exist reverse      line computation action reversals results                                                        action generally given sequence actions      generic framework easily applied                                                        does exist reverse plan      expressive action languages                                                        reverse action plan efﬁciently computed com                                                        putational point view reverse actions plans fruit    introduction                                       fully exploited efﬁcient backtracking action execution  reasoning actions important area knowl backtracking considered various reasons like  edge representation reasoning logicbased lan restart plan execution plan fails  guages representing actions proposed undesired effects action nondeterministic  gelfond lifschitz  giunchiglia et al  environment switch current plan  son baral  eiter et al  various rea better safer light new information  soning problems actions considered current state state want backtrack  prominent temporal projection infer known problem amounts vanilla planning prob  ence state sequence actions occurred lem intractable general problem  reasoning initial state sequence actions different backtrack state unknown  occurred plan generation generate sequence actions motivated questions study computational  takes agent initial state goal state pects action reversals main contributions paper    study reasoning problem actions follows  problem undoing effects execution • formally deﬁne notions reverse action    ∗this work supported fwf austrian science fund reverse plan actions commit  der project pn work second author carried particular action language capable modelling nondeter  visited tu wien author funded ministic effects giunchiglia et al   apart grant austrian academy sciences      eiter et al  use generic transitionbased                                                    ijcai                                                                                                                                     framework representing actions rintanen  ¬putintowater ¬inwater  ¬wet  satisﬁes trf   turner  using propositional logic speciﬁcation lan describes transition state   guage nondeterminism accommodates wet state s   executing action   current actions dynamic worlds extend deﬁni drywithtowel   tions conditional reversals considering partial knowl meaning domain description represented  edge current state state execution transition diagram directed labelled graph  • thoroughly analyze complexity action reversals nodes states edges correspond  characterize complexity recognizing deciding action occurrences trajectory length alter  existence reverse actions plans plain nating sequence sassn−an−snof states si  conditional reversals                                                                                                                         action occurrences ai → →  • unsurprisingly action reversal intractable general an−                                                        sn−  →   sn labelled path graph trajectory  monitoring applications present knowl                                                        obtained corresponding model formula  edge compilation method constructs ofﬂine reverse plan      n−                                                        trnf    trft ft each fi resp  library reversals online computed poly                              ∈f  nomial linear time important classes instances each results adding time stamp each resp                                                        each ∈a    results shed light complexity action rever action sequence length sequence    sals easily customized particular action lan  an−  each ai  ≤ concurrent               guages like    algorithms reverse plan assem action occurrence use denote length  bly suggest action reversal complementary method note general different total number  efﬁcient backtracking reverse plan exists choose single action occurrences   method indepth material proofs                                                                                             follows f≡f denotes  f∈f ≡   results paper refer eiter et al                                                            execution reversals    action representation framework                                                        agent executes sequence  aai itmaybe  following turner leta set action symbols                                                      desirable effects  let  disjoint set ﬂuent symbols viewed action sequence undone agent  propositional atoms set states action domain state sj ji reached executing                                                   encoded models propositional formula state  actions aaj−  fletactf  formula f∪a∪f           ∈f                                 action undone executing “reverse                                            actions” executing “reverse plan” deﬁne   trf statef ∧ actf  ∧ statef   verse action relative given action description                                                                                encodes set transitions corresponds models deﬁnition  action reverse action                                                                                            transition start state corresponds  formula revactf   deﬁned  signment concurrent action execution oc faf  ⊃                                                      tr  currence assignment  end state     trf a ∧∀f trf a  ⊃f≡f  assignment s                                                                         ∀f∀f        a  example  giunchiglia et  al     putting    tautology revact             holds  puppy water makes puppy   wet  drying     formula expresses following condition  puppy towel makes dry    ﬂu    actions a states s described  ents      inwater wet action symbols   assignments ﬂuents  respectively   putintowater drywithtowel  states  executing leads s executing a state s  described formula statefinwater   ⊃  wet   leads  three assignments satisfying statef benchmarks used planning  inwater wet ¬inwater wet ¬inwater ¬wet   transportation domain logistics blocks world grid  three states inwater wet wet  moving reverse action moving  action occurrences deﬁned through              putting object reverse picking    actf                                      deﬁnition  reverse plan action sequence                                                                      inwater  ≡ inwater ∨ putintowater ∧              aam−  ≥  actions                                                                wet  ≡ wet ∧¬drywithtowel  ∨ putintow ater ∧  following formula true      drywithtowel ⊃ ¬inwater  ∧¬putintowater                                                                                      revplanf  aam−                                                                      line drywithtowel executable inwater trfaf   ⊃   false concurrently putintowaterforex                                                                           ∀   fi ∃    ≡f    ⊃  ample assignment ¬inwater wet drywithtowel                                                                                     m−                                                                                                     trtfa ⊃  trfta    ∧                                                                                               “assignment ” means assignment truth values                    symbols                                                          trmfa  ⊃fm   ≡f                                                        ijcai                                                       formula expresses following condition question comes naturally possi                                           action action sequence  aam− ble formulate conditions necessary sufﬁcient  states s described assignments ﬂu existence reverse action given action  ents resp  executing leads s following brieﬂy discuss conditions                                   action sequence  aam−  executable necessary sufﬁcient  state s leads executability condi let ﬁrst focus necessary condition imagine                  tion  aam−  described formula following situation action reversed                                           second line note revplanf  equiva results state executed different                                                                                       lent revactf  instance reverse plan states  trs trs hold                                                                                                       booking online room ﬁrst calling hotel impossible ﬁnd reverse plan  aam−   room reserved cancelling reservation ssm existed                                                                                                      generalize notion reversing trms  sm  sm   sidering action sequences actions reversed hold impossible assumed s  sthis  motivations generalization necessary condition stated generally follows  possible ﬁnd reverse plans single actions                                                        proposition  φ ψreverse plan     sequences actions reverse plan                                                        an−  exists sequences  ssn  action sequence shorter reverse plan obtained                                                                                        ssn states  strns  concatenating reverse plans subsequences                                                                                                 trns φsn φsn ψs ψs hold holds                                                                  deﬁnition  sequence  aam−  ≥  ofac    sn  sn  tions reverse plan action sequence  aak−                                                          sufﬁcient condition motivated   following formula true                                                        following property functions function involutory iff                                        multirevf aak− aam−         ffx  each domain say                                                                          ψ    ∃k   f≡f    ∧    fa ∧f  ≡f     ⊃              action sequence      m−  involutory            trk                                             ψ                                               state satisfying  following hold    ∀jfj ∃hfh   ≡f   ⊃                                                       • sequence   ssm  states                     m−                                          trtf ⊃ trfta ft     trms holds exist sequence sm                                                                                                                                                                          ms                    ∧trmf  ⊃fm   ≡f                              states tr   holds                                                          •                                                                                           sequences                                                                                                    formula similar revplan              ssm  states trms ∧ trms  am−                                                                               difference premise holds holds sm   formula trajectory considered instead single tran                                                     action involutory executing action  sition note multirevf                                                     twice state action executable  equivalent revplanf  aam    far reverse plan deﬁned action se sults starting state example involutory action  quence state reachable sequence toggle action simple light switch toggled twice  states action sequence admit state sufﬁcient  reverse plan action sequence condition stated follows  verse plan conditions necessarily hold proposition  ψinvolutory action sequence  reachable state furthermore information  ψreversible  ψreverse plan  state want reach reversing actions  available values ﬂuents obtained sens  complexity results  ing reverse plan possible depending  information make execution reversals applicable study complexity following problems related  situations generalize reverse plans “conditional reverse computation execution reversals respect given  plans” follows                                    action domain description                                                                                                                      a a      ≥            given action sequences  given  deﬁnition  sequence         m−              formulas φ ψ ﬂuent symbols recognizing  actions φ ψreverse plan action sequence     φ ψ                                                      reverse plan           k−        formula      given action sequence deciding   ψf  ∧ φf  ⊃                                     exist action sequence polynomially bounded                                                    multirevf aak− aam−    length formulas φ ψ ﬂuent symbols                                                            φ ψ                      φs              φf             ψf                 reverse plan andthat     holds  true                  state s reached state ψs    case ψf ≡ simply write φreverse holds  plan φ ψreverse plan instance conditional reverse given action sequence formulas φ ψ  plan booking room ﬁrst calling hotel ﬂuent symbols deciding exists action  room reserved cancelling reservation sequence polynomially bounded length  condition room available hotel φ ψreverse plan                                                    ijcai                                                             problem                     respectively s reached execution                                                                    conp       Π       Π                 states exist problem trivially solved                                                  checking condition changes complexity                 Σ        Σ        Σ                                                                                        conp  “conjunction” np                      Σp       Σp       Σp                                                conp does change complexity  table  complexities p–p terms completeness complexity problems lower                                                        ditions example reverse plan short                                                        length bounded constant contains parallel ac    discussion computational complexities tions φ ψ formulas polynomial size set  problems recall following sequence classes mulas polynomial number candidates φ ψ                             Σp  Πp   polynomial hierarchy      andforall    reverse plans need checked executability              Σp               Σp  ≥  Σ  np   k−    Π  conp    k−                 actions determined polynomial time                               each complex                                         ity class each level ≥  hierarchy includes gets conpcomplete Σcomplete  complexity classes lower levels background tractable cases tractability gained certain                                                 complexity refer reader papadimitriou   cases example φ ψ conjunctions literals    complexity results problems p–p summa single model description transitions  rized table  according results checking                           s                      φ ψ                              tr         given ﬂuent values resp   action sequence reverse plan action action occurrences ﬂuent values s resp ssuch  sequence easier ﬁnding φ ψreverse plan s                                                φ ψ    tr       holds determined polynomial time  action sequence finding  ﬁnding short φ ψreverse plan parallel actions  reverse plan φ ψ given harder ﬁnding  φ ψ                     φ     ψ                short action sequence feasible polynomial time     reverse plan arbitrary     particular reversal current state exe  complexity cases problems                                                      cution action sequence possible polynomial time  difﬁcult length increases problems conditions  difﬁcult r≥ problem  gets difﬁcult                                                           computation reverse plans    intuitively Σcompleteness  following intermingled sources complexity     compute reverse plans spirit knowledge com    exponentially action sequences polyno pilation cadoli donini  ﬁrst compute ofﬂine  miallybounded length case exponentially reverse plans action sequences use  formulas φ ψ need considered    information online construct concrete reverse plan    ii test states s φs given action sequence ofﬂine phase computed  ψs hold s reached execution reverse plans action sequences collected library  execution starts s ends iii library contain possible reverse plans  test each partial execution starting state action sequences exponentially exist  s ii continued action polynomial number reverse plans short action se  execution “stuck”                             quences typically steps reverse plans                                   membership problem Π straightforward short short reverse plans  deﬁnitions   φψreverse plan property easily efﬁciently compose online reverse plans longer action se  rewritten preﬁx quantiﬁed boolean formula qbf quences example reverse plan  bb  action  ∀∃ pattern evaluating formula wellknown sequence  aa  composed reverse ac                                                                                              Π problem Σsinceaφψreverse plan tions   undo effects actions                                                        ﬁrst guessed checked Π oracle  respectively show later construction  problem φ ψ wlog conjunctions literals reverse plan action sequence reverse plan  guessed plan extra condition library efﬁciently  checkable np oracle hardness shown suitable deﬁne reverse plan items libraries follows  reductions evaluating qbfs                        deﬁnition  reverse plan item rpi tuple form    limiting length reverse plan quan asrφψ φ ψreverse plan  tiﬁers vanish informally  source iii disap nonempty action sequence aswhereφ  φf ψ   pears similarly reason ψf                                                                                      rpi singlestepif    consists     current state state single action unconditionalifφ  ψ  true  want known light ii                                                       deﬁnition  reverse plan library ﬁnite set rpis  just need check   valid transition                                                        called singlestep resp unconditional each rpi  polynomial case   aa   similarly just need check reaching s s singlestep resp unconditional                         executing   valid transition com various ways compute rpis ﬁll reverse                                        bined properties yields Σ upper bound plan library thanks logical framework deﬁnitions    problems check reverse actions plans fairly straightforward en  mulas φ ψ actually satisﬁed states s code problem actually ﬁnding rpi asrφψ                                                    ijcai                                                     algorithm reverseas Πl                            algorithm reversej    input action sequence   aai−  ≥      inputintegerj  ≤ ≤         sequence formulas percepts Ππf   output reverse plan rp  aaj−          πif reverse plan library                         ππj or“no” exists                     rp         Π         output reverse plan        “ ”          return    plan     each   i− sj⊥               each asrφψ  ∈ st sufﬁx    si    trivially si reversible           aaj−  sj−as⊥    rp   reversei                                 πj ⊃ φ πj−as ⊃ ψ    rp “no”  return “no”                       begin    return rps                                 sj−as  reversingtosj possible                                                               rp   reversej−as                                                                    rp                 rp  figure  algorithm reverse compute execution rever          “  ” return    sals using multistep plan library                     end                                                          return “no”    solving qbfs proposed problem solving figure  algorithm reverse scope reverse  method planning domain earlier rintanen   possibility reduce problem solving  formant planning problems deﬁned relative modiﬁcation information states sj reversal established  space reasons details main algorithm reverse initializes sj jiofs  instead focus interesting problem online ⊥ false initially recursive algorithm  verse plan computation                               verse updates new knowledge gained    runtime try assemble reverse plan instance action ai− reversed state sithen  think three increasingly expressive scenarios know reversal si− exists modify si− ac  pending available state information form percepts πj cordingly having information available helps  states sj  execution ﬁnd reverse plan action sequence lalso     information current state siand prevents explore search space  past states  si− situation uncon algorithm reverse starts constructing reverse plan  ditional reversal plans assembled unconditional rpis action sequence  aaj−  considering suf  used                                        ﬁxes efﬁciently determining em     partial information current state si avail ploy search structures trie indexed trie repre                                                             able expressed formula πif si sent  consider each node trie labelled action  models information past states case path root node ac  make use conditional rpis             tion sequence reverse order node describes action     partial information execution history sequence asrφψ node                                                                                     rφψ  available formalized terms sequence Ππ  linked list rpis form    πi formulas ﬂuent symbols state sj theorem bounds running time algorithm  model πjf each  reverse states correctness  exploit larger set rpis                   theorem   reverseas Πl    running time    clearly scenario  generalizes ones space oasl·eval maxaminasmaxl  limitations focus general scenario eval maxΠl bounds time evaluate πj ⊃    consider multistep plan library   φ πj ⊃ ψ πj Π formulas φ ψ  necessarily singlestep plan library ﬁnding reverse plan asmaxlmaxasasrφψ  ∈  rp  trickier rp assembled                                                                    Πl                           different ways state conditions exclude ii reverse        correctly outputs relative                                                                        rp          Π  instance   andl          reverse plan         determines     φ     φ      φ  reverse plan does exist   bc   φ                      assemble action sequence corollary  reverseas Πl polynomial           bc         Π                                                                                    cepts dnfs formulas term dnfs  case φ false state                                                        tij bounded constant cnfs  resulting reversing case φ  true state resulting reversing action remark application setting  sequence  bc  action need consider reverse plan expected small bounded  choices constraints building reverse plan stant percepts πi formulas φ ψ consist    fortunately source intractability literals case running time ol linear  verse plan polynomial time size reverse plan library  exists algorithm reverse figure          entries reverse plan library match    auxiliary array algorithms used keeping running time drastically shorter                                                    ijcai                                                     
