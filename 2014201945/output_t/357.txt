                               nogood recording restarts            christophe lecoutre      lakhdar sais    sebastien´ tabary   vincent vidal                                          cril−cnrs fre                                              universit´e d’artois                                                lens france                             lecoutresaistabaryvidalcrilunivartoisfr                        abstract                          chus   csp standard nogoods corre                                                        spond variable assignments generalized nogoods      paper nogood recording investigated   volve value refutations generalized nogoods beneﬁt      randomization restart framework   nice features example compactly cap      goal avoid situations occur ture large sets standard nogoods proved      run precisely powerful standard ones prune search space      goods recorded current cutoff value    set nogoods recorded ex      reached restarting search algo ponential size needs achieve restrictions ex      rithm set nogoods extracted ample sat learned nogoods minimal lim      branch current search tree interestingly ited number using unique implication point      number nogoods recorded each new    uip concept different variants proposed rel      run bounded length branch evance bounded learning bayardo shrag       search tree consequence total number attempt ﬁnd best tradeoff overhead      recorded nogoods polynomial number   learning performance improvements consequently      restarts experiments wide range csp recorded nogoods lead complete elimination      instances demonstrate effectiveness ap redundancy search trees      proach                                             paper nogood recording investigated                                                        randomization restart framework principle    introduction                                       approach learn nogoods branch  nogood recording learning suggested search tree restart discarding explored parts  technique enhance csp constraint satisfaction problem search tree subsequent runs roughly speaking  solving dechter  principle record manage nogoods introducing global constraint  nogood conﬂict occurs during backtracking dedicated ﬁltering algorithm exploits watched literals                                                                             search nogoods exploited later pre moskewicz et al   worstcase time complexity                                                                                   nγ        vent exploration useless parts search tree propagation algorithm number                                                                      γ  ﬁrst experimental results obtained learning given variables number recorded nogoods                                                                    γ           ndρ        early ’s dechter  frost dechter  know greatest                                                                    ρ  schiex verfaillie                          main size number restarts performed                                                                                                          contrary csp recent impressive progress sat remark related approach proposed bap                                                                       boolean satisﬁability problem achieved using tista et al  sat order obtain complete restart  nogood recording clause learning randomization strategy reducing number recorded nogoods  restart policy enhanced efﬁcient lazy data  structure moskewicz et al   technical background  clause learning arisen availability large constraint network cn pair    stances encoding practical applications contain asetofn variables asetofe constraints each variable  structure exhibit heavytailed phenomenon learning ∈ associated domain denoted domxwhich  sat typical successful technique obtained contains set values allowed each constraint ∈  cross fertilization csp sat nogood recording involves subset variables  denoted varscand  dechter  conﬂict directed backjumping prosser associated relation denoted relc contains   introduced csp later imported set tuples allowed varsc  sat solvers bayardo shrag  marquessilva solution cn assignment values vari  sakallah                                       ables constraints satisﬁed cn said    recently generalization nogoods elegant satisﬁable iff admits solution  learning method proposed katsirelos bac straint satisfaction problem csp npcomplete task                                                    ijcai                                                     determining given cn satisﬁable csp deﬁnition  let cn Δ set decisions Δ  stance deﬁned cn solving involves nogood iff Δ unsatisﬁable  ﬁnding solution determining unsatisﬁa branch search tree nogood ex  bility solve csp instance modify cn tracted each negative decision stated fol                                            using inference search methods dechter       lowing proposition    backtracking algorithm bt central algorithm  solving csp instances performs depthﬁrst search proposition  let cn Σ sequence  der instantiate variables backtrack mechanism cisions taken branch search tree nld  deadends occur works devoted improve subsequence δδi ΣthesetΔδ¬δi  forward backward phases introducing lookahead nogood called nldnogood  lookback schemes dechter  today mac sabin proof positive decisions taken ﬁrst negative  freuder  lookahead algorithm considered                                                        decision δi encountered subtree corresponding  efﬁcient generic approach solve csp instances                                                        opposite decision ¬δi refuted   maintains property called arc consistency ac during  search mentioning mac important indicate nogoods contain positive negative deci  branching scheme employed possible sions correspond deﬁnition generalized                                                                consider binary way branching non binary dway goods focacci milano  katsirelos bacchus                                                              branching schemes equivalent   following show nldnogoods  shown binary branching powerful refute duced size considering positive decisions  unsatisﬁable instances nonbinary branching hwang beneﬁt improvement space complexity  mitchell  binary branching each step powerful pruning capability  search pair xv selected unassigned construction csp nogoods contain opposite                                                                              variable value domx cases consid decisions  propositional resolution                                                                               α∨β                x∨α  ered assignment  refutation  vthe allows deduce clause   clauses                                                            ¬x ∨ β  mac algorithm using binary branching seen      nogoods represented propositional  building binary tree classically mac starts clauses disjunction literals literals correspond  assigning variables refuting values generalized arc positive negative decisions consequently extend                                                                                                    consistency gac bessiere et al  extends ac resolution deal directly csp nogoods mitchell                                                              non binary constraints mgac search algorithm   called constraint resolution cres short  maintains gac                                   deﬁned follows    sophisticated lookback algorithms cbj deﬁnition  let cn Δ Γ∪xi  vi  conﬂict directed backjumping prosser  dbt Δ Λ∪xi    vi nogoods  deﬁne  dynamic backtracking ginsberg  exist straint resolution cresΔ ΔΓ∪ Λ  shown bessiere r´egin  boussemart et al                                                           immediate cresΔ Δ nogood   lecoutre et al  mac combined good vari  able ordering heuristic outperforms techniques proposition  let cn Σ sequence                                                        cisions taken branch search tree nld                                                                   Σ             Σ       Δ      Σ ∪    reduced nldnogoods                                subsequence      δδi theset     pos                                                        ¬δi nogood called reduced nldnogood   consider search tree built                                                                               Σ           ≥    backtracking search algorithm based way branching proof suppose contains  negative  scheme mac positive decisions performed ﬁrst cisions denoted δg δgk  order                                                                 Σ                         Σ  each branch search tree seen sequence appear  nldsubsequence negative                                                                    Σ                        positive negative decisions deﬁned follows decisions       δδg δgk  corre                                                        sponding nldnogood Δ    δδ  δ                                                                                                gk−  deﬁnition  let        cn xv pair  ¬δ   δ     negative decision            ∈        ∈                                    gk   gk−       dom   assignment    nldsubsequence Σ −  negative decisions  called positive decision refutation  Σ                                                                        δδg δgk−  corresponding nldnogood  called negative decision ¬x  denotes  Δ                  ¬                                                                   δδg  δgk−  apply cres  ¬x                                                                                    denotes                                     Δ Δ obtain Δ  cresΔ Δ                                                                                                    ¬     deﬁnition  let Σδδiδm  sequence    δδg δgk− δgk−−δgk−  δgk   decisions δ negative decision sequence negative decision δgk−                                                                                               −   δδi called nldsubsequence negative deci eliminated nldnogood containing negative  sion subsequence Σ set positive negative decisions remaining negative decisions  cisions Σ denoted posΣ negΣ respectively eliminated applying process   deﬁnition  let cn Δ set decisions  interesting aspect space required store                                                        nogoods corresponding branch search tree  Δ cn obtained st positive decision    ∈ Δ domx restricted            δ ¬δ            δ  ∈ Σ                        ∈ Δ                               notation       corresponds  negative decision     removed domx i∪¬δi reduced ¬δ                                                     ijcai                                                                                                           ﬁrst δi resp ¬δi corresponds positive resp neg                                  δ                    ative decision search stopped refuting δ                                                        taking decision ¬δ nldnogoods                                ¬                        δ        δ                    following Δ   δ ¬δ ¬δδ ¬δδ Δ                                                         δ ¬δ ¬δδδ Δ  δ ¬δδ Δ  δδ               δ     ¬δ         δ      ¬δ                                                        ﬁrst reduced nldnogood obtained follows                                                                                                                      Δ   crescrescresΔ Δ Δ Δ         δ    ¬δ          δ   ¬δ      δ                                                               crescresδ ¬δ ¬δδδ Δ Δ                                                               cresδ ¬δδδ Δ                                          ¬    δ   ¬δ                        δ     δ                  δδδ                                                          applying process nldnogoods                              δ ¬δ     δ  ¬δ    obtain                                                                                                                      Δ   crescresΔ Δ Δδδδ                                                                                                                      Δ   cresΔ Δδδ                                                          Δ Δ               figure  area nldnogoods partial search tree         δδ                                                           order avoid exploring parts search                                                        space during subsequent runs recorded nogoods ex  polynomial respect number variables ploited sufﬁces control decisions  greatest domain size                                 current branch contain decisions nogood                               Σ                        negation unperformed decision  proposition  let cn sequence nogood inferred described section  cisions taken branch search tree space                                                      example decision δ taken infer  complexity record nldnogoods Σ  ¬         Δ     ¬              Δ                                                   Σ     δ nogood   δ nogood    space complexity record reduced nldnogoods finally want emphasize reduced nldnogoods      nd                                                extracted branch subsume reduced nld  proof number negative decisions branch nogoods extracted branch previously  ond each negative decision extract explored  duced nldnogood size resp reduced nld  nogood ond resp contains positive  managing nogoods  decisions obtain overall space complexity ond  resp ond                                      section show efﬁciently exploit                                                        duced nldnogoods combining watched literals prop                                                        agation obtain efﬁcient propagation algorithm    nogood recording restarts                     enforcing gac learned nogoods collec  gomes et al  shown runtime tively considered global constraint  distribution produced randomized search algorithm  characterized extremely long tail  recording nogoods  inﬁnite moment instances heavytailed phe nogoods derived current branch search tree  nomenon avoided using random restarts reduced nldnogoods current run stopped  restarting search times randomizing em recorded calling storenogoods function  ployed search heuristic constraint satisfaction restarts algorithm  parameter function sequence  shown productive learning literals labelling current branch observed sec  exploited currently case aca tion  reduced nldnogood recorded each neg  demic commercial solvers average performance ative decision occurring sequence root  solver damaged cf section                 leaf current branch positive decision en    nogood recording shown quite countered recorded set Δ line andwhena  vincing csp noticeable exception katsirelos negative decision encountered record nogood  bacchus  technique leads negation decision recorded positive ones  uncontrolled exponential space complexity line  nogood size  Δ∅ di  propose address issue combining nogood recording rectly exploited reducing domain involved vari  restarts following way reduced nldnogoods able line  recorded calling  recorded current branch search tree addnogood function described structure ex  each run aim beneﬁt restarts ploiting watched literals moskewicz et al   learning capabilities sacriﬁcing solver performance show worstcase time complexity  space complexity                                 storenogoods  oλpλnwhereλp  λn num    figure  depicts partial search tree explored ber positive negative decisions current branch  solver restart positive decisions taken respectively                                                    ijcai                                                     algorithm  storenogoodsΣδδm               algorithm  propagates  set variables  boolean    Δ ←∅                                                ←    ∈                                     ∅                                                                                  δi positive decision                    pick delete                                                                domx        Δ ←  Δ ∪δi                                                                                                    let unique value domx       Δ∅                                         checkwatchesx  vfalse return false         δi remove domx            end                                                     each  ∈ varsc                                                                      ∈ varsc           addnogoodΔ ∪¬δi                               each                       end                                               revisecy     end                                                   domy ∅ return false                                                                       ← ∪y    end                                                                                                           end                                                         return true    exploiting nogoods  inferences performed using nogoods establish exploiting nogoods enforce gac onγ  ing maintaining generalized arc consistency show checkw atches onγ called  coarsegrained gac algorithm based variable variable  oriented propagation scheme mcgregor  algo space complexity structures introduced man  rithm  applied cn involving constraints age reduced nldnogoods backtracking search algorithm  arity order establish gac preprocessing propagate ond  γ need store γ nogoods size  called set variables network need store watched literals ond  during search contains variable involved  positive negative decision time prin  experiments  cipleistohaveinq  variables domains  reduced propagation                               order show practical approach    initially contains variables given set line scribed paper conducted extensive experi   iteratively each variable selected line mentation pc pentium iv ghz mo linux   domx corresponds singleton lines  used abscon solver run mgac   exploit recorded nogoods checking consis noted mac studied impact exploiting restarts  tency nogood base performed function denoted macrst nogood recording restarts  checkw atches described iterating nogoods denoted macrstng concerning restart policy  involving  watched literal each nogood initial number allowed backtracks ﬁrst run                                                                                              literal watched set increasing factor  each                                                                                                           ference performed set updated      new run number allowed backtracks increases     rest algorithm lines   corresponds factor used three different variable ordering heuristics  body classical generic coarsegrained gac algorithm classical brelaz brelaz  domddeg bessiere  each constraint binding perform revision r´egin  adaptive domwdeg  arcs   revision performed recently shown efﬁcient generic heuris  function revise speciﬁc chosen coarse tic boussemart et al  lecoutre et al  hulubei  grained arc consistency algorithm entails removing val o’sullivan  van dongen  importantly  ues inconsistent respect restarts performed randomization introduced brelaz  vision arc  involves removal values domddeg break ties domwdeg weight  domy  revise returns true variable added constraints preserved each run  algorithm loops ﬁxed point reached makes randomization useless weights sufﬁciently    worstcase time complexity checkw atches  discriminant    nγ       γ                                            ﬁrst experimentation tested three al     number reduced nldnogoods stored                        base number variables gorithms set instances used bench  worst case each nogood watched literal given pa marks ﬁrst competition csp solvers van don                                                        gen  time limit solve instance ﬁxed  rameter time complexity dealing reduced   nldnogood order ﬁnd watched literal make minutes table  provides overview results                                                      terms number instances unsolved time  inference  worstcase time complexity   propagate oerdr  nγwherer greatest limit  timeouts average cpu time seconds avg  straint arity precisely cost establishing gac time computed instances solved three methods  using generic approach oerdr algorithm figures   represent scatter plots displaying pairwise  gac bessiere et al  used cost comparisons domddeg domwdeg finally table                                                         focuses difﬁcult realworld instances radio    practice size reduced nldnogoods far smaller link frequency assignment problem rlfap performance  cf section                                measured terms cpu time seconds timeout                                                    ijcai                                                                                       mac                                                 mac                                 rst     rst  ng                                   rst     rst  ng               timeouts                                      cpu                       domddeg                                                scenf               avg time                                nodes                                    timeouts                                      cpu                        brelaz                                                 scenf               avg time                                  nodes                                    timeouts                                      cpu                         domwdeg                                                scenf               avg time                                   nodes                                                                                        cpu                                                                                  scenf                                                                      nodes                                                                                        cpu                      table  number unsolved instances average cpu time scenf                                                                    nodes                  csp competition benchmarks given minutes                cpu                                                                                scenf  cpu                                                                nodes                                                                                     cpu                                                                                 scenf                                                                      nodes                                                                                    cpu                     number visited nodes analysis scenf  sults reveals three main points                                    nodes                                                                                    cpu                                                                               scenf  restarts learning yields mitigated results        nodes                                                                                    cpu                                                                               scenf  observe increased average cpu time heuristics         nodes                   fewer solved instances classical ones  close look different series reveals macrst com  bined brelaz resp domddegsolved resp  table  performance hard rlfap instances using  instances mac series ehi instances domwdeg heuristic timeout  correspond random instances embedding small unsatis  ﬁable kernel classical heuristics guide search troduced sat consider base nogoods  wards kernel restarting search tends unique global constraint efﬁcient associated propaga  expense series macrst  tion algorithm  solved instances mac worse experimental results show effectiveness  formance remark domwdeg renders macrst approach stateoftheart generic algorithm mac  robust mac ehi series        domwdeg improved approach allows  nogood recording restarts improves mac perfor   solve instances classical approach  mance number unsolved instances given timeout average faster instances  average cpu time reduced fact solved approaches  solver explores times portion  search space beneﬁting restarts       acknowledgments  nogood recording restarts applied realworld paper supported cnrs anr  stances pays focusing hardest instances van “planevo” project nojc   dongen  built realworld rlfap instance  scen observe table  using restart policy references  allows efﬁcient order magnitude baptista et al  baptista lynce marquessilva  exploit nogood recording gain                                                       complete search restart strategies satisﬁability proceed                                                         ings ssa’ workshop held ijcai’     finally noticed number size bayardo shrag  rj bayardo rc shrag using  duced nldnogoods recorded during search csp lookback techniques solve realworld sat instances  limited illustration let consider hardest rl proceedings aaai’ pages –                   −                  fap instance scen    involves  variables  bessiere r´egin  bessiere r´egin mac  greatest domain size  values macrstng solved  combined heuristics reasons forsake fc cbj  instance  runs  nogoods average hard problems proceedings cp’ pages –                          size  maximum size  recorded               bessiere et al  bessiere jc r´egin rhc yap                                                          zhang optimal coarsegrained arc consistency algorithm    conclusion                                           artiﬁcial intelligence –   paper studied recording boussemart et al  boussemart hemery lecoutre  goods conjunction restart strategy beneﬁt sais boosting systematic search weighting constraints  restarting search heavytailed phenomenon ob proceedings ecai’ pages –   served instances avoided drawback brelaz  brelaz new methods color vertices  explore times parts search graph communications acm –   tree shown quite easy eliminate dechter  dechter enhancement schemes constraint  drawback recording set nogoods end each processing backjumping learning cutset decomposition ar  run efﬁciency reasons nogoods recorded base tiﬁcial intelligence –   correspond new constraints propaga dechter  dechter constraint processing morgan kauf  tion performed using literal watching technique mann                                                     ijcai                                                     
