                            learning implied global constraints             christian bessiere                  remi coletta                      thierry petit             lirmmcnrs                             lrd                          linacnrs         montpellier france             montpellier france       ecole´ des mines nantes france         bessierelirmmfr                  colettalrdfr                thierrypetitemnfr                          abstract                          rameters second implied constraints learned accord                                         ﬃ              ing actual domains variables model      finding constraint network ciently learning global constraints important global      solved constraint solver requires strong ex constraints key feature constraint programming      pertise constraint programming permit reduce search space eﬃcient propaga      increasing automatic reformulation tors global constraints generally involve parameters      paper presents general framework learn                                                        instance consider nvaluek xxn constraint      ing implied global constraints constraint net holds iﬀ equal number diﬀerent values taken      work assumed provided nonexpert user  seen parameter leads      learned global constraints added                                                               diﬀerent sets allowed tuples xi’s depending      network improve solving process ap value takes increase expressiveness provided      ply technique global cardinality constraints parameters increases chances ﬁnd implied      experiments show signiﬁcance approach straints network learning algorithm try exam                                                        ple learn smallest range possible values st    introduction                                       nvalue implied constraint tighter range  encoding problem constraint network called model learned constraint reduce search space                                                                                                solved eﬃciently constraint toolkit diﬃ constraints beldiceanu et al  used  cult task requires strong expertise constraint pro implied constraints involving parameters  gramming cp known main bot learning implied constraints according actual  tlenecks widespread cp technology puget  mains important constraints learned way  cp experts start building ﬁrst model expresses account just structure network  correctly problem requirement constraints closer real problem                                                        solved instance know   time solve model high reﬁne                      adding new constraints change set variables derive set constraints                                                          knowledge domains  lutions increase propagation capabilities                               ﬃ  solver ilog solver  user’s manual gcc constraint derive expert cp di culties ﬁnd  added improve solving time graph coloring constraints depend complex interactions  problem page  ilog  r´egin new domains constraints  constraints added sports league scheduling problem  constraints called implied constraints smith et al  motivation example   community studied automatic ways gener let focus simple problem tasks  ating implied constraints model colton miguel scheduled tasks duration each task  colton miguel  exploit theory formation pro requires given mi resource steps time rep  gram provide concepts theorems trans resented integers starting  time  lated implied constraints hnich et al hnich et al resource used tasks bounded maxr starting   implied linear constraints derived using times tasks separated steps  extension prolog equation solving sterling et time random precedence constraints start times  al  frameworks new generated tasks added makespan maximum time equal  straints derived structural properties original ∗n−d best possible makespan wrt constraint  constraints depend domains variables starting times question ﬁnd feasible schedule    paper presents framework based ideas presented implemented naive model choco choco   bessiere et al  framework contains orig start time task represented variable xi  inal contributions automatic generation implied domain  ∗ −  makespan  straints permits learn global constraints pa resource capacity represented each unit time                                                    ijcai                                                                          naive model    implied constraint  implied constraint constraint network                                           maxr   nodes time sec nodes time sec straint does change solutions nthatis                                                          —–                       given constraint network  constraint                                        ⊆x                                                                                xc    implied constraint sol                                          soln  cwheren  denotes network c∪c                                                                                      global constraints deﬁned number vari                                           unsat    unsat   ables instance alldifferent global constraint                                                        instantiated scopes variables size                                                        global constraints signature com  table  results naive model left implied gcc pletely ﬁxed variables seen pa  added model right tasks duration rameters ’external’ variables involved  tasks use resources                                                        constraint problem instance                                                                                                                                         gcc constraint gccx  xn pv   pvk  involves xi’s                                                        ’s ’s variables problem like  array rtn variables rti  mi task      active time rti   constraints ensuring quimper et al  parameters value                                                        range like r´egin  example  consistency xi rti constraints separa                                                              constraint       holds  tion starting times primitive ones sum constraints                                                         ≤           iﬀ ∃j ∈ xi   nthev j’s  used expressing resource capacity  rti maxr  place context non expert user run parameters variables beldiceanu contejean   default search heuristics choco variable mini bessiere et al  global constraint deﬁned                                                                                                ﬀ  mum domain ﬁrst assigned smallest available value scheme schemec speciﬁed di erent types  cutoﬀ  seconds table left reports results parametric constraints depending elements                                                        schemec variables parameters  instances    andn number tasks  requiring resources precedence constraints deﬁnition  parametric constraint given global  added shows small instances naive straint deﬁned schemecaparametric constraint  model hard solve standard solving techniques rived global constraint cp st  ppm  want solve problem tasks def set parameters cp ⊂ schemec  initely need improve model expertuser xcp scope cp xcp  schemec   constraints starting time tasks induce limits addition variables constraint deﬁned  number tasks start each point time set parameters set tuples allowed  makespan equal minimal possible value constraint depends values parameters  scheduling tasks separated deﬁnition  instance parametric constraint given  units place tasks soon possible constraint network  instance para  means task starts time zero task time metric constraint cp constraint cp ←  st   expressed explicitly global cardi                                               • xcp ←    xcp ⊆x  nality constraint gcc gccx xn pv pvk  holds  ﬀ                                                • ∩x   ∅   xi    pv add model gcc                                                                   constraint involves starting times xxn guar • ⊆ set tuples  antees ﬁrst values time taken • ←                                 ∈            cp     satisﬁed instantiation xcp  gccx   xn   pn− pv          ﬀ           ∈                             ∈                                           exists st tuple schemec  pv  shown table right  satisfying tuple global constraint  adding simple gcc constraint naive model leads cp derived  signiﬁcant improvements example shows non  expert user small problems lead bad perfor example  let cp parametric constraint derived                                                                                   mance solver adding simple implied constraints amongx scope parameters                                                                              model dramatically reduce solving cost          nlets        set combinations                                                        tuple xx accepted instance constraint                                                            ←    ﬀ    basic deﬁnitions                                   cp    three occurrences value  occurrence                                                        value  tuples         satisfy constraint                                         constraint network deﬁned set    xn   tuples         suppose para                           variables set  dx    dxn domains values metric constraint allows specifying combinations parameters                           variables andaset constraints constraint allowed practice propagation algorithms                            ⊆x  deﬁned scope xc  speciﬁes com strictions parameters expressed  binations values tuples allowed variables                                                          given parametric constraint cp diﬀerent sets  xc solution assignment values                                                           tuples parameters lead diﬀerent constraints  domain variables st constraints satis                                                                   cp ←  andcp ←   adding instance  ﬁed soln denotes set solutions                                                        parametric constraint cp implied constraint net    automatic generation robust search heuristics work worth using set tuples parameters  scope paper                              tight possible cp ←  implied                                                    ijcai                                                       learning implied parametric constraints              given solution accepted unique combination  objective learn ’target’ set ⊆ passmallas values parameters combination necessary  possible st cp implied constraint ∈ having implied constraint belongs lbt                                               necessary accept solutions corollary  let cp ← ubt  implied constraint  discarded tighter learned constraint network solution unique  promising ﬁltering power                 ubt st satisﬁes cp ←t lbt   deﬁnition  learning implied parametric constraint corollaries   shrink bounds ini  given constraint network  parametric tial set possibilities parameters algorithm                       ∩x   ∅            ⊆x  constraint cp     xcp     learning  forms bruteforce computation set ubt st cp ← ubt   instance parametric constraint cp implied                                                                                   implied constraint network  algorithm  consists ﬁnding set ⊆ tight possible st works extrainformation known param  cp ←  implied                            eters uses corollaries   input parametric    set tuples st cp ← implied constraint constraint network optionally initial                    ⊂            ←               does exist cp    implied   upper bound ub target set output set ubt  called target set cp                    tuples parameters st solution problem                                                                        ←    general process learn parameters lost add cp ubt  network  implied global constraints goal deal  type constraint network focus global constraints algorithm  bruteforce learning algorithm                                              sets parameters ⊆ schemecstcp ← isthe                                                                     input cp optionally ub  universal constraint means contains vari output ub                                                                ables schemec  cp ←  implied constraint begin  learning task ﬁnd small superset target lbt ←∅                                                                     set deﬁnition  given problem  cand  ubt ←                tighter ub                                                                         parametric constraint cp denote                lbt ubt ’timeout’                                                                choose ⊂ ub  lb     •                     ←                                                    ubt subset  st cp  ubt  implied      soln  cp ←   ∅      straint                                                      ubt ← ubt         corollary      •                            ∈        ←                       lbt subset ubt st lbt  cp ubt                         ←      implied constraint                                 pick sol cp                                                                    unique ubt st satisﬁes  words lbt represents combinations values      cp ←t                                                                          ←    ∪  parameters necessary ubt preserve         lbt  lbt        corollary    set solutions nandubt end  proved lose solutions  following propositions general conditions highly predictable algorithm  ineﬃcient  incrementally tighten bounds lbt ubt space possible combinations values explore                       ⊆   ⊆  keeping invariant lbt ubt wheret target  exponential number parameters addition check                                                                         ←  proposition  let cp ← ubt  implied constraint ing cp     inconsistent line  np                                                                         anetworkn exists ⊂ ubt st soln  soln  complete learning phase  cp ←  cp ←  implied constraint nso subpart problem necessary use  ubt replaced                             heuristics improve process fortunately practice                                                        constraints characteristics used    testing equivalence sets solutions networks                                                        section studies properties  conpcomplete handled classical  straint solvers relax condition  condition easily checked solver   using properties constraints                                                        given parametric constraint cp diﬀerent representa  corollary  let cp ← ubt  implied constraint                                                        tions parameters exist complexity associated  network exists ⊆ ubt st  cp ←                                                         ﬁltering algorithms generally diﬀers according repre  inconsistent cp ← ubt   implied constraint                                                        sentation used general case studied section   nsoubt  replaced ubt                                                         consists considering allowed tuples parameters    weakness corollary clue cp given extension set ⊆  subsets ubt test inconsistency know  implied constraint remove solutions  partitioning parameters  add network solutions help practice parametric constraints satisfy follow  proposition  let cp ← ubt  implied constraint ing property diﬀerent combinations values                                                           anetworkn  solution ⊆ ubt st parameters correspond disjoint sets  cp ←   implied constraint exists lutions xcp instance case                 ←                                                  st satisﬁes cp                               gccx    xn pv   pvk  constraint each combination                                                    ijcai                                                                                 values parameters pv pvk imposes ﬁxed num  parameters ranges  ber occurrences each value                                                   possible values parameter pi represented  deﬁnition  parametric  constraint cp called   range integers special case set val  parameterpartitioning iﬀ  pift  ues consecutive wrt total order integers  cp ←t ∩ cp ←t   ∅                           possibility modifying sets lbt piandubt pi    given instantiation xcp unique tuple parameter pi shrink bounds minlbt pi  st satisﬁes cp ←t denoted          maxlbt pi minubt pi maxubt pi case                                                      stricts possibilities combinations pa    constraint parameterpartitioning rameters allowed simpliﬁes learning process corol  nice property unique target set      laries   specialized corollaries      lemma   given constraint network parametric corollary  let cp ← ubt  implied constraint  constraint cp parameterpartitioning exists constraint network parameters represented                                                                         ∈                                unique target set cp                    ranges let pi  p   minlbt pi resp                                                                                       × −∞                                                                   max lbt pi ji ubp   resp    proposition tells constraint        ×    ∞         ←                                                           ji ubp     cp     solution  parameterpartitioning updating lower bound tar minub   vrespmaxub    set easier general case                                                                                              corollary  let cp ← ub  implied constraint                      ←                                                          proposition  let cp ubt  implied constraint network solution given parameter  network solution nifcp parameter                                                        pi ∈ value ∈ ubt pi tpi   partitioning constraint unique tuple st                                                      tuple ubt st satisﬁes cp ←tthenminlbt pi ≤  satisﬁes cp ←t lb                                                       ≤ maxlbt pi    proposition ﬁrst way improve algorithm  thanks corollary  tightening upper bounds                                                   allows faster construction lbt solution given pi simply checking forcing val  contributes lower bound lbt line          ues smaller minimum greater maximum                                                        value lower bound leads inconsistency net    parameters sets integers                   work yes know values smaller  far know existing parametric constraints deﬁned minimum lbt pi greater maximum lbt pi  sets possible values parameters ppm removed ubt pi  taken separately means target set  cartesian product tp ×···×tpm tpiisthe   making learning process tractable  target set values parameter inotherwordst                                                      operations performed learning technique  rived sets possible values each parameterthis                                                      described sections   solver check  expressive directly considering subset                                                         network containing given instance parametric  learning process easier handle let lb                                                    straint consistent line  algorithm  np  ub  required possible values tp  corol                                                  complete key idea tackle problem implied  laries   specialized corollaries                                                          constraints learned relaxation original network                     ←  corollary  let cp   ubt  implied constraint implied constraints original network                                constraint network  ubt    p ∈pubt pilet                                  ∈      ⊆                                ×       proposition  given network           net  pi   ubt pi lbt pi  ji ubt                                          ←                                           work              constraint implied     cp     solution values soln ⊆ soln  implied  removed ubt pi                                                        selecting subset constraints    corollary says parametric constraint instance                                                        thanks proposition  select subset  cp ←   inconsistent network pa                                                        straints network want learn implied  rameters  values upper                                                      constraint constraint learned subnetwork  bound values  discarded ub                                                   implied original network example sec  corollary  let cp ← ubt  implied constraint tion  gcc constraint posted variables rep  network solution given parameter resenting tasks implied constraint subnet  pi ∈ value ∈ ubt pi tpi  work resource constraints prece  tuple ubt st satisﬁes cp ←t dence constraints taken account underly  lbt pi                                             ing network simple easily solved    section  algorithm  modiﬁed deal optimization problems  speciﬁc case parameters represented sets optimization problem set solutions set  integers corollary  tells value lbt pi instantiations satisfy constraints st cost func  parameter pi corollary  tells value tion minimal maximal value  cisthe                                                                                          c∪ ub  removed ubt pi parameter pi       network cost function let                                                          ijcai                                                              maxr nodes learningsec             maxr nodes    solve sec                                     solve sec                        —–                                                                 unsat                                                        —–                                                                 unsat                                                                                                                      unsat                      unsat                                                           table  naive model  tasks tasks duration  table  learning implied gcc naive model section  tasks use resources  time learn solving time tasks duration  tasks use resources                                                                 maxr nodes learning sec                                                                                            solve sec                                                                                     cub constraint accepting tuples cost                                                                       unsat     ﬁxed upper bound ubwe concentrate minimiza                            tion ub greater minimal cost im                                                                                                          unsat        plied constraint accepts solutions optimal wrt                        idea run branch bound              unsat     ﬁxed short time ub set value  best solution classical learning process table  learning implied gcc problems  tasks                          ub                         time learn solving time tasks duration  launched network    note learned  implied constraint improves solving phase permit tasks use resources  quickly ﬁnd bound ub  better ub using new                                               ub   bound ub  continue learning process             ub                                       algorithm  table  shows results model  instead    learned implied constraint                                                        taining learned implied gcc ﬁrst time number corre                 ub                 ub  tighter  relaxation  ob  sponds learning process second solving  serve nice cooperation learning process time results table  results ta  solving process                                      ble  implied gcc added expert user                                                        shows short run learning algorithm gives  time limit                                                        robustness model wrt solving process  case ﬁnding subnetwork easy solve problem consistently easy solve types instances  possible case ﬁnd ways decrease solved naive model  cost consistency test line  algorithm  section  tables   show results  simple way time limit consistency test crease number tasks length    instead  solver ﬁnished search limit ubt  number random precedence constraints   updated algorithm goes loop      stead  stopped search  seconds                                                        able solve problems size   seconds    experiments                                        including learning time solv  evaluate learning technique gcc constraint able implied gcc minutes  section  gcc global constraint nphard propagate ﬁrst experiment shows taking naive model  elements scheme variables quimper et al naive search strategy learning technique improve   cardinalities values pa robustness model terms solving time ef  rameters values range eﬃcient algorithms exist fort asked user just intuition “there  propagate r´egin  quimper et al inad maybe hidden gcc related ordering tasks”                                                                          ﬀ  dition gcc constraint express diﬀerent features lower ort studying hand possible  cardinalities values good implied constraints each number tasks durations  didate added implied constraint  experiments learn gcc cardinalities ranges                                                        optimization problem  integers results sections   apply directly  used choco constraint solver choco        institute technology university mont                                                        pellier iut students provide totally ordered list  satisfaction problem                                 uumofthem projects prefer project ui strictly  ﬁrst experiment performed problem sec preferred project ui goal assign projects st  tion  learning algorithm run subnetwork students share project maximizing  resource constraints precedence constraints satisfaction student satisﬁed obtains ﬁrst  discarded learning fast   milliseconds choice obtains second obtaining   orn   ﬁxed  limit number project list worst possible satisfaction additional  consistency tests subnetwork added gcc line constraints exist limit  projects selected set                                                    ijcai                                                     
