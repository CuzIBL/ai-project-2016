 quantiﬁed constraint satisfaction problems relaxations explanations                                    alex ferguson     barry o’sullivan                   cork constraint computation centre university college cork ireland                         centre telecommunications valuechain research                             afergusonbosullivancuccie                          abstract                          problem quantiﬁed csp parallels ad                                                        versarial games qcsp natural model variables      quantiﬁed constraint satisfaction problem     control using existential quantiﬁers vari      qcsp generalisation classical csp ables outside control using universal quantiﬁers chen      variables universally quanti       ﬁed paper extend wellknown   remainder paper organised follows      cepts classical constraint satisfaction quan section  present formal deﬁnition fundamen      tiﬁed case problem relaxation explanation tal concepts constraint satisfaction quantiﬁed csp      inconsistency show generality present new forms problem relaxation sec      qcsp allows number different forms tion  previously considered      laxation available classical cspwefurther literature’s focus classical csp show forms      present algorithm computing generalisation relaxation captured using notion requirement      conﬂictbased explanations inconsistency relaxation section  presents approach generating ex      qcsp                                         planations conﬂict quantiﬁed csp based requirement                                                        relaxation show existing explanation generation                                                        algorithm classical csps extended quanti    introduction                                       ﬁed case review related work section   disadvantages classical csp framework number concluding remarks section   lacks sufﬁcient expressive power modelling par  ticular aspects real world problems example uncer  preliminaries  tainty forms uncontrollability environment                                                        deﬁnition  classical constraint satisfaction problem  set constraints satisﬁed                                                         constraint satisfaction problem csp tuple    paper concerned quantiﬁed csp                                                          ˆ x  c ﬁnite set variables  generalisation classical csp allows                                                          ˆ   xxn   set ﬁnite domains  variables universally quantiﬁed chen                                                         ˆ  dxdxn  domain dxi  mantics universal quantiﬁcation variable                                                        ﬁnite set values variable xi set  set constraints satisﬁable assignment                                                        constraints ˆ ccm each constraint ci deﬁned  contrast classical csp variables                                                        ordered set varci variables involves  existentially quantiﬁed assignment existentially                                                        set solci allowed combinations values assignment  quantiﬁed variable satisﬁes constraints satisfactory                                                        values variables varci satisﬁes ci belongs  classical csp known npcomplete gen                                                        solciasolution csp assignment value  eral qcsp pspacecomplete chen                                                         domain each variable constraint  sider problem relaxing instance qcsp                                                        satisﬁed  example unsatisﬁable propose novel forms  problem relaxation qcsp present algorithm fundamental notion used reasoning classical csps  generating conﬂictbased explanations inconsistency arc consistency mackworth  logical    motivation comes problems conformant plan conjunction assignment variables locally  ning supplychain management interested inconsistent constraint guaranteed  using constraints support local decisionmaking pro consistent solution  cesses company supply products set cus classical csp regard variables  tomers managing complex network suppli existentially quantiﬁed wish show exist  ers classical csp sufﬁciently expressive model signments each variables satisfy constraints  type problem concisely variables simultaneously generalise  control decisionmaker model allowing variables universally quantiﬁed                                                    ijcai                                                     deﬁnition  quantiﬁed csp qcsp φ form   forms relaxation available                                                        qcsp additional expressiveness access   qc    ∈ dx  ···q  ∈ dx  cx                                             qcsp gives rise new forms relaxation  set constraints deﬁnition  deﬁned available classical csp                    variables      sequence quantiﬁers  relaxation quantiﬁed csp  variables xn each qi  ≤ ≤  existential ∃ universal ∀ quantiﬁerthe useful viewpoint adopt studying qcsp                                                        consider instance problem adversarial game  expression ∃xic means “there exists value ∈ dxi                                                        players universal player sets univer  assignment xia satisﬁes c” similarly                                                        sally quantiﬁed variables existential player sets  expression ∀xic means “for value ∈ dxi                                                        existentially quantiﬁed variables chen inthese  xia satisﬁes c”                                                        terms regard relaxations qcsp modiﬁcations  deﬁnition  semantics qcsp based gent et al problem make easier existential player   deﬁne semantics qcsp qc recursively win perspective universal player relaxation  follows problem trueifq qcsp restrict ways player fal  form ∃xqx qnxn qc true iff exists sify formula example restrict domain  value ∈ dx qx qnxnc∪x  values universally quantiﬁed variables  trueifq form ∀xqx qnxn qc true spective existential player relaxation increases set  iff value ∈ dx qx qnxnc∪ responses played counteract choices   trueotherwiseqc false             universal player proceed discussing ﬁve classes                                                        relaxation available context qcsp  example  quantiﬁed csp consider qcsp deﬁned                                                        ﬁrst familiar csp remaining  variables dxdx                                                        three particular expressive framework     follows ∃x∀xx qcsp false                                                        direct equivalents unquantiﬁed case  value variable  value domain inconsistent                                                         single constraint relaxation type relax    deals equivalent decision ation equivalent normally considered classical csps  problem qcsps analogous treatment exempliﬁca example classical approach pcsp frame  tion requires consideration winning strategy generalising work allowed tuples added extensionally  idea solution chen  course order represented constraint principle replacing  quantiﬁers qcsp critical consider following constraint logically weaker mentioned ear  qcsp ∃x ∈ ∀x ∈   false  ∀x  ∈ ∃x ∈      true                lier complete removal constraint considered                                                special case type relaxation                                                        example  single constraint relaxation consider    relaxation                                         following qcspwhichisfalse  motivation studying relaxations qcsp relates   ∃x ∈ ∀x ∈   observation real world problems                                      ≤  constrained accordingly interested relaxing relax constraint    constraints problem ﬁnd solution following  relatively satisfactory scenario problem ∃x ∈ ∀x ∈  ≤  relaxation seen way exploring space al qcsp true existential  ternative models given problem furthermore problem player sets  universal longer ﬁnd  relaxations language explain signment falsiﬁes qcsp            overconstrainedness problem moving classical  cspstoqcsps provides richer class relaxations  expressive language explanations relaxation existentially quantiﬁed domains enlarg    known frameworks reasoning ing domain existentially quantiﬁed variable                                                        direct equivalent relaxing domains classical frame  problem relaxation classical csp partial constraint  satisfaction freuder wallace  identify work  possible ways relaxing classical csp domain example  relaxation existential domains revisit  variable enlarged relation constraint qcsp presented example  false  set allowed tuples enlarged constraint scenario universal player sets  avail  removed problem variable removed able counter existential player able  problem note strategies play value smaller  suitable relaxation  regarded enlarging domain constraint relations following adds value  domain  domains formulated unary constraints  ∃x ∈  ∀x ∈                                                                          true    domain variable clear context relaxed qcsp existential player set                                                                                                         write qixi qixi ∈ dxi quantiﬁer sequence   universal player falsify formula                                                    ijcai                                                     relaxation universally quantiﬁed domains aclass     claim set relaxations comprehensive  relaxation corresponding classical cspsis reformulation original problem considered  remove values domains universally quantiﬁed conjunction relaxation orthogonal ap  variables doing reduces number scenarios ply quantiﬁer relaxation case domain  der existential player ﬁnd satisfying assign singleton sense possible singlestep relax  ments existential variables leading satisﬁ ations result problems mutually incomparable  able problem rationale analysis  ‘problem values’ permissible ignore  qcsp relaxation requirement relaxation  narrowing range probabilistic interpretation present uniform treatment relaxation  example  relaxation universal domains returning quantiﬁers constraints ﬁrst classes  qcsp example  false avail relaxation identify requirements correspond ei                                                        ther constraint qcsp universal quantiﬁer  ability assignment  existential  player satisfying counterassignment frame relaxation each instances requirement                                                        laxation partial order deﬁned purpose  relax domain universally quantiﬁed variable  longer contains value  following deﬁnition  relaxation qcsp deﬁne relax                                                             φr          φ           ∃x  ∈ ∀x  ∈               ation    qcsp   relaxed version single                                                    quirement new value follows  relaxed qcsp true existential player set                                                                                           qx qixi ∈ dxi qnxncqixi ∈ xi                                                     universal player falsify formula                                                                                                    ˆ qx qixi ∈ xi qnxnc                                                                                          quantiﬁer relaxation fourth form relaxation qc cj cmcj ˆ qc cj cm  direct equivalent classical cspistoreverse                                                        extended set relaxations φ∅φ  quantiﬁcation variable universal existential φr∪rφrr  relaxation corresponds achieving control factor pre              viously considered environmental relaxes deﬁnition  ordering requirement relaxations  universal domain relaxation                      given set possible relaxations rr requirement                                                        say ∈rr    ∈rr   iff  example  quantiﬁer relaxation revisit qcsp          φ   φr                 φr   presented example  false relax universal problem  satisﬁable  necessarily  quantiﬁer variable existential    require partial order meet                                                        semilattice greatest lower bounds guaranteed          ∃x ∈ ∃x ∈            exist rr ∈rrthenr   welldeﬁned    relaxed qcsp true                              ordering operator property use make                                                        mal notion relaxation seifr  rthenwesay                                                                                  quantiﬁer moving  ﬁfth class problem relaxation cor  strict relaxation  greatest lower bound  responds moving universally quantiﬁed variable corresponds unique requirement relaxation  left sequence quantiﬁers equivalently constraining arguments  sider moving existentially quantiﬁed variable right greatest element relaxation space lat  sequence quantiﬁers corresponds analysis tice property follows naturally relaxation spaces  oracular knowledge value environment variable shall deﬁne motivated observation pro  delaying decision better information available gressively tighten approximations downwards                                                        relaxation spaces unique element clar  example  quantiﬁer moving consider example  ity respect deﬁne meet operator directly  based presented earlier paper following partial order deﬁned   ˆ   qcsp false                                        note each case straightforward derive           ∃x  ∈ ∀x  ∈                closed form comparison                                                      deﬁne space relaxations constraints  relax problem moving universally quantiﬁed ﬁrst form relaxation identiﬁed essentially  variable left following qcsp true relaxation constraint involves adding additional allowed                                                        tuples relation           ∀x ∈ ∃x ∈                                                          deﬁnition  requirement relaxation constraints  informally relaxed qcsp gives existential player given constraint ˆ varcsolc deﬁne relax  opportunity react actions universal player  ations terms adding additional allowed tuples solc    noted each relaxations follows                                                                                     sensibly possible given application modelling rcˆ sol csolc ⊆ sol ⊆ Πx∈varcdx  knowledge engineering question each case given  straint domain quantiﬁer inherent problem elements rc form usual lattice using intersec  “background” susceptible relaxation tion   ˆ ∩                                                    ijcai                                                     consider universal quantiﬁer relaxation informally deﬁnition  maximally relaxed explanation given  space possible relaxations universal quantiﬁer cor consistency propagator Πamaximally relaxed Π  responds restricting quantiﬁer expo conﬂictbased explanation Πinconsistent qcsp φisa  nentially subsets domain quantiﬁed vari maximally relaxed qcsp inconsistent respect  able narrowing single choice value Π φ   ⊥∈Πx x  widening existentially quantiﬁed subsets cor  x ⊥ ∈ Πx  responds second fourth forms relaxation  identiﬁed section  course practice limit  explanation algorithms  relaxation space subset tractable size  adopt scheme similar quickxplain  deﬁnition  requirement relaxation universals   ‘family’ algorithms junker   modiﬁed  given requirement universally quantiﬁed variable extended following way replace removal  xier ˆ ∀x ∈ dx set relaxations r∀x ∈ dx spectively addition constraint speciﬁed require  deﬁned                                         ment relaxation resp tightening speciﬁed relaxations      rrˆ    ∀x ∈ dx  ∅⊆dx ⊆ dx         form semilattice described previous section            ∪∃x    ∈ dx  ∅⊆dx ⊆ dx        principle possible relaxation min                                                        imum generally wish consider speciﬁed relaxations  elements r∀x ∈ dx form following meet corresponding removal resp imposition each  semilattice                                          straint relaxation universal quantiﬁer ex    ∀x ∈ dx     ∀x ∈ dx                        istential corresponding relaxation space                 ˆ ∀x ∈ dx ∪ dx              restrict set speciﬁed relaxations    ∃x ∈ dx     ∃x ∈ dx                        basis constraints variables intrinsi                 ˆ ∃x ∈ dx ∩ dx              cally environmental participate    ∀x ∈ dx     ∃x ∈ dx                        explanation corresponds using relaxation space                 ˆ ∀x ∈ dx dx ∩ dx   ∅    consideration possible relaxation general    ∀x ∈ dx     ∃x ∈ dx                        completely intractable generally desirable spec                 ˆ ∃x ∈∅ dx ∩ dx∅         ify smaller set broadly                                                        ways firstly modelling process expert  note existence unique points corre specifying class problem instances considera                                                    sponding trivially unsatisﬁable quantiﬁcations tion sets possible requirement relaxations  ∀x ∈∅ ⊥ ∃x ∈∅                                                       meaningful secondly consider userdriven    deﬁne space possible relaxations ﬁnement step initial exploration available expla  given qcsp terms constituent requirements nat nations based base step choice available relaxations  ural way terms crossproduct available relax unsatisfactory  ations each similarly associated comparison  meet operations                                        simplequantifiedxplain        algorithm    consider explanations falsity set speciﬁed relaxations binary require  computed using relaxations consider special cases ments place fully relaxed use  relaxation point point relaxation spaces                                                      equivalent junker’s algorithms modiﬁed simply use  denote  contains origi stead imposition removal constraint choice  nal constraint useful wish ensure original relaxed requirement  constraints quantiﬁers relaxed                                                                                               ﬁrstly reformulate junker’s replayxplain junker      contains original constraint  maximal terms relaxations algorithm  generalising  relaxation useful wish model case                                                        qcsps distinct relaxation available  maintain requirement completely relax each original requirements requirement ei                                                        ther present fully relaxed modiﬁed procedure    relaxations explanations                   simplequantifiedxplain provide arguments φa  consider explanations qcsp familiar qcspandr set available relaxations  tion explanation based minimal conﬂicts junker contain greatest relaxations allowed each require   considered quantiﬁcation ment ri relaxable speciﬁed relaxation rsie  readily presentable terms elements conﬂict setand  i  ∈ i  rsri rsri    general relaxations constraints welldeﬁned spaces unique maxi  moval necessary generalise notion min mal relaxation begin maximally relaxed prob  imally conﬂicting explanation alternatively maximally lem using available relaxations build  relaxed conﬂictbased explanation henceforth refer working set relaxations iteratively omit  maximal following relaxation ordering previ til Π−inconsistency occurs point conclude  ously deﬁned deﬁne notion respect typ relaxation added removed  ically incomplete consistency propagation method Πsuch subproblem added set corresponding  qac bordeaux monfroy  similar way partial conﬂict relaxations need  junker junker                                 sidered subset minimal yield                                                    ijcai                                                     inconsistency iteratively continue doing φ  φr − ∪          ⊥∈Πφ  set possible relaxations exhausted point ∃x ∈ ∃x ∈  ∅                                    φ    used relax original problem yield max ∃x ∈ ∃x ∈                                  φr −  imally relaxed inconsistent problem      ∃x ∈ ∀x ∈   yes  explanation                                            ∃x ∈ ∀x ∈  ∅                                                                  ∃x ∈ ∀x ∈   yes   algorithm simplequantifiedxplainφ    input aqcsp φ set available singlestep relaxations figure  simplequantifiedxplain trace example            ⊆nm    output maximally relaxed conﬂictbased explanation φ                                                        lattices arbitrary size follow basic    ⊥ ∈ Πφ return exception “no conﬂict”      ∅          φ                                   structure replayexplain key difference        return                                 instead successively adding constraints conﬂict    ←∅                                                        set simplequantifiedxplain removing avail    ←     ∅                                    able relaxations instead consider current candidate        ←∅                                           laxation comprising element each relaxation space       ⊥ ∈ Πφr − ∪                  rmn use  obtain successive approximations          select                       maximally relaxed explanation begin max           ←  ∪r                                 imal relaxation each requirement progressively           ←  −r                                                     tighten time select ri       ←  ∪r                                     assigned new value strictly old tightening       ←  −r                                    minimal each step ensure maximality    return φr −                                    ﬁnal relaxation problem inconsis                                                        tency detected eliminate relaxations tighter                                                        incomparable current approximation future    note replayxplain junker’s                                                        sideration unnecessary maximally relaxed explana  explanation procedures split input background                                                        tion time restrict relaxation space  user constraints restrict output                                                        lastrelaxed requirement ri ensure requirement  user constraints syntax quantiﬁed problems pre                                                                                     relaxed earlier value  did pro  cludes doing instead able designate                                                                                        duce inconsistency guaranteed value  constraints quantiﬁed variables relax                                                        explanation currently construc  able regarded playing role                                                        tion repeat process relaxation spaces  background constraints implicitly user requirements                                                        restricted eventually possibility remains  available relaxation difference                                                        each relaxation fully determining chosen explana  form algorithm ‘background’                                                        tion complexity algorithm simple  straints included explanation background                                                        quantifiedxplain equivalent junker’s  straints removed output fact                                                        playxplain given consistency operator similar com  sired observe equivalent sense                                                        plexity similar numbers available relaxations  replayxplain   uxandsimplequantifiedx                                                        qcsp case scope each  plain ∪ i  ci ∈ uxqandxq  ∪ cas                                                        signiﬁcantly larger  suming similar ordering relaxations constraints each  case remaining algorithms presented junker  reformulated terms relaxations similarly discussion algorithm quantifiedxplainφ  correctness complexity algorithm deferred                                                          input aqcsp φ set relaxation spaces each  presentation quantifiedxplainofwhich       quantiﬁer constraint r⊆rφ  special case                                  output maximally relaxed conﬂictbased explanation φ  example  simplequantifiedxplain     consider     ⊥ ∈ Πφ return exception “no conﬂict”  execution simplequantifiedxplainφ   rwhere       enumerate rmn  φ ˆ ∃x ∈  ∀x ∈    ˆ     ∀i ∈ nri return φ   c   trace progress shown ∃i  ri                                                               foreach ri choose ri maximari  figure  note case explanation unique                                    identical original problem relaxation pos ⊥∈Πφ  φrrmn return φ                                                                   ⊥ ∈ Πφr   sible introducing consistency different choices           mn                                                                    choose st ri  ri  relaxations different trace oc     r ←                                                                    curred ﬁnal result                              choose ri maximar  ∈rir  ri                                                                                                                                          ri ←r   ∈riri      quantifiedxplain      algorithm                                                             foreach rj rj ←r  ∈rj rj     consider quantifiedxplain   algorithm     return φrrmn  general algorithm allowing requirement relaxation                                                    ijcai                                                     
