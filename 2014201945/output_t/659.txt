                 semantics     useful  fragment      situation   calculus                     gerhard   lakemeyer                           hector  levesque                  dept   science                  dept   science                        rwth    aachen                            university toronto                          aachen                               toronto ontario                           germany                                  canada  ms                      gerhardcsrwthaachende                      hectorcstorontoedu                        abstract                          es rich handle things basic ac                                                        tion theories deﬁned reiter operator      recent paper presented new logic called basis golog language levesque et al       es reasoning knowledge action illustrate richness informally using exam      perception agent formulated using ple involving knowledge action sensing simple      modal operators argued language  robot sentences situation calcu      fact dialect situation calculus lus expressed directly es      situation terms suppressed allowed useful contexts ﬁnal paper      develop clean workable semantics lan show prepared use secondorder quantiﬁca      guage piggybacking generic tarski  tion way encode sentence      semantics ﬁrstorder logic paper situation calculus es encoding bit trick      consider relation es situation advocate everyday use does      calculus show map sentences es exist gain clarity comes having real      situation calculus argue fragment semantic basis ability present concise semantic ar      situation calculus represented es rich guments signiﬁcant loss expressiveness      handle basic action theories deﬁned   rest paper organized follows      reiter golog finally show section deﬁne language es syntax      secondorder version es semantics generalizes version es presented      situation calculus accommodated       lakemeyer levesque  variety ways                                                        important allows functions predi    introduction                                       cates secondorder variables ﬂuent vary                                                                                  rigid  recent paper lakemeyer levesque  pre situation situation ﬁxed situations                                                                                              es  sented new logic called es reasoning knowl section  consider mapping situa                                                                                            es  edge action perception agent main justiﬁca tion calculus prove sentence valid iff  tion introducing knowledge representation mapping logical entailment suitable situation calcu  malism twofold claimed language lus theory section  consider expressiveness                                                        es  new formalism merely situationsuppressed  ﬁrst example basic action theory                                                         version situation calculus originally pre  section  consider inverse mapping                                                                         es  sented mccarthy hayes mccarthy hayes  situation calculus  followed remarks related  subsequently formalized reiter reiter sec work conclusions stop  ond claimed language deﬁned se  mantically axiomatically certain mathematical ar  language syntax semantics  guments formalism considerably simpler language es consists formulas symbols  original situation calculus presented evidence following vocabulary  showing compact proof correctness • ﬁrstorder variables             reiter’s regression operator involving property                                  called determinacy knowledge                    • ﬂuent secondorder variables arity                                                                                                         ﬁrst claim es fact just • rigid secondorder variables arity      alternate way writing formulas situation • standard names     calculus left unsubstantiated paper remedy                               main result prove correctness simple • ﬂuent function symbols arity       mapping sentences es counterparts example location bestaction                                                                                            classical language situation calculus addition • rigid function symbols arity       show fragment situation calculus expressed example block repair                                        • ﬂuent predicate symbols arity      world determines truth values primitive sentences      example broken                             coreferring standard names primitive terms                                                    sequence actions epistemic state deﬁned set    • rigid predicate symbols arity           example fragile                             worlds possibleworld semantics precisely    • connectives symbols  ∧ ¬ ∀ know  • world ∈ function primitive sen      round square parentheses period comma          tences   primitive terms                                                             preserving sorts satisfying rigidity  assume ﬁrstorder variables standard names  constraint rigid function predicate symbol  function symbols come sorts action like repair                                                                                                  wrn     nk  wrn     nk   bestaction object like block location constants  function symbols  arity let denote set  standard names denote set sequences • epistemic state ⊆ set worlds  standard names actions including sequence extend idea coreferring standard names arbitrary                                                        ground terms follows given term variables    terms  formulas                                                                                                                              world action sequence deﬁne tw read  terms language sort action object coreferring standard given  form set expressions                                                                                                ∈  tw                                                                                standard ﬁrstorder variable term  ht     tkw  whn     nk                                                                                     corresponding sort                                      ni  tiw        tk terms kary function symbol interpret formulas free variables proceed fol      ht     tk term sort lows firstorder variables handled substitutionally using  primitive term mean form hn     nk standard names handle quantiﬁcation second  ﬂuent rigid function symbol order variables use secondorder variable maps deﬁned  ni standard names                                follows  wellformed formulas language form set secondorder primitives formulas                                                  form     nk ﬂuent rigid                                                            secondorder variable ni stan        tk terms kary predicate symbol                                                            dard names variable map function      ht     tk atomic formula                                                            worlds secondorder primitives          tk terms kary secondorder satisfying rigidity constraint rigid      variable     tk atomic formula secondorder variable                                                                              terms  formula  uw qn     nk                                                             uw qn         action term α formula tα                  formula                                          let variable maps let ﬂuent rigid                                                                                   ∼                α β formulas ﬁrstorder variable secondorder variable write mean                                                             secondorder variable following agree secondorder primitives                                                                    formulas α ∧ β ¬α ∀v α ∀v α α knowα volving   finally interpret known se                                                        quence actions possibly including sensing taken place                                                                                  read tα “α holds action t” α “α holds deﬁne read agree sensing  sequence actions” usual treat α ∨ β action sequence inductively following  α ⊃ β α ≡ β ∃v α ∃v α abbreviations                       formula free variables sentence primi  iff agree value                                                                primitive rigid term sentence  tive sentence mean formula form hn     nk                                                                    ﬂuent rigid predicate symbol  z·n iff                                                                                 ni standard names                                            sfn  wsfn                                                        putting semantic deﬁnition    semantics                                    truth given ⊆ ∈  deﬁne  α read  language contains ﬂuent rigid expressions α true  α ∈  vary result actions values secondorder variable map  unknown intuitively determine                                                            ht     tk iff  sentence α true sequence ac                                                                                                   whn            tions performed need specify things                                world epistemic state write  α       tk iff                                                                                                                                                                  uw     nk   ni  tiw    assume list includes predicates poss sf                                                            iff     standard names thought special extra constants                                                                                          identical     satisfy unique assumption inﬁnitary version                                                                                                                                 domain closure                                           tα iff z·n  α  tw   α ∧ β iff                         mapped situation calculus formula brokenc         α  β             restored distinguished situation term     ¬α iff  α            ﬂuent similarly repairc¬brokenc                                                                   broken   repair                                                          mapped  ¬            es formulas     ∀v α iff  αn         thought “situationsuppressed” situation        standard sort calculus terminology ∗ mapping restores situa     ∀v α iff                           tion argument ﬂuents leaving rigids unchanged                                       α ∼v                precisely following     α iff                              deﬁnition  let α term formula es        ·  α ∈         standard names expression α∗ deﬁned αs                                                        situation term σ ασ deﬁned inductively    knowα iff                                                      α ∈  vσ ﬁrstorder variable    α objective know operators leave  gt     tkσ rigid function predicate  write  α Σ set sentences secondorder variable gtσ     tkσ  α sentence write Σ  α read Σ logically entails                                                           ft     tkσ ﬂuent function predicate  α mean  α                                                            secondorder variable ftσ     tkσ σ  α ∈ Σ  α finally write  α read α  valid mean   α                                   tσ tσ  tσ                                                           tασ αdotσ σ    mapping    situation calculus                  α ∧ βσ ασ ∧ βσ  know semantics es correct  ¬ασ ¬ασ  section argue correct showing  formulas α es translated direct way formulas  ∀v ασ ∀v ασ  α∗ situation calculus deﬁned reiter       ∀v ασ ∀v ασ    desirable simplest outcome translation                                                     ∗                         ασ ∀s σ ⊃ αs    α iff Σ fol α   validity  es Σ set foundational axioms situation  knowασ knowsαnow σ  calculus levesque et al  example fol note translation α introduces quantiﬁcation  ordinary classical logical consequence unfortunately situations introduced variable assumed  exactly correspondence variety reasons does appear situation term σ  discuss close                                      ∗                    situationcalculus axioms Υ                α  iff Σ ∪ Υ fol α                                                         axioms assume Υ following  Υ set axioms justify separately  domain objects countably inﬁnite    prove result necessary work  dinary tarski models sentences situation calculus  domain actions countably inﬁnite  argued lakemeyer levesque  difﬁ  equality identity relation  cult painstaking main reasons ∀x∀y  ≡ ∀qqx ≡ qy  prefer es situation calculus proof                                                           predicate ∀sks ⊃ inis ∧  theorem quite laborious remind reader ∀s∀s ks ≡ ∀p    ⊃  thought ﬁnal reckoning formalism                                                            ellipsis stands universal closure  unworkable semantically space reasons                                                                 ks ∧ inis ⊃ ∧  view conventional notation used talking tarski                                                                 ∧ sfa ≡ sfa ⊃  interpretations denotations extensions variable maps                                                                     doa doa  example enderton                                                         axioms   talk cardinality set    deﬁnition translation                     objects actions respectively countable  describing Υ present translation es inﬁnite countability aspect controversial  situation calculus simplest case idea ﬁrstorder case satisﬁable set sentences satis  formula like brokenc broken ﬂuent ﬁable countable domain expect users                                                        situation calculus use secondorder logic defeat    assume language functional relational ﬂu note does rule having theories talk  ents functions predicates ﬂuents distinguished                                                             constant function predicates poss sf twoplace space reasons omit formula secondorder logic  predicate knowledge knowsα σ situation ﬁxes cardinality domain objects actions                                                         calculus abbreviation formula ∀sks σ ⊃ αs  let init abbreviation situation calculus         αs result replacing α occurrence mula ∀a∀st  doa version axiom ignore  scope knows  correspondence possreal numbers continuous phenomena simply rules  using secondorder logic force interpretations         sonar                                                                               theories uncountable imagine                                                                           £  contexts ﬁniteness desirable cases      ¢                                 introduce new predicate instead assert           forward             backward  ing ﬁnitely objects assert                  ﬁnitely objects    axiom  hard imagining taking                                  negation seriously usual ﬁrstorder axiomati                                                                           close             zation equality intent invariably  equality symbol understood identity rela  tion secondorder axiom ensures                         figure  simple robot    finally axiom  second order deﬁnition  predicate terms value just properties needed lemma  satisﬁed  way capturing successor state axiom  α∗ consequently Σ ∪ Υ fol α∗  troduced scherl levesque  added ma                                ∗                                                        conversely assume Σ ∪ Υ fol α                                             chinery make knows weaks operator hughes tarski structure satisﬁes Σ∪Υ  α∗  cresswell  knowledge operators possible                                                        domain dsit ∪ dact ∪ dobj  dini ⊆ dsit  situation calculus weaks extensions                                                                                          set initial situations ι  ∈   strongs used                                                                ini                                                          Υ dobj dact countably inﬁnite    embedding  theorem                           dobj  δ δ    dact  λ λ    deﬁne θ                                                        map ith standard objects δ analogous  show provided certain properties hold                                                                                                                   π     dom      ω  tween tarski structure side epistemic state ly actions deﬁne using  using                                                        extensions function predicate symbols given  collection worlds sentences true                                                                                            ωι  ι ι ∈    ωι  es iff translations true tarski structure finally let                          let tarski structure situation calculus ensure properties needed lemma                                                         satisﬁed  α consequently α valid  domain  dsit ∪ dact ∪ dobj  dini ⊆ dsit                                        set initial situations ι  ∈ dini  let  expressiveness language  epistemic state assume given three  mappings ω ∈ dini →  θ ∈ → dact ∪ dobj   established es actually disguised  π ∈  × dini →  dsit  mappings need satisfy fragment situation calculus consider ex  various consistency properties enumerate pressiveness fragment starting simple example  quote lemma uses   problem adapted levesque lakemeyer                                                           imagine robot lives dimensional world  lemma   let α formula es standard                                                        away ﬁxed wall robot  names  free variables                                                           sonar sensor tells gets close  given consistency properties variable map                                                        wall say  units away figure   µ es variable map deﬁned terms µ vari                       µ                                imagine three actions forward backward  able ∈ ι ∈   ωι                          ini                           robot unit away wall sonar                                xm                   sensing action tells robot close wall                 uµ  αn   nm                          iff                           each rigid constant simplicity                                                        simply assume standard names sin     µxθn     xmθnm sπz ι  αs gle ﬂuent distance gives actual distance                                                        robot wall use close abbreviation  proved long induction structure α                main result following                    formula “distance  ” begin formalization                                                        writing preconditions three actions  theorem  let α sentence es standard                                      ∗                   ∀a  possa ≡  names α valid iff Σ ∪ Υ fol α                                                               forward ∧ distance   ∨  proof sketch assume α valid  backward ∧ true ∨   α deﬁne tarski structure  sonar ∧ true                       ∪   ∪              domain       obj   act   sit  obj  deﬁne sensing results actions  resp dact  set standard names objects resp ac                                                    ∀a  sfa ≡  tions dsit  ×  deﬁne      vm  km  extension rigid ﬂuent  forward ∧ true  ∨                                                              backward ∧ true   ∨  predicate function symbol using way  ensures satisﬁes Σ ∪ Υ deﬁne mappings θ use simple arithmetic involving    π ω letting θn  initial ι  − easily deﬁned secondorder terms stan  letting πz ι  ωι  ensures dard names acting natural numbers omit details     sonar ∧  close                                  operator  finally write successor state axiom ﬂuent turn attention operator ba    ∀a  adistance  ≡                         sis golog language levesque et al  show       forward ∧ distance    ∨                  variant represented es en       backward ∧  distance  −  ∨                code doδ directly situations       forward ∧  backward ∧ distance       terms instead use do˜δ α intuitively means   ready consider speciﬁcs having α holds doing golog program δ pos  true initially deﬁning action theory Σ let sible readings says α holds ﬁnal states  φ denote conjunction sentences assume says α holds ﬁnal state inter  φ true robot knows assume deﬁned consider treat do˜δ α  robot located initially  units away wall abbreviation formula es deﬁned recursively  robot idea let Σ    δ follows                                                                                   def   φ knowφ distance   ∀x¬knowdistance      action do˜a α  possa ∧ aα                                                                      def                                          do˜φ α  φ ∧ α  theorem  following logical entailments Σ                                                                       def              close ∧ ¬knowclose ∧ forward ¬knowclose        do˜δ  δ  α  do˜δ do˜δ  α      robot close wall does know         def                                                           do˜δ  δ α  do˜δ α ∨ do˜δ α      continues know moving forward                                                                        def    sonar knowclose ∧ forwardknowclose         do˜πx δ α  ∃x do˜δ α        reading sonar robot knows close  ∗    def      continues know moving forward           do˜δ  α                                                                ∀p α ⊃  ∧ do˜δ  ⊃  ⊃     sonar backward ¬knowclose      reading sonar moving backward usual deﬁne whileloops ifthenelse ab      robot longer knows close wall breviations main theorem state                                                        account do˜ correct relative original account    backward sonar knowclose                                                        mapping es deﬁned      moving backward reading sonar      robot knows close wall         theorem   let δ program α sentence es                                                          situation term situation calculus    sonar forward backward knowclose              σ                                                        fol  do˜δ ασ ≡ ∃s doδ σ ∧ αs      reading sonar moving forward      ward robot knows close wall proved induction δ troublesome case                                                                                           ∗    sonar knowforward close                     nondeterministic iteration δ       reading sonar robot knows      main close moving forward                     mapping    situation calculus    ¬knowsonar knowclose                         mapping situation calculus es main issue      robot does know initially know treatment quantiﬁed situations simple formu                                                                                           ∗      close reading sonar                 las translated using inverse section                                                                    ∀s∃ss ∧  ∧ ≡    knowsonar knowclose ∨ know¬close        sentence like                                                                                        says situation situation reachable      robot does know initially reading sonar                                                        agrees truth value counterpart es      know close wall                                                          deal situationcalculus sentences like    knowsonar backward ¬knowclose             proposal encode action sequences secondorder es      robot knows initially know let nil rigid constant seq rigid binary function      close reading sonar moving backwards symbol es deﬁne actionseqx abbreviation  proof  proofs similar                                                           ∀q qnil ∧ ∀y aqa ⊃ qseqa ⊃ qx  item  let  hsonar · backwardi suppose   Σ show  ¬knowclose situation calculus ﬂuent like doα doβ  cause  ¬knowdistance   exists ∈ actually means holds doing β α                     distance      actions reverse order situation term                                  distance   useful able reverse sequence follows                                        exists ∈   ¬close                    def   ¬knowclose                   deﬁnition  revx  ∀r   ⊃ rx nil                                                        ellipsis stands universal closure  attempt formulate theorem rnil ∧ rx seqa ⊃ rseqa  clear example basic action theory  reiter including involving scherllevesque deﬁne means formula α true  knowledge operator expressed es            sequence actions
