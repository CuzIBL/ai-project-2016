session  applications                                                                                                                                   application artificial intelligence                                                        techniques way    challenge artificial intelligence                                                        time workers field begin     programming problems solved                                                        choose vehicles exploration artifi•                 sammet                          cial intelligence techniques problems                  ibm corporation                       solution really use                   cambridge mass                      scientists data pro•                                              cessing field playing checkers chess                                                        interesting tour force    abstract                                            programs win developers        paper nature challenge      event significant    artificial intelligence experts suggests     early motivations structured    techniques artificial intelligence      problem attention getting led    applied realistic problems        choice problems ex•                                                       istent applied real•   exist programming data pro•                                                       istic programming problems    cessing fields brief review lit•   tle related existing work          interpreted saying    characteristics programming problems         useful problems attacked    make suitable application     spirit using artificial    artificial intelligence techniques given spe•  intelligence tools contrary assem•   cific illustrations problems provided un•    bly line balancing program tonge     der broad categories data structure      formal integration systems slagle     organization program structure organiza•       moses  chemistry work heuristic    tion improvements corrections pro•          dendral  project scheduling     grams language                                solution algebra word problems                                                        student  represent direct slightly    descriptors                                         indirect realistic practical problems    artificial intelligence                             addressed    applications                                        thrust paper concentrate    programming                                         problems arise program•   heuristic techniques                                ming data processing fields related                                                        issue communication human                                                           introduction                                                            important recognize         years computers                                                        really areas programming technol•   used resembling arti•                                                       ogy problems grown complex    ficial intelligence pioneering work        straightforward techniques algorithms    newell shaw simon proving theorems         inadequate deal illustra•   propositional calculus known   tion difficulty planning combined soft•   need discussion people knowledge•    warehardware configuration new installa•   able field artificial intelligence simi• tion specific application al•   larly early work samuel checker play•    gotten hand proliferation    ing known total         central processor numbers speeds memory    work field artifi•    sizes peripheral storage devices com•   cial intelligence represented bibliogra•     bined variability inherent oper•   phies papers conferences  quite         ating systems allow multiprocessors    large narrow definition artificial    multiprogramming online systems real    intelligence used ma•       time systems simultaneously make diffi•   jor anachronism irony     cult determine adequate let best    subject paper                       configurations methods scheduling        techniques artificial intelligence       measurement throughput cri•   seldom used improve use         teria performance extremely difficult    computers programming process      problem area probably    primitive attempts early        amenable aid artificial intelli•    worse vast numbers         gence field specific indication    problems limited view          complexity programming field today    systems programming benefit            type problem eventually                                                                            session  applications       benefit heuristic techniques                   guage used stating wide                                                        variety problems solved   ii related existing work                            effectiveness methods solving         earliest work dealing realistic     problems problems   programming problem              solves unrelated programming ex•  friedberg    assumed exis•       ample shown changing values com•  tence tried develop          puter registers given existing contents   learning machine program           certain machine instructions   yield acceptable output each             pilot teitelman    input complement input bit ap•      makes automatic corrections certain errors   proach trial error feedback         lisp programs allowing user   given correctness result each       override automatic facility   case attempts develop learning                                                               use   programs campaigne                                                         formal integration somewhat different   arnold  dealt specifically                                                        types problems paper   finding program new                                                        deals development saint slagle    equivalent respect input output                                                       deserves mention makes particu•  program used modi•                                                       larly interesting relevant future   fied british museum approach kilburn                                                        later development sin moses    grimsdale sumner  developed program                                                       able replace heu•  produce programs                                                        ristic work saint algorithms    arithmetic  copy instructions                                                       provided great improvements speed   program considered acceptable pro•                                                       implies problems   duced sequence numbers satisfying                                                       appropriate heuristic techniques devel•  predefined criteria weak convergence                                                       oped study         simon  used approach sim•       partially replaced algorithms   ilar techniques gps develop heu•      actually efficient   ristic compiler constructed iplv   program stated input output require•        iii programming problems needing   ments success achieved                solving   simple cases work apparently                                                               section discusses number   developed                                                        programming problems need solution         deducom  primarily          amenable solution   concerned question answering did con•      improvement various techniques common   sider problem writing simple programs        artificial intelligence as•  solved small portion problem dealt        sumed programming problems fall   simons heuristic compiler                  category section iii  indicates char•                                                       acteristics programming problems         problem writing programs                                                        make suitable   stated inputs outputs considered                                                        attack artificial intelligence techniques sec•  recently green  waldinger                                                        tion iii  discusses specific prob•   deal problem provide simple                                                        lems divided main areas   practical illustrations techniques   closely related theorem proving        iii  characteristics programming prob  formal logic development               lems make suitable ai    describes theoremproving approach              techniques   automatic program synthesis                                                              phrase artificial intelli•       problem writing programs           gence techniques appears frequently   stated inputs outputs course closely      paper definition phrase deliberately   related concept proving validity   omitted reason avoid argu•  existing programs work       ment definition scope artificial   area lately shown londons bib•         intelligence techniques intuitively   liography                                      postulated situation                                                       number possible solutions problem        conceptually different approach used                                                       large small avail•  fikes refarf  con•                                                      able solutions   cern development input ian                                                      desired cases solution session  applications                                                                               required optimal according cri•       program application   teria facet ai techniques involve              problems interaction    selfimproving facilities programs      factors defined  language   needed immaterial ai         design   approach generality gps    expertise sin inherent            problems timing critical   formulation problems solu•         solutions reached minutes   tions     seconds process control traffic control   reasonable length time                problems lives stake    effect terms limiting class prob•       manned space flights air traffic con•  lems attacked                       trol         basic characteristics pro•   gramming problems make          iii  specific problems suitable applica•   suitable application artificial intelli•      tion ai techniques    gence techniques follows                           section describes specific          problem structured        programming problems amenable    method obtaining        solution improvement through use ai   basic solutions known devel•       techniques representative     oped people knowledgeable problem      means exhaustive  list problems    design large data files                       problems divided          problem             main areas  data structure organi•   large number potential feasible solutions     zation  program structure organization    vary time clear      improvement correction programs    easy practical way determining best     language noted    file layouts scanning algorithms    guise issue language keeps    compilers                                         cropping merely                                                        personal predilections author be•        addition having required           cause language means people    characteristics problems       communicate each com•   following elements suitable                puter idea mind person          individual cases users      needs language feeble inarticu•   individual treatment achieve best results    late language idea com•   error checking programs data        municate            reorganization program       iii  data structure organization    improve efficiency reduce errors    determined program             major practical problems    developed late rewrite     facing organization handling large    case sequencing computa•       quantities data commonly referred    tions specified necessarily     data bases data range highly    efficient                                structured information personnel infor•                                                       mation personnel information           individual modules algorithms           address social security number job    needed overall program available     identification salary education    proper selection right ones timecon•   amorphous frequently changing information    suming laborious obvious         location parts finished goods    routines access data modules self         delivery trucks financial status each    adjusting compiler                                furthermore todays environment         assumed programming       teleprocessing equipment terminals    problems fall cat•    common people large com   egories true cer•       pary want immediate  rapid    tain characteristics make problem           access information cases    unsuitable application current artifi•   structured data difficult ef•                                                       ficiently nonstructured    cial intelligence techniques                                                        data virtually impossible          broad problems require    intuition vast experience solve     overall systems design large                                                                            session  applications              problem involved     similarly logical data structure    way structure data each      changed based usage    case systems analysts data base man•                second major problem old    agers programmers involved        shame attacked    techniques use generally       involves classical decision    ad hoc based experience intuition        store information compute    just doing easiest            early days computing thought    analytic techniques avail•       tables trigonometric routines    able large numbers access methods        stored rapidly ascertained com•   data make clear way data     puters insufficient storage    prepared logically stored physically     numbers program value    stereotyped activity re•     particular trig function calculated    quires careful consideration complexity         needed modern day computers    problem partially illustrated      storage capacities orders magni•   need using file organization evaluation        tude greater time reevaluate    model forem simulation para•          classical problem solution    metric study file design    decision program    number possibilities file design      specification given problem    large analytic techniques      available equipment adjusted necessary    doing thorough study available       based experience    people machine time required pro•   hibitive case heuristic         iii   program structure organization    techniques fruitfully used reduce    solution space permit existing ana•            programming languages use today    lytic techniques applied smaller    tell se•   practical number cases              quence vary considerably                                                        information supplied         addition problem                                                        level sequencing    artificial intelligence field ways                                                         represented conclusion reached    developing  program                                                        thib author definition nonproce•   determine best way store                                                        dural language relative state    data depending potential usage                                                        art languages compilers problem    real key phrase depending                                                        dealt allow major    potential usage information                                                        minor decisions program organization    practise used batch environment                                                        intelligent case    limited number people termi•                                                       higher level languages compilers    nals handled today com•                                                       decisions    binations possibilities large                                                        example detailed code sequences alloca•   difficulties set problem bro•                                                       tion memory manipulation registers    ken specifying ways                                                        decided compilers    data used describing data                                                        fairly rigid way things need    specifying constraints means                                                        compilers    objectives allowing program    produce optimum data layout objec•              compilers able accept    tives specified furthermore program          higher level language decide    include learning facilities    structure program example    data automatically reorganized based     problem calculate square root    practical experience users changes       prime numbers      constraints objectives example      print columns essen•   large company set data manage•         tially main organizational approaches    ment based assumption on•        each odd number turn      line access data equally required   immediately test primeness    places country actual expe•       immediately calculate print square root    rience show locations         each prime number major orga•  used online facility program        nization test odd numbers   builtin learning facilities monitor       create list prime numbers each   usage automatically readjust physical        prime number produce list numbers   data organization produce greater efficiency     printed finally printing                                                        bit obvious session  applications                                                                               efficient organization depends entirely    developing module libraries lie primarily    configuration           finding methods describing module    greatly simplified version practical      know select specify•   problem encountered author     ing interfaces allow modules devel•   program structure used        oped different people different purposes    second reduced running time       pulled program     factor   cases like pro•                                                               considering operating    grammer allowed                                                        use ai techniques enable automatic    specify sequencing needed log•                                                       reassignment data installation dif•   ically   compilers                                                        fering storage devices selfimprovement    capable accepting sentence                                                        based continuous changes    cited unlikely compiler                                                        individual programs experience    use                                                        general job stream furthermore heu•   organizational approaches  com•                                                       ristic analysis job mix enable fre•   piler surely single builtin                                                        quent reorganization operating    method heuristics                                                        achieve best performance individual    determine best                                                        installation           major programming efforts                                                                major systems program•   systems programmers compilers oper•                                                       ming activities cited application    ating systems cases major design                                                        ai techniques compilers far easier    objective modularity  program                                                        initially compilers     designed small units each     large  order magnitude smaller    replaced affecting com•      operating systems better    pilers generally designed achieve        understood point time    major objective  speed compilation      illustration small example improve•   speed object code minimum storage ob•       ment operating multics    ject code maximum error checking sel•        project mac  experimenting    dom does user choice needs         inclusion algorithm doing pre•   tackled artificial intelligence      dictive paging  guess pages    view create selforganizing compiler       needed based history partic•    provide modules compiler    ular program bring experi•   task each using different tech•       ence shows slight gain performance    niques bring intelli•     doing    gent fashion depending needs par•   ticular user program compiled prob•               general sense understanding    ably compilations          program permit reorganization    way capability available        manner effective equipment    heuristic techniques applied      hardware software available con•   ways select indicated     crete situation involving parallel processors    best set modules particular compila•     rearrangement program heuristic    tion information needed selection     techniques eliminate need special    include constraints priorities       language features denote parallelism    user compilers knowledge cur•      numerous proposals    rent operating environment history      sre example  bibliography    particular user alternate use heu•   ristics involve quick dirty scan      iii   improvement correction pro•   source code combined in•               grams    formation type available               program solves spe•   production effective compiler     cific problem possible    represents compiler generator new       program improve    type                                               possible rewrite           use artificial intelligence       problem program better efficiency    select right modules compilers      example consider earlier state•   confused classical programming      ment calculate square root    problem developing module libraries       prime numbers      solved ai un•     print columns coded    likely assistance problems       current language way indicated 
