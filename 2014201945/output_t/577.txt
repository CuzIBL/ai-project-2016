                                  defense pddl axioms                         sylvie thiebaux                   jorg hoffmann bernhard nebel                  sciences laboratory                      institut fur informatik                australian national university                  universitat freiburg                  canberra act  australia                 freiburg germany                   sylviethiebauxoanueduau            lastnameinformatikunifreiburgde                            abstract                          basic relation affected intuitive way up•                                                         date transitive closures body pddl action       controversy explicit sup•                                                         easy axiomatize recursively means pddl       port pddllike axioms derived predicates                                                          axioms  power flow example       needed planners handle realworld domains       effectively researchers deplored      common criticism original pddl axioms       lack precise semantics axioms   semantics illspecified condi•      argued best compile tions truth derived predicates       away propose adequate semantics    uniquely determined unclear remedy pro•      pddl axioms show essential    viding clear semantics pddl axioms remaining       feature proving impossible compile consistent original description  particular       away restrict growth plans   identify conditions arc sufficient ensure ax•      domain descriptions polynomial re•    ioms unambiguous meaning explain       sults suggest adding reasonable implementa• conditions efficiently checked       tion handle axioms inside planner benefi•  common view axioms nonessential       cial performance experiments confirm  language feature better compile away       suggestion                                   deal explicitly compilation offering advan•                                                         tage enabling use efficient simple standard                                                          planners specific treatment    bring new    motivation                                           insight issue evidence axioms add signif•  uncommon planners support derived predi• icant expressive power pddl expressive power   cates truth current state inferred measure concisely domains plans   basic predicates axioms closed expressed formalism use notion compilability   world assumption basic predicates appear ef• analyse  turns axioms essen•  fects actions derived ones used precon• tial feature impossible compile away  ditions effect contexts goals planners family provided require domain descriptions grow   include partial order planner ucpop  htn plan• polynomially plans grow polynomially   ner shop  heuristic search planner gpt  size original plans domain descriptions course   cite original version pddl  inter• allow exponential growth compilations   national planning competition language featured possible specify transformation un•  axioms derived predicates like previously published    works re•  used competition events did survive pddl striction mentioned results suggest   extension language temporal planning     efficient deal axioms inside     unfortunate lack axioms impedes abil• planner compile away fact experiments   ity elegantly concisely represent realworld domains ff  suggest adding simple implementa•  domains typically require checking complex conditions tion axioms planner clearly outperforms original   best built hierarchically elementary con• version planner solving compiled problem   ditions state variables increasingly abstract ones   axioms preconditions effect contexts quickly  syntax semantics   unreadable postconditions forced include   supervenient properties just logical consequences remain sequential planning setting pddl   basic ones—that extra actions need level  essentially version pddl   introduced action descriptions customised adl actions used  planning competition    axioms provide natural way capturing effects ac• description syntax clarity consider   tions common real world structures paths flows types axioms conditions numeric   need reason transitive closure                                                            respect pddl axioms offer advantages use     proofs theorems appear techreport purely logical axioms original version strips    http  cslanueduaumhiebauxpaperstrarppdi       planning                                                                                                                                                       derived predicate occurs negated nnf                                                          antecedent axiom single stratum suffices                                                          planning papers considered special case                                                               working through successive strata applying axioms                                                          order each stratum fixed point reached                                                          proceeding stratum leads                                                          final fixed point independently chosen strati•                                                         fication   final fixed point                                                          meaning axiom set                                                            spell semantics formally                                                          finite domain functions wc identify objects   state unlike traditional implications derivations domain ground terms constants denote   contraposed negation  derived states finite sets ground atoms precisely   negation derived true state taken set ground basic atoms derived   false closed world assumption closed world ones treated elaborate descriptions basic   assumption need explicitly derive neg• state order define semantics need   ative literals constraint consequent axioms consider extended notion state consisting set   positive literals does make lose generality basic atoms arbitrary set atoms derived     sum axioms essentially function free logic pro• vocabulary modeling conditions extended states   gram statements  example basic predicate just ordinary ones order logic   predicate holding blocks world define relationship denotes   predicate clear follows                       vector variables denotes vector ground terms                                                          define         planning context natural convenient re•  strict attention socalled stratified axiom sets—stratified   logic programs avoid unsafe use negation un•  ambiguous wellunderstood semantics  idea   stratification derived predicates   defined terms basic ones possibly using negation   terms allowing recursion   using negation abstract predicates defined   building possibly using negation   terms negation   stratified axiom set partitionable strata way   negation normal form nnf antecedent   axiom defining predicate belonging given stratum uses   arbitrary occurrences predicates belonging strictly lower   strata positive occurrences predicates belonging   stratum basic predicates used freely                                                          following pddl planning domain de•                                                         scription tuple                                                          set constant symbols set basic predicates                                                          set derived predicates stratified axiom set                                                          definition  set action descriptions                                                          mentioned restriction appearance atomic effects                                                          symbols pddl planning instance task                                                          tuple domain description                                                          initial state set ground basic atoms                                                          goal descriptions formula respectively result                                                          applying action basic state constitutes                                                          valid plan sequence actions given planning task                                                          arc defined usual way  modeling re•                                                         lation definition  used place usual                                                          pddl domain description planning instances mean                                                          axioms derived predicates pddl                                                          domain description form                                                            use compilation schemes  translate pddl                                                          domain descriptions pddl domain descriptions                                                          schemes functions translate domain descriptions be•                                                         tween planning formalisms restriction                                                          computational resources constraint target do•                                                         main polynomially larger original     modeling relation used applying action   state check preconditions effect contexts de•  termine satisfies goal change   introduced axioms semantics pddl   completes statement semantics rest carries   verbatim      checking axiom set domain description   stratified computing stratification poly•  nomial time size domain description using algo•  rithm  algorithm starts building matrix   follows axioms   predicate stratum strictly lower predicate   stratum stratum lower    stratum necessarily strictly   constraint strata lines    filled values encoding status strict   base constraints obtained direct examination   axioms lines  consequences base con•  straints arc computed similarly compute   transitive closure relation lines  exists   stratification iff strict relation encoded irreflexivc                                                            practical point view regard compilabil•  iff line  case                                                          ity preserving plan size linearly indication target   stratification corresponding smallest preorder consis•                                                         formalism expressive source formalism   tent extracted predicates lowest                                                          conversely superlinear blowup plans target   stratum consistent lines                                                           formalism required indicates source formal•                                                         ism expressive target formalism—a planning    axioms add significant expressive power              algorithm target formalism forced gener•  clear axioms add expressive power ate significantly longer plans compiled instances making   pddl order determine power added probably infeasible solve instances plans re•  use compilability approach  basically quired grow superpolynomially increase   want determine concisely planning task expressive power dramatic incidentally exponential   represented compile axioms away furthermore growth plan size necessary compile axioms away   want know long corresponding plans   compiled planning task                       use slightly simplified definition compilability                                                             size instance domain description plan de•     denote cardinality set              noted       planning    order investigate compilability pddl    pddl analyze restricted planning problems   jstep planning problem polynomial step plan•  ning problem problem   exists step plan solve planning task   problem exists plan polynomially sized   fixed polynomial representation domain   descriptionfrom results computational complex•  ity pure qatalog datalog stratified negation    theorem immediate   theorem  step planning problem pddl   exptimecomplete axioms pure datalog     consider pddl planning tasks turns   planning problem considerably easier allow   polynomial length plans guessing plan poly•  nomial size verifying easily polynomial   space polynomial step pddl planning problem obvi•  ously pspace taking addition vardis  result   account firstorder query evaluation finite database   pspacecomplete hardness follows   theorem  polynomial step planning problem pddl   pspacecomplete     statements follows immediately   unlikely exists polynomial time compilation   scheme pddl pddl preserving plan size polyno•  mially possible solve prob•  lems requiring exponential time polynomial space   considered quite unlikely argued nebel    want make claims expressiveness   computational resources compila•                                                         planning task  scheme  restricted   tion scheme account allow computationally un•                                                                  pure datalog axioms   constrained transformations interestingly allowing   unconstrained compilation schemes changes  interesting contrasting approach davidson                                                          garagnani  propose compile pure datalog ax•  theorem  unless exptime  pspace compi•  ioms solely conditional effects means re•  lation scheme pddl restricted pure data log sulting plans exactly length   axioms pddl preserving plan size polynomially      implied theorem  domain description suffers                                                          superpolynomial growth   proof sketch use proof idea similar kautz   selman  used prove approximations logi• specify generally applicable compilation scheme   cal theories certain size likely exist producing polysize instances use base•  using datalog theory order instances line performance evaluation contrast schemes   linearly bounded alternating turing machine accep• mentioned complies stratified semantics   tance problem certain size general form specified section  dealing negated occurrences   exptimecomplete  polynomial advice string derived predicates planning task    compilation scheme pddl pddl preserv•  ing plan size polynomially exists imply ex•  ptime pspacepoly karp uptons    results implies exptime  pspace    compilations exponential results   impossible concise equivalent pddl plan•  ning instance guarantees short plans possible   come polysize instance expo•  nentially longer plans worst case compilation   schemes described gazen knoblock    garagnani  severe restrictions use     negated derived predicates specifically schemes remains true negation compiled away   work negated derived predicates appear gazen knoblock method                                                                                                     planning encodes each stratum extra action stratum lines  transforms each axiom  derived    figure  applies axioms stratum operator parameters preconditionand   parallel records effectwith flag set distinguish normal   new new derived doing each operator uuring relaxed planning process ff per•  encoded universally quantified conditional effect forms obtain heuristic function axiom actions   stratuml—see lines  ensure precedence be• treated normal actions chosen inclusion   tween strata respected stratum applicable relaxed plan heuristic value counts   fixed point previous stratum reached number normal actions relaxed plan during for•  ixedi fixed point current stratum ward search ff performs normal actions considered   fixedi—see line  encodes each application action axiom actions   fixpoint computation each stratum using extra action applied obtain successive fixed points associated   fixpoint applicable round stratification computed algorithm    applications stratumt donez true asserts domain chose experiments usual   fixed point reached fixedj blocks world bw  operators contrast   new derived during round re• common benchmarks bw natural distinc•  sets new don round—see lines  tion basic derived predicates particular bw   precondition effect each action description common benchmark domain aware   augmented follows lines          stratification axioms requires stra•  highest stratum derived predicate appearing tum basic predicates ontable de•  precondition  predicate rived ones holding stratum    applying make sure fixed point clear handempty stratum  axiomatisations   stratum computed adding ixed precon• use negation holding used goal   dition similarly let  lowest stratum         descriptions experiment labelled bw fig•  predicate antecedent axiom ures generated  random initial states each       modified effect  size   took goal block initially   applying wc need recompute fixed points table initially   strata effect reset fixed note expressing resulting goal using ontable   value derived propositions strata require exponential space highlighting   finally holds initially goal re•  utility derived predicates shown figure me•  quires true fact preserves domain    dian runtime shows significant improvement   description size polynomially bounds given theo• fff plans ff experiment   rem  follow directly construction          order magnitude longer     obvious plan planning task ii experiment labelled bw shows  spe•  recovered plan compiled planning task   cial case instances initial state   fh simply stripping occurrences stratum tower improvement run time dramatic   fixpoint actions worst case course    finds optimal plans length linear   polynomial                         domain ran experiments challenging   worstcase obtained initially each ac• power supply restoration psr benchmark  de•  tion derived predicates need recomputed rived realworld problem area power distribu•  proposition derived application tion domain description requires number complex   stratum actions planner able interleave recursive derived predicates axiomatize power flow   fixpointt actions possible stratum ac•  considered version benchmark   tions leads plan length            uncertainty goal resupply resuppliablc                                                          lines each number  feeders generated    denotes set instances predicates random networks maximum  switches feeder   observe polynomially bounded         faulty lines figure compares                                                          median run times fff function                                                          improvement performance resulting han•   planning axioms                    dling axioms explicitly undeniable experiment   absence polynomial time compilation scheme pre• plan length does vary parameters   serving plan size linearly indicates axioms bring random instances generation clustered    needed expressive power suggests ex• actions instances  compiled   tending planner explicitly deal axioms lead instances makes difference   better performance using compilation scheme solvable reasonable time   original version planner confirm hy• domains experiments   pothesis extended ff planner  straight• means chosen show worstcase compilation   forward implementation axioms—we extension scheme illustrate drawbacks dif•  ff —and compared results obtained ff pddl in•    ference performance observe facts   stances obtained ff pddl instances pro• compilation increases branching factor increases plan   duced compilation                          length obscures computation heuristic       planning 
