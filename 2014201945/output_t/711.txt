 backtracking procedures hypertree hyperspread connected hypertree                                       decomposition csps                           sathiamoorthy subbarayan henrik reif andersen                                     university copenhagen                                                  denmark                                              sathihraitudk                        abstract                          problem mat  show hyperspread width                                                        bounded hypertree width spread cut width      hypertree decomposition shown  gives simple positive answer open problem ex      general csp decomposition method       periments instances hypertree connected      far exact methods able    hypertree decomposition methods result ﬁnding optimal      ﬁnd optimal hypertree decompositions realistic decompositions instances previous meth      instances present backtracking procedure    ods ﬁnd optimal decompositions instance      isomorphic component detec     experiments given time limit      tion results optimal hypertree decompositions stances able obtain connected hypertree decom      make procedure generic variations position width small obtained hypertree      results new tractable decompositions decomposition ﬁnally state open problem      hyperspread connected hypertree show      connected hypertree width instance equals hy      hyperspread width bounded pertree width      hypertree width spread cut width                                                          section lists necessary deﬁnitions section       solves recently stated open problem ex                                                        presents backtracking procedure deﬁnes isomorphic      periments realistic instances meth                                                        components generic procedure variants pre      ods ﬁnd optimal decompositions                                                        sented section  section  presents experi      previous methods ﬁnd                                                        mental results section  concludes paper    introduction                                                           deﬁnitions  csp decomposition method dm tractable ﬁxed  determining dmwidth csp instance constraint satisfaction problem instance csp triple  takes polynomial time csp instances hav dc set variables set domains  ing dmwidth solved polynomial time set constraints variable vi ∈  method dm general method dm values ﬁnite domain di ∈ daconstraint ci ∈  csp instance classes having bounded dmwidth pair siri si ⊆ scope constraint ri  bounded dmwidth viceversa likewise dm relation sitheri restricts allowed combination  better dm dmwidth instance values variables si assigned solution  dmwidth instance dmwidth smaller csp assignment values variables  dmwidth tractable decomposition csp assignment restricted scope si belongs  methods freuder  dechter  gyssens et al  relation riacspissatisﬁable solution  gottlob et al  hypertree decomposition csp  shown general gottlob et al  constraint hypergraph csp dc hyper  exact procedure hypertree decomposition able graph set nodes hypergraph  handle instances realistic sizes mainly huge set variables csp each  preprocessing existing exact methods gottlob et al siri ∈ edge called hyperedge   harvey ghose                         ei ∈ ei  si  si  siri ∈    ﬁrst present backtracking procedure hypertree just term hypergraph refers constraint  composition identify isomorphic components hyper hypergraph set edges ⊆ let term  graph use speedup procedure generalize varsk  e∈k union variables occurring  procedure variations results new tractable edges set variables ⊆  let term  decomposition methods hyperspread connected hy  edgevarsl  varse  ∈ ee ∩  ∅  pertree finding tractable decomposition better hy variables occurring set edges each edge  pertree decomposition recently stated open set contains variable                                                    ijcai                                                       tree decomposition robertson seymour   ααcomp kdecomposable using kedge β  dechter  hypergraph eisapairtd γ exists hd’ λrβ  na tree γ mapping each procedure addgood used add tuple αα  node ∈ associates γn ⊆  additionally tree compβccs set goods pair ααcomp  composition satisfy properties  ∀e ∈ ∃n ∈ decomposable using kedge βthesetccs tu  ⊆ γnand∀v  ∈  nodes  ∈ nv ∈  ple denotes elements βcomps contained αcomp  γn induces connected subtree ahypertree gottlob similarly procedure addnogood used add pair  et al  hypergraph triple χλ ααcomp set nogoods pair ααcomp  naisarooted  tree χ λ mappings kdecomposable procedure isgoodααcomp returns  associate each node ∈ χn ⊆ andλn ⊆ true iff tuple form ααcompβccs exists                                      subtree thenχt   n∈n  χn set goods similarly procedure isnogoodααcomp  let term tn denote subtree rooted node ∈ turns true iff pair ααcomp exists set nogoods  let term nodest   nthewidth hypertree    procedure decompose takes ααcomp pair  χλismax λnn ∈ nodest                  returns true iff ααcomp kdecomposable    hypertree decomposition gottlob et al  hy line procedure ﬁnds cv set variables through  pergraph hypertree hd χλ sat αcomp connected rest variables  isfy three properties  χ tree decomposition hypergraph loop begins line iterates  h∀n   ∈ nodest  χn ⊆ varsλnand    kedge β varsβ ∩ αcomp  ∅and  ∀n ∈ nodest  χtn ∩ varsλn ⊆ χnthehyper   cv ⊆ varsβ β varsβ  tree width denoted htwh minimum width contains variable αcomp cv contained  possible hypertree decompositions           varsβ set ccs line set elements β    simplify presentation assume comps contained αcomp necessary  nected given set variables ⊆  vari consideration decompose procedure  ables ∈ thevariablesm padjacent    internal loop starting line decompose checks  ∃e ∈ mn ∈  ep  set variables ⊆ βcc pair kdecomposable variable suc  pconnected variables ∈ qthereis cess true line iff each cc ∈ ccs  sequence variables  lllr−lr  nsuch pair βcc kdecomposable decomposeβcc  each ∈ r−  li li adjacent line iff calls isnogoodβcc  set variables ⊆ pcomponent pcomp isgoodβcc return false makes sure ββ  short maximal connected subset letp comp pair decomposeββcomp  components pcomps short denote set containing line variable success set true  pcomponent                                  tuple ααcompβccs added set goods    given integer α ⊆ α kedgeifα≤k procedure returns true loop line contin  let set kedges  α  α ⊆ eα≤kietheset    ues kedge choice β choices β  containing kedge given kedge αanαcomp line exhausted success procedure  varsαcomp size αcomps contains adds ααcomp pair set nogoods line  αcomp easforeveryαcomp edgevarsα   returns false  comp uniquely contain edge ∈ egivena case decompose∅v  line proce  set variables ⊆ thesubhypergraph induced dure isdecomposable returns true hypertree decompo                                      hypergraph    ∩  ∈ sition hd built returned message ’not  let pair form ααcomp α kedge kdecomposable’ meaning hypertree width eis  called kedgecomponent                         larger returned line procedure root                                                        node created tuple form ∅v βccs ob    backtracking procedure                         tained set goods entry β tuple cor                                                        responds kedge used during ﬁrst  procedure shown figure  main procedure cursive decompose procedure λr set βby  decomposable takes pair input output deﬁnition hypertree decomposition root node  hypertree decomposition htwv ≤ kotherwise χr  varsλr χr set varsβ  message ’notkdecomposable’                     lines each cc ∈ ccs child node created    given kedgecomponent ααcomp say pair buildhypertree βccr procedure buildhy  ααcomp kdecomposable iff subhypergraph pertree fact recursively calls extracts  duced nodes edgevarsαcomp hypertree set goods subtree rooted child vertex line  composition hd’ width root procedure returns hypertree decomposition  node hd’ rthenedgevarsαcomp  αcomp ⊆ χr                                                        theorem  isdecomposablehk returns hypertree  essentially notion kdecomposable tells                                                        composition iff htwh ≤  subhypergraph decomposed hd’ width  hd’ used block building proof theorem follows fact  composition hypergraph pair ∅v  procedure essentially backtracking version opt  kdecomposable iff htwv ≤ say kdecomp gottlob et al  procedure hypertree                                                    ijcai                                                      set goods  ∅ set nogoods  ∅ hypertree hd  λχ                                                             isgood tt             α α                                              ∀ twtxtytz ∈ goods   decompose   comp                                                    cv  varsα ∩ edgevarsαcomp                              return true                                                              return false    ∀β ∈ kedges varsβ ∩ αcomp  ∅ cv ⊆ varsβ       ccs  cc  cc ∈ βcomps cc ⊆ αcomp                                                              isnogood tt       success  true                                                              ∀ txty ∈ nogoods       ∀ cc ∈ ccs                                                                          β                                           return true          isnogood cc success  false          return false          isgoodβcc continue          decomposeβcc continue                                                             addgood tttt          success  false                                                              goods  goods ∪tttt       success addgoodααcompβccs return true    addnogoodααcomp return false                                                             addnogood  tt                                                                                ∪t    isdecomposable ek                                  nogoods  nogoods                     ∅    decompose                                 buildhypertree ααcomps      add root node  ∅v βccs ∈ goods            α α      β    ∈        λr β  χr     β                                      comp ccs goods                 vars                                  add node child node      ∀ cc ∈ ccs                                              λt β  χt     β  ∩        α                        β                                             vars  edgevars comp         buildhypertree  cc                             ∀ cc ∈ ccs      return hd                                               buildhypertree βcct    return ’notkdecomposable’                    figure  pseudo code backtracking procedure hypertree decomposition    composition optkdecomp procedure suffers deﬁnition ∀e ∈ ⊆ edgevarscomp ⇒ ecomp ⊆ α  huge preprocessing cost given optkdecomp comp ∩ varsα∅ implies during  implicitly ﬁnds possible decompositions width decomposeαcomp set cv  edgevarscompcomp  extracts optimal backtracking proce set cv remains during calls  dure stops soon discovers decomposition width decomposeαcomp decomposeαcomp’  procedure able stop quickly proof  decompositions width                                                          each set isomorphic components need make                                                  theorem  time complexity isdecomposable   decompose using isomorphism      ek                                                number calls decompose reduce signiﬁcantly  proof time complexity dominated decompose  during decompose loop choices β  variants hypertree decomposition                      iterates oe  ccs esince figure  presents pseudo code generic decom  each kedge results kedgecomponents position procedure isdecomposablege based hyper                                         total number kedgecomponents oe  cost tree framework changes generic pro                                             each isnogoodisgood oe  time cedure earlier procedure figure  change  size goodsnogoods number generic version able detect isomorphism  kedgecomponents ignore cost calls decompose set  addgoodaddnogood  contribution complex isomorphic components second change line  ity dominated cost each decom procedure decompose code β ∈ kedges                                        pose oe   oe  calls  old procedure replaced βqβ ∈ Ω  decompose each kedgecomponent generic version each element set Ω pair  time complexity procedure isdecompos form βqβwhereβ ∈ kedges qβ ⊆ varsβ              able oe                                       places varsβ wasusedintheoldproce                                                       dure qβ used generic procedure set Ω    given kedgecomponents αcomp α comp’                                                        ﬁnes each β ∈ kedges allowed subsets varsβ  isomorphic comp  comp’                                                        used decomposition essentially allow  theorem   given isomorphic pairs αcomp ing subsets varsβ considered obtaining                                          α comp’ αcomp kdecomposable iff α comp’ composition obtain generic procedure note pro  decomposable                                         cedures isgood addgood isnogoodandaddnogood                                                         listed figure  old versions nat  proof deﬁnition comp  comp’ dif urally modiﬁed work generic framework let  ference calls decomposeαcomp decom   Ω      α    α  α ∈            α                           α     α             set  htd        vars           edges wehavethe  pose comp’ ﬁrst parameters indecom  following theorem  pose distinction α α importance                                                                           ΩΩ                          line set cv calculated show cv theorem  htd isdecomposablege    independent αsinceαcomp kedgecomponent returns hypertree decomposition iff htwh ≤                                                    ijcai                                                                                                                                             ∅             ∅             λ χ                isdecomposablege       set goods   set nogoods   hypertree             decomposev                                                                 add root node  βqβccs ∈ goods   decompose comp                                               λr  β χr                                                                            β    cv  edgevarscomp comp                                  ∀ cc ∈ ccs    ∀βqβ ∈ Ωqβ∩ comp  ∅ cv ⊆ qβ                                                           ∈         ⊆                              buildhypertree cc        ccs  cc cc     β comps cc comp                      return       success  true                                       return ’notkdecomposable’       ∀ cc ∈ ccs          isnogoodcc success  false           buildhypertree comps          isgoodcc continue                                                              compβqβccs ∈ goods          decomposecc continue             add node child node          success  false                                λt β  χt  ∩                                   β                                   β  edgevarscomp       success addgoodcomp  β ccs return true  ∀ cc ∈ ccs    addnogoodcomp return false                            buildhypertree cct                 figure  pseudo code generic procedure decomposition hypertree framework      hyperspread decomposition                        determining hsw csp ≤ takes polynomial  unbroken guarded block ugblock cohen et al  time hyperspread decomposition tractable                                                          state hyperspread width bounded  pair αqα α ⊆ qα ⊆ varsα satisfying                                                        hypertree width spread cut width  conditions  ∀ee ∈ α ∩ ⊆ qαand  each qαcomp nonempty intersection theorem  hswh ≤ htwh hswh ≤ scwh  varsαcomp size ugblock αqαisα                                                        proof conditions deﬁnition hypertree    α ⊆   ∈ letthelabel lαv                                                        decomposition implies ∀n ∈ nodest  ∃α qα ∈  cc  cc ∈ αcomps ∈ edgevarscc ugblock                                                        Ωhtdλnα χnqα        ∩ χtnsinceforanyk  αqαiscanonical ∀e ∈ α ∀vv ∈ eqαlαv    Ω    ⊆ Ω      Ω                                           htd    hsd each hypertree decomposition hyper   α   let  hsd set sized canon                         ≤                                                       spread decomposition hsw   htw      ical ugblocks    note deﬁnition canonical second condition deﬁnition spread cut implies  ugblocks Ωhtd ⊆ Ωhsdgivenk canonical ugblock                                                        ∀n ∈ nodest  ∃α qα ∈ Ωhsdλnα χn  αqα α≤k let triple form αqαqα                                                       α each spread cut hyperspread decom  comp  called spreadcomponent shown position hswh ≤ scwh  cohen et al  exists  kspreadcomponents notion isomorphism   recently mat  existence tractable  naturally extended kspreadcomponents given composition better hypertree decomposition stated                                      spreadcomponents αqαcomp α qα comp’they open problem cohen et al  family hy  isomorphic comp  comp’                     pergraphs hnforn     presented    spread cut cohen et al  hypergraph hypertree width hn spread cut  hypertree sc  λχ satisfying conditions  width note known  χ tree decomposition hand∀n ∈ nodest  scwh ≤ htwhsinceforanyh hswh ≤ htwh  λnχn canonical ugblock spread cut width hswhn ≤ scwhn  htwhn  hyperspread decom  denoted scwh minimum width possible position gives simple positive answer open problem  spread cuts    hyperspread decomposition hypergraph    connected hypertree decomposition  hypertree hsd  λχ satisfying conditions connected hypertree decomposition hypertree decom   χ tree decomposition hand∀n ∈    position chtd  λχ satisfying conditions                                                                        λr            ∈        nodest  ∃α qα ∈ Ωhsdλnα χnqα       ∩    root node            andif     nodes  χtnthehyperspread width denoted hswh nonroot node parent node pthen∀e ∈  minimum width possible hyperspread decompositions λc ∃v ∈ χc ∩ χpv∈ second condition states                                                  nonroot node parent node each edge    variant isdecomposablegewehave        λc variable common                                                        χc χp conditions deﬁnition  theorem  ΩΩhsd    isdecomposablegehk                                       ≤          results signiﬁcant reduction branching choices  returns hyperspread decomposition iff hsw          procedure decompose show empirical results    arguments similar theorem  section support reduction let connected hy                                                        pertree width hypergraph denoted chtwh  theorem   ΩΩhsd time complexity                                                   minimum width possible connected hypertree  isdecomposablegehkisoe                                                              compositions deﬁnitions htwh ≤ chtwhitis    given hyperspread decomposition csp csp open problem chtwhhtwh  solved algorithm csp solving using hyper let Ωchtdcvα varsα  α ∈ kedges cv   tree decompositions gottlob et al alsoforaﬁxed ∅ ⇒ α  cv  ∅ ⇒ ∀e ∈ α ∃v ∈ cvv∈                                                    ijcai                                                                       instance                               exact methods                     heuristic                         size    arity   chtd    chtdnoiso bechtd      htd     htdnoiso                        μmax timewidth time width time width time width time width μt μw minw           cp                                          fischerfairsmt                            fischerfairsmt                           baobabdag                                          baobabdag                                          complexcp                                     dasdag                                                  ispdag                                        ispdag                                         largepartialcp                                          largecp                                              renaultcp                                       optimal                                                                      na               table  experimental results mean μ maximum arity instances listed    cv ⊆ corresponds connection variables refers ’chtd’ ’htd’ procedure detection  procedure decompose variant generic isomorphic components each method list best  decomposition procedure state following theorem width obtained cases able prove optimal                     ΩΩ                              ity entries width columns form k∗  theorem         chtd cv  connected hyper                                                 tree decomposition returned isdecomposablegeh tested heuristic ’be’ htdecomp tool  iff chtwh ≤                                      uses tree decomposition heuristics set covering                                                        heuristics obtain heuristic generalized hypertree decom    unlike previous variants generic decompo position ghtd gottlob et al  case ghtd                      ΩΩ                Ω  sition procedure    chtd cv theset  newly   condition deﬁnition hypertree decomposi  deﬁned during each decompose based connec tion violated randomized ran ex  tion variables cv                                    periments using ﬁve times list table mean    connected hypertree decompositions subsets time μt mean width μw best width minw  hypertree decompositions connected hypertree decomposi did experiments hybrid bechtd  tion tractable                                    ﬁve runs used ﬁrst obtain ﬁve ghtds                                                        best width ghtds obtained kbe                                                                                               experiments                                        chtd procedure invoked    benotethe                                                        best width decomposition hybrid bechtd  implemented presented backtracking procedures ghtd width smaller htwal  hypertree decomposition connected hypertree htdecomp tool heuristic choices  decomposition implemented hyperspread choose think best choice  decomposition procedure does easy im bechtd combination naturally extended  plement plan future experi initialization heuristic row optimal table  ments intel xeon ghz machine running lists number proven optimal width decompositions ob  linux gb ram use  instances ex tained each method note prove optimality query  periments constraint hypergraphs different                                                        corresponding kl needs return ’notkdecomposable’  sources ﬁve conﬁguration problems cp ﬁve time limit  fault trees dag smt instances smt                                                          exact methods listed table contribu  tools instances available online                                                        tions experiments using implementations    implementation given Ω ve                                                        previous exact methods optkdecomp improvement  ﬁnd optimal decomposition sequence queries                                                        optkdecomp redkdecomp harvey ghose   procedure isdecomposablegehk parameter                                                        exceeded time limit aborted cases  values sequence kkkl−klinthe                                                        naultcp redkdecomp took  seconds ﬁnd  sequence  query isdecomposablegehki                                                      optimal decomposition fact experiments  returns decomposition width thenki  −                                                         ing optkdecomp redkdecomp tools consisted  query isdecomposablegehki returns message                                                        query tool instance ’chtd’  ’notkdecomposable’  optimal width                                                                                  ﬁnds decomposition width  seconds  kl  small                                                        optkdecomp redkdecomp just asked ﬁnd  jumps sequence make results experi                                                                         composition width  experiments  ments listed table  experiments table                                                        favorable setting previous methods  time limit  cpu seconds legend                                                          table observe chtd procedure  ’chtd’ ’htd’ refers experiments ΩΩchtd  ΩΩhtd legend ’chtdnoiso’ ’htdnoiso’                                                           httpwwwdbaituwienacatprojhypertreedownloadshtml    httpwwwitudkpeoplesathiconnectedhypertree   httpwwwdsluoweduau˜harveyresearch hypertreesshtml                                                    ijcai                                                     
