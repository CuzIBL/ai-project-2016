                grounding model expansion              kguarded formulas                                      inductive deﬁnitions                    murray patterson yongmei liu eugenia       ternovska arvind gupta                                       school computing science                                      simon fraser university canada                                    murraypy  liuterarvindcssfuca                        abstract                          nents general purpose programming languages                                                        purely declarative asp emerged logic pro      mitchell ternovska  proposed     gramming based stable model semantics gel      straint programming framework based classical  fond lifschitz  main advantage asp      logic extended inductive deﬁnitions language allows implicit use quantiﬁers      mulate search problem problem model   builtin recursion mechanism concepts      expansion mx problem expand   natural classical logic difﬁcult express asp      ing given structure new relations mitchell ternovska  proposed declarative      satisﬁes given formula longterm goal straint programming framework based classical logic ex      produce practical tools solve combinatorial tended inductive deﬁnitions cast search problems      search problems especially npinthis    classical problem model expansion mx      framework problem encoded logic    problem expanding given structure new relations      instance problem represented ﬁnite satisﬁes given formula longterm goal      structure solver generates solutions develop tools solving hard combinatorial search problems      problem approach relies propositionali  especially np framework problem en      sation highlevel speciﬁcations efﬁ coded logic ﬁrstorder logic fo extension      ciency modern sat solvers propose    fo problem instance represented ﬁnite struc      efﬁcient algorithm combines grounding    ture solver generates extensions initially unspeciﬁed      partial evaluation mx framework   predicates represent solutions problem      based classical logic able ad                                                          mx framework combines strengths      vantage known results socalled guarded                                                        three mentioned approaches addresses limi      fragments case kguarded formulas                                                        tations features include highlevel modelling language      inductive deﬁnitions natural restriction                                                        supports quantiﬁcation recursion clear sep      algorithm performs better naive ground                                                        aration instance ﬁnite structure problem      ing relying connections kguarded                                                        description formula importantly framework      formulas tree decompositions                                                        based classical logic making possible exploit                                                        existing results ﬁnite model theory descrip    introduction                                       tive complexity kolokolova et al  addition ax  np search decision problems occur widely ai mod iomatizations easier understand need rely  elling problems sat csp asp stable model semantics imitate ‘classical’  ing corresponding solver successful program common practice asp  declarative approaches practice solving prob key component building practical solvers mx  lems each approach valuable contributions framework propositionalisation grounding high  limitations modelling propositional logic level speciﬁcations use efﬁcient sat solvers  using sat solver oldest idea ﬁrst obtain ground formula contains ini  veloped approaches simplicity semantics tially unspeciﬁed predicates satisﬁable iff original  key driver success propositional mx problem solution propositional sat  logic provides poor modelling language isﬁability solver prototype solvers propositional  quantiﬁers recursion modelling prob mulas inductive deﬁnitions developed pelov  lem sat clear separation instance prob ternovska  mari¨en et al   lem description csp provides somewhat better modelling goal paper develop efﬁcient ground  capabilities csp solvers rely number solution ing algorithm mx framework frame  techniques nogood learning backjumping csp work based classical logic advantage  solvers success primarily compo sults known guarded fragments andr´eka et al                                                     ijcai                                                     gottlob et al  present polytime algorithm deﬁnition  extended xrelation let σa  grounding kguarded fo sentences inductive deﬁnitions set free variables formula φanextended  provided predicates guards initially speciﬁed xrelation set pairs γψ st  ψ                                                                              ˜  fragment igfk explained later ground formula ε ∪ γ  →  γ  striction necessary polytime grounding igfk ψ st γψ ∈r  tains terms expressive power sentences treewidth             practice sentences small treewidth extended relation intended represent unique                                                        mapping denoted δr possible instantiations  igfk small algorithm        onk                                        variables ground formulas γ’s appearing  runs       time size sentence                  false         γ ∈r  size structure                          associated formula  write    mean                                                        exists ψ γψ ∈r    grounding model expansion mx                 deﬁnition  answer φ wrt let φ formula  formulate search problems problem model ex σ ∪ ε free variables σstructure domain  pansion mx                                         extended xrelation awesayr   deﬁnition  mx given sentence φ ﬁnite struc answer φ wrt γ  → δrγ  ture vocabulary σ ⊆ vocabφ ﬁnd structure reduced grounding φγ ahereφγ denotes  expansion vocabφ φ     result instantiating free variables φ according γ  example let graph  eandletφ        example let φ  ∃x∃y∃zφ φ  z∧        ∀xrx ∨ bx ∨ gx ∧¬rx ∧ bx         ex ∧ eyz σ  andε   eleta                                                                                         ∧¬rx  ∧ gx ∧¬bx ∧ gx           σstructure                 ∀x∀yex ⊃ ¬rx ∧ ry                extended relation            ∧¬bx ∧ ∧¬gx  ∧ gy                                                                                ψ  let expansion vocabφthenb φ iff                     ∧   corresponds coloring                                           ∧     mx framework clear separation answer φ wrt easy example  problem instance ﬁnite structure problem description                                                        δr     ∧  reduced ground  formula grounding bring domain elements ing φ       ∧  ∧  syntax expanding vocabulary associating new                                                                                                δr    false reduced grounding φ     constant symbol each element domain following extended relation answer φ  ∃zφ  main denote set constants a˜ nota  tional conventions use σ denote instance vocabu                   ψ                                                                                  ∧    lary ε expansion vocabulary                                                                                                                         ∧   deﬁnition  reduced grounding mx aformulaψ                               φ       σ             example  ∧  reduced grounding  reduced grounding formula structure                                                             φ     σ   ψ ground formula ε ∪ a˜   finally following represents answer                                                    φ                                            φ  expansion structure σ ε  vocabφ  single formula reduced grounding   φ iff a˜b  ψwherea˜b denotes interpretation                    ψ                                                                     ∧   ∨    ∧    new constants a˜                                                           during grounding symbols instance vocabulary just relations databases algebra ieasetof  “evaluated out” reduced grounding obtained  operations semantics correspond connectives    obviously deﬁnition          fo logic deﬁne algebra extended relations  proposition  let ψ reduced grounding formula algebra consists join join complement projection  φ σstructure athena expanded model intersection union  φ iff ψ satisﬁable                             deﬁnition  join join complement let  through grounding model expansion problem extended xrelation extended relation  duced satisﬁability problem                   domain athen    grounding algorithm sentence deal  join extended ∪ relation                 φ                      φ  subformulas original sentence  contain      γψ  γ  ∪ → γx ∈r                     σ         free variables structure  compute formula  γy ∈s  ψ  δrγx  ∧ δs γy   ψ each instantiation free variables φ                                                           join complement extended  each ψ reduced grounding φ corresponding                                                                    φ         ∪ relation   γψ  γ  ∪ →  instantiation representation answer γ  ∈r      ψ  δ  γ  ∧¬δ γ   wrt compute answer formula computing                            answers subformulas combining according proposition  suppose answer φ  connectives represent answers introduce answer φ wrt structure                                                                                             concept extended relation extending notion answer φ ∧ φ wrt ar  answer  relation relational database theory            φ ∧¬φ  wrt                                                    ijcai                                                     deﬁnition  projection let extended gfksentences kguarded nonrecursive stratiﬁed dat  relation ⊆  xthey    projection denoted alog nrsd programs                                                  πy extended yrelation γ ψ  γ     fragment related gfk bounded variable frag                                                                        γy γ ∈rand ψ    γ∈rγ γ δrγ       ment fo – fo  denotes fo formulas use                                                                                                     φ          distinct variables kolaitis vardi  showed  proposition  suppose answer wrt     conjunctive queries fok expressive  set free variables ∃zφ¯ thenπy                                             ∃zφ¯                                        power conjunctive queries treewidth  gottlob  answer   wrt                                      et al  obtained similar logical characterization  deﬁnition  intersection union let ex notion hypertreewidth generalization treewidth  tended xrelations                              noted hypertreewidth bounded treewidth    intersection extended xrelation showed gfk expressive power fo sen                                                                                         r∩s      γψ   γ ∈rand    γ ∈s   ψ     tences hypertreewidth       δ γ ∧ δ γ                                                    deﬁnition  gfk kguarded fragment gfk fo    union extended xrelation r∪s  smallest set formulas st  gfk contains atomic      γψ  γ ∈ror  γ ∈s ψ  δrγ ∨ δs γ   mulas  gfk closed boolean operations  gfk                                                        contains ∃x¯g ∧ ∧ gm ∧ φifthegi areatomicformu  proposition  let φ φ formulas                                                        las ≤ φ ∈ gfk free variables φ appear  set free variables suppose answer φ                                                        gihereg ∧ ∧ gm  called guard φ  answer φ wrt  r∩sis answer  φ ∧ φ wrt ar∪sis answer φ ∨ φ wrt   note deﬁnition includes universal quantiﬁca                                                        tion  gfk closed negation note    traditional relational algebra projection                                                                                        mentioned complexity result o  ap  linear time join time linear sum                                                        plies kguarded sentences kguarded formulas gen  size input output relations detailed algorithms                                                        eral deﬁnition ¬rx guarded  proofs appendix flum et                                                        formula evaluated time  al  essential idea ﬁrst encode domain el                                                        complexity result applies strictly kguarded  ements appearing input relations natural numbers                                                        mulas deﬁned follows  sort encoded input relations using bucket sort al  gorithm compute projection join encoded deﬁnition  sgfk strictly kguarded fragment  input relations ﬁnally decode resulting output relation sgfk fragment gfk formulas form  implementation operations extended rela ∃x¯g ∧ ∧ gm ∧ φ  tions use idea need copy                                                        including degenerate cases x¯  formulas input relations output relation                               let extended xrelation size denoted leading existential quantiﬁer free variables                                                        guards φ true kguarded    sum size each pair γδrγ                                                        sentence strictly kguarded x¯       xr    γ∈r  δrγ wherer                                  δ  γ                 liu levesque  presented polytime algorithm  notes cardinality set size evaluating strictly kguarded formulas given structure  formula associated γ easy projec      φ ∈                                                    formula    sgfk algorithm computes  tion takes      time intersection union time swer φ wrt athatisγ φγ time onk       general join join complement                                        ·                                    reason considered strictly guarded formulas  time             grounding algo stead just kguarded sentences algorithm  rithm section perform                                                  recursively deﬁned section adapt algorithm          operation case set vari grounding formulas following fragment  ables subset formula true  formula size owhere size deﬁnition  rgfk rgfk denotes set strictly  formula grounded relation set guarded formulas expansion predicate appears  tuples resulting extended relation subset guard  operations time onwheren                                                          note restriction “no expansion predicate ap  size relation                                                        pears guard” necessary polytime grounding                                                        deed polytime grounding algorithm guarded    algorithm grounding fo formulas             sentences polytime reduction  guarded fragment gf fo introduced andr´eka sat mx guarded sentences com  et al  quantiﬁed subformula φ rel bined complexity problem nphowever  ativized guard atomic formula free vari nexpcomplete mx fo reduced mx  ables φ gottlob et al  extended gf kguarded guarded sentences kolokolova et al andthe  fragment gfk conjunction atoms act combined complexity mx fo nexpcomplete  guard proved kguarded sentences eval easy fok formula rewritten                   uated time o   size formula linear time equivalent rgfk using atoms  size structure proof transforming form  parts guards necessary                                                    ijcai                                                                                                                                     m  example formula ∃x∃yrx ∧ ex rewritten save deﬁnition ≡ ei inter  ∃x∃yrx ∧  ∧ ex ywherer instance mediate extended relation corresponding subformula  predicate expansion predicate extending rx ∧∃ysy ∧ ey table right  sult kolaitis vardi flumet al  showed size  fok expressive power fo formulas illustrate algorithm let φ formula                  treewidth  fo formula treewidth    ∃yzuvrx ∧ szuv ∧¬t v∧  equivalent rgfk prac                                                        ∃fghax ∧ bzgh ∧ ¬cf ∨ dx ∧ eyh  tice formulas small treewidth  rgfk small                               expansion predicates let                                                             grounding algorithm uses extended relations oper                                                                       ations φ atomic formula rt¯weuseφa                                                                                                  denote extended relation γtrue  t¯γ ∈ ra                                                                                                                                                               aφ                                       procedure gnd                                                       inputastructurea formula φ ∈ rgfk                   φ ∈                     φ                                    rgf underlined parts guards  outputananswerto    wrt                              push negation symbols inward  suppose φ¯x∃y¯g    ∧   ∧ gm  ∧ ψreturn      atoms existentials following ﬁgure represents                 πx¯gnda rψ wherer  ga    gmaand    sulting formula tree rectangular internal nodes  ψ result pushing ¬’s ψ inward stand guarded existentials circular internal nodes dis  atoms existentials                       junctions conjunctions leaves literals  procedure gnda  deﬁned recursively                 φ                                                yzuv          rxyz                   szuv        φ positive literal instance predicate      gnda rφr  φa           ¬            φ φ whereφ atom instance predicate      txuv      fgh axyf     bzgh      gnda rφr φa    φ literal expansion predicate                      ∈r      gnd   φ     γφ γ  γ                                               cfz           ∧         ∩         gnd     φ  ψ    gnd    φ   gnd    ψ                                    dxg    eyh           ∨         ∪         gnd     φ  ψ    gnd    φ   gnd    ψ        process existentials process    gnda ∃yφ¯  gnda ∃yφ¯                existential ﬁrst evaluate guard join                                                                                          gnda ¬∃yφ¯  gnda ∃yφ¯               operation process leaves  wrt guard                                                        relation using rules    ignd respectively result                                          onk    unfortunately running time gnd  guard relation joined complement  reason gnd generate intermediate ex  tended relations size onktoseewhyletφ                    ψ  guarded formula ∃xrx ∧∃ysy ∧ eywhere                             true  expansion predicate let structure                   true  ra     ≤ ≤ mandsa      ≤ ≤                     m                                 perform intersection conjunction union  obviously formula ei reduced grounding disjunction projection existential resulting  φ size onhoweverwhenweusegnd                                                                       ψ  intermediate extended relation corresponding sub                      ≡                                                                            formula rx ∧∃ysy ∧ ey size asshown                              ≡                                                                             following table left                                             ≡  true                                                                                              ψ                ψ                   wm                                   answer existential                    ei                             wm                                   process existential similar way ﬁnal answer                    ei                                                                  ψ                                                               ≡ ¬t    ∨¬p ∨ ¬t    ∨¬p                                                                          ei                                ≡ ¬t    ∨¬p ∨ ¬t    ∨¬p                                                                solve problem let ignd algorithm                                                        theorem  given structure formula φ ∈ rgfk  gnd following each pro                 φ       onk  jection operation replace each formula resulting ignd returns answer wrt   time                                                         size φ size ahenceifφ  extended relation new propositional symbol                                     φ      save deﬁnitions new symbols output sentence ignd returns reduced grounding   algorithm ﬁnal extended relation def proof sketch rewrite φ equivalent formula φ  initions new symbols instance pushing negations inwards correctness follows  example introduce new propositional symbol duction formula according algebra extended                                                    ijcai                                                     relations complexity each intermediate extended atoms interpreted deﬁned predicates appear ψlet  relation onk tuples each guard composed ϕ conjunction literals true according  atoms each formula size o interpretation ψ ∧ ϕ ﬁnal ground formula  introduction new propositional symbols complex passed satisﬁability solver restrict  ity analysis section  each o operations attention grounding deﬁned predicates  extended relations time onk        expansion predicates                                                          section extend algorithm section     grounding inductive deﬁnitions                     ground foid formulas following fragment  fo mx sufﬁcient modelling requires deﬁnition  igfk igfk extension rgfk  recursion recursion through negation solution inductive deﬁnitions each rule body  use foid logic fo extended inductive def rgfk free variables body appear head  initions denecker  denecker ternovska  rgfk foid formula distinct  fortunately adding inductive deﬁnitions does violate variables rewritten linear time equivalent  main complexitytheoretic results mitchell ternovska igfk show rewrite each rule   kolokolova et al                        satisﬁes restriction deﬁnition    syntax foid fo extended rule each appears head body add   saying inductive deﬁnition id formula id body body uses distinct                                 ¯  Δ set rules form ∀x¯xt ← φwherex variables rewritten rgfk  predicate symbol t¯ tuple terms φ arbitrary ﬁrst present procedure grounding ids  fo formula connective ← called deﬁnitional im                                                        procedure gndida Δ  plication rule ∀x¯xt¯ ← φ xt¯ called head                                                        inputastructurea andanidΔ   ∈ igfk  φ body deﬁned predicate foid formula                                                        outputananswertoΔ    wrt  predicate symbol occurs head rule                                                                                           ¯  id semantics foid fo extended each rule Δ suppose ∀x¯xt ← φletΔr                                               Δ          ¯  additional rule saying structure satisﬁes id xtγ ← ψ  γψ ∈ igndaφreturn r∈Δ Δr  valued wellfounded model Δ deﬁned                                                          illustrate procedure let Δ id  context logic programming van gelder et al                                           ﬀ    example problem ﬁnding transitive closure          ∀x∀yt xy ← ex  graph conveniently represented mx prob    ∀x∀yt ←∃zcy ∧ ex ∧ zy  lem foid formula consists deﬁnition                            Δ  ∈  rules deﬁning predicate  instance vocabulary expansion predicate igfnote  single predicate representing binary edge relation purpose illustration use cy instead                                          ﬀ            second guard produce                 ∀ ∀      ←                                                                                     xy                      small grounding let     andc            ∀x∀yt xy ←∃zex ∧ zy                                                         gndida Δ proceed follows  states transitive closure edge set  igndaex  relation containing edges closed reachability  ignda ∃zcy ∧ ex ∧ zy    comes mx foid expansion vocab  ulary usually includes deﬁned predicates                       ψ  deﬁnitions section  deﬁnitions mx                            duced grounding extended relation answer directly ap                       ply foid through grounding mx problem  replace rule  yγ ← ψ  γψ ∈r  foid reduced satisﬁability problem pcid                  yγ ← ψ  γψ ∈s  stands propositional calculus inductive deﬁ  replace rule   nitions currently prototypes solvers resulting ground id                                                                                ←                                                                               true    developed pelov ternovska  reduces satisﬁ                   ←  ability pcid sat mari¨en et al                  true                                                                           ←     direct implementation incorporates sat techniques              ←    solvers deal restricted pcid syntax  solver general syntax construction lab extend grounding algorithm ignd sec                                                        tion  adding following clause enhanced    nonetheless important problems represented                                     mx foid deﬁned predicates algorithm grounding igfk formulas ignd   stance vocabulary interpretation deﬁned pred  φ id Δ negation ¬Δthenignda rφ  icates used apply restrictions possible interpre γp  γ ∈ror γ¬p  γ ∈rwherep new                                                                                            ≡       Δ  tations expansion predicates case propositional symbol deﬁnition gndid    ﬁrst grounding treating deﬁned predicates expansion following main theorem paper               ψ  predicates let resulting ground formula theorem  given structure formula φ ∈ igfk        ψ                                                                                     add  extra constraint encodes interpretation ignd returns answer φ wrt o  time                                  deﬁned predicates suppose set ground  size φ size                                                    ijcai                                                     
