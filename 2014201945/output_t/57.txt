                      property persistence situation calculus∗                                   ryan kelly adrian pearce                                        nicta victoria laboratory                        department science software engineering                                        university melbourne                                          victoria  australia                                     rfkadriancsseunimelbeduau                        abstract                            unfortunately reasoning tasks require                                                        universal quantiﬁcation situations example      develop algorithm reducing universally  desirable show situation satisfy particu      quantiﬁed situation calculus queries form    lar goal paper interested subset      amenable automated reasoning universal   queries refer persistence queries par      quantiﬁcation situation calculus requires ticular situation calculus theory given property      secondorder induction axiom making automated    φ situation determine φ hold situa      reasoning difﬁcult queries show  tions future      reduce queries property persistence                                          common family universallyquantiﬁed query                 ∀s s  →  φs       equivalent form does quantify sit need secondorder logic traditionally limited au      uations algorithm doing utilizes tomated reasoning queries introduce new      ﬁrstorder reasoning examples    approach similar spirit regression operator      important reasoning tasks facilitated reiter  deﬁne operator transforms formula φ      approach including checking goal impos  formula pdφ φ persists      sibility reasoning knowledge par  pdφ holds term persistence condition φ      tial observability actions                    show calculate form suitable effective                                                        automated reasoning                                                                                                                                                              determine pdφ ﬁrst deﬁne operator pdφ    introduction                                       holds φ holds immediate succes  situation calculus pirri reiter  long sors persistence condition shown ﬁxedpoint  popular formalisms reasoning dy operator sought using straightforward  namic worlds recently popular choice iterative algorithm requires ﬁrstorder rea  implementing systems situated dynamic world soning limited number axioms result ef  offers advantages formalism based ﬁrst fective procedure answer family queries  order logic elegant monotonic solution frame prob universally quantify situations  lem effective reasoning procedure projection paper organized follows section  gives brief  problem reiter  coupled logic programming introduction situation calculus formally deﬁnes  languages prolog facilitated implementa persistence problem discusses related work gives  tion wide range systems                      examples important persistence queries section  formally    foundational axioms situation calculus include deﬁnes persistence condition presents algorithm  secondorder induction axiom deﬁning set situa calculates shows algorithm correct discusses  tions reiter  sentences contain existential conditions necessary completeness section   quantiﬁcation situation terms proven cludes summary results  induction axiom amenable automated rea  soning pirri reiter  important  background  systems built situation calculus theory action limit                                                        situation calculus manysorted language ﬁrstorder  queries existential form work implement                                                        logic augmented secondorder induction axiom  ing systems situation calculus reducing                                                        following sorts action terms functions denoting  number axioms required answer given query                                                        dividual instantaneous events cause state  allow efﬁcient reasoning                                                        world change situation terms histories actions    ∗this research supported grant australian occurred world initial situation rep  search councils arcs centre perceptive intelligent ma resented successive situations built using  chines complex environments pimce               function  action × situation → situation object                                                    ijcai                                                    terms represent object domain  ordering situations  distinguishes fluents predicates functions representing situations form tree root construct  properties world change situation ing child situations parents basic ordering  situation term ﬁnal argument relation  deﬁned following foundational axioms  detailed description consult pirri reiter                                                                            ∀   ¬         basic action theory set situation calculus sen                                                                                                              tences speciﬁc syntactic form speciﬁed pirri       ∀s as doa  ≡   reiter  describes particular dynamic world                                 ∨      queries behavior evolution world standard abbreviation   posed logical entailment queries relative theory frequently useful restrict situations consid  consists following disjoint sets foundational ax eration possible real world deﬁning  ioms situation calculus Σ successor state axioms dering relation  “executable” situations  scribing ﬂuents change situations dss pre                ∀s¬ ss  condition axioms indicating actions performed                                                              ∀               ≡  ≤   ∧          dap unique names axioms ensuring action terms    asdo       poss   distinct duna axioms describing value ﬂuents results situation calculus derived relative    initial situation ds                          executable situations  example reiter  devel                                                        ops induction principle situations ≤            Σ∪d      ∪d    ∪d     ∪d                      ss   ap    una                 notation useful propose parametrization                                                        let α action description predicate specifying    foundational axiom import paper actions deﬁne “αordering” situa  induction axiom deﬁnes set situations tions follows                        set containing closed application           ∀s¬ sα  function follows                                                                                                                                    ∀s asα doa  ≡ ≤α ∧ αa    ∀pp ∧∀s  → doa →∀sps standard ordering executable situations clearly                                                        possifs   thought “current situation”  fundamental importance axiom described                                                                       sα  means potential future actions              reiter   research focused identifying occur future satisfy α  sentences situation calculus proven  axiom require ﬁrstorder logic  effective reasoning  work continues tradition                                                      answering arbitrary situation calculus query ψ involves    distinguished predicate poss indicates general entailment problem secondorder logic sol  possible perform action given situation  set action precondition axioms dap contains ax                 dsol  ψ  iom each type action general form   problematic efﬁcient automated reasoning              −→          −→          −→           ∀s xpossa ≡ Πa xs            fortunately exist particular syntactic forms                                                        axioms required pirri  Πa represents uniform formula deﬁning iter  “∃s sentences” deﬁned  action possibility peraction basis             situation variable scope positive existen    useful introduce analogous predicates tial quantiﬁer show sentences  scribe different aspects action performance example proven induction axiom answer  predicate cantobsagt indicate agent able ﬁrstorder logical entailment fol  unable observe occurrence action                                                                dsol  ∃sψ  iﬀ  d−ifol    ∃sψ  predicates easily incorporated basic action theory  axiomatizing dap manner poss queries approached standard ﬁrstorder rea  refer predicates general action description soning systems increase efﬁciency reasoning  predicates use metavariable α represent arbi desirable eliminate axioms dwhichpirri  trary predicate                                 reiter  show possible syntactic forms    uniform formulae deﬁned pirri reiter  axiom reduction key idea regression  thought properties state world operator principal tool effective reasoning situ  basically logical combinations ﬂuents referring ation calculus reiter  regression operator rd  common situation term mention action syntactic manipulation behavior summarized  scription predicates compare situation terms use            metavariable refer arbitrary uniform formula behavior scope paper ex                 φ                                      perienced readers note use singlestep version    useful determine truth property regression operator lin reiter   given situation formula φs represents uniform mula uniform doa deﬁnition singlestep regressable  formula φ occurrences unique situation term development omits traditional qualiﬁcation formulae  replaced situation                          regressable                                                    ijcai                                                    purposes follows given formula φ uniform need cooperation establish absolutely  doa regression transforms formula rdφ necessary cooperate agent agent  uniform equivalent φ theory ac termine persistence actions performed                                                                                              tion                                                           ∀s s≤ownaction  →¬gs                        φ ≡rdφ                                                        assuming action description predicate ownaction  regression replaces instances posspredicate deﬁned identify actions performed agent  appropriate instantiations corresponding uniform question states situation future                         mula axioms ap action description actions performed agent satisfy  predicates easily treated way order case need cooperate agent  regress predicate action variable order achieve goal  sume ﬁnite number action types knowledge partial observability recent  replaced disjunctive closure deﬁ published work develop new account knowledge  nitional axioms assume restriction situation calculus actions observable    φ refers situation rooted repeated appli agents facilitate reasoning formalism agents                                        r∗  cations regression operator denoted trans able reason changed ac  form equivalent formula uniform initial sit tions observe form persistence query  uation successor state action precondition axioms universal quantiﬁcation situations  “compiled into” regressed formula techniques effective automated reasoning section   quired reasoning task                        applied persistence queries paper                                    ∗                   voted developing complementary technique han           φ  iﬀ duna ∪ds   rdφs                                                        dling queries                                 ∗  tradeoff length rdφ exponen  tial length φ practice typically  related work  compensated reduction number axioms rich diverse literature base sit  quired regression proven effective technique uation calculus appears little work deal                                                        ing universally quantiﬁed queries work reiter    property persistence                              shows handle queries hand using ap  important form situation calculus query ask propriate instantiation induction axiom makes  given property φ hold future situations mention automating reasoning  given situation saswellasats              work considering persistence focuses exclusively                                                        verifying state constraints uniform formulae                                                   ∀s s  → φs                   hold possible situation highly specialized                                                        form persistence query work lin reiter   generally wish limit futures considered “compiles away” induction axiom verifying state  brought certain class actions α constraint means following equivalence                                                    ∀s s≤α  → φs                      Σ ∪duna  ∪dss   φs → ∀ss ≤ → φs                                                                                iﬀ  words states “given subsequent actions satisfy  α φ remain true” succinctly “φ persists duna  ∀s  φs ∧rdpossa →rdφdoa  der α” term queries form property persistence veriﬁcation state constraint reduced rea  queries involved useful reasoning tasks soning universally quantiﬁed uniform formula using  following small selection                  unique names axioms comparatively straightfor    goal impossibility given goal establish ward reasoning task problem approached  possible situation goal satisﬁed bertossi et al  develop automati                                                        cally verifying state constraints based induction theo                ∀ss ≤  →¬gs                                                        rem prover    goal futility given goal situation establish issues related persistence  goal satisﬁed possible situation addressed work including persistence sit  future                                      uations action description predicates                                                        poss combine notions persistence regression                ∀    ≤   →¬                                                 determining additional conditions necessary  note different goal impossibility guarantee persistence φ treatment persis  agent initially able achieve goal ac tence provide concrete basis considerations  tions subsequently performed rendered signiﬁcantly general existing work  goal unachievable agents advised avoid  situations                                         persistence condition    checking state constraints variant goal im implementing persistence queries practical systems  possibility  show constraint violated clearly need transform query form suitable                                                    ijcai                                                    effective reasoning speciﬁcally transform proposition  basic action theory uniform  sistence query based evaluation uniform mula φ action description predicate α  mula effectively using regres d−d       ∀     → ∀  ≤     →     sion operator need transformation property            sφs        α    φ  φ action description predicate α uniform formula                   iﬀ         φ α true precisely situations φ duna  ∀s  φs ∧rdαa →rdφdoa  sists α given particular action theory pd  persistence condition φ α               proof straightforward generalization lemma  lin                                                        reiter  utilizing proposition   deﬁnition  persistence condition pdφ α uni  form formula weakest precondition persis  tence φ α given basic action theory proposition  key algorithm calculating  initial situation axioms                    persistence condition allows establish result                                                     “if φ holds sthenφ persists s” checking entailment    d−ds    ∀s pdφ αs ≡∀s s≤α →  φs                                                         uniform formula unique names axioms straight    deﬁning pd  independent initial world state forward ﬁrstorder reasoning task  allows agent calculate regardless formalize basic relationships                                                                  known actual state world pd pd pd follows  calculated consider weaker notion formula lemma  given basic action theory uniform formula  persisting depth situation                 φ action description predicate α  deﬁnition  uniform formula φ persists depth                                                          d−d       ∀   ∀   ≤    →     α situation formula pdφ α holds sas             α    φ  deﬁned                                                                                                                                                                ≡∀s    ≤α →pdφ αs            def   ∧∀     →                                            φ α   φ     α    φ       φ persists α iff pdφ α persists α  generally ≥  uniform formula φ persists                  pn                                                            proof deﬁnition danys falsiﬁes right  depth α situation formula pdφ α hand side equivalence falsify lefthand  holds deﬁned                             side viceversa                            def                      pdφ α  φ                                                        lemma   given basic action theory uniform formula                    def   n−              pdφ α  pdpd  φ αα               φ action description predicate α    note literal encoding requirement “                                                                                 φ          d−ds    ∀s pdφ αs →pdφ αs  holds direct successors” α action  description predicate φ uniform formula expres proof pdφ α implies persistence φ deﬁnition                                                                       sion αa → φdoa regressed implies pdφ α lemma   result uniform successive applications  assert persistence greater depths                                                        equipped prove major theorem    intuitively expect pdφ α ﬁxedpoint                                                                                      paper pdφ α implies pd φ αthenpdφ α  pdφ αsincepdφ α implies persistence  depth ﬁxedpoint calculated using stan equivalent persistence condition φ α  dard iterative approximation techniques show theorem  given basic action theory uniform formula  fact case require number theoretical results φ action description predicate α  presented                                                                                                                                    duna  ∀spdφ αs →pd  φ αs       formal development                                                       iﬀ                                                                                begin adapting existing results involving induction d−ds    ∀spdφ αs ≡pdφ αs    operate generalized ≤α notation based  situations                             proof direction ﬁrst deﬁnition                                                         equation  equivalent  proposition  action description predicate αthe  foundational axioms situation calculus entail fol                                                                   duna  ∀s  pdφ αs ∧rdαa  lowing induction principle                                                                                                                                              →rdpdφ αdoa                                         ∀w  ∧ ∀a αa  ∧ ≤α                                                                                                               proposition  implies persistence pdφ α                                                   ∧w   → doa  →∀s s≤α →      α lemma  implies persistence φ                                                        α turn implies pdφ α giving  proof trivial adaptation theorem  reiter                                                                                                                                              d−ds    ∀spdφ αs →pdφ αs                                                    ijcai                                                    lemma  implication fact equivalence yield direct consequence work  ing equation  required                         raises questions persistence condition guaranteed    direction straightforward reversal exist guaranteed reachable ﬁnite num                                                                                 reasoning pdφ α implies persistence φwhichim ber iterations pd clearly monotone                       plies persistence pdφ α implies  propo structive proof tarski’s ﬁxedpoint theorem cousot  sition                                              cousot  guarantees existence ﬁxedpoint                                                        calculated transﬁnite iteration performed                                                        algorithm ﬁxedpoint greater         pn     →pn            φ α     φ α deﬁnition equation  φ satisfying conﬁrmation correctness                                      identiﬁes pdφ α ﬁxedpoint pd operator sistence condition weakest precondition  initial intuition suggested                          persistence φ                                                          unfortunately guarantee ﬁxedpoint    algorithm persistence condition          reached ﬁnite iteration required ter                             easily calculate pdφ α nwehavea mination straightforward construct ﬂuent  straightforward algorithm determining pdφ α search algorithm terminates consider ﬂuent                                     fpx taking integers affected single action                                                      makes false fpx false letting α            ∀   pn      →pn               una      φ α       φ α           vacuously true sequence iterations produced                                                    algorithm  expect pn φ α simpler φ αwe                                                                  ≡       ∧         look smallest algorithm  presents    fp   fp   fp                                                                iterative procedure doing just               pdfpx ≡ fpx ∧ fpx ∧ fpx                                                                                   algorithm  calculate pdφ α                                                     pn ⇐ φ                                                                        in                                                                       pn ⇐pdpnα                                                  pdfpx ≡    fpx     duna  ∀spns → pns                                                pn ⇐ pn                                                                                     ≡      pn ⇐p  pn                                     persistence condition case fp                α                                    ∀yx≤   → fpys limit iter    end                                           ation clearly unachievable ﬁnite number steps    return pn                                                                                                         pd  operates set equivalence classes formulae                                                        uniform theory ﬁxedpoints requires                                 note calculation pdφ α straightforward set wellfounded partial order guarantee termination  syntactic transformation requires treatment iterative approximation algorithm certain                                                        classes basic action theory wellfoundedness  correctness                                           guaranteed obvious theories ﬁnite  algorithm  terminates terminates returning value action object domains set equivalence  pn equation  holds theorem  value classes ﬁnite case successorstate  pn equivalent persistence condition φ α axioms refer direct arguments ﬂuents                                                                                          algorithm correctly calculates persistence case repeated applications pd pick subset  condition                                            equivalence classes refers ﬁnite number                                pn        note equation  holds φ α unsatisﬁable objects giving guarantee  situation appears antecedent impli general termination requires repeated applications  cation algorithm correctly returns unsatisﬁable successorstate axioms regression operator  condition equivalent falsewhenφ persist construct inﬁnite chains currently investigating  der α                                                syntactic restrictions successor state axioms en  completeness                                          force requirement easily met                                                        practice investigating advanced ﬁxed  theorem  equivalence source incom                                                        point algorithms better efﬁciency termina  pleteness failure terminate algorithm  fail                                                        tion guarantees  terminate reasons loop condition  satisﬁed ﬁrstorder logical inference loop condi effectiveness  tion undecidable fail terminate        algorithm replaces single reasoning task based    later indicates basic action theory unde action theory series reasoning tasks based  cidable concern affects just unique names axioms duna worthwhile trade  algorithm  implemented action practice following points weigh strongly favor  theory incomplete respect source approach  incompleteness algorithm incomplete foremost avoid need secondorder  larger form            induction axiom reasoning tasks performed                                                    ijcai                                                    
