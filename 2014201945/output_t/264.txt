            machine learning approach statistical software testing                     ∗                nicolas baskiotis michele  sebag marieclaude gaudel sandrine gouraud                              lri universit´e parissud cnrs umr                                    bˆat  orsay cedex france                                  nbaskiot sebag mcg gouraudlrifr                          abstract                          proposed approach called exist exploration                                                         exploitation inference software testing inspired      statistical software testing approaches rely estimation distribution algorithms edas baluja      sampling feasible paths control ﬂow davies  online learning auer et al       graph program difﬁculty comes cesabianchi lugosi  exist proceeds itera      tiny ratio feasible paths paper presents tively generating candidate paths based current distri      adaptive sampling mechanism called exist ex  bution program paths updating distribution af      plorationexploitation inference software test ter path labelled feasible infeasible exist      ing able retrieve distinct feasible paths high possible use original representation      probability exist proceeds alternatively ex  extending parikh map hopcroft ullman       ploiting updating distribution set providing powerful propositional description long struc      program paths original representation paths tured sequences program paths original contribu      accommodating longrange dependencies data    tion compared online learning cesabianchi lugosi      sparsity based extended parikh maps pro  kocsis szepesv´ari  reinforcement learn      posed experimental validation realworld  ing goal maximise number distinct fea      artiﬁcial problems demonstrates dramatic improve sible paths process opposed learning      ments compared state art           concept ﬁxed policy                                                          paper organised follows section  brieﬂy    introduction                                       views work relevant machine learning soft                                                        ware testing section  introduces formal background  science new application domain prior knowledge related sst problem  machine learning ml motivated increasing com scribes extended parikh representation section  gives  plexity current systems rish et al  ideally sys overview exist section  describes  tems able automatically adapt maintain experimental setting goals reports empirical  pair ﬁrst step end build selfaware validation approach realworld artiﬁcial prob  systems using ml automatically model lems paper concludes perspectives  haviour lines various ml approaches research  proposed software testing br´eh´elin et al soft  ware modeling xiao et al  software debugging  zheng et al                                     related work    paper revisit statistical software testing sst interestingly program synthesis grand                                      approach presented denise et al   approach goals machine learning application machine  based uniform sampling paths control ﬂow learning software testing st seldom consid  graph program each path test case exerting ered literature  path associated path feasible problem                                                          ernst et al  aim detecting program invariants  approach control ﬂow graph provides overly                                                        through instrumenting program hand searching  general description program cases                                                        predetermined regularities value ranges traces  large programs fraction feasible paths tiny              −   −                                                       ranging                                      brehelin et al  consider deterministic test proce    discriminant learning approach failed charac dure generating sequences inputs pla device  terise set feasible paths tiny support hmm trained sequences used  target concept generative learning approach generate new sequences increasing test coverage      ∗the ﬁrst authors gratefully acknowledge support space limitations interested reader referred  pascal network excellence ist         baskiotis et al  comprehensive presentation                                                    ijcai                                                      vardhan et al  goal test concur node include successor  rent asynchronous program usersupplied constraints second node pattern referred xor pattern  model checking grammatical inference used charac expressing possibly longrange relations  terise paths relevant constraint checking fragments program paths    xiao et al  aim testing game player dis  covering regions game easytoo difﬁcult loopn pattern number times loop executed  use active learning rule learning construct model happens restricted semantics problem  program remotely related work presented problem involves   uranium beams  zheng et al  actually concerned software controlled control procedure executed exactly   bugging identiﬁcation trace predicates related  times gouraud  pattern referred  program misbehaviours                            loopn pattern    ernst et al  vardhan et al mlisused  provide better input st approaches br´eh´elin et al let assume initial set labelled paths   ml used postprocessor st xiao et al available consider supervised learning problem                                                                                        ml directly provides model black box pro ﬁned  siyisi ∈ Σ yi ∈−   gram hand test manually inspecting  nwheresi path length yi  model                                                 iff si feasible                                                          learning problem presents speciﬁcities firstly    prior knowledge representation                 does involve noise oracle constraint solver                                                        does make errors secondly complexity exam  denise et al  program tested repre ple space huge respect number available ex  sented control ﬂow graph fig            amples realworld problems Σ includes dozen                                                        symbols thousand paths available each                                                                                                          symbols long number available paths                                                                                                                                limited labelling cost runtime                                                                                                                                                                                                                                              straint solver average seconds program path                                                                                                           init                                                                     thirdly data distribution severely imbalanced infea                                                                                                                                                                  ib                         sible paths outnumber feasible ones orders                                                                                                                                                                                                                                                                                                                                                                                                                                                    magnitude attempts increasing number feasi                                                                                                                                                                                                                                                            ble paths through active learning unsuccessful                                                    expected dasgupta  lastly label                                                        path depends global structure markovian repre   figure  program fct includes  nodes  edges sentation begleiter et al  require                                                        examples identify desired longrange dependen    formally control ﬂow graph finite state automa cies transitions  ton fsa based ﬁnite alphabet ΣwhereΣ includes reasons frugal propositional representation  program nodes conditions blocks instructions strings inspired parikh maps hopcroft ullman   fsa speciﬁes transitions nodes pro considered tletst denote tth sym  gram path represented ﬁnite length string Σ ob bol set value vf length  tained iteratively choosing node successors • each symbol associated integer attribute av  current node ﬁnal node noted vf avs number occurrences symbol path    length program paths upper bounded • ith occurrence symbol associated cate  general case practical reasons coveragebased ap gorical attribute avi attribute avis gives infor  proaches software testing consider program paths mative symbol following ith occurrence symbol  bounded length  classical results labelled combina vf contains occurrences  torial structures flajolet et al  used uni  formly sample set program paths length overviewofexist    each path sample provided constraint solver la  belled feasible infeasible denise et al  section presents new learning framework devised  references infeasibility given path arises sst called exist exploration vs exploitation inference  violates subtle dependencies different parts software testing    program general patterns infeasibility   identiﬁed space limitations general generality three classes considered feasible                                                        infeasible undecidable underlying constraint satisfaction  patterns considered rest paper problem undecidable undecidable class depends                                                        constraint solver support negligible practice                                                             xor pattern nodes correlated instance  formally avis set stikwhereti index  nodes based unchanged expression  ith occurrence symbol initially set  case  successors correlated feasible path avi takes constant value examples incremented  program path includes successor ﬁrst baskiotis et al  details                                                    ijcai                                                      position problem                          tion  variable order markov models accommodate  denise et al  proceeds uniformly sampling dependencies illsuited sparsity  bounded length paths efﬁciency approach initial data available probabilistic parikh  limited high ratio infeasible paths goal map viewed simple case probabilistic  present paper provide sampling mecha attributegrammars abney  attributes  nism exist able retrieve distinct feasible paths high account number occurrences symbols  probability based set feasibleinfeasible paths finally exist involves modules init  initially set small set labelled paths gradually module determines conditional probabilities es  enriched paths generated exist labelled timated ii decision module uses probabilities  constraint solver                                iteratively generate candidate path let ﬁrst    goal differs active learning aimed decision module  trieving informative examples roy mccallum  decision   active learning primarily interested sampling   module  frontier classes discriminated exist let denote path construction initialised  interested sampling feasible class start symbol let denote node let  mentioned active learning hindered imbal total number occurrences  anced class distribution dasgupta               decision module aims selecting successor    goal viewed perspective impor node order additional infor  tance sampling estimation distribution algorithms mation exploited lookahead symbol se  edas baluja davies  aimed iden lected total number symbols ﬁnal path  tifying optima ﬁtness function edas iteratively current number occurrences  proceed sampling search space current dis plus let jw denote number  tribution ii computing ﬁtness samples iii formally probability ps generating feasible  dating biasing distribution samples path conditionally event eviwjw number occur  maximal ﬁtness difference relates exploration vs rences number occurrences  exploitation tradeoff edas supposed gradu jw provided init module ps conventionally                                                               ally switch exploitation point distribution set path satisfying eviwjw   verges optima ﬁtness function selection node aims maximising  exist goal gather examples different probability ultimately ﬁnding new feasible path three  particular feasible path generated al options considered  gorithm prevented generating     • simplest option greedy selects    approach compared online learn     successor node maximising ps  ing multiarmed bandit problem gam                                                          • roulettewheel option stochastically selects node  bler choose machine play based                                                                                                            probability proportional ps  past selections rewards cesabianchi lugosi   kocsis szepesv´ari  difference similarly • bandist option follows ucb algorithm auer  lates explorationexploitation tradeoff cesa et al  standard multiarmed bandit prob  bianchi lugosi  kocsis szepesv´ari  lem algorithm shown achieve logarithmic regret  interested identifying running best policy reward loss compared optimal unknown policy  explicitly avoid repeating past moves                respect number trials bandist determin                                                            istically selects node maximising    search space                                                            borrowing edas principle incrementally exploit                       loges ∗                                                                        ps  ing updating distribution exist builds probabilistic                       es  model extended parikh map representation sec  tion  formally probability generating feasible path es total number paths satisfying                                                                           ∗                       conditionally events “w successor eviwjw successor   th occurrence occurs times” denoted      init  eviwj estimated set feasibleinfeasible  module  paths currently available                            init module determines conditional probabilities    estimate probabilities used gradually construct used decision module estimated  current path iteratively selecting successor baseline init option computes ps fraction    current symbol conditionally current number oc paths satisfying eviwjw feasible  currences                            option fails guide exist efﬁciently disjunc    formalism meant avoid limitations proba tive nature target concept section  shown  bilistic fsas variable order markov models begleiter following toy problem  et al  actually probabilistic fsas likewise sim let assume path feasible iff ﬁrst  ple markov models model long range dependen occurrences symbol followed symbol  cies transitions involved prior knowledge sec feasible iff avsavs let assume                                                    ijcai                                                    includes  vwvxvw  vxvwvx  vxvwvw       experimental validation  feasible infeasible consider cur                                                       section describes experimental setting used vali  rent path vwvxv step select successor date exist reports empirical results discusses  rd occurrence seen ps                                                    sensitivity exist wrt initial labelled     ﬁrst event rd occurrence paths  followed  occurrences wis  satisﬁed second event rd occur  experimental setting criteria  rence followed  occurrences                                                        exist ﬁrst validated realworld fct problem  covers                                                        cluding  nodes  edges fig  ratio feasible    seeded init option devised remedy paths − maximum path length                                           limitation idea estimate subset stochastic problem generator designed      called seed set including feasible paths belonging baskiotis et al  fully assess exist perfor  single conjunctive subconcept                    mances space limitations three series results    necessary condition set positive examples fea presented related representative “easy” “medium”  sible paths represent conjunctive subconcept “hard” sst problems ratio feasible paths  general generalisation correct does cover respectively ranges  × − − easy prob  negative example toy example problem lgg lems − − medium problems                                                           −   −  correct covers                 hard problems number nodes                                                        varies   path length varies                                                            exist variants considered greedy   seeded procedure                     e−                              seededgreedy sg seededroulettewheel srw ﬁnally      set feasible paths  set infeasible paths bandist bstandseededbandist sbst                   let      ssn  randomly ordered                each exist variant each problem reported   let                                                        result number distinct feasible paths                                              generated paths averaged  independent runs                           let  lgg ht−st                                baseline uniform sampling approach outperformed                     e−      correct wrt                               orders magnitude omitted following         ht   ∪st      ht  ht−                                      results   end                                              better visualisation results obtained each exist   return                                             variant displayed parallel coordinates easy fig                                                         medium fig  hard fig  problems starting            figure  construction seed set        feasible infeasible training set average results                                                        standard deviation seeded variants shown    seed sets stochastically extracted using table   seeded procedure fig  inspired torre atthe computational time ranges   minutes  initialisation set feasible paths randomly ordered pc pentium  ghz depending problem variant  seed set set ﬁrst path iteratively considered labelling cost non included                                 considers current feasible path constructs lgg                easy problems  previously selected paths correct does    cover infeasible paths respect extended parikh                                                                 map representation st added construction  set infeasible paths sufﬁciently representative      include feasible paths belonging conjunctive    cept single branch xors probabili                                                                                          art  ties estimated reﬂect long range dependencies                               art  node transitions                                                                 art                                                               number  generated feasible paths                                                                              sg      exploration strength exist enforced using                                   bst                                                                                      srw                                                                                                   sbst  restart mechanism construct seed set        greedy  exist variants  discounting events related feasible paths  times baskiotis et al  figure  number distinct feasible paths generated ex  details                                         ist  trials easy problems starting                                                         feasible infeasible paths    general generalisation lgg set propositional  examples conjunction constraints type attribute  considered range problems best exist vari  value satisﬁed examples instance lgg ant seededgreedy easy problems bandist seede  examples extended parikh representation av  droulettewheel efﬁcient fig  efﬁciency   ∧ aw  ∧ ax                          decreases ratio feasible paths decreases                                                    ijcai                                                                          medium problems                 bandist dominated exploration bias note                                              art             bandist greedy explore transition                                       art                                   art             explored current feasible paths                                                        ps wwhen paths satisfying current                                                    event section  trial does lead                                                    feasible path greedy visit transition                                                        bandist usually retry later                                                                  note seededgreedy displays signiﬁcantly lower      number  generated feasible paths                standard deviation seeded variants table                       sg                                        bst                               srw                                             sbst                 greedy  exist variants                   sensitivity wrt initial conditions  figure  exist results medium problems set usability exist compromised large  ting fig                                     initial training set necessary order good                                                        sults experiments various numbers ini                         hard problems                                                   tial feasible infeasible paths independently selected                                       art                                       art                conducted results obtained                                   fct             representative medium problem displayed fig                                                                                        problem art                                                                                                                                                                                                                                                                                                                                                                                                                                         number  generated feasible paths                                                                                       sg                                        bst                               srw                                             sbst                 greedy  exist variants                            figure  exist results hard problems setting    fig                                                                number  generated feasible paths                                                                              sg                                                                                               bst                                                                                      srw                                                                                                   sbst    seeded option beneﬁcial especially            greedy  exist variants  combined greedy roulettewheel op  tions applied hard problems hard prob figure  sensitivity analysis average exist results  lems feasible region divided tiny conjunc representative medium problem depending  tive subconcepts probabilities estimated exam number initial feasible infeasible paths  ples belonging different subconcepts misleading  result generating infeasible examples usefully ﬁrst remark increasing number infeasi  seeded option allows exist generate infeasible paths ble paths does improve results  separate feasible subconcepts seeded option equal concretely makes difference provide  comparatively beneﬁcial bandist   infeasible paths  fea  options increases bandist bias exploration sible paths surprisingly increasing number  unsurprisingly exploration poorly rewarded hard prob feasible paths degrades results   lems                                                 curve usually  curve fig     comparative performance greedy bandist remarks explained modeling seeded  pends type problem easy problems bandist procedure fig  state automaton each step tthe  dominates greedy reverse true hard problems seeded procedure considers feasible path st result                                                        ing lgg tested correctness infeasible paths                                                        st belongs subconcept previous feasible      problems        sg        sbst        srw         paths state lgg correct proce        fct       ±    ±   ±      dure returns state state test     easy    art  ±    ±   ±      infeasible paths reject lgg exists infea             art   ±    ±   ±      sible path covered resulting lgg st rejected             art   ±    ±   ±      procedure returns state state exists    medium   art  ±    ±   ±      infeasible path enforcing st rejection preventing             art  ±    ±   ±      overgeneralisation seed set seed set             art  ±    ±   ±      contain examples different subconcepts state     hard    art  ±      ±     ±      absorbing probabilities estimated seed set             art  ±    ±    ±      misleading likely lead generate infeasible paths                                                          number quality infeasible paths governs  table  average number paths standard deviation transition state probability qorc prob  seeded variants exist                             ability  − exponentially increase wrt                                                    ijcai                                                    
