                          planning goal utility dependencies        minh do†     benton ‡  menkes van den briel    ‡  subbarao kambhampati       ‡              † embedded reasoning area palo alto research center palo alto ca  usa minhdoparccom                 ‡ cse department arizona state univ tempe az  usa jbentonmenkesraoasuedu                          abstract                          changes utility sets goals increasing ex                                                        pressive power      work partial satisfaction planning psp     concrete examples utility dependency mutual      hitherto assumed goals independent  dependency conditional dependency mutual depen      implying additive utility values dency utility set goals different sum      realworld problems make     utility each individual goal example       assumption paper motivate need   utility having left right shoe zero      handling various types goal utility depen utility having higher goals      dence psp provide framework rep     “complement” each  utility having cars      resenting using general additive     smaller sum individual utilities having each      dependence model investigate different    goals “substitute” each      approaches handle problem  compil    ditional dependency utility goal set      ing psp utility dependencies integer pro goals depend goal set goals      gramming  extending forward heuristic search  achieved example utility having ho      planning handle psp goal dependencies      tel reservation hawaii depends      guide forward planning search introduce   purchased ticket hawaii      novel heuristic framework combines cost     main technical challenges handling utility depen      propagation integer programming select     dencies ﬁnding  model different types      beneﬁcial goals ﬁnd informative heuristic es goal utility dependencies compactly expressed       timate implemented planners ipud    approach effectively combines utility interactions      spuds using approaches discussed      cost interactions ﬁnd high quality plan primary      compared empirically benchmark     tribution paper systematic approach handling      domains  ipud readily amend       cost utility dependencies psp particular      able handle goal utility dependencies  present      provide bounded optimality guarantees spuds      scales better                                  • approach representing utility dependencies                                                             tween planning goals using generalized additive                                                             dependence gai model bacchus grove     introduction                                            combining utility theory deterministic planning                                                           • extension state art integer programming  classical planning aims ﬁnding plan achieves set                                                             ip planner van den briel et al  solve  conjunctive goals partial satisfaction planning psp relaxes                                                             extended psp problem  allornothing constraint focusing ﬁnding plan  achieves “best” subset goals plan gives • novel heuristic framework combining cost propaga  maximum tradeoff total achieved goal utilities tion ip encoding capture mutual dependencies  total incurred action cost process ﬁnding goals goal achievement cost goal utility leads  focus complicated fact informative heuristics used guiding variation  teract instance actions share forward state space search planner  achievement goals positive interaction conﬂict  negative interaction types interactions introduce approaches ip encoding forward heuristic  cost dependencies goals cost achiev search implemented resulting planners ipud  ing separately differ cost achieving spuds tested planning benchmark domains  existing frameworks goals inter ip approach readily amendable handle  act through cost dependencies paper extend psp goal utility dependencies provide bounded optimal  handle utility dependency allows users specify ity guarantees shall heuristic search method                                                        scale better                                                     ijcai                                                      problem formulation                                actions each network merged  classical planning problem tuple f a stitute feasible plan networks nodes arcs ap  ﬂuents set predicate symbols initial state pear layers each layer represents plan period  completely deﬁned predicates  goal state par layers used solve planning problem incrementally  tially deﬁned set predicates  set actions start performing reachability analysis ﬁnd   ∈  deﬁned pre postconditions lower bound number layers necessary solve  prea add deletea ⊆ aplanp sequence problem plan networks extended  actions executed achieves goals ∈ extra layer planning problem solved    partial satisfaction planning psp smith  process repeated plan van den  van den briel et al  goals ∈ utility val briel et al  complete description gsc                                                        formulation  ues ug ≥  representing each goal worth  user each action ∈ associated execution cost order deal utility dependencies incorporate                                                        following extensions gsc formulation  ca ≥  representing costly execute each action                                                                   ud  time resources consumed let gp ⊆  • psp   problems goals achieved  set goals achieved plan  objective plan feasible remove  ﬁnd plan maximizes difference total constraints gsc formulation state  achieved utility ugp  total cost actions ∈ goals achieved  plan beneﬁt                                                          • each goal utility dependency function gk add                             −                                        ∈                            max     gp        ca                    variable zgk     wherezgk     goals gk                                                                                                             a∈p                          achieved zgk    work psp  assumed goals                                                           • each goal utility dependency function gk add  utility dependencies utilities additive                                                             constraints ensure gk satisﬁed  ugp       ∈   ug order represent types              gp                                           goals ∈ gk achieved  goal utility dependencies discussed previous section                                                                                            −     ≤  complement substitute conditional adopt gen             ycfgt gk        zgk       eralized additive independence gai model bacchus         fg∈dcg∈gk                                                                        grove   chose model expressive       ≤              ∀  ∈      ∈  general compile commonly used     zgk        ycfgt   dc    gk        models ucpnet boutilier et al  assume           f∈dc  utility goal set represented local dc domain state variable                  utility functions gk ∈ sets gk ⊆ gforany              ∈                                                              ycfgt       variables ip problem  subset ⊆ utility gis                          represent value changes state variables                                               ug         gk                     plan horizon                                                       gk⊆g                              • create objective function maximize net    model allows users specify changes utility beneﬁt utility minus cost plan  sets goals rest paper new psp                                                                max               −                     problem utility dependencies represented gai                 gk zgk             caxat           ud                                                         gk            a∈a≤t≤t  model psp   ifthereareg local functions gk                                     ud                      ugk represents utility satisfying goal  each gk contains single goal psp reduces  original psp problem utility dependencies            utility dependency function gkandca represents                                                             cost executing action ∈    ip encoding   pspud                                                          extended gsc formulation bounded length opti  classical planning solved ip ip mal generates optimal plans plan horizon   provides natural way incorporate numeric constraints                                 ud                     global optimality guaranteed  objective functions follows psp planning problems solutions higher net beneﬁt longer plan horizons  solved ip    setup ip formulation handle pspud problems    heuristics maximizing plan beneﬁt  extending generalized single state change gsc ip planners optimal bounded horizon  mulation van den briel et al  currently gsc prior work suggests heuristic search planners  formulation effective ip formulation solving efﬁcient able ﬁnd better solutions larger prob  classical planning problems outperforms previ lems van den briel et al forpspud problems  ously developed ip formulation used solve psp problems challenge computing heuristic maximizing plan ben  utility dependencies van den briel et al  eﬁt need simultaneously  pick best set    gsc formulation represents planning problem goals  ﬁnd best plan ﬁrst chal  set loosely coupled network ﬂow problems each lenge complicated utility dependencies second  network corresponds state variables plan complicated cost dependencies  ning domain network nodes correspond state vari current heuristic approaches solving psp problems  able values network arcs correspond value tran volve planning graph based heuristics handle cost depen  sitions planning problem ﬁnd path sequence dencies providing estimate cost achieving                                                     ijcai                                                    each goal heuristics use goals’ deﬁned utility achieve facts execute actions  values select goal subsets offer best net beneﬁt                                                           • facts ∀f  cf min   caca  estimated cost scenario goals dependen               f∈add                        ud  cies psp deal fact •  cost dependencies actions utility dependen  cies goals exist                                     maxprop ∀a ∈  ca max   cfor                                                                                         f∈prea    section deﬁne search algorithm                                                                sumprop ∀a ∈  ca  Σ    cf  three heuristics combine planning graph methods                              f∈prea  declarative ip encoding generate ip encoding                                                        update rules used extending relaxed  relaxed plan heuristic entire problem                                                        planning graph structure blum furst  discussed section  solving ip encoding select                                                        propagation costs change   goal set estimated cost achieving                                                                                            estimate cost achieve each goal ∈   main innovation combination relaxed plan                                     handles cost interactions goals declarative ip                                                        deriving heuristics propagated costs use  encoding captures mutual goal achievement cost           goal utility dependencies                        notation hy heuristics method                                                        used estimate goal utilities method used                                ud               ud     estimate goal costs utilities costs independent  bestfirst heuristic search psp  handle psp  “sum” dependencies goal  use bestﬁrst anytime heuristic search framework utilities estimated using gai model  sapaps  van den briel et al  forward metric                                              ∗         pendencies goal costs estimated using relaxed  temporal planner uses anytime variation algo plans  rithm guided heuristic derived relaxed planning               ∗                                          easy observe use max propagation max  graph like  algorithm starts initial state prop cg underestimate cost achieve  sinit continues dequeue openlist                                                guarantee sum propagation sum  promising node highest   value  prop bonet et al usingcg calculated cost  each search node gs represents beneﬁt achieved                                                      propagation process outlined previous section  far visiting sinit represents pro estimate achievable beneﬁt value  jected maximum additional beneﬁt gained expanding                                                                                          hgai   max   ug  − max  cg       plan beneﬁt deﬁned section  calculating                ⊆             ∈   gs trivial having good estimate hs hard key                    success bestﬁrst search algorithms during explo notice heuristic calculate                                                ∗  ration search tree algorithm called apsp local utility functions deﬁned equation   keeps outputting better quality plans node heuristic directly applies gai model use                                           ∗                                                   gai  bestsofar gs value expanded like  algo maxprop equation  hmax heuristic                                                                                                       gai  rithm terminates node hsis picked   use sumprop corresponding hsum                                                                         gai  open list                        heuristic hmax overestimates real achievable             ∗                                          beneﬁt guarantee hgai a∗     apsp  generated search nodes                                     sum         psp                ps                                            gai  practice sapa  prunes search space removing using hmax guaranteed output optimal solution given  nodes appear unpromising nodes time  estimated beneﬁt negative improves                                                                                             gai  efﬁciency potential drawback heuristic relaxed plan based heuristic hmax signif  hs underestimates value search node sthens icantly overestimate real beneﬁt achieving set  discarded compared beneﬁt best goals performs badly domains shall                                                             gai  solution far gsb extended hsum heuristic informative relaxes cost  reach better solution mitigate issue modiﬁed interaction assumes plans achieving different goals  sapaps search strategy search nodes independent overlap improve  appear unpromising ﬁrst generated during search heuristics adapt relaxed plan heuristic ﬁrst introduced  set value  half distance best node ff planner hoffmann nebel  solves  far worstvalued unpromising node each planning problem ignoring delete list heuristic                                                                    gai  unpromising search node threshold  improves hsum taking account actions contribut                                                        ing achievement goals challenge ex  current best solution ﬁnd ρ complement          ud  percentage distance beneﬁt sb tending psp efﬁciently ﬁnd highbeneﬁt       sb  probability ρ                                                                          ca execution cost different ca                                                        cost enable execution costs achieve  goal achievement cost propagation heuristic preconditions                             methods estimate cost achieve each goal  given notation view heuristic used                                                      ps                            sum  kambhampati  starting    facts  sapa   kambhampati  hrelax sums  initial state cfca∞ individual goal utilities extracts relaxed plan estimate  facts actions propagation rules estimate costs cost                                                     ijcai                                                    relaxed plan presence cost utility depen capture mutual dependencies goal  dencies                                              achievement costs ﬁnd set actions shared           ⊆    let gp     set goals achieved relaxed different partial plans achieving different goals proce  plan  relaxed plan heuristic pspud      dure utilizes causal links relaxed plan                                                                                                         ∗                                                           ∀    ∈                ∅             gai                −                      initialize               gs                     relax  max    gp           ca                                                                ∀   ∈   add    precagsp∅                                     a∈p                                                              ∀ ∈  gsgg    note equation  looks like equation                                     optimal plan equation  replaced optimal  backward sweep goals achieved update  laxed plan  achieving maximum beneﬁt equa    ﬁxpoint                          ∗                                                                                       tion  gai overestimates real achievable beneﬁt gs           gs   gs           gs            relax                       ∗                             p∈add              p∈prea  used admissible heuristic apsp ﬁnd  optimal solution psp problems                      using procedure each action gsa    ﬁnding satisfying relaxed plan  given tains set goals contributes goal                                        ∗            ⊆                           gai            supporting sets    represents achievement cost  goal set gp   polynomial extracting relax requires          gs   ﬁnding optimal relaxed plan highest beneﬁt task pendencies goals  nphard know optimal goal set   ∗                                                    step  estimate maximum achievable beneﬁt                                               gp   actions uniform cost bylander                                                            ∗           ud                            step combine goal supporting set gs               gai                                                                                      approximate relax psp use following three previous step goal utility dependencies                                         ps  steps ﬁrst step introduced sapa ﬁnd beneﬁcial relaxed plan  onesim  second steps novel                     ple approach ﬁnd plan  ⊆  iterate                                                                                                                            gp             ⊆                                                                                     subsets    gp   goals gp set     greedily extract low cost relaxed plan                            achieves largest set achievable goals     goals achieved  compare beneﬁt plans                                                         achieving ghoweverwheng large approach     capture achievement cost dependencies                                                                         impractical use declarative ap      achievable goals using causal structure  proach setting ip encoding solution represent     pose problem extracting optimal subplan ing beneﬁcial relaxed plan  ⊆  note                     takes cost beneﬁt dependen ip generally slow solving complete planning                                                gai      cies account ip encoding solution hrelax problem number actions relaxed plan                                        ∗ gai      ip encoding used estimate relax  smaller orders number actions                                                        relaxed planning graph allows ﬁnd optimal    notice compile entire relaxed planning graph                                                        solution reasonable time critical  just greedily extracted relaxed plan                         ∗                              build ip encoding each search node generated during  post problem ﬁnding gai ip problem despite                           relax                        forward heuristic search ip formulation set  conceptual elegance chose follow route                                                        similar described section   cost heuristic computation increases signiﬁcantly es                                                        allows actions relaxed plan does  pecially progression planner extracts relaxed                                                        create constraints negative interactions addi  plan each node                                                        tional constraints representing goal supporting set gsa  step  heuristically extract low cost relaxed plan previous step included enforce  let g ⊆ set achievable goals cg  ∞ given goal selected action contributes  use planning graph propagated achievement costs achievement selected speciﬁcally  section  heuristically extract lowcost relaxed plan • binary variables            support follows                                                                                                                                  – ∀a ∈ ∀g ∈ ∀gk ⊆ gk   create                                                       start supported facts sf subgoal set sg           binary integer variable xa xg xgk                                ∅        andtherelaxedplanp                            • constraints     each   ∈   sg  select supporting action           ∀  ∈   ∀  ∈     −         ≥                                                                –  a    gs        xg    xa       ∈ add lowest execution cost ca value          −         ≥                  ←    ∪      ←     ∪                   –          xg    xgk      update          sg   sg    pre   sf              g∈gk      sf ←  sf  ∪ add                                   ∀  ∈    −           ≥                                                                –    gk      xgk     xg     repeat sg  ∅                                •                     ∗     − Σ   ∗                                                                objective max     gk   xgk     xa   ca    backtrackfree process guaranteed ﬁnish time solving ip encoding gives beneﬁt value  polynomial number actions                  beneﬁcial relaxed plan   beneﬁt                                                                                                 ∗                                                                          gai                         step  build cost dependencies              plan used hrelax heuristic guide apsp  certain actions contribute achievement empirical section test problems used plan  multiple goals dependencies costs ning competition  goals  achieve relations discovered using use similar ip encoding derive heuristic estimates                                                        gai     gai  causal structure extracted relaxed plan     hmax hsum described earlier section                                                     ijcai                                                      empirical results                                  scientiﬁc data gives redundant information                                                        removes large portion utility gained having  implemented heuristic framework      ps                                                separately  sapa    planner extension gsc en  coding discussed section  new planners                                                        analysis empirical evaluation designed  com  spuds  ipud compare  ipudspuds                  gai   gai       gai                    pare effectiveness ipbased heuristic search  three heuristics hrelax hmaxandhsum   version                  ud        ps                                              approaches solving psp  problems  determine  sapa  heuristic ignores goal utility dependen characteristics pspud planning problems cause  cies gvalue does                     approaches return plans differing quality    ipud  runs cplex  commercial lp solver   results figure  show plan quality achieved  use lp solve version  free solver java each planning method time reach quality  wrapper solve ip encodings spuds problems null plan indicate  lp solve powerful cplex shorter extensive search better plan setting time  setup time suitable spuds sets  seconds instance time best  ip encoding search node tests use plan shown ﬁgure shows tested  ghzgb ram  second time limit                ps                                      approaches varied relative plan quality each  spuds  sapa   continuously ﬁnd better solutions                     gai                                                        main spuds using hrelax heuristic performed  termination criterion met                       best                                                 ud       observe planner behavior zenotravel  test problems automatically generated psp     tpp domains involve gathering objects  problems subset propositional planning bench zenotravel focuses delivering objects util  marks used ipc ipc zenotravel airplanes ity dependencies play important role domains  people cities satellite satellites turn objects sapaps does poorly spuds heuristics  pictures rovers sets rovers navigate ipud fared better sapaps heuristic  samples images tpp trucks visit markets buy informed utility dependencies comes sur  products                                             prise easier problems hgai heuristic tends return    each domain implemented java program                            sum                                                 ud     plans similar equal quality compared  parses original problem ﬁles generates psp                                               gai                                                        techniques used problem size increases hsum  version action cost goal utilities randomly generated begins return plans better quality does worse  appropriate upper lower bounds set goal gai                                                        hrelax terms overall number plans  dependencies utility values randomly best quality ipud size problem encoding  generated number dependencies size increases unable ﬁnd good feasible solution  pendencies set goals involved utility values action                                                          version satellite domain goal combi  costs selected varied lower upper bounds                                                        nations remove utility overall quality plans  each domain goals soft planners                                                        plans higher quality tend require actions  trivially solve each problem null plan                                                        seen quality plans ipud returns    varied bounds action cost goal set utility reachability analysis unable properly estimate dis  values each domain focuses different aspects tance goals begins solution searching  utility dependency zenotravel ending plan                       gai                                                        small horizon hrelax heuristic turns  people various locations increases utility signiﬁcantly action selection helps guide search goals  ﬂying person location cost                                                          rovers domain ipud does prob  slightly individual utilities achieving                                                        lems like satellite domain turns  each goal vital sets people                                                        better quality plans require larger horizon  desired location tpp purchasing items cost                                                        problems initial horizon provides gives spuds  equivalent individual utility having item  gai                                                        hrelax heuristic edge ipud    having items change utility plan                 gai      gai                                                        problems heuristics hsum hmax information  considerably idea simulate beneﬁt having                              gai                                                        regarding utility dependencies hsum performs  items build crate need wood    gai  nails hammer saw satellite domain removes worse hrelax solving   problems better qual                                                                     gai  emphasis cost actions costs lower ity plans hmax able ﬁnd null plan  comparatively higher beneﬁt having images problem instance heuristics detect  produce mosaic image domain individual dependencies actions  adds negative goal utility dependencies substitution time takes solve each problem  including negative utility having certain sets images heuristic search methods ip encoding  ending plan pointing inconvenient spot used ipud spuds heuristics solve ip encod  rovers domain focuses substitution having certain ing each search node longer compute                                                        larger problems procedural sapaps heuristic                                                                      ps    case group goal having certain images fortunately sapa lacks heuristic guidance necessary  ﬁnal ending position dependency randomly gen properly select goals utility dependencies                                                                                           gai  erated negative utility                              pernode ip encoding hrelax increased                                                     ijcai                                                    
