       learning “forgiving” hash functions algorithms large scale tests                                        shumeet baluja  michele covell                                                 google                           amphitheatre parkway mountain view ca                                         shumeetcovellgooglecom                           abstract                          easily incorporated                                                        signed longer snippet recognition testing short       problem efficiently finding similar items snippets highlight fundamental retrieval issues       large corpus highdimensional data points                                                         masked through use extra tempo      arises realworld tasks music im                                                        ral coherency constraints possible longer snip      age video retrieval  scaling diffi pets  demonstrate improved performance       culties arise lookups large data sets                                                         retrieval short long snippets       complexity domains exacerbated       imprecise definition similarity paper  background       method learn similarity function       weakly labeled positive examples  generally stated need learn retrieve examples       learned similarity function used basis database similar probe example       hash function severely constrain number manner efficient compact  way       points considered each lookup  tested learn distance metric ideally forces       large realworld audio dataset tiny fraction smallest distance points known dis      points  considered each similar larger largest distance points       lookup  increase efficiency comparisons known similar hastie  tibrishani        original highdimensional space points shental et al  barhillel et al   tsang et al       required  performance far surpasses terms   methods used knearest neighbors       efficiency accuracy stateoftheart knn approaches  knn approaches suited       localitysensitivehashing based technique task work classes able dynami      problem data set                        cally add new classes retraining   approximate knn                                                         efficiently implemented through localitysensitive hash                                                        ing lsh gionis et al   lsh hash func     introduction                                      tions sublinear number elements examined   work motivated need retrieve similar audio compared size database     image video data extensive corpora data   lsh works points feature vectors   large number elements corpora high dimen compared euclidean space  general idea parti  sionality points imprecise nature “similar” tion feature vectors subvectors hash each   make task challenging real world systems     point separate hash tables each hash table using     paper ground discussion subvectors input hash function candidate   realworld task given extremely short  second au  dio “snippet” sampled large data  base songs determine song audio snippet   came   use retrieval database    songs  snippets extracted each song   resulting  snippets figure  short dura  tion snippets makes particularly challenging      task distortionrobust fingerprinting music   widely examined  published systems created   point attempt match longer song snippets   report results smaller datasets use prior prob  abilities scale systems  ke et al  haitsma  figure    typical spectrogram extracted snippets  note   kalker  burges et al  shazam    overlap task given snippet song     sume uniform prior match extremely small snippets                                                         ijcai                                                    neighbors efficiently retrieved partitioning songs expect use  effec  probe feature vector collecting entries tively means learned function maintain   corresponding hash bins  final list potential entropy hashes new samples    neighbors created vote counting each hash songs seen distrib  casting votes entries indexed bin retaining uted hash bins  entropy maintained   candidates receive minimum number votes points hashed small number bins   vt  vt   takes union candidate lists  vt  rendering hash ineffective     takes intersection                         requirement explicitly control entropy     idea extended shakhnarovich  training primary concern   section dem  parametersensitive hashing psh  remove euclid onstrate use neural network multiple outputs   ean requirement  psh uses paired examples positive learn hash function entropy explicitly controlled   similar negative dissimilar learn hash func carefully constructing outputs training examples     tions best cluster halves each positive exam learning methods used  ple best separating halves each negative neural networks hertz et al  pollack    example   approach closest presented suited task show controlling   difference choice learning constraints  entropy each output outputs reduce cor  shakhnarovich  used positive examples similar relation possible  incremental training net  pairs explicitly provided negative examples dissimilar work provides opportunity dynamically set target   pairs induce learning algorithm hash func outputs similar songs similar target outputs   tion  unstated assumption hash function   adequately learns negative examples provide   explicitly maintaining entropy training   nearly equal occupancy various hash bins train neural network input audio spectro  validation step does process unpredictably large gram output bin location similar audio spec  numbers potential neighbors work learning trograms hashed  represent outputs   function created using weakly labeled positive ex neural network binary notation experiments   amples similar pairs coupled forced constraint create hash table  bins train   wards maximum entropy nearly uniform occupancy  network  binary target outputs   explicitly create negative examples dissimilar pairs training select  consecutive snippets    instead rely maximumentropy constraint pro songs sampled  ms apart total  snippets   each   vide separation  shown learning snippet song labeled target   straints advantage allowing similarities song code  weak label  snippets   tween nominally distinct samples requiring temporally close ‘similar’ guarantee   learning structure attempt discover minor non snippets apart similar –   existent differences close examples        song  snippets dif    remainder paper organized follows  ferent songs similar snippets   section properties need learn song require detailed label  ing hash function training procedure analysis  ing labels infeasible obtain large sets   section  shows scaled handle  primary difficulty training arises finding suit  large amounts data  section  demonstrates able target outputs each network  snippet   cretely realworld audioretrieval task section  closes song labeled target output  target  paper conclusions future work           each song assigned randomly chosen                                                        placement Ρs   bits – each song      learning hash functions                           assigned different set  bits Ρs  power                                                         set containing  different sets  bits  sampling    deterministic hash functions map point                                                         replacement crucial component procedure    bin  goal create hash function   groups “similar” points bin similar measured training set target outputs                                                         maximal entropy  using outputs   defined task  forgiving hash function                                                         hash maintaining high entropy crucial preserving   forgives differences small respect   implicit distance function calculated      good distribution hash bins drawback                                                         randomized target assignment different songs     learn forgiving hash function task need                                                         sound similar entirely different output representa  satisfy objectives   hash function   able work explicitly defining distance metric  tions large hamming distance target outputs                                                          force network learn artificial distinctions    hash function learn weakly labeled                                                         hinder entirely prevent network   examples task indications points   similar song label information able correctly perform mapping        parts songs sound similar parts     hash function able generalize                                                                                                                small number bins hash table hold millions   examples given able train samples items section  show efficiently scale size                                                       ijcai                                                      instead statically assigning outputs target training progress  correct  bits  puts shift training  epochs                                                                                                reordering   weight updates measure network’s response each                                  hidden   training samples  dynamically reassign                                                                                             reordering   target outputs each song member Ρ                                      hidden   closest network’s response aggregated     song’s snippets during process maintain   straints snippets each song                                     wo reordering                                                                                              hidden     output songs target correct  outputs                                                                                              wo reordering   each member Ρs  assigned  suitable                                   hidden   procedure specific outputs network     highentropy distribution   fact samesong snippets map outputs                   letting network adapt outputs manner               epoch  outputs training examples effectively reor figure    training output reordering small                                                          large networks   note output reordering number   dered avoid forcing artificial distinctions  through correct outputs   reordering approaches       process outputs effectively reordered  form weak form clustering songs similar songs   likely small hamming distances target outputs   lookup indicating candidates distributed   details similar dynamic reordering respect queries  number hashed bins   caruana et al   training procedure summa include snippet song indicating accu  rized figure    figure  shows progress train racy section use simple recall criterion    ing procedure through epochs compares training snippets hashed bin correct song                            output reordering   note reordering note loose indicator performance   smaller network’s performance barely ran section  utilize multiple hashes make   dom   larger network reordering constraint tighter   forms marginally better   networks exploratory experiments trained  net  trained output reordering learn mapping consis works   hidden units   hidden units   tently networks reordering     hidden units  each used hash ap                                                        proximately  snippets drawn  songs    using outputs hashkeys                     snippets each   songs formed test set   section look network’s stage independent song train  outputs perform used hash keys  ing set  test removed query da  metrics primary measuring perform tabase determined bin hash propa  ance  number candidates each hashed bin gating through networks  propagation each   candidates considered each  network outputs output greater                                                         median response output ascertained     select mn songs define bt  tth binary code training set assigned  assigned     foreach song sm                                     median chosen threshold ensure       │for xm iterations   add snippet smx  training set  network distribution  responses                    ∈             ⇔      │select target tm    st tm  tm     outputs treated binary number representing     idyn iterations                               hash bin         │train network edyn epochs edyn passes through data figure  shows total number candidates cor      │foreach song sm                                rect incorrect hashed bin average       │  │set    Σ os                   x∈xm   mx                            function number hidden units network         │  │ osmx  actual network output snippet smx figure  shows percentage lookups resulted       │set ut      ≤ unassigned binary codes  bin contained snippet correct song         │set     ≤  unassigned songs understand figure  raw numbers important       │for  iterations                                                         examine  looking middle graph query       │  │find  arg min s∈u  t∈u    bt                                                        average hashed bin approximately        │  │set ts  bt       │  │remove   remove         snippets  database                                                      trievals hash bin contained snippet correct     train network efixed epochs                                                         song  note hashes completely random     settings used                                      expect snippet song      xm  ∀m edyn   idyn  efixed  time   figure  shows negative effects                                                         poorer training small networks   returning figure    figure   training algorithm parameter settings used                                                          output reassignment small    standard backpropagation bp used train networks hertz et networks “ hidden” lags large networks “   al    parameters bp learning rate  momentum                                                         ijcai                                                                    performance vs hidden units                   training reordering  random weights                                                                                                                                 candidates                         matches                                                                                                                              bin                                                                                               reordering                                                                                                                           hashe                                                                                                                                                                                                                                                                                                                                                                   reordering                                                              ates  foun                                                    bins correct matches  correct    bins                                                        matches  correct   bins                                                                                                                                                                                                                random                                                                                                             hashe                                           weights                                                             hashe                                                                                                                                                                                                                                                                                                                                                                                               hidden units                                                                             hidden units    figure    performance networks terms candidates                                                           figure    performance training procedures  measured      hashed bin  queries finding matches song queries finding song bin hashed  avg      bin hashed                        snippets examined bin training wreordering                                                            staticoutput training   random networks       hidden” ½ bit accuracy  effect   poorer training seen larger number candidates mumcorrelation selection  minimummutual  hashed bin coupled small absolute change information selection  methods   recall   given networks  chosen greedy manner chow  liu   ac  hidden units figure      using networks counting mutual information explicitly attempt    hidden units reduce number spread samples bins ensuring com  candidates    minor impact bined entropy hashindex bits remains high    recall rate                              method slight advantage      figure  compare performance using used going forward   outputs networks trained output                                                          longer constrained using  bits   reassignment  using networks random weights  pick arbitrary number outputs net  note using random weights random work ensemble hash function  figure  shows   hashing passing snippets through network performance terms number candidates each   likely map similar snippets bin hashed bins correct matches function bits   weightings combinations inputs used hash equivalently number   tuned task  seen figure  total hash bins   figure  shows crucial  lookup higher probability finding snippet sults  selecting hash bits multi  song using fully trained networks ple networks decrease number candidates   networks staticoutput training training   using number bins   number                                                         candidates each hashed bin decreased       using networks practice                    figure   figure  column    second  previous section analyzed performance creasing number bins      each networks terms average number  decrease number candidates    didates hashed bins accuracy lookups   hashed bin   decrease   section combine outputs networks cre number correct matches proportional  ate largescale hashing   far each net creases  instead decreasing  does   works trained  outputs allowing  bins number candidates   section   hash   naïve way scale hash larger num advantage small number candidates   ber bins train network outputs  regain loss matches    larger networks necessitate training data   computationally prohibitive                              performance vs hash bins                                                                                                                                                                                    candidates    instead use facts training networks ran                                                                                 matches                    domized process dependent initial weights  bin                                                                                                        networks different architectures learn different   mappings  given trained multi                                                                                                    hashe  ple networks select bits hash                                      networks’ outputs numerous methods used select                                                                                                                                                     bins correct matches  correct   bins                                                          ates foun ates                                                                                                                                                                    outputs used hash  explored three meth                                                                                                        ods selecting outputs  random selection  mini                                            hashe                                                                                                                                                                                                                                                                                                                       fig  provided comparison training methods sizes                                                                                      hash bins  networks  fig  shows effects using outputs networks   trained  methods hashes test data network size grows figure    increase number bins × matches       depending  hidden units training ranged hours days  decrease   candidates decrease                                                          ijcai                                                      complete hashing                          original highdimensional spectrogram representation    previous sections new query arrives passing through networks snippet repre                                                        sented quantized binary outputs original repre  passed ensemble networks select                                                         sentation longer needed    outputs used determine single hash location   single hash table  analogous lsh general  seen figure line perform                                                        ance hashes  bins   ize hash tables distinct hash functions                                                           number candidates unacceptably large      simply select unused outputs net  work ensemble build hash function indexes smaller numbers hashes shown lower lines                                                         number candidates decreases  expected looking   hash table   arrives passed                                                         right graph number bins  through networks outputs networks   selected hashes used creases number candidates decreases rapidly                                                         settings considered   determine bin hash  figure  experiment                                                          figure provides important results     settings   network outputs   hash    –  bins hash        line  hashes number bins increases                                                         ability best match barely decreases – despite    previous section measured recall                                                         large drop number candidates figure    hashed bin contained snippet correct   song  tighten definition success examining  candidates query                                                          database achieve  accuracy       use final  rank order snippets                                                           figure note lowest lines   database according hash bins   provided hashes contain each snippet   number bins increases accuracy rises –                                                         case decreases  increase oc  ranked snippet occurs frequently                                                         curs large number ties songs   declare success snippet comes song   query  note perform comparisons support break ties random se                                                         unique candidates hashes                                                      shown  sets hashes                                                                                                                                                                                                                                                                                                                                                                                                                                                        ates    hashe                                                                                                                                                                                                                                                       figure    performance sys                                                        unique      tems hashes                   function number bins                                                                                                                                 candidates considered                                       hash bins     smaller better                                                                  match position                                                       shown  sets hashes       times correct song iden                                                    tified higher betterqueries match positioin    match queries                                                                                                                                                                                                                                                                                           hash bins                                                      ijcai                                                    
