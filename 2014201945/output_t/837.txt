                 reducing accidental complexity planning problems                                                patrik haslum                                           national ict australia                                   patrikhaslumnictacomau                          abstract                            investigate transformations aimed reducing                                                        accidental complexity planning problems mainly ab      propositional strips planning    stracting away parts problem easily solved      hard problem general instances  abstraction long history ai planning      problem including commonly used    shown reduce problemsolving effort exponentially      benchmarks easy spite knoblock  potentially increase required      hard solve domainindependent plan  effort b¨ackstr¨om jonsson  methods abstract      ners encoding problem  ing decomposing “factoring” planning problems      general problem speciﬁcation formalism    tracted renewed recently sebastia et al       strips hides structure needs exploited domshlak brafman       solve problems easily investigate use focus “safe” abstraction ﬁnding conditions      automatic problem transformations reduce  solutions abstracted problem guaran      “accidental” problem complexity main tool    teed reﬁnable concrete solution ab      abstraction identify new weaker condi stractions consider reﬁnement abstract solution      tion abstraction “safe” sense polynomialtime operation worst case      solution abstracted problem generated plan exponentially longer short      reﬁned concrete solution polynomial time est plan show examples “difﬁcult” problem      cases show different kinds formulations make safe abstraction impossible sug      problem reformulations applied create gest methods automatically reformulate problems      greater opportunities safe abstraction  make amenable abstraction                                                          space restrictions proofs detailed algorithm    introduction                                       scriptions omitted paper provided                                                        request  planning restricted case propositional  strips formalism general hard problem fact  pspace complete bylander  planning  representation  problems hard fact shown domainindependent planner – – pre  benchmark domains frequently used evaluate planning sented encoding planning problem prob  systems plan simple procedures running lem speciﬁcation formalism starting point stan  loworder polynomial time helmert spite dard propositional strips representation like  problems easy domainindependent plan researchers recently consider al  ners say planners solve problems ternative representation based multivalued  domains – recent planners scale fairly propositional state variables jonsson b¨ackstr¨om   – determines difﬁculty particular planning edelkamp helmert  helmert binthisrep  problem given planner intrinsic com resentation world state assigns each set variables  plexity problem size structure vvn value ﬁnite domain di each action  problem encoding discrepancy essential described pre postcondition partial  complexity problem solved accidental assignments set variables postcondition  complexity difﬁculties added problem interpreted assignment execution action  sult way problem formulated tools adopted variables mentioned postcondition changed indi  solving unique automated planning cated variables mentioned values      terms essential accidental complexity coined ality program algorithm accidental complexity  area software engineering fred brooks  “complexity overhead” caused inadequate tools languages  paper essential complexity refers complexity function making simple solutions difﬁcult state                                                     ijcai                                                        locpkg  locpkg                              tails” ignored “details” taken                                                        account solution abstract problem                                                        valid plan step ﬁnd nonabstracted                             truck truck  version plan “bridge gap” each step           loctruck              loctruck           abstract plan solving abstract problem generally eas                                                ier ﬁlling missing details plan frag                                                        ments needed bridge consecutive steps abstract plan     pkg loctruck  truck pkg truck loctruck  truck pkg typically short recursively each             loctruck  truck loctruck  truck                                                        “bridging plan” successively reﬁned through number ab                        locpkg                       straction levels                                                      ideal abstraction hierarchy solution higher                                                        level abstraction reﬁned solution  figure  causal graph simple logistics problem lower abstraction level inserting actions “ﬁll  domain transition graphs problem variables details” changing solution  edges dtg ﬁgure annotated precon appears abstract level downward  ditions corresponding actions variables ﬁnement property deﬁned bacchus yang                                                         property does hold abstract solution                                                        planner reﬁnable concrete solution forc    multivalued state variable representation expres ing backtracking generate new solution higher ab  sively equivalent propositional strips straction level  structed strips representation making use knoblock  proposed efﬁcient procedure  state invariants particular kind sets atoms automatically generating abstraction hierarchies satisfying  property exactly atom each set true ev weaker property called ordered monotonicityinsuchahier  ery reachable world state methods automatically archy exists abstract plan reﬁned  extracting “exactly one” invariants strips encod concrete plan problem solvable knoblock’s  ings proposed edelkamp helmert  procedure constructs graph atoms planning  scholz  helmert                        problem essentially causal graph computes tree    make use kinds graphs summarise strongly connected components graph  structural properties planning problem causal topologically sorted yield hierarchy procedure  graph planning problem directed graph nodes equally applied multivalued variable representation  correspond problem variables multivalued proposi problem resulting hierarchy trans  tional edge  iff action portation problem described resulting hierarchy  effect  precondition effect  considers abstract level location  particular causal graph contains bidirected edge package package  tween pair variables exists action concrete level location truck  changes simultaneously domain transition graph “reﬁnement problem” subproblem solved  dtg multivalued variable directed graph reﬁning plan level abstraction hier  nodes correspond values domain archy known solvable clearly abstract plan  edges correspond actions change value reﬁned case example transportation  variable graph edge v problem variable loctruck representing lo  exists action precondition includes  cation truck change value  postcondition includes  v                  value state variables    illustrate consider simple transportation prob changing possible reﬁne ab  lem packages pkg pkg loaded stract plan moving packages inserting actions  unloaded truck freely truck appropriate locations  locations multivalued variable representation generally downward reﬁnement property  problem variable loctruck values ensured abstracting sufﬁcient condition  truck  truck variable  locp     solvability relevant reﬁnement problems met  each package values   idea termed “safe abstraction” recently introduced   truck note values variable helmert improvement fast  mains correspond atoms strips encoding ward planner formalise safe abstraction deﬁne free  problem causal graph domain transition graphs domain transition graph variable subgraph  variables shown ﬁgure                    dtg containing edges actions                                                        pre postcondition variable value                                                        v free reachable value iff path    abstraction                                                                                                     free dtg  helmert’s condition safe  idea hierarchical abstraction planning solve  problem ﬁrst abstracted version similar technique numeric variables described  “critical” aspects problem considered “de chen et al                                                      ijcai                                                    variables        actions                            problem dtg free dtg variable free                                         dtg variable strongly connected            pre              post                         externally required value  precondition    init                                     goal externally caused value               pre                      free reachable variableb                post                   safely abstractable abstracting away makes  goal                                     transition   domain free               pre                      post             safely abstractable way following                                                        abstraction  figure  small instance binary counter planning note causal graph problem shown ﬁgure  problem                                              forms single strongly connected component                                                        knoblock’s abstraction procedure applied problem                                                        yields single abstraction level comprising entire                                                        problem causal graph summarises possible causal                                                                                 dependencies planning problem recall edge                                                                                                                                variables iff exists action                                                                                                                 changes  depends changes  free dtg                                                                                         condition hand focuses possible                                                        achieve independently variables                                                                                             reformulation  figure  causal graph problem ﬁgure   dtg variable free dtg       typically ways planning problem                                                        encoded speciﬁcation formalism strips                                                        widely recognised different problem formulations  abstraction free dtg forms single strongly suited particular planning  nected component value free reachable technique abstraction conditions discussed  value condition unnecessarily previous section rely causal domain transi  strong downward reﬁnement ensured sufﬁ tion graphs considered “structural” features  cient value variable required reﬁne problem suffer encoding sensitiv  abstract plan free reachable value ity ideally planner able accept problem  variable consequence plan let formulation necessary reformulate way  externally required values variable values suited planners needs reformulation  appear precondition action changes vari possible exploiting structure problem description  able let externally caused values example consider known towersofhanoi  values appear postcondition action problem problem used knoblock   changes variable  plus value demonstrate construction effective abstraction hi  initial state                                    erarchy figure shows encoding used knoblock                                                        represents position each disc peg disc  theorem  externally required values strongly different action moving each disc figure  connected free dtg free reachable ex shows different encoding domain introduced  ternally caused value  goal value bonet  geffner  formulation position  free reachable each externally required value each disc peg noting beneath  abstracting safe preserves downward reﬁnement larger disc set additional atoms represent                                                        disc peg “clear”  checking safe abstraction condition reﬁning each step action moves each disc  abstract plan polynomial size encodings correct sense capture  main state variable corresponds number essential constraints original problem dif  atoms make variable principle straight fer properties figure  shows corresponding  forwardly transfered components vari causal graphs strips representation prob  able exponentially increasing computational cost lem formulations causal graph knoblock’s formu  “domain transition graph” component ab lation consists three strongly connected components each  stract state space variables component contains atoms relating position disc forming    illustrate difference weaker condition tree threelayered abstraction hierarchy  makes consider planning problem involving binary causal graph bonet’s  geffner’s formulation  counter increased steps prob single connected component knoblock’s  lem description multivalued variable form small procedure does ﬁnd abstraction hierarchy  instance shown ﬁgure  variables represent mulation problem does safe abstraction  bits counter figure  shows causal graph condition deﬁned ﬁnding safe abstractions                                                     ijcai                                                    atoms  disc peg disc  large medium small                        locpkg intruck locpkg                 peg  peg peg peg    actions  movesmall                                                        loctruck   pre small   add small   del small                                                        figure  causal graph capacity restricted transporta  movemedium   pre medium small small tion problem   add medium   del medium    movelarge                                                                                     pre large medium medium placed action preconditions goal        small small      performing substitutions possible eliminate   add large   del large                                  clear  atoms action preconditions                                                    atoms appear preconditions goals  atoms                                                removed problem entirely   disc pos disc  large medium small           present example make                 pos  peg peg peg smaller disc   clear pos                                         problem hierarchically abstractable obtain                                                        formulation necessary invent new propositions ab  actions                                     breviating certain conditions substitute ac   pre cangoon clear clear tion preconditions effects example relevant   add clear   del clear                        ditions medium disc medium peg ∨                                                         medium large∧on large peg each                                                                                 peg  figure  different strips encodings towersof eliminating atoms based “exactly one” invariants  hanoi problem                                        simple operation easily automated each invariant                                                        gives rise possible – mutually exclusive – substitu                                                        tions chosing – – applied arrive                                                        better problem formulation easy automating  problem formulation “coupling” fewer mutual introduction new abbreviating atoms difﬁ  pendencies variables generally better cult substitution polynomial time  bonet’s  geffner’s strips formulation rephrased – au introduce complex action preconditions  tomatically – identical knoblock’s formu quire exponential space compile away  lation good purpose    atom clear   second encoding actu  composition  ally equivalent statement ¬∃xon  atom acts “abbreviation” complex condi let return simple transportation problem section  tion equivalence simply restatement “ex  add capacity restriction truck carry  actly one” invariant kind used construct package time naturally encoded                                                        new variable intruck values  multivalued variable representation problem ex                                       ample clear large  medium large        truck  truck     each package  small large    invariant clear   causal graph new problem shown ﬁgure   large  true exactly ¬on medium large  ∧      variable loctruck  safely abstractable  ¬on  small large    holds consequently fore variables representing locations                                                        packages dependent intruck  vari                                                        able abstracted problem does longer nicely                 large peg                        compose variable intruck   eliminated                                                                             clear             large peg                                            peg reformulation described previous section                                 clear peg            ing invariant fact truck equiva                    large peg            peg                              peg              lent ¬in pkg truck    ∧¬in pkg truck             medium peg                                                 peg does remove coupling variables                             peg                 medium peg                       locpkg   locpkg                                                                  medium peg                             peg                 problem unlike towersofhanoi                                                   clear problem coupling variables locp            small peg                                             intruck   “transient” assuming goal            small peg                    clear peg                                 clear peg            package  location leave                                            peg             small peg        peg                                        peg    truck abstract plan consists steps loading                                                                                             alternatively clear recast derived predicate  figure  causal graphs formulations tower using axioms deﬁned pddl                                                             ofhanoi problem shown ﬁgure                        kind restriction encoded essentially                                                        way gripper satellite domains                                                     ijcai                                                    initial location unloading goal location recall domain  simpliﬁcation  location truck abstracted away al  actions plan change variables plan gripper    solved                                                           logistics        solved  does intruck    truck           movie            solved  holds start end locp   mystery           changes permanently intermediate state vis mprime           ited abstract plan “uninteresting” sense grid      minor ∼  atoms  actions taken state blocksworld  ops minor  –  atoms  taken state plan elevator strips solved  completes plan just undoes effects freecell    ﬁrst actions plan replaced depots      minor  –  atoms                                                                                       single action compound pre postconditions driverlog       minor  –   atoms small  sequence affecting solvability prob            instances solved                                                            rovers           signiﬁcant  –  atoms  lem performing replacement sequences satellite      solved  breaks coupling variables            airport           –  atoms                                                            pipesworld                                                                promela           theorem  let  condition variables let psr small    varied  –  atoms  set actions effect includes let  set actions precondition includes cifc does figure  simpliﬁcation obtained current techniques  hold initial state inconsistent dis planning problems different domains  joint effects action postcondi  tion action inconsistent disjoint  goal condition action  conclusions  precondition consistent commutative  action ∪ replacing actions ∪ abstraction decomposition “factoring”  composite action each executable sequence bbk powerful tools reducing accidental complexity caused    ∈ each bi ∈ – excluding sequences encoding planning problem general problem speci  effect – safe preserves solution existence ﬁcation formalism strips shown                                                        applicability methods widened formulat  safe sequencing condition holds effect ing weaker condition safe abstraction applying                                                        different reformulations make problems amenable  volving pair variables ef  fects each new composite actions change abstraction               replacement removes causal cou implementation  current results  pling variables simultaneous change techniques described action set  causal dependencies reduction method proposed haslum  jonsson   action changing having precondition standard reachability relevance analysis im  dependencies exist directions plemented limitations safe abstraction  course gained making replacement              variable limited bound size    collapsing sequence actions single action composite dtg reformulation restricted atom elimina  proposed junghanns  schaeffer inthe tions simple replacing condition composition  context solving sokoban puzzle form sequences length strategy try each technique  “tunnel macros” sequences correspond turn iterating simpliﬁcations  moves tunnel “productive” direc spite restrictions operations time  tion movement satisfy criterion having “un consuming disabled domains                                         interesting” intermediate states condition theorem  different methods ﬁnding invariants cases result  thought deﬁning “tunnel” state space different multivalued variable encodings  planning problem tunnel macros sokoban suited simpliﬁcation sys  serve different purpose viz reduce search depth tem completely automatic  restricted actions cause coupling vari table  summarises best achieved result attempt  ables likewise botea et al  show adding macro ing simplify collection planning domains comprising  actions planning problem improve efﬁciency domains st nd rd th planning  search cases heuristic accuracy interestingly competitions encode simple problems  removing macros haslum jonsson  marked “solved” ta  procedure propose generating macros ble repeated abstraction removes entire problem  adaptable purpose                                                           relevance analysis uses ideas similar scholz’s     nonempty causal coupling si path reduction technique stronger standard  multaneous change variables mentioned    method                                                     ijcai                                                    
