             automatic veriﬁcation knowledge time nusmv             alessio lomuscio∗                 charles pecheur†                 franco raimondi‡          dept computing                    dept ingi                dept science      imperial college london uk     univ cath louvain belgium      univ college london uk      alomuscioimperialacuk        charlespecheuruclouvainbe         fraimondicsuclacuk                          abstract                           gammie van der meyden  raimondi lo                                                        muscio  penczek lomuscio  efforts      show problem model checking multi strictly related recent shift attention theo      dimensional modal logics reduced    rem proving model checking suggested      problem model checking arctl extension     halpern vardi       temporal logic ctl action labels    article intends make contribution line      operators reason actions particular proposing efﬁcient model checking technique verifying      introduce methodology model checking   ctlk epistemic logic branching time penczek      temporalepistemic logic building ex  lomuscio  based nusmv cimatti et al      tension model checker nusmv enables   mainstream model checker temporal logic speciﬁcally      veriﬁcation arctl brieﬂy present   present article makes following points      implementation report experimental results shown model checking ctlk automat      veriﬁcation typical security protocol ically rephrased model checking action      volving temporalepistemic properties proto based temporal logic arctl pecheur raimondi       col dining cryptographers                 second present automatic translator smvlike                                                        language semantics mas extension    introduction                                       main beneﬁts proposal current state                                                        oftheart lies efﬁciency approach try  epistemic logic fagin et al  meyer hoek  demonstrate discussing experimental results  traditionally played important role artiﬁcial intel  ligence ai does epistemic logic provide formal  preliminaries  basis reasoning states knowledge automatic summarise formalism interpreted systems sec  reasoners seen formal speciﬁcation tion  formalism reason time knowledge  language reason artiﬁcial agents epistemic agents section  discuss problem  concepts particularly appropriate multiagent systems model checking using nusmv  mas knowledge constitutes basis rational ac  tion line work typically considers epis  interpreted systems ctlk  temic modal logic sn combined temporal logic formalism interpreted systems introduced fagin et  branching time linear time interpreted computationally al  provides formal framework reason time  grounded semantics wooldridge  knowledge agents let Σ set                                                               Σ           terpreted systems fagin et al  suitable variation agents  set local states li set  wooldridge lomuscio                 actions acti associated each agent                                                                     →  acti    attention focused prov protocol pi li  assigning list enabled actions  ing metalogical results notably completeness computa each local state local states agent change according                                                                                       ×     ×      →  tional complexity various temporal epistemic combi local evolution function ti li le act li                                                                                                         Σ  nations halpern moses  meyden  meyden le set local states special agent                                                                                      ×    ×  wong  considerable attention given environment act act  actntheset                                                              ×    ×  past years problem devising model check  ln called set global states given  ing techniques formalisms hoek wooldridge set initial global states ⊆ sthesetg ⊆ representing                                                        set reachable states generated evolution    ∗      author acknowledges support epsrc grant  accordance protocol agents’ local  grs                                            evolution functions given set atomic propositions ap    †with riacs nasa ames performing work    ‡with mct nasa ames performing work evolves synchronously each time step  author acknowledges support epsrc grant cna agents perform                                                    ijcai                                                    interpretation ⊆ × ap aninterpreted logics aim verifying knowledgebased agent  tuple                                             based systems main streams identiﬁed                                               liactipiti i∈Σ iv              recent literature    logic ctlk combines traditional ai epistemic   dedicated tools  works line include  logic sn temporal logic ctl speciﬁcally syn model checker mck model checking knowl  tax ctlk deﬁned follows                         edge gammie van der meyden  imple       ¬     ∨                                   menting veriﬁcation certain classes interpreted   ϕ       ϕ  ϕ   ϕ  exϕ   egϕ    ϕuϕ    kiϕ         systems  verics nabialek et al  model                                                            checker mas described using networks timed au  kiϕ read “agent knows ϕ” ctl opera  tors standard meaning — example egϕ read tomata mcmas  raimondi lomuscio   “there exists path ϕ holds forever” derived obddbased model checker mas described  operators deﬁned standard way clarke et terpreted systems  al  fagin et al  evaluate ctlk formulae  extensions translations existing tools hoek                             ∼      ∼      kripke model mis   rt  nv  associ     wooldridge  propose use local propo  ated given interpreted follows sitions reduce problem model checking  set reachable states ⊆ set initial states knowledge time veriﬁcation temporal                        ⊆    ×  temporal relation rt     obtained using    model   wooldridge et al  deﬁne  protocols pi evolutions functions ti epistemic mable language show veriﬁca        ∼  ⊆    ×          ∈ Σ  lations      fori      deﬁned checking     tion language reduced veriﬁcation  equality ith local component global states promela code input language model               ∼                  lln lln iff li li     checker spin holzmann  similarly bordini  evaluation relation appearing                     et al  introduce language agentspeakf    formulae deﬁned  interpreted mis  present translation promela code  standard way refer clarke et al  fagin et al   penczek lomuscio  formal deﬁnition experimental results papers cited show   ϕwhere standard satisfaction relation average purposebuilt tools handle larger exam                                                        ples trying use existing tools requires man    model checking using nusmv                       ual intervention show necessarily                                                        case remainder paper aim introduce  given kripke model formula ϕ model checking                                                      fully automated methodology builds existing  deﬁned problem establishing tool nusmv show performs comparably bet  ϕ approach represents checked ter similar approaches  ϕ speciﬁcation ﬁfteen years  techniques tools developed perform veri  ﬁcation task automatic way mainly temporal models  model checking ctlk nusmv  temporal speciﬁcations nusmv cimatti et al  section introduces logic arctl actionrestricted  mature model checker temporal logics ctl proposed extension nusmv enabling  employed veriﬁcation number examples veriﬁcation arctl operators section  show  successful model checkers exist notably spin holz problem model checking ctlk  mann vericsnabialek et al        duced problem model checking arctl    nusmv dedicated modelling language smv   permitting veriﬁcation ctlk using nusmv ad  language permits deﬁnition temporal model dition section  present smvlike language  expressive compact modular way nusmv avoids interpreted systems translation smv code  building exploring state space corresponding  models explicitly instead nusmv applies symbolic tech  logic arctl  niques based ordered binary decision diagrams obdds thelogicarctlpecheur raimondi  extends  propositional satisﬁability sat solvers efﬁciently logic ctl allowing quantiﬁcation action labelled  form veriﬁcation large state spaces             paths given set atomic propositions ap    nusmv command line tool available operat set atomic actions aa syntax arctl  ing systems source code available terms ﬁned  gnu general public license gpl                                                               ϕ    ¬ϕ  ϕ ∨ ϕ  eαxϕ  aαxϕ       model checking mas state art                              eαϕuϕ   aαϕuϕ                 recently different approaches proposed extend  α    ¬α  α ∨ α                      model checking techniques temporal logics richer                                                        ϕ α state action formulae ∈ ap ∈    note deﬁnition reachable state space aa atomic propositions states actions respec  contains states reachable through rtthis tively similarly ctl temporal operators  condition crucial proper interpretation ∼i kiϕ rived standard way                                                    ijcai                                                       model arctl   tuple form                       agentmodelxtdnusmv  satvp vawheres set states ⊆                  ctlkspecs  set initial states set actions ⊆ × ×  transition relation notice dependence actions             ap                                                              mtranslator  vp  →     interpretation atomic propositions                 aa  va  →     interpretation atomic actions  given model stvp vatheαrestriction                      nusmvmodel  denoted mα model mα stαvp va                        arctlspecs                                             tα transition relation  ∈ tα iff       ∈                       α   natural extension                     nusmv  va propositional formulae α refer pecheur             warctlsupport  raimondi  details    model checking purposes extended nusmv  support veriﬁcation arctl formulae used                  true        false                                                                                   counterex  nusmv existing “input” variables model arctl actions  particular modiﬁed syntax formulae  accepted nusmv follows                           figure  veriﬁcation work ﬂow interpreted systems   ctlexpr     existing ctl forms                                                          translation temporalepistemic formula                eaxsimpleexprctlexpr                                                        arctl formula inductively deﬁned follows                eagsimpleexprctlexpr                                                          • ppifp  propositional formula                easimpleexprctlexpr   ctlexpr                                                          • exϕerunxϕ       eϕuψ   erunϕuψ                                                                                    simpleexpr conditional expression  egϕ     erungϕ  kiϕ     aagti xϕ  stricted contain input variables example                                                      words use labels run agti respectively  eaap   concrete syntax ea puq ad denote temporal relation epistemic relation  ditionally implemented extensions nusmv agent respectively translation allows model  code base enable veriﬁcation operators check ctlk formulas model checking translations  details modiﬁcations scope arctl clearly similar approach used  paper refer pecheur raimondi  complex modal logics  details                                               translation interpreted                                                        arctl model   mis performed automatically    reducing ctlk arctl                           translator implemented section  problem model checking ctlk section   reduced problem model checking arctl  smvlike language interpreted systems  speciﬁcally given ctlk model mk ctlk    designed extensions smv language                                                    mula ϕk  deﬁne arctl model     mk      scription interpreted systems ctlk formulae                                              andanarctlformulaf       ϕk   mk     ϕk     extensions translated standard smv model                         Σ             iff mk        ϕk  let                arctl formulae concretely extensions deﬁned                                     ∼         set agents let mk    rt i∈Σv     library macros work ﬂow needed  a model associated some interpreted   form veriﬁcation interpreted summarised                                               liactipiti i∈Σ iv  model  mk      figure  notice manual intervention pro  arctl model   satvp va         vision input ﬁle describing problem veriﬁed    •                                      language   agent     asso                                                        ciated    smv    variables vvn    •                                        set aa       run agtagtn  contains   deﬁne   local state through   declaration      proposition run label temporal transitions deﬁned agentnamevvn      actions      rtandn  propositions agti each agent each agent represented input variables ivar                                             ∼      label epistemic equivalence steps deﬁned protocol each agent described relation                     aa      action set                              local state action variables smv trans    • transition relation combines temporal transi statement transition function encoded using      tion rt epistemic relations ∼ii∈Σ fol new ttrans statement initial conditions using new      lowing way states s ∈ runs ∈ tinit statement figure  shows structure typical                                                   iff srts  ii agtis ∈ iff ∼i  iii deﬁnition class agents smv module note                                           aaks ∈ iff ais  ≤ ≤ “” starts comments smv cimatti et al                                                     details    case iii necessary interpreting distributed knowledge kernighan ritchie  generalpurpose macro  operators discussion scope paper processor available unix platforms                                                    ijcai                                                    module anagentargsenv  agent module    var local     local state              paid anonymously cryptographers    agentmelocal      declare local state      paying dinner nsa na    ivar action    actions agent        tional security agency three cryptographers respect    tinit          initial conditions    trans action                                      each other’s right make anonymous payment           case      agent’s protocol         wonder nsa paying resolve uncertainty fairly    ttrans nextlocal             case     agent’s evolution function carrying following protocol                                                          each cryptographer ﬂips unbiased coin  module main            main module                  menu cryptographer right  varenv                declare env variables  var alice  anagentargsenv   agent          outcome each cryptog     bob   anagentargsenv   agent       rapher states aloud coins see–the                                                        ﬂipped lefthand neighbour ﬂipped–fell    figure  example agent deﬁnition extended smv side different sides cryptogra                                                        phers payer states opposite sees                                                        odd number differences uttered table indicates    internally translation generates additional boolean cryptographer paying number indicates nsa  variables ivars corresponding run agti propo paying assuming dinner paid  sitions arctl model run  bobme     cryptographer paying learns  aliceme  model fig  ttrans statements utterances cryptographer  expand standard trans statements conditioned run is”    note state space nusmv model pri protocol extended number cryptog  ori restricted temporally reachable states raphers greater three encode scenario using  imposed translation scheme state reachable                                                        interpreted introducing agents ccn  iff reached initial states through series agent represent environment selects  temporal steps equivalently iff exists reverse path payer result coin tosses beginning each  state initial set assuming ac run nondeterministically raimondi lomuscio   cess reverse temporal transitions through action                                                          local state cryptographer ci modelled using  dition arctl model state condition init three variables equali paidi eveni representing respec  initial states set temporally reachable states                                                        tively coins ci equal different  captured following arctl formula                                                        ci payer number different                                                        utterances reported list actions each cryp               reachable ≡ ebackfinit                                                        tographer includes actions say equal  temporal formula folded say different performed compliance  nusmv properties used nusmv model description provided initial state variables  example ctlk formula kiϕ expands each cryptographer initialised null value                                 →     arctl formula aagti reachable   ϕ                  updated ﬁrst time step reﬂect environ    library implements scheme particular ment’s conﬁguration point each cryptographer utters  ttrans  construct implements encoding scheme allowing appropriate phrase represented say equal say  temporal transitions traversed forwards different variable storing value “differ  wards speciﬁcation side new operators tax tag ent” utterances odd appropriately updated  provide equivalent smv’s builtin ax agetcre key properties scenario van der meyden  stricted temporal transitions new operator kk imple su  easy express using ctlk instance  ments kiϕ instance ctlk formula agkap ∨q  expressing agent knows written                                                            odd ∧¬paid  → axk    paid ∨ paid  tagkkapq                                                                                                                                                    ∧¬kcpaid  ∧¬kcpaid    example application                                                                 → axkc¬paid   ∧¬paid         section model protocol dining cryp  tographers using formalism presented section  formula  expresses property ﬁrst cryptog  order enable veriﬁcation using methodology pre rapher did pay dinner odd number  sented section  protocol introduced chaum utterances update local state ﬁrst  chaum  modelled using agents various cryptographer knows remaining cryptog  authors van der meyden su  raimondi lo raphers paid dinner ﬁrst cryptographer does  muscio  kacprzak et al  aim proto know payer formula  expresses prop  col allow anonymous broadcasting messages erty number utterances ﬁrst cryptog  usually introduced using following scenario wording raphers knows paid dinner  chaum                                      refer kacprzak et al  possible encodings    “three cryptographers sitting dinner protocol choice motivated need  favorite threestar restaurant waiter informs comparing experimental results ones raimondi  arrangements maitre d’hotel lomuscio  kacprzak et al                                                     ijcai                                                        crypt bool vars nusmv    mcmas   verics        performance optimisation techniques imple                                     mented nusmv ontheﬂy model checking                                    caching obviously experimental results depend ex                            hm         amples tested appropriate draw ﬁnal conclu                           hm                     ms    ms     na         sions example additionally expect                     ms    hm     na         verics outperform approach presented try                     ms     na      na         ing falsify formulas large state spaces neverthe                                                        think discussion shows technique                                                        presented signiﬁcantly complement model           table  average experimental results       checkers instances                                                                    encoded scenario using language pre    sented section  able verify    example cryptographers experimental results  reported section                                                                                                                                 nusmv                                                                                                  mcmas                                                                                                     verics    experimental results                                   time   table  reports time results obtained veriﬁcation   example presented previous section function                                                                 number cryptographers ﬁrst column    column reports time required veriﬁcation                                                                  formulae   appropriately translated arctl                   crypt  mulae second column reports number boolean                                                             figure  comparison experimental results  variables required encode example clarke et al   details technique provides es  timate size model instance  boolean compare methodology existing  variables required encode example  cryp approaches based existing model checkers section   tographers corresponding maximal state space size approaches require manual intervention   ≈                                           translation speciﬁc programming language    fourth ﬁfth columns report time results ob programming language temporal model check  tained veriﬁcation protocol dining cryp ers feasible large examples  tographers using model checkers mcmas verics considered  reported raimondi lomuscio  kacprzak et al   veriﬁcation formulae mentioned conclusion  function number cryptographers                                                        paper presented novel technique model  tice case mcmas veriﬁcation time does                                                        checking ctlk relies translation logic  depend formula veriﬁed usually                                                        actionbased temporal logic model checking logic  fraction time spent reading parsing model                                                        nusmv approach sound complete  opposite true nusmv different imple                                                        implementation shows experimental results line  mentation choices column reports time results                                                        better existing specialised tools  verics differently previous cases verics’s                                                          use macros extending nusmv language  results based implementation bounded model                                                        allowed easy prototyping limits syntactic ﬂexibil  checking ctlk penczek lomuscio dueto                                                        ity natural syntax supported  verics’s performance formulae worse                                                        volved translation facilities planned work includes  model checkers verics normally capa                                                        investigating optimisation veriﬁcation scheme  ble ﬁnding counterexamples false formulae effectively                                                        level translation ctlk arctl  kacprzak et al  shown certain false formu                                                        through additional extensions optimizations nusmv  lae veriﬁed scenarios  cryptographers                                                        self limited analysis dining cryptogra  mcmas technique article handle                                                        phers scenario experimental  magnitude state spaces                                                        results available literature future work cer    discussion                                       tainly plan use technique tool presented                                                        investigate realistic scenarios  comparison results obtained three model                                                          important issue addressed handling  checkers reported figure  clearly formu                                                        witness traces generated nusmv need formu  lae considered approach presented performs                                                        lated terms original ctlk model  moderately better mcmas verics better                                                        like investigate using nusmv’s satbased bounded    source code examples available model checking capabilities current obdd  httpwwwcsuclacukstafffraimondidincryptcodezip based approach given limitation nusmv requires                                                    ijcai                                                    
