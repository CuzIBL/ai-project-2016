        reducing     checks      revisions    coarsegrained      mac     algorithms∗                                      mehta†   mrc  van  dongen                                cork constraint computation   centre ireland                          abstract                           acd van dongen  algorithms                                                        low oe  space complexity repeat sup      arc consistency algorithms widely used     port checks non optimal bound oe      prune search space constraint satisfaction worstcase time complexity number      problems csps coarsegrained arc consistency   constraints number variables maximum      algorithms like ac acd ac ef   domain size variables hand al      ﬁcient comes transforming csp gorithms ac mohr henderson  ac      arcconsistent equivalent algorithms repeat bessiere cordier  ac bessiere      edly carry revisions revisions require support regin´  use auxiliary data structures avoid      checks identifying deleting unsupported peating support checks optimal worstcase      values domain variable revisions time complexity oe      difﬁcult problems values sup      port revisions ineffective  introduction ac mohr henderson      delete value consume lot      work avoid repeating sup      checks time propose solutions   port checks using auxiliary data structures depending      overcome problems introduce   algorithm auxiliary data structures store      notion support condition sc guaran  supports each value involved each constraint      tees value support scs reduce sup belief reducing checks helps solving problems      port checks maintaining arc consistency dur quickly allowing algorithms repeat      ing search second introduce notion   checks relieves burden large      revision condition rc guarantees additional bookkeeping save time especially      values support rc avoids candidate  checks cheap paper introduce notion      vision queue maintenance overhead ran   support condition sc guarantees value      dom problems scs reduce checks required   support scs help avoiding se      mac mac   rcs avoid       quences support checks eventually leading support       total revisions combining storing maintaining support values      results reducing  solution time   coarsegrained arc consistency algorithms repeatedly                                                        carry revisions remove unsupported values    introduction                                       domain variable revisions ineffective                                                        remove value example rlfap   arc consistency ac algorithms widely used prune solved using mac mac  total revisions  search space binary constraint satisfaction problems ineffective introduce notion revision condi  csps mac sabin freuder  backtrack al tion rc guarantees values support  gorithm maintains arc consistency during search rcs help avoiding ineffective revisions  reduces thrashing behaviour backtrack algorithm queue maintenance great source time  usually fails times result local consumption van dongen mehta  furthermore  inconsistencies macx uses acx maintaining arc show reverse variable based heuristics mehta  sistency during search                               van dongen  result fewer revisions    arc consistency algorithms proposed                                                          remainder paper follows section   hand algorithms ac mackworth                                                        brief introduction constraints section  discusses revision    ∗this work received support science foundation ordering heuristics coarsegrained algorithm ac  ireland grant pic                 sections   introduce notions support condition    †the ﬁrst author supported boole centre research revision condition section  presents experimental  informatics                                          sults conclusions presented section                                                            function ac boolean    constraint   satisfaction                               begin                                                                 constraint satisfaction problem deﬁned set  begin  variables nonempty domain dx each variable ∈     select  ∈   set constraints subsets variables  eﬀective revisions                                                                   each ∈  binary constraint cxy variables subset      remove  cartesian product dx dy speciﬁes      revisex changex  allowed pairs values consider csps       dx  ∅                                                                    return false  constraints binary                                                                   changex    value ∈ dy called support ∈ dx            eﬀective revisions  eﬀective revisions                                                                        ∈ cxy similarly ∈ dx called support ∈   eﬀective revisions    dy ∈ cxy support check consistency check         ∪   neighbour ∧   test ﬁnd values support each value     eﬀective revisions                                                                      ∪   neighbour  ∈ dx called viable variable constraining return true  value supported value dy csp end  called arcconsistent variable ∈ each value  ∈ dx viable                                                      figure  ac                                              density csp deﬁned  en −  tightness constraint variables                          xy                           tion based heuristics consequences removing  deﬁned  −   dx × dy  degree                    xy                                  values     propagated  variable number constraints involving variable              dx                                                        neighbours variable selected domain  starting search mac transforms input csp                                                        neighbours constraint graph revised  arcconsistent equivalent domain variable                                                              setting usually fewer selections  arcconsistent equivalent arcconsistent domain dx                                                        queue cost performing checks checks  variable remainder paper variable                                                        cheap time saved queue needs  use  arcconsistent domain             ac                                         fewer selections effective revision results  dx current domain directed constraint                                                        updating queue  graph given csp directed graph having arc                                                                                        each combination mutually constraining variables reverse variable based heuristics mehta van dongen                                                              use denote directed constraint graph  ﬁrst select variable repeatedly select arcs                                                        form    revision  input csp                                                                                                      arcs dx regarded                                                        support based heuristics variable    revision  ordering   heuristics                    time each value dx seeks support respect  coarsegrained arc consistency algorithms use revision neighbours currently unknown  dering heuristics select arc data structure called support exists variable selected number  queue set really arc selected revisions performed  num  queue dx revised dy revise ber arcs form currently present queue  dx dy means removing values dx number selections overhead  supported value dy revision order queue management usually  ing heuristics inﬂuence efﬁciency arc consistency selecting variable revising neigh  algorithms wallace freuder  clas bours currently present queue  siﬁed three categories arc based variable based mc complete relaxation advantage using  gregor  reverse variable based mehta van reverse variable based heuristics queue needs  dongen  heuristics differences updated effective complete relaxation  follows                                           effective revision reduces number    arc based revision ordering heuristics com times arcs added queue overall fewer revi  monly presented given criterion select arc sions performed results saving support checks  revision selecting best arc pseudocode ac equipped reverse variable based  expensive van dongen mehta  each selected arc revision ordering heuristic depicted figure  revise  corresponds exactly revision function ac depends depicted figure   revisions selections result figure  dx changed complete relax  signiﬁcant overhead arc based heuristics used ation result effective revi  queue needs updated effective revision sion effective revisions   happened  unless domain variable dy arcs form neigh  dates overhead                         bour  added queue    variable based heuristics mcgregor  ﬁrst select dx changed result effec  variable repeatedly select arcs form tive revision effective revisions   arcs  revision arcs exist form neighbour added  dy regarded propaga  queue  modulo constraint propagation effects avoidsqueue maintenance overhead                                              wyxb              wyxb                                                                                                support  condition                                                                                                                                                       arc consistency algorithms based notion sup                                    port arc consistency algorithms proposed far                           lot effort identifying support conﬁrm existence                          support identifying support needed case                  case   guarantee value supportable knowing support  exists optimal algorithms like ac ac figure  support inference using different weights  track known support each value  support lost try identify support                                                        supported  ac algorithm conﬁrms existence    support identifying during course search                                     inefﬁciency lies space complexity oe                                                                                                      necessity maintaining huge data structures during search ab ∈ cxy         ∈ ry    propose notion support condition sc left hand side equation  cumulative  guarantees value support key point weight respect equal sum  guarantees existence support identi weights supports right  fying storing maintaining support values                         ac                                                        hand side equation  removed weight dacy  let cxy constraint let ∈ dx respect equal sum weights  denoted let scount  num                                                        values removed dacy respect note  ber supports dacy value ∈ dx weight associated each arcvalue pair  equa  supported support dy tion  special case condition equation   ry  dacy  dy removed values case cumulative weight respect  arcconsistent domain  ry  upper bound                                                        equal number supports dacy  number lost supports removed weight equal number val  following condition true supported                 ac                                                        ues removed dacy condition equation                scount    ry           support condition sc sc guarantees existence                                                        support allow save checks  order use equation  coarsegrained mac illustrate use sc infer existence sup  algorithm each arcvalue pair involving arc port using example shown figure  figure   value scount  assigned num case  weight associated each value  cu  ber supports dacy support coun mulative weight respect  equal  ters initialised remain static during search number supports dacy assume  overhead maintaining pseudocode deleted dacy removed weight dacy  computing support count each arcvalue pair respect  equals  ry  inferred  depicted figure  algorithm  stores support dy cumulative weight  ac’s known support note greater removed weight dacy simi  algorithm does repeat checks uses bidirectional larly support value dx inferred  property constraints easy problems initialising sup single value removed dacy values  port counters overhead terms support checks removed dacy removed weight dacy  save time checks hard problems  support inferred value dx    generalise idea presented equation  cumulative weight each value dx   associate weight nonnegative integer  greater removed weight  each arcvalue pair following condition true weights used sc holds value ∈                                                        dx support guaranteed exist dy let       function initialisesupportcounters             examine case  figure  weight assigned         ac                                   each value dacy support count respect         problem arcconsistent           cumulative weight  weights          each ∈                                                                   each ∈ dacx                      supports   respectively like              scount                       case  single value removed dacy support          each ∈         inferred values dx values            each ∈ dacx                                                                                      each ∈ dacy   removed removed weight dacy                 supports begin              unlike case  support inferred values                  scount   scount                     scount   scount    situation removed                 end                                    existence support inferred                                                        cumulative weights  removed weight         figure  initialisation support counters  dacy  using support   function revisex var changex     begin                                              ifeﬀective revisions                                                                                                 changex  false                                   ∪    neighbour ∧  ∧                                                                                                             each ∈ dx                              min ab ∈ wx   ∈ dy  ≤  ∈  wx                                                                                       ry                                 ab  ∈ cxy       ∈ ry                eﬀective revisions             skip  supported                       ∪   neighbour ∧         ∈ dy supports begin                                                                                                   min ab ∈ wx   ∈ dy  ≤  ∈  wx             dx  dx                                                          ry            changex  true         end     end                                                figure  enforcing rc adding arcs queue              figure  algorithm revise ac                                                          note sc rc presented way                                                        idea clear possible  counts weights lets scs save checks                                                        taken real implementation compute cumula    revise function ac depicted figure   function slightly different original version tive weight each arcvalue pair search starts                                                        value deleted domain variable  uses sc avoid series checks  known advance eventually lead support update removed weight arcs form                                                             change domain size variable  use sc restricted ac integrated ·  coarsegrained algorithm                         complete relaxation update lcw                                                        arcs form · space complexity storing     revision  condition                             cumulative weights oe space complexity stor                                                        ing removed weights lcws arcs  support check core operation carried arc oe increases oe during search  consistency algorithms reduce number checks al space complexity using sc conjunction rc  gorithms proposed far  perform viability checks like oe   oe maxd  ac  check status counters like ac  updating cumulative weight arcs  make inference based supports stored auxil form · change domain  iary data structures like ac  carry scs men complete relaxation overhead option  tioned section  tests auxiliary support update lcw arc revising dx  checks ascs support checks expensive dy instead arcs form ·  ascs overhead reducing checks complete relaxation cheaply  does help reducing solution time   avoid addition arc queue future    improvements proposed far reduce support considered weak version revision condition  checks ﬁne level granularity propose wrc lcw maintained arcs  coarser check arc level idea use disadvantage possible ineffective revisions  coarser check avoid complete revision saved saved rc  save support checks avoid auxiliary support independent work boussemart et al  uses  checks given arc   cumulative weight                                                                                                                                                    min    ab ∈cxy   ∈ dacx   ∈ ry   lcw values dx respect greater specialp case equation  note pthat setting  removed weight     values                       dacy                   dx    wx  each arcvalue pair condition  supported expressed follows exploited determining arc revision                                                        given arc condition examines cumulative                                                     weight support count values  min          ∈ dx                                             dacx                                           ab ∈cxy                  ∈ ry            dx respect equation                                                    condition static version revision condition  condition revision condition rc rc cause cumulative weight updated arc  used coarsegrained arc consistency algorithms during course search remains static arcs  reduce unnecessary revisions maintaining arc allow avoid ineffective revisions  sistency during search                               avoided rc    rc holds exploited selecting arc  arcs added queue case  experimental results  corresponding revision carried  case arc added queue use  introduction  revision condition tightening condition adding section shall present results prove  arcs queue arcs added rc does practical efﬁciency sc rc wrc implemented  hold depicted figure  implementation mac mac equipped comp van  advantages using rc threefold reduce dongen  revision ordering heuristic denote  number arcs added queue arc based reverse variable based variable based  reduce number arcs selected heuristic comp arccomp revcomp varcomp respec  queue reduce total number revisions tively details heuristics                                                  mac                mac                            heuristic condition weight checks time revisions checks time                                                                              arccomp sc                                               wrc                                                sc  wrc                                                                                             sc                                                 sc     scount                                        wrc                                                wrc    scount                                 revcomp sc  wrc                                         sc  wrc scount                                        rc                                                 rc     scount                                        sc  rc                                            sc  rc scount                                           table  results random problems                                                   mac               mac                               heuristic conditions checks time revisions checks time                                                                                arccomp sc                                              wrc                                               sc  wrc                                                                                            sc                                         revcomp wrc                                             sc  wrc                                           rc                                                sc  rc                                               table  results rlfap    mehta van dongen  during search macs vis rc especially effective difﬁcult problems  ited nodes search tree equipped lot time original version mac requires   domdeg variable ordering heuristic lexico times checks original version mac  graphical tie breaker dom domain size deg reduces  using sc interesting  original degree variable algorithms written note random problem quasigroup prob  experiments carried linux pc pen lem mac sc requires fewer checks original  tium iii  ghz processor  mb ram perfor version mac remember mac uses non  mance measured terms number support checks optimal algorithm ac mac uses optimal al  cpu time seconds number revisions gorithm ac usually repeat checks differ     experimented random problems    ent branches search case rlfap  sc  generated frost et al’s model generator gent   used mac improvement number  et al  httpwwwlirmmfr˜bessiere         checks required during course search  generatorhtml   model random csp instance total number checks caused initialisation  characterised number cummulative weights  variables uniform domain size average den mac spends fewer checks mac  sity uniform tightness each combination requires time corresponds results presented  hn pi  random problems generated table  van dongen  using sc mac mac  shows mean results   located reduces number checks reﬂected  phase transition table  column labelled solution time fact marginal saving  weight  denotes weight associated each arc cases consume time shows  value pair  default value scount denotes checks cheap carrying ascs reduce checks  weight associated each arcvalue pair really great help reducing overall solution time  support count table  corresponds real world instance rc wrc avoid  total revisions  rlfap   came celar suite table  cor rcs able save ineffective revisions wrcs  responds quasigroup holes problem achlioptas et satisfying rc wrc avoids complete revision  al  order   holes                  reduces checks acss overhead queue                                                        management   revcomp wrc used    discussion                                       mac mac average  reduc  immediately notice sc reduces number tion solution time compared original algorithms  checks required mac mac  instance  equipped arccomp signiﬁcant results  random problem checks required mac  arccomp rc presented space restric  mac reduced   respectively tion overhead maintain lcws revcomp  weight associated each arcvalue pair sup need updated effective com  port count observed random problems sc plete relaxation case arccomp varcomp
