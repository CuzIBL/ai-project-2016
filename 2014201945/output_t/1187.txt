                                     logical circuit filtering                                       dafna shahaf       eyal amir                                       science department                                 university illinois urbanachampaign                                          urbana il  usa                                         dshahafeyaluiucedu                        abstract                            approaches developed represent belief                                                        states compactly logic bdds bryant  log      logical filtering problem tracking pos ical filter database progression winslett  lin      sible states world belief state sequence reiter  update representation      actions observations fundamental guarantees compact representation simple      applications partially observable dynamic  domains amir russell  instance guarantees      mains paper presents ﬁrst exact logical compactness tractability sequences strips      ﬁltering algorithm tractable determin actions preconditions known hold impor      istic domains tractability result interesting tantly straightforward approach logical filtering      contrasts sharply intractability ciding clause belief state representation      sults structured stochastic domains key time  based belief state time twasshown      advance lies using logical circuits repre conpcomplete liberatore       sent belief states prove ﬁltering time                                                          paper show solving update problem      representation size linear sequence                                                        entirety easier polytime creating new      length input size independent                                                        belief state piecemeal present cfilter– ﬁrst exact      domain size actions compact repre                                                        tractable logical filtering algorithm handle      sentations number variables result                                                        terministic domain importantly time compute      ing formula number state features                                                        lief state space represent depend      report reasoning algorithm answer                                                        main size furthermore number variables result      ing propositional questions circuits                                                        ing formula number state features com      handle questions past time steps smooth                                                        pare · number variables used bounded      ing evaluate algorithms extensively ai                                                        model checking clarke et al       planning domains method outperforms com      peting methods orders magnitude   extend cfilter nnf circuits internal negation                                                        nodes show similar space time bounds hold                                                        restricted representation show    introduction                                       reason output circuit including smoothing queries  work ai applies models state changes past results useful perspec  time applications use dynamicsystem models tive representationspace complexity sidestep previ  diagnose past observations predict future behavior make ous negative results beliefstate representation section  decisions applications consider multiple possi  intractability results stochastic domains  ble states initial state known key advance lies using logical circuits rep  state observed fully time step resent belief states instead traditional formulas show  fundamental reasoning task domains logical updating logical circuit formula amounts adding  filtering amir russell  task ﬁnding internal connectives original formula ad  set states possible belief state sequence ob vantage determinism feature true action iff  servations actions starting initial belief state action true true action    logical filtering large deterministic domains impor did change interestingly empirical examination  tant difﬁcult planning monitoring diagnosis suggests graphical representations bdds  partially observable deterministic domains estimate maintain compact representation updates  lief state biere et al  cimatti roveri  cfilter applies problems require beliefstate  bertoli et al  petrick bacchus aspartof update bounded model checking planning  performing computations estimation difﬁcult partial observability attractive nature approach  number states belief state exponential apply standard planning techniques fear  number propositional features deﬁning domain reaching belief states large represent                                                    ijcai                                                      logical filtering                                  possible orientations left  problem logical filtering tracking rotating triangle  degrees each possible state updated  state world referred filtering imag middle world state we√   ine assembly robot items order edge expect edge  construct machine parts randomly oriented observing edge right robot eliminates  brought goal orientations assembly belief state leaving robot  beginning parts located conveyor belt knows orientation triangle  each drifts hits fence perpendicular belt  rotates edges aligned fence                                            figure  sensor measures edge providing par  tial information part’s orientation partial  edges equal length sensor  noisy robot rotate certain  discrete place belt pick                        try assembling deﬁne problem formally  deﬁnition  deterministic transition transi  tion tuple p r ﬁnite set propo  sitional ﬂuents ⊆ powp  set world states state               contains exactly ﬂuents true ﬁnite set                                ×   →                                                                √  actions   transition function figure  beliefstate update   triangle left pos                                                        sible initial states middle progressing rotate– rotating  executing action state results state rs    ◦  partial example   onbeltpart partofassem thetriangleby putting belt right  blypart touchparte touchparte     observing length state eliminated  pickuppart assemblepart rotatepart    sequel assume implicit transition   circuit filtering                                                                                                                                                   filtering hard problem  belief states                                                        na¨ıve methods enumeration intractable large                                                        domains following amir russell werepresent                                                        belief states logic solution provides foundations                                                        research guarantees exact compact rep                                                        resentation classes models restricted                                                        action models beliefstates canonical form use log  figure  conveyor belt triangle drifts hits fence ical circuits ﬂat formulas order extend results  rotates edge touching fence measured deterministic domains section                                                        representation explain update action    robot tries track state world observation sequence reason result  observe completely possible solution  maintain belief state– set possible world states  representation    ⊆  ρ   belief state robot updates belief state beliefstate ρ represented logical formula ϕ  result performing actions receiving observations  ⊇ astates ρ iff satisﬁes ϕ ∧ ϕ  deﬁne semantics filtering              satisﬁable ϕ beliefstate formulawerepresent  deﬁnition  filtering semantics amir russell  belief state formulas circuits    ⊆                                           ∈  ρ   states robot considers possible ai deﬁnition  logical circuits logical circuits di  assume observations oi logical sentences  rected acyclic graphs leaves represent variables    filterρρ  sequence             internal nodes assigned logical connective each                               ∈       filteraρ   rs ρ                  node represents formula– applying                    ∈                 filteroρ  ρ true                 connective node’s children    filteraj oji≤j≤tρ                                                        allow connectives ∧ ∨ ¬ ¬ nodes       filter ajoj ij≤tfilteroifilteraiρ                       ∧  ∨  step  progression step  ﬁltering exactly child  corollary                                                         explain avoid internal ¬ nodes nnf                                state ρ  rs performing use logic represent domain description  action receiving observation eliminate ﬁnite set effect rules form “a causes g”  state consistent                 action propositional formulas  wlg    figure  illustrates beliefstate update imagine that√ conjunction literals semantics rules  robot isosceles right triangle edges size   follows performing state iterate through  edges currently touching fence rules rule’s precondition holds effect                                                    ijcai                                                    hold rs leads contradiction state formula ϕ  domain description dit  possible execute rest ﬂuents stay outputs ﬁltered belief state logical circuit  preconditions hold state does change algorithm maintains circuit data structure point  make action failure lead sink state            ers nodes pointer node represents    consider triangle figure  triangle formula rooted node used  belt action  rotate rotate touching edge interchangeably maintain pointers following  change a’s effect rules mulas  formula cb constraint base – knowledge  “a causes touche ∧¬touche onbelt ∧ touche” obtained far sequence receiving observations  “ causes touche ∧¬touche onbelt ∧ touche” knowing actions possible execute constrains                                                                                   ∈  “a causes touche ∧¬touche onbelt ∧ touche” belief state  ﬂuent  formula explf                                                        formula explains true figure     cfilter                                         node marked etch explanation formula touche                                                        time root node explanation time   described domains beliefstates represented number variables representation  present circuitfiltering algorithm cfilter small  allowing formulas involve ﬂu                                                        ents time  way similar regression explf  procedure   cfilteraioii≤tϕd                expresses value ﬂuent function ini  ai actions oi observations ϕ initial belief state  tial world state cb gives constraints initial    domain description                               ϕ                      state                                           preprocess                         belief state cb∧ ↔ expl inother                  a                                                           f∈p            processdomain    i≤t                          words possible model satisfy cb each ﬂuent    ∈ explf  new proposition    cb  timeϕ                                    replaced formula explf                       process sequence                    preprocessing phase extract data    ito                                    main description procedure cfilter line  cre         progressactionai                           ate node each ﬂuent initialize explf pointers         filterobservationv oi                      create circuit initial beliefstate ϕ             ∧      ↔ explf     return cb  f∈p                                    using explf nodes set cb pointer lines                                                          iterate through sequence update circuit  procedure   progressactiona                                                    pointers time step lines      action                                          ﬁnally return updated belief state             update cb executed possible                 f’s nextvalue explanation        closer look                                   ¬f             caused held did cause          circuit constructed follows preprocessing    ∈ effectsa                             stage extract useful formulas domain         cb  cb ∧ time possaf                                                        scription let effectsa set ﬂuents action         explf  time nextvalaf         ∈                                          affect each set need know      effectsa explf explf                   affect fletcauseaf formula describing  procedure   filterobservationo                      causes true simply precondition rule  observation                             causing hold disjunction                                                                                                    cb  cb ∧ timeo                               set false   causeaf                                                        possible execute hold causea¬f  procedure   timeψ                                  deﬁned similarly  ψ             aformula                                             example      rotate section              return equivalent circuit time    effectsatouche touche touche        ∈   ψ                 replace node pointed explf                           ∧    return ψ                                             causeatouche  onbelt touche                                                           causea¬ touche  onbelt ∧ touche   procedure   processdomaind aii≤t                                                          procedure progressdomain constructs formula   domain description ai actions          extract ”next value” ”possible” formulas  nextvalaf evaluates true iff holds                                                        given previous state intuitively caused    ∈ ∈ai         nextvalaf  causeaf ∨ ∧¬causea¬f  hold held did affect similarly         possaf  ¬causeaf ∧ causea¬f     formula possaf states possible execute regard         optional simplify formulas                ing did cause true false                                                        time                figure  cfilter algorithm              preprocessing iterate through sequence pro                                                        cedure progressaction uses formulas update                                                        lief state constructs circuit asserting action  algorithm overview  cfilter presented figure  demonstrated section causeaf represents conditions cause extracted   receives actionobservation sequence initial belief domain description                                                     ijcai                                                    possible corresponding poss formula adds initial value true note ﬂuent  cb line  builds circuit nextval formula time step corresponding node track  procedure time ensures circuit uses time ﬂuents nodes replace ﬂuents time step ex  construct new poss nextval circuit leafs planations queries given advance does  represent ﬂuents previous time step time replaces change complexity ﬁnding pastexplanation  equivalent explanation nodes circuit im node olog time note mecha  plementation crucial efﬁciency replacement nism tracking previous explanations interesting  instead copying formula need applications ﬁltering nonmarkovian domains  date edges graph using pointers way  share formulas recursively maintain compactness sat circuits    new circuits built explanation point building query circuit check satisﬁability tradi  ers updated line  new explanation root tional approaches check circuitsat converting circuit  corresponding nextval circuit built earlier line  cnf formula approaches doing grow  section  deal observation procedure representation exponentially duplicating shared subfor  filterobservation similarly use time time mulas grow number variables signiﬁcantly  formula simply add cb                       instead run inference circuit number                                                        works show structural information lost cnf en                                           coding used sat procedures signiﬁcant                                                   formance improvement using circuit sat solvers                       ∨                       solve problem efﬁciently effectively origi            ∧                                      nal nonclausal encoding algorithms                                                       proposed recently taking advantage circuit structure                                    ∧                   ganai et al  thiffault et al  use                            ∧                           simple algorithm cdpll                                                          cdpll  generalization dpll iteration                                  uninstantiated variable chosen set truethe                                                        truth value propagated far possible resulting                                            smaller circuit example parent                                                        set true cdpll called recursively  figure  updating explanation touche rotate                                                        satisfying assignment backtracks tries                                                        ffalse assignment return unsat    example   figure  shows update explanation                                                        cdpll  takes oe·l time oe space circuit  touche action rotate rectangles                                                        edges leaves  nodes represent explanation pointers time  action circuit image nextval  formula procedure time replaced ﬂuents cor  extended example  responding explanation nodes                         detailed example process inter    ∨ node root graph representing state estingly example demonstrates logical circuits  touche action right branch describes case represent compactly belief state represent  action caused hold left branch compactly using cnf formulas variables  case held action did falsify domain includes ﬂuents  pn odd follow  iteration pointer touche point node ing sequence actions makes odd equal ⊕ ⊕ pn    note reuse timet explanation nodes parity ﬂuents actions  an−  internal nodes possibly representing large subformulas deﬁned sets odd  ⊕ ai                                                        sets odd  odd ⊕  formally    query answering end formula                                                                                                         ∧¬   ∨  ¬  ∧                                                          “a  causes odd       ”  cfilter returns updated belief state ϕ  represented “a causes ¬odd ¬p ∧¬p ∨ ¬p ∧ p”  logical circuit interested satisﬁability queries “a causes odd odd ∧¬p  ∨ ¬odd ∧ ”  ϕt ∧ ψ satisﬁable entailment queries ϕt  ψor                                                                                               “a causes ¬odd ¬odd ∧¬p  ∨ ¬odd ∧ ”   ∧¬                                                                                           ϕ    ψ unsatisﬁable following construct circuit                                    ⊕  corresponding query run inference     applying sequence  an− sets odd  pn                                                        show algorithm maintains belief state  query circuits                                        sequence  let ψ arbitrary propositional query formula want  check ϕt∧ψ satisﬁable similarly obser preprocessing domain  vation add ψ cb replace ﬂuents expla phase extract poss nextval formulas  nations new cb query circuit queries usually examine action speciﬁcations ﬂuent  time circuit structure allows interesting affected odd executable does cause                                                            ¬  queries particular smoothing– queries refer past odd odd  did change value  steps causeaodd ∧¬p ∨ ¬p ∧                                                    ijcai                                                       causea¬odd  ¬p ∧¬p ∨ ¬p ∧                                               possaodd  ¬causeaodd ∧ causea¬odd                              easy hold simultaneously                          formula simpliﬁed true                                                                                          ϕ   executable similarly actions possible time initial belief state true  execute poss formulas equal true    nextval formulas executing odd                       ⊕     ≡       ∨  set causeaodd ∨ odd ∧¬causea¬odd                                                                                           ∧    ∧    equivalent causeaoddinotherwordsodd                                              set ⊕ similarly action ai odd                        ⊕                                                                               set pi odd note simplifying formulas            ⊕  mandatory representation compact      executing actions                                                          imagine    receive  arbitrary sequence                                                                                              aa  an− odd ∧¬pn performing actions                                     receiving observation figure  describes                                                                     time performing  algorithm updates beliefstate sequence  time  create node ﬂuent                                                                           true nodes represent value ﬂuent time                                                                    set pointer rectangles each formula                 ⊕  want maintain formula cb constraints set  true  initial knowledge              ⊕  explanation formula each ﬂuent set corresponding  node                                                                           execute arriving time  constraint  added cb action executable                                                                 explanation formula pi changed does affect       time performing aa  thing changed state odd new  explanation  ⊕  construct graph                                                                                          mula update explanation pointer root node                           note image shows xor gates just sake clar                               ⊕       ∧  ity fact each replaced ﬁve gates                ⊕  depicted                                                          executing similar time  construct graph             ⊕                   odd’s new value odd ⊕ note substitute  ﬂuents formula oddp explanations time        ⊕   pointers previous time step                                           ∧¬    execute  an− observe odd pn                  just example observation alternatively                                                                                       think querying possible odd ∧¬pn  holds process actions update ex time tn performing  an− observing                               ∧¬  planation odd add odd pn constraints                   odd ∧¬pn  creating new cb circuit updating pointer finally  return circuit pointers                                                                                                     updated belief state                                                                   ⊕       ∧  answering queries                                                                show example truthvalue propagation                       ⊕                                                                               assume time  ptrue rest set false                                 values propagated result cbtruethat                 ⊕                    assignment consistent sequence                 ⊕      analysis complexity                                                               correctness                                                                                       theorem  cfilter correct formula ϕ                                       sequence actions observations aioi i≤t                figure  propagating truthvalues       ∈ satisfy cfilteraioii≤tϕ         filteraioii≤ts ∈ satisfy ϕ                                                    ijcai                                                    
