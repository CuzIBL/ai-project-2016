             transferring learned controlknowledge planners                       ∗                            susana fernandez´   ricardo aler    daniel borrajo                                     universidad carlos iii madrid                           avda la universidad  leganes´ madrid spain                      emailsusanafernandez ricardoaler danielborrajoucmes                          abstract                          means machine learning ml techniques applied                                                        planning range macrooperators acquisition casebased      problem solving task employs    reasoning rewrite rules acquisition generalized policies      search ai planning needs heuristics efﬁciently ductive approaches learning heuristics ebl learning      guide problemspace exploration machine      main models inductive approaches based ilp       learning ml provides techniques au detailed account      tomatically acquiring heuristics usually                                                          despite current advance planning algorithms      planner solves problem ml technique gen                                                        techniques universally superior strategy plan      erates knowledge search episode terms                                                        ning planning problems domains instead imple      complete plans macrooperators cases                                                        menting universal optimal planner propose obtain      heuristics named control knowledge plan                                                        good domaindependent heuristics using ml different      ning paper present novel way                                                        planning techniques learn control knowledge      generating planning heuristics learn heuristics                                                        each domain planning paradigms behave      planner transfer plan                                                        domain future lead creation      ner approach based fact dif                                                        domaindependent controlknowledge repository      ferent planners employ different search bias                                                        integrated domain descriptions used      want extract knowledge search                                                        planner implies deﬁnition representation lan      formed planner use learned knowl                                                        guage extension standard pddl compatible      edge planner uses different search                                                        different learning systems obtain heuristics      bias goal improve efﬁciency                                                        planners use learned heuristics      second planner capturing regularities      main capture     paper ﬁrst step direction      bias employ deductive learning method   studying possibility using heuristics learned      ebl able automatically acquire control speciﬁc planner improving performance      knowledge generating bounded explanations   planner different problemsolving biases      problemsolving episodes graphplanbased each planner uses strategy search solutions      planner transform learned knowledge share common decision points like      used bidirectional planner case backwardchaining planners operator                                                        choose solving speciﬁc goal goal select                                                        learned knowledge type    introduction                                       cision potentially transferred make decisions                                                        type planner particular  planning described problemsolving task                                                        studied control knowledge transfer backward  takes input domain theory set states operators                                                        chaining planners graphplanbased planner tgp   problem initial state set goals tries ob                                                        statespace planner ipss based prodigy  tain plan set operators partial order execution                                                        used prodigy given handle heuristics rep  executed plan transforms                                                        resented declarative language heuristics deﬁned  initial state state goals achieved                                                        set control rules specify make decisions  planning shown pspacecomplete                                                         search tree language starting heuristic  fore redeﬁning domain theory andor deﬁning heuristics                                                        representation language goal automatically gen  planning necessary want obtain solutions real                                                        erate control rules applying ml tgp  world problems efﬁciently way deﬁne heuristics                                                        translate ipss controlknowledge description lan    ∗this work partially supported spanish mcyt guage implemented deductive learning method  project ticc mec project tin acquire control knowledge generating bounded expla  camucm project ucminf   nations problemsolving episodes tgp learn                                                     ijcai                                                                                                                                     ing approach builds hamlet  inductivedeductive • initial metastate ∈  learns control knowledge form control                                                                                          • set nonempty terminal states st ⊆  rules prodigy deductive component                                                          • set search operators “apply instan  based ebl                                                                                                                                    tiated action ∈ aσ current state ” “select    far know approach ﬁrst able                ∈    transfer learned knowledge planning tech  instantiated action achieving given goal                                                            gd” operators instantiated bounding  niques transfer learning successfully ap                                     plied frameworks instance reinforcement variables action apply aσ                                                                                                    learning macroactions options obtained learning task • function mapping nonterminal metastates                                                                                                 used improve future learning processes knowl stantiated operators aσ metastate  ∈                                                               edge transferred range value functions  com  plete policies                                      perspective heuristic acquisition key issue    paper organized follows section provides consists learning select instantiated operators  background planning techniques involved section  meta problemspace given each metastate goal  describes implemented learning learned learn functions map metastate sm set                                                 tgp                                           control rules section  describes translation instantiated search operators hsm ⊆ aσ   learned rules used ipss section  shows ex fact decisions planner branching  perimental results finally conclusions drawn   like guide precisely instanti                                                        ated search operator apply each metastate    planning models techniques                     constitute learning points perspective  section ﬁrst uniﬁed planning model paper learn functions composed set control rules                                                        each rule format conditionssm  learning planners ipss tgp            terms uniﬁed model finally proposal select aσ  certain conditions  transfer control knowledge tgp ipss       current metastate hold planner apply cor                                                        responding instantiated search operator    uniﬁed planning model learning                                                          ipss planner  order transfer heuristics planner  needed redeﬁne planning techniques terms uniﬁed ipss integrated tool planning scheduling  model accounts important aspects planning provides sound plans temporal information run  perspective learning using control knowledge integratedscheduling mode planning component  base level domain problemspace nonlinear planning follows meansends analy  deﬁned modiﬁed respect  focusing sis  details performs kind bidirectional  deterministic planning costs             depthﬁrst search subgoaling goals executing                                                        operators initial state combined branch    •                                 discrete ﬁnite state space               andbound technique dealing quality metrics                         • initial state ∈                          planner integrated constraintsbased scheduler    • set goals gd deﬁne set non reasons time resource constraints      terminal states ones terms uniﬁed model described                                                •                                        true st  ∈  ⊆                        each metastate tuple gplg aσp                                                                                                • set noninstantiated actions ad set instan current domain state gp set                                                          pending open goals set assignments      tiated actions aσ                                                                                                                  stantiated actions goals goal    • function mapping nonterminal states instanti                                                                      planner working action planner      ated actions aσ state aσs  ∈                                                                                               selected achieving  aσ instantiated ac                                                                                                 assume aσ  nonempty     tion planner selected achieving   problem space each planner searches current plan solving problem                                                                                    meta problemspace  pur • initial metastate  sg   poses deﬁne components problem space                                                                                                    •  terminal state  form  st       •                                                                                     discrete ﬁnite set states  each lt ⊆  lt            ∈                                                                             state     metastate metastates planner   causal links goals instantiated actions      dependent include knowledge plan plan      ner needs making decisions during search process                                                                            • set search operators composed given      forwardchaining planners each metastate                                 contain state sd domain problemspace current metastate gplg aσp  “select                                                                 ∈                   ∈       case backwardchaining planners goal   gp” “select action achieving                                                                                                           later include instance current state current goal ”  “select instantiation aσ ∈ aσ      sd goal planner working gd ∈ gd set current action ad” “apply current instantiated                                                                                        assignments actions goals                    action aσ current state ”                                                     ijcai                                                                                                                                    ipssasinprodigy language deﬁn      “for each goal ∈ gp  select instantiated action                                                                ing heuristic function sm terms set     aσ ∈ aσ achieving it” goal persists goal  trol rules control rules select rejectorprefer al                                                                           gp successor metastate  ternatives ways instantiating search operators aσ                                                                                                     wise preconditions each aσ added gp  conditions control rules refer queries called                                      metapredicates current metastate search  each removed gp links aσg                                                added      gplg aσpprodigy     pro  vides usual metapredicates knowing                                                          transferring heuristics tgp ipss  literal true current state ∈ sd  trueinstate literal current goal  gd proposal transfer control knowledge  currentgoal literal pending goal ∈    planners requires ﬁve steps  language                                              gp                                            somecandidategoals instance given representing heuristics function   type typeofobject language represent  method automatically generating  ing heuristics admits coding userspeciﬁc functions search episodes  translation mechanism meta                                                        problemspace meta problemspace    tgp planner                                      equivalent providing translation mechanism  tgp temporal planner enhances graphplan algorithm  language representing heuristics  handle actions different durations   interpreter matcher given  use paper planning component leave ipss declarative language deﬁne heuristics  working temporal future work       hipss step  interpreter language step     planner alternates phases graph expan deﬁne ﬁrst three steps relation step   sion extends planning graph graph achieved language close possible used  necessary potentially insufﬁcient conditions plan ipss step  simpliﬁed built  existence solution extraction performs backward using metapredicates possible ones  chaining search planning graph solution ipss declarative language focus steps   solution graph expanded new  include hints language  lution extraction phase starts    tgp performs backwardchaining search plan  learning technique  chooses action achieves each goal proposition section ml technique built based  consistent nonmutex  actions cho ebl generate control knowledge tgpwehave  sen far tgp proceeds goal called gebl graphplan ebl generates explanations  chooses action action achieves goal local decisions during search process  goal effect instead choosing action achieve goal meta problemspace explanations control  level tgp choose persist goal selecting rules order learn control knowledge graphplan  noop action achieve goal levels closer based planner follow standard foursteps approach  initial state tgp consistent set ac ﬁrst tgp solves planning problem generating trace  tions propositions level recursively tries search tree second search tree labelled  ﬁnd plan action’s preconditions persisted successful decision nodes identiﬁed control rules  goals search succeeds reaches level zero oth created consecutive successful decision points  erwise backtracking fails tgp extends level selecting relevant preconditions fourth constants  planning graph additional action proposition nodes control rules generalized variables dis  tries terms uniﬁed model cussion search tree generated solving  scribed                                           meta problemspace problem each decision point                                      • each metastate tuple pggpll pg node consists metastate set successors appli                            plan graph gp set pending open goals cable instantiated operators meta problemspace      set assignments instantiated actions goals present each step      current partial plan plangraph level      search                                           labelling search tree                                                    deﬁne three kinds nodes search tree success    • initial metastate  pgng  ln                                                       failure memofailure success nodes ones      pgn  plan graph built ﬁrst phase level      second phase called times gd long solution path failure nodes ones                                                        valid assignment goals node      set level goals ln level gener      ated plan graph                            possible ﬁnd actions achieve goals                                                        mutex relation violated ones    •                                               terminal state form st pgil   currently constructed plan node fails chil      solution plan extracted ac dren fail planner did expand node node      tions contained                             labeled memofailure happen goals    • set search operators composed previously memoized nogoods failure condition                                                  operator given current metastate pggpll graphplanbased planning level                                                     ijcai                                                      nodes initially labelled memofailure node                                                         level success  fails during planning process label changes failure goalsat person city person city  planner ﬁnds solution nodes belong assignmentsnil  solution path labelled success                                                                  level success    figure  shows example labelled search tree goalsat person city plane city person plane  zenotravel domain solving problem zenotravel assignmentsdebark person plane city person city  domain involves transporting people cities planes  using different modes ﬂight fast slow exam level success                                                         goalsat person city person plane fuellevel plane fl  ple problem consists transporting persons person    plane city      city    city     person      city   city      assignmentsfly plane city city fl fl plane city                                             debark person plane city person city  gd  person city person city                                                           fuel levels fli ranging   level success  plane initially city fuel level  tgp ex goalsin person plane fuellevel plane fl plane city                                                               person city  pands planning graph level  problem assignmentsboard person plane city person plane  goals consistent nonmutex example       debark person plane city person city                                                                   fly plane city city fl fl plane city  failures backtracking initial meta     debark person plane city person city  state composed expanded plan graph pg                                                        problem goals  assignments  level  search level success                                                         goalsin person plane person city fuellevel plane fl  algorithm tries apply instantiation search op  plane city  erator meta problemspace selecting instantiated assignmentsfly plane city city fl fl fuellevel plane fl                                                                   board person plane city person plane  action each goal ﬁnds instantiated action       debark person plane city person city  domain problemspace debark person plane               fly plane city city fl fl plane city                                                                   debark person plane city person city  city achieve goal person city               person city                         sists goal                   generates   level success  child node metastate goal set goalsat person city person city fuellevel plane fl                                                               plane city  sisted goal preconditions previously selected assignmentsboard person plane city person plane  action debark plane city person              fly plane city city fl fl fuellevel plane fl                                                                   board person plane city person plane  plane pair assignment action debark person            debark person plane city person city  plane city  goal person city added              fly plane city city fl fl plane city                                                                   debark person plane city person city  childnode assignments algorithm  continues search metastate ﬁnds action fly  plane city city fl fl    achieve goal      figure  example tgp success search tree  plane city  persists goals opera  tor generates child node preconditions goal persists select operator rules select  action fly persisted goals new pair actiongoal instantiated actions achieve goals decision  added currently constructed plan algo point rule each achieved goal  rithm continues reaches level  actions example ﬁrst decision points  assignment set node metastate represents example figure  rules generated  solution plan                                    select goal person city    search tree labelled recursive algo select operator debark person plane city  rithm generates control rules pairs consecutive achieve goal person city  success nodes eager learning gebl learn order make control rules general reduce  nondefault decisions lazy learning case number trueinstate metapredicates goal  generates control rules failure gression carried ebl techniques   node consecutive success nodes memo literals state required directly indi  failure nodes lazy learning considered rectly preconditions instantiated action involved  planner does explore “lazyness” rule action achieves goal included  spective behave success nodes lazy learning usually figure  shows select goal rule generated  appropriate control knowledge obtained ﬁrst decision points example figure   applied planner correct wrong rule chooses goals moving persons  decisions                                            city arguments metapredicates                                                        targetgoal  somecandidategoals person    generating control rules                         person   city plane plane  said control rules format fuel ﬂy rule selects work goal  prodigy module generates control rules receives referring person giving city  input consecutive success decision points metastates plane  goal assignment sets kinds figure  shows select operator rule generated  possible rules learned select goals rule example rule selects action debark  select goal persists decision point moving person city ipss try                                                     ijcai                                                     controlrule reglazenotravelpzenos                 case ipss splits select action    targetgoal person city           trueinstate person city           select instantiated action           trueinstate person city           trueinstate plane city          according ipss language deﬁne control rules           trueinstate fuellevel plane fl           trueinstate aircraft plane          three kinds rules learned tgp           trueinstate city city           trueinstate city city               guide ipss search process select goals select           trueinstate flevel fl               operator   select action select bindings se           trueinstate flevel fl           trueinstate fl fl           lect instantiated action rules           trueinstate person person             equivalence metastates straightforward           trueinstate person person           somecandidategoals person city translating conditions control rules ipss    select goals person city         selects apply instantiated action operator meta                                                        problemspace changes state sd action added                                                        end current plan  tgp selects  figure  example select goals   rule zeno                                                                               instantiated action achieve goal added begin  travel domain                                                        ning plan given search starts level                                                                                                                                             tgp does modify state  difﬁculty arises  default debark person plane prob deﬁning state sd create trueinstate  lem deﬁnition rule selects convenient plane conditions control rules rules learned  plane city person fuel                                                        tgp considered possibilities simplest  ﬂy                                                                                                                                         state just problem initialstate sec                                                        ond assume tgp persists goal goal   controlrule rulezenotravelzenoe                                                                 currentgoal person city      achieved ipss state           trueinstate person city       reached executing actions needed achieve           trueinstate plane city           trueinstate fuellevel plane fl  persisted goals tgp metastate compute           trueinstate aircraft plane           trueinstate city city               look solution plan progress problem initial           trueinstate city city               state according each action effects partial plan           trueinstate flevel fl           trueinstate flevel fl                 equivalent metastates computed during rule genera           trueinstate fl fl           tion translator makes transformations           trueinstate person person    select operators debark person plane city learning process ﬁnishes ﬁrst split select                                                        operator control rules select action                                                        select instantiation second trans  figure  example select operator rule zeno formation translate trueinstate metapredicates  travel domain                                        referring variable types typeofobject meta                                                        predicates finally translator deletes rules                                                        speciﬁc general rule set sub    translation learned knowledge                   sumed rule given gebl does perform  given metastates operators meta problem inductive step  space different planners differ order use gen  erated knowledge tgpbyp ipss trans  experimental results  late control rules generated ﬁrst language  second translation mind carried experiments show usefulness  syntax small changes given built control approach goal transferring learned knowledge  knowledge language tgp based deﬁned gebl able generate control knowledge improves  ipss semantics translation types conditions ipss planning task solving unseen problems compare  lefthand side rules types decisions  oper learning hamlet learns control rules  ators meta problemspace consider ipss problemsolving episodes according au  translation lefthand side rules conditions referring thors hamlet performs ebl step followed induction  metastates righthand side rules selection control rules  search operator meta problemspace             experiments used commonly used    relation translation righthand benchmark domains repository previous planning  side control rules equivalent search op competitions zenotravel miconic logistics driverlog  erators ipss tgp                     strips versions tgp handle plain                                                        strips version    • decide goal work ﬁrst tgp selects      noop achieve goal equivalent persist domains trained separately hamlet      goal achieved levels closer initial gebl randomly generated training problems      state ipss equivalent search operator choos                                                           tgp does handle variable types explicitly represents      ing goal pending goals                                                        initial state literals ipss domains require variable type    • choose instantiated operator achieve particular deﬁnitions typed pddl      goal planners search operator httpwwwicapsconferenceorg                                                     ijcai                                                    
