              discovering classes strongly equivalent logic programs∗                           fangzhen lin                                   yin chen               department science                       software institute       hong kong university science technology            sun yatsen university            clear water bay kowloon hong kong                    guangzhou china                          abstract                            using computers discover theorems old aspira                                                        tion success stories instance      report successful experiment  lenat  reported able come      aided theorem discovery area logic pro interesting concepts theorems number theory      gramming answer set semantics speciﬁcally  remarkable described petkovsek et al      help computers discovered exact    automates discovery proofs identities espe      conditions capture strong equivalence cially hypergeometric identities involving sums binomial      tween set rule set set coefﬁcients important analyses algorithms      rule set rule set rules example “interesting” theorems dis      subset rule set rules covered fully automatically recent work lin      set rule set three rules  discovering state invariants planning domains      subset rules prove   lin showed ways classify potentially inter      general theorems help verify correct esting constraints according syntactic properties      ness conditions discuss usefulness constraints easily enumerated domains      results program simpliﬁcation          furthermore constraints                                                        invariants checked automatically result sys    introduction                                       tem described lin  discover common                                                        invariants planning domains logistics domain  paper makes contributions reports discover set “complete” state invariants  successful experiment computeraided theorem discovery paper consider problem discovering theo  logic programming answer set semantics second rems strongly equivalent logic programs answer  contributes theory practice logic programming set semantics  discovered theorems capture certain classes notion strongly equivalent logic programs inter  strongly equivalent logic programs new nontrivial esting variety reasons instance lifschitz et  lead new program simpliﬁcation rules preserve strong al  noted sets rules strongly equivalent  equivalence                                          replaced logic program    theorem discovery highly creative human process gardless context identifying strongly equivalent  generally speaking divide steps sets rules useful exercise applications  jecture formulation ii conjecture veriﬁcation com program simpliﬁcation purpose paper  puters help steps instance ma discover conditions set rules strongly  chine learning tools used ﬁrst step com equivalent important conditions  ing reasonable conjectures automated deduction need computationally effective general checking  tools used second step verifying cor sets rules strongly equivalent conpcomplete  rectness conjectures                        cflin     theorem discovery make use learning                                                          discover conditions follow methodology  tasks fundamentally different theorem discovery                                                        lin  looking domains small sizes ﬁrst  starts theory aims ﬁnding interesting                                                        instance discover kinds rules  sequences theory learning                                                                                                      strongly equivalent  consider  induction starts examplesconsequences                                                                                         language say three atoms enumerate possible  aims ﬁnding theory explain given exam                                                        pairs rules language strongly equivalent  plesconsequences                                                        conjecture condition capture exactly set    ∗our thanks yan zhang comments earlier version pairs rules try verify conjecture  paper work supported hk rgc cerg true general case lin  general theorem  hkuste                                        proved automate veriﬁcation try thesame proving general theorems make notice    left sides implica  veriﬁcation easier semiautomatic   tions   considered true      paper organized follows section right sides implications    brieﬂy review basic concepts logic programming sidered false  answer set semantics section  state pre  cise terms type theorems want discover  problem  section  prove general theorems help  prove theorems section  mentioned possible use notion  theorems discovered discuss applica strongly equivalent logic programs program simpliﬁca  tion logic program simpliﬁcation section  ﬁnally tion instance given logic program each rule  conclude paper section                   ask deleted know                                                        ing rules  strongly    logic programming answer set                  equivalent set ask     semantics                                          rule deleted knows rule                                                         strongly equiva  let propositional language set atoms lent general ask following kmn  paper shall consider logic programs rules question  rk  um strongly equivalent  following form                                        rk  vn theorem discovery task       · · ·  hk ← · · ·  pm pm · · ·  pn  come given kmn problem computationally                                                        effective condition holds answer  hi’s pi’s atoms logic program  default negation  constraints   kmn question positive  disjunctions head rules following suppose condition suppose                                                              strongly equivalent  rule form write hdr denote                                                                                 better replace     set  hk psr set  pm ngr                                                                                         presence   purpose  set pm  pn rule written                                                                                 say computing answer sets program way use  hdr ←  psr ngr semantics programs  given answer sets deﬁned gelfond lifschitz result simplify given program ﬁrst choose   save space deﬁnition rules  rules try ﬁnd rules                                                        condition holds replace rules    logic programs said equiva  lent answer sets strongly equivalent simpler rules  lifschitz et al  language logic checking holds                                                        negligible constant time using procedure  program ∪ ∪ equivalent ex  ample ← ← equivalent strongly simplify given logic program practical  equivalent shown ← ← small  strongly equivalent                              number rules given program    lifschitz et al  showed checking strong small worthwhile solve  equivalence logic programs kmn problem small particu  logic hereandthere threevalued nonclassical logic lar paper shall concentrate  problem  classical logic intuitionistic logic rule deleted  problem  lin  provided mapping logic programs  rule replaced  propositional theories showed logic programs  problem presence rule rule  strongly equivalent iff corresponding theories deleted  problem presence  propositional logic equivalent result used rules rule deleted   generating example pairs strongly equivalent problem pair rules replaced single rule  logic programs verifying conjecture repeat example theorems want discover                                                  problems follows    let ﬁnite logic programs set rule strongly equivalent  atoms                                         set ∅ iff hdr ∪ ngr ∩ psr  ∅ ∗  theorem  lin  strongly equivalent iff  propositional logic following sentence valid  general theorems                                               ⊃  ⊃   δr ≡     δr        section prove general theorems help           p∈l          r∈p       r∈p                 verify assertion like ∗ true  each ∈ new atom each rule let propositional language set atoms  form  δr conjunction following construct ﬁrstorder language fl equality  sentences                                            unary predicates three unary predicates hdr                                                      ps  ng each logic program rule assume   ∧ · · · ∧ pm ∧ ¬p ∧ · · · ∧ ¬p ⊃ ∨ · · · ∨ hk                                                       each rule unique three unary pred   ∧ · · · ∧ ∧ ¬p ∧ · · · ∧ ¬p ⊃ ∨ · · · ∨                                              icates xi yi zi each positive number  notice used hdr psr ngr denote sets sequence kmn  rules      atoms previously overload unary pred  rk  um  vn Φ true   icates naturally intended interpretations unary  rk  um strongly equivalent  predicates respective sets                      rk  vn  deﬁnition  given set atoms intended model bb   sequence      fl domain each rule     rk  um  vn rules  unary predicates psr hdr ngr interpreted       atoms Φ true   corresponding sets atoms psr hdr ngr respectively  rk  um strongly equivalent                                                                         conditions rules psr ∩ ngr  ∅                  expressed special sentences called properties fl               sequence                                                                        rk  um rules  deﬁnition  sentence fl property rules                                                                  atoms Φ true   constructed equality predicates xi yi                                                                 rk  um strongly equivalent  zi  ≤ ≤ property Φ rules true holds                                                                 rk      sequence   rn rules Φp  true                                                                    intended model fl Φp  obtained Φ    replacing each xi hdri  yi psri  zi ngri  “only if”  proved help  notice Φp  does mention predicates xi yi following theorem  zi true intended model theorem  let languages func  true intended models                          tion programs    mentioned interested captur strongly equivalent fp fp  ing strong equivalence programs com programs strongly equivalent fp   putationally effective condition speciﬁcally obtained replacing each atom fp  small interested ﬁnding property Φ  kmn  rules sequence kmn proof theorem  fact propositional logic                                                          ϕ                                      fϕ  rules              tautology function                                                 tautology fϕ formula obtained       rk  um  rk  vn ϕ replacing each atom fp      strongly equivalent Φ true    shall prove general theorems help example using theorems section  verify assertion class formulas Φ proving assertions form  section     theorem  reformulated fl fol                                               lows reading hp “p holds” hp “p holds”  aided theorem discovery    theorem  strongly equivalent iff given kmn problem strategy discovering theo  following sentence                                    rems follows                                                         choose small language       ∀xhx ⊃ hx ⊃     γr ≡     γr                                r∈p       r∈p                generate possible triples    true intended models fl γr      rk  um  vn   junction following sentences                                                            sets rules  rk  um      ∀xpsrx ⊃ hx ∧ ∀xngrx ⊃ ¬hx ⊃                                                            strongly equivalent  rk  vn          ∃xhd ∧                                                                             formulate conjecture kmn problem holds      ∀xpsrx ⊃ hx ∧ ∀xngrx ⊃ ¬hx ⊃          language condition true triple          ∃xhdrx ∧ hx                            form  iff generated step     ﬁrst order logic prenex formula form ∃x∀yb  verify correctness conjecture general  satisﬁable satisﬁable structure ele case  ments length nonempty  process iterated instance conjec  prove similar result ﬁrst ture came step  fail generalize step   order languages intended models       process repeated start    theorem  show following language say three atoms increase  orem enable automate veriﬁcation ﬁve atoms later  “if”  property Φ prenex format ideally like process automatic  theorem  loss generality suppose ≥ Φ difﬁcult automate steps    number  property kmn rules form ∃x∀yq possible patterns need examine order come  tuple variables formula does good conjecture step  huge  quantiﬁers following assertions general theorem enables automate veriﬁ  equivalent                                           cation step  theorem  enables automatethe proof sufﬁcient assertion  class lemma  rules mentions  formulas Φ similar result neces three atoms strongly equivalent iff  sary theorem  helps fully automatic following conditions true  nonetheless computers play crucial role steps                                                           strongly equivalent ∅  following report theorems discovered                                                            ps   ⊆ ps   ng   ⊆ ng       hd   ⊆ hd   ∪ ng  using procedure                                                                                                          lemma    rules       problem                                                                                                                                      strongly equivalent  problem asks given rule strongly equivalent ditions lemma  hold rules  set deleted program mention three atoms  following experimental result                                                        theorem   problem lemma  holds gen  lemma   rule mentions three distinct atoms eral case restriction number atoms  strongly equivalent ∅ iff hdr ∪ngr∩psr  ∅  using theorem  show following result    proof condition lemma  equivalent follow  lemma   rule form  ing property  strongly equivalent ∅ hdr ∪ ngr ∩ psr  ∅   ∃xx ∨ ∧ ∨  true rule mentions three                   atoms                                                      ∀xyx ⊃ yx ∧ ∀xzx ⊃ zx ∧                                                                  ∀xxx ⊃ xx ∨ zx  proof suppose strongly equivalent ∅ hdr ∩ psr   ∅ psr ∩ ngr  ∅ suppose set atoms true “if” follows  three new atoms let                  theorem  lemma  noticing property                                                                        ∃x∀yq                          ∈ hdr                    written      required theorem                fp       ∈ psr                    “only if” follows lemma  lemma                                                                                     rule deleted  theorem  fr strongly equivalent ∅ deleted presence rule  construction hdfr ∩ psfr  ∅ case redundant given body  psfr ∩ ngfr  ∅ fr mentions three satisﬁed body satisﬁed furthermore  distinct atoms                                                        entail entailed hdr ⊆                                                          hdr ∪ ngr   theorem   problem lemma  holds gen osorio et al  proved  eral case restriction number atoms strongly equivalent psr ∪ ngr  ∅ hdr ⊆                                                  ngr psr ⊆ psr  ngr ⊆ ngr  hdr ⊆ hdr                                                         recently eiter et al  showed  proof notice condition lemma  hdr ∪                                                        strongly equivalent simplies wang  ngr ∩ psr  ∅ equivalent following property                                                        zhou  exists set ⊆ ngr                 ∃xxx ∨ zx ∧ yx               hdr ⊆ hdr ∪ ngr ⊆ ngr  psr ⊆ psr                                                           special cases “if”              true  “if” follows theorem  theorem  result actually general instance  lemma  “only if” follows lemma  special cases apply ← ←  lemma                                               ← easily show                                                        sets strongly equivalent using theorem    “if” theorem wellknown ﬁrst solution  problem derive                             proved osorio et al   best knowl solution  problem  edge “only if” new    notice need consider theorem   problem rules  problem    rn strongly strongly equivalent iff fol  equivalent ∅ iff each  ≤ ≤ ri strongly equiv lowing conditions true  alent ∅                                              strongly equivalent ∅        problems                    psr  psr  ngr  ngr  hdr ∪ngr  hdr ∪                                                            ng     problem asks rule deleted     presence rule  problem asks proof theorem  easy  rule replaced ﬁrst solve strongly equivalent iff strongly   problem solution  problem equivalent strongly equivalent  come corollary    following experimental result  rules interchanged ei  problem                                              ther deleted strongly equivalent theempty set body conse lemma  three rules rr  quences body true instance ← strongly equivalent  ← strongly equivalent matter conditions lemma  hold three  rules body rules mention atoms  body true consequence  contradiction                                                        theorem   problem lemma  holds gen  example ← ← strongly                                                        eral case restriction number atoms  equivalent rules body                                                            body true consequence                                                                      conditions lemma  theorem  com       problems             plex reason difﬁcult automate step                                                         procedure beginning section condi   problem asks rule deleted presence                                                        tions capture possible cases “subsumed”  rules  problem asks rules                                                                                                   difﬁcult concisely words  replaced single rule  problem asks                                                         examples  rules replaced rules similar                                                                                            ←    previous subsection solution   consider following three rules                                                              ←          ←     problems follow solution  problem                                                                                   strongly equivalent    following experimental result                                                                     condition  lemma  holds  problem                                                                                                                                      change  ←                                                                       lemma   three rules mentions   strongly equiv  atoms strongly equiva alent check condition  lemma  does  lent iff following conditions true hold ∪ ← unique                                                        answer set ∪ ← answer sets     strongly equivalent ∅                                                          strongly equivalent            easy show theorem  ←                                                        “subsumed” ← ←    strongly equivalent                                                        ← “subsumed” ← ←    atom                       results following theorem                                                        yield solution  problem       ∈ psr ∪ psr  ∩ hdr ∪ hdr ∪ ngr ∪ ngr                                                         theorem   problem three rules       hdri  ⊆ hdr ∪ ngr psri  ⊆ psr          ng   ⊆ ng               strongly equivalent iff fol                ri                                   lowing three conditions true       ∈ psr ∩ ngr  hdr ∩ hdr  ∅                                                           strongly equivalent       ∈ psr ∩ ngr  hdr ∩ hdr  ∅                                                           strongly equivalent    notice principle given language subset  hd ps ng rule size  strongly equivalent  principle  −     possible                                                          example ←  ←  rules   triples ﬁrst glance                                                        strongly equivalent ← ←  verifying lemma  experimentally using cur                                                        ← strongly equivalent ←  rently available computers impossible                                                        ←  ← strongly equiva  cut numbers signiﬁcantly results                                                        lent ← similarly following theorem  proved consider  rules common elements hd ps ng theorem   problem rules  hd ps ps ng common element strongly equivalent iff  theorem  rule deleted hd ng following conditions true  common elements according theorem  obtain  strongly equivalent  strongly equivalent rule deleting common elements                                                                strongly equivalent  hd second consider isomorphic rules                onetoone function maps  strongly equivalent                      sets rules       strongly equivalent  essentially names atoms                using certain normal form triples rules avoids  redundant cases ended roughly  mil  program simpliﬁcation  lion triples rules consider testing lemma  mentioned possible use notion  took  hours solaris server consisting  sun strongly equivalent logic programs simplifying logic  ultrasparc iii mhz cpus gb ram             programs strongly equivalent    following lemma reason need “simpler”  replace program  sider language atoms problem     contains
