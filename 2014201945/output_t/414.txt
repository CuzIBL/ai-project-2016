              efﬁcient planning informative paths multiple robots        amarjeet singh      andreas krause       carlos guestrin       william kaiser        maxim batalin          ucla                  cmu                  cmu                  ucla                 ucla                        abstract                          energy limit distance travel number                                                        measurements acquirewe seek ﬁnd infor      sensing applications including environmental mative paths collection robots placing bound      monitoring measurement systems cover large cost incurred each robot battery capacity      space limited sensing resources approach optimize path robots ﬁrst charac      achieve required sensing coverage use robots terize notion informativeness addressing      convey sensors spaceplanning motion spatial phenomena common approach spatial statistics      robots – coordinating paths order maxi use rich class probabilistic models called gaussian      mize information collected placing processes gps cf rasmussen williams  using      bounds resources path length energy ca                np                                      models informativeness viewed terms      pacity – hard problem paper present uncertainty prediction phenomena given      efﬁcient path planning algorithm coordinates mul measurements mobile robots particular      tiple robots each having resource constraint maxi use mutual information mi criterion guestrin et al      mize “informativeness” visited locations  quantify reduction uncertainty provided      particular use gaussian process model measurements selected robot paths like      derlying phenomenon use mutual information notions informativeness mutual information      visited locations remainder space submodular function guestrin et al       characterize information collected satisﬁes important diminishing returns property      provide strong theoretical approximation guarantees locations sensed lesser      algorithm exploiting submodularity property information gained sensing new location      mutual information addition improve efﬁ paper present ﬁrst efﬁcient path planning al      ciency approach extending algorithm using gorithm emip coordinates multiple robots each having      branch bound regionbased decomposition resource constraint order obtain highly informative      space provide extensive empirical analysis paths paths maximize given submodular      algorithm comparing existing heuristics function mutual information exploiting      datasets real world sensing applications submodularity provide strong theoretical approximation                                                        guarantees algorithm    introduction                                         problem optimizing path single robot  mobile robots carrying sensors enable large number maximize submodular function visited locations  realworld largescale sensing applications consider studied chekuri pal  provide  example monitoring algae biomass lake high algorithm strong guarantees ﬁrst provide ap  levels pollutants nitrates lead develop proach sequentialallocation extending single robot  ment algal blooms nuisance algal blooms impair algorithm chekuri et al multirobot  beneﬁcial use aquatic systems blocking sunlight setting minimal effect approximation guarantee  underwater vegetation consuming oxygen water unfortunately running time approach chekuri                                                                                                        producing surface scum odors precise sensing et al quasipolynomial exponential log   quantities pollutants nutrients oxygen levels possible sensing locations impractical using  provide biologists fundamental characterization spatial decomposition branch bound techniques  state lake unfortunately sensors develop practical approach single robot case  high cost resource impractical sufﬁciently theoretical guarantees using sequentialallocation  cover lake devicesin setting set extend approach multirobot case furthermore  robotic boats used sensors various provide extensive experimental analysis algorithm  locations lake dhariwal et al         real world sensor network data sets including data    monitoring algae biomass real collected robotic boats lake  world sensing tasks planning motion robots –  problem statement  coordinating paths order maximize let deﬁne multirobot informative path plan  information collected – fundamental task ning mipp problem assume domain  robots resource constraints storage battery phenomenon discretized ﬁnitely sensing                                                    ijcai                                                    locations associate each location ∈va      deﬁne mipp problem optimizing  sensing cost cv     traveling   paths length robots selected  locations robot incurs necessarily sym sensing locations maximize monotonic submodular func  metric traveling cost cu   robot traverse tion i· note deﬁnition mipp problem al  path space s–tpath sequence lows approach applied monotonic submodu  locations starting node ending cost lar objective function just mutual information guestrin  cp path     vvvl  sum  et al  address sensor placement problem                                                                a⊆v  sensing costs traveling costs path subset locations selected order maxi                                     mize mutual information considering path costs               i− collection  paths     each robot let exploiting submodularity property mi show                                                                           ipip  ∪···∪pk  sensing quality quan discretization ﬁne gp satis  tiﬁes information collected paths ﬁes mild regularity conditions greedily selecting locations  mipp problem desires ﬁnd collection paths based criterion near optimal speciﬁcally  speciﬁed starting ending nodes  each greedy algorithm greedysubset follow                                                                                     path bounded cost cp  ≤ speciﬁed budget ing selecting ﬁrst locations picks loca                                                                         ∪v  −             paths informative ip tion argmaxv  sets                                                          ∪v      large possible formally problem deﬁned  greedysubset iteratively adds locations                                                        increment mutual information guestrin et al         max ip  subject cpi ≤ b∀ ≤          pi⊆v                                            showed greedysubset selects sets achieve                                                                                   −      −ε  lake monitoring example singlerobot problem mutual information   opt  opt  instance depicted fig try ﬁnd optimal mutual information sets                                                        size ε small error incurred discretization  informative path terms predicting algal content                                                    result holds true unconstrained set  experiment cost  correspond energy          required making biomass measurement ting arbitrary locations picked does                                                        generalize mipp problem paper provide  travel cost cv −  correspond energy                                                   efﬁcient algorithm strong approximation guarantees  consumption traveling location −                                                    difﬁcult mipp problem  quantifying informativeness quantify  sensing quality model spatial phenomena common  approximation algorithm mipp  approach spatial statistics use rich class prob problem optimizing path single robot   abilistic models called gaussian processes gps cf ras  maximize submodular function visited locations  mussen williams  models associate ran studied chekuri pal  proposed                                                                                                        ∗  dom variable each location ∈v joint dis recursivegreedy algorithm provides olog                                                                                     ∗  tribution xv  used quantify uncertainty approximation guarantee  number nodes                                                                                 ∗  prediction unobserved locations acquiring visited optimal path  larger  measurements quantify uncertainty use mu number possible locations algorithm  tual information mi criterion guestrin et al  provide path length visits locations                                                                                                        ∗  set locations mi criterion deﬁned  yielding submodular value oopt  log           mip  ≡ hxvp  − hxvp  xp          opt  submodular value collected optimal                                                        path  algorithm provides best approximation  hxvp  entropy unobserved locations guarantee known single robot mipp problem  vpandhxvp     xp  conditional entropy lo recursivegreedy algorithm works iterating  cations vpafter sensing locations mutual possible middle nodes path splitting path  information measures reduction uncertainty left subpath right subpath each possible  observed locations lake monitoring example middle point algorithm applied recursively  like select locations reduce left subpath approach commits selected  certainty algal content prediction entire lake locations left side recurses right subpath    consider constraints length given selected locations algorithm ”greedy”  paths robots problem selecting locations commits nodes selected ﬁrst subpath  maximize mutual information nphard guestrin et al optimizing second subpath   fortunately mutual information satisﬁes following case multiple robots knowledge  diminishing returns property guestrin et al  subexponential approximation algorithm proposed  locations sensed lesser previously paper ﬁrst present algorithm  formation gained sensing new location intuition multiple robot setting exploits approximation algo  formalized concept submodularity function rithm single robot case recursivegreedy  submodular ∀a⊆b⊆vand    ∈vbfa∪s      −    algorithm preserves approximation guaran  fa ≥ fb∪s   − fb intuitive requirement tee algorithm sequentialallocation works succes  function monotonic means fa ≤ sively applying single robot path planning algorithm  fb a⊆b⊆v sensing locations times paths robots stage order  selected higher collected information doublecount information locations visited                                                    ijcai                                                          spatial decomposition phenomenon cell paths travel cells cell paths path smoothing  figure  illustration emip sensing domain decomposed grid cells emip jointly optimizes  cellpaths allocations experiments cells cells nodes connected cell center emip  concatenates betweencell cell paths ﬁnally applies heuristics smooth path    earlier stages supply modiﬁed sensing quality function  spatial decomposition  single robot procedure let ai− nodes krause et al  empirically show addition  visited paths ppi− residual information submodularity mutual information criterion exhibits                              ∪p   −                                                           iai− deﬁned iai−  i−   i−  following locality property sets     residual information effectively commits nodes sensing locations sufﬁciently far apart roughly  visited algorithm stage −  deciding independent order obtain large  nodes visit stage sequential allocation information robot visit locations  procedure implemented line algorithm    far each staying small    surprisingly straightforward sequential application area think planning informative paths  single robot path planning algorithm results deciding regions explore deciding  following approximation guarantee                    locations sense regions motivates  theorem   let η approximation guarantee decomposition sensing domain cells representing  single path instance informative path planning prob clusters sensing locations run recursive  lem sequentialallocation algorithm achieves greedy algorithm cells instead actual sensing  approximation guarantee   η mipp prob locations fig  presents illustration approach  lem special case robots overview informally strategy following                       ∀i  starting locations      ﬁnishing locations    decompose sensing  region cf fig     ∀i approximation guarantee improves                                                        collection nonoverlapping cells v    − exp −η ≤ η                                                            ccn  cf fig distance  proofs longer version paper cells deﬁned distance  singh et al  using recursive greedy     centroids cells nodes ∈v representing  algorithm chekuri pal  approximation                                                            ∗                                     sensing locations assigned cell  guarantee η olog  discussed result contained  extends analysis blum et al  considered  deﬁne new optimization problem spatially  additive functions submodular setting            decomposed mipp problem sdmipp problem     efﬁcient algorithm mipp                            v sdmipp jointly optimize cellpaths v  unfortunately running time recursivegreedy   cf fig allocation measure  algorithm quasipolynomial speciﬁcally run ments cells visited paths allocating  ning time algorithm ombolog    measurements cell ignore traveling cost  budget constraint  total number  cell cf fig cells  nodes graph small problem  excessively large simpliﬁcation leads   nodes exponent  resulting  small additional cost sdmipp solution  large computation time making algorithm impractical  transformed original mipp problem  real world sensing applications section  transfer approximate sdmipp solution  propose efﬁcient algorithm mipp emip    sisting cellpath allocation measurements  based similar approximation guarantees  cells cf fig original mipp  recursivegreedy algorithm practical realworld problem smooth path using touropt  sensing tasks exploiting submodularity using heuristics cf fig resulting solution  branch bound heuristics reduce computation    approximation guarantee depends  effort tractable limits emip algorithm assumes diameter chosen cells  traveling cost arbitrary locations given                                                          formally sdmipp problem following  euclidean distance discuss algorithm                                                                          b                  single robot instance problem suppose budget split budget traveling                                                                                     easily extended multiple robots using theorem   cells budget making experiments                                                    ijcai                                                    sensing locations visited cells want ﬁnd algorithm emip       p∗            path           il  travel cost                                                                                 input   starting  ﬁnishing nodes     travel budget measured terms distances output collection informative paths ppk  centers visited cells cost traveling begin  cells deﬁned  addition each visited cell perform spatial decomposition cells     p∗                                          ij   want select set sensing locations   starting ending cells csi cti                                                                ←∅  total cost ca ∪···∪al ≤                                                                                  information ia ∪···∪al large possible                               ∗                                                             iter log b  optimal sdmipp solution  uses optimal split                      iter                                                                    ← −     budget bt simplify presentation                                                                                piter ←recursiveemipcsi  cti bexiter  rescale costs cells form uniform grid                                                                                   smooth piter using touropt heuristics  quadratic cells width assume sensing cost                                                                                    pi ← argmax    ipiter     constant locations assumptions                 iter   exp                                                            ← ∪pi  easily relaxed allow relate path costs return ppk  number cells traversed simplify discussion end  algorithm sdmipp  present algorithm     emip algorithm informative multiple path planning                                     v                   realizing sequential allocation described section  cf  solving optimization problem  section  line path ith robot using spatial  discuss details efﬁcient implemen   decomposition approach described section  calls  tation complete algorithm works follows     recursive procedure cf algorithm   outer loop cf line algorithm  iterates through                                                       ﬁnd path cm ct experimental bud  bt ∈       budget given                                                                        −  path visit bt cells  sdmipp problem allocating budget bt total        b                                  b−         greedily select sensing locations maxi  budget  traveling cells         mum recursion depth  based residual  making experiments visited cells stepping                                                                                                   information ix∪p  committed   through travel budget powers  results faster  concatenate nodes obtained output                  b         b                                                                    performance log instead iterations increases   best path algorithm cf fig  required budget b factor  inner loop                                                        recursiveemip procedure based recursive  formed recursive procedure shown algorithm                                                         greedy algorithm chekuri pal  exploits  selects cells visit allocates experiments cells                                                        spatial decomposition    speciﬁcally recursiveemip procedure takes                                   input starting cell ﬁnishing cell experimental linear vs exponential budget splits step  considers dif  budget  residual indicating locations visited                                                                  ferent budget splits ∈ b left right subpaths  far initially maximum recursion depth iter                                                                          similar recursive greedy algorithm choose  initialized log bt                                                       b     −b  linearly spaced                                                                               iterate through possible choices middle cells branching factor proportional number consid                               budget splits ∈ spend making exper ered splits linear budget splits lead large com      iments path cs cm cf fig putation alternative consider exponential splits                 b                                           budget splits linearly accurate     be∪bebe−be−be−      exponentially faster spaced described branching factor logarithmic experi    recursively ﬁnd path cs cm subtracting mental budget guaranteed ﬁnd       maximum recursion depth iter maxi solutions linear budget splits      mum recursion depth controls maximum number theoretically empirically show performance      cells visited level recursion gets slightly worse case compared dramatic im      visit maximum bt cells level provement running time addition ways      limit bt cells reaching splitting budget considered onesided expo                                                                                    maximum recursion depth  use greedy nential budget splits          subset algorithm cf section  select sensing halves branching factor compared exponential splits      locations ai based residual information function                                                       deﬁned provide theoretical guar      ix constrained budget  residual antees possibility experimentally      parameter recursion contains nodes perform cf section       visited considering current cell illus      tration consider black nodes selected middle solving mipp problem need transfer      cell cm fig selected approximately optimal solution obtained sdmipp      greedysubset algorithm budget b  mipp connecting nodes selected cell      provide maximum improvement mutual ci cell’s center indicated fig      formation measured path fig connecting selected centers path fig    commit nodes visited recursively ﬁnally expanding resulting tree tour traversing                                                    ijcai                                                                      cs ct                     budget                             iter                     max                                                                            max                                                                                                                                                                                                                                        max                        et                                                                                                li                                                                                  ’                                                                                         sum                                                                                                              splits                         sum           sum  possible middle cells                                 bu                                                                                                                sum                   sum                                                                                                               sum                                                                                                                                                          max        max                                                                                                                                                                                                                                                                              iter                                            max   max      max       max       max                                   max  max                                   max                 max max                 sum                  summax tree                   pruning sum nodes         tighter lower bounds  figure  illustration branch  bound approach shows summax tree representing search space each max node selects  middle cell budget allocation each sum node combines subpaths shows upper bounds sum nodes used prune  branches shows lower bounds max nodes tightened allow pruning                                                                        ∈ b                            algorithm recursiveemip                          spaced splits   paths                                                                                                      nb     input cs ctbexiter                            line recursion depth logmin      output informative path cs ct       following proposition states running time emip     begin                     iter                               proposition  worst case running time emip        dcsct   return infeasible                                                        linearly spaced splits experimental budget     p←greedysubsetbe   vi  vi ∈cs ∪ct                                                                                                     nb  log        iter   return                        gs log            exponen        reward ← ix                                tially spaced splits experimental budget                ∈c                                                 log     foreach                                        gs log   log                            ∈                                                         comparing running time original              ← recursiveemipcs cmb xiter−                                                         chekuri et al algorithm ombolog note              ← recursive                                                                                               − ∪p  iter−           reduction   log  base log              emip                                                             ix pp reward              number nodes log   log number cells                                                                             p←pp                               log   exponent improvements turned                 reward ← ix                       impractical recursivegreedy approach        return                                       viable algorithm     end                                                  branch bound        recursiveemip procedure path planning   spatial decomposition technique effectively enables                                                        tradeoff running time complexity achieved                                                        approximation guarantee emip algorithm  tree twice traversal results tour solve superpolynomial albeit subexponential  twice long shortest tour connecting selected search problem  vertices course better solution obtained problem structure represented summax  applying improved approximation algorithm tsp tree shown fig sum nodes correspond  christoﬁde’s algorithm  following combining paths side                                                                   theorem completes analysis algorithm      middle cell mi  max nodes correspond selecting                                                        best possible path possible experimental budget split  theorem   let p∗ optimal solution mipp                                                        b possible middle cells  each sum node  problem budget emip algorithm                              mi                   p                                   children each max node representing  ﬁnd solution achieving information value best possible solution paths respectively        p  ≥   −e   p∗                                                                     log  cost root tree max node selecting best possible     √              √                                                                                 iter   ll       case linear budget splits solution highest level depth tree                     cexp                  √                                         iter                                   √                            depends traveling budget   log asan     b                                log       cexp          initial pruning step note middle cells                                                       lie path need consider  case exponential budget splits                                                        distance bt · starting ﬁnishing cell    running time analysis emip straightforward order avoid exploring entire summax tree                                           algorithm calls routine recursiveemip log times waste computation considering possibly bad solutions  ti time evaluate mutual information time follow branch bound approach each max node                                           computing greedy subset gs line ais     derive upper bounds child sum nodes  nc maximum number nodes cell each prune sum node children upper bounds lower  recursion step try cells reached current best solution child sum nodes  available traveling budget line possible ex provides solution better current best solution  perimental budget split try linearly exponentially current best solution parent max node updated                                                    ijcai                                                    
