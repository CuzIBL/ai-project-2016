                    cohesion     coupling      metatheory     actions                                    andreas  herzig   ivan  varzinczak                                          irit – universite´ paul sabatier                              route narbonne  –   toulouse  cedex   france                                                ¡                                            email  herzigivan ¢ iritfr                          abstract                            mind speciﬁcation domain                                                        descriptions task similar project development soft      work recast design principles com ware engineering item  called elab      monly used software engineering adapt oration tolerance mccarthy  way represen      design analysis domain descriptions tation elaboration tolerant extent effort      reasoning actions show infor quired add new information new action effect      mal requirements cohesion coupling  representation proportional complexity infor      turned consistency tests different ar mation shanahan  items    reﬂect concept      rangements modules gives new criteria modularity means different modules      domain description evaluation clariﬁes elements common notion modularity going      link software knowledge engineering   lead present work      concerns metatheory actions                                                          paper elaboration results pre                                                        sented herzig varzinczak  pursue    introduction                                       following plan section  recall important                                                        cepts software engineering discussing ontol  principles objectoriented paradigm ogy dynamic domains section  apply concepts  following                                            section  design domain descriptions sections     work modules components functions  making step formal criteria domain                                                        scription evaluation section  present main results    minimize interactions modules       follow approach concluding ad    organize modules welldeﬁned layers help dress related work literature subject      minimize interactions goal components      layer using components immediate     principles software  engineering      neighbors possible                     ﬁrst steps software development ab    anticipate kind extensions modiﬁcations straction abstraction consists mainly rendering lower      future support design level details invisible upper levels order facilitate      time extend minimal dis understanding design complex systems exam      ruption later                                    ple speciﬁcation data knowledge base query does                                                        need account algorithmic process    agreement principles carried order answer query  objectoriented programming design parallel abstraction important guide  knowledge representation witness design domain lines project design modularity dividing soft  descriptions reasoning actions ware modules based functionality simi  common  software engineering think larity information handle means instead  way software projects talk having “jack trades” program preferable  sistency evolution correctness domain descriptions split specialized subprograms instance pro    principles applied design gram module querying database module  main descriptions argue good domain descrip checking integrity modular single mod  tion consistency check maintenance ule does tasks time  complexities minimized modiﬁcation major beneﬁts modular systems reusabil      localized bounded scope                   ity scalability better management complexity    £     supported fellowship government feder way split program  ative republic brazil grant capes bex  used techniques forcing functional independence modules ensures functional indepen illustrated figure  relationship  dence project deﬁning modules pur different types entities  pose “aversion” excessive interaction mod domain description consists description effects  ules pressman                                 actions noneffects executabilities inexecutabilities     criteria commonly used evaluating func state constraints depend particular  tional independence modules modular action  piece software informal notions cohesion                                                                              domain description                                                                                  ¥¤ ¦§                                                                                ¤    §                                                                                ¥     ¦ §          coupling                                                               ¤                                                                            ¤            §                                                                          ¤   ¥         ¦  §                                                                        ¤                    §                                                                      ¤     ¥             ¦     §                                                                    ¤                             §                                                                  ¤                                 §                                                                                        ¦        cohesion closely related pieces single compo         ¥                                                                ¤                                     §  nent each module cohesive high effects noneffects exec inexec state constraints  level abstraction does single task  module focused precise goal cohesive figure  “class diagram” modules designing domain descrip    highly cohesive module simpler understand tions edges represent hasa relations  having single task lowly cohesive mod  ule performing tasks difﬁcult understand effects actions distinguish direct ef    difﬁcult reuse taskoverloaded module fects indirect effects ramiﬁcations  highly cohesive module simpler reuse extend noneffects actions related frame prob    coupling interdependency method lem mccarthy hayes  indirect effects  environment methods objects classes low cou ramiﬁcation problem finger  work  pling means dependencies communication informa abstract problems assume  tion sharing components minimum        sequence relation powerful derive intended        design low coupling amenable  conclusions suppose given ‘doped’ consequence                                                              ©  change reduces probability changes cascading lation ¨  encapsulates traditional approach  affecting larger            literature schubert  lin  mccain                                                        turner  intended frame axioms    unanimously objectoriented development best way direct effects derived use henceforth  design software low coupling high cohe examples        sion sum informal design principles                                                                                             ©                                                                                   loaded    ¨ loaded wait  maximal cohesion module conceived          way maximally cohesive      waiting does change status loaded                                                                 minimal coupling modules conceived      walking                                                                                                                                                                                                                                                                 ©                           way minimize coupling               walking     alive      ¨  walking shoot                                                                                                                                                                                                                 alive   shoot    natural  modules   domain  descriptions         shooting indirect effect victim  like objectoriented programming describing domain longer walking  different entities separated different modules use small letters denote variables capital letters  each module conceived way denote constant symbols free variables supposed  direct access contents universally quantiﬁed  reasoning actions accessing module means using sum main concern direct  perform reasoning tasks like prediction postdiction plan effects henceforth effects inexecutabilities executabilities  ning amounts using logical formulas state constraints introduce follows  inferences section establish ontology effect laws logical frameworks reasoning ac  main descriptions present way arrange different tions contain expressions linking actions effects  modules axioms commonly used    suppose effects conditional                                                            component axioms effect law action     domain description contains representation ac form      tion effects effect laws formulas relating action                                                                                               effects statements conditions ac     poss              tion executed called inexecutability laws ex                                                                                                                                                                   simple state formula situation       ecutability laws turn stipulate context action                                                                                                                                                                simple state formula situation   guaranteed executable finally state constraints                                                          simple state formula situation term  contains  formulas mention actions express constraints                                                        posspredicate situation terms  lin   hold possible state example effect law        gredients introduce formally sequel                                                                                                                                                                                     poss   shoot   loaded       alive shoot    think domain description software appli saying shoot executable gun      cation imagine organization objectoriented loaded shooting turkey dead                                                                                         view attempt kind class diagram poss   tease walking tease  result teas                                                        ing turkey starts walking                                                                                                  jkf      inexecutability laws design domain descriptions  parsimony’s sake deﬁne gfghi                                                                     fnhlo  provide way express qualiﬁcations actions hlm    suppose sets      conditions action executed consistent                                                                                     inexecutability law action  form domain description   tuple  form                                                                                                                        rsbctdecu                                                                                      poss                                                              information contained module mixed                                                simple state formula        others’ expected undesirable side effects                                                                                   example hasgun     poss shoot  states modiﬁcations likely propagate  shoot executed agent gun     parts domain description thing  state constraints alias domain constraints frameworks obtained consistency check sepa  allowing indirect effects make use formulas link rated modules designed way inter  invariant propositions world formulas char action minimized address section  acterize set possible states state constraint sim seen software engineering functional inde                                                        pendence evaluated means criteria cohesion  ple state formula situation term   consistent                                                            criterion evaluating relative functional strength                                   example walking     alive  saying turkey  walking alive thielscher  module coupling assessment relative interdepen                                                        dence different modules notions quite  executability laws state constraints effect informal software engineering mea  laws guarantee action shoot executable sured objective way        agent gun executability law action  explore concepts applied domain                                        form    poss      simple state descriptions show informal requirements soft                                                     formula    instance hasgun  poss shoot     ware engineering turned tests consistency      says shooting executed agent different arrangements modules                     gun poss   tease turkey teased    extant approaches literature al  cohesion  low indirect effects actions contain state constraints  effect laws status executability laws normally cohesion comes modularization eval  sensual authors schubert  doherty et al  uation depends mainly entities takes ac  mccain turner  thielscher  tac count describing domain  itly consider executability laws ex talking sets logical formulas cohesion  plicit inferred reasoning mechanism simple welldeﬁned logical module consider  lin  zhang et al  executability laws ﬁrst ing different types formulas derived  class objects reason                   reﬁne ﬁrst design principle    like point maximizing p’ types laws given module entails  executability usually literature cohesive      intuitive suppose know ignition key example consider following module                                                                      tank   battery tension                                                                                                                                                                                            car necessarily start suppose know        hasgun    poss shoot                                                                                                  tension car start hasgun    poss shoot      conclude situations know                                                                                       set derive hasgun           sion maximizing executabilities makes infer                                                                                                                                                      poss   shoot hasgun      poss shoot    start reasoning want formulas different kinds case say  like sure possible executions lead goal set lowly cohesive module functions derive    matter debate executabilities inexecutabilities better approach  executabilities think domains decompose module following ones          wants explicitly state conditions given ac                                                                                                                                                                                                        tion guaranteed executable robot jx shoot hasgun  poss shoot      stuck able execute                                                                                                                                                                           shoot hasgun      poss shoot  action case allowing executability laws gives                                                          total cohesion easy achieve suppose  ﬂexibility expressive power                                                        instance hypothetical situation reason      domain descriptions given types entities effects drinking cup coffee                                                                                                                                                                                                  ﬁned arrange following way               poss   drink                                                                                                                                                                                                                        given action    set effect laws                  sugar    happy drink                                                                    fzy                                                                                                                                                                          drink                                                                                                                                                                                  set inexecutability laws set ex                                                                                                                                                                                                        poss   drink                                                                                                                          bcdec        ecutability laws  denotes set state constraints                                                                                                                                                                                                                                                                                  salt     happy drink                                                                                                                                                                                                                                                                           given domain             each                                                                                                                                                                                                                                                                                                      bcdec                                                           a              action    natural modules consider drink entails sugar salt      poss drink     designing domain description                    means  drink effect                                                                                                                                                                              laws inexecutability laws  drink            walking     alive                                                                     bctdecrxf                                                                                                                                                                                                                                                                                               cohesive expected                                    dead    alive    step augmenting cohesion module ef                                                          observe derive domain constraint walking             fect laws completely specifying preconditions                                                                                 bcdec                                                         dead    needs    module  effects actions example weaker effect laws                                                              quired hand conclude dead                                                                                                                                                                                                              bcdecr jr                                                             poss   tease needs                                                   poss   drink                                                                        totally decoupled descriptions common appli                          a                                    sugar     salt     happy drink      cb  fzy                                                                                                              drink                                             cations real example                                          poss   drink                                                                                                                                                                 bctdacr                                                                                              impossible diminish interaction                        a                                       salt    sugar        happy drink                                                            j                                                                                                                                                                                        abandoning concept state constraints                                                                                                                            hand yr example contained                                          guarantee higher cohesion module  drink comparison                                                                                                                          poss   tease  things different case       drink                                                                                                                                                                       jr able infer state constraint alive                      bctdac    deﬁnition    easy law derived bcdecr higher    state constraints derive formulas type bcdec degree interaction set nec  nature lowly cohesive module                 essary order case say        interested reﬁning principle high coupling pr ’s modules  high cohesion p’ following ones                                                              principle minimal coupling p’ reﬁned                   ©e     fg¨ ©e         p’ jd¨                            speciﬁc design principles                    ©e  n       fg¨ ©e   n      p’ d¨      poss                   p’ implicit inexecutability laws                      poss                                                                                                                                    ©                                                                       p¨         poss                                                                                                                                                         jsbctdec¨ ©e                       ©e      f¨ ©e        p’ r¨                                                        poss                                                 ©e   l         fg¨ ©e   i      p’ h¨        poss                   p’ implicit state constraints                           j                                                                      ©    bcdecg¨ fz             poss                                                p¨                                  ©       j k    l          p’ h¨ poss                                 ©                      fg¨ poss                                        p’ useful feature descriptions                                                            reasonable principle design helps avoiding mistakes                  ©e     fg¨ ©e         p’ m¨                                clearly restricts search space makes reasoning              m¨ ©e   n       f¨ ©e  o      p’               poss                    easier witness satisﬁes p’ consistency                      poss                                             amounts bcdec                                            p¨ ©e  n       fg¨ ©e   n      p’                poss                   theorem   implicit state constraints                   poss   j                                                                                 ©e   bctdecg¨ fng                                                                        pn¨    iff    principles say formula given type  entailed module different type theorem  implicit inexecutability laws  logic                                                              consider following domain description pt                                                                                                                                                                                                                     coupling                                                      poss tease     walking tease                                                              tf                                                                                        seen coupling evaluates module          poss shoot                                                                                                                                                                                                                                                                                                                                                                                                   tied dependent modules coupling        loaded      alive shoot                                                                          sets different types action laws                                                                                                                                   interaction needed derive formula mtftffebcdecttf walking alive                                                                                                given type interaction means sharing logical formulas poss   tease walking tease follows                                                                                             reﬁne second design principle             bctdect poss tease alive tease   p’ new consequences modules situation teasing turkey alive          coupled                                                                           ©                                                                                       tbctdactc¨ poss tease alive tease                                         qut      new consequences modules qsr                                                                                                                                                              ©                                                                                     ptc¨  alive       alive tease   sta                                               consequences rmv    consequences                                                            tus ﬂuent alive modiﬁed tease action             qut      qpr                                                                                                                                                                            bcdec ¨ ©n   o  a                                                                                                                                                 poss            alive        instance consider domain description pwr                                                                                                                                                     o  a    e x                                                               alive          alive          fol                                                                                                                                                                                                                                               ptc¨ ©                                   poss tease     walking tease           lows       alive       poss tease  turkey                                                                                                                                                                                           bctdec ¨ ©                                                                                                                                                                     teased dead         alive                                                  poss shoot                                                                                                                                                                                                                                                                                                      poss   tease  principle p’ violated                                                             loaded     alive shoot                                                                                                                                                                                                                        mula  alive      poss tease   example                                                                                                       xyrxfzf     jrxf alive     poss tease                   implicit inexecutability law  literature laws known implicit qual checking domain description satisﬁes princi  iﬁcations ginsberg smith  argued ple p’ little adaptation material  positive feature reasoning actions frame subject present literature zhang et al   works leave implicit provide mechanisms lang et al  herzig varzinczak   ferring lin  thielscher  way deepen details just present main  round argue implicit qualiﬁcations sults obtain considering descriptions satisfy  dicate domain described adequate design principles proposed space  manner inexecutability laws form simpler limits proof given  effect laws reasonably expected eas                                                          theorem   let     translation situa      ier exhaustively note                                                                                                    c                                                        tion calculus   domain  description        related qualiﬁcation problem basically                                                                 implicit state constraints      says difﬁcult state executability laws                                                               ©                       j                                                         pn¨  poss                                    iff      domain inexecutabilities explicitly                                                                             ©               j                                                         ejmbctdec¨ poss              stated principle p’ says                                                            means p’ modularity inside          implicit state constraints                    deducing effects action  need  executability laws increase expressive power sider action laws actions versions exe                                                        cutability inexecutability stated      ﬂict inexecutability laws instance let p                                                                                   f  jx                                                                    alive      poss tease                                                                                                                                                      theorem   exist descriptions satisfying p’                     bcdec fbctdec                                                             poss tease                    note                                                                       ©       j           j                                                         p¨ poss                                principle p’ satisﬁed unintuitive                                                                             ©              j                                                             ejmbctdec¨ poss                              ©          j¨ alive  turkey immortal                                                            example just p      implicit state constraint alive     does follow                                                                                                                                                ¨ ©         ª       g                                                                             poss shoot       alive      alive shoot        bctdec           p’ violated                                                                            jm bcdect¨ ©     «        existence implicit state constraints  shoot shoot     poss shoot                                                                                                                                                                                                                  dicate strong executability laws example alive     alive shoot   wrongly assumed tease executable  indicate inexecutability laws strong  related work  state constraints weak                   pirri reiter  investigated metatheory                                                        situation calculus spirit similar use    results  dependence   based solution      executability laws effect laws contrarily     frame  problem                                 executability laws equivalences                                                        time inexecutability laws state constraints  given axiomatic theory actions solution                                                          bctdec¬f­f  setting syntactical  frame ramiﬁcation problems interested dition effect laws forcing interact ex  knowing domain descriptions encoded satisfy ecutability laws precludes implicit state constraints  set design principles chose use basically condition says effect laws        modal framework c castilho et al                                                                               u        j u                                                        poss   u                poss      shown support reiter’s solution frame prob                                                                    ®                                                                                                                                                                                                                                          inconsis                            lem demolombe  et al  proposes assess tent essentially amounts having domain      ment ramiﬁcation problem                      scriptions kind “implicit state constraint schema”                  let         translation domain description                                                                        ma                                                                form                                                                         situation calculus dependences         allows show descriptions al                                                     translated predicates x ¡    meaning action ways consistent simplify entailment  cause literal  true extension dep cir problem calculus show problems      cumscribed cf schubert’s explanation closure assumption consistency regression modules                                                                     examples  ¢¡  shoot walking means shoot domain description necessary                                                             cause walking false absence x ¡  tease alive                                                                                                                       induces frame axiom alive     alive tease   amir  focuses design maintenance ac                                                            tion descriptions applying concepts objectoriented                                               theorem  p£a¤¥m¦ domain description                                                             paradigm situation calculus work guidelines           §¨© p£a¤¥                ¦  satisﬁes principles p’—p’                                                            partitioned representation given description pre           c          possible derive inexe sented inference task optimized      cutabilities  example section  restricted domain description  violates principle p’ establishing maximal cohesion really relevant given query observed specially       case involves weakening preconditions ac different agents involved design agent’s  tion effects conceiving algorithm accomplish description regard others’  task difﬁcult space limitations omit integration multiple agents queries agent’s  presentation                                   beliefs account belief state agents
