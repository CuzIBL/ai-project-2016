      tight logic programs translation normal logic                                        programs propositional logic                                             fangzhenlin jichengzhao                                             department science                                   hong kong university science technology                                         clear water bay kowloon hong kong                                                  flinjczhao csusthk                             abstract                                tight completion models leads nat•                                                                 urally question normal logic program en•       fages showed program tight ev•         coding hc problem tight model        ery propositional model completion     completion glance positive answer eas•       stable model recently babovich erdem lif         ily followed known results instance us•       schitz generalized fages result showed         ing known transformation logic programs        true program tight given    propositional theories beneliyahu dechter         model completion turned           lin zhao  translate program set        quite general result commonly             clauses logic program tight        known benchmark domains niemeliis nor•             model programs completion cer•       mal logic program encoding hamiltonian             tainly true really wanted given graph        circuit hc problem does property         logic program solving hc problem graph        paper propose new normal logic pro•         normally parts  set facts defines        gram solving hc problem show        graph terms vertices edges set general        program tight model completion        rules reasoning shows follows        experimental results showed graphs         known results given graph tight logic pro•       new encoding improves performance             gram solving hc problem graph        smodels assatchaff especially                does follow true shall show        based sat            paper set general rules        solver chaff propose notion inher•         given graph logic program consisting set gen•       ently tight logic programs show          eral rules set facts encoding graph        program inherently tight iff completion    tight        models stable models propose poly•                                                                   modifying niemelas encoding propose new nor•       nomial transformation logic programs                                                                  mal logic program solving hc problem show        inherently tight providing reduction                                                                  program tight model completion        stable model semantics program completion                                                                  compared niemeliis encoding new encoding yields        semantics sat                                                                  larger programs  twice atoms rules                                                                  surprisingly despite larger size smodels si•   introduction                                                 mons  assat lin zhao  new en•                                                                 coding performs better randomly generated graphs   wellknown stable model logic program     assat performs better complete graphs   logical model completion logic program   hard smodels assat partly   converse true general fages        sizes programs corresponding graphs     showed program tight   new encoding slower niemeliis   positive loops converse true recently     handcoded hard graphs lin zhao    babovich erdem lifschitz  generalized fages       constructed taking copies graph con•  result showed converse true pro•  necting copies arcs experimental   gram tight given model completion      results mixed suggest worthwhile try   turned quite general result interest•   encode problem logic program stable models   ing logic programs tight model    completion models   completions fact commonly known bench•                                                                   motivated investigate sufficient necessary   mark domains niemeliis normal logic program en•  coding hamiltonian circuit hc problem niemela                                                                      performances paper computing stable      corresponding author                                        model program       nonmonotonic reasoning                                                                                                  condition completion model stable model          body rule disjunct formula intended    end generalize notion tight set atoms      meaning write body formula    inherently tight set atoms specifically     stands true conjunction    program inherently tight set atoms        literals replaced notice    subprogram stable model                —  equivalence    tight show program           false    completion model program stable model iff   • constraint compp    program inherently tight model      propose polynomial transformation          stable model semantics given logic program    logic program inherently tight com­ constraints set atoms gelfond  pletion models provides reduction stable model se­  lifschitz transformation  written ps obtained    mantics completion semantics sat compared      follows     beneliyahu dechter  needs ri ex­       • each atom rule necjr   tra atoms new rules lin zhao           delete literal body    docs introduce new atom worst        rule   case add exponential number new rules clauses       • resulted set rules delete rules   transformation introduces extra atoms                       contain negative literal bodies rule              extra rules worst case num­                ber atoms original program number            delete rule   rules observed benchmark logic   programs number rules program smaller       clear set atoms  set rules                                                                  negative literals ps unique mini­  useful feature transformation mod­  ular wrt adding new facts                                   mal model set atoms      paper organized follows section  introduces    derived program resolution rules inter­  logical preliminaries section  studies encoding      preted implications denote set consp   hc problem tight completion model      set stable model igelfond lifschitz    program reports experimental results using     consps   smodels assatchaff section  proposes notion           let program constraints   inherent tightness translation logic program   result deleting constraints set atoms   inherently tight section  concludes paper stable model iff stable model satis­  space limitations proofs given sketched fies constraints                                                                  dependency graph predicate dependency graph apt et    logical preliminaries                                        ai  logic program directed graph signed                                                                  edges vertices atoms mentioned   logic programs normal logic program set rules     directed positive resp negative edge vertex   following form                                            rule hcadr — posr                                                                  resp headr — negr informally posi­                                                                 tive resp negative edge  means depends   atom cs atoms    positively resp negatively   rule constraint     atoms positive path     atom rule fact asserting     path vertex   true given rule following denote vertex dependence graph gp path   hradr head atom posr ncgr set        negative edges   positive body literals set atoms occur   body rule respectively set       tight logic programs hamiltonian   atoms denote setby notx                            circuit problem   rule represented                                                                  program tight llifschitz  exists level                                                                  mapping rule   given program following let atornp                                                              set atoms                                                                  inp   program completion given logic program comple­                                                                  tion cornpp union constraints                                                                  level mapping function literals ordinals   clark completion clark  constraints deleted                                                                    hard program tight iff dependency   words consists following sentences                                                                 graph positive cycles programs program     • atom rules                      completion semantics classical logic coincides        cornpp                       stable model semantics program tight        abuse notation write      set atoms stable model iff classical propositional                                                                                             nonmonotonic reasoning model completion fages  recently babovich     rest rules make sure especially asserting   erdcm  lifschitz  generalized result tight reachedx true vertex paths   set literals modifying mapping partial level fact single simple cycle covers graph   mapping respect set literals formally program grounded program tight rule    tight set atoms exists partial level create cycles reachedx atoms   mapping domain rule        way solving problem guess   • • •                                    paths through vertex exactly                                                                  make sure count outgoing arc                                                                                                                             starting vertex paths fact single path   showed normal logic program tight       does contain cycles idea   model completion model stable      program figure  solving hc problem   model result logic program tight tight   models completion stable models   logic program reduce sat computing   completion turned quite general result   interesting logic programs including constraint sat­  isfaction problems planning problems tight   model completions fact   commonly known benchmark domains niemelas nor­  mal logic program encoding hamiltonian circuit hc   problem niemela  tight completion   models      experimental results reported babovich et ah    huang et al  lin zhao  showed   problems like graph coloring blocks world planning   encodings logic programs tight tight   completion models computing stable model   programs using state art sat solvers com­  pletions lot faster smodels currently   state art specialized stable model generator normal   logic programs hc problems ass outper­    figure  encoding hc problem tight   forms smodels improvements great         model completion   problems reasons completion   model stable model assat needs repeatedly                                                                    notice rules       rules   sat solver total computation time directly                                                                     needed make sure chosen path   proportional number times sat solver called                                                                  through each vertex exactly cases ver­  inherent difficulty hc                                                                  tex outgoing incoming arcs graph rules    problem particularity niemelas encod­                                                                   use binary predicate rcachedx make sure   ing niemela  came encoding hc                                                                  delete chosen outgoing arc starting   problem tight completion models                                                                  vertex chosen path cycles single      motivate new encoding lets look niemelas                                                                  path formally shown program correctly   given                                                                  solves hc problem tight comple­                                                                 tion model                                                                  proposition  let graph let                                                                  union rules figure facts represented                                                                  graph terms vertexx arex stable                                                                  model atoms form correspond                                                                  hc ofg furthermore tight model                                                                  completion                                                                    given graph compared niemelas encoding                                                                  yields larger program reached program                                                                  binary predicate evaluate performance                                                                  program tried smodels version   rules    guess paths      satchaff version  simplification feature ac­  property vertex out­   tivated set graphs used lin zhao   going arcs exactly arcs chosen   paths similarly incoming        graphs downloaded assats web site   arcs exactly chosen paths       httpwwwcsusthkassat       nonmonotonic reasoning                                                                                                  divided three categories randomly   generated graphs handcoded hard instances complete   graphs experiments sun ultra  machines   memory running solaris times given be•  low cpu seconds reported unix time com•  mand include times running iparse grounding   input programs randomly generated graphs ta•  ble  ass clearly performs better using new   encoding smodels behave better using   new encoding run times uniform how•  handcoded graphs table  formed   taking copies small graph se•  lectively adding arcs connect components   old encoding clearly better smodels assat   graphs easier new encoding   harder finally complete graphs   hard partly yield huge programs   new old encodings new encoding turned   better assat little worse smodels in•  stance complete graph  vertices using old   encoding assat returned solution  seconds   smodels  seconds new encoding   assat took  seconds smodels needed    seconds     mixed results encodings   merits especially uses smodels ex•  periments suggest new encoding tight   completion model better satbased stable model   generators assat cmodels   surprised better faster sat solvers new en•  coding outperform cases      inherently tight programs   given potential benefit tight logic programs sat  based stable model generators investigate   general translation arbitrary logic program   completion models stable models   end define notion inherently tight set   atoms show sufficient necessary condition   programs completion model stable model        table  randomly generated graphs nvxay graph   definition  program inherently tight set      vertices arcs   atoms program   stable model ofq tight   proposition  normal logic program inherently tight   stable models   proof suppose stable model notice   each rule ps corresponding gelfond  lifschitz transformation define set rules   follows      initially initially ps        ran experiments cmodels   httpwwwcsutexaseduuserstagcmodelshtml results   similar ones assat did include data table  handcoded hard graphs nxgm graph   guaranteed work input program copies graph arcs connecting copies   tight like niemelas encoding hc problem                                                                                             nonmonotonic reasoning    choose fact suppose corresponding        example  consider program         rule let remove rules                                completion models         delete bodies    stable model        rules                                               program sccs  algorithm      step                        transforms following program    clear tight stable models    inherently tight       theorem  let normal logic program set    atoms stable model    model completion inherently tight    proof  proposition  fact stable model    model program       model completion    closed inherently tight     stable model   tight supported supported   supported closed    stable model theorem babovich et al  ■        say program inherently tight inherently   tight models completion clearly program    tight completion models inherently tight   theorem  models completion stable   model program inherently tight vice versa                                                                  completion program contains following equiv•     translation arbitrary logic progiam                                                                  alences     inherently tight following set                                                                  entails    atoms program called strongly connected com•                                                                 model completion true false   ponent scc path gp                                                                  stable model notice             subset set                                                                  stable model established second rule                                                                  correspondingly stable model  true     dependency graph                                                                                                                                          andrighta true rightb   algorithm  let normal logic program following                                                                  established derived   algorithm transforms inherently tight program   let initially                                      theorem  normal logic program program      rule form                                  output algorithm  inherently tight furthermore                                                                  equivalent atomp subset                                                                  atouip stable model iff exactly                                                                    stable model sf ofq atomp                                                                  proof show inherently tight second                                                                  theorem easier                                                                    need prove models compq                                                                  stable models let tv model completion                                                                  show tv satisfies loop formula                                                                  stable model theorem  lin zhao                                                                   suppose positive loop according algorithm                                                                   lisa loop does contain atom form        rules variable instan•            right set atoms form rightu        tiated atoms scc       loop does contain atom form                                                                  right  suppose • • • va atoms      constraint add rule                 number atoms atoms atomp newly added   intuitively set stable model           atoms occur loop alternatively suppose loop   iff rule contributes calculation                                  newly added atoms   coiisqm meaning rule actually used derive   atoms atomp    rightu used record atom used prove  known right rule   needed prevent loops following example    considering rule  right   illustrates idea                                           rule  satisfied        nonmonotonic reasoning                                                                                                
