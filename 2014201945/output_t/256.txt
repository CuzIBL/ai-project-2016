                           observation reduction strong plans                         wei huang zhonghua wen        yunfei jiang lihua wu                software research institute school information science technology                                 sun yatsen university guangzhou china                 college information engineering xiangtan university xiangtan china                                    email huangbodaoyahoocomcn                        abstract                          optional useless executions                                                        plans side information acquisition      strong planning partial observability require kind cost time money power      addressed literature signiﬁcant ﬁnd minimal set observation vari      search line carried hypothesis ables necessary execution plan      set observation variables ﬁxed compul best knowledge open problem      sory real world domains obser   paper present ﬁrst attempt solve problem      vation variables optional hypothesis distinct states      useless execution plan side main distinguished observation variable      information acquisition require kind  deﬁne algorithm ﬁnds approximate minimal set      cost signiﬁcant ﬁnd minimal set                                                        written vobs observation variables necessary      observation variables necessary execution strong plan observability      execution plan best knowledge stateaction table transforms plan strong plan      open problem paper present partial observability conditional plan branching      ﬁrst attempt solve problem                                                        observations built vobs algorithm ﬁrst ex      ﬁne algorithm ﬁnds approximate minimal ploits belief state bonet geffner  set      set observation variables necessary                                                        possible current states step compute vobs      execution strong plan observabil transforms given state–action table conditional      ity state–action table transforms                                                        plan branching observations built vobs algo      plan strong plan partial observability rithm based frameworks strong planning      conditional plan branching observa observability proposed cimatti et al  par      tions built observation variables      tial observability proposed bertoli et al                                                           paper organized follows ﬁrst recap frame    introduction                                       works proposed cimatti et al  bertoli et al                                                              recent years increasing devoted plan  section  introduce key notions  ning non–deterministic domains strong planning algorithm algorithm section  ﬁ  ﬁnding automatically plan guaranteed achieve nally section  draws conclusions discusses future  goal regardless nondeterminism important prob research directions  lem research ﬁeld observability partial  observability problem addressed litera  domains observations plans  ture frame observability proposed cimatti problems  et al  plan stateaction table frame  partial observability proposed bertoli et al  section brieﬂy review deﬁnitions strong   plan conditional plan branching values planning nondeterministic domains observabil  observation variables                             ity partial observability relevant work fur    cases observability cimatti et al ther details examples deﬁnitions                                                                                            status domain ob cimatti et al  bertoli et al    served step cases partial observability planning domain model generic  boutilier  eiter et al  herzig et al  dynamics  bertoli et al   plan executor deﬁnition  planning domain tuple Σs r  access status domain ﬁnite set states ﬁnite set actions  assumption set observation variables ﬁxed  s×a→s transition function transition  compulsory real world domains robotics function associates each state ∈sand each action  trol scheduling domains observation variables ∈athe set rs ⊆sof states                                                    ijcai                                                      set actions applicable state acts                                                                a∃s ∈rs    practice domain observation vari     ables value observed run–time                                              deﬁnition  let Σs r planning domain let  ﬁnite set observation variablesanobservation func  tion function  s×v→ ⊥                                               deﬁnition  each state corresponding  complete set assignments observation variables    plans control evolutions domain trigger                                ing actions plan observability set state–  action pairs  deﬁnition  plan πf Σ set pairs s a figure  simple domain execution structure                         ∈s  ∈      state–action table     act    duced πf  action s a∈πf state    execution state–action table πf Σ rep  resented execution structure directed graph following example illustrate deﬁnitions given  nodes states domain section  reached executing actions state–action table example  simple robot navigation domain Σ  arcs represent possible state transitions caused actions    π                                                   shown left figure   robot                                                  positions room corresponding states  deﬁnition  let πf state–action table Σtheex domain     ssitcanmove  ecution structure induced πf set initial states directions corresponding actions   i⊆sis tuple  q twhereq⊆sand     t⊆s×s        gonorth gosouth goeastgowest anactionisap  minimal sets satisfying following rules  plicable wall direction mo                                                                 rs gosouth∅    ∈ithens ∈q                             tion                    actions                                                        terministic rs gowests ac    ∈qand exists state–action pair s a∈πf goeast                                                                   tion               robot      ∈rs athens ∈qand        slip end sors  state ∈qis terminal state s ∈q rs goeastss rs goeast                                                       sss             ss           apath ∈iis possi            let                                                                                             π     s goeast s gosouth s goeast  bly inﬁnite sequence ss states                                                        s gosouth s gowest                     state si sequence si state                    strong plan                                                        Σ g                       sequence case si terminal state kor     execution structure shown right  sisi holds                                    figure                                                           suppose sensors robot detect walls    planning problem given domain described                                                        current position formalized obser  set possible initial states set goal states                                                        vation variables walln walls wallw walle  deﬁnition  let Σs  r planning domain  addition responders  planning problem Σ triple  Σ gwherei⊆ located north west border room  g⊆s                                            work x–axis y–axis positions let                                                         ≤ ≤     following discussion Σs r             Σ g πf andk represent planning domain ﬁnite set  robot sends pulses north west ground  observation variables observation function                                                                                             planning problem Σ state–action table Σand  responder n− n− receives pulses  execution structure induced πf respectively sends responsive pulse south east does    cases interested strong solutions  plans guaranteed achieve goal spite  robot detect xcoordinate  nondeterminism                                           coordinate receiving responsive pulse  deﬁnition  πf strong solution acyclic appointed time                          terminal states                             formalized     observation    fact state–action table πf Σ strong solution variables     planning problems Σ execution structure  set observation variables  acyclic terminal states gsoin walln walls wallw walle xxxyy  following discussion use interchangeably terms  observation function  strong solution strong plan                      walle⊥  sx                                                      ijcai                                                      observation reduction strong plans               • ε ∈ Π ε plan  real world domains observation variables op • ∈aand π ∈ Πthena ◦ π ∈ Π  tional useless execution plan                                                          •   ∈ov       ππ   ∈   Πthen  consider situation represented example                                                             π π ∈ Π  sponder turned execution πf   side information acquisition require general interested applicable plans plans  kind cost time money power sig execution guarantees action attempted  niﬁcant ﬁnd minimal set observation variables unless applicable regardless nondeterminism  necessary execution plan            deﬁnition  aplanπ Σ xis applicable state iff    paper assumed distinct states  domain distinguished observation variable                                                          • π plan εor  state–action tables acceptable execution                                                                                              level execution state–action table πf  execu • π ◦ π  applicable π applicable                                                                    tor required observe values observation ∈rs aor  variables consequently know current state • π π π  execute appropriate action step                                                              – formula codes  → tautology  cases observation information     π                useless execution plan example makes     applicable   sense observe value observation variable vwhere – formula codes  →¬o tautology  v v⊥ possible current state     π applicable  denotes set possible current states execution conditional plan deﬁned terms  current belief state need runs associated intuitively run contains  tection exists ∈asuch s a∈πf states observations actions encountered executing  ∈b                                                 plan    section deﬁne algorithm ﬁnds approx                                                      deﬁnition  run sequence σ ◦ ◦ ◦  imate minimal set observation variables obswhich  ◦ ◦    ∈s     ∈ov    necessary execution strong plan trans                                                                              ai ∈a sequence σ run π π conditional plan  forms strong plan conditional plan branching Σ x        observations built observation variables  state iff  explaining algorithm introduce notions • π  ε σ  codes  used                                             • π    ◦ π  σ  ◦ ◦ σ                       π    execution  action exe  codes  σ run π ∈                             π   cuted  written action   thatistosay          rs  ∅or  ∃a ∈a  s a∈πf   actions πf aelse                                                          • π    π  π   odes  →  actions πf nop  nop means doing                                                                                                                      σ            π    let ∅⊂vobs   ⊆v each  ∈swerepresentthe          tautology  run   starting                                                                  corresponding set assignments observation variables code          vobs codes vobs                   • π   π  π codes  →¬o                                                                               σ            π    • vobs        vthen               tautology  run  starting                                                                      codes vobs                                     code                                                                                                π    • vobs        v⊥then             following write runs  denote set                                                               π                                  π      codes vobs ¬v                             runs  starting  write finalstates                                                           indicate set ﬁnal states runs runss π    • vobs   ∈vobsthen                                                          deﬁnition strong plans p xis given fol      codes vobs codes            ∧                                                        lows fact similar proposed bertoli et      codes vobs −v                                                         al   representation naturally extends ∅⊂q⊆s                                                        deﬁnition  conditional plan π Σ x strong  follows                                                 p x                                                       plan        iff        codeq  vobs     codes vobs           • π applicable state                           s∈q                            • every run π state ends gie  set observations built ov        s∈i finalstatess π ⊆g  codeq vobs  ∅⊂q⊆s   ∅⊂vobs  ⊆v                                             ov      introduce algorithm observation reduc    deﬁnition conditional plans branching     tion strong plans  given follows fact extension pro basic algorithm strong–fo–po presented  posed bertoli et al                                                         figure  given planning problem strong plan πf  deﬁnition  set conditional plans Π Σ x ﬁnite set observation variables observation  minimal set                            function  algorithm transforms πf strong plan                                                    ijcai                                                            function strong–fo–popπf                    function reductiondis             dis ← findstatepairspπf                             suppose  vvn            vobs ← reductiondis                         ≥ ≥  dii ←             return transformpπf   vobs                   ss ∈ dis          end                                                      ≥ ≥                                                                        svi  svi                                                                           dii ← dii           figure  strong–fo–po algorithm                                                                                                                   ﬁ                                                                     endfor         function findstatepairspπf                           endfor              suppose  Σ g                             vobs ←∅           parts ← divideiπf                                dis  ∅           parts  ∅                                    let diimaxdik  ≥ ≥              return ∅                                            vobs ←vobs ∪vi           ﬁ                                                     ss ∈ dis           dis ←∅                                                  svi  svi           each ∈ parts                                     delete ss dis             inext ← executeΣ  qa                              ﬁ                               ←Σ  inext g                                  endfor                                                        dis ← dis ∪ findstatepairsp  π                   dii ←           endfor                                              endwhile          i∩g ∅                                    return vobs            parts ← parts ∪nop i∩g                     end          ﬁ                        ∈ parts                                                  figure  reduction procedure                            ∈q ∈q                 dis ← dis ∪s                                                       set returned findstatepairs            endfor                                    •                                dis          endfor                                        lines – elements corresponding          return dis                                    belief state computed simulating        end                                              strong plan’s execution step application                                                            findstatepairs  simulation plan                                                            realized through the function execute formally           figure  findstatepairs procedure                                                            executeΣ  qa    s∈q rs                                                          • finally lines – actions speciﬁed πf                                                                               parts    p vobs xwherevobs approximate minimal set consistent     states  observation variables necessary execution different divisions                                                                                               πf thestrong–fo–po algorithm main phases        distinguished each                                                                                   dis      ∈ parts   observation reduction phase lines – vobs included                                                                           ∈ parts ∈q       ∈q  computed applications findstatepairs                              ductionanda transform phase line  πf   figure  shows reduction procedure given dis ⊆  transformed conditional plan Σ vobs x s×s vandx input reduction procedure returns  application transform                             approximate minimal set observation variables vobs    order compute vobs calculate dis ⊆s×sif  ∀ss ∈ dis ∃v ∈vobs sv  svit  ss ∈ disthenss⊆bie set possi    starts vobs  ∅ iteratively adds ∈vinto  ble current states step execution πf vobs  diswhered  ss ∈ dis ∃v ∈  actionsπf   actionsπf  task accom vobs sv  sv  plished findstatepairs procedure pre  transform   procedure presented figure   sented figure                                    role transform πf strong plan strong    let introduce findstatepairs procedure plan π p vobs x                                                  let introduce transform procedure                                                                                          • line  set possible current states ﬁrst line  belief state  divided                                                                                               π      divided divisions according ac divisions according actions speciﬁed  parti                                                                                        ivide      tions speciﬁed πf  partition realized through tion realized through function andthen      function divide formally divideiπf         i⊆glines – plan ε returned       ∈a ∅⊂q⊆is∈q         s a∈π                                      iff                i∩g  ∅ lines – ε                                                                              • second lines – parts  ∅ i⊆g  transformp    πf  vobs  returned                                                    ijcai                                                        function transformpπf   vobs                     function makecodeq   vobs            suppose  Σ g                                 dis ←∅        parts ← divideiπf                                    ∈q ∈q        i⊆gthen                                                 dis ← dis ∪ss          return ε                                              endfor        i∩g ∅                                     vnow ← reductiondis  vobs           ←makecodei∩g     i−g   vobs                  return codeq vnow           p ←Σ  i−g  g                                  end          return ε                                                       transformp   πf  vobs               figure  makecode  subroutine        parts   parts          inext ←executeΣ  qa                        ←Σ  inext g                                                         fact theorem  proved showing         return ◦ transformp  πf  vobs     paths execution structure induced πf                                                ﬁnite according deﬁnition  paths ﬁnite                              parts         select element                     acyclic πf strong plan         ←makecodeq    i−q   vobs                                                      theorem  let πf strong plan pletqt set          ←Σ  g ←Σ  i−q  g                                                       terminal states execution structure induced         return transformp πf  vobs                                                       πf suppose π conditional plan returned                  transformp    πf  vobs                                                         strong–fo–popπf            ﬁ                                                          • π strong plan p x     end                                                                                                           •   s∈i finalstatess πqt  ⊆g             figure  transform procedure                                                          following example illustrate algorithms                                                        scribed section        • observation distinguish states example  consider situation depicted exam          i∩gfrom states i−g                    ple    apply  strong–fo–po    pπf          •p   Σ i−g g                             firstly dis computed findstatepairspπf                                                         ss ss vobs computed      computed makecodei∩g   i−g  vobs                                                         reductiondis  walls lastly π      figure  shows makecode  subroutine given                                                        turned transformpπf   vobs      ⊆s   ⊆s  vobsandx   input make                                                          • π  π   goeast  ◦ π      code  subroutine ﬁnds approximate minimal set                            observation variables vnow ⊆vobs ∀ss ∈ • π  walls gowest ◦ ε π      ×q  ∃v ∈vnow  sv  svandre                                                          • π  gosouth  ◦ π      turns observation built vnow                                                          • π   walls gowest ◦ ε π      codeq vnow                                                                                                                                 • π   gosouth  ◦ gowest  ◦ ε    actions speciﬁed πf                                                   parts        sistent                lines –   it easy ﬁnd π strong plan p x       ◦           pπ              transform         obs    returned   s∈i finalstatess πs   set terminal                                                                                             π             • action speciﬁed πf possible states execution structure induced                                                                                         v−v          current states                                 fact observation variables obs useless                                                       executions π πf  sensors        •p    Σ inext g inext belief state                                                        sponders correspond observation variables          step computed executeΣ qa                                                        walln  wallw  walle        lines – selected partsandif turned executing π furthermore      π π returned             necessary observe values observation variables                                                                                   π        • observation distinguish states obs step instance requires plan execu                                                                    goeast          states i−q computed tor execute    ﬁrst regardless observation          makecodeq   i−q   vobs                information current state        • π transformΣ   gπf  vobs                                                            conclusions        • π transformΣ   i−q  gπf  vobs                                                         paper presents algorithm strong–fo–po    deﬁnition  deﬁnition  algorithms pre observation reduction strong plans observability  sented theorem  theorem      form state–action tables best  theorem     πf   strong plan  pthen      knowledge work discussed tackled  strong–fo–popπf      terminates             problem                                                    ijcai                                                    
