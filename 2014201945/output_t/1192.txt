                   building     semantic    web    tower      rdf   straw                                           peter  patelschneider                                             bell labs research                              mountain  ave murray  hill nj                                         pfpsresearchbelllabscom                          abstract                          rdf  graph read collection facts correspond                                                        ing edges graph generally referred     samesyntax extension rdf ﬁrstorder logic triples edge label property     results collapse model theory log node subject node object corresponds     ical paradoxes resulting diagonalization rdf                                                                                   fact rnn label treated     wrong material building semantic constant label constant     web tower                                                                                                                                                   doesn’t label treated existentially                                                        quantiﬁed variable arbitrary model     semantic   web                                ory rdf slightly nonstandard provide integrated     semantic web extension current web meaning edge labels node labels     information given welldeﬁned meaning   rdf way providing information     better enabling computers people work triples graph edges triples written infor     operation bernerslee et al               mally form similar ntriples edge label                                                        node labelled uri reference node la  goals semantic web similar belled uri reference written  goals knowledge representation—to provide means  representing information way processed   machines                                             uri references long names form nl    base language semantic web rdf manola used uri reference constructed  miller  simple representation language based concatenating expansion expansion  graph structure                                    generally speciﬁed informally left unspeciﬁed nodes     semantic web provides common framework       labels given “local tags” form     allows data shared reused    tags uri references constant names instead     application enterprise community boundaries correspond existentially quantiﬁed variables         based resource description frame rdf triples way provid     work rdf integrates variety applica ing syntactic constructs speciﬁed     tions using xml syntax uris naming    binary facts implicit conjunction existential quantiﬁca     httpwwwworgsw                       tion syntactic constructs encoded  rdf based labelled graphs—an rdf knowledge base triples special meaning conveyed stating seman  roughly graph nodes labels tic conditions model theory  form uri references literal data edges rdf semantic conditions  labels uri references node labels particular property rdftype considered  unique uri reference label typing construct triple  node                                                    rdftype     normative surface syntax rdf xml syn  tax called rdfxml dave beckett  interpreted type belongs class  surface syntaxes rdf including ntriples jan semantic condition used edge  grant dave beckett  counts rdf label property type rdfproperty  graph conveyed aspect surface rdf simple representation language  syntax                                               triples powerful construct ground    rdf just graph language ac existentially quantiﬁed atomic fact encoded rdf  tually logic model theoretic semantics entail triples using new unnamed node triples link  ment relationship details speciﬁed each arguments simple trick used  wc recommendation hayes  essence knowledge representation formalisms  extending   semantic  web                      encoded rdf triples means example en  power triples given rise vision rdf coding ﬁrst order sentences strings goedel numbers  universal language semantic web permitted second extension meaning  means syntax semantic web languages rdf graph means extension can’t iden  rdf triples meaning speciﬁed se tify subset rdf graphs treelike rdf graphs  mantic conditions add rdf model theory wellbehaved provide meaning graphs  referred samesyntax extension rdf   “rdf logic” look like pro    process successfully carried rdf  vide constructs nicely provide facilities  schema dan brinkley guha  extension ﬁrstorder logic including predicates constants variables  rdf provides simple vocabulary structuring facilities conjunction disjunction negation quantiﬁcation equality  rdf  schema interprets nodes labelled particular uri functions entailment relationship  references providing vocabulary structuring facili stricted constructs used provide facilities  ties particular rdfsclass interpreted type ﬁrstorder logic mirror entailment ﬁrstorder logic  types used type types language suitable purpose binary predicate  include interpretation rdfsclass objects type calculus equality recall predicate calculus  rdfsclass called classes rdfssubclassof functionfree ﬁrstorder logic function symbols  terpreted requiring subtyping relationship ar equality barr feigenbaum  volume    guments interpretations provided appropriate indicated binary predicates used encode  semantic conditions extend rdf model theory predicates arbitrary arity equality used en  rdf schema model theory hayes                 code functions obtaining facilities ﬁrstorder    problems ﬁrst arose vision seman  logic  tic web extended include ontology language  charter group charged doing ex    rdf   logic  tension included requirement language “will  designed maximum  compatibility xml   task design samesyntax extension rdf  rdf  language conventions” httpwwwworg binary predicate calculus equality deﬁning “log  swvcharterswebontologycharter interpreted ical” interpretations special rdf interpretations provide  working group requiring resultant language mechanism logical constructs add new  samesyntax extension rdf                    vocabulary new semantic conditions                                                                                                       considerable work compromises style used rdf model theory hayes    sultant language owl dean et al  ﬁnally spec  iﬁed samesyntax extension rdf patelschneider et  equality  al  syntax allowed triples com equality easiest task need  plex owl  constructs description logic baader “anoint” particular uri reference equality predicate  et al  restrictions encoded num providing semantic conditions owl  ber triples example description logic restric notion equality use uri reference  tion represents friends lawyers uses purpose write using standard  ∀exfriendexlawyer encoded triples      abbreviation owlsameas      rdftype owlrestriction                        semantic condition equality     owlonproperty exfriend                          equality condition     owlallvaluesfrom exlawyer                       hxyi ∈ iexti owlsameas iff   triples facts entailment work cor condition says logical interpretation  rectly owl unless owl interpretations required main elements related relationship prop  facts corresponding possible piece complex erty interpretation followed iext owlsameas  owl  syntax requirements called compre precisely  hension principles case  exjohn belonging ∀exfriendexlawyer entailed  encoding formulae  exjohn belonging ∀exfriendexlawyer exdoctor  restriction represents friends need use rdf syntax  lawyers doctors encoding facility predicate calculus formulae  facts encode union lawyers doctors possible schemes let’s pick    success rdf schema owl samesyntax ex     tensions rdf lead calls make ex slightly unusual nature rdf semantics                                                        standard semantics ﬁrstorder logic directly  tension semantic web similar style ﬁrstorder syntactic token owlsameas property interpretation  logic language                                       instead preliminary mapping object    mean “similar style” “style” domain discourse  followed mapping property  eye beholder ground rules laid terpretation iext means properties objects  syntactic constructs extension domain discourseuses rdf possible owl    composite formulae conditions  going need comprehension principles formulae icexti lxnegation ⊆ icexti lxformula  exist interpretations introduce icexti lxconjunction ⊆ icexti lxformula  syntax encoding                          icexti lxexists ⊆ icexti lxformula     use lxformula class formulae need composite formulae exist  lxatomic           class atomic formulae can’t just use negation comprehension principle  rdf triples directly atomic formulae formu                                                           ∀ ∈ icexti lxformula  lae true variables                                                           ∃n ∈ icexti lxnegation    require atomic formulae formulae     hn ∈ iexti lxleft     atomic formulae condition                            conjunction comprehension principle     icexti lxatomic ⊆ icexti lxformula          ∀ ∈ icexti lxformula  using terminology rdf schema   ∃ ∈ icexti lxconjunction  semantic conditions icextx class extension ∈ iexti lxleft  jgi ∈ iexti lxright  deﬁned domain elements quantiﬁcation comprehension principle  types                                                   ∀ ∈ icexti lxformula ∀v ∈ ir     use lxpredicate lxsubject lxobject  ∃q ∈ icexti lxexists  lxsubjectv lxobjectv construct atomic formulae hqvi ∈ iexti lxleft  hq ∈ iexti lxright  syntax variable need distin guaranteed ﬁnite noncircular  guish used variable mulae exist interpretations lots formulae  need variants subject object links quasiformulae exist course keeping  allow predicates variables logic syn permissive nature rdf won’t rule  tactically ﬁrstorder higherorder    ﬁrst comprehension principles concerned  truth  atomic formulae requiring atomic formulae exist far existence formulae  logical interpretations different compre true need provide mechanism  hension principles corresponding different ways vari determining truth formulae interpretation  ables used atomic formulae                 start doing metatheoretically later provide     atomic formulae comprehension principles          syntax determining true formulae     ∀r ∈ ip ∀xy ∈ ir                                   ﬁrstorder logic variables                                                        need mapping variables values mech     ∃ ∈ ir ∈ icexti lxatomic               anism needs slightly different standard ﬁrst              fxi ∈ iexti lxsubject           order logic variables just elements              fri ∈ iexti lxpredicate         main discourse              fyi ∈ iexti lxobject            deﬁnition  variable mapping let set total     ∃ ∈ ir ∈ icexti lxatomic               mappings ir ir              xi ∈ iext lxsubjectv                                                         provide metatheoretic mapping given              ri ∈ iext lxpredicate                                                      formula variable mapping assigns truth value              yi ∈ iext lxobject                                                     formula     ∃ ∈ ir ∈ icexti lxatomic               fxi ∈ iexti lxsubject           deﬁnition  formula truth let bool total mapping              fri ∈ iexti lxpredicate         ir × boolean values true false              fyi ∈ iexti lxobjectv           ∀v ∈     ∃ ∈ ir ∈ icexti lxatomic                 ∀ ∈ icexti lxatomic ∀x ∈ ir ∀r ∈ ip ∀y ∈ ir              fxi ∈ iexti lxsubjectv             xi ∈ iexti lxsubject               fri ∈ iexti lxpredicate            ri ∈ iexti lxpredicate               fyi ∈ iexti lxobjectv              yi ∈ iexti lxobject →                                                           bool   true iff hxyi ∈ iextr     use limited complete set connec  tives construct composite formulae lxnegation  ∀ ∈ icexti lxatomic ∀x ∈ ir ∀r ∈ ip ∀y ∈ ir  lxconjunction lxexists classes com xi ∈ iexti lx  subjectv   posite formulae use lxleft lxright struc ri ∈ iexti lxpredicate   tural connectives composite formulae            yi ∈ iexti lxobject →                                                                                      require composite formulae formulae  bool   true iff hvx yi ∈ iextr                                                          ∀ ∈ icexti lxatomic ∀x ∈ ir ∀r ∈ ip ∀y ∈ ir    really doesn’t matter long formulae xi ∈ iexti lxsubject   “manipulated” formalism               ri ∈ iexti lxpredicate     ip set rdf properties ir set rdf yi ∈ iexti lxobjectv →  domain elements including properties                   bool   true iff hxv yi ∈ iextr ∀ ∈ icexti lxatomic ∀x ∈ ir ∀r ∈ ip ∀y ∈ ir unfortunately claim true ian horrocks hor     xi ∈ iexti lxsubjectv                  rocks patelschneider  pointed     ri ∈ iexti lxpredicate                  sentences truth affected unusual nature     yi ∈ iexti lxobjectv →                  rdf semantics actually ian’s observation     bool   true iff hvxv yi ∈ iextr     context scl httpwwwihmcususersphayescl   ∀ ∈ icexti lxnegation ∀x ∈ ir              scl similar semantic features rdf                                                        example rdf interpretation domain     xi ∈ iexti lxleft →     bool   true iff boolxv   false         element predicate matter                                                          doesn’t matter rdf rdf schema   ∀ ∈ icexti lxconjunction ∀x ∈ ir ∀y ∈ ir  cause place conditions size domain     xi ∈ iexti lxleft                      conditions easily stated predicate     yi ∈ iexti lxright →                    calculus equality example formula     bool   true iff                              ∀x ∀y  → expexaexa ↔ exqexaexa     boolxv   true  boolyv  true             theorem predicate calculus equality   ∀ ∈ icexti lxexists ∀x ∈ ir ∀y ∈ ir       encoding true logical interpretation     xi ∈ iexti lxleft                        claim version rdf logic     yi ∈ iexti lxright →                    good claim version rdf     bool   true iff ∃w ∈ ir boolyv   true logic paradoxfree          note gives truth values elements  selfreference diagonalization  domain discourse including nonformulae does does encoding actually work word  speciﬁcation truth values non falls prey paradoxes related truth  formulae note does provide conditions predicate ﬁrst noticed tarski tarski   truth values overspeciﬁed formulae like formula owl provided comprehension princi  conjunction disjunction finally note ples treelike formulae means don’t require  recursive deﬁnition truth values instead just existence selfreferential sentences like liar’s sentence  quire bool satisﬁes conditions rule “i lying” “this sentence false”  terpretations bool exists amounts encoded  thing fewer opportunities para rdftype lxnegation   doxes example method work inﬁnite lxleft   circular formulae     need way getting truth formu construction exist logical interpretation  lae use lxtrue providing appropriate logical interpretations try deter  semantic condition true formulae belong class  ∈ icexti lxtrue  extension                                            lost freeform ﬂavour rdf self                                                        referential sentences useful can’t entail     truth condition                                   model theory easily shown     ∈ icexti lxtrue iff                         break     ∃v ∈  bool   true                           careful break self    looks icexti lxtrue deﬁned referential sentences occur example  bool really case bool depends deﬁned bool recursive manner starting atomic  icexti lxtrue formulae use lxtrue     formulae problems circular    logical interpretation simply rdf interpre inﬁnite formulae  tation satisﬁes semantic conditions including fairly careful hung  having bool mapping logical entailment deﬁned obvious problems power  obvious way                                      formalism break actually                                                        surprising result—just encoding ﬁrstorder logic    result                                       falls prey problem minimalist rdf logic  claim good version rdf logic weaker ways standard ﬁrstorder logics  liked make following claim result usually shown                                                          going show encod  claim  logical interpretation stan ing breaks building selfreferential sentence using  dard predicate calculus equality interpretation process diagonalization proceeding  predicate calculus sentence predicate similar fashion goedel diagonalization  calculus formula free variables domain el lemma  ement corresponds obvious way  true iff ∈ icexti lxtrue                   building  formulae  used show strong correspondence process need ahold compos  tween rdf logic predicate calculus equality ite syntactic structures formulae turn befairly long introduce abbreviations lxright   abbreviations don’t add power      rdftype lxconjunction     abbreviation formula checks single lxleft constructslxexists  triple                                                                    lxleftxlxrights   deﬁnition  let uri references let sv lxright   ov boolean values requiressvpoov formula rdftype lxconjunction   looks like                                           lxleft constructslxconjunction                                                                             lxleftslxrightg       rdftype lxatomic                                lxright constructslxatomic     lxpredicate                                                       lxsubjectvx     lxsubjectv  sv  true                                          lxpredicateowlsameas     lxsubject  sv  false                                          lxobjectg      lxobjectv  ov  true                                                          diagsg true variable mapping precisely     lxobject  ov  false                                                        domain elements    abbreviation formula checks col variable mapping vs domain element  lection triples subject         following characteristics  deﬁnition  let uri reference used subject vs ∈ icexti lxexists  let uri reference used type subject hvsi xi ∈ iexti lxleft  let     pn uri references used hvssi ∈ iexti lxright  predicates values let     qm ∈ icexti lxconjunction  vm uri references used predicates variables hssi ∈ iexti lxleft  constructstpa   pnanqv   qmvm hsvgi ∈ iexti lxright  formula conjunction                         ∈ icexti lxatomic     requirestruerdftypetfalse                      hsi xi ∈ iexti lxsubjectv     requirestruepafalse                        hsi owlsameasi ∈ iexti lxpredicate     requirestruepnanfalse                           hsvgi ∈ iexti lxobject     requirestrueqvtrue                      informally formula free     requirestrueqmvmtrue                         write gx diagsg formula ggx    doesn’t actually construct course nei  paradoxical formula  ther does require existence  domain element                         consider logical interpretation noncircular ﬁ                                                        nite formula exist interpretation particular     ∈ icexti                                   formula following characteristics     hvi ai ∈ iexti                       bit sloppy using triples instead metatheoretical     hvi ani ∈ iexti pn                          formulation does introduce problems     hvvi ∈ iexti                                                               rdftype lxexists     hvvmi ∈ iexti qm                                                                                                             lxleft   constructstpa   pnanqv   qmvm lxright   true variable mapping maps vi vi rdftype lxconjunction    ≤ ≤ note especially noncircular lxleft   formulae exist formula comprehension principles lxright   noncircular formula “built” way rdftype lxatomic   exist                                                    lxsubjectv     diagonalization                                      lxpredicate owlsameas                                                             lxobject   diagonalization formula free variable ap  plication formula diagonalization rdftype lxexists   ax a‘ax’ quotes string quotes lxleft   instead represent encoding process diagonalization lxright   process creating selfreferential structure rdftype lxconjunction                                                                                deﬁnition  let uri references used variable lxleft diagxy   names diagsg formula form            lxright                                                             rdftype lxnegation       rdftype lxexists                               lxleft       lxleft                                       rdftype lxatomic       lxright       rdftype lxexists                              d’s left conjunct formula requires      lxleft                                   diagonalization
