                         automatically personalizing user interfaces               daniel weld corin anderson pedro domingos oren etzioni                           krzysztof gajos tessa lau steve wolf man                               department science  engineering                                    university washington box                                         seattle wa  usa                          abstract                          factor mobile devices enormously variable                                                          desktop machines — example ratio large       todays interfaces onesizefitsall  small desktop display size varies       users little programming experience      factor  cellphone liveboard       limited opportunities customize inter•    wisdom usercentered design doc•      face task work habits furthermore   umented lewis reiman  user       overhead induced generic interfaces needs device characteristics diverge traditional de•      proportionately greater small formfactor pdas sign methodology intensive user studies unscal•      embedded applications wearable devices au•    able each user deserves personalized interface de•      tomatic personalization greatly enhance user   signed device hand providing simple access       productivity requires advances customiza• commands features need arent       tion explicit userinitiated change adapta• ethnomethodologists designers manage interpret       tion interfaceinitiated change response rou• respond studies resources       tine user behavior order improve customiza• scale number users users       tion make easier users direct computing devices using       changes order improve adaptation                                                            use term adaptation denote personalization       better predict user behavior navigate in•                                                         automatically performed interface       herent tension dynamism automatic                                                          explicit user directives customization mean person•      adaptation stability required order                                                          alization directly requested user argu•      user predict computers behavior main•                                                         ment adaptivity customization       tain control paper surveys decades work                                                          scalable approaches personalization interfaces au•      customization adaptation university                                                          tomatically adapt capabilities device hand       washington distilling lessons learned                                                          network connectivity individual users activi•                                                         ties location context users able guide    introduction                                         control adaptation through variety customization mecha•                                                         nisms   todays software mass produced plethora features   designed satisfy user different people  customization adaptation   working different tasks different styles                                                          course existing desktop applications allow limited   way organize features way makes essential func•                                                         customization letting user  select menus   tionality convenient consider word processing                                                          visible  add buttons toolbars  define macros    example people use automatic line num•                                                         add custom functionality scripting languages   bering legal secretaries survive                                                          visual basic customization important users     shift away desktop pervasive                                                          fail customize effectively users comfortable   computing greatly exacerbates problem steelcase in•                                                         macros regular expressions scripting languages   spired software reasons shift quiet                                                          programmers busy invest necessary time   office ubiquitous use introduces complex environmental                                                          order speed future sessions challenge   factors increase differences usage pat•                                                         create improved methods users direct inter•  terns distinct individuals single user require                                                          face rearrange functionality appearance re•  different features depending context second form                                                          cover inappropriate adaptations     current address google  bayshore parkway moun• similarly systems support limited adaptation   tain view ca                                    users dont appreciate defaults remember     current address ibm tj watson research center po box option directory selected simple help•   yorktown heights ny                         ful microsofts smart menus disorient office       invited speakers                                                                                       assistants guesses fall far mark danger yates et al  programming demonstration lau   adaptivity potential create confusing inconsistency et al    rob user control challenge develop   datamining algorithms accurately predict users be•  programming demonstration   havior navigate tension rapid adap•  tation disorienting little inefficient seek hard users specify goals natural ob•  interface metaphors increase user control        jective design interface watch users                                                          normal behavior help appropriate case repet•   deep deployment                                    itive tasks amounts programming demonstration   successful customization adaptation methods max• pbd course pbd studied extensively cypher   imize benefit used broad range applica•  previous systems heuristic domain  tions ideally deep deployment uniform specific sought domainindependent approach suit•  layer operating systems level records clickstream able deep deployment offered expressiveness   data applications supports ubiquitous personaliza• scripting language ease macro recording with•  tion work interfaces de• verbatim recorders accompanying brittleness   scribed using declarative representations like developed pbd interface resembles keystrokebased macro inter•  modelbased interface community foley et al  face generalizes demonstrated actions robust   puerta                                           program likely work different situations     deploying personalization methods os layer useful think pbdinterface having three com•  bring advantages consistency behavior ponents  segmentation determines user execut•  applications second knowledge users activ• ing automatable task  trace induction predicts   ity application improve adaptation anothers user doing prefix activity trace  facili•  interface crossapplication personalization offer tation manages user interaction aid user completing   highest benefit users common tasks involve task focus work trace induction   patterns connecting programs              phase                                                            formalized pbd trace induction learning problem    outline                                            follows repetitive task solved program                                                          loop each iteration solves instance   rest paper sequence task pbd infer correct program   projects making progress vision under• demonstration iterations each action   lying techniques range continuum userinvolvment select copy paste  user performs during   expository progression follows vector cus• demonstration causes change state application   tomization pure adaptation way com• defines mapping editor states   pare related endeavors summarize lessons learned  modeled problem inferring function                                                          maps state based observations state    customization command                             prior following each user action   internet softbots project etzioni weld    pbd presents particularly challenging machine learning   marked genesis work intelligent user interfaces problem users extremely reluctant provide   university washington acting personal as• training instances learner   sistant softbot supported qualitatively different kind able generalize small number iterations   humancomputer interface users able make high order useful wide range programs   level requests softbot used search weld  in• learnable problem combines weak bias   ference etzioni et al  knowledge determine demand low sample complexity solution called   satisfy request furthermore softbot able versionspace algebra lets application designer combine   tolerate recover ambiguity omissions errors multiple strong biases achieve weaker tailored   requests                                     application reducing statistical bias     core softbot handle goals specified increase variance addition learning   expressive subset firstorder logic modal operators able interact gracefully user presenting   handling time distinguishing information gathering comprehensible hypotheses taking user feedback ac•  goals requested state changes golden count versionspace algebra addresses issue   weld  labeled softbot goaloriented inter•  face human requests specified user wanted  versionspace algebra   softbot responsible deciding sat• originally developed concept learning version space   isfy request users uncomfortable subset hypothesis space consistent   logical notation provided formsoriented interface set training instances mitchell  partial   end unfortunately forms approach un• order candidate hypotheses represent ver•  scalable goalspecification challenge sion space implicitly boundary sets manage   users response investigated research directions updates efficiently version space algebra defines transforma•  reliable naturallanguage interfaces popescu et al  tion operators union join combining simple                                                                                           invited speakers                                                                scenarios learned quickly                                                                  training examples informal user study confirmed                                                                  smartedits usability usefulness showed                                                                  novice smartedit users perform tasks quickly                                                                  concisely pbd                                                                    learned negative lesson started                                                                  widespread distribution — despite incorporation                                                                  emacs relatively people used smartedit frequently                                                                  conclude overhead macro recorder                                                                  interface relatively high repetitive tasks                                                                  short easier manually avoid                                                                  cognitive load complex customization                                                                  similar results — users customize relatively little mackay                                                                   — customization facilities com•                                                                 plex mcgrenere et al  conjecture   figure  algebraic specification version space                                                                  widespread pbd adoption requires automatic segmen•  smartedit program                                             tation adaptation mechanisms described                                                                  section provide capability   version spaces complex ones developed   probabilistic framework reasoning likelihood   adapting user behavior   each hypothesis composite version space                                                                  ai community longstanding adaptive in•     constructing library reusable domain                                                                 terfaces calendars apprentice dent et al  used   independent component version spaces combined set                                                                  machine learning predict meeting location durations   primitive spaces form bias learning textediting pro•                                                                 research similar work email classification maes   grams figure  used smartedit pbd                                                                  kozierok  led important principle   implementation                                                                  incorporation imperfect behavioral predictions inter•   smartedit implementation                               face defaults effective way minimize cost                                                                  user inevitable poor predictions horvitzs decision the•  verified utility versionspace algebra pbd                                                                  oretic framework horvitz  resulted additional prin•  smartedit emacslike editor user notices                                                                  ciples graceful degradation service prediction expected   perform repetitive task clicks button                                                                  utility disambiguation dialogs function user time   start pbd recorder completeing instance                                                                  attention use timeouts minimize cost   task clicks button mark demon•                                                                 prediction errors  stration smartedit initializes version space using                                                                                        work adaptive interfaces focussed initially web•  recorded state sequence training example                                                                  site design perkowitz etzioni  led al•  user continues type smartedit updates version                                                                  gorithms datamining web logs discover aggregate   space action parallel smartedit displays                                                                  patterns powered automatic creation index   action thinks user perform con•                                                                 pages perkowitz etzioni  later concentrated   fidence prediction probabilities calculated                                                                  mining individual behavior patterns generating personal•  voting version space user confident                                                                  ized sites display small wireless devices anderson et   smartedit learned procedure let exe•                                                                 al emphasis informationgoal seek•  cute singlestep fully autonomous mode explored                                                                  ing behavior common wireless internet use   number ways structuring users dialog                                                                  general browsing surfing proteus mod•  learner including decisiontheoretic control wolfman et al                                                                  eled adaptation search through space possible web•   aspects facilitation require study                                                                  sites site modification operators included highlighting text      versionspace algebra provides smartedit                                                                  adding shortcut links eliding parts pages adopted   benefits efficient methods incremental update voting                                                                  decisiontheoretic approach guiding search expected   explicit enumeration version space lau et al                                                                  utility calculations based model cost manipu•   flexibility varying algebraic formulation                                                                  lating small pda screen fetching pages slow   hypothesis space experimented                                                                  wireless connection   version spaces learning singleloop programs traces                                                                    small user study revealed important lessons   varying amounts segmentation information                                                                  adaptations good ones proteus sug•  learning programs multiple nested loops                                                                  gested useful shortcuts elided content al•   experiments observations                               ways useless user cost deleting im•                                                                 portant parts page high reweighting utility   empirical studies validated approach range text   function led conservative behavior   editing scenarios bibliographic reformatting html   conversion information extraction                  ironic office assistant violates horvitzs   show program generalizes correctly each     principles developed microsoft research       invited speakers                                                                                                     figure  main dialog box print command clicking properties button default setup tab   displayed clicking features tab user select doublesided printing user click ok twice     problem accurate behavior prediction central in• infer user   terface adaptation discuss section visiting page pearl jam cd rmm     second problem stemmed fact frequently able infer user pearl jam bi•  users didnt shortcut link proteus ography rmms make effective learning possible domains   added appropriate place shortcutnaming usu• large heterogeneous state spaces given   ally blame raised general issue saliency sparse data experiments academic ecommerce web•  discuss section                       sites show rmms trained instances perform                                                         markov models trained thousand    predicting user behavior                          instances anderson et al  currently extending   highquality adaptation requires ability learn ex• rmms incorporating structure way dy•  tremely accurate model user behavior comparison namic bayes nets extend markov models sanghai et al   existing techniques showed mixture markov mod•    els best predictive power anderson et al   shortcuts generated mixture model saved users  partitioned dynamicity    navigational effort models performed experience unnoticed shortcuts showed saliency   poorly data sparse models essential — adaptive mechanism introduces new   work situations user exploring new commands options interface ensure   parts interface — performing task user finds furthermore mechanism care   similar performed frequently con• obscure important existing functionality   text shopping cart checkout new store rem• way increase saliency minimizing cogni•  edy problem developed relational markov models tive dissonance associated adaptivity partition dy  rmms generalization markov models overlays namism — segregate dynamic static areas inter•  relational structure states anderson et al  face number welldesigned adaptive interfaces     intuitively rmms markov models prob•   exhibit property example news stories ad•  abilistic relational models prms baysian net• vertisements yahoo change continuously   works friedman et al  rmms generalize markov layout fixed adaptation causes little distress users   models partitioning states classes each class contrast automatic menu shortening feature microsoft   associated kary relation members class cor• office  violates partitioned dynamicity loca•  respond instantiated distinct ground values tion commands menus changes unpredictably   domain each variable hierarchically structured powerpoint xps insert symbol command provides an•  smoothing techniqued called shrinkage carried example previous versions required long sequence   cross product hierarchies rmms make pos• clicks select correct font navigate desired   sible generalize observed states example symbol dialog box xp version recently   suppose user surfing through ecommerce web site goes used symbols area   page nirvanas nevermind cd page con• conjecture partitioned dynamicity useful   taining biography nirvana ordinary markov model general principle adaptation interfaces                                                                                          invited speakers figure  abstractstate machine printing dialogs   example users path darkened                                                         figure  adaptation duplex printing default   users accustomed changes dynamic area visible main print dialog discarding infre•  changes dont disturb conceptual model norman quently used tablet value variable cast    existing navigational patterns remain un• boolean simple spaceefficient checkbox widget used   changed users maintain control adaptation unhelp•  ful alternative dualinterface approach mcgrenere   et al  shares benefits partitioned dynamic• unchanged features tab   ity trades convenience screen real estate     restricting state variables set valid values type                                                         casting just representative transformations    example adapting desktop dialogs                 exist note possible perform                                                         transformations interface represented ab•  believe proteus architecture developed stract declarative language section discusses addi•  adaptive websites useful desk• tional benefits representation   application setting storyboard example suppose   user wishes print word document doublesided  adapting device characteristics   figures   show requires user actions   user presses ctrlp print current docu• trend mobile ubiquitous computing re•  ment click properties yields sulted morass device form factors input mech•  setup options clicking features tab uncovers anisms nearly impossible designer tar•  sided printing options click selects bookstyle each manually furthermore shown pre•  duplex ok clicked twice close vious section parts interface gener•  properties window confirm printing how• ated dynamically response particular usage pat•  individual user executes pattern hundreds terns building automated solution called   times choosing duplex printing supple researchers laid useful foundations   recognize provide shortcut                starting foley et ai  modelbased ui com•    figure  shows possible result main screen munity developed declarative interfacerepresentation   partitioned dynamicity duplex options languages supple uses extension representation   new default value added example as• developed pebbles nichols et ai    sume user chosen tablet duplex value researchers explored methods compil•  shortcut deleted value cast• ing declarative ul representation concrete form   ing duplex variable boolean result duplex use specific target device example pebbles   option rendered simple spaceefficient check• uses handconstructed decision tree task   box course user later desired tablet format approaches include hierarchical templates szekely et ai                                                           stylesheets schreiber  tools facilitating     using windows office xp hp printer     course quibble design particular  argue problem simply solved   interaction result todays software engineering pro• using mru default options like duplex restructuring   cess similar designs exist —thats adaptation dialogs changing defaults dangerous unless   promising                                             visible user       invited speakers                                                                                      
