                                     manipulating descriptions database                                                               pmdgrayy  dsmoffat                                                             dept computing science                                                       university aberdeen scotland uk                                                                           relational algebra instead having work                              abstract                                   low level record access operations                                                                         following pointers through database   method described manipulating                                embedding operations fortran code   descriptions programs access codasyl   databases meet specification given                                  write complicated    algebra method                      queries compute derived data   implemented prolog program compared                     records groups records averages counts   previous pascal version methodology                     appear generate intermediate   discussed automatic programming technique                    tables endeavour   explores transformations program                       access path computes   induced changes data structure                                  storing tables costly   representation levels                                         databases program generated                                                                         quite complicated write hand                                                                         competitive trained programmers code                         introduction                                                                              goes through stages        problem generating equivalent programs                    user types query algebra   changes data representation                            parsed    important case processing                   manipulated levels level   change data structure representing sets                         query rewritten algebraic form using   objects relationships completely                        rewrite rules assist transformations   change program applies codasyl                        lower level uses concrete   databases essentially enormous                      representation codasyl data structure   structures secondary storage                      traversal reads   variety redundant pointers                            number stored traversals each    possible traverse            each manipulated combined   ways just                    various ways satisfy requirements   question changing program generating                    query combinations represent   alternative programs runtimes                      slow programs discarded   disc access factors                 immediately good                                                                         program query        paper concerns manipulation                          second best modification   abstract descriptions programs query                    remainder finally descriptions costed   formulated functional language              according information database access times   algebra specifies logical relationships                    selected version used generate   retrieved data values stored                      fortran code run actual database   data items does specify sequence used                     oriented complex queries   access  access path  aim                     accessing thousands records run   generate program produces desired items                    batch producing substantial printout   exploring variety alternative           runtime translator   program structures consequence                      matters complexity query   following access paths                             handle currently systems handle                                                                         restricted view        method doing developed                        restricted query language   bell  embodied astrid   gray  typing queries                   astrid written   algebra generating running programs                        pascal recently levels   codasyl databases idsii idms                         manipulation rewritten prolog   users point view benefits twofold                        paper describes basic methodology shows                                                                         prolog adapted task         gives user view   codasyl database able think                             layout paper follows   problem terms table                 section   describes transformations   manipulations using high level operations                      affect resultant program best carried  gray moffat       relational algebra prolog section      describes basic notion traversal                   relational algebra   used represent piece   program section iv describes combination                             relations treated tables new   traversals used                     relations derived operations   descriptions complex programs section                         algebra operations used    prolog used combine          adapted codd selection   traversals discusses advantages snags                    projection  extend groupby gray    application section draws                       join operation generalised intersection   conclusions future work                                           formed cartesian product relations                                                                         selecting tuples matching values   relation work                                              common  query starts                                                                          joining  selects tuples        burstall darlington                          extends groups tuples   specifying program recursion                           projects required columns   equations manipulated play   role similar algebraic expressions                   relational algebra rewritten just   discuss way rewrite                      standard algebra using rewrite rules   abstract program given concrete data                                prolog  rules special   representation terms coding function                       predicates handling commutation   use traversal represents data                    transformation   different way apart tarnlund                        operation expression involving       addressed problem            selection ease join method   access relations using information   mode storage tarnlund studied ways                          stadiumallocation  stadium  cordoba year   answer queries representing            groupgroupplacings placing yeargroup   theorems derived order calculus                              looking derivations                    stadiumallocation stadiumcordoba    relations held binary tree structure                          groupplacings  placing    yeargroup             ii relational transformations                                                                            traversals codasyl database structures        user asks query algebra                    user thinks relations just   improves query rewriting                                  tables actually complicated doubly                                                                        linked structures second level   relational databases                                               transformation need represent possible paths                                                                         through structures traversals order        set tuples each containing             search   values fixed set  viewed           explain codasyl set relationship used   table values columns                  records   database usually contains                 number alternative base traversals   relations attributes common                        defined each relation held    examples used come database world cup   results relations                     codasyl database consists sets records   shown table                                                  type linked pointers                                                                         records set common owner   table  view world cup database               record uniquely instance                                                                         given set type figure  shows linkages                                                                         records world cup database                                                                             traversals                                                                                define traversal                                                                         precisely description piece                                                                         code realises tuples                                                                                                         gray moffat        time accessing records                                combination join   sequence following set pointers modifying   values necessary generator                            join based cartesian product    corresponding each relation                formed nested loop   stored database    groupplacings                   each record type    hold base traversals each                     similar traversal structure turns   essentially description piece                        traversal representing   code number nested loops                                   formed just concatenating parts                                                                         separate traversals bell  gray         notation traversals follows                    matching performed   internally represented prolog                      codasyl owner   structure three obvious base traversals                    record cases linked   stadiumallocation groupplacings                     records values selected   each sa number    join operator let consider examples   records generating tuple each                               using                                                                                  res stadiumallocation    syear  dgroup  dgame  uvenue sa                      placings   vvenue  dgame  ugroup  uyear sa   bgroup  uyear  dgame  uvenue sa                           use     syear  dgroup  dlink  uteam gp                       common  section   bgroup  uyear  dlink  uteam gp                                syear  dgroup                                                                           generates common        means singular set ccess visit                    cases concatenate traversals keeping   records given type set                  copy common   owning year records mean   member records belonging given owner                     syear  dgroup  dgame  uvenue    using appropriate set type                                                   dlink  uteam   ambiguous specified means                       order   owner given record means direct                 syear  dgroup  dlink  uteam    access record containing value usually                                                dgame  uvenue   given selection means vi record   type database    syntax represent corres ponding code                        traversals correspond nested loop code   sa                                                              produce desired tuples                                                                         different sequence best depends   each record                                            subsequent selections selection     each record owned                           dlink        each record owned                    second method best fewer records          venue owner             yearyear groupgroup gamegame                     join traversals head                     venuestadium gamedate                           traversal matches middle                                                                         second alternative                                                                         traversals sa  gp        each arrow traversal represents   inner level nested code note record                      vvenue  dgame  ugroup  uyear    dgame sa                                 dlink  uteam   bgroup generates owner    need                notice bgroup                                                                         records match ugroup                                                                         certain records properties       iv combination  modification              intersection          corresponding algebraic operation                         second traversal using sagp   given modification              preferred subsequent   traversal produces derived                 stadium use vvenue    generator new                general conditions choosing optimum   method complete derived traversal                    discussed esslemont  gray    modified operation   example selection inserting    year just each year                          join algorithm   record resulting traversal depends   somewhat order application operations                         basic method given figure    specified user                      starts reading number traversals   commutative order                            each holds unit clauses   improved level                              travx term contains record generation                                                                         giving sequence record set                                                                         accesses symbolised procedure                                                                         trav picks clause   gray moffat        each overlap                                                vi conclusions    accordance given      prod overlap twice                                       direct use codasyl databases    record generation reversed order                               storage facts unlikely ai    cases common                          general problem generating programs    head iva successful                                 traverse manipulate list structures    traversal asserted   clause                         important techniques described    causes              applications methodology used    clauses chosen combinations    operand                                  arrange specification    muchneeded space                        result computed generated program    safely asserted attempts                            given functional form relational    node sortmerge                        algebra procedural form loops    inserted                                                                            assignment easier user think                                                                                         does commit          pass through                unsuitable representation allows easier                     overall program transformation particular    instance used                          transformations easier functional form    subsequent types necessary                     traversal form    assign unique number each record    generation element                                                prolog particularly suitable    correspondences clauses                         work good listmatching back•   form equivcurrxy                                                                tracking facilities use assert fail                                                                                        necessary given outperforms                                                                                         pascal running larger problems pdp                                                                                          address space similar time                                                                                                                          acknowledgements                                                                                                 described ii                                                                                        developed tn scicon london                                                                                        ben du boulay gave comments                                                                                        paper                                                                                        generous uk serc                                                                                        acknowledged                                                                                                                         references                                                                                                automatic generation programs   effect joining modified traversals                                                     codasyl data                                                                                                bases phd  aberdeen                  extension groupby                rm  darlington   elements record                           transformation developing   operationsoperation nodes                                      recursive programs jacm  pp         joined   operation nodes copied                              esslemont pe  gray pmd   result traversal                                                                            performance                                                                                                codasyl database proc bncd ed   comparison pascal prolog versions                                                  smdeen ph hammersley            pascal takes thousand                                   gray pmd grupby operation   prolog needs                                    databases proc   read modify pascal                                        bncd ed sm deen  hammersley   wordier language                                pp      member type                                  gray pmd use automatic programming   argument known compile                                           simulation operations   use prolog clause grammars                                    codasyl databases  art   saves pages pascal procedures                                        report database series  ed   parse base                                 mpatkinson pergamon jan pp   pascal backtracking                                        sets combined   runs space                  tarnlund sa axiomatic data base    prolog handle                          theory logic data bases ed   reclaims space                                          minker  pp  
