                 fast simple algorithm bounds consistency                                               alldifferent constraint                  alejandro lopezortiz claudeguy quimper john tromp peter van beek                            school science wi                               university waterloo po box   gb                                  waterloo canada amsterdam netherlands                               abstract                                 constraint propagation algorithms alldiffer•                                                                 ent constraint developed ranging weaker        constraint programming models problem                                                                  stronger forms local consistency van hoeve         stating constraints acceptable solutions                                                                  excellent survey regin  gives algo•       constraint model usually solved inter•                                                                 rithm domain consistency alldifferent constraint        leaving backtracking search constraint propa•                                                                 number variables based re•       gation previous studies demonstrated de•                                                                 lating alldifferent constraints matchings leconte         signing special purpose constraint propagators                                                                  gives algorithm range consistency weaker        commonly occurring constraints significantly          form consistency domain consistency based        improve efficiency constraint programming        identifying hall intervals puget  building        approach paper present fast simple         work leconte  gives logn algorithm        algorithm bounds consistency propagation           bounds consistency turn weaker form lo•       alldifferent constraint algorithm        cal consistency range consistency mehlhorn thiel        worst case behavior previous best algo•        building work regin algorithm        rithm faster practice using variety     bounds consistency plus time needed        benchmark random problems show            sort bounds domains worst       algorithm outperforms existing bounds consis•         case behavior pugets algorithm general case        tency algorithms outperforms—on prob•                                                                   paper present fast simple algorithm        lems easily identifiable property—stateof                                                                 bounds consistency propagation alldifferent constraint        theart commercial implementations propagators         algorithm worst case behavior previ•       stronger forms local consistency                  ous best algorithm faster practice using vari•                                                                 ety benchmark random problems show al•    introduction                                                gorithm outperforms existing bounds consistency algorithms                                                                  outperforms—on problems easily identifi•  interesting problems modeled solved us•                                                                 able property—stateoftheart commercial implementations   ing constraint programming approach models                                                                  propagators stronger forms local consistency   problem stating constraints acceptable solutions                                                                    longer version paper containing proofs addi•  constraint simply relation unknowns                                                                  tional experimentation available lopezortiz et al    variables each taking value given domain con•  straint model usually solved interleaving backtrack•  ing search constraint propagation constraint propaga•   background   tion constraints used reduce domains vari• constraint satisfaction problem csp consists set   ables ensuring values domains locally variables finite domain dom possible     consistent constraints                               values each variable xi collection constraints      previous studies demonstrated designing special                  each constraint constraint   purpose constraint propagators commonly occurring con•     set variables denoted varsc specifies al•  straints significantly improve efficiency con•    lowed combinations values variables varsc   straint programming approach regin  stergiou     given constraint  use notation denote   walsh  paper study constraint propaga•  tuple t—an assignment value each variables   tors alldifferent constraint alldifferent constraint varsc—that satisfies constraint use notation   set variables states variables pair tx denote value assigned variable tuple   wise different alldifferent constraint widely used  solution csp assignment value each   practice importance offered builtin variable satisfies constraints   constraint major commercial research   assume paper domains totally or•  based constraint systems                                      dered minimum maximum values domain       constraints                                                                                                            domx variable denoted mindomx          causes update purpose    maxdomx interval notation used    updating lower bounds suffices restrict attention left   shorthand set values aa                maximal hall intervals minimal      csps usually solved interleaving backtracking          pugets algorithm sorts variables increasing or•   search constraint propagation during backtracking    der max assume convenience max  maxj    search variable assigned value constraint prop•   algorithm processes each variables    agation ensures values domains unas   turn maintaining set counters count    signed variables arc locally consistent constraints variables processed far minimum bound                                                                  precisely processing counter                                                                    cik denotes cardinality set   minj                                                                   algorithm stores counters balanced binary tree                                                                  allowing updates log time variable                                                                    conceptually algorithm similar pugets dif•                                                                 ference maintenance counters key obser•                                                                 vation counters relevant          csp locally consistent repeatedly re•  moving unsupported values domains variables                                                                      capacity dominated sense                                                                  reach  reach                                                                   hall interval starting leftmaximal                                                                  equal min dominated                                                                  greater min need remember capacities                                                                  equals min critical set set                                                                  indices undominated capacities set starts                                                                                  smaller time variables                                                                  processed capacities dominated denote                                                                    ci critical set processing lemma                                                                  shows effectively test each particular ca•                                                                 pacity zero negative        finding hall intervals   following leconte  puget  analyze   task terms hall intervals interval  hall interval   size equals number variables domain   contained clearly solution use values    variables making values unavailable   variable puget shows algorithm updating   lower bounds used update upper bounds     lower bound variable xi gets updated mini    hall interval  mini   max  condition implies hall interval                                                                                                             constraints means differences adjacent critical capaci•  ties remain constant place capacities   vk vi zerotest lemma difference re•  duced  testing zero negative capacity   need vk linked list data structure   designed perform operation efficiently dominated   indices form forests pointing critical index   dummy index end dominated    larger largest max suffices ensures dom•  inated index critical point difference   capacity say indices  reduced     dominated point   critical index say instead pointing   point                                                                      nb holds number unique bounds algorithm                                                                 uses following arrays                                                                    • maxsorted    holds intervals sorted max                                                                    • bounds   nbl sorted array ruins maxs                                                                    •   nbl holds critical capacity pointers                                                                      points predecessor bounds list                                                                    •   nbl holds differences critical ca•                                                                     pacities difference capacities inter•                                                                     val predecessor viz                                                                    • nbl holds hall interval pointers                                                                       halfopen interval bounds                                                                       bounds forms hall interval holds                                                                      pointer hall interval belongs hall in•                                                                     terval represented tree root containing    updating bounds                                                value right end   finding hall intervals solution  algorithm uses functions retrievingupdating   need efficiently update bounds use pointer information pathmaxa fol•  linked list structure indices inside hall interval lows chain   stops increas•  point location representing upper end ing returning maximum pathset   outside hall interval point left   sets each entries    index store list bounds sorted array named    equals values minrank   bounds intervals numbered order    maxrank index array bounds min   occurrence array linked list implemented   maxhi interval   array using indices bounds pointers          algorithm examines each interval turn sorted   differences critical capacities appearing   upper bounds updates capacities accordingly   arrows example  stored array algorithm   followed path compression operations underlying   shown figure  solves half problem updating    data structures each step test failure negative   lower bounds variable holds number intervals   capacity newly discovered hall interval zero capacity       constraints                                                                                                            indicates width interval equal consider rightrunning chains array lemma     number variables domain falls interval shows logarithmic number indices rise                                                                  value result path compression operation    example  table  shows trace algorithm updat•   ing lower bounds figure  applied csp    examples    each row represents iteration    variable processed graph nodes el•   ements vector bounds arrows illustrate con•  tent vector numbers given    implies linear number path compressions   vector nodes second graph val•  log steps situation array similar   ues vector bounds arrows given     follows algorithm runs time log   vector keeps track hall intervals                 theoretical performance algorithm im•                                                                 proved observing union operations al•                                                                 ways performed sets bounds appear consecutively                                                                  left right ordering known interval union                                                                problem gabow tarjan  gave linear time                                                                  solution ram provided keys fit                                                                  single word memory reasonable assumption                                                                  current architectures   bit words using                                                                  technique obtain linear time algorithm matches                                                                  theoretical performance mehlhorn thiels solution                                                                  implemented algorithm intel architec•                                                                 ture using direct assembly code calls program                                                                  practice log solution outperformed                                                                  mehlhorn thiels algorithm algorithm using                                                                  interval union data structure lopezortiz et al                                                                   additional discussion                                                                     experimental results                                                                  implemented new bounds consistency algorithm de•                                                                 noted bc mehlhorn thiels bounds con•                                                                 sistency algorithm denoted mt using log solver                                                                  library version  ilog  ilog solver                                                                  provides implementations lecontes range consis•                                                                 tency algorithm denoted rc regins domain consistency                                                                  algorithm denoted dc algorithm simply re•                                                                moves value instantiated variable domains                                                                 remaining variables denoted vc value consis•                                                                tency compare pugets bounds consistency algo•                                                                rithm use runtime results reported puget                                                                    rc runtime results rc calibration points                                                                 believe valid puget uses similar vintage                                                                 ilog solver compared careful use                                                                 constraint models variable orderings                                                                    compared algorithms experimentally various                                                                 benchmark random problems experiments                                                                 run  mhz pentium ii  mb main memory                                                                 each reported runtime average  runs                                                                 random problems  runs performed                   table  trace example      time complexity   running time algorithm dominated various   calls pathmax pathset each chain followed   pathmax followed subsequent path  set restrict analysis time spent                                                                                                             constraints figure  time sec solution pathological prob•                                                                table  time sec optimal solution instruction   lems                                                         scheduling problems blank entry means problem                                                                 solved  minute time bound   bc propagator offers clear performance improvement   propagators stronger forms local consistency fig•  ure  comparing best previous bounds consis•    main size variable ordering heuristic used search   tency algorithms bc propagator approx  times faster table  problem bc propagator offers   mt using rc calibration point compare     clear performance improvement propagators   experimental results reported puget  ap•   systematically study scaling behavior algo•  prox  times faster pugets algorithm                  rithms consider random problems problems      consider golomb ruler problem gent   consisted single alldifferent constraint variables   walsh  problem  following smith et al                                                                  each variable xi initial domain set ab   modeled problem using auxiliary variables ternary   chosen uniformly random    alldifferent model used lexicographic vari• problems solved using lexicographic variable   able ordering appears model puget     ordering pure problems nearly runtime    uses experiments number fails each alldifferent propagators clearly   problem each propagator bc        quadratic behavior rc dc propagators   propagator approximately  times faster    nearly linear incremental behavior bc propagator   fastest propagator used experiments table  figure  problems vc shown   using rc calibration point approximately     solve smallest problems    minute   times faster pugets bounds consistency algorithm       time bound mt shown    times slower                                                                 bc propagator                                                                    having demonstrated practicality algorithm                                                                 study limits applicability schulte                                                                  stuckey  investigate cases proven                                                                 priori maintaining bounds consistency during search                                                                 stronger form local consistency do•                                                                main consistency does increase size search    table  time sec optimal solution golomb rulers  space golomb ruler problem example                                                                 general course case using bounds con•     consider instruction scheduling problems       sistency exponentially increase search space   singleissue processors arbitrary latencies instruction    systematically study range applicability al•  scheduling important steps improv•     gorithms consider random problems holes   ing performance object code produced compiler    domains variables problems consisted   briefly model problems variables single alldifferent constraint variables domain   each instruction scheduled latency constraints each variable set steps initial domain   form xi  xj  small integer value variable set     single alldifferent constraint variables re• chosen uniformly random  second each   dundant constraints called distance constraints ex•  values b—  removed domain   periments used representative hard problems  given probability resulting problems solved   taken spec floating point spec float•    using lexicographic minimum domain size   ing point mediabench benchmarks minimum          variable ordering heuristics problems trivial       constraints                                                                                                           
