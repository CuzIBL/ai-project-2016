        data complexity reasoning expressive description logics              ullrich hustadt                     boris motik                      ulrike sattler       dept science       forschungszentrum informatik       dept science         univ liverpool uk         univ karlsruhe germany        univ manchester uk        uhustadtcsclivacuk                motikfzide                  sattlercsmanacuk                          abstract                          reasoning problems pcomplete develop                                                        intuition provide detailed account      data complexity reasoning description logics sults compare similar results variants      dls estimates performance reasoning al  datalog dantsin et al       gorithms measured size abox     results important provide formal justi      show expressive dl     ﬁcation hoping provide tractable algorithms ex      shiq satisﬁability checking data complete pressive description logics furthermore hornshiq sub      np applications large aboxes  sumes dllite calvanese et al  logic aiming      accurate estimate usually capture constructs er uml formalisms      sidered combined complexity exptime    providing polynomial algorithms satisﬁability checking      complete furthermore identify expressive  conjunctive query answering assuming unbounded      fragment hornshiq data complete   knowledge base bound query size horn      appealing practical usage shiq   additionally allows qualiﬁed existential quantiﬁca                                                        tion conditional functionality role inclusions al    introdcution                                       lowing reasoning algorithm runs time polynomial  description logics dls baader et al  stateof size data                                                                          theart knowledge representation formalisms applica schaerf   complexity concept subsump  tions areas science expressive dls tion contrasted combined data complexity                                                        instance checking various fragments  work  shiq  interesting mainly high ex                                 alc  pressivity combined clearly deﬁned modeltheoretic provides lower bound data complexity reasoning  semantics known formal properties compu shiq  tational complexity reasoning particular combined  complexity checking satisﬁability shiq knowl    preliminaries  edge base kb exptimecomplete kb schild  description logics given set role names nr                                                                                                         −  tobies                                         shiq   role ∈ nr inverse role    exptimecompleteness discouraging result ∈ nr shiq  rbox ﬁnite set role inclu  kb large practice similar sion axioms ⊑ transitivity axioms transr                                                                                                      −  database kb consists schema  called tbox shiq roles ∈ nr set invr   data fact called abox applications invr−  assume ⊑ ∈ transr ∈  ﬁxed schema varying data data complexity implies invr ⊑ invs ∈ transinvr ∈ role  measured size provides precise said simple transs ∈ each ⊑∗  formance estimate                                    ⊑∗ reﬂexivetransitive closure ⊑    assume abox kb extensionally  given set concept names nc  set shiq  reduced involves roles possibly negated cepts minimal set each ∈ nc shiq  atomic concepts terminological knowledge concept shiq concepts role sim  strictly separated assertional knowledge ple role positive integer ¬c ⊓ ∀rc  measure “raw” data kb show check ≥ sc shiq concepts use ⊤ ⊥ ⊔  ing kb  satisﬁability npcomplete ∃rc ≤ sc abbreviations ⊔ ¬a ⊓ ¬a  stance checking conpcomplete ¬¬c ⊓ ¬c ¬∀r¬c ¬≥   sc respec  lead intractability identify hornshiq frag tively concepts concept names called com  ment shiq analogous horn fragment ﬁrstorder plex literal concept possibly negated concept  logic hornshiq provides existential univer tbox ﬁnite set concept inclusion axioms  sal quantiﬁers does provide means express disjunc form ⊑ abox ﬁnite set axioms ca  tive information show hornshiq basic ra inequalities ≈ ≈ knowledge    table  semantics shiq mapping fol                table  types alchiqclauses                                                              ¬rx ∨ invry                 translating concepts fol                  ¬rx ∨ sx          πya  ax                                                                                                     ∨ rx fx      πyc ⊓  πyc ∧ πyd                                                              pf ∨ rfx        πy¬c  ¬πyc                                                   Ï                                                              px ∨ pfx ∨ fix≈≈fj      πy∀rc  ∀y  rx → πxc                                                 Ï                                                                                 πy≥ sc                                                 ∨     ∨     ∨  i≈ ≈                        Î          Î          Î                                                                   ti tj form fgx                                                                                         Ï         ∃y     yn  sx yi ∧ πxc yi ∧ yi ≈ yj            Ï                                                              px ∨  ¬rx yi ∨ py ∨ yi ≈ yj                   translating axioms fol                                    Ï                                                                             πc ⊑  ∀x  πyc → πyd                         ∨   ∨  i≈ ≈         πr ⊑  ∀x  rx → sx                  ti constant functional term fia       πtransr  ∀x  rx ∧ ry → rx          πca  πyc                            positive disjunctive datalog program equality ddkb         πra  ra                           equisatisﬁable kb           πa ◦  ◦ ◦ ∈ ≈ ≈               minor obstacle computing ddkb transi                   translating kb fol                tivity axioms clausal form contain                 πr  ∀x  rx ↔ r−y                                Î                    Î                                   literal variables clause occur clauses           πkb         πr ∧          πα                     r∈nr         α∈t ∪r∪a              known difﬁcult handle kb preprocessed    meta variable substituted actual variable equisatisﬁable alchiq knowledge base Ωkb    πx obtained πy simultaneously substituting roughly speaking transitivity axiom transs replaced    deﬁnition  respectively π π                                             axioms form ∀rc ⊑ ∀s∀sc each                                                        ⊑∗ concept occurring kb trans  base kb triple  kb extensionally reduced formation polynomial rest paper wlog  abox axioms kb contain literal concepts assume kb alchiq knowledge base    semantics kb given translating ﬁrst step translate Ωkb clausal ﬁrstorder  order logic operator π table  main infer logic assuming π deﬁned table  πΩkb  ence problem checking kb satisﬁability determining transformed set clauses Ξkb using structural  ﬁrstorder model πkb exists individual transformation avoid exponential blowup nonnengart  instance concept wrt kb πkb  πyc weidenbach  roughly speaking structural  case iff kb ∪ ¬ca unsatisﬁable   transformation introduces new each complex sub    logic alchiq  obtained disallowing transitivity formula πΩkb specialized version structural  axioms shiq rboxes alc obtained disallow transformation presented section   ing rboxes inverse roles number restrictions logic core property Ξkb contains clauses  logics contains primi forms given table  clauses called  tives primitives     alchiqclauses term pt denotes disjunction    measure size concepts length form ¬p ∨    ∨ ¬p pfx denotes  sume unary coding numbers ≤ rc  nc                                                                                  disjunction form pf ∨    ∨ pnf  use ra  ¬aa                                                                                                                      tice allows each pifix contain positive                                                        negative literals  disjunctive datalog datalog term constant  rbox tbox clauses Ξkb saturated  variable datalog atom form     tn basic superposition bachmair et al  nieuwenhuis  ≈ ti datalog terms disjunctive datalog rubio —a clausal equational theorem proving cal  program equality ﬁnite set rules form culus space limitations unable present  ∨  ∨ ←  bm ai bj datalog rules basic superposition considered op  atoms each rule required safe each variable oc timized version wellknown paramodulation calculus  curring rule occur body atom let Γ saturated set clauses key step  fact rule   semantics rule nonground consequences kb computed hustadt  equivalent clause ∨∨an ∨¬b ∨∨¬bm et al shown following key property  consider herbrand models say model ♠ application basic superposition inference rule  minimal model ′ ′  alchiqclauses produces alchiqclause proof  ground literal cautious answer written examines inference rules clause types  true minimal models  firstorder entailment furthermore examining types clauses ta  coincides cautious entailment positive ground atoms ble  show following property ♣ ﬁnite                                                        kb number alchiqclauses unique variable  reducing kb  disjunctive datalog results renaming exponential kb proof straightfor  paper based algorithm hustadt et al ward counting exercise number variables  shiq knowledge base kb algorithm computes depth functional terms alchiqclauses bounded                                                          each inference step carried polynomial timeso ♠ ♣ exponentially steps complexity checking satisﬁability positive disjunctive  alchiqclauses derived saturation terminates datalog program np intuitively                                                        nice property shiq tbox rbox reasoning does    satisﬁability Ξkb decided satu                                                        “interfere” abox reasoning nonground  rating Γ ∪ Ξa basic superposition Γ contains                                                        sequences kb computed taking abox  nonground consequences Ξkb remaining infer                                                        account notice result holds binary  ences produce ground clauses involve                                                        number coding  clauses type   inferences simulated  disjunctive datalog program transforming Γ lemma  membership kb extensionally reduced  functionfree clause set introducing new constants shiq knowledge base satisﬁability kb decided  playing role ground functional terms described nondeterministic polynomial time    deﬁne operator λ transforming Γ follows each                                                        proof let number constants number  functional term fa replaced new globally unique                                                        function symbols signature Ξkb num  constant  ii each term fx replaced new glob                                                      ber facts Ξkb equal number  ally unique variable  iii each variable clause                                                      facts deﬁnition λ number constants  troduced step ii λ appends literal ¬s                                                     ddkb   bounded ℓ   cf cf accounts   new predicate unique function symbol iv                                                                   stants form  number facts ddkb  variable occurs positive negative lit                                                              bounded ℓ    cf accounts facts  eral clause literal ¬hu appended                                                              form hu cf accounts facts form   clause each function symbol each constant                                                                                                 cf accounts facts form hu   Ξkb facts  hu hu                                                                                             function symbols introduced skolemizing tbox  added set functionfree clauses obtained apply                                                        cepts ∃rc ≥ rc  constant  ing λ Γ ∪ Ξa denoted ffkb example                                                        constant ℓ ℓ linear  applying λ clause type  shown                                                                                            ddkb  exponential kb                      λ    ¬cx  ∨ dfx ⇒  ¬sf xf  ∨ ¬cx ∨ dxf    cause nonground rules ddkb obtained                                                        exponentially clauses types  –  clause    each remaining ground inference basic superposi                                                        types contain abox clauses number clauses ob  tion Γ∪Ξa simulated sound inference step                                                        tained saturation obviously exponential    ffkb vice versa hustadt et al kb                                                        assume constant  ffkb  equisatisﬁable ffkb does contain                                                        number rules ddkb length bounded  functional terms clauses safe each clause                                                        constants ddkb polynomial  rewritten positive disjunctive rule let ddkb                                                        computed kb time polynomial  resulting set rules following theorem summarizes                                                          kb  ddkb   equisatisﬁable data com  properties ddkb                                                        plexity checking satisﬁability kb follows  theorem  hustadt et al kb alchiq data complexity checking satisﬁability ddkb  knowledge base following claims hold kb npcomplete dantsin et al  assuming ddkb  satisﬁable iff ddkb unsatisﬁable ii kb  α iff contains rules variables rule num  ddkb   α α form aa sa ber literals ground instantiation groundddkb                                      kb                                  concept simple role iii  ca iff  bounded · ℓ  ℓ each rule each variable  dd  kb                                                                         ∪c ⊑  qa complex concept replaced ℓ possible ways assuming  new concept iv number rules ddkb constants ℘  groundddkb polynomial  exponential kb number literals each satisﬁability groundddkb checked non  rule polynomial kb ddkb com deterministically generating interpretation size  puted time exponential kb                    ℘ checking model tasks                                                        performed polynomial time overall algorithm    data complexity reasoning     shiq           obviously nondeterministically polynomial  extensionally reduced shiq knowledge base kb hardness satisﬁability checking problem follows  upper bound data complexity follows reduc schaerf  lemma  actually lemma        kb     dd kb  tion          presenting details shows conphardness instance checking reduction  ﬁrst discuss intuition result        satisﬁability cnf propositional formulae    theorem  ddkb exponential kb duction produces extensionally reduced abox single  closer inspection reduction algorithm reveals tbox axiom applies case im  exponential blowup caused rules obtained mediately obtain following result  saturating alchiqclauses types  –  corre  spond tbox rbox abox clauses theorem  let kb extensionally reduced knowledge  size rules ddkb exponential size base logic alc shiq  tbox rbox size facts ddkb ciding kb satisﬁability data complete np ii  linear size abox data complex ciding kb  ¬ca bounded data  ity checking satisﬁability ddkb corresponds data complete conp  horn fragment     shiq                                                                   table  deﬁnitions pl pl−  horn logic wellknown fragment ﬁrstorder logic  formulae restricted clauses containing pld                  pl−d  positive literal main limitation horn logic ⊤                                                                             ⊥                                inability represent disjunctive information                         main beneﬁt existence practical refutation proce ¬c pl−c                 plc                                                                                       È       −      dures furthermore data complexity query answering ci maxi sgnpl ci         sgnpl ci                                                                È                                                                                                                                                                                   −  horn logic function symbols pcomplete dantsin    sgnpl         maxi sgnpl   et al  makes appealing practical usage ∃rc                    sgnpl−c                                                        ∀rc    sgnplc                 following idea section identify horn frag                         −                                                        ≥ rc                         sgnplc  ment shiq disjunction traded pcomplete                                                                                         ≤ rc  nn    sgn pl−  data complexity roughly speaking hornshiq                         axioms form ci ⊑ allowed each ci  form ∃ra form ⊥ ∃ra ∀ra  ≥ ra ≤  deﬁnition succinctly   easy concept complex sub  demonstrates expressivity fragment general concepts plc yields maximal number positive lit  restricting axiom a⊔a ⊑ ¬b horn erals clauses obtained clausifying ∀x  πyc  equivalent horn axioms ⊓b ⊑ ⊥ ⊓b ⊑ ⊥ clausify concept containing complex subconcept  similarly nonhorn axiom ⊑ ∃r∃rb trans position consider cp occurs  formed horn axioms ⊑ ∃rq ⊑ ∃rb  positive negative polarity ¬¬a ⊓ ¬b  troducing new subconcept ∃rb avoid cepts occur effectively positive ⊓ effectively                                                                            −  dependency obvious syntactic transformations ⊔ pl cp pl cp counts number pos  technical deﬁnition hornshiq       itive literals used clausify cp provided cp occurs    ﬁrst adapt notions positions polarity ﬁrst positive negative polarity function sgn·  order formulae dl position ﬁnite sequence takes account cp replaced structural  integers position denoted ǫ position transformation concept clausiﬁ  proper preﬁx position cation cp produces positive literal  concept α subterm position clausify  ∀rd ⊔ structural transforma  written αp deﬁned follows αǫ  α ¬dp  tion replaces ⊔ new concept yielding                                                          ′                        ′  dp ◦ dip  dip ◦ ∈ ⊓ ⊔ ∈    ∀rq clausifying produces clause  α  αp  dp α  ♦rd ♦ ∈ ∃ ∀ positive literal concept horn maximal  α  α  αp  dp α  ⊲⊳ rd  number positive literals obtained clausifying subcon  ⊲⊳ ∈ ≤ ≥ replacement subterm α position cepts  term β deﬁned standard way denoted concept complex subconcept position spe  αβp concept α position αp cial care taken introducing new α cp  concept polarity αp α denoted polα consider horn concept  ∀rd ⊔ ∀r¬d ap  deﬁned follows                                    ply structural transformation replace ∀rd                                                        ∀r¬d  new concept names yielding          polc ǫ                                                          concepts ¬q ⊔ ∀rd ¬q ⊔ ∀r¬d ⊔   polc ◦ ip  polci ◦ ∈ ⊓ ⊔ ∈   problem straightforward application structural     pol♦rc  polc ♦ ∈ ∃ ∀          transformation horn concept reduced non  pol≥ rc  polc                                                        horn concept ⊔ structural transformation       pol¬c  −polc                        stroyed hornness remedy modify structural  pol                 pol     ≤ rc  −                          transformation replace each cp literal concept α                                                        clausifying    requires number  intuitively polα equals  α occurs α          α     cp                                                      positive literals example mean  number explicit implicit negations −                                                        ∀rd replaced ∀r¬d  deﬁnition  table  deﬁne mutually recursive replaced ¬q  yielding concepts ¬q ⊔ ∀rd                  −                                                                                      functions pl pl  sgn   sgnn   ⊔ ∀r¬d ⊔ ¬q horn    concept position subconcept transitivity axioms translated π horn                  let plc  pl cp polc   let plc  clauses recall algorithm section  replaces   −  pl cp polc  −                           axioms form ∀rc ⊑ ∀s∀sc    concept horn concept plc ≤  each pl∃r¬c ⊔ ∀s∀sc    plc plc    position subconcept including position Ωkb horn knowledge base presence  ǫ extensionally reduced alchiq knowledge base kb transitivity axioms make knowledge base nonhorn  horn each axiom ⊑ ∈ kb concept ¬c ⊔d                                                        deﬁnition  let concept Λ function mapping  horn extensionally reduced shiq knowledge base                                                        set positions  ǫ subconcepts  kb  horn Ωkb horn                                                        cp literal concept positions pcq literal concept defc deﬁned recursively lemma  premises inference basic super  follows α  plc   α  ¬q position contain positive literal inference  plc   new atomic concept ¬¬q  conclusions contain positive literal    • defc  Λc  ∅                      proof sketch consider resolution inference clauses    • Λc  ∅ choose ∈ Λc let   ∨ ¬b ∨ literals negative                                                            literal positive obviously number                          ¬α ⊔ cp ∪ defcαp polc    positive literals conclusion cσ ∨ dσ equal   defc              ¬α ⊔ ¬cp ∪ defc¬αp polc  − number positive literals similarly consider                                                        paramodulation inference clause ≈ ∨    let clsϕ denote set clauses obtained clausifying clause ∨ literals negative  formula ϕ standard way let               obviously conclusion aσtσp ∨ cσ ∨ dσ                                                        positive literal similar considerations hold paramodu          clsc  sd∈defc cls∀x  πyd        lation negative literal  alchiq  knowledge base kb Ξkb small   lemma   kb hornshiq  knowledge  est set clauses each role ∈ nra  base ddkb nondisjunctive program  clsπr ⊆ Ξkb ii each rbox abox axiom α following result  kb clsπα ⊆ Ξkb iii each tbox axiom ⊑  kb cls¬c ⊔ ⊆ Ξkb                           theorem  kb  extensionally reduced horn knowl                                                        edge base logic alc shiq deciding    nonnengart weidenbach  ∀x  πyc kb  unsatisﬁability deciding kb  ¬ca  vd∈defc ∀x  πyd equisatisﬁable Ξkb bounded pcomplete  πkb equisatisﬁable                                                        proof membership consequence fact                                            kb  lemma   hornshiq   knowledge base    each   ddkb   nondisjunctive program satisﬁability  clause Ξkb contains positive literal checked polynomial time dantsin et al   proof ﬁrst show following property  horn hardness consider wellknown pcomplete prob  concept concepts defc horn concepts lem deciding path node node  proof induction recursion depth def graph exists papadimitriou  graph  duction base Λc  ∅ obvious consider applica let kb knowledge base containing assertions  tion defc horn concept position edgea edgeb each edge ha bi ax  subconcept cp literal concept ioms ca ¬can tbox axiom ⊑ ∀edgec  each position cq literal concept obviously reachable kb  observe cases plα  plc satisﬁable implying pcompleteness unsatisﬁability                                                        checking inference problems reduced  pl¬α    − plc consider cases                                                        unsatisﬁability usual  pending polc                                         • polc      pl ¬α ⊔ cp         discussion                                pl ¬α  pl cp  pl ¬α  plc   fur better understand results previous sec      thermore plc  plcαp cαp horn tions contrast wellknown results disjunc                                         • polc  −  pl ¬α ⊔ ¬cp      tive datalog dantsin et al  datalog                −                                     successfully applied practice analysis gives      pl ¬α  pl cp  pl ¬α  plc   fur                                                        ing insights practical applicability dls      thermore plc  plc¬αp c¬αp horn                                                          interestingly data complexity datalog variants  each application operator def decomposes corresponding shiq fragments coincide  horn concept simpler horn concepts  holds disjunctions shiq knowledge base datalog program  furthermore each cp ¬cp deﬁnition def model computed  each immediate subconcept literal               polynomial time disjunctions models pos    ∈ defc deﬁnition π table  easy sible dealt using reasoningbycases              pl gives maximal number positive lit intuitively needs “guess” model increases  erals occurring clause cls∀x  πyd data complexity np  horn concept clauses clsc contain key difference datalog dls revealed  positive literal finally clauses obtained translating considering effects various parameters  rbox abox axioms Ωkb contain complexity datalog program ground atom α  positive literal                                     checking  α performed time op    stated following lemma basic superposition maximal number distinct variables rule                                                                        inference applied horn premises produces horn vardi   problem solved  conclusion proof lemma given hustadt grounding  replacing each rule  variables  et al                                       individuals possible ways size
