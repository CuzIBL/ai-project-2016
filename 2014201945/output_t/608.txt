           definition complexity basic metareasoning problems                                        vincent conitzer tuomas sandholm                                               carnegie mellon university                                              science department                                                     forbes avenue                                                pittsburgh pa  usa                                            conitzersandholm cscmuedu                             abstract                              limited time resources prevent agent                                                                 performing potentially useful deliberation infor•       realworld settings limited time                                                                 mation gathering actions select actions        resources agent perform poten•                                                                reasoning deliberation actions called        tially useful deliberation information gathering                                                                 metareasoning decision theory  provides norma•       actions leads metareasoning problem                                                                 tive basis metareasoning uncertainty decision       selecting actions decisiontheoretic meth•                                                                theoretic deliberation control widely studied ai        ods metareasoning studied ai                                                                         theoretical results complexity                                                                    approach using metareasoning control        metareasoning derive hardness results                                                                 reasoning impractical metareasoning problem        three settings real metareasoning sys•                                                                prohibitively complex issue widely acknowl•       tems encompass special cases                                                                 edged  theoretical results        agent decide allo•                                                                complexity metareasoning        cate deliberation time anytime algorithms                                                                    derive hardness results three central metareason•       running different problem instances show                                                                 ing problems section  agent de•       atpcomplete second agent                                                                 cide allocate deliberation time anytime al•       dynamically allocate deliberation in•                                                                gorithms running different problem instances show        formation gathering resources multiple ac•                                                                 npcomplcte second metareasoning prob•       tions choose show                                                                  lem section  agent dynamically allocate de•       afphard evaluating each individ•                                                                 liberation information gathering resources multiple        ual action extremely simple                                                                 actions choose show mv       agent dynamically choose limited num•                                                                hard evaluating each individual action extremely        ber deliberation information gathering actions                                                                 simple metareasoning problem section         disambiguate state world show                                                                 agent dynamically choose limited number delib•       afphard natural restriction                                                                 eration information gathering actions disambiguate                   hard general                                                                 state world show nphard                                                                 natural restriction pspacehard general    introduction                                                   results general applicability metar•  realworld settings limited time agent can• easoning systems deal   perform potentially useful deliberation actions   problems addition dealing issues   result generally unable act rationally believe results good basic overview   world phenomenon known bounded rationality     space highcomplexity issues metareasoning   longstanding research topic    research descriptive goal char•  allocating anytime algorithm time   acterize agents—in particular humans—deal           problems   constraint strand bounded rationality research    section study setting agent   normative prescriptive goal characterizing   allocate deliberation time different problems—each   agents deal constraint particularly agent solve using anytime algorithm   important building artificial agents                    show hard agent perfectly predict     characterizing agent deal bounded ra•    performance anytime algorithms   tionality entails determining agent deliberate                                                                  motivating example      material paper based work supported   national science foundation career award iri   consider newspaper company midnight re•  grant iis itr iis itr ns       ceived days orders newspaper stands        resourcebounded reasoning                                                                                            cities newpaper read company owns fleet             problem instances total performance    delivery trucks each cities each fleet needs           exists vector    vehicle routing solution company default    routing solution each fleet save costs improv•              ing tailoring days particular orders routing solu•                                                                              reasonable approach representing performance    tion individual fleet using anytime algorithm                                                                             profiles use piecewise linear performance profiles    setting solution quality anytime algorithm pro•                                                                            model performance profile arbitrarily closely    vides fleets problem instance savings    compared default routing solution                                used resourcebounded reasoning litera•                                                                            ture characterize performance anytime algorithms       assume company perfectly predict sav•   ings given fleets problem instance function            show metareasoning problem    deliberation time spent prove hardness metar         afpcomplete restriction reduce    easoning deterministic variant functions             knapsack problem    called deterministic performance profiles     each fleets problem instance performance pro•     file suppose performance profiles shown fig                                                                                 theorem  performanceprofiles npcomplete                                                                            each performance profile continuous piecewise                                                                              linear                                                                              proof problem mv nondctermin                                                                           istically generate polynomial time                                                                            need bother trying numbers greater given                                                                                 verify target value reached polyno•                                                                           mial time show nphardness reduce arbitrary                                                                            knapsack instance following performance     figure  performance profiles routing problems      maximum savings obtain  hours    deliberation time  instance spending  hours    instance   instance  hand    deliberate  hours obtain savings    spending  hours instance       definitions results    define metareasoning problem allocating de•   liberation problems according performance profiles     definition  performanceprofiles     given list performance profiles fi • • • fm   each nondecreasing function deliberation time   mapping nonnegative real numbers number de•  liberation steps target value asked   distribute deliberation steps         anytime algorithms performance differs in•          demonstrates weak npcompletencss knap•  stances each instance performance profile set•      sack weakly npcomplete pseudopolynomial   ting deterministic performance profiles reality anytime      time algorithms exist     algorithms performance instance predicted per•              additionally assumes each performance profile   fectly usually statistical performance profiles kept   concave metareasoning problem solvable polynomial   aggregate instances light question as•     time  returns deliberation tend diminish•  sumption different instances different performance pro•        ing usually case performance profile   files sophisticated deliberation control systems con•      algorithms setup phase beginning during   dition performance prediction features instance—and        improvement iterative improvement algorithms   necessary deliberation control fully normative  switch using different local search operators progress   research conducted conditioning performance         ceased using operator example swap reached   profiles instance features  results deliberation     local optimum tsp switch swap obtain gains   instance far                                    deliberation                                                                                                     resourcebounded reasoning                            solution      silver test positive probability                                                                   test takes  units time  test copper   performanceprofiles instance                copper test positive probability lif   hand suppose solution performance          copper test positive probability                                                                  test takes  units time                                                                    given probabilities tests turning positive un•                                                                der various circumstances use bayes rule com•                                                                pute expected utility each digging option given                                                                 lack test result instance letting event                                                                     utility doing similar analysis rep•                                                                resent problem trees shown fig  trees       performanceprofiles problem occurs natu•  rally subproblem metareasoning problems   complexity leads significant difficulties   metareasoning case unrealistic   assumption perfect predictability efficacy deliber•  ation hand remaining metareasoning   problems analyze complexity stems uncer•  tainty results deliberation provide      dynamically allocating evaluation effort                                                                 figure  tree representation action evaluation in•      options actions                                  stance   section study setting agent faced   multiple options actions eventually  ing root represents having test   choose agent use deliberation information left right leaf represents test having turned   gathering evaluate each action given limited time positive negative value each node expected   decide ones evaluate show hard   value digging site given information correspond•  restricted cases                                ing node values edges probabilities                                                                 test turning positive negative subse•   motivating example                                                                 quently use trees analyzing gather   consider autonomous robot looking precious metals  information instance  units time op•  choose three sites digging dig timal information gathering policy test   site site gold site silver site result positive test test omit   copper robot chooses dig gets  proof space constraint   utility  saving digging costs robot chooses dig   utility finding  finding gold  definitions    finding silver  finding copper  prior probability example actions eval•  gold site  finding silver site uate digging precious metal three locations    finding copper site           digging given results tests     general robot perform deliberation infor•  undertake given action executing   mation gathering actions evaluate alternative digging expected value hand know   actions metareasoning problem      results tests associate expected   simplicity exposition focus in•   value action taking additional expectation   formation gathering specifically robot perform outcomes tests follows drop   tests better evaluate likelihood precious word expected meaning talk•  metal each site limited time tests ing expected value given outcomes   tests following  test gold tests probabilistic process regarding expec•  gold test positive probability  tation relevance agent choose test   gold test positive probability  expectations outcomes tests   test takes  units time  test silver   presented model information   silver test positive probability  gathering planning use model planning       resourcebounded reasoning                                                                                            computational deliberation multiple actions takes evaluation step action gives maximal    case regard tests computational steps expected utility online evaluation control policies      agent evaluating action                  spend units effort end deliber•     proceed need formal model evaluation        ation process node tree utility    effort information gathering deliberation invested  max choose action    given action changes agents beliefs action   highest expected value    model generalize example case    multiple evaluation steps certain ac•   results    tion later show hardness                                                                  show severely restricted version    evaluation step action                                                                  problem nphard    definition  action evaluation tree tree                                                                  theorem  actionevaluation nphard      • root representing start evaluation       trees depth  branching factor         • each nonleafnode cost kwfor investing    leaf values         step evaluation effort point      • each edge parent node child node        probability transitioning        taking step evaluation effort      • each leaf node value      according definition each point evalua•  tion single action agents onlv choice   invest evaluation effort continue   evaluation reasonable model agent does   evaluation through deliberation algorithm   disposal general agent different   information gathering actions choose given point   evaluation able choose sev•  eral deliberation actions search control    section  discuss able choose   tests introduce drastic complexity evaluating   single thing section focus  vations constructed actionevaluation in•  complexities introduced having choose differ•    stance determine value action   ent actions invest evaluation effort          choosing action certainly optimal regardless                                                                  rest deliberation process second end      agent determine expected value action                                                                  deliberation process discovered value   given evaluation far using subtree action                                                                  action  trees depth  ei•  evaluation tree rooted node evaluation                                                                  ther discovered corresponding actions value   brought far value determined sub•                                                                  deliberation   tree propagating upwards leafs parent                                                                  case expected value action   set children                                                                   carefully set achieve pick      present metareasoning problem general       action  value  follows optimal deliberation   agent use online evaluation control policy  policy maximizes probability discovering   choices invest future evaluation effort de•  action value  consider test set pol•  pend evaluation results obtained far avoid  icy set actions policy evaluate   trivial complexity issues introduced fact   action turned value  probabil•  contingency strategy evaluation exponential size ity discovering action value  simply equal   merely ask action agent invest    probability actions set   evaluation step                                            value  case quality policy de•                                                                 termined test set observe optimal   definition  actionevaluation given ac•            action evaluates action    tion evaluation trees indexed  through corresponding   runs deliberation time action    different actions transition processes trees   independent additionally given integer         actionevaluation trivial    answer   asked online evaluation control poli•   yes possible step evaluation true   cies spend units effort exists uncertainty regard value action                                                                  case evaluation irrelevant        useful model necessary updating be• note using exponent does make reduction   liefs value action taking deliberation step exponential size length binary representation   computationally easy relative evaluation problem numbers exponent linear                                                                                       resourcebounded reasoning test set consider policy evaluating ac• hole simply walk away gap turns   tion  minimal cost gives strictly higher probability staircase robot descends gives utility   discovering action value  evaluating     turns hole robot jumps   action  simply replacing action   gives utility  discovering new floors interesting   test set action  possible improves pol•   robot walks away gives utility  matter   icy suppose solution knapsack          gap unfortunately attempting jump staircase   instance set canyon trying descend hole canyon                                                                  disastrous consequence destroying robot utility                  construct policy      follows agent determine certainty                                                                  gap walk away   test set evaluating   actions costs deliberation units proba•            order determine nature gap robot   bility actions having value  conduct various tests queries tests determine   probability exactly value  answers following questions  inside                                                                  building yes answer consistent answer                                                                  consistent   drop small item                                                                  gap hear hit ground yes answer consistent                            using previous observation                                                                  answer consistent     conclude optimal action action                                                                   walk gap yes answer consistent   test set order evaluate ac•                                                                 answer consistent   tions test set does matter optimal policy   evaluates action  hand suppose       assume multiple answers query consistent                                                                  true state gap distributions an•  solution knapsack instance consider                                                                  swers uniform independent note   policy  test set test set                                                                  queries set states consistent answers   expressed set   solution                 intersection sets consistent individual an•                                                                 swers set reduced element   knapsack instance follows robot knows state gap                                                                    suppose agent time run test   probability actions test set                                                                  maximize expected utility robot run test  be•  value                                          cause tests chance learning state                                                                  gap certain suppose agent time                hand                                                                  tests optimal test policy follows run test                                        observe                                                                   answer yes run test  second run                                                    follows                                                                  test  second true state  discovered                                                                  probability discovered probability   policy just evaluating action  strictly better                                                                  total expected utility starting test  test    optimal policy evaluates action                                                                   expected utility      proof general problem   interesting open question stronger hardness re•  sults obtained instance general  definitions   problem complete                                          define metareasoning problem agent                                                                  dynamically choose queries ask deliberation in•   dynamically choosing disambiguate                     formation gathering actions disambiguate       state                                                      state world illustrative example                                                                  information gathering actions model applies   setting agent       deliberation actions state disambiguation image   thing evaluate choose order deliberation processing auditory scene analysis sensor fusing   information gathering actions doing words   agent decide disambiguate state     definition  statedisambiguation given   show hard consider sig•                                                                                               possible world states  nificant result paper                                                                                                                                                            probability function    motivating example   consider autonomous robot discovered    situations equivalent agents                                                                 point view agents optimal course action   edge floor gap knows gap                                                                 utility consider situations   three things staircase  hole state note situations lead different answers   canyon assume uniform prior distribution queries example situation gap   robot like continue exploration   indoor staircase situation gap   gap three courses physical action available  outdoor staircase situations considered   robot attempt descent staircase attempt jump state different answers query inside       resourcebounded reasoning                                                                                           
