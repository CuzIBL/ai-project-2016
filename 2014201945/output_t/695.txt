            quest best form local consistency weighted csp                               javier larrosa                                     thomas schiex                        department software                  dept biometrie et intelligence artificielle                 universitat politecnica catalunya           institut national recherche agronomique                            barcelona spain                                    toulouse france                          larrosalsiupces                         thomasschiextoulouseinrafr                               abstract                               ai  combinatorial auctions sandholm  bioin                                                                formatics probabilistic reasoning pearl  larrosa        weighted csp wcsp framework soft                introduced ac refinement ac definition        constraint framework wide range appli•          wcsp definition provides stronger simple el•       cations paper consider problem           egant property maintained during search        maintaining local consistency during search          paper definitions dac fdac        solving wcsp refine notions direc•       strengthen extend binary wcsp defining        tional arc consistency dac directional         dac fdac properties define correspond•       arc consistency fdac introduced cooper             ing enforcing algorithms classical csp case         binary wcsp define algorithms en•         consider problem maintaining ac dac        force properties study complexities      fdac during search empirically compare algo•       consider algorithms maintain          rithms algorithms wide range applications        arc consistency ac dac fdac during search          allow nice integration hard soft constraints        efficiency algorithms empirically         common algorithmic framework        studied appears despite high theoreti•       cal cost strongest fdac property best                                                                   preliminaries        choice                                                                   csp                                                                  binary constraint satisfaction problem csp triple     introduction                                                                                                   set variables each   known arc consistency ac plays preemi•     variable finite domainof values   nent role efficient constraint solving years assigned ia denotes assignment value   csp framework augmented socalled soft               variable tuple assignment set   constraints possible express preferences   variables actually ordered set values assigned   solutions schiex et ai  bistarelli et ai   ordered set variables kth ele•  soft constraint frameworks associate costs tuples   ment value assigned kth element   goal complete assignment minimum com•        subset projection notedis   bined cost costs different constraints combined      set unary binary constraints unary constraint   domain dependent operator extending notion          subset containing permitted assignments vari•  ac soft constraint frameworks challenge    able binary constraint set pairs   years previous works conclude       containing permitted simultaneous assignments   extension direct long operator idem  set variables affected constraint called   potent schiex  proposed extension ac       scope tuple consistent satisfies constraints   deal nonidempotent definition         scope included  solution consistent   three nice properties enforced polynomial    complete assignment finding solution csp np  time ii process enforcing ac reveals infeasible val• complete problem task searching solution   ues pruned iii reduces existing defini• simplified enforcing arc consistency prune   tions idempotent operator case cooper   values participate solution   introduced directional arc consistency dac direc  tional arc consistency strictly monotonic                   weighted csps      weighted constraint satisfaction problems wcsp       valued csp semiring csp extend csp   known softconstraint framework nonidempotent     framework associating costs tuples schiex et al    operator provides general model ap•     bistarelli et ai  general costs specified   plications domains resource allocation cabon et    means socalled valuation structure defined triple       constraints                                                                                                                                                                                  figure  equivalent wcsps                                                                      strictly monotonic valuation structure finite costs can•                                                                 lead deletion practice branch bound                                                                 based solvers maintain upper bound ub maximum ac•                                                                 ceptable cost sofar lower bound lb optimal ex•                                                                 tension current assignment value pruning occurs                                                                  soon wcsp framework makes ele•                                                                 ments explicit solver uses valuation structure sub                                                                  subproblem provides lower bound                                                                     local consistencies wcsp                                                                  section define node arc directed arc di•                                                                 rected arc consistencies node arc consistencies                                                                  definitions arc equivalent nc ac definitions                                                                  larrosa  dac fdac starred  def•                                                                 initions refine definitions cooper  wcsp                                                                  case using node consistency sequel as•     tuple  consistent usual task inter•           sume set variables totally ordered     est complete consistent assignment minimum    cost nphard observe wcsp      reduces classical csp addition sk idempotent iff      strictly monotonic iff wcsp defined    variables said equivalent define    cost distribution complete assignments      simplicity exposition assume con•   straint different scope moment assume    constraints implemented tables pos•   sible consult modify entries loss    generality proof theorem     example  figure la shows wcsp valuation struc•   ture set costs        three variables values     binary constraints cxz cyz non trivial    unary constraints cx cz unary costs depicted  side domain value binary costs depicted labelled    edges connecting corresponding pair values default    cost zero costs shown optimal solution       cost       definition wcsp larrosa     differs usual definitions schiex etal  bistarelli   et al  restrict wcsp case                                                                                                             constraints    strong relation directional arc consis­  tency minibuckets dechter easily   shown given wcsp defined valuation struc­  ture oo variable ordering lower bound induced   minibuckets involving  variables   lower bound induced cΦ problem   directional arc consistent minibucket com­  putation provides lower bound dac enforcing   provides lower bound directional arc consistent   equivalent problem work compute lower   bound captured problem offers opportu­  nity perform incremental updates lower bound      enforcing arc consistencies   previous node arc consistency properties en­  forced applying basic operations correspond­  ing property satisfied pruning nodeinconsistent values   forcing supports variables nc forcing support   nodeconsistent values ac pointed schiex    larrosa  value resp variable supports forced   sending costs binary resp unary constraints   unary constraints resp cΦ support forced     sending costs unary constraint cj cij   sending cost  let review   concepts introducing basic algorithms                          costs   subtraction defined       projection cost units cij value   flow cost units binary constraint unary   cost cia embodied procedure        stronger local property require support   sides suffers fact wcsp dont   equivalent wcsp satisfies property       constraints                                                                                                                                                                          procedure dac designed used en•                                                                 force dac conjunction ac enforce fdac                                                                  value pruned dac inserts vari•                                                                 able inform ac deletion dac uses                                                                  priority queue contains variables                                                                  unary cost increased case                                                                  values lower variables lost support new                                                                  supports need main loop iterates                                                                  each iteration highest variable fetched      new basic operation needed enforce fdac con•                                                                 node inconsistent values unary cost   sists forcing supports values variable                                                                  lower bound increments removed using prunevar   side constraint  shown example                             ij                                   pruned variables inserted new supports   extending unary costs                                                           ij        sought lower variable connected finally   projecting  variable  extending                     ij                                         variables processed enforce nc lost   unary costs destroy supports  consider                                               ij                 during process lower bound increments pruned   ac problem ld extend  cost units za                                                                  variables inserted fdac simply enforces ac     instead  example project       yz                                                         dac simultaneously enforcement ac empties   problem lf lost supports                                                                  add variables enforcement dac   order smoothly integrate dac ac enforcing                                                                  empties add variables fdac achieved   obtain fdac enforcing obtain supports                                                                  simultaneously correction   variable cij preserving supports values  algorithms follows theorem    cij obtained extending minimum cost   cj required subsequent projection ci cor•  rectness algorithms based following theorem                                                                                                             constraints                                                                experimental results                                                                 section perform empirical evaluation ef•                                                                fect maintaining various forms arc consistency during                                                                 search consider depthfirst search maintaining                                                                 nc ac dac fdac yields algorithms                                                                 mnc mac mdac mfdac comparison                                                                 include results obtained pfcrdac larrosa et al                                                                   normally considered reference algorithm                                                                    variable selection use domdeg heuristic                                                                 each variable computes ratio domainsize di•                                                                vided future degree degree considering future                                                                 variables selects variable smallest                                                                 value value selection consider values increasing                                                                 order unary cost ci variable ordering used direc•                                                                tional arc consistencies lexicographic                                                                    consider maxcsp problem goal                                                                 complete assignment maximum number                                                                 satisfied constraints overconstrained csr   priority queue variable extracted easily formulated wcsr experiment bi•  variables processed    nary random problems using wellknown fourparameters   findfullsupportac increase non zero unary costs   model smith  random csp class defined   variables strictly lower reintroduced nde number variables do•  each variable added queue main size number binary constraints graph   queue implemented array booleans   connectivity number forbidden tuples each   pointer highest true element adding new el•     constraint tightness pairs constrained variables   ements means updating pointer pop operation     forbidden tuples randomly selected using uniform   consists returning value pointer searching  distribution samples  instances report aver•                                                                age values experiments performed  mhz                                                                 pentium iii                                                                    fixed values increasing tightness                                                                 problems solved instantly crossover                                                                 point reached problems overconstrained                                                                 harder solve denote t° lowest tightness                                                                 instance sample overconstrained based                                                                 define different categories problems                                                                     combining different types obtain  different classes                                                                 each denoted pair characters slstdl                                                                 dt each class domain size set  num•  proof regarding space difference dac    ber variables used varying parameter figure    proof applies regarding time variable      shows average cpu time used sl st dl dt   enters value deleted each    left right each plot algorithms listed   variable added   times initial• increasing order efficiency   ization value deletion lines    cases search effort grow exponentially       constraints                                                                                                          
