             hierarchical heuristic forward search stochastic domains                        nicolas meuleau∗                             ronen brafman                 nasa ames research center                  department science                        mail stop                           bengurion university              moffet field ca  usa                  beersheva  israel            nmeuleauemailarcnasagov                       brafmancsbguacil                        abstract                          ments used different locations instance                                                        warmedup rover limited resource      mdps exhibit hierarchical structure each plan execution phase wisely allocate      agent needs perform various subtasks resources different tasks problem instances      coupled small subset variables set tasks achievable jointly agent dy      taining notably shared resources previous work namically select subset achievable goals function      shown hierarchical structure  uncertain events outcome      exploited solving submdps represent    problems called oversubscribed planning      ing different subtasks different calling problems natural twolevel hierarchical struc      texts root mdp responsible sequencing  ture meuleau et al  lower level      synchronizing subtasks instead huge tasks conducting experiments each site higher      mdp representing problem im   level task selecting sequencing coor      portant idea used efﬁcient algorithms solv dinating subtasks planetary rover domain      ingﬂatmdpssuchaslaoandlrtdpis              includes actions tracking targets navigating      exploit reachability information admissi locations warmingup instruments hierarchical      ble heuristics order accelerate search structure obvious problem description      pruning states reached given recognized automatically using factoring methods      starting state optimal policy pa amir englehardt       combine ideas develop variant                                                          potential beneﬁt hierarchical decomposition clear      ao algorithm performing forward heuris                                                        able solve large problem solving num      tic search hierarchical models algorithm                                                        ber smaller subproblems potentially gaining exponen      shows great performance improvements hier                                                        tial speedup unfortunately existence hierarchi      archical approaches using standard mdp solvers                                                        cal decomposition does imply existence opti      value iteration respect                                                        mal decomposable policy settle certain      ao applied ﬂat representation prob                                                        restricted forms optimality hierarchical optimal      lem presents general new method                                                        ity andre russell  consider domains      accelerating ao forward search al                                                        compact optimal policies exist satisfy      gorithms substantial performance gains                                                        reset assumption meuleau et al       obtained algorithms partitioning set      search nodes solving subset nodes com paper formulates hierarchical forward heuristic      pletely propagating results sub search algorithm andor search spaces refer      sets                                             hierarchicalao hiao algorithm exploits                                                        hierarchical partition domain speed standard ao    decisiontheoretic planning problems agent search nilsson  applied ao  needs perform various subtasks coupled applied problems represented  small subset variables good example acyclic andor graph provided hierarchical parti                                                        tion search space deﬁned mdps  main application domain planetary exploration                   main agent autonomous rover gather scientiﬁc search problem formal guar  data perform experiments different locations antee result actual performance improvements  formation gathering experiment running task each site simulations rover domain show great  pretty selfcontained independent potential oversubscribed planning problems work  sites issues use shared resources  time energy memory state instru like standard ao hiao designed work prob                                                        lems contain loops similar extension hansen    ∗qss group                                     zilberstein  required handle problems                                                    ijcai                                                    required show relevance approach bypassing edges  local solution reuse three  general setting paper outlines directions properties emerge naturally attempts search hi  beneﬁt wide variety application domains erarchically used given arbitrary parti  forward search algorithms                 tioning state space application    reason forward heuristic search beneﬁ oversubscription planning formulation abstract  cial hierarchical mdps pretty obvious terpretation evaluation rover domain  known beneﬁt using reachability information admis main contributions paper  sible heuristic efﬁcient algorithms solving ﬂat section explain model hierarchical  mdps lao hansen zilberstein  mdps review ao algorithm explain  lrtdp barto ıet al  bonet geffner  ac new hiao algorithm show applied  celerate search pruning states reached oversubscribed planning problems finally  given starting state optimal policy empirical evaluation hiao conclude  beneﬁt expected hierarchical representa  tion problem hierarchical algorithms abort  hierarchical mdps  update meuleau et al  resolve similar sub  problems different calling contexts implementations markov decision process mdp puterman   based classical mdp solvers value iteration pol fourtuple s rwheres set states set  icy iteration ignore initial state consider actions  × × →   transition func                                                        tion speciﬁes states s ∈ action  possible contexts forward search algorithms consider                                           reachable contexts good heuristic function ∈ probability making transition  subset                                      executed  ×a×s → reward function                                                        augment description concrete initial state    interesting reasons hiao outper init                               init  form standard heuristic search ﬂatdomains imple ∈ obtaining quintuple s inthispa  mented standard ao ﬁrst reason focus boundedhorizon mdps length  order efﬁciency value propagation step each trajectory bounded ﬁnite number use  known costliest ao hiao embodies undiscounted expected reward criterion  lazy approach value updates update work concen shall concentrate factored mdps                                                        form x sinitherex set state variables  trated particular subdomain each time work      init  domains postponed value needed variables induce    second beneﬁt hierarchical partitioning state space consisting cartesian product  domain possibility use macroconnectorswhen mains simplify notations assume variables  optimal solution subset states known boolean ﬂuents typically assumed  represented macroconnector similar tempo transition function described compact man  rally abstract actions macroactions used reinforce ner utilizes special form state space  ment learning sutton et al  macroconnectors dynamic bayes net dean kanazawa  proba  used solving subsets states accelerate bilistic strips rules hanks mcdermott inthis  traverse graph                            paper commit concrete action description lan    beneﬁt forward heuristic search hierarchi guage expect variablebased  cal representation possibility using known solution methods assume easy identify relevant  subtask seed algorithm charge solving sim variables respect action ∈ thisistheset  ilar subtasks apparent later dynamics variables value change executed  subproblem inﬂuenced calling context variables affect probability  inﬂuences value nodes optimal variables change value immediate reward  policy search space structure received executing  reuse expanded solutions different calling context using hierarchical decompositions mdp consists                                                        set smaller factored mdps deﬁnition notion  starting points farther expansion                                            required likely beneﬁt work projection plays central role let    finally decomposed domain believe subset variables projection                                                        x wrt action ∈ deﬁned does affect  formulate accurate heuristic functions ap                     propriate each subdomains simple example value variables xx transition probabilities  assessment value subdomain reward depend value variables                                                        case actual projection obtained ﬁxing  new calling contexts simply use value computed                                     similar contexts sophisticated example arbitrary value variables                                                            formally deﬁne  hierarchical decomposition  use heuristics speciﬁcally designed particular sub                            init  domains                                              factored mdp      x  asatreeof    paper focus explaining testing ﬁrst factored mdps mh  mmnwheremi                                                                         init  three points provide abstract quite gen xiai tirisi  each mi just factored mdp                                                                                            eral interpretation use hierarchical decomposi difference set actions ai contains number  tion ao terms  propagation order  extra level special control actions signify passing control                                                    ijcai                                                                                                                                                  init                                                          initialize explicit graph start state                     ˜                                           init                                                    mark   open                 atstart    navigate               greedy solution graph contains open                 atwaypoint trackstart                                 μ                           nodes                                                                                             μ                              open node greedy graph                                                            unmark open                                                                                    ¯                                          expand    expand greedy graph                            x¯                                  resources                       pdate       ipr     atr                                                update state values mark best ac                            atr      ipr            tions     corer   trackedr   trackedr                doner               corer       return greedy solution graph   takepicturer           doner               ˜                          takepicturer     abort                   ˜                                   algorithm  standard ao                                        abort              doneipr                                doneipr              coredr                                coredr                 each ∈                                                                                                                                                   each ∈                                                                                                                                     ∈ present                                                                                                                                       add                                                                       figure  decomposition simple rover problem root     terminal state                                                                         process navigates rocks              schedules corresponding subprocesses ip                                         ˜                                 shs  stands “instrument placement” xi set private                          ¯                                               s  variables process iandxi separation sub     mark   open  task root process                             add connector ·                                                                      algorithm  expands  parent children actions encode                                           hierarchy speciﬁcally xi ⊆ ai union  ao algorithm  subset ai ⊆ types control ao nilsson  generalization andor  actions μj corresponds passing control child process graphs applied problem gen  mjandabort signiﬁes passing control par erating policy mdp given initial state assuming  ent process ti projection xi ti loops transition graph hansen zilber                                      sinit  welldeﬁned depends only stein  mdps node corresponds choice             sinit                            projection  addition     action state node corresponds   ai  ai ∩ aj  ∅   jandwhen set possible states resulting each choice  ∈ xi ∩xj ∈ xk mk possible nodes annotated probability  path mi mj known running ao maintains basic structures explicit graph  intersection property meuleau et al  greedy graph explicit graph simply depicts por  detailed description model decomposition tion search space expanded far  mh obtained automatically straightforward greedy graph subgraph explicit graph repre  extension methods described amir englehardt sents nodes reachable greedy policy   deterministic planning domains             obtain greedy graph needs perform dynamic pro    illustration fig  describes decomposition gramming explicit graph propagating values  simple planetary rover domain three subdomains leaf nodes using heuristic values root  toplevel domain control position node value node expected value  rover choice subtask perform children value node maximum  μi actions represent subtasks value children note choice yielded  associated experimenting rocks maximum generate greedy graph simply  shares variables children resource level following choices starting root node pseudo  variable shared                          code ao described algorithms                                                             admissible heuristic function used ao                                                        value each node decrease each iteration                                                        update value node outside greedy graph    hierarchical ao                                   greedy graph affected update                                                        reduce value node choice  start short review ao algorithm suboptimal optimal consequently new node  show hierarchical partition search nodes values need propagated edges marked optimal  exploited accelerate algorithm provide  pseudocode new general algorithm called hierarchical rewardmaximization framework admissible heuristic  ao hiao                                          heuristic underestimates value state                                                    ijcai                                                      create set containing state           greedy solution graph starting contains    repeat                                                open nodes si                                                                   remove  state descendent   open node greedy graph starting               occurs                                    si                                                                          set smax a∈a                                unmark open                                                              s                 s∈g rs        expand         mark connector associated best action  mark nodes created previous step belong                 optimal                                       child si outdated                                                                                            decreased previous step increase  hierarchicalupdatesis                                                                       algorithm  function solvesis       add parents connectors marked         optimal                                    delaying propagation new values main prin                                                        ciple implemented hiao delay propagation                algorithm  updates                                                        new node values states belonging different                                                        subsets let ﬁrst consider delaying updates                                             init    initialize explicit graph start state  useful suppose expanded node           init    mark  open                                  node following expansion value                init    solvess                                      changed standard ao following change value                                           init    return greedy solution graph starting   propagate information upwards marked                                                        edges repeat process vhowever             algorithm  hierarchical ao             quite possible common ancestors                                                        update ancestors twice                                                        update important inﬂuences choice  denoting optimal choice state                                                        node expand update    cases expensive parts ao  delayed save repeated update shared  update stage propagate value changes cestors hiao tries exploit second case assuming  explicit graph alg   computation fringethat happens ﬁrst case  set open nodes greedy graph line  alg  general scheme propose delaying updates  show partition states expanded                                                        follows associate each subset si set nodes  ao exploited accelerate operations                                                        date zi similar set used alg  particular                                                        point algorithm single subset nodes focus    hiao algorithm                              performs standard ao operations inside sub                                                        set state ∈si expanded needs  assume state space partitioned sub                                                             evaluated insert enter loop prop  sets       furthermore assume subsets agate value graph emptying reﬁlling  organized hierarchy form tree                   sinit                                set standard ao alg  each time   starting state belongs root subset denoted new value needs propagated state s belong       state transitions possible states ing subset sj    sj necessarily parent  subsets states belonging subsets                                                                  child si added zj zi line   parent choices motivated alg  excluded loop works  hierarchical mdp framework presented zi propagation limited subset siand  child subset represents subprocess called nodes need updated belong  current subsetprocess use subset sj just stored zj reevaluated  term “subprocess” designate child subset new value propagated  formalism general applied instantiation                                                          nodes sj   updated  ao hierarchy nodes deﬁned                                                        swer depends hierarchical relation sj si    hiao algorithm presented alg    al sj parent si states  gorithm uses function expand standard zj during solution si updated algorithm  ao alg  basic principle algorithm fol moves focus si parent subset sjifsj  lowing each time optimal action state leads child si states zj updated latest pos  child subset words each time appears optimal sible time want evaluate state outside  subprocess current state recursively sj lead sj optimal action  hiao algorithm solve child subset completely happen calling subprocess sj optimal  continuing solution current level explain cision states visited algorithm later  simple mechanism beneﬁt algorithm case save work updating states sj                                                        practice implemented through use outdated    algorithm generalized handle hierarchies repre markers explained  sented directed acyclic graph                     basic principle hiao algorithm                                                    ijcai                                                      zi  zi ∪s                                    deleted line  alg  markers entry                                                                         zi   ∅                                  nodes kept later update state outside                                                                                   remove zi state descendent sj lead ∈sj outdated marker                                                                                                    occurs zi                             indicate greedy graph sj needs                                                                                                         set vs maxa∈a                             updated new node added                                                     s∈g rs      mean time       a∗s optimal action sandmarkthe       associated connector optimal                 convergence  long problem contains loop hi                      ∗           executing  lead states erarchical ao guaranteed terminate ﬁnite time       si marked outdated     return optimal solution       each child sj si                                     ∗            theorem   heuristic admissible hiao          each ∈sj                                                         turns optimal policy ﬁnite time            marked outdated                                  unmark outdated                     hiao efﬁcient particularly number            hierarchicalupdatesj    null          connections subsets large claim                                   solvesjs                              case oversubscription planning state par                      set vs maxa∈a                           tition induced hierarchy efﬁcient allows lever                                                         s∈g rs    aging general principle presented simulation         a∗s optimal action sandmarkthe results presented paper support claim         associated connector optimal                 present acceleration techniques                  decreased previous step increase implemented hiao leverage hier                                                   archy used pseudocode alg                                                each state parent         nector marked optimal                                                      optimizing algorithm  hiao algorithm pre         ∈si                               sented exhibits following inefﬁciency ac                                                                                        add zi                              tion leading state ∈sj appears optimal state                                                ∈si    algorithm solve completely                                                                                            sj    subset containing              sj                                                                                    subproblem  starting returning state            add zj                              process solving sj  qvalue action           sj child si               decrease happen                     s                                 mark    predecessors solving sj does appear optimal anymore                connectors marked optimalasoutdated algorithm presented detect single                                                                               sj    algorithm  function hierarchicalupdatesis     mindedly continue solving greedy policy starting                                                        s known highly inefﬁcient                                                          issue easily addressed additional hy                                                        pothesis satisﬁed hierarchical planning context  updating node si possibly                                               described easily relaxed deal  lead node child subset   optimal general case assume each action does  action know accuracy set optimal change partition subset case hierarchical  decisions leads terminal states                                   ∈                                                     planning holds true primitive actions   node marked outdated greedy leads certainty single state belonging dif  subgraph starting node chance ac                                                        ferent subset case control passing actions μi  curate complete suppose algorithm currently abort modify algorithm adding  working subset si needs propagate new value               τ                   ss                                                  threshold parameter function solve   state belonging child explained value falls τ during solution sthe  update delayed just added zj                                                    function exits initial solve line  alg   line  alg  addition nodes “above” threshold parameter set −∞ optimization  greedy graph marked outdated line   pursued end later calls line  alg   alg  later want evaluate node outside sj                s ∈s             s                    performed following way computing value  lead state thevalueof accurate state lines   alg  record qvalue  delayed propagation new values sjif                   s                                   best action does change partition subset  case marked outdated primitive action qvalue best action induce  sequently operations performed  purge set                                                    change subset controlpassing action qvalue   update nodes need reevaluated second best controlpassing action controlpassing  using recursive hierarchicalupdate line  action appears optimal enter loop lines    alg  change greedy policy sj                                        entry nodes sj  including node   greedy                                                           straightforward improvement algorithm delete  graph starting sj updated through solve outdated marker nodes sj belonging greedy graph                                                                  line  alg  outdated marker starting recomputing graph                                                    ijcai                                                    
