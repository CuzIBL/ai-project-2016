                                novel   local   search   algorithm                        traveling    salesman    problem      exploits   backbones                                            weixiong  zhang    moshe  looks                               department   science  engineering                                     washington   university saint louis                                         saint louis mo    usa                                         email  zhangcsewustledu                          abstract                          ls today best ls algorithms tsp vari                                                          ants include chained iterated lk algorithms        present investigate new method      algorithms provide highquality near opti       traveling salesman problem tsp incorpo     mal solutions problems thousand cities        rates backbone information known     nontrivial ﬁnd solutions better lin       widely applied linkernighan lk local search kernighan family nonetheless improving algorithms       family algorithms problem consider  practical importance small improvements       heuristic backbone information obtained substantial ﬁnancial impacts applications man       develop methods make biased local pertur   ufacturing selected tsp tours need routinely tra       bations lk algorithm variants ex versed       ploiting heuristic backbone information improve                                                            major deviation modern ls variants lk       efﬁcacy present extensive experimental                                                          algorithm use starting tours closely related       sults using large instances tsp challenge previous local minimum best tour far       suite realworld instances tsplib showing                                                          independently generated  starting tours       signiﬁcant improvement new method                                                          typically generated perturbations ﬁnal tours       provide original algorithms              previous runs using neighborhood structures different                                                          ones used main procedure instance doublebridge     introduction                                        opt moves used extensively purpose   given set cities distances trav intuition using chained starting tours  eling salesman problem tsp ﬁnd complete minimal erated ls highquality local minima tend reside  cost tour visiting each city tsp wellknown small vicinity neighborhood structure  nphard problem realworld applications effective efﬁcient search better lo  jobshop scheduling vlsi routing  tsp cal minimum known intuition sup  served touchstone new problemsolving strategies ported observation local minima good ls  algorithms wellknown combinatorial algorithms method usually share common partial structures    ﬁrst developed tsp including linkernighan  observations led “big valley” hy  local search algorithm  paper consider sym pothesis  suggests highquality local minima  metric tsp distance city tend edges common forming single clus  distance opposite direction         ter optimal tours better local minimum    local search ls algorithms shown effec tends common edges shared optimal  tive tsp ls algorithms tsp deﬁnes lution worse local minimum      neighborhood structure tours tour ¡ neigh iterated ls methods common structures lo                      ¡                    ¡¤¢  bor tour ¡£¢ changed  local   cal minima exploited ways  perturbation exchanging pair opt triplet ﬁrst reduction  ﬁrst collects small set local  opt edges cities   starting com minima locks edges appearing  plete tour ls repeatedly improves current tour subsequent runs method effects  best neighbors tour called local min speed search problem smaller pro  imum  process applied multiple times using dif vides means directing search set  ferent initial tours ls algorithms guaran indistinguishable tours   lin kernighan  tee optimality best solution ported experimental results instances  cities using  routinely applied practice best methods reduction second recent way exploit common  tsp best known ls algorithm tsp structures local minima called tour merging  given  linkernighan lk algorithm  inception three set local minima method constructs graph containing  decades ago classic algorithm inspired research union edges thanks large number shared                                                          edges local minima resulting graph sparse     ¥ research supported nsf grant eia  optimal tour sparse graph uncovered asan approximate solution optimal pass problem inspired fact ap  cent algorithm maximum satisﬁability maxsat ex proximation algorithms tsp lk algorithm  plicitly exploited information cluster local minima variants particular superior performance  incorporated walksat algorithm  resulting reach local minima small  signiﬁcant performance improvement diverse large max centage global optimum common structures  sat  problems  current research inspired shared global optimal solution discussed   previous results                                        treat local minima op    research motivated recent advances timal compute pseudobackbone frequencies approximate  characterizing typical case features combinatorial problems true backbone frequencies general approach  phase transitions backbones   problem backbone guided local search bgls  fundamental importance practical utilize deﬁne pseudobackbone frequency edge      inherent problem information phase transitions frequency appearances local minima sampled                                                                                                         ¡      backbones search algorithm cope problem difﬁ   set local minima given edge ap                                                                                                                 ¡      culty research line limited pub pears subset  £¢  pseudobackbone frequency                                                                        ¥¢¦¤ §¨¤  ©¤  lished work utilizing backbone information local search simply ¤   sat maxsat   previously published results local minima use affect quality  clude exploiting phase transitions tree search problems pseudobackbone frequencies ideally want local min  approximation algorithm  applying heuristic backbone ima unbiased sample highquality approximate  information systematic search sat          solutions leading factor reaching ideal    new method explicitly exploits structure local set initial tours distinct starting tours  minima ls algorithms possible backbone infor different ﬁnal tours generally  mation embedded local minima improve perfor local minima reached greedily generated starting  mance algorithm backbone variable tsp tours superior reached random starting tours  refers edge cities appears optimal pseudobackbone constructed generally leads  tsp  tours unlike reduction tour merging methods better overall performance  new heuristic does freeze common edges lo pseudobackbone information incorporated ls al  cal minima subsequent searches applies estimated gorithms “bias” search ls moves evaluated  backbone information guide local search region difference total cost edges removed  search space likely better approximate tour total cost edges added  hopefully optimal solutions speciﬁcally treat local value positive taken backbone guided search  minima local search optimal solutions make biased moves different ways uses  use edge appearance frequencies estimate probabil pseudobackbone frequencies combines pseudo      ities backbone variables apply estimated backbone frequencies distances cities let                                                                 bone probabilities alter perturbations local set backbone edges tsp   set      search algorithm variable having higher backbone local minima pseudobackbone frequencies                                                                                 probability likely swapped current computed let   candidate set edges      tour variable having smaller backbone probability removed added respectively step searching                                                                                                                                                                     conversely likely swapped        opt prefer replace   smaller        paper organized follows section  possibility having backbone variables         general idea backboneguided local search tsp assume edges independent each prefer                                                                                                                                                                            ¦  ¤  ¦        section  discuss backboneguided lk algo replace                                                                                                                                                                                                                                                                                                           ¤                                                                     rithms present experimental results section  dis ¤        backbone frequency edge                                                                                                                                                               cuss related work section  conclude section    computed set local minima  method                                                          shown effective maximum satisﬁability      backbone   guided   local search                      unfortunately local search based exclusively local  backbone variables tsp known pro turbations using merely pseudobackbone frequencies  vide useful clue edges cities effective tsp possible factor contributing      swapped during local search edge discrepancy tsp maxsat differ                                                                                                         backbone appears optimal solutions obviously ent sizes search spaces tsp                                                                                      ¤a§  edge swapped included cur states search space ¤ num      rent tour extend concept backbone ber edges  city tsp states embedded  backbone frequency edge percentage op constraint structure example taking edge      timal solutions edge means backbone preventing edges taken comparison                                                                                                       edge backbone frequency edge does search space maxsat  states boolean  appear optimal solutions backbone frequency variables estimated backbone frequencies  zero backbone frequency edge reliable tsp maxsat deﬁciency  dicator edge swapped local perturbations based purely pseudobackbone frequen  current tour exploited cies indicates actual intercity distances  heuristic selecting edges local search     ignored tsp constitutes main differ    unfortunately exact backbone frequencies hard come ences backboneguided local search tsp  solving problem exactly idea maxsat  lk algorithm moves evaluated summing impossible ignore potential  opts involving  costs edges removed current tour changed cities moving successive rounds  subtracting sum costs edges added ilk single search method solution  evaluation principle applied backbone guided alternate bglk regular lk higher  ls cost computed differently instead taking level granularity search mechanisms em          cost given edge distance cities    ployed “fails” point begin employing                          ¤£   taken  ¢¡    pseudobackbone alternate mechanism “fails” switch  frequency edge cost edge decrease original alternation repeats context  linearly proportion pseudobackbone frequency deﬁned failure going through  rounds restarts optimiza      extreme cases edges pseudobackbone tion ﬁnding improved tour experiments                                                                                                ¦¥                                        ¨§§¦©¥     §      original costs £  edges local minima set   number cities                                   costs set zero £      method used results improved  experimental evaluation   carrying regular lk search using original dis carried sets experiments study differ  tances local minima biased search ent ways applying pseudobackbone information bgls  effective biased search actually searches new experiments used random instances tsp  tsp instance created original apply challenge suite  includes problem classes uniform  ing “pseudobackbone transform” edge weights local euclidean uniform clustered euclidean clustered dis  minima new instance generally correspond tance matrix matrix used large instances  local minima original continued search origi tsplib   nal graph improve results biased search compared bglk ibglk lk ilk  reached local minimum                                reduction method  search space smoothing    furthermore pseudobackbone information em   method  smoothing method related  ployed generate starting tours known effec modiﬁes distances tsp instances attempt make      tiveness speed local search improved using easier local search eventually reach local minima                                                                                                ¢                                                                                                        ¤       ¤       greedy starting tours  greedy tour construction begins higher quality uses ﬁxed formula                                                                                          ¢                                                                                                   randomly picking starting city adding shortest transform distance    average distance          edge exiting city tour edges greedily original distances  takes series decreasing                                                                                  added onebyone tour complete mod values typically ¡¡¡ help slowly ini  ify process naturally utilize pseudobackbone tially “smooth” instance distances look similar  redeﬁning “best” edge terms pseudobackbone actual problem implemented  transformed weights original weights method lk algorithm test  gives greedy pseudobackbone tour generation heuristic particular version lkbased algorithms used     backbone   guided   lk   ilk                    implemented provided johnson mcgeoch                                                          scribed analyzed  leave details im  applying ideas considerations lk                                                          plementation original description simply pointing  backbone guided lk algorithm bglk similar lk                                                          tests carried default settings  bglk  runs cycles each starts new start                                                          implementation length neighbor lists  ing tour reaches local minimum different lk                                                          levels search don’tlook bits level tree tour  bglk   phases ﬁrst learning phase runs                                                          representation incorporated reduction method  ﬁxed number iterations original lk random start                                                          space smoothing method lk generate variants  ing tours local minima runs used com                                                          followed johnson mcgeoch  conﬁguring      pute pseudobackbone frequencies second backbone                                                                                                                                   ¥§      §                                                          ilk allowing ﬂips   problem  guided improvement phase biased opts utilized                                                          size baseline ilk algorithm abbreviated ilk  addition second phase biased starting tours                                                          run addition used different conﬁgurations ilk      used improve local minima speed search                                                                                              ©§                                                          experiments best ﬁve runs  iterations  experiments setting aside  total                                                          ilk random restarts named ilkruns  runs learning generally effective                                                            best runs § iterations called ilk     issues dealt combine pseudo                                                          runs conﬁgured ibglk follows ﬁrst runs  rounds  backbone utilization ilk iterated lk algorithm                                                          ilk each starts random tour allowed      deriving iterative bglk ibglk pseudobackbone                                                              § ¥                                                          §    iterations executes  rounds ilk biased  constructed “unbiased samples” local minima                                                          moves biased greedy initial tours each      each local minimum ilk typically differs                                                                      § ¥                                                          allocated §  iterations algorithms used total  small number edges progenitor sampling                                                          number ﬂips relatively fair comparison  local minima chained process biased                                                            experiments run   ghz amd ath  averaged backbone deal                                                          elon machines  gigabytes memory runtimes  construct backbone experiments  indepen                                                          normalized  mhz alpha described   dent rounds restarts ilk each allowed                                                          results previous results directly compared  smaller number iterations  total number  iterations issue like follow each  tsp challenge suite  round bglk  round regular search using orig experimentally validate claim bgls allows local  inal distances bglk uses “weighted” costs search methods reach better local minima using problem                    nk     nk                           nk     nk       opti    —      —   —     —    —     —            optimal  —    —    —    —    —    —       lk              ilkrun             redu          ilkrun  —   —     —     —       smoo    —      —     —      —           ilkrun  —  —     —     —       bglk            ibglk                opti    —      —   —     —    —     —            optimal  —    —    —    —    —    —       lk           ilkrun             redu         ilkrun  —  —  —     —       smoo    —      —     —      —           ilkrun  —  —     —     —       bglk         ibglk               opti    —      —     —    —     —            optimal  —    —     —    —    —       lk         — —           ilkrun       — —     redu       — —         ilkrun  —   —     —    —    —       smoo    —      —     —    —     —           ilkrun  —  —     —    —    —       bglk       — —            ibglk        — —    table  comparison lk reduction smoothing bglk table  comparison ilk ilkrun variations ilk  problems challenge suite uniform clus run ilkrun ibglk problems  tered matrix problem instances numbers challenge suite legend interpretation table  tour costs heldkarp bounds  normalized cpu table   times seconds parentheses                                                          improve tour quality ibglk’s performance appears  instances challenge suite examine results main constant  relative heldkarp bound  different perspectives                       problem size increases ilk’s performance degrades    ﬁrst test compared bglk lk lk ibglk runs longer ilk extra time  reduction lk search space smoothing lk algo needed construct apply pseudobackbone  rithm  runs reduction method uses initial prob head exceeds  ilk’s runtime appears  ing stage run lk followed run lk ibglk’s ilk’s runtimes asymptotically close each      duction smoothing method  runs total each clustered problem class ibglk ilk vari                                ¡¡¡    runs lk ﬁve times            algorithms ations’ performances compatible inter  used greedy initial tours total  runs bglk estingly ibglk actually runs faster ilk  executes initial run lk using random starting tours clustered instances instance class ibgls’s lack  learn pseudobackbone  runs lk biased signiﬁcant improvement ilk attributed fact      moves  biased initial tours sizes § problem ilk effective close optimum      stances     increased fac little room improvement distance matrix class           ¡         ¥  tor   following scheme proposed used  similar bglk versus lk ibglk signiﬁcantly superior  each problem class size  random problem instances ilk each individual instances different sizes      used each algorithm table  shows averaged reduces average tour costs  largest                                                                   ¥  ¥ ¥¥  sults comparison percent heldkarp bounds  §     instances tested addition ilk  optimal tours listed known                     variants ilkrun fastest running times    shown reduction smoothing methods pro variants  slower  vide modest improvements lk certain instance classes experiment considered relatively small  sizes respectively worst algorithms stances  cities compared local minima  tested euclidean clustered euclidean classes lk ilk ibglk optimal solutions used  contrast bglk consistently superior outperforming  instances each problem classes challenge  three methods instance classes sizes suite each instances each algorithm averaged  improvement bglk algorithms varies  three runs different random seeds result shows   largest problem instances classes note ibglk generally produces solutions higher quality aver  average running time bglk twice age interestingly powerful search methods  time lk interestingly bglk actually ran faster produce better diverse solutions quanti  lk  instances presumably faster focus ﬁed standard deviations hamming distances  promising areas note reduction method’s run tween structures local minima optimal solutions  ning times signiﬁcantly il smooth data shown figure  graphically shows relative perfor  ing method’s runtimes essentially identical lk’s mances ilk ibglk individual instances test    second experiment compared ibglk   indicating ibglk favorable ilk prob  ilk ilkrun variants ilkruns ilk lem instances  runs used problem instances ﬁrst exper additional insight gained inspection  iment computed results way exper anytime behavior algorithms shown figure   iment results shown table  adopted bglk’s anytime behavior remarkably different  reporting scheme table  shown ilk lk variants begin lk outpaces bglk  variations provide improvement baseline lk run greedy starting tours bglk  ilk ibglk able push signiﬁcantly closer opti run random tours construct reliable pseudo  mal ilk cases ilk does perform backbone section  bglk begins using  uniform euclidean instances ilk does reach pseudobackbone guide search rate descent  optimum instances ibglk good chance creases tables turned performance qual                     uniform                           clustered                         matrixdifference  quality      difference  quality                                             difference  quality                                                                                                                                                                                                                                                                                difference distance optimal  difference distance optimal difference distance optimal                                                                                                      ¡  ¥      figure  comparison local minima ilk ibglk  problems  cities each points  indicate                                                      ¢ ¦¥  ibglk’s solutions higher quality points  indicate ibglk’s solutions closer optimal axes  normalized                                                                             heldkarp bound runtime seconds  itatively similar anytime performance results ilk ilk ilk ibglk optimal ilk ibglk  large problem sizes comparing ibglk ilk dsj                                                                          pr                       instances tsplib                          si                                                                                                 table  contains results ilk variants ibglk vm              instances tsplib  pcb                                                                                            cities instances unfortunately ilk al rl                 ready near optimum little room rl                                                                       nrw                   improvement places improve ﬂ                                                                                              ments possible ibglk produces set ﬂ                stances ibglk championed  ones bold                                                                            vm                    underlined ilk variants came ﬁrst                    instances overlaps note largest rl                                                                                            instances ones  cities ibglk pro                duces signiﬁcant gains ilk runtimes                                                                          pr                    amd   athelon machines normalized mhz   pcb                                                                          ﬂ                  alpha suggested                                  fnl                                                                           rl                      related  methods   discussions                   rl                                                                            pla                closely related work previous work rl              bone guided walksat maximum satisﬁability   usa                                                                        brd         —         backbone guided local search developed tsp fol             lows principles developed          —                                                                  pla         —        viewed innovative extension work  pla      —        research inspired builds previous  bests       sults “big valley” hypothesis clustering local  minima family linkernighan algorithm table  comparison instances tsplib  variants                                    cities numbers tour costs heldkarp bounds     pieces previous work resemble bglk way  normalized runtimes seconds  mhz alpha  ﬁrst reduction method lin kernighan   discussed earlier reduction “locks in” common edges  local minima effects speed swapped current tour during search albeit  search problem smaller provides means slim possibility allows tours explored  directing search set indistinguishable maintaining focused search  tours main limitation method brittle second related work search space smoothing   depending quality “locked in” edges “locked brieﬂy described section  gu huang      in” edge turns backbone optimal experimented idea opt algorithm                                                      ¤£¦¥   tour information “edge  small random euclidean problems   appears  local minima” utilized cities did compare method techniques  simply disregards potentially useful information backbone results section  showed smoothing outperforms  frequencies results   cities lim lk uniform matrix instances efﬁ  ited provide fair assessment method results cient bglk ilk  section  revealed reduction competitive     smoothing backbone guided search    bgls  general reduction providing remedy modify distances fundamentally different mod  problem brittleness making use information ifying distances just end products backbone  embedded  backbone frequencies bgls random strat guided search tsp fact applied maximum  egy edges appear local minima satisﬁability backbone guided local search did change
