                       forward search value iteration pomdps                       guy shani     ronen brafman     solomon shimony∗                department science bengurion university beersheva israel                          abstract                            heuristic search value iteration hsvi  smith sim                                                        mons  currently successful pointbased al      recent scaling pomdp solvers    gorithm larger domains hsvi maintains lower      alistic applications largely pointbased bound upper bound v¯  optimal value      methods quickly converge approximate  function¯ traverses belief space using heuristic based      solution mediumsized problems family bounds performs backups observed      hsvi uses trialbased asynchronous value   lief points reversed order unfortunately using v¯ slows      iteration handle largest domains algorithm considerably updating v¯ comput      paper suggest new algorithm fsvi uses ing upper bound projections v¯ computationally      underlying mdp traverse belief space tensive heuristic pays overall      wards rewards ﬁnding sequences useful   formance hsvi better methods      ups show scales better hsvi  paper suggest new method belief point se      larger benchmarks                                lection ordering backups does use upper                                                        bound algorithm uses search heuristic based                                                        underlying mdp using mdp information known    introduction                                       technique especially initial guess value function                                                        starting  method littman et al   interesting reinforcement learning rl problems              mdp                                                        did lead far successful algorithms  modeled partially observable markov decision problems                                                        novel algorithm — forward search value iteration fsvi  pomdps pomdps frequently avoided                                                        —  traverses belief space underlying  difﬁculty computing optimal policy research fo                                                        mdp space actions selected based optimal policy  cused approximate methods computing policy                                                        mdp applied belief space  pineau et al  standard way deﬁne policy                                                        directing simulation rewards domain  through value function assigns value each                                                        sense approach strongly utilizes underlying  lief state deﬁning policy belief                                                        mdp policy  space smallwood sondik  show value func                                                          tested algorithm domains hsvi  tion represented set vectors                                                        tested converges faster hsvi scales  piecewise linear convex                                                        better allowing solve certain problems    promising approach computing value functions hsvi fails converge reasonable time  pointbased method value function computed  ﬁnite set reachable belief points using backup operation  single belief points  pointbased backups generating  background related work  αvectors assumption value function review pomdp model associated notation  generalize entire belief space           provide short overview relevant methods    key issues pointbased methods  mdps pomdps beliefspace mdp  choice set belief points order backups                                                                                                           successful approach addressing issues uses markov decision process mdp tuple tr  trialbased value iteration — simulating trajectories exe set world states set actions                                                        trs s probability transitioning state  cuting backups encountered beliefstates reversed   order bonet gefner  methods use state using action aandrs deﬁnes reward ex  type heuristic ﬁnd useful trajectories    ecuting action state                                                            partially observable markov  decision process    ∗partially supported lynn william frankel center pomdp tuple s tr Ωob tr  sciences paul ivanier center robotics mdp Ω set observations  production management bgu                         oa probability observing executing                                                    ijcai                                                    reaching state agent maintains beliefstate —a algorithm  rtdp  vector probabilities bs probability  initialize qs ←   agent currently state deﬁnes initial belief  true  state — agent belief initial state             ←                                                                transition belief state belief state using  goal state  action deterministic given observation deﬁnes  each ∈                                                                                                      τ transition function denote  τb    qs ← rs    trs sv                                                                                                                                                ← argmax   qs                 oa   bstrs                                                                              ←  sample trs ∗                           prob                                                                           prob   bs   trs oa                                                         updated new trial executed rtdp barto et al                        s                                                         trialbased algorithm mdps algorithm     agent unable observe true state                                                          rtdpbel —    adaptation rtdp pomdps  world world behaves mdp                                                        suggested bonet geffner bonet gefner   underlying mdp                                                        rtdpbel discretizes belief states maintains qvalues    mdp pomdp examples agent ei                                                        discretized belief states trials executed  ther reach state called goal state receives                                                        pomdp mapping real belief state closest dis  reward collect rewards small                                                        cretized belief state updated  subset state space problems provide varying  wards each state                                    important aspect convergence speed trial                                                        based algorithms good heuristic leads im    value functions pomdps                       portant states updates unfocused heuristics cause                                                        algorithm spend time updating useless states  known value function belief                                                    space mdp represented ﬁnite collection   heuristic search value iteration hsvi  dimensional vectors known α vectors  piecewise linear convex smallwood sondik  computing optimal value function entire belief  policy belief space deﬁned associating ac space does feasible approach possible                            ·  tion each vector αsothatα  αsbs represents approximation compute optimal value function  value taking belief state following pol subset belief space optimal value function  icy standard practice compute subset belief space approximation  value function — set α vectors policy πv solution hope computed value                                                  ·  immediately derivable using πv  argmaxaαa∈v αa function generalize unobserved belief states    iteratively computed using pointbased backup pointbased algorithms pineau et al  spaan  steps efﬁciently implemented pineau et al  vlassis  smith simmons  compute value                                                      function reachable subset belief space            backupb  argmax  ∈ ·                                     ga                  ing pointbased backups equations                                           α              family algorithms hsvi algorithm                γ    argmax α   ∈ ·                                  gao α  ao          shown best performance large scale problems hsvi                                                                              smith simmons  maintains upper bound             α                                       gaos    oa otrs α   v¯  lower bound value function traverses                     s                                 belief space following¯ upper bound heuristic greedily                                                        selecting successor belief points v¯ − vb max    vector representation suitable lower bounds                                ¯  upper bound represented direct mapping imal stopping criteria reached  tween belief states values operator known executes backup operator updates observed  bellman update updates value function        belief points explored path reversed order                                                         hsvi viewed trialbased value iteration                  ·                   qv ab  ra  γ  pro bvnτb  pomdps belief state sampled                hv  bmaxa  qv              selected using upper lower bounds                                                          hsvi able handle large problems    trialbased value iteration                       operator update interpolations used ﬁnd  synchronous value iteration assumes entire state value v¯ computationally intensive  space updated each iteration asynchronous value time consuming each explored belief state  eration allows states updated hsvi spends time maintaining upper bound  based assumption value function accuracy used heuristic directing belief space traversal  crucial states known form asynchronous note smith simmons present  value iteration trialbased updates simulation trials theoretical results convergence hsvi relying  executed creating trajectories states mdps existence upper bound suggest remove  lief states pomdps states trajectory upper bound theoretical results longer apply                                                    ijcai                                                    algorithm  hsvi                                      algorithm  fsvi  function hsvi                                         function fsvi    initialize v¯                                 initialize    v¯ b¯ − vb do                         converged     exploreb v¯ v¯                                  sample distribution                  ¯                                         mdpexplorebs  function exploreb v¯     stopping criteria¯ reached  function mdpexploreb        ∗                         ←  argmax  ¯  equation          goal state        ∗                                                  ∗      ←  argmax v¯ τb − vτb        ←  argmax  qs                   o∗ ∗                                                       ∗     exploreτb  v¯  ¯                       sample trs  ∗                                                                              ∗       addvbackupb v¯                                 sample oa ∗                                                                              ∗          v¯ ←¯hv     ¯                                    mdpexploreτb os                                                          addvbackupb     using underlying mdp  using underlying mdp optimal policy pomdp belief state goal rewards assume  known idea explored value function underlying mdp optimal  pects past littman et al littman et al  suggest heuristic lead agent states rewards  use optimal qvalues underlying mdp create obtained  qmdp  value function pomdp                   trial ended state underlying mdp                                                        goal state mdp does goal state              qmdp   bmaxqs abs                                                                 use criteria reaching predeﬁned sum                                                        rewards number actions goal unreachable  gridbased techniques zhou hansen  states add maximal number steps  initialize upper bound value function using trial ends  underlying mdp rtdpbel initializes function fsvi algorithm  apparently simple simplic  pomdp using optimal function mdp       ity translates increased speed efﬁciency generating    important drawback using underlying mdp belief points updating values associated belief  inability mdp assess actions gather informa points fsvi’s method selecting action  tion agents partially observable environment occasion fast requiring check oa values mdp qvalues  ally need execute actions opposed action selection method based cur  reward improve state information rent belief state example rtdpbel takes os op  current world state activating sensor mdp erations discretizing belief state select  world state known information action hsvi needs oaosv¯  operations  gathering actions produce additional value agents rely v¯  number points upper bound com  ing qmdp heuristic example pute values successors current belief state  execute actions                             fsvi generates trajectories using forward projection                                                        easy determine good sequences backups simply going    forward search value iteration                     reversed order ability shared hsvi  propose new algorithm forward search value itera pointbased algorithms perseus spaan  tion fsvi using trialbased updates belief space vlassis  pbvi pineau et al   pomdp fsvi maintains value function using αvectors algorithms hsvi rtdpbel use  updates using pointbased backups             heuristic initialized based mdp qfunction    heuristic fsvi uses traverse belief space based use form interpolation qvalues al  optimal solution underlying mdp assume gorithms improve heuristic updating qvalues  solution given input fsvi form ﬁt pomdp values algorithms work ini  qfunction mdp states assumption reason tially like qmdp heuristic known pre  able solution underlying mdp simpler form badly pomdp problems cases  compute solution pomdp              gets stuck local optima algorithms potentially    fsvi algorithm  simulates interaction agent need updates improve heuristic able reach  environment maintaining pomdp belief rewards goal states  state underlying mdp state — true state noted earlier major drawback mdp based ap  environment agent simulation proaches inability perform information gather  policy execution time agent unaware simulation ing tasks fsvi slightly different respect fsvi  use guide exploration through environment uses pointbased backups information gathering ac    fsvi uses mdp state decide action apply tions evaluated considered able  based optimal value function underlying perform single step information gathering actions  mdp providing path belief space initial activation sensor example rocksample                                                    ijcai                                                    domain smith simmons  robot acti         vate sensor discover rock worthwhile      fsvi performs rocksample domain          executing actions information gath       ering requires lengthy sequence operations       heavenhell problem bonet gefner                                                                           agent required pass corridor read map                         return reward fsvi’s heuristic fail lead               fsvi hsvi  through corridor learn ex                 istence map fsvi learn read map using  information gathering action path    initial state goal                                         limitation removed adding exploration        factor causing fsvi occasionally choose nonoptimal ac       tion practice unlikely random explo      ration rapidly lead meaningful trajectories                                                                                                empirical evaluations                                                     fsvi hsvi                                                                                   evaluation metrics    evaluate following criteria                                value function evaluation — average discounted reward                 ptrials psteps                                                     γ rj                                        adr       trials     adr ﬁltered using ﬁrst            order ﬁlter reduce noise adr                                                                                               execution time — report cpu time          implementation speciﬁc measurement report                             basic operations backup τ function dot                   fsvi hsvi           ·       α  product α bandgao equation  computations                                  memory —   show size computed value func  tion number maintained belief points      figure  convergence noisy rock sample  prob    experimental setup                               lem rock sample  problem rock sam                                                        ple  problem axis shows cpu time  hsvi known perform better pointbased axis shows adr  algorithms perseus spaan vlassis   pbvi  pineau et al  compare fsvi                                            hsvi comparison number benchmarks  pointbased literature hallway hallway littman                                     et al tagavoidpineau et al  rocksample                                         smith simmons  network ring poupart                                         boutilier  include scalability domains                                                                                                  hsvi tested smith simmons ex                         cept rock sample  loaded                fsvi    hsvi  insufﬁcient memory table  contains prob  lem measurements benchmarks including size figure  normalized comparison cpu time rock  state space action space observation space num sample problems  ber trials used evaluate solutions error  measuring adr each problem    rock sample domain provides opportunity test forth experiments executed identical machines  ing scalability different algorithms bit machines dualproc ghz cpu gb memory  problems somewhat limited assume deterministic mb cache running linux jre   state transitions observability robot loca focus attention convergence speed value  tion making problems easier solve overcome function previously reported adr executed hsvi  limitations added new domain — noisy rock sample fsvi interrupting time time compute ef  agent movements stochastic receives noisy ﬁciency current value function using adr  observations current location              ﬁltered adr reached level reported past    implemented java standard framework incor publications execution stopped reported adr  porated basic operators used algorithms measured additional trials number trials er  vector dot products backup operations τ function ror measurement reported table                                                     ijcai                                                                                                                           α                                             ¯       ¯              ¯    method          adr                time      backups         gao                   τ       α ·               hv                                                                                                                                                                         secs                                                                 hallway                                             ms         μs                  μs         ns              μs       ms    hsvi                                                                                                fsvi                                                                                            ±          ±        ±          ±        ±        ±       ±       ±    hallway                                            ms         μs                     μs         ns               μs       ms    hsvi                                                                                                   fsvi                                                                                             ±          ±         ±           ±        ±           ±       ±       ±    tag avoid                                           ms         μs                  μs        ns              μs     ms    hsvi                                                                                                   fsvi                                                                                             ±          ±         ±           ±          ±          ±       ±       ±    rock sample                                        ms         μs                  μs     μs               μs     ms    hsvi                                                                                                     fsvi                                                                                                 ±          ±         ±          ±        ±           ±       ±       ±    rock sample                                      ms          μs                   μs     μs             μs      ms    hsvi                                                                                                fsvi                                                                                       ±          ±         ±          ±        ±           ±       ±       ±    noisy rock sample                                ms         μs                   μs     μs             μs      ms    hsvi                                                                                        fsvi                                                                                        ±        ±         ±          ±        ±        ±       ±         ±    rock sample                                      ms          μs                  μs      μs               μs    ms    hsvi                                                                                                    fsvi                                                                                           ±       ±      ±        ±         ±      ±       ±        ±    rock sample                                      ms          μs                   ms        μs              μs       sec    hsvi                                                                                                fsvi                                                                                   ±      ±      ±        ±         ±      ±       ±      ±    rock sample                                      ms          μs                   ms        μs              μs       sec    hsvi                                                                                         fsvi                                                                                   ±       ±       ±        ±         ±      ±        ±      ±    network ring                                       ms            μs                   ms        ns              μs      ms    hsvi                                                                                                    fsvi                                                                                         ±          ±       ±          ±       ±      ±        ±       ±    network ring                                      ms         μs                  ms       ns            μs       ms    hsvi                                                                                                   fsvi                                                                                       ±       ±      ±        ±       ±      ±       ±      ±                table  performance measurements model rows show rough estimates basic operations execution time      problem                           trials   adr error                       number computed belief states                                                            ±       hallway                                                                        function computations count    hallway                                     ±                             τ    tag avoid                                   ±                          dot product operations count    rock sample                               ±                          number points upper bound v¯                   rock sample                             ±                            upper bound projection computations count v¯                      noisy rs                                ±                                                                                  ¯    rock sample                            ±                           upper bound value updates count hv                     rock sample                            ±                            items refer hsvi fsvi does main    rock sample                            ±                        tain upper bound reported numbers include    network ring                                ±    network ring                              ±                        repeated expensive computation adr ini                                                                                         tialization time identical algorithms               table  benchmark problem parameters                                        illustrate convergence rate each algorithm                                                                                         plotted adr function cpu time figure                                                                                          graphs contain data collected separate executions       results                                                                        fewer trials table  accurate  table  presents experimental results each problem  method report                                                                       discussion     resulting adr                                                                    results clearly indicate fsvi converges faster     size ﬁnal value function                                            hsvi scales better convergence rate shown     cpu time convergence                                                       figure  faster time required reach optimal     backups count                                                                    adr faster difference         α      gao  operations count                                                          pronounced problem size increases figure  presents                                                                                 ijcai                                                                                  
