           learning partially observable deterministic action models                                                eyal amir                                    science department                              university illinois urbanachampaign                                       urbana il  usa                                          eyalcsuiucedu                       abstract                          paper presents approach called slaf simul                                                     taneous learning filtering exact learning ac       present ﬁrst tractable exact solution tion’s effects preconditions partially observable       problem identifying actions’ effects deterministic domains approach determines set       partially observable strips domains al  possible transition relations given sequence actions       gorithms resemble version spaces logical  partial observations online updates log       filtering identify models ical formula models possible transition relations       consistent observations apply world states time step ﬁnds exactly       deterministic domains condi transition relations actions strips       tional effects inexact return false conditional effects map states        positives inefﬁcient bound                                                       algorithms polynomial time number       representation size experiments ver                                                     features number time steps        ify theoretical guarantees show                                                     cases exact complexity varies properties       learn strips actions efﬁciently time                                                     domain example overall time learning       signiﬁcantly better approaches                                                     strips actions’ effects ot · cases       hmms reinforcement learning                                                     update time step takes linear time representa       inexact results especially surpris                                                     tion size bound size onk approx       ing inherent intractability                                                     imate representation kcnf formula yielding       general deterministic case results                                                     overall time ot · nk entire algorithm       applied autonomous agent vir       tual world facilitating decision making diag experiments verify theoretical results       nosis exploration                       show algorithms faster better qualita                                                     tively related approaches example                                                     learn strips actions’ effects domains   fea     introduction                                   tures exactly contrast work learning dynamic  autonomous agents limited prior knowledge  bayesian networks boyen et al  rein  actions’ preconditions effects ex forcement learning pomdps littman   plore new domains act intelligently inductive logic programming ilp wang                                                      approximate solution unbounded  learn actions affect world use knowl                                          edge respond goals important error deterministic domains time Ω   goals change reason inapplicable domains larger  fea  actions instead trying world tures section  provides comparison     learning actions’ effects preconditions difﬁcult works  partially observable domains world state technical advance deterministic domains im  known completely actions’ effects mix each portant applications automatic software  hard associate change feature interfaces internet agents virtual worlds games  speciﬁc action situation surprising applications robotics humancomputer  work far limited fully observable interfaces program machine diagnosis use  mains wang  pasula et al  deterministic models approximations finally  hillclimbing em approaches unbounded er standing deterministic case better help develop  ror deterministic domains ghahramani  better results stochastic domains  boyen et al                                 following section  deﬁnes slaf precisely section  provides deductionbased exact slaf al    west    east               west    east   gorithm section  presents tractable modelupdate al   gorithms section  gives sufﬁcient conditions al                              gorithms keeping model representation compact                   ⇒   overall polynomial time section  presents  ¬sw ∧ ¬lit ∧ swon s′  sw ∧ lit ∧     experimental results                                 sr                           s’’r                                                                                    s’r                                                                  sr                                                     ρ                                    s’r ρ     slaf semantics                                      sr                   s’r   deﬁne slaf problem following formal   tools borrowing intuitions work bayesian learn figure  rooms ﬂipping light switch   ing hidden markov models hmms ghahramani   slaf semantics progressing action ar    logical filtering amir russell  rows map statetransition pairs ﬁltering     transition tuple hp ri observation crossing pairs     • ﬁnite set propositional ﬂuents     • ⊆ owp set world states     • ﬁnite set actions                  step  progression step  ﬁltering     • ⊆ × × transition relation  world state ∈ subset contains assume observations observation model  propositions true state rs s′ means relating observations state ﬂuents given  state s′ possible result action state logical sentences ﬂuents performing action  goal paper ﬁnd given known denoted actions inexe  sequence actions partial observations logical cutable fail useful assume contains  sentences subset                     special boolean ﬂuent ok value success     transition belief state set tuples hs ri action attempted  state transition relation let  ows× transition belief state ρ generalizes version spaces  ×  set possible transition relations wang  follows current state  let  × hold transition belief known version space’s lattice contains                                                                             state ρ ⊆ consider tuple hs ri ∈ ρ possible set transition relations ρ   hs ri ∈ ρ     example consider situation presented fig generalizes belief states transition relation  ure  rooms light bulb switch known belief state set possible states                                                         action ﬂipping switch observation ρ   hs ri ∈ ρ read ρ restricted  east room real states world logical filtering amir russell  belief state  s′ shown unknown σ action equal deﬁne     figure  demonstrates                                                        ilter σ    slaf       σ    knowledge evolves performing action swon                    ∈    ρ ρ respective transition belief states ρ  know possible world states  slaf logical inference  arbitrary world states learning transition models using deﬁnition  directly  respective transition relations ρ                               sulting transition belief state action swon action intractable takes space Ω                                                      cases instead section represent transition  swon takes state s′ according transition rela                                                     lief states compactly using logic  tion hs′ ri pair ρ  similarly takes                                                    compute slaf using general purpose logical inference  state s′ s′′ according transition rela                            ′                          represent deterministic transition relation  tion takes according                                    ′        ′′       ′                             language propositions mean  hs  ri hs  ri hs  ri pair ρ finally                                                            ′                    ing “if holds hold executing a”  observing eliminates pair hs  ri ρ      false s′                                   ag  ∈ action ∈ literal                                                     possibly negated proposition complete  deﬁnition  slaf semantics let ρ ⊆ tran term conjunction literals  sition belief state slaf ρ actions ob ﬂuent appears exactly sets  servations haj oj i≤j≤t deﬁned             effects  preconditions respectively     slaf  aρ                                 · · new propositional variables          hs′ ri  hs s′i ∈ hs ri ∈ ρ    section  decrease number     slaf  oρ  hs ri ∈ ρ  true   deﬁne  ϕr logical theory represents                                                                        ′                 ′     slaf  haj oj ii≤j≤tρ                    ϕr   ag ∈  ∀hs ∈  ⇒                                                                                       slaf  haj oj iij≤tslaf oislaf aiρ ϕr  ϕr ∪ ¬ag  ag ∈  ϕr                                                        intuitive properties hold representation  efﬁcient model update   ϕr complete theory sentence learning world models easier slaf distributes  negation implied ϕr ϕr    logical connectives computation         ¬f  ¬ag  ⇔  ag  ∈ ∈               tractable bottleneck time compute     transition belief state ρ slaf each separately section ex  ﬁne theory ll ∪ corresponds ϕρ  amine distribution possible present    hsri∈ρs ∧ ϕr similarly theory ϕ lineartime algorithm gives exact solution   wll ∪ deﬁne transition belief state ρϕ  cases weaker transition belief formula   hs ri  ∈ s∧ϕr  ϕ statetransition distribution properties hold slaf fol   pairs satisfy ϕ say theory ϕ transition low set theoretical considerations theorem    belief formula ϕρϕ ≡ ϕ note ρϕρ  ρ holds corollary  ϕ ψ transition belief formulae ac     deterministic possibly conditional action tion   deﬁne effect model time                                                      slaf   ϕ   ψ    slaf   ϕ   slaf   ψ                                                            ∨   ≡          ∨           teffa  l∈fg∈gat ∧ ag ∧ gt ⇒ lt ∧      slaf  aϕ ∧ ψ ⇒ slaf aϕ ∧ slaf aψ                                                  vl∈f lt ∧ ⇒  g∈gag ∧ gt       stronger distribution properties hold slaf                                              hold logical filtering   asserts action occurred time                                                     theorem  let ρ ρ transition belief states   use convention ϕt result adding sub                                                     slaf  aρ ∩ ρ  slaf aρ ∩ ρ iff   script ﬂuent symbol ϕ ﬁrst                                  says executes time causes ilteraρ ∩ ρ   ilteraρ  ∩ ilteraρ    holds holds time holds time   conclude following corollary theorems   second says holds a’s execution   theorems amir russell                        ag holds corresponding corollary  ϕ ψ transition belief formulae ac   current state parts correspond effect tion slaf aϕ∧ψ ≡ slaf aϕ∧slaf aψ   axioms explanation closure axioms used situation relation ρϕρψ following holds   calculus                                            maps states      ready zerothlevel algo  conditional effects know fails   rithm slaf slaf transition belief formula ϕ ∧ ψ includes prime implicates   denote cnv ϕ set consequences ϕ  state known hs ri ∈   vocabulary  let lt  pt ∪ vocab  ρϕ ∪ ρψ   ulary includes ﬂuents time   effect figure  presents procedure factoredslaf   propositions time apply progression computes slaf exactly conditions corol   given action current transition belief formula lary  hold consequently factoredslaf returns   ϕt apply ﬁltering current observations exact solution actions known                          lt     slafaϕt  cn     ϕt ∧ ∧ teffa  actions conditional effects suc     slafoϕt  ϕt ∧ ot                                                   cessfailure observed modiﬁed factoredslaf     implement cn ϕ using consequence ﬁnd  solve problem exactly section    ing algorithms resolution vari precompute cache possible   ants simon del val  following sponses literalslaf time step   theorem shows formulaslaf algorithm cor procedure requires linear time representation size   rect exact                                                     ϕt transition belief formula signiﬁcant   theorem  ϕ transition belief formula action improvement super exponential time taken    slaf  ahs ri ∈  hs ri satisﬁes ϕ     straightforward algorithm potentially ex           hs ri ∈  hs ri satisﬁes slafaϕ ponential time taken generalpurpose consequence                                                     ﬁnding used zerothlevel slaf procedure     zerothlevel algorithm enable compact                                                                                                   ′   representation does guarantee does theorem  stepslafa ϕ returns formula ϕ                                                                               ′   guarantee tractable computation fact algorithm slaf oϕ  ϕ  run literal   maintain compact representation tractable com slaf takes time stepslaf takes time oϕc   putation general slaf nphard logi finally assume assumptions corollary                                                              ′   cal filtering nphard eiter gottlob   ϕ ≡ slaf oϕ   deterministic actions representation closedform solution slaf   transition belief states uses polyp propositions beliefstate formula transition belief formulae                                                                               grows exponentially number time steps effect propositions ag makes procedure   starting transition belief states action literalslaf tractable allows examine   sequences                                        structure belief state formulae                                                      procedure factoredslafhai oiii≤tϕ          resulting clauses chosen set  gm   ∀i ai action oi observation ϕ transition belief formula chosen set literals  lm reason including                              a¬li ∧ ¬ali  choose clause                                                       gi     gi        set ϕ ← stepslafoiaiϕ                                                                eliminate subsumed clauses ϕ         gi li speciﬁc type includes ¬ag                                                                     ¬l      return ϕ                                    produces ag                                                        finally formula theorem   procedure stepslafoaϕ                               ¬f                                                     ag  ≡ ¬ag   characterizes exactly state   observation formula lp action ϕ transition fact set     belief formula                                                                              ϕ literal return o∧literalslafaϕ stronger rest entails rest      ϕ  ϕ ∧ ϕ return stepslafoaϕ∧step  gm complete terms set complete       slafoaϕ                                 ﬂuent assignments gi satisfy ϕ      ϕ  ϕ ∨ ϕ return stepslafoaϕ∨step                                                       consequence theorem  imple       slafoaϕ                                                     ment procedure literalslaf using equivalence   procedure literalslafaϕ                                                                     theorem          ll ⊆   action ϕ proposition lt negation slaf al ≡                lt      return cn  ϕt ∧ ∧ teffa                          ∧ slaf atrue                                                       notice computation theorem  ϕ         figure  slaf using distribution ∧ ∨  literal simple  gm complete                                                     terms lp include   theorem  beliefstate formula ϕ ∈ lp time                             ¬l                       compact model representation  action ca  g∈gl∈f ag ∨ ag   gm ∈                                                                                          terms invg gi  ϕ            theorem  high   num                                                     ber complete terms consequently clauses                                                             ¬li            exponential length       slaf  aϕt ≡           ∨   ∧ ca                                    gi             superexponential number clauses result                   llm∈f                   section restrict attention strips ac     proof sketch      follow characterization tions fikes et al  provide overall polyno  offered theorem  formula     mial bound growth representation size                                                     steps time taken compute  ϕt ∧ ∧ teffa resolve literals time  resolution guaranteed generate set conse sulting model strips class actions                             lt                    focus area ai planning  quences equivalent cn ϕt ∧at ∧teffa                                                     execution years includes deterministic     assuming ϕt ∧ teffa logically equivalent                                                   conditional executable actions  teffa tϕ  l∈fg∈ggϕag ∧ gt ⇒  lt ∧                                    l∈fg∈ggϕvlt ⇒ gt ⇒  ag follows     actions limited effect  fromv observations notice ϕt implies domains assume action af                                                  ∈  ϕ gt ⇒ ag    fects ﬂuents small            ag ∧ gt ⇒ lt antecedent does hold common assume actions strips   formula true second notice second fail knowing leaving                                          original teffa  g∈ggϕag ∧ gt world unchanged assumptions allow                                             equivalent assuming ϕ    gt ⇒       progress slaf limited polynomial factor                            g∈ggϕ               growth formula size     resolving literalsv time ϕt ∧at ∧                                                       use language similar section  teffa tϕ consider resolutions clauses                                                                               uses action propositions ag  gt term form ag ∧ gt ⇒ lt                                                   ing ﬂuent term size instead ﬂuent term size  clauses form lt ⇒ gt ⇒ ag each semantically al ≡         al       yields equivalent                                          l∧∧lk  lkln l∧∧ln                                                                                                                                  theorem  let ϕ ∈ lp beliefstate formula                             ¬li     li          time strips action ≤ ﬂuents affected                        ∨     ∧ ¬a                                                                   gi      gi          precondition term let set terms                              gm ∈                               ﬂuents lp consistent ϕ        ϕ  i≤m gi        lm ∈                                                                                                                                                  ¬li                                                     slaf  aϕt ≡                  ∨   ∧ ca  eliminate literals time                              gi                                                                                                                                                 g∈  resolve sets clauses matching gi’s                                                                                  ∧  ∧ gk  ϕ   ϕ  i≤n gi formula encodes              lk ∈                                                               proof omitted uses insights procedure aestripsslafhai oiii≤t ϕ  case change occurs clause ai actions oi observations ϕ  f∈p ϕf ﬂuentfactored  theorem  subsumed clause entailed ϕf  ¬f ∨ explf  ∧ ∨ explv¬f  ∧ af                                 li  slaf aϕt literal li  ∈                                 gi                                              f◦  li  lj  gi ﬂuent term disjunc set ϕf ← ¬f ∨ ∨ ∧ explf  ∧ ∨                                                           a¬f ∨ af◦ ∧ expl  ∧   tions second ag term equivalent                  ¬f       formula al terms length affects    oi  observed set ϕf ← ¬f ∨             gi        ﬂuents                                             rue ∧ ∨ alse ∧ af ∧ explf     encode clauses    oi  ¬f observed ¬f set ϕf ←                                                                alse      rue      expl   junction using subset extended action effect    ¬  ∨        ∧  ∨       ∧ ∧   ¬f                                                      eliminate subsumed clauses ϕ  f∈p ϕf   propositions ag term size                                                        return ϕt  ϕ  onk terms onk propositions                               clause length identity  clause determined ﬁrst half set action ef figure  slaf alwaysexecutable strips  fect propositions consequently slaf aϕt takes     kk                           kk     ·k  space represent using  clauses procedure aestripsslafhai oiii≤tϕ  length ≤                                                                                             turns ϕ  ≡  slaf  hai oiii≤tϕ time ot ·                                                                 alwaysexecutable actions                    ϕ  ≤ ot ·  times assume actions reason space bound end formula  executable example sequence actions does ϕt  time step increase size  include action failures sequence chosen formula adding  new elements ﬂuent  knowledgeable agent human better improve implementation  observations                          time ot · largest number ﬂuents ob    use language similar sec served bound space taken ϕt  tion  uses action propositions al improved ways op · log  holds executing al◦ af set actions bound cnf repre  fected semantically al ≡   al        sentation ϕt ϕt similar                               lln l∧∧ln                                                                                                   f◦        f◦  ali◦ ≡                ali                      ⇒  ∨   ∧ ∨   ∧          lli−liln l∧l∧∧ln                                     assumev transitionbelief formula ϕ ﬂuent small bound manageable second  factored conjunction ϕf each ﬂuent observed actions  ϕf concerns ﬂuent actions’ effects action affects occurs know                                                    effect cnf representation ϕ takes space  ϕf ≡ ¬f ∨explf ∧f ∨expl¬f ∧af                                                                                   op · ak small bound useful  explf  expl¬f  af formulae action propositions    ¬f       f◦     possibly multiple different actions  action preconditions  format ﬂuentfactored intuition                                                    unfortunately simple procedure aestrips  explf expl¬f possible explanations  true false respectively af holds slaf figure  does provide exact solution  knowledge actions’ effects knowledge general reason action failure makes ﬂu  does depend f’s current value example ents codependent each caused  know actions affect failure instance consider figure  assume  start exploration ϕf  ¬f ∨ rue ∧ ∨ add ﬂuent ok indicates  rue ∧ rue                                   action succeeds know ¬on light    representation slaf aϕf       slafswon¬on ∧ ¬ok swon                                                    failed west room implies           f◦              ¬f   f◦                         ¬ok           ¬sw          ¬e  ¬f∨a ∨a  ∧explf ∧f∨a ∨a  ∧expl¬f ∧af  sw ∨ ∨ a¬e∧¬sw∧¬lit ∨ a¬e∧sw∧¬lit ∨ ae∧¬sw∧¬lit ∨                                                    a¬ok       theorem   similar formula holds observations          e∧sw∧¬lit                                                      instead compute effect literal using    contributes simpler algorithm ae                                                    theorem  assuming exactly ﬂuents changed  stripsslaf present figure  computes                                                    action approximate dropping clauses  slaf ﬂuentfactored transition belief state                                                    ﬂuent ok  form sequence actions observations                                                    augment step aestripsslaf condition  theorem  let ϕ ﬂuentfactored transition belief succeeded oi  ok add fails  formula assume  alwaysexecutable use following formula instead set ϕf ← ¬f ∨  strips actions  ot observation terms explf ∧expl¬okf ∧f ∨expl¬f ∧expl¬ok¬f ∧af                                                     
