                   leafvalue tables pruning nonzerosum games                                              nathan sturtevant                          university alberta department computing science                                      edmonton ab canada tg                                          nathanstcsualbertaca                          abstract                          playersʼ  scores   secondly  test     given                                                          bounds provably correct prune branch          algorithms   pruning  game  trees  generally game tree work focuses second pro      rely game zerosum case al cess alphabeta pruning methods use simple       phabeta pruning constantsum case linear tests decision rule determine       multiplayer pruning algorithms specula  prune zerosum games decisions optimal       tive pruning existing algorithms prune make perfect decisions prun      nonzerosum games pruning effec   ing possible nonzerosum games current       tive constantsum games introduce techniques catch possibility pruning      idea leafvalue tables store enumer     order prune optimally nonzerosum game       ation    possible  leaf  values    game  tree knowledge space possible val      using tables make perfect deci  ues occur game tree carmel markov      sions possible prune itch assume bound difference player scores       given node tree leafvalue tables make instead assume enumerate possible outcomes       easier incorporate monotonic heuristics game particularly easy card games       creased pruning player perfectinforma   relatively   possible  outcomes   each  hand       tion variant spades able reduce node given enumerate possible game outcomes       expansions orders magnitude      make  optimal  pruning  decisions   nonzerosum       previous best zerosum nonzerosum pruning   games addition techniques enhanced      techniques                                       corporating information monotonic heuristics                                                         increase pruning                                                            section  illustrate mechanics pruning                                                         algorithms moving concrete example     introduction                                       game spades section  section  examine   twoplayer games substantial work gone computational  complexity    leafvalue  table  method   algorithms techniques increasing search depths used implement different decision rules pruning   fact small fraction programs written followed experimental results conclusions  play twoplayer games expert level using   minimax algorithm alphabeta pruning pruning   pruning algorithms  gains provided alphabeta rely fact game prune node game tree proven val  zerosum twoplayer games commonly non  ue node root value tree   zerosum   opponent  modeling   taken   consider demonstrate decision algorithms  ation carmel markovitch  method   pruning twoplayer nonconstantsum game         alphabeta      multiplayer game three players assume readers familiar alphabeta prun   teams   players work   effective  pruning  techniques                                                                           α β   multiplayer  games  began   shallow  pruning  korf   maxvaluestate    continued recently speculative pruning   cutoffteststate return evalstate  sturtevant  game does need     each successorstate                                                                α ← maxα minvalues α β  stantsum pruning applied pruning                                                                 β  α ≤ † return β  possible greatly reduced game constantsum                                                                return α       twoplayer   multiplayer  pruning  algorithms   consist stages ﬁrst collect bounds      figure  alphabeta pseudocode           β − α                                       maxsum                                                                                   ≥ ≤ a≤                                      figure  alphabeta pruning decision space                                                                                                                                                                                                                                 ≤ ≥ ≤  ing  algorithm   figure     show  pseudocode       maximizing player modiﬁed slightly russell                                  vig  statement marked † alphabeta                                                                                                  termines    prune   possible   illustrated      figure  xaxis value β − α plot points  figure  shallow pruning player maxn tree  tested point solid falls   left  prune falls right like                                                          shallow pruning  hollow point canʼt useful think linear                                                         shallow pruning korf  simplest pruning   classiﬁer makes single comparison linear                                                         algorithms multiplayer games example shallow   function determine prune possible                                                        pruning shown figure  sum playersʼ scores     maxn                                             each maxn value  maxsum  tree   maxn algorithm luckhardt irani  general fragment player  guaranteed score  node   ization minimax number players maxn tree moving similarly player  guaranteed    players leaves tree ntuples points moving regardless  ith element tuple ith playerʼs score utility seen value player  select unless   position interior nodes tree maxn value gives  points exploring   node player maxn value guarantee player    child node ith component maximum maxsum     points player  guaranteed     leaves    game  tree   exact   heuristic  evalua  points value irrelevant   tion function applied calculate ntuples pruned  backed game tree                               example used consecutive bounds player        demonstrate figure  tree player ʼs scores prune stated previously gen                                                        eral idea prove unseen leaf nodes   three players player labeled inside each node  node player  player  score  max  value game tree figure  instance                                                         consider possible values occur node   moving left score  moving right                       player  choose left branch maxn value max  value root   node    player  acts similarly node select tree prune  ing right branch node breaks tie left   formalize pruning process slightly construct                                                                              selecting left branch node player  chooses ntuple similar max  value called bound vector   node  greater   avail vector containing lower bounds playersʼ scores                                                                                                     able nodes                            game tree given current search max  value                                                         constrained sum maxsum bound vector sum     maxn pruning algorithms                          n·maxsum figure  exploring node   given   information  regarding   bounds   playersʼ node bound vector      scores generalized pruning possible assume player  guaranteed  points root player    each playerʼs score lower bound  guaranteed  points node existing pruning algorithms   upper bound sum players scores maxsum prune sum components bound vec  prune bounds guarantee game tor large maxsum  constantsum existing pruning algorithms miss   pruning opportunities game constantsum           maxsum    possible bound vectors                                                                                                                     xy  maxsum                                                             player                                                                                                                           possible maxn                                                                               scores                                                                                                                                                          maxsum                                     player               figure  player maxn game tree                 figure  shallow pruning decision space     maxsum                            ≥                                                                                bound vector space                                                                                                                               maxsum                     ≥                                                                                                                                                                    maxn values                      ≥                                                          xyz  maxsum                                                                                                                                                                                                                                                                                    maxsum                figure  speculative pruning                   figure  speculative pruning decision space                                                          maxsum guarantee       show visualization shallow pruning space                                                 figure  ycoordinates scores bounds value right child max    player  player  respectively shaded area value    tree   pruning     ply                                                        multiplayer games potential value   space possible max  values player   fall                                                                    max  value tree affect   max  values game space  sum bounded maxsum shallow pruning max  value tree details speculative prun  ignores player  player  player ʼs combined scores ing algorithm prevent happening   constantsum fall left concerned initial pruning decision  diagonal line bound vectors fall    illustrate   pruning  decision  rule   speculative   larger square bound vector di pruning figure  case comparing   agonal line deﬁned xy  maxsum prune three playerʼs scores decision prune   maxn value better bound vectors depends plane space each axis cor                                                        responds score bound each  players   like alphabeta shallow pruning using linear classiﬁer          decide prune                                 game each max  value bound vector repre                                                        sented point space threeplayer constant      ignoring player ʼs values plot leaf values                    figure  open points bound vec sum  game   possible  max   values   fall  exactly    tor    used prune figure  solid point plane deﬁned xyz  maxsum perfect   instance gap gray region di classiﬁer determining prune shallow   agonal line line deﬁned xy  maxsum perfect pruning bound vectors fall cube  classiﬁer determine prune            generalized pruning decisions   alphabeta branchandbound pruning             pruning algorithms discussed far linear classi   shallow  pruning   developed   multiplayer ﬁer used make pruning decisions works   games   basic  technique   compares   scores  game zerosum constantsum nonconstantsum   players time alphabeta branchandbound pruning games linear classiﬁer inadequate  sturtevant korf  similar shallow pruning ex   game nonconstantsum boundary   cept uses monotonic heuristic provide bounds space   maxn  values    deﬁned    straight  line   players game bound vector figure   demonstrate section using examples     player ʼs bound  information game spades able prune optimally need   scores supposing monotonic heuris know exact boundary feasible maxn values   tic guaranteed player  score  points prune given bound vector outside  bound vector    additional bound gion explain methods section   makes easier prune prune soon   values bound vector sum maxsum           sample domain spades   speculative pruning                             spades card game  players player   speculative  pruning  sturtevant    like  alphabeta version players play teams player version   branchandbound pruning takes account play each player focus   ers game does considering multiple levels games similar spades similar proper  game tree time demonstrate figure    ﬁgure important bounds player ʼs bound details relationship constantsum   player ʼs bound player ʼs bound nonconstantsum games appendix   form bound vector    values sum necessary understanding contributions paper      tricks    utilityevaluation bid ranked        taken                             maxn vals                                                                                                                                                                                                                                                                                     †                                                                                                     maxsum         †                                †                                                                                                                              player ’s score player  ’s                                                                                                            †                                                                                                                    †                                           player ’s score                                              figure  pruning decision space table          †                                                         value each state absolute value col                                                        umn replaced each playerʼs utility rank      table  outcomes player trick game spades                                                        combined playerʼs ranks ﬁnal maxn value                                                            example ﬁrst possible outcome players   ties cover subset rules game   tricks player  takes  tricks   spades split hands each hand basic players        missed   bids      points   unit play trick beginning hand players player  bid  tricks took  overtrick   bid tricks think end want avoid overtricks evaluate   each hand receive score based tricks    points player   miss bids    actually  took  goal    game      ﬁrst scenario player  bonus  points best   player reach predetermined score usually  points possible outcome player  gets highest ranking       player makes bid exactly receive score player   worst possible outcome   ×bid tricks taken bid called rank   tricks player takes overtricks count  point   graph shallow pruning decision space ﬁrst   each each time accumulate  overtricks lose players game figure  game maxsum    points finally miss bid lose ×bid   possible leaf values ﬁrst players   player bids  takes   points bid plotted hollow points graph use maxsum      points bid   discriminator decide prune indicate    points goal game make bid prune bound vector falls bold   taking overtricks                   diagonal  line     actually  prune   long   bound       players just try maximize number tricks vector border gray region   game constantsum trick taken actually prune given bound vector player     exactly player number tricks available          constant maximizing tricks   each hand   ﬁnal point note card games like spades     necessarily  maximize   chances   winning  number tricks taken increase mono  game interested instead tonically used heuristic help pruning   try avoid overtricks employ strategies depending  observation    key    alphabeta  branch  current situation game                 andbound pruning technique using utility       game  players tricks tt function  like  table      difﬁcult       possible ways tricks taken demonstrate monotonic heuristic relates evaluation function leaf  table   players  tricks          value tables make task easy     table  example leafvalue table contains   assume instance player  taken    possible leaf values associated utility game trick ignore outcomes does   spades build table each player trick gives reduced set values   bid game play begins ﬁrst column enu  marked    †  table    looking    associated   merates possible ways tricks taken each maxn values player    player second through fourth columns evaluate score  player   show   each player utility each particular used section  come example player  player  bid  trick   each   player    bid    tricks    player  does   make   leafvalue tables  bid score  use heuristic formal deﬁnition leafvalue table table   estimate score ×bid  overtricks  ×how holds possible outcomes occur leaf node   opponents miss bid shown minimax game looking pruning algorithms section    russell norvig  care relative     global leafvalue table  outcome rank    results hash table                                                            pseudocode using leafvalue table figure       canleafvaluetableprunebounds heuristicub    procedure   called    pruning  algorithm   decide         inhashtablebounds heuristicub          prune given current bounds leafvalue             return hashlookupbounds heuristicub     table   precomputed   each  possible  outcome           each entry leafvalue table             game associated rank outcome each player         players                          pass current bound vector heuristic                 entryoutcomei  heuristicubi   upper bounds playersʼ scores entry leafvalue                     skip entry                table inconsistent heuristic line  ignore         players                          entry outcome occur current                 entryranki ≤ boundsi           subtree entry table play                   skip entry                er does better value bound vector tested            addtohashtablefalse bounds heuristicub lines  reach lines  indicating prune           return false                                   time   attempt   prune    pay          addtohashtabletrue bounds heuristicub      otable size cost quickly amortized look    return true                                      ups doesnʼt add signiﬁcant overhead game                                                         large number outcomes variety methods        figure  leafvalue table pruning pseudocode  used reduce lookup cost additionally                                                         use standard linear maxsum check   want replace linear classiﬁers accurate correct indicates prune heuristic   classiﬁers given leafvalue table need efﬁ does speed check prune   cient way ﬁnd compute regions like figure  reduce effective size leafvalue table making   determine prune                          likely prune  theorem information stored leafvalue table suf  ﬁcient make optimal pruning decisions               experimental results  proof ﬁrst assume bound vector                                                           nodes expanded threeplayer spades  … bn each bound vector originates   path    root    tree    current  node  use game spades testbed techniques     guaranteed player bound bi change introduced paper ﬁrst experiment illustrate   unless value vi vi  bi leafvalue tables quite effective pruning                                                exists value  … vn ∀i vi  bi help demonstrate effective     prune    better    bound     compare   number   nodes  expanded  using   search far given leafvalue table know  previous pruning techniques  variety evalua  possible value game explicitly check tion functions player version spades   exists meets conditions evaluation  functions   actually    different  bidding   use leafvalue table make optimal pruning game called “oh hell”  decisions ☐                                              each method counted total number node         leafvalue  table  gives    exact  descrip expansions needed compute ﬁrst  hands   tion boundary spaces spades each player started  cards searched   prune question use information entire game tree ply search used transposition   efﬁciently given bound vector need quickly deter table search enhancements pruning   prune expect ask methods explicitly discussed bids each player prede  question node game tree   termined simple heuristic trees leafvalue       small games build lookup table enumer tables contain  entries present results table                                                             ﬁrst column table average size   ating possible bound vectors                                                         game trees pruning  million nodes deter  prune provide constant time lookup table                                                         mined cards players hold evaluation function   entries players table size otn                                                         used compare tree sizes value  time otn compute including heuristic information                                                             columns results using speculative   makes tables larger entries pruning    linear  classiﬁer   previous  best  pruning   accessed given game instead dy technique    use   nonconstantsum  ncs  evaluation   namically  compute  entries    need    store                            tree   ncs       mt       momb       mot      smot       wl        oh         nodes expanded                                              reduction factor                                                                                    table  overall reduction average tree sizes spades
