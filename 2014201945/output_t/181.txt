          formal verification diagnosability symbolic model checking              alessandro cimatti charles pecheur roberto cavada                  itcirst riacsnasa ames research center itcirst             povo trento italy moffett field ca usa povo trento italy             mailtocimattiirstitcit pecheurptolcmyarcnasagov cavadairstitcit                            abstract                          observed propose new practical approach                                                          verification diagnosability making following contribu•      paper addresses formal verification di•                                                         tions provide formal characterization diagnos•      agnosis systems tackle problem diagnos•                                                         ability problem using idea context explicitly takes       ability given partially observable dynamic sys•                                                         account runtime conditions       tem diagnosis observing evolution                                                          possible acquire certain information       time discuss verify design time                                                            second show diagnosability condition given       diagnosis able infer run•                                                         plant violated critical pair       time required information hidden                                                          critical pair pair executions indistinguishable       dynamic state tackle problem look•                                                         share inputs outputs hide conditions       ing pairs scenarios observationally                                                          distinguished instance prevent simple       indistinguishable lead situations re•                                                         failures stay undetected degenerate catastrophic       quired distinguished reduce problem                                                          events define coupled twin model plant       model checking problem finite state ma•                                                         show used search critical pairs       chine modeling dynamic replicated       construct pairs scenarios diagnosabil•  recast problem framework model       ity conditions formally expressed temporal  checking clarke et al  verification technique       logic check diagnosability carried gaining increasing ai model check•      solving model checking problem focus      ing possible exhaustively analyze possibly infi•      practical applicability method   nite behaviors large sized finite state machines       show formalism adequate represent    check requirements expressed terms temporal log•      diagnosability problems arising significant ics emerson  met show represent       realworld application symbolic model checking    diagnosability problem terms temporal logic formulae       techniques used formally verify incre•  reduce model checking problem       mentally refine diagnosability conditions     coupled twin model                                                            finally demonstrate practical applicability                                                          livingstone framework modelbased diagnosis    introduction                                         developed nasa ames research center williams   diagnosis process inferring plausible nayak  developed platform able generate for•  causes behavior given given set ob• mal models twin plant starting livingstone mod•  servations control applications ranging in• els diagnosability problems corresponding inter•  dustrial plants production power transportation esting scenarios realworld applications tackled   railways avionics space diagnosis needs carried means nusmv model checker cimatti et al    online parallel control process needed experimental analysis shows verification diag•  identify controlled working correctly nosability practical large livingstone models space   provide controller information transportation systems automatically analyzed sec•  degraded conditions malfunctioning de• onds means satbased symbolic model checking tech•  vices appropriate countermeasures taken niques   ability validate diagnosis systems paper organized follows section  state   important particular case applications operating working hypotheses section  formalize prob•  hazardous inaccessible conditions carrying vital lem section  characterize approach sec•  functions                                             tion  discuss application model checking tech•    paper focus key issue diagnosability niques section  experimental frame  possibility ideal diagnosis infer accu• work finally section  reviews similar work section    rate sufficient runtime information behavior draws conclusions outlines future lines activity       diagnosis                                                                                                                                                              formulae notice content paper           figure  architecture diagnosis                                                                  independent specific description used present    working hypotheses                                           definition  feasible execution steps                                                                  sequence   consider diagnosis connected feedback con•                                                                                                           trol loop plant controller figure                                                                                             set feasible execu•  inputs plant commands issued controller                                                                  tions observable trace feasible execution   outputs measurements returned controller                                                                    role diagnosis observe inputs   outputs plant report state estimation track exists   ing evolution unobservable state plant definition defines dynamics plant   task substantially complex diagnosis com•   observable counterpart notice execution   binatorial memoryless estimation consists    steps corresponding trace   set possible states plant following referred set traces general subset   belief state diagnosis rank states  following use denote feasible execution   based likelihood approach ignore aspect denote corresponding observable trace explanatory   disregard issues correspondence    purposes consider plant outlined figure    model plant plant focus  simplified segment realworld application described   plants modeled finitestate discrete systems assume     section  pneumatic valve pv controls flow   model plant partially observable    feeding line engine closed resting posi•  transition according following definition      tion determined action spring solenoid valve   definition  partially observable plant structure     sv open open pv directing pneumatic                    finite sets respectively   flow spring sv closed action   called state space input space output space          spring longer contrasted pv close sv re•  transition relation ceive input openclose observables pv   observation relation                                      sensors each providing information position                                                                  open valves stuck   assume plantis given use                         current position position valves influ•               denote states denote                     ences pneumatic engine flows each valves   inputs • • • denote outputs write unobservable variables state values open                                                              closed ailure mode values stuck   state hidden plant sequences    ok input variable values nocmd open   inputs outputs observable covers types    close effect command depends current   behaviors diagnosis expected handle — including     status failures occur time permanent   faulty behaviors containing faulty states general sensors pv associated failuremode   need deterministic state transition variable determines information conveyed   uniquely determined state transition   input observability modeled associating    diagnosability   each state non set possible outputs   possible model different forms observation    runtime diagnosis starts possibly partial initial   information conveyed sensors uncertain  knowledge observes sequence inputs outputs   paper present input state output spaces tries update belief state estimate possible   plant means assignment input state output    states plant instance commanded open   variables ranging finite sets values transition pv sensed open problem   observation relation compactly presented boolean   diagnosed sv pv stuck                                                                                                                 diagnosis pv sensors working correctly ideally diagno­  sis function return belief states specific   small possible include actual state plant       intuition correct diagnosis values en­                                                                                    figure  critical pair   compass potential current states miss   actual state following restrict cor­  rect diagnosis functions      diagnosability aims detecting parts hidden   state accurately tracked looking observable   traces use diagnosis conditions specify infor­  mation state interested distinguishing   definition  diagnosis condition plant pair   nonempty sets states   express fault detection telling fault                                                                   diagnosability coupled reachability   present fault separation distin­  guishing different faults fault classes          approach reasoning diagnosability based   faulty intuitively diagnosis value satisfactory refutation search ways diagnosability   intersects sides condition example   property violated intuitively verify diagnos­  fault separation condition satisfied be­ ability checking does critical   lief state containing state pv faulty pair executions identical observable traces   sv faulty                                            leading leading figure    unrealistic require diagnosis pro­ definition  critical pair plant trace   vide correct exact state estimations instantaneously  diagnosis condition pair feasible executions   circumstances instance stuck pv stay   unnoticed long sv operated   require diagnosis able decide al­  ternative conditions state context   distinction critical                                                                  absence critical pairs given context                                                                  necessary sufficient condition diag                                                                 nosable context                                                                  theorem  diagnosable                                                                  critical pair     intuitively  defines initial conditions diag­ prove theorem introduce notion perfect di  nosability investigated inducing set disjoint agnosis written specific correct diagnosis   belief states basically initial belief state xq fall function assuming knowledge   belief states induced condition   definition  perfect diagnosis plant diag    stated  nosis function   example partition states according positions   pv sv capture assumption initially  given initial belief state trace returns   know positions characterizes pairs relevant exe­     exactly states reached through   cutions instance want express fact easy correct informative   controller commands sv open closed      diagnosis function correct   time case fault detection want state       observe condition diagnosable   elements pairs traces  plant context   faults second ones exactly fault  definition      notice expressing inadequate                    satisfies diagnosable condition   instance fault separation impossible con­ diagnosis values specific correct   strain runs different failures following diagnosis function   assume context given notion                  proof theorem  diagnosable     diagnosability precisely characterized follows       exist       diagnosis                                                                                                                          exist simple based idea state input                                                        output spaces plant encoded state                                                                  space kripke structure information inputs    exists critical pair                                                                  labeling transitions simply state      order search critical pairs build cou­ kp interpreted input pro­  pled twin plant written • siamese twins  cessed transition formally each state    plant copies inputs outputs  kp associated valuation characterizes triple    forced identical                                                 state output observed input                                                                  received dynamics directly induce dynam­                                                                   ics kp each feasible execution form                                                                                                     corresponding                                                                  path kp sequence stateswhere                                                                  each associated triple                                                                  mapping lifts coupled twin plant construction                                                                  description omit technical details having      following assume coupled twin plant     particular fact kripke structure as­   • given importance coupled twin plant sumed total state successor   construction shown following theorem                way possible assume analyzed paths                                                                  infinite inputs state possible   theorem                                                                  transition relation longer total stan­  feasible executions                        dard workarounds problem routinely used verifica­   feasible execution ■                    tion ai planning instance cimatti roveri   easily demonstrated induction length     following assume kripke structure   executions defini­                                  kpp corresponding coupled twin plant ■ given   tion  •                                                 second element model checking symbolic                            step case proved extend­    representation state kpp defined vec­  ing transition executions length                                                                  tor variables xxuy respectively ranging ar   theorem holds definition  transitions •    use formulae characterize sets   mimic transitions observation rea­  states kpp express atomic propositions   son base case                                      variables equalities variables                                                                  corresponding values pipvinput  close denotes    diagnosability model checking                            set states instance pv receives                                                                  close command variables type equated   work framework model checking clarke et al                                                                  pi sv ailuremode   sv ailure mode de­    formal verification technique increasingly ap­                                                                 scribes set states instances sv   plied design industrial digital systems com­                                                                 twin plant failure mode subset   munication protocols hardware design model checking al­                                                                 xxxxuxy described formula   lows verify possibly infinite behaviors                                                                  cx xyu instance formula   satisfy given property analyzed pre­                                                                        expresses state twin plant instance   sented kripke structure properties expressed                                                                   second  similarly proposi  temporal logic emerson  model checking algo­                              rithms based exhaustive exploration kripke   tional formula expressing symbolic form equivalence   structure technique completely automatic     relation   property violated produce counterexample    ingredient model checking use   simulation witnessing violation symbolic model check­     temporal logics characterize behaviors   ing mcmillan  based manipulation sets      time use ltl linear temporal logic emerson    states described boolean formulae efficient engines    formulae constructed starting combining atomic   binary decision diagrams bdds bryant          propositions boolean operators temporal modalities   sat solvers moskewicz et al   provide basis ltl formulae   efficient representation exploration search space  future futuresometimes     approach diagnosability inherits elements     future time step   model checking plant asso­  ltl formula holds path tt written   ciated kripke structure kp representing behavior   true step  written  atomic propo­  makes possible directly analyze plant sition iff true according assignment   model checking techniques kripke structure basically   associated ith state boolean connectives   nondeterministic transition transitions  standard interpretation   labeled information associated states each          interesting cases temporal operators   state associated valuation state variables   structure mapping plant kripke structure                                                  iff exists                                                                                                                 diagnosis module svtype cmdin                                        module main                                                                  var                                                                     svcmd   nocmd open close    module pvtype                                                  pi  extypesvcrnd     var pneumaticslineln  abvthreshblwthresh                    extypesvcmd     var valvepositionvalue  openclosed                       invar    var mode  stuckopennominalstuckclosed                     pipvsenseopen  ppvsenseopen          define faultmodes  stuckopenstuckclosed     define broken  mode faultmodes                             figure  smv schema twin plant    define brokencount  broken    define brokenprob       case                                                         experimental evaluation        mode  stuckopen          mode  stuckclosed                                     analyzed practical applicability approach                                                          livingstone framework livingstone model     esac                                                       based health monitoring developed nasa ames                                                                  williams nayak  uses model physical   module extype svcmdin                                 spacecraft infer state diagnose    sv  svtypesvcmdin                                      faults observations livingstone three parts     pv  pvtype                                              remote agent ra autonomous spacecraft con­                                                                 troller developed nasa ames research center jointly    define brokencount  svbroken                           jet propulsion laboratory ra al                                  pv broken                                                                   software control operational spacecraft muscettola et                                                                  al  livingstone used applica­                                                                 tions control insitu propellant production            figure  smv model example               spp mars missions clancy et al                                                                   monitoring mobile robot simmons et al   in­                                                                 telligent vehicle health management ivhm experimen­                                                                 tal space transportation vehicles bajwa sweet                                                                     livingstone uses qualitative relational model describing                                                                  evolution observable hidden variables continuous                                                                  physical domains abstracted discrete intervals                                                                  low nominal high each component mode                                                                  variable identifying nominal fault modes livingstone                                                                  models specified hierarchical declarative formalism      diagnosis condition context represented    called jmpl using graphical development environment   temporal logic formula holds iff               livingstone observes commands issued plant   critical pair express reachability • criti­ uses model predict plant state compares   cal pair diagnosis condition formula           predicted state observations received actual                           model checking run       sensors discrepancy livingstone performs   problem  answer true                               diagnosis searching likely configuration   witness critical pair given con­ component modes consistent observations   text enforce initial condition                       livingstone models directly induce synchronous transi­  formula  conjunc­                                     tions systems similar plant model pecheur   tion effect restricting analysis paths simmons pecheur simmons  developed   kpp starting states satisfy taken            translator able convert livingstone model re­  account assuming characterization sets   lated set specifications language smv model   traces described ltl formula                     checker mcmillan  convert diagnostic   model checking problem corresponding diagnosability      traces terms livingstone model figure  outlines                                                                  structure example plant smv language each   practice simplifications possible       component type corresponding module                     expressed terms propositional   module statements define model sv pv   constraints hold states                   each components set variables defined   execution cases diagnosability context    dynamics directly induced livingstone   basically represented ltl formula                    model notice brokenprob variable numeri­                                            notice     cal value negated logarithm probability fail­  formula holds path condition holds con­       ure component   enables rough     ditions reached context does       analysis failure probabilities modules instan­  constraint executions formula equivalent  tiated ex module parameter representing                                                                  commands pv       diagnosis                                                                                                              
