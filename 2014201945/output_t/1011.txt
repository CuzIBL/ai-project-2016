               scalable    method     multiagent     constraint    optimization                                      adrian  petcu   boi faltings                                    adrianpetcu boifaltingsepﬂch                                      httpliawwwepflch                                      artiﬁcial intelligence laboratory                             ecole polytechnique  fed´ erale´ lausanne epfl                               ecublens ch  lausanne  switzerland                        abstract                          different variables state change distributed                                                        track algorithm requires message worst      present paper new complete method   case parallel algorithm exponentially      distributed constraint optimization based state changes kasif  resulting exponen      dynamic programming utility propagation  tially messages far draw      method inspired sumproduct algorithm    application distributed algorithms real      correct treeshaped constraint net world especially optimization problems noted      works paper show extend  maheswaran et al       algorithm arbitrary topologies using pseudotree leads believe search paradigms par      arrangement problem graph algorithm   ticular based dynamic programming      requires linear number messages max  appropriate discsp example algorithm incre      imal size depends induced width  mentally computes set partial solutions pre      particular pseudotree chosen                     vious variables according certain order use      compare algorithm backtracking algo  linear number messages messages      rithms present experimental results grow exponentially size algorithm      problem types report orders magnitude fewer parallelism      messages ability deal arbitrarily  recently sumproduct algorithm kschischang et al      large problems algorithm formulated    proposed certain constraint satisfaction      optimization problems easily applied problems example decoding acceptable com      satisfaction problems                    promise combines dynamicprogramming style explo                                                        ration search space ﬁxed message size                                                        easily implemented distributed fashion    introduction                                       correct treeshaped constraint networks  distributed constraint satisfaction discsp ﬁrst stud paper show extend algorithm arbi  ied yokoo yokoo et al  recently trary topologies using pseudotree arrangement prob  tracted increasing distributed constraint satis lem graph report experimental results algorithm  faction each variable constraint owned agent formulated optimization problems easily ap  systematic search algorithms solving discsp gener plied satisfaction problems having relations utility  ally derived depthﬁrst search algorithms based  allowed tuples negative values disallowed  form backtracking silaghi et al  yokoo et al  tuples utility maximization produces solution  meisels zivan  hamadi et al         assignment utility     recently paradigm asynchronous distributed search rest paper structured follows section   extended constraint optimization integrating presents deﬁnitions notation use section   bound propagation mechanism adopt  modi et al  presents optimization procedure trees section                                                  optimization graphs section  proves complexity    general optimization problems harder solve equal induced width section  compares theoreti  discsp ones goal just ﬁnd solution cally algorithm aproaches section  presents  best requiring exploration search experimental results conclude section   space common goal distributed algorithms  minimize number messages required ﬁnd solution  deﬁnitions  notation    backtracking algorithms popular centralized  systems require little memory dis discrete multiagent constraint optimization problem                                                                                 tributed implementation best mcop tuple  basis backtrack search control shifts rapidly •   xm set variablesagents  •    dm set domains variables      each given ﬁnite set possible values      •   rp set relations relation ri                                        function di ×  × dik →  denotes      utility assigned each possible combination      values involved variables    paper deal unary binary relations  wellknown higher arity relations expressed  terms little modiﬁcations mcop value  combination allowed goal ﬁnd assignment ∗  variables xi maximizes sum utilities  figure  example pseudotree arrangement    node xk deﬁne rkxj   relations  xk neighbor xj                                  distributed  constraint optimization                                                             general networks    distributed  constraint  optimization          apply dtreelike algorithm cyclic graph ﬁrst     treestructured  networks                          need arrange graph pseudotree known                                                        arrangement possible graph  treestructured networks polynomialtime complete opti  mization methods developed sumproduct  pseudotrees  algorithm kschischang et al  dtree algo deﬁnition  pseudotree arrangement graph  rithm petcu faltings                rooted tree vertices property    dtree agents send util messages utility vectors adjacent vertices original graph fall  parents child xl node xk send xk vec branch tree figure   tor optimal utilities u∗ vj  achieved                        xl                              pseudotrees investigated means  subtree rooted xl plus rlxk  compatible                                                      boost search freuder  freuder quinn   each value vk xk vector domxk values dechter  schiex  main idea use    leaf nodes immediate compute valu search relative independence nodes  ations just inspecting constraints lying different branches pseudotree possible  single neighbors initiate process each node perform search parallel independent branches  xi relays messages according following process figure  shows example pseudotree shall                                                        refer rest paper consists tree edges    • wait util messages children shown solid lines edges shown dashed lines      respective subtrees disjoint summing spanning tree − − −      xi computes utility each values path graph entirely tree edges      gives subtree rooted treepath treepath associated backedge      gether relations xi parent xj treepath connecting nodes involved backedge      enables xi compute exactly utility note arrangement pseudotree      achieved entire subtree rooted xi taking tree path included branch tree      account compatibility each xj’s values each backedge higher node involved backedge      xi send xj util message xi stores called backedge handler dark nodes         optimal values corresponding each value xj deﬁne      • root node xi compute optimal overall util • px  parent node single node higher      ity corresponding each values based hierarchy pseudotree connected      incoming util messages pick optimal node directly through tree edge       send value message children informing • cx  children node set nodes lower      decision                                   pseudotree connected node di      receipt value message parent    rectly through tree edges cx       each node able pick optimal value                                                          • ppx   pseudoparents node set      previously stored optimal value corresponding                                                            nodes higher pseudotree connected      value parent chosen pass children                                                            node directly through backedges       point algorithm ﬁnished xi                                                          • pcx   pseudochildren node set    correctness algorithm shown original nodes lower hierarchy pseudotree  paper fact requires linear number connected node directly through backedges  messages linear memory                              cx   known dfs depthﬁrst search tree algorithm  dpop   distributed pseudotree  pseudotree inverse does hold optimization procedure general networks  dfs tree obtained dfs traversal graph  dpopx   starting nodes chosen through distributed                                                              each agent xi executes  leader election algorithm just ﬁne lack   space present procedure creation  phase  pseudotree creation                                              dfs tree refer reader techniques like barbosa  elect leader ∈                                                                                  hamadi et al                                 elected leader initiates pseudotree creation    dpop   algorithm                                 xi knows pxi ppxi cxi pcxi                                                            phase  util message propagation  algorithm  phases agents establish                                                            childrenxi   xi leaf node  pseudotree structure section  used fol  ut il px  ← compute utilspx  ppx   lowing phases phases util            xi                                                                                         send messagepxi ut ilxi pxi  value  propagations similar ones  activate util message handler  dtree   section  refer algorithm  formal  phase  value message propagation  description algorithm rest section  activate value message handler  detailed description util value phases     end  algorithm  util propagation                                          dtree util propagation starts leaves  util message handlerxkut ilxk xi  pseudotree propagates pseudotree  store ut ilxk xi  through tree edges easy agent identify  util messages children arrived                                                             parentxinull means xi root  leaf pseudotree    ∗                                                               vi ← choose  optimalnull  single tree edge figure                                     ∗    tree network util message sent node par  send aluexi vi  cxi  ent dependent subtree rooted respective   node links parts tree constraint  ut ilxi pxi ← compute utilspxi ppxi  node parent example consider   send messagepxi ut ilxi pxi                                                           return  message → message clearly dependent                                                            target variable links                                                           value  message  handlerv aluexi      node                                                              xi                                                                           ∗          xi    network cycles each backedge pseudotree  add xk ← ∈ alue agent view                                                                                    xi  produces cycle message sent node parent       ∗                                                           xi ← vi  choose  optimalagent view  depend variables parent hap                xl                                                           send alue    xl ∈ cxi  pens backedge connecting sending node              xi  variable example consider message                                                            choose optimalagent view  →  figure  utilities   subtree rooted achieve dependent                                                                ∗  parent → connected   vi ← argmaxvi       ut ilxl vi agent view  through backedge → account                    xl∈cxi  dependency sending message                   ∗    dynamic programming approach comes   return vi                                                            play compute optimal utilities subtree                                                           compute  utilspxi ppxi  achieve each value combination tuple hx xi  assemble message hypercube  dimen  combinations values xk ∈ xi                                                             let xj parentxi  sions target variable                                                             similarly dtree compute vector ut ilx xj   edge handler send table                          ∗                            key difference dtree dpop          utilxi vi vj  vj vj ∈ domxj                                                             messages travelling through network dtree     assemble hypercube ut ilxi xj   single dimension linear domain size vectors totaling xi   dimensions                                                            target variable dpop messages multi return ut ilxi xj   ple dimensions target variable  each context variable                                                                         m−                                                          →                                                                                       ∗          ∗              ∗     combining messages  dimensionality increase                  ux    ux     ux  let consider example receives  messages                                 children  message            n−    ∗   n−     ∗   n−         ∗   n−                                                        ux    ux     ux   context context  dimension target variable dimension table  util message sent figure   context variable respectively thereforetheir dimensionality  needs send message connected induced width maximum number  parent considers possible values parents node induced graph  each combinations values shown dechter  width tree  context variables considered backedges  actually backedges ones  values chosen optimal utilities inﬂuence width single backedge produces induced  each tuple  × ×  achieved note width  construction induced tree  context variable target variable easy backedges produce increases  message collapses  dimensions              width treepaths overlap edge    think process cross product mes respective handlers different ef  sages →  →  resulting hypercube fects width combine width given  dimensions followed projection size maximal set backedges  axis retains optimal utilities tuples lapping treepaths distinct handlers   ×  optimizing wrt given     during util propagation message size varies                                                        largest message dimensions  collapsing messages  dimensionality decrease                                                        seen dimension added message  multidimensional util message reaches tar                                                                         edge xi handler ﬁrst encountered propa  variable occupies dimension message gation travels through treepath associated  backedge handler target variable optimizes backedge eliminated projection mes  context outgoing message looses respective                                                        sage arrives xi maximal dimensionality  dimension                                            given maximal number overlaps treepaths asso    example initially present ciated backedges distinct handlers  context message → message  shown maximal dimensionality  arrives does inﬂuence equal induced width                   upper parts tree ”optimize away”  simply choosing best value each value exponential size messages necessarily problem  parent normal dtree process setups depending resources available  edge handler case appears extra duced width  low width problems generate small messages  dimension messages travelling lower end maximum message size limited  edge through tree path associated serialize big messages letting backedge handlers  edge → →                    ask explicitly valuations each values se                                                        quentially each message customizable size  value  propagation                                      workaround exponential memory possible  value  phase similar dtree addition renouncing exactness propagating valuations                            xj  parent’s value alue message node xj                            xj                      bestworst value combinations upperlower bounds instead  ceives parent contains values vari combinations  ables present context xj’s util message                                             ∗  parent sends alue ←   comparison approaches         alue       v∗   v∗         sends             ←     ←     sends  schiex schiex  notes fact far pseudotree    alue      v∗    v∗               ←      ←                       arrangements mainly used search procedures                                                        essentially backtrackbased search branchandbound    complexity   analysis                              optimization good examples distributed  construction number messages algorithm pro depthﬁrst branch bound ddbb distributed iterative  duces linear −  util messages  through deepening did adopt synchronous branch bound  each treeedge number nodes problem sbb iterative distributed breakout idb  linear size value messages  through each edge procedures worst case complexity exponential  number edges dfs construction produces depth pseudotree arrangement basically  linear number messages good algorithms require  × variables longest branch root leaf  messages complexity algorithm lies instantiated sequentially value combinations  size util messages                            tried shown bayardo miranker                                                         ways obtain shallow pseudotrees loga  theorem  largest util message produced algo  rithmic factor induced width require intri  rithm  spaceexponential width pseudotree cate heuristics like ones freuder quinn   induced dfs ordering used                     maheswaran et al  adapted  proof  dechter dechter  chapter  pages  distributed setting noted authors  describes ﬁllup method obtaining induced width second paper  build induced graph dfs traver contrast approach exhibits worst case complexity  sal pseudotree ordering graph process exponential width graph induced pseu  nodes recursively order dotree ordering arnborg shows arnborg  ﬁnd  node processed parents connected ing minwidth ordering graph nphard howeverthe dfs traversal graph advantage pro algoscenario test test test  test  duces good approximation easy implement mcn  pass         distributed context coupled fact depth mlsp pass      pseudotree irrelevant complexity means mcn  pass            algorithm works simple dfs ordering  mlsp  pass                  fundamental difference approaches dpop                                consider problem ring nodes dfs order  ing graph yield pseudotree height table  dpop vs  adopt versions number messages  edge induced width  backtrack sensor allocation problems  ing algorithm time exponential algorithm  linear message size od exponential  complexity translates directly explosion number variables explanation algorithm pro  messages exchanged backtrackingbased algorithms duces linear number messages  applied large systems             regarding size messages problems    furthermore shown dechter dechter fat graphs low induced widths  basically given  tah  induced width intersections corridors algorithm em  equal pseudotree height conclude ploys linear messages parts problems  theoretically algorithm intersections created  messages   pseudotree backtrackbased algorithm dimensions case  values each  pseudotree ordering fair say fact gives algorithm ability solve arbitrarily  aproach generate big messages worst case large instances particular kind realworld problems  ﬁnd proper tradeoff number  size messages transmitted through    meeting  scheduling                                                         experimented distributed meeting scheduling    experimental    evaluation                         organization hierarchical structure tree depart  usual performance metrics distributed algorithms ments nodes set agents working each                                                                                                         number messages number synchronous cycles partment csp model peav model ma                                                                             required ﬁnd optimal solution linear heswaran et al   each agent multiple variables  case number messages section  number start time each meeting participates  synchronous cycles times height pseu  timeslots values mutual exclusion constraints im  dotree util propagation value propagation posed variables agent equality constraints  introduce maximal message size metric imposed corresponding variables agents                                                        volved meeting private unary constraints placed    sensor networks                                  agent variables show values                                                        each meetingstart time random meetings generated  experimental setups sensor grid testbed each certain utility each agent objective  bejar et al  brieﬂy set targets sensor ﬁnd schedule maximizes overall utility  ﬁeld problem allocate  different sensors each table  shows algorithm scales size  target npcomplete resource allocation problem problems notice total number messages    bejar et al  random instances solved includes value messages linear size  awc  complete algorithm constraint satisfaction fact intraagent subproblems denser rest  problems relatively small  sensors maximum  problem highdimensional messages likely  targets problems intractable virtual intraagent messages actually transmitted  initial experiments setup solve optimality prob network knowledge far largest  lems grid  sensors  targets optimization problems solved complete distributed al    setup maheswaran et al  gorithm  agents  meetings  variables   corridors composed squares indi straints largest reported previous experiment mah  cate areas observed sensors located each ver eswaran et al   agents  meetings  vari  tex square order square ”observed” ables  constraints solved using adopt   sensors vertices need focused respective  square depending topology grid sensors  shared squares observe  conclusions future work  time authors test  improved versions presented paper new complete method dis  adopt  current state art mcop  differ tributed constraint optimization method utility  ent scenarios corridors shapes capital propagation method extends tree propagation algorithms  letters results comparison like sumproduct algorithm dtree work arbi  dpop  table  dramatic reduction trary topologies using pseudotree structure requires  number messages required cases orders linear number messages largest exponen  magnitude small problem instances  tial induced width particular pseudotree cho
