                      probabilistic consistency boosts mac sac                                   deepak mehta∗    mrc van dongen                      science department university college cork ireland                          abstract                          grained arc consistency algorithms ac mackworth                                                         ac bessiere r´egin  competi      constraint satisfaction problems csps ubiq tive algorithms repeatedly carry revisions      uitous artiﬁcial intelligence backtrack al require support checks identifying deleting unsup      gorithms maintain local consistency dur ported values domain variable      ing search facto standard   difﬁcult problems revisions values suc      solve csps maintaining higher levels consis  cessfully ﬁnd support say ineffective      tency generally reduces search effort                                                        straint propagation occurs example rlfap       ineffective constraint propagation                                                        solved using mac mac equipped      penalises search algorithm terms time domdeg variable ordering heuristic  total      reduce ineffective constraint propagation visions ineffective avoid ineffective propa      effectiveness search algorithm gation considerable work saved      enhanced signiﬁcantly order use                                                          recently singleton arc consistency sac debruyne      probabilistic approach resolve propa                                                        bessiere  getting attention      gate idea perform                                                        stronger consistency ac avoid      useful consistency checking seeking                                                        unfruitful exploration searchtree pointed      support high probability sup                                                        earlier strength local consistency increases      port exists idea probabilistic support                                                        does ineffective propagation applying      ference general applied kind                                                        search expensive terms checks time      local consistency algorithm shall                                                        maintaining during search expensive      study impact respect arc consistency                                                                 cpai                  singleton arc consistency sac experimental       ’     workshop mehta van dongen                                                                   sults demonstrate enforcing probabilistic sac presented probabilistic approach reduce ineffec      enforces sac requires signif tive propagation studied respect arc consistency      icantly time sac likewise maintaining random problems probabilistic approach avoid      probabilistic arc consistency maintaining prob process seeking support probability      abilistic sac require signiﬁcantly time existence carefully chosen thresholdthis      maintaining arc consistency maintaining sac  way signiﬁcant work terms support checks                                                        time saved    introduction                                         paper present extensive investigation                                                        study impact using probabilistic approach                              csp  constraint satisfaction problems  ubiquitous ar ac sac lsac limited version sac  tiﬁcial intelligence involve ﬁnding values problem proposed paper variety problems  variables subject constraints simplicity restrict                                                                                             resulting algorithms probabilistic arc consistency pac                     csp  attention binary backtrack algorithms main probabilistic singleton arc consistency psac proba  tain local consistency during search bilistic lsac plsac main contributions  facto standard solve csps maintaining higher level follows investigate threshold main  local consistency andor during search usually taining pac mpac performs best different classes  duces thrashing behaviour backtrack algorithm random problems second carry experiments deter  ineffective constraint propagation mpac does variety known problems  creases penalise algorithm terms time cluding realworld problems ﬁndings suggest mpac                  ac    arc consistency   widely used local consis usually requires signiﬁcantly time macnextwe  tency technique reduce search space csps coarse    ∗the ﬁrst author supported boole centre research probabilistic arc consistency proposed paper  informatics                                       lation mentioned horsch havens                                                     ijcai                                                     examine performances psac plsac used  probabilistic support inference  preprocessor search experimental results demon                                                        traditional approach infer existence support  strate enforcing probabilistic sac lsac al                                                        value ∈ dx dy identify ∈ dy  ways enforces sac lsac usually require signiﬁcantly                                                        supports usually results sequence support  time finally investigate impact maintaining                                                        checks identifying support needed know  psac plsac during search various problems                                                        ing support exists notions support  sults show signiﬁcant gain terms time quasigroup                                                        condition scandarevision condition rc introduced  problems overall empirical results presented paper                                                        mehta van dongen reduce task iden  demonstrate original algorithms outperformed                                                        tifying support extent arc consistency algo  probabilistic counterparts                                                        rithms sc holds respect guar    remainder paper organised follows sec                                                        antees support dyifrc holds  tion  gives introduction constraint satisfaction arc guarantees values dx  sistency algorithms section  introduces notions support dy following paragraphs  probabilistic support condition probabilistic revision                                                        scribe special versions sc rc facilitates  dition experimental results presented section  fol introduction probabilistic versions  lowed conclusions section                                                           let cxy constraint yleta ∈ dx                                                        let rydacy   dy values removed    preliminaries                                      ﬁrst arc consistent domain ythesupport count                                                        respect denoted sc  number  constraint satisfaction problem deﬁned                          ry                                  dx ∈d            values ac  supporting  note      set   variables nonempty domain      forall   bound number lost supports yif  ∈vand set  constraints subsets vari   ry                                                   en −   sc                     supported   ables thedensity csp deﬁned           dition called special version support condition  binary constraint cxy variables sub                                                        example dacy  scx aand ry    set cartesian product dx dy speciﬁes                                                                                     value removed ac thensc holds  allowed pairs values thetightness support dy probability   constraint cxy deﬁned  −cxy  dx × dy                        dy       ∈ dy               yb                  need seek support   value          denoted     called support  given arc ythesupport count  ∈ cxy similarly called support                                                        respect denoted scx yisdeﬁnedbyscx  yb ∈ cxyasupport check test ﬁnd                                                        min scx aa ∈ dxifsc    ry   values support each directed constraint graph each value dx supported condition spe  csp graph having arc each combination                                                    cial version called revision condition mehta  mutually constraining variables  use                                                                                           van dongen example ac            denote directed constraint graph input csp scx yand  ry  each value ∈ dx    avaluea  ∈ dx arc consistent ∀y ∈vconstraining                        dy                                                      dy             supported value  probability     value supported value acsp    need revise dx dy  arc consistent ∀x ∈v dx  ∅and∀a ∈                                                          examples discussed ry thensc  dx arc consistent denote csp obtained                                                        rc fail despite having high probability  enforcing arc consistency acp variable                       acp              acp⊥       support existence algorithm forced search  domain   wedenoteitas              dy avoiding process seeking support  usually input csp transformed arc consistent high probability worthwhile order  equivalent starting search domain                                                        notions probabilistic support condition pscand  initial arc consistent equivalent input csp                                                        probabilistic revision condition prc introduced  ﬁrst arc consistent domain xweusedacx ﬁrst                                                        mehta van dongen athepsc  holds  arc consistent domain xanddx current domain                                                           respect  probability support exists  thecsp   obtained   assigning value  dy carefully chosen threshold  variable denoted pxathevaluea ∈ dx                                                      acp     ⊥         prc holds arc    probability having  singleton arc consistent xa acsp     support each value ∈ dx dy  singleton arc consistent each value each carefully chosen threshold  variable singleton arc consistent                                                          let psxya probability exists sup    mac  backtrack algorithm maintains arc consis                                                        port dy assume each value  tency variable assignment forward checking                                                        dacy equally likely removed during search  fc considered degenerated form maciten                                                        follows  sures each value domain each future variable                                  fc consistent supported value assigned                 ry      dacy                                                               psxya −                           past current variable constrained msac                 scx  scx  backtrack algorithm maintains singleton arc consis  tency paper familiarity arc consis let   ≤ ≤  desired threshold psxya ≥  tency algorithm ac mackworth  assumed    support dy probability                                                    ijcai                                                                                                         function pac current var boolean   condition called probabilistic sup begin  port condition pscinmehta van dongen aif    holds process seeking support begin  dy                                     select ∈        avoided example      ac                eﬀective revisions   scx time  ry  thenpsc holds    each ∈  support dy probability  remove                                                         current var    let psxy probability values ac   revisex changex  exists support yifpsxy ≥                                                                                          dx                                           revisep  changex  each value    supported probability      dx∅  condition called probabilistic revision return false  condition holds revision dx dy changex                                                               eﬀective revisions  eﬀective revisions                                                                   skipped interested reader referred mehta                                                               eﬀective revisions  van dongen details                                                                                                                ∪y ∈    psy                                                            eﬀective revisions      pac                                                                                                                          ∪y ∈  psy  psc prc embodied coarsegrained ac al return true                                                        end  gorithm figure  depicts pseudocode pactheresult              figure  pac    incorporating psc prc ac mackworth  function revisep var changex  depending threshold achieve begin                                                          changex  false  arc consistency psc holds process each ∈ dx  identifying support avoided depicted figure  psxya ≥                                                              ∗      ∗  prc holds exploited adding arcs                                                             queue case corresponding arc added b ∈ dy supports  queue depicted figure  note coarse dx  dx                                                                                                              oed                   changex  true  grained arc consistency algorithms require revisions  end  worstcase make problem arc consistent nev  ertheless maximum number effective revisions       figure  algorithm revisep  single value deleted domain  exceed ond irrespective algorithm used examine usefulness psac plsac used  optimal nonoptimal worst case preprocessor maintained during search      oed  − nd  form            ineffective revisions order use psc problems studied  prc support count each arcvalue pair used model gent et al  random problems  computed prior search   pac makes problems literature evaluate com  problem fc consistent   pac makes prob petence probabilistic consistencies model random  lem arc consistent support counters represented                         oed                                                 csp instance represented      num        exceeds spacecomplexity ac ber variables uniform domain size num  spacecomplexity pac oedtheworst                                                 oed                     ber constraints number forbidden pairs  case time complexity pac   use psc values each combination parameter  instances  prc pac presented way idea generated mean performances reported  clear possible taken real im maining problems odd  used                                         plementation mehta van dongen describes benchmarks international csp solver com  implement psc prc efﬁciently                  petition described boussemart et al                                                        formally oddeven problem undirected constraint    experimental results                               graph cycle variables domain each vari    introduction                                     able     each constraint cxyifax odd                                                        supported odd values dythe  overview                                                        problem unsatisﬁable odd  present empirical results demonstrating practi intention compare general  cal use psc prc investigate probabilis purpose propagation algorithms specialpurpose al  tic consistencies particularly probabilistic arc consistency gorithms make use semantics  pac probabilistic singleton arc consistency psac straints readers argue probabilistic  limited version psac plsac ﬁnd straint propagation algorithms compared  threshold maintaining pac mpac performs specialpurpose propagation algorithms example  best experimenting model random problems known antifunctional constraints  carry experiments determine mpac does need look support unless value left  compared mac fc results fc  included show mpac better mac problem mentioned invited talk ”towards theo  problems fc better mac butaswellason retical frameworks comparing constraint satisfaction models  problems mac better fc finally algorithms” peter van beek cp’                                                    ijcai                                                     table  comparison fc macandmpac     table  comparison fc macandmpac   random problems                             variety known problems       n t algorithm  chks   time     vn         problem  algorithm   chks time   vn    rev                   fc                       fc                   mac         frb mac                            mpac                       mpac                           fc                      fc                   mac     frb mac                           mpac                    mpac                           fc                      fc                   mac          scen    mac                               mpac                       mpac                            fc                fc                    mac       scen   mac                             mpac                   mpac                           fc                    fc                  mac         scen mac                          mpac                       mpac                          fc                        fc                  mac             scen mac                         mpac                          mpac                                                                            fc                                                                        bqwh  mac           improve constraint propagation           mpac                                                                               fc             probabilistic algorithms improved similarly bqwh  mac                                                                             mpac           implementation details                                             fc                                                                    geom     mac             used implement arc consistency component        mpac           mac sac reason ac chosen eas      fc                                                                      qa     mac           ier implement efﬁcient example best       mpac          solvers binary overall category inter     fc                                                                     qa     mac           national csp solver competition based acsim            mpac          ilarly pac used implement probabilistic arc      fc                                                                      odd  mac                   sistency component probabilistic versions mac        mpac                   sacsac used implement singleton arc consistency          fc                                                                     k⊕q   mac         algorithms equipped domwdeg bousse              mpac         mart et al  conﬂictdirected variable ordering heuris      fc                                                                     k⊗q   mac         tic performance algorithms measured terms        mpac         checks chks time seconds time number  visions rev number visited nodes vn constrained problems ﬁrst  rows fc better  experiments carried pc pentium iii having  mac hard sparse tightly constrained problems   mb ram running  ghz processor linux rows mac better fc results demonstrate  algorithms written                         mpac   better best fc mac                                                        classes random problems number nodes    probabilistic arc consistency                    visited mpac   nearer mac visited  maintaining probabilistic arc consistency way fc ﬁrst time algorithm presented  ineffective constraint propagation minimised outperforms mac fc classes problems  simultaneously effective propagation seeing good performance mpac threshold values  avoided depends heavily threshold value ranging   decided choose   fore natural question values  mpac remainder experiments  solves tradeoff terms time effort                                                        problems literature  quired search required detect inconsistent val  ues ﬁnd experiments designed exam table  shows results obtained instances va                                                        riety known problems  forced random binary prob  ine behaviour mpac different thresholds ranging    steps  random problems note lems frb frb  rlfap instances scen                                                        scen  modiﬁed rlfap instances scen   mpac maintains arc consistency   forward checking known hard scen  average  satisﬁable instances bal                                                        anced quasigroup holes problems bqwh   dense loosely constrained random csps fc performs bet                                                        bqwh   average   satisﬁable  satisﬁable  ter mac hard sparse tightly constrained random                                                        instances geometric problem geom  instances  csps mac performs better fc chmeiss sa¨ıs                                                         attacking prime queen problem qa qa   studied mpac classes problems                                                        stance oddeven problem oddeven   instances  random problems                                       queenknights problem k⊕q k⊗q  investigations inferring existence observe table  terms time  support likelihood roughly   problems fc better mac mac bet  enables mpac outperform mac fc classes ter fc surprising fc inferior  problems table  presents results hard dense loosely mac anticipated partially robust                                                    ijcai                                                     ness conﬂict directed variable ordering heuristic table  comparison sac lsac psac plsac  easy problems expense entailed computing problem        sac      lsac    psac    plsac                                                                   chks            number supports each arcvalue pair mpac bqwh  time            beneﬁcial time required initialise sup     rem                                                                                              chks            port counters furthermore harder bqwh  time             instances require  second solve mpac gen    rem                                                                                              chks      erally pays avoiding ineffective propagation qa time              summary visiting extra nodes mac mpac able      rem                                                                                              chks      save ineffective propagation solves problem qa time                                  mac     fc                                   rem                         quickly                                      chks        note domain size small values k⊕q time                                                                              rem                  supports keeping threshold high fails      chks      psc prc quickly likelihood support exis k⊗q time                                                                                rem                  tence decreases rapidly respect number values     chks       removed domain prospect effective prop scen time                                                                                  rem               agation increases turn permits mpac act like mac    chks      example case odd  domain size each scen time                                                                              rem                  variable  each arcvalue pair supported  values  chks                                       problem fc visits exactly  −  nodes   scen time                                                                               rem                      mac  visits  nodes  mpac vis           chks                                                                js   time                 nodes probability support existence     rem                  value dy  soon  values       chks                                                           js   time                removed   threshold set          rem                  psc prc fails enabling mpac maintain arc consis    chks                                                               time               tency shows mpac right threshold    rem                         able resolve propagate               chks                                                                 time                  experimented mac uses opti         rem                             mal arc consistency algorithm ac  problems mac consuming time  mac huge overhead maintaining auxil algorithms sac lsac psac probabilistic sac  iary data structures van dongen               plsac probabilistic lsac applied forced random                                                        problems rlfap modiﬁed rlfap quasigroup holes    probabilistic singleton arc consistency          queensknights attacking prime queen jobshop instances  stronger consistencies arc consis composed random problems table  presents results  tency standard make problem fullpartial arc instances problems space restric  sistent andor during search recently tion value threshold used psc prc  surge sac bessiere debruyne  table  rem denotes number removed val   lecoutre cardon  preprocessor mac ues intention test preprocessing sac  advantage sac improves ﬁltering power effect global cost solving problem  ac changing structure problem op results achieved doing consid  posed stronger consistencies kconsistency erably computation using probabilistic support infer   establishing sac expensive ence input problem singleton arc  huge overhead especially loose problems sistent psac plsac avoid unnecessary work                                                                                                 lecoutre cardon  investigate advantages example jobshop instances js js  psac                                                                                disadvantages applying psc prc sac     plsac spend times time coun    enforcing sac sac debruyne bessiere  terparts input problem singleton arc  style works having outer loop consisting variable consistent probabilistic versions algorithms ef  value pairs each acpxa⊥ deletes ﬁcient original versions problems  dx enforces ac fail remove exactly number values removed  problem sac main problem sac sac lsac consume signiﬁcantly time  deleting single value triggers addition variable example case attacking queen problems algo  value pairs outer loop restricted sac rsacal rithms remove number values psac                                                                                                gorithm prosser et al  avoids triggering plsac quicker order   sidering each variablevalue pair propose lim seeing good performance psac plsactheim  ited sac lsac lies restricted sac sac mediate question arises afford maintain dur  idea variablevalue pair arc ing search far sac used preprocessor  inconsistent pairs involving neighbours maintaining sac reduce number branches signiﬁ  variable added outerloop experience cantly cost constraint propagation  lsac effective rsac                     consume lot time maintaining depth                                                     ijcai                                                     
