           sispl interactive able                                    important drawbacks                synthesize functions examples                                      constructed expression necessarily                                                                                      recursive instance identity function           jeanpierre jouannaud france infered »  nil nil           mai treassistant institut programinati                                                            cons carx cdrx           universite paris vi                                                         thesys needs chosen examples           place jussieu                                                           particular contain stop condition            paris                                                                recursive function instance construc­                                                                                     tion function reverse requires following           gerard guho france set examples           maitre conference  laboratoire recherche                            nil  nil             en informatique                                                                         universite paris sud                                                        function constructed present              orsay                                                                iterative level instance thesis                                                                                      fails construct correct function corresponding           jeanpierre treuil france example             chercheur  laboratoire recherche en                                     thesys solve difficult problem           informatique                                                               does try generate partial simpler           universite paris sud                                                       problem correct            orsay                                                                solution use knowledge previously   research presented paper supported                                  stored data base   iklacesorl contract number                                            thesys efficiently used lqas                                                                                      important modifications                                  abstract                                                    method propose paper           sispi interactive goal                              different particular built capacity   automatic inference lisp functions                                   use professor interactive mode does   finite set examples fx                                 lie theorical groundwork allows   list belonging domain function                                  overcome previous drawbacks al­  want infer sispi able infer recur­                                  new ones appear   sive form linear recursive functions                                    recursion automatically infered   stopcondition sispl tries work                                  synthesis algorithm instance using exam­  example fails asks new ones                                 ple  stsp infers function   using method generating new partial sub                                 vp    problems sispl able perfect generated                                   simple functions sisp needs   recursive function gets correct                                    example fx                                                                                      case recursive expression infered                             introduction                                          stop condition sispl           paper sispl                                list long re­  goal automatic inference lisp func­                                presentative function instance   tions finite set examples lx                                 reverse obtained using example                                                                                       obtained   list belonging domain                                     function want infer                                                        function complicated sispl           problem originates general                                 fails construct correct function   build learningquest ionanswering                                 example tries work examples   lqas using functional method                                     function complicated   provide answer given question me­                                   sispl generates new partial simpler problem   thod propose sispl naturally adap­                                  defined terms   ted lqas developping                                   gy defined terms fx solve           field automatic programming                                new problem sispl needs new example     examples important piece recent work                                    fx used deduce example   thesys summers lj major result                                    y» gy« interaction used   work following using small number                                    sense asking new examples necessary   chosen examples                                                               sispl extensible potentiality   nil fnil fa thesys able                                   use self constructed knowledge data base   infer recursive expression  equivalent                                          objections raised interac­  belonging domain                                          tive method           small class functions                                 function needs examples   obtained summerss method works loo­                               infered professor   king recurence relation representati­                                appropriate sequence examples   ve predicates given input structure                                   exactly know class functions   recurence relation map functions                                 sispl able infer                                                                                      larger thesys instance   providing given outputs given in­                                                                                     pqrs»ppqpqrpqrs infered   puts using fixed point theorem cons­                                                                                     sispl using example half   tructed                                                                           function  infered          summerss method powerful                               thesys requires examples sispl fact                                                             auto prop  jouannauh                                                                                 hope sisp able infer larger                                   nodes joined instance    class linear recursive functions                                               pattern reduced                                                                                       node common pattern            ii general description method                                      reduced nodes              l§ngu§ge                                                                       §y£lt£sis fronon£exam£le            sispi infers functions defined character                                      synthesis consists three steps    strings abcd represented                                 sisp generates network called segmenta­   list                                                                 tion structure following process            sisp synthetizes lispfunctions built                                        generate segmentation pattern    following basic functions described                                   xythe generation gives sets pairs    ex amp                                                                       px» py cpy sx py kpxsy csy sx sy     lcar  cdr                                             long py sy choose    lrac  rdc abc                                      pair each set heuristic way each    conc ■ abcd                                                       pairs rename xy step     conct                                          sisp looks segmentation structure    pref bc abc • prefix                                    lattice minimal final nodes                                                  abc                             respectively types    suff ■ suffix                                 lattice stepwise constructed using algorithm                                                   dj                           defined follows    control structure using cond null                                       def initi ons             notionoftype                                                                 lat constructed lattice           type set lists defined                               step final step lat    rules summarised follows                                       lattice    set known inputs set out­                                          incomplete node lat node      puts fxm function synthetized                                relation ending node lat    types                                                                             owns entries connected    type lisp function                                  nodes called unsatisfied entries    set outputs restricted input                                           beg set nodes lat    type                                                                              unsatisfied    type lisp function                                   entri es    set gx type                                                    path beg           « segmentionpattern                                                  nodes lat oriented path           let function synthetized                                   starting node belonging beg    fx example inputoutput                                     ending path contain incomplete    function                                                                          nodes unsatisfied entries            sisp uses general heuristic create                               example lat    expression function    segmentation strings  fx    three consecutive segments           conct px  sx ■             conct py sy ►    denotes larger string common    px py denote prefixs    sx sy denote suffixs    building relations segments           segmentation pattern xy    defined network shown figure           network     seven nodes representing types respectively as­   sociated strings xycpxpysxsy     relations nodes each relation    consists function scheme i» i« •••     indicates input nodes                                                                                                nodes    incomplete nodes    order output node order                                                                                           nodes     unsatisfied entries    represented network double arrow                                          nodes complete nodes           note functions fx fy gpx gpy gsx                                          beg         gsy built sisp using basic functions                                                                                       algorithm     lcar cdr lrac rdc composition rule                                                                                                 lat «   choosen possible complexity                                                                                                look path    smallest number basic functions                                                                                                add path lat           cases segmentation pattern                                                                                               lf incomplete node lat    simpler                                                                                                   stop            strings nil                                                                                                   select minimal     associated nodes suppressed                                                                                                   demonstrated algorithm    pattern                                                                                                   generates set incomplete nodes            strings equal associated                                                                                                   totaly ordered lat                                                                auto prorv jonannauh auto prog jouannaud 
