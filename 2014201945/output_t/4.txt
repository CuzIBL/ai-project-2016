                             querydriven constraint acquisition      christian bessiere            remi coletta             barry o’sullivan            mathias paulin      lirmmcnrs                      lrd            science dept        lirmmcnrs  montpellier france       montpellier france           ucc ireland          montpellier france    bessierelirmmfr           colettalrdfr         bosullivancuccie         paulinlirmmfr                          abstract                          egy regardless classiﬁcation                                                        query size version space reduced half      modelling reformulation constraint net fore convergence version space achieved using      works recognised important problems   logarithmic number queries furthermore clas      task automatically acquiring constraint net sic setting query generated time polynomial      work formulation problem subset size version space acquiring constraint net      solutions nonsolutions presented works query generation nphard      literature choice subset aggravated fact constraint acquisition      assumed independently ac   ordering hypothesis space naturally deﬁned      quisition process present approach terms solution space constraint networks usu      interactive acquisition actively selects ally learn constraint level compact representation      good set examples show number  set solutions hypothesis main contribution      examples required acquire constraint network number algorithms identifying good queries ac      signiﬁcantly reduced using approach       quiring constraint networks empirical studies show                                                        using techniques number examples required ac    introduction                                       quire constraint network signiﬁcantly reduced work  constraint programming cp provides powerful paradigm relevant interactive scenarios users actively  solving combinatorial problems speciﬁca volved acquisition process  tion constraint networks remains limited special  ists ﬁeld approach automatically acquiring  constraint acquisition using conacq  straint networks examples solutions non                                                        constraint network deﬁned ﬁnite set variables  solutions proposed bessiere et al                                                         ﬁnite set domain values common knowl  straint acquisition formulated concept learning task                                                        edge shared learner user called  classical version space learning paradigm mitchell                                                        vocabulary furthermore learner disposal   extended constraint networks                                                        constraint library build compose  learned efﬁciently constraint networks com                                                        straints problem ﬁnd appropriate combination  plex acquire simple conjunctive concepts represented                                                        constraints consistent examples provided  propositional logic conjunctive concepts                                                        user sake notation shall assume  atomic variables pairwise independent constraint sat                                                        constraint deﬁned library binary  isfaction dependencies                                                        sults presented easily extended constraints    bessiere et al  choice subset solu                                                        higher arity demonstrated experiments  tions nonsolutions use learning assumed              independently acquisition process binary constraint ij binary relation deﬁned  paper present approach acquisition speciﬁes pairs values allowed variables                                                        xixj pair variables xixj called scope cij   actively assists selection set exam     ≤                                       ples used acquire constraint network through use instance  denotes constraint speciﬁed xx  learnergenerated queries query essentially com relation “less equal to” binary constraint net                                                        work set binary constraints constraint bias  plete instantiation values variables constraint  network user classify solution non collection binary constraints built constraint li                                                        brary given vocabulary constraint network said  solution ‘target’ network show number                                        examples required acquire constraint network signiﬁ admissible bias each constraint ij                                                                                   ··· bk    cantly reduced queries selected carefully     exists set constraints ij  ij                                                                          acquiring constraint networks computing good   cij  bij ∩···∩bij   queries hard problem classic query generation strat instance map assigns each variable xi                                                    ijcai                                                     domain value exi equivalently instance                                                      table  example clausal representation built  regarded tuple  instance satisﬁes                                                                       conacq each example ei xxxx  binary constraint ij pair xi xj element                                                          example clauses added  ij  say ij rejects instance                                                             ¬≥ ∧¬ ≥ ∧¬ ≥ ∧¬ ≥ ∧¬ ≥ ∧¬ ≥  satisﬁes constraint cthene called solution                                                             ¬≤ ∧¬ ≤ ∧¬ ≤ ∧¬ ≤ ∧¬ ≤ ∧¬ ≤                                                         −  called nonsolution                  ∨  ∨  ∨  ∨  ∨     finally training set ef consists set instances  classiﬁcation function  → anelement  feis called positive example acquire contains constraint  xthere  denoted element feis constraint pair variables each  called negative example denoted e− constraint example ﬁrst column table  shows clausal encoding                                                  network said consistent training set constructed conacq processed using set  positive example ef solution κe constraints bias reject                   −                       negative example nonsolution wealso    learning capability conacq improved  say correctly classiﬁes ef  given constraint bias                                                      exploiting domainspeciﬁc knowledge bessiere et al   training set theconstraint acquisition problem constraint programming constraints interdepen  ﬁnd constraint network admissible bias                        ≥      ≥                                                      dent constraints   impose  consistent training set                   striction relation constraint deﬁned scope    satbased algorithm called conacq presented xx crucial difference conjunctive  bessiere et al  acquiring constraint networks cepts atomic variables pairwise independent  based version spaces informally version space cause interdependency constraints network  constraint acquisition problem set constraint net redundant cij redundant network  works admissible given vocabulary bias straint network obtained deleting cij  consistent given training set denote                 ≥                                                      solutions  constraint  redundant each time  vbe  version space corresponding bias ≥ ≥                                                          present  training set  satbased framework version redundancy carefully handled want                                  space encoded clausal theory  each model accurate idea parts target network                                   theory  constraint network vb              precisely learned methods handle redun    formally constraint bias literal dancy proposed bessiere et al  add redun  atom bij negation ¬bij  notice ¬bij dancy rules based library constraints used  constraint merely captures absence bij build bias instance library contains  acquired network clause disjunction literals constraint type ≤ know ∀x ≤                                                represented set literals clausal theory ∧ ≤ → ≤ pair constraints  conjunction clauses represented set clauses ≤ij  ≤jk add horn clause ≤ij ∧≤jk→≤ik  interpretation map assigns each form background knowledge help learner  straint atom bij avalueibij   atransforma acquisition process  tion map φ assigns each interpretation  corresponding constraint network φi deﬁned according                                                        interactive acquisition problem  following condition cij ∈ φi iff cij  bij ∈                                                       reality cost associated classifying instances  ib   interpretation model true     ij                                                 form training set usually requires answer  according standard propositional semantics set                                                        human user seek min  models denoted modelsk each instance                                                        imise size training set required acquire target  κe denotes set constraints bij rejecting                                                      constraint network target network constraint net  each example training set theconacq al                                                        work ct expressing problem user mind  gorithm iteratively adds set clauses                ∈                                              given vocabulary constraint network    models     network φ correctly classiﬁes al instance positive example  ready processed examples plus ewhenanexamplee pos                           ¬b                     ∈       solution   itive unit clauses ij added all ij κ    during learning process acquisition  example negative clause     bij                                           bij ∈κe     knowledge help characterise training ex  added resulting theory encodes candi ample ideal acquisition system’s point  date networks constraint acquisition problem                                                      view acquisition carefully select ‘good’  vbe φm   ∈ modelsk                   training examples discuss section   example  conacq’s clausal representation wish   depth instances depending user  acquire constraint network involving  variables classiﬁes help reduce expected size ver                                                        sion space possible deﬁne query  xx domains dx        dx      use complete uniform bias  classiﬁcation assigned user follows  ≤  ≥ library  ≤ ij≤  deﬁnition  queries query classiﬁcation query  tains ≤ij  ij ≥ij  assume network wish instance built learner user                                                    ijcai                                                     classiﬁes query using function fqif seen considering literals  solution ct fqotherwise              added query query classiﬁed positive                                                                  ¬≥    ¬≥       ¬                                                         clauses               added    angluin angluin  deﬁnes classes queries               ≥   ∨≥    ∨    membership query exactly kind used  clause       added                                                                                          ≥       ≥  user presented unlabelled instance know example    asked classify formally deﬁne inter set false extra literal new example adds                                                              ¬                      active constraint acquisition problem                       κ     regard                                                        classiﬁcation new learned  deﬁnition  interactive constraint acquisition problem irredundant query                   given constraint bias unknown user classiﬁcation  function ftheinteractive constraint acquisition problem  optimal query generation  ﬁnd converging sequence  qqm queries                                                      technique presented section  guarantees each  sequence qi query relative newly classiﬁed query adds new khow                                     vb ei  ei   qqi  vb em          different irredundant examples different gains    note sequence queries built incrementally knowledge fact gain query directly                                                                                                      each query qi built according classiﬁca lated size κ classiﬁcation  tion qqi practice minimising length fq unary negative clauses added kthen  impossible know advance answers literals ﬁxed intermsofconacqwedo  user remainder paper direct access size version space unless  propose techniques suitable interactive learning wish perform expensive computation through                                                        clausal representation assuming models    query generation strategies                        uniformly distributed ﬁxing literals divides number                                                        models kiffq positive clause size    polynomialtime query generation                 added removing models distin  practice case example train guish queries regarded optimisticor  ing set does bring information optimalinexpectation  provided examples optimistic query gives large gain  considered far allow queries gener knowledge classiﬁed “in favour”  ated classiﬁcation known based cur tells little classiﬁed specif                                     rent representation version space  ask ically conacq larger κqk query qthe  user classify excessive number examples optimistic classiﬁed positive  improvement quality representation ver query allows set κqk literals  query  sion space target network exemplify problem classiﬁed negative just add clause size κqk  short example                                 optimistic query maximally informative –  example  redundant query consider acquisition sets literals introduces  – classiﬁed positive  problem three variables xxx minimally informative classiﬁed negative  mains dxdxdx            using  optimal query strategy involves proposing  constraint library example  given posi query reduce size version space half                tive example        ¬≥ regardless user classiﬁes deﬁne query  ∧¬  ≥  ∧¬   ≥  asking user classify   optimalinexpectation guaranteed       redundant constraints literal ﬁxed   regardless clas  rejecting forbidden constraint siﬁcation provided user formally query  network version space accepts             κqk size  classiﬁed positive                                                                                  propose simple polytime technique avoids set literal κ  set   proposing redundant queries user irredun illustrate sequence queries sufﬁcient  dant queries technique seeks classiﬁcation ex version space problem presented example   ample classiﬁed given current represen converge using queries optimalinexpectation  tation version space example classiﬁed example  optimalinexpectation queries want                                                 vbe  solution networks vbe  converge target network example                                       nonsolution networks vbe  solution constraint  network variables                       networks vbe  iff subset κek κe ob complete bias constraints ≤  ≥ recall hav                                                                                                  −  tained removing κe constraints appear ing processed set examples   negated literals alternatively non unique positive clause cl  ∨   ∨                                 solution networks vbe ifκek superset ∨  ∨  ∨  atoms ﬁxed                                                                            existing clause                            following   refers                                                                                               example  irredundant query consider ex   ¬≥  ∧ ¬≥ ∧ ¬≤ ∧ ∧ ¬≤ accord                                      ample  positive example consid ing notation clausal theory built conacq  ered query       irredundant having processed    ∧ cl table  shows                                                                                                                                      ijcai                                                                           table  optimalinexpectation query generation strategy example                              κek fe                                                    ∧ ¬   ∧       ∨  ∨  ∨  ∨                                                                                                                     ∧ ¬  ∧ ¬  ∧  ∨  ∨  ∨                                                                       ∧ ¬  ∧ ¬  ∧ ¬  ∧  ∨  ∨                                                                       ∧ ¬  ∧ ¬  ∧ ¬  ∧ ¬  ∧  ∨                                                                       ∧ ¬  ∧ ¬  ∧ ¬  ∧ ¬  ∧ ¬ ∧                                                                                              sequence queries optimalinexpectation uncertainty number constraints rejecting instance  version space obtained three ﬁrst examples pro implement query generation problem  cessed goal reduce vbe contain single hy step process algorithm  tries ﬁnd interpre  pothesis ﬁrst column query generated according tation solution φi  optimalinexpectation strategy second column gives −  ≤κsk≤t  where variation accepted            set κ constraints possible network size κqk query want generate  version space reject column clas algorithm takes input parameter set  siﬁcation user fourth column update constraints κqk included                                query  constraint explain later way monitor ‘direction’  possible version space reject want improve knowledge target net                                    classiﬁed positive sure  belong work user second                                         ¬      network version space conacq adds      solution φi query ﬁrst present algorithm                literal  removed cl unit propagation discuss complexity  process repeats decreasing size use implement strategies choosing values  cl literal time reducing version   space half finally example required en  sure version space converges target network  contains single constraint          algorithm query  generation  problem    note beginning example version                                                         input  bias clausal theory asetof  space vbe contained  possible constraint networks                                                         literals atargetsizeand variation  converge using log vb   queries   output interpretation                                                   optimal worstcase mitchell                   ←     example  example      foreach bij ∈ bij  ¬bij  ∈  κek  optimalinexpectation strategy requires  bij ∈ ← ∧ bij   redundancy prevent able gen ← ∧ bij ∨ bij   erate example given size κekforin  lower ← maxl−t −    stance consider acquisition problem using complete  upper ← minl−t    uniform bias  ≤  ≥ library  ← ∧ atleastlower ∧ atmostupper    target network processing initial    ∅                                                                          models       return model  positive example instance    possible  return “inconsistency”  constraints version space ≤ ≤ ≤ ≥ ≥   ≥ negative example  κek size  variables equal κek size  algorithm  works follows takes input tar  variables equal example κek size allowed variation  set literals  size  generated redundancy prevents gen concentrate idea build formula  erating examples                                model satisfy requirements listed                                                        initialised guarantee model    implementing strategies                        correspond network version space line                                                                                                  section  presented strategies generating each literal ij negated line  ij does                                                                                        queries optimalinexpectation optimistic belong weaddtheclause ij enforce                                                                                           strategies characterised target number constraint ij belong network φ models                                                          straints possible version space reject ‘then’ instruction line  solution                                                                                            stances try produce case φ rejected constraint constraint                                                                        redundancy constraints does ij negated longer version space                                                                  ⊆                                  exist network version space solution κ  force size κ                                                                                bij           κsk  useless ask classiﬁcation right interval belongs ‘else’ instruc  instance solution network ver tion line  add clause bij ∨ bij  ensure  sion space – section  allow bij complementary constraint bij                                                    ijcai                                                     sulting network bij required ¬bij expresses tried clauses success  absence constraint bij  ¬bij sufﬁcient en increase  options ﬁrst called closest  force bij violated just add pseudoboolean look query generated set instantiated  constraints enforce number constraints vi clause permits smallest  second called  olated solutions φi interval − t  approximate increases  ﬁxed steps ﬁrst tries ﬁnd  forcing l−t   constraints set query exists   ·l  l−t −  constraints satisﬁed lines  looks repeatedly  ·l  ·l  ‘min’ ‘max’ ensure avoid trivial cases constraint policies generate queries optimistic  violated remain size lline optimalinexpectation combined closest ap  searches model returns remember proximate optimistic means  optimalin  redundancy prevent computing query expectation means  closest ﬁnds smallest   given κqk size section   small approximate increases  steps   unsatisﬁable inconsistency returned line     following property tells output algo  experimental results  rithm  guaranteed lead query                                                        implemented conacq   using satj chocoin  property  satisﬁability given bias clausal theory implementation exploit redundancy largest ex  model kifk contains existing redundancy tent possible using redundancy rules backbone  rules bthenφi solutions                  tection bessiere et al     redundancy rules belong algorithm   return φi inconsistent case problem classes used mix binary nonbinary  extract conﬂict set constraints φi add problem classes experiments studied random bi              ¬bij   clause bij ∈s    avoid repeatedly generating mod nary problems structure ac  els i hidden inconsistency φi       quiring csp deﬁning rules logic puzzle sudoku    property tells generating given type conacq used learning bias deﬁned set edges  query hard                                    each problem using library ≤ ≥  random                                                        binary problems comprised  variables uniform  property  given bias batheorykasetl constraints                                                        main size  generated target constraint networks  atargetsize variation  generating query                                                   randomly selecting speciﬁed number constraints  κqk ⊂ −  ≤κqk≤t   nphard                                                         ≤  ≥ retaining soluble    experimental section show despite com considered instances forced  plexity problem handled efﬁciently tech straint patterns constraint graph assess effect  nique presented algorithm  algorithm used structure bessiere et al  did selecting  check exists query rejected set constraints constraint relation form path target network  version space size ±  included given set finally used  ×  sudoku target network  optimalinexpectation strategy requires op acquisition problem case learn rules su  timistic requires larger following chose doku counterexamples grid conﬁgurations  “halfway” optimistic ﬁx remains example nonbinary problem considered  issue set use values  try  schur’s lemma problem  csplib  initialised  concerning smallest case conacq used library ternary constraints  nonunary positive clause positive clause represents alldiff allequal notalldiff notallequal  set constraints reject negative example  processed conacq sure                                                      results table  report averaged results  ex  constraints set rejects instance choosing periments each query generation approach each  smallest increases chances quickly converge problem classes studied each case initial training  unary clause does contain nonunary                                                      set contained single positive example table ﬁrst  clauses set containing nonﬁxed literals  column contains description target networks terms    algorithm  return inconsistency called number variables constraints report results  query ﬁnd set input parameters each query generation approaches studied random  algorithm ﬁxed strategy baseline approach generating queries entirely random  change  nonunary clauses                                                  produce queries redundant respect   weset   positive clause ordered size each irredundant approach generates queries    libraries constraints contain complement each random uses provide new information  constraint complements expressed reﬁne version space finally optimistic optimal  junction constraints instance library ≤  ≥ ≤ inexpectation refer approaches described section   does exist expressed ≥∧ conjunction                                                             express complement constraint post approx available httpwwwsatjorg  imation negation just lose guarantee available httpchocosourceforgenet  number constraints reject generated query available httpwwwcspliborg                                                    ijcai                                                     
