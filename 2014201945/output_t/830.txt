                 odiset online distributed session tracing using agents                      salvador mandujano smvitesmmx                arturo gal van agalvanitesmmx                                                 center intelligent systems                             instituto tecnologico estudios superiores monterrey                                                     monterrey mexico                             abstract                               connection sequence stems sort anoma•                                                                 lous activity observed users nec•       security incident occurs           essary trace origin session order identify        necessary identify causes legal            person cases easy accomplish        cautionary purposes attempt hide            yoda etoh         origin connection malicious user              domain lan straightforward        jumped source host series           perform tracing given administrators usually        hosts €  hh hn breaking         access hosts lan unfortunately        final target ht connection sequence            sessions come inside connection re•       describes path makes difficult       ceived outside contact admin•       given ht prohibitive                                                                  istrator remote host hr order discover identity        cooperation synchronization required          user link connection path chain        practice administrators paper describes       fellow administrator look        distributed rulebased model automates        realize compromised        tracing process online worst case                                                                  possible user arc looking using hr        scenario autonomous agents collaborate            stepstone reach server case        tracing detection origin interactive     contact administrators country        connection using loop unwinding technique           andor abroad cheswick bellovin  stoll         incorporating public key cryptography create           obvious implications time costwise        ciphered channels allow secure com•                                                                   compromised perpetrator        munication meet challenges minimum                                                                  left backdoors installed facilitate future access        workload improved robustness                                                                  using interactive sessions visit        prototype features lightweight design imple•                                                                 software patched       mentation dynamic portallocation                                                                  door remains untouched necessary user        scheme prevent sniffing denial service                                                                  logged order detected audit trail files used        attempts proposed model                                                                  offline tracing tough task audit        present experimental results obtained                                                                  logs tampered deleted        prototype odiset                                                                    case connections web servers through http                                                                  https instance hosts compose connec•                                                                 tion chain client server easily modi•                                                                 fied components routing       introduction                                              modified order force packets follow particular                                                                  path case interactive sessions applications    unauthorized access systems increasing                                                                  telnet login rlogin ssh allow user    parallel growth internet irapalus                                                                   suitable access permissions connect host host   purposes protection accountability liability                                                                  forth creating loops scramble connec•   need connection backtracing reality areas                                                                  tion path little significantly complicates structure   cyberneticlaw enforcement security au•                                                                 chain effort required detect   thentication structure networks dis•                                                                 root host  actually starting    tributed nature complicates task spotting host                                                                           fact complexity backtracing connection                                                                  set hosts maybe small small small num•     project supported insys security                                                                  ber connection hops rapidly increases   research grant cdtedra insys lnvestigacidn en seguridad  formdtica instituto tecnolgico estudios superiores larger number hosts chain contain   monterrey                                                        challenges intrusion detection accu       multiagent systems                                                                                                     rately identify main causes incident ultimate  tion chain administrator terminal    goal catch intruders real time objective number ip addresshostname immediate host    help intrusion detection systems session trac• users logging unable tell    ing online intrusion detection intrusion host fact hi machine    response tools yoda eton  asaka et      user actually typing commands order    wang et al  provide sort offline con•    root host   nection tracing performs data correlation previ• contact administrator remote turn   ously recorded user activity information                      perform similar checking      paper proposes online approach makes use     job cumbersome requires time communication   intelligent agents identify origin live session trust parties involved case connec•  unwinding connection loops instead using historical au•    tion closed audit information   dit trails model relies evidence captured operating examined order nodes chain lead   tables continuously refreshed   origin connection offline sort tracing   reason likely tables experience important flaw counts existence integrity   changes unnoticed communication structure      audit log files clean systems prob•  agents uses rsa publickey cryptography rivest et al     lem systems compromised     schneier  implement encryption model       case connection chain created perpetrate attack   protects communications agents    probably case files tam•  main issues multiagent approach automatic secu•     pered during previous breakin yoda etoh     rity monitoring overhead imposed sort tools  hand connection alive   weiss  spafford zamboni  prototype      flow packets source destination information   odiset built lightweight design does    contained tables network packets used   represent performance threat making ideal wide   trace user online precisely   deployment through open source operating         approach   present design ideas model tracing   communication techniques loopunwinding method           related work   experimental results release   prototype                                                     projects touch problem con•     rest paper organized follows section    nection route tracing method proposed   explains problem connection backtracing section      yoda etoh  model implements network   discusses relevant related work area section     traffic monitors perform session tracing server   description solution approach implementation    compromised computes deviations   issues prototype section  includes experimental re•   traffic observed different hosts helps determine   sults findings conclusions future work section hosts used connection chain    right listing bibliography references     checking network traffic node involves huge amounts                                                                  data multiple packet monitors permanently filter record      problem connection backtracing                     specific activity build logs files                                                                  analyzed data correlator identify hosts con•    given set hosts  hn user         nection chain important notice deals   create connection chain hops follows     problem deleted logs creating records     host hi  records target type   finally connecting target host  attack   problem connection backtracing given set      ida intrusion detection agent asaka et al   target host username connected                  detects origin infor•  hosts compose connection chain identify root  mation exchange related incident primarily in•  host                                                           trusion detection employs mobile agents detect     small problem straightforward just          local attacks main host investigation agents sent   hosts need analyzed order identify source  requester needs integrity check   connection sequence larger   agents use mlsi marks left suspected intruder    complexity problem increases          strategy reduce data needed flag   larger number hosts multiplies possibilities cre• activity anomalous order collect information   ating confusing connection path                        breakin ida does passive route tracing using audit log     administrators limited access information     data structure tracing method specified   connecting servers lan ad•    authors agents broadcast connection evidence   ministrators typically login access servers peers way identifying possible hosts involved   makes tracing process easier connections     attack   coming outside lan unable       tbair tracingbased active intrusion re•  freely access servers scrutiny visibility sponse wang et al  networkbased intrusion de•  type connections reduces link connec    tection tool unlike traditionallypassive intrusion                                                                                                    multiagent systems detection systems adds active response security events us• perfectly fits network environment huhns   ing technique called based sleepy watermark tracing     singh  order speed connection backtracing   tbar tries attack root vulnerability exploit•  using autonomous agents approach eliminates need   ing problem locating originators incident    centralized data collection analysis method   hold accountable intrusions method   use represents design deficiency putting   based analysis evidence collected net•  availability risk monolithic systems typi•  work                                                         cally suffer having singlepointofattack     thumbprinting stanifordchen heberlein        order provide agents survivability features   technique places processes network make resistant attack each agent owns   order capture activity signatures thumbprints   digital certificate create private communication channels   method does require processes hosts   interacting peers intention reduc•  like case yoda etoh  replicates packet ing probability denial service dos attacks targeted   information future review based    agents portallocation scheme used   fact packet content session passing set scheme dynamically changes socket port numbers used   hosts invariant compared order identify agents order avoid monitored receiving   host chain capable detecting root unfinishedprotocol requests   connection designed identify exact    features rulebased agent behavior through   hosts chain                             individual agents capable detecting connection     approach present through implemen•     loops chain approach deals problem   tation odset differs previous       deleted damaged audit information using historical   projects following manner performs online  audit data agents look information dynamic session   offline tracing does use audit logs sys• tables order extract data relevant tracing process   tem does incorporate agent mobility instead uses   process table instance easily modifiable au•  distributed model using agents communicate secure   dit logs inconsistency   channels sharing information unlike models   changes type file make   odiset able identify origin con•    change evident   nection hosts connection   chain                                                           proposed model                                                                   tracing method security                                                                 composed number tracing agents fig•                                                                ure  communicate each sharing information                                                                 user connections agent running each host                                                                 hi ideal situation having agent running                                                                 host network agent client server capa•                                                                bilities enable request information agents                                                                 supply information agent useful                                                                 needs collect information order                                                                 identify links connection chain agent                                                                 target host eventually collect information number   figure  basic composition odiset tracing agent       peers inform local administrator   public private encryption keys client functionality server origin connection   functionality rule base knowledge base connection        perceptions tracing agent received   chain tree  user data                                      main sources  state regarding user ses•                                                                sions connections  messages agents re•                                                                questing providing information                                                                   environment agent inhabits highly dynamic      solution approach using agents                            provides communication channel necessary agent   require systems decide      stay touch peers network envi•  need order satisfy design objectives  ronment represent threat tracing   systems known agents weiss       malicious users gain access   use agents performing assurance activities        result changes perceived agent   spafford zamboni  typically require skills perform number different actions send messages   human inference learning decision mak•        agent request messages agent broadcast   ing makes possible development automatic semi     messages agents generate encryption keys en•  automatic tools aid administrators task crypt messages decrypt messages identify connection   securing                                            loops retrieve status information save     distributed nature agents allows efficient knowledge safe location   parallel data processing advantage feature     knowledge agent stored repository known       multiagent systems                                                                                                    knowledge base kb kb includes tracing host infor•   mation user data tree structure stores information    hosts connection chain information    regarding user names login times dates stored sep•   arate structure elements represent knowl   edge agent state environment    knowledge lost agent lose track previous    events updated peers      actions agent takes depend information    state perceptions russell norvig     embodied agent set rules enable    agent work autonomously deciding new    knowledge fed kb rules rule base    need analyzed making conclusion pro•   ceeding rule base composed  rules type     figure  loop unwinding user connects host    perceptions actions change state host ht doing loop through hops          environment does evolve modifying behavior      shown agent ht start tracing process    agents type rules make rule base able identify loop reduce tracing time    form                                                         future         howconnecteduserconsole                           set hosts user creates connec•   whatdoingusersshtotarget                            tion chain hops behave       tractngdoneo                                             worst case scenario suppose number                                                               connections host hx host hy    tf  messagetype message tracing                          vice versa  form loop arrangement agents    request validpublickeyp                             relevant connections hosts    keyfalse                                                  unwinding loop fact       denyconnectiono broadcast                            agent capable identifying repeated connections    tree  alert                                          storing information users connected                                                                  case loops passing through hosts chain re•     order protect information exchanges agents duced hops makes worst case scenario    rsa keypair used negotiate symmetric ses•      sion keys encrypting messages encryption                                                                    methods exist wolf lam  ref•   level guarantees information visible                                                                  erence loop unwinding compilers dis•   point reaching ip stack                                                                  crete mathematics areas model utilize simple    recipient party deter sniffing attacks arc other•                                                                 technique based observed activity agent stores    wise possible plain text agent communications jansen et                                                                  user hostname information kb trac•  al                                                                   ing process started agent engage communication      tracing process starts connection needs    neighbor agents order collect data al•   monitored agents target host ht receives local informa•   low draw conclusions each time agent receives   tion checks remote connections     new information checks kb loops    connection remote machine hr   follows figure  tracing requests id num•  tact agent host hr order research connection   ber agent initiates tracing round waiting   purpose private channel opened using   news particular agent asked coop•  asymmetric encryption keys agents symmetric ses     erating agent information complete tracing round   sion key agreed messages en•      agent knows loop receiv•  crypted exchange procedure     ing information tracing round started agents   followed relevant connections outside  including initiators property trace stored   host hr coming server set secure channels kb tree user traced repeats loop   setup agents order share information passes through host agent located   regarding connections user activity hop  agent reduce tracing time omitting   time links composing connection chain requests follow loop      tracing information obtained agent shared   rest agents through broadcast communication dynamic portallocation protocol   agent sends message existing agents guaran• network service daemons usually work particular port   tees kbs agents consistent state listening requests portscan attacks try reveal   environment event security incident services listening ports host   knowledge acquired agent lost look vulnerabilities present services   replicated enriched agents                 position exploit                                                                                                    multiagent systems flaw port previously identified dos attacks  best performance possible implementation   started portscans send large number request  minimizing number libraries include con•  service vulnerable port end sidering programs data files damaged   requests pending answered  usually incomplete      security incident security tool rely   requests protocol level  machine slows   agents use output programs   needs restarted additionally service port ps read tables like utmp wtmp   does support encryption traffic going through  incorporate functionality body   observed network sniffer                              gives extended independence size each agent      network services using sockets port suffer      kbytes add encryption keys   sort attacks propose model minimize      need uploaded certain point  additional   likelihood target mentioned com•    kbytes knowledge rule bases   munications agents encrypted sniffing plain  uploaded entirely memory   text impossible practice order deter attacks knowledge base each agent includes tree structure   service port propose technique used real  connection chains stored host   life radio equipment channel switching currently received information regarding particular session     implemented prototype initially agents lis• stores connection chain  hi  hri   wellknow port requests service    sends available agents agent reads   port allocate significant resources according finds hosts match tree creates new   implementation basic port used just agree   branches kb uptodate rule base encoded   actual communication port exchange body agent static structure   receiver proposes valid port number    necessary separate entity   sent party secure channel imme•  diately switch port exchanging information      experimental results   port switching repeated during session fixed   short period time order defeat protection mecha• order evaluate efficiency method multiple ex•  nism port scan run time periments prepared implementation cor•  succeeds communication moved different      rections successful unwinding   port frequency switching encryption mechanism     technique incorporated testing facility set   possible                                                      seven linux machines running kernels  red                                                                 hat  redhat  redhat  mandrake  operat•     implementation model                              ing installations general structure ex•  proof concept model implemented pro•     periments consists creating connection chains length   totype named odiset online distributed session         using hosts     tracing agent standalone process implemented     maximum number machines selected   sockets providing client server functionality experience tells highly improbable session per•  request information share infor•    formance purposes attacker uses stepstone     mation bit rsa keypair kpubkpriv           hosts cases loop chain   generated agent launched agent    easily resolved prepared con•  started ready collaborate tracing ses• nections include series loops chain   sion contacting peer agent exchanges public keys   instance threeserver setup connection goes cir•  verifies signature received key certifica• cles host hi host host host   tion come odiset master key public        host total number hops   key accessible agents order speed message  experiments show algorithm effectively unwinds   encryption given encryption publickey meth•    loops agent finds loop repeated sev•  ods slower using privatekey algorithms   eral times try solve   schneier   agent send message does kb contains user connection information allows     following  generates session key kdes symmetric    conclude user creating loop   encryption  encrypts message using kdes        contribution method fact    encrypts kdes using public key recipient     using loop unwinding performance algorithm   finally  sends encrypted session key en• upper threshold linear number   crypted message destination implementation    hosts through user connects set agents   rsa des algorithms based version       charge tracing connection   rsaref™cryptographic library rsa laboratories              long chain agent located each hosts guarantees      release odiset prototype developed     loops delay tracing process way   redhat linux  box agent templates          table  includes tracing numbers encryp•  easily obtained multiple agentgenerator systems   tion columns indicate growth tracing   different compilers interpreters typically un• time linear time respect number hops   necessary functionality agent produces heavy     makes think model escalate large   agents reason intention providing   networks time difference tracing       multiagent systems                                                                                                    
