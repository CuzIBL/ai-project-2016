                       Building Structure into Local Search for SAT

                   Duc Nghia Pham1,2    and  John Thornton1,2    and  Abdul Sattar1,2
                     1 Safeguarding Australia Program, National ICT Australia Ltd.
             2 Institute for Integrated and Intelligent Systems, Grifﬁth University, Australia
         {duc-nghia.pham, john.thornton, abdul.sattar}@nicta.com.au


                    Abstract                          basic importance to the area that local search techniques learn
                                                      from the success of the newer complete methods.
    Local search procedures for solving satisﬁabil-     The current research goes to the core of this problem by
    ity problems have attracted considerable attention modelling problem structure within a local search procedure.
    since the development of GSAT in 1992. How-       This involves a two-part process: ﬁrstly problem structure
    ever, recent work indicates that for many real-world must be recognized within the original problem represen-
    problems, complete search methods have the ad-    tation (here we are considering satisﬁability problems ex-
    vantage, because modern heuristics are able to ef- pressed in conjunctive normal form (CNF)). And secondly
    fectively exploit problem structure. Indeed, to de- this structure must be represented within a local search pro-
    velop a local search technique that can effectively cedure in such a way that the local neighbourhood of possible
    deal with variable dependencies has been an open  moves will only contain structure respecting ﬂips.
    challenge since 1997.
                                                        The ideas behind this approach come from two sources.
    In this paper we show that local search techniques Firstly, there is the recent work on modelling constraint sat-
    can effectively exploit information about prob-   isfaction problems (CSPs) as SAT problems [Pham et al.,
    lem structure producing signiﬁcant improvements   2005]. Here the presence of CSP multivalued variables is
    in performance on structured problem instances.   automatically detected in the clausal structure of a CNF prob-
    Building on the earlier work of Ostrowski et al. we lem. This information is then embedded within a local search
    describe how information about variable dependen- in such a way that for each group of binary valued SAT vari-
    cies can be built into a local search, so that only ables corresponding to a single multivalued CSP variable,
    independent variables are considered for ﬂipping. only one SAT variable will be true at any one time. This
    The cost effect of a ﬂip is then dynamically cal- enforces that the underlying CSP variable is always instanti-
    culated using a dependency lattice that models de- ated with a single domain value. The SAT-based local search
    pendent variables using gates (speciﬁcally and, or achieves this by doing a two-ﬂip look-ahead whenever it en-
    and equivalence gates). The experimental study on counters a literal associated with a CSP domain value. In
    hard structured benchmark problems demonstrates   effect this look-ahead turns off the current CSP domain value
    that our new approach signiﬁcantly outperforms the with one ﬂip and turns on a new value with a second ﬂip. A
    previously reported best local search techniques. signiﬁcant advantage of this approach (when encoding binary
                                                      CSPs) is that the cost of such a double-ﬂip equals the sum
                                                      of the costs of the individual ﬂips, because these ﬂip pairs
1  Introduction                                       will never appear in the same conﬂict clause. For this reason,
A fundamental challenge facing local search researchers in CSP structure exploiting algorithms can be easily embedded
the satisﬁability (SAT) domain is the increasing scope and within an existing SAT local search architecture and add neg-
performance of complete search methods. While for most ligible processing overhead to an individual ﬂip. As we shall
of the 1990s it was taken for granted that local search was see, more general structure exploiting approaches do cause
the most practical method for solving large and complex real interactions between literals within the same clauses, and so
world satisﬁability problems [Selman et al., 1992; Kautz and require more sophisticated ﬂip cost calculation procedures.
Selman, 1996; B´ejar and Many`a, 2000], the latest generation The second source for the current research comes from Os-
of complete SAT solvers have turned the tables, solving many trowski et al.’s [2002] work on the extraction of gates from
structured problems that are beyond the reach of local search CNF encoded SAT problems. These gates represent relation-
(e.g. [Zhang et al., 2001; E´en and Biere, 2005]).1 So it is of ships between SAT variables of the form y = f(x1,...,xn)
                                                      where f ∈{⇔,   ∧, ∨} and y and xi are Boolean variables
  1More information on the performance of complete search from the original problem. If such a gate is recognized, the
versus local search is available from the SAT competitions value of y is determined by x1,...,xn, and can be removed.
(http://www.satcompetition.org)                       Ostrowski et al. used this method to simplify a range of struc-

                                                IJCAI-07
                                                  2359tured SAT benchmark problems, producing signiﬁcant per- necessarily be false. This example of an “and” gate can be
formance gains for their systematic DPLL solver. However, represented as
to the best of our knowledge, such structure exploiting ap-               a = ∧(b, c, d)
proaches have not been applied in the local search domain. A third commonly occurring clausal structure is the “equiv-
  The problem facing a local search approach to implement- alence” gate (or “xnor” gate), illustrated as follows:
ing gates is one of efﬁciency. Ostrowski et al.’s approach can
detect independent variables whose values determine a set of (a ∨ b ∨ c) ∧ (¬a ∨¬b ∨ c) ∧ (¬a ∨ b ∨¬c) ∧ (a ∨¬b ∨¬c)
dependent variables via clausal gate connections. Using this
information, we can implement a local search that only ﬂips Here, in order to satisfy the formula, a will be true iff b
the values of independent variables and then dynamically cal- and c are both true or both false, i.e. if they are equivalent,
culates the effects of these ﬂips on the overall solution cost. otherwise if b and c differ then a will be false. This can be
                                                      represented as
However, a local search needs to know the ﬂip cost of all                   =⇔  (   )
candidate ﬂips in advance of making a move. Generally this                a      b, c
is achieved by maintaining a make cost and a break cost for Finally, an “xor” gate is the negation of an “equivalence”
each literal in the problem (i.e. the number of clauses that will gate, illustrated as follows:
become true if a literal is ﬂipped and the number of clauses (¬ ∨¬ ∨¬ ) ∧ ( ∨ ∨¬ ) ∧ ( ∨¬ ∨ ) ∧ (¬ ∨ ∨  )
that will become false). These costs are then updated after a b  c    a   b   c    a   b   c     a  b  c
each ﬂip. A major advantage of a SAT local search is the where a will only be false if b and c are equivalent. This can
speed with which these cost effects can be calculated (this be represented as
is achieved using clever data structures that exploit the SAT              a = ⊕(b, c)
CNF problem structure) [Tompkins and Hoos, 2004].How-
ever, taking an approach that only ﬂips independent variables If an “equivalence” or an “xor” gate depends on more than
renders the standard SAT local search architecture redundant. two variables, then equivalence or difference is calculated in
                                                                             =⇔  (    )
In this case, ﬁnding the potential cost of an independent vari- a pairwise fashion, i.e. if a b, c, d and b and c are false,
                                                            ⇔                               ⇔  (  ⇔   )
able ﬂip requires us to solve a mini-SAT problem involving all then b c is true, and if d is true, then d b c is
the affected dependent variables and their associated clauses. true and therefore the gate is true. In general, we represent an
                                                                    = ⊕(          )
  The rest of the paper is organized as follows: we ﬁrst ex- “xor”gateasy x1,...,xn , an “equivalence” gate as
                                                        =⇔  (         )                = ∨(         )
plain how the cost of ﬂipping an independent variable in a y x1,...,xn ,an“or”gateasy      x1,...,xn  and
                                                                      = ∧(         )
local search can be efﬁciently calculated using a dependency an “and” gate as y x1,...,xn .Herey is the dependent
lattice data structure. This structure models the various de- variable because its value is determined by the independent
pendencies in the original problem and dynamically calcu- variables x1,...,xn. For the sake of simplicity, we treat an
                                                                     =  ⊕(   )
lates which independent variables, when ﬂipped, will cause “xor” gate (e.g. a b, c ) as a special case of an “equiva-
                                                                    ¬  =⇔   (  )
a clause to change its truth value. Details of the construc- lence” gate (e.g. a b, c ) in the rest of the paper.
tion and operation of this lattice are given in the next two
sections. To evaluate the usefulness of this new approach, 3 The Dependency Lattice
we conduct an empirical study that examines several of the As Ostrowski et al. [2002] have already described, the pro-
structured SAT benchmarks that have proved to be the most cess of recognizing gates in a CNF problem can be reduced to
difﬁcult for local search in the past. Finally, we discuss the searching for the appropriate clausal structures during a pre-
signiﬁcance of our results and indicate some future directions processing phase. This information can then be used to clas-
of research.                                          sify the dependent and independent variables. For a complete
                                                      search method, this means the search space can immediately
2  Gates and Dependencies                             be reduced to only consider independent variable instantia-
In the following discussion we shall broadly follow the termi- tions, as all dependent variable values can be automatically
nology used in [Ostrowski et al., 2002]. Firstly, consider the ﬁxed by propagation.
following CNF formula:                                  However, for a local search, there is no built-in propagation
                                                      mechanism. In fact, a local search strategy precludes propa-
    (¬ ∨   ∨  ∨  ) ∧ ( ∨¬ ) ∧ ( ∨¬  ) ∧ ( ∨¬  )
      a  b  c   d    a   b    a    c    a    d        gation because it deliberately allows inconsistent assignments
  Here, for the clauses to be satisﬁed, if b and c and d are all to persist. To exploit the information inherent in dependent
false then a must necessarily be false, otherwise a must nec- variable relationships requires us to remove them from the
essarily be true. This is an example of an “or” gate, because domain of “free” variables while still including their effect in
the value of a is determined by truth value of (b ∨ c ∨ d) and the overall cost of a particular ﬂip. To achieve this we have
can be represented as                                 developed a dependency lattice data structure. This lattice
                     = ∨(     )                       is formed as a result of analyzing the original CNF problem
                   a     b, c, d                      into independent variables, and relationships between inter-
  Similarly, if we reverse the signs of the literals we get: nal and external gates. Firstly, an independent variable is
  (  ∨¬  ∨¬   ∨¬  ) ∧ (¬ ∨  ) ∧ (¬ ∨ ) ∧ (¬ ∨  )      not simply a variable that determines the value of a depen-
   a    b   c    d     a   b     a  c      a  d       dent variable in a gate relationship, because such determining
  Now for the formula to be satisﬁed, if b and c and d are variables can in turn be determined in another gate. An inde-
all true then a must necessarily be true, otherwise a must pendent variable is a variable that is never determined in any

                                                IJCAI-07
                                                  2360gate relationship. Secondly, an internal gate is any gate that 3.1 Calculating Flip Costs
can be recognized within the structure of the original CNF To illustrate the process of cost calculation, we have instanti-
formula, and thirdly, an external gate is a gate where the de-
                                                      ated the independent variables in Figure 1 as follows: v1 ←
pendent variable represents a clause from the original CNF
                                                      false, v2 ← false, v3 ← true and v4 ← false.Movingdown
formula that is not part of any internal gate. To clarify these
                                                      the lattice from v2 and v3 to the “and” gate at node g1 it fol-
concepts, consider the following CNF formula example:
                                                      lows that the values of v2 and v3 make this gate variable false.
                                                      Similarly, moving down from v3 and v4 to g2 we can see that
      (¬g1 ∨ v2 ∨ v3) ∧ (g1 ∨¬v2) ∧ (g1 ∨¬v3)∧
                                                      the corresponding “or” gate variable is true. Then following
     (g2 ∨¬v3 ∨¬v4)  ∧ (¬g2 ∨ v3) ∧ (¬g2 ∨ v4)∧       down from the gates at g1 and g2 to the “equivalence” gate
                                                      at g3 we can see that this gate variable is false, and so on. In
          (g3 ∨ g1 ∨ g2) ∧ (¬g3 ∨¬g1 ∨ g2)∧
                                                      this way, the lattice reﬂects the necessary consequences of the
        (¬g3 ∨ g1 ∨¬g2) ∧ (g3 ∨¬g1 ∨¬g2)∧             independent variable instantiations on the rest of the problem.
                     (v1 ∨ g1)                          To calculate the cost of ﬂipping a particular independent
                                                      variable vi we need to know how many external gate variables
which is equivalent to:
                                                      will become false and how many will become true as a result
         (g1 = ∧(v2,v3)) ∧ (g2 = ∨(v3,v4))∧           of the ﬂip. This is achieved by storing at each gate node the
                                                      set of independent variables that, if ﬂipped, would cause the
          (g3 =⇔ (v1,v2)) ∧ (c1 = ∨(v1,g1))           gate variable to change its truth value. For example, node g1
                                                                                  2                 2
where c1 is an additional variable that depends on the clause stores the independent variable v , signifying that if v was
                                                      ﬂipped then 1 would change from    to    . Similarly,
(v1 ∨ g1) (i.e. if (v1 ∨ g1) is true, c1 is true, otherwise c1 is g                 false  true
false). In general, each original CNF clause that is not sub- g2 can only become falseif v3 is ﬂipped. Moving down the
sumed within a gate dependency is represented by an addi- lattice, we can see that g3 would become true if either g1 or
tional variable, that then subsumes the clause in an external g2 were to change values. As ﬂipping v2 will change the truth
“or” gate dependency.                                 value of g1 and ﬂipping v3 will change the truth value of g2,
  Having translated our original problem into a set of gates, either of these ﬂips will also change the truth value of g3,so
we can now represent it as the dependency lattice in Figure 1: g3 inherits v2 and v3 into its variable set. Node c1 similarly
                                                      inherits v1 and v2, as a change in either variable will make c1
                                                      true.
    v1           v2          v3           v4            Once we have the correct variable sets for each of the ex-
      {F}          {F}           {T}                  ternal gates we can read off the make cost and break cost for
                      {vv}         {}
                        2           3                 each independent variable simply by counting the number of
                      AND          OR                 times a variable appears in a false external gate (= make cost)

                    g 1  {F}g     2    {T}            and the number of times it appears in a true external gate (=
                {v v }      {v v }
                 1 2         2 3                      break cost). So, in our example, both v1 and v2 have a make

                 OR                                   cost of one, with all other make and break costs equal to zero.
                   {F}         {F}                    3.2  The General Case
                 c1          g 3
                                                      In realistic problems it can easily happen that the same in-
        Figure 1: An example dependency lattice.      dependent variable appears in multiple branches leading to
                                                      the same gate. To handle such cases we require more gen-
  Here the original variables have become nodes in the lat- eral deﬁnitions of how the variable sets for each gate type are
                                                      composed.
tice, such that nodes v1 ...v4 correspond to the independent
variables, nodes g1 ...g3 to the internal gates and node c1 to Firstly, if an “and” gate is true then all its parent nodes
an external gate. In this form, a satisfying assignment to the must be true, therefore any change in a parent node’s truth
original CNF formula is equivalent to an assignment of the value will also change the truth value of the gate. This means
independent variables such that all the ci external nodes eval- the gate’s variable set (V ) should inherit the union of all the
uate to true. This result follows trivially from the structure parent variable sets (Psets), as follows:
of the lattice, which implements the structure of the internal
                                                               if true(AND) then V ←∪(true(Psets))
gates and therefore ensures that all internal gate relationships
are necessarily satisﬁed. When all the external nodes eval- Alternatively, if an “and” gate is false then only if all its
uate to true, this means all the remaining CNF clauses that parent nodes become true will the gate become true.This
were not subsumed as internal gates are true, and hence that requires that all false parent nodes become true and no true
a satisfying assignment has been found.               parent node becomes false, as follows:
  The purpose of the lattice is to embody the structure of gate
dependencies in such a way that the cost of ﬂipping an inde- if false(AND) then V ←∩(false(Psets)) \∪(true(Psets))
pendent variable can be efﬁciently calculated. This is analo-
gous to existing local search SAT solvers, except that existing The rules for an “or” gate can be similarly deﬁned in re-
solvers are only equipped to handle “or” gate dependencies. verse:

                                                IJCAI-07
                                                  2361         if false(OR) then V ←∪(false(Psets))         and changes its variable set from {v1,v2} to {v2,v3}.This
  if true(OR) then V ←∩(true(Psets)) \∪(false(Psets)) change then causes the make costs of v1 and v2 to be reduced
                                                      by one and the break costs of v2 and v3 to be increased by
  For all “equivalence” gates with no more than two parents, one. The process terminates with all external nodes set to
only if the truth value of a single parent changes will the value true, meaning that a satisfying solution has been found. This
of the gate change, as follows:                       situation is illustrated in Figure 2:

              V ←∪(Psets)  \∩(Psets)
                                                           vvvv1234
  In general, an “equivalence” gate is true iff the count of its {F}     {T}          {T}         {F}
                                                                            {v v }        v
true parents has the same parity as the count of all its parents.            2 3         { 3 }

As we did not discover any “equivalence” gates with more                     AND          OR
than two parents in our problem set, we did not implement
                                                                          gg12{T}           {T}
the more-than-two-parent case.                                         v v
                                                                      { 2 3}       {v 2 }
  In addition, we did ﬁnd rare problem instances where a sin-
gle variable was dependent on more than one gate. In these             OR
circumstances, we added an additional dependent variable for             {T}           {T}
                                                                       c            g
each extra gate and connected these variables to the ﬁrst vari-         1            3
able via additional “equivalence” gates.
                                                               Figure 2: A dependency lattice solution.
3.3  Implementation
The motivation behind the dependency lattice is to develop an
efﬁcient method to update the make and break costs for the 4 Experimental Validation
independent variables. Clearly there is a potential for the ad- In order to validate our approach to handling gate dependen-
ditional work of calculating ﬂip costs using the lattice to out- cies, we implemented a non-CNF version of AdaptNovelty+
weigh the beneﬁts of reducing the size of the search space (i.e. [Hoos, 2002] that operates on the new dependency lattice
by eliminating dependent variables and internal gate clauses platform. We then evaluated the performance of this algo-
from the problem). Therefore it is of signiﬁcance exactly how rithm on a selection of SATLIB ssa7552, parity 16-and32-bit
the lattice is updated. In our current implementation we do problems.2 Table 1 ﬁrstly shows the effect of gate detection
this by representing the total set of independent variables at
                                              th      on the number of variables and clauses in the problem set,
each node using an nind bit pattern, such that if the i in- detailing the number of independent and dependent gates in
dependent variable is in the variable set of a particular node,
        th                                            the corresponding non-CNF dependency lattices and the total
then the i position of the bit pattern for that node will be time taken for each conversion.
set. Using this representation we can efﬁciently implement We then compared the performance of our new non-CNF
the set operations necessary to propagate the effects of ﬂip- AdaptNovelty+ algorithm against the original CNF based
ping an independent variable through the lattice. This propa- variant by running the two algorithms 100 times each on the
gation starts when an independent variable has been selected ssa7552 and par16 instances and 10 times each on the par32
for ﬂipping. Beginning at the lattice node corresponding to instances. Table 2 shows the success rate, the average num-
this variable, the update works down the lattice to all the con- ber of ﬂips and time in seconds taken to solve these instances.
nected internal nodes. For example, if v3 is ﬂipped in Figure Each run was timed out after 1 hour for the ssa7552 and par16
1, then nodes g1 and g2 will be selected for update. The up- instances and after 24 hours for the par32 instances.
date process then performs the appropriate set operations on As shown in Table 2, the non-CNF  version of
the parent variable sets to produce an updated variable set and AdaptNovelty+ signiﬁcantly outperforms its original CNF
truth value for the selected gate. If the truth value of a node counterpart both in terms of ﬂips and time. Indeed, the new
and the contents of its variable set remain unchanged after an non-CNF approach is at least 100 times better than the orig-
update then no further propagation is required from that node. inal CNF approach on these instances. In addition, this is
Otherwise the process continues until it reaches the external the ﬁrst time that a local search solver has managed to ﬁnd
nodes. Then, if an external node’s variable set is changed, this solutions for all the parity 32-bit problems within 24 hours.
updates the make and break costs of any affected independent The only other SLS method that can solve these problems is
variables and the process terminated.                 DLM2005  [Wah and Wu, 2005]. However, DLM could only
  If we follow the process of ﬂipping v2 in Figure 1, this will            32                           1
                           {  }  {     }              solve the compacted par -*-c instances, producing only
alter the variable set at g1 from v2 to v2,v3 and change successful run out of 20 attempts and taking nearly 33 hours
g1 to true. As the variable set at g1 has changed these effects to ﬁnd a solution.
are now propagated to the internal node g3 which becomes As all else has been left unchanged between the two ver-
true. Now we have a situation where both parents of g3 share             +
                             {     }          {  }    sions of AdaptNovelty , we must conclude that the extraor-
the same variable, i.e. g1 now has v2,v3 and g2 has v3 . dinary performance gains are due to the successful recogni-
In this case if v3 were ﬂipped then both parents of g3 would tion and exploitation of variable dependencies in the new non-
change their truth value and still remain equivalent, leaving CNF approach. As shown in Figure 3, the dependency lattice
g3 unchanged. Hence g3 only inherits v2 into its variable set.
Finally, the external node c1 changes its truth value to true 2Available from http://www.satlib.org

                                                IJCAI-07
                                                  2362                                                                   
           CNF        Extracted    non-CNF

                                                                              
 Problem #vars #clauses #ﬁxed #eq #and/or #input #output #seconds
                                                                            
   038 1, 501 3, 575 40 1, 031 23  407 1, 137 0.016
 ssa-                                                                                              

 ssa-158 1, 363 3, 034 186 894 7   276  642  0.011                   

 ssa-159 1, 363 3, 032 132 932 11  288  683  0.015                                                   
 ssa-160 1, 391 3, 126 25 1, 016 19 331 855  0.015                                                     
 par16-1 1, 015 3, 310 408 560 31  16    91  0.011                                                     

                                                                                                     
 par16-2 1, 015 3, 374 383 585 31  16    91  0.013

                                                                                               
 par16-3 1, 015 3, 344 395 573 31  16    91  0.011
                                                                                               
 par16-4 1, 015 3, 324 396 572 31  16    91  0.012
                                                                                          
 par16-5 1, 015 3, 358 388 580 31  16    91  0.016
                                                                                      
   32 1 3, 176 10, 277 758 2, 261 125 32 247 0.031
 par -                                                                              
   32 2 3, 176 10, 253 784 2, 235 125 32 247 0.034
 par -                                                                                    

 par32-3 3, 176 10, 297 781 2, 238 125 32 247 0.032                                     

 par32-4 3, 176 10, 313 791 2, 228 125 32 247 0.032                            

 par32-5 3, 176 10, 325 791 2, 228 125 32 247 0.034                            

                                                                          

Table 1: The effects of the gate extracting algorithm on the          
ssa7552-∗ and parity problems. This table shows the number         
of “ﬁxed”, “equivalence” (#eq) and “and/or” gates extracted      
from each instance. The number of “independent” and “exter-   
nal dependent” gates of each processed non-CNF instance are
described in the table as #input and #output, respectively. Figure 3: The dependency lattice of the par8-1 instance. In
                                                      this graph, the independent gates are depicted as shaded rect-
               CNF based           non-CNF based      angular boxes and the dependent “equivalence”, “and” and
                                                      “or” gates are represented as hexagon, house and inverse
 Problem %solved #ﬂips #seconds %solved #ﬂips #seconds
                                                      house shaped boxes, respectively. External dependent gates
 ssa-038 86% 180, 937, 822 838.790 100% 2, 169 15.131 are also lightly shaded. A solid arrow outputs the gate value,
 ssa-158 100% 303, 377, 289 419.054 100% 439 1.203    while a dashed arrow outputs the negation of the gate value.
 ssa-159 95% 118, 865, 143 499.300 100% 460  1.396
   160   100% 154, 646, 089 377.383 100% 1, 284 5.562
 ssa-                                                                  CNF based      non-CNF based
   16 1  100% 148, 475, 195 684.972 100% 2, 455 0.489
 par -                                                      Problem %solved #ﬂips #seconds %solved #ﬂips #seconds
 par16-2 98% 331, 148, 102 788.312 100% 2, 724 0.570
                                                            bart26  100% 216  0.001  100% 215  3.585
 par16-3 100% 381, 887, 299 801.501 100% 1, 640 0.320
                                                            bart27  100% 233  0.001  100% 228  4.537
 par16-4 100% 79, 196, 974 779.877 100% 3, 217 0.626
                                                            bart28  100% 222  0.001  100% 222  4.191
 par16-5 100% 390, 162, 552 604.379 100% 7, 938 1.630
                                                            bart29  100% 244  0.001  100% 249  5.602
 par32-1  0%       n/a  > 24h   80%  n/a 48, 194.033
                                                            bart30  100% 266  0.001  100% 251  6.677
 par32-2  0%       n/a  > 24h  100%  n/a 13, 204.536
 par32-3  0%       n/a  > 24h  100%  n/a 17, 766.822  Table 3: The results of solving the Aloul’s bart FPGA
 par32-4  0%       n/a  > 24h  100%  n/a  9, 487.728  problems using the CNF and non-CNF based versions of
                                                                  +
 par32-5  0%       n/a  > 24h  100%  n/a 23, 212.755  AdaptNovelty .The#flips  and #seconds are the average
                                                      number of ﬂips and seconds taken to solve each instance.
Table 2: The results of solving the ssa7552-* and parity
problems using the CNF and non-CNF based versions of
AdaptNovelty+.The#flips   and #seconds  are the aver- fort to discover solutions that respect these dependencies.
age number of ﬂips and seconds taken to solve each instance. However, the cost of maintaining consistency between the
For the original AdaptNovelty+ the #flipsvalues have been newly discovered gates in our non-CNF approach is also sig-
approximated as the ﬂip counter maximum was exceeded. niﬁcant. To measure this, we conducted an additional exper-
                                                      iment using a set of bart FPGA problems that exhibit no de-
                                                      pendency structure [Aloul et al., 2002]. Table 3 shows our
of the par8-1 instance is highly connected. Access to this non-CNF AdaptNovelty+ solver to be more than 1, 000 times
extra knowledge enables the new solver to maintain the con- slower on these problems. However, this performance deﬁcit
sistency of the dependent variables and hence to efﬁciently can be partly explained by the initial cost of searching for
navigate the search space and ﬁnd a solution. The structure gate dependencies in the original CNF representation, and
of the variable dependencies is otherwise ﬂattened out and hence will become less signiﬁcant for problems where the
hidden in the original CNF representation. This means that solution time signiﬁcantly exceeds the preprocessing time.
CNF based SLS solvers must expend considerable extra ef- We also used the built-in C++ set class to update the lattice

                                                IJCAI-07
                                                  2363