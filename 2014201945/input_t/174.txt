   Maximizing Flexibility: A Retraction Heuristic for Oversubscribed Scheduling 
                                               Problems 

                              Laurence A. Kramer and Stephen F. Smith 
                           The Robotics Institute, Carnegie Mellon University 
                                5000 Forbes Avenue, Pittsburgh PA 15213 
                                        {lkramer,sfs}@cs.cmu.edu 

                     Abstract                          possible to trade one higher priority task for a set of lower pri•
                                                       ority tasks in some circumstances, this is the exception rather 
    In this paper we consider the solution of schedul• than the rule. Thus, the objective is to accommodate as many 
    ing problems that are inherently over-subscribed.  tasks as possible within this constraint. 
    In such problems, there are always more tasks to     Oversubscribed problems present an interesting challenge 
    execute within a given time frame than available   for constraint-directed search procedures. Oversubscribed 
    resource capacity will allow, and hence decisions  problems are not particularly well suited to formulation 
    must be made about which tasks should be in•       within a standard backtracking search framework. Hence the 
    cluded in the schedule and which should be ex•     application of constructive approaches depends heavily on the 
    cluded. We adopt a controlled, iterative repair    ability of search control heuristics to anticipate resource inter•
    search approach, and focus on improving the re•    actions. Repair-based approaches, on the other hand, tend to 
    sults of an initial priority-driven solution generation operate myopically through infeasible intermediate states in 
    procedure. Central to our approach is a new retrac• hopes of arriving at a better final feasible state. Their effec•
    tion heuristic, termed max-flexibility, which is re• tiveness in the presence of global constraints (such as enforce•
    sponsible for identifying which tasks to (temporar• ment of priority) will similarly rely on the ability of search 
    ily) retract from the schedule for reassignment in an heuristics to effectively focus the repair process. 
    effort to incorporate additional tasks into the sched• In this paper, we take a repair-based search perspective of 
    ule. The max-flexibility heuristic chooses those   the problem and focus on locally improving an initial solu•
    tasks that have maximum flexibility for assignment tion. We assume that the initial solution generator is priority-
    within their feasible windows. We empirically eval• driven, and define a controlled, task swapping search proce•
    uate the performance of max-flexibility using prob• dure for finding and exploiting opportunities to rearrange cur•
    lem data and the basic scheduling procedure from a 
                                                       rently scheduled tasks and incorporate additional tasks that 
    fielded airlift mission scheduling application. We 
                                                       were excluded from the initial solution. To direct the re•
    show that it produces better improvement results 
                                                       pair process we introduce a novel retraction heuristic, max-
    than two contention-based retraction heuristics, in•
                                                      flexibility, for choosing which tasks to (temporarily) retract 
    cluding a variant of min-conflictsLMinton et al., 
                                                       to make room for additional, lower priority tasks. Max-
    1992], with significantly less search and computa•
                                                       flexibility chooses based on a simple measure of the relative 
    tional cost. 
                                                       temporal flexibility that alternative competing tasks have for 
                                                       feasible re-assignment elsewhere in the schedule. 
                                                         We evaluate the efficacy of this approach using data 
1 Introduction                                         and the basic scheduling procedure obtained from a real-
Many scheduling domains present problems that are oversub• world, multi-mission scheduling problem: the day-to-day 
scribed; problems where there are more tasks to be performed airlift scheduling problem faced by the USAF Air Mobil•
over a given time frame than can be feasibly accommodated ity Command (AMC). We compare the performance of max-
by available resources. In such problems, it is inevitably nec• flexibility to a variant of the min-conflicts heuristic [Minton 
essary to exclude some tasks from the schedule. Hence, a et ai, 1992] (adapted to serve as a retraction heuristic) and 
basic objective is to maximize resource utilization (or some• another more-informed contention-based heuristic. 
what equivalently to accommodate as many tasks as possi•
ble). However, in many cases, the situation is further com• 2 Basic Allocation Procedure 
plicated. Input tasks are often differentiated by priorty, im•
plying that some tasks are more important than others and if Without loss of generality the AMC scheduling problem can 
necessary should be included at the expense of others. In the be characterized abstractly as follows: 
particular domain that motivates this work, for example, task • A set T of tasks (or missions) are submitted for exe•
priorities must be rigidly respected. Though it is theoretically cution. Each task i £ T has an earliest pickup time 


1218                                                                                         SCHEDULING           a latest delivery time a pickup location             three week window of approximately a thousand missions 
     a dropoff location desti, a duration di, (determined by   assignable in a few seconds. 
     origi and desti) and a priority pri                          Since it is generally expected that several or more missions 
   • A set Res of resources (or air wings) are available for   will be unable to be assigned during the first pass allocation 
     assignment to missions. Each resource r has process, the user can direct the system to automatically ex•
     capacity (corresponding to the number of con•             plore the space of constraint relaxation options on a given 
     tracted aircraft for that wing).                          mission, or can do this on a more interactive basis. Available 
                                                               relaxation options include delaying a mission beyond its due 
   • Each task i has an associated set of feasible re•
                                                               date, over-allocating beyond contracted capacity on a wing, 
     sources (or air wings), any of which can be assigned to 
                                                               bumping a lower priority mission, or some combination of 
     carry out i. Any given task i requires 1 unit of capacity 
                                                               these basic options. Specifically tailored evaluation functions 
     (i.e., one aircraft) of the resource r that is assigned to 
                                                               are used when searching in the space of relaxed constraints. 
     perform it. 
                                                               For instance, when searching for delay options, the dominant 
   • Each resource r has a designated location home,. For      optimization criterion is minimizing tardiness.1 
     a given task i, each resource r requires a posi•
     tioning time to travel from homer to and 3 Improving on the Initial Solution 
     a de-positioning time to travel from desti back 

     to homer.                                                 The quality of any schedule produced by the above greedy 
   A schedule is a feasible assignment of missions to wings.   procedure will be a function in large part of its prioritiza•
To be feasible, each task i must be scheduled to execute       tion heuristic. This heuristic dictates the assignment possi•
within its interval, and for each resource r and               bilities that will be available to a given task i at the time it 
time point /, Typically, the prob•                             is inserted into the schedule, and consequently which tasks 
lem is over-subscribed and only a subset of tasks in T can     will ulitmately end up as unassignable. As just indicated, this 
be feasibly accommodated. If all tasks cannot be scheduled,    heuristic gives over-riding preference to higher priority tasks. 
preference is given to higher priority tasks. Tasks that cannot This bias in fact reflects the basic scheduling policy in the 
                                                               AMC application domain. 
                                                                 At the same time, strict relance on this ordering heuristic 
                                                               can obviously lead to sub-optimal solutions. It is quite pos•
                                                               sible that some "rearrangement" of the assignments of higher 
   Both the scale and continuous, dynamic nature of the AMC    priority tasks could enable the feasible insertion of additional, 
scheduling problem effectively preclude the use of system•     lower priority tasks. Since, in practice, the end user may 
atic solution procedures that can guarantee any sort of maxi•  spend non-trivial amounts of time analyzing and negotiating 
mal accommodation of the tasks in T. The approach adopted      constraint relaxation options to enable incorporation of addi•
within the AMC Allocator application instead focuses on        tional unassignable missions, it makes sense to consider tech•
quickly obtaining a good baseline solution, and then pro•      niques for productively broadening the search performed by 
viding a number of tools for the end user to selectively re•   this basic procedure. 
lax problem constraints to incorporate as many additional        Two broad classes of approaches have been pursued in the 
(initially unassignable) tasks as possible [Becker and Smith,  literature. One set of approaches (e.g., LJoslin and Clements, 
2000; Kramer and Smith, 2002].                                 1998; Bresina, 1996; Cicirello and Smith, 2002]) focuses on 
   The basic allocation procedure used within the AMC Al•      exploring a "neighborhood" around the trajectory of the base 
locator constructs a schedule incrementally; the set of unas-  heuristic. In our context, this would correspond to repeat•
signcd input missions is first prioritized, and then missions  edly perturbing the task order in some manner and reapply•
are successively inserted into the current partial scheduling in ing the basic search procedure. Another set of approaches 
priority order. The prioritization scheme utilized in the initial have been termed iterative repair (e.g., [Minton et al, 1992; 
step considers the assigned priority pr(i) of each mission i as Zweben et al., 1994; Rabideau et ai, 1999]), wherein an ini•
its dominant ordering criterion. In case of missions of equal  tial base solution is progressively revised (and hopefully im•
priority, secondary criteria give preference to missions with  proved) over time. In our context, this would correspond to 
earlier possible start times and smaller overall slack. A given repeated retraction and (rc)assertion of subsets of task as•
mission i is inserted into the schedule via a search of alter• signments. Both sets of approaches have natural anytime 
native options. More specifically, for each r R i, a set of    properties. One interesting requirement in the current con•
candidate execution intervals is generated and evaluated, and  text, however, is that we would like to guarantee that higher 
the highest ranked alternative is selected as the assignment.  priority missions won't be supplanted by lower priority mis•
In the search procedure's basic configuration, only feasible   sions. In the case of iterative re-solving approaches, enforce•
intervals are generated and the evaluation function empha•     ment of this constraint would seem possible only in a rather 
sizes choices that minimize and execute i as                      'A separate search procedure designed to identify and exploit 
early as possible. If a mission cannot be feasibly assigned, it opportunities for reclaiming resource capacity by combining (or 
is marked as unassignable.                                     "merging") two or more roundtrip missions into one is also pro•
  This scheduling process allows for assignment of individ•    vided, but this capability is orthogonal to the techniques discussed 
ual missions on the order of milliseconds, with a two to       in the current paper. 


SCHEDULING                                                                                                           1219  indirect way (through global filtering of the solutions gener•
 ated). Iterative repair approaches typically involve generation 
 of infeasible solutions and are thus potentially well-suited 
to controlled exploration of solution improvement opportu•
 nities. However, they are generally not designed to enforce 
 global solution constraints. 
   Accordingly, the approach we propose takes the solution 
 improvement perspective of iterative repair methods as a 
starting point, but manages solution change in a more sys•
tematic, globally constrained manner. Starting with an initial 
baseline solution and a set U of unassignable tasks, the basic 
idea is to spend some amount of iterative repair search around 
the "footprint" of each unassignable task's feasible execution 
window in the schedule. Within the repair search for a given 
        criteria other than task priority are used to determine 
which task(s) to retract next, and higher priority tasks can be 
displaced by a lower priority task. If the repair search car•
ried out for a given task u can find a feasible rearrangement 
of currently scheduled tasks that allows u to be incorporated, 
then this solution is accepted, and we move on to the next 
unconsidered task If, alternatively, the repair search 
for a given task u is not able to feasibly reassign all tasks dis•
placed by the insertion of u into the schedule, then the state of 
the schedule prior to consideration of u is restored, and u re•
mains unassignable. Conceptually, the approach can be seen 
as successively relaxing and reasserting the global constraint 
that higher priority missions must take precedence over lower 
priority missions, temporarily creating "infeasible" solutions 
in hopes of arriving at a better feasible solution. 
   In the subsections below, we describe this task swapping 
procedure, and the heuristics that drive it, in more detail. 

3.1 Task Swapping 


                                                                     Figure 2: Basic MissionSwap Search Procedure 

                                                                 Given these preliminaries, the basic repair search proce•
                                                               dure for inserting an unassignable task, referred to as Mis•
                                                               sionSwap, is outlined in Figure 2. It proceeds by computing 
                                                                                 (line 2), and then retracting one conflict•
                                                               ing task for each (line3). 
                                                               This frees up capacity for inserting task (line 5), and once 
                                                               this is done, an attempt is made to feasibly reassign each re•
                                                               tracted task (line 6). For those retracted tasks that remain 
                                                               unassignable, MissionSwap is recursively applied (lines 7-
                                                               10). As a given task is inserted by MissionSwap, it is marked 
                                                               as protected, which prevents subsequent retraction by any 
                                                               later calls to MissionSwap. 
                                                                 In Figure 3, top-level InsertUnassignableTasks proce•
                                                               dure is shown. Once MissionSwap has been applied to all 
                                                               unassignable tasks, one last attempt is made to schedule any 
                                                               remaining tasks. This step attempts to capitalize on any op•
                                                               portunities that have emerged as a side-effect of Mission-
                                                               Swap's schedule re-arrangement. 
                                                                 The driver of this repair process is the retraction heuristic 
                                                               ChooseTaskToRetract. We define several possibilities in the 
                                                               next subsection. 


1220                                                                                                       SCHEDULING                                                                  A potentially more informed measure of contention is one 
                                                               that considers the proportion of a task i's required execution 
                                                               interval on resource r that is currently unavailable (i.e., con•
                                                               tained in a conflict). For any conflict 
                                                               assume that dure designates the duration of int. Then we 
                                                               define a task /'s overall contention level as 


                                                               Using this measure, we can define a third retraction heuristic: 

        Figure 3: InsertUnassignableTasks procedure            4 Computational Analysis 
                                                               The genesis of the max-flexibility heuristic and the mission-
3.2 Retraction Heuristics 
                                                               swap algorithm took place while experimenting with the 
In designing a retraction heuristic, our general goal is to re• canonical data set used to test and demonstrate the AMC Al•
tract the task assignment that posseses the greatest potential locator. This data set, which we'll refer to as the Tutorial Data 
for reassignment. One simple estimate of this potential is the Set, consists of 982 actual missions (3,251 operations) and 12 
scheduling flexibility provided by a task's feasible execution actual air wings, and represents a two to three week horizon 
interval. More precisely, let repre•                           of AMC airlift and air refueling missions. 
sent the amount of time available for executing task ?. Then a   Using the basic allocation procedure the system is able to 
simple, resource-indepedent measure of flexibility is          feasibly allocate all but two of the 982 missions in the Tutorial 
                                                               Data Set. For demonstration purposes those two missions are 
                                                               usually added to the schedule by over-allocating a given wing. 
                                                                 It turned out that this particular data set was not as re•
   However, recall that di is not the total amount of time that source over-constrained as we had thought. Application of 
the supporting resource must be allocated for. dt only ac•     the mission-swap algorithm with even a random retraction 
counts for the time required to execute the task; it does not  heuristic is able to schedule the two unassignable missions 
account for the time to position and deposition the resource   in a few seconds. 
for task execution. The total time that a given resource r 
must be allocated for is                                       4.1 Experimental Design 
Given that the resources being allocated are generally sched•
                                                               For our experiments we generated data sets using the Tutorial 
uled near to capacity, a worst-case, resource-dependent mea•
                                                               Data Set as a seed: five data sets of twenty problems each 
sure offlexibilty is  
                                                               were generated, with the wing capacities randomly reduced 

                                                                     For each data set, the basic allocation procedure was 
                                                               employed to quickly schedule as many missions as possible 
                                                               in priority order. The number of unassignable missions was 
                                                               recorded, and then InsertUnassignableTasks was executed 
                                                               on the set of unassignable missions. Then run-time, nodes 
                                                               searched (number of times MissionSwap was called), and 
                                                               final number of unassignable missions were recorded. For 
                                                               each run this process was repeated with min-conflicts, min-
                                                               contention, max-flexibility and random choice as the retrac•
                                                               tion heuristic (ChooseTaskToRetract, in Figure2). 
                                                                 Experiments were run on a 1.8Ghz Pentium IV PC with 
                                                               1 Gb of RAM, running Windows 2000. The scheduling engine 
                                                               is implemented in Allegro Common Lisp 6.1. 

                                                               4.2 Results 
                                                               The results of our experiments are shown in Figures 4, 
                                                               5, and 6. As expected, as the random degree of over-
                                                               allocation was increased from 10% to 50%, the number of 
                                                               initial unassignable missions increased, as did the numbers of 
                                                               unassignables after application of InsertUnassignableTasks. 
                                                               Over all problem sets the baseline random-choice heuristic 


SCHEDULING                                                                                                          1221                                                                            Figure 6: Search Nodes Explored 

                                                              more highly constrained, contention will increase to the limit 
                                                              of available capacity, and thus its measure will serve as a less 
                                                              informed heuristic. Under these conditions, though, a met•
                                                              ric based on a task's "innate" flexibility to schedule along a 
                                                              timeline might be more useful. 

                                                              5 Related Work 
                                                              The use of measures of temporal flexibility and resource con•
                                                              tention as guidance for variable and value ordering has a long 
                                                              history in the field of constraint-directed scheduling [Sadeh, 
                                                              1991; Smith and Cheng, 1993; Beck, 1999], although for the 
                                                              most part use has been in constructive search contexts. Our 
                                                              work, alternatively, seeks to exploit these measures in an iter•
                                                              ative repair search context, to determine which tasks to retract 
              Figure 5: Computational Cost                    and reassign. 
                                                                Work in manufacturing scheduling domains has addressed 
                                                              a broad range of priority based scheduling problems [Mor•
was able to assign 36% of the unassignable missions. Min-     ton and Pentico, 1993], and some of this work (e.g., [Smith, 
conflicts, min-contention and max-fiexibility were able to as• 1994]) discusses heuristic techniques for schedule repair. 
sign 30%, 38%, and 42%, respectively.                         However, a broad assumption that underlies most of this work 
  What is most striking, though, are the results shown in fig• is that due dates are relaxable and the objective is to minimize 
ures five and six. While max-flexibility achieved somewhat    tardiness. As such, these are not over-subscribed problems in 
better results in solution quality, it did so while searching far the same sense as the type of problem considered here. 
less and reaching a solution far more quickly than any of the   Research in the domain of space mission planning and 
competing heuristics.                                         scheduling, alternatively, has focused on the solution of over•
                                                              subscribed problems (e.g., [Minton et al., 1992; Johnston 
4.3 Discussion                                                and Miller, 1994; Rabideau et al, 1999]). Generally this re•
Our preliminary results show that in the face of a resource   search is aimed at solving the single mission, single resource 
constrained scheduling problem, the decision of what tasks to problem (e.g., the observing schedule for a space telescope). 
temporarily retract in order admit more tasks into the sched• [Zweben et al.9 1994]'s shuttle ground processing domain is 
ule may be delegated to an extremely simple and cheap retrac• one exception, wherein both multiple resources and multi-
tion heuristic: max-flexibility. In order for this heuristic to be capacity resources are considered. The approach employed 
effective it should retract tasks that have a high likelihood of here is repair-based, and simple heuristics are employed to 
reassignment elsewhere within their feasible windows.         mitigate resource constraint violations. It is not clear how 
  It is somewhat counter-intuitive, then, that max-flexibility useful this technique would be, however, in addressing prob•
is able to perform so well, based only on task flexibility to re• lems where maintaining task priority is crucial. 
schedule, irrespective of other competing tasks in the sched•   Recent work in the area of scheduling observations on mul•
ule. Min-contention performance approaches that of max-       tiple earth satellites comes closest to tackling the same is•
flexibility, but only at significant additional cost - approxi• sues which we address: multiple resources, multi-capacity 
mately triple the run-time on average in our experiments.     resources, fixed time windows, and mission priority. [Pem-
  Our conjecture is that as a schedule becomes more and       berton, 2000] proposes a solution to preserving priority in the 


1222                                                                                                      SCHEDULING 