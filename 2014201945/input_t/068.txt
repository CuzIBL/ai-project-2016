         A Theory of Average-Case Compilability in Knowledge Representation 

                                                      Hubie Chen 
                                          Department of Computer Science 
                                                  Cornell University 
                                               Ithaca, NY 14853, USA 
                                                hubes @ cs.cornell .edu 


                        Abstract                               of xr Intuitively, this means that formalism B is at least as 
                                                               space efficient as formalism A: whatever can be expressed in 
     Compilability is a fundamental property of knowl•         formalism A can be expressed, with about the same level of 
     edge representation formalisms which captures             succinctness, in formalism B. 
     how succinctly information can be expressed. Al•            A number of papers compared the compilability of dif•
     though many results concerning compilability have         ferent formalisms [Kautz et ai, 1995; Gogic el al, 1995; 
     been obtained, they are all "worst-case" results.         Khardon and Roth, 1996; Cadoli et al 1996; 1997; 1999; 
     We develop a theory of average-case compilability         2000a; 2000b]. In many cases, these papers rigorously prove 
     which allows for the formal comparison and clas•          that one formalism B is strictly more succinct than another 
     sification of knowledge representation formalisms         formalism A - that is, A is compilable to B, but B is not 
     "on average."                                             compilable to A. This means that there is no way to trans•
                                                               late knowledge bases in B to knowledge bases in A, unless 
                                                               the translation is allowed to increase the size of knowledge 
1 Introduction                                                 bases by a super-polynomial amount. In other words, any 
By now, a multitude of knowledge representation formalisms     translation of knowledge bases in B to knowledge bases in 
have been proposed and studied in the literature, for exam•    A is inherently exponential in size.3 Observe that this state•
ple, propositional logic, default logic, and circumscription   ment has the same flavor as the famous "P does not equal NP" 
- to name a few. The comparison of these formalisms has        conjecture from classical complexity theory. This conjecture 
been a major research theme over the past decade. In par•      holds that no algorithm can solve an NP-complete problem, 
ticular, many results have been obtained on the computa•       unless the algorithm is allowed to take super-polynomial time 
tional complexity of inference and model checking - core       on some inputs - or, put differently, any algorithm solving a 
reasoning tasks associated with each formalism. The funda•     NP-complete problem is inherently exponential in time. 
mental property of compilability, which measures how effi•       Notice that the above definition of "formalism A is com•
ciently or succinctly a formalism represents knowledge, has    pilable to formalism B" docs not take into account the dif•

also been studied.1 There is now a rich body of results        ficulty or complexity of computing the translation between 
concerning compilability; however, all of these results ad•    knowledge bases in A and knowledge bases in B. This non-
dress the "worst-case", and are thus susceptible to the com•   uniformity is a key feature of the definition: the existence of 
plaint that they do not address "average" or "typical" com•    a succinct translation is sufficient; an efficiently computable 
pilability. The main contribution of this paper is a theoret•  translation is not necessary. It turns out that many proofs of 
ical framework providing a language and tools for compar•      non-compilability - that is, proofs of statements of the form 
ing and classifying the compilability of formalisms on aver•   "formalism B is not compilable to formalism A" - rely on re•
age. Our framework is built on notions and insights from the   sults from non-uniform complexity theory. Such proofs often 
theory of compilability clases due to Cadoli et al. 12000a;    are not unconditional, but are contingent upon the widely be•
2000b] and the theory of average-case time complexity due      lieved complexity-theoretic assumption that the polynomial 

to Levin 11986].                                               hierarchy does not collapse.4 

1.1 Background                                                    2ln the technical portion of this paper, this definition will be cap•
                                                               tured formally by the rcducibility. 
Compilability. Informally, a formalism A is compilable to 
                                                                  3Here, by "exponential" we mean exceeding every polynomial 
a formalism B if for every knowledge base x in formalism       infinitely often. 

A, there is a knowledge base in formalism D representing          4The polynomial hierarchy is a collection of complexity classes 
the same information as x with size polynomial in the length   which includes P, NP, co-NP, and other classes which are in essence 
                                                               generalizations of these three classes. For the intents and purposes 
    In previous work, compilability has also been called space effi• of this paper, this assumption can be thought of as being similar to 
ciency and succinctness.                                       the (perhaps better known) assumption that P does not equal NP (In 


KNOWLEDGE REPRESENTATION                                                                                             455  Compilability classes. The initial papers that demonstrated   1.2 Motivations and Approach 
 non-compilability results [Kautz et at., 1995; Gogic et al,   Worst-case versus average-case. Although crisp theo•
 1995; Khardon and Roth, 1996; Cadoli et al., 1996; 1997;      retical results can be obtained concerning compilability 
 1999] were based on ad hoc proofs, each of which iso•         and non-compilability, these are worst-case notions: non-
 lated two particular formalisms and then demonstrated non-    compilability of formalism B to formalism A implies that 
 compilability of one to the other. In [Cadoli et al, 2000a;   there is an infinite family of knowledge bases in B that can•
 2000b], new complexity classes measuring compilability,       not be succinctly translated into knowledge bases in A. Non-
 called compilability classes, were introduced; for every clas• compilability does not say anything about the density or fre•
 sical complexity class C, it is possible to define a compil•  quency of instances from the family of untranslatable knowl•
 ability class analog of C. The theory of compilability classes edge bases. This observation calls into question the real-
 made it possible to systematize proofs of non-compilability   world utility of studying compilability (as defined above); 
 much in the way classical complexity theory makes it pos•     if formalism B is compilable to formalism A for all but a 
 sible to systematize proofs of intractability. A proof that a pathological family of knowledge bases arising infrequently 
 language is NP-complete is demonstration that there is no     in practice, then formalism B is, for pragmatic purposes, 
 polynomial-time algorithm for the language, and that the lan• compilable to formalism A. Therefore, a theory which per•
guage has the same time complexity (up to a polynomial) as     mits formal results of compilability on average is necessary. 
all other NP-complete languages. Likewise, a proof that a for• This paper lays the foundations for a theory of average-case 
malism is complete for the compilability class analog of NP    compilability. 
 is demonstration that it is not compilable to any formalism in  Notice that our objection to the worst-case nature of non-
the compilability class analog of P, and that the language is  compilability is not truly novel. It has long been observed 
compilable to and from all other formalisms complete for the   that NP-completeness of a language L does not imply hard•
compilability class analog of NP.5 (More generally, when C     ness of L on typical or real-world instances. Our objection is 
is a class from the polynomial hierarchy, a proof that a for•  really this old observation, masquerading in the new context 
malism is complete for the compilability class analog of C is  of compilability. 
demonstration that it is not compilable to any formalism in 
                                                                 One theory that was developed in response to this old 
the compilability class analog of C", if C" is below C in the 
                                                               observation is the theory of average-case time complexity 
polynomial hierarchy.) 
                                                               (ACTC), initiated by Levin [1986]. Our theory of average-
   In addition to providing a methodology for comparing        case compilability will be built on a key notion of ACTC -
formalisms with respect to compilability, the compilability    that of "polynomial on average." Moreover, there are useful 
classes capture formally the notion of off-line preprocessing. analogies between our theory and the theory of ACTC. Con•
Preprocessing a knowledge base off-line can be of great util•  sequently, we provide a brief overview of ACTC. 
ity if the resulting, processed knowledge base is in a form 
that allows for quick, on-line response to queries (and if many 
                                                               Average-case time complexity. By definition, a language 
queries are expected). Membership of a formalism A in the 
                                                               L (consisting of strings) is in P if there is an algorithm decid•
compilability class analog of P will mean that any knowledge 
                                                               ing membership for L in polynomial time. The idea behind 
base x of A can be preprocessed into a form that does not un•
                                                               ACTC is to relax the requirement in this definition that a suit•
reasonably increase the size of x, but permits queries to x to 
                                                               able algorithm is one that always runs in polynomial time; 
be processed efficiently (that is, in polynomial time). 
                                                               this is done by placing a probability distribution on all strings 
   The compilability classes are part of a formal framework    and allowing an algorithm to take super-polynomial times on 
for discussing compilability, which includes robust notions    unlikely strings. 
of reduction and completeness. Not only is this framework        A language paired with a probability distribution over all 
extremely appealing from a theoretical point of view, but the  strings is called a distributional language. While languages 
compilability classes are rife with natural complete problems  are the objects classified by classical complexity theory, dis•
- the sine qua non of complexity classes purporting to be use• tributional languages are the objects classified by ACTC. A 
ful in performing problem classification. Indeed, there do not distributional language is in the average-case version 
appear to be any knowledge representation formalisms which     of P, average-P, if there is an algorithm deciding member•
defy classification as complete for a compilability class. On  ship for L in time polynomial on - a concept to be 
the downside, many of the existing classification results are  discussed formally later in this paper. 
quite negative, showing that a formalism is complete for (the    There is a vast literature on ACTC; for more information, 
compilability class analog of) NP, coNP, or a higher level of  we recommend the overviews/surveys [Johnson, 1984; Gure-
the polynomial hierarchy.                                      vich, 1989; 1991a; 1991b; Impagliazzo, 1995; Wang, 1997; 
                                                               Goldreich, 1997] as starting points. 

                                                               Average-case compilability. In laying down a theory for 
fact, if the polynomial hierarchy does not collapse, then P does not average-case compilability, we want to "soften" the definition 
equal NP.)                                                     of "formalism A is compilable to formalism J3" by relaxing 

   5Our discussion presumes that the polynomial hierarchy does not the requirement that there needs to be a translation of knowl•
collapse.                                                      edge bases of strictly polynomial size. This is done roughly in 


456                                                                                    KNOWLEDGE REPRESENTATION analogy to the described development of ACTC. We first de•     are examples of KRFs which capture model checking and in•
fine a distributional formalism to be a formalism paired with  ference for 3-SAT formulas. 
a probability distribution over all knowledge bases. Then, a     Propositional-Logic-MC 
distributional formalism is (informally) compilable on 
                                                                   {(x, y) : x is a 3-SAT formula and y is a model of x} 
average to a formalism B if there is a translation of knowl•
edge bases of size polynomial on                                 Clause-Inference 
   Using the notion of "compilable on average," we de•
                                                                        : x is a 3-SAT formula, y is a 3-clause, and 
fine average-case analogs of compilability classes. These 
average-case analogs contain distributional formalisms, in       Notice the generality of the definition of a KRF; the knowl•
contrast to the compilability classes themselves, which con•   edge represented (the various may be models, formulas, 
tain pure formalisms. Intuitively, membership of a distri•     or some altogether different combinatorial structures. 
butional formalism in the average-case compilability 
class analog of P will mean the following: any knowledge       3 Compilability classes and reductions 
base x of A can be preprocessed in a way that tends not to in• This section reviews the theory of compilability classes. 
crease the size of x by more than a polynomial (with respect   There are two different types of compilability classes, uni•
to U), and that allows for rapid processing of queries to x.   form and non-uniform, but our focus is on the latter, for rea•
                                                               sons discussed below. We emphasize that none of the defini•
2 Preliminaries                                                tions, theorems, or insights in this section are our own, but 
In this section, we present notation and assumptions that will rather, are due to [Cadoli et al., 2000a; 2000b], on which our 
be used throughout the paper.                                  presentation is based. 
   We assume to be a fixed finite alphabet which is used         The formal definition of non-uniform compilability may 
to form strings. We will at times assume that pairs of strings by itself look non-intuitive, so we first attempt to describe 
(that is, elements of are represented as strings (that         some of the ideas behind this definition, before giving the 
is, elements of ; when this assumption is made, we as•         actual definition. Intuitively, we want to say that a KRF F 
sume that the representation is via a pairing function         is compilable if membership queries can be decided 
such that the length of (x, y) is linear in For a string       efficiently after the KB x is preprocessed into a new KB /(x). 
                                                               We want to constrain the size of the new ; otherwise, 
                   denote that is, the length of x written 
in unary notation.                                             it may be prohibitively large to store. We arrive at a candidate 
                                                               definition of compilability: say that a KRF F is in COmp-C 
   We assume that the reader has familiarity with basic no•
                                                               if for some polynomial-size function / and a second KRF 
tions of computational complexity theory - in particular, the 
                                                                       the property 
classes of the polynomial hierarchy (P, NP, CO-NP, 
etc.) and the polynomial many-one reduction [Balcdzar            for all pairs if and only if 
et al., 1995]. A language is a subset of , that is, a set of 
strings. A complexity class is a set of languages. When C      holds. Notice that the class C constrains the difficulty of de•
is a complexity class and is a reduction, we say that C is     ciding a post-processing query of course, such 
compatible with if for all languages A and B, A B and          queries can be decided efficiently when C = P. However, to 
B C imply that A C. We will assume throughout that             permit fine classification of KRFs, we leave C as a parameter 
every complexity class C is compatible with the polynomial     to the definition of COmp-C. 
many-one reduction We say that a language B is com•
                                                                 The above definition misses one important detail - non-
plete for a complexity class C under reductions if B C 
                                                               uniformity. If F is a KRF such that F    is always a finite 
and for all                                                                                           x
                                                               set, F can never be complete for comp-C when C is a class 
   A function is polynomial-size if there exists 
                                                               of the polynomial hierarchy above P. At the same time, 
a polynomial P such that for all 
                                                               there are KRFs with this "finiteness" property that are prov-
A function / : is polynomial-time computable if 
                                                               ably not in comp-P. As an example, Clause-Inference is 
there exist a polynomial p and a Turing machine M such that 
                                                               in COmp-CO-NP, but is neither comp-CO-NP-complete nor 
for all , the Turing machine M, on input x, produces 
                                                               in comp-P.   Hence, the classes comp-C fail to capture the 
f(x) in time less than                                                    8
                                                               compilability of some very natural KRFs. (For more informa•
Definition 2.1 A knowledge representation formalism (KRF)      tion on these matters, as well as proofs of the claims, we refer 
is a subset of When F is a KRF and we let                      the reader to [Cadoli et al, 2000a].) To resolve this issue, we 

Fx denote the set                                              allow the length of a query to be known to the compilation 
                                                               mapping /. 
  Intuitively, each can be thought of as a knowledge 
base (KB), representing the information The following          Definition 3.1 (nu-COmp-C) Let C be a complexity class. 
                                                               A KRF F belongs to nu-COmp-C if there exists a binary 
   6In the technical portion of this paper, this definition will be cap• polynomial-size function and a KRF F' in 
tured formally by the reducibility.                            C such that the following property holds: 
   7Notice that every polynomial-time computable function is 
polynomial-size, but not every polynomial-size function is        8This discussion presumes that the polynomial hierarchy does 
polynomial-time computable.                                    not collapse. 


KNOWLEDGE REPRESENTATION                                                                                             457                                                                   We are now ready to define our new "average-
                                                               compilability" classes; formally, each class is a set of DKRFs. 
                                                               The definition can be viewed as a relaxation of Definition 3.1. 
   The fact that the compilation mapping may use the length 
                                                               The difference is that the translation mapping 
 of y may seem a bit strange; after all, we wish to capture, 
                                                                   need no longer be of strictly polynomial size, but is now 
 after preprocessing on a knowledge base x, the difficulty of 
                                                               only required to be of size polynomial on average. 
 answering queries of the form y Fx. However, it is rea­
 sonable to assume that we will never be interested in such    Definition 4.4 (avg-nu-COmp-C) Let C be a complexity 
 a query when the length of y greatly exceeds that of x -      class. A DKRF (F, p) belongs to avg-nu-COmp-C if there 
 since such a query requires a large amount of time to even    exists a binary function of size polynomial 
 write down. Under this assumption, Definition 3.1 is equiv­   on p-average and a KRF F' in C such that the property of 
 alent to the "uniform" definition given above. (Formally, if  Definition 3.1 holds. 
 there exists a polynomial p such that (x, y) F implies that     There is an alternative way to define avg-nu-COmp-C, 
 \y\ p(\x\), then F is in nu-comp-C if and only if F is in     in terms of the following type of reduction, which relates 
 comp-C.)                                                      DKRFs to KRFs. 
   The following notion of reduction, associated with the 
 nu-COmp-C classes, allows one to compare the compilability    Definition 4.5 (dist-nu-comp reducibility) A DKRF (F, p) 
 of different KRFs.                                            is dist-nu-comp reducible to a KRF F' (denoted by 
                                                               Fif there exist binary polynomial-size 
 Definition 3.2 (nu-comp reducibility) A KRF F is nu-comp      functionsand a binary polynomial-
 reducible to a KRF F' (denoted by if there 
                                                               time computable function such that 
 exist binary polynomial-size functions fi,f'2 • 
                                                                       is of size polynomial on -average*9 and the property 
 and a binary polynomial-time computable function g :          of Definition 3.2 holds. 
           such that the following property' holds: 
                                                               Theorem 4.6 Suppose that is a DKRF and that C is a 
   for all pairs if and only if 
                                                               complexity class. The DKRF is in avg-nu-COmp-C 
                                                               if and only if F' for some F' in 
 Theorem 3.3 The nu-comp reduction is transitive and is        nu-comp-C. 
 compatible with the class nu-comp-C (for every complexity 
                                                                 This theorem has an important corollary: if nu-comp-C 
 class C). 
                                                               has a complete KRF F' then the DKRFs contained in 
   We note that Clause-Inference is nu-comp-co-NP-             avg-nu-comp-C are exactly those which reduce to F'. In or­
 complete, under nu-comp reductions.                           der to establish the corollary, the following lemma is needed. 
   Finally, we observe that the nu-comp-C analog of the 
                                                               Lemma 4.7 Suppose that is a DKRF and that F' and 
polynomial hierarchy does not collapse. 
                                                               F" are KRFs. If 
Theorem 3.4 lfC\ and C>L are classes of the polynomial hi•     F",then 
 erarchy such that C2 is higher than C1, then nu-COmp-C\ 
                                                                 Roughly, Lemma 4.7 can be viewed as a proof of transitiv­
 is properly contained in nu-COmp-C2 (under the assumption 
                                                               ity: ifreduces to F' and F' reduces to F", then 
 that the polynomial hierarchy does not collapse). 
                                                               reduces to (under the right notions of reduction). 
4 Average-case compilability                                   Corollary 4.8 Suppose that is a DKRF C is a com•
                                                               plexity class and the KRF F   is nu-COmp-C-complete un•
 In this section, we present our new theory of average-case                                f
                                                               der nu-comp reductions. Then, the DKRF is in 
compilability. 
                                                               avg-nu-comp-C if and only if 
Definition 4.1 A probability distribution is a real-
                                                                 It is worth noting here that the class nu-comp-C has a 
 valued function from such that 
                                                               complete KRF under nu-comp reductions whenever the un­
                                                               derlying complexity class C has a complete language under 
   The nu-comp-C classes are used to classify and compare          reductions fCadoli et al, 2000a]. 
 KRFs; our new classes will be used to classify and compare      We now give a notion of reduction for the comparison of 
 what we call distributional KRFs.                             DKRFs. When u and v are probability distributions, we say 
Definition 4.2 A distributional KRF (DKRF) is a pair (F, u)    that v dominates p if there exists a polynomial p such that for 
consisting of a KRF F and a probability distribution u.        all 
                                                               Definition 4.9 (avg-nu-comp reducibility) A DKRF is 
   We now define the notion of "polynomial on average.1' This 
definition is exactly that used in the theory of average-case  avg-nu-comp reducible to a DKRF if there exist a nu-
time complexity (up to appropriate changes of the domain       comp reduction (/1, f2, g)from F to Ff and a probability dis•
and range of the functions whose size we wish to measure).     tribution dominating p such that 
                                                               where the sum is over all (x, /) such that [f\(x, I) = y and 
                                                               there exists 


458                                                                                    KNOWLEDGE REPRESENTATION Theorem 4.10 The avg-nu-comp reduction is transitive and                    • Why is a probability distribution over E* x 1 * as opposed 
is compatible with the class avg-nu-COmp-C (for every com-               to over E* ? After all, the knowledge bases are represented by 
plexity class C).                                                        elements of , and an element of 'E* x 1* is just a "slice" 
                                                                         of a knowledge base. 
5 Discussion                                                               Let F be a KRF conforming to the "bounded-query-
We now discuss some of the considerations behind the defi­               length" assumption discussed in Section 3, that is, suppose 
nitions in the previous section. When                                    that there exists a polynomial p such that (x, y) E F implies 
is a probability distribution and S is a subset of                       |y| < P(IxI)- Then, a distribution over E* naturally induces a 
let denote the conditional distribution of on 5, that                    distribution over E* x 1* for the padded version of F defined 
is, the function defined on , with value equal to                        as F' = {(x,z) : z - yDk, \z\ = p(\x\), (x,y) € F] (where 
                                                                         □ is an extra padding symbol), which has the property that all 
   • Why is Levin s notion of polynomial-on-average used in­             strings in Fx. have the same length, for any x. Note that all of 
stead of the naive formulation of expected polynomial size?              the example KRFs in this paper already have this property. 
   According to the naive formulation, a function / : 
           has expected polynomial size (with respect to μ) if           6 Example: model checking for 
there exists k 1 such that for all n,                                         circumscription 

                                                                         In this section, we illustrate the use of our new the­
                                                                         ory by showing that model checking for circumscription 
It is well known that this notion of expected polynomial is              on 3-SAT formulas (formalized below and denoted by 
not closed under polynomials (see for example [Goldreich,                Circumscription-MC(d)) is in avg-nu-comp-P, under a nat­
 1997]). For instance, there exist functions                             ural probability distribution where formulas are generated 
    and a distribution such that and by including each clause independently with identical prob­
/ has expected polynomial size, but /' fails to have expected            ability. Since Circumscription-MC(d) is nu-comp-co-NP-

polynomial size.                                                         hard,10 this result gives a natural DKRF which is contained 
   In our average-case compilability theory, this "lack of clo­          in avg-nu-COmp-P, but which has a KRF which is provably 
sure under polynomials" problem manifests itself in the fol­             not in nu-COmp-P (Theorem 3.4). 
lowing way. Suppose that, using the alternative definition of 
                                                                           Suppose that is a 3-SAT formula over 
avg-nu-comp-C given in Theorem 4.6, the KRF F' is wit­
                                                                         {v ,..., v   ], and 5 is a subset of V   . We say that a model 
ness to the membership of DKRF in avg-nu-comp-C,                           1         n                           n
                                                                         a:V  -> {0,1} of' if for all 
that is, '. Surely, if F" is at least as                                    n
space efficient as F' (that is, , then one ex­                           other models b :i for all 
pects that F" would also witness the membership of (F, μ) in             s S] implies that In addition, 
avg-nu-comp-C; this is the content of Lemma 4.7, on which                a model a : S {0,1} of is said to be a minimal model if 
Corollary 4.8 relies. However, if expected polynomial size               it is the restriction of a S-minimal model a : Vn --> {0,1} (of 
is used instead of polynomial on average in Definition 4.3, 
Lemma 4.7 breaks down - then, there would exist a DKRF                     We define Circumscription-MC(d) to be the set 
(F, μ) and KRFs F' and F" such that 
                                                                                       is a 3-SAT formula on variable set on Vn and 
F\ F' F", and does not 
                                                                                                             is a minimal model of 
reduce to F". 

   • Why does a DKRF have one probability distribution -                 Let Wn denote the set 

over all elements of - as opposed to an ensemble                           is a 3-SAT formula on Vn and a : ' —> 
of distributions, each of which is over some finite subset of            {0,1} is an assignment)}, which is the set of all syn­
                                                                         tactically well-formed pairs that may or may not be in 
   Defining a DKRF to be a KRF paired with an ensemble                   Circumscription-MC(d)-
of distributions (each of which is, say, defined on a different 
                                                                         Theorem 6.1 Let v        denote the distribution on 3-SAT for•
string length) may seem more natural than the given defini­                                    n,c
tion, where there is only one distribution, on all strings.              mulas over Vn where a formula is generated by including 
   However, the literature on ACTC contains many alterna­                each of the 8(n/3) 3-clauses independently with probability 
tive formulations of "polynomial on average" (equivalent to                        r all real numbers c > 0 and natural numbers 
that given in Definition 4.3) and sufficient conditions for a                      Let (with c > 0 and d (0, (0,1); be any dis•
function to be polynomial on average. (For example, there is             tribution such that 
a different formulation of Definition 4.3 in terms of ensem­
bles of distributions, each having finite support, in [Impagli-            • for all n, and 
azzo, 1995].) These give rise to alternative formulations of               • = 0 ifis a 3-SAT formula on 
avg-nu-comp-C, and so the particular characterizations we                     [dn\. 
give for avg-nu-comp-C (in Definition 4.4 and Theorem 4.6) 
were, in some sense, chosen over provably equal characteri­                10This can be shown using a result in [Gogic et al, 1995]. 
zations on purely aesthetic grounds.                                       11 Here, denotes the usual total ordering on {0,1} where 


KNOWLEDGE REPRESENTATION                                                                                                                459 