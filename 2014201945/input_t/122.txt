                   Aggregate Functions in Disjunctive Logic Programming: 
                      Semantics, Complexity, and Implementation in DLV* 

             Tina Dell'Armi                        Wolfgang Faber                          Giuseppe Ielpa 
         Dept. of Mathematics,           Inst. f. Informationssysteme 184/3,           Dept. of Mathematics, 
            Univ. of Calabria                           TU Wien                           Univ. of Calabria 
        87030 Rende (CS), Italy                 A-1040Wien, Austria                   87030 Rende (CS), Italy 
         dellarmi@mat.unical.it                 faber@kr.tuwien.ac.at                    ielpa@mat.unical.it 

                           Nicola Leone Gerald Pfeifer 
            Dept. of Mathematics, Univ. of Calabria Inst. f. Informationssysteme 184/2, TU Wien 
                     87030 Rende (CS), Italy A-1040 Wien, Austria 
                          leone@unical.it pfeifer@dbai.tuwien.ac.at 

                        Abstract                               DLP is strictly more expressive than normal (disjunction-
                                                               free) logic programming, whose expressiveness is limited to 
     Disjunctive Logic Programming (DLP) is a very 
                                                               properties decidable in NP. DLP can thus express problems 
     expressive formalism: it allows to express every 
                                                               which cannot be translated to Satisfiability of CNF formu•
     property of finite structures that is decidable in the 
                                                               las in polynomial time. Importantly, besides enlarging the 
     complexity class E^ (NP    ). Despite the high ex•
                             NH                                class of applications which can be encoded in the language, 
     pressiveness of DLP, there are some simple proper•
                                                               disjunction often allows for representing problems of lower 
     ties, often arising in real-world applications, which 
                                                               complexity in a simpler and more natural fashion (see [Eiter 
     cannot be encoded in a simple and natural manner. 
                                                               et al., 2000]). 
     Among these, properties requiring to apply some 
     arithmetic operators (like sum, times, count) on a        The problem. Despite this high expressiveness, there are 
     set of elements satisfying some conditions, can•          some simple properties, often arising in real-world applica•
     not be naturally expressed in DLP. To overcome            tions, which cannot be encoded in DLP in a simple and nat•
     this deficiency, in this paper we extend DLP by           ural manner. Among these are properties requiring to apply 
     aggregate functions. We formally define the se•           some arithmetic operator (e.g., sum, times, count) on a set of 
     mantics of the new language, named DLP-4. We              elements satisfying some conditions. Suppose, for instance, 
     show the usefulness of the new constructs on rel•         that you want to know if the sum of the salaries of the em•
     evant knowledge-based problems. We analyze the            ployees working in a team exceeds a given budget (see Team 
     computational complexity of DLP"4, showing that           Building, in Section 3). To this end, you should first order 
     the addition of aggregates does not bring a higher        the employees defining a successor relation. You should then 
     cost in that respect. We provide an implementation        define a sum predicate, in a recursive way, which computes 

     of the DLP-4 language in DLV- the state-of-the-           the sum of all salaries, and compare its result with the given 
     art DLP system - and report on experiments which          budget. This approach has two drawbacks: (1) It is bad from 
     confirm the usefulness of the proposed extension          the KR perspective, as the encoding is not natural at all; (2) it 
     also for the efficiency of the computation.               is inefficient, as the (instantiation of the) program is quadratic 
                                                               (in the cardinality of the input set of employees). Thus, there 
                                                               is a clear need to enrich DLP with suitable constructs for the 
1 Introduction                                                 natural representation and to provide means for an efficient 
                                                               evaluation of such properties. 
Expressiveness of DLP. Disjunctive Logic Programs (DLP) 
are logic programs where (nonmonotonic) negation may oc•       Contribution. We overcome the above deficiency of DLP. 
cur in the bodies, and disjunction may occur in the heads of   Instead of inventing new constructs from scratch, we extend 
rules. This language is very expressive in a precise math•     the language with a sort of aggregate functions, first studied 
ematical sense: it allows to express every property of fi•     in the context of deductive databases, and implement them 

nite structures that is decidable in the complexity class Ep2  in DLV [Eiter el al.f 2000] - the state-of-the-art Disjunctive 
(NPNP). Therefore, under widely believed assumptions,          Logic Programming system. The main contributions of this 
   *This work was supported by the European Commission under   paper are the following. 
projects IST-2002-33570 INFOMIX, IST-2001-32429 ICONS, and     • We extend Disjunctive Logic Programming by aggregate 
FET-2001-37004WASP.                                            functions and formally define the semantics of the resulting 


NONMONOTONIC REASONING                                                                                                847  language, named DLP*4.                                           For simplicity, and without loss of generality, we assume 
 • We address knowledge representation issues, showing the     that the body of each rule contains at most one aggregate 
 impact of the new constructs on relevant problems.            atom. A global variable of a rule r is a variable appearing 

 • We analyze the computational complexity of DLP*4. Im•       in some standard atom of r; a local variable of r is a variable 
 portantly, it turns out that the addition of aggregates does  appearing solely in an aggregate function in r. 
 not increase the computational complexity, which remains the     Safety. A rule r is safe if the following conditions hold: (i) 
 same as for reasoning on DLP programs.                        each global variable of r appears in a positive standard literal 

 • We provide an implementation of DLP*4 in the DLV sys•       in the body of r; (ii) each local variable of r' appearing in a 
 tem, deriving new algorithms and optimization techniques for  symbolic set , also appears in a positive literal 
 the efficient evaluation.                                     in Conj\ (iii) each guard of an aggregate atom of r* is either 
 • We report on experimentation, evaluating the impact of the  a constant or a global variable. A program is safe if all of its 
 proposed language extension on efficiency. The experiments    rules are safe. 
 confirm that, besides providing relevant advantages from the  Example 1 Consider the following rules: 
 knowledge representation point of view, aggregate functions 
 can bring significant computational gains. 

 • We compare DLP*4 with related work. 
 We present the most relevant aspects of DLP*4 and of its im•   The first rule is safe, while the second is not, since both local 
 plementation here, referring the interested reader to a techni• variables Z and S violate condition (ii). The third rule is not 
 cal report with all details [DellArmi et al, 2003].           safe cither, since the guard T is not a global variable, violating 
                                                               condition (iii). 

 2 The DLPA Language                                             Stratification. A DLP*4 program V is aggregate-stratified 
 In this section, we provide a formal definition of the syntax if there exists a function , called level mapping, from the 

 and semantics of the DLP*4 language - an extension of DLP     set of (standard) predicates of V to ordinals, such that for each 
 by set-oriented functions (also called aggregate functions).  pair a and b of (standard) predicates of , and for each rule 
 We assume that the reader is familiar with standard DLP; we                  appears in the head of r, and 6 appears in an 
 refer to atoms, literals, rules, and programs of DLP, as stan• aggregate atom in the body of r, then , and (ii) if 
dard atoms, standard literals, standard rules, and standard    a appears in the head of r, and b occurs in a standard atom in 
programs, respectively. For further background, see [Gelfond   the body of r, then  
and Lifschitz, 1991; Eiter etal, 2000].                        Example 2 Consider the program consisting of a set of facts 
                                                               for predicates a and b, plus the following two rules: 
2.1 Syntax 

A (DLP*4) set is either a symbolic set or a ground set. A 
symbolic set is a pair , where Vars is a list                   The program is aggregate-stratified, as the level mapping 
                                                                                                     satisfies the required 
of variables and Coiij is a conjunction of standard literals.1 
A ground set is a set of pairs of the form , where             conditions. If we add the rule b(X):-p(X), then no legal 
l is a list of constants and Conj is a ground (variable free)  level-mapping exists and the program becomes aggregate-
conjunction of standard literals. An aggregate function is of  unstratificd. 
the form , where 5 is a set, and / is a function name            Intuitively, aggregate-stratification forbids recursion 
among An aggre•                                                through aggregates, which could cause an unclear se•
gate atom is ~ ~ where f(S) is an aggregate                    mantics in some cases. Consider, for instance, the 
function, , and Lg and Rg (called                              (aggregate-unstratified) program consisting only of rule 
left guard, and right guard, respectively) are terms. One of                                     . Neither p(a) nor is 
                        can be omitted. An atom is cither a    an intuitive meaning for the program. We should probably 
standard (DLP) atom or an aggregate atom. A literal L is an    assert that the above program does not have any answer set 
atom A or an atom A preceded by the default negation symbol    (defining a notion of "stability" for aggregates), but then 
not; if A is an aggregate atom, L is an aggregate literal,     positive programs would not always have an answer set if 
              rule r is a construct                            there is no integrity constraint. In the following we assume 

                                                               that DLP*4 programs are safe and aggregate-stratified. 
 where a \, • • •, an are standard atoms, b1, • • •, bm are atoms, 
and The disjunction a.\                                        2.2 Semantics 

               is the head of r, while the conjunction         Given a DLP*4 program denote the set of constants 
bu...,bk, not is the body of r. A (DLP*4;                      appearing in the set of the natural numbers oc•
program is a set of DLP*4 rules.                               curring in Up and B-p the set of standard atoms constructive 
Syntactic Restrictions and Notation                            from the (standard) predicates of V with constants in Up. 
                                                               Furthermore, given a set denotes the set of all multi•
   'intuitively, a symbolic set stands 
                                                               sets over elements from X. Let us now describe the domains 
for the set of A'-values making true, i.e., 
                                . Note that also negative liter• and the meanings of the aggregate functions we consider: 
als may occur in the conjunction Conj of a symbolic set.         count: defined over , the number of elements in the set. 


848                                                                                      NONMONOTONIC REASONING   sum: defined over , the sum of the numbers in the set.      well as the notion of model, minimal model, and answer set 
                                                              for DLP*   are an immediate extension of the corresponding 
  times: over the product of the numbers in the set.                   4
                                                      2       notions in DLP [Gelfond and Lifschitz, 1991], 
  min, max: defined over the mini•
                                                              Example 4 Consider the aggregate atom A — #sum{(l : 
mum/maximum element in the set; if the set contains also 
                                                              p(2,l)),(2 : p(2,2))} > 1 from Example 3. Let 5 be 
strings, the lexicographic ordering is considered.
                                              3               the ground set appearing in A. For interpretation I = 
If the argument of an aggregate function does not belong to its 
                                                              {r/(2),/;(2,2),t(2)j, I(S) = [2], the application of #sum 
domain, the aggregate evaluates to false, denoted as J_ (and 
                                                              over [2] yields 2, and A is therefore true w.r.t. 7, since 2 > 1. 
our implementation issues a warning in this case). 
                                                              I is an answer set of the program of Example 3. 
   A substitution is a mapping from a set of variables to the 
set Up of the constants appearing in the program V. A sub•
stitution from the set of global variables of a rule r (to U-p) 3 Knowledge Representation in DLP*4 
is a global substitution for r; a substitution from the set of In this section, we show how aggregate functions can be used 
local variables of a symbolic set 5 (to Up) is a local substi• to encode relevant problems. 
tution/or 5. Given a symbolic set without global variables 
                                                              Team Building. A project team has to be built from a set of 
5 = { Vars : Conj}, the instantiation of set 5 is the follow• employees according to the following specifications: 
ing ground set of pairs inst(S):                              (pi) The team consists of a certain number of employees. 
                                                              (p2) At least a given number of different skills must be 
A ground instance of a rule r is obtained in two steps: (1)   present in the team. 
a global substitution a for r is first applied over r; (2) ev• (p3) The sum of the salaries of the employees working in the 
ery symbolic set S in o(r) is replaced by its instantiation   team must not exceed the given budget. 
inst(S). The instantiation Ground(V) of a program V is        (p/i) The salary of each individual employee is within a spec•
the set of all possible instances of the rules of V.          ified limit. 
                                                              (pr}) The number of women working in the team has to reach 
                                                              at least a given number. 
Example 3 Consider the following program V\:                  Suppose that our employees are provided by a number of facts 
                                                              of the form emp(EmpId,Sex,Skill,Salary); the size of the team, 
                                                              the minimum number of different skills, the budget, the max•
                                                              imum salary, and the minimum number of women are speci•
 The instantiation Ground(V\) is the following:               fied by the facts nEmp(N), nSkill(N), budget(B), maxSal(M), 
                                                              and women(W). We then encode each property pj above by an 
  An interpretation for a DLP*4 program V is a set of stan•   aggregate atom A^ and enforce it by an integrity constraint 
dard ground atoms . The truth valuation I {A), where          containing not At. 
A is a standard ground literal or a standard ground conjunc•
tion, is defined in the usual way. Besides assigning truth val•
ues to the standard ground literals, an interpretation provides 
the meaning also to (ground) sets, aggregate functions and ag•
gregate literals; the meaning of a set, an aggregate function, 
and an aggregate atom under an interpretation, is a multiset, 
a value, and a truth-value, respectively. Let f(S) be a an ag•  Intuitively, the disjunctive rule "guesses" whether an em•
gregate function. The valuation I(S) of set 5 w.r.t. / is the ployee is included in the team or not, while the five con•
multiset of the first constant of the first components of the ele• straints correspond one-to-one to the five requirements pi-
ments in S whose conjunction is true w.r.t. J. More precisely, P5. Thanks to the aggregates the translation of the specifi•
let Conj is true                                              cations is surprisingly straightforward. The example high•
w.r.t. I}, then I(S) is the multiset                          lights the usefulness of representing both sets and multi•
The valuation I(f(S)) of an aggregate function f(S) w.r.t. /  sets in our language (a multiset can be obtained by spec•
is the result of the application of the function / on 7(5). (If ifying more than one variable in Vans of a symbolic set 
the multiset 7(5) is not in the domain of/,                   {Vars : Conj}). For instance, the encoding of p2 re•
  An aggregate atom . is true                                 quires a set, as we want to count different skills; two em•
w.r.t. I if: and, (ii) the relationships                      ployees in the team having the same skill, should count 
                                       hold whenever they     once w.r.t. p-2- On the contrary, p3 requires to sum the ele•
are present; otherwise, A is false.                           ments of a multiset; if two employees have the same salary, 
   Using the above notion of truth valuation for aggregate    both salaries should be summed up for p3. This is ob•
atoms, the truth valuations of aggregate literals and rules, as tained by adding the variable I to Vars. The valuation 
                                                              of {5a, 7 : c?7?p(7,5x,5fc, 5a),in(1)} yields the set 5 = 
      sum and times applied over an empty set return 0 and 1, {(5a, 7) : Sa is the salary of employee I in the team}. 
respectively.                                                 Then, the sum function is applied on the multiset of the first 
   3The latter is not yet supported in our f\ rst implementation. components Sa of the tuples (5a, 7) in 5 (see Section 2.2). 
   4Given a substitution a and a DLP*4 object Obj (rule, conjunc•
tion, set, etc.), with a little abuse of notation, we denote by a (Obj) Seating. We have to generate a sitting arrangement for 
the object obtained by replacing each variable X in Obj by (X). a number of guests, with ra tables and n chairs per table. 


NONMONOTONIC REASONING                                                                                              849  Guests who like each other should sit at the same table; guests is an aggregate literal over a symbolic set 
 who dislike each other should not sit at the same table.      First we compute an instantiation for the literals in B; 
   Suppose that the number of chairs per table is specified    this binds the global variables appearing in Aux. The (par•
 by nChairs(X) and that person(P) and table(T) represent       tially bound) atom is then matched against its exten•
 the guests and the available tables, respectively. Then, we can sion (since the bottom-up instantiation respects the stratifica•
 generate a seating arrangement by the following program: 
                                                               tion, the extension of is already available), all match•
  % Guess whether person P sits at tabic T or not. 
                                                               ing facts are computed, and a set of pairs  
  at(P, T) V not.at(P, T).-person(P), table(T). 
  % The persons sitting at a table cannot exceed the chairs.                                          is generated, where 
  :-table{T)rnChairs(C),not count{P : at(P,T)} C.                 is a substitution for the local variables in such 
  % A person is seated at precisely one table; equivalent      that is an admissible instance of (recall that 
  % to :-person(P),at(P9T),at{P, U),T U.                       DLV's instantiator produces only those instances of a predi•
  :-peraon(P),not count{T : at(P,T)} = 1.                      cate which can potentially become true [Faber et al, 1999a; 
  % People who like each other should sit at the same table... Leone et al., . Also, we only store those elements of 
  :-like(Pl,P2),at(Pl T) notat(P2,T). 
                  1  i                                         the symbolic set whose truth value cannot be determined yet 
  % ...while people who dislike each other should not. 
                                                               and process the others dynamically, (partially) evaluating the 
  :-dislikc(Ph P2),at(Pl,T),at(P2,T). 
                                                               aggregate already during instantiation. The same process is 
                                                               then repeated for all further instantiations of the literals in B. 
4 Computational Complexity of DLP*4 
 As for the classical nonmonotonic formalisms [Marek and       Example 7 Consider the following rule r: 
Truszczyhski, 1991], two important decision problems, cor•

responding to two different reasoning tasks, arise in DLP-4: 
   (Brave Reasoning) Given a DLP4 program V and a 
ground literal L, is L true in some answer set of p?           The standardization rewrites r to: 

   (Cautious Reasoning) Given a DLP*4 program V and a 
ground literal L, is L true in all answer sets of V?            Suppose that the instantiation of the rule for aux gener•
   The following theorems report on the complexity of the      ates 3 potentially true facts for aux: aux(l,a), aux(l,b), and 
above reasoning tasks for propositional (i.e., variable-free)  aux(2,c). If the potentially true facts for q are </(l) and q(2), 

DLP*4 programs that respect the syntactic restrictions im•     the following ground instances are generated:6 
posed in Section 2 (safety and aggregate-stratification). Im-
portantly, it turns out that reasoning in DLP  does not bring 
                                          -4                     Duplicate Sets Recognition. To optimize the evaluation, 
an increase in computational complexity, which remains ex•
                                                               we have designed a hashing technique which recognizes mul•
actly the same as for standard DLP. (See [Dell'Armi et al., 
2003] for the proofs.)                                         tiple occurrences of the same set in the program, even in dif•
                                                               ferent rules, and stores them only once. This saves memory 
Theorem 5 Brave Reasoning on ground DLP*4 programs is          (sets may be very large), and also implies a significant per•
    -complete.                                                 formance gain, especially in the model generation where sets 

Theorem 6 Cautious Reasoning on ground DLP-4 programs          are frequently manipulated during the backtracking process. 
is -complete.                                                  Example 8 Consider the following two constraints: 

5 Implementation Issues 
                                                                Our technique recognizes that the two sets are equal, and 
The implementation of DLP*4 required changes to all mod•
                                                               generates only one instance which is shared by c1 and c2-
ules of DLV. Apart from a preliminary standardization phase,     Now assume that both constraints additionally contain a 
most of the effort concentrated on the Intelligent Grounding   standard literal p(X). In this case, c\ and c-2 have n instances 
and Model Generator modules.                                   each, where n is the number of facts for p(X). By means 
   Standardization. After parsing, each aggregate A is trans•
                                                               of our technique, each pair of instances of c1 and c2 shares a 
formed such that both guards are present and both and common set, reducing the number of instantiated sets by half. 
    are set to . The conjunction Conj of the symbolic 
set of A is replaced by a single, new atom Aux and a rule        Model Generation. We have designed an extension of 
Aux:-Conj is added to the program (the arguments of Aux        the Deterministic Consequences operator of the DLV system 
being the distinct variables of Conj).                         [Faber et al., 1999b] for DLP*4 programs. The new opera•
   Instantiation. The goal of the instantiator is to generate  tor makes both forward and backward inferences on aggre•
a ground program which has precisely the same answer sets      gate atoms, resulting in an effective pruning of the search 
                                                               space. We have then extended the Dowling and Gallier al•
as the theoretical instantiation Ground(V)f but is sensibly 
smaller. The instantiation proceeds bottom-up following the    gorithm [Dowling and Gallier, 1984] to compute a fixpoint of 

dependencies induced by the rules, and, in particular, respect•   5 A ground atom A can potentially become true only if we have 
ing the ordering imposed by the aggregate-stratification. Let  generated a ground instance with A in the head. 
"H:—B,aggr" be a rule, where H is the head of the rule,           6Note that a ground set contains only those aux atoms which are 
B is the conjunction of the standard body literals, and aggr  potentially true. 


850                                                                                      NONMONOTONIC REASONING this operator in linear time using a multi-linked data struc•
ture of pointers. Given a ground set T9 say,  
                               , this structure allows us to 
access T in O(1) whenever some Aux1 changes its truth 
value (supporting fast forward propagation); on the other 
hand, it provides direct access from T to each Aux1 atom 
(supporting fast backward propagation). 

6 Experiments and Benchmarks 
To assess the usefulness of the proposed DLP extension and 
evaluate its implementation, we compare the following two             Figure 2: Experimental Results for Seating 
methods for solving a given problem: 
• DLV-  . Encode the problem in DLP-   and solve it by using 
       4                             4                          We ran the benchmarks on AMD Athlon 1.2 machines with 
our extension of DLV with aggregates. 
                                                              512MB of memory, using FreeBSD 4.7 and GCC 2.95. We 
• DLV. Encode the problem in standard DLP and solve it by 
                                                              have allowed a maximum running time of 1800 seconds per 
using standard DLV. 
                                                              instance and a maximum memory usage of 256MB. Cumu•
  To generate DLP encodings from DLP-      encodings, suit•
                                         4                    lated results are provided in Figures 1 and 2. In particular, for 
able logic definitions of the aggregate functions are employed 
                                                              Timetabling we report the execution time and the size of the 
(which are recursive for count, sum, and times). 
                                                              residual ground instantiation (the total number of atoms oc•
  We compare these methods on two benchmark problems:         curring in the instantiation, where multiple occurrences of the 
  Time Tabling is a classical planning problem. In partic•
                                                              same atom are counted).8 For Seating, the execution time is 
ular, we consider the problem of planning the timetable of    the average running time over the instances of the same size. 
lectures which some groups of students have to take. We       A "-" symbol in the tables indicates that the corresponding 
consider a number of real-world instances at our University,  instance (some of the instances of that size, for Seating) was 
where instance k deals with k groups.                         not solved within the allowed time and memory limits. 
  Seating is the problem described in Section 3. We con•
                                                                On both problems, DLV-4 clearly outperforms DLV. On 
sider 4 (for small instances) or 5 (for larger instances) seats 
                                                              Timetabling, the execution time of DLV-4 is one order of 
per table, with increasing numbers of tables and persons (with magnitude lower than that of DLV on all problem instances, 
numPersons — numSeats * numTables). For each prob•            and DLV could not solve the last instances within the allowed 
lem size (i.e., seats/tables configuration), we consider classes memory and time limits. On Seating, the difference becomes 
with different numbers of like resp. dislike constraints, where even more significant. DLV could solve only the instances 
the percentages are relative to the maximum number of like    of small size (up to 16 persons - 4 tables, 4 seats); while 
resp. dislike constraints such that the problem is not over-
                                                              DLV-4 could solve significantly larger instances in a reason•
constrained7. In particular, we consider the following classes: able time. The information about the instantiation sizes pro•
-) no like/dislike constraints at all; -) 25% like constraints; vides an explanation for such a big difference between the 
-) 25% like and 25% dislike constraints; -) 50% like con•     execution times of DLV and DLV*4. Thanks to the aggre•
straints; -) 50% like and 50% dislike constraints. For each   gates, the DL?A encodings of Timetabling and Seating are 
problem size, we have randomly generated 10 instances for     more succinct than the corresponding encodings in standard 
each class above.                                             DLP; this succinctness is also reflected in the ground instan•
  For Seating we use the DLP-4 encoding reported in Sec•      tiations of the programs. Since the evaluation algorithms are 
tion 3; all encodings and benchmark data are also avail•      then exponential (in the worst case) in the size of the instan•
able on the web at http://www.dlvsystem.com/                  tiation, the execution times of DLV-4 turn out to be much 
examples/ijcai03.zip.                                         shorter than the execution times of DLV. 

                                                              7 Related Works 
                                                              Aggregate functions in logic programming languages ap•
                                                              peared already in the 80s, when their need emerged in de•
                                                              ductive databases like LDL [Chimenti et al, 1990] and were 
                                                              studied in detail, cf. [Ross and Sagiv, 1997; Kemp and Ra-
                                                              mamohanarao, 1998]. However, the first implementation in 
                                                              Answer Set Programming, based on the Smodels system, is 
                                                              recent [Simons et ai, 2002]. 

                                                                Comparing DLP-4 to the language of Smodels, we observe 
                                                              a strong similarity between cardinality constraints there and 
      Figure 1: Experimental Results for Timetabling            count. Also sum and weight constraints in Smodels are 

                                                                 8 Note that also atoms occurring in the sets of the aggregates are 
   7Beyond these maxima there is trivially no solution.       counted for the instantiation size. 


NONMONOTONIC REASONING                                                                                              851 