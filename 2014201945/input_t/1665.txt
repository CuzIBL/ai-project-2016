                                  First-Order Logical Filtering

                                   Afsaneh Shirazi   and  Eyal Amir
                      Computer Science Department, University of Illinois at U-C
                         Urbana, IL 61801, USA    {hajiamin,eyal}@cs.uiuc.edu


                    Abstract                          propositional belief states (sets of states) [Amir and Russell,
                                                      2003] with actions and observations has shown that exact ﬁl-
    Logical ﬁltering is the process of updating a belief
                                                      tering is tractable when belief states are represented as propo-
    state (set of possible world states) after a sequence
                                                      sitional formulae, and certain natural assumptions are met.
    of executed actions and perceived observations. In
                                                      Still, many domains have propositional encodings that are
    general, it is intractable in dynamic domains that
                                                      too large or are not possible (e.g., large numbers of objects,
    include many objects and relationships. Still, po-
                                                      unknown number of objects, and observations with partial
    tential applications for such domains (e.g., seman-
                                                      knowledge about identity of objects).
    tic web, autonomous agents, and partial-knowledge
    games) encourage research beyond immediate in-      In this paper we present tractable algorithms and theoret-
    tractability results.                             ical results for updating belief states that are represented in
                                                      First-Order Logic (FOL). These representations permit belief
    In this paper we present polynomial-time algo-    states of inﬁnite sizes, uncertainty about the number of ob-
    rithms for ﬁltering belief states that are encoded jects and their identity, and observations that do not distin-
    as First-Order Logic (FOL) formulae. We sidestep  guish between some objects. It also enables more compact
    previous discouraging results, and show that our  representations than those of propositional logic.
    algorithms are exact in many cases of interest.
                                                        We show that when actions map states 1:1, then we can
    These algorithms accept belief states in full FOL,
                                                      update FOL belief-state formulae efﬁciently (linear time in
    which allows natural representation with explicit
                                                      the representation size), after prior compilation. We also
    references to unidentiﬁed objects, and partially
                                                      show that the representation remains of bounded polyno-
    known relationships. Our algorithms keep the en-
                                                      mial size for two classes of actions, including those for
    coding compact for important classes of actions,
                                                      which actions have simple case preconditions and actions
    such as STRIPS actions. These results apply to
                                                      with STRIPS-like preconditions (non-conditional, and ob-
    most expressive modeling languages, such as par-
                                                      served success/failure). For those we also present ﬁlter-
    tial databases and belief revision in FOL.
                                                      ing algorithms that do not require precompilation for ef-
                                                      ﬁcient update. This is in surprising contrast to the com-
1  Introduction                                       mon belief that FOL cannot be used efﬁciently for rep-
Many everyday scenarios are dynamic and partially observ- resenting and updating partial knowledge [Winslett, 1990;
able: a robot in one room cannot see the state of another Lin and Reiter, 1997].
room, a camera overlooking a bookshelf cannot detect the On the way to these contributions we form the foundations
title of a book that is obscured, and one cannot readily ob- and provide a theory for FOL belief update. We relate deter-
serve the amount of money an agent has. Many applications ministic Situation Calculus [Reiter, 2001] with a ﬁrst-order
in such domains compute information about the current world transition model [Blass and Gurevich, 2000]. There, every
state (belief state, i.e., set of possible states or a distribution belief state is a set of FOL models over the FOL language of
over such a set) after actions and observations. This compu- a state. We show that ﬁltering such belief states can be cap-
tation is called ﬁltering (also, state estimation, belief update, tured exactly by deduction in FOL, if the result of the ﬁltering
and database progression). They use this information to make is deﬁnable in FOL (this is the best we can hope for [Lin and
decisions, answer questions, and explore.             Reiter, 1997]). Also, we show that deduction can be carried
  Filtering is intractable in general for discrete domains out one time step at a time.
[Eiter and Gottlob, 1992], and much research is dedicated Most work related to ours is limited to the propositional
to its approximation in stochastic domains (e.g., [Boyen and case (e.g., [Amir and Russell, 2003; Boyen and Koller,
Koller, 1998]). Still, these approximations introduce un- 1998]). Important exceptions are [Cravo et al., 2001;
bounded errors many times, take unbounded computation Dixon and Wobcke, 1993] (First-Order AGM belief revision),
time in others, and are not usable in most deterministic do- [Winslett, 1990] (belief update and revision in simple sub-
mains. Recent progress on logical methods for ﬁltering of classes of FOL), and [Lin and Reiter, 1997] (progression inSituation Calculus). The important difference that we draw Generally, the values of relations and functions in a dy-
with these works is that ours provides efﬁcient inference pro- namic world will vary from one situation to the next. Rela-
cedures, while others focus on the use of general-purpose the- tions whose truth values vary from situation to situation are
orem provers, and intractability results.             called relational ﬂuents. They are denoted by predicate sym-
                                                      bols taking a situation term as their last argument. Same ar-
2  Semantics of First-Order Filtering                 gument is true about functions.
In this section, we study logical ﬁltering with ﬁrst-order struc- Deﬁnition 2.3 (Successor State Axioms). Successor state
tures. A ﬁrst-order language has as nonlogical symbols, the axioms is deﬁned for either a relational ﬂuent or a functional
variables, the function symbols and the predicate symbols. A ﬂuent. A successor state axiom for an n-ary relational ﬂuent
0-ary function symbol is called constant. Note that among p is a sentence of the form:
the binary predicate symbols must be the equality symbol =. P oss(a(x1:n), s) ⇒ ∀y1, . . . , ∀ym
We deﬁne the terms and formulas by the generalized induc-   (p(y1:m, do(a(x1:n), s)) ⇔ succp,a(x1:n, y1:m, s))
tive deﬁnition. Variables and functions are terms. Predicates
                                                      where a is an action symbol, and succp,a(x1:n, y1:m, s) is
are atomic formulas.                                  a formula that is uniform in s and whose free variables are
  A ﬁrst-order language is a language in which the symbols
                                                      among x1, . . . , xn, y1, . . . , ym, s. We deﬁne a successor state
and formulas are as described above. We now turn to a de- axiom for a functional ﬂuent in a similar way.
scription of the semantics of ﬁrst-order languages. A struc-
ture S for a ﬁrst-order language consists of:           All changes to the world are the result of named ac-
 1. |S|, the nonempty universe or domain of the structure S. tions. An action may be parameterized. For example,
    The elements of |S| are called the individuals of S. move(b, r1, r2) stands for the action of moving object b from
                                    S      n
 2. For each n-ary predicate symbol p, p ⊆ |S| . These room r1 to room r2. The intended interpretation is that situa-
    tuples of the universe are those tuples on which p is true. tions are ﬁnite sequences of actions, and do(a, s) denotes the
 3. For each n-ary function symbol f, f S : |S|n → |S|. (In sequence formed by adding action a to the sequences s. In
    particular, for each constant e, eS is an individual of S) other words, do(a, s) is the successor situation resulting from
  When a sentence ψ is true in a structure S, we denote it performing the action a. We use situation calculus as foun-
by |=S ψ. For example, suppose that in structure S, |S| = dations and semantics. Later (section 3 onwards) we do not
{B, R}, for predicate in, inS = {hB, Ri}, for constant CS-R, mention it because we always focus on belief states. How-
CS-RS = {R}, and for constant CS-B, CS-BS = {B}. This ever, it is used in the proofs of theorems and our results are
world has a CS room (CS-R), a CS book (CS-B), and a predi- applicable to it.
cate in which indicates whether a book is in a room. By this
deﬁnition, sentence in(CS-B, CS-R) is true in S.        Example   Consider a book keeper robot who lives in a
  We deﬁne logical ﬁltering using situation calculus. The world consisting of rooms. When the robot is in a room, it can
one that we use is compatible with the basic action theory make observations about the books in that room. It can move
of [Reiter, 2001]. The basic action theory has the form D = a book between rooms, it can return a book to the library
                                                      from an arbitrary room or it can put a borrowed book in a
Σ ∪ Dss ∪ Dap ∪ Duna ∪ Ds0 where:
  • Σ are the foundational axioms for situations.     room. So possible actions are move(b, r1, r2), return(b, r)
  • D   is a set of successor state axioms.           or borrow(b, r). The actions which are executable in a world
      ss                                              state can change the value of different predicates or functions.
  • Dap is a set of action precondition axioms.
                                                      Predicates are room(r), book(b) or in(b, r). There are no
  • Duna  is a set of unique name axioms for actions.
    A(−→x ) 6= A′(−→y ) , A(−→x ) = A(−→y ) ⇒ −→x = −→y functional ﬂuents except constants.
    where A and A′ are action symbols.                  We deﬁne a precondition axiom and a successor state ax-

  • Ds0 (the initial database) is a ﬁnite set of ﬁrst-order sen- iom for action move and skip the others.
    tences that are uniform in s0                       • Precondition Axiom:
Deﬁnition 2.1 (Uniform Formula). A formula is uniform     P oss(move(b, r1, r2), s) ⇔ book(b, s)∧room(r1, s)∧
in s if s is the only term of sort situation mentioned by that room(r2, s) ∧ in(b, r1, s)
formula.                                                • Successor State Axioms:
                                                          P oss(move(b, r1, r2), s) ⇒
                                                             ′  ′    ′  ′
  We deﬁne precondition axioms and successor state axioms  ∀b , r (in(b , r , do(move(b, r1, r2), s)) ⇔
                                                                   ′        ′
as a part of basic action theory as follows.                    (((b = b) ∧ (r = r1)) ⇒ false
                                                                  ′        ′
                                                              ∧((b =  b) ∧ (r = r2)) ⇒ true
Deﬁnition 2.2 (Action Precondition Axioms). An action               ′         ′
                                     1                        ∧(¬((b  = b) ∧ (r = r1))
precondition axiom is a sentence of the form:                          ′        ′             ′  ′
                                                                 ∧¬((b  = b) ∧ (r = r2))) ⇒ in(b , r , s)))
  P oss(a(x1:n), s) ⇔ preconda(x1:n, s)
where a is an n-ary action symbol, and preconda(x1:n, s) is The deﬁnition of progression and ﬁltering semantics are as
a formula that is uniform in s and whose free variables are follows.
among x1, . . . , xn, s.
                                                      Deﬁnition 2.4 (Transition Relation of Structures). For an
  1
   x1:n is the abbreviation for x1, . . . , xn        action theory D and a structure S, we deﬁne a transition re-               ′
lation RD(S, a, S ) as follows.                         We deﬁne a predicate corresponding to each relational ﬂu-
                                                      ent whose truth value does not depend on the situation. The
R   = {hS, a(u  ), S′i | |= precond (u ), |S′| = |S|,
  D           1:n        S        a  1:n              snapshot of system at time t only shows the truth values of
       S′               m
      p   = {hs1:mi ∈ |S| | |=S succp,a(u1:n, s1:m)}, predicates. The truth values of predicates would change while
        S′                 m+1                        moving from one situation to the next. We represent predi-
      f   = {hs1:m, sri ∈ |S| |                       cates with the same symbol as relational ﬂuents but with dif-
            |=S succf,a(u1:n, s1:m, sr)}}             ferent arity.
  We use [x/v] as a notion of substitution in which x is a Suppose that P = {g1, . . . , gr} is the set of all con-
                                                      stants and predicates. We deﬁne a new set of symbols
vector of variables and v is a vector of variables and constants. ′ ′ ′        ′
                                                      P  = {g , . . . , g } such that g (y1:n) = gi(y1:n)[P/P′] where
[x/v] is a shorthand for [x1/v1, . . .] in which [x1/v1] means 1    r          i
                                                      [P/P′] is a shorthand for [g /g′ , ..., g /g′ ]. We view P as
replacing all instances of symbol x1 by symbol v1.                            1  1     r r
                                                      the set of predicates in situation s, and P′ as the set of predi-
Deﬁnition 2.5 (Logical Filtering Semantics). Let σ be a set cates in situation do(a, s).
of ﬁrst-order structures. We refer to it as belief state. The We ﬁlter a belief-state formula as follows. (We reuse
ﬁltering of a sequence of actions (ground or not) and obser- F ilter[·](·) for ﬁltering a belief-state formula.) Let ψ be a
vations ha1, o1, . . . , at, oti is deﬁned as follows (ǫ refers to
                                                      belief state formula, a(u1:n) be a grounded action, Cn(Ψ) be
the empty sequence).                                  the set of logical consequences of Ψ (i.e. formulae φ such
 1. F ilter[ǫ](σ) = σ;                                                  L
                    ′              ′                  that Ψ |= φ), and Cn (Ψ) be the set of logical consequences
 2. F ilter[a](σ) = {S | S ∈ σ, hS, a,ˆ S i ∈ RD,     of Ψ in the language L. We write CnL(Ψ), when L is a set
           aˆ = a   }
                [x/v]                                 of symbols, to mean CnL(L)(Ψ).
 3. F ilter[o](σ) = {S ∈ σ | |=S o};
                                                                                 ′
 4. F ilter[hai, oi, . . . , at, oti](σ) =                                     P
                                                      1. F ilter[a(u1:n)](ψ) = (Cn (ψ ∧ preconda(u1:n)∧
           F ilter[hai+1, oi+1, . . . , at, oti]
                                                                ′
                 (F ilter[oi](F ilter[ai](σ))).       ^  ∀y1:m, pi(y1:m) ⇔ succpi,a(u1:n, y1:m)∧
We call Step 2 progression with a and Step 3 ﬁltering with o. i
                                                                  ′
                                                         ∀y   ∀z, f (y ) = z ⇔ succ   (u   , y , z))) ′
3  Filtering of FOL Formulae                          ^    1:m    i  1:m           fi,a 1:n  1:m    [P /P]
                                                       i
In the above deﬁnition, ﬁltering is applied to a set of ﬁrst- 2. F ilter[o](ψ) = ψ ∧ o                (1)
order structures. In this section we use FOL to represent be-
lief states and we update this representation without explicit When we ﬁlter with action a we assert implicitly that its pre-
reference to the structures in a belief state.        condition held in the last world state. If the action is not exe-
                                                      cutable on the belief state, the new belief state would be false
3.1  FOL Theories and Belief States                   which indicates an empty set. We prove in the following the-
A belief state formula is a ﬁrst-order theory (possibly inﬁnite) orem that this deﬁnition of ﬁltering approximates the seman-
that represents belief state. A structure is in belief state if and tics of deﬁnition 2.5.
only if it satisﬁes the belief state formula. The use of a theory Theorem 3.1. Let ψ be a belief state formula and a be an
instead of a formula is required because the set of ﬁrst-order action, then
consequences of a ﬁrst-order formula is inﬁnite and may not                      ′
                                                        F ilter[a]({s | |=s ψ}) ⊆ {s | |=s′ F ilter[a](ψ)}
be representable by a FOL formula.
  For simplicity, we use the same logical connectives that we PROOF See section A.1
have for FOL formulas. The meaning of those connectives on [Lin and Reiter, 1997] showed that progression is not al-
ﬁrst-order theories is as follows:                    ways ﬁrst-order deﬁnable. However, they proved that pro-
  If ϕ, ψ are theories of inﬁnite size, then          gression always exists as a set of second order sentences for
  • ϕ ∧ ψ will mean ϕ ∪ ψ.                            ﬁnite initial databases. Therefore, the two sides in theorem
  • ϕ ∨ ψ will mean {α ∨ β| α ∈ ϕ, β ∈ ψ} (similar to 3.1 are not equivalent since formula (1) is in FOL. In other
    de-morgan law).                                   words, FOL is not strong enough to model the progression of
  • Whenever applying negation (¬) we will assume that ϕ the initial database. However, the following corollary shows
    is a ﬁnite theory (thus, a logical formula)       that the two sides of theorem 3.1 would be equal if the pro-
  • Same for ∃ (can replace ∃ with a new constant symbol) gression of a database is FOL deﬁnable.
  Thus, in the rest of the paper, whenever we say ”belief state
formula”, we refer to a FOL theory, unless sanctioned other- Corollary 3.2. Let ψ be a ﬁrst-order belief state formula.
wise as above. From now on, we assume that our ﬁrst-order If FOL can represent the progression of ψ after performing
                                                      action a, then
language has no function symbols except constants.                               ′
                                                        F ilter[a]({s | |=s ψ}) = {s | |=s′ F ilter[a](ψ)}
3.2  Basic Algorithm                                    From   this point, we  assume  that progression is
In this section, we show how we can progress an initial ﬁrst-order deﬁnable. Our basic algorithm computes
database represented by a logical formula after applying a F ilter[ha1, o1, ..., at, oti](ψ) by iteratively applying ﬁltering
single action or observation. The result of progression is a of a belief-state formula with an action and an observation.
new database that progression algorithm can use afterwards. It sets ψ0 = ψ and ψi = F ilter[oi](F ilter[ai](ψi−1))recursively for i > 0 using the equations deﬁned above. This (L is a fresh constant symbol.) 3, 4 hold only when
algorithm is correct, as shown by corollary 3.2. It can be F ilter[a](ϕ) is ﬁnite.
implemented using a ﬁrst-order consequence ﬁnder.       We can say something stronger for actions that act as per-
                                                      mutations on the structures in which they are executable.
3.3  Sequences of Actions and Observations
                                                      Deﬁnition 4.2 (Permuting Actions). Action a is permuting
This section shows that iterative applications of progression (1:1) if for every structure S′ there is at most one S such that
steps lose no information. Thus, we can throw away the pre- R (S, a, S′).
vious database and start working with the new one after per- D
forming each action.                                    Domains that only include permuting actions are called
  We break our action theory D into two parts, the initial permutation domains.

database Ds0 and the rest Dg. Therefore, D = Dg ∪ Ds0 . Theorem 4.3 (Distribution for Permutation Domains). Let
Now we deﬁne the language of an action theory as follows. a be a permuting action, and let ϕ, ψ be formulae. Then,
                                                        1.
Deﬁnition 3.3. The language of D, L(D), is a set of ﬁrst- F ilter[a](ϕ ∨ ψ) ≡ F ilter[a](ϕ) ∨ F ilter[a](ψ)
order formulae whose predicate and function symbols occur 2. F ilter[a](ϕ ∧ ψ) ≡ F ilter[a](ϕ) ∧ F ilter[a](ψ)
                                                        3.                                       TRUE
in D.                                                     F ilter[a](¬ϕ) ≡ ¬F ilter[a](ϕ) ∧ F ilter[a]( )
                                                        4. F ilter[a](∃x ϕ(x)) ≡ ∃x F ilter[a](ϕ(L))[L/x]
  For instance, if D =  put(A, B) ∧ ∀x box(x), then
                  s0                                    We can decompose every ﬁrst-order formula into a set of
put(A, A) and ∀x∃y put(x, y) are in L(D ) but box(A, B)
                                   s0                 single literals by using distribution properties proved above.
is not.
                                                      For instance, ∀x (ϕ(x) ∧ ψ(x)) is equivalent to ∀x ϕ(x) ∧
  In progression we assume that a ground action a is per- ∀x ψ(x) so rule 2 can break it into two parts. Also ∀x ¬ϕ(x)
formed, and we are looking for a set of sentences D that
                                             sa       is equivalent to ¬∃x ϕ(x) so rule 3 and rule 4 can be used,
can serve as a new initial database (sa denotes the situation and ∀x (ϕ(x) ∨ ψ(x)) is equivalent to ¬∃x (¬ϕ(x) ∧ ¬ψ(x))
                         [                 ]
term do(a, s)). Unfortunately Lin and Reiter, 1997 showed so rule 3, rule 4, and rule 2 can be used.
that D is not always ﬁrst-order deﬁnable.
     sa                                                 In permutation domains, we decompose the formula down
  We deﬁne     as the set of ﬁrst-order sentences uniform
           Fsa                                        to a set of grounded ﬁrst-order single literals, and for ﬁltering
in   entailed by . If we use  instead of  , for every
  sa          D           Fsa         Dsa             a single literal we use formula (1).
ﬁrst-order sentence about the future of ,
                ψ                 sa  Fsa ∪ Dg |= ψ     Our factored ﬁltering (FF) algorithm for permutation do-
iff D |= ψ. The following theorem states this result. mains is presented in Figure 1. It relies on theorems 3.2,
  Note that the intersection of all consequences of the action 4.1, and 4.3. The number of different grounded single literals
theory with L(Dg ∪ {sa}) is uniform in sa.            would be ﬁnite, if the number of objects is ﬁnite. Therefore,
Theorem  3.4. Let D0 be an action theory, and deﬁne   we can calculate ﬁltering of all single literals as a preprocess-
        ′
D1, D2, D2 as follows.                                ing step and retrieve it later in ﬁnite domains.
                                                        Note that the arguments of these literals are either the con-
  D1  =   Cn(D0 ∪ {s1 = do(a1, s0)}) ∩ L(Dg ∪ {s1})   stants associated to existential quantiﬁers or the constants
  D2  =   Cn(D1 ∪ {s2 = do(a2, s1)}) ∩ L(Dg ∪ {s2})   which are mentioned in the initial belief state, the set of ax-
   ′                                                  ioms or the observations.
  D2  =   Cn(D0 ∪ {s1 = do(a1, s0), s2 = do(a2, s1)})
           ∩L(Dg ∪ {s2})
                                                       PROCEDURE FF(hai, oii0<i≤t,ψ)
                                                       ∀i, a an action, o an observation, ψ a belief-state formula.
(a1 and a2 are two actions in D0, not necessarily different. i      i
                                         ′               1. if t = 0, return ψ.
s0, s1 and s2 do not occur in Dg.) Then , D2 = D2.
                                                         2. return ot∧ FF-Step(at,
  PROOF    See section A.2                                         precondat ∧ FF(hai, oii0<i≤(t−1),ψ)).
  For  instance in  our  book  keeper  example,  if    PROCEDURE FF-Step(a,ψ)
                                                       a an action. ψ a belief-state formula.
Ds0   is  {book(B, s0), room(R, s0), in(B, R, s0)} and

the  ﬁrst action is  return(B, R), Ds1   would  be       1. if ψ is a single literal, then return Single-Literal-Filtering(a,
{book(B, s1), room(R, s1), ¬in(B, R, s1)}.                 ψ).
                                                         2. else, use distribution properties, call FF-Step recursively on
4  Factored Inference                                      sub-formulas of ψ.
Several distribution properties hold for logical ﬁltering. We
can decompose the ﬁltering of a formula ϕ along logical con- Figure 1: Filtering of a FOL formula when all the actions are
nectives ∧, ∨, ¬, ∀, ∃.                               permuting actions.
Theorem 4.1. Let a be an action, and let ϕ, ψ be ﬁrst-order
formulae. Then,                                       Theorem 4.4. The algorithm FF is correct, and if the ﬁltering
 1. F ilter[a](ϕ ∨ ψ) ≡ F ilter[a](ϕ) ∨ F ilter[a](ψ) of all single literals are given, the algorithm FF would run in
 2. |= F ilter[a](ϕ ∧ ψ) ⇒ F ilter[a](ϕ) ∧ F ilter[a](ψ) time O(|preconda ∧ ψ|), where ψ is a belief state formula.
 3. |= F ilter[a](¬ϕ) ⇐ ¬F ilter[a](ϕ)∧F ilter[a](TRUE) Our factored ﬁltering algorithm uses consequence ﬁnding
 4. F ilter[a](∃x ϕ(x)) ≡ ∃x F ilter[a](ϕ(L))[L/x]    tools. Since it is part of preprocessing, it does not affect theruntime of the system. In open systems the time is different PROCEDURE UCFilter(hai, oii0<i≤t,ψ)
since new objects may be added during the operation of the ∀i, ai an action, oi an observation, ψ a belief-state formula.
system. In these systems ﬁltering of new single literals should 1. if t = 0, return ψ.
be computed while system is running.                     2. ψt−1 = UCFilter(hai, oii0<i≤(t−1),ψ).

                                                         3. return ot∧ Filter-True(at) ∧ UCStep(at, precondat ∧ψt−1).
5  Filtering Algorithms for Different Domains          PROCEDURE Filter-True(a)
Our naive ﬁltering algorithm uses consequence ﬁnding tools a an action.
which do not scale to large domains. The following theorem 1. poss(a) ⇒ (condi ⇒ (pi ⇔ φi)) an instantiated successor
suggests a different reasoning procedure.                  state axiom (1 ≤ i ≤ k).
                                                         2. S = ∅
Theorem 5.1. Let a be an action, ψ be a belief state formula, 3. for all 1 ≤ i, j ≤ k,
and Φ(ϕ1:n) be a ﬁrst-order logical formula whose atomic    (a) if φi = true, add casei ⇒ pi to S
subformulas are among ϕ1, . . . , ϕn. Then,                 (b) elseif φi = false, add casei ⇒ ¬pi to S
                                                            (c) elseif uniﬁable(φi, φj ), add
  F ilter[a](ψ) ≡ {Φ(p1:n)| FOL formula Φ,
                                                               ((condi ∧ condj ) ⇒ (pi ⇔ pj ))mgu(φi,φj ) to S

        ψ ∧ preconda |= Φ(succp1,a, . . . , succpn,a)} (2)  (d) elseif uniﬁable(φi, ¬φj ), add
                                                               ((cond ∧ cond ) ⇒ (p ⇔ ¬p ))       to S
  In this formula, all possible Φs should be considered. In          i     j      i    j  mgu(φi,φj )
                                                            (e) elseif φi = ∀x q(x), φj = q(t), add
general, generating all Φs is impossible because there are in- (cond ∧ cond ) ⇒ (¬p ∨ p ) to S
ﬁnitely many such Φs. In the following sections, we pro-            i     j       i   j
                                                            (f) elseif φi = ∃x q(x), φj = q(t), add
vide simpler closed-form solutions for two special cases of    (condi ∧ condj ) ⇒ (pi ∨ ¬pj ) to S
dynamic domains. These give rise to practical(polynomial) 4. return  ϕ.
                                                                Vϕ∈S
algorithms.
                                                       PROCEDURE UCStep(a,ψ)
5.1  Unit-Case Successor State Axioms                  a an action. ψ a belief-state formula.
By deﬁnition of successor state axioms, for every pair of ac- 1. if ψ is a single literal, then
                                                            (a) poss(a) ⇒ (condi ⇒ (pi ⇔ φi)) an instantiated
tions and predicates exactly one successor state axiom is pro- successor state axiom (1 ≤ i ≤ k).
vided. The successor state axiom for action a and predicate (b) S = ∅
pi can be rewritten as:                                     (c) for all 1 ≤ i ≤ k,
P oss(a(x  ), s) ⇒ ∀y , . . . , ∀y (p (y , do(a, s)) ⇔         i. if uniﬁable(φi, ψ), add
        1:n        1       m   i  1:m                            (case ⇒ p )        to S
       (case1 ⇒ φ1) ∧ . . . ∧ (caseli ⇒ φli )                         i   i mgu(φi,ψ)
            i    i             i     i                         ii. elseif uniﬁable(φi, ¬ψ), add
             1            li     li+1
      ∧(¬casei ∧ . . . ∧ ¬casei ) ⇒ φi )                         (casei ⇒ ¬pi)mgu(φi,ψ) to S
                                                            (d) return   ϕ.
         j                                                          Vϕ∈S
where casei is of the form (yj1 = xj1 ) ∧ . . . ∧ (yjk = xjk ) 2. else, use distribution properties, call UCStep recursively on
(variable xj1 is an argument of action a and variable yj1 is an sub-formulae of ψ.
argument of predicate p) and each variable assignment sat-
isﬁes at most one of the cases. A successor state axiom is         Figure 2: Unit-Case Filtering.
called unit-case successor state axiom if it can be rewritten in
                  j
a form where every φi (1 ≤ j ≤ li + 1) is a unit clause.
  We break a unit-case successor state axiom into multiple the belief state formula, and the distribution properties can be
instantiated axioms. Instantiated successor state axioms for                       1           k
                                                      used). Consequently, Φ(subsucca, . . . , subsucca) is either
predicate pi are:
                                          j           equivalent to that literal or a tautology. A tautology is at most
  • P oss(a(x1:n), s) ⇒ (pi(y1:m, do(a, s)) ⇔ φ ) j j
                                          i [yi /xi ] of size two when unit-case successor state axioms are used.
    for all 1 ≤ j ≤ li                                Therefore, we can compute all desired Φs in a ﬁnite number
                                 1            li
  • P oss(a(x1:n), s) ⇒ ∀y1:m (¬casei ∧. . .∧¬casei ) ⇒ of steps.
    (pi(y1:m, do(a, s)) ⇔ φli+1)
 j   j                                  j  j     j    Theorem 5.2. Let k be the number of successor state axioms
[yi /xi ] is the substitution corresponding to casei (yi and xi
are sequences of variables). This process is called breaking after breaking into cases, and ψ be the belief state formula. If
into cases. Note that all instantiated successor state axioms each predicate has arity at most R, then algorithm UCFilter
                                                                                                   2
are in the form P oss(a) ⇒ (condi ⇒ (pi ⇔ φi)) where in returns the ﬁltering of ψ with action a in time O(R · k + R ·
some of them condi is true (i is an enumeration of all instan- k · |ψ ∧ preconda|). The length of new belief state formula is
                                                             2
tiated successor state axioms of action a).           O(R  · k + R · k · |ψ ∧ preconda|).
  Figure 2 shows the unit-case ﬁltering (UCFilter) algo-
rithm. This algorithm is applicable on permutation do- Corollary 5.3. Given a sequence of t actions and observa-
mains whose successor state axioms are unit-case. The tions, algorithm UCFilter returns the ﬁltering of ψ0 in time
                                                         2   t  t+1      t   t
algorithm UCFilter is actually a way to compute every O(t  · R · k  + t · R · k · |ψ0|). The length of belief state
         1            k                               formula after t step is ψ = O(t · Rt · kt+1 + Rt · kt · |ψ |).
Φ(subsucca, . . . , subsucca) in formula (2). In permutation              t                           0
domains, the head of entailment in formula (2) is a single lit- (If the length of all observations and preconditions of actions
eral (action precondition can be considered as a conjunct to are negligible compared to the length of belief state formula)