                          Hierarchical Diagnosis of Multiple Faults

                                   Sajjad Siddiqi  and  Jinbo Huang
                       National ICT Australia and Australian National University
                                     Canberra, ACT 0200 Australia
                              {sajjad.siddiqi, jinbo.huang}@nicta.com.au


                                                                                      ¬okX ∨∨¬¬A ∨∨¬¬C
                    Abstract                                           C
                                                            A     X             D     ¬okX ∨ A ∨ C
                                                                           Y
    Due to large search spaces, diagnosis of combina-       B                         ¬okY ∨ B ∨∨¬¬D
    tional circuits is often practical for ﬁnding only sin-                           ¬okY ∨ C ∨∨¬¬D
    gle and double faults. In principle, system mod-                                  ¬okY ∨∨¬¬B ∨∨¬¬C ∨ D
    els can be compiled into a tractable representation
    (such as DNNF) on which faults of arbitrary cardi-        Figure 1: A circuit and its CNF encoding.
    nality can be found efﬁciently. For large circuits,
    however, compilation can become a bottleneck due
    to the large number of variables necessary to model Consider the example in Figure 1, reproduced from [Huang
    the health of individual gates. We propose a novel and Darwiche, 2005]. HD05 models the circuit as a proposi-
    method that greatly reduces this number, allowing tional formula where each signal of the circuit translates into
                                                                           A, B, C, D
    the compilation, as well as the diagnosis, to scale a propositional variable (  ). For each gate an extra
                                                              okX, okY
    to larger circuits. The basic idea is to identify variable (       ) is introduced to model its health. The
    regions of a circuit, called cones, that are domi- propositional formula is such that when all health variables
    nated by single gates, and model the health of each are true, the remaining variables are constrained to model
    cone with a single health variable. When a cone   the functionality of the gates. For instance, the ﬁrst two
    is found to be possibly faulty, we diagnose it by clauses shown in the ﬁgure are equivalent to the sentence
                                                      okX  ⇒ (A ⇔¬C)                                 X
    again identifying the cones inside it, and so on, un-              , modeling the health of the inverter .
    til we reach a base case. We show that results com- Given a (typically abnormal) valuation of the inputs and
    bined from these hierarchical sessions are sound  outputs of the circuit, called an observation, a (consistency-
    and complete with respect to minimum-cardinality  based) diagnosis is then a valuation of the health variables
    diagnoses. We implement this method on top of     that is consistent with the observation and system model. For
    the diagnoser developed by Huang and Darwiche     instance, given the observation ¬A ∧ B ∧¬D, one diagno-
    in 2005, and present evidence that it signiﬁcantly sis is ¬okX ∧ okY , meaning that the inverter X is broken
    improves the efﬁciency and scalability of diagnosis and the and-gate is healthy. It is known that once the system
    on the ISCAS-85 circuits.                         model is compiled into DNNF, one can compute a compact
                                                      representation of all diagnoses in time linear in the size of the
                                                      DNNF  [Darwiche, 2001].
1  Introduction                                         A major advantage of HD05 is that DNNF is known to
In this work we consider fault diagnosis of combinational cir- be a strictly more succinct representation than OBDD and
cuits, where the observed (abnormal) input and output values supports efﬁcient algorithms that compute diagnoses of arbi-
of a circuit, together with its implementation, are given to a trary cardinality as well as minimum cardinality [Darwiche,
diagnosis engine, which ﬁnds possible sets of faulty gates that 2001]. When this approach is applied to large circuits, how-
explain the observation.                              ever, compilation of system models into DNNF can become
  A diagnosis tool implementing a model-based approach a bottleneck due to large numbers of health variables.
was recently presented in [Huang and Darwiche, 2005],   We propose a solution to this problem based on hierar-
where systems to be diagnosed are modeled as propositional chical diagnosis. We start with an abstraction of the circuit
formulas in conjunctive normal form (CNF), which are then where certain regions of the circuit, called cones, are “carved
compiled into decomposable negation normal form (DNNF) out” based on a structural analysis. The abstract model, being
[Darwiche, 2001]. This tool, which we shall refer to as HD05, generally much simpler, allows larger circuits to be compiled
was shown particularly to improve in efﬁciency and scalabil- and their diagnoses computed. The cones are diagnosed only
ity over an earlier tool [Torta and Torasso, 2004] based on when they are identiﬁed by the top-level diagnosis as possibly
compiling system models into ordered binary decision dia- faulty. We discuss the intricacies involved in properly diag-
grams (OBDD) [Bryant, 1986].                          nosing the cones so that redundancy is avoided and results

                                                IJCAI-07
                                                   581                                                      2.2  Abstraction of Circuit
                                                      A circuit can be abstracted by treating all maximal cones in it
                                                      as black boxes (a maximal cone is one that is either contained
                                                      in no other cone or contained in exactly one other cone which
                                                      is the whole circuit). For example, cone A can be treated
                                                      as a virtual gate with two inputs {P, B} and the output A.
                                                      Similarly, cone A itself can be abstracted by treating cone
                                                      D  as a virtual gate. An abstraction of a circuit can hence
                                                      be deﬁned as the original circuit minus all non-root gates of
                                                      maximal cones, or more formally:
                                                      Deﬁnition 2. (Abstraction of circuit) Given a circuit C,
                                                      let C = C if C has a single output; otherwise let C be C
                                                      augmented with a dummy gate collecting all outputs of Cs.
                                                                    Θ           C                    X ∈
            Figure 2: A circuit with cones.           The abstraction C of circuit is then the set of gates
                                                      C such that there is a path from X to the output O of C that
                                                      does not contain any dominator of X other than X and O.
combined from the hierarchical diagnosis sessions are sound For example, ΘC = {T,U,V,A,B,C}. E ∈ ΘC as E
and complete with respect to minimum-cardinality diagnoses. cannot reach any output without passing through A,whichis
  We implement our new approach on top of HD05. Using a dominator of E. Similarly, ΘA = {A, D, E}. H ∈ ΘA as
ISCAS-85 benchmark circuits, we show that we can now di- its only path to A contains D, which is a dominator of H.
agnose some circuits (with arbitrary fault cardinality) for the
ﬁrst time. For circuits that can already be handled by HD05, 3 DNNF-based Diagnosis
we also observe a signiﬁcant improvement in diagnosis time.
                                                      Before presenting our new algorithm we brieﬂy review the
                                                      baseline diagnoser HD05 [Huang and Darwiche, 2005],
2  Notation and Deﬁnitions                            which is based on compiling the system model (circuit in our
We shall use the circuit in Figure 2 as a running example. The case) from CNF to DNNF [Darwiche, 2001].
numbers shown alongside the gate outputs are values of the DNNF is a graph-based representation for propositional
signals, which can be ignored for the moment.         theories. Speciﬁcally, each DNNF theory is a DAG (directed
                                                      acyclic graph) with a single root where all leaves are labeled
2.1  Circuits, Dominators, and Cones                  with literals and all other nodes are labeled with either AND
                                                      or OR; in addition the decomposability property must be sat-
We use C to denote the circuit as well as the set of gates of
                                                      isﬁed: children of any AND-node must not share variables.
the circuit including the inputs (as trivial gates). We identify
                                                        Once a system model is converted into DNNF, consistency-
a gate with its output signal. The set of inputs of the circuit
                                                      based diagnoses, as well as minimum-cardinality diagnoses,
is denoted IC and the set of outputs OC. For example, IC =
                                                      can be computed in time polynomial in the size of the DNNF
{P, Q, R} and OC = {T,U,V} for the circuit in Figure 2.
                                                      [Darwiche, 2001]. The key is that decomposability allows
  One may observe that certain regions of this circuit have nonobservables to be projected out in linear time, and allows
only limited connectivity with the rest of the circuit. For
                                    {A, D, E, H, P }  diagnoses computed for children to be combined at a par-
example, the dotted box containing gates              ent AND-node simply by cross-concatenation (note that di-
is a sub-circuit that contributes a single signal (A)tothe
                                       {D, H, P}      agnoses computed for children can naturally be unioned at a
rest of the circuit. The box containing gates    is   parent OR-node).
another such example. We refer to such a sub-circuit as a Our new algorithm aims to improve the efﬁciency and scal-
                                   [
cone (also known as fan-out free formula Lu et al., 2003b; ability of this approach in the context of circuit diagnosis. We
     ]
2003a ), which we now formally deﬁne.                 will continue to model a circuit as a CNF formula and rely
  The fan-in region of a gate G ∈ C is the set of all those
                               G                      on DNNF compilation to compute diagnoses. The main in-
gates that have a path passing through going to some output novation is a structure-based method to reduce the number
gate. The fan-in region of gate A in Figure 2, for example, is
{A, B, D, E, H, P, Q}                                 of health variables required for the model and hence the dif-
                   .                                  ﬁculty of compilation, while maintaining the soundness and
Deﬁnition 1. (Dominator) A gate X in the fan-in region of completeness of the diagnoser. In the rest of the paper we will
gate G is dominated by G, and conversely G is a dominator of assume that only minimum-cardinality diagnoses are sought.
X, if any path from gate X to an output of the circuit contains
G [Kirkland and Mercer, 1987].                        4   Hierarchical Diagnosis
  The notion of cone then corresponds precisely to the set of The key idea behind our new algorithm is to start by obtain-
gates dominated by some gate G, which we denote by ΔG. ing the abstraction ΘC of a circuit C as deﬁned in Section 2,
For example, the dotted box mentioned above corresponds to and then diagnose C pretending that only gates in ΘC could
ΔA  = {A, D, E, H, P }. From here on, when the meaning is be faulty. This is the basic technique that will signiﬁcantly
clear, we will simply use G to refer to the cone rooted at G. reduce the number of health variables required in the system

                                                IJCAI-07
                                                   582model, allowing us to compile and diagnose larger circuits. Algorithm 1 HDIAG : Hierarchical Diagnosis Algorithm
Once this top-level diagnosis session ﬁnishes, if a gate ap- function HDIAG ( C, Obs )
pearing in a diagnosis is the root of a cone, which has been inputs: {C: circuit/set of gates}, {Obs:setof<gate,bool>}
abstracted out, then we attempt to diagnose the cone, in a output: {set of sets of gates}
similar hierarchical fashion.                         local variables: {OC, IC, Π, T : set of gates},{Λ, D:set of sets
  Two things are worth noting here before we go into details. of gates}, {Ω:<CNF, set of gates>}
First, cones are single-output circuits and hence the diagno- 1: OC ← OUTPUTS( C )
sis of cones will alway produce diagnoses of cardinality one. 2: IC ← INPUTS( C )
                                                       3: FINDDOMINATORS( OC ), FINDCONES( OC )
Second, the diagnosis of a cone is not performed simply with              C, I , Obs              C
a recursive call as one may be tempted to expect. Indeed the 4: PROPAGATEINPUTS ( C ), SAV E VALUES ( )
                                                       5: SETOBSOUTPUTS ( OC, Obs )
later diagnosis sessions are very distinct from the initial top-
                                                       6: T ← TRAVERSE ΘC ( OC, IC ), ATTACHOKS( T )
level session. The reason has to do with avoiding redundant 7: Ω ← GENMODEL( C, OC ∪ IC )
computation, which we will discuss later in the section. 8: Λ ←CALLHD05( Ω, Obs ), ORDERBYDEPTH( Λ )
  We now present in detail our hierarchical diagnosis algo- 9: RESTOREVALUES ()
rithm, which we will refer to as HDIAG. Pseudocode of 10: D ← φ
HDIAG  is given in Algorithm 1.                       11: for all Π ∈ Λ do
                                                      12:  D  ← D ∪ FINDEQDIAGNOSES( Π )
4.1  Algorithm                                        13: return D
Step 1 (dominators)
HDIAG  starts by identifying the nontrivial dominator gates Algorithm 2 TRAVERSE ΘC : Traverses Top Level
in the circuit (a trivial dominator is one that dominates only function TRAVERSE ΘC ( OC, IC )
itself). First the dominators of every gate are obtained. The inputs: {OCIC, set of gates}
dominators of a gate are the gate itself union the intersection output: {set of gates}
of the dominators of its parents [Kirkland and Mercer, 1987], local variables: {Q, K, T: set of gates}, {Y,O} :gate
which can be found by a simple breadth-ﬁrst traversal of the 1: O ← SINGLEOUTPUT( OC )
circuit starting from the outputs. During this process the non- 2: Q ←{O}, T ← φ
trivial dominators can be identiﬁed. FINDDOMINATORS im- 3: while ¬ISEMPTY (Q) do
plements this procedure on line 3 of Algorithm 1.      4:  Y ←  POP( Q )
                                   T  U V  A  B  C     5:  if Y ∈ IC then
  In our example, the dominator sets for , , , , ,           T ←  T∪{Y }
are {T }, {U}, {V }, {A}, {B}, {C}, respectively; the domi- 6:
                                                       7:  if ¬ISDOMINATOR ( Y ) || Y == O then
nator set for D is {D, A} and for H is {H, D, A}. It can be  K ←            Y  Q  ← Q ∪ K
                     T  U     V                        8:         CHILDREN (  ),
easily seen that the gates , ,and are trivial dominators 9: return T
whereas D and A are nontrivial dominators.
Step 2 (cones and their inputs)
                                                      tors of the top-level hierarchy plus all the non-dominators
Each nontrivial dominator deﬁnes a cone that can be ab-
                                                      that sit between those dominators and the outputs OC of the
stracted out. Next we identify the inputs of these cones by            Θ
a depth-ﬁrst traversal of the circuit. Suppose G is a cone. The circuit. TRAVERSE C traverses the top-level hierarchy of
                                                      the circuit. SINGLEOUTPUT on line 1 of Algorithm 2 im-
inputs IG of G can be found by traversing the fan-in region
                                                      plements the attachment of dummy gate described in Deﬁ-
of G so that if we reach either an input of the circuit or a
                                                      nition 2. TRAVERSE ΘC is implemented so that as soon as
gate that does not belong to ΔG, we add it to IG and back-
                                                      it encounters an input of the circuit or a nontrivial domina-
track. FINDCONES implements this procedure on line 3 of
                                                      tor (other than root, see line 7 of Algorithm 2), it backtracks
Algorithm 1.
  For cone D in our example, we traverse the fan-in region (the inputs are excluded as they are assumed to be healthy).
                                                      ATTACHOKS   associates health variables with each gate in
of D in the order D, H, P, B. Gates P and B are added to
                                                      this hierarchy.
the inputs of cone D. We backtrack from B as B ∈ ΔD.The
inputs of cone D are thus {P, B}.                       Now we create an abstract system model similar to the full
                                                      model used in [Huang and Darwiche, 2005]. The abstract
Step 3 (top-level diagnosis)                          model contains a system description, in CNF, over the set of
The rest of the algorithm proceeds in two phases. In the ﬁrst observables (IC ∪ OC) and nonobservables (C\(IC ∪ OC)).
phase we have the (abnormal) observation for the whole cir- The model is generated by the function GENMODEL and re-
cuit. We ﬁrst propagate the values of the inputs bottom-up, turned as Ω. Note that only the clauses representing the gates
setting the (expected) value of each internal gate of the cir- marked by ATTACHOKS will have additional health variables.
cuit. These values are saved for reference later. The observed HD05 is then called with Ω and the observation to perform the
outputs of the circuit are then set which may be abnormal. diagnosis. The diagnoses thus obtained will be referred to as
PROPAGATEINPUTS,SAV E  VALUES,andSETOBSOUTPUTS        top-level diagnoses. If a nontrivial dominator G ∈ ΘC is re-
on lines 4 and 5 of Algorithm 1 implement these procedures. ported to be possibly faulty, we then enter the second phase
  The health of the abstraction of the circuit, ΘC,isthen by diagnosing the cone under G.
diagnosed. This is achieved by associating a health vari- For example, in Figure 2, given the inputs, all the outputs
able with every gate in ΘC. ΘC contains all the domina- of the circuit should be 1,but,allofthemare0 in our ob-

                                                IJCAI-07
                                                   583Algorithm 3 FINDEQDIAGNOSES  : Diagnosis of Cones     Speciﬁcally, we need a set of values for the inputs and output
function FINDEQDIAGNOSES ( Π )                        of cone X as an observation to pass to HD05. First of all we
inputs: {Π, set of gates}                             restore expected values of the gates in the circuit (line 9 of
output: {set of sets of gates}                        Algorithm 1) before we call FINDEQDIAGNOSES.
local variables:    {E, Λ:   set of  sets of gates},
                                                                              X
{P, R, C, IX, Q, T, S: set of gates}, {X, Y :gate}, {Ω:<CNF, We want to diagnose cone under the assumption that all
set of gates>}, {Obs:setof<gate,bool>}                of the gates Gi ∈ Π are also faulty, so we need to propa-
 1: E ←{Π}, D ←{Π}                                    gate the fault effect of all Gi into the sub-circuit. Since faults
 2: while ¬ISEMPTY( E ) do                            in circuits propagate bottom-up, we put the set of gates in
 3:  P ← POP( E )                                     each diagnosis in decreasing order of their depth in the circuit
 4:  PROPAGATEFAULT ( P )                             (ORDERBYDEPTH    on line 8 of Algorithm 1). A fault is pro-
 5:  for all X ∈ P such that X is a cone and is not the whole cessed simply by ﬂipping the output of the faulty gate and
     circuit do                                       propagating its effect. This is done for each G ∈ Π separately
         X ∈ Q
 6:    if      then                                   in the order in which they appear in Π. This has the desired
 7:      Q ← Q ∪{X}
                                                      effect of setting an observation across cone X (IX ∪{X})
 8:      C ← TRAVERSECONE  ( X ), IX ← INPUTS ( C )
          ←           Θ   {X}, I               T      that is consistent with the observation of the overall circuit.
 9:      T   TRAVERSE   C (     X ), ATTACHOKS ( )         X
10:      Ω ← GENMODEL  ( C, {X}∪IX )                  Cone   is now ready for diagnosis.
11:      Obs ← VALUATION( {X}∪IX  )                                                    Θ          X
         Λ ←            Ω, Obs            X, Λ          Note that, again, only the abstraction X of cone is di-
12:          CALLHD05 (        ), SETDIAGS(   )       agnosed. As we mentioned earlier, however, this is not sim-
13:    else
                                                      ply a recursive call to Algoritm 1, but needs to be handled
14:      Λ ← DIAGS( X )
15:    for all R ∈ Λ do                               differently (Algorithm 3). TRAVERSECONE (line 8) iden-
                                                                                                    Δ
16:      Y ← POP ( R )                                tiﬁes and returns the set of gates of the cone (i.e., X).
17:      if X = Y then                               VALUATION  returns a set of <gate, bool> pairs which repre-
18:        S ← SUBSTITUTE ( X, Y, P )                 sents the currently assigned values to the set of gates {X}∪
19:        E ← E ∪{S}, D ←  D ∪{S}                    IX passed as input (line 11). The returned set serves as an
20:  RESTOREVALUES ()                                 observation across the cone. Given the cone, its observables
21: CLEARDIAGS( Q )                                   and nonobservables, the health of its abstraction is diagnosed
22: return D                                          using HD05 and the set of singleton diagnoses Λ found is
                                                      saved (line 12). These diagnoses can be retrieved by DIAGS
                                                                           X, Y, P
servation. We introduce health variables for the set of gates (line 14). SUBSTITUTE ( ) generates a new diagnosis
                                                      by replacing X with Y in P (line 18). Finally, we clear these
ΘC\IC  = {T,U,V,A,B,C}, create a model of the abstrac-
tion of the circuit, and pass the model along with the obser- diagnoses before returning from the function (line 21).
vation ¬T ∧¬U  ∧¬V  ∧ P ∧ Q ∧ R to HD05. One of the     The diagnosis of cones is similar to that of the overall cir-
diagnoses returned by HD05 is ¬okA ∧¬okB ∧¬okC or, to cuit given in Algorithm 1. There are, however, a few details
use an alternative notation, {A, B, C} (in the rest of the paper worth mentioning: (i) Every cone is diagnosed hierarchically,
we will use this latter notation expressing a diagnosis as a set i.e., for a cone X we diagnose only the top-level hierarchy
of faulty gates). Since A is a cone, we enter the second phase. ΘX of X. (ii) In a single call to FINDEQDIAGNOSES every
Step 4 (diagnosis of cones)                           cone is diagnosed once (ensured by line 6 of Algorithm 3).
                                                      This is sufﬁcient and will be explained later. (iii) Once a new
Suppose that Π = {X, G1,...,Gn} is a diagnosis found in
                                                      diagnosis is generated by substitution, it is added to the set
the top-level phase and that X ∈ Π is (the root of) a cone.
                                                      E for further processing (line 19 of Algorithm 3). (iv) The
It should be clear that given the faulty output b of X,ifthere
                                                      fault effect of a diagnosis is propagated before the diagnosis
is a gate Y ∈ ΔX that, when assumed faulty, permits the
                                                      is processed, and undone afterwards. (v) As substitutions are
same value b at X, then replacing X with Y will yield a valid
                                                      made, the gates in a newly generated diagnosis may not have
global diagnosis. This way we try to expand our top-level
                                                      the depth order discussed above; however, we do not re-order
diagnoses in the procedure FINDEQDIAGNOSES (line 12 of
                                                      them for reasons that will be clear soon.
Algorithm 1), given in Algorithm 3.
  Mainly, for each cone X in each top-level diagnosis Π, Continuing with our example, we reorder {A, B, C} as
we ﬁnd a diagnosis for X hierarchically. We identify X as a {B,A,C}.WeﬂipB to 0, propagate the effect that ﬂips
sub-circuit with the single output X and the inputs IX.The E to 0 and D to 1. A remains 1 at this stage; we then ﬂip A
minimum cardinality of diagnoses for X is always one as we to 0 (gate C is irrelevant to the diagnosis of cone A). Note
mentioned earlier. We then replace X with its singleton di- that the correct output of cone A should be 1 given its in-
agnoses, in Π, one by one, to produce new global diagnoses. puts P (1) and B(0). We place health variables at the gates
This process is iterated until we reach a base case (no cones ΘA\IA = {A, D, E}, generate a model for cone A,and
left to be diagnosed). We treat each Π and all diagnoses gen- pass it to HD05 with the observation ¬A ∧ P ∧¬B,which
erated from it as a single class of diagnoses and use it to avoid returns three diagnoses of cardinality one: {A}, {D}, {E}.
redundant computation (explained in Section 4.2).     Note that {A} is a trivial diagnosis. Substituting D and E
  Cone X could be diagnosed as is done for the whole circuit for A in the top-level diagnosis {B,A,C},wegettwonew
but there is more to be done in order to ﬁnd correct diagnoses. diagnoses: {B,D,C}, {B,E,C}.

                                                IJCAI-07
                                                   584                                                      sis (soundness) and every minimum-cardinality diagnosis is
                                                      found by HDIAG (completeness).
                                                        Soundness: It should be clear that all diagnoses found by
                                                      HDIAG  are in fact valid. Moreover, they all have the same
                                                      cardinality because (1) all top-level diagnoses found in Step 3
                                                      have the same cardinality by virtue of HD05 and (2) substi-
                                                      tutions in Step 4 do not alter the cardinality as cones whose
                                                      roots are in ΘC cannot overlap (i.e., two gates in a top-level
           Figure 3: Redundancy scenarios.            diagnosis cannot be substituted by the same gate in Step 4).
                                                        Hence it remains to show that the cardinality of these diag-
                                                      noses, call it d, is indeed the smallest possible. Suppose, on
4.2  Avoiding Redundancy                              the contrary, that there exists a diagnosis Π of a smaller car-
Since cones can be shared among different diagnoses, a cone dinality: |Π| <d. Now, let each gate in Π be replaced with
is potentially visited more than once before all ﬁnal diagnoses its highest dominator in the circuit to produce Π. Clearly,
                                                                                        
are computed. It may or may not be redundant to diagnose (i) Π remains a valid diagnosis, (ii) Π ⊆ ΘC, and (iii)
one cone multiple times. There are three cases to consider: |Π|≤|Π|. (i) and (ii) imply that Π is a diagnosis for the
                                                                Θ              |Π| <d
  • Suppose that in a top-level diagnosis, a cone S appears abstraction C. (iii) implies . This means that the
                                                                          Θ
    in two diagnoses {S, T } and {S, U}, shown in Fig- top-level diagnoses for C found in Step 3 are not of mini-
    ure 3a. It can be seen that neither T nor U lies in the mum cardinality, contradicting the soundness of the baseline
    fan-in region of cone S. Thus no fault at T or U can af- diagnoser HD05.
    fect values at the inputs or output of cone S. This means Completeness:LetΠ be a diagnosis of minimum cardi-
    that diagnosis of S can be obtained once and can be used nality d. Let each gate in Π be replaced with its highest dom-
                                                      inator in the circuit to produce Π. Again, we have (i) and (ii)
    in the processing of both of the top-level diagnoses. This                                     
    case is currently not implemented in our code.    as above, and moreover |Π | = d. This implies that Π will
                                                      be found by HDIAG in Step 3 by virtue of the completeness
  • In Figure 3b, both T and U lie in the fan-in region of the            Θ    Π
         S              T   U                         of HD05 in diagnosing C.    itself will then be found by
    cone  . Thus faults at or  can affect values at the substitutions in Step 4 by virtue of the completeness of the
    inputs and output of cone S. However, if we consider a
          T                  S                        diagnosis of cones (which can be easily established by induc-
    fault at and its effect across (at the inputs and output tion as all diagnoses for cones are of cardinality one).
    of S), it may not be same as a fault at U and its effect
    across S. Thus the diagnosis of cone S during the pro-
    cessing of {S, T } may be completely different from that 6 Experimental Results
                         {S, U}            S
    during the processing of   . Hence cone  has to   In order to compare the efﬁciency and scalability of our ap-
    be diagnosed twice in this case. This is why we clear the proach with that of [Huang and Darwiche, 2005], we ran both
    diagnoses before we return from FINDEQDIAGNOSES   systems on a set of ISCAS-85 circuits using randomly gener-
    in Algorithm 3.                                   ated diagnostic cases. For each circuit, we randomly gener-
  • In Figure 3c, we assume that only {S, T } is a top-level ated a set of input/output vectors accordingly to the correct
    diagnosis whereas {S, U} is a diagnosis obtained during behavior of the circuit. We then randomly ﬂipped k outputs,
    the processing of {S, T } such that {U} is a cardinal- with k ranging from 1 to 8, in each input/output vector to get
    ity one diagnosis for cone T . Hence the value seen at an (abnormal) observation (the minimum cardinality of the
    the output of T due to a fault at T would be the same diagnoses was often close to the number of ﬂipped outputs).
    as if seen due to a fault at U. Therefore, the effect of All experiments were conducted on a 3.2GHz Pentium 4 with
    both faults, individually, across S would be the same 1GB of RAM running on Diskless Linux, and a time limit of
    and hence S needs to be diagnosed only once for both 1 hour was imposed on each experiment.
    diagnoses. This idea extends to any level of substitution The results are given in Table 1. The fourth column shows
    when diagnosing cone U further yields new diagnoses. the number of health variables introduced by HDIAG for the
    For this reason we do not reorder the gates in the newly top-level diagnosis. Recall that the baseline approach HD05
    generated diagnoses (in FINDEQDIAGNOSES) accord-  requires a health variable for every gate. It is clear that
    ing to their depth. This case is taken care of on line 6 by the proposed technique signiﬁcantly reduces the number of
    the if condition in FINDEQDIAGNOSES.              health variables required. We also observe that for most cir-
                                                      cuits, HDIAG was able to solve a signiﬁcantly larger num-
5  Soundness and Completeness                         ber of cases than HD05. In particular, HD05 could not solve
We now prove the following theorem, relying on the fact that any of the cases for the last two circuits, where HDIAG suc-
the baseline diagnoser HD05 has the same property.    ceeded. In the last two columns of the table, we also com-
                                                      pare the running times of the two systems on cases they both
Theorem 1. HDIAG  is sound and complete with respect to solved. The new approach clearly results in better efﬁciency.
minimum-cardinality diagnoses.                          Finally, we note that both programs reported exactly the
  Proof. Let C be the circuit in question. We show that every same set of diagnoses for each case they both solved, as we
diagnosis found by HDIAG is a minimum-cardinality diagno- expect given Theorem 1.

                                                IJCAI-07
                                                   585