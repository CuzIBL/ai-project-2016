                 Near-Optimal Anytime Coalition Structure Generation

        Talal Rahwan, Sarvapali D. Ramchurn, Viet Dung Dang, and Nicholas R. Jennings
                       IAM Group, School of Electronics and Computer Science,
                               University of Southampton, SO17 1BJ, UK
                          {tr03r,sdr,vdd,nrj}@ecs.soton.ac.uk


                                                             ∗
                    Abstract                              CS   =argmaxCS∈CS   V (CS), where a coalition struc-
                                                          ture CS  ∈CSis a partition of A  into disjoint ex-
    Forming effective coalitions is a major research      haustive coalitions, CS is the set of all such partitions
    challenge in the ﬁeld of multi-agent systems. Cen-    (i.e. each agent belongs to exactly one coalition), and
    tral to this endeavour is the problem of determin-
                                                          V (CS)=      C∈CS v(C). The search space here is
    ing the best set of agents that should participate                 a
                                                          O(aa) and ω(a 2 ).
    in a given team. To this end, in this paper, we
    present a novel, anytime algorithm for coalition    3. Payment calculation: compute the transfers between the
    structure generation that is faster than previous any- agents such that they are incentivised to stay in the coali-
    time algorithms designed for this purpose. Our al-    tion to which they are assigned. These payments will
    gorithm can generate solutions that either have a     depend on the stability concept used (e.g. Bargaining
    tight bound from the optimal or are optimal (de-      set, Kernel, or the Core) and ﬁnding these is usually NP-
    pending on the objective) and works by partition-     Complete.
    ing the space in terms of a small set of elements
    that represent structures which contain coalitions of In this paper, we focus on the coalition structure generation
    particular sizes. It then performs an online heuris- problem. As in common practice in the literatrue [Sandholm
    tic search that prunes the space and only considers et al., 1999; Dang and Jennings, 2004], we focus on char-
    valid and non-redundant coalition structures. We  acteristic function games (CFGs), where the value of every
    empirically show that we are able to ﬁnd solutions coalition C is given using a characteristic function v(C).Up
    that are, in the worst case, 99% efﬁcient in 0.0043% to now, the most widely used algorithm to solve this problem
                                                      is due to [Yeh, 1986; Rothkopf et al., 1998]. Their algorithm
    of the time to ﬁnd the optimal value by the state of              a
    the art dynamic programming (DP) algorithm (for   (which runs in Θ(3 )) is guaranteed to ﬁnd the optimal solu-
    20 agents), using 66% less memory.                tion and is based on dynamic programming (DP). However,
                                                      the DP approach becomes impractical for agents with limited
                                                      computational power (e.g. computing the optimal CS for 20
1  Introduction                                       agents requires around 3.4×109 operations). Moreover, in the
Coalition formation (CF) is the coming together of distinct, dynamic environments that we consider, agents do not typi-
autonomous agents in order to act as a coherent grouping. It cally have sufﬁcient time to perform such calculations and, in
has long been studied in cooperative game theory [Osborne many cases, an approach that gives a good approximation, in
and Rubinstein, 1994] and has recently become an impor- a reasonable time, is more valuable.
tant topic in multi-agent systems where a team of agents of- Against this background, this paper describes a novel any-
ten need to maximise their individual or their collective ef- time search algorithm that uses heuristics to to generate the
ﬁciency. For example, agents often have to form efﬁcient optimal or near-optimal (with a very tight bound) coalition
groups to buy goods in bulk or sensors have to decide on how structure. In more detail, the algorithm works by grouping
to group together to monitor a given area [Dang et al., 2006]. the coalition structures according to the sizes of coalitions
Given a set of agents 1, 2, .., i, .., a ∈ A, the CF process in- they contain (which we here term a conﬁguration). For ex-
                                                                              {{ } {   }}     {{ } {   }}
volves three computationally challenging stages:      ample, coalition structures 1 , 2, 3 and  3 , 1, 2
                                                      both follow the conﬁguration {1, 2}. Hence, the space of all
 1. Coalition value calculation: for each subset or coalition
      ⊆                                               coalition structures is partitioned into smaller subsets where
    C   A, calculate a value v(C) indicating how beneﬁcial every element of a given subset have the same conﬁgura-
    that coalition would be if it was formed. Note here that
                         a                            tion. This is different from previous representations used
    this requires processing 2 possible coalitions.   by other anytime algorithms which looked at the space of
 2. Coalition structure generation: is the equivalent of interconnected coalition structures [Sandholm et al., 1999;
    the complete set partitioning problem [Yeh, 1986]. Dang and Jennings, 2004] (which necessitates searching a
    This means computing the optimal set of coalitions much bigger portion of the space than our method in order

                                                IJCAI-07
                                                  2365to ﬁnd only integral worst case guarantees from the optimal having to maintain the list of coalitions in memory. Here, we
solution). Now, using the list of conﬁgurations of coalition build upon this approach to compute coalition structure val-
structures and by estimating the average and upper bound of ues as well.
the solutions that exist within each conﬁguration in this list,
we are able to zoom in on the best conﬁgurations after search- 3 Basic Deﬁnitions
ing a relatively minute portion of the search space (typically
     −                                                We now deﬁne the basic constructs used by our algorithm.
3 × 2a 1 coalition structures). Moreover, by reﬁning the up-     A
                                                      Let CLs ∈ 2  be the list of coalitions of size s ∈{1, 2, ..., a}
per bound of every other conﬁguration after searching the
                                                      such that CL is the set of coalition lists CLs (see ﬁg-
coalition structures of one conﬁguration, we are able to re- ure 1 for the conﬁgurations for 4 agents). Moreover, let
duce the time to ﬁnd the optimal conﬁguration still further by        ∈G
                                                      G1,G2, ..., G|GCS|  CS be the set of all possible unique
discarding those conﬁgurations that have a lower upper bound conﬁgurations (i.e. there are no two elements with the same
                                                                                          CS
than the best value found so far.                     coalition sizes). Then, let F : GCS → 2 be a function
  This paper advances the state of the art in the following that takes a particular conﬁguration and returns all the coali-
ways. First, we provide an anytime algorithm to compute tion structures of that conﬁguration. We will denote N as
the optimal coalition structure that is faster than any previ- a list where each element is a set of coalition structures of
ous (anytime) algorithm designed for this purpose. Second, the same conﬁguration. Formally, N is deﬁned as follows:
we provide a novel representation for the search space based N {                      }
                                                         =   F (G1),F(G2), ..., F (G|GCS|) . Where appropriate
on coalition structure conﬁgurations. This approach permits                      ∈N
                                                      we will use N1,N2, ..., N|GCS|  to note every element
the selection of a solution based either on the selection of of N (see ﬁgure 1 for a graphical representation of N for 4
coalition structures of particular conﬁgurations or on the time agents). Finally, the optimal coalition structure is noted as
available to ﬁnd the solution. Third, our algorithm can pro- CS∗. In the next section, we further expand on the above
vide non-integral worst case guarantees on the quality of any notation and describe how our algorithm searches the space.
computed solution since it can estimate an upper bound for
the optimal solution (and improve this estimate as it searches
the space). Finally, our algorithm is empirically shown to
give solutions which are, at worst, 99% of the optimal value
in 0.0043% of the time (in seconds) it takes the DP approach
to ﬁnd the optimal value (for 20 agents).
  The rest of the paper is structured as follows. Section 2
describes related work, work and section 3 details the formal
model. Section 4 details the algorithm and section 5 empiri-
cally evaluates it. Section 6 concludes.

2  Related Work
Yun Yeh’s DP algorithm (later rediscovered by Rothkopf et al.
for combinatorial auctions) is widely regarded as the fastest  N
algorithm for coalition structure generation and so we use it Figure 1: for 4 agents with the elements F (G) expanded.
to benchmark our algorithm. However, for the reasons out- 4 Anytime Coalition Structure Generation
lined earlier, a number of researchers have sought to develop
                                                      In this section we describe our algorithm for coalition struc-
heuristics or anytime algorithms. In particular, [Shehory and
                                                      ture generation. Its input is the set CL for which for
Kraus, 1998] devised an algorithm to ﬁnd coalition structures                                    v(C)
                                                      all  ∈      and all    ∈CLis given, as well as the ac-
constrained by certain coalition sizes. However, their algo- C CLs      CLs
                                                      ceptable bound  ∈     from the optimal value (if  ,
rithm does not guarantee to return the optimal value at any         β   [0, 1]                     β =1
                                                      we stop when the optimal solution is found and if any
point, nor does it provide any means of measuring the efﬁ-                                      β =0
                                                      known     is returned). Given this, our algorithm proceeds
ciency of the coalition structure chosen. Another approach  CS
                                                      in three main stages. The ﬁrst is a pre-processing stage that
is to assume that only V (CS) is known (as opposed to v(C)
                                                      involves scanning the input to obtain the maximum and aver-
in our case). In this case, improving on [Sandholm et al.,
                                                      age values of every  ∈CL. These values are then used in
1999], Dang and Jennings [2004] devised an algorithm that             CLs
                                                      the second stage which involves generating the list of unique
provides guarantees of the worst case bound from the optimal.                                          ∗
                                                        ∈GCS  and selecting the element  to search for  .
In such algorithms, the search space consists of all coalition G                    F (G)           CS
                                                      The third and most computationally costly stage involves de-
structures (see section 1) even if they are given the values of                                    ∗
                                                      termining the values of the CS ∈ F (G) to ﬁnd CS .We
v(C). Moreover, they only guarantee integral bounds up to 3,
                                                      detail each of these stages in the following subsections. Note
which means they can guarantee, in the best case, to produce a
                                                      that, within the ﬁrst stage, a solution (the best found so far)
bound which is only 33% of the optimal value. Furthermore,
                                                      can be returned and its quality is guaranteed to be | | of
as opposed to ours, their approach cannot avoid searching the                                     A /2
                                                      the optimal (i.e.  in the case of 20 agents).1 In either of
whole space, in all cases, in order to guarantee the optimal        10%
solution. Recently, our work [Rahwan and Jennings, 2005] 1This bound was proven by [Sandholm et al., 1999] as the pro-
reduced the time taken to cycle through these values without cedure in our stage 1 equates to searching the second layer in their

                                                IJCAI-07
                                                  2366the last two stages the optimal (i.e. β =1) or a good enough
(i.e. β<1) solution may be found and guarantees about the
quality of the solution can be given in cases where the second
stage completes.
4.1  Stage 1: Pre-processing
We will denote a coalition at index c in the list CL as CLc
where c ∈ 1, ..., |CL| and an agent in a coalition at index k
as C[k]. Also, the vectors containing the maximum and av-
erage value of each CLs are noted as maxs and avgs. The
pre-processing stage (detailed in algorithm 1) calculates the
maximum and average value of every CLs ∈CL. However,
in so doing, it is also possible to search some elements of Figure 2: GCS with 8 agents where F (G) for the shaded Gs
N . To start with, it is possible to get the value of the CS have been searched after scanning the input.
containing 1 coalition (i.e. the grand coalition {1, 2,...,a})
from CLa  and the coalitions containing a coalitions (i.e.
                                                                                           
{{1}, {2},...,{a}} by summing up the values of all coali- Require: CL, v(C) for all C ∈ CL and all CL ∈CL,CS
                                                       1: for s =1to a/2 do
tions in CL1. These are depicted as levels 1 and 4 in ﬁgure  
                                                      2:  let s = a − s
1). We therefore note the best of these two structures as CS                                      ∈
                                                       3:  Initialise maxs,avgs, maxs ,avgs to 0, where maxs, maxs max
                                                                      ∈
since this is the most efﬁcient CS found so far.           and avgs,avgs avg
                                                                          
                                                       4:  Initialise νmax to V (CS )
  Then, for each CLs, we go through every element and
                                                       5:  if (a mod 2 = 0) & (s = a/2) then
record the maximum maxs  =max C∈CLs (v(C)), as well           ←|    |                       s          s
                      1                                6:   cend  CLs /2 % Because the complement of is actually
as the average avg =         ∈    v(C). Moreover, it       else
                s    |CLs|  C CLs                      7:
                                                       8:   c  ←|CL  |
is possible to cycle through CL and CL − at the same        end     s
                            s       a  s               9:  end if
time since a pair of elements from each of these lists forms a 10: for c =1to cend do
                                                               ← |   |−       ←    c
coalition structure (see CL3 and CL1 in ﬁgure 1 and line 18 11: let c ( CLs c +1), C CLs
in algorithm 1). However, in so doing, we must ensure that 12: if v(C) >maxs then
                                                      13:    maxs ← v(C)
only pairs of disjoint coalitions (i.e. not containing the same 14: end if
agent) are chosen to form a CS. We ensure this property is 15: sums ← sums + v(C)
                                                                                               
                                                            Repeat lines 12 to 15, after replacing with to calculate
upheld by indexing CLs as per [Rahwan and Jennings, 2005] 16:                      C, c, s C ,c ,s
                                                                    
           2                                                maxs ,sums
(see ﬁgure 1). This indexing mechanism actually results in  % Calculate the values of some coalition structures in lines
              ∈               ∈                             17,18, and 19 below.
each element C  CLs  at index c [1, ..., s] being exactly                 
                                                     17:   let ν1 ← v(C)+v(C )
matched to an element C ∈ CL − at index |CL |−c +1.                    P          
                           a s           s                               s      a−C [k]
                                                            let ν2 ← v(C)+  v(CL     )
                                                      18:               Pk=1    1
  Moreover, at the same time, it is possible to compute, the             s      a−C[k]
                                                      19:   let ν3 ← v(C )+  v(CL    )
value of all CS that follow a conﬁguration G such that G =                k=1    1
{       }                                             20:   if max(ν1,ν2,ν3) >νmax then
 1, ..., 1,i This is achieved by looking into each coalition 21: νmax ← max(ν1,ν2,ν3), smax ← s, and cmax ← c
in the pair when cycling through CLs and CLa−s. For each 22: end if
                                                           end for
such coalition, we retrieve the value of the coalitions of size 23:            sum 
                                                               ← sums       ←    s
                                                      24:  avgs  |CL | and avgs |CL  |
1 for each element in the coalition (i.e. the coalition is split    s            s
                                                      25: end for
into its constituent parts), sum these up and add them to the           
                                                      26: smax ← (a − smax),cmax ← (|CL|smax − cmax +1)
                                                                                  
value of the other coalition and vice versa (see lines 18 and      cmax          cmax
                                                      27: Cmax ← (CL   ),Cmax ← (CL  )
                                                                   smax           smax
19 in algorithm 1).                                                   
                                                      28: CS1 ←{Cmax,Cmax}
  In searching coalition structures in the two ways shown             S
                                                      29: CS2 ←{Cmax ∪      {{i}}}
                                                                     S i∈Cmax
above (i.e. evaluating complementary sizes and coalitions    ←{            {{ }}}
                                                      30: CS3   Cmax, i∈Cmax i
containing 1s), we can actually search a part of the space               
                                                      31: return max, avg and CS =arg max      V (CS)
(which gets smaller as the a increases). This is illustrated by                CS∈{CS1,CS2,CS3,CS }
ﬁgure 2 for 8 agents where the shaded conﬁgurations repre-     Algorithm 1: The pre-processing stage.
sent those that will be fully searched after scanning the input.
Moreover we will have already covered all coalition struc-
          |  |≤
tures in case A 4 after the pre-processing stage. Since the                                      
                          a                           guarantee that the best CS found so far (i.e. CS returned
size of the input is of order O(2 ), and the algorithm scans all        ∗
of it, then it is bound to perform at least this many operations. by algorithm 1) is CS since we have not yet ensured that all
The operations performed within the two loops (at lines 1 and other unsearched conﬁgurations (i.e. other than the ones with
                                                      two elements and those with repeated coalitions of size 1)
10 in algorithm 1) are all linear in time. Hence, the complex-                  
ity of the above algorithm is O(2a). Note that we cannot yet have a value lower than V (CS ). Having obtained the values
                                                      of the maximum and average of every coalition list, as well as
                                                                               
search space.                                         the best possible solution CS found so far, we next describe
  2In [Rahwan and Jennings, 2005], we use heuristics that guaran- how to construct GCS and how to choose which element in N
tee that C as well as CLs are in ascending order lexicographically. to search.

                                                IJCAI-07
                                                  23674.2  Stage 2: Constructing and Choosing               UB  (i.e. excluding previously searched conﬁgurations). If
                                                         G                       
     Conﬁgurations                                    V (CS ) >UBG   ×  β for all G , it means we have found
It is crucial that the algorithm ﬁnds the F (G) which con- a suitable solution. Otherwise, we proceed according to the
tains the CS we seek (which is not necessarily optimal) as steps described below.
quickly as possible (since N is large). There are two possible Choosing a Conﬁguration. Having computed all possible
                                                      conﬁgurations and knowing that it is possible to search each
ways of doing this. First, we can choose those conﬁgurations    N
to search which are most likely to contain the optimal value element of (using the search procedure described in sec-
and, at the same time, allow us to prune the search space in tion 4.3), we now consider the procedure to choose the ele-
                                                      ment of N to search. First, if it is found that the AV GG for
case the optimal is not found. Second, by updating the max-                                          ∗
                        
imum value of every other G with more precise information the element(s) with the highest upper bound (i.e. UBG)is
                                                               AV GG ≥
gathered from previously searched , it is possible to further such that ∗ β we choose the smallest of these ele-
                             G                                 UBG
prune the search space. Before carrying out these operations, ments. Otherwise, we need to choose F (G) that will prune
however, it is necessary that we ﬁrst identify all possible con- most of the search space and, at the same time, be more
ﬁgurations in GCS.                                    likely to contain the required solution. To do this, we need
Constructing Unique Conﬁgurations in GCS.   The set   to compute the expected gain (the amount of space that can
of all conﬁgurations is equal to all the integer parti- be avoided after searching the element) and cost in searching
tions that can be generated for the number of agents  each F (G) ∈N(one time). To estimate such parameters,
| |
A   [Skiena, 1998].    For  example, for  the num-    we ﬁrst need to estimate arg maxCS∈F (G)(V (CS)). This
ber 5, the possible integer partitions or conﬁgurations equates to the value lying between UBG and AV GG of that
G is {5}, {4, 1}, {3, 2}, {3, 1, 1}, {2, 2, 1}, {2, 1, 1, 1}, and element under absolute uncertainty.4 Then, we need to com-
{1, 1, 1, 1}. The growth√ rate of the set of conﬁgurations is pute, given estimates of other UBs, the size of the space that
known to be Θ(eπ 2a/3/a) (which is much lower than that will be pruned as a result of the value obtained being greater
of the input i.e. O(2a)) where a is the number to be parti- than the UBs of other elements. This is performed for each
                                                         ∈G
tioned. Fast recursive algorithms to generate such partitions G CS/G and the one with the maximum gain is chosen
already exist and we chose a standard algorithm from [Kreher to be searched. The details are outlined in algorithm 2. Next
and Stinson, 1999] to do so.                          we consider how to improve our estimates of the UB which
  Having obtained all possible conﬁgurations and given that should allow us to further reduce the space to be searched
we have computed all the maximum and average values of online.
each coalition size in the pre-processing stage, it is now pos-
                                                      Require: GCS,UBG and AV GG for all G ∈GCS.
sible to calculate the upper bound (UBG), and average value       AV G               ∗
                                                           G   { |   ∗G ≥ } 
 ∅              ∈G
                                                       1: if β = G UB    β  =  where UBG =maxG CS (UBG) then
(AV GG) of every G corresponding to F (G) ∈Nas well.                 G
                                                          % some configurations satisfy the bound
This can be achieved by cycling through F (G) and sum-       →        ∈G  |   |
                                                       2:   G   arg minG β ( F (G) )
ming up the maximum and average values for every coalition 3: return G
size in the conﬁguration. For example, for a conﬁguration 4: end if
                                                       5: Initialise MAXgain to 0
G =  {1, 2, 4}, we obtain UBG = max1 + max2 + max4
                                                       6: for all G ∈GCS do
                                                                        +
and AV GG  = avg1 + avg2 + avg4 (which is actually the              AV GG UBG
                                                       7:   let Emax = “ 2    % the expected value.”
        3                                                            P                     
minimum  value that a coalition structure with that conﬁgu-                            |    | −|   |
                                                       8:   let Egain = G ∈G /G,UB  <Emax F (G ) F (G) % the
                                                                          CS     G
ration can take). Moreover, for those sizes that are repeated, expected gain in choosing this element.
we can use the second best, third best, and so on until the end 9: if Egain >MAXgain then
                                                                      ←         ∗ ←
of the list. For example, for a conﬁguration {2, 2, 1, 1, 1}, 10: MAXgain Egain and G G
                                                      11:   end if
we would sum the maximum of CL2  with the second best 12: end for
                                                                ∗
of CL2 and the maximum of CL1 with the second and third 13: return G
best of CL1. This procedure gives us a more precise UB for Algorithm 2: Selecting an element of GCS to be searched.
the element, but requires searching the coalition lists for these
values (which are not ordered in the input) which for size s is                        N
  a!  . The latter grows very quickly with s and since most Updating UB. As each element of is being searched
(a−s)!s!                                              for CS∗ (detailed in section 4.3), it is possible to compute
elements of GCS will contain more of the smaller elements
                                                      the maximum value of certain combinations of sizes or splits
(such as 1, 2 or 3), meaning we get more precise updates for
                                                      (split ∈ 2G). These can be used then to update the UB of
most of the elements. We stop at   to limit the cost of    G
                             s =3                     elements of N in a similar way to the procedure described
searching values lower than .
                       maxs                           in section 4.1. For example, while searching an element
  Having obtained the UBG and AV GG of all elements in
                                                     with conﬁguration G = {1, 1, 1, 1, 2, 3, 4}, it is possible to
N , we compare the value       found so far, with the
                       V (CS )                        ﬁnd the maximum value of combinations such as {1, 1, 3}
  3                          CL                       or {1, 2, 3, 4} which can then be used to update the UB of
   This is because every element in appears the same num- {       }
ber of times in all possible coalition structures of a given conﬁgura- 1, 1, 1, 3, 3, 4 (and adding max1 + max3 + max4) and
tion. In the case of repeated coalitions of size 1, while the coalitions {1, 2, 3, 3, 4} (and adding max3) respectively. If the UB of
are not repeated an equal number of times at the same position in
                                                         4
the structure, they do repeat equally when considering all positions However, as the estimates of UBG become more precise, the
where they could occur in a coalition structure.      value is more likely to tend towards the upper bound of the element.

                                                IJCAI-07
                                                  2368that conﬁguration is lowered when using the split, it is up-
dated accordingly.
  Since the number of splits can be as large as 2|G| (includ-
ing repeated splits), and computing the maximum value of
each of them every time we compute V (CS) can be costly.
Therefore, we only compute maximum values for those splits
whose value are not known so far. When the search starts,
every G is initialised to be split in half. Then as F (G) is
searched, the value of the splits to be tracked are computed
as V (CS) (see section 4.3). After the search is complete, all
 
G  ∈GCS/G  are updated with the newly tracked split. More-
over, all updated G add one more element from their own
conﬁguration to that split to create a new split to be tracked
and remove the previous split from the list to be tracked in
case it was there. These procedures gradually increase each Figure 3: Composing a coalition structure for 7 agents with
                                                                      {     }
G’s list of splits to be tracked when searched, but also ensure conﬁguration G = 2, 2, 3 .
all splits are never computed twice. Next we describe how
F (G) is searched and how the value of the coalition struc- only 66% less memory than used by DP.
tures and the splits are computed.
                                                      Avoiding Overlapping Coalitions. Basically, for C1 we use
4.3  Stage 3: Searching an Element of N               M1  to cycle through all possible instances of C1 (i.e., through
                                                      the set of combinations of size |C | taken from the set A ) and
This stage is the main potential bottleneck since it could in-                   1                  1
                                                      for each coalition in M we use M to cycle through all pos-
volves searching a space that could possibly equal the whole             1         2
                                                      sible instances of C (i.e., through the coalitions of size |C |
space of coalition structures (if all N is searched). How-             2                               2
                                                                         
ever, using the heuristics described in section 4.2, we reduce from the vector A2 = A1/C1), and for each of these possi-
the possibility of having to search all this space (see section ble coalitions, we use M3 to cycle through all the possible
                                                                                                |  |
5 for the impact of this reduction). Moreover, we provide instances of C3 (i.e., through the coalitions of size C3 out of
heuristics here that allow us to minimise any redundant com- the set: A3 = A2/C2), and so on, for every k =1, ..., |G|.In
putations when cycling through this space. The latter proce- so doing, we avoid repeating the agents (i.e., we avoid having
dure builds upon our previous work [Rahwan and Jennings, coalition structures such as: {{1, 2}, {2, 3}}) in any coalition
2005] and allows us to construct coalition structures that are ﬁtting the conﬁguration G. Moreover, we use the fast index-
unique and ﬁt a particular G, and at the same time, calculate ing techniques provided by our previous work [Rahwan and
                                                                                            5
the values of these structures. However, the main problem Jennings, 2005] to search all instances of Ck.
in constructing coalition structures is that if the procedure is Avoiding Redundant Coalition Structures. Redun-
performed na¨ıvely, repetitions will occur and cause the for- dant coalition structures, such as {{1, 2}, {3, 4}} and
mation of redundant, as well as invalid, coalition structures. {{3, 4}, {1, 2}}, are only possible when we have repeated
Now, there are two main types of repetitions that can occur. coalition sizes in the conﬁguration (e.g G = {1, 2, 2, 3} or
First, a structure could contain coalitions that have the same G = {1, 4, 4, 4, 6}). Formally, this can only happen when
agent(s) in different coalitions (i.e. overlapping coalitions) |Ck| = |Cj| where k = j. Now, since Ak is ordered in an as-
and this would render the CS invalid. Second, two struc- cending fashion (see ﬁgure 3), and since we use Mk to cycle
tures could actually contain the same coalitions. This can through combinations of {1, 2, ..., |G|} (which ensures that
happen when the conﬁguration requires multiple coalitions the combinations are always in an ascending order), we can
of the same size such that the same coalition appears at dif-                                  1
                                                      use the smallest element in the coalition (i.e., Ck )asakey
ferent positions (since elements in G are in ascending order). to identify the coalitions that we have already gone through.
Our procedure, described below, avoids both types.    In more detail, as in [Rahwan and Jennings, 2005], M will
        ∈                                ≤   ≤|   |                                                 k
  Let Ck  G be a coalition located at position 1 k G  initially go through the coalitions that contain 1 (see bottom
                                      i ≤  i+1
of G, and let Ak be a vector of agents Ak (where Ak Ak ) of left-most column in ﬁgure 3), and this points to the ﬁrst
from which the members of Ck can be selected. Finally, let (smallest) element in Ak. Since Ak+1 = Ak/Ck, then the
     |   |   |  |
Mk  : Mk  =   Ck be a temporary array that will be used smallest element in Ck+1 must be greater than the smallest
                                                                        1
to cycle through all possible instances of Ck. The use of element in Ck (i.e. Ck ), and this ensures that Ck+1 can never
Mk  here is mainly to show that we do not need to keep in be equal to a previous instance of Ck (particularly in the case
memory all the coalition structures that can be constructed where |Ck+1| = |Ck|).
(although we do need to cycle through all of the coalition After Mk has cycled through the coalitions that contain
structures in N). Instead, we just need to maintain in mem- 1, we move on to coalitions that do not contain 1, but con-
ory one structure at a time. Since we do not maintain the
                                                         5                    M i ∈ M
complete history of computed solutions, our algorithm has a Here, the difference is that k k represents an index that
                                                                                                     Mi
                        a                                                                            k
memory requirement of O(2 ) (i.e. the size of the input) as points to the required agent in Ai (i.e., the required agent is Ai ),
                              alog23                                                    i
opposed to the DP algorithm’s O(2  ) (see [Yeh, 1986; while in [Rahwan and Jennings, 2005], Mk represents the actual
Sandholm et al., 1999]) and hence our algorithm would take agent.

                                                IJCAI-07
                                                  2369