         Representing Flexible Temporal Behaviors in the Situation Calculus

                                    Alberto Finzi   and  Fiora Pirri
                                DIS- Universita` di Roma “La Sapienza”
                                  Via Salaria 113, I-00198 Rome, Italy
                                      {ﬁnzi,pirri}@dis.uniroma1.it

                    Abstract                          to cope with ﬂexible behaviors and the cognitive capabilities
                                                      enabling reasoning about these processes, can be combined
    In this paper we present an approach to represent- in the Temporal Flexible Situation Calculus. We present a
    ing and managing temporally-ﬂexible behaviors in  new approach to ﬂexible behaviors, that exploits the full ex-
    the Situation Calculus based on a model of time   pressiveness of the Situation Calculus (SC) [19; 12], where
    and concurrent situations. We deﬁne a new hybrid  computational concerns related to time can be monitored by
    framework combining temporal constraint reason-   a temporal network, obtained via a transformation of added
    ing and reasoning about actions. We show that the constraints. To embed many concepts elaborated in the CBI
    Constraint Based Interval Planning approach can   framework we extend the SC with concurrency and time (ex-
    be imported into the Situation Calculus by deﬁn-  tensions of SC with time was already explored in [15; 17;
    ing a temporal and concurrent extension of the ba- 16]), deploying Allen’s interval relations [1], and further con-
    sic action theory. Finally, we provide a version of straining the language to represent concurrent timelines. In
    the Golog interpreter suitable for managing ﬂexible this framework we can conjugate the advantages of the SC
    plans on multiple timelines.                      with the expressive power of the CBI paradigm. Our aim
                                                      here is twofold: on the one hand, it is made possible to intro-
                                                      duce a separated timeline for each component of the dynamic
1  Introduction                                       system (i.e. each entity, which is part of an autonomous
In real-world domains robots have to perform multiple tasks system, such as a robot), so that concurrency and ﬂexibility
either simultaneously or in rapid alternation, employing di- can be clearly addressed; on the other hand the causal rela-
verse sensing and actuating tools, like motion, navigation, tionships among processes can be dealt with in the SC lan-
visual exploration, mapping, and several modes of percep- guage, which provides a clear framework for preconditions
tion. To ensure a suitable multiple-task performance, some and postconditions of actions and a simple solution to the
approaches (e.g. [14; 23]) have recommended that executive frame problem. We show that the CBI perspective, with
control processes supervise the selection, initiation, execu- all its arsenal of speciﬁcations in terms of ﬂexible time, al-
tion, and termination of actions. From these ideas, a new ternation constraints, resources optimization, failure recover-
paradigm has been proposed, called the Constraint Based In- ing, and tasks scheduling, can be imported into the SC ([19;
terval Planning (CBI), which essentially amalgamates plan- 12]), deﬁning a temporal and concurrent extension of the ba-
ning, scheduling and resources optimization for reasoning sic action theory (related approaches are [15; 17; 16; 8; 20;
about all the competing activities involved in a ﬂexible con- 6]). Finally, we provide a version of the Golog language and
current plan (see [10; 4; 7]). The CBI approach, and simi- interpreter for manipulating ﬂexible plans on multiple time-
lar approaches emerged from the planning community, have lines.
shown a strong practical impact when it comes to real world
applications (see e.g. RAX [10], IxTeT [7], INOVA [21], 2 Preliminaries
and RMPL  [23]). However, from the standpoint of cognitive
robotics it is important to ensure both optimal performance, 2.1 Situation Calculus and Golog
in practical applications, and to provide a logical framework The Situation Calculus [12; 19] is a sorted ﬁrst order lan-
for ensuring coherence of actions preconditions and effects. guage for representing dynamic domains by means of ac-
The system coherence emerges as a core issue also when con- tions, situations, and ﬂuents. Actions and situations are ﬁrst
trol processes negotiate resources allocation with individual order terms, and situation-terms stand for history of actions,
perceptual-motor and cognitive processes; indeed, the exec- compound with the binary symbol do: do(a, s) is the situation
utive has to establish priorities among individual processes obtained by executing the action a after the sequence s. The
to allot resources for multiple-task performance (see the dis- dynamic domain is described by a Basic Action Theory BAT

cussion in [8; 11; 3]). Therefore, different, concurrent, and = (Σ, DS0 , Dssa, Duna, Dap). We refer the reader to [19] for
interleaving behaviors, subject to switching-time criteria and a complete introduction to the SC. Temporal Concurrent Sit-
current situation needs, lead to a new integration paradigm. uation Calculus (T CSC) has been earlier introduced in [15;
In this paper we suggest that the reactive aspects that have 18; 17]; actions are instantaneous, and their time is selectedby the function time(.). Durative actions are considered as Location
processes [15; 19], represented by ﬂuents, and durationless
actions are to start and terminate these processes. For exam-  at(p1)          go(p1,p2)      at(p2)
ple, going(hill, s) is started by the action startGo(hill, t) Engine
                           0
and it is ended by endGo(hill, t ).                            stop           running           stop

Golog.  Golog is a situation calculus-based programming
language for denoting complex actions composed of the prim-      Figure 1: Timelines and constraints
itive (simple or concurrent) actions deﬁned in the BAT .
Golog programs are deﬁned by means of standard (and not
so-standard) Algol-like control constructs: i. action se- Planning Problem in CBI. Given the CBI model Mcbi, a
quence: p1; p2, ii. test: φ?, iii. nondeterministic action choice planning problem is deﬁned by Pcbi = (Mcbi, Pc), where Pc
p1|p2, iv. conditionals, while loops, and procedure calls. An is a candidate plan, representing an incomplete instance of a
example of a Golog program is:                        plan. The candidate plan deﬁnes both the initial situation and
                                                      the goals. In particular, Pc consists of : i. a planning horizon
 while ¬at(hill, 3) do                                h; ii. a set of temporal properties to be satisﬁed for each state
    if ¬(∃x)going(x) do π(t, (t < 3)?; startGo(hill, t))
                                                      variable xi ∈ X (e.g. at(p1) ends before 10 and after 20 in
  The semantics of a Golog program δ is a SC formula  the timeline of Figure 1); iii. the set of precedence constraints
        0              0                              among ﬂuents pk,1 ≺ pk,2, which are to hold on a timeline,
Do(δ, s, s ) meaning that s is a possible situation reached.
by δ once executed from s. For example, Do(a;p, s, s0) = e.g. at(p1) ≺ at(p2); iv. the set of constraints R={ri,j}
Do(p, do(a, s), s0) ∧ P oss(a, s) deﬁnes the execution of an associated with the temporal properties pi,j mentioned in the
action a followed by the program p. For more details on the timelines. A ﬂuent pi,j(~x) mentioned in a candidate plan is
SC and Golog we refer the reader to [19].             fully supported [10] if all its associated constraints ri,j are
                                                      satisﬁed. E.g. in Figure 1 at(p1) and at(p2) are fully sup-
2.2  Constraint Based Interval Paradigm               ported. A candidate plan is said to be a complete plan if: i.
The constraint based interval framework (CBI) [10; 4], is a each temporal property on each timeline is fully supported;
well known framework for temporal planning systems com- ii. all timelines fully cover the planning horizon. Given the
bining temporal reasoning and scheduling, including, e.g., planning problem (Mcbi, Pc), the planning task is to provide
RAX  [10], IxTeT [7], and INOVA[21]. The CBI paradigm a sufﬁcient plan [10], i.e. a complete plan with the maximum
accounts for concurrency and time, and action instances and ﬂexibility: the planner is to minimally ground the (temporal)
states are described in terms of temporal intervals linked by variables to allow for on-line binding of the values.
constraints. We refer to the timeline-based version of the CBI
[10] where a domain behavior is seen as the continuous inter- 3 Temporal Flexible Situation Calculus
action of different components, and each component is repre- In this section we present the Temporal Flexible Situa-
sented by state variables; a single state variable is a relevant tion Calculus framework (TFSC), which integrates the CBI
feature of the components and represents a concurrent thread. paradigm, introduced above, into the language of SC.
Both states and activities are uniformly treated as temporal
intervals. The history of states for a state variable over a Actions. We deﬁne a partition {αv; v ∈ C} of the set of
period of time is called a timeline. Figure 1 illustrates two actions according to the different components C the system
timelines (state variables) repr. the engine and the naviga- has to care of. For example, the component Pan-Tilt-Unit
tion processes of a mobile robot: initially, the robot is at(p1) manages actions like start-scan spts(.), or end-scan epts(.).
and stop; when it starts go(p1, p2) the engine is running; the To induce the partition we introduce a type operator ν, and
engine is stop again once the rover arrives at(p2). Some tem- extend the SC foundational axioms with the following deﬁ-
                                                                      Sn
poral constraints among the activities are: at(x) holds only if nitions. Let H = i=1 Hi be a set specifying the types of
stop holds, go(x, y) is followed by at(y).            actions, we assume this set ﬁnite. For each name of action
                                                      the following holds:
                                [  ]                             0          0                        0
Domain Constraints. A CBI model  10 Mcbi=(X, J, R)    Hi(a)∧Hj(a  )→¬(a  = a ) for i6=j, and ν(A(~x))=ν(A (~y))
is deﬁned by: i. a set X={x1, . . . , xn} of state variables, Wn              0
                                                      ≡   i=1 Hi(A(~x)) ∧ Hi(A (~y)), together with the unique
one for each component (e.g. xloc and xeng in Fig. 1); ii. a name for actions, here the indices stay only for different com-
set J = {J1, . . . , Jn} s.t. for each xi the set Ji collects the ponents names, a denotes an action variable, while A denotes
associated temporal ﬂuents pi,j(~y), e.g. at(x) and go(x, y) the name of an action function.
for location state variable in Fig. 1; iii. a set of temporal
constraints R={ri,j}, usually called compatibilities: for each Situations. Typization of actions induces also a partition
temporal ﬂuent property p there is a compatibility relation on the set of situations whence on the set of histories. Histo-
                      i,j                             ries become streams of situations over timelines. Typization
ri,j representing all its possible legal relations with the other
temporal ﬂuents, i.e. which temporal property must proceed, is inherited by situations as follows:
follow, be co-temporal, etc. to pi,j in a legal plan. The latter ∀a. ν(a) = ν(do(a, S0)).
are speciﬁed in terms of metric version of temporal relations ∀a s. ν(a) = ν(s) ≡
a la Allen [1]. E.g. the arrows in Fig. 1 illustrate the compat- ∀a0s0.s = do(a0, s0)→ν(a) = ν(a0) ∧ ν(a0) = ν(s0).
ibility associated to the ﬂuent at: at(x) meets go(x, y), and                                          (1)
at(x) during stop.  For each component v ∈ C, a timeline is speciﬁed by a his- Intervals. Intervals mention temporal variables, which are
tory of actions concerning v. The evolution of the set of time- always free, and get assigned only according to a speciﬁed
lines is a set of situations sc = {sv|v ∈ C}, called situation set of behaviors, in so being very well suited for representing
class, spanning different types. In other words, ∃s.s ∈ sc ﬂexible behaviors. In this paragraph we show how embedding
                               Wn                     intervals in the SC leads to the construction of a temporal
abbreviates: ∃s1 . . . sn ∃a1 . . . an. i=1[s = do(ai, si)∧
               n                                      network. The following formula Ψ, speciﬁes the conditions
ν(a ) = ν(s )∧V      ν(a ) 6= ν(s )]. Where ν(s ) is the
   i      i    j=1,i6=j  i      j           i         for a process P to hold on its induced timeline, from t− to
type of situation s corresponding to some component i ∈ C,         i                                 i
               i                                      t+ with arg. x:
n=|C|. The sc class is equipped with the following ≤c rela- i
tion:                                                             − +          0 00
         0          0         0    0  0                     Ψi(x, t , t , sc) = ∃sisisi .si ∈ sc∧
        sc ≤c sc ≡ ∀s s.s ∈ sc ∧ s ∈ sc →s ≤ s. (2)               i i
                                                                            +  0            −   00
                                                               si ≥ do(ePi (x, ti ), si) > do(sPi (x, ti ), si )∧ (6)
 do(av, sc) denotes the sequence resulting from adding the               0                 00
                                                                   ¬∃t s.si ≥ do(eP (x, t), s) ≥ si
action av to a type-compatible situation mentioned in sc.                        i
Time.   Time is part of the sorted domain of T F SC, as Let p, m, o, d, s, f, e abbreviate the usual precedes, meets,
noted in Section 2; we extend the time selection function from overlaps, during, starts, ﬁnishes, equals, as deﬁned in the
actions to situations (see [16] for a different notation), and temporal intervals literature, started in [1], with op ranging
situation classes as follows:                         over all relations, and let γop denote:

       time(S0) = t0. time(do(a, s)) = time(a).                 +    −         +    −        −    −
                     0       0 00        0                γp = (ti < tj ); γm = (ti = tj ); γs = (ti = tj );
       time(s) ≤ time(s ) ≡ ∃a a s .s = do(a, s )∧ (3)          +    +        +    +   −    −
         0      0  00                0                    γf = (ti = tj ); γe = (ti = tj ∧ ti = tj );
         s = do(a , s ) ∧ time(a) ≤ time(a ).                   −    −   −    +   +   +
                                                          γo = (ti < tj ∧ tj < ti ∧ ti < tj );
                                                                −    −   +    +   −   −   +    +
The time of a situation class sc, depends on the time of the γd = (ti > tj ∧ tj ≥ ti ∨ ti ≤ tj ∧ tj < ti ).
situations in sc, so time(sc) = t abbreviates:
    0                     0             0    0     0   We represent the interval relations between processes, given
∃s∀s .s ∈ sc ∧ time(s) = t ∧ s ∈ sc ∧ time(s ) = t →t ≥ t . in situation-suppressed form (i.e not mentioning situations),
                                                (4)   and taking the “end-time” t+ as argument, according to the
                                                      following macro-deﬁnition, where the free variables men-
Consistency of the extension. The above axioms concern- tioned in Ψi (see (6) above) are just hidden:
ing types, time and situation classes, are added to the foun-
                                                                 −  +          − +  ∆
dational axioms in Σ and are conservative (i.e. obtained by Pi(x, ti , ti ) op Pj (x, tj , tj ) = Ψi→[Ψj ∧ γop]. (7)
extending the language), therefore the extended set (which
                                                                                     [  ]
we still denote with Σ) must be consistent.            Note that the metrical version (like in 10 ) including durative
                                                      relations can be analogously deﬁned. Letting each operator in
Processes. Processes span the subtree of situations, over a the macro being not commutative, inverse can be deﬁned as
                                                           −1
single interval speciﬁed by a start and end action. They are Pi op Pj = Pj op P1.
implicitly typed by the actions process: for each process there We assume that the domain theory DT is associated with
are two actions, starting and ending the process, abbreviated temporal relations, as those given in (7), specifying the tem-
by sP , meaning starts process P and eP , meaning ends pro- poral interactions between processes as constraint patterns.
cess P . A process is denoted by a ﬂuent P (~x, t−, s), (here t− For example, wanting to say that going has always to be
is its start time). Successor state axioms (SSP ) for processes preceded by beingAt we would associate to D the set
              SSA                                                                                T
extend the set of  for ﬂuents and are deﬁned as follows: {going([t−, t+]) p beingAt([t−, t+]). We call this set the
            −                    −                            g  g              b  b
       P (~x, t , do(a, s)) ≡ a = sP (~x, t )∨        temporal compatibilities abbreviated by T .
                        −                       (5)                                      c
                   P (~x, t , s) ∧ ∀t.a 6= eP (~x, t).  We denote I(τ, sc) the set of the (7) interval relations as-
For example, moving towards θ, can be deﬁned as:      sociated with the situation class sc, where τ is the set of time
                                                      variables, varying over the intervals [t+, t−], related to the
               −                     −
       move(θ, t , do(a, s)) ≡ a=smove(θ, t )∨        set of timelines sc. The I(τ, sc) is obtained by abducing the
                     −       0           0
             move(θ, t , s) ∧ ∀t .a 6= emove(θ, t ).  time constraints on τ, according to a construction illustrated
                                                      in the paragraphs below. For instance, for a suitable sc and
 Action preconditions axioms deﬁne the conditions for the   −  +    −  +   −  +   −  +
start and end actions to be executed. Let P be a process, τ = {[t1 , t1 ], [t2 , t2 ], [t3 , t3 ], [t4 , t4 ]} we can get the set:
we say that it is linear if it does not mention any other pro- I     −  +      −  +     −  +       − +
                                                        (τ, sc)= {P1(t1 , t1 ) s P2(t2 , t2 ), P1(t1 , t1 ) o P2(t2 , t2 ),
cess in the right-hand side of the deﬁnition. The set Dssp    − +       −  +     −  +       −  +
                                                          P1(t1 , t1 ) d P2(t2 , t2 ), P3(t3 , t3 ) d P2(t2 , t2 ),
of successor state axioms for processes is linear if all pro-  −  +      −  +     −  +       −  +
                                                           P3(t3 , t3 ) s P4(t4 , t4 ), P4(t4 , t4 ) d P2(t2 , t2 )},
cesses mentioned in it are linear. Let Dssp be a set of lin-
ear successor state axioms for processes, let the BAT be whose constraints are depicted in the network of Fig. 2.
D ∪ D   = Σ  ∪ D   ∪ D    ∪ D  ∪ D    ∪ D   then:
     ssp        S0    una    ss    AP    ssp          Temporal Constraint Network.  The satisﬁability problem
Lemma 1  D ∪ D    is consistent iff D is.
               ssp              S0                    we are concerned with is the following. Let DT = D∪Dssp ∪
Proof (sketch). The proof relies on the relative consistency of I(τ, sc) be a basic theory of actions, extended with time spec-
the SC. Furthermore, linearity of Dssp ensures that there are iﬁcations (see eq. (3) above), successor state axioms for pro-
no loops w.r.t. time, hence for each start and end action, as cesses, time interval constraints, in which time variables are
deﬁned in the processes, it is not possible to introduce depen- free, and with an associated set of compatibilities Tc. We
                                                 0
dencies that could lead, for instance, to sP (~x, t) < sQ(~y, t ) seek an assignment set for time variables, which is a feasi-
                   0
and sP (~x, t) > sQ(~y, t ).                          ble solution for the constraints, and s.t. a substitution of the                                                      ture of SC (where D is a sorted domain and I an interpre-
                                                      tation) we extend M with the above deﬁned mapping h, i.e.
                                                      Mh=hD, I, hi. Then Mh  is a model for D∪I(τ, sc), iff there
                                                      is a consistent temporal network h(I(τ, sc)), under some as-
                                                      signment V to the free time-variables, satisfying I(τ, sc).
                                                      Given the above deﬁnitions we can state the following:

                                                      Lemma 2   Let DT be a consistent action theory. DT ∪
                                                      I(τ, sc) is consistent iff there exists a consistent temporal con-
                                                      straint network h(I(τ, sc)), under the assignment V , such
                                                                   V
                                                      that Mh, V |=  D ∧ Ψ[τ].
                                                      Proof(sketch). Let h(I(τ, sc)) be a consistent temporal net-
                                                      work, under the assignment V . Consider the formula Ψ[τ] =,
                                                      V
                                                        i,j≤m Ψi→(Ψj ∧γopij ), with τ the set of free time-variables
                                                      in Ψ, and we let M be a model for DT . M  can be ex-
Figure 2: A T CN representing a set of interval constraints
                                                      tended to a model for all the γop according to V , as follows.
on processes P , P , P , P                                                       ij
            1  2   3  4                               For each process Pi build a chain of situations of the kind
                                                                    0  0                00  00
                                                      Γi = {do(sPi (ti), σ ) ≤ σ ≤ do(ePi (ti ), σ ) ≤ σi}, with
free variables for this set induces an interpretation, which is a σ a sequence such that ePi is not mentioned in σ, and the
             I                                        free-temporal variables are from τ according to the P time-
model of DT ∪ (τ, sc). To ﬁnd such an assignment we ap-                                          Si
peal to the concept of general temporal constraint networks line in sc. Extend the structure M to one for DT ∪ i Γi by
(T CN) introduced in Meiri [13] following the one developed choosing from V a suitable assignment to the free variables τ,
for discrete constraint networks [5]. A T CN involves vari- appearing in each Γi, and according to the constraints in the
                                                                                  I
ables denoting both intervals and points, together with unary γopij , corresponding to those in (τ, sc), and such that each
and binary constraints. A T CN is associated with a direct sequence is satisﬁed. This is always possible, because each
constraint graph where each node is labeled by a temporal process is made true of a situation by a start action, and false
variable and labeled-directed edges represent the binary rela- by an end action, by the sequence construction, on a timeline.
                                                      Then V is an assignment to τ s.t. (M , V ) is a model for
tions between them (e.g. p, e etc.). According to the underly- S                       h
ing temporal algebra, T CNs express different forms of rea- DT ∪ i Γi[τ]. Finally it is enough to show that any model
                                                              S                                        2
soning (Allen’s interval algebra [1], the Point Algebra [22], for DT ∪ i Γi[τ], is a model for Ψ[τ].
                                                                         I                         I
metric point algebra [5], and so on) see in particular [2]. Let By Lemma 1 DT ∪ (τ, sc) is consistent iff DS0 ∪ (τ, sc)
                     −  +      −  +                   is consistent. Logical implication can be now deﬁned as fol-
τ = {X1, . . . , Xn} = {[t , t ], . . . [t , t ]} be a set of time
                     1  1      n  n                   lows. Let M  = hD, I, hi, and β(τ) be a formula with all its
variables, denoting intervals (i.e. each variable Xi denotes an  h
        −  +                                          free temporal variables among τ:
interval [t1 , t1 ]), and let R be a set of binary relations; the
assignment set V = {[s1, e1], . . . , [sn, en] : si, ei ∈ R, si < D ∪ I(τ, sc) |= β(τ) iff for any h, for any V,
                                                            T                                          (8)
ei} is called a solution set for R, if {X1 = [s1, e1], . . . , Xn = Mh, V |= DT ∪ I(τ, sc) implies Mh, V |= β(τ).
[sn, en]} satisﬁes all the constraints deﬁning R. The network
is consistent if at least one solution set exists. In the sequel
               T CN                                   TCN construction.  The T CN  construction involves the
we shall identify a  with its labeled direct graph and de- following inference mechanisms: i. abduce I(τ, sc) to ob-
note with V a solution set. We also say that V satisﬁes the
                                                      tain the temporal network topology h(I(τ, sc)); ii. imple-
constraints.                                          ment the temporal constraints into situations, according to
Mapping SC   to TCN.   Let h  :  I(τ, sc) 7→ T CN,    the network. We show the inference process through an ex-
h(I(τ, sc)) is a temporal network Net, with cardinality m, ample. Let Tc = {P1 m P2}, be the compatibilities spec-
                                                                                              −       +
speciﬁed by the nodes labeled by the deﬁned processes iﬁed in the domain theory. Let sc = do([sP1 (t1 ), eP1 (t1 ),
{P , P |P opP }            I(τ, sc)                        −      +       0 −     0 +
  i  j  i   j , mentioned in     .                    sP2 (t2 ),eP2 (t2 ), sP1 (t1 ), eP1 (t1 )], S0), then the abduced
  By the above deﬁnitions the network Net is consistent if constraints, according to Tc, sc and τ, are:
there exists an assignment V to the temporal variables τ,
                                                       I           −  +       −   +     0 − 0 +     0 − 0 +
which is a feasible solution for I(τ, sc). For example the (τ, sc)={P1[t1 , t1 ] m P2[t2 , t2 ], P1[t1 , t1 ] m P2[t2 , t2 ]}
set V ={[10, 160], [10, 70], [75, 95], [95, 150]} is a solution                                        (9)
                                                       From the above constraints a three nodes network h(I(τ, sc))
                 τ={[t−, t+], [t−, t+], [t−, t+], [t−, t+]}
set for the variables 1  1   2  2    3  3   4  4  ,   would be constructed. The time range of the solutions to the
of the network depicted in Figure 2, given the relations network – given the free temporal variables and the situation
{m, p, d, s, f}
            .  Note that, in the macro deﬁnition (7), class sc – is a ﬂexible situation class, which is a triple of
                                           deﬁnien-
there are two parts, the left-hand component is the   the kind hsc, τ, ii, where i(τ) is the constraint over the free-
dum P (x, t−, t+) op P (x, t−, t+), which is mapped into
     i    i  i       j   j  j                         variables, e.g. i(τ) = 7 ≤ t− ∧ t+ > 10.
a temporal network, while the right-hand component is the                    1   2
deﬁniens Ψi→(Ψj ∧γop)[τ], which is interpreted into a struc- Progression. We want to determine if, according to the tim-
ture of the SC, where the assignments for the free tempo- ing and advancements of the current situation class, we can
ral variables τ are obtained by the T CN. A semantic cor- forget about past scheduled processes and think of future re-
respondence, between the network and the formulae of SC, sources allocation. This is the well known progression prob-
can be established as follows. Let M=hD, Ii be a struc- lem [19] in the SC. We face here a simpliﬁed version of the progression problem, and with regressable formulas, which Here, if the ﬁrst program action is applicable to si ∈ sc,
 is all we need. Let us state the problem as follows. Given a and ai can be scheduled after the horizon then it is neglected
 sentence ϕ, one needs ﬁrst to determine the set of situations (i.e. each action, which can be started after the horizon can
 in sc to which it can be progressed, given the timelines, and be postponed).
                      −  +
 a candidate interval t = [t , t ]. To this end one has to order • Partial order action choice:
 the situation terms in ϕ according to the relation ≤sc intro-              0   ∆                    0
                                                        Do(prog1 ≺ prog2, sc, sc , h) = Do(prog1 : prog2, sc, sc , h)∨
 duced in (2), and get the smallest situations set, w.r.t. ≤sc,                                  0
 mentioning t; let it be min. We now consider the domain   ∃a.select(a, sc) ∧ Do(prog1 ≺ a ≺ prog2, sc, sc , h)
        min                                            Here, either the second program can be directly executed, or
 theory DT , which is equal to DT but with DS0 replaced by
       min                                             it is possible to insert a primitive action a, selected by a suit-
 a set W   = {ϕ|DT  |= ϕ}, where ϕ mentions only ground
 situations σ, with {σ }= min, but no free variables of sort able ﬂuent predicate select(a, s) representing the selection
                  i   sc                               criterion (set to true if no selection holds).
 time. Let Φ(t1, . . . tn) be a SC formula mentioning situations
 {σi} ≥sc min, which are ground but for possible free vari- • Parallel execution:
                                                                                 0   ∆
 able of sort time all among t1, . . . , tn. Then             Do(prog1 k prog2, sc, sc , h) =
                                                                             0                  0
               I         V   min  I          min                Do(prog1, sc, sc , h) ∧ Do(prog2, sc, sc , h)
 Lemma 3  DT  ∪ (τ, sc) |= (DT   ∪ (τ, sc) ∪ W  ).
                                                       • Test action:
                 I                            min
 Theorem 1 DT  ∪  (τ, sc) |= Φ(t1, . . . , tn) iff DT ∪                   0   ∆                   0
   min                                                     Do(φ?; prog, sc, sc , h) = φ[sc] ∧ Do(prog, sc, sc , h)
 W     ∪ I(τ, sc) |= Φ(t1, . . . , tn)
                                                       Here φ[sc] stands for generalization of the standard φ[s] in the
 Proof. (sketch) One direction follows by cut. For the other SC extended to situation classes, e.g. P [sc] ∧ P [sc] is for
                       I                                                                 1       2
 direction, suppose DT ∪ (τ, sc) |= Φ(t1, . . . , tn), let us P1(s1) ∧ P2(s2) with s1, s2 ∈ sc, i.e. each ﬂuent is evaluated
 regress Φ(t1, . . . , tn) along the different timelines, this can w.r.t. its speciﬁc timeline.
 be done by separating Φ into a DNF, and considering each
                                                       • The semantics of nondet. action choice, nondet. argument
 conjunct separately, we regress it with respect to min, and let
                                                       selection, conditionals, while loops, and procedures is deﬁned
 G be the regressed formula – note that no change is needed
                                                       in the usual way.
 in regression to account for regressed sentences as time vari-
 ables will be kept as they are, without turning to quantiﬁed
 variables through successor state axioms (as they are univer- Flexible Temporal Behaviors in Golog. The CBI planning
 sally quantiﬁed in linear D ). Then by deﬁnition of W min, problem (Mcbi, Pc) introduced in Section 2.2 can be easily
                       ssp                             coded and solved in the T F SC framework. Given a D rep-
 G ∈ W min hence, by the previous lemma, the claim follows.                                          T
                                                       resenting the timelines and processes in Mcbi, a candidate
                                                       plan Pc can be encoded by a Golog program progc. This is
 4  Flexible High Level Programming in Golog           possible once we introduce, for each interval constraint for
                                                       p  (~r) P
 Golog Syntax. Given the extended action theory presented i,j in c, a Golog procedure of the kind:
                                                                           j   −  +      −  +
 above, the following constructs inductively build Golog pro-   proc(πi,j , (ψi (~r, t , t ) ∧ γ(t , t ))?) ,
 grams:                                                        j                                         j
                                                        where ψi is the macro (6) associated with the process Pi
 1. Primitive action: α.                               (i.e. i-th process in the j-th timeline), and γ any temporal
 2. Nondeterministic choice: α|β. Do α or β.           constraint. For example, go(d, e) ends in [6, 10] can be repre-
 3. Test action: φ?. Test if φ is true in the current sit. class. sented as
                                                                        nav     −  +       +
 4. Nondet. arg. choice: choose ~x for prog(~x).             proc(π1,1, (ψgo (d, e, t , t ) ∧ 6 ≤ t ≤ 10)?).
                                                        Given the πi,j procedures, a partial speciﬁcation of a single
 5. Action sequence: p1; p2. Do p1 followed by p2.
                                                       timeline Tj can be easily deﬁned using the ≺ operator:
 6. Partial order act. choice: p1 ≺ p2. Do p1 before p2.
                                                            proc(plan Tj, π0,j ≺ π1,j ≺ π2,j ≺ . . . ≺ πk,j),
 7. Parallel execution: p1kp2. Do p1 concurrently with p2.
 8. Conditionals: if φ then p else p .                 Given a set of timelines {Ti}, a candidate plan Pc can be
                          1      2                     represented as a parallel execution of the plan T :
 9. While loops: while φ do p .                                                                i
                           1                             proc(prog  , plan T : Nil k . . . k plan T : Nil ).
10. Procedures, including recursion.                               c       1                   k
                                                       Since a CBI complete plan P is associated with a fully sup-
                                                                          {T }                    i(τ)
                                       0               ported set of timelines i and a set of constraints (see
 Golog Semantics.  The macro Do(p, sc, sc , h) gives the Section 2.2), we can introduce a mapping g transforming a
 semantics for the above constructs; where p is a program, sc  P                     hsc, τ, ii
      0                                                CBI plan   into a ﬂexible situation   . The following
 and sc are situation classes, and h speciﬁes the ﬁnite horizon. holds.
 • Null program:                                       Proposition 1 Given a CBI planning problem (Mcbi, Pc),
                                                       where Pc is a candidate plan [10], for any complete plan
   Do(Nil, sc, sc0, h) =∆ time(sc) ≤ h ∧ ∀s.[s ∈ sc ≡ s ∈ sc0] P of (Mcbi, Pc), maximally ﬂexible in the time variables τ,
                                                       there exists a DT , a Golog program progc, where
 • Primitive ﬁrst program action with horizon:                 DT ∪ I(τ, sc) |= Do(progc, ini, sc[τ], h).
                                                       with hsc, τ, ii a ﬂexible situation, and such that:
                 0   ∆
  Do(ai; prog, sc, sc , h) = ∃si.si ∈ sc ∧ P oss(ai, si)∧
                                               0                         g(P ) = hsc, τ, ii
   time(si) ≤ h ∧ [time(ai) ≤ h ∧ Do(prog, do(ai, sc), sc , h)∨
                            0
   time(ai) > h ∧ Do(prog, sc, sc , h)]                The proof is omitted.