     SAT Encodings of State-Space Reachability Problems in Numeric Domains

           Jorg¨ Hoffmann            Carla Gomes & Bart Selman                 Henry Kautz
          DERI Innsbruck                   Cornell University             University of Rochester
         Innsbruck, Austria                 Ithaca, NY, USA                 Rochester, NY, USA
      joerg.hoffmann@deri.org        gomes|selman@cs.cornell.edu          kautz@cs.rochester.edu


                    Abstract                          In software veriﬁcation, both method (A) and method (B)
                                                                                                [   ]
    Translation to Boolean satisﬁability is an impor- have been explored, for example by Clarke et al 2004 and
                                                                   [    ]
    tant approach for solving state-space reachability Ganzinger et al 2004 , respectively. In planning, so far only
                                                                                                [
    problems that arise in planning and veriﬁcation.  method (B) has been explored, namely in LPSAT Wolfman
                                                                   ]              [                  ]
    Many important problems, however, involve nu-     and Weld, 1999 and TM-LPSAT  Shin and Davis, 2005 .
    meric variables; for example, C programs or plan-   The disadvantage of method (A) is that it involves the cum-
    ning with resources. Focussing on planning, we    bersome implementation of bitwise operations in a CNF. The
    propose a method for translating such problems    disadvantage of method (B) is that the expressivity of SMT
    into propositional SAT, based on an approximation languages comes at a price: the solvers are much more com-
    of reachable variable domains. We compare to a    plex than SAT solvers, and do generally not scale as well.
    more direct translation into “SAT modulo theory”  Herein, we explore a third option:
    (SMT), that is, SAT extended with numeric vari-   (C) Approximate the reachable variable domains, i.e., de-
    ables and arithmetic constraints. Though transla-     termine sets Dt (v) so that, for every variable v, every
    tion to SAT generates much larger formulas, we        value that v can have after t transitions is contained in
    show that it typically outperforms translation to     Dt (v). These ﬁnite domains can then serve as the basis
    SMT almost up to the point where the formulas         for a Boolean encoding, where atoms represent numeric
    don’t ﬁt into memory any longer. We also show         variables taking on particular values.
    that, even though our planner is optimal, it tends
                                                      Of course, this method will only work if the sets Dt (v) do
    to outperform state-of-the-art sub-optimal heuris- not grow too large. The underlying intuition is that the actual
    tic planners in domains with tightly constrained re- number of distinct values a numeric variable can achieve in
    sources. Finally we present encouraging initial re- a bounded-length problem is often quite small. Our experi-
    sults on applying the approach to model checking. mental results conﬁrm this.1
                                                        We focus on planning. We approximate reachable variable
1  Introduction                                       domains by constructing a “numeric relaxed planning graph”
Satisﬁability testing is a signiﬁcant method for solving state- (NRPG) inspired from work on generating heuristic functions
space reachability problems. In 2004 and 2006, the winners [Hoffmann, 2003; Kupferschmid et al., 2006]. We add some
of the track for optimal planners at the international planning more intelligence in order to obtain smaller Dt (v). Based on
competition translated bounded-length planning to SAT test- the NRPG we obtain propositional CNFs in a manner inspired
ing. In model checking, determining by SAT testing if or if by Kautz and Selman [1999]. The CNFs are handed over to
not error states are reachable in a ﬁxed number of steps often the state-of-the-art SAT solver MiniSat [Een and Sorensson,¨
succeeds where BDD methods fail [Clarke et al., 2001]. 2003]. The plan length bound starts at 1 and is incremented
  Many important planning and veriﬁcation problems, how- until the ﬁrst satisﬁable formula is found – this way, the gen-
ever, naturally involve numeric variables and constraints. For erated plans are optimal (have minimal length). We call the
example, C programs, or planning with operators that con- resulting planning system NumReach/SAT.
sume resources. The question arises as to how to best gener- We run large-scale experiments on a broad variety of plan-
alize the “encode as SAT” approach to numeric problems. So ning problems. We could not compare to the existing plan-
far, two different methods have been pursued:         ning systems using method (B) since LPSAT is outdated and
(A) Interprete numbers as bitstrings, and numeric operations TM-LPSAT is not available (see also Section 4). So, for this
    as bitwise operations. “Implement” these operations in comparison, we implemented such a system ourselves, called
    a propositional CNF.
                                                         1There is related work [Seshia and Bryant, 2004] using a notion
(B) Translate not to Boolean satisﬁability but to “SAT mod- of relevant variable domains in solving Presburger formulas. The
    ulo theory” (SMT), that is, SAT extended with numeric context and techniques are quite different from ours; e.g., the vari-
    variables and arithmetic constraints.             able domains arise through an iterated interaction with a SAT solver.

                                                 IJCAI07
                                                  1918NumReach/SMT.2  This is identical to NumReach/SAT ex- 1. By b (line 2), we denote the plan length bound we are
cept for the encoding of numeric variables. The SMT formu- currently considering. By writing φ[Y] for a conjuntion φ of
las are handed over to the state-of-the-art SMT solver Math- propositions and numeric constraints (lines 3, 4, 8), we mean
Sat [Bozzano et al., 2006]. NumReach/SAT consistently out- that Y ⊆ X is the set of all variables mentioned by the numeric
performs NumReach/SMT almost up to the point at which the constraints in φ.ByDt (lines 3, 4, 7), we denote the cross-
(larger) SAT encodings no longer ﬁt into memory.      product of the Dt (v) for v ∈V, i.e., Dt := Dt (v1)×...×Dt (vn)
  We also compare our planners to the “sub-optimal heuris- where V = {v1,...,vn}. For a set C of value vectors, or for
                                   [             ]
tic planner” family, namely to Metric-FF Hoffmann, 2003 , a single value vectorc ¯,byC|X respectivelyc ¯|X (lines 3, 4,
LPG [Gerevini et al., 2003], and SGPlan [Chen et al., 2006]. 7, 8) we denote the vector (set) restricted to the variables X.
These planners are fast (they respectively won the competi- For a set P of propositions P, a set C of value vectors, and
tions 2000–2006) but are usually not compared to optimal a conjunction φ[X] of propositions and numeric constraints,
planners since such a comparison is unfair. However, we ﬁnd
                                                      we say that (P,C|X ) |= φ (lines 3, 4, 8) iff φ’s propositions
that, in contrast to the usual competition results, in our con-
                                                      are a subset of P, and there existsc ¯ ∈ C so thatc ¯|X satisﬁes
text optimal planners are quite competitive. NumReach/SAT φ’s numeric constraints. By exp(c¯) (line 8) for an expression
outperforms all the heuristic planners in a basic domain with and value vector, we mean the outcome of inserting the values
tightly constrained resources. This is an important result for into the expression.
the planning community, suggesting to seriously reconsider
                                                        In words, the NRPG is built as follows. The reached propo-
numeric planning.3 We ﬁnally present initial, encouraging
                                                      sitions and variable domains are ﬁrst set to the initial values.
results on using our approach in model-checking domains.
                                                      Then one iterates over time steps t until the desired bound is
                                                      reached. In each step, the action set At is the set of all ac-
2  Approximating Variable Domains                     tions whose precondition can be satisﬁed at t. The same is
To spell out the algorithm building the NRPG, we need some done for the effect set Et . The propositions reached at t + 1
notations. I, V, and A respectively denote the initial state, set are those that are either reached at t, or added by an effect
of numeric variables, and action set of the planning task. The at t. The reached variable values at t + 1 are those that are
initial state is a set of propositions – those that are initially either reached at t, or that are the result of an effect at t and
true; also, it assigns a value to every variable v ∈ V. A nu- a value vector reached at t that satisﬁes the conjunction of
meric constraint has the form exp1[X]  exp2[Y] where  ∈ the precondition and condition of the respective action and
{<,≤,=,≥,>,=}, and exp1, exp2 are expresssions made of effect – intuitively, this means that the insertion of new values
constants, operators in {+,−,∗,/}, and variables X ⊆ V re- is “guarded” by the corresponding conditions.
spectively Y ⊆ V. Each action a ∈ A consists of its precon-
                                          ∈           Example 1. Consider a task with a single variable v, which is
dition prea, and a set Ea of effects. Each effect e Ea con- initially 4, and a single action whose only effect has the condi-
sists of its condition cone, its adds adde, and its deletes dele.
                                                      tion v ≥ 2 and the effect v := v−2. We will have D0(v)={4},
Additionally e is annotated with a set of numeric effects of ( )={ , }    ( )={   , , }
          =                                           D1 v     4 2 , and D2 v    4 2 0 . Then the algorithm
the form v : exp. Adds and deletes are, as usual, proposi- will stop – since the effect v := v−2 is guarded by the condi-
tion sets. Preconditions prea and effect conditions cone are tion v ≥ 2, the value v = −2isnot inserted into D (v).
conjunctions of propositions and numeric constraints. The                                      3
semantics are deﬁned in the obvious standard way.       The NRPG is admissible, i.e., every value reachable for
                                                      a variable v within t steps is guaranteed to be contained in
     =      =          ∈      ( ) = { ( )}
1. t : 0, P0 : I, for all v V: D0 v : I v             Dt (v). However, the algorithm is exponential in the arity –
2. while t < b do                                     the number of variables mentioned by – conjunctions of pre-
3.   At := {a | a ∈ A,(Pt ,Dt |X ) |= prea[X]}        conditions, effect conditions, and effect expressions: if the
4.   Et := {e |∃a ∈ At : e ∈ Ea,(Pt ,Dt |X ) |= cone[X]} maximum such arity is k, and the largest involved variable do-
5.   Pt+1 := Pt ∪{p |∃e ∈ Et : p ∈ adde}              main has size m, then the number of vectors to be considered
                                                                         k
6.   for all v ∈ V: Dt+1(v) := Dt (v) ∪{c |           is bounded only by m . Hoffmann [2003] avoids this blow-
                                                                                                      ( )
7.     ∃a ∈ At ,e ∈ Ea ∩ Et ,(v := exp[X]) ∈ e,c¯ ∈ Dt |X∪Y : up by keeping only the max and min value of each Dt v ,
8.     c = exp(c¯|X ),(Pt ,c¯|Y ) |=(pre(a) ∧ con(e))[Y]} and accordingly approximating the satisfaction of (linear) nu-
9. endwhile                                           meric constraints. Kupferschmid et al [2006] largely avoid
Figure 1: The numeric relaxed planning graph (NRPG) algo- the blow-up by treating every numeric constraint in separate
rithm, approximating reachable variable domains.      rather than addressing conjunctions, thus potentially decreas-
                                                      ing the above k a lot.4 Our rationale here is that: 1. In dif-
  Pseudo code for the NRPG is shown in Figure 1. The al- ference to these works we need to compute the NRPG only
gorithm keeps track of sets Pt of reached propositions, and of once, rather than in every state of a forward search. 2. The
sets Dt (x) of reached values (the reached variable domains), arity of numeric constraints, and even conjunctions of them,
at time steps t. Note the slight abuse of notation for I in line tends to be small in many planning domains – e.g., express-
                                                      ing constraints on resource availability usually involves only
  2Implementing and evaluating a planner using method (A) is fu-
ture work.                                               4Another difference to both Hoffmann [2003]’s and Kupfer-
  3The heuristic planners employ very greedy searches, which do schmid et al [2006]’s algorithms lies in the “guarding” of value in-
not work well when resources are tight. More in Section 4. sertions as described above: this is a new technique.

                                                 IJCAI07
                                                  1919a single variable. Indeed, in our experiments we did not ﬁnd Note here that this speciﬁcation makes use of the NRPG,
a single domain where this potential blow-up was a problem. in the deﬁnition of the set of decision variables. This corre-
  Another potential blow-up turned out to be more severe: sponds to our current implementation. However, since one
the size of the domain of a variable v grows exponentially in could easily deﬁne an SMT encoding that does not use the
t if every sequence of actions results in a different value for NRPG, the runtime for building the NRPG is not included
v. This happens in one of our test domains, where v is a re- into the NumReach/SMT runtimes in our experiments.
source, and every action using the resource has a random ﬂoat For NumReach/SAT, the NRPG is essential (and its run-
cost. A remedy to this would be to give up on admissibility time is, of course, included). The encoding is identical to the
of the NRPG (and, with that, give up plan optimality), and above, except for the treatment of numeric variables. Pre-
try greedy approximations of variable domains instead. One cisely, instead of the vt variables, we now have one separate
could, for example, build a non-numeric planning graph ﬁrst (Boolean) decision variable (v = c)t for all t, v,andc ∈ Dt (v).
and then build the variable domains only for a seemingly rel- We further have, for all t, one decision variable cstrt for every
evant subset of the actions (e.g., a relaxed plan). We leave numeric constraint (every different cstr =(exp1  exp2)) oc-
this topic open for future work. Herein we show that, in 5 out curing in the task. Finally we have, for all t, one decision vari-
of 6 numeric domains from the international planning com- able cstr-¯ct for every cstr[X] and every value tuplec ¯ ∈ Dt |X
petition, the problem does not occur: if the granularity of nu- that satisﬁes cstr. The intended behavior is that cstr-¯ct is true
meric effects is less than that of random ﬂoats, many action iff the values it speciﬁes are true, and that cstrt is true iff one
sequences result in the same value.                   of its value tuples is true. We ensure this behavior with the
  We ﬁnally remark that one could also insert more intelli- following additional clauses:
gence into the NRPG, to prune non-reachable variable val- • Constraints: For cstr[X], cstrt is equivalent to the dis-
ues. For example, an extension of Graphplan mutex reason- junction of all cstr-¯ct wherec ¯ ∈ Dt |X satisﬁes cstr.
   [                  ]
ing Blum and Furst, 1997 might turn out to be beneﬁcial in • Value tuples: For cstr[X], each ctr-¯c is equivalent to
some domains. We leave this open for future work.                                         t
                                                          the conjunction of (x1 = c1)t ,...,(xk = ck)t , where X =
                                                          {x1,...,xk} andc ¯ =(c1,...,ck).
3  SAT and SMT Encodings                              With this, the “conditions” clauses and the “actions and ef-
We ﬁrst describe the SMT  encoding underlying Num-    fects” clauses translate effortlessly, since we have a decision
Reach/SMT, since that encoding is simpler. We then ex- variable for every numeric constraint occuring in a precon-
plain how to obtain the SAT encoding underlying Num-  dition or an effect condition. We can use these variables
Reach/SAT. The SMT encoding makes use of decision vari- just like the variables for propositions. Similarly, the frame
ables for propositions, numeric variables, actions, and effects, clauses for numeric values now look almost like those for
at time steps. Precisely, there are the decision variables: pt propositions, for example {et ,¬(v = 4)t ,(v = 4)t+1} –ife
for all 0 ≤ t ≤ b and p ∈ Pt ; vt for all 0 ≤ t ≤ b and v ∈ V; is not applied, and v = 4att, then v = 4att +1. The only as-
at for all 0 ≤ t < b and a ∈ At ; and et for all 0 ≤ t < b and pect that becomes somewhat complicated are the “effect state
e ∈ Et . All variables except the xt are Boolean. There are the change” clauses for numeric variables. What we say is, for
following clauses (illustrated with Example 1):       every numeric effect v := exp[X] of effect e ∈ E(a), and for
  • Initial state: Specify the initial values of propositions every tuple (x1 = c1,...,xk = ck) in X that complies with at
                                                                                   ( )∧   ( )
    and numeric variables. For example, {v0 = 4}.     least one tuple in Dt satisfying pre a con e , either e is not
  •                                                   applied, or one of (xi = ci)t is false, or (x = exp(c¯))t+1 is true.
    Conditions: An action at t implies its preconditions at t.    {¬ ,¬(  =  ) ,( = )   }
    An effect at t implies its conditions at t. For example, For example, et v 4 t v 2 t+1 .
    {¬et ,vt ≥ 2}.
  • Actions and effects: An effect at t implies the corre- 4 Experimental Results
    sponding action at t. An action at t implies, for each The experiments were run on a cluster of machines, each with
    effect e, that either e occurs or one of e’s conditions is 2GByte main memory, running two Pentium III processors at
    false. For example, {¬at ,¬vt ≥ 2,et }.           1GHz. We applied a memory cutoff of 1GByte in each run.
  • Effect state change: An effect at t implies its adds and Time-out was either 10000 seconds or 1000 seconds. Num-
    (negated) deletes at t +1, and implies its numeric effects Reach/SAT and NumReach/SMT are implemented in C. We
                                                      compare to Metric-FF, LPG, and SGPlan. We do not com-
    between t and t + 1. For example, {−et ,vt+1 = vt − 2}.
                                                      pare to the SMT-based planners LPSAT and TM-LPSAT. LP-
  • Frame axioms: Any proposition that is true at t stays
           +                                          SAT is outdated; in particular, it does not parse PDDL and we
    true at t 1 unless it is deleted. Any proposition that would have to translate all our instances into its input format.
    is false at t stays false at t + 1 unless it is added. Any
                                          +           We do not compare to TM-LPSAT since, though contacting
    numeric variable has the same value at t and t 1 unless the authors, we did not manage to obtain an executable.
    it is affected. For example, {vt+1 = vt ,et }.
  • Goal: the goal condition is true at time b.       4.1  Competition Examples
  • Mutex: Interfering actions and effects do not occur in the We ﬁrst consider numeric domains run in the international
    same step. Actions/effects interfere if they harm each planning competition. Precisely, we consider the numeric do-
    other’s preconditions/conditions/adds, or if they affect mains run in the 2002 competition. The reason why we do
    the same numeric variable.                        not run domains from 2004 or 2006 is that, since 2002, the

                                                 IJCAI07
                                                  1920      Instance  SAT    SMT    FF  SGPlan LPG          ily many different action costs? To explore this topic further,
      Depots 10 87.8  672.2  0.1    0.1   0.2
      Depots 13 35.6  245.0  0.1    0.1   0.3         in Section 4.2 we run an experiment explicitly scaling the size
      Depots 14 1083.7   –   0.5    0.5   0.7         of the set of numbers from which action costs are drawn.
      Depots 16 30.0  470.9  0.2    0.2   0.3           Each competition test suit contains 20 instances; every in-
      Depots 17 81.1     –   1.1    1.1   0.9         stance solved by NumReach/SMT was also solved by Num-
      Settlers 1 18.6 2042.8 8.5    0.4   6.5
      Settlers 2 1.6   53.5  0.1    0.4   0.4         Reach/SAT. For Depots and Zenotravel, Table 1 shows data
      Settlers 3  –      –   59.3   0.5   1.3         for the 5 largest instances solved by NumReach/SAT. For
      Settlers 4 22.6 775.2 163.4   0.7   0.7         Settlers, we show the 7 smallest instances, which contain
      Settlers 5 1480.7  –   1.1    1.0   1.5         everything solved by NumReach/SAT and Metric-FF (even
      Settlers 6  –      –   19.2   0.8   2.3
      Settlers 7  –      –     –    1.4  33.7         the small Settlers instances are comparatively large, requir-
      Zeno 8     8.5   26.0  0.0    0.0   0.0         ing plans with several dozen steps). For Rovers, since we
      Zeno 9    18.1  299.3  0.0    0.0   0.1         consider that particularly interesting, we show all instances
      Zeno 10   126.1 1397.8 0.1    0.1   0.1         except the smallest ones. From a quick glance, one sees that
      Zeno 11   85.7  120.2  0.1    0.1   0.1
      Zeno 12   480.7 6585.8 0.1    0.1  0.10         NumReach/SAT convincingly outperforms NumReach/SMT in
      Rovers 8   3.7   59.2  0.1   442.7  0.0         all these domains. This underlines the merits of our approach
      Rovers 9  156.9    –     –     –    0.2         quite impressively. For the sub-optimal planners, neither of
      Rovers 10 70.9  455.4  0.1    0.1   0.1         Depots, Settlers, and Zenotravel constitutes much of a prob-
      Rovers 11 43.0  981.4  6.6    6.3   0.3
      Rovers 12  1.9   33.5  0.1    0.1   0.3         lem. The single exception is Metric-FF in Settlers, which is
      Rovers 13 503.5    –     –  1945.7  1.2         only marginally faster than NumReach/SAT. In Rovers, how-
      Rovers 14 20.3  402.7    –     –    0.7         ever, NumReach/SAT outperforms not only NumReach/SMT
      Rovers 15 104.7 2860.3   –    0.1  63.3                                                           5
      Rovers 16 352.7    –     –  1222.5 10.8         but also Metric-FF and SGPlan, being beat only by LPG.
      Rovers 17 809.9    –     –     –   126.8        This is due to the nature of energy consumption and recharge
      Rovers 18 77.9     –     –     –   14.3         in this domain: to recharge, one has to ﬁrst reach a sunny spot.
      Rovers 19 MEM      –     –     –    0.8
      Rovers 20 MEM      –     –     –     –          Metric-FF and SGPlan presumably spend excessive time in
                                                      large dead ends where there is not even enough energy left
Table 1: Runtime results in seconds, in four of the six to reach such a spot. LPG’s search has a more stochastic re-
2002 competition domains (see text). Dashes mean time-out starting nature, which is less affected by this. In the next sec-
(10000 seconds), MEM out of memory (1GByte). Some do- tion we run an experiment explicitly scaling the constrained-
main and planner names abbreviated as obvious.        ness of resources.

focus of the competition has shifted away from numeric plan- 4.2 Transport
ning (though as we will see that is far from being “solved”). We constructed a simple transportation domain, called Trans-
The 2002 numeric domains are thus still the main benchmark port, to run some targeted experiments. A truck moves in a
for this context. They are named Depots, Driverlog, Rovers, weighted graph. A set of packages must be transported be-
Satellite, Settlers, and Zenotravel. Depots is a combination tween nodes. Actions move along edges, and load/unload
of logistics and blocksworld (with, e.g., numeric restrictions packages. Each edge costs its weight in fuel. There is no
on the load status of trucks). Driverlog has trucks that need refuelling, so once the truck ran out of fuel it’s “game over”.6
drivers; the numeric variables (distances walked and driven) While this domain is simplistic, we believe it serves well as
are mentioned only in the optimization metric. Rovers is an abstract model of the relevant issues in planning with re-
about gathering rock/soil samples and images, with energy sources. In particular, we can scale the instances on variable
usage and a recharge operator that can be applied only in domain size and on resource constrainedness, as follows. Our
“sunny spots”. Satellite is about gathering images, also with instance generator takes the parameters N, P, M, and C. First
energy usage (no recharge). Zenotravel is a simple logistics- a random connected (undirected) graph with N nodes is cre-
type problem with fuel usage and a refuel operator that can ated. Then P packages are added, with random origins and
be applied anywhere anytime. Table 1 shows our data.  destinations. The edge weights are uniformly drawn from the
  Driverlog is left out of Table 1 since all tested planners set {1,2,...,M}. Then a domain-speciﬁc branch-and-bound
ignore the optimization metric – and with it the numeric vari- procedure, which we developed especially for this purpose,
ables – anyway. Satellite is left out of the table because in this computes the minimum amount of fuel, min f uel, needed to
domain our approach is trivially nonsense: any “satellite” can solve the task. The initial fuel supply of the truck is set
turn between any two “directions”; doing so costs the respec- to C ∗ min f uel. This way, the size of the reachable vari-
tive “slew time” in energy; in the competition instances, the able domains can be controlled by M, and the resource con-
slew times are assigned basically as random ﬂoats. Because strainedness can be controlled by how close C is to 1.0.
of the latter, every sequence of turning actions has a differ-
                                                         5In instances 19 and 20, NumReach/SAT’s CNFs become too
rent summed up cost, yielding a different possible numeric large to ﬁt into memory (see also the next section).
value. So the reachable variable domains grow exponentially 6We consider a single truck rather than multiple trucks for the
in the depth of the NRPG, which exhausts memory even in the sake of simplicity. Note that this puts our own SAT-based approach
smallest instance of the competition suite. We ﬁnd it doubt- at a disadvantage vs. the heuristic planners: SAT-based planners are
ful whether such a scenario (random ﬂoat costs) makes much well known to work much better when there is a lot of parallelism,
sense – why would one need to distinguish between arbitrar- reducing the number of time steps that must be considered.

                                                 IJCAI07
                                                  1921     250                                                   10000                                    100

                                                                                                    90

     200                                                    1000                                    80

                                                                                                    70

     150                                                    100                                     60

                                                                                                    50
                                                                                                      solved  %

   runtime  (sec.)  100                                  runtime  (sec.)  10                        40

                                                                                                    30

                                                               NumReach/SAT
     50                                                      1      FF                              20
                                                                   LPG
                                                                  SGPlan
                                                                 FF-solved                          10
                                                                 LPG-solved
                                                               SGPlan-solved
      0                                                      0.1                                    0
       5 10  25  50  75   100  125   150  175  200            1   1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9  2
                          M                                                     C
         Figure 2: Scaling variable domain size.             Figure 3: Scaling resource constrainedness.
  In our ﬁrst experiment, we aim to see how variable domain the heuristic planners’ runtime curves, as we move towards
size affects the planners, so we scale M. We keep N and P C = 1.0, is just an artefact of the runtime cutoff. The sharp
ﬁxed to 7, which is challenging but feasible. We ﬁx C = 1.1, drops in solution percentage more reliably reveal the main
which is relevant since, as we shall see, in this region the message of Figure 3: heuristic planners are efﬁcient when re-
SAT-based approach is more efﬁcient than all state-of-the-art sources are plenty, but they tend to fail when resources are
heuristic planners. Runtime plots for NumReach/SAT and scarce. Ours is the ﬁrst experiment making this important
NumReach/SMT are in Figure 2; each data point is the mean point absolutely clear. Even though NumReach/SAT is opti-
value of 100 instances. We see that NumReach/SAT has a mal, it outperforms the heuristic planners. This inverts (al-
strong advantage with low M; as expected it gets worse with most) every result of the planning competitions since 2000.
growing M, while NumReach/SMT reacts only very slightly Note that Transport is not an awkward artiﬁcial problem, but
to the value of M.                                    a natural and relevant application of planning.
  We ran another experiment where we scaled M further,
over M = 300,...,1000. As expected, NumReach/SMT’s    4.3  Jugs-and-Water
behavior does not change much, while NumReach/SAT de- In the Jugs-and-Water domain, one has a set of jugs of varying
grades further. With a time-out of 1000 seconds, Num- sizes, and one wants to achieve a given ﬁll status for all the
Reach/SAT’s solution percentage as we increase M in steps of jugs. Actions ﬁll or empty a jug, or pour the content of one
100 is 94, 81, 50, 48, 30, 23, 18, 10. We remark that the lim- jug into another one. Thus, in this domain, numeric variables
iting factor here is neither NRPG building nor CNF building (ﬁll status of jugs) are not resources but constitute highly in-
nor even SAT reasoning: the size of the CNFs is what makes teracting phenomena, perhaps similar to Rubic’s Cube or so,
the solution rate drop. As a rule of thumb, until around 6 from the “point of view” of a general purpose solver. We
million clauses NumReach/SAT beats NumReach/SMT, be-  obtained random instances with N jugs and M maximum jug
tween 6 and 10 million clauses NumReach/SMT beats Num- size by choosing jug size uniformly from {1,2,...,M}, and
Reach/SAT, and after that, which in our experiment here hap- then using a repeated greatest common divisor computation
pens starting with M = 300, the propositional CNFs don’t ﬁt to obtain solvable goals.
into 1GByte memory any longer. Note that this provides a In some way, M here corresponds to the M parameter of
simple rule to automatically choose between NumReach/SAT transport: it scales the possible variable value ranges. How-
and NumReach/SMT: just compute the number of clauses in ever, very much unlike Transport, in Jugs-and-Water M has a
the propositional CNF, and apply a threshhold.        huge effect on instance hardness. The larger M is, the longer
  We emphasize that in the competition domains,Table 1, the will the plan typically be, making it much harder to ﬁnd. Ta-
advantage of NumReach/SAT over NumReach/SMT is much   ble 2 shows results scaling N and M simultaneously. For
larger than even for M = 5 in Figure 2. Presumably, Num- readability, we only show the solution rates. We could not
Reach/SMT has more trouble than NumReach/SAT with the run LPG since that cannot handle conditional effects (of the
mix of planning aspects in these domains – remember that action pouring the content of one jug into another). Num-
Transport is very basic.                              Reach/SAT vastly outperforms NumReach/SMT. The same
  The experiment shown in Figure 3 scales C between 1.0 goes for Metric-FF, giving another example of the unusual
and 2.0. N and P are ﬁxed to 8, M is ﬁxed to 25. The left dominance of an optimal over a sub-optimal planner. It is
hand side y axis is log-scaled runtime. Each data point is the unclear to us what the reason for SGPlan’s efﬁciency is.
average over 100 instances, where time-out is 10000 seconds,
which is inserted into the average computation in unsolved 4.4 Model Checking
cases. To complement this, the right hand side y axis shows To point out that our new method might make sense in some
the percentage of solved instances. NumReach/SAT’s curve cases of model checking as well, we have run a few prelim-
is the horizontal line; all instances are solved, so no solution inary experiments. We modelled some model checking toy
percentage is shown. Note that the seemingly linear nature of examples in PDDL. Many of those examples make use of

                                                 IJCAI07
                                                  1922