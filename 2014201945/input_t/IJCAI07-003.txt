                               The Logic behind Weighted CSP∗

         Carlos Ansotegui´                Mar´ıa Luisa Bonet         Jordi Levy    and   Felip Manya`
             DIEI, UdL                         LSI, UPC                         IIIA, CSIC
     Jaume II 69, Lleida, Spain             Barcelona, Spain          Campus UAB, Bellaterra, Spain


                    Abstract                          underlying logic of WCSP. First, we deﬁne an encoding,
                                                      called signed encoding, that transforms any WCSP instance
    We deﬁne a translation from Weighted CSP to       to a Signed Max-SAT instance, where Signed Max-SAT is
    signed Max-SAT, and a complete resolution-style   the Max-SAT problem of the multiple-valued clausal forms
    calculus for solving signed Max-SAT. Based on     known as Signed CNF formulas (see [Ans´otegui and Many`a,
    these results, we then describe an original exact al- 2003] and references therein). Second, we deﬁne a complete
    gorithm for solving Weighted CSP. Finally, we de- resolution calculus for solving Signed Max-SAT. Third, we
    ﬁne several derived rules and prove that they en- devise an exact algorithm for solving WCSP from the com-
    force the main soft arc consistency deﬁned in the pleteness proof of the resolution calculus. Fourth, we deﬁne
    literature when applied to Weighted CSP instances. several sound inference rules for Signed Max-SAT that en-
                                                      force some known arc consistency properties when applied to
1  Introduction                                       the signed encoding of any binary WCSP instance.
                                                        The structure of the paper is as follows. Section 2 contains
The Weighted Constraint Satisfaction Problem (WCSP) is a preliminary deﬁnitions and the signed encoding. Section 3
well known soft constraint framework for modelling over- deﬁnes the inference rule for signed Max-SAT and proves its
constrained problems with practical applications in domains soundness and completeness. Section 4 describes an exact
such as resource allocation, combinatorial auctions and bioin- algorithm for solving Weighted CSP. Section 5 deﬁnes four
formatics. WCSP is an optimization version of the CSP derived rules that enforce soft local consistency properties.
framework in which constraints are extended by associating Finally, Section 6 presents the conclusions of our work.
costs to tuples. Solving a WCSP instance, which is NP-hard,
consists in ﬁnding a complete assignment of minimal cost. 2 Preliminaries
  Global consistency WCSP algorithms such as Bucket
Elimination [Dechter, 1999] solve WCSP instances without Deﬁnition 1 A truth value set,ordomain, N is a non-empty
search. They obtain an optimal solution by applying, to ﬁnite set {i1,i2,...,in} where n denotes its cardinality. A
the original instance, transformations that preserve cost dis- sign is a subset S ⊆ N of truth values. A signed literal is
tributions. On the other hand, WCSP Branch and Bound  an expression of the form S:p,whereS is a sign and p is a
(BnB) based algorithms such as PFC [Freuder and Wallace, propositional variable. The complement of a signed literal l
1992], PFC-MRDAC   [Larrosa and Meseguer, 1996],Rus-  of the form S:p, denoted by l,isS:p =(N \ S):p.Asigned
sian Doll Search [Verfaillie et al., 1996],MAC∗ [Larrosa clause is a disjunction of signed literals. A signed CNF for-
and Schiex, 2004], MFDAC∗ [Larrosa and Schiex, 2003] and mula is a multiset of signed clauses.
MEDAC∗   [de Givry et al., 2005] perform a systematic search
                                                      Deﬁnition 2 An assignment for a signed CNF formula is a
in the space of all possible assignments. They differ in the
                                                      mapping that assigns to every propositional variable an ele-
method of computing a lower bound at each node of the proof
                                                      ment of the truth value set. An assignment I satisﬁes a signed
tree to prune some parts of the search space. Modern al-
                    ∗        ∗            ∗           literal S:p iff I(p) ∈ S, satisﬁes a signed clause C iff it sat-
gorithms such as MAC , MFDAC   and MEDAC    enforce
                                                      isﬁes at least one of the signed literals in C, and satisﬁes a
some extension of Arc Consistency (AC) to WCSP —Soft
       ∗                         ∗                    signed CNF formula Γ iff it satisﬁes all clauses in Γ. A signed
AC (AC  ), Full Directional AC (FDAC ) or Existential Di-
                 ∗                                    CNF formula is satisﬁable iff it is satisﬁed by at least one as-
rectional AC (EDAC )— when computing that lower bound.
                                                      signment; otherwise it is unsatisﬁable.
  In this paper we relate ideas from three different re-
search communities —Multiple-Valued Logic, Satisﬁability Deﬁnition 3 The Signed Max-SAT problem for a signed
and Constraint Processing— with the aim of describing the CNF formula consists in ﬁnding an assignment that mini-
                                                      mizes the number of falsiﬁed signed clauses.
  ∗This research was founded by the MEC research projects
iDEAS (TIN2004-04343), Mulog (TIN2004-07933-C03-01/03) and Deﬁnition 4 A constraint satisfaction problem (CSP) in-
SofSAT (TIC2003-00950), and the program Ram´on y Cajal. stance is deﬁned as a triple X, D, C,whereX  =

                                                IJCAI-07
                                                   32{x1,...,xn} is a set of variables, D = {d(x1),...,d(xn)}
                                                          x1            x2          1:  {a}:x
is a set of domains containing the values the variables may                                  1
                                                                                    2:  {a}:x1
take, and C = {C1,...,Cm} is a set of constraints. Each
                                                       a  2             0   a       3:  {b}:x
constraint Ci = Si,Ri is deﬁned as a relation Ri over a                                    1
                S = {x  ,...,x  }                      b                    b       4:  {b}:x
subset of variables i  i1     ik , called the constraint  2      1      0                    1
                                                                 1
scope. The relation Ri may be represented extensionally as a     x3                 5:  {c}:x1
                          d(x  ) ×···×d(x   )          c  1             0   c
subset of the Cartesian product i1        ik .                       1              6:  {c}:x1 ∨ {a}:x2
                                                                    2
                                                              a  0                  7:  {c}:x1 ∨ {b}:x2
Deﬁnition 5 An assignment v for a CSP instance X, D, C            1
                                                                                    8:  {a}:x3 ∨ {c}:x2
is a mapping that assigns to every variable xi ∈ X an ele-    b  0
ment v(xi) ∈ d(xi). An assignment v satisﬁes a constraint                           9:  {b}:x3 ∨ {c}:x2
{x ,...,x  },R ∈C     v(x ),...,v(x )∈R                   c  0
   i1     ik   i     iff   i1        ik      i.                                    10 : {b}:x3 ∨ {c}:x2
                                                                                   11 : {c}:x  ∨ {c}:x
Deﬁnition 6 A Weighted CSP (WCSP) instance is deﬁned as                                      3       2
atripleX, D, C,whereX  and D  are variables and do-
mains as in CSP. A constraint Ci is now deﬁned as a pair
S ,f       S  = {x  ,...,x }                            Figure 1: A WCSP instance and its signed encoding
  i i ,where  i      i1     ik is the constraint scope
   f  : d(x ) ×···×d(x   ) → N
and i     i1           ik      is a cost function.The
                 C                        v
cost of a constraint i induced by an assignment in which Example 10 Figure 1 shows a WCSP instance X, D, C
             S  = {x  ,...,x }           b ,...,b
the variables of i   i1     ik take values i1    ik   and its signed encoding. The WCSP has the set of variables
  f (b ,...,b )
is i i1     ik . An optimal solution to a WCSP instance X = {x1,x2,x3} with domains d(x1)=d(x2)=d(x3)=
is a complete assignment in which the sum of the costs of the {a, b, c}. There is a binary constraint between variables x1
constraints is minimal.                               and x2, a binary constraint between variables x2 and x3,and
Deﬁnition 7 The Weighted Constraint Satisfaction Problem a unary constraint for every variable. Unary costs are de-
(WCSP) for a WCSP instance consists in ﬁnding an optimal picted inside small circles. Binary costs are depicted as la-
solution for that instance.                           beled edges connecting the corresponding pair of values. The
                                                      label of each edge is the corresponding cost. If two values
Deﬁnition 8 The signed encoding of a WCSP  instance
X, D, C                                             are not connected, the binary cost between them is 0. In this
         is the signed CNF formula over the domain   instance, the optimal cost is 2.
N  =         d(xi)
        xi∈D       that contains for every possible tu-
   b ,...,b  ∈d(x    ) × ... × d(x )
ple  i1     ik       i1            ik  of every con-
      {x ,...,x  },f ∈C    f (b ,...,b )
straint  i1     ik   i      , i i1     ik  copies of  3   The Inference Rule. Soundness and
the signed clause:                                        Completeness
             {b  }:x  ∨···∨{b   }:x .
               i1   i1        ik   ik                 We deﬁne a resolution rule for solving signed Max-SAT,
                                                      called Signed Max-SAT Resolution, and prove its soundness
  An alternative encoding is to consider signed clauses with and completeness. This rule was inspired by previous works
weights instead of allowing multiple copies of a clause. For [Larrosa and Heras, 2005; Bonet et al., 2006] for Max-SAT.
the sake of clarity we use unweighted clauses. Neverthe- The completeness proof for signed CNF formulas is techni-
less, any efﬁcient implementation of the algorithms proposed cally more involved than the proof for Boolean CNF formu-
should deal with weighted clauses. The extension of our the- las.
oretical results to weighted clauses is straightforward.
                                                      Deﬁnition 11 The Signed Max-SAT Resolution rule is de-
                                   P
Proposition 9 Solving a WCSP instance is equivalent to ﬁned as follows
solving the Signed Max-SAT problem of its signed encoding;
i.e., the optimal cost of P coincides with the minimal number S:x ∨ a1 ∨ ...∨ as
                                                               
of unsatisﬁed signed clauses of the signed encoding of P .   S :x ∨ b1 ∨ ...∨ bt
                                                                  
                                                             S ∩ S :x ∨ a1 ∨ ...∨ as ∨ b1 ∨ ...∨ bt
                                                                  
PROOF: For every combination of values to the variables of   S ∪ S :x ∨ a1 ∨ ...∨ as ∨ b1 ∨ ...∨ bt
                     C   = S ,f 
the scope of a constraint i  i  i , the signed encod-        S:x ∨ a1 ∨ ...∨ as ∨ b1
ing contains as many clauses as the cost associated with that S:x ∨ a1 ∨ ...∨ as ∨ b1 ∨ b2
combination. If an assignment of the signed encoding re-     ···
stricted to the variables of Si coincides with a combination
                                                             S:x ∨ a1 ∨ ...∨ as ∨ b1 ∨ ...∨ bt−1 ∨ bt
of Ci with cost 0, then all the clauses of the signed encoding 
                                                             S :x ∨ b1 ∨ ...∨ bt ∨ a1
introduced by Ci are satisﬁed because there is no clause for-  
                                                             S :x ∨ b1 ∨ ...∨ bt ∨ a1 ∨ a2
bidding that combination. If an assignment of the signed en- ···
coding restricted to the variables of Si coincides with a com- S :x ∨ b ∨ ...∨ b ∨ a ∨ ...∨ a ∨ a
       b ,...,b    C          u       u>0                         1        t   1        s−1    s
bination i1     ik of  i with cost ,where    , then,
by construction of the signed encoding, only the u clauses of This inference rule is applied to multisets of clauses, and re-
       {b  }:x  ∨···∨{b   }:x
the form i1   i1         ik  ik are falsiﬁed among the places the premises of the rule by its conclusions.
clauses introduced by Ci.                             We say that the rule resolves the variable x.

                                                IJCAI-07
                                                   33The tautologies concluded by the rule like N :x ∨ A are re- of a multiset of clauses is the sum of scores of the clauses
moved from the resulting multiset. Also we substitute clauses contained in it.
   S:x∨S :x∨A    (S ∪ S):x∨A              ∅:x∨A
like           by             , and clauses like                                          C            x
by A.                                                 Lemma 15   For every multiset of clauses and variable ,
                                                      there exists a multiset C such that C is a saturation of C
  We would like to emphasize that the rule does not add the w.r.t. x.
conclusions to the premises. It replaces the clauses in the
premises by the clauses in the conclusions.           PROOF: We proceed by applying nondeterministically the in-
Deﬁnition 12 We write CDwhen the multiset of clauses D ference rule resolving x, until we obtain a saturated multiset.
can be obtained from the multiset C applying the rule ﬁnitely We only need to prove that this process terminates in ﬁnitely
                         
many times. We write C x C when this sequence of appli- many inference steps, i.e that there does not exist inﬁnite se-
cations only resolves the variable x.                 quences C = C0 C1    ..., where at every inference we
                                                      resolve the variable x and none of the sets Ci are saturated.
  In the context of Max-SAT problems, an inference rule is Let M be the score of C.
sound iff the number of falsiﬁed clauses in the premises is Let us partition the multiset C of clauses into n multisets
equal to the number of falsiﬁed clauses in the conclusions for (n is the size of the domain), {B0,B1,...,Bn−1},whereBi
any assignment.                                       contains the clauses where the cardinality of the support of
Theorem 13 (Soundness) The signed Max-SAT resolution  x is i. Notice that B0 is the multiset of clauses that do not
rule is sound.                                        contain the variable x. Let us denote by s(Bi) the score of
                                                      the multiset Bi.
PROOF:LetI   be an arbitrary assignment. There are four We will look at this n multisets as a word of length n and
cases:                                                base M+1. So our multiset will be represented by the number
1. If I falsiﬁes the two premises, then I also falsiﬁes the ﬁrst s(B0) s(B1) ··· s(Bn−1),takings(B0) as the most signiﬁ-
two conclusions, and only them.                       cant digit. Since Bi is a subset of C,fori =0,...,n− 1,
2. If I satisﬁes the two premises, then it also trivially satisﬁes s(Bi) ≤ M.
the last s+t clauses of the conclusion, because they are either When we apply our inference rule, we take two clauses,
implied by one or the other premise. The second clause of the say one from Bi and one from Bj and substitute them by a
conclusion is implied by each one of the premises. Therefore, set of clauses that we will distribute among the different Bk’s.
it is also satisﬁed by I.                             Now we have a new multiset of clauses and by the soundness
  The ﬁrst clause of the conclusion is not implied by the of our rule the score of the new multiset is the same. But,
premises. However, if both premises are satisﬁed then we if we again look at the multiset as a number in base M,the
have two cases. If S:x and S :x are both satisﬁed, then so number will be different. We will argue that for each infer-
         
it is (S ∩ S ):x. Otherwise, either some ai’s or some bj’s is ence step, the number increases. Say that the clauses we do
                                                                                     
satisﬁed, thus also the ﬁrst clause of the conclusion. inference are S:x ∨ A ∈ B|S| and S :x ∨ B ∈ B|S|.Bythe
3. If I satisﬁes the ﬁrst premise, but not the second one, then inference step we remove these clauses and add some clause
the second clause of the conclusion as well as the t following in B|S∩S|, and maybe also some clauses in B|S|, B|S| and
                                                                                                
clauses are satisﬁed, because all them are implied by the ﬁrst B|S∪S|. Since, by deﬁnition of saturation S ∩ S = S and
premise.                                              S ∩ S = S, we know that |S ∩ S| < |S|, |S| < |S ∪ S|,
  For the rest of conclusions, there are two cases: If some hence the digit of B|S∩S| is more signiﬁcant than the dig-
     a                    i                  a
of the i’s is satisﬁed, then let be the index of such .The its of B|S|, B|S| and B|S∪S|. We have to conclude that the
assignment will satisfy the ﬁrst clause of the conclusion and
                                                     new M-base number after the inference step is larger than be-
the last s conclusions, except S :x ∨ b1 ∨ ... ∨ bt ∨ a1 ∨ fore. Since the largest possible number we can obtain is the
...∨ a   ∨ a                                   a
      i−1   i that is falsiﬁed. Otherwise none of the i’s one represented as s(B0)s(B1) ···s(Bn−1)=M0 ···0 the
is satisﬁed, and therefore, S:x is satisﬁed. Hence, the ﬁrst saturation procedure for x has to ﬁnish before M n steps.
conclusion is falsiﬁed, and the last s conclusions are satisﬁed.
    I
4. If satisﬁes the second premise, but not the ﬁrst one, the Lemma 16 Let E be a saturated multiset of clauses w.r.t. x.
situation is analogous to previous case.              Let E be the subset of clauses of E not containing x. Then,
                                                      any assignment I satisfying E (and not assigning x) can be
                              C
Deﬁnition 14 A multiset of clauses is said to be saturated extended to an assignment satisfying E.
w.r.t. x if, for every pair of clauses C1 = S:x ∨ A and C2 =
 
S :x ∨ B of C,                                                                I                  E
                S :y   A     S :y   B         S  ∪    PROOF:Wehavetoextend     to satisfy the whole . In fact
i) there are literals 1 in and 2  in  such that 1     we only need to set the value of x. Let us partition the multiset
S2 = N,or                                                   
                                                   (E−E) (multiset of clauses that contain the variable x)into
ii) S ∩ S = S or S ∩ S = S .                                             
                                                    two multisets: (E−E)T the multiset already satisﬁed by I,
A multiset of clauses C is a saturation of C w.r.t. x if C is (E−E)
             x    C   C    C                  C    and        F the multiset such that the partial assignment
saturated w.r.t. and x  ,i.e.  can be obtained from   I doesn’t satisfy any of the clauses. Our aim is to show that
applying the inference rule resolving x ﬁnitely many times.                                     
                                                      the intersection of all the supports of x in (E−E)F is non-
  We assign to every clause C ascores(C) equal to the num- empty. This way we will extend I by assigning x to a value
ber of assignments to the variables that falsify C. The score in the intersection of all the supports.

                                                IJCAI-07
                                                   34  Since E is saturated, for every pair of clauses C1 = S:x∨A 4 Global Consistency in WCSP
   C  =  S :x ∨ B (E−E)
and  2           in        F either condition i) or ii) of From the proof of Theorem 17, we can extract the following
the deﬁnition happens. Condition i) cannot happen because
                                                     exact algorithm for solving WCSP.
C1 and C2 cannot both be in (E−E)F . Therefore, for ev-
                                                                                 P
ery pair of clauses, C1 = S:x ∨ A and C2 = S :x ∨ B in     input: A WCSP instance
                                                       C  :=               (P )
(E−E)F  , S ∩S = S or S ∩S =  S . Now, we order all the      0   signed encoding
                                                             i := 1  k
supports of x appearing in (E−E)F in decreasing order of   for      to
their cardinality. It is straightforward to see that every support C := saturation(Ci−1,xi)
is contained or equal to its predecessor. Particularly, the last  Ci,Di := partition(C, xi)
support is equal to the intersection of all the supports, and it endfor
is non-empty.                                              m  := |Ck|
                                                           I := ∅
Theorem 17 (Completeness) For any multiset of clauses C,   for i := k downto 1
we have                                                           I := I ∪ [xi → extension(xi,I,Di)]
                 C    ,...,   , D                         output: m, I
                          
                         m                              Given an initial WCSP instance P with k variables, this
                                                      algorithm returns the minimal cost m of P and an optimal
where D is a satisﬁable multiset of clauses, and m is the min-
                                                      solution I.
imum number of unsatisﬁed clauses of C.
                                                        The function saturation(Ci−1,xi) computes a saturation
                                                      of Ci−1 w.r.t. xi applying the resolution rule resolving x until
PROOF:Letx1,...,xn   be any list of the variables of C.
                                                      it gets a saturated set. Lemma 15 ensures that this process
We construct two sequences of multisets C0,...,Cn and
                                                      terminates, in particular that it does not cycle. As we have
D1,...,Dn such that
                                                      already said, the saturation of a multiset is not unique, but
 1. C = C0,                                           the proof of Theorem 17 does not depend on which particular
 2. for i =1,...,n, Ci ∪Di is a saturation of Ci−1 w.r.t. xi, saturation we take.
    and                                                 The function partition(C, xi) computes a partition of C,
                                                      already saturated, into the subset of clauses containing xi and
 3. for i =1,...,n, Ci is a multiset of clauses not contain-
                                                      the subset of clauses not containing xi.
    ing x1,...,xi,andDi is a multiset of clauses containing
                                                        The function extension(xi,I,Di) computes an assign-
    the variable xi.
                                                      ment for xi extending the assignment I, to satisfy the clauses
  By lemma 15, this sequences can effectively be computed: of Di according to Lemma 16. The function ﬁlters all clauses
for i =1,...,n, we saturate Ci−1 w.r.t. xi,andthenwe  of Di that are not satisﬁed by I. Then it computes the inter-
partition the resulting multiset into a subset Di containing xi, section of the supports for xi of all of them, and returns one
and another Ci not containing this variable.          of the values of such an intersection. It returns a value from
  Notice that, since Cn does not contain any variable, it is
                                                              ∩{S | S:x ∨ A ∈  D     I        A}
either the empty multiset ∅, or it only contains (some) empty          i         i and falsiﬁes
clauses { ,..., }.                         
                                       D =   n  D     The argumentation of the proof of Lemma 16 ensures that this
  Now we are going to prove that the multiset i=1 i   intersection is not empty.
is satisﬁable by constructing an assignment satisfying it. For The order on the saturation of the variables can be freely
i =1,...,n,letEi  = Di ∪ ... ∪Dn,andletEn+1   =  ∅.                         x ,...x
             i =1,...,n                               chosen, i.e. the sequence 1  n can be any enumeration
Notice that, for       ,                              of the variables.
 1. the multiset Ei only contains the variables {xi,...,xn}, A similar approach to this algorithm was deﬁned using
                                                                      [           ]
 2. Ei is saturated w.r.t. xi,and                     bucket elimination Dechter, 1999 . Even though both proce-
                                                      dures have the same exponential worst-case complexity, we
    E              E =  D ∪E
 3.  i decomposes as i   i   i+1, where all the clauses believe that our algorithm can give rise to a better perfor-
      D         x           E           x
    of  i contain i and none of i+1 contains i.       mance proﬁle, in the sense that our computation of the joint
  Now,   we  construct a  sequence  of  assignments   operation is incremental.
I1,...,In+1,whereIn+1  is the empty assignment, hence
satisﬁes En+1 = ∅.Now,Ii   is constructed from Ii+1 as 5  Local Consistency in WCSP
follows. Assume by induction hypothesis that Ii+1 satisﬁes
                                                      In WCSP a number of local consistency properties have been
Ei+1.SinceEi is saturated w.r.t. xi, and decomposes into
                                                      proposed. These local properties do not ensure the global
Di and Ei+1, by lemma 16, we can extend Ii+1 with an
                                                      consistency of a set of constraints. However, they can be en-
assignment for xi to obtainIi satisfy Ei. Iterating, we get
                        n                             forced very efﬁciently and used to ﬁnd a lower bound of the
that I1 satisﬁes E1 = D =  Di.
                        i=1                           cost.
  Concluding, since by the soundness of the rule (The-
                                                        In this section we focus on binary WCSP instances as
orem 13) the inference preserves the number of falsiﬁed
                                                      in [Larrosa and Schiex, 2003; de Givry et al., 2005].We
clauses for every assignment, m = |Cn| is the minimum num-
ber of unsatisﬁed clauses of C.                       assume the existence of a unary constraint for every variable
                                                      xi. If no such a constraint is deﬁned, we can always deﬁne

                                                IJCAI-07
                                                   35a dummy constraint as f(ak)=0for every ak ∈ d(xi).We  Rule 3:                  Rule 4:
                                                                                    {i }:x ∨ {j }:y
will use the standard notation for binary WCSP in the liter- i }:x ∨ {j }:y           1       1
      C                                         x          { 1       1              ···
ature: i will denote a unary constraint over a variable i, ···
and Cij will denote a binary constraint between variables xi                        {i }:x ∨ {j }:y
                                                           {i }:x ∨ {j }:y            s       1
and xj; Ci(ak),whereak ∈ d(xi), will denote f(ak),and        s       1              {i   }:x
                                                           {i   }:x                   s+1
Cij (ak,bl),whereak ∈ d(xi) and bl ∈ d(xj ), will denote     s+1                    ···
                                                           ···
f(ak,bk)
        .                                                                           {in}:x
                                                           {in}:x
                                                                                    {j2}:y
Deﬁnition 18 Variable xi is node consistent if there exists a
                                                           {j1}:y                   ···
value ak ∈ d(xi) such that Ci(ak)=0. A WCSP is node
            ∗                                              {is+1}:x ∨ {j2}:y        {jn}:y
consistent (NC ) if every variable is node consistent.     ···
                                                           {i   }:x ∨ {j }:y
Deﬁnition 19 Given a binary constraint Cij ,thevalueb ∈      s+1       n            {i   }:x ∨ {j }:y
                                                           ···                        s+1       2
d(xj ) is a simple support for a ∈ d(xi) if Cij (a, b)=0, and                       ···
               C  (a, b)+C (b)=0                           {i }:x ∨ {j }:y
is a full support if ij   j                                  n       2              {i   }:x ∨ {j }:y
                                                           ···                        s+1       n
                                                                                    ···
Deﬁnition 20 Variable xi is arc consistent if every value  {i }:x ∨ {j }:y
                                                             n       n              {i }:x ∨ {j }:y
a ∈ d(xi) has a simple support in every constraint Cij .A                             n       2
                        ∗                                                           ···
WCSP is arc consistent (AC ) if every variable is node and
arc consistent.                                                                     {in}:x ∨ {jn}:y

Deﬁnition 21 Variable xi is full arc consistent if every value Lemma 24 Star node consistency (NC*) can be enforced ap-
a ∈ d(xi) has a full support in every constraint Cij .AWCSP plying rule 1.
is full arc consistent (FAC∗) if every variable is node and full
arc consistent.                                       PROOF:Sayxi   is a variable of a WCSP that is not star node
                                                      consistent. Then for every j ∈ N, Ci(j) > 0.Letbe
                >
Deﬁnition 22 Let  be a total ordering over the variables w =min{Ci(j) | j ∈ N} and k such that Ci(k)=w.This
                 x
of a WCSP. Variable i is directional arc consistent (DAC) if means that in the corresponding signed encoding we have
          a ∈ d(x )
every value      i has a full support in every constraint Ci(j) copies of {j}:xi,forallj ∈ N. Rule 1 applied to
Cij such that xj >xi.Itisfull directional arc consistent
                                                      the encoding w many times will remove w copies of {j}:xi,
(FDAC) if, in addition, every value a ∈ d(xi) has a simple
                                                      for all j ∈ N, hence all the copies of {k}:xi. Therefore,
support in every constraint Cij such that xj <xi.AWCSP
                                 ∗                    the WCSP equivalent to the new encoding has the star node
is full directional arc consistent (FDAC ) if every variable is
                                                      consistency property of the variable xi.
node and full directional arc consistent.
Deﬁnition 23 Let > be a total ordering over the variables Lemma 25 Arc consistency (AC*) can be enforced applying
of a WCSP. Variable xi is existential arc consistent if there is rule 2.
at least one value a ∈ d(xi) such that Ci(a)=0and has a
                                                                  x
full support in every constraint Cij . A WCSP is existential arc PROOF:Say i is a variable that is not arc consistent with
             ∗                                                           C                  x
consistent (EAC ) if every variable is node and existential arc respect to a constraint ij ,forsomevariable j . This means
                                                                         a  ∈  N                 b ∈  N
consistent. A WCSP is existential directional arc consistent that there is a value such that for all    ,
      ∗           ∗        ∗                          C  (a, b) > 0       w  =min{C    (a, b) | b ∈ N}
(EDAC  )ifitisFDAC  and EAC .                           ij        .Letbe             ij             .The
                                                      constrain Cij will generate among others Cij (a, b) copies of
  In what follows we deﬁne four sound inference rules for {a}:xi ∨ {b}:xj ,foreveryb ∈ N. Applying rule 2 w many
a sublanguage of signed formulas. We just consider clauses times, we substitute these clauses by w copies of {a}:xi and
with at most two literals and whose signs are complements of Cij (a, b) − w copies of {a}:xi ∨ {b}:xj ,foreveryb ∈ N.
singletons. This language captures binary WCSP instances. Since there is one value k such that Cij (a, k) − w =0,this
As we will see bellow, the rules enforce some known local new set of clauses indicates that now variable xi is arc con-
consistency properties. For lack of space we do not show sistent with respect to Cij , for the value a. Arc consistency
how these rules may be derived from the signed Max-SAT for other values would be obtained in the same way.
resolution rule.
  In the next rules we assume that N = {i1,...,in} =    The previous two lemmas where proved for domains of
                                                                [                    ]
{j1,...,jn} and j ∈ N.                                size two in Larrosa and Heras, 2005 .
                                                                                    >
Rule 1:                  Rule 2:                      Lemma 26   Fixed a total ordering on the variables, Di-
                                                      rectional Arc Consistency (DAC) can be enforced from rule 3
                                                                             x>y
          {i1}:x               {i1}:x ∨ {j}:y         applied with the restriction .
           ···                      ···
                                                       ROOF       >
          {in}:x               {in}:x ∨ {j}:y         P     :Let    be a total ordering on the variables. Say
                                                      xi is a variable that is not directional arc consistent with
                                   {j}:y              respect to a restriction Cij for some variable xj where

                                                IJCAI-07
                                                   36