        Data Complexity of Reasoning in Very Expressive Description Logics

          Ullrich Hustadt                     Boris Motik                      Ulrike Sattler
     Dept. of Computer Science       Forschungszentrum Informatik       Dept. of Computer Science
       Univ. of Liverpool, UK         Univ. of Karlsruhe, Germany        Univ. of Manchester, UK
      U.Hustadt@csc.liv.ac.uk                motik@fzi.de                  sattler@cs.man.ac.uk


                    Abstract                          reasoning problems are P-complete in |A|. To develop an
                                                      intuition and to provide a more detailed account of these re-
    Data complexity of reasoning in description logics sults, we compare them with similar results for (variants of)
    (DLs) estimates the performance of reasoning al-  datalog [Dantsin et al., 2001].
    gorithms measured in the size of the ABox only.     Our results are important since they provide a formal justi-
    We show that, even for the very expressive DL     ﬁcation for hoping to provide tractable algorithms for very ex-
    SHIQ, satisﬁability checking is data complete for pressive description logics. Furthermore, Horn-SHIQ sub-
    NP. For applications with large ABoxes, this can  sumes DL-lite [Calvanese et al., 2004], a logic aiming to
    be a more accurate estimate than the usually con- capture most constructs of ER and UML formalisms, while
    sidered combined complexity, which is EXPTIME-    providing polynomial algorithms for satisﬁability checking
    complete. Furthermore, we identify an expressive  and conjunctive query answering (assuming an unbounded
    fragment, Horn-SHIQ, which is data complete for   knowledge base, but a bound on the query size). Horn-
    P, thus being very appealing for practical usage. SHIQ   additionally allows qualiﬁed existential quantiﬁca-
                                                      tion, conditional functionality and role inclusions, while al-
1  Introdcution                                       lowing for a reasoning algorithm that runs in time polynomial
Description logics (DLs) [Baader et al., 2003] are state-of- in the size of data.
                                                           [           ]
the-art knowledge representation formalisms with applica- In Schaerf, 1994 , the complexity of concept subsump-
tions in many areas of computer science. Very expressive DLs tion was contrasted with combined and data complexity of
                                                      instance checking for various fragments of . This work
such as SHIQ  are interesting mainly due to their high ex-                                 ALC
pressivity combined with the clearly deﬁned model-theoretic provides a lower bound for the data complexity of reasoning
semantics and known formal properties, such as the compu- in SHIQ.
tational complexity of reasoning. In particular, the combined
complexity of checking satisﬁability of a SHIQ knowl- 2   Preliminaries
edge base KB is EXPTIME-complete in |KB| [Schild, 1991; Description Logics. Given a set of role names NR, a
                                                                                                       −
Tobies, 2001].                                        SHIQ   role is either some R ∈ NR or an inverse role R
  EXPTIME-completeness is a rather discouraging result for R ∈ NR. A SHIQ  RBox R is a ﬁnite set of role inclu-
since |KB| can be large in practice. However, similar to a sion axioms R ⊑ S and transitivity axioms Trans(R), for R
                                                                                                    −
database, KB consists of a schema part T , called the TBox, and S SHIQ roles. For R ∈ NR, we set Inv(R) = R and
and a data or fact part A, called the ABox. For applications Inv(R−) = R, and assume that R ⊑ S ∈ R (Trans(R) ∈ R)
with a ﬁxed schema but varying data part, data complexity, implies Inv(R) ⊑ Inv(S) ∈ R (Trans(Inv(R)) ∈ R). A role
measured in the size of A only, provides a more precise per- R is said to be simple if Trans(S) ∈/ R, for each S ⊑∗ R,
formance estimate.                                    where ⊑∗ is the reﬂexive-transitive closure of ⊑.
  Here, we assume that the ABox of KB is extensionally  Given a set of concept names NC , the set of SHIQ con-
reduced, i.e. it involves only roles and (possibly negated) cepts is the minimal set such that each A ∈ NC is a SHIQ
atomic concepts. Thus, the terminological knowledge is concept and, for C and D SHIQ concepts, R a role, S a sim-
strictly separated from assertional knowledge, so |A| is the ple role and n a positive integer, then ¬C, C ⊓ D, ∀R.C and
measure of “raw” data. For such a KB, we show that check- ≥ n S.C are also SHIQ concepts. We use ⊤, ⊥, C1 ⊔ C2,
ing KB  satisﬁability is NP-complete in |A|, and that in- ∃R.C, and ≤ n S.C as abbreviations for A ⊔ ¬A, A ⊓ ¬A,
stance checking is co-NP-complete in |A|. Since this might ¬(¬C1 ⊓ ¬C2), ¬∀R.¬C, and ¬(≥ (n + 1) S.C), respec-
still lead to intractability, we identify Horn-SHIQ, a frag- tively. Concepts that are not concept names are called com-
ment of SHIQ analogous to the Horn fragment of ﬁrst-order plex. A literal concept is a possibly negated concept name.
logic. Namely, Horn-SHIQ provides existential and univer- A TBox T is a ﬁnite set of concept inclusion axioms of the
sal quantiﬁers, but does not provide means to express disjunc- form C ⊑ D. An ABox A is a ﬁnite set of axioms C(a),
tive information. We show that, for Horn-SHIQ, the basic R(a, b), and (in)equalities a ≈ b and a 6≈ b. A knowledge    Table 1: Semantics of SHIQ by Mapping to FOL                Table 2: Types of ALCHIQ-clauses
                                                          1  ¬R(x, y) ∨ Inv(R)(y, x)
               Translating Concepts to FOL                2  ¬R(x, y) ∨ S(x, y)
        πy(A, X) = A(X)                                        f
                                                          3  P (x) ∨ R(x, f(x))
    πy(C ⊓ D, X) = πy(C, X) ∧ πy(D, X)
                                                          4  Pf (x) ∨ R(f(x), x)
      πy(¬C, X) = ¬πy(C, X)                                                   Ï
                                                          5  P1(x) ∨ P2(f(x)) ∨ fi(x)≈/6≈fj (x)
    πy(∀R.C, X) = ∀y : R(X, y) → πx(C, y)                                                 Ï
                                                          6  P1 x   P2 g x    P3 f g x      t  / t


  πy(≥ n S.C, X) =                                              ( ) ∨  ( ( )) ∨ ( ( ( ))) ∨  i≈ 6≈ j


                  Î          Î          Î


                                                             where ti and tj are of the form f(g(x)) or x
                                                                                       Ï
       ∃y1, . . . , yn : S(X, yi) ∧ πx(C, yi) ∧ yi 6≈ yj            Ï
                                                          7  P1(x) ∨  ¬R(x, yi) ∨ P2(y) ∨ yi ≈ yj

               Translating Axioms to FOL                                    Ï
                                                          8  R a, b   P t    t  / t
       π(C ⊑ D) = ∀x : πy(C, x) → πy(D, x)                     (   ) ∨ ( ) ∨  i≈ 6≈ j
       π(R ⊑ S) = ∀x, y : R(x, y) → S(x, y)                  where t(i) are a constant b or a functional term fi(a)
     π(Trans(R)) = ∀x, y, z : R(x, y) ∧ R(y, z) → R(x, z)
        π(C(a)) = πy(C, a)                            positive disjunctive datalog program with equality DD(KB)
       π(R(a, b)) = R(a, b)                           which is equisatisﬁable with KB.
         π(a ◦ b) = a ◦ b for ◦ ∈ {≈, 6≈}               A minor obstacle in computing DD(KB) are the transi-
                 Translating KB to FOL                tivity axioms which, in their clausal form, do not contain a


           π(R) = ∀x, y : R(x, y) ↔ R−(y, x)
                              Î
                  Î                                   literal in which all variables of a clause occur. Such clauses
         π(KB) =        π(R) ∧          π(α)
                   R∈NR         α∈T ∪R∪A              are known to be difﬁcult to handle, so KB is preprocessed
  X is a meta variable and is substituted by the actual variable. into an equisatisﬁable ALCHIQ knowledge base Ω(KB).
  πx is obtained from πy by simultaneously substituting in the Roughly speaking, a transitivity axiom Trans(S) is replaced
  deﬁnition x for all y , respectively, and π for π .
           (i)     (i)              y    x            with axioms of the form ∀R.C ⊑ ∀S.(∀S.C), for each R
                                                      with S ⊑∗ R and C a concept occurring in KB. This trans-
base KB is a triple (R, T , A). KB is extensionally reduced formation is polynomial, so in the rest of this paper w.l.o.g.
if all ABox axioms of KB contain only literal concepts. we assume KB to be an ALCHIQ knowledge base.
  The semantics of KB is given by translating it into ﬁrst- The next step is to translate Ω(KB) into clausal ﬁrst-order
order logic by the operator π from Table 1. The main infer- logic. Assuming π is deﬁned as in Table 1, π(Ω(KB)) is
ence problem is checking KB satisﬁability, i.e. determining transformed into a set of clauses Ξ(KB) using structural
if a ﬁrst-order model of π(KB) exists. An individual a is transformation to avoid an exponential blowup [Nonnengart
an instance of a concept C w.r.t. KB if π(KB) |= πy(C, a), and Weidenbach, 2001]. Roughly speaking, the structural
which is the case iff KB ∪ {¬C(a)} is unsatisﬁable.   transformation introduces a new name for each complex sub-
  The logic ALCHIQ  is obtained by disallowing transitivity formula of π(Ω(KB)). A specialized version of the structural
axioms in SHIQ RBoxes, and ALC is obtained by disallow- transformation is presented in detail in Section 4.
ing RBoxes, inverse roles and number restrictions. A logic L A core property of Ξ(KB) is that it only contains clauses
is between logics L1 and L2 if it contains at least the primi- of one of the forms given in Table 2; such clauses are called
tives from L1 and at most the primitives from L2.     ALCHIQ-clauses. For a term t, P(t) denotes a disjunction
  We measure the size of concepts by their length, and as- of the form (¬)P (t) ∨ . . . ∨ (¬)P (t), and P(f(x)) denotes
sume unary coding of numbers, i.e. |≤ n R.C| = n+1+|C|,             1              n
                                                      a disjunction of the form P1(f (x)) ∨ . . . ∨ Pn(f (x)) (no-
and use |R(a, b)| = |(¬)A(a)| = 3.                                              1               m
                                                      tice that this allows each Pi(fi(x)) to contain positive and
                                                      negative literals).
Disjunctive Datalog. A datalog term is a constant or a  Next, the RBox and TBox clauses of Ξ(KB) are saturated
variable, and a datalog atom has the form A(t1, . . . , tn) or by basic superposition [Bachmair et al., 1995; Nieuwenhuis
t1 ≈ t2, where ti are datalog terms. A disjunctive datalog and Rubio, 1995]—a clausal equational theorem proving cal-
program with equality P is a ﬁnite set of rules of the form culus. Due to space limitations, we are unable to present the
A1 ∨ ... ∨ An ← B1, ..., Bm where Ai and Bj are datalog rules of basic superposition; it can be considered to be an op-
atoms. Each rule is required to be safe, i.e. each variable oc- timized version of the well-known paramodulation calculus.
curring in the rule must occur in at least one body atom. A Let Γ be the saturated set of clauses. In this key step, all
fact is a rule with m = 0. For the semantics, we take a rule to non-ground consequences of KB are computed. In [Hustadt
be equivalent to a clause A1 ∨...∨An ∨¬B1 ∨...∨¬Bm. We et al., 2004b], we have shown the following key property:
consider only Herbrand models, and say that a model M of P (♠) an application of a basic superposition inference rule to
is minimal if there is no model M ′ of P such that M ′ ( M. A ALCHIQ-clauses produces an ALCHIQ-clause. The proof
ground literal A is a cautious answer of P (written P |=c A) examines all inference rules and clause types.
if A is true in all minimal models of P . First-order entailment Furthermore, by examining the types of clauses from Ta-
coincides with cautious entailment for positive ground atoms. ble 2, one can show the following property: (♣) for a ﬁnite
                                                      KB, the number of ALCHIQ-clauses unique up to variable
Reducing KB  to Disjunctive Datalog. The results in this renaming is exponential in |KB|. The proof is a straightfor-
paper are based on our algorithm from [Hustadt et al., 2004b]. ward counting exercise since the number of variables and the
For a SHIQ knowledge base KB, this algorithm computes a depth of functional terms in ALCHIQ-clauses are bounded.
                                                        Each inference step can be carried out in polynomial time,so by (♠) and (♣), after at most exponentially many steps, all complexity of checking satisﬁability of a positive disjunctive
ALCHIQ-clauses are derived, and saturation terminates. datalog program, and is thus in NP. Intuitively, this is due to
                                                      nice property of SHIQ that TBox and RBox reasoning does
  Satisﬁability of Ξ(KB) can be decided by further satu-
                                                      not “interfere” with ABox reasoning, i.e. all non-ground con-
rating Γ ∪ Ξ(A) by basic superposition. Since Γ contains
                                                      sequences of KB can be computed without taking the ABox
all non-ground consequences of Ξ(KB), all remaining infer-
                                                      into account. Notice that this result holds even for binary
ences will produce only ground clauses, and will not involve
                                                      number coding.
clauses of type 4 and 6. These inferences can be simulated
in a disjunctive datalog program by transforming Γ into a Lemma 1 (Membership). For KB an extensionally reduced
function-free clause set, and by introducing new constants SHIQ knowledge base, satisﬁability of KB can be decided
playing the role of ground functional terms, as described next. in non-deterministic polynomial time in |A|.
  We deﬁne an operator λ transforming Γ as follows: (i) each
                                                      Proof. Let c be the number of constants, f the number of
functional term f(a) is replaced with a new, globally unique
                                                      function symbols in the signature of Ξ(KB), and s the num-
constant a ; (ii) each term f(x) is replaced with a new, glob-
        f                                             ber of facts in Ξ(KB) (which is equal to the number of
ally unique variable x ; (iii) for each variable in a clause in-
                  f                                   facts in A). By deﬁnition of λ, the number of constants in
troduced in step (ii), λ appends a literal ¬S (x, x ), where
                                     f    f           DD(KB)   is bounded by ℓ = c + cf (cf accounts for con-
S  is a new predicate unique for the function symbol f; (iv) if             1
 f                                                    stants of the form a ), and the number of facts in DD(KB)
some variable x occurs in a positive, but not in a negative lit-       f
                                                      is bounded by ℓ = s + c + 2cf (c accounts for facts of the
eral in a clause, then the literal ¬HU (x) is appended to the      2
                                                      form HU (a), one cf accounts for facts of the form S (a, a ),
clause; (v) for each function symbol f and each constant a                                       f    f
                                                      and the other cf accounts for facts of the form HU (a )). All
from Ξ(KB), the facts S (a, a ), HU (a) and HU (a ) are                                           f
                     f    f                  f        function symbols are introduced by skolemizing TBox con-
added. The set of (function-free) clauses obtained by apply-
                                                      cepts ∃R.C and ≥ n R.C. Since |T | and |R| are constant, f
ing λ to Γ ∪ Ξ(A) is denoted with FF(KB). An example of
                                                      is also a constant, so both ℓ and ℓ are linear in |A|.
applying λ to a clause of type 5 is shown below.                             1     2
                                                        Hence, |DD(KB)|  can be exponential in |KB| only be-
                    λ
  ¬C(x)  ∨ D(f(x)) ⇒  ¬Sf (x, xf ) ∨ ¬C(x) ∨ D(xf )   cause the non-ground rules in DD(KB) are obtained from
                                                      exponentially many clauses of types 1 – 7. Since these clause
  Now each remaining ground inference by basic superposi-
                                                      types do not contain ABox clauses, the number of clauses ob-
tion in Γ∪Ξ(A) can be simulated by a sound inference step in
                                                      tained after saturation is obviously exponential in |T | + |R|
FF(KB), and vice versa [Hustadt et al., 2004b], so KB and
                                                      only. Since we assume that the latter is constant, both the
FF(KB)  are equisatisﬁable. Since FF(KB) does not contain
                                                      number of rules in DD(KB) and their length are bounded
functional terms and all its clauses are safe, each clause can
                                                      by constants, so |DD(KB)| is polynomial in |A|, and can be
be rewritten into a positive disjunctive rule; let DD(KB) be
                                                      computed from KB in time polynomial in |A|.
the resulting set of rules. The following theorem summarizes
                                                        As KB  and DD(KB)   are equisatisﬁable, the data com-
the properties of DD(KB):
                                                      plexity of checking satisﬁability of KB follows from the
Theorem 1 ([Hustadt et al., 2004b]). For KB an ALCHIQ data complexity of checking satisﬁability of DD(KB), which
knowledge base, the following claims hold: (i) KB is un- is NP-complete [Dantsin et al., 2001]: assuming DD(KB)
satisﬁable iff DD(KB) is unsatisﬁable; (ii) KB |= α iff contains r rules and at most v variables in a rule, the num-
DD(KB)   |=c α, for α of the form A(a) or S(a, b), A a ber of literals in a ground instantiation ground(DD(KB))
                                    KB                                 v
concept name, and S a simple role; (iii) |= C(a) iff  is bounded by r · ℓ + ℓ2 (in each rule, each variable can
DD  KB                                                                 1
   (   ∪{C ⊑  Q}) |=c Q(a), for C a complex concept, and be replaced in ℓ1 possible ways). Assuming r and v are
Q a new concept name; (iv) the number of rules in DD(KB) constants, ℘ = |ground(DD(KB))| is polynomial in |A|.
is at most exponential in |KB|, the number of literals in each Satisﬁability of ground(DD(KB)) can be checked by non-
rule is at most polynomial in |KB|, and DD(KB) can be com- deterministically generating an interpretation of size at most
puted in time exponential in |KB|.                    ℘, and then checking whether it is a model. Both tasks can
                                                      be performed in polynomial time, so the overall algorithm is
3  Data Complexity of Reasoning in     SHIQ           obviously non-deterministically polynomial in |A|.
For an extensionally reduced SHIQ knowledge base KB, an The hardness of the satisﬁability checking problem follows
upper bound for the data complexity follows from the reduc- from [Schaerf, 1994, Lemma 4.2.7]. Actually, the lemma
      KB     DD KB
tion of   to    (   ). Before presenting the details, we shows co-NP-hardness of instance checking, by a reduction
ﬁrst discuss the intuition behind this result.        of satisﬁability of 2-2-CNF propositional formulae. The re-
  By Theorem 1, |DD(KB)| is exponential in |KB|. How- duction produces an extensionally reduced ABox and a single
ever, a closer inspection of the reduction algorithm reveals TBox axiom, so it applies in our case as well. Hence, we im-
that the exponential blowup is caused by the rules obtained mediately obtain the following result:
by saturating ALCHIQ-clauses of types 1 – 7, which corre-
spond to TBox and RBox, but not to ABox clauses. Hence, Theorem 2. Let KB be an extensionally reduced knowledge
the size of the rules of DD(KB) is exponential in the size of base in any logic between ALC and SHIQ. Then (i) de-
TBox and RBox; however, the size of the facts in DD(KB) ciding KB satisﬁability is data complete for NP and (ii) de-
is linear in the size of the ABox. Therefore, data complex- ciding whether KB |= (¬)C(a) with |C| bounded is data
ity of checking satisﬁability of DD(KB) corresponds to data complete for co-NP.4  A Horn Fragment of     SHIQ
                                                                 Table 3: Deﬁnitions of pl+ and pl−
Horn logic is a well-known fragment of ﬁrst-order logic
where formulae are restricted to clauses containing at most D pl+(D)                  pl−(D)
one positive literal. The main limitation of Horn logic is its ⊤ 0                    0
                                                      ⊥       0                       0
inability to represent disjunctive information; however, its A 1                      0
main beneﬁt is the existence of practical refutation proce- ¬C pl−(C)                 pl+(C)
                                                                        +             È       −


dures. Furthermore, data complexity of query answering in d Ci maxi sgn(pl (Ci))         sgn(pl (Ci))
                                                              È
                                                      F                                 i
                                                        C             + C                      − C
Horn logic without function symbols is P-complete [Dantsin i    i sgn(pl ( i))        maxi sgn(pl ( i))
et al., 2001], which makes it appealing for practical usage. ∃R.C 1                   sgn(pl−(C))
                                                      ∀R.C    sgn(pl+(C))             1
  Following this idea, in this section we identify a Horn frag-                         −
                                                      ≥ n R.C 1                       (n 1)n + n sgn(pl+(C))
ment of SHIQ, where disjunction is traded for P-complete                                 2
                                                      ≤ n R.C  n(n+1)  n   sgn pl− C
data complexity. Roughly speaking, in Horn-SHIQ, only            2  + ( + 1)  (  ( )) 1
axioms of the form d Ci ⊑ D are allowed, where each Ci has
the form A or ∃R.A, and D has the form A, ⊥, ∃R.A, ∀R.A,
≥ n R.A or ≤ 1 R. Whereas such a deﬁnition succinctly   It is easy to see that, for a concept C without complex sub-
demonstrates the expressivity of the fragment, in general it is concepts, pl+(C) yields the maximal number of positive lit-
too restricting: e.g., the axiom A1⊔A2 ⊑ ¬B is not Horn, but erals in clauses obtained by clausifying ∀x : πy(C, x). To
it is equivalent to Horn axioms A1 ⊓B ⊑ ⊥ and A2 ⊓B ⊑ ⊥. clausify a concept C containing a complex subconcept at a
Similarly, a non-Horn axiom A ⊑ ∃R.(∃R.B) can be trans- position p, one should consider if C|p occurs in C under
formed into Horn axioms A ⊑ ∃R.Q and Q ⊑ ∃R.B by in-  positive or negative polarity. E.g., in ¬(¬A ⊓ ¬B) the con-
troducing a new name Q for the subconcept ∃R.B. To avoid cepts A and B occur effectively positive, and ⊓ is effectively
                                                                 +         −
dependency on such obvious syntactic transformations, we ⊔. Hence, pl (C|p) (pl (C|p)) counts the number of pos-
give a rather technical deﬁnition of Horn-SHIQ.       itive literals used to clausify C|p, provided that C|p occurs
  We ﬁrst adapt the notions of positions and polarity in ﬁrst- in C under positive (negative) polarity. The function sgn(·)
order formulae to DL. A position p is a ﬁnite sequence of takes into account that C|p will be replaced in C by structural
integers; the empty position is denoted with ǫ. If a position transformation with only one concept name, even if clausiﬁ-
p1 is a proper preﬁx of a position p2, then and p1 is above p2, cation of C|p produces more than one positive literal. E.g.,
and p2 is below p1. For a concept α, the subterm at a position to clausify C = ∀R.(D1 ⊔ D2), the structural transforma-
p, written α|p, is deﬁned as follows: α|ǫ = α; (¬D)|1p = tion replaces D1 ⊔ D2 with an new concept name Q, yielding
                                                        ′                        ′
D|p; (D1 ◦ D2)|ip = Di|p for ◦ ∈ {⊓, ⊔} and i ∈ {1, 2}; C = ∀R.Q; then clausifying C produces a clause with only
α|1 = R and α|2p = D|p for α = ♦R.D and ♦ ∈ {∃, ∀}; and one positive literal. Now a concept C is Horn if the maximal
α|1 = n, α|2 = R and α|3p = D|p for α = ⊲⊳ n R.D and  number of positive literals obtained by clausifying subcon-
⊲⊳ ∈ {≤, ≥}. A replacement of a subterm of α at position p cepts of C is at most one.
with a term β is deﬁned in the standard way and is denoted If a concept C has a complex subconcept at position p, spe-
as α[β]p. For a concept α and a position p such that α|p is cial care has to be taken in introducing a new name α for C|p.
a concept, the polarity of α|p in α, denoted as pol(α, p), is Consider the Horn concept C = ∀R.D1 ⊔ ∀R.¬D2. To ap-
deﬁned as follows:                                    ply structural transformation to C, one might replace ∀R.D1
                                                      and ∀R.¬D2  with new concept names Q1 and Q2, yielding
        pol(C, ǫ) = 1;
                                                      concepts ¬Q1 ⊔ ∀R.D1, ¬Q2 ⊔ ∀R.¬D2 and Q1 ⊔ Q2. The
 pol(C1 ◦ C2, ip) = pol(Ci, p) for ◦ ∈ {⊓, ⊔}, i ∈ {1, 2}; problem with such a straight-forward application of structural
   pol(♦R.C, 2p) = pol(C, p) for ♦ ∈ {∃, ∀};          transformation is that a Horn concept C was reduced to a non-
pol(≥ n R.C, 3p) = pol(C, p);
                                                      Horn concept Q1 ⊔ Q2, so the structural transformation de-
     pol(¬C, 1p) = −pol(C, p);                        stroyed Horn-ness. To remedy this, we modify the structural
pol                 pol
   (≤ n R.C, 3p) = −  (C, p).                         transformation to replace each C|p with a literal concept α
                                                      such that clausifying and    requires the same number
Intuitively, pol(α, p) equals 1 if α| occurs in α under an even          α     C|p
                            p                         of positive literals. In the above example, this would mean
number of explicit and implicit negations, and −1 otherwise.
                                                      that ∀R.D1 should be replaced with Q1, but ∀R.¬D2 should
Deﬁnition 1. In Table 3, we deﬁne two mutually recursive be replaced with ¬Q , yielding concepts ¬Q ⊔ ∀R.D ,
         +      −                                                        2                    1        1
functions pl and pl , where sgn(0) = 0 and sgn(n) = 1 for Q2 ⊔ ∀R.¬D2 and Q1 ⊔ ¬Q2, which are all Horn.
n > 0. For a concept C and a position p of a subconcept in C, Although transitivity axioms are translated by π into Horn
              +
let pl(C, p) = pl (C|p) if pol(C, p) = 1, and let pl(C, p) = clauses, recall that the algorithm from Section 2 replaces
 −
pl (C|p) if pol(C, p) = −1.                           them with axioms of the form ∀R.C ⊑ ∀S.(∀S.C). Now
  A concept C is a Horn concept if pl(C, p) ≤ 1 for each pl+(∃R.¬C ⊔ ∀S.(∀S.C)) = 1 + pl+(C), so if pl+(C) > 0,
position p of a subconcept in C (including the empty position Ω(KB) is not a Horn knowledge base. Hence, the presence
ǫ). An extensionally reduced ALCHIQ knowledge base KB of transitivity axioms can make a knowledge base non-Horn.
is Horn if, for each axiom C ⊑ D ∈ KB, the concept ¬C ⊔D
                                                      Deﬁnition 2. Let C be a concept and Λ a function mapping
is Horn. An extensionally reduced SHIQ knowledge base
                                                      C to the set of positions p 6= ǫ of subconcepts of C such that
KB  is Horn if Ω(KB) is Horn.
                                                      C|p is not a literal concept and, for all positions q below p,C|q is a literal concept. Then Def(C) is deﬁned recursively Lemma 3. If all premises of an inference by basic super-
as follows, where α = Q if pl(C, p) > 0, and α = ¬Q if position contain at most one positive literal, then inference
pl(C, p) = 0, with Q a new atomic concept, and ¬(¬Q) = Q: conclusions also contain at most one positive literal.
  • Def(C) = {C} if Λ(C) = ∅, or                      Proof. (Sketch) Consider a resolution inference with clauses
  • if Λ(C) 6= ∅, then choose some p ∈ Λ(C) and let   A ∨ C and ¬B ∨ D, where all literals in C are negative and


                                                      at most one literal in D is positive. Obviously, the number
          
            {¬α ⊔ C|p} ∪ Def(C[α]p) if pol(C, p) = 1  of positive literals in the conclusion Cσ ∨ Dσ is equal to
 Def(C) =
           {¬α ⊔ ¬C|p} ∪ Def(C[¬α]p) if pol(C, p) = −1 the number of positive literals in D. Similarly, consider a
                                                      paramodulation inference from a clause s ≈ t ∨ C into a
  Let Cls(ϕ) denote the set of clauses obtained by clausifying clause A ∨ D, where all literals in C and D are negative.
a formula ϕ in the standard way and let               Obviously, the conclusion Aσ[tσ]p ∨ Cσ ∨ Dσ has only one
                                                      positive literal. Similar considerations hold for a paramodu-
        Cls(C) = SD∈Def(C) Cls(∀x : πy(D, x)).        lation into a negative literal.
For an ALCHIQ  knowledge base KB, Ξ(KB) is the small-   By Lemma 2 and 3, if KB is a Horn-SHIQ  knowledge
est set of clauses such that: (i) for each role name R ∈ NRa , base, then DD(KB) is a non-disjunctive program. This is
Cls(π(R)) ⊆ Ξ(KB); (ii) for each RBox or ABox axiom α in enough for the following result:
KB, Cls(π(α)) ⊆ Ξ(KB); (iii) for each TBox axiom C ⊑ D
in KB, Cls(¬C ⊔ D) ⊆ Ξ(KB).                           Theorem 3. For KB  an extensionally reduced Horn knowl-
                                                      edge base in any logic between ALC and SHIQ, deciding
  By [Nonnengart and Weidenbach, 2001], ∀x : πy(C, x) KB  (un)satisﬁability, and deciding whether KB |= (¬)C(a)
and VD∈Def(C) ∀x : πy(D, x) are equisatisﬁable, so Ξ(KB) with |C| bounded, is P-complete in |A|.
and π(KB) are equisatisﬁable as well.
                                                      Proof. Membership in P is a consequence of the fact that
                                          KB
Lemma 2.  For a Horn-SHIQ   knowledge base   , each   DD(KB)   is a non-disjunctive program, whose satisﬁability
clause from Ξ(KB) contains at most one positive literal. can be checked in polynomial time [Dantsin et al., 2001].
Proof. We ﬁrst show the following property (*): for a Horn For hardness, consider the well-known P-complete prob-
concept C, all concepts in Def(C) are Horn concepts. The lem of deciding whether a path from a node a1 to a node
proof is by induction on the recursion depth in Def. The in- an in a graph G exists [Papadimitriou, 1993]. For a graph
duction base for Λ(C) = ∅ is obvious. Consider an applica- G, let KB G be a knowledge base containing the assertions
tion of Def(C), where C is a Horn concept and p a position edge(a, b) and edge(b, a) for each edge ha, bi in G, the ax-
of a subconcept of C, such that C|p is not a literal concept ioms C(a1) and ¬C(an), and the TBox axiom C ⊑ ∀edge.C.
and, for each position q below p, C|q is a literal concept. Obviously, a1 is reachable from an if and only if KB G is un-
Observe that in all cases, we have pl+(α) = pl(C, p) and satisﬁable, thus implying P-completeness of unsatisﬁability
                                                      checking. The other inference problems can be reduced to
pl+(¬α) =  1 − pl(C, p). We now consider two cases, de-
                                                      unsatisﬁability as usual.
pending on pol(C, p):
                                   +
  • pol(C, p) = 1.  Now  we have  pl (¬α ⊔ C|p) =     5   Discussion
     +         +          +
    pl (¬α) + pl (C|p) = pl (¬α) + pl(C, p) = 1. Fur- To better understand the results from the previous two sec-
    thermore, pl(C, p) = pl(C[α]p, p), so C[α]p is Horn. tions, we contrast them with well-known results for (disjunc-
                                   +
  • pol(C, p) = −1. Now we have  pl (¬α ⊔ ¬C|p) =     tive) datalog [Dantsin et al., 2001]. Since datalog has been
     +         −          +                           successfully applied in practice, this analysis gives interest-
    pl (¬α) + pl (C|p) = pl (¬α) + pl(C, p) = 1. Fur-
                                                      ing insights into the practical applicability of DLs.
    thermore, pl(C, p) = pl(C[¬α]p, p), so C[¬α]p is Horn.
                                                        Interestingly, the data complexity of datalog variants and of
Hence, each application of the operator Def decomposes a corresponding SHIQ fragments coincide. Namely, without
Horn concept C into two simpler Horn concepts, so (*) holds. disjunctions, a SHIQ knowledge base and a datalog program
Furthermore, for each C|p or ¬C|p in the deﬁnition of Def, always have at most one model, which can be computed in
each immediate subconcept is a literal.               polynomial time. With disjunctions, several models are pos-
  For D ∈ Def(C), by deﬁnition of π from Table 1, it is easy sible, and this must be dealt with using reasoning-by-cases.
          +
to see that pl (D) gives the maximal number of positive lit- Intuitively, one needs to “guess” a model, which increases
erals occurring in a clause from Cls(∀x : πy(D, x)). Thus, if data complexity to NP.
C is a Horn concept, all clauses from Cls(C) contain at most The key difference between datalog and DLs is revealed
one positive literal. Finally, clauses obtained by translating by considering the effects that various parameters have on the
RBox and ABox axioms of Ω(KB) also contain at most one complexity. For a datalog program P and a ground atom α,
positive literal.                                     checking whether P |= α can be performed in time O(|P |v),
  As stated by the following lemma, a basic superposition where v is the maximal number of distinct variables in a rule
                                                           [         ]
inference, when applied to Horn premises, produces a Horn of P Vardi, 1995 . Namely, the problem can be solved by
conclusion. The full proof of the lemma is given in [Hustadt grounding P , i.e. by replacing, in each rule of P , all variables
et al., 2004a].                                       with individuals from P in all possible ways. The size of the