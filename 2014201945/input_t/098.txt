                   Last-Branch and Speculative Pruning Algorithms for Max" 

                                                 Nathan Sturtevant 
                                       UCLA, Computer Science Department 
                                               Los Angeles, CA 90024 
                                                nathanst@cs.ucla.edu 


                        Abstract                               19841, as it examines the successors of each node left-to-
                                                               right without returning to previously searched nodes. It does 
      Previous work in pruning algorithms for max"             require that you know when you are searching the last branch 
      multi-player game trees has produced shallow             of a node. Speculative pruning, however, is not a directional 
      pruning and alpha-beta branch-and-bound prun•            algorithm as it may re-search some branches of the tree. Last-
      ing. The effectiveness of these algorithms is            branch pruning is a special case of speculative pruning. 
      dependant as much on the range of terminal val•              The remainder of the paper is as follows. In Section 2 
      ues found in the game tree as on the ordering of         we present a brief overview of sample multi-player domains. 
      nodes. We introduce last-branch and speculative          In Section 3 we cover previous techniques for pruning max" 
      pruning techniques which can prune any constant-         trees. Section 4 covers our new techniques, with results from 
      sum multi-player game tree. Their effectiveness          various domains in Section 5. 
     depends only on node-ordering within the game 
     tree. As b grows large, these algorithms will, in         2 Multi-Player Domains 
     the best case, reduce the branching factor of a //-
                                                               A multi-player game is one in which there are 3 or more play•
      player game from b to /;<n-,)/n. In Chinese Checkers 
                                                               ers or teams competing against each other. Many 4-player 
     these methods reduce average expansions at depth 
                                                               games are designed for 2 teams, making them two-player 
     6 from 1.2 million to 100k nodes, and in Hearts 
                                                               games from a theoretical standpoint. We highlight a few of 
     and Spades they increase the average search depth 
                                                               the many interesting multi-player games here. 
      by 1-3 ply. 
                                                               2.1 Chinese Checkers 
                                                               One of the best known multi-player board games is Chinese 
1 Introduction                                                 Checkers. This game is played on a board in the shape of a 
                                                               6-pointed star, with players' pieces starting on opposite sides 
While the minimax algorithm with alpha-beta pruning            of the board. The goal is to move your pieces across the board 
[Knuth and Moore, 19751 has dominated the study of 2-          faster than your opponent(s) can. Chinese Checkers can be 
player games, a clearly dominant algorithm has not emerged     played with 2-6 players, and is not played in teams. 
in the study of H-player games. 

    The standard algorithm for /i-playcr games is ma\n         2.2 Card Games 
[Luckhardt and Irani, 1986|. Only some max" game trees can     We use two games here as examples. Spades and Hearts. 
be pruned using established techniques such as shallow prun•   Spades is usually played with 4 players, but has a 3-player 
ing |Korf, I991| and alpha-beta branch-and-bound pruning       variant. The goal of Spades is to maximize your score. Hearts 
[Sturtevant and Korf, 2000|. This is because the amount of     is usually played with 4 players, but can be played with 3 or 
pruning possible under these algorithms is dependant on both   more. The goal of Hearts is to minimize your score. 
the node ordering and the range of terminal values found in        Many card games, including these, arc trick-based. Be•
the game. Common heuristics for games such as Hearts and       cause a trick cannot be given up after being taken, the tricks 
Chinese Checkers do not have appropriate terminal values       taken during the game provide a monotonically increasing 
for pruning. In two-player games, however, pruning is only     lower-bound on the final score of the game. In the case of 
dependant on the node ordering in the tree.                    Spades, players get I point per trick taken, while in Hearts 
    We present here last-branch and speculative pruning        each player gets 1 point for every heart in the tricks they take, 
techniques which can be used to prune any rt-player constant-  as well as 13 points for the queen of spades. A complete game 
sum max" game tree. The effectiveness of these algorithms      is made up of multiple hands, where the goal is to minimize 
depends only on node ordering within the game tree. Ixist-     or maximize your points over all the hands. 
branch pruning is similar to a directional algorithm |Pearl,       Both Spades and Hearts are imperfect-information 


MULTIAGENT SYSTEMS                                                                                                    669                                                                      maxsum = 10 


                                                                            (0,6,4) 

                                                                       Figure 2. Shallow pruning in a 3-player max" tree. 
 games, while the descriptions and trees in this paper assume  score of 6. Because maxsum is 10 we know that Player Ts 
 games have perfect information. In card games, however, we    score will never exceed 4 at node (a), so Player 1 will never 
often use perfect-information methods to search imperfect-     choose to move towards (a) at the root, and the remaining 
 information games through Monte-Carlo simulation. This        children of (a) can be pruned. 
 involves generating sets of hands that are similar to the hands   For shallow pruning to actually occur in a maximization 
 we expect our opponents to have. We then use traditional      game, each player must have a score that ranges between 0 
 perfect-information methods to search these hands, combin•    and maxsum. [Sturtevant and Korf, 2000) There are similar 
 ing and analyzing the results to make the next play. These    bounds for minimization games. In the average case, no 
methods have been successfully used in the Bridge program      asymptotic gain can be expected from shallow pruning. 
GIB. [Ginsberg, 20011                                          (Korf, 19911 The basic problem with shallow pruning is that 
                                                               it works by comparing the scores of only 2 out of n players 
3 Pruning Algorithms for Max"                                  in the game, and it is unlikely that 2 players will have their 
The max" algorithm can be used to play games with any num•     scores sum to maxsum. This contrasts with the large gains 
ber of players. For two-player games, max" reduces to mini-    available from using alpha-beta pruning with 2-playcr mini-
max. In a max" tree with n players, the leaves of the tree arc max. 
H-tuples, where the ith element in the tuple is the /th player's 
                                                               3.2 Branch and Bound Pruning 
score. At the interior nodes in the game tree, the max" value 
of a node where player / is to move is the child of that node  If a monotonic heuristic is present in a game, it can also be 
for which the /th component is maximum. This can be seen       used to prune a max" tree. The full details of how this occurs 
in Figure 1.                                                   is contained in (Sturtevant and Korf, 2000|. An example of a 
     In this tree fragment there are three players. The player monotonic heuristic is the number of tricks taken in Spades. 
to move is labeled inside each node. At node (a), Player 2 is  Once a trick has been taken, it cannot be lost. This guaran•
to move. Player 2 can get a score of 6 by moving to the left or tee can provide a lower bound on a player's score, and an 
right and a score of 4 by moving to the middle node. We break  upper bound on one's opponents scores, which can be used 
ties to the left, so Player 2 will choose the left branch, and the in branch-and-bound pruning to prune the game tree. Alpha-
max" value of node (a) is (0, 6, 4). Player 1 acts similarly at beta branch-and-bound pruning combines the actual scores of 
the root selecting the left branch, because the first component the 2 players compared in shallow pruning with the heuristic 
of the max" value there, 5, is greater his score from the middle information from the other n-2 players to prune the tree. 
branch, 0, and his score at the right branch, 3. 
                                                               3.3 Pruning in Practice 
3.1 Shallow Pruning                                            These algorithms have mixed performances in practice. 
     Shallow pruning refers to cases where a bound on a node   There are no obviously useful monotonic heuristics for Chi•
is used to prune branches from the child of that node. The     nese Checkers, and most useful cutoff evaluation functions 
minimum requirements for pruning a max" tree with shallow      for the game do not meet the requirements for shallow prun•
pruning are a lower bound on each players' score and an up•    ing. Thus, in practice it is not possible to use any of these 
per bound, maxsum, on the sum of all players' scores. We       techniques to prune a Chinese Checkers game tree. 
demonstrate this in Figure 2. In this figure, all scores have a    If we use the number of points taken in the game tree so 
lower bound of 0, and maxsum is 10.                            far as the evaluation function, we will be able to use shallow 
     Player 1 searches the left branch of the root in a depth- pruning in Spades and branch-and-bound pruning in both 
first manner, getting the max" value (5,4, 1). Thus, we know   Spades and Hearts. This is fine if you can search the entire 
that Player 1 will get at least 5 points at the root. Since there game tree, but we are currently unable to do that. If we add a 
are only 10 points available, we know the other players will   predictive component to the evaluation function, these prun•
get less than 5 points at this node.                           ing techniques are much less effective. Thus a trade-off has to 
    At node (a), Player 2 searches the left branch to get a    be made between the quality of the cutoff evaluation function 


670                                                                                             MULTIAGENT SYSTEMS  maxsum = 10 (6, 4, 0) or (5,4, 1)                               maxsum = 10 (5,4, 1) 


                                                                        (3,5,2) 
              Figure 3: The failure of deep pruning.              Figure 4. Combining max" scores to limit value propagation. 

and the potential amount of pruning in the game tree.          values at (a) may interact with unseen values at (b) to affect 
                                                               Player 2's, and thus Player 1 's move. In this case, deep prun•
3.4 Deep Pruning                                               ing failed because the value at the right child of (a) was better 
Deep pruning refers to when the bound at a node is used to     for Player 2 than a previous child of (a). If the children of (a) 
prune a grandchild or lower descendant of that node. |Korf,    were ordered optimally for Player 2, or if there was no right 
19911 shows that, in the general case, deep pruning can incor• child at (a), the deep prune could not have affected the max" 
rectly affect the max" value of the game tree. We demonstrate  value of the tree. 
this in Figure 3. After searching the left branch of node (b).     While shallow pruning only considers 2 players' bounds 
Player 3 is guaranteed 5 points, and Player 1 is guaranteed to when pruning, we can actually use n players' bounds in a n-
get no more than 5 points at node (b). So, we can conclude     player game. Since each player has already searched one or 
that the max" value of node (b) will never be the max" value 
                                                               more branches when we reach node (b) in Figure 4, we have 
of the game tree, because Player 1 is already guaranteed a 
                                                               a lower bound on each player's score. In this case, Player 1 
score of 5 at the root, and he can do no better than that at node 
                                                               has a lower bound of 5 from the left branch of the root, Player 
(b). It is still possible, however, that the max" value at (b) can 
                                                               2 has a bound of 3 from the left branch of (a), and Player 3 
affect the final max" value of the tree. 
                                                               has a bound of 2 from the left branch of (b). The sum of these 
     For instance, if the actual max  value of (b) is (4, 0, 6), 
                                  n                            bounds is 10, which is greater than or equal to maxsum. We 
Player 2 will prefer the move (6, 4, 0) at node (a), and this 
                                                               can thus show that any unseen value at (b) cannot be the max" 
will be the max" value of the game tree. But, if the max" value 
of (b) is (0,4,6), Player 2 will prefer this value, and so Player value of the tree. 
1 will choose (5,4, 1) to be the max" value of the game tree.  Lemma 1: If, in a max" game tree, the sum of lower bounds 
Thus, in general deep pruning is not valid.                    for a consecutive sequence of unique players meets or ex•
                                                               ceeds maxsum, the max" value of any child of the last player 
4 New Pruning Techniques                                       in the sequence cannot be the max" value of the game tree. 
                                                               Proof: We provide a proof by contradiction. Figure 5 shows a 
We now present our new algorithms. They have the same 
minimum requirements to prune as shallow pruning, namely 
a lower bound on each player's score and a upper bound on 
the sum of scores. This is slightly weaker than requiring a 
game to be constant-sum, meaning that the sum of all scores 
at every node is constant, but in either case we can usually 
make adjustments to the evaluation function in a game to be 
able to prune effectively. 

4.1 Requirements for Pruning 
Last-branch and speculative pruning both examine portions 
of max" game trees to find nodes whose max" value can never 
be the max" value of the tree. They take different approaches, 
however, when they prune these nodes. 
    Returning to Figure 3, we know that Player 1 will never 
get a better value than 5 at node (b). But, to prune at (b) cor•
rectly, we must show that Player 1 cannot get a better max" 
value at the root from either node (b) or node (a), as the      Figure 5. Combining scores to limit value propagation in general. 


MULTIAGENT SYSTEMS                                                                                                    671                                                                specmaxn(Node, ParentScore, GrandparentScore) 
                                                               { 
                                                                    best = NIL; specPrunedQ = NIL; 
                                                                    if terminal(node) 
                                                                        return static eval(node); 

                                                                   for each child(Node) 
                                                                        if (best[previous Player] ParentScore)! 
                                                                            result = specmaxn(next child(Node), 
                                                                                        best[current Player], ParentScore); 
                                                                        else 
                                                                            result = specmaxn(next child(Node), 
                                                                                                   best[current Player], 0); 
                                                                        if (best == NIL) 
                                                                            best = result; 
                                                                        else if (result == NIL) 
                                                                            add Child to specPrunedQ; 
                                                                        else if (best[current Player] result[current Player]) 
                                                                            best = result; 
 generic 3-player game tree. In this figure Player 1 has a lower            if (best[previous Player] ParentScore) 
 bound of JC at the root, Player 2 has a lower bound of y at (a),               re-add specPrunedQ to child list; 
 and Player 3 has a lower bound of z at (b). Given that these           if (GrandparentScore+ParentScore+ 
 values sum to maxsum, assume there is a value v at the right                              best[current Player] maxsum) 
 child of (b) which will be the max" value of the game tree.                return NIL; 
     Let v = For v to become the max" value of the                 return best; 
tree, each player must prefer this move to their current move. } 
 Since ties are broken to the left, z, must be strictly better than Figure 7: Speculative max" pseudo-code for a 3-player game. 

     must be strictly better than y, and xl must be strictly bet•
ter than x. Thus, and  
                                                               searched children must not be better for Player 1 than his 
       maxsum, and maxsum. But, by the defini•
                                                               current bound at the root. In the //-player case, all intermedi•
tion of maxsum, this is impossible. So, no value at the right 
                                                               ate players between the first and last player must be search•
child of (b) can be the max" value of the game tree. While this 
                                                               ing their last branches, while Players 1 and n can be on any 
is the 3-player case, it clearly generalizes for n players.  
                                                               branch after their first one. 
     While we have shown that we can combine n players' 
scores to prove a max" value will not propagate up a max"          Ixist branch pruning has the potential to be very effective. 
tree, we must also show that a prune in this case will not af• Instead of only considering 2 players' scores, it compares n 
fect the max" value of the entire game tree. Last-branch and   players' scores. In fact, when all nodes in the tree have the 
speculative pruning address this problem in similar ways.      exact same evaluation, last-branch pruning will always be 
Neither algorithm, however, will prune more than n levels      able to prune, while shallow pruning will never be able to. 
away from where the first bound originates.                        The only drawback to last-branch pruning is that it only 
                                                               prunes when intermediate players between the first and last 
4.2 Last-Branch Pruning                                        player are all on the last branch of their search. For a game 
When a sequence of players have bounds appropriate for         with branching factor 2 this is already the case, but otherwise 
pruning under lemma 1, last-branch pruning guarantees that     we use speculative pruning to address this issue. 
the prune will be correct by only pruning when the intermedi•
ate players in the sequence arc searching their last branch.   4.3 Speculative Max" Pruning 
     We can see this in Figure 4. To prune correctly, we ob•   Speculative pruning is identical to last-branch pruning, except 
serve that after searching the left children of node (a) Player that it doesn't wait until intermediate players arc on their last 
2 has only two choices: the best max" value from a previous    branch. Instead, it prunes speculatively, re-searching if needed. 
branch of (a), or the max" value from (b). If Player 2 chooses     We demonstrate this in Figure 6. At the root of the tree, 
the max" value from the previous branch of (a), (3, 3, 4),     Player 1 is guaranteed 5 points. At node (a), Player 2 is guar•
Player 1 will get a lower score at (a) than his current bound  anteed 3, and at node (b), Player 3 is guaranteed 2. Because 5 
at the root. Umma 1 shows that the max" value at (b) can be    + 3 + 2 £ maxsum, we could prune the remaining children of 
better than the current bound for Player 2 or for Player 1, but (b) if node (b) was the last child of node (a). 
not for both players. So, if Player 2 chooses a value from (b),    Suppose we do prune, and then come to the final child of 
it must also have a lower max" value for Player 1 than his     node (a). If the final child of node (a) has value (4, 4, 2), we 
bound at the root. Thus, Player 1 will not get a better score at know Player 1 will not move towards (a), because no value 
(a), and we can prune the children of node (b).                there can be better for Player 1. But, if the value at (a) ends 
    For last-branch pruning to be correct, in addition to      up being (6, 4, 0), the partially computed max" value of (a) 
the conditions from lemma 1, Player 2 must be on his last      will be (6, 4, 0). With this max" value, Player 1 will choose 
branch, and the partial max" value from Player 2's previously  to move towards node (b). Because this has the potential to 


672                                                                                             MULTIAGENT SYSTEMS                                                                  maxsum =10 (5, 4, 1) 


 Tabic 8: Branching factor gains by speculative max" in a 3-playcr game. 

change the max" value at the root of the tree, we will have to 
search node (b) again using new bounds. This occurs when 
Player 2's nodes are ordered suboptimally. With an optimal 
node ordering we will never have to re-search a subtree. 
     In general, we have to re-search pruned branches if, on 
a mid-level branch, we find a new value for which both that                 Figure 9. Discrete cut-off evaluations 
mid-level player and his parent have better scores. As with 
last-branch pruning, we can only prune when Player 1 prefers 
his current move over Player 2's partial max" value. If we     4.4 Discrete Cutoff Evaluations 
wish to preserve the order of tie-breaking in the tree, we must    It is possible to use tighter bounds for pruning when 
also retain some extra information about the order of nodes    the evaluation function has discrete as opposed to continu•
expanded. Nodes that can be pruned by last-branch pruning      ous values. This draws from the proof of lemma 1. In this 
will be always be pruned by speculative pruning. Pseudo•       proof we see that, for a value to affect the max" value of the 
code for speculative pruning can be found in Figure 7.         tree, and Suppose the minimum delta of 
    As can been seen, it is reasonably simple to perform       a player's score is . Since all players in the game must do 
speculative pruning in practice. In the 3-player implementa•   strictly better than their previous value we can combine this 
                                                               into our bounds. 
tion, the specmax" function takes 3 arguments, the current 
                                                                   We demonstrate this in Figure 9. At the root of the tree. 
node, the best score at the parent node, and the best score at 
                                                               Player 1 is guaranteed a score of 5, and at node (a) Player 2 is 
the grandparent node. 
                                                               guaranteed 3 points. In this example = 1, so for these pla\-
    At the line marked f we are checking to see if our parent 
                                                               ers both to prefer to move towards (b) they must get at least 
can get a better score from the partial max" value of this node 
                                                               6 and 4 points respectively. Because maxsum is 10, we know 
than from one of his previously searched nodes. If this is the 
                                                               if Player 3 gels more than 0 points, Players 1 and 2 can't both 
case, we cannot use the parent's bounds to help prune the      get better than their current best scores. So, instead of prun•
children of the current node.                                  ing when Player 3 gets 10-5-3 = 2 points, we can prune 
    When a node is speculatively pruned, the specmax"          when Player 3 gels 1 point. 
function returns NIL. All nodes that have speculatively pruned     We can then use our tie-breaking rule to improve this. 
children are added to a list of pruned nodes, and if a child is Because ties are broken lo the left, we can prune if Player 3 
found with a max" value that better for both the current node  gets 0 points at the left branch of (b) and Player 1 and 2 don't 
and the parent node, then the speculatively pruned nodes will  gel 6 and 4 points respectively. If, for instance, the score is (7, 
have to be re-searched. This pseudo-code assumes that play•    3, 0), Player 2 won't choose this value over the left branch of 
ers always alternate plays in the tree, as in Chinese Checkers. (a). In addition, Player 3 will only choose a better value than 
In card games, where this may not be the case, additional      0 from the unexpanded children of (b), which will meet our 
checks are needed.                                             earlier conditions for pruning. 
    For 3 players, the best-case analysis of speculative prun•     ll follows from this that we can always prune if scores 
ing can be formulated as a recurrence, the solution of which     maxsum - (/? - 2), where scores are the current bounds 
is the equation A complete deri•                               for the players in the tree. Additionally, we can prune if 
vation of the recurrence can be found in [Sturtevant, 2003].   ^scores £ maxsum - /*•(/? - 1) and if on the first branch of the 
Solving this equation for x gives the asymptotic branching     node being pruned the other n - 1 players don't all have better 
factor, which, as b grows large, is For a general /7-playcr    scores than their current best bound. 
game, the equation will be .- , . . 
                                                               5 Experimental Results 
           As b grows large, this approaches bn'lln. We give 
sample values for b, given an optimal ordering of nodes in a   As speculative pruning includes last-branch pruning as a 
3-playcr game, in Table 8. The first column contains sample    special case, we only report our experiments with speculative 
values for /?, the second column contains and the third        max". In each experiment, re-expansions by speculative max" 
column contains the actual optimal asymptotic value of b as    are counted as part of the total number of node expansions, 
calculated from these equations.                               and node re-expansions in speculative pruning never out-


MULTIAGENT SYSTEMS                                                                                                    673 