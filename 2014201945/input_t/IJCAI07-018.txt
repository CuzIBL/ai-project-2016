                     A Study of Residual Supports in Arc Consistency

                               Christophe Lecoutre    and  Fred Hemery
                                        CRIL−CNRS FRE 2499
                                           Universit´e d’Artois
                                              Lens, France
                                {lecoutre, hemery}@cril.univ-artois.fr

                    Abstract                          O(ed3)andO(ed2)wheree  denotes the number of constraints
                                                      and d the greatest domain size. The interest of an optimal al-
    In an Arc Consistency (AC) algorithm, a residual  gorithm such as AC2001 resides in its robustness. It means
    support, or residue, is a support that has been stored that AC2001 does not suffer from some pathological cases as
    during a previous execution of the procedure which AC3 does. This situation occurs when the tightness of the
    determines if a value is supported by a constraint. constraints is high, as it is the case for the equality constraint
    The point is that a residue is not guaranteed to rep- (i.e. constraint of the form X = Y ). Indeed, as naturally
    resent a lower bound of the smallest current sup- expected and demonstrated later, AC3 admits then a practical
    port of a value. In this paper, we study the theoreti- behaviour which is close to the worst-case, and the difference
    cal impact of exploiting residues with respect to the by a factor d between the two theoretical worst-case complex-
    basic algorithm AC3. First, we prove that AC3rm   ities becomes a reality.
    (AC3 with multi-directional residues) is optimal for
    low and high constraint tightness. Second, we show  In this paper, we are interested in residues for AC algo-
    that when AC has to be maintained during a back-  rithms. A residue is a support that has been stored during
    tracking search, MAC2001 presents, with respect   a previous execution of the procedure which determines if a
    to MAC3rm, an overhead in O(μed) per branch of    value is supported by a constraint. The point is that a residue
                                                      is not guaranteed to represent a lower bound of the smallest
    the binary tree built by MAC, where μ denotes the
    number of refutations of the branch, e the num-   current support of a value. The basic algorithm AC3 can be
    ber of constraints and d the greatest domain size reﬁned by exploiting residues as follows: before searching a
    of the constraint network. One consequence is that support for a value from scratch, the validity of the residue
    MAC3rm admits a better worst-case time complex-   associated with this value is checked. We then obtain an al-
    ity than MAC2001 for a branch involving μ refuta- gorithm denoted AC3r, and when multi-directionality is ex-
                        2                             ploited, an algorithm denoted AC3rm.
    tions when either μ>d or μ>dand the tightness
    of any constraint is either low or high. Our experi- In fact, AC3r is an algorithm which can be advantageously
    mental results clearly show that exploiting residues replaced by AC2001 when AC must be established stand-
    allows enhancing MAC and SAC algorithms.          alone on a given constraint network. However, when AC has
                                                      to be maintained during search, MAC3r which corresponds
                                                      to mac3.1residue [Likitvivatanavong et al., 2004] becomes
1  Introduction                                       quite competitive. On the other hand, AC3rm is interesting
It is well-known that Arc Consistency (AC) plays a central of its own as it exploits multi-directional residues just like
role in solving instances of the Constraint Satisfaction Prob- AC3.2 [Lecoutre et al., 2003]. But, let us see the interest of
lem (CSP). Indeed, the MAC algorithm, i.e., the algorithm exploiting residues.
which maintains arc consistency during the search of a so- First, we prove in this paper that AC3rm, contrary to AC3,
lution, is still considered as the most efﬁcient generic ap- admits an optimal behaviour when the tightness of the con-
proach to cope with large and hard problem instances. Fur- straints is high. To illustrate this, let us consider the Domino
thermore, AC is at the heart of a stronger consistency called problem introduced in [Bessi`ere et al., 2005]. All but one
Singleton Arc Consistency (SAC) which has recently at- constraints of this problem correspond to equality constraints.
tracted a lot of attention (e.g., [Bessi`ere and Debruyne, 2005; The results that we obtain when running AC3, AC2001,
Lecoutre and Cardon, 2005]).                          AC3.2 and the new algorithm AC3rm on some instances of
  For more that two decades, many algorithms have been this problem are depicted in Table 1. The time in seconds
proposed to establish arc consistency. Today, the most ref- (cpu) and the number of constraint checks (ccks) is given for
erenced algorithms are AC3 [Mackworth, 1977] because of each instance of the form domino-n-d where n corresponds
its simplicity and AC2001/3.1 [Bessi`ere et al., 2005] because to the number of variables and d the number of values in each
of its optimality (while being not too complex). The worst- domain. Clearly, AC3rm largely compensates the weakness
case time complexities of AC3 and AC2001 are respectively of the basic AC3.

                                                IJCAI-07
                                                   125   Instances        AC3    AC3rm    AC2001  AC3.2
              cpu     1.81    0.16     0.23   0.18    a given network P involves removing all values that are not
  domino-100-100
             ccks    18M     990K    1485K   990K     arc consistent.
              cpu     134     3.40     6.01   3.59
  domino-300-300
             ccks   1377M     27M     40M     27M     Deﬁnition 2 Let P =(X  , C ) be a CN. A pair (X, a), with
              cpu     951     15.0     21.4   15.2
  domino-500-500
             ccks  10542M    125M    187M    125M     X  ∈ X  and a ∈ dom(X), is arc consistent (AC) iff ∀C ∈ C
              cpu    6144      60       87     59
  domino-800-800                                      |   ∈    ( )                     (    )
             ccks  68778M    511M    767M    511M      X    scp C , there exists a support of X, a in C. P is AC
                                                      iff ∀X ∈ X , dom(X) = ∅ and ∀a ∈ dom(X), (X, a) is AC.
Table 1: Establishing Arc Consistency on Domino instances The following deﬁnitions will be useful later to analyze the
                                                      worst-case time complexity of some algorithms.
  Next, we analyse the cost of managing data structures with
                                                      Deﬁnition 3 A cn-value is a triplet of the form (C,X,a)
respect to backtracking. On the one hand, it is easy to embed ∈ C    ∈    ( )      ∈     (  )
AC3rm in MAC and SAC algorithms as these algorithms do where C    , X  scp C  and a  dom  X .
not require any maintenance of data structures during MAC Deﬁnition 4 Let (C,X,a) be a cn-value such that scp(C)=
search and SAC inference. On the other hand, embedding {X, Y }.
an optimal algorithm such as AC2001 entails an extra devel-
                                                        • The number of supports of  (X, a) in C, denoted
opment effort, with, in addition, an overhead at the execu-
                                                          s(    ), corresponds to the size of the set {b ∈
tion. For MAC2001, this overhead is O(μed) per branch of    C,X,a
                                                              (  ) | ( ) ∈   ( )}.
the binary tree built by MAC as we have to take into account dom Y  a, b  rel C
                                                        •                       (    )
the reinitialization of a structure (called last) which contains The number of conﬂicts of X, a in C, denoted c(C,X,a),
smallest found supports. Here, μ denotes the number of refu- corresponds to the size of the set {b ∈ dom(Y ) |
tations of the branch, e denotes the number of constraints and (a, b) ∈/ rel(C)}.
d the greatest domain size.
                                                        Note that the number of cn-values that can be built from a
                                                      binary constraint network is O(ed). To sum up all evaluations
2  Constraint Networks                                of an expression Expr(C, X, a) wrt all the cn-values of a
                                                                                     (      )
                                 (X  C )      X       given CN, we will write:  Expr  C, X, a .
A Constraint Network (CN) P is a pair , where    is                        C,X,a
asetofn  variables and C asetofe constraints. Each vari-
able x ∈ X has an associated domain, denoted by dom(x), 3AC3rm
which contains the set of values allowed for x. Each con-
straint C ∈ C involves a subset of variables of X , called In this section, we introduce AC3rm, and we propose a de-
scope and denoted scp(C), and has an associated relation, tailed analysis of its complexity. It is important to remark that
denoted rel(C), which contains the set of tuples allowed for our algorithm is given in the general case (i.e. it can be ap-
the variables of its scope. The initial (resp. current) domain plied to instances involving constraints of any arity). Hence,
of a variable X is denoted dominit(X) (resp. dom(X)). For strictly speaking, its description corresponds to GAC3rm
                                                      since for non binary constraints, one usually talks about Gen-
each r-ary constraint C such that scp(C)={X1,...,Xr},
we have: rel(C) ⊆ r  dominit(X ) where   denotes the  eralized Arc Consistency (GAC). However, to simplify, theo-
                  i=1          i                      retical complexities will be given for binary instances. More
Cartesian product. Also, for any element t =(a1,...,ar),
called tuple, of r dominit(X ), t[X ] denotes the value precisely, for all theoretical results, we will consider given a
               i=1          i     i                   binary CN P =(X   , C ) such that, to simplify and without
ai. It is also important to note that, assuming a total order on
domains, tuples can be ordered using a lexicographic order any loss of generality, each domain exactly contains d values.
≺. To simplify the presentation of some algorithms, we will To establish (generalized) arc consistency on a given CN,
use two special values ⊥ and  such that any tuple t is such doAC (Algorithm 1) can be called. It returns true when the
that ⊥≺t ≺.                                          given CN can be made arc-consistent and it is described in
                                                      the context of a coarse-grained algorithm. Initially, all pairs
                                                      (    )
Deﬁnition 1 Let C be a r-ary constraint such that scp(C)= C, X , called arcs, are put in a set Q.OnceQ has been
{          }              r      init( )              initialized, each arc is revised in turn (line 4),andwhena
 X1,...,Xr  ,ar-tuple t of i=1 dom   Xi is said to be
allowed by C iff t ∈ rel(C), valid iff ∀X ∈ scp(C), t[X ] ∈ revision is effective (at least one value has been removed), the
                                  i            i                              6
dom(Xi), and a support in C iff it is allowed by C and valid. set Q has to be updated (line ). A revision is performed by a
                                                      call to the function revise, and entails removing values that
                                   (    )
  A tuple t will be said to be a support of Xi,a in C when have become inconsistent with respect to C. This function
t is a support in C such that t[Xi]=a. Determining if a tuple
is allowed is called a constraint check. A solution to a CN is
an assignment of values to all the variables such that all the Algorithm 1 doAC (P = (X , C ) : CN): Boolean
constraints are satisﬁed. A CN is said to be satisﬁable iff it ad- 1: Q ←{(C, X) | C ∈ C ∧ X ∈ scp(C)}
mits at least one solution. The Constraint Satisfaction Prob- 2: while Q = ∅ do
lem (CSP) is the NP-complete task of determining whether a 3: pick and delete (C, X) from Q
given CN is satisﬁable. A CSP instance is then deﬁned by a 4: if revise(C,X) then
                                                       5:    if dom(X)=∅  then return false
CN, and solving it involves either ﬁnding one (or more) solu- Q ← Q ∪{(C,Y)|C = C, Y = X, {X, Y }⊆scp(C)
tion or determining its unsatisﬁability. Arc Consistency (AC) 6:
remains the central property of CNs and establishing AC on 7: return true

                                                IJCAI-07
                                                   126Algorithm 2 revise(C : Constraint, X : Variable) : Boolean alone, rather than searching a new support from scratch when
 1: nbElements ←|dom(X) |                             the residue is no more valid, it is more natural and more efﬁ-
 2: for each a ∈ dom(X) do                            cient to perform the search using the value of the residue as
 3:  if supp[C, X, a] is valid then continue          a resumption point. This is exactly what is done by AC2001.
 4:  t ← seekSupport(C, X, a)                         It means that, in practice, AC3r is interesting only when it is
 5:  if t =   then remove a from dom(X)               embedded in MAC [Likitvivatanavong et al., 2004] or a SAC
 6:  else for each Y ∈ scp(C) do supp[C, Y, t[Y ]] ← t algorithm.
                  = |dom(X)|
 7: return nbElements                                   AC3rm has a space complexity of O(ed) and a non-optimal
                                                      worst-case time complexity of O(ed3). However, it is possi-
Algorithm 3 seekSupport(C, X, a) : Tuple              ble to reﬁne this result as follows:
 1: t ←⊥                                              Proposition 1 In AC3rm, the worst-case cumulated time
 2: while t =   do                                   complexity of seekSupport for a cn-value (C,X,a)isO(cs+
 3:  if C(t) then return t
                                                      d) with c = c(C,X,a) and s = s(C,X,a).
 4:  t ← setNextT uple(C,X, a, t)
 5: return                                            Proof. The worst-case in terms of constraint checks is when:
                                                      1) only one value is removed from dominit(Y ) between two
                                                      calls to revise(C,X), 2) values of dominit(Y ) are ordered
returns true when the revision is effective. The algorithm is in such a way that the c ﬁrst values correspond to values
stopped when a domain wipe-out occurs (line 5)orthesetQ which do not support a and the s last values correspond to
becomes empty.                                        values which support a,3)theﬁrsts values removed from
  Following the principle used in AC3.2 [Lecoutre et al., dominit(Y ) systematically correspond to the last found sup-
2003], we propose a mechanism to partially beneﬁt from ports recorded by AC3rm (until a domain wipe-out is en-
(positive) multi-directionality. The idea is that, when a sup- countered). For these s +1calls (note the initial call) to
port t is found, it can be recorded for all values occurring in t. seekSupport(C, X, a), we obtain s ∗ (c +1)+c constraint
For example, let us consider a binary constraint C such that checks. On the other hand, the number of other operations
scp(C) = {X, Y }.If(a, b) is found in C when looking for (validity checks and updates of the supp structure) in revise
a support of either (X, a) or (Y,b), in both cases, it can be performed with respect to a is bounded by d. Then, we have
recorded as being the last found support of (X, a) in C and a worst-case cumulated complexity in O(sc + s + c + d)=
the last found support of (Y,b) in C. In fact, one can sim- O(cs + d). 2
ply record for any cn-value (C,X,a) the last found support What is interesting with AC3rm is that, even if this al-
of (X,a)inC. However, here, unlike AC2001, by exploit- gorithm is not optimal, it is adapted to instances involving
ing multi-directionality, we cannot beneﬁt anymore from uni- constraints of low or high tightness. Indeed, when the con-
directionality. It means that, when the last found support is no straint tightness is low (more precisely, when c is O(1)) or
more valid, one has to search for a new support from scratch. high (when s is O(1)), the worst-case cumulated time com-
Indeed, by using multi-directionality, we have no guarantee plexity becomes O(d), what is optimal. On the other hand,
that the last found support corresponds to the last smallest sc is maximized when c = s = d/2, what corresponds to
support. This new algorithm requires the introduction of a a medium constraint tightness. However, AC3rm can also
three-dimensional array, denoted supp. This data structure is be expected to have a good (practical) behavior for medium
used to store for any cn-value (C,X,a) the last found support constraint tightness since, on average (i.e. asymptotically),
of (X,a)inC. Initially, any element of the structure supp considering random constraints, 2 constraint checks are nec-
            ⊥
must be set to . Each revision (see Algorithm 2) involves essary to ﬁnd a support when the tightness is 0.5. We can
testing for any value the validity of the last found support (line deduce the following result.
3) and if, it fails, a search for a new support is started from
scratch (see Algorithm 3). It uses setNextT uple which re- Proposition 2 The worst-case time complexity of AC3rm is:
                                                         2 +             ∗
turns either the smallest valid tuple t built from C such that O(ed c(C,X,a) s(C,X,a)).
t ≺ t and t[X]=a,or if it does not exist. Without any      C,X,a
loss of generality, we assume that any call to setNextT uple Table 2 indicates the overall worst-case complexities1
                                   ( )
is performed in constant time. Note that C t must be under- to establish arc consistency with algorithms AC3, AC3rm,
                                 (⊥)
stood as a constraint check and that C returns false. If AC2001 and AC3.2. It is also interesting to look at worst-
this search succeeds, structures corresponding to last found case cumulated time complexities to seek successive supports
                      6
supports are updated (line ).                         for a given cn-value (C,X,a). Even if it has not been intro-
  To summarize, the structure supp allows to record what duced earlier, it is easy to show that optimal algorithms admit
we call multi-directional residues. Of course, it is possible a cumulated complexity in O(d). By observing Table 3, we
to exploit simpler residues [Likitvivatanavong et al., 2004], do learn that AC3 and AC3rm are optimal when the tightness
called here uni-directional residues, by not exploiting multi- is low (i.e. c is O(1)), and that, unlike AC3, AC3rm is also
directionality. We can then derive a new algorithm, denoted optimal when the tightness is high (i.e. s is O(1)).
AC3r, by replacing line 6 of Algorithm 2 with:
          else supp[C, X, a] ← t                         1Due to lack of space, we do not provide the detailed proof of
  However, with AC3r, when AC must be established stand- the original complexities given for AC3.

                                                IJCAI-07
                                                   127                                                                       Space           Time (per branch)
            Space              Time                                                2
                                                                     O(e + nd)     O(ed + d ∗  c(C,X,a) )
    AC3   O(e + nd) O(d ∗   c(C,X,a) +  s(C,X,a) )        MAC3
                                                                                          C,X,a
                        C,X,a       C,X,a                                             
                                                                                  2
                        2                                             O(ed)     O(ed +    c(C,X,a) ∗ s(C,X,a) )
   AC3rm    O(ed)     O(ed +   c(C,X,a) ∗ s(C,X,a) )     MAC3rm
                                                                                     C,X,a
                           C,X,a
                                  2                                 (   (  ) )           ( ( + ))
   AC2001   O(ed)              O(ed )                    MAC2001   O min n, d ed       O ed d μ
                                  2                                 (   (  ) )           ( ( + ))
   AC3.2    O(ed)              O(ed )                     MAC3.2   O min n, d ed       O ed d μ
    Table 2: Worst-case complexities to establish AC. Table 4: Worst-case complexities to run MAC. Time com-
                                                      plexity is given for a branch involving μ refutations.
                          Tightness
                 Any     Low   Medium  High
                                  2      2
        AC3    O(cd + s) O(d)  O(d )  O(d )
                (  + )    ( )   ( 2)    ( )           that it is at the price of a space complexity in O(min(n,d)ed)
        AC3rm  O cs d    O d   O d     O d            [               ]
        AC2001   O(d)    O(d)  O(d)    O(d)            van Dongen, 2004 .
                  ( )     ( )    ( )    ( )
        AC3.2    O d     O d   O d     O d            Proposition 3 In MAC2001 and MAC3.2, the worst-case cu-
Table 3: Cumulated worst-case time complexities to seek suc- mulated time complexity of reinitializing the structure last is
cessive supports for a cn-value (C,X,a). We have c + s = d. O(μed) for any branch involving μ refutations.
                                                        Proof. For any refutation occurring in a branch, we need
                                                      to restore the data structure last. In the worst-case, we have
  Remark that the complexities given for AC3rm also hold at most e ∗ 2 ∗ d operations since for each cn-value (C,X,a),
for AC3r. The advantage of AC3rm is the fact that as we we have to reinitialize last[C, X, a] to a stacked value (or, for
always record the most recent found supports (by exploit- variants, to ⊥ or a new recomputed value). Hence, we obtain
ing multi-directionality), there is a greater probability that a (μed). 2
residue be valid. Finally, note that it should be possible to
                                                        If   =0, it means that a solution has been found with-
extend the AC-* framework [R´egin, 2005] in order to include μ
the concept of residues.                              out any backtracking. In this case, there is no need to restore
                                                      the structure last as the instance is solved. At the opposite,
                                                      we know that the longest branch that can be built contains
4  Maintaining arc consistency                        nd edges as follows: for each variable X, there are exactly
In this section, we focus on maintaining arc consistency dur- d − 1 edges that correspond to refutations and only one edge
ing search. More precisely, we study the impact, in terms of that corresponds to an assignment. Then, we obtain a worst-
time and space, of embedding some AC algorithms in MAC. case cumulated time complexities of reinitializing the struc-
                                                      ture last in O(end2) and although it is omitted here, we can
The MAC algorithm aims at solving a CSP instance and per-                   2
forms a depth-ﬁrst search with backtracking while maintain- also show that it is Ω(end ).
ing arc consistency. At each step of the search, a variable One nice feature of AC3rm is that, when they are em-
assignment is performed followed by a ﬁltering process that bedded in MAC, no initialization is necessary at each step
corresponds to enforcing arc-consistency. MAC is based on since the principle of this algorithm is to record the last found
a binary branching scheme. It means that, at each step of support which does not systematically correspond to the last
the search, a pair (X,a) is selected where X is an unassigned smallest one. In fact, it was reported in [Lecoutre et al., 2003]
variable and a a value in dom(X), and two cases are consid- that it is worthwhile to leave unchanged last found supports
ered: the ﬁrst one corresponds to the assignment X = a and (using AC3.2) while backtracking, having the beneﬁt of a so-
the second one to the refutation X = a.              called memorization effect. It means that a support found at a
  On the other hand, it is important to remark that all known given depth of the search has the opportunity to be still valid
AC algorithms (including AC3rm) are incremental. An arc- at a weaker depth of the search (after backtracking). In other
consistency algorithm is incremental if its worst-case time words, it is worthwhile to exploit residues during search. The
complexity is the same when it is applied one time on a importance of limiting in MAC the overhead of maintain-
given network P andwhenitisapplieduptond times on P   ing the data structures employed by the embedded AC al-
where between two consecutive executions at least one value gorithm was pointed out in [Likitvivatanavong et al., 2004]
has been deleted. By exploiting incrementality, one can get (but no complexity result was given). In fact, MAC3r corre-
the same complexity, in terms of constraint checks, for any sponds to the algorithm mac3.1residue introduced in [Likit-
branch of the search tree as for only one establishment of AC. vivatanavong et al., 2004].
  For AC3 and AC3rm, the (non optimal) worst-case time  By taking into account Proposition 3 and Table 2, we ob-
                                                      tain the results given in Table 4. It appears that, for the
complexity for any branch of the search tree is guaranteed                     2
(by incrementality) even if, meanwhile, sub-trees have been longest branch, when μ>d, MAC3 and MAC3rm have
explored and then backtracking has occurred. However, for a better worst-case time complexity than other MAC algo-
optimal algorithms AC2001 and AC3.2, it is important to rithms based on optimal AC algorithms since we know that,
                                                      for any branch, due to incrementality, MAC3 and MAC3rm
manage the data structure, denoted last, in order to restart  3
search, after exploring a sub-tree, as if backtracking never are O(ed ). Also, if the tightness of any constraint is either
occurred. In this paper, MAC2001 and MAC3.2 correspond low or high (more precisely, if for any cn-value (C,X,a), ei-
                                                                     1                1
to the algorithms that record the smallest supports that have ther c(C,X,a) is O( )ors(C,X,a) is O( )), then MAC3rm ad-
been successively found all along the current branch. Note mits an optimal worst-case time complexity in O(ed2)per

                                                IJCAI-07
                                                   128                             MAC embedding                                        SAC − 1 embedding
                     AC3   AC3rm   AC2001   AC3.2                           AC3   AC3rm   AC2001   AC3.2

 Classes of random instances (mean results for 100 instances) Academic instances
               cpu   22.68   22.96   34.38   33.35                   cpu   446.32    9.56   14.40    9.67
  40-8-753-0.1                                       domino-300-300
              ccks    81M     17M     24M     16M                    ccks  1376M     26M     40M     26M
               cpu   21.19   19.23   27.91   26.34                   cpu     4.37    0.53    0.71    0.57
  40-11-414-0.2                                      domino-500-100
              ccks    97M     22M     28M     19M                    ccks   88M    4950K    7425K  4950K
               cpu   21.86   18.31   25.18   23.38                   cpu     1.18    0.74    1.49    1.24
 40-16-250-0.35                                        geo-50-20-19
              ccks   121M     28M     33M     24M                    ccks  9525K   1165K    2671K  1157K
               cpu   37.35   25.53   35.30   32.27                   cpu     1.22    0.89    1.91    1.34
  40-25-180-0.5                                          qa-5
              ccks   233M     56M     60M     45M                    ccks   10M    3104K    5001K  3085K
               cpu   37.62   26.62   35.98   34.45
 40-40-135-0.65
              ccks   344M     83M     82M     64M      Real-world instances
                                                                             637     158      312     192
               cpu   89.01   51.62   67.74   61.48         01 0200 9 cpu
  40-80-103-0.8                                       fapp -  -         10047     905    1795     904
              ccks  1072M    240M    225M    180M                    ccks     M       M       M       M
                                                                            58 95   12 35   24 66   14 38
               cpu  166.12   76.99   98.69   87.50             2 3   cpu      .       .       .       .
  40-180-84-0.9                                        js-enddr -         980      54     128      55
              ccks  2540M    506M    479M    381M                    ccks     M       M       M       M
                                                                             980     439      836     581
                                                              10     cpu
                                                          graph-          12036    1307    2467    1303
 Academic instances                                                  ccks     M       M       M       M
                                                                     cpu    44.89   21.07   56.03   53.21
               cpu    394     377      557     511        scen-11
    ehi-85-12                                                        ccks   479M     33M     52M     37M
              ccks   642M     60M    190M     83M
               cpu    194     157      278     263
   geo-50-20-19
              ccks  1117M    244M    284M    199M               Table 6: Cost of establishing SAC-1
               cpu   31.60   28.31   37.49   36.02
     qa-5
              ccks   130M     36M     38M     27M
               cpu    139     143      215     208    MAC3rm) in terms of constraint checks. Interestingly, in an
    qcp-819
              ccks   116M     21M     41M     25M     overall analysis, we can remark that MAC3rm and MAC2001
                                                      roughly perform the same number of constraint checks. As,
 Real-world instances
               cpu    0.54    0.37    0.60    0.60    on the other hand, MAC3rm do not require any data struc-
  fapp01-0200-9
              ccks  6905K   3080K    3018K  2778K     ture to be maintained, it explains why it is the quickest ap-
               cpu   53.66   29.08   39.24   29.60
   js-enddr2-3                                        proach. These results conﬁrm the results obtained for MAC3r
              ccks   596M    104M     88M     48M
               cpu   15.67   11.88   16.26   14.58    (mac3.1residue) in [Likitvivatanavong et al., 2004] which has
    scen-11
              ccks    92M     18M     15M     10M     a behaviour similar to MAC3rm (due to lack of space, results
               cpu    0.64    0.54    0.69    0.68
    graph-10                                          for MAC3r are not presented).
              ccks  4842K   2216K    2228K  1925K
                                                        We have then embedded AC algorithms in SAC-1. In Ta-
            Table 5: Cost of running MAC              ble 6, one can observe that, for domino instances which in-
                                                      volve constraints of high tightness, AC3rm clearly shows its
branch. In this case, MAC3rm outperforms MAC2001 as   superiority to AC3. For real-world instances, the gap be-
soon as μ>d. These observations suggest that MAC3rm   tween AC3rm and the other algorithms increases. For exam-
should be very competitive.                           ple, SAC-1 embedding AC3rm is about 3 times more efﬁcient
                                                      than SAC-1 embedding AC2001 on scen11 and 4 times more
5  Experiments                                        efﬁcient than SAC-1 embedding AC3 on fapp01-0200-9.
To compare the different algorithms mentioned in this paper,
we have performed a vast experimentation (run on a PC Pen- 6 Residues for Non Binary Constraints
tium IV 2.4GHz 512MB under Linux) with respect to ran- One can wonder what is the behaviour of an algorithm that
dom, academic and real-world problems. Performances have exploits residues when applied to non binary instances. First,
been measured in terms of the CPU time in seconds (cpu) and it is important to remark that seeking a support of a cn-value
the number of constraint checks (ccks).               from scratch requires iterating O(dr−1) tuples in the worst-
  To start, we have tested MAC (equipped with dom/deg) case for a constraint of arity r. We then obtain a worst-case
by considering 7 classes of binary random instances situated cumulated time complexity of seeking a support of a given
at the phase transition of search. For each class n,d,e,t, cn-value in O(r2dr)forGAC3andO(rdr−1) for GAC2001
deﬁned as usually, 100 instances have been generated. The [Bessi`ere et al., 2005] since we consider that a constraint
tightness t denotes the probability that a pair of values is al- check is O(r) and since there are O(rd) potential calls to the
lowed by a relation. What is interesting here is that a signiﬁ- speciﬁc seekSupport function. Then, we can observe that
cant sampling of domain sizes, densities and tightnesses is in- there is a difference by a factor dr. It means that the differ-
troduced. In Table 5, we can observe the results obtained with ence between the two algorithms grows linearly with r.
MAC embedding the various AC algorithms. As expected,   On the other hand, if we assume that c>0 and s>0
the best embedded algorithms are AC3 and AC3rm when the respectively denote the number of forbidden and allowed tu-
tightness is low (here 0.1) and AC3rm when the tightness is ples of the constraint, then we obtain, by generalizing our
high (here, 0.9). Also, AC3rm is the best when the tight- results of Section 3, a complexity in O(crdr−1)forGAC3
ness is medium (here 0.5) as expected on random instances. and in O(cs) for GAC3rm. We can then deduce that the
All these results are conﬁrmed for some representative se- worst-case cumulated time complexity of seeking a support is
lected academic and real-world instances. Clearly, MAC3rm O(min(c, rd).rdr−1)forGAC3andO(min(csr, r2dr))for
outperform all other MAC algorithms in terms of cpu while GAC3rm. If c = O(1) or s = O(1), we obtain O(rdr−1)for
MAC3.2 is the best (although beaten on a few instances by GAC3rm as c + s = dr−1, that is to say optimality. However,

                                                IJCAI-07
                                                   129