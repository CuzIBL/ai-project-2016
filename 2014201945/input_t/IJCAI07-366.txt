            A Machine Learning Approach for Statistical Software Testing                     ∗

            Nicolas Baskiotis, Michele`  Sebag, Marie-Claude Gaudel, Sandrine Gouraud
                            LRI, Universit´e de Paris-Sud, CNRS UMR 8623
                                 Bˆat.490, 91405 Orsay Cedex (France)
                                {nbaskiot, sebag, mcg, gouraud}@lri.fr


                    Abstract                          proposed. This approach, called EXIST for Exploration -
                                                      eXploitation Inference for Software Testing, is inspired by
    Some Statistical Software Testing approaches rely both Estimation of Distribution Algorithms (EDAs) [Baluja
    on sampling the feasible paths in the control ﬂow and Davies, 1998] and Online Learning [Auer et al., 2002;
    graph of the program; the difﬁculty comes from the Cesa-Bianchi and Lugosi, 2006]. EXIST proceeds by itera-
    tiny ratio of feasible paths. This paper presents an tively generating candidate paths based on the current distri-
    adaptive sampling mechanism called EXIST for Ex-  bution on the program paths, and updating this distribution af-
    ploration/eXploitation Inference for Software Test- ter the path has been labelled as feasible or infeasible. EXIST
    ing, able to retrieve distinct feasible paths with high was made possible by the use of an original representation,
    probability. EXIST proceeds by alternatively ex-  extending the Parikh map [Hopcroft and Ullman, 1979] and
    ploiting and updating a distribution on the set of providing a powerful propositional description of long struc-
    program paths. An original representation of paths, tured sequences (program paths). Another original contribu-
    accommodating long-range dependencies and data    tion, compared to on-line learning [Cesa-Bianchi and Lugosi,
    sparsity and based on extended Parikh maps, is pro- 2006; Kocsis and Szepesv´ari, 2006] or reinforcement learn-
    posed. Experimental validation on real-world and  ing, is that our goal is to maximise the number of distinct fea-
    artiﬁcial problems demonstrates dramatic improve- sible paths found along the process, as opposed to learning a
    ments compared to the state of the art.           concept or a ﬁxed policy.
                                                        The paper is organised as follows1. Section 2 brieﬂy re-
1  Introduction                                       views some work relevant to Machine Learning and Soft-
                                                      ware Testing. Section 3 introduces the formal background
Computer Science is becoming a new application domain for and prior knowledge related to the SST problem, and de-
Machine Learning (ML), motivated by the increasing com- scribes the extended Parikh representation. Section 4 gives
plexity of current systems [Rish et al., 2006]. Ideally, sys- an overview of the EXIST system. Section 5 describes the
tems should be able to automatically adapt, maintain and re- experimental setting and goals, and reports on the empirical
pair themselves; a ﬁrst step to this end is to build self-aware validation of the approach on real-world and artiﬁcial prob-
systems, using ML to automatically model the system be- lems. The paper concludes with some perspectives for further
haviour. Along these lines, various ML approaches have been research.
proposed for Software Testing [Br´eh´elin et al., 2001],Soft-
ware Modeling [Xiao et al., 2005] and Software Debugging
[Zheng et al., 2006].                                 2   Related Work
  In this paper, we revisit a Statistical Software Testing (SST) Interestingly, while Program Synthesis is among the grand
                  [                ]
approach presented in Denise et al., 2004 . This approach is goals of Machine Learning, the application of Machine
based on the uniform sampling of the paths in the control ﬂow Learning to Software Testing (ST) has seldom been consid-
graph of the program; to each path, a test case exerting this ered in the literature.
path can be associated if the path is feasible. A problem with
                                                        Ernst et al. [1999] aim at detecting program invariants,
this approach is that the control ﬂow graph provides an overly
                                                      through instrumenting the program at hand and searching for
general description of the program; in some cases, and very
                                                      predetermined regularities (e.g. value ranges) in the traces.
often for large programs, the fraction of feasible paths is tiny
            −15   −5                                                 [    ]
(ranging in 10 , 10 ).                                  Brehelin et al. 2001 consider a deterministic test proce-
  After a discriminant learning approach failed to charac- dure, generating sequences of inputs for a PLA device. An
terise the set of feasible paths because of the tiny support HMM is trained from these sequences and further used to
of the target concept, a generative learning approach was generate new sequences, increasing the test coverage.

  ∗The ﬁrst two authors gratefully acknowledge the support of 1Due to space limitations, the interested reader is referred to
Pascal Network of Excellence IST-2002-506 778.        [Baskiotis et al., 2006] for a more comprehensive presentation.

                                                IJCAI-07
                                                  2274  In [Vardhan et al., 2004], the goal is to test a concur- if node, it must also include the then successor of the
rent asynchronous program against user-supplied constraints second if node). This pattern is referred to as XOR pattern,
(model checking). Grammatical Inference is used to charac- expressing the (possibly long-range) relations between the
terise the paths relevant to the constraint checking. fragments of the program paths.
  Xiao et al. [2005] aim at testing a game player, e.g. dis-
covering the regions where the game is too easy/too difﬁcult; Loop(n) pattern The number of times a loop is executed
they use active learning and rule learning to construct a model happens to be restricted by the semantics of the problem; e.g.
of the program. A more remotely related work presented by when the problem involves 18 or 19 uranium beams to be
[Zheng et al., 2006], is actually concerned with software de- controlled, the control procedure will be executed exactly 18
bugging and the identiﬁcation of trace predicates related to or 19 times [Gouraud, 2004]. This pattern is referred to as
the program misbehaviours.                            Loop(n) pattern.
  In [Ernst et al., 1999; Vardhan et al., 2004],MLisused
to provide better input to ST approaches; in [Br´eh´elin et al., Let us assume that some initial set E of labelled paths is
2001], ML is used as a post-processor of ST. In [Xiao et al., available, and consider the supervised learning problem de-
                                                                                    T
2005], ML directly provides a model of the black box pro- ﬁned from E = {(si,yi),si ∈ Σ ,yi ∈{−1, +1},i =
gram at hand; the test is done by manually inspecting this 1 ...,n},wheresi is a path with length at most T and yi
model.                                                is 1 iff si is feasible.
                                                        This learning problem presents some speciﬁcities. Firstly,
3  Prior knowledge and Representation                 it does not involve noise, i.e. the oracle (constraint solver)
                                                      does not make errors2. Secondly, the complexity of the exam-
After [Denise et al., 2004], the program being tested is repre- ple space is huge with respect to the number of available ex-
sented from its control ﬂow graph (Fig. 1).           amples. In most real-world problems, Σ includes a few dozen
                                                      symbols; a few hundred or thousand paths are available, each
                     i34
                             i33

                          e25                         a few hundred symbols long. The number of available paths
                     b23 i24
                               i32
                 I22 B23 I24 C25


                            C26                       is limited by the labelling cost, i.e. the runtime of the con-
                                  e28
                               i27
     v
               e4            t26 e26
                              I27
                     s23
                                  t28

                                    i29 i30           straint solver (on average a few seconds per program path).


        i0                                  v
       I0                                    f
         C1   C4
    INIT
     a0
          t1 e1

             i2 i3                                    Thirdly, the data distribution is severely imbalanced (infea-
                     s6
                             i20
                                    i19
               t4
                                  e13

                  i5b6  i7 i22                        sible paths outnumber the feasible ones by many orders of
                 I5    I7
                    B6
                                 C13  C28
                         C8
                               e11
                                         i17
                                           i18
                                    i14
                                  t13
                             e9
                              C11
                          t8 e8    t25
                                      C15             magnitude); our attempts for increasing the number of feasi-
                                       t15 e15 i31
                               t11
                                         i16
                            C9
                    i21
                                  i12
                             t9                       ble paths through active learning were unsuccessful, as could
                               i10                    have been expected from [Dasgupta, 2005]. Lastly, the label
                                                      of a path depends on its global structure; a Markovian repre-
 Figure 1: Program FCT4 includes 36 nodes and 46 edges. sentation, e.g. [Begleiter et al., 2004], would require many
                                                      more examples to identify the desired long-range dependen-
  Formally, the control ﬂow graph is a Finite State Automa- cies between the transitions.
ton (FSA) based on some ﬁnite alphabet Σ,whereΣ includes For these reasons, a frugal propositional representation of
the program nodes (conditions, blocks of instructions), and strings inspired by Parikh maps [Hopcroft and Ullman, 1979]
the FSA speciﬁes the transitions between the nodes. A pro- was considered. For t =1...T,lets[t] denote the t-th sym-
gram path is represented as a ﬁnite length string on Σ, ob- bol in s, set to value vf if the length of s is less than t.
tained by iteratively choosing a node among the successors • To each symbol v, is associated an integer attribute av;
of the current node until the ﬁnal node noted vf is found. av(s) is the number of occurrences of symbol v in path s.
  While the length of program paths is not upper bounded • To the i-th occurrence of a symbol v, is associated a cate-
in the general case, for practical reasons coverage-based ap- gorical attribute av,i. Attribute av,i(s) gives the next infor-
proaches to software testing consider program paths with mative3 symbol following the i-th occurrence of symbol v in
bounded length T . Classical results from labelled combina- s (or vf if s contains less than i occurrences of v).
torial structures [Flajolet et al., 1994] can thus be used to uni-
formly sample the set of program paths with length in [1,T]. 4OverviewofEXIST
  Each path sample is provided to a constraint solver and la-
belled as feasible or infeasible (see [Denise et al., 2004] and This section presents a new learning framework devised for
references therein). The infeasibility of a given path arises if SST, called EXIST for Exploration vs eXploitation Inference
it violates some subtle dependencies between different parts for Software Testing.

of the program. Some general patterns of infeasibility can be 2
identiﬁed; due to space limitations, only two most general In all generality, three classes should be considered (feasible,
                                                      infeasible and undecidable) as the underlying constraint satisfaction
such patterns will be considered in the rest of the paper. problem is undecidable. However the undecidable class depends on
                                                      the constraint solver and its support is negligible in practice.
                                                         3
XOR pattern When two nodes are correlated (for instance  Formally, av,i(s) is set to s[t(i)+k],wheret(i) is the index of
two if nodes based on an unchanged expression), then  the i-th occurrence of symbol v in s; k is initially set to 1; in case
their successors are correlated in every feasible path (if av,i takes on a constant value over all examples, k is incremented.
the program path includes the then successor of the ﬁrst See [Baskiotis et al., 2006] for more details.

                                                IJCAI-07
                                                  22754.1  Position of the problem                          tion 3). Variable Order Markov Models can accommodate
While [Denise et al., 2004] proceeds by uniformly sampling such dependencies; however they are ill-suited to the sparsity
the bounded length paths, the efﬁciency of the approach is of the initial data available. Rather, the probabilistic Parikh
limited by the (high) ratio of infeasible paths. Our goal in map can be viewed as a most simple case of probabilistic
the present paper will thus be to provide a sampling mecha- attribute-grammars [Abney, 1997], where the attributes only
nism, EXIST, able to retrieve distinct feasible paths with high take into account the number of occurrences of the symbols.
probability based on a set E of feasible/infeasible paths. E is Finally, the EXIST system involves two modules: i) the Init
initially set to a small set of labelled paths, and it is gradually module determines how the conditional probabilities are es-
enriched with the paths generated by EXIST and labelled by timated; ii) the Decision module uses these probabilities to
the constraint solver.                                iteratively generate the candidate path. Let us ﬁrst describe
  This goal differs from that of active learning, aimed at re- the Decision module.
trieving the most informative examples [Roy and McCallum,  Decision
2001]. Active learning is primarily interested in sampling the 4.3  module
frontier of the classes to be discriminated, whereas EXIST Let s denote the path under construction, initialised to the
is interested in sampling the feasible class only. Further, as start symbol. Let v denote the last node in s and let i be the
already mentioned active learning is hindered by the imbal- total number of occurrences of v in s.
anced class distribution [Dasgupta, 2005].              The Decision module aims at selecting the successor w of
  Our goal can also be viewed in the perspective of impor- the last node in s. In order to do so, some additional infor-
tance sampling and Estimation of Distribution Algorithms mation can be exploited (look-ahead): if the w symbol is se-
(EDAs; see e.g. [Baluja and Davies, 1998]), aimed at iden- lected, then the total number of w symbols in the ﬁnal path
tifying the optima of some ﬁtness function. EDAs iteratively will be at least the current number of occurrences of w in s,
proceed by i) sampling the search space after the current dis- plus one; let jw denote this number.
tribution; ii) computing the ﬁtness of the samples; iii) up- Formally, the probability p(s, w) of generating a feasible
dating and biasing the distribution towards the samples with path conditionally to event Ev,i;w,jw (the number of occur-
maximal ﬁtness. The difference relates to the exploration vs rences of v is i and the number of occurrences of w is at least
exploitation trade-off; while EDAs are supposed to gradu- jw) is provided by the Init module; p(s, w) is conventionally
                                                           1
ally switch to exploitation at some point (the distribution con- set to if there is no path satisfying Ev,i;w,jw .
verges towards one or a few optima of the ﬁtness function), The selection of the next node w aims at maximising the
the EXIST goal is to gather examples which are all different. probability of ultimately ﬁnding a new feasible path. Three
In particular, after a feasible path has been generated, the al- options have been considered:
gorithm must be prevented from generating it again.     • The simplest option is the Greedy one, that selects the
  The approach can also be compared to on-line learn-     successor node w maximising p(s, w).
ing and the multi-armed bandit problem, where the gam-
                                                        • The RouletteWheel option stochastically selects node
bler must choose the next machine to play based on the                                                 w
                                                          with probability proportional to p(s, w).
past selections and rewards [Cesa-Bianchi and Lugosi, 2006;
Kocsis and Szepesv´ari, 2006]. The difference similarly re- • The BandiST option follows the UCB1 algorithm [Auer
lates to the exploration/exploitation trade-off; while [Cesa- et al., 2002]; in the standard multi-armed bandit prob-
Bianchi and Lugosi, 2006; Kocsis and Szepesv´ari, 2006] are lem this algorithm is shown to achieve logarithmic regret
interested in identifying and running the best policy, we must (reward loss compared to the optimal unknown policy)
explicitly avoid repeating our past moves.                with respect to the number of trials. BandiST determin-
                                                          istically selects the node w maximising
4.2  The search space                                                          
Borrowing from EDAs the principle of incrementally exploit-                      2 log(e(s, ∗))
                                                                      p(s, w)+
ing and updating a distribution, EXIST builds a probabilistic                       e(s, w)
model on top of the extended Parikh map representation (sec-
tion 3). Formally, the probability of generating a feasible path where e(s, w) is the total number of paths satisfying
                                                                       (  ∗)=                  (   )
conditionally to events such as “w is the successor of the i- Ev,i,w,jw and e s, w successor of v e s, w .
th occurrence of v and w occurs at least j times”, denoted      Init
Ev,i;w,j, is estimated from the set E of feasible/infeasible 4.4 The module
paths currently available.                            The Init module determines how the conditional probabilities
  These estimate probabilities are used to gradually construct used by the Decision module are estimated.
the current path s, iteratively selecting the successor w of the The baseline Init option computes p(s, w) as the fraction

current symbol v, conditionally to the current number of oc- of paths in E satisfying Ev,i,w,jw that are feasible. However,
currences of v and w in s.                            this option fails to guide EXIST efﬁciently due to the disjunc-
  This formalism is meant to avoid the limitations of proba- tive nature of the target concept (section 3), as shown on the
bilistic FSAs and Variable Order Markov Models [Begleiter following toy problem.
et al., 2004]. Actually, probabilistic FSAs (and likewise sim- Let us assume that a path is feasible iff the ﬁrst and the third
ple Markov models) cannot model the long range dependen- occurrences of symbol v are followed by the same symbol (s
cies between transitions involved in the prior knowledge (sec- feasible iff av,1(s)=av,3(s)). Let us further assume that E

                                                IJCAI-07
                                                  2276includes s1 = vwvxvw, s2 = vxvwvx and s3 = vxvwvw;    5   Experimental validation
s1 and s2 are feasible while s3 is infeasible. Consider the cur-
         =                                            This section describes the experimental setting used to vali-
rent path s vwvxv; the next step is to select the successor date EXIST; it reports on the empirical results and discusses
of the 3rd occurrence of v. It can be seen that p(s, w)=.5
      (   )=1                                         the sensitivity of EXIST wrt the initial amount of labelled
while p s, x   ., as the ﬁrst event (the 3rd occurrence of v paths.
is followed by w and there are at least 2 occurrences of w)is
satisﬁed by s1 and s3 while the second event (the 3rd occur- 5.1 Experimental setting and criteria
rence of v is followed by x and there are at least 2 occurrences
                                                      EXIST is ﬁrst validated on the real-world Fct4 problem, in-
of x) only covers s2.
                                                      cluding 36 nodes and 46 edges (Fig. 1). The ratio of feasible
  Therefore, a Seeded Init option is devised to remedy the paths is about 10−5 for a maximum path length T = 250.
                                  (   )
above limitation. The idea is to estimate p s, w from a subset A stochastic problem generator has also been designed
  E
of , called Seed set, including feasible paths belonging to [Baskiotis et al., 2006] to fully assess the EXIST perfor-
one single conjunctive subconcept.                    mances. Due to space limitations, three series of results
  A necessary condition for a set of positive examples (fea- will be presented, related to representative “Easy”, “Medium”
sible paths) to represent a conjunctive sub-concept is that its and “Hard” SST problems, where the ratio of feasible paths
least general generalisation4 be correct, i.e. it does not cover respectively ranges in [5 × 10−3, 10−2] for the Easy prob-
any negative example. In our toy example problem, the lgg lems, in [10−5, 10−3] for the Medium problems, and in
                                                         −15   −14
of s1 and s2 is not correct as it covers s3.          [10   , 10  ] for the Hard problems. The number of nodes
                                                      varies in [20, 40] and the path length varies in [120, 250].
                                                      Only 5  EXIST variants will be considered, Greedy and
 Seeded Procedure
 E+                   E−                              SeededGreedy (SG), SeededRouletteWheel (SRW), and ﬁnally
   : set of feasible paths; : set of infeasible paths BandiST (BST)andSeededBandiST (SBST).
    E+ = {         }
 Let      s1,...,sn  be randomly ordered                For each EXIST variant and each problem, the reported
 Let E = {s1}; h1 = s1
     =2                                               result is the number of distinct feasible paths found out of
 For t   ...n                                         10,000 generated paths, averaged over 10 independent runs.
         =    (      )
    Let h  lgg ht−1,st                                The baseline (uniform sampling) approach, outperformed by
                   E−
    If h is correct wrt                               several orders of magnitude, is omitted in the following.
       ht = h; E = E ∪{st}
    Else ht = ht−1                                    5.2  Results
 End For                                              For a better visualisation, the results obtained by each EXIST
 Return E                                             variant are displayed in parallel coordinates for Easy (Fig. 3),
                                                      Medium (Fig. 4) and Hard (Fig. 5) problems, starting from
          Figure 2: Construction of a Seed set.       a 50 feasible/50 infeasible training set. The average results
                                                      and the standard deviation of all Seeded variants are shown in
  Seed sets are stochastically extracted from E using the Table 1.
Seeded procedure (Fig. 2) inspired by [Torre, 2004].Atthe The computational time ranges from 1 to 10 minutes on
initialisation, the set E+ of feasible paths is randomly ordered PC Pentium 3 GHz depending on the problem and the variant
and the seed set E is set to the ﬁrst path in E+. Iteratively, one considered (labelling cost non included).
                              t
considers the current feasible path s and constructs its lgg h                Easy Problems
with the previously selected paths; if h is correct, i.e does not  10000
cover any infeasible paths with respect to the extended Parikh
                                                             8000
map representation, st is added to E. By construction, if the
set of infeasible paths is sufﬁciently representative, E will  6000

only include feasible paths belonging to a conjunctive con-  4000
cept (a single branch of the XORs); therefore the probabili-
                                                             2000                           art1
ties estimated from E will reﬂect the long range dependencies                               art2
among the node transitions.                                                                 art3


                                                         Number  of generated feasible paths  0
                                                                          SG

  The exploration strength of EXIST is enforced by using a                                   BST
                                                                                    SRW
                                                                                                 SBST
restart mechanism to construct another seed set after a while,        Greedy  EXIST Variants
and by discounting the events related to feasible paths that
have been found several times; see [Baskiotis et al., 2006] for Figure 3: Number of distinct feasible paths generated by EX-
more details.                                         IST out of 10,000 trials on Easy problems, starting from 50
                                                      feasible/50 infeasible paths.
  4The least general generalisation (lgg) of a set of propositional
examples is the conjunction of constraints of the type [attribute = In the considered range of problems, the best EXIST vari-
value] that are satisﬁed by all examples. For instance, the lgg of ant is SeededGreedy. On easy problems, BandiST and Seede-
examples s1 and s2 in the extended Parikh representation is [av = dRouletteWheel are efﬁcient too (Fig. 3); but their efﬁciency
3] ∧ [aw,1 = v] ∧ [ax,1 = v].                         decreases as the ratio of feasible paths decreases.

                                                IJCAI-07
                                                  2277                      Medium Problems                 where BandiST is dominated due to its exploration bias. Note
     10000
                                     art4             that both of BandiST and Greedy will explore a transition
                                     art5
      8000                           art6             which has not yet been explored in the current feasible paths
                                                      (p(s, w)=1when there are no paths satisfying the current
      6000                                            event, section 4.3). However, if this trial does not lead to
      4000                                            a feasible path, Greedy will never visit the transition again,
                                                      while BandiST may (and usually will) retry later on.
      2000
                                                        Note also that SeededGreedy displays a signiﬁcantly lower

  Number  of generated feasible paths  0              standard deviation than the other Seeded variants (Table 1).
                    SG
                                      BST
                             SRW
                                           SBST
               Greedy  EXIST Variants                 5.3  Sensitivity wrt initial conditions
Figure 4: EXIST results on Medium problems, with same set- The usability of EXIST would be compromised if a large
ting as in Fig. 3.                                    initial training set were necessary in order to get good re-
                                                      sults. Therefore experiments with various numbers of ini-
                       Hard Problems
     10000                                            tial feasible and infeasible paths (independently selected in
                                     art7
                                     art8             50, 200, 1000) have been conducted, and the results obtained
      8000                           fct4             on a representative medium problem are displayed in Fig. 6.
      6000

      4000                                                                     Problem art5
                                                            10000
                                                                                          50/50
      2000                                                                               50/1000
                                                             8000                        200/200
                                                                                       1000/1000


  Number  of generated feasible paths  0
                                                             6000
                    SG
                                      BST
                             SRW
                                           SBST
               Greedy  EXIST Variants                        4000

Figure 5: EXIST results on Hard problems, with same setting  2000
as in Fig. 3.


                                                         Number  of generated feasible paths  0
                                                                          SG
                                                                                             BST
                                                                                    SRW
                                                                                                 SBST
  The Seeded option is almost always beneﬁcial, especially            Greedy  EXIST Variants
so when combined with the Greedy and RouletteWheel op-
tions, and when applied on hard problems. For hard prob- Figure 6: Sensitivity analysis. Average EXIST results on
lems, the feasible region is divided among many tiny conjunc- some representative Medium problem, depending on the
tive subconcepts. As the probabilities estimated from exam- number of initial feasible and infeasible paths.
ples belonging to different subconcepts are misleading, they
most often result in generating infeasible examples. Usefully, A ﬁrst remark is that increasing the number of infeasi-
the Seeded option allows EXIST to generate infeasible paths ble paths does not improve the results, everything else being
which separate the feasible subconcepts. The Seeded option equal. Concretely, it makes almost no difference to provide
is comparatively less beneﬁcial for BandiST than for the other the system with 50 or 1000 infeasible paths besides 50 fea-
options, as it increases the BandiST bias toward exploration; sible paths. Even more surprisingly, increasing the number
unsurprisingly, exploration is poorly rewarded on hard prob- of feasible paths rather degrades the results (the 1000/1000
lems.                                                 curve is usually well below the 50/50 curve in Fig. 6).
  The comparative performance of Greedy and BandiST de- Both remarks can be explained by modeling the Seeded
pends on the type of problem. On easy problems, BandiST procedure (Fig. 2) as a 3-state automaton. In each step t,the
dominates Greedy. The reverse is true on hard problems, Seeded procedure considers a feasible path st, and the result-
                                                      ing lgg is tested for correctness against the infeasible paths.
                                                      If st belongs to the same subconcept as the previous feasible
    Problems        SG        SBST        SRW         paths (state A), the lgg will be found correct, and the proce-
      Fct4      3754 ± 612  1409 ± 812 3332 ± 580     dure returns to state A. Otherwise (state B), the test against
   Easy    art1 7226 ± 665  4520 ± 225 7270 ± 496     the infeasible paths might reject the lgg (there exists an infea-
           art2  9331 ± 38  2439 ± 110 5600 ± 615     sible path covered by the resulting lgg), st is rejected and the
           art3  9365 ± 65  7879 ± 240 8592 ± 573     procedure returns to state A. Otherwise (state C), there exists
  Medium   art4 9025 ± 118  1744 ± 853 6078 ± 479     no infeasible path enforcing st rejection and preventing the
           art5 8368 ± 149  5106 ± 236 6519 ± 965     overgeneralisation of the seed set. As the seed set will from
           art6 7840 ± 448  4588 ± 610 4920 ± 984     now on contain examples from different subconcepts (state C
   Hard    art7 7582 ± 217    52 ± 8   5590 ± 163     is absorbing), the probabilities estimated from the seed set are
           art8 5496 ± 149  777 ± 223  1757 ± 110     misleading and will likely lead to generate infeasible paths.
                                                        The number and quality of infeasible paths governs the
Table 1: Average number of paths and standard deviation of transition from state B to either A (probability q)orC (prob-
Seeded variants of EXIST.                             ability 1 − q). Although q should exponentially increase wrt

                                                IJCAI-07
                                                  2278