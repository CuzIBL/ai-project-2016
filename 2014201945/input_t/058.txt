          Coupling CSP Decomposition Methods and Diagnosis Algorithms for 
                                          Tree-Structured Systems* 

                       Markus Stumptner Franz Wotawa f 
                 University of South Australia, Technische Universitat Graz 
            Advanced Computing Research Centre Institute for Software Technology (1ST) 
         5095 Mawson Lakes SA, Adelaide, Australia 8010 Graz, Inffeldgasse 16b/2, Austria 
                  mst@cs.unisa.edu.au wotawa@ist.tugraz.at 

                        Abstract                                 This combination is aided by the fact that both subar-
                                                              eas tend to use Constraint Satisfaction Problems (CSPs) as 
     Decomposition methods are used to convert general        their representation of choice. The diagnosis computation 
     constraint satisfaction problems into an equivalent      work [Fattah and Dechter, 1995; Stumptner and Wotawa, 
     tree-structured problem that can be solved more ef•      2001; Mauss and Tatar, 2002] focuses on the relational com•
     fectively. Recently, diagnosis algorithms for tree-      bination of the different constraint relations, while the prob•
     structured systems have been introduced, but the         lem reformulation work views CSPs as (often cyclic) hyper-
     prerequisites of coupling these algorithms to the        graphs that are broken down into tree structures. 
     outcome of decomposition methods have not been              A CSP (V, D, C) comprises a set of variables V, their do•
     analyzed in detail, thus limiting their diagnostic ap•
                                                              mains D, and a set of constraints C. A constraint Ci is tuple 
     plicability. In this paper we generalize the TREE*       (S ,T ) where is its scope and T         is a set of tuples of 
     algorithm and show how to use hypertree decom•             t  i                                 i
                                                              values for the variables in Si. We assume two functions tpl 
     position outcomes as input to the algorithm to com•      and scope on constraints that return the set of tuples and the 
     pute the diagnoses of a general diagnosis problem. 
                                                              scope respectively. Each constraint Ci restricts the possible 
                                                              values of the variables with respect to values of other vari•
1 Introduction                                                ables in the same scope.For example, the digital circuit from 
                                                              Figure 1 can be represented by the following constraints': 
The development of effective algorithms for diagnosing large 
and complex systems remains one of the key issues in model-
based reasoning. Nonetheless, apart from various additional 
optimizations and control strategies (e.g., [de Kleer, 1991]) 
the main architectures for consistency-based diagnosis sys•
tems, TMS [de Kleer and Williams, 1987] and hitting sets 
computation [Reiter, 1987], have remained remarkably sta•
ble since the late 1980s. Over the last years though, a num•
ber of algorithms were published that exploited advantageous 
structural properties of the systems to be diagnosed for sig•
nificant computational speedups [Fattah and Dechter, 1995; 
Stumptner and Wotawa, 2001 ], enabling the very fast diagno•
sis of large tree-structured systems. 
  It was recognized early on that the combination of tree-
oriented algorithms could in principle be combined with a 
second class of algorithms aiming at the decomposition of 
cyclic problems to equivalent tree-structured problems so that  A solution of a CSP is an assignment of values to all vari•
the faster solution algorithms could be brought to bear [Fat• ables that satisfy the given constraints. All values must be 
tah and Dechter, 1995;Darwiche, 1998]. Again, this direction  elements of their variable's domain. The variable assignment 
profits from recent new results relating the different decom• b = l,a = 0,c = 0,/ = 0,g = 0,h = l,i = 0,j = 1 isa 
position algorithms [Gottlob et al., 2000] and analyzing their solution for the above CSP whereas b = l,a = 0,c = 0,f = 
performance [Gottlob et al. , 2002]. This paper joins the two 0, y = 0, h = 1,i = 0,j = 0 is not because constraint N4 is 
strands by tying the link between the recent work on prob•    not satisfied. 
lem decomposition and the TREE* algorithm [Stumptner and        A standard approach for computing solutions for CSPs are 
Wotawa, 2001].                                                backtracking algorithms, which are in the worst case expo•
                                                              nential in the number of variables. However, for a specific 
   This work was partially supported by the Austrian Science Fund 
(FWF) under project grants P15163-1NF and P 15265-INF.           'Note that not all constraints arc components, N1 is the tabular 
   Authors are listed in alphabetical order.                  representation of an equality constraint between connections). 


388                                                                                                         DIAGNOSIS                                                               other techniques, we restrict our examination here to hyper•
                                                               tree decomposition. Note that the result of a decomposition 
                                                               method is always a hypertree. 
                                                                 In [Gottlob et al., 2000] hypertree decomposition is char•
                                                               acterized as follows. A hypertree of a hypergraph if is a triple 
                                                                                          I is a rooted tree with vertices N 
                                                              and edges E, are labeling functions which associate 
                                                               to each vertex a set of variables _ and a 
                                                               set of constraints edges(H). We further define for 
                                                              a subtreeof T asand 
                                                               for any denotes the subtree of T rooted at p. We 
                                                              denote the root of a hypertree by root(T) . 
                                                                 Based on the above definitions, the hypertree decompo•
                                                               sition of a hypergraph H is defined as a hypertree HD — 
                                                                        where T — (TV, E) which satisfies the following 
                                                              conditions: 

                                                                 1. For each edge edges(H), there exists a such 
                                                                   that var(h) 

     Figure 2: A hypergraph representing the constraints        2. For each variable 
                                                                   \(p)} induces a connected subtree of T. 

class of CSPs a solution can be computed in polynomial time.    3. For each 
This class comprises all CSPs that have an acyclic corre•
sponding hypergraph2. A hypergraph of a CSP can be eas•         4. For each 
ily constructed by mapping all variables of the CSP to ver•
tices and the constraint scopes to hyperedges. A CSP with an     Moreover, we say that h edges(H) is strongly covered 
acyclic hypergraph can be solved effectively in a backtrack-   in HD if there exists a vertex p N such that var(h) (p) 
free manner by first traversing the graph from the leafs to   and . A hypertree decomposition HD of a hyper•
the root and computing possible value tuples and secondly,    graph H is a complete decomposition of H if every edge of ff 
traversing the graph from the root to the leafs and selecting  is strongly covered in HD. Note that it is always possible to 
one tuple of a node as a solution. The hypergraph correspond• make an incomplete decomposition complete by adding new 
ing to Fig. 1 is cyclic (see Figure 2).                       vertices to the decomposition. Gottlob et al. [1999b] gave 
   In the rest of the paper, we recapitulate decomposition    an algorithm for computing (complete) hypertree decomposi•
methods, present a version of TREE* that fits these meth•     tions. 
ods, show the interaction of decomposition and TREE*, and        Note that unlike other decomposition methods such as bi-
present an extension to the algorithm that can be used with   connected component decomposition and hinge decomposi•
extended domains as presented in [Mauss and Tatar, 2002].     tion, there is in general no unique hypertree decomposition 
                                                              of a given CSP. Figure 3 shows four possible hypertree de•
2 Decomposition methods                                       compositions for the hypergraph depicted in Figure 2. 
Several different decomposition methods have been pub•
lished, most recently the hypertree decomposition method      3 Diagnosis with TREE* 
[Gottlob et al., 1999a]. This and other structure-based de•
composition methods make compute a tree-structured sys•
tems from general CSPs by elimination of cycles from the      To be self contained we briefly recapitulate the TREE* algo•
CSP. A cycle can be eliminated by applying the relational al• rithm. Stumptner and Wotawa [2001] introduced the TREE* 
gebra join operation to the constraints on the cycle. However, algorithm as an extension of the TREE algorithm. Both al•
blindly joining all constraints in the cycle can result in expo• gorithms work on tree-structured constraint systems. As op•
nential costs for computing the tuples of the joined constraint, posed to TREE which requires the constraints to be mathe•
and a key property of the different decomposition methods is  matical functions, TREE* imposes no limitations on the con•
the different techniques they use to select the constraints to straints. TREE* uses the following auxiliary functions asso•
be joined. Gottlob et al. [2000] compared different decompo•  ciated to constraints: constr denotes all tuples of the con•
sition methods with respect to their width, i.e., the maximum straint, val denotes the tuples remaining after the application 
number of constraints to be joined, and found that hypertree  of TREE*, diags denotes the diagnoses that correspond to 
decomposition is superior with respect to the width. Since hy• a given tuple. Accordingly, a CSP that is to be used for di•
pertree decomposition can be seen as a generalization of the  agnosis purpose has to represent not only the tuples for each 
                                                              constraint but also the diagnoses that correspond to each tu•
                                                              ple. For example, the small circuit from Figure 1 can be rep•
                                                              resented by the following CSP: 


DIAGNOSIS                                                                                                            389                             (a) (b) (c) (d) 

                                  Figure 3: Alternate hypertree decompositions of Figure 2 

                                                               Algorithm TREE* (HD, p, diagSize) 
                                                               Computes all diagnoses up to a pre-specified size for a given 
                                                               tree-structured diagnosis system. 
                                                               Input: A decomposition HD with edges E, the root vertex p, 
                                                               and the pre-specified diagnosis size diagSize. 
                                                               Output: The diagnoses for each value tuple. 


   The tuples of form <x x... x> in the above tables are in•
tended to match all tuples that are not explicitly given in the 
table. Note that the constraint N\ represents a connection and 
is therefore assumed to be always correct. Hence, it always 
returns the empty set as a diagnosis. 
   The original description of the TREE* algorithm was 
                                                                 The TREE* algorithm is called using the root p of the hy•
based on the underlying assumption that the leaf vertices of 
                                                               pertree, i.e., the result of a decomposition, as argument. After 
the tree correspond only to one diagnosis component. This as•
                                                               execution, the computed diagnoses can be found in the diay 
sumption has an impact on the description of the algorithm, 
                                                               column of the tuples associated with the root p. 
but not on the empirical results. If the constraints given to 
                                                                 The TREE* algorithm correctly computes all diagnoses up 
the algorithm do not satisfy this requirement, diagnoses of a 
                                                               to the given size if the following requirements arc fulfilled: 
size (i.e., number of faulty components) larger than specified 
might be returned because there is no way to remove these        1. Every constraint is at least used in one of tree vertices. 
diagnoses from the set of tuples. The requirement did not       2. The induced subtree for every variable is connected. 
constitute a hindrance since [Stumptner and Wotawa, 2001]      Theorem 1 (Correctness) The TREE* algorithm correctly 
did not deal with CSPs resulting from decomposition. To        computes diagnoses up to the pre-specified size. 
explicitly generalize TREE* to interact with decomposition 
                                                                 Proof. The proof is by induction over the size of the tree. 
algorithms, we here present a modified version that removes 
                                                              Base step For each leaf of the tree only lines (l)-(7) and 
this requirement. 
                                                                   (18) of TREE* are executed. In these lines, all tu•
   The following operations are used by TREE*: semi-join           ples that contradict the given observations and all diag•
     for constraints, Cartesian product (x) for combining          noses larger than the specified size are removed. Tuples 
two sets of diagnoses, i.e.,                                       with no corresponding diagnoses are removed. These 
                    and cardinality restriction (|) for remov•     steps do not prevent TREE* from computing a diagno•
ing diagnoses from a set of diagnoses with a size greater than     sis. Hence, all diagnoses (up to the pre-specified size) 
the given value, i.e.,                                             are computed for leafs. 


390                                                                                                          DIAGNOSIS Hypothesis We assume that TREE* correctly computes di•           In the above algorithm the diags function is indexed with 
     agnoses for trees of size smaller than n.                the corresponding vertex of the hypertree or the correspond•
                                                              ing constraint. The function stands for relational join and 
Induction step We now prove that TREE* correctly com•
                                                                for relational projection. Diagnoses are only combined if a 
     putes the diagnoses for trees of size n. The steps (l)-(7) 
                                                              constraint is fully captured by the given vertex of the hyper•
     only reduce the number of diagnoses. Tuples that con•
                                                              tree. Otherwise, it is not considered. Since every constraint 
     tradict the observations are removed. Diagnoses that are 
                                                              must be fully captured by at least one hypertree vertex, no 
     larger than the pre-specified values are removed and tu•
                                                              information is lost by this procedure. 
     ples with a corresponding empty diagnosis set are also 
     removed because they have no influence on the result. In    For example, the join of constraints N2 and N3 would lead 
     step (9) the TREE* algorithm is called recursively. Be•  to the following constraint with 25 tuples (when re•
     cause of our induction hypothesis, the algorithm returns taining the V constants, and of course 64 otherwise): 
     correct diagnoses for each tuple. It remains to prove that 
     the combination of these tuples with the tuple of the cur•
     rent node is done correctly. Since every tuple that joins 
     (line (11)) is considered and since that every diagnosis is 
     combined with every diagnosis of the child vertices (line 
     (12)), this process must lead to a correct result. Hence, 
     TREE* correctly computes the diagnoses in step n as 
     well. 
   Using the same arguments as above we can show that 
TREE* allows for computing all diagnoses providing that all 
the diagnoses for each vertex of the hypertree are computed. 
We omit the actual proof here. 

Theorem 2 (Completeness) The TREE* algorithm com•
putes all diagnoses up to the pre-specified size. 
  The remaining issue now is to determine the conditions that 
a decomposition method must satisfy in order to be used with 
TREE*. Moreover, we examine the computation of the join 
relation for those tree vertices that comprise more than one 
constraint. 

4 Decomposition and Joining of Constraints 
As an example we take the hypertree decomposition result 
from Figure 3(b). In order to apply TREE*, we first have         If, as in this example, the join operation is a Cartesian Prod•
to compute the tuples for the constraints that occur in one   uct, the resulting relation is of course very large. However, 
vertex, e.g., {N2, N3}. The tuples can be computed by first   during the computation of diagnoses using TREE*, many tu•
joining the constraints, and second computing the diagnoses   ples can generally be eliminated because of the given obser•
diags for each tuple of the joined constraint by combining    vations and the pre-specificd maximum diagnosis size. 
the diagnoses associated with the corresponding tuples of the    To illustrate this, assume now that we have a set of obser•
original constraints. The following algorithm computes the    vations and that we arc 
join relation for the constraint of a hypertree vertex p.     searching only for single diagnoses, i.e., diagSize — 1. Us•
                                                              ing the decomposition from Figure 3(b) TREE* is first called 
                                                              with the vertex (constraint) [N ]. After executing lines (1)-
Algorithm JoinRelation (p)                                                                  1
                                                              (7) (including the semijoin that results in the removal of tu•
Computes the join for a hypertree vertex 
                                                              ples that do not fit the operations) the constraint of [N ] is 
Input: A hypertree vertex p.                                                                                        1
                                                              given by: 
Output: The coiistr and diags function of the vertex p. 

                                                                 TREE* is then recursively called on vertex 
                                                              resulting in the following relation, which is substantially 
                                                              smaller than the computed join relation for this vertex, even 
                                                              after ail x entries of the original tables have been replaced 
                                                              by either 0 or 1, while avoiding duplicated entries (first ta•
                                                              ble), then we again recursively call TREE* which leads to the 
                                                              computation of the following relation for vertex (second 
                                                              table): 


DIAGNOSIS                                                                                                            391                                                                resulting hypertree) the decomposition is not cyclic, or that 
                                                               there exists a variable that is used in both sub-trees but not 
                                                               in the parent. In the latter case, the process that computes a 
                                                               solution cannot view the sub-trees as independent problems 
                                                               any more, and TREE* will fail to compute a correct out•
                                                               come. The other conditions of the hypertree decomposition 
                                                               can be relaxed without affecting the result. If condition 3 is 
                                                               not obeyed, that means some nodes contain variables that are 
                                                               not constrained. This may affect the efficiency of the algo•
                                                               rithm (because the node relations include a cartesian product 
                                                               with the values of those variables) but not the correctness. If 
                                                               condition 4 is not obeyed, this means that some variable z 
                                                               such that is not contained in the 
                                                               constraint associated with p, i.e. in relational terms z has been 
                                                               projected away. This means that some subtree of T is going 
                                                               to be less restrictive in execution, leading to excess tuples. 
                                                               However, since the decomposition is required to be complete, 
                                                               all constraints that contain z must exist in unprojected form 
   In the next step TREE* continues the computation at line    somewhere in T. 
 (10) for vertex [N2, N3]. After combining the diagnoses and      These two conditions are true for hypertree decomposition 
 removing the tuples with diagnoses larger than diagSize we    [Gottlob et ai, 1999a], biconnected components [Freuder, 
 get the following relation for [N2, N3]:                       1985], hinge decomposition [Gyssens et al., 1994], and tree 
                                                               clustering [Dechter and Pearl, 1989]. 
                                                                  The following algorithm summarizes the combined use of 
                                                               TREE* and a decomposition method to compute the diag•
                                                               noses for any CSP C of the form described in Section 3. Given 
                                                               a CSP C, using any decomposition method that fulfills the 
                                                               properties of Theorem 3. 
                                                               (1) apply decomposition to C, i.e., compute a 
                                                                     hypertree (TV, E) for the corresponding hypergraph of C 
                                                               (2) for do JoinRelation(f) end for; 
                                                               (3) TREE*(root(T)); 
                                                               (4) return diags(roof(T')); 

   Hence, only the diagnosis {N4} is a single diagnosis for      The pre-compilation performance of the overall algorithm 
 our example.                                                  is that of the decomposition algorithm (examined in [Gottlob 
                                                               et al., 2002]) together with the required costs for joining con•
 5 Putting it all together                                     straints using the JoinRelation algorithm. The diagnosis time 
                                                               is the running time of TREE*. Performance and scalability 
 In order to make use of TREE* for general CSPs, we first      TREE* have been studied in [Stumptner and Wotawa, 2001 ]. 
 apply a decomposition method and then apply the algorithm     Note that the TREE* run time depends on the size of the rela•
 to the resulting acyclic problem. In this section we summarize tions that are stored in the vertices of the resulting hypertree. 
 the requirements placed on the decomposition method.          This size depends on the number of constraints that must be 
                                                               joined, and this in turn corresponds to the width of the de•
 Theorem 3 TREE* computes all consistent diagnoses for a 
                                                               composed system. Hence, using a decomposition method that 
given (possibly cyclic) CSP (V,D, C), if it is applied to the 
                                                               provides a smaller width leads to hypertrees where TREE* 
 decomposition HDof(V,D,C) that was produced by a de•
                                                               performs better. 
 composition method h with the following properties: 
  1. The decomposition result, i.e., a hypertree HD, must be   6 Extension to Intensional Relations 
     complete. 
                                                               In [Stumptner and Wotawa, 2001], we mentioned the pos•
  2. The vertices that use a given variable must form 
                                                               sibility to use other than extensional relations for constraint 
     a connected subtree of the hypertree HD. 
                                                               specifications for the TREE and TREE* algorithm, e.g., com•
   Proof (sketch): We consider each condition in turn. As      puted functions or equations with infinite domains. Such do•
discussed in the previous section, the decomposition method    mains require a different interpretation of the operators that 
must produce a complete decomposition, i.e., every constraint  are used for joining the relations associated with nodes in 
must be strongly covered, as this is a prerequisite for the cor• the tree. Conceptually, however, nothing is changed since, 
rect working of the join algorithm. Concerning condition 2,    as we will show, the definition of the TREE* algorithm fits 
assume that this condition were not satisfied, i.e., that for  the requirements. We show this by adopting the notation 
some Y, does not induce a connected                            used for the basic computational operations of the aggrega•
subtree. This implies either that (if we have no sub-tree of the tion paradigm described in [Mauss and Tatar, 2002]. 


392                                                                                                          DIAGNOSIS 