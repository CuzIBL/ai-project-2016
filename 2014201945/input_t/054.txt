          Formal Verification of Diagnosability via Symbolic Model Checking 

         Alessandro Cimatti Charles Pecheur Roberto Cavada 
               ITC-irst RIACS/NASA Ames Research Center ITC-irst 
          Povo, Trento, Italy Moffett Field, CA, U.S.A. Povo, Trento, Italy 
          mailto:cimatti@irst.itc.it pecheur@ptolcmy.arc.nasa.gov cavada@irst.itc.it 


                     Abstract                          observed system. We propose a new, practical approach to the 
                                                       verification of diagnosability, making the following contribu•
    This paper addresses the formal verification of di•
                                                       tions. First, we provide a formal characterization of diagnos•
    agnosis systems. We tackle the problem of diagnos•
                                                       ability problem, using the idea of context, that explicitly takes 
    ability: given a partially observable dynamic sys•
                                                       into account the run-time conditions under which it should be 
    tem, and a diagnosis system observing its evolution 
                                                       possible to acquire certain information. 
    over time, we discuss how to verify (at design time) 
                                                         Second, we show that a diagnosability condition for a given 
    if the diagnosis system will be able to infer (at run•
                                                       plant is violated if and only if a critical pair can be found. A 
    time) the required information on the hidden part of 
                                                       critical pair is a pair of executions that are indistinguishable 
    the dynamic state. We tackle the problem by look•
                                                       (i.e. share the same inputs and outputs), but hide conditions 
    ing for pairs of scenarios that are observationally 
                                                       that should be distinguished (for instance, to prevent simple 
    indistinguishable, but lead to situations that are re•
                                                       failures to stay undetected and degenerate into catastrophic 
    quired to be distinguished. We reduce the problem 
                                                       events). We define the coupled twin model of the plant, and 
    to a model checking problem. The finite state ma•
                                                       show that it can be used to search for critical pairs. 
    chine modeling the dynamic system is replicated to 
    construct such pairs of scenarios; the diagnosabil•  Third, we recast the problem in the framework of Model 
    ity conditions are formally expressed in temporal  Checking [Clarke et al, 1999], a verification technique that 
    logic; the check for diagnosability is carried out is gaining increasing interest also in AI. With model check•
    by solving a model checking problem. We focus      ing, it is possible to exhaustively analyze the (possibly infi•
    on the practical applicability of the method. We   nite) behaviors of (large sized) finite state machines, and to 
    show how the formalism is adequate to represent    check if requirements expressed in terms of Temporal Log•
    diagnosability problems arising from a significant, ics [Emerson, 1990] are met. We show how to represent a 
    real-world application. Symbolic model checking    diagnosability problem in terms of temporal logic formulae, 
    techniques are used to formally verify and incre•  and how to reduce it to a model checking problem over the 
    mentally refine the diagnosability conditions.     coupled twin model. 
                                                         Finally, we demonstrate the practical applicability within 
                                                       the Livingstone framework, a model-based diagnosis system 
1 Introduction                                         developed at NASA Ames Research Center [Williams and 
Diagnosis is the process of inferring the (most plausible) Nayak, 1996]. We developed a platform able to generate for•
causes for the behavior of a given system, given a set of ob• mal models for the twin plant, starting from Livingstone mod•
servations. In many control applications, ranging from in• els. Several diagnosability problems corresponding to inter•
dustrial plants (e.g. production, power) to transportation (e.g. esting scenarios from real-world applications were tackled by 
railways, avionics, space), diagnosis needs to be carried out means of the NuSMV model checker [Cimatti et al, 2002], 
on-line, in parallel with the control process. This is needed to An experimental analysis shows that the verification of diag•
identify whether the controlled system is working correctly nosability can be practical: large Livingstone models of space 
or not, and to provide the controller with information on the transportation systems are automatically analyzed within sec•
degraded conditions (e.g. what are the malfunctioning de• onds by means of SAT-based symbolic model checking tech•
vices), so that the appropriate counter-measures can be taken. niques. 
The ability to validate such diagnosis systems becomes very The paper is organized as follows. In Section 2, we state 
important, in particular in the case of applications operating our working hypotheses. In Section 3 we formalize the prob•
in hazardous or inaccessible conditions and carrying out vital lem, while in Section 4 we characterize our approach. In Sec•
functions.                                             tion 5, we discuss the application of model checking tech•
  In this paper, we focus on the key issue of diagnosability, niques. In Section 6, we describe the experimental frame-
i.e. the possibility for an ideal diagnosis system to infer accu• work. Finally, Section 7 reviews similar work, and Section 8 
rate and sufficient run-time information on the behavior of the draws some conclusions and outlines future lines of activity. 


DIAGNOSIS                                                                                              363                                                                formulae. (Notice however that the content of the paper is 
        Figure 1: Architecture of a diagnosis system 
                                                               independent of the specific description used to present P.) 
2 Working Hypotheses                                           Definition 2 A feasible execution of steps in P is 
                                                               a sequence such 
We consider a diagnosis system connected to a feedback con•
                                                                                                      and for 0 
trol loop between a plant and its controller (Figure 1). The 
                                                                                         as the set of all feasible execu•
inputs of the plant are the commands issued by the controller; 
                                                               tions of P. The observable trace of a feasible execution 
its outputs are measurements returned back to the controller. 
                                                               is 
The role of the diagnosis system is to observe the inputs and 
the outputs to the plant, and to report a state estimation, track- such a a exists. 
ing the evolution of the unobservable state of the plant. This The above definition defines the dynamics of a plant and its 
task is substantially more complex than diagnosis for a com•   observable counterpart. Notice that if an execution has k 
binatorial, memory-less system. An estimation consists of a    steps, then the corresponding trace. The 
set of possible states of the plant, in the following referred to set of traces is in general a subset In the 
as a belief state. Although diagnosis might rank these states  following we use to denote a feasible execution, and w to 
based on likelihood, as a first approach we ignore that aspect. denote the corresponding (observable) trace. For explanatory 
We also disregard issues such as the correspondence between    purposes, we consider the plant outlined in Figure 2, that is 
the model of the plant and the plant itself. We will focus on  a simplified segment of the real-world application described 
plants modeled as finite-state discrete systems. We assume     in Section 6. A pneumatic valve (PV) controls the flow of a 
that we have a model of the plant as a partially observable    feeding line to the engine, and it is closed in its resting posi•
transition system, according to the following definition.      tion (determined by the action of a spring). A solenoid valve 
Definition 1 A (partially observable) plant is a structure     (SV), when open, can open PV by directing the pneumatic 
                where X, 17, Y are finite sets, respectively   flow against the spring. When SV is closed, the action of the 
called the state space, input space and output space,          spring is no longer contrasted and PV can close. SV can re•
X x U x X is the transition relation, and is ceive an input (open/close), but has no observables. PV has 
the observation relation.                                      two sensors, each providing information on a position (e.g. 
                                                               whether it is open or not). Both valves can become stuck 
We assume that a plantis given. We use                         in their current position. The position of the valves influ•
             to denote states of to denote                     ences the pneumatic and engine flows. Each of the valves 
inputs of P, y, y0, y1, • • • to denote outputs of P. We write has two unobservable variables: state, with values open 
                                                       The     and closed, and f ailure mode, with values stuck and 
state is the "hidden" part of the plant: only the sequences    ok. The input variable can take the values no-cmd, open, 
of inputs and outputs are observable. P covers all types of    and close. The effect of a command depends on the current 
behaviors that diagnosis is expected to handle — including     status. Failures can occur at any time, and are permanent. 
faulty behaviors, with X containing faulty states. In general, Sensors of PV are also associated with a failure_mode 
P need not be deterministic. Thus, the state after a transition variable, that determines what information is conveyed. 
may not be uniquely determined the state before the transition 
and by the input. Observability is modeled by associating to   3 Diagnosability 
each state a (non empty) set of possible outputs. It is therefore 
possible to model different forms of observation, e.g. when    Run-time diagnosis starts from a (possibly partial) initial 
the information conveyed by the sensors is also uncertain. In  knowledge, observes the sequence of inputs and outputs, and 
this paper, we present the (input, state and output) spaces of tries to update a belief state that is an estimate of the possible 
a plant by means of assignment to (input, state and output)    states of the plant. For instance, if S V is commanded open, 
variables ranging over finite sets of values; the transition and and the PV is not sensed open, then some problem should be 
observation relation can be compactly presented with boolean   diagnosed. It could be that SV or PV are stuck, or even that 


364                                                                                                          DIAGNOSIS both PV sensors are not working correctly. Ideally, a diagno­
sis function should return belief states that are as specific (i.e. 
as small) as possible, but include the actual state of the plant. 


The intuition behind correct diagnosis values is that they en­
                                                                                  Figure 3: Critical pair 
compass all potential current states, so that they cannot miss 
the actual state. In the following, we restrict ourselves to cor­
rect diagnosis functions. 
   Diagnosability aims at detecting if (parts of) the hidden 
state can be accurately tracked by looking at the observable 
traces. We use diagnosis conditions to specify which infor­
mation on the state we are interested in distinguishing. 
Definition 4 A diagnosis condition for a plant P is a pair of 
nonempty sets of states 
We can express fault detection, i.e. telling if any fault is 
                                                               4 Diagnosability as Coupled Reachability 
present or fault separation, i.e. distin­
guishing between different faults (or fault classes) (         Our approach to reasoning about diagnosability is based on 
faulty). Intuitively, a diagnosis value is not satisfactory if it refutation, i.e. we search for ways in which the diagnosability 
intersects with both sides of the condition. In the example,   property can be violated. Intuitively, we verify the diagnos­
a fault separation condition is not satisfied if we have a be­ ability of by checking that P does not have a critical 
lief state containing both a state where PV is faulty, and one pair, i.e. two executions with identical observable traces, one 
where SV is faulty.                                            leading to c1, one leading to c2 (see Figure 3). 
However, it would be unrealistic to require that diagnosis pro­ Definition 7 A critical pair of a plant P, with trace w, for a 
vide correct and exact state estimations, instantaneously and  diagnosis condition is a pair of feasible executions 
under all circumstances. For instance, a stuck PV will stay 
unnoticed at least as long as SV is not operated. Rather, we 
require a diagnosis system to be able to decide between al­
ternative conditions on the state of the system in the context 
where the distinction becomes critical. 
                                                               The absence of critical pairs for in a given context is 
                                                               a necessary and sufficient condition for to be diag-
                                                               nosable in that context. 
                                                               Theorem 8 is diagnosable over C in P, if and only 
                                                               if P has no critical pair for 

Intuitively, 0 defines the initial conditions under which diag­ To prove the theorem, we introduce the notion of perfect di-
nosability is to be investigated, by inducing of a set of disjoint agnosis, written i.e. the most specific correct diagnosis 
belief states. Basically, the initial belief state XQ must fall function that can be made assuming full knowledge of P. 
within one of the belief states induced by (the condition on   Definition 9 The perfect diagnosis for a plant P is the diag-
  can be stated as " For nosis function 
example, can partition states according to the positions of 
PV and SV, to capture the assumption that we initially (only)  Given an initial belief state X0 and trace returns 
know those positions. characterizes pairs of relevant exe­     exactly all states that can be reached from x0 through w. It is 
cutions. For instance, we may want to express the fact that the easy to see that is correct, and that it is the most informative 
controller commands SV to be open and closed at least one      diagnosis function, i.e. for any correct 
time. In the case of fault detection, we might want to state       We observe that a condition is diagnosable in a 
that the elements of are pairs of traces, there the first are  plant P over a context C if and only if from 
without faults, while the second ones have exactly one fault.  Definition 6, if 

Notice that expressing would be inadequate:                    C2. Therefore, satisfies any diagnosable condition, since 
for instance, in fault separation it would be impossible to con­ its diagnosis values are more specific than any other correct 
strain the two runs to have different failures. In the following diagnosis function. 
we assume that a context is given. The notion                  Proof of Theorem 8 is not diagnosable in P over C; 

of diagnosability is precisely characterized as follows.       if and only if there exist X0 and w such that 


DIAGNOSIS                                                                                                             365             if and only if there exist and is rather simple, and is based on the idea that the state, input 
               such that                                       and output spaces of the plant can be encoded into the state 
                                                               space of the Kripke structure. The information on the inputs, 
 x2 if and only if there exists a critical pair for for 
                                                               labeling the transitions in P, simply becomes part of the state 
   In order to search for critical pairs in P, we build the cou­ of Kp, and is to be interpreted as "the input that will be pro­
pled twin plant for P, written P • P, i.e. a "Siamese twins**  cessed in the next transition**. More formally, each state s in 
 plant, made out of two copies of P, whose inputs and outputs  Kp is associated with a valuation that characterizes a triple 
 are forced to be identical.                                                 P is in state x, output y is observed and input 
                                                               u is received. The dynamics of P directly induce the dynam­

                                                               ics of Kp. For each feasible execution in P of the form 
                                                                                                  there is a corresponding 
                                                               path in Kp, i.e. a sequence of stateswhere 
                                                               each S is associated with the triple The same 
                                                               mapping lifts to the coupled twin plant construction. (In the 
                                                               above description, we omit a few technical details, having to 
   In the following, we assume that the coupled twin plant     do in particular with the fact that a Kripke structure is as­
 P • P of P is given. The importance of the coupled twin plant sumed to be total, i.e. every state has at least one successor. 
construction is shown by the following theorem.                In this way, it is possible to assume that the analyzed paths are 
                                                               infinite. Since inputs become part of the state, it is possible 
Theorem 11are two 
                                                               that the transition relation is no longer total. There are stan­
feasible executions in P if and only if                        dard workarounds to this problem, routinely used in verifica­
 (x1, X2) is a feasible execution in P ■ P.                    tion and in AI planning. See for instance [Cimatti and Roveri, 
This is easily demonstrated by induction on the length k of    2000].) In the following, we assume that Kripke structure 
executions. When From Defini­                                  Kp.p corresponding to the coupled twin plant P ■ P is given. 
tion 10, • X and                                                 The second element from model checking is the symbolic 
                         The step case is proved by extend­    representation. The state of Kp.p is defined with a vec­
ing with a transition the executions of length k, for which the 
                                                               tor of variables (x1,x2,u,y), respectively ranging over Ar, 
theorem holds. From Definition 10, the transitions in P • P    X, U and Y. We can use formulae to characterize sets of 
mimic the transitions in P. For the last observation, we rea­  states. In Kp.p we express atomic propositions over such 
son as for the base case.                                      variables. We can have equalities between variables and the 
                                                               corresponding values: PI.PV,input = close denotes 
5 Diagnosability via Model Checking                            the set of states where the first instance of PV receives the 
                                                               close command. Variables of the same type can be equated: 
We work in the framework of Model Checking [Clarke et al, 
                                                               PI. SV. f ailure_mode = P2 . SV. f ailure mode de­
 1999], a formal verification technique that is increasingly ap­
                                                               scribes the set of states where the two instances of SV in 
plied to the design of industrial digital systems (e.g. com­
                                                               the twin plant have the same failure mode. Any subset 
munication protocols, hardware design). Model checking al­
                                                               c of XxXxUxY can be described with a formula 
lows to verify if the (possibly infinite) behaviors of a system 
                                                               c(x ,X2,y,u). For instance, the formula 
satisfy a given property. The system being analyzed is pre­       1
                                                               expresses a state of the twin plant where the first instance is in 
sented as a Kripke structure, while properties are expressed 
                                                               C  and the second is in C . Similarly, is a (proposi-
in a temporal logic [Emerson, 1990]. Model checking algo­       1                     2
rithms are based on the exhaustive exploration of the Kripke   tional) formula expressing, in symbolic form, the equivalence 
structure. The technique is completely automatic and, if a     relation 
property is violated, it can produce a counterexample, i.e. a    The third ingredient from model checking is the use of 
simulation witnessing the violation. Symbolic model check­     temporal logics to characterize behaviors of the system over 
ing [McMillan, 1993] is based on the manipulation of sets      time. We use LTL (Linear Temporal Logic [Emerson, 1990]), 
of states described by boolean formulae; efficient engines,    where formulae are constructed starting by combining atomic 
such as Binary Decision Diagrams (BDDs) [Bryant, 1986]         propositions with boolean operators and temporal modalities. 
and SAT solvers [Moskewicz et al., 2001 ], provide a basis for If and are LTL formulae, so are (sometimes in the 
efficient representation and exploration of the search space.  future (always in the future(sometimes in 
  Our approach to diagnosability inherits several elements     the future and, until then, (in the next time step 
from model checking. The first is that a plant P can be asso­  An LTL formula holds on a path TT (written 
ciated with a Kripke structure Kp representing its behavior.   true in n at (step) 0 (written . If p is an atomic propo­
This makes it possible for us to directly analyze a plant with sition, then iff p is true according to the assignment 
model checking techniques. A Kripke structure is basically a   associated with the i-th state of Boolean connectives have 
nondeterministic transition system, where transitions are not  the standard interpretation and 
labeled, while information is associated with states (i.e. each          The interesting cases of temporal operators are as 
state is associated with a valuation to the state variables of 
the structure). The mapping from plant to Kripke structure                                                  iff there exists 


366                                                                                                          DIAGNOSIS MODULE SV_type (cmd_in)                                        MODULE main 
                                                               VAR 
                                                                  sv_cmd : { no_cmd, open, close }; 
MODULE PV_type ( )                                                PI : EX_type(sv_crnd, ...); 
 VAR pneumaticsLineln : {abvThresh,blwThresh};                   P2 : EX_type(sv_cmd, ...); 
 VAR valvePositionValue : {open,closed};                       INVAR 
 VAR mode : {stuckOpen,nominal,stuckClosed};                     (PI.PV.sense_open = P2.PV.sense_open) & . . . 

 DEFINE _faultmodes := {stuckOpen,stuckClosed}; 
  DEFINE _broken := mode in __faultmodes;                             Figure 5: The SMV schema for the twin plant 
 DEFINE _brokencount := _broken; 
 DEFINE _brokenprob := 
   case                                                        6 Experimental Evaluation 
     mode = stuckOpen : 3; 
     mode = stuckClosed : 3;                                   We analyzed the practical applicability of our approach 
     else : 0;                                                 within the Livingstone framework. Livingstone is a model-
   esac;                                                       based health monitoring system developed at NASA Ames 
                                                               [Williams and Nayak, 1996]. It uses a model of a physical 
MODULE EX_type (sv_cmd_in, ...)                                system, such as a spacecraft, to infer its state and diagnose 
 SV : SV_type(sv_cmd_in);                                      faults from observations. Livingstone is one of the three parts 
  PV : PV_type( );                                             of the Remote Agent (RA), an autonomous spacecraft con­
                                                               troller developed by NASA Ames Research Center jointly 
 DEFINE _brokencount := SV.__broken +                          with the Jet Propulsion Laboratory. RA was the first Al 
                               PV. broken + 
                                                               software to control an operational spacecraft [Muscettola et 
                                                               al, 1998]. Livingstone has also been used in other applica­
                                                               tions such as the control of the In-Situ Propellant Production 
         Figure 4: The SMV model for the example               system (1SPP) for Mars missions [Clancy et al, 1999], the 
                                                               monitoring of a mobile robot [Simmons et al., 2001 ], and In­
                                                               telligent Vehicle Health Management (IVHM) for experimen­
                                                               tal space transportation vehicles [Bajwa and Sweet, 2002]. 
                                                                 Livingstone uses a qualitative relational model describing 
                                                               the evolution of observable and hidden variables. Continuous 
                                                               physical domains are abstracted into discrete intervals such 
                                                               as {low, nominal, high}. Each component has a mode 
                                                               variable identifying its nominal and fault modes. Livingstone 
                                                               models are specified in a hierarchical, declarative formalism 
   A diagnosis condition with a context is represented with    called JMPL, or using a graphical development environment. 
temporal logic formula such that holds iff there               Livingstone observes the commands issued to the plant and 
is a critical pair. We express reachability in P • P of a criti­ uses the model to predict the plant state. It then compares the 
cal pair for a diagnosis condition with the formula:           predicted state against observations received from the actual 
                        Model checking can be run on the       sensors. If a discrepancy is found, Livingstone performs a 
problem . If the answer is true,                               diagnosis by searching for the most likely configuration of 
then we have a witness for the a critical pair. Given the con­ component modes that are consistent with the observations. 
text we enforce the initial condition with                       Livingstone models directly induce a synchronous transi­
the formula . The conjunc­                                     tions systems, very similar to a plant model. Pecheur and 
tion has the effect of restricting the analysis to the paths in Simmons [Pecheur and Simmons, 2000] have developed a 
Kp.p starting from the states that satisfy is taken            translator able to convert a Livingstone model and a re­
into account assuming that a characterization of the sets of   lated set of specifications in the language of the SMV model 
traces is described by an LTL formula . The                    checker [McMillan, 1993], and to convert back the diagnostic 
model checking problem corresponding to diagnosability is      traces in terms of the Livingstone model. Figure 4 outlines 
                                                               the structure of the example plant in SMV language. For each 
In practice, several simplifications are possible. Often       component type, there is a corresponding module. The first 
                  can be expressed in terms of propositional   module statements define the model for the SV and the PV. 
constraints that must hold on all the states                   For each of the components, a set of variables is defined, the 
of the execution; in such cases diagnosability in context C    dynamics of which is directly induced from the Livingstone 
is basically represented by the LTL formula                    model. Notice the _brokenprob variable, whose numeri­
                                         . Notice that the     cal value is the (negated) logarithm of the probability of fail­
formula holds if the path condition holds until the con­       ure for the component (e.g. 10 -3). This enables for a (rough) 

ditions c1 and c2 are reached. When the context does not       analysis of failure probabilities. These modules are instan­
constraint the executions, the above formula is equivalent to  tiated in the EX module, with a parameter representing the 
                                                               commands to PV. 


DIAGNOSIS                                                                                                             367 