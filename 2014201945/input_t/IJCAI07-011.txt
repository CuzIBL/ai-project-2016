                                    The Design of ESSENCE:
           A Constraint Language for Specifying Combinatorial Problems

                      Alan M. Frisch1      Matthew Grum1         Chris Jefferson2
                          Bernadette Mart´ınez Hernandez´    1   Ian Miguel3
    1Artiﬁcial Intelligence Group, Dept. of Computer Science, Univ. of York, UK. {frisch, grum, berna}@cs.york.ac.uk
              2Oxford University Computing Laboratory, Univ. of Oxford, UK. chrisj@comlab.ox.ac.uk
                  3School of Computer Science, Univ. of St. Andrews, UK. ianm@dcs.st-and.ac.uk

                    Abstract                          domain elements are combinatorial objects of that type and
                                                      constraints that operate on that type. This enables problems
    ESSENCE is a new formal language for specify-     to be stated directly and naturally; without the decision vari-
    ing combinatorial problems in a manner similar    ables of the appropriate type the problem would have to be
    to natural rigorous speciﬁcations that use a mix- “modelled” by encoding the desired combinatorial object as
    ture of natural language and discrete mathematics. a collection of constrained decision variables of some other
    ESSENCE provides a high level of abstraction, much type, such as integers.
    of which is the consequence of the provision of     As our motivations — and hence our methodology and re-
    decision variables whose values can be combina-
                                                      sults — for developing ESSENCE differ greatly from those that
    torial objects, such as tuples, sets, multisets, rela- have lead to the development of other constraint languages it
    tions, partitions and functions. ESSENCE also al- is important to consider these carefully at the outset.
    lows these combinatorial objects to be nested to ar-
                                                        Our primary motivation comes from our ongoing study
    bitrary depth, thus providing, for example, sets of
                                                      of the automation of constraint modelling. Constraint mod-
    partitions, sets of sets of partitions, and so forth.
                                                      elling is the process of reducing a given problem to the ﬁnite-
    Therefore, a problem that requires ﬁnding a com-
                                                      domain constraint satisfaction or optimisation problem (CSP)
    plex combinatorial object can be directly speciﬁed
                                                      in which all the domains and constraints are supported by the
    by using a decision variable whose type is precisely
                                                      intended solver technology. In current practice, this process is
    that combinatorial object.
                                                      conducted manually and unsystematically — that is, it is still
                                                      an art. As current solvers provide decision variables whose
1  Introduction                                       domains contain atomic values or, sometimes, ﬁnite sets of
                          1                           atomic values, models must always be in terms of these. We
This paper describes ESSENCE, a new language for speci- call such variables atomic and atomic set variables, respec-
fying combinatorial (decision or optimisation) problems at a tively. As an example, consider the Social Golfers Problem
high level of abstraction. ESSENCE is the result of our attempt (SGP), which requires partitioning a set of golfers into equal-
to design a formal language that enables abstract problem sized groups in each week of a tournament subject to a certain
speciﬁcations that are similar to rigorous speciﬁcations that constraint. Thus, the goal is to ﬁnd a multiset of regular parti-
use a mixture of natural language and discrete mathematics, tions2 that satisﬁes the constraint. A model for the SGP must
                                        [    ]
such as those catalogued by Garey and Johnson 1979 .  therefore represent this multiset of regular partitions by a col-
  ESSENCE is intended to be accessible to anyone with a lection of constrained atomic or atomic set variables. There
background in discrete mathematics; no expertise in con- are at least 72 ways that this can be done [Frisch et al., 2005c].
straint programming should be needed. Our working hypoth-
                                                        To automatically generate models for a problem, one must
esis has been that this could be achieved by modelling the
                                                      start with a formal speciﬁcation of the problem and this spec-
language after the rigorous speciﬁcations that are naturally
                                                      iﬁcation must be sufﬁciently abstract that no modelling de-
used to describe combinatorial problems rather than develop-
                                                      cisions have been made in constructing it. Thus, the formal
ing some form of logical language, such as Z [Spivey, 1989]
                                                      language for writing speciﬁcations must provide a level of ab-
or NP-SPEC [Cadoli et al., 2000]. This has resulted in a
                                                      straction above that at which modelling decisions are made.
language that, to a ﬁrst approximation, is a constraint lan-
                                                      We refer to such a language as a problem speciﬁcation lan-
guage, such as OPL [Van Hentenryck, 1999], F [Hnich, 2003]
                                                      guage and distinguish it from modelling languages, whose
or ESRA [Flener et al., 2004], enhanced with features that
                                                      purpose is to enable the speciﬁcation of models. Thus, de-
greatly increase its level of abstraction. Most importantly, as a
                                                      signing a problem speciﬁcation language is a prerequisite to
combinatorial problem requires ﬁnding a certain type of com-
                                                      studying automated modelling and the goal of this paper is to
binatorial object, ESSENCE provides decision variables whose
                                                      put forward a language that makes a large step towards satis-
  1ESSENCE version 1.1.0 is used within this paper. A full speciﬁ-
cation of the language can be found at [York Web, 2006]. 2A partition is regular if all its subsets have the same cardinality.

                                                IJCAI-07
                                                   80fying this challenging prerequisite.                   Mystery Problem:
  Another motivation for designing ESSENCE is that formal   given     U enum(...), s : U → int (1...),
problem speciﬁcations could facilitate communication be-              v : U → int (1...), B, K: int
                                                                       
                                                            find      UP: set of U  P
tween humans better than the informal speciﬁcations that are                 ( ) ≤         ( ) ≥
currently used and further beneﬁts could accrue from stan-  such that   u∈U .s u B,  u∈U .v u K
dardising a problem speciﬁcation language. For example, the Golomb Ruler Problem (GRP): Given n, put n integer ticks on a ruler of size m
informal problem descriptions in the CSPLib problem library such that all inter-tick distances are unique. Minimise m.
(http://csplib.org) could be replaced or supplemented by for- given n : int
                                                       where      n ≥ 0
mal ones, but doing so requires the availability of a problem             n
                                                       letting    bound be 2
speciﬁcation language as the founders of CSPLib insisted on find  Ticks: set (size n) of int (0..bound)
describing problems rather than models. Using formal speci- minimising max(Ticks)
                                                                  ∀                         =    =⇒
                                                       such that   pair1,pair2:set (size 2) of int⊆Ticks .pair1 pair2
ﬁcations for human communication imposes the requirement           max(   ) − min( ) =max(  ) − min( )
that the language is natural — that is, it is similar to the           pair1    pair1     pair2    pair2
manner in which people think of problems and the style in SONET Problem: A SONET communication network comprises a number of
which they specify them informally. Naturalness is also an rings, each joining a number of nodes. A node is installed on a ring using an ADM
                                                       and there is a capacity bound on the number of ADMs that can be installed on a
important property for the input language of an an automated ring. Each node can be installed on more than one ring. Communication can be
modelling system; one cannot claim to have an automated routed between a pair of nodes only if both are installed on a common ring. Given
                                                       the capacity bound and a speciﬁcation of which pairs of nodes must communicate,
modelling system if using it requires a major translation of allocate a set of nodes to each ring so that the given communication demands are
the problem into the system’s input language. Finally, exper- met. The objective is to minimise the number of ADMs used. (This is a common
tise in constraint modelling or constraint solving should not simpliﬁcation of the full SONET problem, as described by Frisch et.al. [2005b])
be needed for writing a formal problem speciﬁcation, be it   given     nrings, nnodes, capacity : int (1...)
for human communication or for input to an automated mod-    letting   Nodes be int(1..nnodes)
elling system.                                               given     demand : set of set (size 2) of Nodes
                                                             find      network : mset (size nrings) of
  Three primary objectives have driven the design of                   P   set (maxsize capacity) of Nodes
                                                                               |   |
ESSENCE. This section has discussed two: The language        minimising ring∈network ring
                                                                       ∀      ∃           ⊆
should be natural enough to be understood by someone with    such that  pair∈demand. ring∈network.pair ring
a background in discrete mathematics and it should provide Social Golfers Problem (SGP): In a golf club there are a number of golfers who
a high level of abstraction. These two objectives are related; wish to play together in g groups of size s. Find a schedule of play for w weeks
                                                       such that no pair of golfers play together more than once. (This transforms into a
providing an appropriate level of abstraction is necessary to decision problem and parameterises problem number 10 in CSPLib.)
achieve naturalness. The third design objective is that prob-
lems speciﬁed in the language can be effectively mapped to given w, g, s : int (1...)
                                                       letting  golfers be new type of size g ∗ s
CSPs. As an illustration, one consequence of this objective is find sched : mset (size w) of rpartition (size s) of golfers
                                                                ∀             1 =   2=⇒
that every decision variable in ESSENCE is associated with a such that week1,week2∈sched.week week
                                                                   ∀group1∈week1,group2∈week2.|group1 ∩ group2| < 2
ﬁnite domain.                                            Alternative constraint:
  The remainder of this paper introduces ESSENCE and argues such that ∀golfer1,golfer2P :golfers.golfer1 = golfer2 =⇒
                                                                   (       together(golfer1, golfer2, week)) 2
that it largely meets its design objectives. This paper does         week∈sched .                 <
not present a formal syntax (this can be found at [York Web,
2006]) or a formal semantics (this can be found in [Frisch et Figure 1: ESSENCE speciﬁcations of four problems.
al., 2005a]).

2  An Introduction to ESSENCE      by Example         of discrete mathematics. Hence, someone able to understand
                                                      rigorous problem speciﬁcations that employ discrete math-
Through the presentation of examples, this section both intro- ematics can, with little training, also understand ESSENCE
duces ESSENCE and demonstrates its naturalness.       speciﬁcations. This is a signiﬁcant advantage as far more
  We begin by asking the reader to examine the ﬁrst ESSENCE people are familiar with discrete mathematics than constraint
speciﬁcation given in Fig. 1. This is a speciﬁcation of a well- programming.
known problem. Can you identify it?
  You should have been able to identify this as the Knap- Natural problem speciﬁcations, such as the one above,
                                                      identify what is given (the parameters to the problem), what
sack decision problem because the ESSENCE speciﬁcation is
nearly identical to the speciﬁcation given by Garey and John- combinatorial objects must be found (the decision vari-
son [1979, problem MP9, page 247]:                    ables) and what constraints the objects must be satisfy to
                                               +      be a solution. The speciﬁcation might also introduce some
  INSTANCE: Finite set U, for each u ∈ U: a size s(u) ∈ Z ,a
             +                                        terminology, give an objective function if the problem is
  value v(u)∈Z and positive integers B and K.
                                       P              an optimisation problem, and identify conditions that must
                         U  ⊆ U             s(u) ≤
  QUESTION:P Is there a subset such that u∈U         be met by the parameter values. ESSENCE supports these
  B          v(u) ≥ K
    and  u∈U        ?                                components of a problem speciﬁcation with seven kinds
  The similarity of this ESSENCE speciﬁcation to the  of statements, signalled by the by the keywords given,
naturally-arising problem speciﬁcation illustrates our main where, letting, find, maximising, minimising and
point: Problems are often speciﬁed rigorously via discrete such that. letting statements declare constant identi-
mathematics. ESSENCE is based on the notation and concepts ﬁers and user-deﬁned types. given statements declare pa-

                                                IJCAI-07
                                                   81rameters, whose values are input to specify the instance of socialisation constraint. The ﬁrst constraint quantiﬁes over
the problem class. Parameter values are not part of the the weeks, ensuring that the size of the intersection between
problem speciﬁcation. where statements dictate allowed pa- every pair of elements of the corresponding partitions is at
rameter values; only allowed values designate valid prob- most one (otherwise the same two golfers are in a group to-
lem instances. find statements declare decision variables. gether more than once). The alternative constraint quantiﬁes
A minimising  or maximising statement gives the objec- over the pairs of golfers, ensuring that they are partitioned to-
tive function, if any. Finally, such that statements give the gether (via the global constraint together) over the weeks
problem constraints.                                  of the schedule at most once. Note that here we make use of
  An ESSENCE speciﬁcation is a list of statements composed a facility common to constraint languages: treating Booleans
according to the regular expression:                  as 0/1 for the purpose of counting.
                     ∗                          ∗
  (given | letting | where | find) [minimising | maximising](such that)
  Now consider the speciﬁcation of the Golomb Ruler Prob- 3 The Features of ESSENCE
lem (GRP, problem 6 in CSPLib) in Fig. 1, and the instance This section explains the most signiﬁcant features of
obtained by letting n be 4. The domain of the decision vari-
                                                      ESSENCE. The ﬁrst two subsections discuss types and do-
able Ticks contains all sets of four elements drawn from
{0, .., 16}                      Ticks   {0, 1, 3, 7} mains and the next two discuss expressions and quantiﬁca-
        . Consider an assignment of    to         .   tion.
Is this a solution to this instance? If we have succeeded in
                                                        ESSENCE is a strongly-typed language; every expression
our goal of making ESSENCE speciﬁcations natural to those has a type and the parser that can infer the types of expres-
with a discrete mathematics background, then it should be
                                         {0, 1, 3, 7} sions and can perform type-checking. Types are also impor-
clear that it is: given any two distinct pairs from , tant in determining the denotation of an overloaded operator.
the distance between one pair, max(pair1) − min(pair1) is
                                      max(     ) −    For example, the union operator can denote set union or mul-
different from the distance between the other pair2   tiset union depending on the types of its arguments.
min(pair2). We believe that the reader will concur that the
                                                        ESSENCE is a ﬁnite-domain language; every decision vari-
ESSENCE speciﬁcation closely matches the given English de- able is associated with a ﬁnite domain of values. These do-
scription, and is substantially closer than a standard CSP mains can be quite intricate sets of values. For example a
model of the problem.                                 domain could be any ﬁnite subset of integers or it could be
  The GRP speciﬁcation ﬁrst declares parameter n (valid
                          bound                       the set of two-element sets drawn from a given ﬁnite set of
when positive) and identiﬁer   .  The declaration of  integers.
bound uses n,son must be declared ﬁrst. Identiﬁers must be
                                                        Types and domains play a similar role; they prescribe a
declared before use, preventing cyclical deﬁnitions and deci-
                                                      range of values that a variable can take. It is tempting — and,
sion variables from being used to deﬁne constants or param-
                                                      indeed, we were tempted — to view types and domains as one
eters.
                                                      and the same thing. However, this view leads to the difﬁcult,
  Constraints are built from parameters, constants, quanti-
                                                      if not unsolvable, problem that the intricate patterns used in
ﬁed variables and decision variables using operators com-
                                                      constructing domains must be handled by the type system.
monly found in mathematics. ESSENCE also includes variable
                                                      For example, if every ﬁnite subset of the integers is a distinct
binders such as ∀ , ∃ and Σ , where x can range over any
              x   x      x                            type then the problem of assigning types to expressions is
speciﬁed ﬁnite domain (e.g. integer range but not integer).
                                                      difﬁcult, if not impossible.
The GRP constraint can be read “For any two unordered pairs
                                                        As we have desired to keep the type system of ESSENCE
of ticks, pair1 and pair2, if the two pairs are different then the
                                                      simple, we have reached the decision that types and domains
distance between pair1 is not equal to the distance between
                                                      are distinct, though closely related concepts. Types are sets
pair2.”
                                                      that contain all elements that have a similar structure, whereas
  Now consider the speciﬁcation of the SONET problem
                                                      domains are sets drawn from a single type. In this manner,
(Fig. 1). Notice that Nodes is declared to be a domain whose
                                                      each domain is associated with an underlying type. For ex-
elements are the integers in the range 1..nnodes. The param-
                                                      ample integer is the type underlying the domain comprising
eter demand is to be instantiated with a set of sets, where
                                                      integers between 1 and 10; set of integers is the type under-
each inner set has cardinality two. The goal is to ﬁnd a mul-
                                                      lying the domain comprising all sets of two integers between
tiset (the rings), each element of which is a set of Nodes (the
                                                      1 and 10. Type checking, type inference, and operator over-
nodes on that ring). The objective is to minimise the sum of
                                                      loading are based only on types, not on domains.
the number of nodes installed on each ring. The constraint
ensures that any pair of nodes that must communicate are in- Types Our design goal has been to provide ESSENCE with
stalled on a common ring.                             a rich collection of types, yet a simple type system. The rich-
  Finally, Fig. 1 gives two versions of a speciﬁcation of the ness of the types comes from the large number of types and
Social Golfers problem (SGP). As the problem description type constructors that are supported. The simplicity of the
does not refer to the golfers individually, they are speciﬁed type system comes from the fact that typing is static and that
naturally with an unnamed type. The decision variable is rep- all types are disjoint.
resented straightforwardly as a multiset (the fact that it is a The atomic types of ESSENCE are int (integer), bool
set is an implied constraint) of regular partitions, (regularity (Boolean), user-deﬁned enumerated types and user-deﬁned
guarantees equal-sized partitions) each representing a week unnamed types. The two user-deﬁned types are deﬁned
of play. The speciﬁcations differ only in the expression of the through letting or given statements such as the following:

                                                IJCAI-07
                                                   82  letting players be new type enum {alan, ian, chris, berna} mains to be named by annotating the name of the type with
  letting rings be new type of size 4                 restrictions that select particular values of the type. For ex-
  given players new type enum (...)                   ample, int (1..10) and set (size 2) of int (1..10) are both
  The ﬁrst statement deﬁnes a new type comprising four domains. As annotations are always written in parenthesis,
named atomic elements. As all types are disjoint, the ele- the type underlying a domain can always be obtained by re-
ments of this type cannot be members of any other type, and moving the parenthesised subexpressions. Thus, the types
the four names cannot be used to name anything else. The underlying the above two domains are int and set of int,
second statement also deﬁnes a new type comprising four el- respectively.
ements; however these elements are not named. These four First consider how atomic types can be annotated to form
elements are distinct from the elements of all other types. The atomic domains. Atomic domains can be formed by taking
third statement is similar to the ﬁrst except that the enumer- subsets of the integer or Boolean type or any enumerated
ation of the elements of the type is provided as input rather type. These subsets are identiﬁed either by a list contain-
than as part of the speciﬁcation.                     ing values and value ranges or by an arbitrary set expression.
  The elements of the integer and Boolean types and of all Examples include:
enumerated types are totally ordered. The integers are or- players (alan..chris) (the players from alan to chris inclusive)
dered in the usual way, the Booleans are ordered by F < T, int (1, 3, 4..10) (a mixture of values and ranges)
and the elements of an enumerated type take on the order in int (1..)    (the positive integers)
which they are named in the letting statement or given as in- int (..-1,1..) (the non-zero integers)
                                                        int (l..u)       (the integers from l to u inclusive)
put. All other types — user-deﬁned unnamed types and all     S ∪{0, 1}               S
compound types — are unordered.                         int (        )   (the integers in and 0 and 1)
  Compound types are built with type constructors to form In these last two examples, l, u and S can be parameters or
sets, multisets, functions, tuples, relations, partitions and ma- identiﬁers declared by a letting statement. This illustrates
trices. If τ,τ1,τ2,... are the names of any types, θ1,θ2,... another important distinction between domains and types. Pa-
are the names of any ordered types, φ is the name of a ﬁnite rameters can appear in the annotations of a domain but they
type (bool, an enumerated type or an unnamed type) and n cannot appear in a type. However, decision variables cannot
is any positive integer then the following all name compound appear in domains, a requirement that is needed if speciﬁca-
types:                                                tions are to be mapped to CSPs.
  set of τ            (a ﬁnite set drawn from τ)        Now consider how type constructors can be annotated. The
  mset of τ           (a ﬁnite multiset drawn from τ) set, multiset, partition, regular partition and relation construc-
                            3
  τ1 → τ2             (a ﬁnite partial function with domain τ1 tors can all be annotated by inserting, before the keyword
                       and codomain τ2)               “of,” a size restriction of the form (size intexp)or(maxsize
  tuple τ1,...,τn   (an n-tuple)                    intexp), where intexp is an integer expression that contains no
  rel τ1 ×···×τn      (a ﬁnite n-ary relation)        decision variables. Thus, all the following are domains:
               φ                             φ
  partition of        (a partition of the elements of ) set (size n) of int
                φ                                  φ
  rpartition of       (a regular partition of the elements of ) mset (maxsize n+2) of int (1..100)
                         n
  matrix indexed  by  (an -dimensional matrix)          partition  (size  m) of mset  (maxsize 4) of int
     θ ,...,θ     τ
    [ 1     n ] of                                      (1..100)
                                 ×
For example, set of int and rel int int are both types. The second and third of these domains illustrate that the an-
The type constructors can be nested to arbitrary depth, thus notations can be attached not only to the outer constructor,
allowing types such as                                but also to the nested constructors and atomic types. The
  set of set of set of int                            ESSENCE syntax has been designed so that there is no am-
  rel partition of players × mset of set of int       biguity about where an annotation is attached.
  Notice that ﬁniteness plays a central role in the semantic In addition to the size annotation, the relation constructor
explanation accompanying each type constructor above. A can also be annotated with multiplicities that specify, for ex-
consequence is that, although types may contain an inﬁnite ample, that a relation is n-to-m. As we have modelled this
number of elements, each element is of a ﬁnite size or cardi- feature on a similar feature provided by ESRA, we will not
nality. This is necessary to achieve the objective that ESSENCE describe it further.
speciﬁcations can be mapped to CSPs.                    The function constructor can have one annotation to indi-
  Finally notice that the parameters and decision variables cate that the function is total or partial and another to indicate
of a speciﬁcation cannot enter the type names. This restric- that the function is surjective, injective or bijective. For ex-
tion is necessary to enable the type of every expression in a ample, the following are domains:
speciﬁcation to be determined before the parameters are in- players →(total) players
stantiated with values. This is why we say that ESSENCE is players →(injective) players
statically typed.                                       players →(total surjective) players
  Domains   A domain is a set of values all of the same type. The matrix and tuple type constructors take no annotations,
In ESSENCE every type is a domain. ESSENCE also allows do- though, of course, the types nested in them can be annotated,
                                                      as in these examples:
  3A function is ﬁnite if it is deﬁned on only a ﬁnite set of values. tuple  int (1..), set (size 2) of int 
Similarly, a relation is ﬁnite, if it contains only a ﬁnite set of tuples. matrix indexed by [players, int (5..10)] of bool

                                                IJCAI-07
                                                   83In all uses of the matrix constructor the domains for the in- universal quantiﬁer of the alternative constraint of the SGP
dices must be a single range of an ordered type, as illustrated speciﬁcation in Fig. 1. The second method is to obtain the
in the second statement above.                        values by taking all elements or (strict or non-strict) subsets of
  Every domain is either ﬁnite or inﬁnite and the domains as- a set, partition or regular partition. All the quantiﬁcation ex-
sociated with a decision variable must be ﬁnite, which is re- pressions in the Knapsack and SONET speciﬁcations in Fig. 1
quired to ensure that speciﬁcations map to CSPs. Elsewhere draw their values from a set. The set, partition or regular par-
[Frisch et al., 2005a] we have given a set of rules for gen- tition can be denoted by an arbitrary expression, including
erating all ﬁnite domains. This paper instead relies on the expressions that contain decision variables, as seen in the ex-
reader’s intuition and understanding to determine if a domain amples mentioned. In quantiﬁcation expressions of this kind
contains a ﬁnite or inﬁnite set of elements.          there is no need to specify the types of the quantiﬁed variables
  Expressions The expressions of ESSENCE are formed in as they can easily be inferred. For example, in the quantiﬁed
a manner much as one would expect, bearing in mind that ev- expression u∈U  of the Knapsack speciﬁcation it is clear
                                                                                  
ery expression has a type. Constraints and the restrictions in that u must be of type U since U is of type set of U. Fi-
where statements are expressions of type Boolean and objec- nally it is also possible to employ both methods to dictate the
tive functions are expressions of any ordered type.   values taken by the quantiﬁed variables. An example is seen
  The atomic expressions of ESSENCE are the constants, pa- in the constraint of the GRP speciﬁcation. Here pair1 and
rameters, decision variables and quantiﬁed variables. Other pair2 must each be a subset of Ticks and must also be a set
than the unnamed types, and compound types constructed of size 2.4
from them, every value has a name. These names are the
constants of the language.                            4   Abstraction in ESSENCE
  We shall not explain the syntax for naming constants, but
note that our objective was to give every value a distinct This section explains how the features of ESSENCE, as intro-
name. A difﬁculty is that the emptyset is a member of ev- duced in the previous section, yield a language with a great
ery type of the form set of τ. Our remedy is to explicitly deal of abstraction.
attach the type to every emptyset. Thus, for example {}:set A guiding principle in the design of ESSENCE has been that
of int and {}:set of players are distinct names for distinct the language should not force a speciﬁcation to provide un-
objects.                                              necessary information or make unnecessary decisions. Ex-
  Compound expressions are formed by applying operators isting languages often force a speciﬁcation to introduce un-
to expressions. ESSENCE provides a wide range of operators necessary objects or to unnecessarily distinguish between ob-
drawn from discrete mathematics (e.g., intersection, function jects. This typically introduces symmetry into the speciﬁca-
application, projection, set membership), logic (e.g., conjunc- tion. As will be demonstrated, the facilities ESSENCE has for
tion, implication), and the global constraints found in con- abstraction enable this to be avoided.
straint programming (e.g., alldifferent, global cardinality, lex- The high level of abstraction provided by ESSENCE is pri-
icographic ordering). Whereas the global constraints of other marily a consequence of four features, which we discuss in
constraint languages apply only to matrices of integers, those the next four subsections.
of ESSENCE apply to matrices of any reasonable type. For ex- Wide Range of Types ESSENCE supports a wide range of
ample, in ESSENCE, alldifferent applies to a matrix of any type types and type constructors (including sets, multisets, tuples,
and lexicographic ordering applies to two one-dimensional relations, functions and partitions) and decision variables can
matrices of any ordered type.                         have domains containing values of any one of these types.
  The type of a compound expression is a function of its op- For example, the KNAPSACK problem requires identifying
erator and the types of its operands. Some operators are over- the set of objects that are to go in the knapsack, so this is
loaded. For example, the intersection operator can be applied readily represented by a decision variable of type set of U,
to two multisets to produce a multiset and it can be applied to where U is the set of all objects. The objects themselves are
two sets to produce a set.                            a given enumerated type; there is no need to identify them
  Quantiﬁcation  ESSENCE provides an exceptionally rich with, say, integers. Notice that the speciﬁcation of Garey and
set of constructs for expressing quantiﬁcation. Examples Johnson [1979] does not identify the objects with integers and
can be seen in all of the constraints of Fig 1 as well is in a speciﬁcation language should not force one to do so.
the “minimising” statement of the SONET speciﬁcation.   Nested Types  ESSENCE allows type constructors to be
Each quantiﬁcationP expression consists of three components: nested to arbitrary depth. This is the most important and dis-
                   ∀   ∃
a quantiﬁer, either , or ; followed by a non-empty list tinctive feature of ESSENCE, and could be considered our most
of variables (these are the quantiﬁed variables that are being important contribution to the design of constraint languages.
“declared”); followed by a binding expression that dictates a To observe its importance, consider the SONET problem,
ﬁnite set of values over which the variables range. These val- which requires placing each of a set of communicating nodes
ues are all of the same type, and this is taken as the type of onto one or more communication rings in such a way that the
the associated quantiﬁed variables. The ﬁniteness of the set speciﬁed communication demand is met. Thus, the goal is to
of values over which a variable ranges is necessary to enable ﬁnd a set of rings, each of which is a set of nodes—and this
the mapping of speciﬁcations to CSPs.
  Binding expressions employ two methods of dictating    4In this case the domain is not ﬁnite, but ﬁniteness is obtained
these values. The ﬁrst is to give a ﬁnite domain, as in the the since the sets must be a subset of Ticks, which is ﬁnite.

                                                IJCAI-07
                                                   84