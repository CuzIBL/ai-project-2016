                   On Reversing Actions: Algorithms and Complexity∗

           Thomas Eiter                       Esra Erdem                     Wolfgang Faber
  Vienna University of Technology          Sabancı University              University of Calabria
        eiter@kr.tuwien.ac.at         esraerdem@sabanciuniv.edu             faber@mat.unical.it


                    Abstract                          action sequence, by executing other actions. For exam-
                                                      ple, after doing the action go(home, oﬃce), the action
    Reversing actions is the following problem: After
                                                      go(oﬃce, home) may reverse its effects and bring the agent
    executing a sequence of actions, which sequence of
                                                      back to her previous state. If this holds regardless of the state
    actions brings the agent back to the state just before
                                                      in which the agent was before doing go(home, oﬃce) and
    this execution (an action reversal). Notably, this
                                                      afterwards, then go(oﬃce, home) is called a reverse action
    problem is different from a vanilla planning prob-
                                                      for go(home, oﬃce). If, more generally, a sequence of ac-
    lem since the state we have to get back to is in gen-
                                                      tions R = B1,...,Bm is guaranteed to bring the agent back
    eral unknown. It emerges, for example, if an agent
                                                      to the state before executing a sequence AS = A1,...,Bn,
    needs to ﬁnd out which action sequences are un-
                                                      then R is called a reverse plan for AS. For example, R =
    doable, and which ones are committed choices. It
                                                      go(oﬃce, pub), go(pub, home) may be a reverse plan for
    has applications related to plan execution and mon-
                                                      AS  = go(home, bus stop), go(bus stop, oﬃce).
    itoring in nondeterministic domains, such as recov-
                                                        Undo actions are well-studied in the area of databases,
    ering from a failed execution by partially undoing
                                                      where they are a standard method for error recovery. In
    the plan, dynamically switching from one executed
                                                      a more general context of plan execution and recovery,
    plan to another, or restarting plans. We formal-
                                                      [Hayashi et al., 2002; 2004] use undo actions for execution of
    ize action reversal in a logic-based action frame-
                                                      plans by mobile agents in a dynamic environment. However,
    work and characterize its computational complex-
                                                      the undo actions (one for each action) need to be speciﬁed
    ity. Since unsurprisingly, the problem is intractable
                                                      (manually) by the user. It therefore is desirable to have tools
    in general, we present a knowledge compilation
                                                      which automatically generate undo actions, or more gener-
    approach that constructs ofﬂine a reverse plan li-
                                                      ally, reverse plans. This raises the following questions: given
    brary for efﬁcient (in some cases, linear time) on-
                                                      an action domain and an action A, does there exist a reverse
    line computation of action reversals. Our results
                                                      action for A? More generally, given a sequence of actions
    for the generic framework can be easily applied for
                                                      AS, does there exist a reverse plan for AS? If so, how can a
    expressive action languages such as C+ or K.
                                                      reverse action or plan be efﬁciently computed? From a com-
                                                      putational point of view, can reverse actions or plans be fruit-
1  Introduction                                       fully exploited for efﬁcient backtracking in action execution?
Reasoning about actions is an important area within knowl- Backtracking may be considered for various reasons, like
edge representation and reasoning. Several logic-based lan- to restart a plan (e.g., when the execution of the plan fails due
guages for representing actions have been proposed (see to some undesired effects of an action in a nondeterministic
e.g., [Gelfond and Lifschitz, 1998; Giunchiglia et al., 2004; environment), or to switch from the current plan to one which
Son and Baral, 2001; Eiter et al., 2004]), and various rea- is better (or safer) in the light of new information. When
soning problems about actions have been considered. The the current state and the state we want to backtrack to are
most prominent among them are temporal projection (infer- known, then the problem amounts to a vanilla planning prob-
ence about the state after a sequence of actions occurred), lem, which is intractable in general. However, the problem is
reasoning about the initial state after a sequence of actions different if the backtrack state is unknown.
occurred, and plan generation (generate a sequence of actions Motivated by these questions, we study computational as-
which takes the agent from an initial state to a goal state). pects of action reversals. The main contributions of this paper
  We study another reasoning problem about actions, namely are as follows.
the problem of undoing the effects of an execution of an • We formally deﬁne the notions of a reverse action and
  ∗This work was supported by FWF (Austrian Science Fund) un- a reverse plan for actions. Rather than to commit to a
der project P16536-N04. The work of the second author was carried particular action language capable of modelling nondeter-
out while she visited TU Wien. The third author was funded by an ministic effects, such as C+ [Giunchiglia et al., 2004] or
APART grant of the Austrian Academy of Sciences.      K [Eiter et al., 2004], we use here a generic transition-based

                                                IJCAI-07
                                                   336                                                                              
framework for representing actions as in [Rintanen, 1999; ¬putIntoWater, ¬inWater , ¬wet } satisﬁes tr(F, A, F );
Turner, 2002], using propositional logic as a speciﬁcation lan- therefore, it describes a transition from the state S =
guage. Besides nondeterminism, it also accommodates con- {wet} to the state S = {} by executing the action A =
current actions and dynamic worlds. We extend the deﬁni- {dryWithTowel}. 2
tions to conditional reversals, considering also partial knowl- The meaning of a domain description can be represented
edge about the current state and the state before the execution. by a transition diagram, which is a directed labelled graph
• We thoroughly analyze the complexity of action reversals, whose nodes are the states and whose edges correspond to
and characterize the complexity of recognizing and deciding action occurrences. A trajectory of length n is an alter-
existence of reverse actions and plans, both for plain as well nating sequence S0,A0,S1,...,Sn−1,An−1,Snof states Si
as for conditional reversals.                                                              A0     A1
                                                      and action occurrences Ai, such that S0 → S1 →,...,
• Unsurprisingly, action reversal is intractable in general. An−1
                                                      Sn−1  →   Sn is a labelled path in the graph. The trajectory
For monitoring applications, we therefore present a knowl-
                                                      can be obtained from a corresponding model of the formula
edge compilation method. It constructs ofﬂine a reverse plan      n−1
                                                      trn(F, A)=    t=0 tr(Ft, At, Ft+1) where each Fi (resp.,
library from which reversals can be online computed in poly- A                        i       f ∈F
nomial (often, linear) time for important classes of instances. each i) results by adding time stamp to each (resp.,
                                                      each a ∈A).
  Our results shed light on the complexity of action rever- An action sequence of length n is a sequence AS = 
A0,
sals, and can be easily customized to particular action lan- ..., An−1, where each Ai (0 ≤ i<n) is a (concurrent)
          C+   K
guages like  or  . Our algorithms for reverse plan assem- action occurrence. We use |AS| to denote the length of A.
bly suggest action reversal as a complementary method for Note that in general, |AS| is different from the total number
efﬁcient backtracking (if no reverse plan exists, choose some of single action occurrences in AS. 
other method). For further in-depth material and proofs for                                   
                                                        In what follows, F≡F denotes  f∈F f ≡ f .
all results of this paper, we refer to [Eiter et al., 2006].
                                                      3   Execution Reversals
2  Action Representation Framework
                                                      After an agent executes an sequence 
A0,...,Ai,itmaybe
Following [Turner, 2002],letA be a set of action symbols and
  F                                                   sometimes desirable that the effects of the whole or part of
let  be a disjoint set of ﬂuent symbols, which are viewed as the action sequence be undone, such that the agent is back in
propositional atoms. The set of states of an action domain is the state Sj, j<i, which she had reached after executing the
                                                F
encoded by the models of a propositional formula state( ) actions A0,...,Aj−1.
over F.Letact(F, A, F ) be a formula over F∪A∪F,
     F  = {f  | f ∈F}                                 An action can be undone by executing one of its “reverse
where                 .Then                           actions” or by executing a “reverse plan”. We deﬁne a re-
 tr(F, A, F )=state(F) ∧ act(F, A, F ) ∧ state(F ) (1) verse of an action below relative to a given action description.
                                                                            
encodes the set of transitions that corresponds to its models. Deﬁnition 1 An action A is a reverse action for A, if, for all
                                                                                        
That is, in a transition, the start state corresponds to an as- F and F , the formula revAct(F, F ; A, A ), deﬁned as
signment S to F,1 the (concurrent) action execution (or oc- (F,A,F ) ⊃
                       A    A                           tr
currence) to an assignment to , and the end state to an     (tr(F ,A, F) ∧∀F (tr(F ,A, F ) ⊃F≡F))
assignment S to F .
                                                                      ∀F∀F       (F, F ; A, A)
Example 1 [Giunchiglia et  al.,  2004]   Putting a    is a tautology (i.e., revAct             holds).
puppy into water makes the puppy   wet, and  drying     The formula above expresses the following condition about
a puppy with a towel makes it dry.    With the ﬂu-    actions A and A. Take any two states S, S (described by the
ents F   =   {inWater, wet}, and the action symbols   assignments to ﬂuents in F and F  respectively) such that
A = {putIntoWater, dryWithTowel }, the states can be  executing A at S leads to S. Then executing A at state S
described by the formula state(F)=inWater   ⊃  wet.   always leads to S.
Since there are three assignments to F satisfying state(F) Many of the benchmarks used in planning are from the
({inWater, wet}, {¬inWater, wet}, {¬inWater, ¬wet})   transportation domain (logistics, blocks world, grid, etc.).
there are three states: {inWater, wet}, {wet}, {}. The E.g., moving from x to y is the reverse action of moving from
action occurrences can be deﬁned through              y to x, putting down an object is the reverse of picking it up.
  act(F, A, F )=                                     Deﬁnition 2 A reverse plan for an action A is a sequence
                                                              
    (inWater  ≡ inWater ∨ putIntoWater) ∧             
A0,...,Am−1, m ≥ 0, of actions such that, for all F and
                                                        
    (wet  ≡ (wet ∧¬dryWithTowel ) ∨ putIntoW ater) ∧ F , the following formula is true:
    (dryWithTowel ⊃ (¬inWater  ∧¬putIntoWater))                              
                                                      revPlan(F, F ; A, [A0,...,Am−1]) =
                                                                 
By the last line, dryWithTowel is executable if inWater tr(F,A,F  ) ⊃ 
is false, but not concurrently with putIntoWater.Forex-  m      m           
                                                        ∀   Fi ∃   F  F0 ≡F    ⊃
ample, the assignment {¬inWater, wet, dryWithTowel ,     i=1    j=1 j  
                                                                         m−1                      
                                                                             (trt(F,A) ⊃  tr(Ft,A , F  )) ∧
  1            S                                                         t=0                   t  t+1
   “Assignment to ” means an assignment of truth values to the                  
symbols in S.                                                          (trm(F,A)  ⊃Fm   ≡F)    .

                                                IJCAI-07
                                                   337  The formula above expresses the following condition about A question which comes up naturally is whether it is possi-
                                       
an action A and an action sequence 
A0,...,Am−1.Take ble to formulate conditions, which are necessary or sufﬁcient
any two states S, S (described by the assignments to ﬂu- for the existence of a reverse action for a given action. In the
ents in F resp. F ) such that executing A at S leads to S. following, we brieﬂy discuss two conditions, of which one is
                               
Then the action sequence 
A0,...,Am−1 is executable at necessary, while the other one is sufﬁcient.
state S, and it always leads to S. The executability condi- Let us ﬁrst focus on the necessary condition. Imagine the
              
tion of 
A0,...,Am−1 is described above by the formula on following situation: The action A, which is to be reversed,
                                       
the second line. Note that revPlan(F, F ; A, [A0]) is equiva- results in the same state S when executed in two different
                                                                                   
lent to revAct(F, F ; A, A0). For instance, a reverse plan for states S and S , i.e., tr(S ,A,S) and tr(S ,A,S) both hold.
                                                                                                   
booking online a room may be ﬁrst calling the hotel in which It is then impossible to ﬁnd a reverse plan 
A0,...,Am−1
the room is reserved, and then cancelling the reservation. for A. If we could, then if some S0,...,Sm existed such
                                                                                                
  We can further generalize the notion of reversing by con- that trm(S, A ), then both Sm = S and Sm = S would
sidering action sequences, rather than actions, to be reversed. hold, which is impossible, as we assumed that S = S.This
There are two motivations for this generalization: It might necessary condition can be stated more generally as follows:
not always be possible to ﬁnd reverse plans for single actions,
                                                      Proposition 1 If a φ; ψ-reverse plan for A = 
A0, ...,
but only for sequences of actions. Also, a reverse plan for an
                                                      An−1 exists, then, for every two sequences S = S0,...,Sn
action sequence might be shorter than a reverse plan obtained                              
                                                      and S =  S0,...,Sn of states such that S0 = S0,trn(S, A),
by concatenating reverse plans for subsequences.                                         
                                                      trn(S ,A), φ(Sn), φ(Sn), ψ(S0), and ψ(S0) hold, it holds
                                                              
Deﬁnition 3 A sequence 
A0,...,Am−1 (m ≥  0)ofac-    that Sn = Sn.
tions is a reverse plan for an action sequence 
A0,...,Ak−1
                                                       We have found also a sufﬁcient condition, motivated by the
(k>0), if, for all F and F , the following formula is true:
                                                      following property of functions: A function f is involutory iff
                                    
multiRev(F, F ;[A0,...,Ak−1], [A0,...,Am−1]) =        f(f(x)) = x for each x in the domain of f. We say that an
                                                                  A ,...,A       ψ
  ∃k  F  F≡F    ∧    (F,A) ∧F  ≡F     ⊃              action sequence 0     m−1 is ( -)involutory, if, for every
   i=0 i       0 trk               k                     S           ψ
   m     m                                       state (satisfying ), the following hold:
  ∀j=0Fj ∃h=1Fh   F0 ≡F   ⊃
                                                     • for every sequence S =  S0,...,Sm  of states such
                   m−1                    
                   t=0  trt(F ,A) ⊃ tr(Ft,A t, Ft+1)     that trm(S, A) holds, there exist a sequence Sm =
                                                                                           
                                                       S ,...,S   = S                 m(S  ,A)
                 ∧(trm(F ,A)  ⊃Fm   ≡F)  .                  0     m      of states such that tr   holds;
                                                        •                       S =  S ,...,S      S   =
                                                         for every two sequences     0      m and   m
                                     (F, F ; A, [A0,                                               
The formula above is very similar to revPlan              S0,...,Sm  of states such that trm(S, A) ∧ trm(S ,A)
...,Am−1])                                                                  
          . The only difference is that, in the premise of the holds, it holds that Sm = S.
formula, a trajectory is considered instead of a single tran-
                                                   Therefore, an action is involutory, if executing the action
sition. Note that multiRev(F, F ;[A0], [A0, ...,Am]) is
                                                   twice in any state, where the action is executable, always re-
equivalent to revPlan(F, F ; A0, [A0,...,Am]).
  So far, a reverse plan has been deﬁned for an action se- sults in the starting state. An example of an involutory action
quence at any state reachable by that sequence. However, is a toggle action: If a simple light switch is toggled twice, it
at some such states, an action sequence may not admit any will always be in the same state as before. Then a sufﬁcient
reverse plan. That is, an action sequence may have a re- condition can be stated as follows:
verse plan under some conditions, that do not necessarily hold Proposition 2 A ψ-involutory action sequence AS is always
at every reachable state. Furthermore, if some information ; ψ-reversible, and a ; ψ-reverse plan is AS itself.
about the state which we want to reach by reversing actions
is available, e.g., values of some ﬂuents obtained by sens- 4 Complexity Results
ing, then a reverse plan might be possible depending on this
information. To make execution reversals applicable in such We study the complexity of the following problems related to
situations, we generalize reverse plans to “conditional reverse the computation of execution reversals with respect to a given
plans” as follows.                                    action domain description:
                                                                                       AS     R
                       
A ,...,A   m   ≥   0         (P1) for two given action sequences and , and given
Deﬁnition 4 A sequence   0      m−1   (        )of    formulas φ and ψ over ﬂuent symbols, recognizing whether
actions is a φ; ψ-reverse plan for an action sequence R     φ; ψ             AS

A ,...,A    k>0            F     F                   is a   -reverse plan for ;
  0      k−1  (    ) if, for any and , the formula      (P2) for a given action sequence AS, deciding whether
 ψ(F)  ∧ φ(F ) ⊃                                     there exist an action sequence R of a polynomially bounded
                                          
      multiRev(F, F ;[A0,...,Ak−1], [A0,...,Am−1])    length, and formulas φ and ψ over ﬂuent symbols, such that R
                                                          φ; ψ              AS         φ(S)
            φ(F )     F        ψ(F)      F          is a   -reverse plan for ,andthat     holds for some
is true, where   is over  and and      over .         state S reached by AS from some state S such that ψ(S)
  For the case where ψ(F) ≡, we simply write φ-reverse holds;
plan for φ; ψ-reverse plan. For instance, a conditional reverse (P3) for a given action sequence AS and formulas φ and ψ
plan for booking a room may be ﬁrst calling the hotel in which over ﬂuent symbols, deciding whether there exists an action
the room is reserved, and then cancelling the reservation, with sequence R of polynomially bounded length such that R is a
the condition that another room is available at another hotel. φ; ψ-reverse plan for AS.

                                                IJCAI-07
                                                   338        Problem   |R| =1   |R| =2   |R| > 2           S, respectively, such that S is reached from S be execution
                              p        p                AS
          (P1)    coNP       Π2       Π2              of    (if no such states exist, the problem is trivially solved).
                     p        p        p              Checking this condition changes the complexity of (P1) when
          (P2)      Σ        Σ        Σ                                    P
                     2        2        3              |R| =1from coNP to D  (which is the “conjunction” of NP
                    Σp       Σp       Σp
          (P3)       2        3        3              and coNP); it does not change the complexity of (P3).
Table 1: Complexities of (P1)–(P3), in terms of completeness The complexity of problems can be lower under some con-
                                                      ditions. For example, if the reverse plan is short (i.e., has
                                                      a length bounded by a constant) and contains no parallel ac-
  For our discussion of the computational complexities of tions, and φ, ψ are formulas from a polynomial size set of for-
these problems, recall the following sequence of classes from mulas, then only a polynomial number of candidates for φ; ψ-
                           Σp  =Πp  =P
the polynomial hierarchy: First, 0 0    ;andforall    reverse plans need to be checked for (P3). If the executability
       p      Σp        p        Σp
k ≥ 1 Σ  =NP   k−1    Π  =coNP    k−1                 of actions can be determined in polynomial time then (P1)
     , k           and  k            . Each complex-                                        p
ity class at each level k (k ≥ 1) of the hierarchy, includes all gets coNP-complete, and (P2) and (P3) get Σ2-complete.
complexity classes at lower levels. For further background on Tractable cases. Also tractability can be gained in certain
                            [                 ]
complexity, we refer the reader to Papadimitriou, 1994 . cases. For example, if φ and ψ are conjunctions of literals
  The complexity results for problems (P1)–(P3) are summa- which have a single model and the description of transitions
rized in Table 1. According to these results, checking whether (F, A, F )                    S       S
                    φ; ψ                              tr         is such that for given ﬂuent values (resp., )
an action sequence is a -reverse plan for another action and action occurrences A all ﬂuent values S (resp., S)such
sequence (i.e., (P1)) is easier than ﬁnding a φ; ψ-reverse plan (S, A, S)
                                              φ; ψ    that tr       holds can be determined in polynomial time,
for an action sequence (i.e., (P2) and (P3)). Finding a - then ﬁnding a short φ; ψ-reverse plan without parallel actions
reverse plan, where φ and ψ are given is harder than ﬁnding a
φ; ψ                     φ     ψ    |R| =2            for a short action sequence is feasible in polynomial time.
   -reverse plan for arbitrary and for    , but is of Thus in particular, reversal of the current state in the exe-
the same complexity in all other cases. These problems get
                            R                         cution of an action sequence is possible in polynomial time
more difﬁcult when the length of increases: Problems (P1) under these conditions.
and (P3) get more difﬁcult when |R|≥2, while problem (P2)
gets more difﬁcult when |R| > 2.
                p                                     5   Computation of Reverse Plans
  Intuitively, the Σ3-completeness of (P2) and (P3) is due to
the following intermingled sources of complexity:     We compute reverse plans in the spirit of knowledge com-
  (i) the exponentially many action sequences R of a polyno- pilation [Cadoli and Donini, 1997]: ﬁrst we compute ofﬂine
mially-bounded length and, in case of (P2), the exponentially reverse plans for some action sequences, and then use this
many formulas φ and ψ which need to be considered,    information online to construct a concrete reverse plan for a
  (ii) the test that for all states S and S such that φ(S) and given action sequence. In the ofﬂine phase, the computed
ψ(S) hold and S is reached from S after execution of AS, reverse plans for action sequences are collected in a library.
every execution of R which starts in S ends in S, and (iii) This library may not contain all possible reverse plans for all
the test that each partial execution of R starting in some state action sequences (since exponentially many of them exist),
S as in (ii) can be continued with the next action, i.e., the but a polynomial number of reverse plans for short action se-
execution is not “stuck.”                             quences (typically, of a few steps, and the reverse plans are
                              p
  Membership of problem (P1) in Π2 is straightforward from short themselves). From these short reverse plans, one might
Deﬁnitions 3 and 4. The φ;ψ-reverse plan property is easily efﬁciently compose online reverse plans for longer action se-
rewritten to a preﬁx quantiﬁed Boolean formula (QBF) with quences. For example, a reverse plan 
B2,B1 for the action
∀∃ pattern; evaluating such a formula is well-known to be sequence 
A1,A2 can be composed of the two reverse ac-
    p                       p                              B     B                                 A
in Π2. Problem (P3) is thus in Σ3,sinceaφ;ψ-reverse plan tions 1 and 2 that undo the effects of two actions 1 and
                                        p             A
can ﬁrst be guessed and then checked with a Π2 oracle. In 2, respectively. As we show later, such a construction of
problem (P2), φ and ψ are w.l.o.g. conjunctions of literals a reverse plan for an action sequence, from the reverse plan
and can be guessed along with the plan; the extra condition is library, can be done efﬁciently.
checkable with an NP oracle. Hardness is shown by suitable We deﬁne reverse plan items and libraries as follows.
reductions of evaluating QBFs.                        Deﬁnition 5 A reverse plan item (RPI) is a tuple of the form
  When limiting the length of the reverse plan, some quan- (AS,R,φ,ψ) such that R is a φ; ψ-reverse plan for the
tiﬁers vanish. Informally, when |R| =1, source (iii) disap- (nonempty) action sequence AS,whereφ = φ(F) and ψ =
pears, and similarly when |R| =2for (P2). The reason is ψ(F)                    |AS| =1      AS
                                                          . An RPI is single-step,if   , i.e., consists of
that if R = 
A1 and if the current state S and the state S to a single action, and unconditional,ifφ = ψ = true.
which we want to get back are known, then in the light of (ii)
                                                     Deﬁnition 6 A reverse plan library L is a (ﬁnite) set of RPIs;
we just need to check whether 
S ,A1,S is a valid transition,
                                                      it is called single-step (resp., unconditional), if each RPI in it
which is polynomial. In the case of (P2) and R = 
A1,A2,
we similarly just need to check after reaching S from S by is single-step (resp., unconditional).
                     
executing A1 whether 
S ,A2,S is a valid transition. Com- There are various ways to compute RPIs to ﬁll a reverse
                                     p
bined with other properties, this yields the Σ2 upper bound. plan library. Thanks to the logical framework and deﬁnitions
  In problems (P1) and (P3), we do not check that the for- of reverse actions and plans, it is fairly straightforward to en-
mulas φ and ψ are actually satisﬁed at some states S and code the problem of actually ﬁnding an RPI (AS,R,φ,ψ) by

                                                IJCAI-07
                                                   339Algorithm REVERSE(AS, Π,L)                            Algorithm REVERSE1(j)

Input: Action sequence AS = 
A0,...,Ai−1, i ≥ 0,     Input:Integerj, 0 ≤ j ≤ i (=|AS|);
       sequence of formulas (percepts) Π=π0(F),...,   Output: Reverse plan RP for 
A0,...,Aj−1
       πi(F), reverse plan library L;                         from π0,...,πj ,or“no” if none exists
                   RP    AS      Π     L    no
Output: Reverse plan  for    from  and   or “ ”       (01)  if j =0 then return  ; /* empty plan */
(01)  for each j =0, ..., i−1 do S[j]:=⊥;             (02)  for each (As,R,φ,ψ)  ∈ L s.t. As is a sufﬁx
(02)  S[i]:=;   /* trivially, Si is reversible to itself */         of 
A0,...,Aj−1 and S[j−|A|s]=⊥ do
(03)  RP  := REVERSE1(i);                             (03)    if πj ⊃ φ and πj−|AS| ⊃ ψ then
(04)  if RP =“no”  then return “no”                   (04)    begin
(05)  else return (RP,S[0])                           (05)      S[j−|As|] := ;/*reversingtoSj possible */
                                                      (06)      RP  := REVERSE1(j−|As|);
                                                                  RP  = no             R   RP
Figure 1: Algorithm REVERSE to compute execution rever- (07)    if      “  ” then return  +
sals using a multi-step plan library.                 (08)    end
                                                      (09)  return “no”

solving QBFs, which has been proposed as a problem solving Figure 2: Algorithm REVERSE1, in the scope of REVERSE.
method in the planning domain earlier, e.g., [Rintanen, 1999].
Another possibility is to reduce the problem to solving con-
formant planning problems deﬁned relative to a modiﬁcation information to which states Sj a reversal is established. The
of D. Due to space reasons, we cannot give the details, and main algorithm, REVERSE, initializes every S[j] (j<i)ofS
instead focus on the more interesting problem of online re- to ⊥ since this is false initially. The recursive algorithm RE-
verse plan computation.                               VERSE1 updates S whenever new knowledge is gained. For
  At runtime, when we do try to assemble a reverse plan, instance, if the action Ai−1 can be reversed at state Si,then
we can think of three increasingly expressive scenarios, de- we know that a reversal to Si−1 exists and modify S[i−1] ac-
pending on available state information in form of percepts πj cordingly. Having this information available in S helps us to
about some states Sj, j =0, 1,...,i, of the execution: ﬁnd a reverse plan for the action sequence AS from L.Also,
  1. There is no information about the current state, Si,and it prevents us to explore the same search space over and over.
past states S0, S1, ..., Si−1. In this situation, only uncon- The algorithm REVERSE starts constructing a reverse plan
ditional reversal plans, assembled from unconditional RPIs, for an action sequence 
A0,...,Aj−1 by considering its suf-
might be used.                                        ﬁxes As. For efﬁciently determining all As in L, we can em-
  2. (Partial) information about the current state Si is avail- ploy search structures such as a trie (or indexed trie) to repre-
                                                          L
able, expressed by a formula πi(F) such that Si is one of its sent : consider each node of the trie labelled by an action, so
models, but no information about the past states. In this case, that the path from the root to the node would describe an ac-
we can also make use of conditional RPIs.             tion sequence in reverse order. If the node describes an action
  3. (Partial) information about the whole execution history sequence As such that (As,R,φ,ψ) is in L, then the node is
                                                                                   (As, R,φ,ψ) L
is available, formalized in terms of a sequence Π=π0, ..., linked to a list of all RPIs of form in  .
πi of formulas over ﬂuent symbols, such that the state Sj is The next theorem bounds the running time of algorithm
a model of πj(F), for each j =0, 1,...,i. Here, we might REVERSE and states its correctness.
exploit an even larger set of RPIs.                   Theorem 3  (i) REVERSE(AS, Π,L)   has  running time
  Clearly, scenario 3 generalizes the other ones; due to space O(|AS|(|L|·eval max(A)+min(ASmax(L), |AS|))),
limitations, we thus focus here on this general scenario. where eval max(Π,L) bounds the time to evaluate πj ⊃
  When we consider a multi-step plan library, i.e., not   φ and πj ⊃ ψ for any πj in Π and formulas φ, ψ in L;
necessarily a single-step plan library, ﬁnding a reverse plan and ASmax(L)=max{|As||(As,R,φ,ψ)  ∈ L}.
RP  is trickier since RP may be assembled from L in many
                                                                  (AS, Π,L)                          L
different ways, and state conditions might exclude some (ii) REVERSE        correctly outputs, relative to ,a
                                                                      RP     AS      Π
of them. For instance, take AS = 
A, B, C,andL  =        reverse plan    for    and   or it determines that
{(
A, B, 
D,φ1, ), (
C, 
E,φ2, ), (
A, 
F ,φ3, ), such a reverse plan does not exist.
(
B,C, 
G,φ , )}
             4    . We can assemble the action sequence Corollary 4 REVERSE(AS, Π,L) is polynomial, if all per-

A, B, C from 
A, B and 
C, or from 
A and 
B,C.        Π                          L    k
                                                      cepts in are DNFs and all formulas in are -term DNFs,
However, in the former case, φ1 might be false at the state k
                                                      i.e., j=1 ti,j where k is bounded by a constant, or CNFs.
resulting from reversing C by E, while, in the latter case, φ3
might be true at the state resulting from reversing the action We remark that in an application setting, |AS| as well as
sequence 
B,C by the action G. Thus, we need to consider reverse plan R are expected to be small (bounded by a con-
choices and constraints when building a reverse plan. stant) and percepts πi and the formulas φ, ψ consist of a few
  Fortunately, this is not a source of intractability, and a re- literals. In this case, the running time is O(|L|) i.e., linear
verse plan from L can be found in polynomial time (if one in the size of the reverse plan library L. If, moreover, only
exists) by the algorithm REVERSE in Figure 1.         few of the entries in the reverse plan library match, then the
  The auxiliary array S in the algorithms is used for keeping running time can be drastically shorter.

                                                IJCAI-07
                                                   340