                 Semantics    for  a useful  fragment     of the  situation   calculus
                   Gerhard   Lakemeyer                           Hector  J. Levesque
                Dept. of Computer   Science                  Dept. of Computer   Science
                      RWTH    Aachen                            University of Toronto
                       52056 Aachen                               Toronto, Ontario
                         Germany                                  Canada  M5S  3A6
                   gerhard@cs.rwth-aachen.de                      hector@cs.toronto.edu

                    Abstract                          by ES is rich enough to handle (among other things) basic ac-
                                                      tion theories (as deﬁned by Reiter) and the Do operator which
    In a recent paper, we presented a new logic called is the basis of the Golog language [Levesque et al. 1997]. We
    ES for reasoning about the knowledge, action, and also illustrate this richness more informally using an exam-
    perception of an agent. Although formulated using ple involving the knowledge, action, and sensing of a simple
    modal operators, we argued that the language was  robot. However, there are sentences of the situation calcu-
    in fact a dialect of the situation calculus but with lus that cannot be expressed directly in ES, and which may
    the situation terms suppressed. This allowed us to be useful in some contexts. In the ﬁnal part of the paper, we
    develop a clean and workable semantics for the lan- show that if we are prepared to use second-order quantiﬁca-
    guage without piggybacking on the generic Tarski  tion, there is a way to encode (almost) every sentence of the
    semantics for ﬁrst-order logic. In this paper, we re- situation calculus in ES. This encoding is a bit of a trick,
    consider the relation between ES and the situation and not something we advocate for everyday use. But it does
    calculus and show how to map sentences of ES into exist. So we gain the clarity that comes from having a real
    the situation calculus. We argue that the fragment semantic basis, and the ability to present concise semantic ar-
    of the situation calculus represented by ES is rich guments, without any signiﬁcant loss of expressiveness.
    enough to handle the basic action theories deﬁned   The rest of the paper is organized as follows. In the next
    by Reiter as well as Golog. Finally, we show that section, we deﬁne the full language of ES, its syntax and
    in the full second-order version of ES, almost all of semantics. This generalizes the version of ES presented in
    the situation calculus can be accommodated.       [Lakemeyer and Levesque, 2004] in a variety of ways, the
                                                      most important of which is that it allows functions, predi-
1  Introduction                                       cates, and second-order variables that are ﬂuent (vary from
                                                                                rigid
In a recent paper, we [Lakemeyer and Levesque, 2004] pre- situation to situation) as well as (ﬁxed for all situations).
                                                                                            ES
sented a new logic called ES for reasoning about the knowl- In Section 3, we consider the mapping from to the situa-
                                                                                          ES
edge, action, and perception of an agent. Our main justiﬁca- tion calculus and prove that a sentence of is valid iff its
tion for introducing yet another knowledge representation for- mapping is a logical entailment of a suitable situation calcu-
malism was twofold. First, we claimed that the language was lus theory. In Section 4, we consider the expressiveness of
                                                      ES
not a new formalism at all, but merely a situation-suppressed , ﬁrst with an example basic action theory and then with
                                                      Do
version of part of the situation calculus, as originally pre- . In Section 5, we consider the inverse mapping from the
                                                                       ES
sented by McCarthy and Hayes [McCarthy and Hayes 1969] situation calculus to , followed by some remarks on related
and subsequently formalized by Reiter [Reiter 2001a]. Sec- work and conclusions. Then we stop.
ond, we claimed that because the language was deﬁned se-
mantically rather than axiomatically, certain mathematical ar- 2 The language: syntax and semantics
guments about the formalism were considerably simpler than The full language ES consists of formulas over symbols from
in the original situation calculus. We presented evidence for the following vocabulary:
this by showing a very compact proof of the correctness of • ﬁrst-order variables: x1, x2, . . . , y1, y2, . . . , a1, a2, . . .;
Reiter’s regression operator, and another involving a property                                k  k
called the determinacy of knowledge.                    • ﬂuent second-order variables of arity k: P1 , P2 , . . .;
                                                                                             k   k
  However, our ﬁrst claim, which was that ES is in fact just • rigid second-order variables of arity k: Q1 , Q2, . . .;
an alternate way of writing some formulas of the situation • standard names: n1, n2, . . .;
calculus, was left unsubstantiated. In this paper, we remedy                             k  k
this. The main result we prove is the correctness of a simple • ﬂuent function symbols of arity k: f1 , f2 , . . .;
mapping between sentences of ES and their counterparts in for example, location, bestAction;
                                                                                        k  k
the classical language of the situation calculus. In addition, • rigid function symbols of arity k: g1 , g2 , . . .;
we show that the fragment of the situation calculus expressed for example, block5, repair;                                    k  k
  • ﬂuent predicate symbols of arity k: F1 , F2 , . . .; world determines truth values for the primitive sentences and
    for example, Broken;1                             co-referring standard names for the primitive terms after any
                                   k  k               sequence of actions. An epistemic state is deﬁned by a set of
  • rigid predicate symbols of arity k: G1 , G2 , . . .;
    for example, Fragile;                             worlds, as in possible-world semantics. More precisely:
  • connectives and other symbols: =, ∧, ¬, ∀, Know, , • a world w ∈ W is any function from the primitive sen-
    round and square parentheses, period, comma.          tences and Z to {0, 1}, and from the primitive terms and
                                                          Z  to N (preserving sorts), and satisfying the rigidity
We assume that ﬁrst-order variables, standard names, and  constraint: if r is a rigid function or predicate symbol,
function symbols come in two sorts, action (like repair and                                      0
                                                          then w[r(n1, . . . , nk), z] = w[r(n1, . . . , nk), z ], for all
bestAction) and object (like block5 and location). Constants z and z0 in Z.
are function symbols of 0 arity.2 We let N denote the set of
all standard names and Z denote the set of all sequences of • an epistemic state e ⊆ W is any set of worlds.
standard names for actions, including h i, the empty sequence. We extend the idea of co-referring standard names to arbitrary
                                                      ground terms as follows. Given a term t without variables, a
2.1  Terms  and formulas                                                                       z
                                                      world w, and an action sequence z, we deﬁne |t|w (read: the
The terms of the language are of sort action or object, and co-referring standard name for t given w and z) by:
form the least set of expressions such that                                  z
                                                            1. If t ∈ N , then |t|w = t;
                                                                          z
 1. Every standard name and ﬁrst-order variable is a term of 2. |h(t1, . . . , tk)|w = w[h(n1, . . . , nk), z],
                                                                              z
    the corresponding sort;                                      where ni = |ti|w.
 2. If t1, . . . , tk are terms and h is a k-ary function symbol To interpret formulas with free variables, we proceed as fol-
    then h(t1, . . . , tk) is a term of the same sort as h. lows. First-order variables are handled substitutionally using
By a primitive term we mean one of the form h(n1, . . . , nk) the standard names. To handle the quantiﬁcation over second-
where h is a (ﬂuent or rigid) function symbol and all of the order variables, we use second-order variable maps deﬁned
ni are standard names.                                as follows:
The well-formed formulas of the language form the least set The second-order primitives are formulas of the
such that                                                 form V (n1, . . . , nk) where V is a (ﬂuent or rigid)
                                                          second-order variable and all of the ni are stan-
 1. If t1, . . . , tk are terms, and H is a k-ary predicate symbol
                                                          dard names. A variable map u is a function from
    then H(t1, . . . , tk) is an (atomic) formula;
                                                          worlds, second-order primitives, and Z to {0, 1},
 2. If t1, . . . , tk are terms, and V is a k-ary second-order satisfying the rigidity constraint: if Q is a rigid
    variable, then V (t1, . . . , tk) is an (atomic) formula; second-order variable, then for all w and w0 in W,
                                                                        0
 3. If t1 and t2 are terms, then (t1 = t2) is a formula;  and all z and z in Z, u[w, Q(n1, . . . , nk), z] =
                                                          u[w0, Q(n1, . . . , n ), z0].
 4. If t is an action term and α is a formula, then [t]α is a             k
    formula;                                          Let u and u0 be variable maps, and let V be a (ﬂuent or rigid)
                                                                                 u0 ∼  u            u
 5. If α and β are formulas, v is a ﬁrst-order variable, and second-order variable; we write V to mean that and
                                                      u0
    V is a second-order variable, then the following are also agree except perhaps on the second-order primitives in-
                                                             V
    formulas: (α ∧ β), ¬α, ∀v. α, ∀V. α, α, Know(α). volving  . Finally, to interpret what is known after a se-
                                                      quence of actions possibly including sensing has taken place,
                                                                0              0
We read [t]α as “α holds after action t”, and α as “α holds we deﬁne w 'z w (read: w and w agree on the sensing
after any sequence of actions.” As usual, we treat (α ∨ β), throughout action sequence z) inductively by the following:
(α ⊃ β), (α ≡ β), ∃v. α, and ∃V. α as abbreviations. We         0            0
call a formula without free variables a sentence. By a primi- 1. w 'h i w iff w and w agree on the value of
                                                              every primitive rigid term and sentence;
tive sentence we mean a formula of the form H(n1, . . . , nk)
                                                                0
where H is a (ﬂuent or rigid) predicate symbol and all of the 2. w 'z·n w iff
                                                                  0           0
ni are standard names.                                           w 'z  w and w [SF(n), z] = w[SF(n), z].
                                                      Putting all these together, here is the semantic deﬁnition of
2.2  The semantics                                    truth. Given e ⊆ W and w ∈ W , we deﬁne e, w |= α (read:
The language contains both ﬂuent and rigid expressions. The α is true) as e, w, h i |= α, where for any z ∈ Z and any
former vary as the result of actions and have values that may second-order variable map u:
be unknown, but the latter do not. Intuitively, to determine
                                                        1. e, w, z, u |= H(t1, . . . , tk) iff
whether or not a sentence α is true after a sequence of ac-                                     z
                                                             w[H(n1, . . . , n ), z] = 1, where n = |t | ;
tions z has been performed, we need to specify two things: a             k                i    i w
world w and an epistemic state e. We write e, w, z |= α. A 2. e, w, z, u |= V (t1, . . . , tk) iff
                                                                                                  z
                                                             u[w, V (n1, . . . , nk), z] = 1, where ni = |ti|w;
  1We assume this list includes the predicates Poss and SF.
  2                                                     3. e, w, z, u |= (t1 = t2) iff
   The standard names can be thought of as special extra constants                            z
                                                             n1 and n2 are identical, where n = |t | ;
that satisfy the unique name assumption and an inﬁnitary version of                     i    i w
                                                                                                       z
domain closure.                                         4. e, w, z, u |= [t]α iff e, w, z·n, u |= α, where n = |t|w; 5. e, w, z, u |= (α ∧ β) iff                         be mapped to the situation calculus formula Broken(c, S0),
      e, w, z, u |= α and e, w, z, u |= β;            where we  have restored the distinguished situation term
 6. e, w, z, u |= ¬α iff e, w, z, u 6|= α;            S0 for the ﬂuent. Similarly, [repair(c)]¬Broken(c) will be
                                                                 Broken   do repair    0
                                   x                  mapped  to ¬     (c,  (     (c), S )). So ES formulas
 7. e, w, z, u |= ∀v. α iff e, w, z, u |= αn,         can be thought of as “situation-suppressed” (in situation-
      for every standard name n (of the same sort as v); calculus terminology) and the ∗ mapping restores the situa-
 8. e, w, z, u |= ∀V. α iff                           tion argument to the ﬂuents, leaving the rigids unchanged.
              0              0
      e, w, z, u |= α, for every u ∼V u;                More precisely, we have the following:
 9. e, w, z, u |= α iff                              Deﬁnition 3.1 Let α be any term or formula of ES without
      e, w, z · z0, u |= α, for every z0 ∈ Z;         standard names. The expression α∗ is deﬁned as α[S0] where,
                                                      for any situation term σ, α[σ] is deﬁned inductively by:
10. e, w, z, u |= Know(α) iff
          0                   0             0
      e, w , z, u |= α, for every w ∈ e such that w 'z w. 1. v[σ], where v is a ﬁrst-order variable, is v;

When α is objective (has no Know operators), we can leave 2. g(t1, . . . , tk)[σ], where g is a rigid function, predicate,
out the e and write w |= α. When Σ is a set of sentences and or second-order variable, is g(t1[σ], . . . , tk[σ]);
α is a sentence, we write Σ |= α (read: Σ logically entails
                                                        3. f(t1, . . . , tk)[σ], where f is a ﬂuent function, predicate,
α) to mean that for every e and w, if e, w |= α0 for every
                                                          or second-order variable is f(t1[σ], . . . , tk[σ], σ);
α0 ∈ Σ, then e, w |= α. Finally, we write |= α (read: α is
valid) to mean {} |= α.                                 4. (t1 = t2)[σ] is (t1[σ] = t2[σ]);
                                                        5. ([t]α)[σ] is α[do(t[σ], σ)];
3  Mapping    to the situation calculus                 6. (α ∧ β)[σ] is (α[σ] ∧ β[σ])
How do we know that the semantics of ES is correct? In this 7. (¬α)[σ] is ¬α[σ];
section, we argue that it is indeed correct by showing how
formulas α in ES can be translated in a direct way to formulas 8. (∀v. α)[σ] is ∀v. α[σ];
α∗ in the situation calculus as deﬁned by Reiter.3      9. (∀V. α)[σ] is ∀V. α[σ].
  The most desirable and simplest outcome of this translation         0      0     0
                               ∗                       10. ( α)[σ] is ∀s (σ v s ⊃ α[s ]);
would be that |= α iff Σ |=FOL α , where |= is validity
in ES, Σ is the set of foundational axioms of the situation 11. Know(α)[σ] is Knows(α[now], σ).
calculus (see [Levesque et al, 1998], for example), and |=FOL Note that the translation of α introduces quantiﬁcation over
is ordinary classical logical consequence. Unfortunately, we situations, where the introduced variable s0 is assumed to be
do not get exactly this correspondence for a variety of reasons one that does not appear in situation term σ.
we will discuss below. But we do get something close:
                                    ∗                 3.2  The  situation-calculus axioms Υ
             |= α  iff Σ ∪ Υ |=FOL α ,
                                                      The axioms we assume in Υ are the following:
where Υ is a set of four axioms that we will justify separately. 1. domain of objects is countably inﬁnite;4
  To prove this result it will be necessary to work with or-
dinary Tarski models of sentences of the situation calculus. 2. domain of actions is countably inﬁnite (as above);
As argued in [Lakemeyer and Levesque, 2004], this is difﬁ- 3. equality is the identity relation:
cult and painstaking, and is indeed one of the main reasons to ∀x∀y. (x = y) ≡ ∀Q(Q(x) ≡ Q(y)).
prefer ES over the situation calculus. So while the proof of
                                                        4. the K predicate:5 ∀s(K(s, S0) ⊃ Ini(s)) ∧
the theorem is quite laborious, we remind the reader that this ∀s0∀s. K(s0, s) ≡ ∀P (. . . ⊃ P (s0, s)),
can be thought of as a ﬁnal reckoning for a formalism that is
                                                          where the ellipsis stands for the universal closure of
unworkable semantically. For space reasons, we do not re-
                                                               [K(s1, S0) ∧ Ini(s2) ⊃ P (s1, s2)] ∧
view the conventional notation used for talking about Tarski
                                                               [P (s1, s2) ∧ SF(a, s1) ≡ SF(a, s2) ⊃
interpretations, denotations, extensions, variable maps. See,
                                                                   P (do(a, s1), do(a, s2))].
for example, [Enderton 1972].
                                                      Axioms (1) and (2) talk about the cardinality of the set of
3.1  Deﬁnition of the translation                     objects and actions respectively: they are both countable and
Before describing Υ, we present the translation from ES inﬁnite. The countability aspect is not very controversial. In
into the situation calculus. In the simplest case, the idea is the ﬁrst-order case, every satisﬁable set of sentences is satis-
that a formula like Broken(c), where Broken is a ﬂuent, will ﬁable in a countable domain, and we do not expect users of
                                                      the situation calculus to use second-order logic to defeat this.
  3We assume that this language has functional and relational ﬂu- Note that this does not rule out having theories that talk about
ents, functions and predicates that are not ﬂuents, the distinguished
                                                         4
constant S0, function do, predicates v, Poss and SF, and a two-place For space reasons, we omit the formula of second-order logic
predicate K for knowledge. We take Knows(α, σ) in the situation that ﬁxes the cardinality of the domain of objects and actions.
                                               now       5
calculus as an abbreviation for the formula ∀s(K(s, σ) ⊃ αs ), We let Ini(t) be an abbreviation for the situation calculus for-
      now
where αs is the result of replacing by s in α every occurrence of mula ∀a∀s(t =6 do(a, s)). In this version of the axiom, we ignore
now that is not within the scope of a further Knows.  the correspondence between K and Poss.real numbers or other continuous phenomena; it simply rules
out using second-order logic to force the interpretations of         sonar
                                                                ......          
these theories to be uncountable. We can, however, imagine          ...........
                                                               .....................£
contexts where ﬁniteness might be desirable. In such cases,     ........... ¢
                              O
we can introduce a new predicate and instead of assert-           forward           -  backward
ing that there are ﬁnitely many objects, assert that there are                f  f
ﬁnitely many objects in O.
  As for axiom (3), it is hard imagining anyone taking the                  5              10
negation of this one seriously. The usual ﬁrst-order axiomati-
                                                                         Close           -
zation of equality is often enough, but the intent is invariably
for the equality symbol to be understood as the identity rela-
tion, which this second-order axiom ensures.                         Figure 1: A simple robot
  Finally axiom (4) is a second order deﬁnition of the K
predicate in terms of the value it has at S0. This is just an- properties needed for Lemma 3.2 are satisﬁed, and therefore
other way of capturing the successor state axiom for K in- M 6|= α∗. Consequently, Σ ∪ Υ 6|=FOL α∗.
troduced by Scherl and Levesque [2003], and the added ma-                                ∗
                                                      Conversely, assume that Σ ∪ Υ 6|=FOL α . Then there is a
                                        [
chinery to make Knows be a weak-S5 operator Hughes and Tarski structure M that satisﬁes Σ∪Υ but such that M 6|= α∗.
Cresswell, 1968]. Other knowledge operators are possible in
                                                      The domain D must be Dsit ∪ Dact ∪ Dobj , with Dini ⊆ Dsit
the situation calculus, but weak-S5 and its extensions (such                                   M
                                                      as the set of initial situations, and with ι0 = S0 ∈ D .
as strong-S5) are the most often used.                                                                ini
                                                      Since M  |= Υ, both Dobj and Dact are countably inﬁnite,
3.3  The embedding  theorem                           Dobj = {δ1, δ2, . . .}, and Dact = {λ1, λ2, . . .}. We deﬁne θ
                                                      to map the i-th standard name for objects to δ and analogous-
What we show is that provided certain properties hold be-                                  i
                                                                                π     doM      ω
tween a Tarski structure on one side and an epistemic state, ly for actions. We then deﬁne using , and using the
                                                      extensions of the function and predicate symbols given by M.
and a collection of worlds on the other, sentences will be true                       M
                                                                   e = {ω(ι) | (ι, ι0) ∈ K }, w0 =  ω(ι0)
in ES iff their translations are true in the Tarski structure. Finally, we let             and          .
  Let M be a Tarski structure for the situation calculus over These ensure that the properties needed for Lemma 3.2 are
                                                      satisﬁed, and so e, w0 6|= α. Consequently, α is not valid.
the domain D = Dsit ∪ Dact ∪ Dobj , with Dini ⊆ Dsit as
                                     M
the set of initial situations, and with ι0 = S0 ∈ Dini . Let 4 The expressiveness of the language
e be an epistemic state, and assume that we are given three
mappings ω ∈ [Dini → W ], θ ∈ [N → Dact ∪ Dobj ], and Now  that we have established that ES is actually a disguised
π ∈  [Z × Dini →  Dsit ]. These mappings need to satisfy fragment of the situation calculus, we next consider the ex-
various consistency properties that we cannot enumerate here. pressiveness of this fragment, starting with a simple example
But we can at least quote the lemma that uses them:   problem, adapted from [Levesque and Lakemeyer 2001].
                                                        Imagine a robot that lives in a 1-dimensional world, and
Lemma  3.2 Let α be a formula of ES with no standard
                                                      that can move towards or away from a ﬁxed wall. The robot
names and whose  free variables are among x1, . . . , x .
                                                m     also has a sonar sensor that tells it when it gets close to the
Then, given the consistency properties, for any variable map
                                                      wall, say, less than 10 units away. See Figure 1. So we might
µ, the ES variable map u (deﬁned in terms of µ), any vari-
                     µ                                imagine three actions, forward and backward which move the
able s, any z ∈ Z, any ι ∈ D , and w = ω(ι),
                        ini                           robot one unit towards and away from the wall, and a sonar
                            x1   xm                   sensing action which tells the robot if it is close to the wall.
               e, w, z, uµ |= αn1 . . .nm
                        iff                           Each of these is a rigid constant, but for simplicity, we will
                                                      simply assume that they are standard names. We have a sin-
   M, µ{x1/θ(n1), . . . , xm/θ(nm), s/π(z, ι)} |= α[s]. gle ﬂuent, distance, which gives the actual distance from the
                                                      robot to the wall. We can use Close as an abbreviation for the
This is proved by a (long) induction on the structure of α. The              6
main result is then the following:                    formula “distance < 10.” We begin our formalization by
                                                      writing preconditions for the three actions:
Theorem 3.3 Let α be any sentence of ES without standard
                                    ∗                   ∀a  Poss(a) ≡
names. Then α is valid iff Σ ∪ Υ |=FOL α .
                                                           a = forward ∧ distance > 0 ∨
Proof: (Sketch) First assume that α is not valid. Then there a = backward ∧ TRUE ∨
is an e, w0 such that e, w0 6|= α. We deﬁne a Tarski structure a = sonar ∧ TRUE.
M                 D  = D    ∪ D   ∪ D          D
   whose domain is       obj   act   sit , where obj  Next, we deﬁne the sensing results for the actions:
(resp. Dact ) is the set of standard names of objects (resp. ac-
                                      M    M    M       ∀a  SF(a) ≡
tions), and Dsit = Z × W . Then we deﬁne = , S0 , do ,
vM,  KM,  as well as the extension of every rigid and ﬂuent a = forward ∧ TRUE  ∨
                                                           a = backward ∧ TRUE   ∨
predicate and function symbol using e and w0 in a way that
ensures that M satisﬁes Σ ∪ Υ. Next, deﬁne the mappings θ, 6Here and below, we use simple arithmetic involving <, +, and
π, and ω by letting θ(n) = n, and for any initial ι = (h i, w), −, which can easily be deﬁned in second-order terms with the stan-
letting π(z, ι) = (z, w), and ω(ι) = w. This ensures that the dard names acting as natural numbers. We omit the details.    a = sonar ∧  Close.                               4.1  The  Do operator
Finally, we write a successor state axiom for our only ﬂuent: We now turn our attention to the Do operator which is the ba-
  ∀a, x  [a](distance = x) ≡                         sis of the Golog language [Levesque et al. 1997], and show
    a = forward ∧ distance = x + 1 ∨                  that a variant of Do can be represented in ES. We cannot en-
    a = backward ∧  distance = x − 1 ∨                code Do(δ, s, s0) directly since we do not have situations as
    a 6= forward ∧ a 6= backward ∧ distance = x.      terms. Instead we will use Do˜(δ, α) which intuitively means
Now we  are ready to consider some speciﬁcs having to do that α holds after doing Golog program δ. There are two pos-
with what is true initially by deﬁning an action theory Σ. Let sible readings: one says that α holds in all ﬁnal states, and the
φ denote the conjunction of the sentences above. We assume other says that α holds in some ﬁnal state. They can be inter-
that φ is true and the robot knows it. We also assume the deﬁned, so we consider only the latter. We treat Do˜(δ, α) as
robot is located initially 6 units away from the wall, but that an abbreviation for a formula of ES, deﬁned recursively on
the robot has no idea where it is. So, we let Σ be    the δ as follows:
                                                                                 def
 {φ, Know(φ), distance = 6, ∀x¬Know(distance 6= x)},    1. for any action a, Do˜(a, α) = (Poss(a) ∧ [a]α);
                                                                    def
and we get this:                                        2. Do˜(φ?, α) = (φ ∧ α);
Theorem 4.1 The following are logical entailments of Σ:
                                                                 0    def          0
 1. Close ∧ ¬Know(Close) ∧ [forward] ¬Know(Close)       3. Do˜(δ ; δ , α) = Do˜(δ, Do˜(δ , α));
    the robot is close to the wall, but does not know it, and         def
                                                        4. Do˜(δ | δ0, α) = (Do˜(δ, α) ∨ Do˜(δ0, α));
    continues not to know it after moving forward;
                                                                      def
 2. [sonar] (Know(Close) ∧ [forward]Know(Close))        5. Do˜(πx. δ, α) = ∃x. Do˜(δ, α);

    after reading the sonar, the robot knows it is close, and  ∗    def
    continues to know it after moving forward;          6. Do˜(δ , α) =
                                                             ∀P. {(α ⊃ P ) ∧ (Do˜(δ, P ) ⊃ P )} ⊃ P .
 3. [sonar] [backward] ¬Know(Close)
    after reading the sonar and then moving backward, the As usual, we can deﬁne while-loops and if-then-else as ab-
    robot no longer knows that it is close to the wall; breviations. The main theorem that we state here is that this
                                                      account of Do˜ is correct relative to the original account of Do
 4. [backward] [sonar] Know(Close)
                                                      and the mapping from ES deﬁned above:
    after moving backward and then reading the sonar, the
    robot knows that it is close to the wall;         Theorem  4.2 Let δ be any program, α be any sentence of ES,
                                                      and   be any situation term of the situation calculus.
 5. [sonar] [forward] [backward] Know(Close)              σ
                                                      Then |=FOL  Do˜(δ, α)[σ] ≡ ∃s. Do(δ, σ, s) ∧ α[s].
    after reading the sonar, moving forward, and then back-
    ward, the robot knows that it is still close to the wall; This is proved by induction over δ, the only troublesome case
                                                                                         ∗
 6. [sonar] Know([forward] Close)                     being for the nondeterministic iteration, δ .
    after reading the sonar, the robot knows that it will re-
    main close after moving forward;                  5   Mapping   from  the situation calculus
 7. ¬Know([sonar] Know(Close))                        When  mapping the situation calculus into ES, the main issue
    the robot does not know initially that it will know that it is the treatment of quantiﬁed situations. While simple formu-
                                                                                         ∗
    is close after reading the sonar;                 las can be translated using the inverse of from Section 3, a
                                                                 ∀s∃s0.s v s0 ∧ (s 6= s0) ∧ F (s) ≡ F (s0)
 8. Know([sonar] (Know(Close) ∨ Know(¬Close)))        sentence like                                , which
                                                      says that from every situation another situation is reachable
    the robot does know initially that after reading the sonar,
                                                      that agrees on the truth value of F, has no counterpart in ES.
    it will then know whether or not it is close to the wall;
                                                        To deal with situation-calculus sentences like these, our
 9. Know([sonar] [backward] ¬Know(Close))             proposal is to encode action sequences in second-order ES.
    the robot knows initially that it will not know that it is Let nil be a (rigid) constant and seq a (rigid) binary function
    close after reading the sonar and moving backwards. symbol of ES. We deﬁne ActionSeq(x) as an abbreviation for
Proof:  The proofs of these are similar. Here we will only
                                                         ∀Q. Q(nil) ∧ ∀y, a.(Q(a) ⊃ Q(seq(a, y))) ⊃ Q(x).
do item 3. Let z = hsonar · backwardi, and suppose that
e, w |= Σ; we must show that e, w, z |= ¬Know(Close). Be- In the situation calculus, a ﬂuent like F (do(α, do(β, S0)))
cause e, w |= ¬Know(distance 6= 9), there exists w0 ∈ e such actually means that F holds after doing β then α. So the
     0            0
that w 'h i w and w [distance, h i] = 9. Since 9 < 10, we actions are in reverse order in a situation term. It is therefore
             0                 0
also have that w 'z w. However, w [distance, z] = 10. So useful to be able to reverse a sequence as follows:
           0              0           0
there exists w ∈ e such that w 'z w and w , z |= ¬Close.                    def
Therefore, e, w, z |= ¬Know(Close).                   Deﬁnition 5.1 Rev(x, y) = ∀R(. . . ⊃ R(x, nil, y)), where
                                                      the ellipsis stands for the universal closure of
Although we will not attempt to formulate a theorem here, it R(nil, x, x) ∧ [R(x, seq(a, y), z) ⊃ R(seq(a, x), y, z)].
should be clear from this example that any basic action theory
[Reiter 2001a] including those involving the Scherl-Levesque Next we deﬁne what it means for a formula α to be true after
knowledge operator can be expressed in ES.            a sequence of actions.