                  Automated Generation of Graphic Sketches by Example 

                                   Michelle X. Zhou          Min Chen 

                                    IBM T. J. Watson Research Center 
                                             19 Skyline Drive 
                                          Hawthorne, NY 10532 
                                          Phone: (914)784-7000 
                                     {mzhou, minchen}@us.ibm.com 

                     Abstract                          VISE* may redesign the sketch or refine it to create a final 
        Hand-crafting effective visual presentations is illustration (e.g., setting the exact layout of Figure 1). By 
    time-consuming and requires design skills. Here we allowing users to critique a sketch first, IMPROVISE* can 
    present a case-based graphic sketch generation     save the cost of fine-tuning an undesirable design. 
    algorithm, which uses a database of existing          Our focus here is on a case-based learning approach to 
    graphic examples (cases) to automatically create a sketch generation. Given a user request, from a database of 
    sketch of a presentation for a new user request. As existing graphic examples (cases) our approach uses a simi•
    the first case-based learning approach to graphics larity metric to retrieve the case that is most similar to the 
    generation, our work offers three unique contribu• request. The retrieved case is then directly reused for or 
    tions. First, we augment a similarity metric with a adapted to the new situation (e.g., new data). Instead of using 
    set of adequacy evaluation criteria to retrieve a case a rule-based approach as most graphics generation systems 
    that is most similar to the request and is also usable do [Mackinlay, 1986; Zhou, 1999], our decision of using 
    in sketch synthesis. To facilitate the retrieval of case case-based learning is two-fold. First, it is difficult to hand-
    fragments, we develop a systematic approach to     extract a complete and consistent set of graphics design 
    case/request decomposition when a usable case      rules, while existing graphic examples are abundant [Zhou 
    cannot be found. Second, we improve case retrieval et al., 2002a]. Second, case-based learning is efficient for 
    speed by organizing cases into hierarchical clusters sketch generation, where we focus on learning overall visual 
    based on their similarity distances and by using   structures instead of precise visual arrangements (e.g., exact 
    dynamically selected cluster representatives. Third, positions and scales) '. 
    we develop a general case composition method to       Although case-based learning has been applied to vari•
    synthesize a new sketch from multiple retrieved    ous design problems [Borner, 2001], it has never been 
    cases. Furthermore, we have implemented our case-  applied to graphics design. As the first case-based learning 
    based sketch generation algorithm in a user-system 
    cooperative graphics design system called IMPRO•
    VISE-!-, which helps users to generate creative and 
    tailored presentations. 
1 Introduction 
    Automated graphics generation systems promise to aid 
users in creating effective visual presentations (e.g., charts 
and diagrams) [Mackinlay, 1986; Zhou, 1999]. Upon a user 
request (e.g., displaying sales data), these systems directly 
provide users with the final presentation (e.g., a barchart). To 
better tailor a presentation to user preferences, we are build•
ing a user-system cooperative graphics generation system, 
called IMPROVISE*, IMPROVISE* generates a presentation in 
two steps: sketch generation and sketch refinement. Here a 
sketch is an outline of a presentation without all visual 
details (Figure 1). A generated sketch is first presented to 
users for their feedback. Depending on the feedback, IMPRO•


ART AND CREATIVITY                                                                                     65 approach to graphics design, our work offers three unique method to synthesize a new sketch from multiple cases, while 
contributions. 1) In case retrieval, we apply a set of adequacy existing systems only allow limited case composition (e.g., 
evaluation criteria in addition to a similarity metric to ensure combining only highly similar cases [Borner, 2001]). 
that the retrieved case is usable in sketch synthesis. To han•
dle situations where a usable case may not be found, we 3 Example-based Sketch Generation 
decompose cases/requests into sub-cases/sub-rcquests to   Figure 2 gives an overview of our case-based sketch 
facilitate the retrieval of case fragments. 2) We improve case generation algorithm. Our algorithm uses a database of exist•
retrieval speed by organizing cases into hierarchical clusters ing information graphics (cases) to suggest a visual design 
based on their similarity distances and by using dynamically for a new user request. Here each stored case is described by 
selected cluster representatives. 3) We synthesize a new its data content D and visual representation v. Each request is 
sketch from multiple retrieved cases through case generali• presented by specifying the data D' and its desired visualiza•
zation and visual decoration inference (e.g., inferring deco• tion v, which may be partially or not specified at all. Given 
rations such as coordinate axes and legends).          such a request, our algorithm first uses a similarity metric to 
    Starting with a brief discussion of related work, we then retrieve the top-matched case by computing the similarity 
present our case-based learning algorithm, highlighting the distances between the request and existing cases. A top-
three unique features mentioned above. Finally we use a matched case is the case that has the shortest similarity dis•
concrete example to demonstrate how a new sketch is cre• tance to the request. If the top-matched case fails our ade•
ated.                                                  quacy test, the current request is decomposed into a set of 
                                                       sub-requests. The whole process is recursively called to find 
2 Related Work                                         the top-matched case for each sub-request. Depending on the 
    Unlike rule-based graphics systems [Mackinlay, 1986; retrieval result, a new sketch (a fully specified V) may be 
Andre and Rist, 1993; Chuah ctal., 1997; Zhou, 1999], our constructed from the visual encoding (V) of a single matched 
work is the first to apply a general case-based learning tech• case or composed from multiple cases. Upon completion, the 
nique to graphics design. Although one system, SAGE, has an user is presented with a rendered graphic sketch (e.g., Figure 
example-based generation component, it only reuses exam• 1). We also involve users at different design stages (Figure 
ples created by its own rule engine [Chuah et al., 1997]. 2). For example, our studies have shown that users may 
Compared to SAGE, IMPROVISE+ uses a much more fine-    express their preferences to retrieve more desired cases 
grained representation to capture the semantic and syntactic- [Zhou et al., 2002b] or propose new visual compositions 
features of each graphic example [Zhou et al., 2002b]. As a during sketch synthesis. 
result, without using any rules IMPROVISE-*- can create new Before discussing our algorithm, we first briefly 
graphic sketches by directly learning from a wide variety of describe the representations of our cases and user requests. 
graphic examples. 
    Differing from a programming by demonstration system 3.1 Representation of Cases and User Requests 
[Myers et al., 1994], where users must supply the desired We employ a labeled graph structure to represent our 
examples, our approach uses the graphic examples stored in cases and requests. Since we have described in detail how to 
a database.                                           model and represent various semantic and syntactic features 
   There are many case-based systems developed for other of an existing graphic example previously [Zhou 
domains, e.g., engineering design [Sycara et al., 1992]. The et al., 2002b], we summarize the representation here. 
closest to ours are known as case-based structure generation 
systems [Borner, 2001]. However we have gone beyond 
existing approaches to address specific challenges in graph•
ics design. In particular, we support a systematic, multi-level 
case/request decomposition to achieve a more accurate case-
request matching. In contrast, existing systems either ignore 
case/request decomposition [Borner, 2001] or simplify it 
(e.g., only leaf-level decomposition [Michelena and 
Sycara, 1994]). We also develop a general case composition 


               User request 


66                                                                                   ART AND CREATIVITY Visual Database of Cases 
    Our case base contains an assortment of graphic designs 
collected from a wide variety of sources [Zhou et al., 2002a]. 
Using a labeled graph structure [Zhou et al., 2002b], each 
case is described in XML as a graph (Figure 3a), which 
expresses a complex mapping between a data hierarchy (DO-
D5) and a visual hierarchy (V0-V8). Within each hierarchy, a 
data/visual node is described by a set of features (e.g., D3 and 
V7). There are two types of links in the graph: intra-hicrarchy 
links for data/visual node relationships (e.g., D3 is indexed 
by D2 and all undirected edges implying parent-child rela•
tions), and inter-hierarchy links (red dotted lines) for data-
visual mappings (e.g., D5 to V7). To facilitate case retrieval, 
we also index each case using two graphs (Figure 3b): 
PDGraph organizes data-visual mapping pairs along the data 
                                                                            Figure 4. A sample user request. 
hierarchy, while PVGraph arranges the mapping pairs by the 
visual hierarchy. Note that a data/visual node may be          retrieval of case fragments. In addition, we use a hierarchi 
mapped to multiple visual/data nodes (e.g., D5 and V6) or      cally structured case base to improve our retrieval speed. 
none (denoted by "/"). Our bi-graph indexing not only pre•     Adequacy-Guided Retrieval 
serves all the information captured in the original complex        Using a quantitative similarity metric that we have 
graph (Figure 3a), but also partitions one complex graph into  developed [Zhou et al., 2002b], our algorithm first retrieves 
two simpler sub-graphs (Figure 3b), which can greatly sim•     the top-matched case for a request. As a result, each data 
plify the similarity measuring process.                        node and data relation in the request are associated with a 
    When loading all cases from the database to memory,        computed similarity distance in the range of [0, 1]. Since our 
IMPROVISE+ parses the XML document of each case and auto•      similarity model stresses the overall structural similarity 
matically builds all case indices (PDGraphs and PVGraphs).     between the request and the existing examples, a data node 
User Request                                                   Dr in the request may or may not acquire a match (D, v) from 
    A user request submitted in XML format is also described   the top-matched case. Here D is the data that matches Dr, and 
as a graph similar to the case representation. Figure 4 out•   v(the visual mapping of D) is a potential visual candidate for 
lines a request for presenting the information of a city. Spe• encoding Dr in the new sketch. If no match is found for Dr, 
cifically, it asks to display the relevant county              the recorded distance is 1.0. However, the top-matched case 
(CountyBoundary), basic information of the city (Name and      may be inadequate for creating an effective sketch for the 
Location), the city gazetteer (Population, Agelnfo for 6 age   following three reasons. Accordingly, we formulate three 
groups, and an arrow button indicating Morelnfo is available   adequacy criteria to evaluate whether a retrieved case is 
upon request), and 3 city amenities (Name, Location, and Type) usable in sketch synthesis. 
such as community golf courses and swimming pools. Since           First, a top-matched case may produce a good overall 
users may not know every presentation aspect, the represen•    match but poor or no matches for certain data nodes in the 
tation of a user request is often a partially specified graph  request. This implies that certain data or a sub-set of data 
with the majority of the visual elements left unspecified. For expressed in the request may not be well visualized in the 
example, Figure 4 does not specify a visual encoding for any   new sketch as they could be. To ensure a good match for 
data nodes except Morelnfo.                                    every data node (i.e., a short similarity distance), our first 
    Based on the characteristics of data relations, our algo•  criterion requires that the similarity distance for every data 
rithm automatically assigns matching priorities to different   node of a request be below a threshold. After conducting a 
data relations in a user request to indicate that matching cer• series of case retrieval experiments, we currently set the 
tain data relations well (e.g., index in Figure 5) is more     threshold to 0.3 on a [0, 1] scale, which proves to be a good 
important than matching others (e.g., has-a). As described     indicator for creating a quality new sketch. 
below, matching priorities aid us in evaluating the usability      Second, suppose that a top-matched case passes the 
of a retrieved case and in selecting visual candidates. Cur•   above criterion. By the matching priorities set in the request, 
rently, we assign priorities by relation type. For example, a  however the distances for more important data relations may 
higher priority is given to presentation relations like index  be larger than those of less important ones. Since matching 
than to semantic relations like has-a.                         priorities are used to select visual candidates during case 
                                                               composition, using such a matching result may alter the orig•
3.2 Case Retrieval                                             inal intention of the request and produce an undesired 
    The success of an interactive case-based system like 
ours, depends largely on the quality and speed of the case 
retrieval process. To ensure retrieval quality, we augment 
similarity measuring with adequacy evaluation that tests 
whether a retrieved case is usable in sketch synthesis. If a 
usable case cannot be found, we decompose cases and 
requests into sub-cases and sub-requests to facilitate the 


ART AND CREATIVITY                                                                                                     67  sketch. Therefore our second criterion states that for every  structure for a fast graph matching (see below). 
 data relation in a request, the higher its matching priority is,  For the sake of performance, we automatically extract 
 the shorter its associated similarity distance must be.       all sub-cases during the case loading stage. 
     Third, even though a top-matched case passes the above        Request decomposition. Unlike case decomposition, 
 two criteria, it may still not be adequate for synthesizing a which is done once during the case loading stage, request 
 new sketch. Our synthesis starts with the visual candidates of decomposition occurs whenever a retrieved top-matched 
 data leaf nodes in a request and composes the higher-level    case fails our adequacy evaluation. To ensure the retrieval 
 visual nodes from bottom up using the lower-level visual      quality without incurring the expense of rematching, we 
 nodes. However our top-down graph matching is a partial 
                                                               extract only the failed fragments as sub-requests, while 
 matching, which may not guarantee that every data leaf node 
                                                               retaining the results for succeeded ones. Here a failed frag•
 in a request acquire a visual candidate [Zhou et al., 2002b]. 
                                                               ment is the biggest possible rooted sub-graph that contains 
 Our synthesis would then fail due to a lack of basic building 
                                                               failed nodes excluding the root of the current request. Sup•
 blocks. Thus our third criterion requires that every data leaf 
                                                               pose that every node in fragment A (Figure 4) passes our 
 node in a request obtain a visual candidate. It is not required 
                                                               evaluation, but a node (e.g., AName) in fragment B fails. We 
 to find visual candidates for intermediate data nodes from 
                                                               then create a sub-request containing the whole fragment B 
 case retrieval, since theirs can be composed from those of 
                                                               with City as the root, while keeping the matching results of 
 their children. 
                                                               fragment A. Depending on the matching results, the decom•
 Case and Request Decomposition                                position may be repeated until sub-requests contain a single 
     It is rare to find an exact match for a user request from node. The matched cases for these single-node requests can 
the case base, but it is quite common that a fragment of the   be found from our visual dictionary. 
user request matches well with a fragment of a case                Since sub-requests break up the original structure of a 
 [Mitchell, 1997]. To facilitate the retrieval of case fragments, request, it is always desirable not to produce too many sub-
we support case/request decomposition.                         requests. Request decomposition however enables us to find 
                                                               desired case fragments from a set of heterogeneous cases as 
     Case decomposition. To avoid creating a large search 
                                                               we have, where finding a maximal common subgraph may 
space, our challenge is to determine the granularity of sub•
                                                               fail [Borner, 2001]. Unlike a static request decomposition 
cases. Based on the data and visual characteristics of a 
                                                               used by other researchers [Michelena and Sycara, 1994], our 
graphic example [Zhou et al., 2002b], we develop four heu•
                                                               decomposition is dynamically performed based on our ade•
ristics to guide our case decomposition. 
                                                               quacy evaluation results. 
     1). We extract independent and meaningful visual struc-
tures, which are schematic illustrations for conveying con•    Improve Retrieval Speed 
cepts and processes [Winn, 1987]. For example, the table           As the number of cases grows, the cost of searching for a 
showing the city information (Figure 6a) is considered as a    desired case increases. Moreover, finding a graphic example 
sub-case. Within a case, such a structure can be easily identi• that matches a user request best is a computationally inten•
fied by the value (VisualStructure) of its feature Category.   sive graph-matching process itself. Specifically, we need to 
    2). We turn a case (e.g., Figure 6b) into a sub-case by    match two pairs of PDGraphs and PVGraphs between a case 
trimming all its decorations (e.g., coordinate axes and leg•   and a user request. By exploiting the rooted hierarchical 
ends). These simplified sub-cases are good matching candi•     structure of PD/PVGraph, we perform an ordered, top-town 
dates for most user requests, which normally do not specify    graph matching [Zhou et al., 2002b] to accelerate otherwise 
the data for creating visual decorations.                      an arbitrary graph matching process (e.g., matching two 
    3). We extract all visual leaf objects along with their data complex graphs similar to Figure 3a). To further improve 
mappings from cases (e.g., V7 and D5 in Figure 3b) to form a   case retrieval speed, we reduce the search space by using a 
visual dictionary [Zhou and Feiner, 1997]. The dictionary is   hierarchically structured case base. 
used to find matches for user requests that contain a single       Instead of searching the case base linearly, we exploit 
node.                                                          the organization of the cases. We use a hierarchical cluster•
    4). We decompose a case by data relations. Figure 5        ing algorithm [Duda and Hart, 1973] to arrange all cases by 
shows two data relations (has-a and index) encoded in Figure   their pair-wise distances computed using a similarity metric 
6(b), which lead to two sub-cases (Figure 5a-b). In Figure     [Zhou et al., 2002b]. Figure 7 shows such a cluster hierarchy. 
5(b), a Dummy node is also added to preserve a rooted graph    Starting with the two outmost clusters in the hierarchy (e.g., 
                                                               clusters 1-2 in Figure 7), at each level we search only one 


68                                                                                                ART AND CREATIVITY cluster that is most likely to contain the top-matched case. higher-level nodes in the request. Since visual candidates 
    To find a cluster to follow, we first select a representa• may be retrieved from different cases, their compositions 
tive for each cluster using a quick approximation. A repre- may never exist before and new compositions are needed to 
sentative is a case closest to the request by three meta piece them together. Here we denote a visual composition 
properties of its PDGraph: the total number of nodes, the (=>) of N visual elements as: 

average number of levels, and the average number of nodes  Ej, ..., EN=>rC, 
at each level. We then select the cluster whose representative where E, is the zth element, r is the composition relation, and 
produces the shortest similarity distance to the request by our C is the composed visual object. Below is an example of a 
similarity metric. The rationale here is that the top-matched cartogram (a map-based presentation) composition: 
case for a request is likely to be in the same cluster of cases Position, Map =s> overlay Cartogram. 
that match the request well by both meta properties and our It composes a Cartogram by overlaying a Position element on 
similarity metric.                                     top of a Map element. In our approach, a new composition for 
    Following the selected cluster (e.g., cluster 2 in Figure an intended data node (e.g., Amenity in Figure 4) is proposed 
7) down the hierarchy (e.g., clusters 3-4), our algorithm using the composition information recorded in its children 
repeats the above process until it explores a leaf cluster. In (e.g., AName) during the case retrieval. Specifically, in each 
our experiments, this cluster-guided search improves the per• data node that acquires a visual candidate v from the 
formance over a linear search by a factor of 3. Due to the retrieved case (e.g., V7 from Figure 3a), we record the com•
approximation used, our method however is not guaranteed position relation and category specified in vs parent (e.g., 
to find the top-matched case. Unlike other structured case V4). As a result, for each retrieved visual candidate our algo•
search, where cluster representatives are pre-selected in rithm records the possible compositions that the visual can•
advance [Borner, 2001], we dynamically compute represen• didate has participated in. 
tatives for each request to achieve a more accurate retrieval. However a proposed composition may not always be 
3.3 Case Composition: Sketch Synthesis                 valid. Here validity means that a visual composition must 
                                                       produce an effective visual design [Mackinlay, 1986]. For 
    As the result of a successful retrieval, each data leaf example, the above cartogram composition is a valid compo•
node of the request acquires at least one visual candidate. sition, but composing a visual object by juxtaposing two hor•
Starting with the visual candidates of the leaves, our algo• izontal position elements is not. Without hand-crafting rules 
rithm synthesizes a sketch from bottom up by creating visual or pre-defining connectors [Michelena and Sycara, 1994], 
candidates for higher-level data nodes and finally for the we use a decision-tree learning technique to automatically 
root. In this section, we address three challenges arising in induce a set of classification rules from 200 visual composi•
sketch synthesis. First, we resolve visual candidate conflicts tion samples extracted from our cases. By our visual compo•
when a data node in the request acquires multiple candidates. sition definition, we describe each sample using N input 
Second, to compose multiple retrieved cases, we use deci• features specifying N visual element categories (e.g., Position 
sion-tree learning to generalize existing visual compositions and Map) and one target specifying a combined composition 
and to verify new compositions. Third, we automatically relation and category (e.g., overiay_Cartogram). Currently N is 
infer visual decorations from existing cases, such as the set to 3 since most of our samples contain 3 elements. If a 
coordinate axes and legends, to complete a visual sketch sample contains fewer than 3 elements, the remaining fea•
design.                                                tures are set to null. We train C4.5 [Quinlan, 1993], a deci•
Conflict Resolution of Visual Candidates               sion-tree learning algorithm, on the 200 samples using 5-fold 
    Within a user request, a data node may acquire multiple cross-validation, a standard procedure when the amount of 
visual candidates from different case matching. For example, data is limited. We obtain 14 generalized composition rules 
data nodes Name and Price appear in two sub-requests (Figure with an overall classification error of 22%. We then use these 
5a-b). It is most likely for both items to obtain multiple rules to verify a new composition. 
visual candidates as the two sub-requests are matched to dif• To compensate for the situation where there is a lack of 
ferent cases. To select a proper visual candidate, we cur• visual composition samples, we introduce negative samples 
rently use both the matching priority set in the user request that are known invalid compositions to help identify invalid 
and the distance calculated during similarity measuring. Spe• new compositions. Similar to the above process, we use clas•
cifically, we first retain candidates that are acquired through sification rules induced from the negative samples to verify 
matching the data relations with a higher priority. In the invalid new compositions to be eliminated. After both posi•
above example, we will keep the candidates for Name and tive and negative verifications, if there are still multiple pro•
Price acquired through matching the sub-request in Figure posed compositions we use the confidence factors generated 
5(b), since the priority for matching relation index precedes in the decision-tree learning to select the most probably valid 
that of relation has-a (Figure 5a). If there are multiple candi• composition. Without a sufficient number of composition 
dates by the same matching priority, we then select candi• samples, our approach may not always verify a composition 
dates that have produced the shortest distance during the correctly. That is why we involve users in the design process 
match. Should there still be multiple candidates left, our to help IMPROVISE-*- in its decision-making (Figure 2). 
algorithm would choose a candidate randomly.           Inferring Visual Decoration 
Generalizing and Verifying Visual Composition             A sketch is incomplete without the necessary visual dec-
    Our sketch synthesis uses visual candidates acquired for orations, such as coordinate axes and legends, which can 
the lower-level data nodes to create visual candidates for the guide users to comprehend the information encoded in the 

ART AND CREATIVITY                                                                                      69 