 Backtracking Procedures for Hypertree, HyperSpread and Connected Hypertree
                                     Decomposition of CSPs

                       Sathiamoorthy Subbarayan and Henrik Reif Andersen
                                   The IT University of Copenhagen
                                                Denmark
                                            sathi,hra@itu.dk

                    Abstract                          problem [MAT, 2006]. We show that hyperspread width is
                                                      bounded by both hypertree width and spread cut width, which
    Hypertree decomposition has been shown to be the  gives a simple positive answer to the open problem. In the ex-
    most general CSP decomposition method. How-       periments on several instances our hypertree and connected
    ever, so far the exact methods are not able to    hypertree decomposition methods result in ﬁnding optimal
    ﬁnd optimal hypertree decompositions of realistic decompositions of many instances, while the previous meth-
    instances. We present a backtracking procedure    ods can ﬁnd optimal decompositions of at most one instance.
    which, along with isomorphic component detec-     In our experiments with a given time limit, for all the in-
    tion, results in optimal hypertree decompositions. stances we are able to obtain a connected hypertree decom-
    We also make the procedure generic; variations of position of width at least as small as the obtained hypertree
    which results in two new tractable decompositions: decomposition. We ﬁnally state as an open problem whether
    hyperspread and connected hypertree. We show      the connected hypertree width of an instance equals the hy-
    that the hyperspread width is bounded by both the pertree width.
    hypertree width and the spread cut width, which
                                                        The next section lists necessary deﬁnitions. The Section 3
    solves a recently stated open problem. In our ex-
                                                      presents the backtracking procedure and deﬁnes isomorphic
    periments on several realistic instances, our meth-
                                                      components. The generic procedure and its variants are pre-
    ods ﬁnd many optimal decompositions, while the
                                                      sented in the Section 4. The Section 5 presents the experi-
    previous methods can ﬁnd at most one.
                                                      mental results. The Section 6 concludes the paper.
1  Introduction
                                                      2   Deﬁnitions
A CSP decomposition method DM is tractable if, for a ﬁxed
k, determining whether the DM-width of a CSP instance is at A constraint satisfaction problem instance (CSP) is a triple
most k takes polynomial time and all the CSP instances hav- (V ,D,C), where V is a set of variables, D is a set of domains
ing DM-width at most k can be solved in polynomial time. A and C is a set of constraints. A variable vi ∈ V can take
method DM1 is more general than an another method DM2 if values in the ﬁnite domain di ∈ D.Aconstraint ci ∈ C is a
all the CSP instance classes having bounded DM2-width also pair (si,ri), where si ⊆ V is the scope of the constraint and ri
have bounded DM1-width but not vice-versa. Likewise, DM1 is a relation over si.Theri restricts the allowed combination
is better than DM2 if the DM1-width of any instance is at most of values the variables in si can be assigned. A solution to
its DM2-width, and for an instance its DM1-width is smaller a CSP is an assignment of values to all the variables in the
than its DM2-width. Among several tractable decomposition CSP, such that the assignment restricted to a scope si belongs
methods [Freuder, 1985; Dechter, 2003; Gyssens et al., 1994; to the relation ri.ACSPissatisﬁable if there is a solution for
Gottlob et al., 2000], the hypertree decomposition has been the CSP.
shown to be the most general [Gottlob et al., 2000]. But no A constraint hypergraph of a CSP (V ,D,C) is a hyper-
exact procedure for hypertree decomposition has been able to graph H =(V ,E), where the set of nodes in the hypergraph
handle instances of realistic sizes. This is mainly due to huge V is the same as the set of variables in the CSP. For each
preprocessing in the existing exact methods [Gottlob et al., (si,ri) ∈ C, there will be an edge (also called a hyperedge)
1999; Harvey and Ghose, 2003].                        ei ∈ E, such that ei = si, i.e., E = {si | (si,ri) ∈ C}.
  We ﬁrst present a backtracking procedure for hypertree de- Hereafter, just the term hypergraph refers to a constraint
composition. We identify isomorphic components of a hyper- hypergraph. For a set of edges K ⊆ E, let the term
graph, and use it to speed-up the procedure. We generalize the vars(K) = e∈K e, i.e., the union of variables occurring in
procedure, the variations of which results in two new tractable the edges K. For a set of variables L ⊆ V , let the term
decomposition methods: HyperSpread and Connected Hy-  edgeVars(L) = vars({e | e ∈ E,e ∩ L = ∅}), i.e., all the
pertree. Finding a tractable decomposition better than hy- variables occurring in a set of edges, where each edge in the
pertree decomposition has been recently stated as an open set contains at least one variable in L.

                                                IJCAI-07
                                                   180  A tree decomposition [Robertson and Seymour, 1986;  (α,α-comp) is k-decomposable by using the k-edge β if there
Dechter, 2003] of a hypergraph (V ,E)isapairTD =(T ,γ), exists a HD’ with λ(r)=β.
where T =(N,A) is a tree and γ is a mapping which for each The procedure AddGood is used to add a tuple (α,α-
node n ∈ N associates γ(n) ⊆ V . Additionally, a tree de- comp,β,cCs) to the set goods, if the pair (α,α-comp) is k-
composition has to satisfy two properties: (1) ∀e ∈ E. ∃n ∈ decomposable by using the k-edge β.ThesetcCs in the tu-
N. e ⊆ γ(n),and(2)∀v  ∈ V , the nodes {n | n ∈ N,v ∈  ple, denotes the elements of β-comps contained in α-comp.
γ(n)} induces a connected subtree in T .Ahypertree [Gottlob Similarly, the procedure AddNoGood is used to add a pair
et al., 2000] of a hypergraph (V ,E) is a triple (T ,χ,λ), where (α,α-comp) to the set noGoods, if the pair (α,α-comp) is not
T =(N,A)isarooted  tree. The χ and λ are mappings that k-decomposable. The procedure IsGood(α,α-comp) returns
associate for each node n ∈ N, χ(n) ⊆ V andλ(n) ⊆ E. true iff a tuple of the form (α,α-comp,β,cCs) exists in the
                                 
If T = (N ,A) is a subtree of T ,thenχ(T ) = n∈N  χ(n). set goods. Similarly, the procedure IsNoGood(α,α-comp) re-
Let the term Tn denote the subtree rooted at the node n ∈ N. turns true iff the pair (α,α-comp) exists in the set noGoods.
Let the term nodes(T ) = N.Thewidth of the hypertree    The procedure Decompose takes a (α,α-comp) pair as in-
(T ,χ,λ)ismax {|λ(n)||n ∈ nodes(T )}.                 put and returns true iff (α,α-comp) is k-decomposable. The
  A hypertree decomposition [Gottlob et al., 2000] of a hy- line(1) of the procedure ﬁnds cv, the set of variables through
pergraph H is a hypertree HD =(T ,χ,λ), which has to sat- which the α-comp is connected to the rest of the variables
isfy the three properties: (1) (T ,χ) is a tree decomposition in the hypergraph. The loop that begins at line(2) iterates
of H,(2)∀n   ∈ nodes(T ), χ(n) ⊆ vars(λ(n)),and(3)    for every k-edge β, such that (vars(β) ∩ α-comp = ∅)and
∀n ∈ nodes(T ), χ(Tn) ∩ vars(λ(n)) ⊆ χ(n).Thehyper-   (cv ⊆ vars(β)). That is the β should be such that vars(β)
tree width of H, denoted htw(H), is the minimum width of contains at least one variable in α-comp, and cv is contained
all possible hypertree decompositions of H.           in vars(β). The set cCs in line(3) is the set of elements of β-
  To simplify the presentation, we assume that H is con- comps, which are contained in α-comp and hence necessary
nected. Given a set of variables P ⊆ V , and two vari- for consideration by the Decompose procedure.
ables m, n ∈ V ,thevariablesm and n are [P]-adjacent    The internal loop starting at line(5) of Decompose checks
if ∃e ∈ E. m,n ∈  (e\P ). A set of variables Q ⊆ V is whether a (β,cC) pair is k-decomposable. The variable suc-
[P]-connected, if for any two variables m, n ∈ Q,thereis cess will be true at the line(10) iff, for each cC ∈ cCs, the
a sequence of variables m = l1,l2,...,lr−1,lr = n,such pair (β,cC) is k-decomposable. A call to Decompose(β,cC)
that, for each i ∈ [1,r− 1], li and li+1 are [P ]-adjacent. A at line(8) is made iff both the calls to IsNoGood(β,cC) and
set of variables Q ⊆ V is a [P]-component (or [P]-comp in IsGood(β,cC) return false. This makes sure that for any (β,β-
short), if it is a maximal [P ]-connected subset of V .Let[P]- comp) pair, the call Decompose(β,β-comp) is made at most
components (or [P]-comps in short) denote the set containing once. At line(10), if the variable success is set to true, then
every [P]-component.                                  the tuple (α,α-comp,β,cCs) is added to the set goods and the
  Given an integer k and α ⊆ E, α is a k-edge,if|α|≤k. procedure returns true. Otherwise, the loop at line(2) contin-
Let the set k-edges = {α | α ⊆ E,|α|≤k},i.e,theset    ues with an another k-edge choice for β. If all choices for β at
containing every k-edge. Given a k-edge α,anα-comp is a line(2) is exhausted without any success, then the procedure
[vars(α)]-comp. The size of α-comps, which contains every adds the (α,α-comp) pair to the set noGoods at line(11) and
α-comp, is at most |E|,asforeveryα-comp edgeVars(α-   then returns false.
comp) will uniquely contain at least one edge e ∈ E.Givena In case the call Decompose(∅,V ) at line(1) of the proce-
set of variables Q ⊆ V ,thesub-hypergraph induced by Q is dure IsDecomposable returns true, then a hypertree decompo-
                                  
the hypergraph (V ,E ), where V = Q and E = {e ∩ Q | e ∈ sition (HD) is built and returned. Otherwise, a message ’Not-
E}. Let a pair of the form (α,α-comp), where α is a k-edge, k-decomposable’, meaning the hypertree width of (V ,E)is
be called a k-edge-component.                         larger than k, is returned. At line(2) of the procedure a root
                                                      node r is created and a tuple of the form (∅,V ,β,cCs) is ob-
3  The Backtracking Procedure                         tained from the set goods. The third entry β in the tuple cor-
                                                      responds to the k-edge used during the ﬁrst call of the re-
Our procedure is shown in Figure 1. The main procedure Is- cursive Decompose procedure. Hence, λ(r) is set to β.By
Decomposable takes the pair ((V ,E), k) as input. The output the deﬁnition of hypertree decomposition, for a root node r,
is a hypertree decomposition if htw((V ,E)) ≤ k,otherwise χ(r) = vars(λ(r)). Hence, the χ(r) is set to vars(β). In the
the message ’Not-k-decomposable’.                     lines(4-5), for each cC ∈ cCs, a child node of r is created
  Given a k-edge-component (α,α-comp), we say the pair by the call BuildHypertree (β,cC,r). The procedure BuildHy-
(α,α-comp) is k-decomposable iff the sub-hypergraph in- pertree in fact recursively calls itself and extracts, from the
duced by the nodes in edgeVars(α-comp) has a hypertree de- set goods, the subtree rooted at a child vertex of r. At line(6),
composition HD’ of width at most k, such that, if the root the procedure returns a hypertree decomposition.
node of HD’ is r,thenedgeVars(α-comp) \ α-comp ⊆ χ(r).
                                                      Theorem 3.1. IsDecomposable(H,k) returns a hypertree de-
Essentially, the notion k-decomposable tells us whether the
                                                      composition iff htw(H) ≤ k.
sub-hypergraph can be decomposed into a HD’ of width at
most k, such that HD’ can be used as a block in building a de- The proof of the above theorem follows from the fact that,
composition for the whole hypergraph. Hence, the pair (∅,V ) our procedure is essentially a backtracking version of the opt-
is k-decomposable iff the htw((V ,E)) ≤ k. We say that the k-decomp [Gottlob et al., 1999] procedure for hypertree de-

                                                IJCAI-07
                                                   181 Set goods = ∅; Set noGoods = ∅; Hypertree HD = (T ,λ,χ)
                                                           IsGood (t1,t2)
           α α                                             1: ∀ (tw,tx,ty,tz) ∈ goods
 Decompose ( , -comp)                                             t t    t  t
 1: cv = vars(α) ∩ edgeVars(α-comp)                        2:   if ( 1, 2)=( w, x) then return true
                                                           3: return false
 2: ∀β ∈ k-edges. (vars(β) ∩ α-comp = ∅). (cv ⊆ vars(β))
 3:    cCs = {cC | cC ∈ β-comps, cC ⊆ α-comp }
                                                           IsNoGood (t1,t2)
 4:    success = true
                                                           1: ∀ (tx,ty) ∈ noGoods
 5:    ∀ cC ∈ cCs                                                 t t    t t
                     β                                     2:   if ( 1, 2)=( x, y) then return true
 6:       if (IsNoGood( ,cC)) then success = false         3: return false
 7:       else if (IsGood(β,cC)) then continue
 8:       else if (Decompose(β,cC)) then continue
                                                           AddGood (t1,t2,t3,t4)
 9:       else success = false
                                                           1: goods = goods ∪{(t1,t2,t3,t4)}
 10:    if (success) then AddGood(α,α-comp,β,cCs); return true
 11: AddNoGood(α,α-comp); return false
                                                           AddNoGood  (t1,t2)
                                                                              ∪{(t ,t )}
 IsDecomposable ((V ,E),k)                                 1: noGoods = noGoods   1 2
               ∅ V
 1: if (Decompose( , )) then                               BuildHypertree (α,α-comp,s)
 2:   Add root node r to T ; Find (∅,V ,β,cCs) ∈ goods            α α      β    ∈
      λ(r) β  χ(r)     β                                   1: Find ( , -comp, ,cCs) goods
 3:       =  ;    = vars( )                                2: Add a node t to T as a child node of s
 4:   ∀ cC ∈ cCs                                              λ(t) β  χ(t)     β  ∩        α
                      β   r                                3:     = ;     =(vars( ) edgeVars( -comp))
 5:      BuildHypertree ( ,cC, )                           4: ∀ cC ∈ cCs
 6:   return HD                                            5:   BuildHypertree (β,cC,t)
 7: else return ’Not-k-Decomposable’

                Figure 1: The pseudo code of the backtracking procedure for hypertree decomposition.

composition. The opt-k-decomp procedure suffers from a deﬁnition, ∀e ∈ E. e ⊆ edgeVars(comp) ⇒ (e\comp) ⊆ α.
huge pre-processing cost. For a given k, the opt-k-decomp Also, comp ∩ vars(α)=∅. This implies that, during the call
implicitly ﬁnds all possible decompositions of width at most Decompose(α,comp), the set cv = edgeVars(comp)\(comp).
k and extracts the optimal one. But our backtracking proce- Therefore, the set cv remains the same during both the calls
dure stops as soon as it discovers a decomposition of width Decompose(α,comp) and Decompose(α,comp’). Hence, the
at most k. Hence, our procedure will be able to stop quickly proof.
when there are several decompositions of width at most k.
                                                        For each set of isomorphic components we need to make at
                                              H  k
Theorem 3.2. The time complexity of IsDecomposable( , ) most one call to Decompose. Hence, by using isomorphism
    |E|3k+3
is O(      ).                                         the number of calls to Decompose may reduce signiﬁcantly.
Proof. The time complexity is dominated by Decompose.
During a call to Decompose, the loop over choices for β 4 Variants of Hypertree Decomposition
                   k
iterates at most O(|E| ). The |cCs| is at most |E|.Since The Figure 2 presents the pseudo code for a generic decom-
each k-edge results in at most |E| k-edge-components, the position procedure IsDecomposableGe, based on the hyper-
                                      k+1
total number of k-edge-components is O(|E| ). The cost tree framework. There are two changes in the generic pro-
                                          k+1
of each call to IsNoGood/IsGood will take O(|E| ) time, cedure from the earlier procedure in Figure 1. First change
as the size of goods/noGoods can be at most the number is that, the generic version is able to detect isomorphism, so
of k-edge-components. We can ignore the cost for calls to that a call to Decompose is made at most once for a set of
AddGood/AddNoGood  as their contribution to the complex- isomorphic components. The second change is in line(2) of
ity is dominated. Hence, the cost for each call to Decom- the procedure Decompose, where the code β ∈ k-edges in
           2k+2                           k+1
pose is O(|E|  ). There can be at most O(|E| ) calls  the old procedure has been replaced with (β,Qβ) ∈ Ω in
to Decompose, at most once for each k-edge-component. the generic version. Each element in the set Ω is a pair of
Hence, the time complexity of the procedure IsDecompos- the form (β,Qβ),whereβ ∈ k-edges and Qβ ⊆ vars(β).
           3k+3
able is O(|E|  ).                                     In all the places where vars(β) wasusedintheoldproce-
                                                     dure, Qβ is used in the generic procedure. The set Ω de-
  Given two k-edge-components (α,comp) and (α ,comp’),
                                                      ﬁnes, for each β ∈ k-edges, the allowed subsets of vars(β)
they are isomorphic if comp = comp’.
                                                      which can be used for decomposition. Essentially, by allow-
Theorem  3.3. Given two isomorphic pairs (α,comp) and ing subsets of vars(β) to be considered for obtaining a de-
                                      
(α ,comp’), (α,comp) is k-decomposable iff (α ,comp’) is k- composition we obtain a generic procedure. Note, the pro-
decomposable.                                         cedures IsGood, AddGood, IsNoGood,andAddNoGood  are
                                                      not listed in Figure 2 as the old versions of them can be nat-
Proof. By deﬁnition comp = comp’. Hence, the only dif- urally modiﬁed to work in the generic framework. Let the
ference between the calls Decompose(α,comp) and Decom-   Ω     = {(α,    (α)) | α ∈ k      }
    α                           α     α             set  HTD        vars           -edges .Wehavethe
pose( ,comp’) are the ﬁrst parameters: and .InDecom-  following theorem.
pose the distinction between α and α is of importance only at
                                                                         Ω=Ω                         H k
line(2), where the set cv is calculated. We now show that cv is Theorem 4.1. When HTD, IsDecomposableGe( , )
independent of α.Since(α,comp) is a k-edge-component, by returns a hypertree decomposition iff htw(H) ≤ k.

                                                IJCAI-07
                                                   182                                                                            V E  k
          ∅             ∅             T λ χ                IsDecomposableGe (( , ), )
 Set goods = ; Set noGoods = ; Hypertree D=( , , )         1: if (Decompose(V )) then
                                                           2:   Add root node r to T ; Find (V ,β,Qβ,cCs) ∈ goods
 Decompose (comp)                                               λ(r)  β χ(r)  Q
                    \                                      3:       =  ;    =  β
 1: cv = edgeVars(comp) comp                               4:   ∀ cC ∈ cCs
 2: ∀(β,Qβ) ∈ Ω.(Qβ∩ comp = ∅). (cv ⊆ Qβ)                                         r
            {  |   ∈ [Q ]        ⊆      }                  5:      BuildHypertree (cC, )
 3:    cCs = cC cC     β -comps, cC comp                   6:   return D
 4:    success = true                                      7: else return ’Not-k-Decomposable’
 5:    ∀ cC ∈ cCs
 6:       if (IsNoGood(cC)) then success = false           BuildHypertree (comp,s)
 7:       else if (IsGood(cC)) then continue
                                                           1: Find (comp,β,Qβ,cCs) ∈ goods
 8:       else if (Decompose(cC)) then continue            2: Add a node t to T as a child node of s
 9:       else success = false                                λ(t) β  χ(t)  Q ∩
                                 β Q                       3:     = ;     =( β  edgeVars(comp))
 10:    if (success) then AddGood(comp, , β ,cCs); return true 4: ∀ cC ∈ cCs
 11: AddNoGood(comp); return false                         5:   BuildHypertree (cC,t)

             Figure 2: The pseudo code of the generic procedure for decomposition in hypertree framework.

4.1  HyperSpread Decomposition                        k, determining whether hsw of CSP is ≤ k takes polynomial
An unbroken guarded block (ug-block) [Cohen et al., 2005] time. Hence, the hyperspread decomposition is tractable.
                                                        We now state that the hyperspread width is bounded by
is a pair (α,Qα), where α ⊆ E and Qα ⊆ vars(α), satisfying
                                                      both hypertree width and the spread cut width.
two conditions: (1) ∀e1,e2 ∈ α. e1 ∩ e2 ⊆ Qα,and(2)
each [Qα]-comp has non-empty intersection with at most one Theorem 4.4. hsw(H) ≤ htw(H) and hsw(H) ≤ scw(H)
[vars(α)]-comp. The size of an ug-block (α,Qα)is|α|.
                                                      Proof. The last two conditions in the deﬁnition of hypertree
  For some α ⊆  E  and v ∈ V ,letthelabel, Lα(v)=
                                                      decomposition implies that: ∀n ∈ nodes(T ). ∃(α, Qα) ∈
{cC | cC ∈ [α]-comps, v ∈ edgeVars(cC)}. An ug-block
                                                      ΩHTD.λ(n)=α. χ(n)=Qα        ∩ χ(Tn).Sinceforanyk,
(α,Qα)iscanonical if ∀e ∈ α. ∀v1,v2 ∈ e\Qα.Lα(v1)=    Ω    ⊆ Ω
L (v )    Ω                           k                 HTD    HSD, each hypertree decomposition is also a hyper-
 α  2 .Let  HSD be the set of all the at most sized canon-                         (H) ≤    (H)
               V E                                    spread decomposition. Hence, hsw   htw    .
ical ug-blocks of ( , ). Note, by the deﬁnition of canonical The second condition in the deﬁnition of spread cut implies
ug-blocks, ΩHTD ⊆ ΩHSD.Givenk and a canonical ug-block
                                                      that: ∀n ∈ nodes(T ). ∃(α, Qα) ∈ ΩHSD.λ(n)=α. χ(n)=
(α,Qα) with |α|≤k, let a triple of the form (α,Qα,[Qα]- Q
    )           k                                       α. Therefore, each spread cut is also a hyperspread decom-
comp  be called a -spread-component. It has been shown position. Hence, hsw(H) ≤ scw(H).
in [Cohen et al., 2005] that, there exists at most (|E| +1)k+2
k-spread-components. The notion of isomorphism can be   Recently in [MAT, 2006], the existence of a tractable de-
naturally extended to k-spread-components. Given two k- composition better than hypertree decomposition was stated
                                  
spread-components (α,Qα,comp) and (α ,Qα ,comp’),they as an open problem. In [Cohen et al., 2005], a family of hy-
are isomorphic when comp = comp’.                     pergraphs Hn,forn  =1,  2,..., was presented for which
  A spread cut [Cohen et al., 2005] of a hypergraph H is the hypertree width of Hn is at least 3n, while the spread cut
a hypertree SC = (T ,λ,χ), satisfying the two conditions: (1) width is at most 2n. Note, it is not known whether for any
(T ,χ) is a tree decomposition of H,and(2)∀n ∈ nodes(T ), H, scw(H) ≤ htw(H).SinceforanyH, hsw(H) ≤ htw(H)
(λ(n),χ(n)) is a canonical ug-block. The spread cut width and hsw(Hn) ≤ scw(Hn) < htw(Hn) , hyperspread decom-
of H, denoted scw(H), is the minimum width of all possible position gives a simple positive answer to the open problem.
spread cuts of H.
  A hyperspread decomposition of a hypergraph H is a  4.2  Connected Hypertree Decomposition
hypertree HSD = (T ,λ,χ), satisfying the two conditions: A connected hypertree decomposition is a hypertree decom-
(1) (T ,χ) is a tree decomposition of H,and(2)∀n ∈    position CHTD = (T ,λ,χ), satisfying two conditions: (1) for
                                                                  r   T  |λ(r)| =1           c ∈      (T )
nodes(T ). ∃(α, Qα) ∈ ΩHSD.λ(n)=α. χ(n)=Qα       ∩    the root node of  ,          ,and(2)if     nodes
χ(Tn).Thehyperspread width of H, denoted hsw(H), is the is a non-root node and the parent node of c is p,then∀e ∈
minimum width of all possible hyperspread decompositions λ(c). ∃v ∈ χ(c) ∩ χ(p).v∈ e. The second condition states
of H.                                                 that for any non-root node c with parent node p, each edge
  Due to a variant of IsDecomposableGe,wehave:        e in λ(c) should have at least one variable that is common
                                                      to both χ(c) and χ(p). The two conditions in the deﬁnition
Theorem 4.2. When Ω=ΩHSD,    IsDecomposableGe(H,k)
                                     (H) ≤ k          results in a signiﬁcant reduction of the branching choices in
returns a hyperspread decomposition iff hsw .         the procedure Decompose. We show empirical results in the
  By arguments similar to those of Theorem 3.2, we have: next section to support such reduction. Let the connected hy-
                                                      pertree width of a hypergraph H, denoted chtw(H), be the
Theorem  4.3. When Ω=ΩHSD, the time complexity of
                                  3k+7                minimum width of the all possible connected hypertree de-
IsDecomposableGe(H,k)isO((|E| +1)     ).
                                                      compositions of H. By deﬁnitions, htw(H) ≤ chtw(H).Itis
  Given a hyperspread decomposition of a CSP, the CSP can an open problem whether chtw(H)=htw(H).
be solved by the same algorithm for CSP solving using hyper- Let ΩCHTD(cv)={(α, vars(α)) | α ∈ k-edges, (cv =
tree decompositions [Gottlob et al., 2000].Also,foraﬁxed ∅) ⇒ (|α| =1), (cv = ∅) ⇒ (∀e ∈ α. ∃v ∈ cv.v∈ e)},

                                                IJCAI-07
                                                   183                  Instance                               Exact Methods                     Heuristic
                       Size    Arity   CHTD    CHTD-NoIso BE+CHTD      HTD     HTD-NoIso     BE
          Name        |V |, |E| μ,Max Time,Width Time, Width Time, Width Time, Width Time, Width μT, μW, MinW
         1-32.1.cp    110, 222 3.15, 8 64, 4*    503, 4*    64, 4*    1800, 4   1800, 4    0.12, 4, 4
      FISCHER1-1-fair.smt 308, 284 2.89, 3 1800, 64 1800, 64 1800, 17 1800, 82  1800, 82   1, 18.4, 17
      FISCHER1-6-fair.smt 1523, 1419 2.90, 3 1800, 208 1800, 208 1800, 64 1800, 456 1800, 456 66, 67.4, 64
        baobab1.dag   145, 84 3.61, 6  1800, 6   1800, 6    1800, 6   1800, 6   1800, 6    0.14, 8, 8
        baobab3.dag   187, 107 3.55, 6 660, 6*   1800, 6    660, 6*   1800, 6   1800, 6    0.17, 7, 7
         complex.cp   414, 849 3.46, 17 1800, 10 1800, 10   1800, 9   1800, 13  1800, 13    4, 9.4, 9
        das9201.dag   204, 82  4, 7     4, 5*     21, 5*    4, 5*     1139, 5*  1800, 5    0.14, 6, 6
         isp9601.dag  247, 104 3.56, 7 0.33, 4*  0.7, 4*    0.35, 4*  59, 4*    312, 4*    0.12, 6, 6
         isp9603.dag  186, 95 3.55, 7  196, 7*   1800, 7    196, 7*   1800, 7   1800, 8    0.15, 9, 9
        large-partial.cp 184, 371 3.19, 10 5, 3*  11, 3*    5, 3*     50, 3*    172, 3*    0.35, 4, 4
         large2.cp    77, 130 3.16, 8  22, 4*    159, 4*    22, 4*    308, 4*   1800, 4    0.08, 5, 5
         renault.cp   99, 113 4.91, 10 0.31, 2*  0.38, 2*   0.4, 2*   0.19, 2*  0.25, 2*   0.28, 2.6, 2
         # optimal                       8         6          8         5         3          n/a

           Table 1: Experimental results. The mean (μ) and the maximum arity of the instances are also listed.

where cv ⊆ V corresponds to the connection variables in the refers the ’CHTD’ (’HTD’) procedure without detection of
procedure Decompose. As an another variant of the generic isomorphic components. For each method, we list the best
decomposition procedure, we state the following theorem. width obtained. In the cases we are able to prove optimal-
                   Ω=Ω       (  )                     ity, the entries in the width columns will be of the form k∗.
Theorem  4.5. When       CHTD cv , a connected hyper-                                               2
tree decomposition is returned by IsDecomposableGe(H, k) We also tested the heuristic ’BE’ in the HTDECOMP tool.
iff chtw(H) ≤ k.                                      The BE uses tree decomposition heuristics and set covering
                                                      heuristics to obtain a heuristic Generalized Hypertree Decom-
  Unlike the previous two variants of the generic decompo- position (GHTD) [Gottlob et al., 2003]. In case of a GHTD,
                    Ω=Ω       (  )       Ω
sition procedure, when    CHTD cv ,theset  is newly   the third condition in the deﬁnition of hypertree decomposi-
deﬁned during each call to Decompose based on the connec- tion may be violated. Since BE is randomized, we ran ex-
tion variables cv.                                    periments using BE ﬁve times, and list in the table the mean
  Since connected hypertree decompositions are subsets of time (μT), the mean width (μW) and the best width (MinW).
hypertree decompositions, connected hypertree decomposi- We also did experiments on a hybrid BE+CHTD, in which
tion is tractable.                                    ﬁve runs of BE will be used to ﬁrst obtain ﬁve GHTDs. If
                                                      the best width of the GHTDs so obtained is kbe, then the
                                                                                       k  =  k
5  Experiments                                        CHTD procedure will be invoked with 1   be.Note,the
                                                      best width decomposition found by the hybrid BE+CHTD
We have implemented the presented backtracking procedures may be a GHTD, whose width can be smaller than htw.Al-
for both hypertree decomposition and connected hypertree though, the HTDECOMP tool has heuristic choices other than
decomposition. We have not implemented the hyperspread BE, we choose BE since we think it is the best choice. The
decomposition procedure, which does not seem easy to im- BE+CHTD combination can be naturally extended with any
plement. We plan to do it in the future. All of our experi- initialization heuristic. The last row, #optimal of the table
ments are done on an Intel Xeon 3.2Ghz machine, running lists the number of proven optimal width decompositions ob-
Linux and with 4GB RAM. We use 12 instances in our ex- tained by each method. Note, to prove optimality, the query
periments. They are constraint hypergraphs from different
                                                      corresponding to kl needs to return ’Not-k-decomposable’
sources: ﬁve from conﬁguration problems (*.cp), ﬁve from within the time limit.
fault trees (*.dag), and two from SMT instances (*.smt). Our
                                                        All the exact methods listed in the table are our contribu-
tools and instances are available online1.
                                                      tions. The experiments using the implementations3 of the
  In our implementation, for a given Ω and H =(V,E),
                                                      previous exact methods opt-k-decomp, and an improvement
we ﬁnd an optimal decomposition by a sequence of queries
                                                      over opt-k-decomp, red-k-decomp [Harvey and Ghose, 2003],
to the procedure IsDecomposableGe(H,k). The parameter k
                                                      either exceeded time limit or aborted in all cases except re-
will take values in the sequence k1,k2,...,kl−1,kl.Inthe
                                                      nault.cp, in which red-k-decomp took 1257 seconds to ﬁnd
sequence, k1 = |E|. If the query IsDecomposableGe(H,ki)
                                                    an optimal decomposition. In fact, both the experiments us-
returns a decomposition of width k ,thenki+1 = k − 1.
                                                      ing the opt-k-decomp and red-k-decomp tools consisted of
If the query IsDecomposableGe(H,ki) returns the message
                                                      only one query to the tool. For an instance H, if the ’CHTD’
’Not-k-Decomposable’, then l = i. The optimal width will                          
                                                      ﬁnds a decomposition of width k in 1800 seconds, then the
be kl +1. We found that the l is often very small due to
                                                      opt-k-decomp and red-k-decomp are just asked to ﬁnd a de-
jumps the sequence could make. The results of our experi-                 
                                                      composition of width k . Hence, the experiments are done in
ments are listed in Table 1. All the experiments in the table
                                                      a favorable setting to the previous methods.
are done with a time limit of 1800 CPU seconds. The legend
                                                        From the table, we can observe that the CHTD procedure
’CHTD’ (’HTD’) refers to the experiments with Ω=ΩCHTD
(Ω=ΩHTD). The legend ’CHTD-NoIso’ (’HTD-NoIso’)
                                                         2http://www.dbai.tuwien.ac.at/proj/hypertree/downloads.html
  1http://www.itu.dk/people/sathi/connected-hypertree/   3http://www.dsl.uow.edu.au/˜harvey/research hypertrees.shtml

                                                IJCAI-07
                                                   184