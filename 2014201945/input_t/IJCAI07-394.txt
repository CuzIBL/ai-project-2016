                    Representing Kriegspiel States with Metapositions

                               Paolo Ciancarini and Gian Piero Favini
                Dipartimento di Scienze dell’Informazione, University of Bologna, Italy
                                   Email: {cianca,favini}@cs.unibo.it


                    Abstract                          2   Metapositions
                                                      The original concept of metaposition was introduced in
    We describe a novel approach to incomplete infor- [Sakuta, 2001], where it was used to solve endgame posi-
    mation board games, which is based on the concept tions for a Kriegspiel-like game based on Shogi. The primary
    of metaposition as the merging of a very large set goal of representing an extensive form game through metapo-
    of possible game states into a single entity which sitions is to transform an imperfect information game into one
    contains at least every state in the current informa- of perfect information, which offers several important advan-
    tion set. This merging operation allows an artiﬁ- tages and simpliﬁcations, including the applicability of tradi-
    cial player to apply traditional perfect information tional techniques associated with these games. A metaposi-
    game theory tools such as the Minimax theorem.    tion, as described in the quoted work, merges different, but
    We apply this technique to the game of Kriegspiel, equally likely moves, into one state (but it can be extended to
    a variant of chess characterized by strongly incom- treat moves with different priorities).
    plete information as players cannot see their oppo- In its ﬁrst formulation, a metaposition is a set of game
    nent’s pieces but can only try to guess their po- states grouping those states sharing the same strategy spaces
    sitions by listening to the messages of a referee. (legal moves) available to the player. A given move for the
    We provide a general representation of Kriegspiel ﬁrst player is guaranteed to be legal across every state in the
    states through metaposition trees and describe a  set, or in none at all. If we consider the game tree from the
    weighed maximax algorithm for evaluating meta-    point of view of metapositions instead of single game states,
    positions. We have tested our approach competing  it is readily seen that the game becomes, nominally, one of
    against both human and computer players.          perfect information. When the ﬁrst player moves, the current
                                                      metaposition (which coincides with the current information
                                                      set) is updated by playing that move on all the boards, as it is
                                                      certainly legal. The opponent’s moves generate a number of
1  Introduction                                       metapositions, depending on the resulting strategy space for
                                                      the ﬁrst player. If the ﬁrst player knew his new strategy space
Incomplete information board games are an excellent testbed beforehand, he would be able to uniquely determine the new
for the study of decision making under uncertainty. In these metaposition because different metapositions have, by deﬁni-
games, only a subset of the current state of the game is made tion, different strategy spaces associated to them.
known to the players, who have to resort to various methods Unfortunately, a player’s strategy space is not known be-
in order to ﬁnd an effective strategy.                forehand in such games as Kriegspiel. There is, obviously, no
  Kriegspiel is a chess variant in which the players cannot way to ﬁnd out whether a move is legal other than by trying
see their opponent’s pieces and moves: all rules of Chess it. Therefore, an extension of the deﬁnition of metaposition is
stay, but the game is transformed into an incomplete informa- needed, reﬁning the concept of strategy space. Often, a move
tion game. We have built a program called Darkboard, which which is likely to be illegal on the referee’s board is a good
plays a whole game of Kriegspiel searching over a game tree strategy for the player. Illegal moves are the main mechanism
of metapositions. The preliminary results we have are quite for acquiring information on the opponent’s piece setup. It
encouraging.                                          makes little sense to discard their analysis only because the
  This paper is organized as follows: in the next section we referee knows they are illegal.
describe the concept of metaposition. Then we apply this con- A second formulation of metapositions is as follows.
cept to Kriegspiel. In Sect. 3 we show how we apply weighed
maximax to metapositions; in Sect. 4 we introduce an eval- Deﬁnition. If S is the set of all possible game states and
uation function for a game tree of metapositions. Finally, in I ⊆ S is the information set comprising all game states com-
Sect. 5 we describe some experimental results and draw our patible with a given sequence of observations (referee’s mes-
conclusions.                                          sages), a metaposition M is any opportunely coded subset of

                                                IJCAI-07
                                                  2450S such that I ⊆ M ⊆ S.                                [Bolognesi and Ciancarini, 2003] and [Bolognesi and Cian-
                     M                                carini, 2004]. Their analysis is, however, limited to a few cho-
  The strategy space for is the set of moves that are legal sen endgame examples, such as King and Rook versus King
in at least one of the game states contained in the metaposi- (KRK). Because of the small size of the game’s information
tion. These are pseudolegal moves, assumed to be legal from set in these particular scenarios (which is limited to the pos-
the player’s standpoint but not necessarily from the referee’s. sible squares where the opponent’s King may be), metaposi-
A metaposition is endowed with the following functions: tions coincide exactly with the information set in the quoted
  • a pseudomove function pseudo that updates a metapo- papers (M = I). The present work deals with a generic full
    sition given a move try and an observation of the ref- game of Kriegspiel, with the opponent controlling an arbi-
    eree’s response to it;                            trary number of pieces, and such an assumption is unreason-
  • a metamove function meta that updates a metaposition able.
    after the unknown move of the opponent, given the as- Our approach to coding a Kriegspiel metaposition is, es-
    sociated referee’s response;                      sentially, the abstract representation of a chessboard contain-
                                                      ing both real pieces, belonging to the players and pseudo-
  • an evaluation function eval that outputs the desirability
                                                      pieces (ghost pieces that may or may not exist). Trivially,
    of a given metaposition.
                                                      a metaposition coded in this fashion represents a number of
                                                      states equal to the product of the number of pseudopieces on
  From this deﬁnition it follows that a metaposition is any su- each square. Each square, therefore, has the following infor-
perset of the game’s information set (though clearly the per- mation attached to it.
formance of any algorithm will improve as M tends to I).
Every plausible game state is contained in it, but a metapo- • Piece presence: whether the square contains an allied
sition can contain other states which are not compatible with piece.
the history. The reason for this is two-fold: on one hand, be-
ing able to insert (opportune) impossible states enables the • Pseudopiece presence: a bitﬁeld representing the pos-
agent to represent a metaposition in a very compact form, as sible presence of opposing pieces at the given location.
opposed to the immense amount of memory and computa-      There are seven possible pseudopieces, and any number
tion time required if each state were to be listed explicitly; on of them may appear simultaneously at the same square:
the other hand, a compact notation for a metaposition makes King, Queen, Rook, Bishop, Knight, Pawn and Empty.
it easy to develop an evaluation function that will evaluate The last is a special pseudopiece indicating whether the
whole metapositions instead of single game states. This is square may be empty or is necessarily occupied.
the very crux of the approach: metapositions give the player •
an illusion of perfect information, but they mainly do so in or- Age information: an integer representing the number of
der to enable the player to use a Minimax-like method where moves since the agent last obtained information on the
metapositions are evaluated instead of single states. For this state of this square. This ﬁeld provides the integration of
reason, it is important that metapositions be described in a some of the game’s history into a metaposition in a form
concise way so that a suitable evaluation function can be ap- that is easily computable.
plied.
  It is interesting to note that metapositions move in the op- Moreover, a metaposition will store the usual information
posite direction from such approaches as Monte Carlo sam- concerning such things as castling rights and the ﬁfty moves
pling, which aim to evaluate a situation based on a signiﬁ- counter, in addition to counters for enemy pawns and pieces
cant subset of plausible game states. This is perhaps one of left on the chessboard. It is easy to notice that such a notation
the more interesting aspects of the present research, which is extremely compact; in fact, each square can be represented
moves from the theoretical limits of Monte Carlo approaches by two bytes of data.
as stated, for example, in [Frank and Basin, 1998], and tries to A pseudopiece is, essentially, a ghost piece with the same
overcome them. In fact, a metaposition-based approach does properties as its real counterpart. It moves just like a real
not assume that the opponent will react with a best defense piece, but can move through or over fellow pseudopieces, ex-
model, nor is it subject to strategy fusion because uncertainty cept in speciﬁc cases. For example, it is possible to enforce
is artiﬁcially removed.                               rules to prevent vertical movement across a ﬁle where an op-
  The nature of the “opportune coding” required to represent ponent’s pawn is known to be.
a metaposition, a superset of the usually computationally in- A metaposition follows and mantains the following invari-
tractable information set I, will depend on the speciﬁc game. ant: if a pseudopiece is absent at a given location, then no
As far as Kriegspiel is concerned, we move from the results in piece of that type can appear there in any state of the cur-
[Ciancarini et al., 1997] on information set analysis in order rent information set. The opposite is not true, and because
to win a Kriegspiel endgame. Here the authors use the infor- of their relaxed movement rules, pseudopieces may appear in
mation set in order to recognize position patterns in the King places where a real enemy piece could not be according to
and Pawn versus King (KPK) endgame, however performing the information set. This is equivalent to saying that I ⊆ M.
no search in the problem space.                       A metaposition then represents a much larger superset of the
  The ﬁrst representation of Kriegspiel situations using meta- information set, and in certain phases of the game, some pseu-
positions together with an evaluation function was given in dopieces can be found at almost every location.

                                                IJCAI-07
                                                  24512.1  Updating knowledge                               estimate of the number of nodes involved rules out such an
Metapositions not deal with moves, but with pseudomoves option. It is readily seen that:
and metamoves. A pseudomove represents the agent’s move, • All pseudomoves may be legal (or they would not have
which can be legal or illegal, and has an associated observa- been included by the generation algorithm), but most can
tion (a set of umpire messages sent in response to the move at- be illegal for some game state.
tempt). A metamove represents the collective grouping of all
                                                        • All pseudomoves that move to non-empty squares can
the possible opponent’s moves, and it is associated to an ob-
                                                          capture (except for pawn moves), and we would need to
servation, too. Darkboard implements pseudo and meta by
                                                          distinguish between pawn and piece captures.
accepting a metaposition and an observation, with an updated
metaposition being returned as the output. Clearly, pseudo • Most pseudomoves may lead to checks.
reduces the uncertainty by eliminating some pseudopieces, • Some pieces may lead to multiple check types, as well
whereas meta increases it by spawning new pseudopieces.   as discovery checks.
  Intuitively, meta does such things as clearing all pseudo- •
pieces on the moved piece’s path and infer the position of The enemy may or may not have pawn tries following
the opponent’s King from check messages; pseudo has ev-   this move.
ery pseudopiece spawn copies of itself on every square it can A simple multiplication of these factors may yield several
reach in one move. It is readily seen that such operations dozens potential umpire messages for any single move. But
maintain the I ⊆ M constraint that deﬁnes a metaposition. worst of all, such an estimate does not even take into account
A number of optimizations are possible to improve their ac- the possibility of illegal moves. An illegal move forces the
curacy and therefore quality of play, but because of the loose player to try another move, which can, in turn, yield more um-
nature of a Kriegspiel metaposition, they are not required. pire messages and illegal moves, so that the number of cases
  As a metaposition represents a grouping of a very large rises exponentially. Furthermore, the opponent’s metamoves
number of positions which cannot be told apart from one an- pose the same problem as they can lead to a large number of
other, it is clear that updating such a data structure is no trivial different messages.
task; in truth, this process does account for the better part of
                                                        • On the opponent’s turn, most pieces can be captured,
the agent’s computation time. Updating an explicitly listed
                                                          unless they are heavily covered or in the endgame.
information set with a pseudomove would involve ﬁnding all
the positions compatible with the outcome of that move (le- • The king may typically end up threatened from all direc-
gal, not legal, check, etc.), discarding anything else, and ap- tions through all of the 5 possible check types.
plying the move to the compatible chessboards. Updating a • Again, pawn tries may or may not occur, and can be one
metaposition after a metamove would prove an even more    or more.
daunting task, as we would have to consider each possible
move for each possible chessboard in the set. Again, this is For these reasons, any metaposition will be only evolved in
a problem that can only be overcome through a suitable ap- exactly one way, and according to one among many umpire
proximation (or by limiting the number of chessboards down messages. This applies to both the player’s pseudomoves and
to a manageable pool, as in [Parker et al., 2005]).   the opponent’s hidden metamoves. There will be heuristics in
  It may appear strange that the heart of the program’s rea- place to pick a ‘reasonable’ message, and the more accurate
soning does not lie in the evaluation function eval but in this is, the more effective the whole system will get.
pseudo  and meta: after all, their equivalent in a chess- As a consequence, the tree’s branching factor for the
playing software would trivially update a position by clearing player’s turns is equal to the number of potential moves, but it
a bit and setting another. However, the evaluation function’s is equal to 1 for the opponent’s own moves. This is equivalent
task is to evaluate the current knowledge. The updating algo- to saying that the player does not really see an opponent, but
rithms compute the knowledge itself: thus it is important to acts like an agent in a hostile environment.
infer as much information as possible in the process. In fact, It should be noted that this is not the same assumption
one interesting point about this approach is that the updating that Minimax algorithms make when they suppose that player
functions and the evaluation function can be improved upon MIN will choose the move that minimizes the evaluation
separately, increasing the program’s performance without the function. Here we are not expecting the opponent to play the
need for the two components to have any knowledge of each best possible move, but instead we assume an average move
other.                                                will be played, one that does not alter the state of the game
                                                      substantially.
                                                        As a side effect, because only one possible umpire message
3  Game tree structure                                for the opponent’s metamove is explored, the metamove can
Since a metaposition’s evolution depends exclusively on the be merged with the move that generated it, so that each level
umpire’s messages, clearly it becomes necessary to simulate in the game tree no longer represents a ply, but a full move.
the umpire’s next messages if a game tree is to be constructed. Interestingly, the branching factor for this Kriegspiel model
Ideally, the game tree would have to include every possible is signiﬁcantly smaller than the average branching factor for
umpire message for every available pseudomove so that it can the typical chess game, seeing as in chess either player has
be evaluated with a weighed algorithm keeping into account a set of about 30 potential moves at any given time, and
the likelyhood of each observation. Unfortunately, a quick Kriegspiel is estimated to stand at approximately twice that

                                                IJCAI-07
                                                  2452value (in theory; practice yields smaller values due to tighter though if that happens, our program will update its knowl-
defence patterns). Therefore, a two-ply game tree of chess edge accordingly.
will feature about 302 = 900 leaves, whereas the Kriegspiel Even so, the accuracy of the prediction drops rather
tree will only have 60. However, the computational over- quickly. In the average middle game, the umpire answers
head associated with calculating 60 metaposition nodes is far with a non-silent message about 20-30% of the time. Clearly,
greater than that for simply generating 900 position nodes, the reliability of this method degrades quickly as the tree gets
and as such some kind of pruning algorithm may be needed. deeper, and the exploration itself becomes pointless past a
                                                      certain limit. At the very least, this shows that any selection
3.1  Umpire prediction heuristics                     algorithm based on this method will have to weigh evalua-
[Bolognesi and Ciancarini, 2003], in tackling Kriegspiel tions differently depending on where they are in the tree; with
endgames, where the artiﬁcial player’s moves have only shallow nodes weighing more than deeper ones, and even so,
three possible outcomes (silent, check, illegal) and having to exploration becomes fruitless past a certain threshold.
choose one to expand upon, rely upon the evaluation function
to pick the most unfavorable option. However, even such a 3.2 The selection algorithm
modest luxury seems beyond reach in the present work due Now that the primitives have been discussed in detail,
to both the number of options and their different probabili- it is possible to describe the selection algorithm for the
ties. The only remaining way is for us to propose a set of metaposition-based player. Several variants on this approach
hard-coded heuristics that work well most of the time, and have been developed, optimizing the algorithm for fast play
make sure that they will work reasonably even when they are over the Internet Chess Club using such methods as pruning
proved wrong. Our player generates the umpire messages that and killer-like techniques; this is its ﬁrst and basic formula-
follow its own pseudomoves in the following way.      tion.
  •                                                     The whole stratagem of metapositions was aimed at mak-
    Every move is always assumed to be legal. Most of the ing traditional minimax techniques work with Kriegspiel. Ac-
    time, an illegal move just provides information for free, tually, since MIN’s moves do not really exist (MIN always
    so a legal move is usually the less desirable alternative. has only one choice) if we use the compact form for the
  • The player’s moves do not generally capture anything, tree, with each node representing two plies, the algorithm
    with the following exceptions:                    resembles a weighed maximax. Maximax is a well-known
      – Pawn tries. These are always capturing moves by criterion for decision-making under uncertainty. This variant
        their own nature.                             is weighed, meaning that it accepts an additional parameter
                                                      α ∈  ]0, 1[, called the prediction coefﬁcient. The algorithm
      – Non-pawn moves where the destination square’s also speciﬁes a maximum depth level k for the search. Fur-
        Empty bit is not set, since the place is necessarily thermore, we deﬁne two special values, ±∞, as possible out-
        non-empty. This encourages the program to retali- put to the evaluation function eval. They represent situa-
        ate on captures.                              tions so desirable or undesirable that they often coincide with
      – After an illegal move, the agent may consider an victory or defeat, and should not be expanded further.
        identical move, but shorter by one square, as a cap- Deﬁning Mt as the set of all metapositions and Mv as the
        turing move.                                  set of all possible chess moves, the selection algorithm makes
  • If any of the above apply, the captured entity is always use of the following functions:
    assumed to be a pawn, unless pawns should be impossi- • pseudo:   (Mt  × Mv)  →  Mt, which generates a
    ble on that square, in which case it is a piece.      new metaposition from an existing one and a pseudo-
  • Pawn tries for the opponent are generated if the piece move, simulating the umpire’s responses as described in
    that just moved is the potential target of a pawn capture. the last section.
                                                        •           Mt  → Mt
  On the other hand, the following rules determine the um- meta:             , which generates a new metapo-
pire messages that follow a metamove.                     sition simulating the opponent’s move and, again, virtual
                                                          umpire messages.
  • The opponent never captures any pieces, either. The
                                                        • generate:      Mt  → VectorMv, the move genera-
    constant risk that allied pieces run is considered by the
                                                          tion function.
    evaluation function instead.
                                                        • eval:     (Mt×Mv×Mt)     →  R, the evaluation func-
  • The opponent never threatens the allied King. Again,
                                                          tion, accepting a source metaposition, an evolved meta-
    King protection is matter for the evaluation function.
                                                          position (obtained by means of pseudo), and the move in
  • Pawn tries for the artiﬁcial player are never generated. between.
  The above assumptions are overall reasonable, in that they The algorithm deﬁnes a value function for a metaposition
try to avoid sudden or unjustiﬁed peaks in the evaluation func- and a move, whose pseudocode is listed in Figure 1. The
tion. The umpire is silent most of the time, captures are only actual implementation is somewhat more complex due to op-
considered when they are certain, and no move receives unfair timizations that minimize the calls to pseudo.
advantages over the others. There is no concept of a ‘lucky’ It is easily seen that such a function satisﬁes the property
move that reveals the opponent’s king by pure coincidence, that a node’s weight decrease exponentially with its depth.

                                                IJCAI-07
                                                  2453function value (metaposition met, move mov, int depth): real just been moved (as it is clear that a value of true decreases
begin                                                 the piece’s safety; statistically speaking, the risk of losing the
  metaposition met2 := pseudo(met, mov);              piece being moved is much higher). A value of 1 means it
  real staticvalue := eval(met, mov, met2);           is impossible for the piece to be captured on the next move,
  if (depth ≤ 0) or (staticvalue = ±∞)                whereas a value of 0 indicates a very high-risk situation with
   return staticvalue                                 an unprotected piece.
  else                                                  It should be noted, however, that material safety does not
  begin                                               represent a probability of the piece being captured, or even
    //simulate    opponent,   recursively    find     an estimate of it; its result simply provides a reasonable mea-
MAX.                                                  sure of the exposure of a piece and the urgency with which it
   metaposition met3 := meta(met2);                   should be protected or moved away from danger.
   vector movevec := generate(met3);
                                                      4.2  Position
   real best := maxx∈movevec value(met3, x, depth-1);
            //weighed   average   with  parent’s      Our player includes the following factors into its evaluation
value.                                                function:
   return (staticvalue*α)+best*(1 − α)                  • A pawn advancement bonus. In addition, there is a fur-
  end                                                     ther bonus for the presence of multiple queens on the
end.                                                      chessboard.
                                                        • A bonus for ﬁles without pawns, and friendly pawns on
     Figure 1: Pseudocode listing for value function.     such ﬁles.
                                                        • A bonus for the number of controlled squares, as com-
Given the best maximax sequence of depth d from root to leaf puted with a special protection matrix. This factor is
m1,...,md, where each node is provided with static value  akin to mobility in traditional chess-playing software.
s1,...,sd, the actual value of m1 will depend on the static
                                        k               In addition, the current position also affects material rating,
values of each node mk with relative weight α . Thus, as
the accuracy of the program’s foresight decreases, so do the as certain situations may change the values of the player’s
weights associated with it, and the engine will tend to favor pieces. For example, the value of pawns is increased if the
good positions in the short run.                      player lacks sufﬁcient mating material.
                                                        An additional component is evaluated when Darkboard
  Parameter α is meant to be variable, as it can be used to
                                                      is considering checkmating the opponent. A special func-
adjust the algorithm’s willingness to take risks, as well as our
                                                      tion represents perceived progress towards winning the game,
level of conﬁdence in the heuristics that generate the sim-
                                                      partly borrowed from [Bolognesi and Ciancarini, 2003], thus
ulated umpire messages. Higher values of α lead to more
                                                      encouraging the program to push the opponent’s pseudokings
conservative play for higher reward in the short run, whereas
                                                      towards the edges of the chessboard.
lower values will tend to accept more risk in exchange for
possibly higher returns later on. Generally, the player who is 4.3 Information
having the upper hand will favor open play whereas the los-
ing player tends to play conservatively to reduce the chance One of the crucial advantages of using metapositions lies in
of further increasing the material gap. Material balance and the ability to estimate the quality and quantity of informa-
other factors can therefore be used to dynamically adjust the tion available to the player. In fact, because we are operating
value of α during the game.                           with a large superset of the information set which necessarily
                                                      incorporates the current true state of the game, to acquire in-
                                                      formation simply means to aim towards reducing the size of
4  An evaluation function for metapositions           the metaposition’s position set; therefore, an indicator based
The evaluation functions for chess programs have usually on size (for example, the sum of all the pseudopieces on the
three main components: material count, mobility, and posi- chessboard) can enter the evaluation function and the player
tion evaluation. A metaposition evaluation function, however, will strive towards states with reduced uncertainty. An ap-
does not work on a single chessboard, but on an entity repre- proch such as Monte Carlo cannot do this, as its belief state
senting billions of chessboards, and may need to introduce works on a small subset of the information set wherein each
equivalent, but different concepts. For example, our evalua- single state is dogma when evaluated.
tion function currently has three main components that it will Our player will attempt to gather information about the
try to maximize throughout the game: material safety, posi- state of the chessboard, as the evaluation function is designed
tion, and information.                                to make information desirable (precisely, it is designed to
                                                      make the lack of information undesirable) by reducing a func-
4.1  Material safety                                  tion, which we call chessboard entropy (E), satisfying the
                                                      following.
Material safety is a function of type (Mt × Sq × Bool) →
[0, 1]. It accepts a metaposition, a square and a boolean and • The function’s value increases after every metamove
returns a safety coefﬁcient for the friendly piece on the given from the opponent, that is (m2 =meta(m1)) ⇒
square. The boolean parameter tells whether the piece has E(m2)  ≥ E(m1).

                                                IJCAI-07
                                                  2454