    Complexity Results for Checking Equivalence of Stratiﬁed Logic Programs∗

                  Thomas Eiter, Michael Fink, Hans Tompits, and Stefan Woltran
                     Institut f¨ur Informationssysteme, Technische Universit¨at Wien,
                             Favoritenstraße 9–11, A-1040 Vienna, Austria
                               {eiter,ﬁnk,tompits,stefan}@kr.tuwien.ac.at


                    Abstract                          in deductive databases. The attractive features of such pro-
                                                      grams are their unambiguous semantics as well as their (in
    Recent research in nonmonotonic logic program-    the propositional case) polynomial complexity.
    ming under the answer-set semantics focuses on      In ASP, programs often contain stratiﬁed subprograms
    different notions of program equivalence. How-    which serve, in a generate-and-test methodology [Gelfond
    ever, previous results do not address the impor-  and Leone, 2002; Niemel¨a, 1999; Baral, 2003], for check-
    tant classes of stratiﬁed programs and its sub-   ing whether a candidate is in fact a solution to the problem at
    class of acyclic (i.e., recursion-free) programs, al- hand. For example, in the program
    though they are recognized as important tools for              bad ←   not ok,
    knowledge representation and reasoning. In this
                                                                    ok ←   choose(X),
    paper, we consider such programs, possibly aug-
    mented with constraints. Our results show that in       choose(X)  ←   option(X), not omit(X),
    the propositional setting, where reasoning is well-       omit(X)  ←   option(X), not choose(X),
    known to be polynomial, deciding strong and uni-
    form equivalence is as hard as for arbitrary normal the ﬁrst two statements check whether at least one option was
    logic programs (and thus coNP-complete), but is   chosen, and output “bad” if this is not the case. Typically,
                                                      to eliminate such unwanted models, a constraint ← bad is
    polynomial in some restricted cases. Non-ground                           bad
    programs behave similarly. However, exponential   added. This remains true if is deleted from the head of
                                                      the ﬁrst rule. In fact, the sets of rules P = {← bad ; bad ←
    lower bounds already hold for small programs (i.e., not ok; ok ← choose(X)}  Q  = {←bad     ← not ok;
    with constantly many rules). In particular, uniform                       and             ;
                                                      ok ←  choose(X)} are strongly equivalent, and thus P can be
    equivalence is undecidable even for small Horn               Q
    programs plus a single negative constraint.       replaced by  (and vice versa) within an arbitrary program.
                                                      If no rules in it deﬁne bad , then we can also safely drop the
                                                      constraint ← bad . We note that, as in this example, checking
1  Introduction                                       parts are often acyclic. However, recursion may occur, e.g.,
                                                      in computing the transitive closure for reachability in a graph;
In recent years, a large body of work in answer-set program- we remind that the capability of expressing transitive closure
ming (ASP) has been devoted to obtain semantical and com- is one of the assets of logic programming.
putational characterizations of different notions of equiva- Given their importance in practice, in this paper, we con-
lence between nonmonotonic logic programs. These investi- sider testing the equivalence of stratiﬁed programs which are
gations were mainly concerned with strong equivalence [Lif- possibly augmented with constraints. Our contributions can
schitz et al., 2001], which facilitates a replacement property be brieﬂy summarized as follows.
under nonmonotonicity akin, e.g., to the familiar one which (1) We provide a detailed picture of the computational
holds for classical logic, and weaker notions such as uni- complexity of deciding strong and uniform equivalence be-
form equivalence [Eiter and Fink, 2003; Pearce and Valverde, tween stratiﬁed respectively acyclic logic programs in the
2004]. While the general case and certain fragments like pos- propositional case. As we show, these problems are coNP-
itive programs are well-understood [Eiter et al., 2005b],the complete already in very simple cases, and thus as hard as
picture remains unclear for many other fragments.     in the general case of normal logic programs. This con-
  Two important such fragments are stratiﬁed programs trasts with the non-ground case, where syntactic restrictions
and its subclass of acyclic (i.e., recursion-free) programs, make strong equivalence testing (which is co-NEXPTIME-
which are widely used in knowledge representation (cf., e.g., time complete in general) easier in some cases.
Baral [2003]), and also play, for instance, an important role (2) We elucidate the role of constraints in this context.
                                                      Without constraints, in some cases testing strong equivalence
  ∗This work was partially supported by the Austrian Science Fund becomes tractable and thus easier than testing uniform equiv-
(FWF) under project P18019.                           alence, which remains intractable. There is a similar picture

                                                IJCAI-07
                                                   330in the non-ground case. A noticeable result which we estab- A program is constraint-free, if no constraint occurs in it,
lish is that uniform equivalence of two programs P and Q is and Horn, if all rules are Horn. Constraint-free Horn pro-
undecidable as soon as both P and Q are permitted to contain, grams are also called deﬁnite. A program P is called acyclic
besides Horn rules, a single negative constraint ← not w, (resp., stratiﬁed) iff there is a function f : A→N such that,
where w is a propositional atom. If it is removed in only for each r ∈ P with H(r)=h being nonempty, (i) f(Ab) <
                                                                         −
one of them, then we have decidability (also in the presence f(Ah), for each b ∈ B (r), and (ii) f(Ab) <f(Ah) (resp.,
                                                                                  +
of arbitrary positive constraints).                   f(Ab) ≤ f(Ah)), for each b ∈ B (r).
  (3) We discuss the effect of some restrictions which are By an interpretation, I, we understand a set of ground
important in practice including “small” programs, where the atoms. A ground rule r is satisﬁed by I, symbolically I |= r,
number of rules is bounded by a constant. While strong and iff whenever B+(r) ⊆ I and B−(r) ∩ I = ∅,thenH(r) ∈ I.
uniform equivalence become unsurprisingly tractable in the I satisﬁes a ground program P , denoted by I |= P , iff each
propositional case, both remain intractable (at least exponen- r ∈ P is satisﬁed by I.AsetI ⊆ BP is an answer set of P
tial) in the non-ground case. In fact, uniform equivalence re- iff I is a subset-minimal set satisfying the Gelfond-Lifschitz
mains undecidable.                                    reduct P I [Gelfond and Lifschitz, 1991] of Gr(P ) with re-
  Our results ﬁll a gap in the knowledge about the complexity spect to I,givenby
of testing equivalence for stratiﬁed programs with constraints,
                                                        P I = {H(r) ← B+(r) | r ∈ Gr(P ),I∩ B−(r)=∅}.
and complement previous results. They show that, some-
what surprisingly, already for simple propositional programs, The set of all answer sets of P is denoted by AS(P ).Aswell
testing strong respectively uniform equivalence is intractable. known, every stratiﬁed program P has at most one answer
Recall that deciding ordinary equivalence of such programs, set, which in case that P is acyclic can be deﬁned by the
i.e., whether they have the same answer set, is polynomial (in completion of P [Ben-Eliyahu and Dechter, 1994].
fact, feasible in linear time). Furthermore, our results show We consider the following notions of equivalence between
that also under some restrictions relevant in practice the prob- two programs P and Q:
lems remain intractable, i.e., have exponential lower bounds,
                                                        •                    P ≡  Q  AS(P )=AS(Q)
or remain even undecidable.                               ordinary equivalence,  o  :               ;
                                                        • uniform equivalence, P ≡u Q: for each ﬁnite set F of
2  Background                                             facts, AS(P ∪ F )=AS(Q  ∪ F );and
We use a language containing the following (possibly inﬁnite) • strong equivalence, P ≡s Q: for each program S,
sets: a set A of predicate symbols,asetV of variables,anda AS(P ∪ S)=AS(Q    ∪ S).
set C of constants (called the domain). An atom is an expres-
           p(t ,...t )      p ∈A          α(p)=n        We remark that the difﬁculty to deal with uniform or strong
sion of form 1    , n ,where      has arity           equivalence in the non-ground case has its origin in the ex-
and ti ∈C∪V,for1  ≤ i ≤ n.
        r                                             tended programs which naturally enlarge the active domain,
  A rule, , is of the form                            and thus the original Herbrand bases of the programs are not
        a ← b1,...,bk, not bk+1,..., not bm,          useful anymore [Eiter et al., 2005a].
where a is an atom or empty, b1,...,bm are atoms (m ≥
k ≥ 0), and “not ” denotes default negation.Ifa is empty, 3 The Propositional Case
r                m  =0   r               m  =  k r
  is a constraint;if    ,  is a fact;andif      ,     In this section, programs are assumed to be propositional (i.e.,
                   r          H(r)   a
is Horn.Thehead of  is given by    =  ,andthebody     all predicates have arity 0) and normal unless speciﬁed oth-
  r    B(r)={b   ,...,b , not b  ,..., not b }
of  by          1      k      k+1          m  .We     erwise. The following proposition collects results by Eiter et
       B+(r)   {b ,...,b }   B−(r)   {b   ,...,b }
also use     =   1     k and       =   k+1     m  .   al. [2005b] and some known properties.
Moreover, we assume that all rules are safe, i.e., each variable
          −                  +                                             P ≡  Q                   P
in H(r) ∪ B (r) also occurs in B (r).                 Proposition 1 Deciding   e  for normal programs and
                                                      Q       e ∈{s, u, o}
  A program is a ﬁnite set of rules. The set of variables oc- ,where     ,isincoNP, and if both programs are
                                                                          P
curring in an expression e (atom, rule, program, etc.) is de- Horn, the problem is in . For stratiﬁed programs, deciding
                                                      P ≡  Q     P
noted by Ve, and the set of constants (resp., predicates) occur- o is in .
ring in e by Ce (resp., Ae). Expression e is ground iff Ve = ∅. We start proving a P-hardness result for the simplest class
  A predicate p ∈AP is called extensional (in P )iffthereis of programs considered.
no r ∈ P with H(r)=p, otherwise it is intensional (in P ).
                                                      Lemma 1   Deciding P ≡e Q for acyclic deﬁnite Horn pro-
The Herbrand base, BA,C, is the set of all ground atoms over
                                                      grams is P-hard, for e ∈{o, u, s}.
predicates A and constants C. BP = BAP ,CP is the Herbrand
base of a program P .                                 Proof. We reduce the P-complete problem of monotone cir-
  Given a rule r and a set of constants C ⊆C,wedeﬁne  cuit value [Goldschlager, 1977] to the equivalence problems
Gr(r, C) as the set of all rules obtained from r by all possible in question. Such a circuit is given by a directed acyclic graph
substitutions of Vr by elements from C. For any program P , (V,E),whereV = {1,...,n} and each (i, j) ∈ E satisﬁes
the grounding of P with respect to C is given by Gr(P, C)= i<j.ElementsofV are so-called gates of speciﬁc sorts, viz.
 r∈P Gr(r, C). In particular, Gr(P ) stands for Gr(P, Cp), , ⊥, ∧,or∨. Gates of the former two sorts have in-degree
referred to simply as the grounding of P ,whereCP = {c} if 0, the others have in-degree 2. All gates except n have outgo-
no constant appears in P .                            ing edges; n itself is called the output gate. Their semantics

                                                IJCAI-07
                                                   331is deﬁned straightforwardly by induction for each gate j as ≡s / ≡u  normal   constr.-free Horn  deﬁnite
follows: We have v(j)=1(resp., v(j)=0), if j is of sort deﬁnite     P /coNP    P /coNP     P       P
 (resp., ⊥). In the other cases, we have exactly two edges Horn     coNP      P /coNP     P
(i1,j), (i2,j) in E and deﬁne v(j)=v(i1) · v(i2) in case j constr.-free coNP    coNP
is of sort ∧ and as v(j)=1iff v(i1)+v(i2) ≥ 1 in case j is normal    coNP
of sort ∨. Deciding whether v(n)=1for the output gate n is
the problem of monotone circuit value.                 Table 1: Complexity landscape for propositional programs.
  Given (V,E), we deﬁne a program P as follows: for each
gate j of sort , there is a fact pj in P ; for each gate j of

sort ∨ having (i1,j), (i2,j) in E,wehaverulespj ← pi1   Disallowing constraints yields coNP-hardness only if both

and pj ← pi2 in P ; for each gate j of sort ∧ having (i1,j), programs use negation.
(i ,j)  E               p  ← p  ,p    P
 2   in  ,wehavetherule  j     i1 i2 in .Now,given    Lemma 4   Deciding P ≡s Q is coNP-hard for constraint-
          n                         P ∪{o  ←}
output gate , we compare the programs          and    free acyclic programs.
P ∪{o  ←  pn}. Obviously both programs are acyclic Horn
without constraints and can be constructed from the given cir- Proof (Sketch). Take the exact hitting set problem (C, S)
cuit (V,E) in polynomial time using logarithmic space. from the proof of Lemma 3, and deﬁne
                                                           
  As easily veriﬁed, we have P ∪{o ←} ≡o P ∪{o ← pn}
                                                       R =        {a ←  ci,1,ci,2; a ← ci,1,ci,3; a ← ci,2,ci,3;
iff v(n)=1holds in (V,E). Moreover, by monotonicity, this    1≤i≤n
                                                                   a ←  not ci,1, not ci,2, not ci,3;
correspondence extends to ≡u and ≡s.             2
  Next, we establish a further P-membership result.                b ←  ci,1,ci,2; b ← ci,1,ci,3; b ← ci,2,ci,3;
                                                                   b ←  not c , not c , not c },
Lemma 2  Deciding P ≡s Q between a normal program P                         i,1    i,2    i,3
and a Horn program Q is in P, if at least one of the programs P = R ∪{b ← not a}, and
is constraint-free.                                    Q = R  ∪{a ←  not b}.
Proof (Sketch). Since P or Q is constraint-free, the interpre-
                                        I             Both P and Q  are acyclic and constructible in polynomial
tation I = AP ∪Q has to be a model of both P and Q as a
                                                      time from (C, S). It can be shown, that there exists an EHS
necessary condition for strong equivalence to hold. This test
                                                      for (C, S) iff P ≡s Q.                          2
is in P. However, this can only hold if the Horn program Q is
                                                        In case of checking uniform equivalence, this task is coNP-
constraint-free. That is, the test amounts to check whether P
                                                      hard as soon as negation is involved:
is strongly equivalent to a deﬁnite Horn program, and to test
         I
whether P ≡s Q, which are both in P.             2    Lemma 5   Deciding P ≡u Q is coNP-hard for acyclic con-
  Let us now turn to acyclic normal programs. For acyclic straint-free programs, even if Q is Horn.
programs with constraints, we obtain the following result:
                                                        Proof. Again, take (C, S) from the proof of Lemma 3. De-
Lemma 3  Deciding P ≡s Q is coNP-hard for acyclic pro- ﬁne now program P as containing, for any 1 ≤ i ≤ n,
grams (with constraints), even if Q is Horn.
                                                            a ← ci,1,ci,2,a←   ci,1,ci,3,a←  ci,2,ci,3, (3)
Proof. We use an embedding of the coNP-complete exact
hitting set problem, given by an instance (C, S),whereC     a ← not ci,1, not ci,2, not ci,3.         (4)
is a family of subsets of a ﬁnite set S. The problem is
                                                     We show that there exists an EHS for (C, S) iff P ≡u {a ←}.
to decide whether there exists a subset S ⊆ S such that                    F                AS(P  ∪ F ) =
|S ∩ C| =1          C ∈  C           S              Suppose there is a set of facts such that
             , for each      .Anysuch      is an ex-  {F ∪{a}}         a/∈ F
                     C                                         . Hence,     , and thus, without loss of general-
act hitting set (EHS) for . For coNP-hardness, it is sufﬁ- ity, we can assume F ⊆ S.Sincea is not derived in P ∪ F ,
cient to consider C containing sets of cardinality 3.So,let               1 ≤ i ≤ n |{c ,c  ,c }∩F  |≤1
C = {{c  ,c   ,c  },...,{c  ,c  ,c  }}                we must have, for each      ,   i,1 i,2 i,3
       1,1 1,2 1,3       n,1 n,2  n,3 . We construct                  |{c  ,c ,c  }∩F  | > 0
                 P                                    (by Rules (3)) and i,1 i,2 i,3        (by Rules (4)).
the acyclic program consisting of the constraints     But then, F is an EHS.
        ←  ci,1,ci,2, ← ci,1,ci,3, ← ci,2,ci,3, (1)     For the only-if direction, one shows that adding any EHS
                                                      S   (C, S)   P                  S   P  ∪ S
        ←  not ci,1, not ci,2, not ci,3,        (2)      of      to   yields an answer set of      .Since
                                                      a does not occur in C,wehavea/∈ S.ButS ∪{a ←}  in
for 1 ≤ i ≤ n. Furthermore, consider Q = {a ←; ← a},                                              
                                                      turn has S ∪{a} as its only answer set. Thus, P ∪ S is not
which is also acyclic and Horn. We show that there exists an       
                                                      equivalent to S ∪{a ←}, hence P ≡u {a ←}.       2
EHS for C iff P ≡s Q. Clearly, this equivalence problem is
                                                        Since all established hardness results carry over to stratiﬁed
constructible in polynomial time in the size of (C, S).
                                                      programs, we eventually obtain a full picture of the complex-
  Suppose that P ≡s Q. Then, there exists a classical model
                                                      ity of deciding P ≡e Q for e ∈{u, s} between programs of
M  of P . By the Constraints (2), the model is nonempty and
                                                      the considered classes. Note that restrictions to stratiﬁed and
|{ci,1,ci,2,ci,3}∩M| > 0, for each 1 ≤ i ≤ n.Further-
                                                      even to acyclic programs did not lower the complexity.
more, in view of Constraints (1), |{ci,1,ci,2,ci,3}∩M|≤1
has to hold for each 1 ≤ i ≤ n.ButthenM is an EHS.    Theorem 1  The complexity of deciding strong (resp., uni-
  For the only-if direction, one easily shows that any EHS S form) equivalence between normal propositional programs is
of (C, S) is a classical model of P . Thus, the existence of an summarized in Table 1. All entries are completeness results,
EHS implies P ≡s Q.                             2    which hold also for stratiﬁed and acyclic normal programs.

                                                IJCAI-07
                                                   332  We complement these results by giving complexity bounds • EXPTIME-complete for Horn programs P , Q;and
for ordinary equivalence.                               • co-NEXPTIME-complete for normal programs P , Q.
Theorem 2 Deciding ordinary equivalence between normal
                   P                                    Furthermore, it is well known that the program complexity
stratiﬁed programs is -complete. Hardness holds already for acyclic Horn programs (without constraints) is PSPACE-
for acyclic deﬁnite Horn programs. Moreover, if one of the complete (cf., e.g., again Dantsin et al. [2001]). Hence, de-
programs is arbitrary normal, the problem is coNP-complete. ciding ordinary equivalence between acyclic Horn programs
                                                      can easily be shown to be PSPACE-complete.
Structure-Preserving Notions of Equivalence An impor-
tant observation in case of strong equivalence is that the added Strong Equivalence Note that for (acyclic) Horn programs
rules may destroy syntactical properties of the programs un- it is known that strong and uniform equivalence coincide with
der comparison, which may be unwanted. Given two acyclic
                       P      Q                       classical equivalence, which is refutable in nondeterministic
(resp., stratiﬁed) programs and , it is natural to com- polynomial time using an oracle for the ordinary equivalence
pare the two programs under any admissible extension,that of (acyclic) Horn programs, and thus feasible in EXPTIME
is to say, only under programs which do not introduce cycles (resp., in PSPACE for acyclic programs). In turn, classical
(resp., cycles involving at least one negation) when joined
    P    Q                                            equivalence is also hard for these classes, as shown by a re-
with  or  . To the best of our knowledge, equivalence no- duction of deciding inference of an atom from a program.
tions which are sensitive to the compared programs have not
been introduced so far, with the notable exception of strong Theorem 4 Deciding P ≡e Q,wheree ∈{o, u, s},is
equivalence between prioritized logic programs [Faber and EXPTIME-complete given that P, Q are Horn, and PSPACE-
Konczak, 2005].                                       complete given that P, Q are acyclic and Horn. Moreover, in
                                                      each case, hardness already holds for deﬁnite programs.
Deﬁnition 1 Programs P and Q are acyclicity-preserving
(resp., stratiﬁcation-preserving) strongly equivalent, denoted Let us now consider normal programs. For arbitrary such
    ap            sp
P ≡s  Q (resp., P ≡s Q), iff, for each program R such that programs, deciding strong equivalence is in co-NEXPTIME
both P ∪ R and Q ∪ R are acyclic (resp., stratiﬁed), P ∪ R [Lin, 2002] as well as co-NEXPTIME-hard [Eiter et al.,
and Q ∪ R possess the same answer sets.               2005a]. By suitable modiﬁcations, the hardness proof can
                                  sp                  be strengthened to acyclic programs. We therefore obtain:
  For programs without negations, P ≡s Q is clearly the
same as P ≡s Q. Moreover, from known results, we already Theorem 5 Deciding P ≡s Q is co-NEXPTIME-complete
have that in this case P ≡s Q equals P ≡u Q. Thus, also for acyclic (stratiﬁed) normal programs P, Q. Hardness even
    ap
P ≡s   Q collapses to uniform and strong equivalence for holds for constraint-free programs.
positive programs. Indeed, since strong and uniform equiva-
             P ≡ Q                      F
lence coincide,  s  is witnessed by some set of facts. Uniform Equivalence  As shown next, uniform equiva-
However, F does not create cycles if added to P and Q.
                       ≡sp                            lence between normal programs is undecidable. The proof
  In general, the relation s differs from strong equiv- reduces query equivalence between Horn programs [Shmueli,
alence, as illustrated by the following example: Consider 1987] to uniform equivalence. Query equivalence (with re-
P =  {a ← not b; a ← b} and Q = {a ←  not c; a ← c}.
                                         sp           spect to a predicate q) is the problem of deciding, given Horn
We have P ≡u  Q but P ≡s Q.However,P  ≡s   Q holds            P     Q                        E
                           P ≡   Q                    programs   and   over extensional predicates and inten-
since every counterexample for s   destroys the struc- sional predicates I, whether for any ﬁnite database (i.e., set of
ture of at least one of the programs.                 facts) D for E, it holds that P ∪D and Q ∪D derive the same
                       ap             sp
Theorem 3 Deciding P ≡s  Q  (resp., P ≡s Q) is coNP-  facts for q.Weuselinear programs here (i.e., programs with
hard for constraint-free programs P and Q, even if Q is Horn. at most one intensional predicate in the rule bodies) for which
Proof (Sketch). We use the same construction as in the proof query equivalence remains undecidable [Feder and Saraiya,
of Lemma 5, i.e., an exact hitting set problem (C, S) and the 1992], and adapt a construction due to Eiter et al. [2005a].
corresponding program P . One can show that there exists an First, we reduce query equivalence to program equivalence
                   i                                                       P  ∪ D     Q ∪ D
EHS for (C, S) iff P ≡s {a ←},fori ∈{ap, sp}.   2    (i.e., to the test whether  and        have the same
                                                      answer sets for every ﬁnite database D) as follows: Deﬁne
4  Results for the General Non-Ground Case                    P ∗ = P ∪ Q ∪{p∗(X) ←  p(X) }  and
In this section, we ﬁrst review known results for the non-    Q∗ = P ∪ Q ∪{p∗(X)  ←  p(X) },
ground case, and then provide new results revealing the fol-
lowing insights: (i) Contrary to the propositional case, we where Q results from Q by replacing each intensional pred-
prove that for non-ground programs the complexity of decid- icate symbol i by i and p∗ is a fresh predicate which refers
ing strong and uniform equivalence decreases for acyclic pro- to the query predicate p. Then, P and Q are query equivalent
grams in certain cases; and (ii) we show a new undecidability with respect to p iff P ∗ and Q∗ are program equivalent.
result for uniform equivalence, strengthening an earlier re- We now map the problem of program equivalence between
sult [Eiter et al., 2005a] given for disjunctive programs to the (linear) Horn programs to uniform equivalence between nor-
case of normal programs.                              mal programs. The basic idea is that the computation of min-
  Let us ﬁrst review the complexity of ordinary equivalence. imal models of programs is transformed to the computation
As follows from Dantsin et al. [2001], deciding P ≡o Q is of certain maximal models of program reducts, viz. so-called

                                                IJCAI-07
                                                   333UE-models, characterizing uniform equivalence [Eiter et al., Small programs For small programs, i.e., programs with
2005a].                                               a constant bound on the number of rules, again the proposi-
  In what follows, given a linear Horn program P over exten- tional case shows decreasing complexity, i.e., given a ﬁxed
sional predicates EP and intensional predicates IP ,letd be a integer k, deciding P ≡e Q between programs with at most k
new unary predicate, w be a new propositional atom, and, for rules, for e ∈{o, s, u}, is feasible in polynomial time.
each rule r ∈ P , denote by                             The result in the non-ground setting is obtained from the
  • E                  B(r)                    E      programs proving the undecidability of query equivalence
     r the list of atoms in having a predicate from P , between deﬁnite linear Horn programs [Feder and Saraiya,
                                                                                   P     Q
  • Dr the list d(X1),...,d(Xm),whereVIr \ (VH(r) ∪   1992]. While these programs, say and , have only three

    VEr )={X1,...,Xm},and                             rules, the number of predicates and constants is not bounded.
                                                      Thus, the programs P → and Q→, used to prove Theorem 6,
  • Ir the intensional predicate in B(r), if one exists, other-
           I = w                                      are not small yet. While the number of predicate symbols in
    wise let r   .                                    the original programs is easily bound (which in turn bounds
         ∗        ¯         ¯
Let now AP = AP ∪ EP ,whereEP =  {e¯ | e ∈EP } are new the number of rules in Sets (9) and (10)), Sets (7) and (8)
predicate symbols, and deﬁne P → as follows:         still introduce an unbounded number of rules. However, both
                                                      sets can be ﬁxed to have just three rules using the following
 {w ←  H(r) | r ∈ P, B(r)=∅} ∪                  (5)   argument rotation technique: replace (7) by the three rules
 {Ir ← Er,H(r),Dr  | r ∈ P, B(r) = ∅} ∪        (6)              
                                                                d (c1,...,ck) ←,
 {d(c) ←| c ∈CP }∪                              (7)                              
                                                                d (X1,...,Xk) ←  d (X2,...,Xk,X1),
 {d(X ) ← p(X  ,...,X ) | p ∈A∗ , 1 ≤ i ≤ n}∪
     i        1      n        P                 (8)             d(X  ) ← d(X ,...,X ),
                                           ∗                        1        1      k
 {p(X1,...,Xn) ←  w, d(X1),...,d(Xn) | p ∈AP }∪ (9)
                                                      where c1,...,ck are all constants occurring in P . For each
 {w ←  e(X1,...,Xn), e¯(X1,...,Xn) | e ∈EP }∪  (10)        ∗                                      →
                                                      p ∈A   ,letp be a new predicate and replace (8) in P by
 {←not   w}.                                               P
                                               (11)              
                                                                p (X1,...,Xn) ←  p(X1,...,Xn),
             →
           P                                                                     
Observe that   is normal and contains a single negation.        p (X1,...,Xn) ←  p (X2,...,X1,Xn),
The forthcoming result relies on the observation that two
                                                                d(X  ) ← p(X ,...,X  ),
Horn programs P and Q over the same domain (i.e., such that         1       1      n
C  = C                         P → ≡ Q→
 P    Q) are program equivalent iff  u    . Together  where n is the arity of p. With theses modiﬁcations, undecid-
with the result of Feder and Saraiya [1992], we thus obtain: ability can be shown as before.

Theorem 6 Deciding P ≡u Q between normal programs P   Theorem 7  P ≡u Q is undecidable for small programs P, Q.
and Q is undecidable. This holds already for deﬁnite Horn
                                                        Another method to restrict the number of rules is due
programs augmented by a single negative constraint.
                                                      to Gottlob and Papadimitriou [2003], who show how Horn
  We remark that the problem becomes decidable if one of programs can be faithfully transformed into single-rule pro-
the programs, say Q, is negation-free and the other has nega- grams. They also prove that logical implication between two
tion only in negative constraints (possibly augmented with single Horn rules is EXPTIME-hard. From this result and the
“domain predicates” for guaranteeing safety). Intuitively, by above argument rotation technique, we can derive:
              Q
monotonicity of , we can then disregard all the negative Theorem 8 Deciding P ≡e Q,wheree   ∈{s, u, o},is
            P   Q
constraints in if is not inconsistent, while otherwise (if EXPTIME-complete for small Horn programs P, Q.
Q is inconsistent) we obtain P ≡u Q.
                                                      Bounded Predicates Arities Finally, we brieﬂy discuss
5  Restricted Cases                                   bounding the predicate arities by a constant. Checking strong
Finally, we consider results for equivalence checking in case and ordinary equivalence then become signiﬁcantly easier.
                                                                                           ΣP
some parameter associated with the compared programs is Note that checking answer-set existence is 2 -complete in
ﬁxed by a constant. Due to space reasons, the discussion here this setting [Eiter et al., 2004a]. Indeed, the size of the Her-
                                                                B              P
is rather succinct and informal. A detailed formal account of brand base P of a program is polynomial in the size of
                                                      P                                       I |= P
the results will be given in the full version of the paper. , and classical model checking (i.e., deciding given
                                                      P and I ⊆ BP ) is in coNP (note that the grounding of P can
                                                      still be exponential). For strong equivalence, it is sufﬁcient

Few predicates In the propositional case, a ﬁxed number to consider an extended Herbrand base BAP ,C,whereC aug-
of atoms clearly makes all considered equivalence problems ments CP by polynomially many new constant symbols (this
tractable. For the non-ground case, the traditional technique readily follows from proofs given by Eiter et al. [2005a]).
for rewriting arbitrary programs to programs over a single In case of strong equivalence and ordinary equivalence, we
predicate can be shown to be faithful with respect to strong thus obtain that equivalence checking between normal pro-
equivalence. Hence, all the hardness (and undecidability) re- grams is on the second level of the polynomial hierarchy.
sults for the non-ground case carry over to programs over a For uniform equivalence, a similar restriction of the domain
few predicate symbols.                                seems not possible. In fact, in case of disjunctive programs,

                                                IJCAI-07
                                                   334