   Resolution in Max-SAT and its relation to local consistency in weighted CSPs

                                    Javier Larrosa, Federico Heras
                               {larrosa, fheras}@lsi.upc.edu
                            Dept. LSI, Universitat Politecnica de Catalunya
                                            Barcelona, Spain


                    Abstract                          that best respects the clauses/constraints. Two well-known
                                                      examples are Max-SAT  [Hansen and Jaumard, 1990] and
    Max-SAT is an optimization version of the well-   weighted CSP (WCSP) [Bistarelli et al., 1999], where most
    known SAT problem. It is of great importance from of recent algorithmic work has focused. In both cases the
    both a theoretical and a practical point of view. In importance of the clauses/constraints is given by a weight
    recent years, there has been considerable interest and the goal is to minimize the sum of weights associated
    in ﬁnding efﬁcient solving techniques [Alsinet et with the clauses/constraints violated by the assignment. It is
    al., 2003; Xing and Zhang, 2004; Shen and Zhang,  known that Max-SAT instances can be translated into WCSP
    2004; de Givry et al., 2003]. Most of this work   instances and vice versa [de Givry et al., 2003]. In both cases
    focus on the computation of good quality lower    the main solving technique are enumeration algorithms based
    bounds to be used within a branch and bound algo- on branch and bound search.
    rithm. Unfortunately, lower bounds are described    In the CSP side, several local consistency properties have
    in a procedural way. Because of that, it is difﬁcult been recently generalized to the WCSP framework [Cooper,
    to realize the logic that is behind.              2003; Larrosa and Schiex, 2004; 2003; de Givry et al., 2005].
    In this paper we introduce a logical framework for As a result, a new family of algorithms have been proposed.
    Max-SAT solving. Using this framework, we in-     Besides being efﬁcient, these algorithms have a highly desir-
    troduce an extension of the Davis-Putnam algo-    able property: they can be neatly described as a basic back-
    rithm (that we call Max-DPLL) and the resolution  tracking search in which certain local consistency property is
    rule. Our framework has the advantage of nicely   enforced at every search state.
    integrating branch and bound concepts such as the   In [de Givry et al., 2003], it was shown that Max-SAT in-
    lower and upper bound, as well as hiding away     stances could be efﬁciently solved by translating them into
    implementation details. We show that Max-DPLL     equivalent WCSP instances and later using a WCSP solver.
    augmented with a restricted form of resolution at The level of local consistency maintained by the WCSP
    each branching point is an effective solving strat- solver was fundamental in the efﬁciency of the algorithm.
    egy. We also show that the resulting algorithm is   In this paper we analyze the interpretation of WCSP lo-
    closely related with some local consistency proper- cal consistency properties and related algorithms when ap-
    ties developed for weighted constraint satisfaction plied to Max-SAT instances. To facilitate the connection, we
    problems.                                         start by providing a reformulation of Max-SAT in which it
                                                      is possible to explicitly express a lower and an upper bound
                                                      of the optimal cost (Section 3). Such reformulation makes
1  Introduction                                       possible an elegant extension of DPLL in which each branch-
Since the eighties, both boolean satisﬁability and constraint ing point is just a Max-SAT instance, similarly to what hap-
satisfaction have been the topic of intense algorithmic re- pens with DPLL in SAT (Section 4). In Section 5 we present
search. In both areas, the goal is to assign values to variables our main contribution: a generalization of the resolution rule
in such a way that no forbidden combination of values appear (x ∨ A,x¯ ∨ B ⇒ A ∨ B) and the proof that neighborhood reso-
in the solution. In satisﬁability, forbidden combinations are lution (i.e., a restricted form of resolution) sufﬁces to enforce
speciﬁed by means of clauses. In constraint satisfaction they (weighted) node and arc consistency. In Section 6 we put our
are speciﬁed by means of arbitrary constraints. Given its sim- approach in context with other Max-SAT algorithms. Finally,
ilarity, it is hardly a surprise that both research communities in Section 7 we provide conclusions and directions of future
have developed closely related techniques.            work.
  In both ﬁelds, the original decision problem (SAT and
CSP, respectively) has been augmented to deal with unfea- 2 Preliminaries
sible problems (namely, not all the clauses or constraints In the sequel X = {x1,...,xn} will denote a set of boolean
can be satisﬁed). The new goal is to ﬁnd an assignment variables. They take values over the set {t,f}, which standsfor true and false, respectively. A literal l is either a variable Example 1 Consider the formula {(x,1),(y¯,5),(x¯ ∨
x or its negationx ¯. l¯ stands for the negation of l. y,2),(x ∨ y,4)}, with > = 5. The second clause is hard. The
  If variable x is instantiated to t, noted x ← t literal x is sat- assignment x = f,y = f is not a model because its cost is
isﬁed and literalx ¯ is falsiﬁed. Similarly, if x is instantiated to 1 ⊕ 4 = >. The assignment x ← t,y ← f is a (optimal) model
f,x ¯ is satisﬁed and x is falsiﬁed. An assignment is an instanti- with cost 2.
ation of a subset of the variables. The assignment is complete Note that in Max-SAT truth tables are tables with a cost
if it instantiates all the variables in X (otherwise it is partial). associated to each truth assignments. A brute-force solving
An assignment satisﬁes a clause (i.e., a disjunction of liter- method consists in computing the truth table of the input for-
als) C iff it satisﬁes one or more of its literals. It satisﬁes a set mula and ﬁnding the minimal cost model. For instance, the
of clauses F iff it satisﬁes all its clauses. A satisfying com- truth-table of the previous formula is,
plete assignment is called a model. Given a boolean formula
encoded by a set of clauses F , the SAT problem consists in              x y    cost
determining whether there is any model for it or not.                    f f  1 ⊕ 4 = >
  We will use the symbol 2 to denote the empty clause                    f t 1 ⊕ > = >
which, obviously, cannot be satisﬁed. When 2 ∈ F we say                  t f     2
that there is an explicit contradiction.                                 t t     >
  When there is no model for the formula , one may be
                                     F                  It is worth mentioning the role of the empty clause (2,w).
interested in ﬁnding the complete assignment with minimum
                                                      Since it cannot be satisﬁed, w will be added to the cost of any
number of violated clauses. This problem is known as Max-
                                                      model. Therefore, w is an explicit lower bound of the optimal
SAT.
                                                      model. When the lower bound and the upper bound have the
                                                      same value (i.e., (2,>) ∈ F ) the formula does not have any
3  An equivalent reformulation of Max-SAT             model and we call this situation an explicit contradiction.
There is a weighted version of Max-SAT in which (weighted)
clauses are pairs (C,w) such that C is a classical clause and w
is the cost of its falsiﬁcation. In weighted Max-SAT F is a set 4 Generalization of DPLL to Max-SAT
of weighted clauses. The cost of an assignment is the sum of 4.1 Max-SAT Basic Simpliﬁcation Rules
weights of all the clauses that it falsiﬁes. The goal is to ﬁnd
complete assignments with minimal cost. We make the usual SAT solvers take advantage from some equivalence rules that
assumption of weights being natural numbers.          are used to simplify the CNF formula without changing its set
  It is easy to see that Max-SAT and weighted Max-SAT of models. Not all of these formulas can be applied directly to
have exactly the same expressive power. A Max-SAT in- Max-SAT. In this Section we state some useful Max-SAT spe-
stance can be rewritten as a weighted instance replacing ev- ciﬁc rules. We use the notation [P,...,Q] ⇒ [R,...,S], where
ery clause C by a weighted clause (C,1). A weighted Max- P,Q,... are weighted clauses. It means that if there are in
SAT instance can be rewritten as a Max-SAT instance replac- F weighted clauses matching with [P,...,Q], they can be re-
ing every weighted clause (C,w) by w copies of clause C. placed by [R,...,S]. A and B are arbitrary disjunctions of
Clearly, weighted Max-SAT encodings may be exponentially literals.
more compact than Max-SAT. Thus, in the following, we will
assume, without loss of generality, weighted Max-SAT.   • BR1: [(A,>),(A ∨ B,w)] ⇒ [(A,>)]
  Following previous work in weighted constraint satisfac- • BR2: [(A,w),(A,u)] ⇒ [(A,w ⊕ u)]
tion [Larrosa and Schiex, 2004], we assume the existence of
a known upper bound k of the optimal solution. This is also • BR3: If (w ⊕ u = >) then [(A,w),(A ∨ B,u)] ⇒
done without loss of generality because, if a tight upper bound [(A,w),(A ∨ B,>)]
is not known, k can be set to the sum of weights of all the • BR4: [(A,0)] ⇒ [ ]
clauses.
  Consider the set F of weighed clauses. We say that a  BR1 shows that classical absorption can only be applied
model is a complete assignment with cost less than k. Max- when the absorbing clause is hard. BR2 generalizes the
SAT is the problem of ﬁnding a model of minimal cost, if standard idempotency of the conjunction: In Max-SAT the
there is any.                                         weights of the repeated clauses must be added in the result-
  Observe that weights w ≥ k indicate that the associated ing clause. BR3 is used to harden a soft clause. BR4 indi-
clause must be necessarily satisﬁed. Thus, we can replace ev- cates that cost-free clause can be eliminated. The correctness
ery weight w ≥ k by k without changing the problem. Thus, of these equivalences is direct and we omit the proof.
without loss of generality we assume all costs in the interval
[0..k] and, accordingly, redeﬁne the sum of costs as  Example 2  Consider  the  formula  {(x,1),(x,1),(x ∨
                                                      y,3),(x ∨ y ∨ z,1)}, with > = 5. We can apply BR2, which
                a ⊕ b = min{a + b,k}                  produces {(x,2),(x ∨ y,3),(x ∨ y ∨ z,1)}. Now, we can apply
in order to keep the result within the interval. For convenience BR3, producing {(x,2),(x∨y,>),(x∨y∨z,1)}. Finally, BR1
of notation, we will refer to k as >. We say that a weighted produces {(x,2),(x ∨ y,>)}. The equivalence between the
clause is hard (or mandatory) iff its weight is >. Observe that original and the ﬁnal formula can be checked by constructing
Max-SAT with > = 1 is equivalent to SAT.              and comparing the costs of the two truth-tables.4.2  Max-DPLL                                         Function Max-DPLL(F ,>) : nat
                                                    1   F :=UP(F );
Davis Putnam (DPLL) is the most popular algorithm for SAT 2 if (2,>) ∈ F then return >;
and the starting point of most state-of-the-art solvers [Davis 3 if F = 0/ then return 0;
et al., 1962]. It takes as input a CNF formula F and de- 4 if F = {(2,w)} then return w;
cides whether or not there exists a model. In this Section, we 5 l :=SelectLit(F );
present a natural extension of DPLL to Max-SAT that we call 6 v :=Max-DPLL(F [ l ],>);
Max-DPLL. Let F be a weighted CNF formula and > its up- 7 v :=Max-DPLL(F [ l¯ ],v);
per bound. Max-DPLL(F ,>) returns the cost of the optimal 8 return v;
model of F if there is such a model, else it returns >. The
following description is inspired by the description of DPLL Algorithm 1: Max-DPLL. F is a set of weighted clauses with
given in [Bacchus, 2002].                             all weights in the interval [0,...,>]. If the weighted formula
  As in classical SAT, Max-DPLL performs basic simpliﬁ- has models, Max-DPLL returns the cost of the optimal one,
cations on its input prior to invoking itself recursively. The else it returns >
instantiation of a variable by forcing the satisfaction of a lit-
eral l, denoted F [l] produces a new formula generated from point is the mean over 10 instances. The results of Max-
                                                  ¯
F as follows: all clauses containing l are eliminated, and l DPLL are those labelled as UP (ignore, for the moment, the
is removed from all clauses where it appears. Unit Clause other curves). As can be observe, the performance of the al-
Reduction (UCR) is another simpliﬁcation rule that selects gorithm degenerates as the number of clauses increases.
a clause (l,>) (namely, a unit hard clause) and instantiates Max-DPLL can be enhanced by dominance rules that ex-
the corresponding variable in accordance to the literal in that ploit situations where it is easy to detect that one literal is
clause. Unit Propagation (UP) is the algorithm that performs never worse than its negation. A well-known SAT case, also
UCR and the basic simpliﬁcation rules BR1 − 4 until either applicable to Max-SAT, is the pure literal rule. It says that
(a) a contradiction is achieved, or (b) there are no more pos- if there is a literal such that it appears in the formula and its
sible simpliﬁcations to do.                           negation does not appear, then all clauses mentioning it can
Example 3 Consider the application of UP to the for-  be removed. More sophisticated dominance rules for Max-
mula   {(2,1),(x¯,4),(x,1),(y,3),(y¯,1),(x¯ ∨ y¯ ∨ z,1)}, SAT and WCSP can be found in [Xing and Zhang, 2004;
with  >  =  5.      Rule  BR3   transforms  it into   de Givry, 2004].
{(2,1),(x¯,>),(x,1),(y,3),(y¯,1),(x¯ ∨ y¯ ∨ z,1)}. UCR
instantiates x¯ and produces {(2,3),(y,3),(y¯,1),(y¯ ∨ z,1)}. 5 Resolution for Max-SAT
                    2
Again BR3 produces {( ,3),(y,>),(y¯,1),(y¯ ∨ z,1)}, which While DPLL seems to be the best option to ﬁnd models, res-
                            2
allows UCR to instantiate y, {( ,4),(z,1)}. Again BR3 olution might be more appropriate to detect contradictions.
           2
produces {( ,4),(z,>)}, which UCR   to instantiate z  [Robinson, 1965] showed that the resolution rule is sound
                    2
producing the trivial {( ,4)}. The model of the original and complete for SAT, although it is usually too space con-
formula (x¯,y,z) can be constructed by tracking back the truth suming. In the SAT context, the performance of DPLL has
assignments made by UCR.                              been improved by the addition of limited forms of resolution
  A recursive description of Max-DPLL is given in Algo- at each search node [Gelder, 1995; Rish and Dechter, 2000;
rithm 1. First, UP is applied to the input formula (line 1). If Bacchus, 2002; Drake et al., 2002] in order to anticipate the
the resulting formula contains a contradiction, the algorithm detection of dead-ends. In this section we generalize the res-
returns > and backtracks (line 2). Else, if it does not contain olution rule to Max-SAT. Then we show that some local con-
any variable the trivial cost of the optimal model is returned sistency techniques used in [Larrosa and Schiex, 2004] are
(lines 3 and 4). Otherwise, an arbitrary literal l is selected just the application of a restricted form of the weighted reso-
(line 5). The formula is instantiated with l and l¯ and Max- lution rule.
DPLL is recursively called with each case (lines 6 and 7). First we deﬁne the subtraction of weights ( ): Let a,b ∈
Observe that the ﬁrst recursive call is made with the > inher- [0,...,>] be two weights such that a ≥ b,
ited from its parent, but the second call uses the output of the
                                                                           a − b  : a 6= >
ﬁrst call. This implements the typical upper bound updating        a   b =
                                                                               >   : a = >
of branch and bound. Finally, the best value of the two re-
cursive calls is returned (line 8). Note that if Max-DPLL is The weighted resolution rule (RES) is deﬁned as,
executed with a SAT instance (i.e., > = 1) it behaves exactly
as DPLL.                                                                           (A ∨ B,m)
                                                                                 
  Figure 1 reports some empirical evaluation of Max-DPLL                          (x ∨ A,u   m)
on 40-variable random instances of Max-2-SAT and Max-3-      (x ∨ A,u),(x¯∨ B,w) ⇒  (x¯∨ B,w   m)
                                    1                                              (x ∨ A ∨ B¯,m)
SAT generated with the Cnfgen generator. The horizontal                          
axis indicates the number of clauses and the vertical axis in-                     (x¯∨ A¯ ∨ B,m)
dicates the search effort as the number of visited nodes. Each
                                                      where A and B are arbitrary disjunctions of literals and m =
  1A. van Gelder ftp://dimacs.rutgers.edu/            min{u,w}. Variable x is called the clashing variable. Ob-
pub/challenge/satisﬁability/contributed/UCSC/instances serve that in the u = w = > case the fourth and ﬁfth new        1000                                          well known that in the SAT case (i.e, > = 1) the rule is com-
                                   UP
                              UP+NRES0                plete (its application sufﬁces to achieve a contradiction). We
                          UP+NRES0+NRES1
         800                     EDAC                 are still investigating under which other cases the complete-
                                                      ness of RES is guaranteed. One important problem we have
         600                                          detected is that the fourth and ﬁfth new weighted formulas
                                                      (i.e., (x ∨ A ∨ B¯,m), (x¯∨ A¯ ∨ B,m)) may not be in conjunctive
         400                                          normal form.

      n.  of nodes (thousands) 200                    5.1  Neighborhood Resolution
                                                      Neighborhood Resolution [Cha and Iwama, 1996] is the clas-
          0                                           sical resolution rule restricted to pairs of clauses that differ
           0    500  1000 1500 2000  2500 3000        only in the clashing variable. Similarly, in the Max-SAT con-
                        n. of clauses                 text we deﬁne the neighborhood resolution rule (NRES) as
        20000
                                   UP                 RES restricted to the A = B case, which simpliﬁes to,
                              UP+NRES0
                          UP+NRES0+NRES1                                         ( (A,m)
        15000                  UP+NRES
                                 EDAC*                       (x ∨ A,u),(x¯∨ A,w) ⇒ (x ∨ A,u   m)
                                                                                   (x¯∨ A,w   m)
        10000
                                                      whith m = min{u,w}. This rule is specially useful because
                                                      it projects to A costs that were implicit in the formula. We


      n.  of nodes (thousands) 5000                   demonstrate the interest of NRES considering its application
                                                      to bounded-size clauses. Let NRESk denote NRES restricted
                                                      to |A| = k. NRES yields,
           0                                                         0
            0   500  1000 1500  2000 2500 3000                                 (   2
                        n. of clauses                                             ( ,m)
                                                                  (x,u),(x¯,w) ⇒  (x,u   m)
Figure 1: Experimental results on random Max-2SAT (top)                           (x¯,w   m)
and Max-3SAT (bottom).                                  This rule is extremely useful because it produces a direct
                                                      increment of the lower bound, which may raise a contradic-
clauses can be removed (by BR1), yielding a rule similar to tion, or produce new unit clause reductions.
classical resolution. Observe as well that in the u = w < > Example 4 Consider      the           formula
case, the second and third new clauses will have weight 0 and {(x,1),(x¯,2),(y,1),(y¯,1),(z,1)} with > = 3. UP is un-
can be removed (by BR4). In the u 6= w case, either the sec-
                                                      able to simplify the problem. Nevertheless, NRES0 can
ond or the third new clause will have weight 0 and can be be applied to the ﬁrst and second clauses producing
removed (by BR4). Recall that in RES, the left-hand clauses
                                                      {(2,1),(x¯,1),(y,1),(y¯,1),(z,1)}. Appling NRES0 to the
are replaced by the right-hand, while in classical resolution third and fourth clauses produces {(2,2),(x¯,1),(z,1)}.
right-hand clauses are just added.                    Using BR3 we obtain {(2,2),(x¯,>),(z,>)}. The two unit
Theorem 1 The transformation rule RES is sound. Namely, clauses can be reduced, producing {(2,2)}.
it preserves the set of models and their cost.
                                                        It is interesting to observe that the application of NRES0
proof 1 The following table contains in the ﬁrst columns all is somehow similar to the computation of the lower bound
the truth assignments, in the second column the cost of the of [Alsinet et al., 2003]. The practical importance of adding
assignment according to the clauses on the left-hand of the NRES0 to Max-DPLL is illustrated in Figure 1. The lines la-
RES rule, and in the third column the cost of the assignment belled UP+NRES0 report the efﬁciency of Max-DPLL when
according to the clauses on the right-hand of the RES rule. UP is augmented with NRES0 until quiescence. As it can be
As it can be observed, the costs the are same, so the resulting observed NRES0 produces huge savings over the very inefﬁ-
problem is equivalent.                                cient Max-DPLL.
              x A B  Left    Right                      The rule NRES1 is,
              f f f   u   m ⊕ (u   m)                                           (  (l,m)
              f f t   u   m ⊕ (u   m)                         (x ∨ l,u),(x¯∨ l,w) ⇒ (x ∨ l,u   m)
              f t f   0        0                                                   (x¯∨ l,w   m)
              f t t   0        0
              t f f  w    m ⊕ (w   m)                 This rule is also of great interest because it increases the
              t f t   0        0                      weight of a unary clauses, which may allow further appli-
              t t f  w    m ⊕ (w   m)                 cation NRES0 and UCR.
              t t t   0        0                      Example 5  Consider  the  formula   {(x ∨ y,1),(x¯ ∨
  The interest of RES is that it makes explicit some previ- y,1),(y¯,1),(z,1) with > = 2. Neither UP nor NRES0
ously hidden connection between variables in A and B. It is can simplify the problem. However, NRES1 produces{(y¯,1),(y,1),(z,1)} which allows NRES0 to transform the The algorithm to enforce NC* introduced in [Larrosa and
problem into {(2,1),(z,1)}. We can apply BR3 to the   Schiex, 2004] proves the following result,
unary clause obtaining {(2,1),(z,>). Now, UCR produces
  2                                                   Corollary 1 UP +NRES0   can be implemented with time
{( ,1)}.                                              complexity O(n), where n is the number of variables in the
  The practical importance of adding NRES1 to Max-    formula.
DPLL is also illustrated in Figure 1. The lines labelled
                                                      Deﬁnition 3   is arc-consistent (AC*) iff it is NC* and
UP+NRES0+NRES1 report the efﬁciency of Max-DPLL                  F
                                                      for all pair of variables (x ,x ), min{w(i j),w(i j¯)} = 0 and
when UP is augmented with NRES  and NRES  until qui-                         i j
                              0          1            min{w(i¯ j),w(i j)} = 0
escence. As it can be observed, the addition of NRES1 also
produces huge gains. For the sake of completeness, we also Theorem 4 Let UP +NRES0 +NRES1 denote the algorithm
evaluate the effect of NRESk for k > 1. Obviously, in 2-SAT that applies UP, NRES0 and NRES1 until quiescence. It en-
it does not have any effect, since the application of NRESk forces arc-consistency (AC*).
requires clauses of length k + 1. In 3-SAT, NRES2 can only
be applied in the original ternary clauses. Its effect is reported proof 4 We only need to proof that the application of
in Figure 1 under the label UP+NRES. It can be observed that NRES1 guarantees that for all pair of variables (xi,x j),
                                                                   ¯                ¯
NRES2 has a very limited effect.                      min{w(i j),w(i j)} = 0 and min{w(i j),w(i j)} = 0. We proof
                                                      the ﬁrst condition (the second is similar). Assume that 0 <
5.2  Neighborhood Resolution and Local                w(i j) ≤ w(i j¯). There are two possible situations. The ﬁrst
     Consistency                                      one is that w(i j) = > (which implies w(i j¯) = >. In that case
                                                      NRES   will add (x ,>) to the formula. Then, UCR will be
In this Section we relate the simpliﬁcation rules discussed 1         i
                                                      trigger and xi will disappear from the formula. The second
along the paper with local consistency properties developed situation is w(i j) < >. Then, the application of NRES will
for WCSP. In order to do so, we recall that the usual way to                                        1
                                                      add w(i j) to w(i) and replace (xi ∨ x j,w(i j)),(xi ∨ x¯j,w(i j¯))
map a Max-SAT instance with a WCSP is to group clauses by (x ∨ x ,0),(x ∨ x¯ ,w(i j¯)   w(i j)).
mentioning exactly the same set of variables and associate i  j     i  j
them to a cost function f deﬁned as follows: Let V ⊂ F  The algorithm to enforce AC* introduced in [Larrosa and
be the group of clauses over the set of variables Y ⊂ X. V Schiex, 2004] proofs the following result.
deﬁnes a cost function f with scope Y. Let t be an instanti-
                                                      Corollary 2 UP +NRES0 +NREO can be implemented with
ation of the variables in Y. If t falsiﬁes a clause (C,w) ∈ V , time complexity O(n2), where n is the number of variables in
f (t) = w, else f (t) = 0. Now it is straightforward to redeﬁne the formula.
the WCSP local consistency properties in Max-SAT terms.
In the following consider a boolean formula F where w(2)
denotes the weight of the empty clause; w(i) and w(i¯) the 6 Neighborhood Resolution and
weights of the the unary clauses xi andx ¯i, respectively; anal- state-of-the-art Max-SAT lower bounds
                ¯    ¯
ogously w(i j), w(i j), w(i j) and w(i j) are the weights of the In the last years several algorithms for Max-SAT have been
four possible binary clauses over xi and x j. If any of these proposed [Alsinet et al., 2003; Xing and Zhang, 2004;
clauses is not in F the corresponding weight is 0.    Shen and Zhang, 2004]. All these works have in common
                                                      a basic branch and bound algorithm. They mainly differ in
Deﬁnition 1 F is node-consistent (NC) iff for all variable xi,
w(2) ⊕ w(i) < > and w(2) ⊕ w(i¯) < >.                 the lower bound that they use. [Shen and Zhang, 2004] show
                                                      that their lower bound is better (i.e., higher than or equal) than
Theorem 2 Algorithm UP enforces the NC property.      [Alsinet et al., 2003] and, under some reasonable conditions,
                                                                       [                   ]
proof 2 Suppose that F is not NC. Then there is some clause it is also better than Xing and Zhang, 2004 . In the follow-
(l,w) ∈ F such that w(2) ⊕ w = >. Therefore BR3 can be ing, by means of two examples, we show that UP +NRES0
applied replacing clause (l,w) by (l,>). It will allow the +NRES1 is not comparable with them.
application of UCR which will eliminate the clause.     Consider the formula {(x ∨ z,1),(x¯ ∨ z,1),(y ∨ z¯,1),(y¯ ∨
                                                      z¯,1)}. Both [Xing and Zhang, 2004] and [Shen and Zhang,
Deﬁnition 2 F is star node-consistent (NC*) iff it is NC and 2004] would compute a lower bound 0. However, NRES1
for all variable xi, w(i) = 0 or w(i¯) = 0            can be applied twice, producing the equivalent formula
                                                      {(z,1),(z¯,1)} and now NRES would transform the problem
Theorem 3 Let UP +NRES   denote the algorithm that ap-                         0
                        0                             into {(2,1)}, which means a lower bound of 1.
plies UP and NRES until quiescence. It enforces NC*.
                0                                       Consider now the formula {(x,1),(y,1),(x¯ ∨ y¯,1)}. While
proof 3 We only need to proof that the application of NRES0 both [Xing and Zhang, 2004] and [Shen and Zhang, 2004]
guarantees that for all variable xi, w(i) = 0 or w(i¯) = 0. As- would compute a lower bound of 1, NRES cannot be ap-
sume that 0 < w(i) ≤ w(i¯). There are two possible situa- plied, so the implicit lower bound of our algorithm would
tions. The ﬁrst one is w(i¯) = >. In that case UP will trig- be 0. Nevertheless, it is important to observe that, if we en-
ger UCR and xi will disappear from the formula. The sec- code this problem as a weighted CSP and enforce a stronger
ond situation is w(i¯) < >. Then, the application of NRES0 form of consistency called existential directional arc consis-
will add w(i) to w(2) and replace (xi,w(i)),(x¯i,w(i¯)) by tency (EDAC*)[de Givry et al., 2005], we transform the for-
(xi,0),(x¯i,w(i¯)   w(i)).                            mula into the equivalent {(2,1),(x ∨ y,1)} which also has