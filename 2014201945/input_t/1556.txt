                    AND/OR Branch-and-Bound for Graphical Models

                                  Radu Marinescu     and  Rina Dechter
                              School of Information and Computer Science
                               University of California, Irvine, CA 92697
                                      {radum,dechter}@ics.uci.edu


                     Abstract                          the graph-model structure because they traverse a structure-
                                                       blind search space. To overcome this problem the idea of
    The paper presents and evaluates the power of a new AND/OR search spaces was introduced in the past year, and
    framework for optimization in graphical models,    was shown to vividly display independencies encoded in the
    based on AND/OR search spaces. The virtue of the   underlying graphical model [Dechter and Mateescu, 2004]. In
    AND/OR representation of the search space is that  this paper we develop AND/OR Branch-and-Bound (AOBB),
    its size may be far smaller than that of a traditional a general algorithm for solving COPs, which explores the
    OR representation. We develop our work on Con-     AND/OR search tree in a depth-ﬁrst manner. Its efﬁciency
    straint Optimization Problems (COP) and introduce  depends on its guiding heuristic functions. In the past, a
    a new generation of depth-ﬁrst Branch-and-Bound    class of partitioning-based heuristic functions, based on the
    algorithms that explore an AND/OR search space     Mini-Bucket approximation and known as static mini-bucket
    and use static and dynamic mini-bucket heuristics  heuristics was shown to be powerful for optimization prob-
    to guide the search. We focus on two optimiza-     lems [Kask and Dechter, 2001]. We take the idea one step
    tion problems, solving Weighted CSPs (WCSP) and    further and introduce dynamic mini-bucket heuristics, which
    ﬁnding the Most Probable Explanation (MPE) in be-  are computed dynamically at each node of the search tree.
    lief networks. We show that the new AND/OR ap-     Both schemes are parameterized by the Mini-Bucket i-bound,
    proach improves considerably over the classic OR   which allows for a controllable trade-off between preprocess-
    space, on a variety of benchmarks including ran-   ing and search.
    dom and real-world problems. We also demonstrate     We apply the AND/OR algorithms to two common opti-
    the impact of different lower bounding heuristics on mization problems: solving Weighted CSPs [Bistarelli et al.,
    Branch-and-Bound exploring AND/OR spaces.          1997] and ﬁnding the Most Probable Explanation (MPE) in
                                                       belief networks [Pearl, 1988]. We experiment with both ran-
1  Introduction                                        dom models and real-world benchmarks. Our results show
                                                       conclusively that the new AND/OR Branch-and-Bound algo-
Graphical models such as constraint networks and belief net- rithms improve dramatically over traditional OR ones, espe-
works have become a powerful representation framework for cially when the heuristic estimates are inaccurate and the al-
reasoning with deterministic and probabilistic information. gorithms rely primarily on search rather than on pruning.
These models use graphs to capture conditional independen-
cies between variables, allowing a concise representation of
the knowledge as well as efﬁcient graph-based query process- 2 Background
ing algorithms.                                        A ﬁnite Constraint Optimization Problem (COP) is a six-tuple
  Optimization tasks such as ﬁnding the most likely state of a P = hX , D, F, ⊗, ⇓, Zi, where X = {X1, ..., Xn} is a set
belief network or ﬁnding a solution that violates the least num- of variables, D = {D1, ..., Dn} is a set of ﬁnite domains
ber of constraints in a constraint network are all instances of and F = {f1, ..., fm} is a set of constraints. Constraints
Constraint Optimization Problems (COP). They are typically can be either soft (cost functions) or hard (sets of allowed tu-
tackled with either search or inference algorithms. Search ples). Without loss of generality we assume that hard con-
methods (e.g. depth-ﬁrst Branch-and-Bound, best-ﬁrst search) straints are represented as (bi-valued) cost functions. Allowed
are time exponential in the number of variables and can oper- and forbidden tuples have cost 0 and ∞, respectively. The
ate in polynomial space. Inference algorithms (e.g. variable scope of function fi, denoted scope(fi) ⊆ X , is the set of
elimination, tree-clustering) are time and space exponential in arguments of fi. The operators ⊗ and ⇓ can be deﬁned us-
a topological parameter called tree width. If the tree width ing the semi-ring framework [Bistarelli et al., 1997], but in
is large, the high space complexity makes the latter methods this paper we assume that: ⊗ifi is a combination operator,
impractical.                                           ⊗ifi ∈ {Qi fi, Pi fi} and ⇓Y f is an elimination operator,
  In this paper we focus on search. In contrast to in- ⇓Y f ∈ {maxS−Y  f, minS−Y f}, where S is the scope of
ference algorithms, search algorithms are less sensitive to function f and Y ⊆ X . The scope of ⇓Y f is Y .                                              m                         OR                    A
  An optimization task is deﬁned by g(Z) = ⇓Z ⊗i=1fi,         A
where Z ⊆  X . A global optimization is the task of ﬁnding
                                                                     F  AND            0              1
the best global cost, namely Z = ∅. For simplicity we will de- B C
velop our work assuming a COP instance with summation and               OR             B

minimization as combination and elimination operators, and a E D
                                         m                              AND       0          1
global cost function deﬁned by f(X ) = minX Pi=1 fi.
  The primal graph of a COP instance has the variables X as  A          OR    E       C
its nodes and an arc connects any two variables that appear in B        AND  0 1  0       1
the scope of the same function.
                                                          E      C
  In practice, most complete COP solvers follow a depth-ﬁrst            OR      D   F   D   F
Branch-and-Bound strategy which maintains an upper bound,    D      F   AND   0  1 0 1 0 1 0 1
the best solution cost found so-far, and a lower bound on the (a)                     (b)
optimal extension of the current assignment. Value pruning
occurs as soon as the lower bound exceeds the upper bound.        Figure 1: An AND/OR search tree.

3  AND/OR Search Spaces                                ure 1(b). Observe that the AND node hB, 0i1 roots two inde-
The usual way to do search (i.e. OR search) is to instantiate pendent subproblems, one represented by variable {E}, and
variables in turn, following a static/dynamic linear ordering. the other by variables {C, D, F }.
This process deﬁnes a search tree (i.e. OR tree), whose nodes THEOREM 1 ([Dechter and Mateescu, 2004]) Given a COP
represent states in the space of partial assignments.  instance P and a pseudo-tree T , its AND/OR search tree ST
  One way to exploit the independencies encoded by the is sound and complete (contains all and only solutions) and its
graphical model is to introduce AND nodes into the search size is O(n·exp(m)), where m is the depth of the pseudo-tree.
space, which will decompose the problem into separate sub-
problems. In the past year, [Dechter and Mateescu, 2004] in- Any search algorithm that traverses the AND/OR search
troduced the concept of AND/OR search spaces for constraint tree in a depth-ﬁrst manner is guaranteed to have a time com-
networks, belief networks, and for graphical models in gen- plexity exponential in the depth of the pseudo-tree and can op-
eral. The AND/OR search space is deﬁned using a back-bone erate in linear space. In contrast, the time complexity of search
pseudo-tree arrangement of the primal graph.           algorithms exploring traditional OR search trees is exponen-
                                                       tial in the number of variables. The arcs in ST are annotated
DEFINITION 1 (pseudo-tree) Given the primal graph G of a by appropriate labels of the cost functions. The nodes in ST
COP instance P, a pseudo-tree is a rooted tree with the same can be associated with a value, accumulating the result of the
set of vertices as G and has the property that adjacent vertices computation resulted from the subtree below.
from G must be in the same branch of the rooted tree [Freuder
                                                       DEFINITION 3 (label) The label l(X , hX , ai) of the arc
and Quinn, 1985].                                                                      i   i
                                                       from the OR node Xi to the AND node hXi, ai is deﬁned as
DEFINITION 2 (AND/OR search tree) Given a  COP   in-   the sum of all the cost functions values for which variable Xi
stance P, its primal graph G and a pseudo-tree T of G, the is contained in their scope and whose scope is fully assigned
associated AND/OR search tree ST (P) has alternating levels along P athST (hXi, ai).
of OR nodes and AND nodes. The OR nodes are labeled Xi DEFINITION 4 (value) The value v(n) of a node n ∈ ST , is
and correspond to the variables. The AND nodes are labeled deﬁned recursively as follows: (i) if n = hXi, ai is a ter-
hXi, ai and correspond to value assignments in the domains minal AND node then v(n) = l(Xi, hXi, ai); (ii) if n =
of the variables. The root of the AND/OR search tree is an OR hXi, ai is an internal AND node then v(n) = l(Xi, hXi, ai)+
node, labeled with the root of T . The children of an OR node       ′
                                                       Pn′∈succ(n)v(n ); (iii) if n = Xi is an internal OR node then
X  are AND nodes labeled with assignments hX , ai, consis-                   ′
 i                                      i              v(n) = min ′       v(n ), where succ(n) are the children
tent along the path from the root. The children of an AND node   n ∈succ(n)
                                                       of n in ST .
hXi, ai are OR nodes labeled with the children of variable Xi
                                                         Clearly, the value of each node can be computed recur-
in T . The path of a node n ∈ ST , denoted P athST (n), is the
path from the the root of ST to n, and corresponds to a partial sively, from leaves to root. We can show that:
value assignment to all variables along the path.      PROPOSITION 1 Given an AND/OR search tree ST of a COP
                                                       instance P = hX , D, F, +, mini, the value function v(n) is
  A solution subtree SolST of ST is an AND/OR subtree
such that:(i) it contains the root of S ;(ii) if a nonterminal the minimal cost solution to the subproblem rooted at n, sub-
                                T                      ject to the current variable instantiation along the path from
AND node n ∈  ST is in SolST then all of its children are in
Sol  ;(iii) if a nonterminal OR node n ∈ S is in Sol then root to n. If n is the root of ST , then v(n) is the minimal cost
   ST                               T        ST        solution to P.
exactly one of its children is in SolST .
                                                         Therefore, we can traverse the AND/OR search tree in a
Example 1 Consider the graphical model in Figure 1(a) (top) depth-ﬁrst manner to compute the value of the root. This
describing a graph coloring problem over domains {0,1}. An
AND/OR search tree based on the pseudo-tree in Figure 1(a) 1In the ﬁgure we only denote the value. hB, 0i is written as 0
(bottom), and a highlighted solution subtree are given in Fig- child of B.approach would require linear space, storing only the cur-                            A
rent partial solution subtree. The algorithm expands alternat-              0                  1

ing levels of OR and AND nodes, periodically evaluating the              B      C        B           C
value function of the nodes along the current path. It termi-    A
nates when the root node is evaluated with the optimal cost.  B      C             0           1
                                                                                 D E F    D    E     F
                                                          D   E  F   G
                                                                                         0 1  0  1
4  AND/OR Branch and Bound                                  H  K
                                                                                             H K
If each node n at the search frontier is assigned a heuristic   L
lower-bound estimate h(n) of v(n), then we can calculate the  (a)                     (b)
most promising extension of the current partial solution sub-
tree and prune the portion of the search space that becomes
irrelevant, as part of a Branch-and-Bound scheme. We call        Figure 2: A partial solution subtree.
h(n) a static heuristic function.
4.1  Lower Bounds on Partial Solution Trees            Example 2 For the active partial subtree rooted at B in Fig-
                                                       ure 2(b), the lower bound f (B) on v(B) is computed recur-
At any stage of the search, the current partial solution is a                 h
                                                       sively as follows: f (B) = max(h(B), f (hB, 1i)), where
partial solution subtree, denoted . By the nature of the               h                   h
                            PST                        f (hB, 1i) = max(h(hB, 1i), l(B, hB, 1i)+v(D)+f (E)+
search process,    must be connected, must contain the  h                                           h
              PST                                      h(F )). Similarly, f (E) = max(h(E), f  (hE, 1i)) =
root node and will have a frontier containing all those nodes            h                    h
                                                       max(h(E), h(hE, 1i)), since f (hE, 1i) = h(hE, 1i).
that were generated but not yet expanded. The leaves of PST                      h
are called tip nodes. In this section we will deﬁne a dynamic 4.2 The Branch-and-Bound Procedure
heuristic function of a node n relative to the current PST ,
which yields a more accurate lower bound on v(n) than h(n). In the AND/OR search space, we can calculate a lower bound
For that we introduce the notions of active path, its inside and on v(n) of a node n on the active path, by using fh(n). In
outside contexts and the active partial subtree.       addition, we can compute an upper bound on v(n), based on
DEFINITION 5 Given the current PST , the active path   the portion of the search space below n that has already been
AP(t) is the path of assignments from the root of PST to explored. The upper bound ub(n) on v(n) is the current min-
the current tip node t. The inside context in(AP) of AP(t) imum cost solution subtree of the subproblem rooted at n.
contains all nodes that were fully evaluated and are children In Figure 2(b), the upper bound on v(B) is ub(B) =
of nodes on AP(t). The outside context out(AP) of AP(t), min(∞, v(hB, 0i)) = v(hB, 0i), and it represents the cur-
contains all nodes that were generated but not yet expanded rent best cost solution rooted at B. The lower bound fh(B)
and are children of the nodes on AP(t). The active partial on v(B) is calculated as seen in the previous example. If
subtree APT (n) rooted at a node n ∈ AP(t) contains the fh(B) ≥ ub(B), then searching below t = hE, 1i of the ac-
sub-path between n and t, and all OR children of the AND tive path is guaranteed not to reduce ub(B) and therefore, the
nodes on it.                                           subtree rooted at hE, 1i can be pruned.

  For illustration consider the partial solution subtree in Fig- PROPOSITION 2 (pruning rule) Given the active path
ure 2(b) based on the pseudo-tree in Figure 2(a). The active AP(t) of a current PST , for any node n on AP(t), if
path AP(t) has tip node t = hE, 1i, namely it is (A = 1, B = fh(n) ≥ ub(n) then pruning the subtree below t is safe.
1, E = 1). The shaded nodes at the left of AP(t) are in
in(AP) and their corresponding subtrees have already been A depth-ﬁrst AND/OR Branch-and-Bound (AOBB) algo-
explored. out(AP) includes the nodes {C, F }, which are also rithm that implements this pruning rule is described in Fig-
in the search frontier. The active partial subtree APT (B) is ure 3. A list called OPEN simulates the recursion stack. The
highlighted. It contains the nodes {B, hB, 1i, E, hE, 1i} on list PATH maintains the current assignment (i.e. the active
AP(t), the OR node D from in(AP)  and the OR node F    path). P arent(n) refers to the predecessor of n in PATH,
from out(AP).                                          which is also the parent in the AND/OR tree, succ denotes the
                                                       set of successors of a node in the AND/OR tree and ch X
DEFINITION 6 (dynamic lower bound) Given an active par-                                             T ( i)
tial tree APT (n), the dynamic heuristic evaluation function denotes the children of variable Xi in T . Procedure LB(n)
                                                       computes the static heuristic estimate h(n) of v(n).
of n, fh(n), is deﬁned recursively as follows: (i) if APT (n)
consists only of a single node n, and if n ∈ in(AP) then Step (3) is where the search goes forward and expands alter-
                                                       nating levels of OR and AND nodes. Upon the expansion of n,
fh(n) =  v(n) else fh(n) = h(n); (ii) if n = hXi, ai is
                                                       the algorithm successively updates the lower bound function
an AND node, having OR children m1, ..., mk then fh(n) =
                          k                            f (m) for every ancestor m of n along the active path, and
max(h(n), l(X , hX , ai) + P f  (m )); (iii) if n = X   h
             i   i        i=1 h   i               i    discontinues search below n if, for some m, f (m) ≥ ub(m).
is an OR node, having an AND  child m, then f (n) =                                          h
                                            h            Step (4) is where the value functions are propagated back-
max(h(n), f (m)).
           h                                           ward. This is triggered when a node has an empty set of suc-
  We can prove that fh(n) is a lower bound on the optimal cessors and it typically happens when the node’s descendants
solution cost to the subproblem rooted at n, namely fh(n) ≤ are all evaluated or when it is a dead-end. Clearly,
v(n), and also by deﬁnition fh(n) ≥ h(n), indicating that the
dynamic lower bound is superior to the static one.     THEOREM  2 AOBB is sound and complete for COP. ALGORITHM: AOBB(P, T )                                                   B(F): [f(F,A)], [f(F,C)]
 Input: A COP P = (X , D, F, +, min), pseudo-tree T , root X0.


 Output: Minimal cost solution to P.                                      B(D): [f(D,B)], [f(D,C)]
                                                                                                  
 (1) Initialize OPEN by adding OR node X0 to it; PATH ← φ;                                   
                                                                                             D    F
 (2) if (OPEN == φ)                                            A          B(C): [f(C,A)], [f(C,B) || (C), (C) ]
        return v(X0);


     Remove the ﬁrst node n in OPEN; Add n to PATH;            B          B(E): [f(E,B)], [f(E,A)]


                                                                                                
 (3) Try to prune the subtree below n:                                                 
                                                                                       E    C   E


     foreach m ∈ P AT H, where m is an ancestor of n        E     C       B(B): [f(B,A) || (B), (B), (B) ]


                                                                                                 
        if (fh(m) ≥ ub(m))                                                         
           v(n) ← ∞; (dead-end)                                D      F   B(A): [ || E(A), F(A), C(A), B(A) ]
           goto step (4);                                       (a)                   (b)
     Expand n generating all its successors as follows:
     succ(n) ← φ;
     if (n is OR node, denote n = Xi)
        v(n) ← ∞;                                             Figure 4: Schematic execution of MBE(2).
        foreach value a ∈ Di
           h(hXi, ai) ← LB(Xi , a);                    tree. In this paper we extend the idea to AND/OR search
           succ(n) ← succ(n) ∪ {hXi, ai};              spaces as well. For that, assume that a COP instance P with
     else (n is AND node, denote n = hXi, ai)
        A ← {cj | (Xi ∈ var(cj )) ∧ (var(cj ) ⊆ PATH )}; pseudo-tree T is being solved by AOBB search, where the
        v(n) ← 0; l(Xi, hXi, ai) ← cj ;                                                X
                           PA                          active path ends with some OR node j . Consider also the
        foreach variable Y ∈ chT (Xi)                  augmented bucket structure {B(X1), ..., B(Xn)} of P, con-
           h(Y ) ← LB(Y );                                                                              T
           succ(n) ← {Y };                             structed along the ordering resulted from a DFS traversal of .
     Add succ(n) on top of OPEN;                       For each possible value assignment Xj = xj , the static mini-
 (4) while succ(n) == φ                                bucket heuristic estimate h(xj ) of the minimal cost solution
        if (n is OR node)
           v(P arent(n)) ← v(P arent(n)) + v(n);       rooted at Xj can be computed as the sum of the original func-
                                                                                                     k
        else (n is AND node)                           tions in bucket B(Xj ) and the intermediate functions λ that
           v(n) ← v(n) + l(Xi , hXi, ai);
           v(P arent(n)) ← min(v(P arent(n)), v(n));   were generated in buckets B(Xk), where Xk is a descendant
        succ(P arent(n)) ← succ(P arent(n)) − {n};     of Xj in T (more details in [Kask and Dechter, 2001]).
        PATH ← PATH – {n};                               Dynamic Mini-Bucket Heuristics This idea can be pushed
        n ← Last(PATH);
 (5) goto step (2);                                    one step further. Rather than pre-compiling the mini-bucket
                                                       heuristic information, it is possible to generate it dynamically,
  Figure 3: AND/OR Branch-and-Bound search (AOBB).     during search. Therefore, the dynamic mini-bucket heuris-
                                                       tic computes a lower bound by the Mini-Bucket algorithm
                                                       MBE(i), at each node n in the search space, restricted to the
  While the time complexity of algorithm AOBB is bounded subproblem rooted at n and subject to the current partial in-
by O(n · exp(m)), the size of the AND/OR search space, the
                                                       stantiation. Speciﬁcally, h(xj ) is calculated as the sum of the
pruning rule is designed to yield a far better complexity.         k
                                                       original and λ functions residing in bucket B(Xj ), where
                                                        k
                                                       λ ’s are computed in buckets B(Xk) of Xj ’s descendants in
5  Speciﬁc Lower Bound Heuristics                      T , conditioned on the current assignment of the active path.
In this section we describe brieﬂy two general schemes for
                                                       Example 3 Figure 4(b) shows the augmented bucket struc-
generating static heuristic estimates h(n), based on the Mini-
                                                       ture generated by MBE(i=2) for the binary COP instance dis-
Bucket approximation. These schemes are parameterized by
                                                       played in Figure 4(a), along the ordering (A, B, E, C, D, F );
the Mini-Bucket i-bound, thus allowing for a controllable
                                                       square brackets denote the choice of partitioning. Assume that
trade-off between heuristic strength and its overhead. We also
                                                       during search, the active path of the current partial solution
mention a third scheme which is based on the notion of direc-
                                                       subtree is (A = a, B = b) and the tip node is the OR node
tional arc-consistency and is speciﬁc to the WCSP model.
                                                       C. The static mini-bucket heuristic estimate h(C = c) =
                                                                        F      F       D      D
5.1  The Mini-Bucket Heuristics                        f(c, a) + f(c, b) + λ (a) + λ (c) + λ (c) + λ (b). The dy-
                                                       namic mini-bucket heuristic estimate h(C = c), involves the
Mini-Bucket Elimination (MBE) [Dechter and Rish, 2003] is
                                                       same λ functions generated in buckets B(F ) and B(D), only
an approximation algorithm designed to avoid the high time that the λ’s are now computed dynamically, conditioned on
and space complexity of Bucket Elimination (BE) [Dechter,
                                                       the current partial assignment (A = a, B = b).
1999], by partitioning large buckets into smaller subsets,
called mini buckets, each containing at most i (called i-bound) 5.2 Directional Arc-Consistency Heuristics
distinct variables. The mini-buckets are then processed sepa-
                                                       We also adapted for the AND/OR search space two other suc-
rately. The algorithm outputs not only a bound on the optimal
                                                       cessful heuristics generators, reversible DAC counts (RDAC)
solution cost, but also the collection of augmented buckets,
                                                       [Meseguer et al., 1999] and maintaining full DAC (MFDAC)
which form the basis for the heuristics generated. The com-
                                                       [Larrosa and Schiex, 2003], which proved powerful for solv-
plexity is time and space O(exp(i)).
                                                       ing binary Weighted CSPs (details omitted for space reasons).
  Static Mini-Bucket Heuristics In the past, [Kask and
Dechter, 2001] showed that the intermediate functions gen-
erated by the Mini-Bucket algorithm MBE(i) can be used to 6 Experiments
compute a heuristic function, that underestimates the minimal In this section we evaluate empirically the performance of our
extension of the current assignment in a regular OR search new AND/OR Branch-and-Bound approach on two classes of   Network s-AOMB  s-AOMB  s-AOMB  s-AOMB  AORDAC            Network  (n,d,c,w*,h) BBMFDAC   AOMFDAC
   (n,d,c,t) s-BBMB s-BBMB s-BBMB  s-BBMB  BBRDAC                             time (sec) nodes time (sec) nodes
    [w*,h] d-AOMB  d-AOMB  d-AOMB  d-AOMB AOMFDAC          CELAR6-SUB0 (16,44,57,7,10) 2.78 1,871 1.98 435
  connectivity d-BBMB d-BBMB d-BBMB d-BBMB BBMFDAC         CELAR6-SUB1 (14,44,75,9,11) 2420.93 364,986 981.98 180,784
            i=2     i=4     i=6     i=8                    CELAR6-SUB2 (16,44,89,10,13) 8801.12 19,544,182 1138.87 175,377
          time nodes time nodes time nodes time nodes time nodes CELAR6-SUB3 (18,44,106,10,13) 38889.20 91,168,896 4028.59 846,986
  (20,5,100,0.7) - 2.4M 115.57 2.5M 15.49 408K 6.91 126K 21.70 441K CELAR6-SUB4 (22,44,131,11,16) 84478.40 6,955,039 47115.40 4,643,229
   [12,15] -  6.3M 179.34 7.6M 127.77 6.5M 45.76 2.2M 24.74 1.3M
   medium 74.43 90K 51.19 6.9K 104.08 751 169.30 101 9.99 20K
          124.45 523K 80.79 34K 140.10 3.3K 176.33 537 8.75 21.3K
  (30,5,90,0.7) - 2.8M 105.77 2.2M 9.84 262K 2.71 28K 78.50 1.3M Table 2: Results on CELAR6 subinstances.
   [11,16] -  6M  180.00 7.5M 68.90 3.3M 5.64 230K 78.24 4.2M
    low   72.94 82K 31.85 4.3K 63.07 548 94.95 111 10.72 22.2K
          104.15 348K 69.49 22K 90.70 1.7K 123.42 265 8.79 31.4K each class of algorithms, denoted here by s-BBMB, d-BBMB,
  (50,5,80,0.7) 67.53 1.4M 1.80 57K 0.12 2.6K 0.62 356 28.90 691K
    [8,16] -  5M  145.39 4.3M 24.47 804K 1.58 36K 155.58 3.9M BBRDAC and BBMFDAC, respectively.
    sparse 7.91 18.6K 1.17 430 0.95 87 2.31 60 1.48 8.5K
          63.50 295K 1.83 1K 0.94 112 2.34 69 1.49 14K Random Binary Networks
                                                       Our random binary WCSP class is characterized by a ﬁve
    Table 1: Results on random binary WCSP instances.  parameter model hn, d, c, t, wi [Larrosa and Schiex, 2003],
                                                       where n is the number of variables, d the domain size, c the
                                                       number of constraints, and t the constraint tightness deﬁned as
optimization problems: Weighted CSP (WCSP) and the Most
                                               2       the ratio of forbidden tuples. The costs of inconsistent tuples
Probable Explanation (MPE) problem in belief networks . are uniformly randomly distributed between 1 and w.
              [
  Weighted CSP Bistarelli et al., 1997; Larrosa and Schiex, Table 1 shows results for experiments with three problem
    ]
2003 extends the classic CSP formalism with so-called soft classes containing instances with medium, low and very low
constraints which assign positive integer costs to forbidden connectivity. We chose a maximum penalty cost w of 10 and
tuples (allowed tuples have cost 0). The goal is to ﬁnd a com- set the constraint tightness to 70% in order to obtain over-
plete assignment with minimum aggregated cost. The model constrained problems. For each problem class we generated
has numerous applications in domains such as resource allo- 20 instances and the time limit was set to 180 seconds. The
cation, combinatorial auctions or bioinformatics.      columns are indexed by the i-bound of the mini-bucket heuris-
  Belief Networks [Pearl, 1988] provide a formalism for rea- tics. When comparing AND/OR versus OR algorithms we
soning under conditions of uncertainty. A belief network rep- notice a considerable improvement in terms of CPU time and
resents a joint probability distribution over the variables of number of nodes visited, especially for problems with low and
interest. A function of the graphical model encodes condi- very low connectivity. This observation veriﬁes the theory be-
tional probability distribution of a variable given its parents in cause a relatively sparse problem is likely to produce a shal-
the graph (also viewed as a cost function were each tuple has low pseudo-tree, which in turn enhances the performance of
associated a real cost between 0 and 1). The MPE problem the AND/OR algorithms. In terms of the quality of the heuris-
is the task of ﬁnding a complete assignment with maximum tics, we also observe that the static mini-buckets with a rel-
probability that is consistent with the evidence. It appears in atively large i-bound represent the best choice. However, if
applications such as speech recognition or medical diagnosis. large i-bounds are not possible, dynamic mini-buckets with
  The pseudo-tree was created as suggested in [Bayardo and small i-bounds are preferred, especially for sparse problems.
Miranker, 1995], by a DFS traversal of the induced graph. The For medium and low connected problems, MFDAC proves to
latter was computed using the min-ﬁll heuristic. All competing be cost effective with respect to the other heuristics generators.
algorithms were restricted to a static variable ordering resulted
from a DFS traversal of the pseudo-tree. We report the average Radio Link Frequency Assignment Problem (RLFAP)
effort, as CPU time (in seconds) and number of visited nodes RLFAP is a communication problem where the goal is to as-
(AND nodes only for the AND/OR algorithms), required for sign frequencies to a set of radio links in such a way that all
proving optimality of the solution. For all test instances we links may operate together without noticeable interferences
record the number of variables (n), domain size (d), number [Cabon et al., 1999]. It can be naturally casted as a binary
of functions (c), induced width (w*) and height of the pseudo- WCSP where each forbidden tuple has an associated penalty
tree (h). A ”-” indicates that a time limit was exceeded by the cost. Table 2 compares algorithms BBMFDAC and AOMF-
respective algorithm. The best results are highlighted. DAC for solving 5 publicly available RLFAP subinstances
                                                       called CELAR6-SUBi (i =  0, ..., 4). We can see that the
6.1  Weighted CSP                                      AND/OR approach is beneﬁcial for this domain as well. In
For this domain we experimented with random binary WCSP CELAR6-SUB4, the hardest instance, AOMFDAC causes a
problems as well as real-world benchmarks. We consider CPU speed up of 1.8, whereas in CELAR6-SUB3 the speed
four classes of AND/OR Branch-and-Bound (AOBB) algo-   up is as much as 9.6. We also compared AOMFDAC against
rithms, each using a speciﬁc heuristics generator, as follows. BTD, a recent algorithm introduced in [Jegou and Terrioux,
Classes s-AOMB/d-AOMB    are guided by static/dynamic  2004]. BTD solves the MAX-CSP version of CELAR6-SUB4
mini-bucket heuristics, AORDAC uses RDAC based heuris- (i.e. 0/1 penalty costs) in about 123,000 sec., whereas AOMF-
tics, and AOMFDAC maintains full DAC. For comparison,  DAC proves optimality in only 2,574 sec. The performance of
we include results obtained with the classic OR version of the mini-bucket based algorithms was quite poor on this do-
                                                       main, due to the very low quality of the heuristic estimates
  2All our experiments were done on a 2.4GHz Pentium IV with resulted from approximating subproblems with very large do-
1GB of RAM, running Windows XP                         mains (up to 44 values).