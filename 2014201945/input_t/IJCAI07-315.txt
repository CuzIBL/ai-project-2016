  Fast (Incremental) Algorithms for Useful Classes of Simple Temporal Problems
                                          with Preferences

                                          T. K. Satish Kumar
                                       Computer Science Division
                                   University of California, Berkeley
                                        tksk@eecs.berkeley.edu

                    Abstract                          Preferences (STPPs) [Khatib et al, 2001] was introduced to
    In this paper, we will provide a fast polynomial- deal with situations where the factors guiding the relative ex-
    time algorithm for solving simple temporal prob-  ecution times of certain pairs of events are better modeled
    lems (STPs) with piecewise linear convex prefer-  (and abstracted) using preference functions rather than hard
                                                      constraints. Roughly, an STPP is characterized by a graph
    ence functions and a utilitarian objective function. G = X , E   X =  {X ,X  ...X  }
    Our algorithm is motivated by the study of the              ,where        0   1     N  is a set of events
                                                      (X0 is the “beginning of the world” node and is set to 0 by
    linear programming (LP)-dual of a given mincost                  e =  X ,X    E
    circulation problem (MCCP). We will also show     convention), and      i   j in  , is either a hard sim-
                                                      ple temporal constraint annotated with [LB(e),UB(e)],ora
    how this duality relationship between simple tem-                                              F (t):
    poral problems with preferences (STPPs) and MC-   soft constraint annotated with a preference function e
                                                      R →  R indicating the preference associated with scheduling
    CPs leads to fast incremental algorithms for solving X      t             X
    the former. Our algorithms bear important implica-  j exactly seconds after i. Given such local temporal
    tions in planning, scheduling and execution moni- preference functions, the objective function can be deﬁned in
    toring scenarios where (partial) plans are subject to a number of ways. One simple way is to maximize the mini-
    repeated changes, and the most preferred solutions mum of all the local temporal preferences; this is referred to as
    to the underlying STPPs have to be computed and   Weakest Link Optimization (WLO). WLO in STPPs has been
    updated fast (incrementally).                     shown to be tractable when all the preference functions are
                                                      semi-convex2 [Khatib et al, 2001]. The WLO model, how-
                                                      ever, corresponds to egalitarianism in utility theory,andit
1  Introduction                                       is easy to illustrate its myopic focus. A much better opti-
Many applications in AI depend crucially on our ability to ef- mization criterion is to maximize the sum of the preferences
ﬁciently deal with combinatorial problems that involve both (corresponding to utilitarianism in utility theory).3
a satisfaction component and an optimization component— A  polynomial-time algorithm for solving STPPs with
hence requiring us to reason about both hard and soft con- piecewise linear convex preference functions and a utilitarian
straints. (The hard and soft constraints capture the satisfac- objective function is provided in [Morris et al, 2004].This
tion and optimization components of a problem respectively.) algorithm, however, employs a general LP solver, and there-
We are often required to express natural factors like fuzzi- fore does not tightly characterize the complexity of solving
ness, probabilities, preferences and/or costs, and are subse- such problems. Moreover, the algorithm is not incremen-
quently interested in ﬁnding an optimal solution with respect tal. We note that there is great value in designing simple and
to one or more criteria. Important problems in planning and fast polynomial-time algorithms for solving metric temporal
scheduling, for example, involve metric temporal constraints reasoning problems. This is evident, for example, even in
and various kinds of associated preferences.          the simple case of STPs. Although STPs are characterized
  Simple Temporal Problems (STPs) [Dechter et al, 1991] by a set of simple linear (difference) constraints amenable
constitute a well studied formalism used for reasoning with to a polynomial-time algorithm using a general LP solver,
metric time. An STP is characterized by a graph G = X , E, it is well understood that it is much better to solve a given
where X =  {X0,X1  ...XN } is a set of events (X0 is the STP using shortest path computations (say, by employing the
“beginning of the world” node and is set to 0 by conven- Bellman-Ford algorithm). This is because the latter approach
tion), and e = Xi,Xj in E, annotated with the bounds would lead to a simple and fast polynomial-time algorithm—
[LB(e),UB(e)],isasimple temporal constraint between   tightly characterizing the complexity of solving STPs. In the
Xi and Xj indicating that Xj must be scheduled between
                                                                   ]        [          ]
LB(e) and UB(e) seconds after Xi is scheduled (LB(e) ≤ Koubarakis, 1998 or RDTPs Kumar, 2005 .
                                                         2 ( )
UB(e)).1 The formalism of Simple Temporal Problems with  g y  is semi-convex iff for any horizontal line L,thesetofall
                                                      y, such that g(y) is not below L, constitutes a single interval.
  1An STP can be solved in polynomial time [Dechter et al, 1991]; 3In [Kumar, 2004], a polynomial-time algorithm for certain other
but in general, STPs are not as expressive as DTPs [Stergiou and useful classes of STPPs is provided.

                                                IJCAI-07
                                                  1954                                     (1, -5)            In this section, we will brieﬂy review MCCPs and some
      FE(7, 5)                   FE                   of the well-known results/algorithms associated with solv-
                                     (6, 5)    (1, -2)
 (3, 1)           (3, 2)     (3, 1)                   ing them. An MCCP is characterized by a directed graph
                                          (2, 2)
        (1, -3)                     (8, 0)            G  = V,E,whereV   = {v1,v2 ...vn} is the set of nodes,
                            A                   D
A                    D                                and E is the set of edges.5 An edge e = vi,vj∈E is anno-
           (8, 0)                 (1,  3) (1, -1)                                                U(e)
 (2, -5)          (2, -1)    (2, -5)           (1, 1) tated with two numbers: (a) a positive real number rep-
                                     (2, -4)          resenting the capacity of the edge (maximum amount of ﬂow
      B   (3, -4) C              B         C          that can be pushed through the edge), and (b) a real number
                                      (1, 4)          (not necessarily positive) C(e) representing the cost of push-
                                                      ing a unit amount of ﬂow through the edge. The goal is to
Figure 1: Illustrates how ﬂow is augmented along negative cost cy- come up with a circulation (an amount of ﬂow on each edge)
cles in the residual graph (for solving a given MCCP). Every edge is such that: (a) the conservation constraints hold at every node
annotated with two numbers: the ﬁrst one being the capacity, and (i.e. the total incoming ﬂow is equal to the total outgoing ﬂow
the second one being the cost. (a) (left-hand side) shows a sce- at every node), (b) the capacity constraints hold true for every
nario where a negative cost cycle BCDEF is chosen to augment ﬂow
along. If a unit amount of ﬂow is pushed along this cycle, then it edge (i.e. the amount of ﬂow pushed through any edge is less
leads to a situation as shown in (b) (right-hand side) with the appro- than or equal to the capacity of that edge), and (c) the overall
priate residual edges. We note that there exists a negative cost cycle cost of the ﬂow is minimized.
even in (b)—namely FAB—therefore indicating that further ﬂow has Algorithms for solving MCCPs work by augmenting ﬂow
to be augmented to achieve optimality.                along negative cost cycles in the residual graph. Given a can-
                                                      didate circulation f, its residual graph Gf is deﬁned by re-
                                                      placing each edge u, v∈E by two edges: (a) u, v of
same spirit, it is imperative for us to develop simple and fast
                                                      capacity U(u, v) − f(u, v) and cost C(u, v),and(b)
polynomial-time algorithms for solving STPPs with piece-
                                                      v, u of capacity f(u, v) and cost −C(u, v). A circula-
wise linear convex preference functions and a utilitarian ob- tion f ∗ can be shown to be optimal if and only if there are
jective function—especially because these classes of STPPs
                                                      no negative cost cycles in the residual graph Gf ∗ . Figure 1
are fairly general and very useful in practice (see [Morris et
                                                      shows an example of ﬂow augmentations in an MCCP.
al, 2004] for motivating arguments). Further, it is also beneﬁ-
                                                        Although repeatedly pushing ﬂow along any negative cost
cial to develop incremental algorithms that can readily update
                                                      cycle (in the residual graph) leads us eventually to the optimal
the solutions to (these kinds of) STPPs when (small) changes
                                                      circulation, better running times are achieved by pushing ﬂow
are made to them (as in, say, a reﬁnement planner).
                                                      along the min-mean cost cycles [Goldberg and Tarjan, 1989].
  In this paper, we will ﬁrst provide a fast polynomial-time
                                                      The best known algorithms for solving MCCPs work in time
algorithm for solving STPPs of the above mentioned kinds.
                                                      O(m(log  n)(m + n(log n))) [Orlin, 1988].(Here,n is the
Our algorithm is motivated by the study of the LP-dual of
                                                      number of nodes, and m is the number of edges.) We note,
agivenmincost circulation problem (MCCP). We will then
                                                      however, that when all the capacities are integers, there are
show how this duality relationship between STPPs and MC-
                                                      two things that characterize the number of (ﬂow-augmenting)
CPs leads to fast incremental algorithms for solving the for-
                                                      iterations required to solve an MCCP: (a) the strongly poly-
mer. Our algorithms bear important implications in planning,
                                                      nomial running time of O(m(log n)(m + n(log n))),and(b)
scheduling and execution monitoring scenarios where (par-
                                                      the amount of the ﬂow itself; so, if the amount of the ﬂow
tial) plans are subject to repeated changes, and the most pre-
                                                      (not the cost of the ﬂow) is itself small, we need only a few
ferred solutions to the underlying STPPs have to be computed
                                                      iterations. As we will allude to later, this can be exploited in
and updated fast (incrementally).
                                                      designing incremental algorithms for solving STPPs.
                                                        The LP formulation of an MCCP is as follows: (f(e) for
2  Brief Overview of MCCPs                            all e ∈ E are the variables)
                                                         ∀e ∈ E  0 ≤ f(e) ≤ U(e)
A class of linear programs that can be solved better (com- (1) :                   
                                                         ∀v ∈ V           f(v, w) −        f(u, v)=0
pared to employing a generic LP solver) using a specialized (2) :  v,w∈E           u,v∈E
set of techniques is the class of ﬂow problems; these include (3) Maximize − e∈E C(e)f(e)
variants like the well studied maxﬂow problems, mincost cir- We note that the capacity constraints and the conservation
culation problems, generalized ﬂow problems, etc. Many in- constraints are reﬂected in (1) and (2) respectively. The dual
sights about a given LP problem can be drawn from study- of the above LP is as follows: (l(e) for all e ∈ E,andp(v)
ing its dual.Givenaprimal LP problem, one can construct for all v ∈ V are the variables)
its dual LP problem using a prescribed set of rules [Sultan, (1) ∀e ∈ E: l(e) ≥ 0
1993]. A number of interesting theorems guide the relation- (2) ∀u, v∈E: l(u, v)+p(u) − p(v) ≥−C(u, v)
ship between a given primal LP problem and its dual; these (3) Minimize e∈E l(e)U(e)
include the weak duality theorem,thestrong duality theorem
and complementary slackness [Sultan, 1993].4             5Unlike in a maxﬂow problem, there are no explicitly nominated
                                                      source and/or terminal nodes. However, MCCPs are more general
  4A well-known technique for designing approximation algo- than maxﬂow problems; a given maxﬂow problem can be modeled as
rithms, for example, is the so-called primal-dual method; LP-duality an instance of the MCCP by adding a back-edge from the terminal
is also extensively used in the study of ﬂows and cuts. to the source of sufﬁciently large capacity and negative cost.

                                                IJCAI-07
                                                  1955       Cost

                                                        +∞                 +∞
                                                           Cost

                                                                                      Preference
                                                         M(<u,v>)
                                                                    sl                            M(<u,v>)
                                     cost = C(<u,v>)                op
                                                                     e                         s
                                                                      =                       =
                                   X capacity = U(<u,v>)               -                     e
           slope = U(<u,v>)         u          Xv                      s                    op
                        l(<u,v>)U(<u,v>)                                                   sl

                  l(<u,v>)                                        a      b  Xv -Xu       a       b Xv -Xu

        0   C(<u,v>)        Xv -Xu

                                                                 (s, -b) 

Figure 2: (a) (left-hand side) illustrates a primitive kind of cost (∞, b) 
                                                          X               X
function for the time difference between two events Xv and Xu.(b) u        v   -∞                  -∞
(right-hand side) shows the corresponding cost and capacity annota-
                                                                 (∞, -a) 
tions on the edge Xu,Xv  in the dual formulation of the problem.

  We note that each capacity constraint in the primal corre- Figure 3: (b) (right-hand side) shows a gadget where a ≤ Xv −
sponds to a variable l(e) in the dual; further, the l(e)sare Xu ≤ b, and the preference function in the feasible region has a
non-negative because the capacity constraints are inequali- positive slope of s between Xv − Xu = a and Xv − Xu = b.(a)
ties. Similarly, each conservation constraint in the primal cor- (upper left-hand side) shows the equivalent cost function (ignoring
                                                                         (   )
responds to a variable p(v) in the dual; further, the p(v)sare additive constants like M u, v ). (c) (lower left-hand side) shows
unrestricted because the conservation constraints are equali- the required MCCP representation (in the dual formulation).
ties. Each variable in the primal corresponds to an inequal-
ity in the dual. The left-hand sides of these inequalities fol- straints by.” In principle, therefore, STPPs with linear cost
low from tracing which variables in the primal participate in functions (as shown in Figure 2) ﬁt the LP-dual model of MC-
which constraints (and what the respective coefﬁcients are). CPs. Here (see Figure 2), every edge Xu,Xv is annotated
The right-hand sides follow from the primal’s objective func- with a cost function (instead of a preference function) that re-
tion. Finally, the coefﬁcients of the variables in the dual’s mains 0 as far as the difference Xv − Xu is ≤ C(u, v),but
objective function come from the right-hand sides of the cor- begins to increase linearly with positive slope U(u, v) be-
responding constraints in the primal.                 yond this bound; and the objective is to minimize the overall
  p(u) is referred to as the potential of the node u,andp(u)+ cost (summed over all edges). Figure 2 also shows that such
C(u, v) − p(v) is referred to as the reduced cost Cp(u, v) a cost function translates to the edge Xu,Xv with capacity
of the edge u, v. It is easy to see that the sum of the reduced U(u, v) and cost C(u, v) in the dual formulation of the
costs along a cycle is equal to the sum of the costs (along the
                                               ∗      problem as an MCCP.
same cycle). Further, it can be shown that a circulation f is We note/recollect two things before proceeding further.
optimal if and only if there exists a potential function p such First, a hard simple temporal constraint of the form p(v) −
that for all e ∈ Gf ∗ : Cp(e) ≥ 0 (see [Ahuja et al, 1993]). p(u) ≤ C(u, v) can be handled by modeling it as p(v) −
                                                      p(u) ≤ C(u, v)+l(u, v) with U(u, v) being practically
3  LP-Duality Perspectives on STPPs                   set to ∞. Second, although the ﬂow-based techniques allow
                                                      us to efﬁciently solve only the dual LP problem (MCCP), the
Examining the dual of an MCCP more closely, we notice that strong duality theorem yields the value of the optimal solu-
the only constraints involving the potentials of the nodes are tion for the (original) primal LP problem (STPP). In the next
difference inequalities of the form: l(u, v)+p(u) − p(v) ≥
−C(u, v)   p(v) − p(u) ≤ C(u, v)+l(u, v)        section (where we will deal with STPPs having piecewise
          i.e.                              .These    linear convex preference functions and a utilitarian objective
resemble the inequalities arising in STPs (with a few bene- function), we will show that the value of the optimal solution
ﬁcial differences). First, we notice that if l(u, v) is equal
  0      u, v                                       alone can be used to iteratively construct the required optimal
to  for all   , then these inequalities directly correspond schedule in its entirety.
to simple temporal constraints.6 In the more general case
    l(u, v) ≥ 0                 l(u, v)
that            , we can reinterpret     as indicat-  3.1  Designing Gadgets
ing the “amount by which the simple temporal constraint
p(v) − p(u) ≤ C(u, v) is violated.” Further, the dual of an We will now introduce combinatorial structures called gad-
MCCP allows us to minimize a positive linear combination gets that will be used later in the paper to handle STPPs with
of the l(u, v)s (with the weight corresponding to l(u, v) piecewise linear convex preference functions. These gadgets
                                                                                                       7
being the positive capacity U(u, v)). This can be reinter- are in turn built using the basic building block of Figure 2.
preted as minimizing “a positive linear combination of how Consider designing the gadget where a ≤ Xv − Xu ≤ b,
much we violate each of the speciﬁed simple temporal con- and the preference function in the feasible region is as in-
                                                      dicated in Figure 3(b) (with a positive slope of s between
  6Note that C(u, v) is the cost associated with the edge u, v,
and is allowed to be negative—maintaining the complete generality 7The introduction of such gadgets is partly inspired by the tech-
of a difference inequality arising in STPs.           niques used in [Morris et al, 2004].

                                                IJCAI-07
                                                  1956 +∞                 +∞
    Cost

                                Preference
                                                          r1     r2     r3   r4          r5       r6

                s                                                                                   Xj -Xi
               =                                             L
               e                                              1         L3                   L5
              op                                                   L               L
             sl                                                    2                4
                                    a     b
                                             X -X
           a      b  Xv -Xu                   v u       [r ,r ] [0,L ] [0,L ] [0,L ] [0,L ]  [0,L ]
                                     sl                  1 1  1     2     3         4          5
                                     op
                                       e =
                                        -
                                         s              Xi  Y1 Y2     Y3   Y4              Y5   Xj
           (s, a) 

           (∞, b) 
                          ∞                  ∞
    Xu              Xv   -                   -

           (∞, -a) 
                                                                                            0  L5

                                                                                                   Xj –Y5
                                                               Preference
Figure 4: Shows the combinatorial structures relevant to preference                        Preference
                                                               0      L   Y –Y
functions with negative slopes. The three diagrams shown above are    2    3  2
in direct analogy with those of Figure 3.
                                                      Figure 5: The top diagram shows an example piecewise linear con-
                                                      vex preference function with the appropriate landmarks and lengths
Xv − Xu  = a and Xv − Xu  = b). Ignoring additive con- deﬁned by it. The second diagram shows the intermediate variables
stants, such a preference function is equivalent to a cost func- we would introduce between Xj and Xi. It also shows the hard
tion as shown in Figure 3(a). This cost function is positive simple temporal constraints we would add between consecutive vari-
everywhere, and can be modeled using two hard constraints ables created for this edge. The third diagram shows the slopes of
(namely, a ≤ Xv − Xu and Xv − Xu ≤ b), and one soft con- the line segments in the corresponding intervals (simply as deﬁned
                                                      in the original preference function). The bottom diagram shows two
straint (namely, Xv − Xu ≥ b with a cost of violation by 1
unit being equal to s). From Figure 2, therefore, the required examples of the kinds of preference functions we would like to con-
                                                      struct corresponding to each interval. In each case, the preference
MCCP representation (in the dual formulation of the prob- value is 0 at the origin, and either increases or decreases linearly up
lem), is as shown in Figure 3(c). Using similar arguments (see to a certain value; everywhere else, the preference value is assumed
Figure 4), we can design a gadget where a ≤ Xv − Xu ≤ b, to be −∞ (directly corresponding to the gadgets in Figures 3 and 4).
and the preference function in the feasible region is as indi-
cated in Figure 4(b) (with a negative slope of −s between
Xv − Xu =  a and Xv − Xu = b).                        elaborate example of the dual formulation of an STPP (with
                                                      piecewise linear convex preference functions) as an MCCP.
4  STPPs with Piecewise Linear Convex                   We will now argue that an optimal solution for the new
                                                      problem (with the additional variables) yields an optimal so-
   Preference Functions                               lution for the original problem. The key insight stems from
In this section, we will build the ﬁnal algorithm for solving the fact that in a piecewise linear convex preference func-
STPPs with piecewise linear convex preference functions8 tion, the slopes of the line segments (deﬁned by the func-
and a utilitarian objective function. A key idea in this al- tion) are monotonically decreasing (from left to right). Con-
gorithm involves the transformation of such a given STPP to sider any edge e = Xi,Xj with the associated prefer-
one that has preference functions limited to the types in Fig- ence function Fe(t). Let the landmarks deﬁned by Fe(t) be
                                                       e  e    e
ures 3 and 4. The transformation works as follows. For every r1,r2 ...rk +1, and let the corresponding intermediate vari-
                                                               ee  e     e
                                      Fe(t)                   Y ,Y  ...Y
piecewise linear convex preference function ,andcor-  ables be 1  2     ke (see Figure 5 for an example). The
responding to every (intermediate) landmark of this function, slopes of the lines segments (deﬁned by Fe(t)) in the intervals
we add a new variable. The difference between such consec- [re,re], [re,re] ...[re ,re ]
                                                        1 2   2  3     ke  ke+1 are monotonically decreasing.
utive variables is constrained to be between 0 and the length Because of this property, and from the standard arguments as-
                        9
of the corresponding interval, and the associated preference sociated with the optimality of the greedy algorithm for solv-
function is designed to be in direct correspondence with the ing the “fractional knapsack problem,” it follows that the op-
slope of Fe(t) within this interval. Figure 5 illustrates this                            Y e,Ye ...Ye
                                                      timal setting of the intermediate variables 1 2 ke for
process for a single preference function. The MCCP repre-                    10 ∗e     e       e   e
                                                      any values of Xi and Xj is: Y2 ← Y1 +min(r2 −r1,Xj −
sentation of the new problem can be built by simulating pref- Y e); Y ∗e ← Y ∗e + (re − re,X − Y ∗e); ...Y∗e ←
                                                       1    3       2    min  3    2  j    2       ke
erence functions with positive and negative slopes using the ∗e    e     e           ∗e
                                                      Y     + min(r   − r    ,Xj − Y    ) (see Figure 7 for
gadgets in Figures 3 and 4 respectively. Figure 6 presents an ke−1 ke    ke−1        ke−1
                                                      an example). For any values of Xi and Xj, therefore, the best
  8For simplicity, we will assume that every such preference func- way to set the intermediate variables is to exhaust the slack in
tion is deﬁned to be within an interval; for example, Figure 5 is the difference between one consecutive pair of (intermediate)
taken to not only specify a preference function for Xj −Xi,butalso variables before going to the next pair (left to right). Since
implicitly constrain Xj − Xi to be within [r1,r6].
  9                                                     10        e
   Note that we use hard constraints for this purpose.   Note that Y1 is ﬁxed to Xi + LB(Xi,Xj ); see Figure 5.

                                                IJCAI-07
                                                  1957    0.5
        -3
  2             X1
          X –X
           1 0    [2, 6]                                                 3.75
 1 245                                                                               2.9
                                                                   2            2.75      1.75
          X0         X3
               [-1, 1] [-1,                                   2                                    16.75
                                (0.5, -2)
                  [1, 5]                (3, 0)
   1-1                                                                             10.75
                                                        X -X
                                         X1             j  i   1.5         2                   2.25
          X –X             (2, -1)
           2 0  X                                                   2.5             6.5
  264           2
                                               ∞
                                              ( , 6)       [2,2] [0,1.5] [0,2.5] [0,2] [0,6.5] [0,2.25]
                      (∞, 1) (∞, -1)
                                           (∞, -2)       Xi   Y1  Y2    Y3    Y4             Y5   Xj
    [0, 2] [0, 1] X
           1                          (∞, 1)
                          X                      X3
                          0                (∞, -1)          2  1.5  2.5    2    2.75
 [0, 1]      [2, 6]
                        ∞
                       (∞, 2) (∞, -2)                    X    Y   Y     Y     Y
                                               ∞          i    1   2     3    4    Y5 = Xj
 [1, 1]                                       ( , 5)

  X    [-1, 1]    X
  0               3                      X                  21.5    2     21.5   1.75
 [2, 2]                                   2
                             (1, -2) (1, 0)
             [1, 5]                                      Xi   Y1  Y2   Y3   Y4  Y5  Xj
  [0, 2]
      [0, 2]
          X2
                                                      Figure 7: Illustrates that for any (values of) Xi and Xj , the opti-
Figure 6: The top-left diagram shows an example STPP with hard mal way to set the intermediate variables is to exhaust the slack in
                                                      one consecutive pair of (intermediate) variables before going to the
simple temporal constraints and two piecewise linear convex pref-            −    =1075
erence functions. The bottom-left diagram shows the intermediate next (left to right). When Xj Xi . , for example, the ﬁrst
variables introduced for each preference function and the hard sim- way of setting the variables (third diagram from top) exhausts all
                                                      the leftmost slacks, creating a total value of (1.5)((2 − 0)/1.5) +
ple temporal constraints between them (dark nodes indicate newly (2 5)((3 75 − 2) 2 5) + (2)((3 75 − 3 75) 2) + (2 75)((1 75 −
added variables). The right-hand side diagram shows the MCCP . .   / .         .     .  /      .    .
                                                      3.75)/6.5) = 2.9. This is indeed equal to the true value of the pref-
representation of the problem. The dark lines indicate edges that en-  −   =1075
code different pieces of the corresponding preference functions. For erence function at Xj Xi . . We note that any other way of
clarity, some hard simple temporal constraints that ﬂank the dark setting the intermediate variables leads to a non-optimal value. For
edges are not shown encoded explicitly.               example, in the second way (bottom diagram), the total preference
                                                      is equal to (1.5)((2− 0)/1.5) + (2)((3.75 − 2)/2.5) + (2)((3.75−
                                                      3.75)/2) + (1.5)((1.75 − 3.75)/6.5) + (1.75)((0− 1.75)/2.25) =
the optimal setting of the intermediate variables is completely 1.58 which is less than the actual preference value at this point.
determined by the values assigned to the end-point variables
Xi and Xj, and since the intermediate variables do not par-
                                                      by solving the ﬁnal STP using shortest path computations.
ticipate in any constraint of the original problem, an optimal
                                                        The crucial step in the above process, however, is to replace
solution to the original STPP can be obtained simply by tak-                            F  (t)
ing the projection of an optimal solution to the new STPP. an arbitrarily chosen preference function eh by an appro-
                                                      priate simple temporal constraint such that an optimal solu-
  Figure 8 presents the algorithm for reporting the value of                       ≥ v∗
an optimal solution to a given STPP (with piecewise linear tion to the new problem has a value . This can essentially
convex preference functions and a utilitarian objective func- be done by a standard backtrack-free search algorithm that
    11                                                utilizes the procedure of Figure 8 in every iteration. Suppose
tion). We will now argue that in fact the value of the optimal F (t)               X ,X  
                                                       eh   is associated with the edge i j . It is easy to see
solution alone is enough to efﬁciently construct the required          F   (X  − X ) ≥ v
optimal schedule. Suppose we have K preference functions that the requirement eh j i    is in fact equivalent
                                                      to a simple temporal constraint between Xi and Xj (because
in the STPP; let us call them Fe1 (t),Fe2 (t) ...FeK (t).Let
 ∗                                      ∗    ∗                                      F  (t)
s be an optimal schedule, and let the value of s be v .The of semi-convexity). Now, suppose eh is always a non-
                                                      negative integer in the range [0,M].12 We can consider the
idea is to replace the preference functions in the STPP (one                            F  (X  − X  ) ≥ d
                                                      simple temporal constraint equivalent to eh j i   ,
by one) by additional simple temporal constraints that would             d
serve to rule out all the non-optimal solutions. In each itera- and examine whether plus the value of the optimal solu-
                                                      tion to the smaller problem (that incorporates the new simple
tion, we will replace an arbitrarily chosen preference function                F  (t)
F  (t)                                                temporal constraint instead of eh ) is equal to the value of
 eh   by a simple temporal constraint such that any optimal
solution to the new problem (with one less preference func- the optimal solution to the original problem. If it is, then the
               ≥  v∗                                  newly added simple temporal constraint is the one that can
tion) has a value   . In the remaining smaller problem       F  (t)
                                                      replace eh  . It is easy to see that ranging over all possi-
(with respect to the number of preference functions), we will    d          0   M
follow the same procedure to replace another arbitrarily cho- ble values of (viz. from to ), we will always be able to
                                                      ﬁnd an appropriate cutoff value—the corresponding simple
sen preference function by a simple temporal constraint, and                                       F  (t)
so forth. After K iterations, therefore, we will be left with an temporal constraint of which can replace the function eh .
STP—any solution to which has a value ≥ v∗. That is, all the The running time complexity of Figure 8 is dominated by
non-optimal solutions would have been ruled out, and an op- that of solving the intermediate MCCP (step 3 in Figure 8).
timal solution to the original problem can be obtained simply
                                                        12
                                                         If Feh (t) is not always integral, then we can scale all the num-
  11We assume that the additive constants that arise in the transfor- bers appropriately so that M will be indicative of the precision of
mations involved (like in Figure 3) are appropriately factored in. the numbers appearing in the range of the function.

                                                IJCAI-07
                                                  1958