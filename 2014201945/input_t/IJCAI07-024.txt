                Grounding for Model Expansion in              k-Guarded Formulas
                                    with Inductive Deﬁnitions

                Murray Patterson, Yongmei Liu, Eugenia       Ternovska, Arvind Gupta
                                     School of Computing Science
                                    Simon Fraser University, Canada
                                  {murrayp,y  liu,ter,arvind}@cs.sfu.ca

                    Abstract                          nents of general purpose programming languages, and are
                                                      thus not purely declarative. ASP emerged from logic pro-
    Mitchell and Ternovska [2005] proposed a con-     gramming, and is based on the stable model semantics [Gel-
    straint programming framework based on classical  fond and Lifschitz, 1991]. The main advantage of ASP is that
    logic extended with inductive deﬁnitions. They for- its language allows an implicit use of quantiﬁers and has a
    mulate a search problem as the problem of model   built-in recursion mechanism. However, some concepts that
    expansion (MX), which is the problem of expand-   are natural in classical logic are difﬁcult to express in ASP.
    ing a given structure with new relations so that it Mitchell and Ternovska [2005] proposed a declarative con-
    satisﬁes a given formula. Their long-term goal is straint programming framework based on classical logic ex-
    to produce practical tools to solve combinatorial tended with inductive deﬁnitions. They cast search problems
    search problems, especially those in NP.Inthis    as the classical problem of model expansion (MX), which is
    framework, a problem is encoded in a logic, an    the problem of expanding a given structure with new relations
    instance of the problem is represented by a ﬁnite so that it satisﬁes a given formula. Their long-term goal is to
    structure, and a solver generates solutions to the develop tools for solving hard combinatorial search problems,
    problem. This approach relies on propositionali-  especially those in NP. In this framework, a problem is en-
    sation of high-level speciﬁcations, and on the efﬁ- coded in a logic such as ﬁrst-order logic (FO) or an extension
    ciency of modern SAT solvers. Here, we propose    of FO, a problem instance is represented by a ﬁnite struc-
    an efﬁcient algorithm which combines grounding    ture, and a solver generates extensions of initially unspeciﬁed
    with partial evaluation. Since the MX framework   predicates, which represent solutions to the problem.
    is based on classical logic, we are able to take ad-
                                                        The MX framework combines many strengths of these
    vantage of known results for the so-called guarded
                                                      three mentioned approaches, as well as addresses their limi-
    fragments. In the case of k-guarded formulas with
                                                      tations. Its features include: a high-level modelling language
    inductive deﬁnitions under a natural restriction, the
                                                      that supports quantiﬁcation and recursion, and a clear sep-
    algorithm performs much better than naive ground-
                                                      aration of the instance (a ﬁnite structure) from the problem
    ing by relying on connections between k-guarded
                                                      description (a formula). Most importantly, the framework
    formulas and tree decompositions.
                                                      is based on classical logic, making it possible to exploit the
                                                      many existing results from ﬁnite model theory and descrip-
1  Introduction                                       tive complexity [Kolokolova et al., 2006]. In addition, ax-
NP search and decision problems occur widely in AI; mod- iomatizations are easier to understand, and we need not rely
elling these problems as SAT, CSP and ASP and then us- on stable model semantics to imitate the ‘classical’ part of the
ing a corresponding solver are perhaps the most successful program, a common practice in ASP.
declarative approaches (in practice) to solving these prob- A key component in building practical solvers for the MX
lems. While each approach has made valuable contributions, framework is propositionalisation (or grounding) of high-
they also have limitations. Modelling in propositional logic level speciﬁcations and the use of efﬁcient SAT solvers. The
and then using a SAT solver is the oldest and the most de- idea is to ﬁrst obtain a ground formula that contains only ini-
veloped of these approaches; the simplicity of the semantics tially unspeciﬁed predicates and is satisﬁable iff the original
has been the key driver in its success. However, propositional MX problem has a solution, and then call a propositional sat-
logic provides a poor modelling language in which there are isﬁability solver. Two prototype solvers for propositional for-
no quantiﬁers, nor recursion. Moreover, in modelling a prob- mulas with inductive deﬁnitions have been developed [Pelov
lem as SAT, there is no clear separation of instance and prob- and Ternovska, 2005; Mari¨en et al., 2005].
lem description. CSP provides somewhat better modelling The goal of this paper is to develop an efﬁcient ground-
capabilities, and CSP solvers rely on a number of solution ing algorithm for the MX framework. Since the frame-
techniques such as no-good learning and backjumping. CSP work is based on classical logic, we take advantage of re-
solvers, however, have found success primarily as compo- sults known for the guarded fragments [Andr´eka et al., 1998;

                                                IJCAI-07
                                                   161Gottlob et al., 2001]. We present a polytime algorithm for Deﬁnition 2.4 (extended X-relation) Let A =(A; σA),
grounding k-guarded FO sentences with inductive deﬁnitions and X be the set of free variables of formula φ.Anextended
provided that all predicates in the guards are initially speciﬁed X-relation R over A is a set of pairs (γ,ψ) s.t. (1) ψ is a
                                                                            ˜
(a fragment which we call IGFk). As explained later, this re- ground formula over ε ∪ A and γ : X → A; (2) for every γ,
striction is necessary for polytime grounding, and IGFk con- there is at most one ψ s.t. (γ,ψ) ∈R.
tains (in terms of expressive power) sentences with treewidth    X         R
at most k. In practice, most sentences have small treewidth An extended -relation is intended to represent a unique
                                                      mapping (denoted by δR) from all possible instantiations of
and thus can be put into IGFk with small k. Our algorithm
      O(2nk)                                        variables in X to ground formulas. For γ’s not appearing in
runs in       time, where is the size of the sentence, and R                  false         γ ∈R
n is the size of the structure.                         , the associated formula is . We write    to mean
                                                      that there exists ψ such that (γ,ψ) ∈R.
2  Grounding for Model Expansion (MX)                 Deﬁnition 2.5 (answer to φ wrt A) Let φ be a formula in
We formulate search problems as the problem of model ex- σ ∪ ε with free variables X, A a σ-structure with domain
pansion (MX).                                         A, and R an extended X-relation over A.WesayR  is an
Deﬁnition 2.1 (MX) Given a sentence φ and a ﬁnite struc- answer to φ wrt A if for any γ : X → A, we have that δR(γ)
ture A with vocabulary σ ⊆ vocab(φ), ﬁnd a structure B that is a reduced grounding of φ[γ] over A.Here,φ[γ] denotes
is an expansion of A to vocab(φ) such that B|= φ.     the result of instantiating free variables in φ according to γ.
Example: Let A be a graph G =(V ; E),andletφ be:        As an example, let φ = ∃x∃y∃zφ where φ = P (x, y, z)∧
      ∀x[(R(x) ∨ B(x) ∨ G(x)) ∧¬(R(x) ∧ B(x))         E(x, y) ∧ E(y,z), σ = {P },andε  = {E}.LetA    be a
                                                                          A
         ∧¬(R(x)  ∧ G(x)) ∧¬(B(x) ∧ G(x))]           σ-structure such that P = {(1, 2, 3), (3, 4, 5)}. Then this
        ∀x∀y[E(x, y) ⊃ (¬(R(x) ∧ R(y))                extended relation R
          ∧¬(B(x) ∧ B(y)) ∧¬(G(x)  ∧ G(y)))]
                                                                   x   y  z         ψ
Let B be an expansion of A to vocab(φ).ThenB|= φ iff it            1   2  3   E(1, 2) ∧ E(2, 3)
corresponds to a 3-coloring of G.                                  3   4  5   E(3, 4) ∧ E(4, 5)
  In the MX framework, there is a clear separation between is an answer to φ wrt A. It is easy to see, for example,
problem instance (ﬁnite structure) and problem description (a
                                                      that δR(1, 2, 3) = E(1, 2) ∧ E(2, 3) is a reduced ground-
formula). In grounding, we bring domain elements into the ing of φ[(1, 2, 3)] = P (1, 2, 3) ∧ E(1, 2) ∧ E(2, 3),and
syntax by expanding the vocabulary and associating a new                                        
                                                      δR(1, 1, 1) = false is a reduced grounding of φ [(1, 1, 1)].
constant symbol with each element of the domain. For do- The following extended relation is an answer to φ = ∃zφ
main A, we denote the set of such constants by A˜. As nota-
tional conventions, we use σ to denote the instance vocabu-          x   y        ψ
                                                                              (1 2) ∧ (2 3)
lary and ε the expansion vocabulary.                                 1   2  E  ,    E  ,
                                                                     3   4  E(3, 4) ∧ E(4, 5)
Deﬁnition 2.2 (Reduced Grounding for MX) Aformulaψ
                             φ       σ         A =    Here, for example, E(1, 2) ∧ E(2, 3) is a reduced grounding
is a reduced grounding of a formula over a -structure     
    A                                                   φ  [(1, 2)]
(A, σ ) if (1) ψ is a ground formula over ε ∪ A˜; and (2) for of . Finally, the following represents an answer to
                                A  B                  φ                                            φ
every expansion structure B =(A, σ ,ε ) over vocab(φ), , where the single formula is a reduced grounding of .
B|= φ iff (B, A˜B) |= ψ,whereA˜B denotes the interpretation                    ψ
                                                                [ (1 2) ∧ (2 3)] ∨ [ (3 4) ∧ (4 5)]
of the new constants A˜.                                        E  ,    E  ,     E  ,    E  ,
During grounding, the symbols of the instance vocabulary are Just as relations in databases have an algebra, i.e.,asetof
“evaluated out” and a reduced grounding is obtained.  operations whose semantics correspond to the connectives of
  Obviously, by the above deﬁnition, we have          FO logic, we deﬁne an algebra for extended relations. Our
Proposition 2.3 Let ψ be a reduced grounding of a formula algebra consists of join, join with complement, projection,
φ over a σ-structure A.ThenA can be expanded to a model intersection and union.
of φ iff ψ is satisﬁable.                             Deﬁnition 2.6 (join, join with complement) Let R be an
Thus, through grounding, the model expansion problem is re- extended X-relation and S an extended Y -relation, both over
duced to the satisﬁability problem.                   domain A.Then
  In our grounding algorithm for a sentence, we must deal 1. the join of R and S is the extended X ∪ Y -relation
               φ                      φ
with subformulas of the original sentence ( may contain   R  1 S = {(γ,ψ) | γ : X ∪ Y → A, γ|X ∈R,
                   σ        A
free variables). For a -structure , we compute a formula  γ|Y ∈S,  and ψ = δR(γ|X ) ∧ δS (γ|Y )};
ψ for each instantiation of the free variables of φ, such that
                                                        2. the join of R with the complement of S is the extended
each ψ is a reduced grounding of φ under the corresponding                  c
                                                 φ        X  ∪ Y -relation R 1 S = {(γ,ψ) | γ : X ∪ Y → A,
instantiation. We call such a representation an answer to γ|  ∈R,      ψ = δ  (γ| ) ∧¬δ (γ| )}
wrt A. We compute an answer to a formula, by computing      X      and      R   X      S   Y  .
answers to its subformulas and combining them according to Proposition 2.7 Suppose that R is an answer to φ1 and S is
the connectives. To represent such answers, we introduce the an answer to φ2, both wrt structure A. Then (1) R 1 S is
                                                                                        c
concept of an extended relation (extending the notion of a an answer to φ1 ∧ φ2 wrt A;(2)R 1 S is an answer to
relation from relational database theory).            φ1 ∧¬φ2  wrt A.

                                                IJCAI-07
                                                   162Deﬁnition 2.8 (Y -projection) Let R be an extended X- GFk-sentences into k-guarded Non-Recursive Stratiﬁed Dat-
relation and Y ⊆  X.TheY    -projection of R, denoted alog (NRSD) programs.
                                              
by πY (R), is the extended Y-relation {(γ ,ψ) | γ =    A fragment related to GFk is the bounded variable frag-
                                                                     k
γ|Y for some γ ∈Rand ψ =   {γ∈R|γ| =γ} δR(γ)}.       ment of FO – FO , which denotes FO formulas that use at
                                 Y                         k
                          R                φ    A     most   distinct variables. Kolaitis and Vardi [1998] showed
Proposition 2.9 Suppose that is an answer to wrt  ,   that conjunctive queries in FOk have the same expressive
and Y is the set of free variables of ∃zφ¯ .ThenπY (R) is an                                    k
        ∃zφ¯    A                                     power as conjunctive queries of treewidth at most . Gottlob
answer to   wrt  .                                    et al. [2001] obtained a similar logical characterization for the
Deﬁnition 2.10 (intersection, union) Let R and S be ex- notion of hypertreewidth, a generalization of treewidth. They
tended X-relations. Then                              noted that hypertreewidth is bounded above by treewidth and
 1. the intersection of R and S is the extended X-relation showed that GFk has the same expressive power as FO sen-
                                                                                  k
    R∩S    =  {(γ,ψ) |  γ ∈Rand    γ ∈S,   and ψ =    tences of hypertreewidth at most .
    δ (γ) ∧ δ (γ)};
     R      S                                         Deﬁnition 3.1 (GFk) The k-guarded fragment GFk of FO is
 2. the union of R and S is the extended X-relation R∪S = the smallest set of formulas s.t. (1) GFk contains atomic for-
    {(γ,ψ) | γ ∈Ror  γ ∈S, and ψ = δR(γ) ∨ δS (γ)}.   mulas; (2) GFk is closed under Boolean operations; (3) GFk
                                                      contains ∃x¯(G1 ∧ ...∧ Gm ∧ φ),iftheGi areatomicformu-
Proposition 2.11 Let φ1 and φ2 be formulas with the same
                                                      las, m ≤ k, φ ∈ GFk, and the free variables of φ appear in
set of free variables. Suppose that R is an answer to φ1 and S
                                                      the Gi.HereG1 ∧ ...∧ Gm  is called the guard of φ.
is an answer to φ2, both wrt A. Then (1) R∩Sis an answer
to φ1 ∧ φ2 wrt A;(2)R∪Sis an answer to φ1 ∨ φ2 wrt A.   Note that this deﬁnition also includes universal quantiﬁca-
                                                      tion, since by (2), GFk is closed under negation. Also note
  In traditional relational algebra, projection can be done in                               2  k
                                                      that the above mentioned complexity result O( n ) only ap-
linear time, and join can be done in time linear in the sum of
                                                      plies to k-guarded sentences, not k-guarded formulas in gen-
the size of the input and output relations. Detailed algorithms
                                                      eral. To see why, by the deﬁnition, ¬R(x, y, z) is a 1-guarded
and proofs for this can be found in the appendix of [Flum et
                                                      formula, but it cannot be evaluated in O(n) time. However,
al., 2002]. The essential idea is this: ﬁrst encode domain el-
                                                      the same complexity result applies to strictly k-guarded for-
ements appearing in the input relations by natural numbers;
                                                      mulas, deﬁned as follows:
then sort the encoded input relations using the bucket sort al-
gorithm; next, compute the projection or join of the encoded Deﬁnition 3.2 (SGFk) The strictly k-guarded fragment
input relations; ﬁnally, decode the resulting output relation. SGFk is the fragment of GFk with formulas of the form
In our implementation of the operations on extended rela- ∃x¯(G1 ∧ ...∧ Gm ∧ φ).
tions, we use the same idea except that we also need to copy
                                                      Here, we are including the degenerate cases where x¯ is empty
formulas from the input relations to the output relation.                          m  =0
  Let R be an extended X-relation. The size of R, denoted (no leading existential quantiﬁer), (no free variables
                                                      and therefore no guards), or φ is true. Thus any k-guarded
by R, is the sum of the size of each pair (γ,δR(γ)) in
                                                      sentence is strictly k-guarded (take x¯ as empty and m =0).
R. Thus R  = |X||R| +   γ∈R δR(γ),where|R|  de-
                   R            δ  (γ)                Liu and Levesque [2003] presented a polytime algorithm
notes the cardinality of as a set, and R is the size of for evaluating strictly k-guarded formulas: Given a structure
the formula associated with γ. It is easy to see that projec- A      φ ∈
        O(R)                                          and a formula    SGFk, the algorithm computes the an-
tion takes      time, and intersection and union take time swer to φ wrt A,thatis,{γ |A|= φ[γ]}, in time O(nk).
O(R  + S). In general, join and join with complement                              k
        O(R · S)                                  A reason that they considered strictly -guarded formulas in-
take time            . However, in our grounding algo- stead of just k-guarded sentences is that their algorithm is
rithm in the next section, whenever we perform an R 1 S or
R 1c S                                                recursively deﬁned. In this section, we adapt their algorithm
        operation, it is always the case that the set of vari- for grounding formulas in the following fragment:
ables of S is a subset of that of R, every formula in R is true,
and every formula in S is of size O(),where is the size of Deﬁnition 3.3 (RGFk) RGFk denotes the set of strictly k-
the formula to be grounded. So the relation part (the set of guarded formulas such that no expansion predicate appears
tuples) of the resulting extended relation is a subset of that of in any guard.
R. Thus both operations can be done in time O(n),wheren
                                                        Note that the restriction that “no expansion predicate ap-
is the size of the relation part of R.
                                                      pears in any guard” is necessary for polytime grounding. In-
                                                      deed, there is no polytime grounding algorithm for 1-guarded
3  An Algorithm for Grounding FO Formulas             sentences; otherwise, we would have a polytime reduction to
The guarded fragment GF of FO was introduced by Andr´eka SAT from MX for 1-guarded sentences, and hence the com-
et al. [1998]. Here, any quantiﬁed subformula φ must be rel- bined complexity of this problem would be in NP.However,
ativized by a guard, i.e., an atomic formula over all free vari- it is NEXP-complete since MX for FO can be reduced to MX
ables of φ. Gottlob et al. [2001] extended GF to the k-guarded for 1-guarded sentences [Kolokolova et al., 2006],andthe
fragment GFk where the conjunction of up to k atoms may act combined complexity of MX for FO is NEXP-complete.
as a guard, and proved that k-guarded sentences can be eval- It is easy to see that any FOk formula can be rewritten in
              2  k
uated in time O( n ) where  is the size of the formula, and linear time into an equivalent one in RGFk, by using atoms
n is the size of the structure. The proof is by transforming of the form x = x as parts of the guards when necessary. For

                                                IJCAI-07
                                                   163                                                                                m
example, the formula ∃x∃y[R(x) ∧ E(x, y)] can be rewritten and save the deﬁnition p ≡ i=0 E(2i). Then the inter-
into ∃x∃y[R(x) ∧ y = y ∧ E(x, y)],whereR is an instance mediate extended relation corresponding to the subformula
predicate, and E is an expansion predicate. Extending the re- R(x) ∧∃y(S(y) ∧ E(y)) will be as in the table on the right,
sult of [Kolaitis and Vardi, 1998],Flumet al. [2002] showed and it has size O(n).
that FOk has the same expressive power as FO formulas of To illustrate the algorithm, let φ be the formula
               k
treewidth at most . Thus any FO formula with treewidth at    ∃yzuv.R(x, y, z) ∧ S(z,u,v) ∧¬{T (x, u, v)∧
most k can be put into an equivalent one in RGFk. In prac-
                                                      ∃fgh.A(x, y, f) ∧ B(z,g,h) ∧ [¬C(f, z) ∨ D(x, g) ∧ E(y,h)]},
tice, most formulas have small treewidth and thus can be put
into RGFk with small k.                               where T and E are expansion predicates, and let A be
                                                        A
  Our grounding algorithm uses extended relations and oper- R = {(1, 2, 1), (1, 2, 2), (7, 0, 2), (7, 0, 3)},
                                                       A
ations on them. If φ is an atomic formula R(t¯),weuseφ(A) S = {(2, 2, 5), (2, 3, 9), (4, 0, 2), (6, 7, 8)},
                                                        A                           A
to denote the extended relation {(γ,true) | t¯[γ] ∈ RA}. A = {(1, 2, 6), (7, 0, 2), (7, 0, 5)}, B = {(2, 3, 4), (3, 7, 5)},
                                                        A
                                                      C  =  {(1, 2), (2, 2), (5, 2), (6, 2), (6, 3), (9, 6)},
             (A,φ)                                      A
Procedure Gnd                                         D   = {(1, 2), (1, 3), (5, 7), (7, 3), (8, 8)}.
Input:AstructureA and a formula φ ∈ RGFk                   φ ∈
                   φ    A                             Then     RGF2, where the underlined parts are guards. First,
Output:Ananswerto    wrt                              we push negation symbols inward until they are in front of
Suppose φ(¯x)=∃y¯(G1    ∧  ... ∧ Gm  ∧ ψ).Return      atoms or existentials. The following ﬁgure represents the re-
             
πx¯Gnd(A, R,ψ ),whereR  is G1(A) 1 ... 1 Gm(A),and    sulting formula by a tree, where rectangular internal nodes
ψ is the result of pushing ¬’s in ψ inward so that they are in stand for guarded existentials, circular internal nodes for dis-
front of atoms or existentials.                       junctions or conjunctions, and leaves for literals.
Procedure Gnd(A R ) is deﬁned recursively by:
              , ,φ                                                yzuv.          R(x,y,z)                   S(z,u,v)    
 1. If φ is a positive literal of an instance predicate,
    then Gnd(A, R,φ)=R 1 φ(A);
         ¬        
 2. If φ is φ ,whereφ is an atom of an instance predicate,      T(x,u,v)      fgh. A(x,y,f)     B(z,g,h)
    then Gnd(A, R,φ)=R 1c φ(A);
 3. If φ is a literal of an expansion predicate,
           (A R   )={(    [ ]) | ∈R}
    then Gnd ,  ,φ     γ,φ γ  γ     ;                                          C(f,z)
       (A R  ( ∧  )) =   (A R   ) ∩   (A R   )
 4. Gnd  ,  , φ  ψ    Gnd   , ,φ   Gnd  ,  ,ψ ;                                   D(x,g)    E(y,h)
       (A R  ( ∨  )) =   (A R   ) ∪   (A R   )
 5. Gnd  ,  , φ  ψ    Gnd   , ,φ   Gnd  ,  ,ψ ;       Now we process existentials from bottom to top. To process
 6. Gnd(A, R, ∃yφ¯ )=R 1 Gnd(A, ∃yφ¯ );               the bottom existential, we ﬁrst evaluate the guard by a join
                        c                                                          C  D    E
 7. Gnd(A, R, ¬∃yφ¯ )=R 1 Gnd(A, ∃yφ¯ ).              operation. Then we process leaves , and wrt this guard
                                                      relation using rules 2, 1 and 3 of IGnd respectively. The result
                                        O(nk)
  Unfortunately, the running time of Gnd is not any-  of the guard relation joined with the complement of C is
more. The reason is that Gnd may generate intermediate ex-
tended relations whose size is not O(nk).Toseewhy,letφ be          x   y  f   z  g   h   ψ
the 1-guarded formula ∃x[R(x) ∧∃y(S(y) ∧ E(y))],where              7   0  2   3  7   5  true
E is an expansion predicate, and let A be a structure such that    7   0  5   3  7   5  true
RA =  {2i +1| 0 ≤ i ≤ m},andSA  =  {2i | 0 ≤ i ≤ m}.
                   m                                 Next, we perform an intersection for conjunction, a union for
Obviously, the formula i=0 E(2i) is a reduced grounding of disjunction, and a projection for existential, resulting in
φ over A, and it has size O(n).However,whenweuseGnd,
                                                                 x  y   z  ψ
the intermediate extended relation corresponding to the sub-                      p1 ≡  E(2, 4)
                                        2                        1  2   2  p1
formula R(x) ∧∃y(S(y) ∧ E(y)) has size O(n ),asshown                              p2 ≡  E(0, 4)
                                                                 7  0   2  p2
in the following table (on the left):                                             p3 ≡  true
                                                                 7  0   3  p3
           x         ψ            x     ψ
                 Wm                                   Now that we have an answer to this bottom existential, we
           1       i=0 E(2i)      1     p
                 Wm                                   process the top existential in a similar way for the ﬁnal answer
           3       i=0 E(2i)      3     p
            .         .           .     .                x  ψ
            .    W    .           .     .                          q1 ≡ (¬T (1, 2, 5) ∨¬p1) ∨ (¬T (1, 3, 9) ∨¬p1)
                   m                                     1  q1
         2m +1     i=0 E(2i)   2m  +1   p                          q2 ≡ (¬T (7, 2, 5) ∨¬p2) ∨ (¬T (7, 3, 9) ∨¬p2)
                                                         7  q2
  To solve this problem, we let IGnd be the algorithm which
                                                      Theorem 3.4 Given a structure A and a formula φ ∈ RGFk,
is the same as Gnd except for the following: After each pro-                 φ     A   O(2nk)
jection operation, we replace each formula in the resulting IGnd returns an answer to wrt in   time, where
                                                       is the size of φ, and n is the size of A.(Henceifφ is a
extended relation by a new propositional symbol. We also                                     φ     A
save the deﬁnitions of these new symbols. The output of the sentence, IGnd returns a reduced grounding of over .)
algorithm is the ﬁnal extended relation together with the def- Proof Sketch: Rewrite φ into an equivalent formula φ by
initions of all the new symbols. For instance, in the above pushing negations inwards. Correctness then follows by in-
example, we will introduce a new propositional symbol p duction on the formula according to the algebra for extended

                                                IJCAI-07
                                                   164relations. As to complexity, for each intermediate extended atoms of interpreted deﬁned predicates that appear in ψ.Let
relation, there are O(nk) tuples (each guard is composed of ϕ be the conjunction of literals of G that are true according
at most k atoms), and each formula has size O(), due to the to the interpretation. Then ψ ∧ ϕ is the ﬁnal ground formula
introduction of new propositional symbols. By the complex- to be passed to the satisﬁability solver. Thus we can restrict
ity analysis from Section 2, each of the O() operations on our attention to grounding where all deﬁned predicates are
extended relations can be done in time O(nk).        expansion predicates.
                                                        In this section, we extend the algorithm from Section 3 to
4  Grounding Inductive Deﬁnitions                     ground FO(ID) formulas in the following fragment:
While FO MX is often sufﬁcient, modelling often requires Deﬁnition 4.1 (IGFk) IGFk is the extension of RGFk with
recursion and recursion through negation. The solution is to inductive deﬁnitions such that for each rule, the body is in
use FO(ID) logic, which is FO extended with inductive def- RGFk and all free variables of the body appear in the head.
initions [Denecker, 2000; Denecker and Ternovska, 2004]. As with RGFk, any FO(ID) formula with at most k distinct
Fortunately, adding inductive deﬁnitions does not violate the variables can be rewritten in linear time into an equivalent
main complexity-theoretic results [Mitchell and Ternovska, one in IGFk. Here we show how to rewrite each rule so that
2005; Kolokolova et al., 2006].                       it satisﬁes the restriction of the above deﬁnition. First, for
  The syntax of FO(ID) is that of FO extended with a rule each x that appears in the head but not the body, add x = x
saying that an inductive deﬁnition (ID) is a formula. An ID to the body. Now since the body still uses at most k distinct
                               ¯
Δ is a set of rules of the form ∀x¯(X(t) ← φ),whereX is a variables, it can be rewritten into RGFk.
predicate symbol, t¯ is a tuple of terms, and φ is an arbitrary We ﬁrst present a procedure for grounding IDs:
FO formula. The connective ← is called the deﬁnitional im-
                                                      Procedure GndID(A, Δ)
plication. In the rule ∀x¯(X(t¯) ← φ), X(t¯) is called the head
                                                      Input:AstructureA andanIDΔ   ∈ IGFk
and φ the body. A deﬁned predicate of an FO(ID) formula
                                                      Output:AnanswertoΔ    wrt A
is a predicate symbol that occurs in the head of a rule in an
                                                                                         ¯
ID. The semantics of FO(ID) is that of FO extended with one For each rule r of Δ, suppose r is ∀x¯(X(t) ← φ),letΔr be
                                A              Δ          ¯
additional rule saying that a structure satisﬁes an ID if {X(t)[γ] ← ψ | (γ,ψ) ∈ IGnd(A,φ)}.Return r∈Δ Δr.
it is the 2-valued well-founded model of Δ, as deﬁned in the
                                                        To illustrate the procedure, let Δ be the ID
context of logic programming [van Gelder et al., 1993].   j                                        ﬀ
  For example, the problem of ﬁnding the transitive closure          ∀x∀y[T (x,y) ← E(x, y)]
of a graph can be conveniently represented as an MX prob-    ∀x∀y[T (x, y) ←∃z(C(y) ∧ E(x, z) ∧ T (z,y))]
lem for FO(ID). The formula consists of a deﬁnition with two T                            Δ  ∈
rules, deﬁning the predicate T . The instance vocabulary has where is an expansion predicate. Then IGF2.Note
a single predicate E, representing the binary edge relation. that for the purpose of illustration, we use C(y) instead of
       j                                  ﬀ           y = y as a part of the second guard so that we can produce a
               ∀ ∀ [ (   ) ←  (   )]                                            A                    A
                x y T x,y    E x, y                   small grounding. Let A be E = {(1, 2), (2, 3)},andC =
         ∀x∀y[T (x,y) ←∃z(E(x, z) ∧ T (z,y))]
                                                      {(3)}. GndID(A, Δ) would proceed as follows:
This states that the transitive closure of edge set E is the least 1. Call IGnd(A,E(x, y)) to get R
relation containing all edges and closed under reachability. 2. Call IGnd(A, ∃z(C(y) ∧ E(x, z) ∧ T (z,y))) to get S
  When it comes to MX for FO(ID), the expansion vocab-
ulary usually includes all the deﬁned predicates. All the                  x   y    ψ
deﬁnitions from Section 2, namely deﬁnitions of MX, re-                    1   3  T (2, 3)
duced grounding, extended relation, and answer, directly ap-               2   3  T (3, 3)
ply to FO(ID). Also, through grounding, the MX problem for 3. Replace rule 1 with {T (x, y)[γ] ← ψ | (γ,ψ) ∈R}
FO(ID) is reduced to the satisﬁability problem of PC(ID),                  {T (x, y)[γ] ← ψ | (γ,ψ) ∈S}
which stands for propositional calculus with inductive deﬁ- 4. Replace rule 2 with
nitions. Currently, two prototypes of such solvers have been The resulting ground8 ID is 9
                                                                           (1 2) ←
                                                                      <> T  ,     true  =>
developed: one [Pelov and Ternovska, 2005] reduces satisﬁ-                 (2 3) ←
ability of PC(ID) to SAT, and the other [Mari¨en et al., 2005]           T  ,     true
                                                                      :> T (1, 3) ← T (2, 3) ;>
is a direct implementation that incorporates SAT techniques.            T (2, 3) ← T (3, 3)
While, both solvers deal with a restricted PC(ID) syntax, a
solver for the general syntax is under construction in our lab. We now extend the grounding algorithm IGnd from Sec-
                                                      tion 3 by adding the following clause. We call this enhanced
  Nonetheless, some important problems are represented as                                   +
MX for FO(ID) where some deﬁned predicates are in the in- algorithm for grounding IGFk formulas IGnd .
stance vocabulary. The interpretation of these deﬁned pred- 0. If φ is an ID Δ or its negation ¬Δ,thenIGnd(A, R,φ)=
icates is used to apply restrictions on the possible interpre- {(γ,p) | γ ∈R}or {(γ,¬p) | γ ∈R},wherep is a new
                                                                                          ≡      (A  Δ)
tations of the expansion predicates. In such a case, we will propositional symbol with the deﬁnition p GndID , .
ﬁrst do grounding treating all deﬁned predicates as expansion The following is the main theorem of this paper:
             ψ
predicates. Let be the resulting ground formula. Then we Theorem 4.2 Given a structure A and a formula φ ∈ IGFk,
      ψ                                                   +                                2 k
add to  an extra constraint that encodes the interpretation IGnd returns an answer to φ wrt A in O( n ) time, where
                               G
of the deﬁned predicates. Suppose is the set of ground  is the size of φ and n is the size of A.

                                                IJCAI-07
                                                   165