              Extracting Certiﬁcates from Quantiﬁed Boolean Formulas                     ∗

                                           Marco Benedetti
                         Istituto per la Ricerca Scientiﬁca e Tecnologica (IRST)
                              Via Sommarive 18, 38055 Povo, Trento, Italy
                                            benedetti@itc.it


                    Abstract                          commonly accepted representation (if any at all), and all the
                                                      current solvers return a little more than a sat/unsat answer.
    A  certiﬁcate of satisﬁability for a quantiﬁed      Despite these issues, sat-certiﬁcates for QBFs are ex-
    boolean formula is a compact representation of    tremely desirable thank to their potential beneﬁts on appli-
    one of its models which is used to provide solver- cations and solvers. For example, a certiﬁcate is a conclu-
    independent evidence of satisﬁability. In addition, sive means to judge conﬂicting answers given by different
    it can be inspected to gather explicit information solvers on the very same instance. Clearly, this event reveals
    about the semantics of the formula. Due to the    no ﬁner problem than a bug in the implementation, which we
    intrinsic nature of quantiﬁed formulas, such cer- might think is not worth considering. This happens fairly of-
    tiﬁcates demand much care to be efﬁciently ex-    ten though, and as long as we treat solvers as black boxes,
    tracted, compactly represented, and easily queried. a proof-of-satisﬁability approach is the only realistic way to
    We show how to solve all these problems.          tell the truth. We quote [Le Berre et al., 2004]:
                                                          The question of how to check the answer of the QBF
                                                          solvers in an effective way is still unanswered [...]
1  Introduction                                           the question of what is a good certiﬁcate of satisﬁa-
The term “certiﬁcate” has a fairly general meaning, originat- bility/unsatisﬁability [...] remains open. This point
ing in language recognition and complexity theory. Once ver- is not only an issue for the QBF evaluation, but
iﬁed, a certiﬁcate proves that the string it refers to actually also for the implementation: [...] we had sound-
belongs to a language of interest. Applied to logic, the term ness problems with 4 QBF solvers. [...]
denotes any means of providing evidence of (un)satisﬁability Yet, a certiﬁcate is much more than a way to ensure satisﬁ-
for a given statement, other than a refutationally-compete de- ability: It can be inspected to gather semantics from the un-
ductive approach. In essence, we verify that a given logical derlying formula. This is of paramount importance in appli-
formula belongs to the language of (un)satisﬁable statements. cations, where certiﬁcates add valuable information to a mere
  The most natural certiﬁcate of satisﬁability (sat-certiﬁcate) sat/unsat answer. For example, a sat answer to the proposi-
for a formula is an explicit representation of some of its mod- tional (PROP) encoding of (the negation of) a desired prop-
els. A formula is indeed satisﬁable if and only if some model erty over a logic circuit means that the circuit is faulty w.r.t.
makes it evaluate to true. The validity of a certiﬁcate can be that property. But, it takes a certiﬁcate to outline a deﬁnite
veriﬁed by whoever is knowledgeable about the evaluation scenario in which the fault shows up. As opposed to QBF
apparatus of the logic (deductive capabilities are unneces- certiﬁcates, such PROP certiﬁcates are easy to represent and
sary), independently of how it was obtained.          verify, hence they have had a wide application.
  In this paper, we focus on sat-certiﬁcates for Quantiﬁed The relevance of certiﬁcates enlarges with the scope of ap-
Boolean Formulas (QBFs). Such certiﬁcates have never been plication of the underlying logic. In this respect, QBF is a
proposed or used so far for a number of reasons. First, the notable case with plenty of applications. Every problem that
intrinsic nature of a QBF confers a tree-shaped structure to can be stated as a two-player ﬁnite game can be modeled in
its models, whose explicit representation may become unaf- QBF. An insightful example is obtained by considering the
fordable. Second, theoretical arguments exist that make it un- famous game “Connect-4”. It is known that the player who
likely to ﬁnd polynomial-time veriﬁcation procedures (QBF moves ﬁrst can always win. The rules of the game and the
satisﬁability is PSPACE-complete [Stockmeyer and Meyer, existence of a winning strategy can be encoded into a QBF
1973]). Finally, present QBF solvers ﬁnd it either impractical instance [Gent and Rowley, 2003], expected to be sat. Which
or not straightforward to collect all the information needed to is the winning strategy? A certiﬁcate would disclose such in-
construct a model. As a consequence, QBF models feature no formation: The ﬁrst player would prevail by just inspecting
                                                      the certiﬁcate at each move, whatever the opponent does.
  ∗This work is supported by PAT (Provincia Autonoma di Trento, The interesting point here is that many real-world appli-
Italy), under grant n. 3248/2003.                     cations can be modeled as two-player games: Unboundedmodel checking for ﬁnite-state systems [Rintanen, 2001] and 3 Certiﬁcate representation
conformant planning [Rintanen, 1999]—just to name two rel-
evant examples—have handy QBF formulations.           A QBF model can be represented explicitly by employing
                                                      data structures such as trees or truth tables. Or, we may pur-
  In the rest of this paper, after a brief introduction to QBFs
                                                      sue compactness at the expense of managing an implicit rep-
and their models (Section 2), we present a solver-independent
                                                      resentation1 requiring computation to yield values.
representation for QBF sat-certiﬁcates (Section 3). As ex-
pected, we are able to describe how to verify them (Section 4) An ideal certiﬁcate should be compact (easy to manage)
before the more complex task of their extraction is addressed and explicit (easy to verify and query). A successful tradeoff
                                                                                                  [
(Section 5). We conclude by discussing the implementation is obtained by employing Binary Decision Diagrams Bryant,
                                                          ]
of our approach and the future work (Section 6).      1986 . We consider their reduced ordered version (ROBDDs,
                                                      or just BDDs henceforth) with complemented arcs. A BDD
                                                                                                        n
                                                      E representing a total function F (u1, u2, . . . , un) from B
2  QBFs and their models                              to B is a directed acyclic graph with one root (labeled by F )
                                                      and one sink node (labeled by “1”). Each internal node is la-
With no loss of generality, we consider QBFs in prenex con- beled by one variable in U = {u1, u2, . . . un}, and always
junctive normal form (CNF). They consist in a preﬁx exhibit- has two children, one attached to the outcoming then-arc, the
ing an arbitrary number of alternations of existentially and other to the else-arc. The else-arc may or may not be comple-
universally quantiﬁed variables, followed by a matrix, i.e. a mented. A unique path from the root to the sink is identiﬁed
conjunction of clauses. For example:                  by assigning a value to each variable in U: The then-arc is
    ∀a∀b∃c∀d∃e∃f.(¬b∨e∨f) ∧ (a∨c∨f) ∧ (a∨d∨e)∧        chosen for variables assigned to 1, the else-arc is followed
      (¬a∨¬b∨¬d∨e) ∧ (¬a∨b∨¬c) ∧ (¬a∨¬c∨¬f)∧    (1)   otherwise. The function F represented by E evaluates to 1 on
                                                                         n
      (a∨¬d∨¬e) ∧ (¬a∨d∨¬e) ∧ (a∨¬e∨¬f)               hψ1, ψ2, . . . , ψni ∈ B iff an even number of complemented
                                                      arcs is encountered along the path deﬁned by ψ1, ψ2, . . . , ψn.
 Given a QBF F , we denote by Fe its matrix, by var∃(F ) F(a,b,c) As an example, let us consider the BDD aside,
(var∀(F )) the set of existentially (universally) quantiﬁed      where solid arrows denote then-arcs, while
variables in F , and by var∀(F, e) ⊆ var∀(F ) the set of uni-    dashed (dotted) arcs are used for regular (com-
versal variables preceding (or dominating) e ∈ var (F ) in a     plemented) else-arcs. It represents a binary func-
                     .                      ∃
the preﬁx (we pose δ(e) = |var∀(F, e)|). Given a CNF ma-         tion F (a, b, c) of three binary variables a, b
trix Fe, the formula Fe ∗ l is the CNF obtained by assigning b b and c. It is, for example, F (0, 1, 1) = 1 and
the literal l, i.e. by removing from F each ¬l literal and each  F (1, 1, 1) = 0. The represented function may
clause containing l. This notation is readily extended to sets   be written as F = b ∧ (a ∨ c) ∧ (¬a ∨ ¬c). In a
                                                           c
of literals. A matrix F is satisﬁed by a set of literals M (writ- set-oriented interpretation, this BDD represents
                 e                                               the one-set of F , i.e. the set having F as charac-
ten M |= Fe) when Fe ∗ M is the empty formula.                   teristic function. In our case, it stands for the set
  The alternations of quantiﬁers in the preﬁx guide us to ex- 1  {h0, 1, 1i, h1, 1, 0i} where F evaluates to 1.
tending this notion of satisﬁability from matrixes to QBFs.
                                                        The BDDs we utilize are ordered and reduced: The same
For example, the satisﬁability problem on (1) asks whether
                                                      variable ordering is followed along each path, and no two
for each possible (consistent) combination of literals on a and
                                                      nodes representing the same set exist, so that each function
b there exists a way to choose a literal on c such that for both
                                                      has only one canonic representation. Furthermore, the ver-
possible literals over d, two literals on e and f exist such that
                                                      sion with complemented arcs is such that the set S is denoted
the resulting set satisﬁes the matrix. Hence, a QBF model is
                                                      by the same node as S (referred to with a complemented arc).
a set of |var (F )| functions, each one specifying the literal
          ∃                                             The BDD way of representing sets is regarded as symbolic
            d    e     to be chosen (if any) on the ex- in that it avoids the explicit enumeration of sets’ elements
     b  ¬c             istential variable e as a function
            ¬d   ¬e  f                                in favor of a more abstract, diagram-based way of comput-
                       of the choices on all the univer- ing characteristic functions. Such representations may be ex-
    ¬b      d    ¬e    sal variables dominating e. To
 a      ¬c                                            ponentially more succinct than explicit ones (see [Wegener,
            ¬d   ¬e    represent all these functions at 2000]), and all the operations on the sets/functions they rep-
M                      once we can use a labeled tree,
            d    ¬e  f                                resent (union/disjunction, intersection/conjunction, etc.) can
 ¬a                    such as the one aside, depicting
     b   c                                            be performed by manipulating the involved BDDs [Bryant,
            ¬d   e  ¬f
                       a model for (1). If we call uni- 1986]. With a small abuse of notation, we treat BDDs as if
    ¬b      d    ¬e    versal hypothesis every consis-
         c                                            they were the sets they represent. For example, x ∈ E is an
                       tent set of universal literals (or,                  n
            ¬d   e  ¬f                                element in the subset of B individuated by E.
                       equivalently, every assignment
                                                        When we manage collections of BDDs, canonicity spans
[u1 = ψ1, . . . , un = ψn] to the universal variables, with over their set of nodes as a whole. This allows the sharing of
ψi ∈  B  =  {0, 1}), we may say, informally, that a tree structural information among diagrams. A BDD in such a set
structure like the one above is a model for a QBF with matrix
Fe iff for every universal hypothesis U the set of existential 1In [Buning¨ and Zhao, 2004] propositional formulas and QBFs
literals collected along the branch individuated by U satisﬁes with free variables are used. Implicitness is not an issue for the au-
Fe ∗ U (see [Buning¨ and Zhao, 2004] for details).    thors as they focus on characterizing classes of models/formulas.of interconnected diagrams—called a forest—is identiﬁed by c+(a) c-(a) e+(a,b,d) e-(a,b,d) f+(a,b,d) f-(a,b,d)
a (complemented) arc pointing to its root node.
                                                             a           a      a          a    a
Deﬁnition 3.1 (QBF sat-certiﬁcate, validity) A sat-certi-
ﬁcate for a QBF F with var∃(F )={e1, . . . , em}, var∀(F )=            b                b
{u1, . . . , un}, and δi =δ(ei) is a forest of BDDs containing                 d
          +   −                        +      −
two roots hEi , Ei i for each i in [1, m]. Both Ei and Ei are
deﬁned over var∀(F, ei)={u1, . . . , uδi }. The certiﬁcate                    1
                +   −    +   −       +   −
      C(F ) = [hE1 , E1 i, hE2 , E2 i, . . . , hEm, Emi]
                                                        Figure 1: A BDD-based sat-certiﬁcate for the QBF (1).
                                  +    −
is consistent when ∀i ∈ [1, m] it is Ei ∩ Ei = ∅. It is
                                       n
valid for F when for any hψ1, . . . , ψni ∈ B the formula An easy but impractical way of checking a certiﬁcate
                                 (i)
Fe[u1=ψ1,...,un=ψn] is satisﬁed by {ei =s (ψ1, . . . , ψδi ), i ∈ would be to check that M produces a satisfying assignment
[1, m]}, where the functions s(i) : Bδi → B are deﬁned as under all the possible universal hypotheses. Fortunately, the
                                                      symbolic nature of the certiﬁcate helps us to perform a much
                      
                        1   hψ , . . . , ψ i ∈ E+     more efﬁcient, clause by clause, BDD-based veriﬁcation. Let
                         if  1      δi    i
      (i)                                  −          us use the exclusive or “⊗” to construct literals out of vari-
     s  (ψ1, . . . , ψδi ) = 0 if hψ1, . . . , ψδi i ∈ Ei
                      undef. otherwise               ables (ϕ⊗v means v when ϕ = 0, and ¬v when ϕ = 1).
In essence, a sat-certiﬁcate is a compact but explicit repre- Lemma 4.1 The algorithm checkValidity answers TRUE
sentation of the dependencies that have to exist between ex- on hF, Ci if and only if C is a valid certiﬁcate for F .
istential (dependent) and universal (independent) variables in Let us consider, for example, the clause ¬u1 ∨ e1 ∨ u2 ∨
order to satisfy the matrix whichever the universal hypothesis. ¬e2 ∨ e3 under the preﬁx ∀u1∃e1∀u2∃e2∃e3. The only rele-
Lemma 3.1  If C(F ) is valid for a QBF F , then F is satisﬁ- vant universal hypotheses for this clause are those assigning
able. Every satisﬁable QBF has at least one valid certiﬁcate. both u1=1 and u2=0: All the others immediately satisfy the
                                                      clause via one of its universal literals. So, it remains to verify
Proof sketch. A QBF is satisﬁable iff it has at least one that under the assignment [u1 =1, u2 =0] at least one of the
model, i.e. iff we ﬁnd at least one tree-like structure (like three remaining literals in the clause is true, i.e. that every
the one introduced in Section 2), such that for every assign- universal hypothesis containing u1 = 1, u2 = 0 falls within
ment U = [u =ψ   , . . . , u =ψ ] to the universal variables                        +         −
           1    1     n    n                          the one-set of at least one out of E1 (for e1), E2 (for ¬e2),
the set of existential literals collected along the branch in- +
                                                      and E3 (for e3). This is a two-step check: First, we collect
dividuated by U satisﬁes F ∗ U. Given a consistent certiﬁ-                      +    −    +
                      e                               the universal hypotheses E = E1 ∪ E2 ∪ E3 under which the
cate C for F , we insert the literal ei into the label of the clause is satisﬁed by some existential literal. Then, we check
node reached following the u1 = ψ1, . . . , uδi = ψδi path that all the hypotheses E (in which no existential literal satis-
                  +
iff hψ1, . . . , ψδi i ∈ Ei (and, dually, ¬ei appears in the label ﬁes the clause) assign either u1 = 1, or u2 = 0, or both, so
                  −
iff hψ1, . . . , ψδi i ∈ Ei ). By construction, if the certiﬁcate that the clause is satisﬁed by a universal literal.
is valid according to the notion of validity given in Deﬁni- The meaning of a successful veriﬁcation is twofold: We
tion 3.1, the tree-like structure obtained is a model.  are ensured that the formula is sat, and that the certiﬁcate en-
  A valid sat-certiﬁcate for (1) is depicted in Figure 1. codes a model. Conversely, the veriﬁcation fails when either
                                                      the certiﬁcate is invalid or the formula is unsat (we cannot
4  Certiﬁcate veriﬁcation                             tell right away which circumstance has occurred). Validity
The ﬁrst thing we wish to do with a consistent certiﬁcate C check is a coNP-complete problem [Buning¨ and Zhao, 2004].
for F is to verify its validity. We check that by choosing the
truth values of the existential variables according to what the 5 Certiﬁcate Extraction
certiﬁcate suggests, we always satisfy the matrix.    For certiﬁcate extraction to be symbolic in the same sense as
                                                      our certiﬁcate is, we want it to work on a BDD-based repre-
 Function checkValidity(QBF     F , certiﬁcate C)     sentation of the problem. We describe one such representa-
                                                      tion (Section 5.1), and show how it relates to certiﬁcates (Sec-
  Let var∃(F ) be {e1, . . . , em};                   tion 5.2). Then, a two-step procedure is discussed to (a) eval-
  Let var∀(F ) be {u1, . . . , un};
            +   −    +  −        +  −                 uate the instance (Section 5.3), and (b) construct a certiﬁcate
  Let C be [hE1 , E1 i, hE2 , E2 i . . . , hEm, Emi]; on the basis of the steps taken in the evaluation (Section 5.4).
  forall Γ ∈ F do

     Let Γ be ψ1⊗ui1 ∨ · · · ∨ ψh⊗uih ∨               5.1  Symbolic Formulas via Skolemization
             φ1⊗ej1 ∨ · · · ∨ φk⊗ejk ;
                 +            −                       The Skolem theorem shows how to transform any given First
     E ←  (∪φ =0E ) ∪ (∪φ =1E  );
             i   ji       i   ji                      Order Logic (FOL) statement F into a skolemized formula
     if E               6= ∅ then return FALSE;       Sk(F )                        Sk(F )
        [ui1 =ψ1,...,uih =ψh]                                that has two properties: (1)  contains no exis-
  return TRUE;                                        tential quantiﬁer, and (2) Sk(F ) is satisﬁable iff F is satis-
                                                      ﬁable. Existential quantiﬁers are eliminated by replacing the                                                                                   v
variables they bind with Skolem functions whose deﬁnition var∀(F ) with a Skolem function s (u1, u2, . . . , un). For ex-
domains are appositely chosen to preserve satisﬁability. In ample, the instance (1) with matrix Ne, is sat-equivalent to
the outer form of skolemization, the function introduced for
                                                                    c        e           f
e ∈ var∃(F ) depends on the universal variables var∀(F, e) ∀a∀b∀d. Ne[s (a, b)/c, s (a, b, d)/e, s (a, b, d)/f] (2)
that have e in their scope (for prenex formulas: all the univer-
                                                      Then, we propositionally encode the deﬁnability of the
sal variables to the left of e in the preﬁx).
                                                      Skolem terms introduced, leveraging a noteworthy feature:
  Skolemization-based solvers replace the original formula
                                                      They all map Bn onto B  (for some n ≥ 0), hence they
F with the satisﬁability-equivalent instance Sk(F ). Such in-
                                                      are fully speciﬁed by 2n boolean parameters, and have a
stance is no longer propositional. Nevertheless, we are able to
                                                      direct CNF representation. For example, if we denote by
capture its semantics without exceeding the expressive power
                                                      {sc , hα, βi ∈ B2} the four boolean parameters represent-
of propositional logic, by explicitly managing the truth values αβ
                                                      ing the truth value of sc over hx, yi, we obtain for sc(a, b) the
of the (interpretation of) skolem terms in each point of their                             c    c
deﬁnition domains, as shown in [Benedetti, 2005].     following propositional skolemization Sk(s ) ≡ s (a, b):
                                                             c            c            c              c
  The duty we pay is a (possibly) exponential blowup in the (a∨b∨s00) ∧ (a∨¬b∨s01) ∧ (¬a∨b∨s10) ∧ (¬a∨¬b∨s11)
size of the problem. BDDs come out to be precious in keeping
                                                                                        v
this space explosion problem under control: What we actu- By replacing each v∈var∃(F ) with Sk(s ) we obtain Sk(F )
ally manage is a symbolic formula, i.e. a compact BDD-based c e  f               c        d       e
representation of a propositional instance representing the de- ∃s ∃s ∃s ∀a∀b∀d. Ne[Sk(s )/c, Sk(s ), Sk(s )/e]
                                                              c            c   c   c   c
ﬁnability of the set of skolem terms introduced in Sk(F ). where ∃s stands for ∃s00∃s01∃s10∃s11, and similarly for
                                             n
  Let as denote by Ψ|k the k-bit long preﬁx of Ψ ∈ B , n ≥ the other functions. This formula is easily turned—clause
k. The notion is extended to sets: I|k = {Ψ|k.Ψ ∈ I}. by clause—into a CNF. By distributing the connectives, re-
Deﬁnition 5.1 (Symbolic formula) A symbolic formula F is moving clauses with complementary literals, and eliminating
                                                                                            δ(Γ)−m
a BDD-based representation of a CNF instance. It con- literals over universal quantiﬁers, we obtain 2 clauses
sists of a symbolic preﬁx [e ] . . . [e ] on the variables out of a QBF clause Γ with m universal literals. For example,
                        1 δ1   m  δm                            3−1
var(F) =  {e1, . . . , em}, with 0 ≤ δ1 ≤ · · · ≤ δm, fol- we obtain 2 =4 clauses from the clause a∨c∨f in (1):
lowed by a symbolic matrix Fe, i.e. a conjunction of symbolic c f     c    f      c    f       c    f
                                                        (s00 ∨ s000) ∧ (s00 ∨ s001) ∧ (s01 ∨ s010) ∧ (s01 ∨ s011)
clauses. A symbolic clause ΓI is made up by a consistent set

Γ = [ϕ1 ⊗ ei1 , . . . , ϕh ⊗ eih ] of literals on var(F), and a All the clauses coming out of a given QBF clause mention
                            δ(Γ)      .
(BDD represented) subset I of B , δ(Γ) = maxl∈Γ δ(l). the same skolem functions. What makes one differ from an-
The CNF represented by F is called propositional expansion other are the subscripted indexes. This allows us to write
                     (i)
of F. It has variables {s , i ∈ [1, m], Φ ∈ Bδ(ei)}, and is them compactly by representing function names apart from
                  .  Φ                                indexes. For example, the four clauses above may be suc-
deﬁned as P rop(F) = ∧ΓI ∈F P rop(ΓI ), where
                                                      cinctly represented as ΓI = [c, f]{000,001,010,011}, where
               . ^       (1)             (m)
     P rop(ΓI ) =   ϕ1⊗s     ∨ . . . ∨ ϕm⊗s           I ⊆  Bδ(Γ) contains one element per clause, and the i-th
                         Ψ|δ1            Ψ|δm
                Ψ∈I                                   component of each Ψ ∈ I  refers to the universal variable
Symbolic formulas inherit the semantics of their proposi- ui: Once Ψ ∈ I is selected, each literal l obtains its own
tional expansions (which we also call ground counterparts). subscript by projecting Ψ onto the subspace related to the

Noticeably, a consistent set M = {[l1]I1 , . . . , [lm]Im } of ﬁrst δ(l) components, written Ψ|δ(l) . For example, given
symbolic literals satisﬁes F (M |= F) iff its expansion Ψ=010 it is Ψ|δ(c) =Ψ|2 =01 and Ψ|δ(f) =Ψ|3 =010, hence
                                                                     f
P rop(M)=∪[l] ∈MP rop([l]J ) satisﬁes P rop(F).                  c
             J                                        [c, f]{010}=s01∨s010. This property allows us to recover the
Deﬁnition 5.2 (Symbolic skolemization) The symbolic sko- ground meaning of a factored clause through the P rop func-
lemization SymbSk(F ) of a QBF   F  with var∃(F ) =   tion. The factored representation becomes symbolic as soon
                                                      as we represent and manipulate sets of indexes via BDDs
{e1, . . . , em} is a symbolic formula with preﬁx [e1]δ(ei) · · ·
                                                      over var (F ), thus obtaining the (linear-size) representation
[em]δ(e ), having one symbolic clause [l1, . . . , lh]I for each ∀
      m                                               SymbSk(F  ).                                     
clause Λ ∈ F , where {l1, . . . , lh} are the existential literals
                                                        For example, the propositional expansion of the formula in
in Λ, {ϕ1⊗ei1 , . . . , ϕh⊗eih } are the universal literals in Λ,
                       k                              Figure 2 yields a CNF instance equivalent to (1).
and I = {hψi, . . . , ψki ∈ B | ∀j.ψij 6= ϕj}, k = δ(Λ).
As an example, the symbolic skolemization of (1) is given 5.2 From symbolic models to certiﬁcates
in Figure 2. In essence, a symbolic skolemization F = The connection between a symbolic model and a certiﬁcate is
                                                      so close that the former is smoothly turned into the latter. Let
SymbSk(F  ) is a compact representations for a purely exis-  .
tential instance P rop(F) having the following key property. i(M, l)=∪[l]I ∈MI be the indexes on the literal l mentioned
                                            sat       in a symbolic model M.
Theorem 5.1 For any QBF F , P rop(SymbSk(F )) ≡ F .
                                                      Theorem 5.2 If M |= SymbSk(F  ), then the certiﬁcate
Proof sketch. By applying outer skolemization as described
in [Benedetti, 2005] we turn the QBF instance F into a            .   +   −    +   −        +   −
                                                           C(M)  = [hCe , Ce i, hCe , Ce i, . . . , hCe , Ce i]
sat-equivalent purely universal formula: We substitute ev-             1  1     2  2        m    m
                                                           +                −
ery existential variable v dominated by {u1, u2, . . . , un} ⊆ with Ce = i(M, e), and Ce = i(M, ¬e) is valid for F .                                                            0           0             0
[e, f] ∧[e] ∧[¬c] ∧[c, f] ∧[¬c,¬f] ∧[¬e,¬f] ∧[¬e] ∧[¬e] ∧[e] ΓI0 , i.e. when Γ ⊆ Γ and I ⊆ I . Under this condition,
   {}   {}   {}    {}     {}     {}   {}   {}   {}                                               0
                                                          ΓI can be removed. In partial subsumption (Γ ⊆ Γ but
                                                                0
                                                          I 6⊆ I ) the subsumed clause is replaced by Γ 0 .
          d                                   d                                                 I∩I
                                                        • Substitution: We write [l/a]J , δ(l) ≤ δ(a), to denote
              b
     b                                  d                 the substitution of lΨ|δ(φ) for aΨ for each Ψ ∈ J :
                   b
                           a        d                              ΓI [l/a]J = (Γ[l/a])I∩J ∧ ΓI∩J     (4)
                                                      The rules above establish primitive manipulation capabilities
                                                      for the solver. It arranges these components into the following
                         1                            higher-level, satisﬁability-preserving transformations.

                                                      Assignment. When  [l]J is realized to be a consequence of
  Figure 2: Symbolic propositional skolemization for (1). F (i.e.: for all Ψ ∈ J , it is P rop(F) ` lΨ), the formula
                                                          is simpliﬁed to F ∗ [l]J by assigning [l]J , i.e. resolving
                               i                          against [¬l]J and subsuming against [l]J .
Proof. The propositional variable sΨ in P rop(F), F =
SymbSk(F  ) represents, for each i ∈ [1, m] and each Ψ = Equivalence reasoning. If the solver discovers a proof that
               k                                             J
hψ1, . . . , ψki ∈ B , k=δ(ei), the value the Skolem function
                                                          [a]↔[l] (i.e.: ∀Ψ∈J , P rop(F) ` aΨ|δ(a) ↔lΨ), it is en-
 (i)
s  (u1, . . . , uk) (introduced to skolemize ei ∈ var∃(F )) as- titled to simplify F by applying the substitution [l/a]J .
sumes under the universal hypothesis [u1=ψ1, . . . , uk =ψk]. Redundancy removal. Subsumption is applied to eliminate
By construction, F embodies the deﬁnability of the skolem subsumed clauses. This may heavily reduce the burden
terms, i.e. all the mutual constraints among (interpretation on the solver, while logical equivalence is preserved.
of) terms that have to be obeyed to always satisfy the ma- Variable elimination. The clauses containing a variable d
trix. A model M for F is a way to comply with all these   are replaced by the set of resolvents of every clause con-
                  (i)
constraints at once: s (ψ1, . . . , ψk) has to evaluate to 1 if taining d against each clause containing ¬d (Figure 3).
 (i)                    (i)
sΨ  ∈ P rop(M), to 0 if ¬sΨ ∈ P rop(M), and is uncon-     Symbolic elimination rules out one symbolic variable,
strained otherwise. By comparing the resulting functions  hence all the related ground variables at once.
                                                     As far as we are concerned, a solution-based evaluation pro-
                   1           if hψ , . . . , ψ i ∈ C+
                                  1     k     e      cedure is an algorithm that produces a (memory and time af-
se(ψ , . . . , ψ ) = 0         if hψ , . . . , ψ i ∈ C−
    1      k                       1     k     e      fordable) sequence of instantiations of the above rules, and
                  undefined   otherwise
                                                      guarantees to end up with the empty formula on sat instances,
with Deﬁnition 3.1 (valid certiﬁcates) the thesis follows.  and with a contradiction (an empty clause) on unsat formu-
                                                      las. Each step is a back-chaining reduction from a problem F 0
5.3  Evaluating symbolic formulas                     to a problem F. Hence, a model for the original instance is
We devote our attention to solution-based procedures [Biere, not directly extracted. Rather, satisﬁability equivalence guar-
2004; Pan and Vardi, 2004; Benedetti, 2005], as they may be antees that at each step, should F have a model, than a model
lifted to extract models symbolically. We consider a solver for F 0 could be (easily) derived.
that manipulates symbolic clauses through rules designed to This apparent drawback suddenly turns into an advantage.
achieve at once on ΓI the same result ground rules would It indeed allows to decouple evaluation from model recon-
obtain if applied separately to each clause in P rop(ΓI ). struction, with almost no overhead for the former and a clear
  • Resolution: Given two resolving clauses containing the semantics for the latter. The two meshes of the chain are con-
    same variable e in opposite polarities, we construct a nected through an inference log, produced by the solver, and
    necessary consequence—called resolvent clause—made subsequently read by a model reconstructor.
    up by all the literals from both originating clauses apart Deﬁnition 5.3 (Inference log and trace) An inference log is
    from e and ¬e. For the symbolic version to produce at a list of entries, each one describing an instantiation of one
    most one symbolic resolvent per step, we only resolve on of the above sat-preserving transformations. It contains:
    variables with the same universal depth as all the clauses
                                            0           • hassign, l, J i, for an assignment [l]J .
    in which they appear. The resolvent of ΓI and ΓI0 on e,
    with e∈Γ, ¬e∈Γ0, δ(Γ)=δ(Γ0)=δ(e), is2.              • hsubst, a, l, J , Gi, for a substitution [l/a]J , where G is
                           0                              the set of clauses containing {a, ¬l} or {¬a, l}.
                (Γ \ {e} ∪ Γ \ {¬e})  0         (3)
                                  I∩I                   • helim, d, G+, G−i, for the elimination of d, where G+
    If either I ∩ I0 = ∅ or Γ and Γ0 share further couples and G− are the sets of clauses containing d and ¬d.
    of complementary literals other than e and ¬e, the resol- Let us denote with I(F, op) the formula obtained by ap-
    vent represents an empty set of clauses and is removed. plying to F the transformation described by the entry op.
                                    0
  • Subsumption: ΓI is subsumed by Γ  0 when all the
                                    I                 An inference log L = [op1, op2, . . . , opt] induces an infer-
    ground clauses in ΓI are subsumed by some clause in
                                                      ence trace [F0, F1, . . . , Ft] where Fi = I(Fi−1, opi), with
                                                      F  = F. A log such that F is empty is called sat-log for F.
  2To simplify the notation, we omit the projection of the index 0           t
sets of derived clauses onto the proper subspaces: Whenever ΓI is Clearly, a sat-log for F exists iff F is sat. For example, the

derived, the clause actually inserted into the formula is ΓI|δ(Γ) . reader may verify that Figure (4) depicts a sat-log for (1).