                                   The Concurrent, Continuous FLUX 

                                                     Yves Martin 
                                           Technische Universitat Dresden 
                                             D-01062 Dresden, Germany 
                                               yml@inf.tu-dresden.de 


                        Abstract                               over time. A car moving on a road with a constant veloc•
                                                               ity v, for instance, can be represented by a 'process fluent' 
     FLUX belongs to the high-level programming lan•
                                                               Movement where the parameter x0 denotes the 
     guages for cognitive agents that have been devel•         location of the car at the time when the motion was initi•
     oped in recent years. Based on the established,           ated. The fluent Movement itself, although it describes the 
     general action representation formalism of the Flu•       particular continuous change for the 
     ent Calculus, FLUX allows to implement complex            location x of the car at the time t, will stay unchanged until 
     strategies in a concise and modular fashion. In           some other action will affect it. Continuous change is then 
     this paper, we extend the FLUX language to reason         modeled by fluents describing arbitrarily complex, continu•
     about domains involving continuous change and             ous processes. These fluents remain stable in between the oc•
     where actions occur concurrently. Using constraint        currence of two consecutive actions, and yet they internally 
     logic programming, we show that this reasoning is         represent continuous change. 
     performed in an efficient way. 
                                                                 In a world full of ongoing processes, however, an agent ex•
                                                               ecuting a plan is not the only source of change. Also the laws 
1 Introduction                                                 of physics frequently imply an evolution of the environment, 
                                                               like for example, the action of a falling ball bouncing when it 
One of the most challenging and promising goals of Artificial  reaches the floor. The fundamental property of such so-called 
Intelligence research is the design of autonomous agents, in•  natural actions [Reiter, 1996] is that they must occur at their 
cluding robots, that solve complex tasks in a dynamic world.   predicted times, provided no earlier actions (natural or delib•
To reach autonomy in partially known, constantly changing      erative) prevent them from occurring. Because such actions 
environments requires the high-level cognitive capabilities of may occur simultaneously, concurrency must be accommo•
reasoning and planning. Using a mental model of the state      dated. 
of their environment allows for the agents to calculate the      In this paper, we present a FLUX system which allows for 
outcome of different action sequences in advance and then      the design of intelligent agents that reason and plan in do•
choose the best plan to execute for a specific goal in mind.   mains involving continuous change and where actions occur 
   Formal theories of reasoning about actions and change       concurrently. Using the paradigm of constraint logic pro•
have the expressive power to provide such high-level capa•     gramming, our extension to FLUX integrates both kinds of 
bilities. The Fluent Calculus [Thielscher, 1999], as one of the actions, deliberative and natural, into one method for the 
established action representation formalisms, uses the con•    planning and execution of actions. Reasoning in terms of 
cept of state update axioms to solve the representational and  time intervals, our method allows for the efficient genera•
inferential aspect of the classical Frame Problem. Based       tion of plans in concurrent, continuous environments. Our 
on this formal theory, the high-level programming method       work is based on the theoretical approach presented in [Herr•
FLUX has been developed in recent years [Thielscher, 2002].    mann and Thielscher, 1996; Thielscher, 2001a]. Other exist•
Using the paradigm of constraint logic programming, the        ing agent programming methods like the robot control lan•
powerful FLUX kernel provides general reasoning facilities,    guage developed in [Shanahan and Witkowski, 2000] or the 
so that the agent programmer can focus on the high-level de•   GOLOG programming language [Levesque et al., 1997], do 
sign of intelligent agents.                                    not handle, in domains involving concurrency and continu•
   Autonomous agents in real-world environments have to        ous change, the concept of a natural action at all or only 
take into account that the execution of actions takes differ•  have separate accounts for natural actions on the one hand 
ent amounts of time. Some actions can be modeled as dis•       [Reiter, 2001] and for deliberative actions on the other hand 
crete changes, others involve continuous change and should     [Grosskreutz, 2002]. 
rather be seen as the initiation or termination of complex pro•  In the next section, we introduce our example scenario and 
cesses. Such processes may contain parameters whose values     shortly recapitulate the fundamentals of the FLUX system. 
change continuously and which are formalized as functions      We then give briefly the theoretic solution in the Fluent Cal-


REASONING ABOUT ACTIONS AND CHANGE                                                                                  1085  cuius. Thereafter, we present our extension of FLUX to con•
 current, continuous domains and discuss the employed con•
 strained handling techniques. In the last section we conclude 
 and show some possible future work. All programs are avail•
 able on our web site: http: //www. fluxagent. org/ 
 2 FLUX 
 The example agent program in this paper is set in a waterway 
scenario. The agent has to steer a barge through a system of 
 canals. The water levels in the canals are dependent on tides. 
 At some places of the canals there are locks which a ship can 
 only pass on a high tide. Due to the geographical facts the tide 
 levels differ for different locks. The canals themselves are 
too small to turn around but sometimes there are intersections 
 where the agent steering the barge can choose one direction   Figure 1: An example waterway scenario where the goal for 
(see also Fig. 1).                                             the agent is to steer the barge from cell (1,2) to the harbor at 
   To develop an agent for this scenario, we use the high-     cell (3,2). There are three locks at cells (1,3), (1,1), (2,2). 
 level programming method FLUX which is grounded in the 
action theory of the Fluent Calculus. The Fluent Calculus 
 is a many-sorted predicate logic language with four stan•       In our waterway scenario there are two elementary actions: 
dard sorts: FLUENT, STATE, ACTION, and slT(for situations)     GoByShip{d), the deliberative action of the agent to steer 
 [Thielscher, 1999]. States are compose of fluents (as atomic  the barge to the next cell which lies in the direction d, and 
states) using the standard function o : STATE STATE            TurnTide the natural action indicating the turn to the 
 STATE and constant STATE (denoting the empty state).          tide w at lock I. The fundamental Frame Problem is solved 
The program for our agent, for example, uses these two flu•    in the Fluent Calculus by a so-called state update axiom for 
ents: representing that the barge is at cell                   each action, which describes the effects of the action in terms 
at time and Tide denoting that at time the wa•                 of the difference between the states before and after the ex•
ter level at lock I is at high/low tide. Similarly as in the   ecution of it. For example, the action TurnTide can be 
 Situation Calculus [Reiter. 2001], the constant denotes the   specified as 
initial situation and the situation after having per•
formed action a in situation s at time t. The state of a situation 
 s is denoted by the standard function State(s). For example, 
the initial state in the waterway scenario of Fig. 1 may be 

axiomatized as2 

                                                               where "-" and "+" are macros for fluent removal and addi•
                                                               tion; and the macro Poss denot•
                                                               ing in the Fluent Calculus that at time t action a is possible in 
The reader may notice that an incomplete state with addi•
                                                               state State(s). 
tional negative information has been specified, i.e., the sub-
                                                                 To reflect the incomplete knowledge of an agent about its 
STATE may contain many more fluents, but no more At or 
                                                               environment, incomplete states are encoded in FLUX as open 
 Tide fluents. The foundational axioms of the Fluent Calculus 
                                                               lists, that is, lists with a variable tail, of fluents [Thielscher, 
ensure that the composition function exhibits the proper•
                                                               2002]. These lists are accompanied by constraints for negated 
ties of the union function for sets (with is the empty set), so 
                                                               state knowledge as well as for variable range restrictions. The 
that a state is identified with all the fluents that hold. On this 
                                                               constraints are of the form NotHolds\ , indicating that flu•
basis, the macros Holds and Holds we defined as 
                                                               ent does not hold in state and NotHoldsAlll indicat•
follows: 
                                                               ing that no instance of holds in z. In order to process these 
                                                               constraints, so-called declarative Constraint Handling Rules 
                                                               [Friihwirth, 1998] have been defined and proved correct un•
                                                               der the foundational axioms of the Fluent Calculus (for details 
   'in anticipation of the integration of continuous change, the ar• see [Thielscher, 2002]). 
gument t denotes the time when a fluent becomes true or an action For example, the initial state depicted in Fig. 1 may be 
takes place.                                                   specified by this clause, 
   2Predicate and function symbols, including constants, start with init(ZO) :-
a capital letter whereas variables arc in lower case. Free variables Z0=[at(1,2,0.0),tide(lockl,high,0.0),tide( 
in formulas are assumed universally quantified. Variables of sorts   lock2,high,0.0),tide(lock3,high,0.0) 
FLUENT, STATE, ACTlON,and SIT shall be denoted by letters /, z, a, not_holds_all(at(_,_,_), Z), 
and s, respectively. The function o is written in infix notation. not_holds_all(tide(_,_,_), Z). 


1086                                                                       REASONING ABOUT ACTIONS AND CHANGE which also reflects the negative information that no , fluent  action 
occurs in sub-state (the location of our agent is unique), 
and that there are no more Tide fluents other than specified 
                                                               State update axioms for concurrent actions are recursive. 
in state 
                                                               They specify the effect of an action relative to the effect of 
   The predicate Poss realizes the precondition ax•
                                                               arbitrary other, concurrent actions: 
ioms for actions, that is, it defines under which conditions an 
action is possible at time t in state z. There is one such pred•
icate clause for each action. Conditioning in FLUX is based 
on the foundational predicates Knows KnowsNot\ 
and Knows Val representing that the agent knows that           I.e., are the additional negative and positive, re•
fluent / holds (respectively, does not hold) in state and that 
                                                               spectively, effects which occur if action a is performed be•
there exist ground instances of the variables in such that 
fluent / is known to be true in state Take, for example,       sides c. Here, can be a single action or a compound action 
the precondition axiom for the action TurnTide which is        which produces synergic effects, that is, effects which no sin•
implemented as follows,                                        gle action would have if performed alone. Using recursive 
                                                               state update axioms, the effect of, say, two simultaneous but 
poss (turntide(L,W) ,T, Z) :-                                  independent actions can be inferred by first inferring the ef•
  (W=high, knows_val([L,TR],tide(L,low,TR),Z),                 fect of one of them and, then, inferring the effect of the other 
   duration(L,low,D);                                          action on the result of the first inference. The recursions stops 
   W=low/ knows_val([L,TR],tide(L,high,TR),Z),                 with the base case of the empty action, which is defined as: 
   duration(L,high,D)), 
  {T =:= TR + D}. 

where the auxiliary predicate Duration denotes the             Two or more actions may interfere when executed concur•
duration of the corresponding tide at lock/. The execu•        rently, which is why the condition in the above state update 
tion time of the action will be constrained, using the syn•    axiom may restrict the applicability of the implication in view 
tax of the constraint handling library CLP(R) of the Eclipse-  of concurrent action c. 
Prolog system, to be the sum of the starting time of the old     Integrating continuous change in the Fluent Calculus re•
tide plus the duration of the old tide. 
                                                               quires the introduction of process fluents which can repre•
   As in the Fluent Calculus, the effects of actions are       sent arbitrarily complex, continuous processes. Because such 
encoded as state update axioms. For this purpose, the          processes may be modeled by equations of motions, contin•
FLUX kernel provides a definition of the auxiliary predi•      uous time must be represented. To this end, the new sort 
cate Update Its intuitive meaning is that                      REAL is added, which is to be interpreted as the real numbers 
state is the result of positive and negative effects and [Thielscher, 2001a]. The sort is accompanied by the usual 
     respectively, wrt. state In other words, the pred•        arithmetic operations along with their standard interpretation. 
icate encodes the state equation 
                                                               The continuous Fluent Calculus includes the pre-defined flu•
On this basis, the agent programmer can easily implement 
                                                               ent StartTime where is of sort REAL, determining the 
the update axioms by clauses which define the predicate 
                                                               time Start at which a state arises, provided that StartTime 
StateUpdate as for example in the following en•
                                                               is unique: 
coding for the action TurnTide 
state_update(Zl,turntide(L,W),T,Z2) :-
 holds(tide(L,WO,TO),Zl), 
 W=high, update(Zl,[tide(L,high,T)], 
                         [tide(L,WO,TO)],Z2);                  As already indicated throughout the paper, a parameter t of 
 W=low, update(Zl,[tide(L,low,T)],                             sort REAL is also used to denote the time at which a fluent 
                        [tide(L,WO,TO)],Z2).                   arises as in or to represent the occurrence of an 
                                                               action as in A standard requirement for the possi•
                                                               bility to perform a concurrent action c at time t in state may 

3 The concurrent, continuous Fluent Calculus                   then be expressed as follows:4 
The Fluent Calculus for concurrent actions is based on the 
additional pre-defined sort CONCURRENT, of which ACTION 
is a sub-sort [Thielscher, 2001a]. Single actions which are      The Fluent Calculus for continuous change includes 
performed simultaneously are composed to terms of sort         the distinction between deliberative and natural actions 
CONCURRENT by a new binary function. The latter is de•         [Thielscher, 2001a]. The latter are not subject to the free 
noted by "•" and written in infix notation. This function      will of a planning agent. Rather they happen automatically 
shares with the function combining fluents to states the prop• under specific circumstances. In our example domain, the 
erties of associativity, commutativity, idempotency and exis•
                                                                  3 Variables of the new sort CONCURRENT are denoted by the let•
tence of a unit element. The constant (read: of ter c. 
sort CONCURRENT acts as the unit element wrt. function ".".       4In our example domain we have no actions that are in mutual 
Similar to the Holds macro the abbreviation is used            conflict. Therefore, we do not need to specify additional constraints 
to denote that concurrent action C1 is included in concurrent  in this precondition axiom. 


REASONING ABOUT ACTIONS AND CHANGE                                                                                  1087  action of the turn of the tide is a natural one. The standard with continuous change to the new value t. Similar to the 
 predicate Natural [adopted from [Reiter, 1996]] declares      encoding of the macros for fluent removal and addition, the 
 the action a to be natural. To facilitate the formalization   predicate Update is used in the clause for the recursive case 
 of the automatic evolution of natural actions, the continu•   to implement the elimination of one single action from a term 
 ous Fluent Calculus introduces two macros. The expression     of arbitrary other, concurrent actions. 
 ExpectedNatActions\ shall indicate that in state ac•            Consider, for example, the state update axiom of the single 
 tions c are all the natural actions that are expected to happen action GoByShip(d) which is implemented as: 
 at time /:                                                    state_update(Zl,gobyship(D) ,T,Z2) : -
                                                                knows_val([X,Y],at(X,Y,TO),Zl), 
                                                                holds(starttime(ST),Z1), {T >= ST + 1.0}, 
                                                                adjacent(X,Y,D,X1,Yl), 
                                                                update(Zl,[at(XI,Yl,T)],[at(X,Y,TO)],Z2). 
Given the above notion, the macro NextNatActions 
                                                               That is, the location of the barge together with the 
stands for the concurrent action c being all natural actions that 
                                                               agent will be updated from the old position to 
happen in state z at time t with t being the earliest possible the new cell where the auxiliary predicate 
time point at which natural actions are expected:              Adjacent computes the adjacent cell 
                                                               lying in direction d of cell The travel from one cell to 
                                                               another is assumed to take one hour in our example scenario. 
                                                               Therefore, although the execution time t of this action is not 
                                                               fixed by the clause in any way, the effects of the action man•
The Fluent Calculus for continuous change uses the notion of   ifest at least one hour later as the formation of the old state. 
a situation tree with trajectories [Thielscher, 2001a] where a Now take, e.g., the FLUX query 
trajectory is associated with a situation and denotes the fur•
                                                               ?-init(Z0), res(Z0,sO,[gobyship(3), 
ther evolution of the state determined by the natural actions                 turntide(lock3,low)],2.0,Z1,S1). 
that are expected to happen. We do not follow this approach 
in this paper, as the original motivation for employing tra•   together with the above definition of the state update axiom 
                                                               and the definitions for the predicate Init (with the addi•
jectories has been domains with uncertainty about the occur•
                                                               tional inclusion of fluent starttime (0.0)) and the state up•
rence of natural actions, and we do not consider such domains  date axiom of action TurnTide given in Section 2. Together 
here. The incorporation of domains with uncertain natural ac•  with an appropriate encoding of the fact that a high tide lasts 
tions is left for further work. Instead, we include the natural two hours at the third lock, duration (lock3 , high, 2.0), 
actions in the situation terms, as with deliberative actions.  and the knowledge that going south is represented by direc•
                                                               tion number 3, our extension of FLUX can infer the effects 
4 Integrating Concurrency and Continuous                       of this concurrent action by first inferring the effects of ac•
                                                               tion gobyship(3) and on the result of this inference infer 
     Change into FLUX                                          the effects of action turntide (lock3, low). FLUX yields 
Similar to the binary function which denotes the compo•        the correct substitution: 
sition of states from single fluents and is represented in FLUX Zl=[at(1,1,2.0),tide(lockl,high,0.0), 
by a list of fluents, we represent the binary function "•" as a     tide(lock2,high,0.0),tide(lock3,low,2.0), 
list of actions in FLUX. In this way, we introduce concur•          starttime(2.0)|Z] 
rency into FLUX, i.e., all the actions in the list are performed Sl=do([gobyship(3), 
concurrently. On this basis, the unit element of the function           turntide(lock3,low)],2.0,sO) 
"•", the constant is encoded as the empty list [].               Continuous time is, as already shown above and in Sec•
  Given the notion of a list of concurrent actions, the state up• tion 2, easily integrated into FLUX. The Eclipse-Prolog sys•
date axioms for the actions are defined recursively in FLUX.   tem Version 5.4, which we use, includes the constraint han•
The predicate Res specifies the                                dling library CLP(R). This library allows for solving linear 
effect of performing at time t the list of concurrent actions li constraints with real numbers. Its syntax requires for con•
in state z\ and situation si, and leading to the new state z% 
                                                               straints to be included in braces. 
and the new situation Do after the execution of the 
                                                                 The precondition axioms and state update axioms for nat•
concurrent actions. It represents one plan step and is encoded 
                                                               ural actions are encoded in our extension of FLUX in the 
as follows 
                                                               same fashion as for deliberative actions (see Section 2). Ad•
res(Zl,Sl, [],T,Z2,S1) :-                                      ditionally, we include an implementation for the predicate 
 holds(starttime(TO), Zl) ,                                    Natural(a) which is as follows for the example domain: 
 update(Zl,[starttime(T)],[starttime(TO)],Z2). 
                                                                             :- A=turntide(L,W) , 
                                                                                 (L=lockl; L=lock2; L=lock3). 
res(Zl,Sl,[A|L],T,Z2,do([A|L],T,S1)) :-
 update* [A|L] , [] , [A] ,L1) ,                               Given this predicate, we model the macro 
 state_update(Zl, A, T, Z3) ,                                  ExpectedNatActions by the built-in second order 
 res(Z3,_,Ll,T,Z2,_).                                          predicate SetOf as follows: 
where the clause for the base case of the recursion extends    setof(A, (natural(A),poss(A,T,Z)), C) 
the effect of the constant "e", which by itself has none, to   On this basis, the macro NextNatActionsI is defined in 
update the pre-defined fluent Start71me(t) needed for FLUX     FLUX as: 


1088                                                                       REASONING ABOUT ACTIONS AND CHANGE NextNatTime(T,Z) :-                                            Given the predicate Goal, we define a recursive predicate 
  natural (A) , poss(A,T,Z),                                   Ida representing the sequence of actions 
  not (natural(Al), poss(A1,T1,Z), T1<T), !.                   which leads from the initial state in the initial situation 
                                                               to the goal state in steps. This predicate implements the 
NextNatActions(C,T,Z) :- NextNatTime(T,Z),                     iterative deepening algorithm, which is optimal and complete 
  setof(A, (natural(A),poss(A,T,Z)), C).                       [Russell and Norvig, 1995]. It is encoded as follows: 
   Having defined natural actions in the same way as delib•    ida(Z0,S0,Z,S,N) :-
erative ones leads to the question: How to combine delibera•    exec(Z0,S0,Z,S,N), goal(Z) ; 
tive and natural actions into one common approach for plan•     Nl is N+l, findplan(ZO,SO,Z,S,Nl). 
ning? Natural actions must occur at their predicted times.       The precondition axiom for the action GoByShip is speci•
The times for the execution of deliberative actions are not    fied in the following way: 
fixed in advance. How to determine these execution times? 
The examination of every possible time would lead to a com•    poss(gobyship(D), T,Z) : -
binatorial explosion and is, in general, not possible for time  knows_val([X,Y],at(X,Y,_), Z), 
of sort REAL. One general solution, which reduces the search    directions(X,Y,DL), member(D,DL) 
space to a minimum and still yields answers for all possible    adjacent (X, Y,D,X1, YD , 
domains, is to use qualitative instead of quantitative infor•    (lockplace(L,Xl,Yl), 
mation. We only consider periods of time in our approach.         knows_val([L,W,T0],tide(L,W,TO),Z), 
There we discriminate three time intervals for a deliberative     (W=high; W=low, 
action wrt. the next expected natural action(s): Firstly, the      duration(L,low,TD), {T>=T0+TD})); 
deliberative action can be postponed to the next plan step and    not (lockplace(L,Xl,Yl)). 
the (possible set of) natural action(s) is executed. Secondly, That is, after having determined the current location, the aux•
the deliberative action is performed before all natural actions iliary predicate Directions delivers a list of possi•
which are expected next. Finally, the deliberative action and 
                                                               ble directions for the cell i and the standard predicate 
the natural actions are joined toeether to a new concurrent 
action. The predicate Exec encodes the                         Member selects one direction ri. Afterwards, with the help 
                                                               of the auxiliary predicate LockPlace denoting the oc•
recursive planner for a plan with depth steps integrating de•
liberative and natural actions into one method. The computed   currence of a lock / at cell the adjacent cell 
                                                               is searched for a lock. If there is none, the action is possi•
plan leads from state z\ and situation si to the new state z2 
and the new situation s2. The predicate is implemented as      ble without further constraints for the execution time t. In 
exec(Zl,Sl,Zl,Sl,0).                                           the other case, the water level at the lock must be high or the 
                                                               action has to be executed after the disappearance of the low 
exec(Zl,SI,Z2,S2,Depth) :-                                     tide. Specifying the preconditions for the actions GoByShip 
  Depth>0/ NextNatActions(C,T,Z),                              and TurnTide as given above and in Section 2, respectively, 
  ({71=7}, C1=C;                                               fulfills the general condition for the possibility to perform a 
   action(A), poss(A,TA,Zl),                                   concurrent action as given in Section 3. 
   holds(starttime(TO), Zl), {TA>=T0},                           Consider now, for example, all specified FLUX clauses to•
   ({TA<T, T1=TA}, C1=[A];                                     gether with suitably specified facts for the example domain 
    {TA=T, T1=T}, append([A],C,C1))),                          and the following query: 
  res(Zl,Sl,Cl,Tl,Z3,S3), Depthl is Depth-1, 
                                                               ?-init(ZO), ida(Z0,s0,Z,S,l). 
  exec(Z3,S3,Z2,S2,Depthl). 
                                                               Our extended FLUX system then generates a plan with four 
where the predicate Action(a) defines the action a to be de•   steps and yields the following substitutions and linear con•
liberative and the auxiliary built-in predicate Append appends straints: 
two list. For our example domain, the predicate Action is en•
                                                               Z = [start(TA_2),at(3,2,TA_2),tide(lock3, 
coded by the fact action (gobyship To ensure that                    high,4.0),tide(lockl,low,4.0) , 
the time never goes backward, the execution time TA of the           tide(lock2,high,0.0)|_] 
deliberative action is constrained in an appropriate way. 
   Reasoning with time constraints instead of real time ren•   S = do([gobyship(2)], do([gobyship(1), 
ders planning efficient. Using this plan method we are left         turntide(lockl,low),turntide(lock3,high)], 
with only three choices regarding the execution time of a de•       do([gobyship(2),turntide(lock3,low)], 
liberative action. Furthermore, the order of these choices,         do([gobyship(3)j,sO,TA_l),2.0),4.0),TA_2) 
which represents a kind of heuristic, can be adjusted to the 
                                                               Linear constraints: TA_1>=1.0, TA_1<2.0 
concrete domain at hand. Only after a plan, where the con•
                                                                                         TA_2>=5.0, TA_2<6.0 
straint solution lies in the appropriate time intervals, has been 
computed, a concrete time for the execution of the actions is  The above sequence of actions s constitutes a solution to our 
fixed and the actions are executed.                            planning problem given in Fig. 1. It is not yet completely 
                                                               specified. Rather, the execution times of some deliberative 
   To complete our planning method, we include the follow•
                                                               actions are given as time intervals. The reader may also notice 
ing definition of the predicate Goal(z) denoting the goal state that some deliberative actions are planned simultaneously to•
z,                                                             gether with natural actions. Finally, we can apply the built-in 
goal(Z) :- knows(at(3,2,_),Z).                                 predicate Minimize(t), which tries to find a minimal solution 
where the goal in our example scenario is that the barge       for a constraint variable t, to the above linear constraints and 
is situated at the harbor in cell (3,2) (see also Fig. 1).     get the following: 


REASONING ABOUT ACTIONS AND CHANGE                                                                                   1089 