           Integrating Planning and Temporal Reasoning for Domains with
                                 Durations and Time Windows
                      Alfonso Gerevini+      Alessandro Saetti+      Ivan Serina∗
    + Dip. Elettronica per l’Automazione, Universita` di Brescia, via Branze 38, 25123 Brescia, Italy
         ∗ Dept. of Computer and Information Systems, University of Strathclyde, Glasgow, UK
                   E-mail: {gerevini,saetti}@ing.unibs.it ivan.serina@cis.strath.ac.uk

                    Abstract                          domain action. The obvious meaning of (at t L) is that L
   The treatment of exogenous events in planning is prac- is true from time t. A set of these assertions involving the
   tically important in many domains. In this paper we same ground predicate deﬁnes a sequence of disjoint time
   focus on planning with exogenous events that happen windows over which the timed predicate holds. An example
   at known times, and affect the plan actions by impos- in the known benchmark domain “ Zenotravel” is
   ing that the execution of certain plan actions must be (at 8 (open-fuelstation city1))
   during some time windows. When actions have du-      (at 12 (not (open-fuelstation city1)))
   rations, handling such constraints adds an extra dif- (at 15 (open-fuelstation city1))
   ﬁculty to planning, which we address by integrating  (at 20 (not (open-fuelstation city1)))
   temporal reasoning into planning. We propose a new   These assertions deﬁne two time windows over which
   approach to planning in domains with durations and (open-fuelstation city1)   is true. A timed initial literal
   time windows, combining graph-based planning and   is relevant to the planning process when it is a precondition
   disjunctive constraint-based temporal reasoning. Our of a domain action, which we call a timed precondition of the
   techniques are implemented in a planner that took part action. Each timed precondition of an action can be seen as
   in the 4th International Planning Competition showing a temporal scheduling constraint for the action, deﬁning the
   very good performance in many benchmark problems.  feasible time window(s) when the action can be executed.
                                                        When actions in a plan have durations and timed precondi-
1  Introduction                                       tions, ﬁnding a valid plan is a complex task that requires inte-
                                                      grating planning and reasoning about time, to check whether
In many real-world planning domains, the execution of cer-
                                                      the execution of the planned actions can satisfy their schedul-
tain actions can only occur during some predeﬁned time win-
                                                      ing constraints. If an action in the plan cannot be scheduled,
dows where one or more necessary conditions hold. For in-
                                                      the plan is not valid, and it must be revised.
stance, we can refuel a car at a gas station only during speciﬁc
                                                        The main contributions and organization of this work
period(s) of the day (when the gas station is open). The truth
                                                      are: (i) a new representation of temporal plans with ac-
of these conditions is determined by some exogenous events
                                                      tion durations and timed preconditions, integrating disjunc-
that happen at known times, and that cannot be inﬂuenced by
                                                      tive constraint-based temporal reasoning into a recent graph-
the actions available to the planning agent (e.g., the closing
                                                      based approach to planning (Section 2); (ii) a polynomial
of the fuel station).
                                                      method for solving the disjunctive temporal reasoning prob-
  Several frameworks supporting durations and time win-
                                                      lems that arise in our context (Section 2); (iii) some new local
dows have been proposed (e.g., [Vere, 1983; Muscettola,
                                                      search heuristics to guide the planning process using our rep-
1994; Laborie & Ghallab, 1995; Schwartz & Pollack, 2004]).
                                                      resentation (Section 3); (iv) an experimental analysis evaluat-
However, most of them are domain-dependent systems or
                                                      ing an implementation of our approach, showing good perfor-
are not fast enough on large-scale problems. In this paper,
                                                      mance with respect to other recent domain-independent tem-
we propose a new approach to planning with these temporal
                                                      poral planners (Section 4).
features, that combines graph-based planning and constraint-
based temporal reasoning.
  The last two versions of the language of the Interna- 2 Temporally Disjunctive Action Graph
tional planning competition, PDDL2.1 and PDDL2.2, support In our approach, we represent a (partial) plan for a domain
planning with action durations and deterministic exogenous with timed initial literals through an extension of the linear
events [Fox & Long, 2003; 2004; Edelkamp & Hoffmann,  action graph representation [Gerevini, et al., 2003], which we
2004]. In particular, in PDDL2.2, deterministic exogenous call Temporally-Disjunctive Action Graph (TDA-graph).
events can be represented by timed initial literals, one of the
new PDDL features on which the 2004 competition focused. 2.1 Background: Linear Action Graph
Timed initial literals are stated in the description of the ini- A linear action graph (LA-graph) A for a planning problem
tial state of the planning problem through assertions of the Π is a directed acyclic leveled graph alternating a fact level,
form “(at t L)”, where t is a real number, and L is a ground and an action level. Fact levels contain fact nodes, each of
literal whose predicate does not appear in the effects of any which is labeled by a ground predicate of Π. Each fact nodef at a level l is associated with a no-op action node at level Level 1    Level 2    Level 3   Goal level
                                                                                      (−)
l                                              f                (0)
 representing a dummy action having the predicate of as       p1    p1   p1    p1   p1
its only precondition and effect. Each action level contains
                                                                      mutex                      (90)
one action node labeled by the name of a domain action that     (0)       (50) (50)  (50)
                                                                                                p9
it represents, and the no-op nodes corresponding to that level. p2
                                                                         p5    p5    p5   a3
  An action node labeled a at a level l is connected by incom-      a                      [15]
                                                                     1               (70)           (90)
ing edges from the fact nodes at level l representing the pre-                             (75)
                                                         (0)         [50]            p               a
conditions of a (precondition nodes), and by outgoing edges          (0)             7                end
                                                       astart p3           (−)
                                                                                      (70) (70) (70)
to the fact nodes at level l+1 representing the effects of a (ef- (0)    p6
fect nodes). The initial level contains the special action node                      p8   p8   p8
astart, and the last level the special action node aend. The                   a2
                                                                (0)  (0)  (0)        (70)  (70) (70)  (70)
effect nodes of astart represent the positive facts of the initial             [70]
                                                              p     p    p     (0)  p     p    p     p
state of Π, and the precondition nodes of aend the goals of Π. 4     4    4          9     9    9     9
  A pair of action nodes (possibly no-op nodes) can be con-
strained by a persistent mutex relation, i.e., a mutually ex- Figure 1: An example of LA-graph with nodes labeled by T -
clusive relation holding at every level of the graph, imposing values. Square nodes are action nodes; circle nodes are fact nodes.
that the involved actions can never occur in parallel in a valid Dashed edges form chains of no-ops blocked by mutex actions. The
plan. Such relations can be efﬁciently precomputed using an T -values are the numbers inside round brackets. The action dura-
algorithm given in [Gerevini, et al., 2003].          tions are the numbers inside square brackets. Unsupported precon-
  An LA-graph A also contains a set of ordering constraints dition nodes are labeled “(–)”.
between actions in the (partial) plan represented by the graph.
These constraints are (i) constraints imposed during search to be encoded into a Simple Temporal Problem (STP) [Dechter,
deal with mutually exclusive actions: if an action a at level et al., 1991], i.e., a set of constraints of form y − x ≤ t,
l of A is mutex with an action b at a level after l, then a where y and x are point variables and t is a real number. For
is constrained to ﬁnish before the start of b; (ii) constraints instance, if ai ∈ π is used to support a precondition node of
                                                               +    −
between actions implied by the causal structure of the plan: aj, then a − a ≤ 0 is in C; if ai and aj are two mutex
if an action a is used to achieve a precondition of an action b, i  j
                                                      actions in π and a is ordered before a , then a+ − a− ≤ 0
then a is constrained to ﬁnish before the start of b.                i                 j      i    j
  The effects of an action node can be automatically propa- is in C. Moreover, for every action a ∈ π, the following STP-
gated to the next levels of the graph through the correspond- constraints are in C:
ing no-ops, until there is an interfering action “blocking” the a+ − a− ≤ Dur(a), a− − a+ ≤ −Dur(a).
propagation, or the last level of the graph has been reached. A scheduling constraint imposes that the execution of an
                                                      action must occur during the time windows associated with
2.2  Augmenting the LA-graph with Disjunctive         a timed precondition of the action. Syntactically, it is a dis-
     Temporal Constraints
                                                      junctive constraint c1 ∨ · · · ∨ cn, where ci is of the form
Let p be a timed precondition over a set W (p) of time win-
                                                                 (y1 − x1 ≤ k1) ∧ (y2 − x2 ≤ k2),
dows. In the following, x− and x+ indicate the start time and      i   i    i     i    i    i
                                                       1  1  2  2
end time of x, respectively, where x is either a time window yi , xi , yi , xi are action start times or action end times, and
                                                       1  2   R
or an action. We will describe our techniques focusing on ac- ki , ki ∈ . For every action a ∈ π with a timed precondition
tion preconditions that must hold during the whole execution p, the following disjunctive constraint is added to C:
of the action (except at the end of the action, as for PDDL2.1 _    +   −       −     +    +       +
“over all” conditions), and on operator effects that hold at the astart − a ≤ −w   ∧ a  − astart ≤ w   .
end of the action execution.1                          w∈W  (p)
  In order to represent plans where actions have durations Deﬁnition 1 A temporally disjunctive action graph (TDA-
and time windows for their possible scheduling, we augment graph) is a 4-tuple hA, T , P, Ci where
the ordering constraints of an LA graph with (i) action dura- • A is a linear action graph;
tion constraints and (ii) action scheduling constraints. Du-
ration constraints have form a+ − a− = Dur(a), where    • T is an assignment of real values to the nodes of A;
Dur(a) denotes the duration of an action a.2 Duration   • P is the set of time point variables corresponding to the
constraints are supported by the representation presented in start times and end times of the actions labeling the ac-
[Gerevini, et al., 2003], while the representation and treat- tion nodes of A;
ment of scheduling constraints are a major contribution of • C is a set of ordering constraints, duration constraints
this work.                                                and scheduling constraints involving variables in P.
  Let π be the plan represented by an LA-graph A. It is A TDA-graph  hA, T , P, Ci represents the (partial) plan
easy to see that the set C of the ordering constraints in A, formed by the actions labeling the action nodes of A with
extended with the duration constraints of the actions in π, can start times assigned by T . Figure 1 gives the LA-graph and
  1                                                   T -values of a simple TDA-graph. The ordering constraints
   Our methods and planner support all the types of operator con- and duration constraints in C are:3
dition and effect that can be speciﬁed in PDDL 2.1 and 2.2.
  2                                −       +             3                                         +
   The duration of astart and aend is 0, astart = astart and For brevity, in our examples we omit the constraints astart −
 −     +                                               −         +   −
aend = aend.                                          ai ≤ 0 and ai − aend ≤ 0, for each action ai.   +    −       +    −                                Solve-DTP(X, S)
  a1 − a3 ≤ 0, a2 − a3 ≤ 0,
   +    −        +    −        +    −                 1. if X = ∅ then stop and return S;
  a1 − a1 = 50, a2 − a2 = 70, a3 − a3 = 15.
                                                      2. x ← SelectVariable(X); X0 ← X − {x};
Assuming that p is a timed precondition of a3 with windows 3. while D(x) 6= ∅ do
[25, 50) and [75, 100), the only scheduling constraint in C is: 4. d ← SelectValue(D(x)); D(x) ← D(x) − {d};
    +      −          +    +                          5.   S0 ← S ∪ {x ← d};
  (astart − a3 ≤ −25 ∧ a3 − astart ≤ 50) ∨                   0
    +      −          +    +                          6.   D (x) ← D(x); /* Saving the domain values */
  (astart − a3 ≤ −75 ∧ a3 − astart ≤ 100).            7.   if ForwardChecking-DTP(X0, S0) then
  The pair hP, Ci deﬁnes a Disjunctive Temporal Problem D 8. Solve-DTP(X0, S0);
(DTP) [Stergiou & Koubarakis, 2000; Tsamardinos & Pol- 9.  D(x) ← D0(x); /* Restoring the domain values */
          4
lack, 2003]. Let Ds be the set of scheduling constraints in 10. return fail; /* backtracking */
D. We have that D represents a set Θ of STPs, each of which
consists of the constraints in D −Ds and one disjunct (pair of ForwardChecking-DTP(X, S)
STP-constraints) for each disjunction in a subset of D . We
                                             s        1. forall x ∈ X do
call a consistent STP in Θ an induced STP of D. If an induced 2. forall d ∈ D(x) do
STP contains a disjunct for every disjunction in Ds, we say 3. if not Consistency-STP(S ∪ {x ← d}) then
that such a (consistent) STP is a complete induced STP of D. 4. D(x) ← D(x) − {d};
  An STP is consistent iff it has a solution. A solution of 5. if D(x) = ∅ then return false; /* dead-end */
an STP is an assignment of real values to the variables of the 6. return true.
STP that is consistent with every constraint in the STP. Given
an induced STP, we can compute in O(n · c) time a solution Figure 2: Basic algorithm for solving a DTP. The input is the set
where each variable has the shortest possible distance from X of the meta-variables in the meta CSP of the DTP, and a (partial)
a+   [Dechter, et al., 1991; Gerevini & Cristani, 1997], for n solution S of the meta CSP. D(x) is a global variable storing the
 start                                                current domain of the meta variable x.
variables and c constraints. We call such a solution an optimal
solution for the induced STP under consideration.
  The values assigned by T to the action nodes of A are the time with a backtrack-free algorithm. Moreover, the algo-
                                                                                            −
action start times corresponding to an optimal solution of an rithm computes an optimal induced STP for aend.
induced STP. We call these start times a schedule of the ac- Without loss of generality, we can assume that each action
tions in A. The T value labeling a fact node f of A is the has at most one timed precondition. It is easy to see that we
earliest time t = Ta + Dur(a) such that a supports f in A, can replace a set of timed preconditions of an action a with
and a starts at Ta.                                   a single equivalent timed precondition, whose time windows
  If the induced STP from which we derive a schedule is are obtained by intersecting the windows forming the differ-
incomplete, T may violate the scheduling constraint of some ent original timed preconditions of a.
action nodes, that we say are unscheduled in T .        As observed in [Stergiou & Koubarakis, 2000; Tsamardi-
  The following deﬁnition gives a notion of optimality over nos & Pollack, 2003], a DTP can be seen as a “meta CSP”,
the complete induced STPs of a DTP that will be used in the where the variables are the constraints, and the values of the
next section.                                         meta-variables are the disjuncts forming the constraints. The
                                                      constraints of the meta CSP are not explicitly stated. Instead,
Deﬁnition 2 Given a DTP D with a point variable p, a com-
                                                      they are implicitly deﬁned as follows: an assignment θ of
plete induced STP of D is an optimal induced STP of D for
                                                      values to the meta-variables satisﬁes the constraints of the
p, iff it has a solution assigning to p a value that is less than
                                                      meta CSP iff θ forms a consistent STP (an induced STP of
or equal to the value assigned to p by every solution of every
                                                      the DTP). A solution of the meta CSP is a complete induced
other complete induced STP of D.
                                                      STP of the DTP.
  An optimal schedule is an optimal solution of an optimal Figure 2 shows an algorithm for solving the meta CSP of a
                −                                     DTP [Tsamardinos & Pollack, 2003], which is a variant of the
induced STP for aend. Note that an optimal solution mini-
mizes the makespan of the represented (possibly partial) plan. forward-checking backtracking algorithm for solving gen-
                                                      eral CSPs. By appropriately choosing the next meta-variable
2.3  Solving the DTP of a TDA-graph                   to handle (function SelectVariable) and its value (function Se-
                                                      lectValue), we can show that the algorithm ﬁnds a solution
In general, computing a complete induced STP of a DTP
                                                      (if one exists) with no backtracking. Moreover, by a simple
(if it exists) is an NP-hard problem that can be solved by
                                                      modiﬁcation of the basic algorithm, we can derive an algo-
a backtracking algorithm [Stergiou & Koubarakis, 2000;
                                                      rithm that is backtrack free even when the meta CSP has no
Tsamardinos & Pollack, 2003]. However, given the particular
                                                      solution. This can be achieved by exploiting the information
structure of the temporal constraints forming a TDA-graph,
                                                      in the LA-graph A of the TDA-graph for decomposing its
we show that this task can be accomplished in polynomial
                                                      DTP  D into a sequence of “growing DTPs”. I.e.,
  4
   The disjunctive constraints in C are not exactly in DTP-form, D = Dlast ⊃ Dlast−1 ⊃ ... ⊃ D1,
i.e., a disjunction c ∨ · · · ∨ c , where c is of form y − x ≤ k , x
              1      n       i         i   i   i  i                                         A
and yi are time points, and ki is a real number. However, it is easy where (i) last is the number of the levels in , (ii) the vari-
to see that every disjunctive constraint in C can be translated into ables Vi of Di (i = 1..last) are all the variables of D corre-
an equivalent conjunction of constraints in exact DTP-form. We use sponding to the action nodes in A up to level i, and (iii) the
our more compact notation for clarity and efﬁciency reasons. constraints of Di are all the constraints of D involving onlyvariables in Vi. From the decomposed DTP, we can derive an • forward checking is performed only once for each meta-
ordered partition of the set of meta-variables X in the meta variable: if the ﬁrst value chosen by SelectValue is not
CSP of the original DTP                                   feasible (i.e., ForwardChecking-DTP returns false), then
             X  = X1 ∪ X2 ∪ ... ∪ Xlast ,                 X  has no solution, and thus we can stop the algorithm;
where Xi is the set of the meta-variables corresponding to the • ﬁnally, the improved algorithm is incremental since, as
constraints in Di − Di−1, if i > 1, and in D1 otherwise.  we will see in the next section, at each search step the
  This ordered partition is used to deﬁne the order in which DTP of the TDA-graph is updated as a consequence of
SelectVariable chooses the next variable to handle, which is adding a new action node to the graph, or removing an
crucial to avoid backtrack: every variable with a single do- existing one.
main value (i.e., an ordering constraint or duration constraint) Moreover, in order to use the local search techniques de-
is selected before every variable with more than one possible scribed in the next section, we need another change to the ba-
value (i.e., a scheduling constraint with more than one time sic algorithm: when the algorithm detects that X has no solu-
window); if xi ∈ Xi, xj ∈ Xj and i < j, then xi is selected tion, instead of returning failure, (i) it processes the next meta
before xj.                                            variables, and (ii) when it terminates, it returns the (partial)
  Also the order in which SelectValue chooses the value for a induced STP S formed by the STP-constraints of the DTP
meta-variable is important: given a meta-variable with more and the values assigned to the meta-variables. The optimal
than one value, we choose the value corresponding to the ear- solution of S deﬁnes the T -assignment of the TDA-graph.
liest available time window. E.g., if the current domain of the
                                                        In the next section, SG denotes the induced STP for the
meta-variable is                                                        G
   [      +      −      −     +    +      +        DTP of a TDA-graph  computed by our method.
         astart − a ≤ −ki   ∧ a  − astart ≤ ki  ,
  i=1..m                                              3   Local Search Techniques for TDA-Graphs
then SelectValue chooses the j-th value (time window) such
     −      −                                                      hA, T , P, Ci
that |kj | < |kh |, for every h ∈ {1, ..., m}, h 6= j. A TDA-graph            may contain two types of ﬂaw:
  By using these techniques for selecting the next variable to unsupported precondition nodes in A (propositional ﬂaws),
handle and its domain value in the algorithm of Figure 2, we action nodes in A that are unscheduled in T (temporal ﬂaws).
can derive the following result.5                     If a level of A contains a ﬂaw, we say that this level is ﬂawed.
                                                      A TDA-graph with no ﬂawed level represents a valid plan,
Theorem 1 Given a DTP  D for a TDA-graph, if the meta
                                                      and it is called a solution graph.
CSP X  of D is solvable, then Solve-DTP ﬁnds a solution of
                                                        In this section, we present new heuristics for searching a
X with no backtracking. Moreover, this solution is an optimal
                   −                                  solution graph in the space of TDA-graphs. These heuristics
induced STP of D for aend.                            are used to guide a local search procedure, called Walkplan,
  As a consequence of the previous theorem, we have that, that was originally proposed in [Gerevini, et al., 2003], and
if Solve-DTP performs backtracking (step 10), then the DTP that is the heart of search engine of our planner.
under consideration has no solution. Thus, we can obtain a The initial TDA-graph contains only astart and aend. Each
backtrack free algorithm by replacing step 10 with    search step identiﬁes the neighborhood N(G) (successor
  10. stop and return fail.                           states) of the current TDA-graph G (search state), which is
                                                                                    G
  It is easy to see that in the modiﬁed algorithm, called Solve- a set of TDA-graphs obtained from by adding a helpful ac-
   +                                                  tion node or removing a harmful action node in the attempt
DTP  , every variable is instantiated at most once with the                            6
same value. It follows that, under the assumptions that we to repair the earliest ﬂawed level of G. In the following, ai
have a constant maximum number of action preconditions denotes an action node a at level i of A, and la the level of a.
and, for every scheduling constraint, a constant maximum Given a ﬂawed level l of G, an action node ai is helpful for
                                                      l                G        i ≤ l
number of windows, the total runtime complexity of Solve- if its insertion into at a level removes a propositional
                                                            l a              l                      i ≤ l
DTP+ is polynomial.                                   ﬂaw at ; i is harmful for if its removal from a level
                                                      of G (i) would remove a propositional ﬂaw at l, or (ii) would
Theorem 2 Given a TDA-graph G with DTP D, Solve-DTP+
                                                      decrease the T -value of al, if al is unscheduled (intuitively,
processes the meta CSP corresponding to D in polynomial
                                                      al is unscheduled if C forces it to start “too late”).
time with respect to the number of action nodes in G.   The addition/removal of an action node a requires us to
  The actual algorithm that we developed for our planner to update the DTP of G by adding/removing some ordering con-
ﬁnd an induced STP for the DTP of a TDA-graph contains straints between a and other actions in the LA-graph of G, the
some improvements making it more efﬁcient. For lack of duration constraints of a, and the scheduling constraint of a
space and simplicity of presentation, we omit a detailed de- (if any). From the updated DTP D, we can use the method
scription of the improved algorithm, and we indicate only the described in the previous section to revise T , and to compute
main differences, which are the following ones:       a possibly new schedule of the actions in G (i.e., an optimal
  • the consistency of the STP formed by the values of all solution of SG).
    the variables of the meta CSP X with single-valued do- The elements in N(G) are evaluated using a heuristic eval-
    mains can be checked at the beginning of Solve-DTP, uation function E consisting of two weighted terms, estimat-
    using a single-source shortest-path algorithm: if such an ing the additional search cost and temporal cost of the el-
    STP is inconsistent, then X has no solution;
                                                         6When we add an action node, the graph is extended by one level,
  5For lack of space, the proofs are omitted; they are available in and when we remove an action node, it is “shrunk” by one level.
an extended version of this paper [Gerevini, et al., 2005]. More details in [Gerevini, et al., 2003].ements (i.e., the number of search steps required to ﬁnd a straints of its actions, and the T -values of the facts in
solution graph and the plan makespan, respectively). An ele- the initial state I).
ment with the lowest cost is then selected from N(G) using a In order to compute TimeThreats(b), we use a notion of
“noise parameter” randomizing the search to escape from lo- time slack between action nodes.
cal minima [Gerevini, et al., 2003]. For lack of space, in the Deﬁnition 3 Given two action nodes a1 and a2 of a TDA-
rest of this section we focus only on the search cost term of E. graph hA, T , P, Ci such that C |= a1+ < a2−, slack(a1, a2)
  The search cost of adding an helpful action node a to is the maximum time by which the T -value of a1− can be con-
G is estimated by constructing a temporal relaxed plan π
                                                      sistently increased in SG without violating the time window
achieving (1) the unsupported precondition nodes of a, (2) chosen for scheduling a2.
the propositional ﬂaws remaining at l after adding a, and (3)
the supported precondition nodes of other action nodes in G To estimate whether b is a time threat for an action node
that would become unsupported by adding a. Moreover, we ak (l ≤ k), we check if ∆(πb, al) > Slack(al, ak) holds,
count the number of: (4) action nodes that would become where πb is the portion of the relaxed plan computed so far,
unscheduled by adding a to G, (5) unsatisﬁed timed precon- and ∆(πb, al) estimates the delay of the start time of al that
ditions of a, (6) actions of π with a scheduling constraint that the addition of the actions in πb to G would determine.
we estimate cannot be satisﬁed in the context of G. The search
cost of adding a to G is the number of actions in π plus (4), 4 Experimental Results
(5) and (6).                                          We have implemented our approach in a planner called LPG-
  The evaluation of a TDA-graph derived by removing an td, which obtained the 2nd prize in the suboptimal metric-
harmful action node a is similar, with π achieving the precon- temporal track of the 4th International Planning Competition
dition nodes supported by a that would become unsupported (IPC-4). LPG-td performed especially well in the domain
by removing a and, when la precedes the ﬂawed level l under variants with timed initial literals, in terms of both CPU-time
reparation, the unsupported precondition nodes at level l that to ﬁnd a plan and quality of the best plan computed with
would not become supported by removing a.             a CPU-time limit of 30 minutes (LPG-td is an incremental
  π is constructed using a polymomial backward process planner ﬁnding a succession of valid plans). In this section,
similar to the algorithm proposed in [Gerevini, et al., 2003], we present some experimental results using the test problems
giving in output two values: a set of actions forming a of IPC-4.7 The problems in the Airport domain specify at
(sub)relaxed plan, and its estimated earliest ﬁnishing time. most 6 time windows for each timed precondition, the prob-
The initial state I is the state obtained by applying the actions lems in the Satellite domain at most 3 windows, while
of G up to level la − 1, ordered according to their levels. those in the other domains only one time window. Additional
  The main difference in the extended algorithm concerns results are available from the web sites of our planner and
the choice of the actions forming the relaxed plan. The ac- of IPC-4, and in a technical report including an experimental
tion b chosen to achieve a (sub)goal g is an action minimiz- analysis on solving problems with many windows associated
ing the sum of (i) the estimated minimum number of addi- with the timed preconditions [Gerevini, et al., 2005].
tional actions required to support its propositional precondi- Figure 3 shows the CPU-time of LPG-td in three IPC-4 do-
tions, (ii) the number of supported precondition nodes in the mains with respect to the best among the other three planners
LA-graph that would become unsupported by adding b to G, of IPC-4 that support timed initial literals: SGPLAN, P-MEP,
                                                                  8
(iii) the number of timed preconditions of b that we estimate and TILSAPA. In these domains, LPG-td is generally faster
would be unsatisﬁed in G extended with π (TimedPre(b)); than the other planners and solves more problems.
and (iv) the number of action nodes scheduled in T that Table 1 gives a summary of the results for all the IPC-4
we estimated would become unscheduled by adding b to  domain variants with timed initial literals (252 test problems
G (TimeThreats(b)). (i)-(ii) are computed as described in in total). We compare LPG-td’s results with the best results
[Gerevini, et al., 2003]; (iii)-(iv) are new components of the over the corresponding results of all the other IPC-4 planners
action selection method, and they are computed as follows. (“AllOthers”). In general, LPG-td solves more problems than
  In order to compute TimedPre(b), we estimate the earliest AllOthers; the percentage of problems in which it is faster is
start time of b (Est(b)) and the earliest ﬁnishing time of b higher than the one in which it is slower; and the percentage
(Eft(b)). Using these values, we count the number of the in which it produces better quality plans is much higher.
timed preconditions of b that cannot be satisﬁed. Eft(b) is Finally, it is worth noting that, if in the CPU-time compar-
Est(b) + Dur(b), while Est(b) is the maximum over     ison we consider only problems where LPG-td is at least one
                                                      order of magnitude faster (slower) than AllOthers, then the
  • the lowest earliest start time of b computed by an ex- results in the 3rd column of Table 1 are even more favorable
    tension of the reachability analysis algorithm given in
                                                      to LPG-td. LPG-td is faster in 31% of the problems, and it is
    [                 ]
     Gerevini, et al., 2003 , which derives a lower bound on slower in 13% of the problems.
    the start time of each domain action;
                                                         7
  • the T -values of the action nodes ci, with i < la, that All tests were conducted on an Intel Xeon(tm) 3 GHz, 1 Gbytes
    are mutex with b (because the addition of b to G would of RAM. For a description and formalization of the IPC-4 bench-
    determine the addition of c+ − b− ≤ 0 to G);      mark problems and domains, see http://ls5-www.cs.uni-
                          i                           dortmund.de/∼edelkamp/ipc-4/index.html.
  • the maximum over an estimated lower bound on the time 8An abstract of every IPC-4 planner is available in [Edelkamp, et
    when all the preconditions of b are achieved in relaxed al., 2004]). LPG-td and TILSAPA are the only planners of IPC-4 that
    plan (this estimate is computed from the causal structure addressed the variant of PipesWorld with timed initial literals;
    of the relaxed plan, the duration and scheduling con- TILSAPA did not address UMTS-flaw with timed initial literals.