           Streamlining Local Search for Spatially Balanced Latin Squares

                          Casey Smith, Carla Gomes, and Cesar Fernandez
                                     Computer Science Department
                                           Cornell University
                           {casey,gomes}@cs.cornell.edu, cesar@eup.udl.es


                    Abstract                          square. This provides additional interesting structural prop-
                                                      erties, making our local search procedure scale up consider-
    Streamlined constrained reasoning powerfully      ably better than previously reported approaches. We solve
    boosts the performance of backtrack search meth-  instances up through order 35; the previous best results could
    ods for ﬁnding hard combinatorial objects. We use only generate solutions up to order 18. Moreover, our stream-
    so-called spatially balanced Latin squares to show liner provides useful intuitions on a construction for spatially
    how streamlining can also be very effective for lo- balanced Latin squares. We believe that streamlined local
    cal search: Our approach is much faster and gen-  search is a general technique suitable for ﬁnding objects with
    erates considerably larger spatially balanced Latin intricate combinatorial constraints.
    squares than previously reported approaches (up to
    order 35; the previous best results could only gen-
    erate solutions up to order 18). We also provide  2   Spatially Balanced Latin Squares
    a detailed characterization of our streamliner and A Latin Square of order n is an n by n grid where each of
    solution topology for small orders. We believe that the n2 cells in the grid is assigned one of n symbols such that
    streamlined local search is a general technique suit- each symbol appears exactly once in each column and each
    able for solving a wide range of hard combinatorial row. Creating a Latin square is by no means difﬁcult. We can
    design problems.                                  deﬁne a cyclic construction as an order n Latin square where
                                                      the element in row i and column j has the value (i + j) mod
                                                      n (see Figure 1). The ﬁrst row will have all the symbols in
1  Introduction                                       order: [1 2 3 ... n]. Each subsequent row is the same as the
The idea underlying streamlining constraints [Gomes and previous row with all the values shifted one location to the
Sellmann, 2004] is simple but powerful: In order to increase left, wrapping the ﬁrst element to the end. Thus, the second
the effectiveness of propagation, “streamlining constraints” row will be [2 3 ... n 1]; the third will be [3 ... n 1 2]; and so
partition the solution space into different portions with differ- on. Note that the columns follow the same pattern: the ﬁrst
ent global properties. Since in general the streamlined con- column is [1 2 3 ... n]T ; the second is [2 3 ... n 1]T ; and the
straints are not implied by the original problem constraints, third is [3 ... n 1 2]T .
the resulting search and solution spaces are subsets of the One challenge comes in generating spatially balanced
original spaces. Gomes and Sellmann showed the effective- Latin squares (SBLS) where the sum of the distances between
ness of streamlined constraints for solving hard combinato- two symbols across all rows is constant for all pairs of sym-
rial design problems, in particular spatially balanced Latin bols. First, we deﬁne di(j, k) to be the distance between sym-
squares (SBLS, deﬁned in Section 2). Using streamlined bols j and k in row i. This distance is calculated as the abso-
backtrack search methods, they solved considerably larger lute difference of the column indices of where symbols j and
SBLS problem instances than with local search: up to or- k appear in row i. For example, if row i were [3 5 1 2 4], then
der 18, while a local search method applied to the original di(5, 2) would be |2 − 4| = 2. Then we can deﬁne the total
problem could only generate solutions up order 9.     distance d(j, k) to be
  This paper shows how streamlining can also be effective                       n
for local search. We note that while the addition of streamlin-                X
                                                                      d(j, k) =   di(j, k).           (1)
ing constraints is straightforward in backtrack search meth-
                                                                               i=1
ods, it is not always the case for local search methods, since
constraints are in general enforced via the objective function. A SBLS requires that all pairs of symbols have the same total
The key is to consider streamlining constraints that lead to an distance:
alternate neighborhood representation. We applied stream-         ∀i 6= j, k 6= l : d(i, j) = d(k, l). (2)
lined local search to the problem of generating spatially bal- SBLS are useful for agronomic ﬁeld experiment design [van
anced Latin squares. Our streamliner deﬁnes a basic swap Es and van Es, 1993] and are compelling constraint satisfac-
neighborhood as a column permutation of the input Latin tion problems because of their high degree of structure. As             1 2 3 4 5      1 4 5 3 2                    A B  C D  E     A  E C  D  B     Col A B C D E
             2 3 4 5 1      2 5 1 4 3                    1 2  3  4 5      1 5  3 4  2       A  - X Y Y X
             3 4 5 1 2      3 1 2 5 4                    2 3  4  5 1      2 1  4 5  3       B  - - X Y Y
             4 5 1 2 3      4 2 3 1 5                    3 4  5  1 2      3 2  5 1  4       C  - - - X Y
             5 1 2 3 4      5 3 4 2 1                    4 5  1  2 3      4 3  1 2  5       D  - - - - X
                (A)            (B)                       5 1  2  3 4      5 4  2 3  1       E  - - - - -
                                                             (A)              (B)               (C)
Figure 1: (A) A cyclic Latin square (order 5). (B) A SBLS where
∀j, k : d(j, k) = 10.                                 Figure 2: (A) A cyclic Latin square (order 5). (B) A column per-
                                                      mutation of the cyclic Latin square. Note that no matter how the
                                                      columns are reordered,
        [               ]         n(n+1)              d(1, 2) = d(2, 3) = d(3, 4) = d(4, 5) = d(5, 1) =
shown in Gomes et al., 2004 , d(j, k) = 3 for all j 6= k
in any SBLS, implying that no SBLS exist for orders n such |A − B| + |B − C| + |C − D| + |D − E| + |A − E| and
that n mod 3 = 1.                                     d(1, 3) = d(2, 4) = d(3, 5) = d(4, 1) = d(5, 2) =
                                                         |A − C| + |B − D| + |C − E| + |D − A| + |E − B|
                                                      (C) A matrix showing how the intra-column distances contribute to
3  Streamlined Local Search                           the pair distances. The 10 pairs of symbols correspond to group X
Gomes and Sellmann showed that a standard local search ap- ((1,2), (2,3), (3,4), (4,5), (5,1)) and group Y ((1,3), (2,4), (3,5), (4,1),
                                                      (5,2)).
proach performs remarkably poorly at ﬁnding SBLS. We hy-
pothesize that this is due to the enormity of the search space
and the global nature of the constraints. The search space construction. As an example, if we check the total distance
is so big and the solutions are so few that the odds of local between symbols 1 and 2, we do not need to check the dis-
search ﬁnding a solution are very slim for all but the smallest tance between any other consecutive symbols, i.e., 2 and 3, 3
orders. If we can cleverly restrict the search space to a small and 4, and so on because they will all have identical values
subspace which contains a higher density of solutions, we can (see Figure 2). Next, note that since the columns always re-
increase the odds that local search will ﬁnd a solution. main intact no matter how their order is permuted, we need
  Consider the subspace resulting from starting with a Latin only store the ﬁrst row as we search for SBLS. From the ﬁrst
square and restricting the search space to be a column or- row, we can calculate the d(j, k) corresponding to each of the
der permutation of the original square. That is, take a Latin n
                                                      b 2 c possibly distinct d(j, k). We also observe that we can ﬁx
square and swap entire intact columns to permute the order the ﬁrst column to be headed by symbol 1 without decreasing
in which the columns appear. Since this reordering of the our probability of ﬁnding a solution: there will be an equal
columns will never make the square non-Latin (all symbols number of solutions with 1 heading the ﬁrst column as with
will appear in all rows and in all columns exactly once), we any other number.
can try permuting the column order to make the Latin square These observations naturally lead to a gradient descent al-
spatially balanced. Note that the space of column permuta- gorithm. First, we deﬁne the imbalance of a square to be
tions of a particular Latin square is vanishingly small com-
                                                                                             
pared to the entire space of Latin squares. The goal is to ﬁnd            X          n(n + 1)
                                                               imbalance =    d(i, j) −       .     (4)
an initial Latin square such that this small subspace is dense                           3   
with SBLS. Cyclically constructed Latin squares empirically               i<j
provide such a subspace.                              That is, the imbalance is the sum over all pairs of how far from
  If the initial Latin square is generated by the cyclic con- ideal spacing the total spacing of the pair is. Starting with a
struction, some structural properties can be exploited to speed random permutation of the ﬁrst row, we swap the location
                                                n
the search. First, observe that there will be at most b 2 c of two symbols such that it decreases the imbalance of the
                                        n(n−1)        square. When we reach a local minimum, we randomize and
unique values of the total distance among the 2 pairs
of symbols. To see this, deﬁne                        try again.

  dmod(j, k) = min(|j − k|, |j − k + n|, |j − k − n|). (3) Algorithm 1 SBLS Streamlined Local Search
                                                       1: Generate a Latin Square of order n by the cyclic con-
Thus, dmod(j, k) is the distance between symbols j and k in
symbol space, modulo the number of symbols (n). For ex-   struction
                                                       2: Randomly permute the order of the columns
ample, for an order 6 Latin square, dmod(2, 4) = 2 because
the shortest path from 2 to 4 is by counting 2 3 4, revealing a 3: Select a column and try swapping it with every other col-
                                                          umn
distance of 2. Similarly, dmod(1, 5) = 2 because the shortest
path from 1 to 5 is by counting 5 6 1, revealing a distance of 2. 4: Keep the swap which minimizes the imbalance
Examining the cyclic construction reveals that pairs of sym- 5: If stuck, then randomize the order of the columns
                                                       6: Repeat from step 3
bols with identical values of dmod(j, k) will have identical
values of d(j, k), even if the column order is permuted. Thus
              n
since there are b 2 c different nonzero values of dmod(j, k), Finally, we note that we can generate solutions which are
                n
there are at most b 2 c different total distances between pairs symmetric across the main diagonal. Since spatial balance is
of symbols for any column order permutation of the cyclic deﬁned as the sum of distances within rows, swapping intact   order    6     8    9   11    12   14   15   17   18   20  21  23  24   26  27   29    30    32-35
      CP   0.06  16   241
      SS   0.05 0.88 0.91  9.84 531  5K
      CS   0.02                 14.4                107K
   CCCP    4e-5 3e-4 1e-4  1e-3 1e-3 0.02 0.01 0.25  2.3  16  16 104  281  609 4K  43k  ≈160K  ≈1.2M

Table 1: Solution times are given in seconds. CP, SS, and CS are the times to ﬁnd the ﬁrst solution via standard constraint programming,
symmetric streamlining, and composition streamlining as reported by Gomes and Sellmann [2004] as run on a 550 MHz Pentium III machine.
CCCP is the cyclic construction column permutation method presented here. Times given are the mean time to ﬁnd a solution averaged across
several independent runs on a 1.0 GHz Pentium III machine. Note that although our processor was only twice as fast, our performance is
orders of magnitude better. Note that the largest solution from previous methods was only order 18, while our method can ﬁnd solutions up
to order 35. Additionally, no previous method had found solutions for orders 15 and 17.

  1 2 3 4 5 6      1 3 4 2 6 5      1 3 4 2 6 5       only around 12000.
  2 3 4 5 6 1      2 4 5 3 1 6      3 5 6 4 2 1         Through exhaustive enumeration, we analyzed the solution
  3 4 5 6 1 2      3 5 6 4 2 1      4 6 1 5 3 2       space of SBLS for small orders. Interestingly, we found that
  4 5 6 1 2 3      4 6 1 5 3 2      2 4 5 3 1 6       for orders 6 and 8, all the SBLS can be generated by row per-
  5 6 1 2 3 4      5 1 2 6 4 3      6 2 3 1 5 4       muting and/or one-to-one symbol remapping (that is change
  6 1 2 3 4 5      6 2 3 1 5 4      5 1 2 6 4 3       all instances of symbol i to symbol j, symbol k to symbol
       (A)              (B)              (C)          l, and so on) the SBLS obtained as column permutations of
                                                      the cyclic construction. However, for higher orders, there ex-
Figure 3: (A) A cyclic Latin square (order 6). (B) The same cyclic ist some solutions which cannot be derived in that way. We
Latin square with the columns permuted to form a SBLS. (C) The are currently studying the topology of the solution space for
same SBLS as in (B), but with the rows reordered the same as the higher orders trying to identify relationships among solutions.
columns to make a symmetric SBLS.
                                                      We are also studying the matrix of distances (as in Figure 2).
                                                      We believe that the characterization of solution relationships
                                                      and the distance matrix provide valuable clues for the design
rows will not affect the balancing. If we reorder the rows
                                                      of a construction for generating SBLS of arbitrary size.
in the same way as the columns, the solution will become
symmetric across the main diagonal and spatially balanced in
terms of both the intra-row and intra-column distances (see 5 Conclusions
Figure 3).                                            We describe a competitive streamlined local search approach
                                                      for generating SBLS. We believe that streamlined local search
4  Empirical Results                                  is a general technique, effective for ﬁnding objects with intri-
                                                      cate combinatorial properties. We hope that this work will
The best performance on ﬁnding SBLS was reported by   inspire other researchers interested in solving hard combina-
Gomes and Sellmann [2004], so we compare our results to torial design problems.
theirs. Our streamlining is much simpler than theirs and per-
forms dramatically better. They could only generate solutions References
up to order 18 (and were unable to ﬁnd solutions for orders
15 and 17). We have generated SBLS for all possible orders [Gomes and Sellmann, 2004] C. Gomes and M. Sellmann.
up through 35. Times in seconds are given in Table 1.    Streamlined constraint reasoning. In CP 2004, 2004.
  We also tried using our streamlining with complete back- [Gomes et al., 2004] C. Gomes, M. Sellmann, C. van Es, and
track search. While it improves performance over previous H. van Es. The challenge of generating spatially balanced
methods, the local search method presented here performs scientiﬁc experiment designs. In CPAIOR 2004, 2004.
considerably better. In addition, we tried composing solutions
                                                      [Jacobson and Matthews, 1996] Mark Jacobson and Peter
from smaller cyclic Latin squares using local search, but the
                                                         Matthews. Generating uniformly distributed random latin
performance was slightly worse than the simple streamliner
                                                         squares. J. of Combinatorial Designs, 4(6):405–437, 1996.
presented here.
  Although we have only discussed permuting the columns [van Es and van Es, 1993] Harold van Es and Cindy van Es.
of the cyclic construction, in principle, we could permute The spatial nature of randomization and its effects on the
the columns of any Latin square in an attempt to ﬁnd SBLS. outcome of ﬁeld experiments. Agronomy Journal, 85:420–
However, most arbitrary random Latin squares (such as those 428, 1993.
generated by Jacobson and Matthews [1996]) cannot be per-
muted to be spatially balanced. This observation is remark-
able, given that cyclic constructions are much more imbal-
anced than an average random Latin square. For instance, the
imbalance of an order 30 cyclic Latin square is 46920 while
the imbalance of a typical order 30 random Latin square is