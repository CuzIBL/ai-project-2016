                                          Answer Set Optimization* 

          Gerhard Brewka Ilkka Niemela Miroslaw Truszczynski 
         Comp. Sci. Institute Dept. of Comp. Sci. and Eng. Dept. of Comp. Sci. 
         University of Leipzig Helsinki University of Technology University of Kentucky 
          Leipzig, Germany Helsinki, Finland Lexington, KY 40506-0046, USA 
 brewka@informatik.uni-leipzig.de Ilkka.Niemela@hut.fi mirek@cs.uky.edu 


                        Abstract                               4. In the same time, the syntax of logic programs is restric•
                                                                  tive enough to allow for fast implementations and several 
     We investigate the combination of answer set pro•            highly efficient answer-set provers have been developed. 
     gramming and qualitative optimization techniques.            Most advanced among them are Smodels [Niemela and Si•
     Answer set optimization programs (ASO pro•                   mons, 19971 and dlv [Eiter et al, 19981. 
     grams) have two parts. The generating program 
           produces answer sets representing possible          To increase the ease of use of logic programs in knowledge 
     solutions. The preference program expresses               representation researchers have suggested and investigated 
     user preferences. It induces a preference relation        several extensions to the basic formalism. Well-known ex•
     on the answer sets of based on the degree to              amples of such extensions include disjunctive logic programs 
     which rules are satisfied.                                and programs with cardinality and weight constraints [Si•
                                                               mons et ai, 2002]. 
     We discuss possible applications of ASO program•
     ming, give complexity results and propose imple•            An important issue for many applications is the represen•
     mentation techniques. We also analyze the relation•       tation of preferences and reasoning about them. Researchers 
     ship between A SO programs and CP-networks.               have investigated preferences among program rules [Schaub 
                                                               and Wang, 2001], among program literals [Sakama and In-
                                                               oue, 2000], and context-dependent preferences among literals 
1 Introduction                                                 through the use of ordered disjunction [Brewka, 20021. 
                                                                 Representing and handling preferences in the formalism of 
Answer set semantics [Gelfond and Lifschitz, 1991] de•         logic programs is also the main topic of this paper. However, 
scribes the meaning of a logic program P in terms of sets      our approach differs from existing ones in an important as•
of literals. The exact definition of answer sets depends on    pect. Rather than specifying a preference relation among the 
the kind of rules used in P, yet two properties are always re• rules or literals in a single logic program, we use two differ•
quired. Answer sets are closed under the rules of P, and they  ent programs. The first program, is used to generate 
are grounded in P: each literal has a derivation using "appli• answer sets, that is, define the space of acceptable solutions. 
cable" rules from P. Answer set programming has become         Context-dependent preferences are described in a second pro•
a popular knowledge representation tool. There are several     gram, the preference program These preferences are 
reasons for this:                                              used to compare answer sets of , that is, to form a pref•
 1. Logic programs are expressive enough to model many typ•    erence ordering of acceptable solutions. Intuitively, the rules 
   ical knowledge representation problems in AI. In particu•   of are hard constraints which specify conditions an an•
   lar, the availability of default negation in the body of rules swer set must satisfy; the rules of are soft constraints 
   makes it possible to represent defeasible information.      describing conditions under which one answer set is to be 
2. Many problems in reasoning about actions, planning, diag•   considered better than another. 
   nosis, belief revision and product configuration have ele•    The decoupling of answer-set generation and answer-set 
   gant formulations as logic programs so that models of pro•  comparison has at least two advantages: 
   grams, rather than proofs of queries, describe problem so•
                                                               1. The method for comparing answer sets is independent of 
   lutions [Lifschitz, 2002; Soininen, 2000; Baral, 20031. 
                                                                  the type of the generating program It may be any 
3. The semantics of answer sets is intuitive and avoids the pit•
                                                                  type of a logic program (for instance, normal, extended, 
   falls of resolution-based systems like Prolog. For instance, 
                                                                  disjunctive, involving cardinality or weight atoms), as long 
   it is independent of the order in which rules are written and 
                                                                  as it has a well-defined semantics given by a collection of 
   correctly handles loops. 
                                                                  sets of literals. 
   "The authors acknowledge the support of DFG grant Computa•  2. Preferences in (soft constraints) can be specified in•
tional Dialektik BR 1817/1-5, Academy of Finland grant 53695      dependently of " (hard constraints). This makes pref•
and NSF grant IIS-0097278, respectively.                          erence elicitation easier since the task is broken into sepa-


NONMONOTONIC REASONING                                                                                                867    rate and smaller subtasks. Moreover, it makes the overall 
   setting better aligned with practical applications. Indeed, 
   often what is possible is determined by external factors      We next define the notion of an optimization program. 
   (available resources, constraints of the environment, de•
                                                               Definition 3 An answer-set optimization (ASO) program is 
   sign and engineering constraints for products) while what 
                                                               a pair where is logic program called 
   is preferred is described independently and by different 
                                                               the generating program, and P   j is preference program. 
   agents (users, customers, groups of customers).                                           pr€
                                                               As we already mentioned earlier, the program used for 
   The rest of the paper is organized as follows. The next 
                                                               generating answer-sets can be of any type. We only require 
section introduces a new formalism, answer-set optimization 
                                                               that the semantics be given in terms of sets of literals, or an•
programs, and defines their syntax and semantics. The subse•
                                                               swer sets, that are associated with programs. 
quent section provides examples and additional observations 
                                                                 The key question is: how does the preference program 
on the basic formalism. In Section 4, we show how meta-
                                                                     determine a preference ordering on the answer sets de•
preferences, that is, preferences on the preference rules, can 
                                                               scribed by the generating program _ Let us consider an 
be introduced and dealt with. Next, we discuss complexity 
                                                               answer set S and a rule of the form (1). Given a set S of 
of computational problems arising in the context of our for•
                                                               literals, three different situations are possible: 
malism and propose implementation techniques. Our work is 
related to the approach proposed in tBoutilier et al, 1999].    . the body of is not satisfied in 5, that is, at i S for some 
We investigate this relationship in Section 6. We conclude 
with additional discussion of other related work and possible  2. the body of is satisfied in S and none of the s is satis•
extensions to the formalism presented here.                       fied in S 
                                                               3. the body of is satisfied in S and at least one C, is satisfied 
2 Optimization programs                                           in 5. 
We use two separate programs to describe the space of answer   In the case (1), the rule is irrelevant to S because the rule 
sets and preferences among them.                               does not apply. The case (2) is more subtle: the rule lists 
                                                               preferences among several options, yet none of the options 
Definition 1 Let A be set of atoms. A preference program       holds. We consider this as another kind of irrelevance. Let us 
over A is a finite set of rules of the form                    assume that a rule states that red is better than green, and S 
                                                        (1)    contains blue and no other color. In this case the preference 
                                                               of red over green appears irrelevant to S since S does not 
where the a,s and bjS are literals (expressions x and x,       mention these two colors at all. In the case (3), the preference 
where x is an atom in A), and the are boolean combi•           expressed in the rule is satisfied to some degree (as at least 
nations over A (to be defined below).                          one d holds in S). Thus, we define the satisfaction degree 
The rule intuitively reads: if an answer set S contains                                                  is irrelevant to 5, 

   ,..., n and does not contain any of the literals bi,..., bm and otherwise. 
then C1 is preferred over etc. (we will give                     Concerning the relationship between / and the other sat•
a precise semantics later in this section).                    isfaction degrees, two viable options seem to exist. We can 
   A boolean combination over A is a formula built of atoms    consider / as incomparable to other values, based on the view 
in A by means of disjunction, conjunction, strong and de•      that "irrelevance" cannot be compared to proper satisfaction 
fault (not) negation, with the restriction that strong negation degrees. According to this view, selecting blue in the ex•
is allowed to appear only in front of atoms, and default nega• ample above is neither better nor worse than selecting green 
tion only in front of literals. For example,                   or red. But one can also argue that green violates prefer•
is a boolean combination, whereas is not. Using                ences whereas blue does not, and that blue is thus preferable 
boolean combinations rather than, say, literals in the heads   to green. We will adopt this latter view here and use the fol•
of preference rules gives us additional expressiveness. Us•    lowing preorder to compare satisfaction degrees (Fig. 1): 
ing conjunction we can express that certain combinations of 
properties are preferred over other combinations. Disjunction 
allows us to express that certain options are equally preferred. 
For instance, the rule a says that in case 
of / the best option is a; b and c are equally preferred second 
best options, and d is the least preferred option. Finally, we 
can use expressions like a (not 
if we prefer to have one of properties over not having                 Fig. 1: The preorder on satisfaction degrees 
any of them. 
                                                               The values / and 1 are regarded equally good and 
Definition 2 t of literals. Satisfaction of                           and better than all others. In addition, for each we 
boolean combination C in S (denoted S C) is defined            have We write if is strictly better than . 
as:                                                            Definition 4 Let be a preference pro-
                                                              gram and let S be an answer set. We say that S induces a 
                                                               satisfaction vector 


868                                                                                      NONMONOTONIC REASONING We extend the preorder on satisfaction degrees to preorders 
on satisfaction vectors and answer sets as follows: 


                                                               Their satisfaction vectors are 
                                                                                                   respectively. Thus, S1 
                                                               and 52 are equally good and are maximally preferred in the 
We refer to this ordering as the preference satisfaction order• presence of F to 53 and S4, the latter two answer sets being 
ing (or ps-ordcring, for short).                               also equally good. 
                                                               4 Meta-preferences 
                                                               The notion of optimality underlying our approach is some•
                                                               what weak. In general, many optimal answer sets may exist, 
3 Examples                                                     and one often wants additional means to express that one pref•
                                                               erence (that is, one rule in the program is more impor•
The prototypical application for ASO programs are configu•     tant than another. Here is a generalization of ASO programs 
ration problems where describes possible configurations        where it is possible to express such meta-preferences: 
and preferences among them. We use a dinner example 
                                                               Definition 7 A ranked ASO program P is a sequence 
similar to the one discussed in [Brewka, 2002]. It is conve•
nient to use programs with cardinality constraints to generate 
answer sets. Such programs allow for the use of special atoms 
of the form where the are literals, to rep•                    consisting of a generating program and a sequence of 
resent: at least n and at most m of the are true. Although     pairwise disjoint preference programs r. 
rules built from cardinality constraints can, in principle, be The rank of a rule denoted rank 
replaced by sets of rules without such constraints, they make 
                                                               is the unique integer ifor which r 
problem specifications much more concise and readable. For 
the precise definitions we refer the reader to [Simons et a/.,   Intuitively, preference rules with lower rank are preferred 
2002].                                                         over preference rules with higher rank. We can now mod•

  Let us assume that Pgen consists of the rules:               ify the definition of preference among answer sets by taking 
                                                               preferences among rules into account: 
                                                               Definition 8 be a ranked 

                                                               ASO program. Let S\ and S2 be answer sets of Pgen- We 
                                                               define , if far every preference rule r' such that 
                                                                                 does not hold, there is a rule r" such that 
Each of these constraints enforces the selection of exactly one 
                                                               rank rank and 
of the items it lists into an answer set. Thus, generates 
the space of answer sets. Let us assume                        Clearly, the preorder rank extends (is stronger than) the pre•
that is:                                                       order It is also easy to see that optimal answer sets 
                                                               can be obtained in the following way: select all answer sets 

                                                               optimal wrt P\, among those pick the ones optimal wrt P2 
                                                               and so on. 
                                                                 A further generalization of ranked to partially ordered 
This preference program designates as non-preferred all an•    ASO programs is straightforward and not presented here for 

swer sets containing fish but not white, all answer sets con•  lack of space.1 
taining beef but not red or beer, and all answer sets contain•   In some cases a natural ordering of the preference rules can 
ing beer and not pie. We note that the objective is not to have be derived from the structure of the preference program. For 
these answer sets eliminated, which could be accomplished      each preference program P we define its dependency graph 
simply by adding the three constraints                         G(P) as follows. The atoms appearing in P form the vertex 
                                                               set of G(P). There is a directed edge from a vertex b to a 
                                                               vertex a in G(P) if there is a rule in P such that appears 
                                                               in the head of and appears in the body of 
                                                                 If the graph G{P) is acyclic, there is a natural ranking of 
to the original program. The role of the preference program    its atoms. Namely, we define the rank of an atom 
is to define soft constraints and, moreover, to do so indepen• recursively as follows: = 0 for every atom that 
dently of the generating program. For instance, if we later    has no predecessors in G{P)\ otherwise, we define 
learn that constraints need 
to be included in Pgen* the additional constraints would lead     'Another possible extension concerns the setting of weighted 
to inconsistency. This does not happen in our approach. The    preference rules. To compare answer sets one could use weighted 
answer sets generated by the extended program are:             sums of the violation degrees of preference rules. 


NONMONOTONIC REASONING                                                                                                869  as the maximum of the ranks of all predecessors of in G(P) exists. The computation starts with an arbitrary answer set 
incremented by 1.                                      generated by the generator. This answer set is given to the 
   The ranking of atoms implies the ranking of rules. Namely, tester program. If the tester fails to generate a strictly better 
 we define the rank of a preference rule as the        one, we have found an optimal answer set and we are done. If 
maximum rank of an atom appearing in the head of       a strictly better answer set is discovered, the tester is run with 
  We call preference programs with acyclic dependency  the new answer set as input. This continues until an optimal 
graphs acyclic preference programs. They are important for answer set is reached. 
two reasons:                                             This technique can be adapted for computing optimal an•
 1. They commonly appear in practice as preferences are of• swer sets of an ASO program by choosing a 
   ten described according to some partial order on features suitable tester program for a given answer set The 
   defining answer sets, with some features being more im• tester program is constructed by adding the following 
   portant than others. For instance, in the dinner example, rules to the generator program 
   most users will start with the preferences concerning the 1. For each preference include a fact 
   main course. They could then condition their preferences where is the satisfaction degree of in 
   concerning the appetizer and the beverage on the choice of 2. Include rules 
   the main course. And, finally, they may describe their pref•
   erences concerning the dessert based on earlier choices of 
   the main course, appetizer and beverage. 
 2. As we just demonstrated, in the case when G(P) is 
   acyclic, there exists a natural ranking on the rules. This 
   ranking is implied by the program itself and allows us 3. Add facts geq giving the preorder on the set 
   to strengthen our ordering relation on answer sets, as de•
   scribed above in Definition 8. We call the resulting order•
                                                       4. For each Boolean combination (and its non-
   ing determined by an acyclic preference program — the 
                                                         atomic subexpressions) introduce a new atom and add 
   canonical ps-ordering. 
                                                         rules capturing the conditions under which the expression 
                                                         is satisfied. For example, if is a disjunction 
5 Complexity and implementation                          then add rules and 
The complexity of ASO programs depends on the class of 5. For each preference of the form (1) add rules 
generating programs. To simplify the treatment we con•
sider here only generating programs where deciding exis•
tence of an answer set is NP-complete. This class of pro•
grams includes ground normal programs (possibly extended 
with strong negation or weight and cardinality constraints) 
lSimons et/a/.,2002]. 
  The following two results indicate that allowing prefer•
ences adds an extra layer of complexity. 
Theorem 1 be an ASO program and 
S an answer set of P Then deciding whether S is optimal 
is coNP-complete.                                      If PT has an answer set 5, then S restricted to the original 
                                                       language of is an answer set for that is strictly 
Theorem 2 Given an ASO program P and a literal I decid• preferred to So, and if has no answer set, no such answer 
ing whether there is an optimal answer set S such that I S set exists. 
     -complete. 
  The complexity results imply that (unless the polynomial 6 Relationship to CP-networks 
hierarchy collapses) preference rules cannot be translated to An important approach to the problem of eliciting and ap•
generating rules in polynomial time, i.e., the problem of find• proximating preferences is that of CP-networks proposed 
ing an optimal answer set for an ASO program cannot be and developed in [Boutilier et al., 1999]. We will now review 
mapped in polynomial time to a problem of finding an answer this approach and show how it relates to our work. 
set of a program obtained by translating the ASO program to The approach of CTP-networks is concerned with compar•
a set of generating rules only.                        ing vectors of feature values that we call configurations. Let 
  However, in [Brewka et al, 2002] an implementation tech•              be a set of features (attributes). For each 
nique for computing optimal answer sets for logic programs feature be its domain, that is, a finite and non•
with ordered disjunction on top of a standard answer set empty set of values or selections for We assume that all 
prover has been developed. A similar technique has earlier domains are pairwise disjoint. A configuration is a tuple 
been used in [Janhunen et ai, 2000] to compute stable models     such that 
of disjunctive logic programs using Smodels. The computa•

tion is based on a tester program that takes as input an answer 2 We follow the Prolog convention that terms starting with capital 
set and generates a strictly better one if such an answer set letters arc variables and write rather than to avoid confusion. 


870                                                                           NONMONOTONIC REASONING   The user prefers some configurations to others. Since                of A. We represent that fact by including 
the number of configurations is, in general, exponential in a rule 
          it may be impractical to directly elicit and store 
the user's preference ordering on the set of all configurations. in the preference program (N). 
Thus, the task is to identify partial (and, in some sense, basic) Thus, at the level of syntax, our approach extends that of 
information about the user's preferences, and develop ways CP-nets. In particular, [Boutilier et a/., 1999] is concerned 
to approximate the preference ordering implied by this par• only with one fixed space of all configurations that contain for 
tial information. The formalism of CP-networks [Boutilier every feature exactly one value from its domain. In contrast, 
et al., 1999] is an approach to accomplish that.       in our approach we have a substantial flexibility in defining 
  A CP-network over a set of features A is a pair (G,P), answer sets by varying the generator program. 
where G is a directed graph whose vertices are features from In addition, our approach is more robust when user prefer•
A The edges of the graph G determine dependencies among ences are inconsistent, the situation that often occurs in prac•
features: preferences for a value for a feature A depend only tice. For instance, the user may specify a preference rule 
on values selected for the parents of A in the network. Thus,                           unaware of situations 
for each feature A and for each selection of values for the 
                                                       where both and body2 are satisfied. Such inconsisten•
parent features for .4, a CP-network specifies a total ordering cies cannot be modeled by CP-networks. In our approach 
relation on the domain of A. All these total orderings form they can with the effect that one of the preference rules will 
the component of a CP-network3.                        be violated whenever both bodies are true. 
  The information contained in a CP-network implies pref• The key question is that of the relationship between the 
erences among configurations. A configuration V is one-step semantics of the two approaches. First, we observe that they 
preferred to a configuration W if for some feature A (given are different. Let us consider the following example from 
a configuration 17, by U(A) we denote the value from the [Boutilier et al, 1999]. There are two features .4 and B with 
domain of A selected to U):                            values and respectively. Feature B depends on 
 1. V(B) = W(B) for every feature B (that is,          feature A and the preferences are specified as follows (we 
   for every feature other than A), and                give them in the notation of ASO programs): 
2. V(A) is strictly preferred to W(A) in the ordering of the 
  domain D of A specified by the network for the selection 
   for the parents of A as given by V (or, equivalently, by 
   W).                                                 In the CP-ordering, is preferred over 
The configuration V is CP-preferred to W if V can be ob•      as there is a one-step improvement leading from 
tained from W by a sequence of one-step improvements. It to S1. On the other hand, none of S\ and S2 is strictly pre•
is easy to see that for acyclic CP-networks (acyclic networks ferred over the other in the ps-ordering (the corresponding 
seem to arise in most situations occurring in practice) this or• satisfaction-degree vectors are: (1,2,7) and respec•
dering is indeed a partial ordering; we call it a CP-ordering4. tively). The reason is that the meaning of the rules in the 
  We will now show that the information represented by a two approaches is slightly different. In the CP-nct approach, 
CP-network N (with features can be                               body means and form the domain of a fea•
represented by means of ASO programs. First, we specify ture X)\ among all answer sets satisfying body, answer set 
the space of all configurations as answer sets to the program S\ is better than S2 if both agree on all features except A" 
    (N) that, for each feature contains and S1 makes x true and S2 makes true. In our approach 
the following rule (we assume here that                                is more like a soft constraint expressing: 
                                                       whenever body is true there is a reason to prefer over 
                                                       Here, among the answer sets satisfying body, an answer set 
                                                       S1 is preferred over and the other 
As already discussed in Section 3, such rule enforces the se• rules of the program are satisfied at least as well in S\ as in 
lection of exactly one of the listed values to an answer set. S2. In a sense, what is different is the interpretation of the 
Thus, answer sets of the program (N) are precisely the ceteris paribus — other things being equal — phrase, more 
configurations of N.                                   precisely, the interpretation of what is meant by the "other 
  To specify preferences, we proceed as follows. Let A be things" that have to be equal. In the CP-network approach 
a feature and let be the set of its par•               the "other things" are the selections of values for other fea•
ents in the CP-network. For every selection            tures which have to be the same. In our approach it is the 
of values of features respectively, the network        degree of satisfaction of the other rules in the program. 
specifies an ordering, say on the domain                 In general, our basic approach yields a weaker ordering. 
                                                       Namely, we have the following theorem. 
   3The restriction that domains be totally ordered can be dropped. 
We adopt it, following [Boutilier et al, 1999] to keep the discussion Theorem 3 Let N be an acyclic CP-network and let 
simple.                                                and W be two configurations. If V is strictly preferred to 
                                                       W under the ps-ordering determined by the ASO program 
   4This ordering captures the intuition ceteris paribus or all other 
things being equal, the aspect that is discussed in detail in [Boutilier (N)), then V is strictly preferred to W un•
et ai, 1999].                                          der the CP-ordering implied by N. 


NONMONOTONIC REASONING                                                                                 871 