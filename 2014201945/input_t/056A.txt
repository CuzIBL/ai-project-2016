                                                                   HPM: 
                             A COMPUTATIONAL FORMALISM FOR HEURISTIC PROCEDURE MODIFICATION1 


                                                              Robert Neches 
                                                Learning Research and Development Center 
                                                          University of Pittsburgh 
                                                           Pittsburgh, PA 15260 
                                                                   USA 

                          Abstract                                      expressed as propositions in the goal-description formalism. This 
                                                                        enables the system to carry out strategy transformations by having 
                                                                        those productions construct new productions which mask or 
   The HPM (Heuristic Procedure Modification) system is a model 
                                                                        circumvent preexisting productions. The formalism which 
 of strategy learning and optimization, implemented as a 
                                                                        implements the conventions also has the benefit of imposing 
 processing environment within the PRISM production system 
                                                                        constraints that reduce the reasoning power required to construct 
 package [4]. This paper describes progress in getting HPM to 
                                                                        appropriate changes. 
 emulate children's discoveries about basic addition procedures. 
 HPM s goal-trace and production trace formalisms allow it to             HPM is part of a larger project on procedure learning and 

 maintain a history of its actions which is both goal ordered and       optimization [7]2. The program is a self-modifying production 
 time ordered. Heuristics about meaningful patterns in these            system [5] implemented in MACLISP on a PDP KL-10. Its design 
 traces guide the construction of new productions, which modify         has been influenced by analyses of human performance in 
 procedures by replacing or circumventing preexisting                   procedure learning tasks. These analyses indicate that procedure 
 productions.                                                           modifications involve precompiled heuristics for applying 
                                                                        transformations, simple procedures for producing particular kinds 
 1. Introduction                                                        of changes. 
   Young children (approx. 4 years) often add by a counting               Neches [7] describes 21 application heuristics associated with 
 procedure called the "SUM method". This method consists of (a)         various transformation types. The heuristics subsume most of 
 counting out a set of objects to represent the first addend; (b)       those suggested by Anzai & Simon [1]. This paper, however, will 
 counting out another set of objects to represent the second            present only the heuristics actually implemented in the HPM 
 addend; (c) merging the two sets, and counting the number of           system: 
 objects in the new set. One strategy used by older children is the 
                                                                          • Result still available: IF a procedure is about to be executed 
 "MIN method", which starts with the larger number and 
                                                                           with a certain input, but the result of that procedure with the 
 increments it the number of times given by the smaller addend.            same input is recorded in working memory, THEN try to 
 This development can be modelled as an additive production                borrow that result now and in the future. (Requires 
 system, in which the MIN procedure is obtained from the SUM               procedure/goal, input, result, time, and processing 
 procedure by the insertion of a series of productions that mask or        information.) 
 circumvent pre existing productions. 
                                                                          • Untouched results: IF a procedure produces an output, but 
   Given an initial production system for the SUM method coded in          no other procedure receives that result as input, then try 
 its goal structured formalism, the HPM system can discover for            deleting the procedure. (Requires procedure/goal, input, 
                                                                           result, and episode information.) 
 itself some of the productions in the additive set. Its goal 
 formalism allows HPM to maintain a history of its actions which is       • Effort difference: IF a difference in expended effort is 
 both time-ordered and goal-ordered. Strategy transformation               observed when the same goal is operating on the same 
 productions, which can fire in parallel with performance                  input(s) at different times, THEN set up a goal to find a 
 productions, respond to patterns in this history by building              difference between the methods used, and try to produce the 
                                                                           circumstances which evoked the more efficient method. 
 productions which predict future outcomes, in addition to 
                                                                           (Requires effort, procedure/goal, input, event, and subgoal 
 productions which produce changed performance. The patterns               information.) 
 which evoke initial strategy transformation productions each 
 represent a different heuristic for suggesting when and where a         As the parenthesized notes indicate, each of these heuristics 
 certain type of transformation might be fruitful.                     depends on the availability of certain information about a 
   Like Barr (2], I am concerned with exploring how meta•              procedure's processing history. The formalism described in 
knowledge can be exploited in an intelligent learning system. The      Section 2 is designed to capture the information required by such 
key concept in HPM is the specification of conventions to be           heuristics. Retaining that information, although necessary to 
followed when processing goals and passing information between         enable learning, makes HPM vulnerable to breakdown under a 
them. Their existence allows informal strategy change heuristics       glut of extraneous information. Section 3 briefly describes 
to be respecified formally as productions with their conditions        mechanisms for handling the information explosion problem. 

  The research reported in this paper was supported in part by NIMH Grant  This section has been greatly abbreviated due to limited apace. Please consult 
*MH0772?, and by ARPA Grant # F33615 78 C 1551                          this reference lor more details 


                                                                  283   Once these issues are clarified, it is possible to examine the         goal trace representation by using only a restricted set of 
  operationalization and application of these heuristics, the topic of   propositions and obeying their semantics. The semantics of the 
  the remaining sections.                                                goal trace representation allow only the following types of nodes: 
                                                                         (a) GOAL nodes; (b) DATA nodes, which instantiate concepts; (c) 
  2. Execution history: The goal trace and                               SET nodes, used for concepts which represent sets of data nodes; 
     the production trace                                                (d) FIRING EVENT nodes, discussed previously: (e) PREDICTION 
                                                                         nodes, discussed in section 4; and. (f) EFFORT nodes, which have 
    HPM fundamentally operates by manipulating propositions              a numeric value associated with them representing the estimated 
 stated as node relation object triples. An object can be either a       processing effort of a goal. 
 node, a proposition, a list of nodes, or a list of propositions.          An HPM production system for solving a task primarily consists 
 Activation is associated with propositions.                            of productions which add goals (such as was just illustrated), 
                                                                        productions which set up data structures tor goals requiring 
   The condition, or left hand side (LHS), part of productions 
                                                                        iteration by establishing has data relations from the goals to DATA 
 match against sets of propositions in active memory. When a 
                                                                        nodes, and productions which terminate processing of a goal by 
 production matches successfully and is selected for firing, its 
                                                                        manipulating result, value, and status relations. 
 action part, or right-hand side (RHS), contains (a) propositions 
 which are added to the semantic network and made active;                  These goal structures are augmented by system productions 
 and/or, (b) actions, or RHS functions, which perform                   which collect information. For example, effort estimation is 
 computations without necessarily adding propositions to memory.        managed by two HPM system productions. The estimate is linked 
                                                                        to goal nodes by the 'effort relation. 
   HPM uses PRISM'S trace-data option to invoke a procedure 
 after each production firing that adds a description of the firing to 
 active memory. The description reflects the production 
 instantiation rather than the production itself. 

   HPM represents processes in a hierarchical goal structure 
 similar m organization to Sacerdotis [8] planning nets. Goals are 
 decomposed into partially ordered lists of subgoats until 
 executable goals are reached. Each goal is represented in terms 
 of relations from a common node to other objects which define it. 
 The rules of the representation constrain the form of HPM 
 productions, procedures are productions that build goal 
 structures. 
   For example, one of the first rules in a production system for 
addition by the SUM method is. "To add two numbers, generate 
sets corresponding to them and then count how many elements 
the two sets contain." Figure 1a shows the goal-trace propositions 
involved in this production, with those matched as conditions 
shown with dark lines and those added as actions shown with 
lighter lines. Figure 1b shows the corresponding production trace 
propositions. 
   The production responds to a goal to ADD by building 
structures in the network representing goals to GENERATE-SETS 
and COUNT-UP. These are linked by a subgoal relation from the 
initial goal, and a then relation from the first subgoal to the 
second These establish the goal subgoal hierarchy and the 
ordering of subgoals. input and result relations from the goal 
nodes point to nodes describing operands of the goals. These are 
described in terms of various relations, with the most important 
being value, which indicates the concept instantiated by an 
operand. 
  The goal and value relations are HPM's means of representing 
the type token distinction discussed by Woods [10]. HPM's 
strong type token distinction means that objects are represented 
in network structures of some potential complexity. To avoid 
comparison problems, "formal-value" tags, associated with nodes 
in the semantic network, are constructed in a canonical fashion 
which causes nodes representing equivalent structures to have 
identical tags. This enables HPM to immediately recognize 
equivalent objects by comparing their tags. 

  As Figure 1 illustrates, a production must only specify the 
propositions relevent to its own processing; it need not indicate all 
relations from a node Nevertheless, it is required to construct a 


                                                                 284    In summary, productions build goal structures similar to many        Second, paralleliam - like the notion of "beam search" in the 
familiar goal representations. Thus, HPM can express a range of         HARPY system [6] -• helps avoid errors due to premature 
procedures and processing constructs. The goal structure                restriction of attention. Third, it enables reducing active memory 
remains afterwards, and forms a trace of a procedure's actions.         size because important data will be attended to promptly upon its 
HPM also retains a production trace, which indicates the                assertion and can safely be eliminated from active memory much 
conditions under which portions of the goal trace were created or       earlier than in a serial system. Reducing memory size reduces the 
modified. Section 4 will consider how the information contained in      number of potential uninteresting matches, thereby easing the 
the goal and production traces is utilized by strategy modification     conflict resolution problem. 
heuristics. However, that discussion requires some 
understanding of HPM's mechanisms for managing the                        HPM emulates a parallel production system. Productions are 
information explosion entailed by retention of the two forms of         grouped into six different classes, with a separate conflict 
trace data, the topic of section 3.                                     resolution policy for each class. The production instantiations 
                                                                        fired on a given cycle represent the union of selections from the 
 3. HPM processing mechanisms                                           individual classes. Productions in different classes can be 
                                                                        presumed not to interfere with each other, and can safely fire in 
   By the very nature of learning, a self-modifying system cannot      parallel. The circumstances under which productions in the same 
know in advance what it will learn in a specific case. Therefore, it   class might interfere with each other depend on the task 
also cannot know in advance what information it will require to do     performed by that class. Therefore, conflicts are resolved by 
that learning, which in turn implies that it must retain all           class-specific policies. 
information which it is likely to need. 
                                                                          The six conflict resolution classes currently distinguished by 
   The implication of this observation is that a large information     HPM are: 
base is an unavoidable requirement of a realistic model of 
performance and learning. This places greater stress on the              • Goal manipulation: productions which operate upon goal-
attention-focusing mechanisms of production systems. Since they            trace structures. 
must retain a potentially large body of extraneous information in        • Data bookkeeping: productions which maintain the 
order to avoid missing critical information, it becomes crucial that       correctness of HPM's representation of complex data objects. 
learning systems have effective means for concentrating attention        • Goal-bookkeeping: productions which maintain correctness of 
on important data and avoiding distractions inherent in a larger           goal structures. 
information space. Two processes affect focus of attention in            • Data-description: productions which add information 
HPM: associative retrieval and conflict resolution.                        representing knowledge about properties of data objects. 

3.1. Goal-driven associative retrieval                                   • Strategy-change noticing: productions which detect or 
                                                                           predict situations relevent to development of a strategy 
  HPM has a mechanism called "goal driven spreading" for                   change. 
associative retrieval by spreading activation. When any 
                                                                         • Strategy-change-maker: productions that perform actions 
proposition is asserted, the scheme activates all other 
                                                                           which effect changes to a procedure, usually by building a 
propositions about nodes contained in that proposition. When a             new production. 
goal becomes active, activation is spread not only from the 
proposition describing the goal, but also from the proposition(s) 
describing its inputs and goal type. Similarly, when a goal is         4. An example: discovering improved 
terminated, activation is spread from the propositions describing          addition strategies 
its result, its planned successors, and the goal which invoked it. 
                                                                         This section is concerned with showing how the HPM goal 
  Associative retrieval functions as an attention focusing 
mechanism by allowing HPM to partition its memory into active          trace formalism applies to the simulation of cognitive processes. 
and non active sections, with the non-active section automatically     4.1. The SUM strategy for addition 
eliminated from consideration. Goal-driven spreading activation 
                                                                         Psychological researchers have shown that very young children 
helps reduce the size of active memory. It enables retrieval of 
                                                                       who solve addition problems by a SUM or "counting-all" method 
indirect associates most likely to be relevent to the system's 
                                                                       can discover MIN [3]. The essential properties of SUM are that 
immediate performance and learning goals, while avoiding the 
                                                                       external objects (e.g., fingers or blocks) are counted out to 
combinatorial explosion inherent in activating all indirect 
                                                                       represent each addend, and that these sets of objects are then 
associates. 
                                                                       merged and the combined set counted in order to produce the 
3.2. By-class conflict resolution                                      sum. 
  Even under this context-sensitive associative retrieval method,        The HPM production system for SUM requires 14 productions. 
active memory can still be quite large. This produces an increase      Following is a summary of its operation, with the names of key 
in matches - many more productions are likely to find matching         productions given in parentheses. Unless otherwise stated, the 
data, and many of those productions are likely to have more than       productions belong to the goal-manipulation class. 
one way to match against the data. This introduces the familiar 
problem of "conflict resolution".                                        The production system solves addition problems by asserting 
                                                                       goals to GENERATE SETS and COUNT-UP the sets (Addition-
  Parallelism simplifies these problems. First of all, it reduces the  plan), in response to a goal to ADD (Goal-to-add). The first goal is 
demands on conflict resolution by lowering the criterion of            decomposed into two goals to MAKE-A SET, one for each addend 
success. Finding a single "best" production instantiation is           {Goal to-generate-sets). These goals produce sets of objects 
difficult to do satisfactorily; it is much easier to find a set of     corresponding in size to the addends. Both spawn a aeries of 
"good" productions which do not interfere with each other.             CORRESPOND-ELEMENT goals, which produce pairings of 

                                                                 285   objects with numbers {Make*-set of-fingers. Goal to correspond-          This change is realized by building a production which 
  elements). Each of these objects is appended to a set associated       responds to the MAKE A SET goal used in the first strategy 
  with the MAKEASET goal. In both cases, the series of                   change to speed up processing of the COUNT-UP goal. The 
  CORRESPONDELEMENT goals is terminated when an object is                production asserts that the MAKE A SET goal has assigned to an 
  appended to the set that has a number assignment matching the          object the number given by the addend which was input to the 
  appropriate addend (Have-a-set). After the two sets are                goat This satisfies its termination conditions, causing the goal to 
  constructed by the MAKE A SET goals, a set representing their          complete with a single element set as its result. That single 
  merger is constructed during termination of the GENERATESETS           element has the correct number assignment for initializing 
  goal (Sets-have been generated).                                      counting of the objects representing the other addend. Note that 
    The COUNT UP goal then becomes active (Continue planned-            this new production would give an erroneous result if it fired to all 
  subgoai in the goal bookkeeping class), and counting of that set is   instances of MAKE A SET goals. However, the conditions of the 
  initiated (Start counting-up). The counting involves finding          new production are constructed from the production trace. 
 objects in the set of objects-to be counted, assigning a new           Therefore, the conditions describe the context for asserting the 
 number to them, and appending them to a set of counted objects.        particular goal instance that is used in the first shortcut, and the 
 This process is also accomplished by a sequence of                     new production will not fire in the general case. The result of this 
 CORRESPONDELEMENT goals (Count-element). The sequence                  second change is a procedure which counts out objects 
 is terminated when the set of counted objects matches the set of       corresponding to one of the addends, and then counts up those 
 to be counted objects (Finished-counting up). The answer is then       objects starting from the number after the other addend. 
 given by the size of the counted objects set (Finished-adding).          When one or both of these changes are made, the opportunity 
 4.2. Strategy transformations in HPM                                   is created for HPM to discover effort differences between different 
                                                                        trials with the same problems. This is because the effort involved 
    The goal trace formalism is designed to facilitate domain-          depends on whether the addend treated specially is the larger or 
 independent heuristics for modifying procedures, like the three        smaller of the two Effort is minimized in the case where objects 
 mentioned in Section 1. This section discusses their application in    are generated to represent the smaller addend and their counting 
 modifying the SUM strategy; the next section illustrates how they      is initialized by the larger addend The result is a procedure in 
 are operationalized by discussing the implementation of the first      which, for problems in which the other shortcuts would treat the 
 heuristic.                                                             smaller addend specially, the problem is first transformed into an 
   HPM gets from SUM to MIN through a series of incremental             equivalent form where the larger addend is taken as special. 
 refinements. The first involves eliminating redundancies in            Problems in which the shortcuts would initially be applied to the 
 counting up the combined set of objects representing the two           larger addend are left as they are. This new procedure has the 
 addends. Since counting consists of creating a set of objects in       properties of the MIN procedure: effort is now proportional only to 
 which numbers have been assigned sequentially to each object in        the size of the smaller addend, but there is a small effect of the 
 the set. there is a point where the counting up process creates a      order of the addends3. 
 set of objects and number assignments equivalent to that created 
                                                                          it is important to note that the independence of these last two 
 when building a set to represent one of the addends. After that 
                                                                        strategy changes means that they can take place in either order, 
 point, the process continues adding to the set by taking objects 
                                                                        which means that HPM can follow several different paths from 
 corresponding to the other addend, which makes the set unique. 
                                                                        SUM to MIN. 
   At this intermediate point, however, it is possible to recognize 
 through the Result still available heuristic that the counting out for 
 one addend (i.e.. the result of a MAKE-A-SET goal) can also serve 
 as part of the counting up process (i.e., as an intermediate result    5. Operationalization of heuristics 
 in processing the COUNT UP goal). When a production is built 
 that implements the change, the resulting procedure differs in that      We have seen that very straightforward heuristics can be used 
 the COUNT UP goat starts its iteration of CORRESPOND*                  to account for transitions between procedures. Operationalizing 
 ELEMENT subgoals with a set containing the elements produced           these heuristics in HPM requires dealing with the following set of 
 by one of the MAKE A SET goals, rather than starting with an           problems: (a) detecting instances of situations described in the 
 empty set. This causes processing to pick up with the result of the    heuristics' conditions; (b) determining the precursors of those 
 other MAKE ASET goal. Rather than counting all of the objects in       situations, i.e., learning to predict them; (c) constructing 
 the combined set, the new procedure therefore counts only the         appropriate new actions for productions which implement strategy 
 objects representing one of the addends, but counts them starting     changes; and. (d) discovering the range of application for a new 
from the number given by the other addend instead of starting          production. This paper is primarily concerned with (a) through (c). 
from 1.                                                                where the goal trace conventions permit making assumptions that 
                                                                       greatly simplify the problems. 
   Now, when double-counting of the one addend is eliminated in 
this fashion, an inefficiency is introduced which can be detected      5.1. Determining applicability of heuristics 
through the Untouched-results heuristic. When the objects                 The approach taken in HPM to operationalizing conditions for 
produced under MAKE A SET goal are no longer counted under             heuristics basically consists of re-expressing the conditions as 
the COUNT-UP goal, they are not really used at all. That is, there     patterns in sets of goal-trace propositions. It is not essential that 
is no point in creating these objects if they aren't going to be       all of these patterns co exist in time, because of the production 
counted. The only function which they still serve is to give the       trace. 
starting number for counting up the objects representing the other 
addend. That information can be gotten elsewhere, however, 
since the size of the set representing an addend is (of course) 
                                                                              latter observation was first reported by Svenson [9], and has been 
given by the addend itself.                                            confirmed in recent studies of his reported in a personal communication 

                                                                 286    In the Result-stillavailable heuristic, the stated condition is that Keep partial-set -for-data: 
a previously computed item is needed again. However, this 
explicit condition really consists of several implicit conditions       IF a goal has just been asserted with a particular data node 
which go into deciding that an item is "needed again" In HPM,               as input, there is a different data node with an equivalent 
the first step begins when the system notices that the input for a          value, the goal was established in response to a has-data 
goal is something that has been used before. This post hoc                  relation between the input and a higher goal, 
discovery comes too late for HPM to change its course of action             and trace-data is available for the production asserting the 
on that trial; HPM cannot tell that it will re-use a computed value,        goal and for the actions of the production which terminated 
 only that it just has reused one. Since inputs can come to a goal          the goal that had the other data node as its result, 
 either as the result of another goal or through a hasdata relation         AND a prediction has been asserted and confirmed that the 
 from a higher-level goal, two versions are needed of the                   goal's input and the other data node would match, 
 production which makes this discovery. Figure 2 illustrates the            AND the input is a set with an element as current member, 
 production which applies when the current source of a goal's               AND the other data node has some relation associating it 
 input is a has data node. This is the production which initiates the           with an element equivalent to that current member, 
 first strategy transformation in the development from SUM to MIN. 
                                                                        THEN construct a production to avoid recomputation of the set 
                                                                            by copying the prior data node over: 

Considerkeep-partials-for-datanode:                                         IF the evoking conditions are present for the production 
                                                                                which asserted the hasdata relationship between 
 IF a goal has just been asserted with a particular data node                   the higher goal and the current input of the current goal, 
     as input, there is a different data node with an equivalent                andan instantiation of the goal which produced the 
     value, the goal was established in response to a has data                  alternative source has both been asserted and completed 
     relation between the input and a higher goal,                              under the same circumstances as this occasion, 
     and trace-data is available for the production asserting the               and that goal's result has relations that correspond 
     goal and for the actions of the production which terminated                to those needed to predict what the current member 
     the goal that had the other data node as its result,                       should be, 
                                                                            THEN assert that the higher goal has data to a node which 
 THEN build a production to predict that this relationship will recur:          has the set represented by the alternative source as 
                                                                                its subset; assert a current-member for this new set, 
     IF another instance of this goal is asserted with this                     along with any other relations used in the conditions 
         input under the equivalent conditions, and another                     of the goal of interest. 
         instance of the other goal terminated in the same way as 
         observed this time,                                                                       Figure 3. 
     THEN predict that the result of that other goal will be 
         equivalent to the input of the new goal-instance.                As before, there are several versions of the production in order 
                                                                       to allow for each of the alternative information-passing methods 
                                                                       which can be used in the goal-trace formalism. The one shown is 
                             Figure 2.                                 the version which applies in making the first strategy change. Its 
                                                                       first conditions require that a successful prediction has been 
                                                                       made. Like the noticing production, it also contains conditions 
                                                                       which identify the context in which the new source goal was 
  The conditions for the production can be put into three groups:      terminated. In addition, it contains conditions which identify the 
conditions governing when it fires (ensuring that it will fire as early circumstances under which the to-be-replaced goal was asserted. 
as possible), main conditions checking that criteria for firing the    Finally, it has conditions specialized for has-data data nodes 
production are met (in this case, that the goal's input has a          which represent sets; these conditions test whether the current 
potential alternative source), and conditions which pick up data       goal makes use of any propositions allowed in describing sets 
needed on the action side of the production (by inspecting the         (e.g., the current-member relation) or other data objects. Related 
production trace to find the context in which the earlier source       to those conditions are others which seek to find or construct the 
completed and the current source was asserted).                        analogous propositions for the result of the potential new source 
                                                                       goal. 
5.2. Finding conditions for the new production 
  The action of the first production builds a new production which       When the production actually builds the production for the 
essentially predicts that the same situation, if observed again,       strategy change, the conditions of that production are derived 
would produce the same relationships between goal trace                from the conditions just described. First, they borrow the 
propositions. That is, the prediction is that any goal terminating     conditions which led to assertion of the data's current source. 
with equivalent assertions to the observed earlier source will have    This ensures that the new production can fire at the time the 
its result equivalent to the input of any goal asserted under          source would have been asserted, thus enabling it to override the 
conditions equivalent to those for the observed current goal.          production which would do so. Second, they borrow the 
                                                                       terminating conditions of the goal which first produced the data. 
  Since a new prediction production is only built when the             This ensures that the value is available to be copied, and that the 
prediction is known to be true for the current case, HPM behaves       new production has the ability to do so. Third, they borrow the 
as if the prediction had been made and tested for that case. This      initiating conditions of the first goal, expressed in terms of the 
causes a strategy transformation production to fire and build a        production trace since they may no longer be true at the critical 
second production which will change the strategy. The strategy         point in time. These conditions increase the likelihood that the 
transformation production is shown in Figure 3.                        new production will fire only in siuations closely equivalent to the 


                                                                  287 