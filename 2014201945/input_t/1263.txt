              Identifying ConÔ¨Çicts in Overconstrained Temporal Problems

         Mark H. LifÔ¨Åton, Michael D. MofÔ¨Ått, Martha E. Pollack, and Karem A. Sakallah
                      Department of Electrical Engineering and Computer Science,
                            University of Michigan, Ann Arbor 48109-2122
                         {lifÔ¨Åton, mmofÔ¨Ått, pollackm, karem}@eecs.umich.edu


                    Abstract                          rithms have been speciÔ¨Åc to particular types of constraint sys-
                                                      tems, e.g., Boolean satisÔ¨Åability ([Bruni and Sassano, 2001;
    We describe a strong connection between maxi-     Zhang and Malik, 2003; Oh et al., 2004] and others) or lin-
    mally satisÔ¨Åable and minimally unsatisÔ¨Åable sub-  ear programming [Chinneck, 1996], and the techniques de-
    sets of constraint systems. Using this relation-  veloped often cannot be readily generalized to other types of
    ship, we develop a two-phase algorithm, employ-   constraints. In contrast, we explore a deep connection be-
    ing powerful constraint satisfaction techniques, for tween maximal satisÔ¨Åability and minimal unsatisÔ¨Åability to
    the identiÔ¨Åcation of conÔ¨Çicting sets of constraints in develop techniques that can be used to Ô¨Ånd all MUSes of a
    infeasible constraint systems. We apply this tech- constraint system, regardless of constraint type. In this paper,
    nique to overconstrained instances of the Disjunc- we demonstrate the approach by applying it to Disjunctive
    tive Temporal Problem (DTP), an expressive form   Temporal Problems (DTPs) [Stergiou and Koubarakis, 1998],
    of temporal constraint satisfaction problems. Us- a particularly expressive form of temporal constraints. Our
    ing randomly-generated benchmarks, we provide     previous work focused on Ô¨Ånding MUSes of Boolean satisÔ¨Åa-
    experimental results that demonstrate how the algo- bility instances, which have applications in circuit design and
    rithm scales with problem size and constraint den- veriÔ¨Åcation. DTPs provide a richer space for using MUSes,
    sity.                                             speciÔ¨Åcally because their constraints can be relaxed without
                                                      any change in structure, something that is not possible with
1  Introduction                                       Boolean variables and constraints.
Many AI problems can be cast in terms of Constraint-    In Section 2 of the paper, we deÔ¨Åne DTPs and discuss the
Satisfaction Problems (CSPs), and a large number of systems motivation for Ô¨Ånding their MUSes further. Section 3 de-
have been developed to efÔ¨Åciently compute solutions to sets scribes the relationship between maximal satisÔ¨Åability and
of constraints. However, not every set of constraints is satis- minimal unsatisÔ¨Åability. Section 4 contains the speciÔ¨Åc al-
Ô¨Åable. This paper reports on a technique for efÔ¨Åciently iden- gorithms we employed to exploit this relationship for Ô¨Ånding
tifying sets of conÔ¨Çicting constraints in an overconstrained MUSes of DTPs. Empirical results are given in Section 5,
problem. We focus on temporal constraint problems, which and Section 6 closes with conclusions and directions for fu-
play a prominent role in planning, scheduling, and other ap- ture work.
plications of interest in AI. Our approach is particularly well-
suited to temporal problems, in which conÔ¨Çicts among con- 2 Disjunctive Temporal Problems
straints can be resolved by weakening, rather than completely A Disjunctive Temporal Problem (DTP) is a constraint satis-
abandoning, constraints.                              faction problem deÔ¨Åned by a pair hX, Ci, where X is a set of
  We build on our previous work [LifÔ¨Åton and Sakallah, real variables, designating time points, and C is a set of con-
2005] on identifying Minimally UnsatisÔ¨Åable Subsets of con- straints of the form: ci1 ‚à®ci2 ‚à®...‚à®cin, where each cij is of the
straints (MUSes). Given a set of constraints C, an MUS of form x ‚àí y ‚â§ b; x, y ‚àà X and b ‚àà <. DTPs are thus a gen-
C is a subset of C that is (1) unsatisÔ¨Åable and (2) minimal, eralization of Simple Temporal Problems (STPs), in which
in the sense that removing any one of its elements makes the each constraint is limited to a single inequality [Dechter et
rest of the MUS satisÔ¨Åable. Each MUS thus provides infor- al., 1991]. A solution to a DTP is an assignment of values to
mation about a conÔ¨Çict that must be addressed to solve the time points such that all constraints are satisÔ¨Åed.
given CSP. In general, an arbitrary CSP may contain multiple Several algorithms have been developed for solving DTPs
MUSes, and all of them must be resolved by constraint relax- [Stergiou and Koubarakis, 1998; Armando et al., 1999;
ation before the CSP can be solved. Identifying the MUSes Oddi and Cesta, 2000; Tsamardinos and Pollack, 2003]. Typ-
of a CSP makes it possible to reason about how to weaken ically, these algorithms transform the problem into a meta-
conÔ¨Çicting constraints to make a solution feasible.   CSP, in which the original DTP is viewed as a collection of
  Prior work on MUSes has largely been restricted to al- alternative STPs. Using this approach, the algorithm selects
gorithms for Ô¨Ånding a single MUS. In addition, these algo- a single disjunct from each constraint of a given DTP. The re-sulting set forms an STP, called a component STP, which can of inequalities, without modifying the structure of the prob-
then be checked for consistency in polynomial time using a lem. MUSes provide information needed to determine these
shortest-path algorithm. Clearly, a DTP D is consistent if and changes.
only if it contains at least one consistent component STP. Fur-
thermore, any solution to a consistent component STP of DTP 3 Maximal SatisÔ¨Åability and Minimal
D is also a solution to D itself. Consequently, it is standard in UnsatisÔ¨Åability
the DTP literature to consider any consistent component STP
to be a solution of the DTP to which it belongs.      Our techniques for extracting MUSes are derived from a deep
  A  number of pruning techniques can be used to fo-  relationship between maximal satisÔ¨Åability and minimal un-
cus the search for a consistent component STP of a DTP. satisÔ¨Åability. The Maximal Constraint Satisfaction problem
These include conÔ¨Çict-directed backjumping, removal of (Max-CSP) is an optimization problem on a constraint sys-
subsumed variables, and semantic branching. The DTP   tem C that has the goal of Ô¨Ånding an assignment to the vari-
solver Epilitis [Tsamardinos and Pollack, 2003] integrated all ables of C that satisÔ¨Åes as many constraints as possible; this
these techniques, in addition to no-good recording. Epilitis is the solution that Maxilitis Ô¨Ånds (e.g., {C2, C3, C4} for our
(and other traditional DTP solvers) perform total constraint example problem).
satisfaction‚Äîthat is, their objective is to Ô¨Ånd a solution that While Max-CSP is deÔ¨Åned in terms of the cardinality
satisÔ¨Åes all the constraints of a DTP. In the event that a DTP is of a satisÔ¨Åable subset of constraints, the deÔ¨Ånition can
inconsistent, these solvers are capable of detecting such infea- be relaxed to have inaugmentability as the goal instead.
sibility, but incapable of providing partial solutions that come Thus, while we can deÔ¨Åne Max-CSP(C) as {m ‚äÜ C :
close to satisfying the problem. In response, the DTP solver |m| is maximal, m is satisÔ¨Åable}, we can deÔ¨Åne a new prob-
Maxilitis [MofÔ¨Ått and Pollack, 2005] was designed to Ô¨Ånd so- lem, Maximally SatisÔ¨Åable Subset (MSS). The deÔ¨Ånition of
lutions that maximize the number of satisÔ¨Åed constraints. the set of MSSes follows, with the set of MUSes deÔ¨Åned sim-
  Sometimes the number of satisÔ¨Åed constraints is not the ilarly for comparison:
best measure of a solution; it may instead be important to
                                                                    m  ‚äÜ C : m is satisÔ¨Åable, and    
reason about exactly which constraints are violated, as well as MSSes(C) =
the extent to which they have been violated. We illustrate with       ‚àÄc ‚àà (C\m), m ‚à™ {c} is unsatisÔ¨Åable
the following very small DTP, which we use as an example            m  ‚äÜ C : m is unsatisÔ¨Åable, and
                                                       MUSes(C) =
throughout the paper:                                                 ‚àÄc ‚àà m, m\{c} is satisÔ¨Åable

    C1 : {c11 : (x ‚àí y ‚â§ 1)}                            Each MSS is a subset of C that is satisÔ¨Åable and inaug-
    C2 : {c21 : (y ‚àí x ‚â§ ‚àí2)}                         mentable; adding any other constraints in C to such a subset
                                                      will render it unsatisÔ¨Åable. Notice from the deÔ¨Ånition that
    C3 : {c31 : (y ‚àí x ‚â§ ‚àí3)} ‚à® {c32 : (z ‚àí y ‚â§ 1)}
                                                      MSSes(C) and MUSes(C) are essentially duals of one an-
    C4 : {c41 : (y ‚àí z ‚â§ ‚àí2)}                         other! An MSS is satisÔ¨Åable and cannot be made larger, and
  Note that this DTP is unsatisÔ¨Åable. The set of con- an MUS is unsatisÔ¨Åable and cannot be made smaller. This
                                                      relationship is more than cosmetic; we will show how one set
straints {C1, C2} is inconsistent, and the same is true for
                                                      is actually an implicit encoding of the other. Note also that
{C1, C3, C4}. A standard DTP solver would simply report
that the problem was unsatisÔ¨Åable, while a system like Max- any Max-CSP solution is also an MSS; maximal cardinality
ilitis would Ô¨Ånd a solution that maximizes the number of implies inaugmentability. However, MSSes may not all have
satisÔ¨Åed constraints‚Äîin this case, a solution that satisÔ¨Åes maximal cardinality, as illustrated in the example DTP. One
                                                      MSS of the example is {C , C , C }, corresponding to the
{C2, C3, C4} and not C1. But for many applications, it might                 2   3  4
be important instead to maintain some control over the rela- Max-CSP solution. {C1, C4} is another MSS (adding either
                                                      C  or C makes it unsatisÔ¨Åable), though smaller.
tionship between x and y that is expressed in C1. If we knew 2 3
                                                        Now consider C , the constraint not included in the Max-
the source of the conÔ¨Çict involving C1, we could reason about         1
                                                      CSP solution to our example. Removing C from the DTP
how to weaken C1 and the constraints with which it conÔ¨Çicts.                               1
                                                      makes the remaining system satisÔ¨Åable. In general, given any
For example, we could decide to change the bound on C1 to 2,
                                                      MSS, the set of constraints not included in that MSS provides
or to change the bounds on both C1 and C2 to 1.5. We could
                                                      an irreducible ‚ÄúÔ¨Åx‚Äù for the original infeasible system; remov-
reason about similar relaxations of C1, C3, and C4 to make
them jointly feasible. But in order to do this, we must have ing these constraints makes it satisÔ¨Åable. Therefore, we de-
identiÔ¨Åed which constraints are in conÔ¨Çict with one another, Ô¨Åne a ‚ÄúCoMSS‚Äù as the complement of an MSS, and the set
and this is precisely what the MUSes tell us.         CoMSSes(C) as:
  This ability to relax constraints without completely remov- CoMSSes(C) = {m ‚äÜ C : (C\m) ‚àà MSSes(C)}
ing them makes DTPs a much more interesting domain for
Ô¨Ånding MUSes than, for example, systems of Boolean con- This complementary view of MSSes(C) reveals a more
straints. An infeasible Boolean satisÔ¨Åability instance may meaningful connection between maximal satisÔ¨Åability and
be made feasible by completely removing constraints, and minimal unsatisÔ¨Åability. Recall that the presence of any MUS
such changes are indicated directly by techniques that iden- in a constraint system C makes C infeasible. Therefore, to
tify a maximal satisÔ¨Åable subset of constraints. An infeasible make C feasible, every MUS in C must be neutralized by
DTP, however, can be made consistent by altering the bounds relaxing or removing at least one constraint from it. Any              CoMSSes(C)    C1  C2   C3   C4
                                                             MUSes(C)     C1   C2  C3   C4
                 {C1}       X
                                                              {C1, C2}    X    X
                {C2, C3}         X    X
                                                            {C1, C3, C4}  X         X    X
                {C2, C4}         X         X

          MUSes(C) = (C1)(C2   ‚à® C3)(C2 ‚à® C4)          CoMSSes(C) = (C1   ‚à® C2)(C1 ‚à® C3 ‚à® C4)

                     = C1C2 ‚à® C1C3C4                                = C1 ‚à® C2C3 ‚à® C2C4

                     = {{C1, C2}, {C1, C3, C4}}                     = {{C1}, {C2, C3}, {C2, C4}}

                        Figure 1: Covering Problems Linking CoMSSes(C) and MUSes(C)

CoMSS is one such set: a CoMSS m is an irreducible set SimpliÔ¨Åed-Musilitis-CoMSSes(A, U)
of constraints whose removal makes C satisÔ¨Åable. Thus, ev- 1. If (U = )
ery CoMSS contains at least one constraint from every MUS 2. newCoMSS ‚Üê {C|(C ‚Üê ) ‚àà A}
of C. For temporal problems, achieving satisÔ¨Åability may not 3. CoMSSes ‚Üê CoMSSes ‚à™ {newCoMSS}
require removing every constraint in a CoMSS, but it does re- 4. backjump-to- ‚Üê true
quire relaxing all of them. Of course, removing a constraint 5. Return
is equivalent to extreme relaxation, in which the bound of an 6. C ‚Üê Select-Constraint(U), U‚Äô ‚Üê U ‚Äì {C}
inequality in the constraint is set to inÔ¨Ånity.       7. For all values c ‚àà d(C)
  Every CoMSS is inherently a solution to a covering  8.    A‚Äô ‚Üê A ‚à™ {C ‚Üê c}
problem on MUSes(C).   SpeciÔ¨Åcally, it is a solution to 9.  If consistent(A‚Äô)
the HITTING-SET problem [Garey and Johnson, 1990] on 10.       SimpliÔ¨Åed-Musilitis-CoMSS(A‚Äô, U‚Äô)
MUSes(C). Given a set C, and a collection of subsets of 11.    If (backjump-to- = true) Return
C, a hitting set of the collection is a subset of C that contains 12. A‚Äô ‚Üê A ‚à™ {C ‚Üê }
at least one element from each subset in the collection. In this 13. Unless (Assignment-Subsumed(A‚Äô,CoMSSes))
case, the set C is the set of constraints in a constraint system, 14. SimpliÔ¨Åed-Musilitis-CoMSS(A‚Äô, U‚Äô)
the collection of subsets of C is the set MUSes(C), and the 15. backjump-to- ‚Üê false
hitting set of MUSes(C) is a CoMSS of C.
  Additionally, in line with the ‚Äúduality‚Äù of MSSes and Figure 2: A simpliÔ¨Åed version of an algorithm for Ô¨Ånding the
MUSes, every MUS is a hitting set of the set of CoMSSes. CoMSSes of a DTP
This is the key to extracting all MUSes of a constraint sys-
tem: Ô¨Årst compute the set of CoMSSes of C, then extract
                                                      ier to Ô¨Ånd maximally satisÔ¨Åable subsets (and thus, CoMSSes)
MUSes by Ô¨Ånding hitting sets of the CoMSSes.
                                                      than to Ô¨Ånd MUSes directly. This follows from the relative
  Figure 1 illustrates the relationship with covering prob- simplicity of problems in NP (i.e., SAT) as compared to those
lems that link CoMSSes(C) and MUSes(C) for our example in Co-NP (i.e., UNSAT). Thus, our approach will be to com-
DTP. The left table represents the covering problem of Ô¨Ånd- pute CoMSSes(C) and then Ô¨Ånd its irreducible hitting sets.
ing MUSes that cover the CoMSSes to generate MUSes(C).
Each column is a constraint from the DTP, and each row is
a single CoMSS. We can say that a constraint ‚Äúcovers‚Äù a 4 Algorithm Details
CoMSS (marked with an ‚ÄòX‚Äô in that row) if it is contained We now describe the details of our algorithm for Ô¨Ånding
in the CoMSS. Each MUS is then an irreducible subset of the MUSes. We use a serial decomposition of the task. First
columns that covers all of the rows. In the example, these are we Ô¨Ånd all of the CoMSSes of a DTP using an algorithm
found in a manner similar to Petrick‚Äôs Method from Boolean that borrows heavily from Maxilitis; this algorithm could be
logic minimization: each row becomes a disjunction of the readily generalized for other types of constraints. Second, we
columns that cover that row, and the disjunctions are con- use techniques for extracting MUSes that operate completely
joined and simpliÔ¨Åed by the distributive rule. The right half independently of how the CoMSSes were generated and the
of the Ô¨Ågure shows how CoMSSes(C) can be generated in the types of constraints involved. The two phases combine to
exact same manner from MUSes(C).                      form a solver, which we name Musilitis, that is capable of
  If we are interested primarily in Ô¨Ånding an arbitrary set of diagnosing the infeasibility of any given DTP. The solver is
constraints to relax in order to make an overconstrained set C both sound, in that the sets of constraints it returns are all
feasible, then we could simply compute CoMSSes(C): each MUSes, and complete, in that it will Ô¨Ånd all MUSes of the
element of CoMSSes(C) represents one set of constraints given constraint system.
that, if sufÔ¨Åciently relaxed, will result in C being feasible.
But if we instead want to reason about how to weaken par- 4.1 Finding CoMSSes(C)
ticular constraints, we need to identify the individual sets of In Figure 2, we present a simpliÔ¨Åed version of an algorithm
conÔ¨Çicting constraints, i.e., MUSes(C). In practice, it is eas- for Ô¨Ånding the set of all CoMSSes of a DTP. This backtrack-ing search resembles in many ways the branch-and-bound al- Musilitis-ExtractMUS(CoMSSes)
gorithm employed by Maxilitis, in that it effectively searches 1. MUS ‚Üê 
through the space of all partial assignments of disjuncts to 2. While (CoMSSes is not empty)
constraints. (Recall that we convert each disjunctive con- 3. curCoMSS ‚Üê pop(CoMSSes)
straint in the original DTP into a meta-level variable, whose 4. newConstraint ‚Üê pop(curCoMSS)
domain is the set of disjuncts.) The set A contains the current 5. MUS ‚Üê MUS ‚à™ newConstraint
partial assignment, and the set U contains those constraints 6. For all testConstraint ‚àà curCoMSS
that have not yet been instantiated. Whenever a constraint is 7. For all testCoMSS ‚àà CoMSSes
instantiated with an empty assignment (i.e., it is purposefully 8. If testCoMSS contains testConstraint
chosen to be left unsatisÔ¨Åed), such an assignment is labeled 9.      remove testConstraint from testCoMSS
by the symbol .                                     10.    For all testCoMSS ‚àà CoMSSes
  To understand the algorithm, consider an example with 50 11. If testCoMSS contains newConstraint
constraints. Suppose that we begin the search and Ô¨Ånd a solu- 12. remove testCoMSS from CoMSSes
tion in which two constraints, say C6 and C28, have been left 13. Return MUS
unsatisÔ¨Åed. At this point, the search can prune any other solu-
tions that would necessarily leave C6 and C28 unsatisÔ¨Åed, as Figure 3: Extracting a single MUS from CoMSSes(C)
such candidates would be incapable of leading to an irredun-
dant CoMSS. We handle this in our algorithm by means of
a backjump Ô¨Çag that causes the search to immediately back- nique used in all DTP solving algorithms. It also does not
jump to the deepest point at which the assignment to one of demonstrate the use of two pruning techniques called removal
the unsatisÔ¨Åed constraints was made.                  of subsumed variables and semantic branching [Armando et
  Lines 1 through 5 handle the case when a particular solu- al., 1999] that are known to greatly improve the power of
tion with all constraints instantiated has been found. The set DTP solvers. Luckily, these methods remain available when
of unsatisÔ¨Åed constraints (those assigned ) is a CoMSS, and Ô¨Ånding CoMSSes of a DTP, and they are integrated into our
it is added to a global list of CoMSSes (initialized to ). At Musilitis solver. Other common issues, such as variable and
this point, the Ô¨Çag backjump-to- is toggled to avoid any fur- value ordering heuristics, also play a large role in guiding the
ther search within the current subtree whose solutions would search, although we do not discuss them here due to space
be subsumed by the CoMSS just found.                  limitations.
  If one or more constraints remain uninstantiated, line 6 se-
lects a constraint to satisfy, and lines 7 ‚Äì 11 attempt various 4.2 Obtaining MUSes(C)
disjuncts with which to satisfy it. However, if one of the re- Every MUS of C is an irreducible hitting set of CoMSSes(C).
cursive calls Ô¨Ånds a solution, the backjump-to- Ô¨Çag may be The decision version of the HITTING-SET problem (deciding
enabled, causing the algorithm to bubble up the search tree if there exists a hitting set of cardinality less than or equal to
until the deepest assignment of  is reached.         k) is NP-Complete [Karp, 1972], but in this case we are in-
  Line 12 is where the algorithm attempts the empty assign- terested in irreducibility, not cardinality. Combined with the
ment. If this assignment is not subsumed by any CoMSSes property that no CoMSS is a subset of any other, this allows
found in prior solutions (line 13), the algorithm will pur- us to extract a single MUS via a greedy approach in poly-
sue this partial assignment (line 14), afterwards resetting the nomial time, without resorting to search. Figure 3 provides
backjump Ô¨Çag in the event that a solution below was discov- pseudocode for the algorithm.
ered (line 15). It should be noted that this version of the al- The construction works by sequentially adding constraints
gorithm is not guaranteed to Ô¨Ånd only irredundant CoMSSes, to a forming MUS. Intuitively, an MUS is a set of constraints
but any redundancies can be easily removed in a postprocess- containing at least one constraint from every CoMSS such
ing step.                                             that every constraint is an essential element of the set. By ‚Äúes-
  A slight variation on this approach is to Ô¨Ånd CoMSSes in sential‚Äù we mean that removing a constraint from the MUS
increasing order of size. By blocking CoMSSes found in will leave at least one CoMSS unrepresented. Thus, every
increasing order, the algorithm ensures that all subsequent time a constraint is added, the remaining problem is modi-
CoMSSes found are irredundant. Such an incremental al- Ô¨Åed to enforce the requirement that the constraint be essen-
gorithm can easily be achieved by setting an upper bound tial. This is done by ensuring that the new constraint is the
on the number of constraints violated, and repeatedly calling only representative of at least one CoMSS.
the given algorithm, each time increasing the upper bound Lines 3 and 4 of Musilitis-ExtractMUS choose a CoMSS
by 1 until the problem is no longer satisÔ¨Åable. While many from the set and a single constraint, newConstraint, from that
searches are performed, the pruning allowed by the smaller CoMSS. newConstraint is added to the MUS, and the re-
CoMSSes may potentially save time otherwise spent Ô¨Ånding maining lines ensure that it is essential. Lines 6 through 9
redundant CoMSSes. This incremental algorithm proved to remove the remaining constraints in the chosen CoMSS from
be extremely effective in Maxilitis, where the goal was sim- all other CoMSSes in the input set. This prevents any of those
ply that of maximal constraint satisfaction.          constraints from being added in later iterations, which could
  If implemented exactly as shown, the algorithm shown make newConstraint non-essential. Then, lines 10-12 re-
in Figure 2 would perform rather poorly. The pseudocode move any CoMSSes containing newConstraint, because they
does not illustrate the use of forward checking, a vital tech- are now represented in MUS. Following the modiÔ¨Åcations toCoMSSes, the algorithm iterates. When CoMSSes is empty,            N = 7, Incremental
                                                                   N = 7, Backtracking
the constructed set of constraints is a complete, exact MUS. 3
                                                            10     N = 6, Incremental
  Extracting all of the MUSes from CoMSSes(C) requires             N = 6, Backtracking
                                                                   N = 5, Incremental
searching for all irreducible hitting sets of CoMSSes(C).    2     N = 5, Backtracking
Due to the potential combinatorial explosion, the number of 10

MUSes may be impractically large; however, in many cases     1
the result is tractable.                                    10
  One method for generating the complete set of MUSes      Seconds
                                                             0
from CoMSSes(C) uses the general form of the Musilitis-     10
ExtractMUS  algorithm in Figure 3. The particular MUS
                                                             ‚àí1
generated by that algorithm depends on the order in which   10
CoMSSes and constraints are selected from CoMSSes(C);
                                                             ‚àí2
thus, by branching on those two decisions (lines 3 and 4),  10
                                                              6       7      8       9      10     11
all possible MUSes can be generated. This can be accom-                          R
plished with a recursive function that takes as input a) the
remaining set of CoMSSes and b) the MUS currently being   Figure 4: Median runtimes for Ô¨Ånding CoMSSes(C)
constructed in each branch of the recursion (these are initial-
ized to CoMSSes(C) and the empty set, respectively). The
                                                            300
branching is not ideal, and duplicate branches are both possi-                                 R = 11
ble and quite common in practice, so pruning heuristics can                                    R = 10
                                                            250                                R = 9
be employed to reduce the search space.                                                        R = 8
                                                                                               R = 7
                                                                                               R = 6
                                                            200
5  Experimental Results
We benchmarked both phases of the MUS generation pro-       150
cess (Ô¨Ånding CoMSSes(C) and extracting MUSes(C) from
it) using DTPs created by a random DTP generator used       100
in testing previous DTP solvers [Stergiou and Koubarakis,
1998]. We collected performance data and analyzed the sets   50
of CoMSSes and MUSes for DTPs over a range of DTP gen-      Frequency  Averaged over 50 Instances

erator parameters.                                            0
                                                              0      5     10     15     20    25
  The test case generator takes as arguments the parameters                   CoMSS size
hk, N, m, Li, where k is the number of disjuncts per con-
straint, N is the number of time points, m is the number of Figure 5: Distribution of CoMSS sizes (N = 6)
constraints, and L is the constraint width, i.e., a positive in-
teger such that for each disjunct x ‚àí y ‚â§ b, b ‚àà [‚àíL, L]
with uniform probability. In our experiments, we set k = 2, negligible. Figure 4 shows the median runtimes for both al-
N ‚àà {5, 6, 7}, and L = 100. A derived parameter R (the ra- gorithms on all problem parameters. Not surprisingly, run-
tio of constraints over variables, m/N) was varied from 6 to time increases both with size (N) and density (R). How-
11. For each setting of N and R, 50 random problems were ever, notice that the times for the single backtracking algo-
generated. (For example, we generated 50 problems for the rithm (labeled ‚ÄòBacktracking‚Äô) tend to be roughly an order
case where N is 7 and R is 7; those problems have 7 tem- of magnitude faster than those for the incremental method
poral variables and 49 constraints each). These problems are (labeled ‚ÄòIncremental‚Äô). This contrasts with the results re-
likely to be highly overconstrained, with 30-77 constraints on ported in [MofÔ¨Ått and Pollack, 2005], where the opposite ef-
only 5-7 time points. The size of these problems is dwarfed fect was observed. The difference is that Maxilitis can stop
somewhat by those which Maxilitis can solve (e.g., N = 20), at any iteration where a solution is found, as only a single
although one must keep in mind that the objective of max- solution of maximal cardinality is needed. Even though mul-
imal constraint satisfaction is much easier to achieve. The tiple searches are performed in the incremental mode, sub-
domains of the variables are integers instead of reals, which stantially more is pruned than in a single search that has no
again is standard in DTP literature. Our implementation of upper bound. In our case, iteration must continue until all
Musilitis was developed in Java (Ô¨Ånding CoMSSes) and C++ CoMSSes of any size have been found. The combined run-
(extracting MUSes), and our experiments were conducted in time of these separate searches can easily exceed that of a
Linux on a 2.2GHz Opteron processor with 8GB of RAM.  single backtracking search.
  First, we compared the runtime of the two versions of the Figure 5 shows the distribution of sizes of CoMSSes found
Musilitis-CoMSS algorithm described in Section 4.1‚Äîone by the Musilitis-CoMSS algorithm for the cases where N =
which uses a single backtracking search to Ô¨Ånd all CoMSSes, 6 and R ranges from 6 to 11. Because our DTPs were
and another which does so incrementally. The former re- randomly generated, these results are not particularly useful
quires an additional postprocessing step to remove all redun- alone; however, they do provide valuable information when
dant CoMSSes, a procedure whose runtime was found to be one considers the runtime of the MUS extraction phase of