                          From Answer Set Logic Programming to
                               Circumscription via Logic of GK

                                      Fangzhen Lin   and  Yi Zhou
                                    Department of Computer Science
                           Hong Kong University of Science and Technology
                                Clear Water Bay, Kowloon, Hong Kong

                    Abstract                          circumscription in the same way as Lin and Shoham [1992]
                                                      did for mapping normal logic programs to circumscription.
    We ﬁrst provide a mapping from Pearce’s equilib-  As it turned out, this mapping, when extended to ﬁrst-order
    rium logic and Ferraris’s general logic programs to case, yields a semantics to ﬁrst-order general logic programs
    Lin and Shoham’s logic of knowledge and justiﬁed  that is similar to the one proposed recently by Ferraris et al.
    assumptions, a nonmonotonic modal logic that has  [2007].
    been shown to include as special cases both Reiter’s We ﬁrst brieﬂy review Lin and Shoham’s logic of GK,
    default logic in the propositional case and Moore’s Ferraris’s general logic programs, and Pearce’s equilibrium
    autoepistemic logic. From this mapping, we obtain logic.
    a mapping from general logic programs to circum-
    scription, both in the propositional and ﬁrst-order
    case. Furthermore, we show that this mapping can  2   Logic of GK
    be used to check the strong equivalence between   The language of the logic of GK is a modal propositional lan-
    two propositional logic programs in classical logic. guage with two modal operators, K, for knowledge, and A,
                                                      for assumption. Given a set Atom of atoms (also called vari-
1  Introduction                                       ables or primitive propositions), formulas in the logic of GK
                                                      are deﬁned inductively below in BNF notation:
Answer Set Programming (ASP) is a new   paradigm of
constraint-based programming based on logic programming F ::= ⊥|p | K(F ) | A(F ) |¬F | F ∧ F | F ∨ F | F → F,
with answer set semantics [Niemela,¨ 1999; Lifschitz, 1999;
                                                            p ∈ Atom      ⊥
Marek and Truszczynski, 1999]. It started out with nor- where        , and   is a constant standing for falsity.
mal logic programs, which are programs that can have nega- Formulas without modal operators are called base formulas.
tion but not disjunction. Driven by the need of applica- The semantics of the logic of GK is deﬁned through
                                                                                               M
tions, various extensions have been proposed. These include Kripke interpretations. A Kripke interpretation is a tu-
                                                         W, π, R ,R  ,s       W
disjunctive logic programs [Gelfond and Lifschitz, 1991; ple     K   A   , where   is a nonempty set whose
                                                                                     π
Leone et al., 2006], nested expressions [Lifschitz et al., elements are called possible worlds, a function that maps
                                                                                           Atom   R
1999], cardinality and weight constraints [Niemela;¨ and Si- a possible world to a truth assignment on , K and
                                                      R                    W
mons, 2000], and others. Recently, Ferraris [2005] proposed A binary relations over representing the accessibility re-
                                                                K     A                 s ∈  W
to view formulas in propositional logic as logic programs lations for and , respectively, and  , called the
                                                                    M                         |=
and showed that they include as special cases all the above actual world of . The satisfaction relation between a
                                                                        M  = W, π, R ,R  ,s
mentioned classes of logic programs. In particular, Ferraris Kripke interpretation   K   A   and a formula
                                                      F
[2005] provided a stable model semantics for these formu- is deﬁned inductively as follows:
las using a transformation similar to the original Gelfond- • M  |= ⊥;
Lifschitz transformation, and showed that this semantics co-
                                                        • M  |= p if π(s)(p)=1, where p ∈ Atom;
incides with Pearce’s equilibrium logic [Pearce, 1997].
  In this paper, we show that this general stable model • M  |= ¬F iff M  |= F ;
semantics can be embedded in Lin and Shoham’s logic     • M  |= F ∧ G iff M |= F and M |= G;
of knowledge and justiﬁed assumptions [Lin and Shoham,
1992], aka logic of GK. Besides showing the generality of Lin • M |= F ∨ G iff M |= F or M |= G;
and Shoham’s logic, which was proposed as a general logic • M |= F → G iff M  |= F or M |= G;
for nonmonotonic reasoning, this embedding allows us to ob-
                                                        • M  |= K(F ) iff W, π, RK ,RA,w|= F for any w ∈
tain a way to check in classical propositional logic whether W        (s, w) ∈ R
any given two logic programs are strongly equivalent in al-  , such that       K ;
most the same way as in [Lin, 2002]. It also allows us to ob- • M |= A(F ) iff W, π, RK ,RA,w|= F for any w ∈
tain a mapping from general logic programs to propositional W , such that (s, w) ∈ RA.

                                                IJCAI-07
                                                   441We say that a Kripke interpretation M is a model of a for- F X , is the formula obtained from F by replacing each maxi-
mula F if M satisﬁes F . In the following, given a Kripke mal subformula that is not classically satisﬁed by X with ⊥.
interpretation M,welet                                                              X |= ¬F
                                                      Thus for example, (¬F )X =
                                                                                 ⊥   otherwise
   K(M)={F     | F is a base formula and M |= K(F )}
                                                        Now a set X of atoms is a stable model of a general logic
   A(M)={F     | F is a base formula and M |= A(F )}. program F if:
                                                                X
Notice that K(M) and A(M) are always closed under clas- (i) X |= F ;
                                              X                                                       X
sical logical entailment. In the following, for any set of (ii) there is no proper subset X1 of X, such that X1 |= F .
formulas, we let Th(X) be the logical closure of X under
classical logic.                                      Example 3.1 Consider the following three general logic pro-
                                                      gram.
Deﬁnition 2.1 (GK Models) Given a formula F , a Kripke
interpretation M is a minimal model of F if M is a model of            P   =   ¬p → q,
F and there does not exist another model M1 of F such that             Q   =   ¬p ∨ p,
A(M1)=A(M)     and K(M1)  ⊂ K(M). We say that M  is                    R   =   p →¬¬p,
a GK model1 if M is a minimal model of F and K(M)=
A(M).                                                 where p, q are atoms. The maximal subformula in P that is
                                                      false under {q} is p, thus P {q} is ¬⊥ → q, which is satisﬁed
  Lin and Shoham showed that the logic of GK can be used
                                                      by {q}, but not by ∅. Therefore, {q} is a stable model of P .
to capture Reiter’s default logic [Reiter, 1980] and Moore’s
                                                                      P {p}  ⊥→⊥                      {p}
auto-epistemic logic [Moore, 1985]. As a consequence, nor- On the other hand, is   , which is satisﬁed by
                                                                        ∅          {p}
mal logic programs under stable model semantics can be cap- as well as its subset . Therefore, is not a stable model
                                                        P                   {q}                        P
tured in the logic of GK as well. Speciﬁcally, they showed of . It can be seen that is the only stable model of .
                                                                                Q                     {p}
that a normal rule                                    Similarly, it can be shown that has two stable models,
                                                      and ∅, and R has exactly one stable model ∅.
           r ←  p1, ..., pn, not q1, ..., not qm
                                                      4   Pearce’s equilibrium logic
can be translated into the following sentence in the logic of
GK:                                                   Pearce’s equilibrium logic [Pearce, 1997] is based on the
                                                      logic of here-and-there, a non-classical logic. Given a set
   Kp1  ∧···∧Kpn   ∧¬Aq1  ∧···∧¬Aqm   →  Kr.    (1)   Atom  of atoms, formulas of Atom are exactly the same as
                                                      in the case of general logic programs. Thus, negation in equi-
They also showed that this translation extends to disjunction
                                                      librium logic is considered a shorthand as well.
logic programs.
                                                        The semantics of the logic of here-and-there is deﬁned in
  In this paper, we shall show that general logic programs terms of HT-interpretations, which are pairs X, Y  of sets
                  [    ]
proposed by Ferraris 2005 can be captured in the logic of atoms such that X ⊆ Y . The HT satisfaction relation2 |= be-
GK as well.                                           tween an HT-interpretation X, Y  and a formula F is deﬁned
                                                      recursively as follows:
3  General logic programs
                                                        • For p ∈ Atom, X, Y |= p if p ∈ X;
          Atom                             [
Given a set    of atoms, general logic programs Ferraris •X, Y   |= ⊥;
and Lifschitz, 2005] are formulas deﬁned inductively below
in BNF notation:                                        •X, Y |= F ∧ G if X, Y |= F and X, Y |= G;
                                                        •X, Y |= F ∨ G   X, Y |= F  X, Y |= G
       F ::= ⊥|p   | F ∧ F | F ∨ F | F → F,                              if           or           ;
                                                        •X, Y |= F →  G if
      p ∈ Atom
where          . Notice that there is no negation in the     X, Y   |= F X, Y |= G
language. Instead, for any formula F , ¬F is considered to be (i)       or           , and
a shorthand for F →⊥.                                     (ii) Y |= F → G.
  A set X ⊆ Atom  of atoms can be considered as a truth An HT interpretation X, Y  is an equilibrium model of a for-
assignment in the straightforward way:                mula F if X = Y , X, Y |= F , and there is no proper subset
                                                      X     X          X  ,Y|=  F
              X  |= ⊥,X|=  p   p ∈ X,                   1 of  , such that 1        . Ferraris [2005] showed
                            iff                       that the stable models of a formula are essentially the same as
and the usual deﬁnition for the logical connectives.  its equilibrium models.
  The stable models of a formula (general logic program) Theorem 1 (Ferraris) Let X be a set of atoms and F a gen-
are deﬁned by a modiﬁed extended Gelfond-Lifschitz trans- eral logic program, X is a stable model of F iff X, X is an
formation. Given a general logic program F , and a set X equilibrium model of F .
of atoms, the reduct of F under X [Ferraris, 2005], written
                                                         2We overload |=, and use it to stand for satisfaction relations for
  1In [Lin and Shoham, 1992], GK models are called preferred modal logic, classical logic, and logic of here-and-there. Which one
models.                                               it stands for should be clear from the context.

                                                IJCAI-07
                                                   4425  From general logic program and                       1. X is a stable model of F .
   equilibrium logic to the logic of GK                 2. X, X is an equilibrium model of F .
In this section, we present a translation from a general logic 3. There is a GK model M of FGK such that K(M)=
program (also a formula in equilibrium logic) to a formula in A(M)=Th(X).
the logic of GK, and show that under the translation, stable
                                                                                             F
models (thus equilibrium models) coincide with GK models Proof sketch: Given a general logic program , two set of
                                                            X     Y         X  ⊆ Y                     M
in the logic of GK.                                   atoms   and   such that      and a Kripke structure
                                                              K(M)=Th(X)       A(M)=Th(Y    )
  Given a general logic program F , we deﬁne two formulas such that          ,               , by induction
                                                                       F          X |= F Y    M  |= F
FA and FGK in the logic of GK as follows:             on the structure of ,wehave          iff       GK .
                                                      From this, 2 ⇔ 3 follows. By Theorem 1, 1 ⇔ 2.
 1. FA is obtained from F by simultaneously replacing each
    atom p by Ap.
 2. FGK  is deﬁned inductively as follows:            6   From general logic programs and
      •⊥GK   = ⊥;                                         equilibrium logic to circumscription:
      • For p ∈ Atom, pGK = Kp;                           propositional case
      • (F  G)GK  = FGK   GGK  ( is ∧ or ∨).
      • (F →  G)    =(F    →  G    ) ∧ (F → G)        Given their mapping (1) from normal logic program to the
                GK      GK      GK            A.      logic of GK, Lin and Shoham [1992] showed that stable
  It can be shown that for a normal logic program F , FGK is model semantics for normal logic programs can be captured
equivalent to the translation by Lin and Shoahm [1992] given in circumscription [McCarthy, 1986] as follows. Given a set
in Section 2 under                                    Atom  =  {p, q, ...} of atoms, let Atom = {p,q, ...} be a
                                                                                              F    C(F )
                        Kp →  Ap,                     new set of atoms. Given a normal logic program , let
                                                (2)   be the conjunction of the sentences:
                 p∈Atom
                                                                                        
                                                               p1 ∧···∧pn  ∧¬q1 ∧···∧¬qm   →  r,
and that for any formula W in the logic of GK, M isaGK
model of W iff M is a GK model of W ∧ (2).            for each rule
  This translation is also similar to the mapping from formu-
las in equilibrium logic to quantiﬁed boolean formulas given      r ← p1, ..., pn, not q1, ..., not qm
  [               ]
in Pearce et al., 2001 . We shall discuss this in more detail in F . Lin and Shoham [1992] showed that X is a stable model
in a later section.                                   of F iff X ∪ X is a model of
  To illustrate, consider the three programs in Example 3.1.   
                                                                          
PGK is                                                             (p ↔ p ) ∧ Circum(C(F ); Atom),
           ((¬p)GK →  qGK ) ∧ (¬p → q)A,                     p∈Atom
which is equivalent (in classical logic) to
                                                      where Circum(W  ; Q) is the circumscription of the atoms in
        ((¬pGK ∧¬pA)  →  Kq) ∧ (¬pA →  qA),           Q in W  (with all other atoms ﬁxed). Lin and Shoham also
                                                      showed that this result can be extended to disjunctive logic
which is                                              programs. Using the same idea, we can capture the stable
        (¬Kp  ∧¬Ap)  →  Kq) ∧ (¬Ap →  Aq).      (3)   model semantics of general logic program and equilibrium
                                                      logic in circumscription as well.
Now let M be a model of the above sentence. If p ∈ A(M), Let Atom be a set of atoms. Again let Atom = {p | p ∈
then (3) holds no matter what K(M) is, thus its minimal Atom} be a set of new atoms. Given any general logic pro-
model is K(M)=Th(∅), so cannot be a GK model. Now if  gram F  in the language Atom, let C(F ) be the result ob-
p  ∈ A(M), then (3) is equivalent to (¬Kp → Kq) ∧ Aq. tained from FGK by replacing every Kp in it by p and every
Thus q ∈  A(M). Thus if  M  is a minimal model, then  Ap in it by p, for every p ∈ Atom.
K(M)=Th({q}). And if     A(M)=K(M), then      M  is
                                                      Theorem 3  For any general logic program F in the lan-
a GK model. What we have shown here is that in any GK       Atom         X  ⊆ Atom
model M of (3), K(M)=A(M)=Th({q}). The existence      guage      , any set         , the following four state-
of such a model is apparent.                          ments are equivalent
  It can be similarly shown that QGK is equivalent to Ap → 1. X is a stable model of F .
Kp          M                    Q        K(M)=
   , and that   is a GK model of   GK  iff              2. X, X is an equilibrium model of F .
A(M)=Th({p})     or K(M)=A(M)=Th({}). And
                                                                             M     F            K(M)=
RGK  is equivalent to Kp → Ap, and that M is a GK model 3. There is a GK model  of  GK  such that
                                                          A(M)=Th(X)
of RGK iff K(M)=A(M)=Th({}). Thus for these                             .
three programs, their GK models correspond one-to-one with 4. X ∪ X is a model of
their stable models. In general, we have the following result.   
                                                                     (p ↔  p) ∧ Circum(C(F ); Atom).
Theorem 2 Let X be a set of atoms and F a general logic                                               (4)
program. The following three statements are equivalent.        p∈Atom

                                                IJCAI-07
                                                   443Proof sketch: 3 ⇔ 4 follows from the deﬁnitions of GK 7   From general logic programs and
models and circumscription.                               equilibrium logic to circumscription: ﬁrst
  Interestingly, our translation C(F ) that embeds general order case
logic programs and equilibrium logic in circumscription is As in [Lin and Shoham, 1992], we can extend the above map-
exactly the same as the one by Pearce et al. [Pearce et al., ping to the ﬁrst-order case. First of all, we extend logic pro-
2001] for embedding equilibrium logic in quantiﬁed boolean grams to ﬁrst-order case. Let L be a relational ﬁrst-order lan-
formulas. They showed that X, X is an equilibrium model guage with equality, i.e. it has no proper functions. By an
of a formula F in equilibrium logic iff X is a model of the atom, we mean an atomic formula including equality atoms.
following quantiﬁed boolean formula:                    In the following, let Σuna be the set of unique names as-
                                                                            c  = c
       F  ∧¬∃Atom((Atom < Atom)  ∧ C(F )),          sumptions on constants: 1   2 for any two distinct con-
                                                      stants c1 and c2.
       
where F is the formula obtained from F by replacing every A ﬁrst-order general logic program is a ﬁrst-order sentence
                           
atom p by p , and Atom < Atom stands for              in the following set:
                            
               (p → p) ∧¬       (p → p).             F ::= ⊥|A   | F ∧ F | F ∨ F | F → F  |∀xF  |∃xF,
         p∈Atom            p∈Atom                     where A is an atom, and x a variable. Again, for any general
While propositional circumscription is also a quantiﬁed logic program F , ¬F is considered to be a shorthand for F →
boolean formula, it is a well studied formalism. There ⊥.
are many known results about circumscription that we can Now let M be a ﬁnite model of Σuna with domain D. Let
use. Mapping logic programs to circumscription helps under- σ be the mapping from constants to D under M. Clearly, for
standing both formalisms.                            any distinct constants c1 and c2, σ(c1)  = σ(c2). We say that
                                                     M                                                F
  Notice that the formula p∈Atom(p ↔ p ) is equivalent to is a stable model of a ﬁrst-order general logic program
                                                    if T (M), the set of ground facts true in M:
         [      (p → p)] ∧ [    (p → p)].
                                                             T (M)={P   (u) | P         u ∈ P M }
         p∈Atom            p∈Atom                                              a predicate,
                                                                                               F
Thus (4) is equivalent to                             is a stable model of the general logic program M , which,
                                                                        F    M                 F     M
                                                    called the grounding of on , is obtained from and
[     (p →  p )]∧[     (p → p)]∧Circum(C(F  ); Atom), in two steps:
p∈Atom           p∈Atom
                                                        1. First, replace every constant c in F by σ(c), every
which is equivalent to                                    subformula of the form ∀xW in it by u∈D W (x/u),
                                                                                         ∃xW
[     (p → p)]∧Circum(C(F  )∧      (p → p); Atom),      and every subformula of the form      in it by
                                                            u∈D W (x/u), where W (x/u) is the result of replac-
p∈Atom                        p∈Atom                      ing every free occurrence of x in W by u. The order by
as the atoms (predicates) to be minimized occur only     which these subformulas are replaced does not matter.
                    (p  →   p)
negatively in p∈Atom         .  Putting the formula    2. In the expression obtained by the ﬁrst step, replace every
                                                                                              
 p∈Atom(p →  p ) into the theory in the circumscription is equality atom u = u by , and every u = u for distinct
                            C(F )                         u    u   ⊥
good as it can be used to simplify .                       and   by  .
                              
Proposition 6.1 If p∈Atom(p → p ) |= C(F ) ↔ W , then Example 7.1 Consider the following four programs:
(4) is equivalent to
                                                                 F1 = ∃xp(x) ∧∃x(¬p(x) →  q),
                    
              (p ↔ p ) ∧ Circum(W ; Atom).                        F2 = ∃xp(x) ∧ [(∃x¬p(x)) → q],
        p∈Atom
                                                                  F3 = ∃xp(x) ∧ [¬(∃xp(x)) → q],

  Consider again the three programs in Example 3.1. For P ,       F4 = ∃xp(x) ∧∀x(¬p(x) →  q).
C(P )              ¬p ∧¬p →  q
     is equivalent to          , which is equivalent to                                       {a, b}
¬p → q under (p → p) ∧ (q → q). Thus for this program, Now consider a structure with two elements . The
(4) is equivalent to                                  grounding of the four programs on this domain are
    (p ↔ p) ∧ (q ↔ q) ∧ Circum(¬p → q; {p, q}),          (p(a) ∨ p(b)) ∧ ((¬p(a) → q) ∨ (¬p(b) → q)),
                                                            (p(a) ∨ p(b)) ∧ ((¬p(a) ∨¬p(b)) → q),
which is equivalent to
                                                            (p(a) ∨ p(b)) ∧ (¬(p(a) ∨ p(b)) → q),
        (p ↔ p) ∧ (q ↔ q) ∧¬p ∧ (¬p ↔ q),
                                                            (p(a) ∨ p(b)) ∧ (¬p(a) → q) ∧ (¬p(b) → q),
which has a unique model {q, q}.
  For Q = ¬p ∨ p, C(Q) is equivalent to p → p. Thus for respectively. So for this domain, F1 and F3 have the same
this program, (4) is equivalent to                    stable models, {p(a)} and {p(b)}, and F2 and F4 have the
                                                                       {p(a),q}    {p(b),q}
          (p ↔  p) ∧ Circum(p → p; {p}),            same stable models,       and        . It is easy to see
                                                      that this is the case for any given domain: F1 and F3 have
                         
which is equivalent to p ↔ p , which has two models p and the same stable models, and F2 and F4 have the same stable
¬p.                                                   models.

                                                IJCAI-07
                                                   444  We now show that the stable models of ﬁrst-order general under  ∀x.p(x)    →      p(x).      Therefore,
logic programs can be captured in circumscription as well. Circum(C(F2), {p, q}) is equivalent to
                                              
  Let Δ be the set of predicates in the language. Let Δ be a          ∃!xp(x) ∧ (∃x¬p(x) ↔ q),
set of new predicates, one for each P in Δ with the same ar-
ity and denoted by P . Now given a ﬁrst-order general logic under (5), thus equivalent to
program F , let C(F ) be the ﬁrst-order sentence deﬁned in-          ∃!xp(x) ∧ ((∃x¬p(x)) ↔ q),
ductively as follows.                                     which can be considered to be the ﬁrst-order semantics
  • C(⊥) is ⊥.                                            of F2.IfD =  {a, b}, then there are exactly two models
                                                                        {p(a),q}    {p(b),q}
  • If W is an atomic formula, then C(W ) is W .          of this sentence,     and         .
                                                        • C(F3)
  • C(W1   W2) is C(W1)  C(W2), where ∈{∧,  ∨}.              is
                                                          ∃xp(x)∧(¬∃xp(x)∧¬∃xp(x)  →  q)∧(¬∃xp(x) → q),
  • C(∀xW  ) is ∀xC(W ), and C(∃xW ) is ∃xC(W ).
                                                        which is equivalent to C(F1) under (5). Thus F1 and F3
  • C(W1  →  W2) is (C(W1) →  C(W2)) ∧ (W1 →  W2),
    where W  is the result of replacing every predicate P in are equivalent.
           
    W  by P .                                           • C(F4) is
                                                                                                    
  The stable models of F is then the circumscription of all ∃xp(x) ∧∀x[(¬p(x) ∧¬p (x) → q) ∧ (¬p (x) → q )],
              Δ   C(F  )
the predicates in in   , together with the following ax-  which is equivalent to C(F2). Thus F2 and F4 are equiv-
iom                                                      alent.
                   ∀x(P (x) ↔ P (x)).       (5)
              P ∈Δ                                    8   Strong equivalence
              M                  Σ     M
Theorem 4 Let   be a ﬁnite model of una.  is a stable                              [                  ]
       F    M                                        The notion of strong equivalence Lifschitz et al., 2001 is
model of  iff  is a model of                          important in logic programming. For disjunctive logic pro-
              Circum(C(F  ); Δ) ∧ (5),          (6)   grams, research by Lin and Chen [2005] and Eiter et al.
                                                      [2006] show that interesting programs transformation rules
     M                            M
where    is the conservative extension of under (5).  can be designed based on the notion.
  Similar to Proposition 6.1, we have                   According to Ferraris and Lifschitz [2005], two general
                
                                                     logic programs F and G are said to be strongly equivalent
Proposition 7.1 If P ∈Δ ∀x(P (x) → P (x)) |= C(F ) ↔
                                                      if for any formula F1 that contains an occurrence of F , F1
W , then (6) is equivalent to
                                                      has the same stable models as the formula obtained from it
               Circum(W   ;Δ)∧ (5).                   by replacing an occurrence of F by G. They showed that for
                                                      any F and G, they are strongly equivalent iff F and G are
                         [    ]
  Interestingly, Ferraris et al. 2007 also proposed a seman- equivalent in the logic here-and-there.
tics for general ﬁrst-order logic programs and showed that As it turns out, our mapping from equilibrium logic to
their semantics is equivalent to (6) when restricted on the logic of GK also embeds logic of here-and-there to modal
predicates in the original program, that is, when all new pred-
     P                                               logic. Thus the problem of deciding whether two programs
icates  in (6) are existentially quantiﬁed.           are strongly equivalent can be reduced to checking whether
Example 7.2 Consider the programs in Example 7.1      certain modal logic formulas are valid, and that, because of
  • C(F1) is                                          the special format of these modal formulas, can in turn be re-
                                                   duced to checking whether certain propositional formulas are
    ∃xp(x) ∧∃x[(¬p(x) ∧¬p  (x) → q) ∧ (¬p (x) → q )]. tautologies.
    which is equivalent to ∃xp(x) ∧ (¬∃xp(x) →  q)   Theorem 5  Let F be a formula in equilibrium logic, X and
    under ∀x.p(x)  →   p(x).  Therefore, under (5),  Y two sets of atoms such that X ⊆ Y ,andM a Kripke inter-
    Circum(C(F1), {p, q}) is equivalent to            pretation such that K(M)=Th(X)  and A(M)=Th(Y    ).
                                                                 X, Y |= F   M |= F
               ∃!xp(x) ∧ ((¬∃xp(x)) ↔ q),            We have that          iff      GK .
                                                      Theorem 6  Let F and G be two general logic programs. The
    thus equivalent to                                following conditions are equivalent.
                     ∃!xp(x) ∧¬q,                     1. F and G are strong equivalent.
                                                         F              G
    which can be considered to be the ﬁrst-order semantics 2.  is equivalent to in the logic here-and-there.
    of F1.IfD = {a, b}, then there are exactly two models 3. p∈Atom(Kp → Ap) |=(F ↔ G)GK .
                                                         
    of this sentence, {p(a)} and {p(b)}.
                                                      4.         (Kp →  Ap) |= FGK ↔  GGK .
                                                         p∈Atom
  • C(F2) is                                                           
                                                      5.  p∈Atom(p →  p ) |= C(F ↔ G).
                                                      
    ∃xp(x)∧(∃x(¬p(x)∧¬p  (x)) → q)∧(∃x¬p (x) → q ),                    
                                                      6.  p∈Atom(p →  p ) |= C(F ) ↔ C(G).
    which is equivalent to                            Corollary 7 The problem of deciding whether two general
                ∃xp(x) ∧ (∃x¬p(x) → q)               logic programs are strongly equivalent is co-NP complete.


                                                IJCAI-07
                                                   445