                      Scenario-based Stochastic Constraint Programming 

         Suresh Manandhar and Armagan Tarim                                   Toby Walsh 
               Department of Computer Science                    Cork Constraint Computation Centre 
                  University of York, England                      University College Cork, Ireland. 
               email: {suresh,at}@cs.york.ac.uk                          email: tw@4c.ucc.ie. 


                        Abstract                              be compiled down into conventional (non-stochastic) con•
                                                              straint programs using a scenario-based interpretation. This 
     To model combinatorial decision problems involv•         compilation allows us to use existing constraint solvers with•
     ing uncertainty and probability, we extend the           out any modification, as well as call upon the power of hybrid 
     stochastic constraint programming framework pro•         solvers which combine constraint solving and integer pro•
     posed in iWalsh, 2002] along a number of impor•          gramming techniques. We also propose a number of tech•
     tant dimensions (e.g. to multiple chance constraints     niques to reduce the number of scenarios and to generate ro•
     and to a range of new objectives). We also provide a     bust solutions. We have implemented this framework for de•
     new (but equivalent) semantics based on scenarios.       cision making under uncertainty in a language called stochas•
     Using this semantics, we can compile stochastic          tic OPL. This is an extension of the OPL constraint modelling 
     constraint programs down into conventional (non-         language iHentenryck et al, 1999]. Finally, we describe a 
     stochastic) constraint programs. This allows us to       wide range of problems that we have modelled in stochastic 
     exploit the full power of existing constraint solvers.   OPL that illustrate some of its potential. 
     We have implemented this framework for decision 
     making under uncertainty in stochastic OPL, a lan•       2 Stochastic constraint programs 
     guage which is based on the OPL constraint mod•
     elling language [Hentenryck et a/., 1999]. To il•        In a one stage stochastic constraint satisfaction problem 
     lustrate the potential of this framework, we model       (stochastic CSP), the decision variables are set before the 
     a wide range of problems in areas as diverse as fi•      stochastic variables. The stochastic variables, independent 
     nance, agriculture and production.                       of the decision variables, take values with probabilities given 
                                                              by a probability distribution. This models situations where 
                                                              we act now and observe later. For example, we have to de•
1 Introduction                                                cide now which nurses to have on duty and will only later 
Many decision problems contain uncertainty. Data about        discover the actual workload. We can easily invert the instan•
events in the past may not be known exactly due to errors in  tiation order if the application demands, with the stochastic 
measuring or difficulties in sampling, whilst data about events variables set before the decision variables. Constraints are 
in the future may simply not be known with certainty. For ex• defined (as in traditional constraint satisfaction) by relations 
ample, when scheduling power stations, we need to cope with   of allowed tuples of values. Constraints can, however, be im•
uncertainty in future energy demands. As a second example,    plemented with specialized and efficient algorithms for con•
nurse rostering in an accident and emergency department re•   sistency checking. 
quires us to anticipate variability in workload. As a final ex• We allow for both hard constraints which are always sat•
ample, when constructing a balanced bond portfolio, we must   isfied and "chance constraints" which may only be satisfied 
deal with uncertainty in the future price of bonds. To deal   in some of the possible worlds. Each chance constraint has a 
with such situations, [Walsh, 20021 has proposed an exten•    threshold, 6 and the constraint must be satisfied in at least a 
sion of constraint programming, called stochastic constraint  fraction 0 of the worlds. A one stage stochastic CSP is satis-
programming, in which we distinguish between decision vari•   fiable iff there exists values for the decision variables so that, 
ables, which we are free to set, and stochastic (or observed) given random values for the stochastic variables, the hard 
variables, which follow some probability distribution. This   constraints are always satisfied and the chance constraints are 
framework combines together some of the best features of      satisfied in at least the given fraction of worlds. Note that 
traditional constraint satisfaction, stochastic integer program• IWalsh, 2002] only allowed for one (global) chance constraint 
ming, and stochastic satisfiability.                          so the definition here of stochastic constraint programming is 
  In this paper, we extend the expressivity of this framework strictly more general. 
considerably by adding multiple chance constraints, as well 
as a range of objective functions like maximizing the down•
side. We show how such stochastic constraint programs can 


CONSTRAINTS                                                                                                         257  so that given random values for Vsl, we can find values for   certain decision variables are shared across scenarios. The 
 Vd2, so that given random values for VS2, the hard constraints first stage decisions are, for example, shared by all scenar•
 are always satisfied and the chance constraints are again sat• ios. The great advantage of this approach is that we can use 
 isfied in at least the given fraction of worlds. Note that the conventional constraint solvers to solve stochastic constraint 

 values chosen for the second set of decision variables Vd2 are programs. We do not need to implement specialized solvers. 
 conditioned on both the values chosen for the first set of de• Of course, there is a price to pay as the number of scenar•

 cision variables Vd1 and on the random values given to the    ios grows exponentially with the number of stages. However, 
 first set of stochastic variables Vs1 This can model situations our results show that a scenario-based approach is feasible 
 in which items are produced and can be consumed or put in     for many problems. Indeed, we observe much better perfor•
 stock for later consumption. Future production then depends   mance using this approach on the production planning exam•
 both on previous production (earlier decision variables) and  ple introduced in [Walsh, 2002]. In addition, as we discuss 
 on previous demand (earlier stochastic variables).            later, we have developed a number of techniques like Latin 
   An m stage stochastic CSP is defined in an analogous way    hypercube sampling to reduce the number of scenarios con•
 to one and two stage stochastic CSPs. Note that [Walsh,       sidered. 
 2002] insisted that the stochastic variables take values inde•
 pendently of each other. This prevents us representing a num• 4 Stochastic OPL 
 ber of common situations. For example, if the market goes 
                                                               We have implemented this framework on top of the OPL con•
 down in the first quarter, it is probably more likely to go down 
                                                               straint modelling language [Hentenryck et al, 1999]. An 
 in the second quarter. A second stage stochastic variable 
                                                               OPL model consists of two parts: a set of declarations, 
 representing the market index is therefore dependent on the   followed by an instruction. Declarations define the data 
 first stage stochastic variable representing the maiket index. types, (input) data and the (decision) variables. An OPL in•
 There is, however, nothing in the semantics given for stochas• struction is either to satisfy a set of constraints or to maxi•
 tic constraint programs nor in the solution methods proposed  mize/minimize an objective function subject to a set of con•
 in [Walsh, 2002] that used this assumption. We therefore al•  straints. We have extended the declarations to include the 
 low later stage stochastic variables to take values which are declaration of stochastic variables, and the instructions to in•
conditioned by the earlier stage stochastic variables.         clude chance constraints, and a range of new goals like max•
   A stochastic constraint optimization problem (stochastic    imizing the expectation of an objective function. 
COP) is a stochastic CSP plus a cost function defined over 
the decision and stochastic variables. In [Walsh, 2002], the   4.1 Variable declaration 
only goal considered was to find a solution that satisfies the 
                                                               We now declare both decision and stochastic variables. 
stochastic CSP which minimizes or maximizes the expected 
                                                               Stochastic variables are set according to a probability distri•
value of the objective function. We now extend this to a much 
                                                               bution using a command of the form: 
wider range of goals. For example, we might wish to limit the 
downside (i.e. maximize the least value of the cost function),   stoch <Type> <Id> <Dist>; 
or to minimize the spread (i.e. minimize the difference be•    Where <Type> is (as with decision variables) a data type 
tween the least and the largest value of the cost function).   (e.g. a range of values, or an enumerated list of values), 
                                                               <Id> is (as with decision variables) the variable name, and 
3 Scenario-based semantics                                     <Dist> defines the probability distribution of the stochas•
                                                               tic variable(s). Probability distributions include uniform, 
In [Walsh, 2002], a semantics for stochastic constraint pro•   poisson (lambda), and user defined via a list of (not nec•
grams is given based on policies. A policy is a tree of de•    essarily normalized) values. Other types of distribution can 
cisions. Each path in a policy represents a different possi•   be supported as needed. We insist that stochastic variables 
ble scenario (set of values for the stochastic variables), and are arrays, with the last index describing the stage. Here are 
the values assigned to decision variables in this scenario. To some examples: 
find satisfying policies, [Walsh, 2002] presents backtracking   stoch 0..1 market[Years] uniform; 
and forward checking algorithms which explores the implicit     stoch 100..102 demand[Quarter] {1,2,3}; 
AND/OR graph. Stochastic variables give AND nodes as we 
must find a policy that satisfies all their values, whilst deci• In the first, we have a 0/1 variable in each year which takes 
sion variables give OR nodes as we only need find one satis•   either value with equal probability. In the last, we have a de•
fying value.                                                   mand variable for each quarter, which takes the value 100 in 1 
   An alternative semantics, which suggests an alternative so• out of 6 cases, 101 in 2 out 6 cases, and 102 in the remaining 
lution method, comes from a scenario-based view [Birge and     3 cases. 
Louveaux, 1997]. A scenario is any possible set of values for  4.2 Constraint posting 
the stochastic variables. Thus, a scenario is associated with 
each path in the policy. Within each scenario, we have a con•  We can post both hard constraints (as in OPL) and chance 
ventional (non-stochastic) constraint program to solve. We     constraints. Chance constraints hold in some but not neces•
simply replace the stochastic variables by the values taken    sarily all scenarios. They are posted using a command of the 
in the scenario, and ensure that the values found for the de•  form: 
cision variables are consistent across scenarios. Note that     prob(<Constraint>) <ArithOp> <Expr>; 


258                                                                                                       CONSTRAINTS Where <Constraint> is any OPL constraint,                         prob( 
 <ArithOp> is any of the arithmetically comparison                   demand[i] <= production[i]+stock[i] ) 
operations (=,<>,<,>, <=, or >=) and <Expr> is any arith•                >= 0.80; 
metic expression (it may contain decision variables or may     This is compiled into a sum constraint of the form: 
just be a rational or a float in the range 0 to 1). For example, 
the following command specifies the chance constraint that       sum(j in Scenarios) p[j]* 
in each quarter the demand (a stochastic variable) does not         (demand[i,j] <= 
exceed the production (a decision variable) plus the stock              production[i,j]+stock[i, j] ) 
carried forward in each quarter (this auxiliary is modelled,         >= 0.80; 
as in conventional constraint programming, by a decision       Where Scenarios is the set of scenarios, p [ j ] is the prob•
variable) with 80% probability:                                ability of scenario j, demand [i, j ] is the demand in sce•
  forall(i in 1..n)                                            nario j and quarter i, etc. Note that the bracketing of the 
      prob(demand[i ] < =                                      inequality reifies the constraint so that it takes the value 1 if 
                production[i]+stock[i])                        satisfied and 0 otherwise. 
           >= 0.80;                                              Hard constraints are also transformed. Consider, for exam•
                                                               ple, the hard constraint: 
Constraints which are not chance constraints are hard and 
                                                                wealth[t] = bonds[t] + stocks [t] ; 
have to hold in all possible scenarios. For example, the stock 
carried forwards is computed via the hard constraint:          This is compiled into a forall constraint of the form: 
  forall(i in 1..n)                                              forall(j in Scenarios) 
      stock[i+1] = stock[i] + production[i]                        wealth[t,j] = bonds[t,j] + stocks[t,j] 
                                      - demand[i];             Where wealth [t, j] is the wealth at time t in scenario 
                                                               j, etc. Maximization and minimization instructions are also 
4.3 Optimization                                               transformed. Consider, for example, the optimization instruc•
Stochastic OPL supports both stochastic constraint satisfac•   tion: 
tion and optimization problems. We can maximize or mini•        maximize expected(wealth[n]) 
mize the expectation of an objective function. For example,     subject to ... 
in the book production example of [Walsh, 2002], we can 
minimize the expected cost of storing surplus books. Each      This is compiled into an instruction of the form: 
book costs $1 per quarter to store. This can be specified by    maximize sum(j in Scenarios) 
the following (partial) model:                                     p[j] *wealth[n, t] 
  minimize expected(cost)                                       subject to ... 
  subject to                                                   The rest of the stochastic OPL model is transformed in a sim•
     cost =                                                    ilar manner. 
        sum(i in l..n) max(stock[i+1],0); 
     forall(i in 1..n)                                         6 Value of information and stochastic 
        stock[i+1] = stock[i] + production[i]                      solutions 
                                       - demand[i]; 
                                                               For stochastic optimization problems, we compute two statis•
Stochastic OPL also supports a number of other optimization    tics which quantify the importance of randomness. The value 
goals. For example:                                            of a stochastic solution (VSS) is the difference in the objec•
  minimize spread(profit)                                      tive function for the stochastic problem (call it the stochas•
  maximize downside(profit)                                    tic solution, SS) and the objective value for the determinis•
  minimize upside(cost)                                        tic problem computed by replacing stochastic variables by 
                                                               their expectations (call it the expected value solution, EVS): 
The spread is the difference between the value of the objective 
                                                               VSS = SS - EVS. This computes the benefit of know•
function in the best and worst scenarios, whilst the downside 
                                                               ing the distributions of the stochastic variables. Clearly, VSS 
(upside) is the minimum (maximum) objective function value 
                                                               is non-negative. We also compute the expected value of the 
a possible scenario may take. 
                                                               wait-and-see solution (WSS). To calculate this, we give the 
                                                               stochastic variables values according to their probability dis•
5 Compilation of stochastic OPL                                tributions, and then find the best values for the decision vari•
These stochastic extensions are compiled down into conven•     ables. The difference between WSS and SS is the expected 
tional (non-stochastic) OPL models automatically by exploit•   value of perfect information (EVPI): EVPI = WSS - SS. 
ing the scenario-based semantics. The compiler is written      This measures how much more you can expect to win if you 
in Lex and Yacc, with a graphical interface in Visual C++.     have perfect information about the stochastic components of 
Compilation involves replacing stochastic variables by their   the problem. In other words, EVPI measures the value of 
possible values, and decision variables by a ragged array of   knowing the future with certainty. This is therefore the most 
decision variables, one for each possible scenario. Consider   that should be spent in gathering information about the uncer•
again the chance constraint:                                   tain world. 


CONSTRAINTS                                                                                                           259                                                                8.1 Production planning 
                                                               This problem comes from [Walsh, 20021. The results in Table 
                                                               1 show that a scenario-based approach offers much better per•
                                                               formance on this problem than the forward checking or back•
                                                               tracking tree search algorithms also introduced in this paper. 
                                                               The problem involves planning production over m quarters. 
                                                               In each quarter, we expect to sell between 100 and 105 copies 
                                                               of a book. To keep customers happy, we want to satisfy de•
                                                               mand over all m quarters with 80% probability. This prob•
                                                               lem is modelled by an m stage stochastic CSP There are m 

                                                               decision variables, xi representing production in each quar•
                                                               ter. There are also m stochastic variables, y1 representing 
                                                               demand in each quarter. To limit stock carried forward, we 
                                                               use a simple heuristic which picks the smallest possible val•
                                                               ues for the decision variables. An alternative is to convert 
                                                               the problem into an optimization problem with a cost to keep 
                                                               books in store. We do not explore this option here, though 
                                                               it is very easy to implement in stochastic OPL, as we cannot 
                                                               then compare our results with those of the forward checking 
                                                               or backtracking algorithms from [Walsh, 2002]. 
                                                               8.2 Portfolio management 
                                                               This portfolio management problem of [Birge and Louveaux, 
                                                               1997] can be modelled as a stochastic COP. Suppose we have 
                                                               $P to invest in any of / investments and wc wish to exceed a 
                                                               wealth of $G after t investment periods. To calculate the util•
                                                               ity, we suppose that exceeding $G is equivalent to an income 
                                                               of q% of the excess while not meeting the goal is equivalent 
                                                               to borrowing at a cost r% of the amount short. This defines 
                                                               a concave utility function for r > q. The uncertainty in this 
                                                               problem is the rate of return, which is a random variable, on 
                                                               each investment in each period. The objective is to deter•
                                                               mine the optimal investment strategy, which maximizes the 
                                                               investor's expected utility. 
                                                                 The problem has 8 stages and 5760 scenarios. To com•
                                                               pare the effectiveness of the different scenario reduction al•
                                                               gorithms, we adopt a two step procedure. In the first step, the 
                                                               scenario reduced problem is solved and the first period's de•
                                                               cision is observed. We then solve the full-size (non scenario 
                                                               reduced) problem to optimality with this first decision fixed. 
Finally, we implemented a scenario reduction method used in    The difference between the objective values of these two so•
stochastic programming due to Dupacova, Growe-Kuska and        lutions is normalized by the range [optimal solution, observed 
Romisch [Dupacova et al, 2003]. They report power pro•         worst solution] to give a normalized error for committing to 
duction planning problems on which this method offers 90%      the scenario reduced first decision. In Fig. 1, we see that 
accuracy sampling 50% of the scenarios and 50% accuracy        Dupacova et al's algorithm is very effective, that Latin hy-
sampling just 2% of the scenarios. The method heuristically    percube sampling is a small distance behind, and both are 
deletes scenarios to approximate as closely as possible the    far ahead of the most likely scenario method (which requires 
original scenarios according to a Fortet-Mourier metric on the approximately half the scenarios before the first decision is 
stochastic parameter space.                                    made correctly). 

                                                               8.3 Yield management 
8 Some examples 
                                                               Farmers must deal with uncertainty since weather and many 
To illustrate the potential of this framework for decision mak• other factors affect crop yields. In this example (also taken 
ing under uncertainty, we now describe a wide range of prob•   from [Birge and Louveaux, 1997]), we must decide on how 
lems that we have modelled. In the first problem, we compare   many acres of his fields to devote to various crops before the 
a scenario-based approach to the previous tree search meth•    planting season. A certain amount of each crop is required for 
ods for solving stochastic constraint satisfaction problems. In cattle feed, which can be purchased from a wholesaler if not 
the next three problems, we illustrate the effectiveness of the raised on the farm. Any crop in excess of cattle feed can be 
different scenario reduction techniques.                       sold up to the EU quota; any amount in excess of this quota 


260                                                                                                       CONSTRAINTS                                                               production capacity constraints and stochastic demand. The 
                                                              objective is to find the minimum expected cost policy. The 
                                                              cost components take into account holding costs, backlogging 
                                                              costs, fixed replenishment (or setup) costs and unit produc•
                                                              tion costs. The optimal policy gives the timing of the replen•
                                                              ishments as well as the ordcr-up-to-levels. Hence, the exact 
                                                              order quantity can be known only after the realization of the 
                                                              demand, using the scenario dependent order-up-to-level deci•
                                                              sions. This problem has 5 stages and 1,024 scenarios. In Fig. 
                                                              3, we again see that Dupacova et al's algorithm and Latin hy-
                                                              percube sampling are very effective, but both are now only a 
                                                              small distance ahead of the most likely scenario method. 

                                                              9 Robust solutions 
                                                              Inspired by robust optimization methods in operations re•
                                                              search [Kouvelis and Yu, 1996], stochastic OPL also allows 
                                                              us to find robust solutions to stochastic constraint programs. 
will be sold at a low price. Crop yields are uncertain, de•
                                                              That is, solutions in which similar decisions are made in the 
pending upon weather conditions during the growing season. 
                                                              different scenarios. It will often be impossible or undesirable 
This problem has 4 stages and 10,000 scenarios. In Fig. 2, 
                                                              for all decision variables to be robust. We therefore identify 
we again see that Dupacova et al's algorithm and Latin hyper-
                                                              those decision variables whose values we wish to be identical 
cube sampling are very effective, and both are far ahead of the 
                                                              across scenarios using commands of the form: 
most likely scenario method (which requires approximately 
one third the scenarios before the first decision is made cor•   robust <Var>; 
rectly).                                                        For example, in production/inventory problem of Sec.8.4 
                                                              the decision variables "order-up-to-Ievels" and "replenish•
8.4 Production/Inventory control                              ment periods" can be declared as robust variables. The values 
Uncertainty plays a major role in production and inventory    of these two sets of decision variables are then fixed at the 
planning. In this simplified production/inventory planning    beginning of the planning horizon. A robust solution damp•
example, there is a single product, a single stocking point,  ens the nervousness of the solution, an area of very active re-


CONSTRAINTS                                                                                                         261 