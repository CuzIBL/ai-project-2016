                         Declarative    and   Computational       Properties
                             of Logic   Programs      with  Aggregates∗

          Francesco  Calimeri   and  Wolfgang  Faber†   and  Nicola Leone   and  Simona  Perri
             Department  of Mathematics,  University of Calabria, I-87030 Rende  (CS), Italy
                           Email:  {calimeri,faber,leone,perri}@mat.unical.it

                    Abstract                          clariﬁed. A recent proposal for answer set semantics is re-
                                                      ceiving a consensus [Faber et al., 2004]. However, un-
    We  investigate the properties of logic programs  founded sets and the well-founded operator [Van Gelder et
    with aggregates.  We  mainly focus on  pro-       al., 1991], which are important for both the characterization
    grams with monotone and antimonotone aggregates
       A                                              and the computation of standard LPs [Leone et al., 1997;
    (LPm,a programs). We deﬁne a new notion of un-
                     A                                Simons et al., 2002; Calimeri et al., 2002; Koch et al., 2003;
    founded set for LPm,a programs, and prove that    Pfeifer, 2004], have not been deﬁned in a satisfactory manner
    it is a sound generalization of the standard notion for logic programs with aggregates. Moreover, the impact of
    of unfounded set for aggregate-free programs. We
                                 A                    aggregates on the computational complexity of the reasoning
    show that the answer sets of an LPm,a program are tasks has not been analyzed in depth.
    precisely its unfounded-free models.                This paper makes a ﬁrst step to overcome this deﬁciency,
                                           A
    We deﬁne a well-founded operator WP for LPm,a     improving the characterization of programs with aggregates,
    programs; we prove that its total ﬁxpoints are pre- for both declarative and computational purposes. The main
    cisely the answer sets of P, and its least ﬁxpoint contributions of the paper are as follows.
      ω
    WP (∅) is contained in the intersection of all an- • We deﬁne the notion of unfounded set for logic programs
                                        ω                                                             A
    swer sets (if P admits an answer set). WP (∅) is  with both monotone and antimonotone aggregates (LPm,a
    efﬁciently computable, and for aggregate-free pro- programs). This notion is a sound generalization of the con-
    grams it coincides with the well-founded model.   cept of unfounded sets previously given for programs without
    We  carry out an in-depth complexity analysis in  aggregates. We show that our deﬁnition coincides with the
    the general framework, including also nonmono-    original deﬁnition of unfounded sets of [Van Gelder et al.,
    tone aggregates. We prove that monotone and anti- 1991] on the class of normal (aggregate-free) programs, and
    monotone aggregates do not increase the complex-  shares its nice properties (like, e.g., the existence of the great-
    ity of cautious reasoning, which remains in co-NP. est unfounded set).
    Nonmonotone aggregates, instead, do increase the  • We provide a declarative characterization of answer sets in
                                                      terms of unfounded sets. In particular, answer sets are pre-
    complexity by one level in the polynomial hierar-                                  A
    chy. Our results allow also to generalize and speed- cisely unfounded-free models of an LPm,a program.
    up ASP systems with aggregates.                   • We deﬁne a well-founded operator WP for logic programs
                                                      with aggregates, which extends the classical well-founded op-
                                                      erator [Van Gelder et al., 1991]. The total ﬁxpoints of WP are
                                                                                                   ω
1  Introduction                                       exactly the answer sets of P, and its least ﬁxpoint WP (∅) is
The introduction of aggregates atoms [Kemp and Stuckey, contained in the intersection of all answer sets. Importantly,
                                                        ω
1991; Denecker et al., 2001; Gelfond, 2002; Simons et al., WP (∅) is polynomial-time computable.
2002; Dell’Armi et al., 2003; Pelov and Truszczynski,´ 2004; • We analyze the complexity of logic programs with arbi-
Pelov et al., 2004] is one of the major linguistic extensions to trary (also nonmonotone) aggregates and fragments thereof.
Answer Set Programming of the recent years.           Both monotone and antimonotone aggregates do not affect
  While both semantic and computational properties of stan- the complexity of answer set semantics, which remains co-
dard (aggregate-free) logic programs have been deeply in- NP-complete (for cautious reasoning). Nonmonotone aggre-
vestigated, only few works have focused on logic programs gates, instead, do increase the complexity, jumping to the sec-
                                                                                        P
with aggregates; their behaviour, their semantic properties, ond level of the polynomial hierarchy (Π2 ).
and their computational features are still far from being fully For space limitations, some proofs are sketched.
  ∗This work was partially supported by the EC under projects IST-
2002-33570 INFOMIX and IST-2001-37004 WASP, and by FWF 2  Logic Programs    with Aggregates
under projects P16536-N04 and P17212-N04.             In this section, we recall syntax, semantics, and some basic
  †Funded by APART of the Austrian Academy of Sciences. properties of logic programs with aggregates.2.1  Syntax                                             A (LPA) program is a set of LPA rules. A global variable
We assume that the reader is familiar with standard LP; we of a rule r is a variable appearing in a standard atom of r; all
refer to atoms, literals, rules, and programs of LP, as stan- other variables are local variables.
dard atoms, standard literals, standard rules, and standard Safety. A rule r is safe if the following conditions hold: (i)
programs, respectively. Two literals are said to be comple- each global variable of r appears in a positive standard literal
                                not
mentary if they are of the form p and p for some atom in the body of r; (ii) each local variable of r appearing in a
p. Given a literal L, ¬.L denotes its complementary literal. symbolic set {Vars : Conj } appears in an atom of Conj ;
Accordingly, given a set A of literals, ¬.A denotes the set (iii) each guard of an aggregate atom of r is a constant or a
{¬.L | L ∈ A}. For further background, see [Baral, 2002; global variable. A program P is safe if all r ∈ P are safe. In
Gelfond and Lifschitz, 1991].                         the following we assume that LPA programs are safe.
                   A
Set Terms.   A  (LP ) set term is either a symbolic set
or a ground set. A symbolic set is a pair {Vars : Conj }, 2.2 Answer Set Semantics
where Vars is a list of variables and Conj is a conjunction                       A
                                                                                           P    UP
of standard atoms.1 A ground set is a set of pairs of the form Universe and Base. Given a LP program , let denote
                                                                                   P      BP
ht:Conj i, where t is a list of constants and Conj is a ground the set of constants appearing in , and be the set of
                                                      standard atoms constructible from the (standard) predicates
(variable free) conjunction of standard atoms.                                                X
                                                      of P with constants in UP . Given a set X, let 2 denote the
Aggregate Functions. An aggregate function is of the form set of all multisets over elements from X. Without loss of
f(S), where S is a set term, and f is an aggregate function generality, we assume that aggregate functions map to I (the
symbol. Intuitively, an aggregate function can be thought of set of integers).
as a (possibly partial) function mapping multisets of constants
                                                                                        UP             N
to a constant.                                        Example 3  #count  is deﬁned over 2 , #sum  over 2 ,
                                                                   N+                             N
Example 1 (In the examples, we adopt the syntax of DLV to #times over 2 , #min and #max are deﬁned over 2 −{∅}.
denote aggregates.) Aggregate functions currently supported
by the DLV system are: #count (number of terms), #sum Instantiation. A substitution is a mapping from a set of vari-
(sum of non-negative integers), #times (product of positive ables to UP . A substitution from the set of global variables
integers), #min (minimum term, undeﬁned for empty set), of a rule r (to UP ) is a global substitution for r; a substitution
                                        2
#max (maximum  term, undeﬁned for empty set) .        from the set of local variables of a symbolic set S (to UP ) is a
                                                      local substitution for S. Given a symbolic set without global
Aggregate Literals. An  aggregate atom is f(S) ≺ T ,  variables S = {Vars : Conj }, the instantiation of S is the
where f(S) is an aggregate function, ≺∈ {=, <, ≤, >, ≥} following ground set of pairs inst(S):
is a predeﬁned comparison operator, and T is a term (variable {hγ(Vars) : γ(Conj )i | γ is a local substitution for S}.3
or constant) referred to as guard.                    A ground instance of a rule r is obtained in two steps: (1)
                                                      a global substitution σ for r is ﬁrst applied over r; (2) ev-
Example 2 The following aggregate atoms in DLV notation, ery symbolic set S in σ(r) is replaced by its instantiation
where the latter contains a ground set and could be a ground inst S           Ground
instance of the former:                                   ( ). The instantiation     (P) of a program P is
     #max{Z  : r(Z), a(Z, V )} > Y                    the set of all possible instances of the rules of P.
       max
     #    {h2 : r(2), a(2, k)i, h2 : r(2), a(2, c)i} > 1 Example 4 Consider the following program P1:
                                                         q(1) ∨ p(2, 2).                 q(2) ∨ p(2, 1).
An atom is either a standard (LP) atom or an aggregate atom. t(X):−q(X), #sum{Y : p(X, Y )} > 1.
A literal L is an atom A or an atom A preceded by the de-
                                                      The instantiation Ground(P1) is the following:
                  not   A                    L
fault negation symbol ; if is an aggregate atom, is an q(1) ∨ p(2, 2).t(1):−q(1), #sum{h1:p(1, 1)i, h2:p(1, 2)i}>1.
aggregate literal.                                    q(2) ∨ p(2, 1).t(2):−q(2), #sum{h1:p(2, 1)i, h2:p(2, 2)i}>1.
  A                  A
LP  Programs.  A (LP  ) rule r is a construct
                                                                      An interpretation for a LPA program P is
        a :− b1, · · · , bk, not bk+1, · · · , not bm. Interpretations.
                                                      a consistent set of standard ground literals, that is I ⊆ (BP ∪
where a is a standard atom, b1, · · · , bm are atoms, and ¬.BP ) such that I ∩ ¬.I = ∅. A standard ground literal L
m  ≥ k  ≥ 0. The atom a is referred to as the head of r is true (resp. false) w.r.t I if L ∈ I (resp. L ∈ ¬.I). If a
while the conjunction b1, ..., bk, not bk+1, ..., not bm is the standard ground literal is neither true or false w.r.t I then it is
                                                                                            −
body of r. We denote the head atom by H(r), and the set undeﬁned w.r.t I. We denote by I + (resp. I ) the set of all
{b1, ..., bk, not bk+1, ..., not bm} of the body literals by standard positive (resp. negative) literals occurring in I. We
B(r).                                                 also denote with I¯ the set of undeﬁned standard literals w.r.t
                                                      I. An interpretation I is total if I¯is empty (i.e., I+ ∪¬.I− =
  1
   Intuitively, a symbolic set {X : a(X, Y ), p(Y )} stands BP ), otherwise I is partial.
for the set of X-values making a(X, Y ), p(Y ) true, i.e.,
{X |∃Y s.t. a(X, Y ), p(Y ) is true}.                    3Given a substitution σ and a LPA object Obj (rule, set, etc.),
  2The ﬁrst two aggregates correspond, respectively, to the cardi- we denote by σ(Obj) the object obtained by replacing each variable
nality and weight constraint literals of Smodels.     X in Obj by σ(X).                                                                             I                     I
  An interpretation also provides a meaning for aggregate lit- Ground(P1), Ground(P1) 2 = ∅, and Ground(P2) 1 = ∅,
                                                                 I
erals. Their truth value is ﬁrst deﬁned for total interpretations, Ground(P2) 2 = Ground(P2) hold.
and then induced for partial ones.                      I2 is the only answer set of P1 (because I1 is not a minimal
                                                                         I
  Let I be a total interpretation. A standard ground conjunc- model of Ground(P1) 1 ), while P2 admits no answer set (I1
                                                                                         I
tion is true (resp. false) w.r.t I if all its literals are true. The is not a minimal model of Ground(P2) 1 , and I2 is not a
                                                                                       I
meaning of a set, an aggregate function, and an aggregate model of Ground(P2) = Ground(P2) 2 ).
atom under an interpretation, is a multiset, a value, and a Note that any answer set A of P is also a model of
                         f S
truth-value, respectively. Let ( ) be a an aggregate func- P because Ground(P)A ⊆ Ground(P),  and rules in
                  I S     S      I
tion. The valuation ( ) of  w.r.t. is the multiset of Ground(P)  − Ground(P)A  are satisﬁed w.r.t. A.
the ﬁrst constant of the elements in S whose conjunction is
true w.r.t. I. More precisely, let I(S) denote the multiset Monotonicity. Given two interpretations I and J we say
                                                                   +      +      −     −
[t1 | ht1, ..., tn : Conj i ∈ S∧ Conj is true w.r.t. I ]. The val- that I ≤ J if I ⊆ J and J ⊆ I . A ground literal `
uation I(f(S)) of an aggregate function f(S) w.r.t. I is the is monotone, if for all interpretations I, J, such that I ≤ J,
result of the application of f on I(S). If the multiset I(S) we have that: (i) ` true w.r.t. I implies ` true w.r.t. J, and (ii)
is not in the domain of f, I(f(S)) = ⊥ (where ⊥ is a ﬁxed ` false w.r.t. J implies ` false w.r.t. I. A ground literal ` is
symbol not occurring in P).4                          antimonotone, if the opposite happens, that is, for all inter-
  An instantiated aggregate atom A = f(S) ≺ k is true pretations I, J, such that I ≤ J, we have that: (i) ` true w.r.t.
w.r.t. I if: (i) I(f(S)) 6= ⊥, and, (ii) I(f(S)) ≺ k holds; oth- J implies ` true w.r.t. I, and (ii) ` false w.r.t. I implies ` false
erwise, A is false. An instantiated aggregate literal not A = w.r.t. J. A ground literal ` is nonmonotone, if it is neither
not f(S) ≺ k is true w.r.t. I if (i) I(f(S)) 6= ⊥, and, (ii) monotone nor antimonotone.
I(f(S)) ≺ k does not hold; otherwise, A is false.       Note that positive standard literals are monotone, whereas
  If I is a partial interpretation, an aggregate literal A is true negative standard literals are antimonotone. Aggregate lit-
(resp. false) w.r.t. I if it is true (resp. false) w.r.t. each total erals may be monotone, antimonotone or nonmonotone, re-
interpretation J extending I (i.e., ∀ J s.t. I ⊆ J, A is true gardless whether they are positive or negative. Nonmonotone
w.r.t. J); otherwise it is undeﬁned.                  literals include the sum over (possibly negative) integers and
                                                      the average.
Example 5 Consider the atom A = #sum{h1 : p(2, 1)i, h2 :
p(2, 2)i} > 1 from Example 4. Let S be the ground set in Example 7 All ground instances of #count{Z : r(Z)} > 1
A. For the interpretation I = {p(2, 2)}, each extending total and not #count{Z : r(Z)} < 1 are monotone, while for
interpretation contains either p(2, 1) or not p(2, 1). There- #count{Z : r(Z)} < 1, and not #count{Z : r(Z)} > 1 they
fore, either I(S) = [2] or I(S) = [1, 2] and the application of are antimonotone.
#sum yields either 2 > 1 or 3 > 1, hence A is true w.r.t. I.            A     A    A                   A
                                                        We  denote by LPm  (LPa /LPn ) the fragment of LP
                                                      where only monotone (antimonotone/nonmonotone) aggre-
                                                                        A
Minimal Models. Given an interpretation I, a rule r is satis- gates are allowed; LPm,a allows for both monotone and anti-
ﬁed w.r.t. I if the head atom is true w.r.t. I whenever all body monotone aggregates.
literals are true w.r.t. I. A total interpretation M is a model of
a LPA program P if all r ∈ Ground(P) are satisﬁed w.r.t. Remark 1 Observe that our deﬁnitions of interpretation and
M. A model M  for P is (subset) minimal if no model N for truth values preserve “knowledge monotonicity”. If an inter-
                  +      +                                    J        I      I   J
P exists such that N ⊂ M  . Note that, under these def- pretation extends (i.e., ⊆ ), then each literal which
                                                                 I           J
initions, the word interpretation refers to a possibly partial is true w.r.t. is true w.r.t. , and each literal which is false
                                                           I           J
interpretation, while a model is always a total interpretation. w.r.t. is false w.r.t. as well.
Answer Sets.   We  now recall the generalization of the 3 Unfounded   Sets
Gelfond-Lifschitz transformation for LPA programs from
                                                      In this section, we extend the notion of unfounded sets, given
[Faber et al., 2004].
                                                      in [Van Gelder et al., 1991] for aggregate-free programs,
                                                 A                         A
Deﬁnition 1 ([Faber et al., 2004]) Given a ground LP  to the framework of LPa,m programs. Let us denote by
                                        I
program P and a total interpretation I, let P denote the S1 ∪˙ ¬.S2 the set (S1 − S2) ∪ ¬.S2, where S1 and S2 are
transformed program obtained from P by deleting all rules sets of standard ground literals.
in which a body literal is false w.r.t. I. I is an answer set of a
                                          I           Deﬁnition 2 (Unfounded Set) A set X of ground atoms is
program P if it is a minimal model of Ground(P) .                             A
                                                      an unfounded set for an LPa,m program P w.r.t. I if, for
Example 6 Consider the following two programs:        each rule r ∈ P having the head atom belonging to X, at least
                    count
         P1 : {p(a):−#   {X  : p(X)} > 0.}            one of the following conditions holds: 1. some antimonotone
                    count
         P2 : {p(a):−#   {X  : p(X)} < 1.}            body literal of r is false w.r.t. I, and 2. some monotone body
Ground(P1)  =  {p(a):−#count{ha  : p(a)i} > 0.} and   literal of r is false w.r.t. I ∪˙ ¬.X.
                       count
Ground(P2)  = {p(a):−#      {ha : p(a)i} < 1.}, and                                         P
                                              I1      Example 8  Consider the following program :
interpretation I1 = {p(a)}, I2 = ∅. Then, Ground(P1) =   r1 : a(1):−#count{h1:a(1)i, h2:a(2)i, h3:a(3)i}>2.
                                                         r2 : a(2).
  4
   In this paper, we assume that the value of an aggregate function r3 : a(3):−#count{h1:a(1)i, h2:a(2)i, h3:a(3)i}>2.
can be computed in time polynomial in the size of the input multiset.and I = {a(1), a(2), a(3)}. Then X = {a(1)} is an un- Lemma  13  A total interpretation M is a model for P iff
                                                          −
founded set w.r.t. I, P, since condition 2 holds for r1. Also ¬.M is an unfounded set for P w.r.t. M.
{a(3)}, and {a(1), a(3)} are unfounded.
                                                      Proof sketch. The result follows from the fact that M =
  We can show that Deﬁnition 2 generalizes the one given in M ∪˙ ¬.(¬.M −).                            2
[Van Gelder et al., 1991] for aggregate-free programs.
                                                      Theorem  14 Let M be a total interpretation for a program
                                A                                               −
Theorem 9 For an aggregate-free LPa,m program P, Deﬁ- P. M  is an answer set iff ¬.M = GUSP (M).
nition 2 is equivalent to the one of [Van Gelder et al., 1991].
                                                      Proof sketch. Can be shown using Lemmata 13 and 11 and
  Thus, Deﬁnition 2 is an alternative characterization of un- Theorem 12.                              2
founded sets for standards literals. In fact, while condition 1
of Deﬁnition 2 does not exactly cover the ﬁrst one in [Van
Gelder et al., 1991], condition 2 catches all cases of the sec- 5 Well-Founded Semantics
      [                    ]                          In this section we extend the WP deﬁned in [Van Gelder et
ond in Van Gelder et al., 1991 and those ”lost” by condi-                                    A
tion 1. This separates positive and negative literals, allowing al., 1991] for aggregate-free programs to LPa,m programs.
                                                                                            A
to distinguish between the behavior of monotone and anti- Then, we show that the answer sets of an LPa,m program P
monotone literals.                                    coincide exactly with the total ﬁxpoints of WP .
                                                                                             A
Theorem 10 If X1 and X2 are unfounded sets w.r.t. an inter- We start by providing an extension to LPa,m programs
                A                                                                                    [
pretation I for a LPa,m program P, then also X1 ∪ X2 is an of the immediate consequence operator TP deﬁned in Van
unfounded set w.r.t. I for P.                         Gelder et al., 1991] for three-valued interpretations of stan-
                                                      dard logic programs.
Proof sketch. For Condition 2 of Def. 2, observe that
                                                                              A
I ∪˙ ¬.(X1 ∪ X2) ≤  I ∪˙ ¬.X1. Therefore, if a mono-  Deﬁnition 4 Let P be a LPa,m program. Deﬁne the oper-
                                                                            BP ∪¬.BP    BP      BP ∪¬.BP
tone literal ` is false w.r.t. I ∪˙ ¬.X1, then it is false w.r.t. ators TP and WP from 2 to 2 and 2     ,
                                                 2
I ∪˙ ¬.(X1 ∪ X2). Symmetrically for X2.               respectively, as follows.
  By virtue of Theorem 10, the union of all unfounded sets TP (I) = {a ∈ BP | ∃r ∈ Ground(P) s.t. a = H(r)
for P w.r.t. I is an unfounded set. We call it the Greatest               and B(r) is true w.r.t. I}
                      I               GUSP  I
Unfounded Set of P w.r.t. , and denote it by ( ).       WP  (I) = TP (I) ∪ ¬.GUSP (I).
                                               A
Proposition 1 Let I and J be interpretations for an LPa,m
                                                      Theorem  15 Let M be a total interpretation for a program
program P. If I ⊆ J, then GUSP (I) ⊆ GUSP (J).
                                                      P. M  is an answer set for P iff M is a ﬁxpoint of WP .
Proof sketch. Follows from Remark 1, since I ∪˙ ¬.X ⊆               −
                                                 2    Proof sketch. M  =  ¬.GUSP (M)  holds by virtue of The-
J ∪˙ ¬.X.                                                       +
                                                      orem 14, M   = TP (M) can be shown using Lemma 11 and
                                                                                                       2
4  Answer   Sets and  Unfounded   Sets                Deﬁnition 2.
                                                        The WP  operator is clearly monotone on a meet semilat-
In this section, we provide a couple of characterizations of tice, and it therefore admits a least ﬁxpoint [Tarski, 1955].
answer sets in terms of unfounded sets.               This ﬁxpoint can be computed iteratively starting from the
Deﬁnition 3 (Unfounded-free Interpretation) Let I be an empty set, and approximates the intersection of all answer
interpretation for a program P. I is unfounded-free if I∩X = sets (if any).
∅ for each unfounded set X for P w.r.t. I.                                   A
                                                      Theorem  16 Given an LPm,a program P, let {Wn}n∈N be
  The next lemma gives an equivalent characterization of the the sequence whose n-th term is the n-fold application of
unfounded-free property for total interpretations.    the WP  operator on the empty set (i.e., W0 = ∅, Wn =
Lemma  11 Let I be a total interpretation for a program P. I WP (Wn−1)). Then (a) {Wn}n∈N converges to a limit
                                                        ω                                           ω
is unfounded-free iff no nonempty set of atoms contained in WP (∅), and (b) for each answer set M for P, M ⊇ WP (∅).
I is an unfounded set for P w.r.t.I.
                                                      Proof sketch. (a) follows from the monotonicity of WP and
Proof sketch. If I is not unfounded-free, an unfounded set X the ﬁniteness of BP . (b) holds since all atoms computed by
for P w.r.t. I s.t. X ∩ I 6= ∅ exists. Then, X ∩ I is also TP belong to any answer set and because of Theorem 14. 2
an unfounded set.                                2      From Theorem 15 and 16, the following easily follows.
                                           A                          ω
Theorem 12 A model M  is an answer set of an LPa,m pro- Corollary 17 If WP (∅) is a total interpretation, then it is the
gram P if and only if M is unfounded-free.            unique answer set of P.
Proof sketch. If M is a model and X ⊆ M is a non-empty  The following proposition conﬁrms the intuition that Def-
unfounded set w.r.t. M, then it can be shown that M ∪˙ ¬.X inition 4 extends the WP operator, as deﬁned in [Van Gelder
             M                                                                           A
is a model of P , hence M is no answer set. On the other et al., 1991] for standard programs , to LPm,a programs.
hand, if M is an unfounded-free model but not an answer set,
a model N of PM s.t. N + ⊂ M + must exist. We can show Proposition 2 Let P be an aggregate-free program. Then the
that M + − N + is an unfounded set.              2    WP  operator of Deﬁnition 4 exactly coincides with WP op-
                                                                    [                   ]
  Now we give another interesting characterization of answer erator deﬁned in Van Gelder et al., 1991 .
                                                                                             ω
sets. A total interpretation is an answer set if and only if its Corollary 18 On aggregate-free programs, WP (∅) coincides
false literals are unfounded.                         with the well-founded model of [Van Gelder et al., 1991].  Moreover, there are simple cases where W ω(∅) captures
                                       P                                 sum
the intended meaning of the program.                           t(xi, 1) : −# {V : t(xi, V )} >= 0.
                                                               t(xi, −1) : −#sum{V : t(xi, V )} <= 0.
Example 19 Consider the following program P:                   t(yi, 1) : −#sum{V : t(yi, V )} >= 0.
               sum
       a(1) :− #  {h1 : a(1)i, h2 : a(2)i} > 1.                t(yi, −1) : −#sum{V : t(yi, V )} <= 0.
           not                      not
       b :−    a(1).  a(2) :− b. b :−   c.                     t(yi, 1) : −unsat. t(yi, −1) : −unsat.
We  have WP (∅) =   {not  c}, then WP ({not c})  =    For each clause ci = li,1 ∨ li,2 ∨ li,3 of the original Φ, we
{b, not c, not a(1)}, then WP ({b, not c, not a(1)}) = add: unsat : −µ(li,1), µ(li,2), µ(li,3), where µ(l) is t(l, −1) if l
                              ω
{b, not c, not a(1), a(2)} = WP (∅).                  is positive, and t(l, 1) otherwise.
                     ω                                           not                Ψ                  2
It is easy to verify that WP (∅) (which here is total) is an an- The query unsat? holds for Π , iff Ψ is satisﬁable.
swer set for P.                                         Monotone  and antimonotone aggregates, instead, behave
                                                      as in the disjunctive case, not causing any complexity gap.
                                                                                            A
6  Computational    Complexity                        Theorem  22 Cautious reasoning over LPm,a is co-NP-
We ﬁrst show the tractability of the well-founded semantics complete.
      A
for LPm,a, and we then analyze the complexity of answer Proof. Hardness follows from the co-NP-hardness of cau-
set semantics for general LPA programs. We consider the tious reasoning over normal (aggregate-free) logic programs
propositional case, hence, throughout this section we assume [Marek and Truszczynski,´ 1991; Schlipf, 1995]. For mem-
                                                      bership, we guess a total interpretation M, and check that: (i)
that programs are ground.                                               −
                            A                         A ∈ M, and (ii) ¬.M  = GUSP  (M) (by Theorem 14 M is
Theorem 20 Given a ground LPm,a program P:  1. The    then an answer set). By Theorem 20, the checks are feasible
greatest unfounded set GUSP (I) of P w.r.t. a given inter- in polynomial time.                         2
                                            ω
pretation I is polynomial-time computable; 2. WP (∅) is
polynomial-time computable.                           7   Related  Work
Proof sketch. We deﬁne an operator ΦI from BP to BP as To our knowledge, the only other work in which the notion
follows: ΦI (Y ) = {a |  ∃ r  ∈ P  with a =   H(r)    of unfounded set has been deﬁned for programs with ag-
s.t. no antimonotone body literal of r false w.r.t. I ∧ gregates is [Kemp and Stuckey, 1991]. However, their def-
                                               −
all monotone body literals of r are true w.r.t. Y − ¬.I }. inition ignores aggregates in the second condition for un-
The sequence φ0 = ∅, φk =  ΦI (φk−1) is monotonically founded sets. For the program a(1):−#count{X : a(X)} > 0.
increasing and converges ﬁnitely to a limit φλ, for which the well-founded model of [Kemp and Stuckey, 1991] is ∅,
φλ =  BP −  GUSP  (I) can be shown. Furthermore, each leaving a(1) undeﬁned. Our well-founded model is {¬a(1)}.
                                      5
application of ΦI is polynomial in our setting , and also λ is Most of the results reported in this paper do not hold for un-
polynomial in |BP |. From this, the result follows. 2 founded sets as deﬁned in [Kemp and Stuckey, 1991].
  This result has a positive impact also for the computation of There have been several attempts to deﬁne well-founded
the answer set semantics of logic programs with aggregates. semantics for programs with aggregates, not relying on un-
                               ω
Indeed, as stated in Theorem 16, WP (∅) approximates the founded sets. Several early approaches which are deﬁned
intersection of all answer sets from the bottom, and can be on a limited framework are discussed in [Kemp and Stuckey,
therefore used to efﬁciently prune the search space.  1991]. In [Van Gelder, 1992] a semantics is deﬁned by com-
  We next analyze the complexity of the answer set seman- piling aggregates to rules with standard atoms. This approach
                A
tics of general LP programs. In [Faber et al., 2004], the was generalized in [Osorio and Jayaraman, 1999]. In any
authors have shown that arbitrary (including nonmonotone) case, this strategy works only for certain classes of programs.
aggregates do not increase the complexity of disjunctive pro- In [Ross and Sagiv, 1997] an operator-based deﬁnition is
grams. However, nonmonotone aggregates do increase the given, which also works only on a restricted set of programs.
complexity of reasoning on Or-free programs.6         In [Pelov, 2004] a well-founded semantics has been deﬁned
                                      A               based on an approximating operator. Since this deﬁnition is
           Cautious reasoning over LP       is ΠP -
Theorem 21                            m,a,n     2     substantially different from the one in this paper, we leave a
complete.
                                                      comparison for future work.
Proof. Membership  follows directly from the results in Other works attempted to deﬁne stronger notions of well-
[Faber et al., 2004]. Concerning hardness, we provide a founded semantics (also for programs with aggregates),
reduction from 2QBF. Let Ψ = ∀x1, . . . , xm∃y1, . . . , yn : Φ, among them the Ultimate Well-Founded Semantics of [De-
where w.l.o.g. Φ is a propositional formula in 3CNF format, necker et al., 2001] and W F S1 and W F S2 of [Dix and Oso-
over precisely the variables x1, . . . , x , y1, . . . , y . Observe
                               m         n            rio, 1997]. Whether a characterization in terms of unfounded
that Ψ is equivalent to ¬∃x1, . . . , xm∀y1, . . . , yn : ¬Φ, and
that ¬Φ is equivalent to a 3DNF where every literal has sets can exist for these semantics is not clear, and even if such
reversed polarity w.r.t. Φ. Let the LPA program ΠΨ be: generalized unfounded sets would exist, it is likely that some
                              m,a,n                   of the theorems in this paper will no longer hold, given that
  5Recall that we are dealing only with aggregates whose function these semantics assign truth or falsity for more atoms.
is computable in polynomial time.                       In [Ferraris, 2004] it was shown that the semantics of
  6In [Ferraris, 2004] it was independently shown that deciding Smodels programs with positive weight constraints is equal
answer set existence for a program with weight constraints (possibly to answer sets as deﬁned in [Faber et al., 2004] on the respec-
                         P                                                               ω
containing negative weights) is Σ2 -complete.         tive fragment. Since by Theorem 16 WP (∅) approximates