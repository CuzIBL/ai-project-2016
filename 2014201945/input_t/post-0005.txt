    An On-Line Time Warping Algorithm for Tracking Musical Performances∗

                                              Simon Dixon
                          Austrian Research Institute for Artiﬁcial Intelligence
                                   Freyung 6/6, Vienna 1010, Austria
                                            simon@oefai.at


                    Abstract                          must be estimated along with the optimal path. Also, in order
                                                      to run in real time with arbitrarily long series, the complete
    Dynamic time warping is not suitable for on-line  algorithm must be linear in the length of the series, so that
    applications because it requires complete knowl-  the incremental step is bounded by a constant. If U is the
    edge of both series before the alignment of the ﬁrst partially unknown sequence, then we seek at each time t the
    elements can be computed. We present a novel on-
                                                      best alignment of the sequence u1, ..., ut to some initial sub-
    line time warping algorithm which has linear time sequence of V . This is performed with the OLTW algorithm
    and space costs, and performs incremental align-  (Figure 1), which we now explain.
    ment of two series as one is received in real time. The variables t and j are pointers to the current positions in
    This algorithm is applied to the alignment of audio series U and V respectively. The main loop of the algorithm
    signals in order to track musical performances.   calculates a partial row or column of the path cost matrix. The
                                                      calculation of the path cost uses the standard DTW recursion
1  On-Line Time Warping                               formula, restricted to use only the matrix entries which have
Although efﬁciency and real-time concerns of dynamic time already been calculated. The path cost is normalised by the
warping (DTW) have been addressed in the literature, we do path length, so that paths of varying lengths can be compared
not know of any work in which the real-time constraint in- in the function GetInc. The number of cells calculated is
volves a streamed sequence, so that the alignment must be given by the search width parameter, c; e.g. for a new row, the
calculated incrementally, in the forward direction, while one row number is incremented, and the cells in the last c columns
of the sequences is not known in entirety. In this work we up to and including the current column are calculated.
present an on-line time warping (OLTW) algorithm which is The function GetInc selects whether to calculate a row,
able to perform incremental alignment of arbitrarily long se- column, or both. If less than c elements of each series have
quences in real time.                                 been processed, new rows and columns are alternately cal-
                                                      culated. If one sequence has been incremented successively
  DTW aligns time series U = u1, ..., um and V = v1, ..., vn
                                                      MaxRunCount   times, the other sequence is incremented.
by ﬁnding a minimum cost path W =  W1, ..., Wl, where
                                                      Otherwise the minimum path cost for each cell in the cur-
each Wk is an ordered pair (ik, jk), such that (i, j) ∈ W
                                                      rent row and column is found. If this occurs in the current
means that the points ui and vj are aligned. The alignment is
assessed with respect to a local cost function d(i, j), usually position (t, j), then both the row and column counts are in-
represented as an m × n matrix, which assigns a match cost cremented; if it occurs elsewhere in row j, then the row count
                                                      is incremented, otherwise the column count t is incremented.
for aligning each pair (ui, vj). The path cost is the sum of
the local match costs along the path. Several constraints are For each incoming data point ut, the minimum cost path
placed on W , namely that the path is bounded by the ends calculated at time t is the same as that calculated by DTW,
of both sequences, and it is monotonic and continuous. The assuming the same path constraints, but the number of cal-
minimum cost path can be calculated in quadratic time by culations performed by OLTW is bounded by a constant. A
dynamic programming, using the recursion:             further advantage of OLTW is that the centre of the search
                          (  D(i, j − 1)   )          band is adaptively adjusted to follow the best match.
      D(i, j) = d(i, j) + min D(i − 1, j)
                             D(i − 1, j − 1)          2   Tracking of Musical Performances
     D(i, j)                                  (1, 1)
where       is the cost of the minimum cost path from In music performance, high level information such as struc-
  (i, j)   D(1, 1) = d(1, 1)
to    , and              . The path itself is obtained by ture and emotion is communicated by the performer through
                               D(m, n)
tracing the recursion backwards from   .              parameters such as tempo, dynamics, articulation and vibrato.
  In the on-line case, the length of the incoming sequence is These parameters vary within a musical piece, between musi-
unknown, so one of the boundary conditions for the search cal pieces and between performers. We use OLTW to extract
  ∗This work was supported by the Vienna Science and Technol- this information directly from audio signals by aligning dif-
ogy Fund project CI010 Interfaces to Music and the EU-FP6-IST- ferent performances of the same piece of music, enabling live
507142 project SIMAC. OFAI¨ acknowledges the ﬁnancial support of tracking and visualisation of expressive parameters during a
the Austrian federal ministries BMBWK and BMVIT.      performance. This could be used to complement the listening      ALGORITHM On-Line Time Warping                        Error ≤             Percentage of notes
      t := 1;  j := 1                                  Frames  Seconds      On-line         Off-line
      previous :=  None                                                  Etude  Ballade   Etude  Ballade
      INPUT  u(t)                                         0      0.00   13.9%    13.1%   46.5%    36.6%
                                                          1      0.02   36.1%    34.5%   84.5%    77.1%
      EvaluatePathCost(t,j)                               2      0.04   52.8%    50.7%   91.1%    88.9%
      LOOP                                                3      0.06   64.0%    62.2%   93.4%    92.5%
         IF  GetInc(t,j)  != Column                       5      0.10   78.4%    76.7%   96.0%    95.1%
              t :=  t + 1                                10      0.20   92.7%    91.4%   98.8%    97.4%
              INPUT  u(t)                                25      0.50   98.7%    98.5%   99.8%    99.1%
              FOR  k := j -  c + 1 TO  j                 50      1.00   99.9%    99.7%  100.0%    99.8%
                  IF k > 0
                     EvaluatePathCost(t,k)            Table 1: Alignment results shown as cumulative percentages
         IF GetInc(t,j)   !=  Row                     of notes with an error up to the given value (see text).
              j :=  j + 1
              FOR  k := t -  c + 1 TO  t
                  IF k > 0                            by Chopin (Etude in E Major, Op.10, no.3, bars 1–21; and
                     EvaluatePathCost(k,j)            Ballade Op.38, bars 1–45), played on a computer-monitored
         IF GetInc(t,j)   == previous                 grand piano. This provided precise measurements of the
              runCount  := runCount   + 1             times and velocities of all notes, so that we had both the audio
         ELSE                                         recordings and discrete measurements of each note.
              runCount  := 1                            After aligning a pair of ﬁles, the error for each note or
         IF GetInc(t,j)   != Both                     chord was calculated, using the Manhattan distance between
              previous  := GetInc(t,j)                the point representing the onsets of the corresponding notes
      END LOOP                                        in the two performances and the nearest point on the time
                                                      warping path. In Table 1, we show the percentages of notes
      FUNCTION GetInc(t,j)                            with errors less than or equal to 0,1,2,3,5,10,25 and 50 frames
      IF (t  < c)
                                                                   = 22×21
          return  Both                                across the 231 ( 2  ) pairs of performances of each piece.
      IF runCount  > MaxRunCount                      The results using the off-line version of the algorithm are
          IF previous   == Row                        also included in the table. The average error was 84ms for
              return  Column                          the on-line algorithm and 30ms for the off-line version; the
          ELSE                                        worst errors were 2.62s (on-line) and 3.64s (off-line). The
              return  Row                             off-line algorithm performs better because it has the advan-
      (x,y)  := argmin(pathCost(k,l)), where          tage of knowing the future evolution of the signal when cal-
                   (k == t)  or (l ==  j)             culating the alignment at a given point.
      IF x <  t
          return  Row                                 3   Conclusion
      ELSE IF y  < j                                  We presented a new on-line time warping algorithm, which
          return  Column                              aligns a sequence arriving in real time with a stored sequence
      ELSE                                            of arbitrary length. At each time frame, the calculated path is
          return  Both                                optimal with respect to the data computed up to that time, but
                                                      this might not correspond to the optimal path calculated by
  Figure 1: The on-line time warping (OLTW) algorithm. an off-line algorithm with full knowledge of both sequences.
                                                        OLTW   was used in implementing a musical performance
                                                      alignment system, which was tested on several hundred pairs
experience of concert-goers, to provide feedback to teachers of performances with an average error of 84ms. The system
and students, or to enable interactive performance and auto- can be used off-line for comparisons of performance inter-
matic accompaniment systems.                          pretation, using unlabelled audio recordings, e.g. in a media
  The audio data is represented by the positive spectral dif- player plug-in which, given a position in one audio ﬁle, au-
ference between successive 20ms frames, that is, the increase tomatically ﬁnds the corresponding position in other audio
in energy (if any) in each frequency bin. This emphasises ﬁles of the same piece of music. An on-line application is au-
the onsets of tones, the most important indicators of musi- tomatic accompaniment: given an audio ﬁle with the soloist
cal timing. The cost of matching two frames is given by the and accompaniment on separate tracks, alignment could be
Euclidean distance between their spectral difference vectors. performed on the solo track while the accompaniment track
  Since the slope of the path represents the relative tempo, is played back with corresponding accommodation of the dy-
                                            1         namic and timing changes of the soloist. Currently planned
it is reasonable to constrain it to a range between 3 and 3
(MaxRunCount  =  3 ) , to allow for moderate but not arbi- extensions of this work include a score following system and
trary differences in tempo. In off-line tests with a search a range of visualisation tools for use in concerts, teaching and
width of 10s (c = 500 frames) the program aligned each private rehearsal. At the conference we will demonstrate the
minute of music in about 10 seconds (3GHz PC). It also runs system tracking tempo and dynamics in a live performance
comfortably in real time with these parameters.       and displaying the data with an animation designed by musi-
  Quantitative testing was performed off-line with record- cologists for off-line performance visualisation.
ings of 22 pianists playing 2 excerpts of solo piano music