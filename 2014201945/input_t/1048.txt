               Strong    Equivalence     for Logic   Programs      with  Preferences∗

                     Wolfgang   Faber†                           Kathrin   Konczak
                Department  of Mathematics                      Institut fur¨ Informatik
                   University of Calabria                        Universitat¨ Potsdam
                 I-87030 Rende  (CS), Italy           PF  900327,  D-14439  Potsdam,  Germany
                Email:  faber@mat.unical.it              Email: konczak@cs.uni-potsdam.de

                    Abstract                          any context. This gives a handle on showing the equivalence
                                                      of ASP modules. If a program is strongly equivalent to a
    Recently, strong equivalence for Answer Set Pro-  subprogram of itself, then one can always use the subprogram
    gramming has been studied intensively, and was    instead of the original program, a technique which serves as
    shown to be beneﬁcial for modular programming     an effective optimization method.
    and automated optimization. In this paper we de-    On a different line of ASP research, many extensions of the
    ﬁne the novel notion of strong equivalence for logic basic formalism have been proposed. Perhaps the most inten-
    programs with preferences. Based on this deﬁnition sively studied one is the modeling of preferences in ASP, cf.
    we give, for several semantics for preference han- [Delgrande et al., 2004]. Strongly rooted in the research of
    dling, necessary and sufﬁcient conditions for pro- nonmonotonic formalisms, the ability to specify preferences
    grams to be strongly equivalent. These results pro- is acknowledged to be particularly beneﬁcial to ASP, since
    vide a clear picture of the relationship of these se- they constitute a very natural and effective way of resolving
    mantics with respect to strong equivalence, which indeterminate solutions. For example, preferences have been
    differs considerably from their relationship with re- successfully used for timetabling, auctioning, conﬁguration,
    spect to answer sets. Finally, based on these results, and other domains. A sophisticated application for informa-
    we present for the ﬁrst time simpliﬁcation methods tion site selection has been described in [Eiter et al., 2002].
    for logic programs with preferences.              The emergence of such applications thus also calls for opti-
                                                      mization methods, as for standard ASP.
1  Introduction                                         In this paper we tackle this issue and generalize the no-
                                                      tion of strong equivalence to ASP with preferences. Since
During  the last decade,  Answer  Set  Programming    a plethora of formalisms and semantics has been introduced
(ASP) [Gelfond and Lifschitz, 1988] has become an in- for extending ASP by preferences, we have to limit ourselves
creasingly acknowledged tool for knowledge representation in this paper to a few concrete approaches. A basic clas-
and reasoning. A main advantage of ASP is that it is based siﬁcation of preference handling is (i) over which elements
on solid theoretical foundations, while being able to model the preference is deﬁned and (ii) the way how preferences
commonsense reasoning in an arguably satisfactory way. The are interpreted, and in particular how they are aggregated.
availability of efﬁcient solvers has furthermore stimulated In this work we focus on ordered programs, where prefer-
its use in practical applications in recent years. This devel- ences are deﬁned among rules, which semantically act as ﬁl-
opment had quite some implications on ASP research. For ters over answer sets. In particular, we consider the three se-
example, increasingly large applications require features for mantics deﬁned in [Delgrande et al., 2003; Wang et al., 2000;
modular programming. Another requirement is the fact that Brewka and Eiter, 1999], referred to as D-, W -, and B-
in applications, ASP code is often generated automatically semantics, respectively. The reason for this choice is that
by so-called frontends, calling for optimization methods these semantics seem to be widely accepted and their prop-
which remove redundancies, as also found in database query erties and interrelationships are fairly well-understood.
optimizers. For these purposes the rather recently suggested The contributions of this work are as follows. We deﬁne the
                                [
notion of strong equivalence for ASP Lifschitz et al., 2001; notion of strong equivalence for ordered programs. It turns
           ]
Turner, 2003 can be used. Indeed, if two ASP programs out that the deﬁnition for standard ASP cannot be straightfor-
are strongly equivalent, they can be used interchangeably in wardly extended for two main reasons: (1) the “union” of or-
  ∗The ﬁrst author was partially supported by the EC under project dered programs needs to be deﬁned properly, and (2) not any
IST-2002-33570 (INFOMIX). The second author was partially sup- “union” of ordered programs yields a valid ordered program.
ported by the German Science Foundation (DFG) under grant SCHA To overcome these problems, we deﬁne the notion of admis-
550/6-4, TP C. Both authors were partially supported by the EC un- sible extension, which provides a general method for deﬁning
der project IST-2001-37004 WASP.                      strong equivalence for arbitrary structures. We show several
  †Funded by APART of the Austrian Academy of Sciences. properties of strong order equivalence, providing necessaryand sufﬁcient conditions for programs to be strongly order higher priority than ri. Formally, an ordered (logic) program
equivalent. We also explore the relationship of strong order (OLP) can be understood as a quadruple (Π, N , n, <), where
equivalence between the three semantics studied in this paper, Π is a logic program, n is a bijective function between Π and
and the relationship to strong equivalence of standard logic the set of names N , and < is a set of preference relations
programs. Based on these results, we study the applicability over Π. Whenever possible, we leave N and n implicit and
of program simpliﬁcation rules, known from standard ASP, just write (Π, <) for OLPs. Moreover, we write <= ∅ if no
in the presence of preferences. We obtain that most of these partial order is given that is (Π, ∅) denotes a logic program.
simpliﬁcations can be applied only in particular contexts. The The interpretation that one rule has higher priority than an
main results of this work are that the relationship between the other rule can be made precise in different ways. In what fol-
three preference semantics is changing under strong equiva- lows, we consider three such interpretations: D– [Delgrande
lence and that preferences cannot be “compiled away” in a et al., 2003], B– [Brewka and Eiter, 1999], and W – prefer-
modular fashion. We omit all proofs due to the page limit. 1 ence [Schaub and Wang, 2003]. Given (Π, <), all of them
                                                      use < for selecting preferred answer sets among the standard
2  Background                                         answer sets of Π. We now recall the deﬁnitions of these se-
                                                      mantics. 2
Answer Sets. A logic program (LP) is a ﬁnite set of rules
                                                      Deﬁnition 2.1 Let (Π, <) be an OLP and X be an answer set
such as p0 ←  p1, . . . , pm, not pm+1, . . . , not pn, where          D
                                                      of Π. Then, X is < –preserving, if an enumeration hr i ∈
n ≥  m  ≥ 0, and each p (0 ≤ i ≤  n) is an atom. For                                                 i i I
                      i                               of Π exists s.t. for every i, j ∈ I we have
such a rule r, we let head(r) denote the head, p0, of r and
body(r) the body, {p1, . . . , pm, not pm+1, . . . , not pn}, 1. if ri < rj , then j < i, and
              +                            −
   r      body (r)  =  {p1, . . . , p } body (r) =                              +
of  . Let                      m   and                2. if ri ∈ RΠ(X) then body (ri) ⊆  {head(rj ) | rj ∈
{pm+1, . . . , pn}. For a set of rules Π, we write head(Π) =
                                          −               RΠ(X),  j < i}, and
{head(r) | r ∈ Π}. A program is basic if body (r) = ∅
                                                         if r ∈ Π \ RΠ(X) then
for all its rules. The reduct, ΠX , of a program Π relative to a 3. i
                          X                  +                +
set X of atoms is deﬁned by Π = {head(r) ← body (r) |  (a) body (ri) 6⊆ X or
           −
r ∈ Π, body (r) ∩ X =  ∅}. A set of atoms X is closed         −
                                                       (b) body (ri) ∩ {head(rj ) | rj ∈ RΠ(X), j < i} 6= ∅.
under a basic program Π if for any r ∈ Π, head(r) ∈ X if
    +                                                                                      Π
body (r) ⊆ X. The smallest set of atoms being closed un- Cond.1 stipulates that the enumeration of is compatible
                                                          <
der a basic program Π is denoted by Cn(Π). Then, a set X with . Cond.2 makes the property of supportedness explicit.
of atoms is an answer set of a program Π if Cn(ΠX ) = X. Although any answer set is generated by a supported se-
                                                                      D
We use AS(Π) for denoting the set of all answer sets of Π. In quence of rules, in –preferences, rules cannot be supported
what follows, an important concept is that of the generating by lower-ranked ones. Cond.3a separates the handling of un-
rules of an answer set. Given a set X of atoms from Π, deﬁne supported rules from preference handling. Cond.3b guaran-
                     +            −                   tees that rules can never be blocked by lower-ranked ones.
RΠ(X)  = {r ∈ Π | body (r) ⊆ X, body (r) ∩ X = ∅}.
  Strong Equivalence. Under the answer set semantics, two Deﬁnition 2.2 Let (Π, <) be an OLP and X be an answer set
                                                                       W
LPs Π1 and Π2 are regarded as equivalent, denoted Π1 ≡ Π2, of Π. Then, X is < –preserving, if an enumeration hriii∈I
iff AS(Π1) = AS(Π2).  Two LPs Π1 and Π2 are strongly  of Π exists s.t. for every i, j ∈ I we have
equivalent, denoted Π1 ≡s Π2, iff, for any LP Π, the pro- 1. if ri < rj , then j < i, and
grams Π1 ∪ Π and Π2 ∪ Π are equivalent, i.e. Π1 ∪ Π ≡
                                                      2. if ri ∈ RΠ(X) then
Π2 ∪ Π. As shown in [Lifschitz et al., 2001], strong equiv-
                                                              +
alence is closely related to the non-classical logic of here- (a) body (ri) ⊆ {head(rj ) | rj ∈ RΠ(X), j < i} or
and-there, which was adapted to logic-programming terms by
                                                       (b) head(ri) ∈ {head(rj ) | rj ∈ RΠ(X), j < i}, and
Turner [Turner, 2003]: Let Π be an LP, and let X, Y ⊆ A
such that X ⊆ Y . The pair (X, Y ) is an SE-model of Π (over 3. if ri ∈ Π \ RΠ(X) then
A    Y           X      Y     SEA                             +
 ), if  |= Π and   |= Π  . By      (Π) we denote the   (a) body (ri) 6⊆ X or
set of all SE-models over A of Π. Usually the set A is left
                                                          body − r    head r    r   R   X , j < i
implicit and one just writes SE(Π). Then, for any LPs Π1 (b)    ( i) ∩ {  ( j ) | j ∈ Π(  )     } 6= ∅ or
and Π2, Π1 ≡s Π2 iff SE(Π1) = SE(Π2) [Turner, 2003].   (c) head(ri) ∈ {head(rj ) | rj ∈ RΠ(X), j < i}.
  Preferences. A logic program Π is said to be ordered if we For W –preference, the concept of order preservation from
have a set N of terms serving as names for rules and a pref- D–preferences is weakened in Condition 2 and 3 for suspend-
erence relation <⊆ N × N as a strict partial order among ing both conditions, whenever the head of a preferred rule is
rules, where we write s < t for the names s, t ∈ N of rules derivable in an alternative way.
in Π. Furthermore, we assume a bijective function n(.) as-
                      r              n r              Deﬁnition 2.3 Let (Π, <) be an OLP and X be an answer set
signing to each each rule ∈ Π a name  ( ) ∈ N . To                     B
                                                                 X   <                              r  ∈
simplify our notation, we usually write ri instead of n(ri) for of Π. Then, is –preserving, if an enumeration h iii I
                                                                           i, j I
some ri ∈ Π. Given ri, rj ∈ Π, ri < rj states that rj has of Π exists s.t. for every ∈ we have
                                                      1. if ri < rj , then j < i, and
  1A version of the paper including proofs can be found at http:
//www.wfaber.com/research/#publications                  2In the following, I is an index set I = {1, . . . , n} for |Π| = n.2. if ri ∈ Π \ RΠ(X) then                             Then, we have
        +                                                 ∗  ∗                            ∗        ∗
(a) body (ri) 6⊆ X or                                  (Π  , < ) = {r5 : a ←, r6 : b ← a, r5 < r6, r6 < r5}
        −                                                     ∗                                  ∗   ∗
(b) body (ri) ∩ {head(rj ) | rj ∈ RΠ(X), j < i} 6= ∅ or where < is not a strict partial order. Hence, (Π , < ) is
                                                      not an OLP. To avoid this, we deﬁne the notion of admissible
(c) head(ri) ∈ X.
                                                      extensions of an OLP.
B–preference drops Cond.2; thus decoupling preference han-
                                                                         , <      0, <0
dling from the order induced by consecutive rule applications. Deﬁnition 3.2 Let (Π ) and (Π ) be OLPs.
                                                                0, <0                          , <
  For σ ∈ {D, W, B}, we deﬁne ASσ((Π, <)) as the set    Then, (Π   ) is an admissible extension of (Π ) if (Π ∪
                                                        0, < <0
of all <σ-preserving answer sets of OLP (Π, <). As shown Π ∪    ) is an OLP.
in [Schaub and Wang, 2003], the three strategies yield an We remark that the notion of compatibility for orderings,
increasing number of preferred answer sets. That is, D– as deﬁned in [Brewka and Eiter, 1999], is similar in spirit to
preference is stronger than W –preference, which is stronger admissible extensions, but concerns only the order relation
than B–preference, which is stronger than no preference. and not the rules in the program.
More precisely, we have ASD((Π, <)) ⊆ ASW ((Π, <)) ⊆    Analogously to (normal) logic programs, we can deﬁne the
ASB((Π, <)) ⊆  AS(Π)  and, in addition, ASσ((Π, ∅)) = notion of equivalence of OLPs.
AS(Π) for σ ∈ {D, W, B}.                              Deﬁnition 3.3 (Order equivalence) Let (Π1, <1)  and
                                                      (Π2, <2) be OLPs and σ ∈ {D, B, W }. Then, (Π1, <1) and
                                                                   σ                           σ
3  Strong  Order   Equivalence                        (Π2, <2) are < -equivalent, denoted (Π1, <1) ≡ (Π2, <2),
                                                        ASσ      , <    ASσ      , <
In this section we deﬁne variants of equivalences for OLPs. iff ((Π1 1)) =  ((Π2   2)).
Deﬁning “standard” equivalence (two programs permit pre- Since the deﬁnition of strong equivalence for logic pro-
cisely the same answer sets) is straightforward by considering grams can be interpreted as having the same answer sets in
the respective preferred answer sets.                 any extension, we employ the notion of admissible extensions
  However, concerning the notion of strong equivalence, for deﬁning the analogon for OLPs.
there are some caveats. For standard programs, strong equiv- Deﬁnition 3.4 (Strong order equivalence) Let (Π1, <1) and
alence for Π1 and Π2 holds if for any program Π, Π1 ∪ Π (Π2, <2) be OLPs and σ ∈ {D, B, W }.
                                                                                              σ
and Π2 ∪ Π are equivalent. If we now take preferences into Then, (Π1, <1) and (Π2, <2) are strongly < -equivalent
account, for any (Π, <), (Π1, <1) and (Π2, <2) would be iff for all admissible extensions (Π, <) of (Π1, <1) and
strongly equivalent if (Π1 ∪ Π, <1 ∪ <) and (Π2 ∪ Π, <2 (Π2, <2) it holds that (Π1 ∪ Π, <1 ∪ <) and (Π2 ∪ Π, <2
∪ <) are equivalent. The problem is that (Π1 ∪ Π, <1 ∪ <) ∪ <) are <σ- equivalent.
is not necessarily an OLP, because of two issues: 1. Rule label
                                                                          ≡σ
clashes, and 2. partial order clashes.                Abbreviatory, we write s whenever two OLPs are strongly
                                                      <σ-equivalent.
  Rule label clashes, i.e. two different rules have the same
name or one rule has two different names, can be resolved by
a renaming. We say that (Π, N ∗, n∗, <∗) is a renaming of 4 Properties and Relationships
(Π, N , n, <) if N ∗ is a new set of names of rules, n∗(.) is Next, we want to characterize which conditions two OLPs
a bijective function assigning each rule of Π an unique name must fulﬁll s.t. they are strongly order equivalent.
of N ∗, and n∗(r) <∗ n∗(r0) holds iff n(r) < n(r0), for all The next theorem states that strong order equivalence im-
r, r0 ∈ Π. The union of two OLPs is then deﬁned as follows. plies strong equivalence of the underlying logic programs.
                                    0   0 0   0
Deﬁnition 3.1 Let (Π, N , n, <) and (Π , N , n , < ) be Theorem 4.1 Let (Π1, <1) and (Π2, <2) be OLPs and σ ∈
               0                                                            σ
OLPs where N , N are disjoint sets of rule names.     {D, W, B}. If (Π1, <1) ≡s (Π2, <2) then Π1 ≡s Π2.
  We deﬁne the union of (Π, N , n, <) and (Π0, N 0, n0, <0)
    ∗   ∗  ∗   ∗                                      Intuitively, if the logic programs are not strongly equivalent,
as (Π , N , n , < ), where                            one extension of them admits an answer set A, which is no
  • Π∗ = Π ∪ Π0                                       answer set of the extension of the other program. If the corre-
      ∗                                               sponding ordered extensions have the same answer sets, this
  • N  as new set of names of rules,
                                                      means that A is inhibited by the preferences. But then one can
     ∗                0
  • n (r) for r ∈ Π ∪ Π as a bijective function assigning always construct a further extension, which regenerates A for
                    0                  ∗
    each rule of Π ∪ Π an unique name of N , and      one program, but not for the other. For example, programs
  • <∗ as < ∪  <0, where for r, r0 ∈ Π ∪ Π0, n∗(r) <∗
     ∗  0                        0     0    0  0 0     (Π1, ∅)   = {r1 : a ←}
    n (r ) holds whenever n(r) < n(r ) or n (r) < n (r ) (Π2, <2) = {r2 : a ← not b, r3 : b ← not a, r3 <2 r2}
    holds.
                                                      have both the preferred answer set {a}, whereas Π2 has ad-
Again, we usually leave N ∗ and n∗ implicit. Sometimes we
                                                      ditionally the answer set {b}. Taking (Π, ∅) = {r4 : b ←
write (Π ∪ Π0, < ∪ <0) for the union of (Π, <) and (Π0, <0).
                                                      y, r5 : y ←}  yields {a, b, y} as preferred answer set of
  We next observe that the union of OLPs is not necessarily
                                                      (Π1∪Π, ∅), but {b, y} as preferred answer set of (Π2∪Π, <2).
an OLP. For this, consider                              Note that one can create such a “compensating” program
      (Π1, <1) = {r1 : a ←, r2 : b ← a, r2 <1 r1}     for any answer set which is inhibited by the preference rela-
      (Π2, <2) = {r3 : a ←, r4 : b ← a, r3 <2 r4}     tion. For this, we use new symbols and new rules, which are                                                               B                        B
not involved in the preference relation, to “repair” this answer yields AS ((Π1 ∪ Π, <)) = ∅ but AS ((Π2 ∪ Π, <)) =
set. Therefore strong equivalence is a necessary condition for {a}. Here, rule r2 can be used to block r3. For D- and W -
strong order equivalence.                             preferences, however, r2 has to be ordered after r1, hence it
  Next, we turn our attention to the set of generation rules. can not be used to block r3.
For this, consider the following OLPs:                  In the following we will concentrate on the preference re-

           (Π1, ∅) = {r1 : a ←, r3 : b ←}             lations. For this consider the program
           (Π2, ∅) = {r1 : a ←, r2 : b ← a}
                                                                   Π  = {r1 : a ←, r2 : b ← a}

We observe that Π1 ≡s Π2, but taking                                                                    σ
     ∗   ∗                                 ∗          and the preference relation r1 > r2. We obtain that (Π, ∅) ≡
   (Π , < ) = {r2 : b ← a, r4 : y ← not b, r2 < r4}   (Π, <) holds for all σ ∈ {D, W, B} and (Π, ∅) and (Π, <)
                σ        ∗  ∗        σ        ∗  ∗
yields {a, b} ∈ AS ((Π1 ∪ Π , < )) but AS ((Π2 ∪ Π , < coincide on their set of rules. For (Π, ∅), rule r1 must be
)) = ∅ for σ ∈ {D, W, B}.  They are not strongly order considered before rule r2 in D- and W -preference, since the
equivalent because they do not coincide on their set of gener- derivation of the positive body of r2 depends from r1. Thus,
ating rules. (Π1, ∅) contains r3 and (Π2, ∅) rule r2 to derive adding the preference relation r1 > r2 to (Π, ∅) has no effect
                                                          D
the atom b. Adding r4 and the preference that r4 is higher pre- on < - and W - preferred answer sets. Surprisingly, this does
                         ∗   ∗
ferred to r2 entails that (Π2∪Π , < ) has no preferred answer not hold when considering strong order equivalence. Taking
set since r4 is blocked by the lower preferred rule r2, while
       ∗   ∗                                                       r1 : a ←   r3 : z ←      r5 : a ← x
(Π1 ∪ Π , < ) has a preferred answer set since r3 allows to 0 0
                                                       (Π , < ) =  r2 : b ← a r4 : y ← not z r6 : x ←
block r4 in an alternative way. This allows us to suppose that
                                                                (  r <0 r     r <0 r                   )
strong order equivalence enforces that the OLPs must coin-          3    2     1    4
cide on all rules which can become applicable. For this, we yields ASσ((Π ∪ Π0, <0)) = {{a, b, x, z}} while ASσ((Π ∪
say that a rule r ∈ Π contributes to an answer set X, if there 0 0                 0  0
         ∗                     ∗                      Π , < ∪ < )) = ∅. For (Π, <)∪(Π , < ) we get the transitive
exists an Π such that X ∈ AS(Π∪Π ) and r ∈ RΠ∪Π∗ (X).
                                                      preference r4 > r3, implying that r4 is blocked by a lower
Rules which are not contributing to answer sets, are never ap-                                       0  0
               +         −                            preferred rule, which we don’t obtain for (Π, ∅) ∪ (Π , <
plicable, e.g. body (r) ∩ body (r) 6= ∅. For B–preferences, ). Since one can always construct such a program (observe
we obtain that two strongly order equivalent programs must that the relevant rules contain new symbols), it follows that
coincide on their rules contributing to answer sets.  two OLPs can never be strongly equivalent if the preference
Theorem 4.2 Let (Π1, <1) and (Π2, <2) be OLPs.   If   relations do not coincide.
          B
(Π1, <1) ≡s  (Π2, <2), then for all Π and for all X ∈
                                                      Theorem  4.4 Let (Π1, <1) and (Π2, <2) be OLPs and σ ∈
AS(Π1  ∪ Π)  =  AS(Π2  ∪  Π) we  have RΠ1∪Π(X)   =                          σ
                                                      {D, W, B}. If (Π1, <1) ≡s (Π2, <2) then <1=<2.
RΠ2∪Π(X).
                                                                                         σ
Interestingly, for D– and W –preferences, these conditions As a special case we obtain that (Π, ∅) 6≡s (Π, <) holds for
have to be weakened.                                  any program Π, any non-empty preference relation on Π, and
                                                      any σ ∈ {D, W, B}. Moreover, for every OLP (Π, <), <6=
Theorem 4.3 Let (Π1, <1) and (Π2, <2) be OLPs and σ ∈                                               0
                   σ                                  ∅, there exists no strongly order equivalent program (Π , ∅).
{D, W }. If (Π1, <1) ≡s (Π2, <2), then for all Π and for all
X ∈ AS(Π1  ∪Π) = AS(Π2  ∪Π) we have RΠ1∪Π(X)\{r  ∈    Corollary 4.5 Let (Π, <) be an OLP such that <6= ∅ and
                     +                                                                              0
Π1∪Π  | head(r) ∈ body (r)} = RΠ2∪Π(X)\{r ∈ Π2∪Π  |   σ ∈ {D, W, B}. Then, there exists no logic program Π such
             +                                                    σ   0
head(r) ∈ body (r)}.                                  that (Π, <) ≡s (Π , ∅).
Since D- and W - preferences couple rule application with Interestingly, this tells us that no transformation from an
preference handling, answer sets can be inhibited by prefer- OLP with a non-empty preference relation to a logic program
ences because applied rules are not enumerable in an order exists such that the transformed program is strongly order
preserving way (see Condition 2 in Deﬁnition 2.1 and 2.2). equivalent to the original one. The results given above are
But one can always ﬁnd an extension such that those an- sufﬁcient for characterizing strong order equivalence.
swer sets are regenerated. For applied “loop” rules, i.e.
              +                                       Theorem  4.6 Let (Π1, <1) and (Π2, <2) be OLPs. If Π1 ≡s
head(r) ∈ body (r), another rule must always exist which
                                                      Π2, <1=<2,   and for all Π and for all X ∈ AS(Π1 ∪
derives the head in an order preserving way. Hence, such loop
                                                      Π) = AS(Π2  ∪ Π) we have RΠ1∪Π(X) =  RΠ2∪Π(X), then
rules are redundant wrt. D- and W - preferences as long as      B
                                                      (Π1, <1) ≡  (Π2, <2).
they are not involved in the preference relations. In contrast, s
B- preferences decouple preference handling from rule ap- Theorem 4.7 Let (Π1, <1) and (Π2, <2) be OLPs and σ ∈
plication and hence, one can always ﬁnd an extension, where {D, W }. If Π1 ≡s Π2, <1=<2, and for all Π and for all

those loop rules regenerate a non-preferred answer set to a X ∈ AS(Π1 ∪Π) = AS(Π2 ∪Π) we have RΠ1∪Π(X)\{r ∈
                                                                           +
preferred one in one program but not in the other one. For Π1∪Π | head(r) ∈ body (r)} = RΠ2∪Π(X)\{r ∈ Π2∪Π |
example,                                                            +                  σ
                                                      head(r) ∈ body (r)}, then (Π1, <1) ≡s (Π2, <2).
    ,      r  a          ,     r   a   , r  a   a
 (Π1 ∅) = { 1 : ←}   (Π2  ∅) = { 1 : ←   2 : ←   }    For example,
are not strongly <B- equivalent. Taking
                                                               (Π1, ∅) = {r1 : a ←, r2 : b ← not a}
     (Π, <) = {r1 : a ←, r3 : y ← not a, r1 < r3}              (Π2, ∅) = {r1 : a ←, r3 : c ← not a}are strongly order equivalent in all three semantics, whereas This corollary expresses that a rule, which is never applicable
                                                      and not involved in <, is redundant regarding strong order
 (Π3, ∅) = {r1 : a ←} (Π4, ∅) = {r1 : a ←, r2 : a ← a} equivalence. The next corollary concentrates on loop rules.
                D       W                             Corollary 5.2 Let (Π, <) be an OLP and σ ∈ {D, W }. Fur-
are only strongly < - (and < -) equivalent, but not strongly                              +
<B- equivalent. With these results we can formalize the fol- thermore, let r ∈ Π s.t. head(r) ∈ body (r) and r is not
                                                                                σ
lowing characterization of strong order equivalence.  involved in <. Then, (Π, <) ≡s (Π \ {r}, <).
                                                        In [Eiter et al., 2004; Osorio et al., 2001] transformations
Corollary 4.8 Let (Π1, <1) and (Π2, <2) be OLPs. Then,
          B                                           on logic programs are reported, which can be used for sim-
(Π1, <1) ≡  (Π2, <2) iff Π1 ≡s Π2, <1=<2, and for all
          s                                           plifying a program. For those modular transformations a
Π and for all X ∈ AS(Π1 ∪ Π) =  AS(Π2 ∪ Π) we have
                                                      program must be strongly equivalent to the transformed one.
RΠ1∪Π(X)  = RΠ2∪Π(X).
                                                      Considering OLPs, we observe that these transformations in
Corollary 4.9 Let (Π1, <1) and (Π2, <2) be OLPs and σ ∈ general do not guarantee strong order equivalence. Transfor-
                         σ
{D, W }. Then, (Π1, <1) ≡   (Π2, <2), iff Π1 ≡s Π2,   mation TAUT expresses that for all logic programs Π and all
                         s                                                      +
<1=<2,  and for all Π and for all X ∈ AS(Π1 ∪ Π) =    r ∈ Π where head(r) ∈ body (r) we have Π ≡s Π \ {r}.

AS(Π2 ∪ Π) we have RΠ1∪Π(X) \ {r ∈ Π1 ∪ Π | head(r) ∈ Corollary 5.2 implies that the analogon for OLPs only holds
    +
body (r)} =  RΠ2∪Π(X)  \ {r ∈  Π2 ∪ Π  | head(r) ∈    for the D- and W - semantics as long as r is not involved
    +                                                 in <. Transformation RED− expresses that for a logic pro-
body (r)}.                                                                                          −
                                                      gram Π and for rules r1, r2, where head(r2) ∈ body (r1)
Regarding preferred answer sets, the different strategies for and body(r2) = ∅, we have Π ≡s Π \ {r1}. Since r2 is
preference handling yield an increasing number of preferred always a generating rule, regardless which rules we add to
                                                                                                     −
answer sets. Interestingly, the above given theorems show Π, r1 never contributes to an answer set. Hence, RED is
that there is no difference in the behavior of D– and W – feasible for OLPs unless r1 is involved in <. For r ∈ Π,
                                                                +         −
preferences when considering strong order equivalence. In where body (r) ∩ body (r) 6= ∅ we have that Π ≡s Π \ {r}
contrast, fewer programs are strongly order equivalent in the (transformation CONTRA). Since such a rule is never ap-
B–semantics, since preference handling is decoupled from plicable, this result can be carried over to OLPs whenever
rule application.                                     this rule is not involved in <. Transformation NONMIN
                                                      states that for r1, r2 ∈ Π, where head(r2) = head(r1) and
Theorem 4.10 Let (Π1, <1) and (Π2, <2) be OLPs. Then
               B                        W             body(r2) ⊆ body(r1), we have that Π ≡s Π \ {r1} holds.
(a) if (Π1, <1) ≡s (Π2, <2) then (Π1, <1) ≡s (Π2, <2),
            W                      D                  Since there is no information whether r1 can become appli-
(b) (Π1, <1) ≡ (Π2, <2) iff (Π1, <1) ≡ (Π2, <2).
            s                      s                  cable or not, this transformation can only be made on OLPs
                            D
Considering answer sets, each < -preferred answer set is whenever r1 is not involved in < and never becomes applica-
<W -preferred and each <W -preferred is <B-preferred. In- ble. For example, consider the program:
terestingly, regarding strong order equivalence we obtain that
 D      W                                              (Π1, ∅) = {r1 : a ←, r2 : b ←, r3 : c ← a, r4 : c ← a, b}
≡s  iff ≡s , so the differences between the D- and W - se-
mantics can be compensated by extending the program in a
                           B          W      B        Here we have that head(r3) = head(r4) and body(r3) ⊆
suitable way. Moreover, since ≡s implies ≡s and ≡s im-
      D                                               body(r4), hence, Π1 ≡s Π1 \{r4}. Since r4 is applicable, the
plies ≡s , the B-semantics imposes a strictly stronger crite- simpliﬁed program is not strongly order equivalent. Taking
rion for programs to be strongly order equivalent. The reason
                                                            ∗  ∗                                 ∗
for this is that B-preference decouples preference handling (Π , < ) = {r3 : c ← a, r5 : y ← not c, r3 < r5}
from rule application, and in addition, these differences can-            σ        ∗   ∗         σ
                                                      yields {a, b, c} ∈ AS ((Π1 ∪ Π , < )) but AS (((Π1 \
not be compensated by adding suitable extensions.             ∗   ∗                                     σ
                                                      {r4})∪Π  , < )) = ∅, for σ ∈ {D, W, B}. Thus, (Π1, ∅) 6≡s
                                                      (Π1 \ {r4}, ∅). Similar considerations apply for the trans-
5  Program    Simpliﬁcations                          formation S-IMP, where for all r, r0 ∈ Π such that there
                                                                       −
                                                      exists an A ⊆ body (r0) such that head(r) ∈ head(r0) ∪
Corollaries 4.9 and 4.8 show that two OLPs which are         −          −
                                                      A, body (r) ⊆ body (r0) \ A and body +(r) ⊆ body +(r0)
strongly order equivalent, differ in rules which are not in-            0
                                                      we have Π ≡s Π \ {r }. This transformation can only be car-
volved in the preference relation and which are never appli-                   0
cable. Additionally, for D- and W - semantics, strongly order ried over to OLPs whenever r is not involved in < and never
equivalent logic programs may differ in loop rules, in which becomes applicable. For example, taking
the head is contained in the positive body. These results al-    Π =  {r0 : a ← b, not c, r : a ←}
low us to formalize the following results concerning transfor-
                                                                                         0
mations on OLPs. In the following, we say that a rule r is and A = {c} yields Π ≡s {r}, where r is applicable wrt
                                             0                                          σ
involved in a preference relation < if there exists an r such {a, b} ∈ AS(Π ∪ {b ←}). But (Π, ∅) 6≡s ({r}, ∅), since for
that r < r0 or r0 < r holds.
                                                      (Π∗, <∗) =  r : a ←, ry : y ← not a, rb : b ←, r <∗ ry
            Let (Π, <) be an OLP such that for r ∈ Π,
Corollary 5.1                                                                   ∗  ∗
which is not involved in <, for all Π0 and X ∈ AS(Π ∪ Π0) we get {a, b} ∈ ASσ((Π ∪ Π , < )) but ∅ = ASσ(({r} ∪ 
                                  σ                     ∗  ∗
we have r 6∈ RΠ∪Π0 (X). Then, (Π, <) ≡ (Π\{r}, <) holds Π , < )) for σ ∈ {D, W, B}. Transformation WGPPE states
                                  s                                                 +
for σ ∈ {D, W, B}.                                    for a rule r1 ∈ Π, where a ∈ body (r1), Ga = {r2 ∈ Π |