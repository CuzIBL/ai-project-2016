             A Comparison of Time-Space Schemes for Graphical Models

                                 Robert Mateescu    and  Rina Dechter
                       Donald Bren School of Information and Computer Science
                            University of California, Irvine, CA 92697-3425
                                    {mateescu,dechter}@ics.uci.edu


                    Abstract                          and small tree depth (e.g., grid-like chains). The immediate
                                                      conclusion seems to be that the methods are not comparable.
    We investigate three parameterized algorithmic      In this paper we show that by looking at all these schemes
    schemes for graphical models that can accom-      side by side, and analyzing them using the context mini-
    modate trade-offs between time and space: 1)      mal AND/OR graph data structure [Mateescu and Dechter,
    AND/OR Adaptive Caching (AOC(i)); 2) Variable     2005b], each of these schemes can be improved via the
    Elimination and Conditioning (VEC(i)); and 3)     AND/OR search principle and by careful caching, to the
    Tree Decomposition with Conditioning (TDC(i)).    point that they all become identically good. Speciﬁcally, we
    We show that AOC(i) is better than the vanilla ver- show that the new algorithm Adaptive Caching (AOC(i)), in-
    sions of both VEC(i) and TDC(i), and use the guid- spired by the recently proposed AND/OR cutset condition-
    ing principles of AOC(i) to improve the other two ing [Mateescu and Dechter, 2005a] (improving cutset, and
    schemes. Finally, we show that the improved ver-  w-cutset schemes), can simulate any execution of alternat-
    sions of VEC(i) and TDC(i) can be simulated by    ing elimination and conditioning, if the latter is augmented
    AOC(i), which emphasizes the unifying power of    with AND/OR search over the conditioning variables, and
    the AND/OR framework.                             can also simulate any execution of separator controlled tree-
                                                      clustering schemes [Dechter and Fattah, 2001], if the clusters
                                                      are augmented with AND/OR cutset search, rather than regu-
1  Introduction                                       lar search, as was initially proposed.
This paper addresses some long-standing questions regarding All the analysis is done assuming that the problem contains
the computational merits of several time-space sensitive algo- no determinism. When the problem has determinism all these
rithms for graphical models. All exact algorithms for graph- schemes become incomparable, as was shown in [Mateescu
ical models, either search or inference based, are time and and Dechter, 2005b], because they exploit the deterministic
space exponentially bounded by the treewidth of the problem. information in reversed ordering of variables.
For real life networks with large treewidth, the space limi-
tation can be quite severe, therefore schemes that can trade 2 Preliminaries
space for time are of outmost importance.             This section provides the basic deﬁnitions.
  In the past ten years, four types of algorithms have
                                     w       [        DEFINITION 1 (graphical model) A graphical model is a 3-
emerged, based on: (1) cycle-cutset and -cutset Pearl,     M     X,D,F         X    {X  ,...,X }
                 ]                                    tuple   =          ,where:    =    1      n  is a set
1988; Dechter, 1990 ; (2) alternating conditioning and elim-     D    {D  ,...,D }
ination controlled by induced-width w [Rish and Dechter, of variables; = 1      n is the set of their ﬁnite do-
                                                      mains of values; F = {f1,...,fr} is a set of real-valued func-
2000; Larrosa and Dechter, 2002; Fishelson and Geiger,                          X
2002]; (3) recursive conditioning [Darwiche, 2001],which tions deﬁned on variables from .
was recently recast as context-based AND/OR  search   DEFINITION 2 (primal graph) The primal graph of a graph-
[Dechter and Mateescu, 2004]; (4) varied separator-sets for ical model is an undirected graph, G =(X,E), that has
tree decompositions [Dechter and Fattah, 2001]. The ques- variables as its vertices and an edge connecting any two vari-
tion is how do all these methods compare and, in particular, ables that appear in the scope (set of arguments) of the same
is there one that is superior? A brute-force analysis of time function.
and space complexities of the respective schemes does not
                                                      DEFINITION 3 (pseudo tree) A pseudo tree of a graph G
settle the question. For example, if we restrict the available                                         =
                                                      (X,E)  is a rooted tree T having the same set of nodes X,
space to be linear, the cycle-cutset scheme is exponential in
                                                      such that every arc in E is a back-arc in T (i.e., it connects
the cycle-cutset size while recursive conditioning is exponen-
                                                      nodes on the same path from root).
tial in the depth of the pseudo tree (or d-tree) that drives the
computation. However some graphs have small cycle-cutset DEFINITION 4 (induced graph, induced width, treewidth)
and larger tree depth, while others have large cycle-cutsets An ordered graph is a pair (G, d),whereG is an undirected

                                                IJCAI-07
                                                  2346graph, and d =(X1, ..., Xn) is an ordering of the nodes. are AND nodes labeled with assignments Xi,xi. The chil-
The width of a node in an ordered graph is the number of dren of an AND node Xi,xi are OR nodes labeled with the
neighbors that precede it in the ordering. The width of an children of variable Xi in the pseudo tree T .
ordering d, denoted by w(d), is the maximum width over all The AND/OR search tree can be traversed by a depth ﬁrst
                                         ∗
nodes. The induced width of an ordered graph, w (d),isthe search algorithm, thus using linear space. It was already
width of the induced ordered graph obtained as follows: for shown [Freuder and Quinn, 1985; Bayardo and Miranker,
each node, from last to ﬁrst in d, its preceding neighbors are 1996; Darwiche, 2001; Mateescu and Dechter, 2005a] that:
connected in a clique. The induced width of a graph, w∗,is
                                                      THEOREM   1 Given a graphical model M and a pseudo tree
the minimal induced width over all orderings. The induced T     m
width is also equal to the treewidth of a graph.        of depth  , the size of the AND/OR search tree based on
                                                      T is O(nkm),wherek   bounds the domains of variables. A
                                                      graphical model of treewidth w∗ has a pseudo tree of depth
3  Description of Algorithms                          at most w∗ log n, therefore it has an AND/OR search tree of
                                                                ∗
In this section we describe the three algorithms that will be size O(nkw log n).
compared. They are all parameterized memory intensive al-
gorithms that need to use space in order to achieve the worst The AND/OR search tree may contain nodes that root iden-
                          w∗                          tical conditioned subproblems. These nodes are said to be
case time complexity of O(nk ),wherek bounds domain
         ∗                                            uniﬁable. When uniﬁable nodes are merged, the search space
size, and w is the treewidth of the primal graph. The task
                                                      becomes a graph. Its size becomes smaller at the expense of
that we consider is one that is #P-hard (e.g., belief updating
                                                      using additional memory by the search algorithm. The depth
in Bayesian networks, counting solutions in SAT or constraint
                                                      ﬁrst search algorithm can therefore be modiﬁed to cache pre-
networks). We also assume that the model has no determin-
                                                      viously computed results, and retrieve them when the same
ism (i.e., all tuples have a strictly positive probability).
                                                      nodes are encountered again. Some uniﬁable nodes can be
  The algorithms we discuss work by processing variables identiﬁed based on their contexts [Darwiche, 2001]. We can
either by elimination or by conditioning. These operations deﬁne graph based contexts for both OR nodes and AND
have an impact on the primal graph of the problem. When nodes, just by expressing the set of ancestor variables in T
a variable is eliminated, it is removed from the graph along whose assignment would completely determine the condi-
with its incident edges, and its neighbors are connected in a tioned subproblem. However, it can be shown that using
clique. When it is conditioned, it is simply removed from the caching based on OR contexts makes caching based on AND
graph along with its incident edges.                  contexts redundant, so we will only use OR caching.
  The algorithms we discuss typically depend on a variable
ordering d =(X1, ..., Xn). Search proceeds by instanti- DEFINITION 5 (OR context) Given a pseudo tree T of an
ating variables from X1 to Xn, while Variable Elimination AND/OR search space, the context of an OR node X,de-
                                   X     X
processes the variables backwards, from n to 1.Given  noted by context(X)=[X1  ...Xk], is the set of ancestors
agraphG  andanorderingd, an elimination tree, denoted by of X in T ordered descendingly, that are connected in the
T (G, d), is uniquely deﬁned by the Variable Elimination pro- primal graph to X or to descendants of X.
cess. T (G, d) is also a valid pseudo tree to drive the AND/OR
                                                                                       X           [
search. Note however that several orderings can give rise to It is easy to verify that the context of d-separates Pearl,
                                                          ]                    X
the same elimination tree.                            1988  the subproblem below from the rest of the network.
                                                      The context minimal AND/OR graph is obtained by merging
3.1  AND/OR Search Space                              all the context uniﬁable OR nodes. An example will appear
                                                      later in Figure 7. It was already shown that [Bayardo and
The AND/OR search space is a recently introduced [Dechter Miranker, 1996; Dechter and Mateescu, 2004]:
and Mateescu, 2004; Mateescu and Dechter, 2005b; 2005a]
unifying framework for advanced algorithmic schemes for THEOREM 2 Given a graphical model M, its primal graph
graphical models. Its main virtue consists in exploiting inde- G and a pseudo tree T , the size of the context minimal
                                                                                             w∗ G
pendencies between variables during search, which can pro- AND/OR search graph based on T is O(nk T ( )),where
                                                        ∗
vide exponential speedups over traditional search methods wT (G) is the induced width of G over the depth ﬁrst traver-
oblivious to problem structure.                       sal of T , and k bounds the domain size.
  Given a graphical model M = X, D, F, its primal graph
G and a pseudo tree T of G (see Figure 6 for an example 3.2 AND/OR Cutset Conditioning - AOCutset(i)
of a pseudo tree), the associated AND/OR search tree has al- AND/OR Cutset Conditioning (AOCutset(i)) [Mateescu
ternating levels of OR and AND nodes (see Figure 7 for an and Dechter, 2005a] is a search algorithm that combines
example of OR and AND nodes; however, the ﬁgure shows
                                                X     AND/OR search spaces with cutset conditioning. The con-
a search graph, not a tree). The OR nodes are labeled i ditioning (cutset) variables form a start pseudo tree. The re-
and correspond to the variables. The AND nodes are labeled
X ,x           x                                    maining variables (not belonging to the cutset), have bounded
  i  i ,orsimply  i, and correspond to the value assign- conditioned context size that can ﬁt in memory.
ments in the domains of the variables. The structure of the
AND/OR search tree is based on the underlying pseudo tree DEFINITION 6 (start pseudo tree) Given a primal graph G
T . The root of the AND/OR search tree is an OR node la- and a pseudo tree T of G,astart pseudo tree Tstart is a con-
beled with the root of T . The children of an OR node Xi nected subgraph of T that contains the root of T .

                                                IJCAI-07
                                                  2347                                                          A [ ]                     A
   Algorithm AOCutset(i) depends on a parameter i that                  0                      1
 bounds the maximum size of a context that can ﬁt in memory. B [A]      B                      B
 Given a graphical model and a pseudo tree T ,weﬁrstﬁnda           0          1          0           1
                                                          C [AB]   C          C          C           C
 start pseudo tree Tstart such that the context of any node not 0    1     0     1     0    1     0     1
 in Tstart contains at most i variables that are not in Tstart. D [ABC] D D D    D     D    D     D     D
                                       T                       0 1  0  1  0  1 0  1  0  1  0  1  0  1 0  1
 This can be done by starting with the root of and then in- E [ABD] E E    E     E     E    E     E     E
 cluding as many descendants as necessary in the start pseudo  0 1  0  1  0  1 0  1  0  1  0  1  0  1 0  1
 tree until the previous condition is met. Tstart now forms the F [BDE]   F  F F  F  F  F  F  F
                                                                         0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 cutset, and when its variables are instantiated, the remaining
                                                         G [BDF]          G  G G  G  G  G  G G
 conditioned subproblem has induced width bounded by i. The              0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 cutset variables can be explored by linear space (no caching) H [BG]       H    H     H    H
 AND/OR search, and the remaining variables by using full
 caching, of size bounded by i. The cache tables need to be
 deleted and reallocated for each new conditioned subproblem Figure 1: Context minimal graph (full caching)
 (i.e., each new instantiation of the cutset variables).

                                                       [ ]                         A
 3.3  Algorithm AOC(i) - Adaptive Caching                              0                      1
                                                       [ - A]          B                      B
 The cutset principle inspires a new algorithm, based on a        0          1           0          1
 more reﬁned caching scheme for AND/OR search, which we [ - AB]   C          C           C          C
                                                               0    1      0    1     0    1     0     1

 call Adaptive Caching - AOC(i) (in the sense that it adapts to [A - BC] D D D  D     D    D     D     D
 the available memory), that caches some values even at nodes 0 1  0  1  0  1  0 1   0 1  0  1  0  1  0 1
                                                       [A - BD] E   E     E     E     E    E     E     E
 with contexts greater than the bound i that deﬁnes the mem-  0 1  0  1  0  1  0 1   0 1  0  1  0  1  0 1
 ory limit. Lets assume that context(X)=[X1 ...Xk] and [B - DE] F F F F  F  F  F F   F F  F  F  F  F  F F
                                                             0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 k>i. During search, when variables X1,...,Xk−i are in-
                                                       [B - DF] G G G G  G  G G  G   G G  G G   G  G G  G
 stantiated, they can be regarded as part of a cutset. The prob- 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 lem rooted by Xk−i+1 can be solved in isolation, like a sub-
                                                       [ - BG]             H    H     H    H
 problem in the cutset scheme, after variables X1,...,Xk−i
 are assigned their current values in all the functions. In this
 subproblem, context(X)=[Xk−i+1   ...Xk], so it can be
 cached within space bounded by i. However, when the search   Figure 2: AOC(2) graph (Adaptive Caching)
 retracts to Xk−i or above, the cache table for X needs to
 be deleted and will be reallocated when a new subproblem [ ]                      A
         X                                                              0                     1
 rooted at k−i+1 is solved.                            [A]             B                      B
                                                                  0          1           0          1

 DEFINITION 7 (i-context, ﬂag) Given a graphical model, a [AB]    C          C           C          C
 pseudo tree T , a variable X and context(X)=[X1 ...Xk],       0    1      0    1     0    1      0    1
              X                                        [AB - C] D   D      D    D     D    D     D     D
 the i-context of is:                                         0 1  0  1  0  1  0 1   0 1  0  1  0  1  0 1
                   
                                                       [AB - D] E   E      E    E     E    E     E     E
                     [Xk−i   ...Xk],ifi<k                     0 1  0  1  0  1  0 1   0 1  0  1  0  1  0 1
    i-context(X)=          +1
                         context(X),ifi≥     k         [B - DE] F F F F  F  F  F F   F F  F  F  F  F  F F
                                                             0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
 Xi is called the ﬂag of i-context(X).                 [B - DF] G G G G  G  G G  G   G G  G  G  G  G G  G
                                                             0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
  Algorithm AOC(i)                                     [B - G] H    H      H    H     H    H      H    H

   input : M=X,  D, F; G=(X,E);d=(X1,...,Xn);   i
                          X
   output: Updated belief for 1                             Figure 3: AOCutset(2) graph (AND/OR Cutset)
 1 Let T = T (G, d) // create elimination tree
   for each X ∈ X do
 2    allocate a table for i-context(X)                context. The difference is in the management of cache ta-
 3 Initialize search with root of T ;                  bles. Whenever a variable X is instantiated (when an AND
 4 while search not ﬁnished do                         node is reached), the cache table is purged (reinitialized with
 5    Pick next successor not yet visited // EXPAND;   a neutral value) for any variable Y such that X is the ﬂag
 6    Purge cache tables that are not valid;           of i-context(Y ) (line 6). Otherwise, the search proceeds as
 7    if value in cache then                           usual, retrieving values from cache if possible (line 7) or else
 8       retrieve value; mark successors as visited;   continuing to expand, and propagating the values up when the
 9    while all successors visited do // PROPAGATE     search is completed for subproblem below (line 11). We do
10       Save value in cache;                          not detail here the alternation of OR and AND type of nodes.
11       Propagate value to parent;
                                                       Example 1  We will clarify here the distinction between
   The high level pseudocode for AOC(i) is given here. The AND/OR with full caching, AND/OR Cutset and AND/OR
 algorithm works similar to AND/OR search based on full Adaptive Caching. We should note that the scope of a cache

                                                 IJCAI-07
                                                   2348table is always a subset of the variables on the current path R    F     G               A [ ]
in the pseudo tree. Therefore, the caching method (e.g., full                            B [A]
                                                               B     A
caching based on context, cutset conditioning cache, adaptive                            E [AB]
caching) is an orthogonal issue to that of the search space               J              J [ABE]
                                                             H
decomposition. We will show an example based on an OR                                    R [ABEJ]
                                                                      E
search space (pseudo tree is a chain), and the results will                         H[ABEJR]  F [AR]
carry over to the AND/OR search space.                             C     D
                                                                                    L [ABEJH] G [AF]
  Figure 1 shows a pseudo tree, with binary valued variables, L
                                                                   K                N [ABEJHL]
the context for each variable, and the context minimal graph.            M
                                                             N                      O [ABEJHLN]
If we assume the bound i =2, some of the cache tables                 P
                                                                                    K [ABEJHLNO]
don’t ﬁt in memory. We could in this case use AOCutset(2),        O
shown in Figure 3, that takes more time, but can execute in                         D [ABEJHLOK]
the bounded memory. The cutset in this case is made of vari-                        P [ABEHLOKD]
ables A and B, and we see four conditioned subproblems, the                         C [ABEHLKDP]
four columns, that are solved independently from one another                       M  [DC]
(there is no sharing of subgraphs). Figure 2 shows AOC(2),
which falls between the previous two. It uses bounded mem-
ory, takes more time than full caching (as expected), but less Figure 4: Primal graph and pseudo tree
time than AOCutset(2) (because the graph is smaller). This
can be achieved because Adaptive Caching allows the shar-
                                         H            ﬁrst), while AO is a top-down depth-ﬁrst search that explores
ing of subgraphs. Note that the cache table of has the (and records) the full context minimal graph as well.
scope [BG], which allows merging.
                                                      3.5  Tree Decomposition with Conditioning - TDC
3.4  Variable Elimination and Conditioning -VEC(i)
                                                      One of the most widely used methods of processing graph-
Variable Elimination and Conditioning (VEC) [Rish and ical models, especially belief networks, is tree clustering
Dechter, 2000; Larrosa and Dechter, 2002] is an algorithm (also known as join tree or junction tree algorithm [Lauritzen
that combines the virtues of both inference and search. One of and Spiegelhalter, 1988]). The work in [Dechter and Fat-
its remarkably successful applications is the genetic linkage tah, 2001] presents an algorithm called directional join tree
analysis software Superlink [Fishelson and Geiger, 2002]. clustering, that corresponds to an inward pass of messages
VEC  works by interleaving elimination and conditioning of towards a root in the regular tree clustering algorithm. If
variables. Typically, given an ordering, it prefers the elimina- space is not sufﬁcient for the separators in the tree decom-
tion of a variable whenever possible, and switches to condi- position, then [Dechter and Fattah, 2001] proposes the use of
tioning whenever space limitations require it, and continues secondary join trees, which simply combine any two neigh-
in the same manner until all variables have been processed. boring clusters whose separator is too big to be stored. The
We say that the conditioning variables form a conditioning resulting algorithm that uses less memory at the expense of
set,orcutset (this can be regarded as a w-cutset,wherethew more time is called space based join tree clustering,
deﬁnes the induced width of the problems that can be han- The computation in each cluster can be done by any suit-
dled by elimination). The pseudocode for the vanilla ver- able method. The obvious one would be to simply enumerate
sion, called VEC-OR(i) because the cutset is explored by OR all the instantiations of the cluster, which corresponds to an
search rather than AND/OR, is shown below:            OR search over the variables of the cluster. A more advanced
                                                      method advocated by [Dechter and Fattah, 2001] is the use
 Algorithm VEC-OR(i)
                                                      of cycle cutset inside each cluster. We can improve the cycle
         M    X, D, F d    X ,...,X
  input :   =          ;  =(  1       n)              cutset scheme ﬁrst by using an AND/OR search space, and
                         X
  output: Updated belief for 1                        second by using Adaptive Caching bounded by i, rather than
1 if (context(Xn) ≤ i) then                           simple AND/OR Cutset in each cluster. We call the resulting
2    eliminate Xi;                                    method tree decomposition with conditioning (TDC(i)).
3    call VEC-OR(i) on reduced problem
4 else for each xn ∈ Dn do                            4   AOC(i) Compared to VEC(i)
5    assign Xn = xn;
6    call VEC-OR(i) on the conditioned subproblem     We will begin by following an example. Consider the graph-
                                                      ical model given in Figure 4a having binary variables, the
                                                              d     A, B, E, J, R, H, L, N, O, K, D, P , C, M
  When there are no conditioning variables, VEC becomes ordering 1 =(                                   -
                                                      ,F,G                        i
the well known Variable Elimination (VE) algorithm. In this ), and the space limitation =2. The pseudo tree cor-
case AOC  also becomes the usual AND/OR graph search  responding to this ordering is given in Figure 4b. The context
(AO), and it was shown [Mateescu and Dechter, 2005b] that: of each node is shown in square brackets.
                                                        If we apply VEC along d1 (eliminating from last to ﬁrst),
THEOREM  3 (VE and AO are identical) Given a graphical variables G, F and M can be eliminated. However, C can-
model with no determinism and a pseudo tree, VE traverses not be eliminated, because it would produce a function with
the full context minimal graph bottom-up by layers (breadth scope equal to its context, [ABEHLKDP ], violating the

                                                IJCAI-07
                                                  2349       R                    A [ ]       L [ ]                              C [ ]

         B    A             B [A]       N [L]                    K [ - C]           H [ - C]

                  J                                                [ - CK]            [ - CH]
                            E [AB]      O [LN]                   L                  A
       H

               E                                                 N [C - KL]         B [C - HA]
                            J [ABE]     K [LNO]
        L
                  D
            K                                                    O [CK - LN]    E [CH - AB] R [H - AB]
                       [ABJ]R D [EJ]    P [OK]
        N
               P                                                 P [C - KO]     J [CH - AE]
            O         [ABJR] H

                                                                                D [C - EJ]

      Figure 5: Components after conditioning on C                              M [ - CD] F [ - AR]

                                                                                        G [ - AF]
bound i =2.  VEC  switches to conditioning on C and all
the functions that remain to be processed are modiﬁed accord-    Figure 6: Pseudo tree for AOC(2)
ingly, by instantiating C. The primal graph has two connected
components now, shown in Figure 5. Notice that the pseudo
trees are based on this new graph, and their shape changes Algorithm VEC-AO(i)
from the original pseudo tree.                          ...
  Continuing with the ordering, P and D can be eliminated 6 call VEC-AO(i) on each connected
(one variable from each component), but then K cannot be component  of conditioned subproblem separately;
eliminated. After conditioning on K, variables O, N and L
can be eliminated (all from the same component), then H is Let’s look at one more condition that needs to be satisﬁed
conditioned (from the other component) and the rest of the for the two algorithms to be identical. If we change the order-
                                                            d    A, B, E, J, R, ,L,N,O,    ,D,P,F,G,
variables are eliminated. To highlight the conditioning set, ing to 3 =(      H          K            C-
                                                      ,M),(F  and G are eliminated after conditioning on C), then
we will box its variables when writing the ordering, d1 =(A-
,B,E,J,R,  H ,L,N,O,  K ,D,P, C ,M,F,G).              the pseudo tree is the same as before, and the context minimal
  If we take the conditioning set [HKC] in the order im- graph for AOC is still the one shown in Figure 7. However,
posed on it by d , reverse it and put it at the beginning of the VEC-AO would require more effort, because the elimination
             1                                          G     F
ordering d1, then we obtain:                          of   and  is done twice now (once for each instantiation of
                                                      C                                  d
                                            
       ), rather than once as was for ordering 1. This shortcom-
                                                    ing can be eliminated by deﬁning a pseudo tree based version
d2 =   ,  ,   , A,B,E,J,R ,L,N,O   ,D,P   ,M,F,G
      C  K  H            H
                                 K
                                        C             for VEC, rather than one based on an ordering. The ﬁnal
                                                      algorithm, VEC(i) is given below (where NG(Xi) is the set
where the indexed squared brackets together with the under- of neighbors of Xi in the graph G). Note that the guiding
lines represent subproblems that need to be solved multiple pseudo tree is regenerated after each conditioning.
times, for each instantiation of the index variable.
                                                       Algorithm VEC(i)
  So we started with d and bound i =2, then we iden-
                    1                                        M    X, D, F G   X,E   d   X  ,...,X  i
tiﬁed the corresponding conditioning set [HKC] for VEC, input : =         ;  =(     ); =(   1     n);
                                                                             X
and from this we arrived at d . We are now going to use d output: Updated belief for 1
                        2                        2       T   T  G, d  // create elimination tree
to build the pseudo tree that guides AOC(2), given in Figure Let = ( )                                 ;
                                                           T
6. The outer box corresponds to the conditioning of C.The while not empty do
                                                            ∃X        T  ∧ |N  X  |≤i               X
inner boxes correspond to conditioning on K and H, respec- if (( i leaf in ) ( G( i)  )) then eliminate i
                                                                 X          T
tively. The context of each node is given in square brackets, else pick i leaf from ;
                                                           for each xi ∈ Di do
and the 2-context is on the right side of the dash. For exam-       X    x
ple, context(J)=[CH-AE],and2-context(J)=[AE].                 assign  i =  i;
The context minimal graph corresponding to the execution of   call VEC(i) on each connected component of
AOC(2) isshowninFigure7.                                      conditioned subproblem
                                                           break;
  We can follow the execution of both AOC and VEC along
this context minimal graph. After conditioning on C, VEC Based on the previous example, we can prove:
solves two subproblems (one for each value of C), which are
                                                      THEOREM   4 (AOC(i) simulates VEC(i)) Given a graphical
the ones shown on the large rectangles. The vanilla version M   X, D, F
VEC-OR   is less efﬁcient than AOC, because it uses an OR model =        with no determinism and an execution
search over the cutset variables, rather than AND/OR. In our of VEC(i), there exists a pseudo tree that guides an execution
example, the subproblem on A, B, E, J, R would be solved of AOC(i) that traverses the same context minimal graph.
eight times by VEC-OR, once for each instantiation of C, K Proof: The pseudo tree of AOC(i) is obtained by reversing
and H, rather than four times. It is now easy to make the ﬁrst the conditioning set of VEC(i) and placing it at the beginning
improvement to VEC, so that it uses an AND/OR search over of the ordering. The proof is by induction on the number of
the conditioning variables, an algorithm we call VEC-AO(i), conditioning variables, by comparing the corresponding con-
by changing line 6 of VEC-OR to:                      texts of each variable.

                                                IJCAI-07
                                                  2350