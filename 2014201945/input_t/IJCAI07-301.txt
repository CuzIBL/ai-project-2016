   Automatic Synthesis of New Behaviors from a Library of Available Behaviors

                  Giuseppe De Giacomo                            Sebastian Sardina
        Dipartimento di Informatica e Sistemistica        Department of Computer Science
            Universit`a di Roma “La Sapienza”                     RMIT University
                        Roma, Italy                             Melbourne, Australia
           degiacomo@dis.uniroma1.it                      ssardina@cs.rmit.edu.au

                    Abstract                          the devices in question: after the arm is used to paint a block,
                                                      the central system will come to know whether such arm ran
    We consider the problem of synthesizing a fully
                                                      out of paint or not (maybe via a sensor light). Finally, the cen-
    controllable target behavior from a set of available
                                                      tral system is also (partially) knowledgeable about the shared
    partially controllable behaviors that are to execute
                                                      environment, in which all the components ought to execute.
    within a shared partially predictable, but fully ob-
                                                      As with the devices, the system possesses a nondeterminis-
    servable, environment. Behaviors are represented
                                                      tic model of the real environment and has full observability
    with a sort of nondeterministic transition systems,
                                                      on it too. The question then is: can the central system (al-
    whose transitions are conditioned on the current
                                                      ways) guarantee a speciﬁc deterministic overall behavior by
    state of the environment, also represented as a non-
                                                      (partially) controlling the available devices or components in
    deterministic ﬁnite transition system. On the other
                                                      a step-by-step manner, that is, by instructing them on which
    hand, the target behavior is assumed to be fully
                                                      action to execute next and observing, afterwards, the outcome
    deterministic and stands for the behavior that the
                                                      in the device used as well as in the environment?
    system as a whole needs to guarantee. We for-
    mally deﬁne the problem within an abstract frame-   It is not hard to see that the above setting can be recast
                                                      in a variety of forms. In the context of agent-oriented pro-
    work, characterize its computational complexity,
                                                               [    ]
    and propose a solution by appealing to satisﬁability gramming 6; 4 , an intelligent agent may control the exe-
    in Propositional Dynamic Logic, which is indeed   cution of a set of predeﬁned nondeterministic agent plans in
                                                      order to realize a desired deterministic plan-intention, which
    optimal with respect to computational complexity.
                                                                                             [    ]
    We claim that this problem, while novel to the    in turn, may have been obtained via planning 13; 8 . Simi-
                                                                                          [ ]
    best of our knowledge, can be instantiated to mul- larly, when it comes to plan coordination 9 , one can think
                                                      of coordinating or merging approximate models of multiple
    tiple speciﬁc settings in different contexts and can
    thus be linked to different research areas of AI, in- agents’ plans into a global fully deterministic multi-agent
                                                                                                   [
    cluding agent-oriented programming and cognitive  plan. Also, in the context of web-service composition 12; 1;
                                                      3],1 existing web services may be composed on the Internet
    robotics, control, multi-agent coordination, plan in-
    tegration, and automatic web-service composition. so as to implement a new complex web service. In all these
                                                      cases, the challenge is to automatically synthesize a fully con-
1  Introduction                                       trollable module from a set of partially controllable existing
Imagine an intelligent system built from a variety of different modules executing in a partially predictable environment.
components or devices operating (that is, performing actions) Under this setting, the technical contributions of this paper
on the same shared environment. For example, consider the are threefold. First, we formally deﬁne the problem within an
case of a blocks world scenario in which different kind or ver- abstract framework. Second, we devise a formal technique to
sions of robotic arms can move, paint, clean, dispose blocks, perform automatic synthesis of the fully controllable module.
and so on. Next, imagine that the central system possesses We show that the technique proposed is sound, complete, and
some information about the logic of these components or terminating. Lastly, we characterize the computational com-
devices—e.g., a particular arm type can paint or clean a block plexity of the problem and show that the proposed technique
after picking it up, but another type of arm is only capable of is optimal with respect to computational complexity.
painting blocks. However, the knowledge about these devices
is partial in that their internal logic may potentially expose 2 The setting
nondeterministic features. For instance, the system may have Let us start by deﬁning the synthesis problem [15] that is the
no information regarding the use of paint in a painting arm, subject of our research. To that end, we develop an abstract
and thus, it is always unable to predict whether the arm will framework based on (sort of) ﬁnite state transition systems.
run out of paint after a painting action. If it does, then the arm
cannot be used to paint again until it is recharged. Nonethe- 1In particular, [3] can be seen as a simpler variant of the setting
less, the central system has full observability on the state of studied here, with no environment and deterministic behaviors.

                                                 IJCAI07
                                                  1866Environment  We assume to have a shared observable en-  We say that a behavior B =(S, s0,G,δB,F), over the en-
vironment, which provides an abstract account of the observ- vironment E,isdeterministic if there is no environment state e
able effect and preconditions of actions. In giving such an of E for which there exist two distinct transitions (s, g1,a,s1)
account, we take into consideration that, in general, we have and (s, g2,a,s2) in δB such that g1(e)=g2(e). Notice that
incomplete information about the actual effects and precondi- given a state in a deterministic behavior and a legal action
tions of actions. Thus, we allow the observable environment in that state, we always know exactly which is the next state
to be nondeterministic in general. In that way, the incomplete of the behavior. In other words, deterministic behaviors are
information on the actual world shows up as nondeterminism fully controllable through the selection of the action to per-
in our formalization.                                 form next, while this is not the case for nondeterministic ones.
  Formally, an environment E =(A,E,e0,δE ) is character-
ized by the following ﬁve entities:                   Runs and traces  Given a behavior B =(S, s0,G,δ,F)
  •Ais a ﬁnite set of shared actions;                 and an environment E  =(A,E,e0,δE   ),wedeﬁnethe
  •                                                   runs of B on E as, possibly inﬁnite, alternating sequences
    E is a ﬁnite set of possible environment states;                           0  0  1  1  1 2
  •   ∈                                               of the following form:  (s ,e )a (s ,e )a ···,where
    e0  E  is the initial state of the environment;    0             0
                                                      s   =  s0 and e  =   e0, and for every i we have that
  • δE ⊆ E ×A×E    is the transition relation among states: i i i+1 i+1 i+1
                                                     (s ,e )a  (s  ,e   ) is such that:
    δE (e, a, e ) holds when action a performed in state e may
                                                                               i i+1  i+1
    lead the environment to a successor state e .       • there exists a transition (e ,a ,e ) ∈ δE ;and
                                                        •                     ( i i+1  i+1  i+1) ∈
  Note that our notion of the environment shares a lot of sim- there exists a transition s ,g ,a ,s δB,such
                                                               i+1( )=true
ilarities with the so-called “transition system” in action lan- that g ei   .
guages [5]. Indeed, one can think of using that kind of for- Moreover if the run is ﬁnite, that is, it is of the form
malism to compactly represent the environment in our setting. (s0,e0)a1 ···a(s,e),thens ∈ F .
                                                        Apart from runs, we are also interested in traces gener-
                                                      ated by the behavior. A trace is a sequence of pairs (g,a),
Behavior  A behavior is essentially a program for an agent    ∈              B       ∈A
or the logic of some available device or component. Such a where g G is a guard of and a is an action, of the
                                                      form t =(g1,a1) · (g2,a2) ··· such that there exists a run
program however leaves the selection of the action to perform ( 0 0) 1( 1 1) 2 ···         i(   )=true
next to the agent itself. More precisely, at each step the pro- s ,e a s ,e a , as above, where g ei−1
                                                      for all i. If the trace t =(g1,a1) ···(g,a) is ﬁnite, then
gram presents to the agent a choice of available actions; the             ( 0 0) 1 ··· (  )      ∈
agent selects one of them; the action is executed; and so on. there exists a ﬁnite run s ,e a a s ,e with s F .
  Obviously, behaviors are not intended to be executed on The traces of the deterministic behaviors are of particular
their own, but they are executed in the environment (cf. interest: any initial fragment of a trace leads to a single state
above). Hence, we equip them with the ability of testing con- in the behavior. In a sense, the deterministic behavior itself
ditions (i.e., guards) on the environment when needed. can be seen as a speciﬁcation of a set of traces.
  Formally, a behavior B =(S, s0,G,δB,F) over an envi-
ronment E, is a characterized by the following entities: The system A system S =(B1,...,Bn, E) is formed by
                                                                              E
  • S is a ﬁnite set of behavior states;              an observable environment  and n predeﬁned nondeter-
                                                      ministic behaviors Bi, called the available behaviors.A
  • s0 ∈ S is the single initial state of the behavior;                           (           )
  •                                               :   system conﬁguration is a tuple s1,...,sn,e denoting a
    G is a set of guards, which are boolean functions g snapshot of the system: behavior Bi is in state si and the
    E →{true,  false},whereE  is the set of the environ-         E
                E                                     environment  is in state e. We assume that the system has a
    ment states of ;                                  speciﬁc component, called the scheduler, that is able to acti-
  •    ⊆   ×   ×A×
    δB   S   G       S is the behavior transition relation, vate, stop, and resume the behaviors at each point in time.
    where A is the set of actions of E—we call the G ×A
    components of such tuples, the label of the transition;
                                                      The problem   The problem we are interested in is the fol-
  • ﬁnally, F ⊆ S is the set of ﬁnal states of the behavior,
                                                      lowing: given a system S =(B1,...,Bn, E) and a determin-
    that is, the states in which the behavior may stop execut-
                                                      istic behavior, called the target behavior B0 over E, synthe-
    ing, but does not necessarily have to.
                                                      size a program for the scheduler such that the target behavior
Observe that, in general, behaviors are nondeterministic in is realized by suitably scheduling the available behaviors.
the sense that they may allow more than one transition with In order to make this precise, we need to clarify which are
the same action a and compatible guards evaluating to the the basic capabilities of the scheduler. The scheduler has the
same truth value.2 As a result, the central system, when mak- ability of activating-resuming one3 of the many available be-
ing its choice of which action to execute next, cannot be cer- haviors by instructing it to execute an action among those that
tain of which choices it will have later on, since that depends are possible in its current state (taking into account the envi-
on what transition is actually executed. In other words, non- ronment). Also, the scheduler has the ability of keeping track
deterministic behaviors are only partially controllable. (at runtime) of the current state of each available behavior.

  2Note that this kind of nondeterminism is of a devilish nature, so 3For simplicity, we assume that the scheduler activates/resumes
as to capture the idea that through the choice of actions alone one only one behavior at each step, though our approach can be extended
cannot fully control the behavior.                    to the case where more available services are activated at each step.

                                                 IJCAI07
                                                  1867                                                                                     
Technically, such a capability is called full observability on • h ∈Ht,P ,where(s1,...,sn,e ) is the last system
the states of the available behaviors. Although other choices conﬁguration in h;
are possible [1], full observability is the natural choice in this • a+1 is an action such that P (h, a+1)=i, with i=
context, since the available behaviors are already suitable ab- u, that is, the scheduler states that action a+1 at
stractions for the actual behaviors, and hence there is no rea- system history h should be executed in behavior Bi;
                                                                    +1               
son to make its states partially unobservable: if details have • (si ,g,a ,si) ∈ δi with g(e )=true,thatis,
                                                                                                      
to be hidden, this can be done directly within the abstract be- behavior Bi may evolve from its current state si to
havior exposed, possibly making use of nondeterminism.                                              
                                                              state si w.r.t. the (current) environment state e ;
  We are now   ready to formally deﬁne our synthesis        • (   +1  +1) ∈
                             S   =(B        B   E)             e ,a   ,e      δE , that is, the environment may
problem.  Let the system  be           1,..., n,  ,           evolve from its current state e to state e+1;
where E =(A,E,e0,δE   ) is the environment and Bi =            +1         +1     
                                                            • si   =  si and sj =  sj,forj = i, that is, only
( i i0  i  i  i) are the available behaviors. Let the tar-
 S ,s ,G ,δ ,F                                                behavior Bi is allowed to perform a step.
get behavior be B0 =(S0,s00,δ0,F0).
  A system history is an alternating sequence of system con- Moreover, as before, if a trace is ﬁnite and ends after
                               =(  0     0  0) · 1 ·  m  actions, and all along all its guards are satisﬁed, we
ﬁgurations and actions of the form h s1,...,sn,e a                            m
  1     1  1      −1      −1                   have that all histories in Ht,P end with all behaviors in a
(s ,...,sn,e ) ··· (s ,...,sn ,e ) · a · (s ,...,sn,e )
  1               1                    1              ﬁnal state. Finally, we say that a scheduler program
such that the following constraints hold:                                                              P
                                                      realizes the target behavior B0 if it realizes all its traces.4
     0
  • si = si0 for i ∈{1,...,n}, that is, each behavior starts In order to understand the above deﬁnitions, let us observe
    in its initial state;                             that, intuitively, the scheduler program realizes a trace if, as
     0
  • e =  e0, that is, the environment starts in its initial state; long as the guards in the trace are satisﬁed, it can choose at
  • at each step 0 ≤ k ≤ , there exists an i ∈{1,...,n} every step an available behavior to perform the requested ac-
              k  k+1  k+1  k+1                        tion. If at a certain point a guard in the trace is not satisﬁed in
    such that (si ,gi ,a ,si  ) ∈ δi and for all j = i,
     k+1    k                                         the current environment state, then we may consider the trace
    sj   = sj , that is, at each step in the history, only one of
                       B                              ﬁnished (even if it is not in a ﬁnal state). As before, however,
    the behaviors, namely i, has made a (legal) transition because the available behaviors nondeterministically choose
    (according to its transition relation δi), while the other what transition to actually perform when executing an action,
    ones have remained still;                         the scheduler program must be such that the scheduler will
  •           0 ≤   ≤              ( k k+1  k+1) ∈
    at each step  k   ,wehavethat e ,a    ,e         always be able to continue with the execution of the next ac-
    δE , that is, the environment has also made a legal transi- tion no matter how both the activated behavior and the envi-
    tion according to its transition relation.        ronment evolve after each step. Finally, the last requirement
  A scheduler program is a function P : H×A     →     makes sure that all available behaviors are left in a ﬁnal state
{1,...,n,u} that, given a history h ∈H(where H is the set when a ﬁnite trace reaches its end with all guards satisﬁed.
of all system histories as deﬁned above) and an action a ∈A Observe that, in general, a scheduler program could require
to perform, returns the behavior (actually the behavior index) inﬁnite states. However, we will show later that if a scheduler
that is scheduled to perform the action. Observe that such a that realizes the target behavior does exist, then there exists
function may also return a special value u, for “undeﬁned.” one with a ﬁnite number states. Note also that the scheduler
This is a technical convenience to make P a total function re- has to observe the states of the available behaviors in order
turning values even for histories that are not of interest, or for to decide which behavior to select next (for a given action
actions that no behavior can perform after a given history. requested by the target behavior). This makes these scheduler
  Next, we deﬁne when a scheduler program is a composi- programs akin to an advanced form of conditional plans [16].
tion that realizes the target behavior—a solution to the prob-
lem. First, we point out that, because the target behavior is 3 An example
a deterministic transition system, its behavior is completely We now come back to our original blocks world example in
characterized by the set of its traces, that is, by the set of in- order to illustrate the abstract framework developed in the
ﬁnite sequences of actions that are faithful to its transitions, previous section. The complete scenario is depicted in Figure
and of ﬁnite sequences that in addition lead to a ﬁnal state. 1. The aim of the whole system is to paint existing blocks.
                 =(  1  1) · ( 2 2) ···
  So, given a trace t g ,a  g ,a     of the target be- Blocks can be processed by cleaning and painting them. Be-
havior, we say that a scheduler program P realizes the trace fore processing a block, though, it is necessary to prepare it,
                                      ∈H     H
t iff for all  and for all system histories h t,P ( t,P for example, by moving it to a special processing location.
                        +1  
is deﬁned below) such that g (eh)=true in the last en- Furthermore, only after a block has been disposed, can an-
                                     +1
vironment state eh of h,wehavethatP (h, a ) = u and  other block be prepared for processing. Finally, cleaning and
  +1                                                painting may, sometimes, require resources, namely, water
Ht,P is nonempty, where the set of system histories Ht,P is
inductively deﬁned as follows:                        and paint, respectively: we assume there are two tanks, for
                                                      water and paint, respectively, and that both are recharged si-
      0
  •Ht,P  = {(s10,...,sn0,e0)};                        multaneously by pressing a recharging button.
  •H+1              +1
      t,P is the set of  -length system histories of the 4Recall that because the target behavior is deterministic, it can
            +1   +1      +1  +1
    form h · a  · (s1 ,...,sn ,e   ) such that:       be seen as a speciﬁcation of a, possibly inﬁnite, set of traces.

                                                 IJCAI07
                                                  1868 Arm A  dispose      paint clean Arm B       clean    4   The synthesis technique
      e2 :clean
   a1        a2      b1       b2      b3        b4    We are now ready to investigate how to check for the exis-
                       prepare  paint   prepare
      recharge                                        tence of a scheduler program that realizes the target behavior,
                           recharge
 dispose                                              and even more, how to actually compute it. We start with
   Environment E         Target T                     some preliminary considerations on the computational com-
     dispose                      prepare
                  paint   t1                 2        plexity that we should expect. The result by Muscholl and
  e1         e2                              t
     prepare      clean              paint            Walukiewicz in [14], which can be easily rephrased in our
                           recharge
      recharge                                clean   framework, gives us an EXPTIME lowerbound.
   recharge    clean
     prepare                dispose   paint             More precisely, let us call empty environment any envi-
  e4         e3   paint   t5       t4        t3       ronment of the form E =(A,E,eo,δE ),whereE  =  {eo}
      dispose     clean                               (i.e., the (observable) environment has a single state), and
                                                      δE = {(e0,a,e0) | a ∈A}, (i.e., there are no preconditions
       Figure 1: A painting blocks world scenario.    on actions, nor actions have any effect on the environment).
                                                      Also, let us call deterministic guardless behavior any behav-
                                                      ioroftheformB   =(S, s0, {gtrue},δB,F),wheregtrue is
  Now, the desired target behavior T that we want to achieve
                                                      the constant function returning always true,andδB is func-
is as follows. First, a block is prepared for processing. Then, tional, i.e., for each state s ∈Sand action a ∈A,thereisat
the block in question can either be painted right away or                         
                                                      most one state s such that (s, a, s ) ∈ δB. Then, Muscholl
painted after being cleaned—some (dirty) blocks may need and Walukiewicz’s result can be stated as follows.
to be washed before being painted. Note that the decision of
whether a block needs to be cleaned lays outside of our frame- Theorem 4.1 (Muscholl & Walukiewicz 2005) Checking
work. After a block has been painted, it is disposed. Finally, the existence of a scheduler program that realizes a target
the recharging button is pushed. See that this target behavior deterministic guardless behavior in a system consisting of
is “conservative,” in that it always recharges the tanks after a an empty environment and a set of available deterministic
block has been processed.                             guardless behaviors is EXPTIME-hard.5
  One can think of the above target behavior as the arm that Hence, checking the existence of a scheduler program in
one would like to have. However, such arm does not exist our general framework is at least exponential time. Next, we
in reality. Instead, there are only two different arms available. show that the problem is actually EXPTIME-complete, by
The ﬁrst arm A, a cleaning-disposing arm, is able to clean and resorting to a reduction to satisﬁability in Propositional Dy-
dispose blocks. The second arm B is capable of preparing, namic Logic (PDL). Moreover, such a reduction can be ex-
cleaning, and painting blocks. Both arms are able to press the ploited to generate the actual scheduler program which will
recharge button to reﬁll the tanks.                   be ﬁnite. In doing this, we extend the approach in [3],origi-
  So, the system is composed of the environment E and the nally developed in the context of service composition to deal
two arms A and B shown in Figure 1. Let us now note a few with empty environments and deterministic guardless behav-
interesting points. First, the environment E provides the (gen- iors. Dealing with a non-trivial environment, and especially
eral) preconditions of actions in the domain (e.g., dispose dealing with the nondeterminism of the available behaviors,
can only be executed after a prepare action). The environ- requires solving same subtle points that reﬂects the sophisti-
ment also includes some information about the water tank: cated notion of scheduler program that is needed for that.
in e1 and e2, the water tank is not empty; and in e3 and e4,
the water tank is indeed empty. Notice that it is still conceiv- 4.1 Propositional Dynamic Logic
able to clean a block in state e3, by some method that does Propositional Dynamic Logic (PDL) is a modal logic specif-
not rely on water. However, because arm A does use water ically developed for reasoning about computer programs [7].
to clean blocks, it can only do it when the environment is in Syntactically, PDL formulas are built from a set P of atomic
fact in state e2. Second, we observe that whereas only the propositions and a set Σ of atomic actions:
second arm can prepare a block, only the ﬁrst arm can dis-
                                                                                                   
pose a block. Lastly, the most interesting remark comes from φ −→ P |¬φ  | φ1 ∧ φ2 | φ1 ∨ φ2 | φ → φ |
arm B’s internal logic, for which the system only has partial     r
φ | [r]φ | true | false,
                                                                                      ∗
information. After painting a block, arm B may evolve non- r −→  a | r1 ∪ r2 | r1; r2 | r | φ?,
deterministically to two different states: b1 or b3. Intuitively,
                                                      where P is an atomic proposition in P, r is a regular ex-
the arm evolves to state b3 as soon as the paint tank becomes
                                                      pression over the set of actions in Σ,anda is an atomic ac-
empty; otherwise the arm evolves to state b1. Once the arm
                                                      tion in Σ. That is, PDL formulas are composed from atomic
runs out of paint, it can only clean blocks until the tanks are
                                                      propositions by applying arbitrary propositional connectives,
eventually recharged. Notice also that, unlike arm A,armB
                                                      and modal operators  r
φ and [r]φ.Formula r
φ means that
does not require the environment to be in state e2 to clean a
                                                      there exists an execution of (i.e., a sequence of actions con-
block, as its cleaning mechanism does not rely on water.                     r
                                                      forming to the regular expression r) reaching a state where φ
  We aim to automatically synthesize a scheduler program
so as to realize the target behavior (T ) by making use of the 5In fact, Muscholl and Walukiewicz show EXPTIME-hardness
available behaviors (arms A and B) and considering the en- in the setting of service composition studied in [2; 3],whereall
vironment (E). See the next section.                  available services are deterministic [14].

                                                 IJCAI07
                                                  1869holds; and formula [r]φ is intended to mean that all terminat- each s of Bi, and each a ∈A. These assertions encode
ing executions of r reach a state where φ holds.          that if the current environment state is e and the available
  A PDL formula φ is satisﬁable if there exists a model for behavior Bi is in state s and is selected for the execution
φ—an interpretation where φ is true. Checking satisﬁability of an action a (i.e., execia is true), then for each possible
of a PDL formula is EXPTIME-complete [7].                 a-transition of Bi with its guard true in e and of E,we
  PDL enjoys two properties that are of particular interest have a possible a-successor in the models of Φ;
for us [7]. The ﬁrst is the tree model property, which says • s ∧ e ∧ execia → [a]false, for each environment state
                                                                                                    
that every model of a formula can be unwound to a, possi- e of E, and each state s of Bi such that for no g, s ,and
                                                                               
bly inﬁnite, tree-shaped model (considering domain elements e ,wehavethat(s, g, a, s ) ∈ δi with g(e)=true and
                                                                
as nodes and partial functions interpreting actions as edges). (e, a, e )∈ δE . This states that if the current environment
The second is the small model property, which says that every state is e and Bi, whose current state is s, is selected for
satisﬁable formula admits a ﬁnite model whose size (in par- the execution of a,buta cannot be executed by Bi in e,
ticular the number of domain elements) is at most exponential then there is no a-successor in the models of Φ;
in the size of the formula itself.                      • s ∧¬execia  →  [a]s, for each state s of Bi and each
                                                          action . This assertion encodes that if behavior Bi is
4.2  Reduction to PDL                                           a
                                                          in state s and is not selected for the execution of a,then
   S=(B      B   E)                E =(A          )
Let     1,..., n,  beasystem,where       ,E,e0,δE         if a is performed (by some other available behavior), Bi
is the environment and Bi =(Si,si0,Gi,δi,Fi) are the avail- does not change state.
able behaviors over E,andletB0 =(S0,s00,δ0,F0) be the
target behavior (over E as well). Then, we build a PDL for- In addition, we have the formula φadd, of general con-
mula Φ to check for satisﬁability as follows.         straints, obtained as the conjunction of:
                                                                                          
  As actions in Φ, we have the actions A in E.Asatomic  • s  →¬s   , for all pairs of states s, s of Bi,andfor
propositions, we have:6                                   i ∈{0, 1,,...,n}, stating that propositions represent-
                                                                            B
  • one atomic proposition e for each state e of E,which  ing different states of i are disjoint;
                                                        •   i ↔             ∈{0  1       }
    intuitively denotes that E is in state e;             F       s∈Fi s,fori    , ,,...,n , highlighting the
                                                                      B
  • one atomic proposition s for each state s of Bi,fori ∈ ﬁnal states of i;
    {0, 1,...,n}, denoting that Bi is in state s;       • undef  →  [a]undef , for each action a ∈ Σ, stating
                                                                                          undef
  • atomic propositions Fi,fori ∈{0, 1,...n}, denoting    that once a situation is reached where holds, then
                                                          undef
    that Bi is in a ﬁnal state;                                 holds also in all successor situations;
                                                        •¬undef   ∧  
true →            exec           ∈
  • atomic propositions execia,fori ∈{1,...n} and a ∈               a           i∈{1,...,n} ia, for each a
    A, denoting that a will be executed next by behavior Bi; A, denoting that, unless undef is true, if a is performed,
  • one atomic proposition undef denoting that we reached then at least one of the available behaviors must be se-
    a situation where the scheduler can be left undeﬁned. lected for the execution of a;
                                                        • exec   →¬exec                ∈{1       }   =
  Let us now build the formula Φ. For representing the tran-  ia         ja for each i, j  ,...,n , i  j,
                                                                    ∈A
sitions of the target behavior B0, we construct a formula φ0 and each a , stating that only one available behavior
as the conjunction of (for each s of B0 and e of E):      is selected for the execution of a;
                                                        •    →
  • s∧e → a
true∧[a]s, for each transition (s, g, a, s) ∈ F0   i∈{1,...,n} Fi, stating that when the target behav-
    δ0 such that g(e)=true, encoding that the target be-  ior is in a ﬁnal state, so are all the available behaviors.
    havior can do an a-transition, whose guard g is satisﬁed, Finally, we deﬁne Φ as
    by going from state s to state s;                                          
                                                  
  • s ∧ e → [a]undef , for each a such that for no g and s      Init ∧ [u](φ0 ∧      φi ∧ φadd),
                   
    we have (s, g, a, s ) ∈ δ0 with g(e)=true. This takes                    i∈{1,...,n}
    into account that the target behavior cannot perform an
                                                            Init          ∧    ∧   ∧···∧
    a-transition.                                     where     stands for e0 s00 s01    s0n, and represents
                                                      the initial state of the environment E and of all behaviors Bi
  For representing the transitions of each available behavior               u =(        )∗
                                                      (including the target), and  a∈Σ a , which acts as the
Bi, we construct a formula φi as the conjunction of:
                                                      master modality [7],isusedtoforceφ0∧       φi∧φadd
  •                                                                                      i∈{1,...,n}
    the formula                                     to be true in every point of the model. Note that u is the only
                                             
    s∧e∧execia→      ( a
(s ∧e ))∧[a](     (s ∧e )),  complex program that appears in the PDL formula Φ. We can
                (s,e)∈Δ           (s ,e)∈Δ        now state our main result.
                                                                               Φ
    where Δ={(s     ,e)  | (s, g, a, s ) ∈ δi,g(e)=   Theorem 4.2 The PDL formula  , constructed as above, is
                
    true, (e, a, e ) ∈ δE }, for each environment state e, satisﬁable iff there exists a scheduler program for the system
                                                      S =(B1,...,Bn, E) that realizes the target behavior B0.
  6In this paper, we are not concerned with compact representa-
tions of the states of the environment E and the behaviors Bi.How- Proof (sketch). “If ”: PDL has the tree-model property.
ever, we observe that if states are succinctly represented (e.g., in Hence, if Φ is satisﬁable then it has a model that is tree
binary format) then, in general, we can exploit such a representation shaped. Each node in this tree can be put in correspondence
in Φ to get a corresponding compact formula as well.  with a history, and from the truth value assignment of the

                                                 IJCAI07
                                                  1870