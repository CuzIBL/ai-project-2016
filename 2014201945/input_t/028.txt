                       Amalgams of Constraint Satisfaction Problems 

               Andrei A. Bulatov Eugeny S. Skvortsov 
    Oxford University Computing Laboratory Ural State University, Ekaterinburg, Russia 
                  Oxford, UK Skvortsov@dc.ru 
         andrei.bulatov@comlab.ox.ac.uk 


                     Abstract                          2000a], remains almost uninvestigated. The present paper fo•
                                                       cuses on this class of decomposition methods. 
    Many of standard practical techniques of solving     In many cases of interest we may restrict the form of al•
    constraint satisfaction problems use various de•   lowed constraints by specifying a constraint language, that is 
    composition methods to represent a problem as a    a set of allowed constraints. Every constraint is specified by a 
    combination of smaller ones. We study a gen•       relation, so, a constraint language is just a set of relations over 
    eral method of decomposing constraint satisfaction the set of values. One of the most natural ways to decompose 
    problems in which every constraint is represented  such a restricted CSP is to represent every its constraint as a 
    as a disjunction of two or more simpler constraints disjunction of two or more simpler constraints on, possibly, 
    defined, possibly, on smaller sets of values. We call smaller sets of values. We say that a constraint language, T, 
    a problem an amalgam if it can be decomposed in 
                                                       is the amalgam of T1, T2 if every constraint in T is the dis•
    this way. Some particular cases of this construc-
                                                       junction of a constraint from T1 and a constraint from T2. In 
    tion have been considered in [Cohen et a/., 1997; 
                                                       this case we call T1, T2 the components of T. 
    2000b; 2000al including amalgams of problems 
                                                         The main research direction in the study of amalgams is, 
    with disjoint sets of values, and amalgams of inde•
                                                       of course, developing efficient algorithms solving the corre•
    pendent problems. In this paper, we concentrate on 
                                                       sponding constraint satisfaction problem. However, as we 
    constraint classes determined by relational clones, 
                                                       shall see the complexity of the CSP arising from an amalgam 
    and study amalgams of such classes in the general 
                                                       is not determined automatically by the complexity of its com•
    case of arbitrary finite sets of values. We com•
                                                       ponents. Therefore, the first research problem we deal with is 
    pletely characterise amalgams of this form solv•
                                                       the tractability problem: under which conditions the problem 
    able in polynomial time and provide efficient algo•
                                                       arising from an amalgam is tractable. (A problem is called 
    rithms. 
                                                       tractable if it can be solved in polynomial time.) Then we 
                                                       tackle the algorithmic problem: design efficient algorithms 
                                                       for tractable amalgams. 
1 Introduction 
                                                         As is naturally expected, algorithms for amalgams tend to 
In the Constraint Satisfaction Problem (CSP) the aim is to use algorithms for their components, especially if ones are 
find an assignment to a set of variables subject specified con• already known. Unfortunately, in general, the connection be•
straints. CSP provides a generic approach to various com• tween constraint languages and their amalgam cannot be ex•
binatorial problems frequently appearing in artificial intelli• pressed by usual constraint techniques, and strongly depends 
gence and computer science, including the propositional sat• on properties of particular constraint languages. Thus, solu•
isfiability problem, in which the variables must be assigned tions to both research problems are expected to be nontrivial. 
Boolean values, graph-theoretical problems, scheduling prob• Amalgams have been introduced in [Cohen et al, 1997], 
lems, temporal and spatial reasoning, database theory, and though another name was used. In ICohen et a/., 2000a], 
many others.                                           amalgams were considered in the simplest case when the 
  The general CSP is NP-complete [Montanari, 19741. How• sets of values for languages T1, T2 are disjoint. In this case, 
ever, the time complexity of many practical problems can be for any amalgam, the corresponding problem is trivially re•
considerably decreased by representing a problem as a com• ducible to the problems over the components, that solves 
bination of smaller problems. Such decomposition methods both the algorithmic problem and the tractability problem: 
have been intensively studied and implemented in most of ex• an amalgam gives rise to a tractable problem if and only 
isting constraint solvers. Most of them deals with the hyper- its components do. Certain properties of interaction of con•
graph associated with a problem instance (see, e.g. [Gottlob straint languages may yield a reduction of an amalgam to its 
et al. , 2000; Dechter and Pearl, 1989; Freuder, 1990]), and components. In [Cohen et al, 1997] and later in [Cohen et 
to date are highly developed. Another possibility, decompo• al, 2000b], several such properties, so-called independence 
sition of constraints themselves [Cohen et al. , 1997; 2000b; of constraint languages, have been identified. A number of 


CONSTRAINTS                                                                                            197  previously unknown tractable constraint languages have been 
 represented as amalgams of very simple and well studied in­
 dependent constraint languages.                               Columns of the matrices represent tuples of the relations. 
   It has been shown in [Jeavons, 1998b] that the tractabil-
                                                               Then where QA U QB is a quasiorder. 
 ity of the constraint satisfaction problem arising from a con­
 straint language implies the tractability of the problem for the Example 3 ([Cohen et a/.,2000b1) Let Z be the set of all 
 relational clone generated by the language. Therefore, a rea­ integers, and Y the set of congruences of the form x = a 
 sonable strategy is to concentrate on relational clones rather (mod m) treated as unary relations. The Chinese Remainder 
 than arbitrary constraint languages. In this paper we solve   Theorem implies that Y is tractable. The amalgam con­
 the tractability and algorithmic problems for amalgams of re­ sists of expressions of the form x = a (mod ra) V x = b 
 lational clones. We completely characterise tractable amal­   (mod n), and by results of [Cohen et al, 2000b] is tractable. 
 gams and provide efficient algorithms in this case. The char­ For example, this means that we are able to recognised in 
 acterisation criteria is stated in terms of, first, properties of polynomial time the consistency of the system 
 components of an amalgam, and second, the tractability of 
                                                                           x1 = 1 (mod 4) V x1 = 0 (mod 3) 
 a certain constraint language on a 2-element set of values. 
                                                                           x  = 2 (mod 3) V x      = 2 (mod 5) 
 The latter language reflects the interaction of the components.            2                     2
 Thus, both the characterisation and the reducing algorithms               x3 = 5 (mod 7). 
 use Schaefer's Dichotomy Theorem for Boolean constraints      We are concerned with the following two problems. 
 [Schaefer, 1978]. 
   Throughout the paper we heavily use the algebraic tech­     Problem 1 (tractability problem) When is CSP 
 nique for CSP developed in [Jeavons, 1998b; Jeavons et a/.,   tractable? 
 1998].                                                        Problem 2 (algorithmic problem) Find a polynomial time 
                                                               algorithm for tractable CSP |. 
 2 Preliminaries                                               In fact, properties of the amalgam do not strongly depend nei­
 2.1 Basic Definitions                                         ther on properties of the original constraint languages nor on 
                                                               the way they interact. For example, if V\, T  contains no re­
 Let A be a finite set. The set of all n-tuples of elements of A                                         2
                                                               lations of the same arity then their amalgam is empty. We, 
 is denoted A . A subset of A  is called an n-ary relation on 
             n              n                                  therefore, should restrict the class of constraint languages to 
 A, and any set of finitary relations on A is called a constraint 
                                                               be studied. 
 language on A. 
 Definition 1 Let Y be a constraint language on a set A.       2.2 Relational Clones 
 CSP(r) is the combinatorial decision problem whose in-        For any problem in CSP(T), there may be some sets of 
stance is a triple V = (V; A; C) in which V is a set of vari­  variables whose possible values subject to certain constraints 
ables, and C is a set of constraints, that is pairs of the form which are not elements of Y. These constraints are said to be 

C = (s, Q) where s is a list of variables of length mC called  implicit and arise from interaction of constraints specified in 
the constraint scope, and Q Y is an rnc-ary relation, ccdled   the problem [Jeavons, 1998a]. 
the constraint relation. The question is whether there exists a  To describe implicit constraint relations we make use of 
solution to V, that is a mapping ψ: V —> A such that ψ(s) € Q  the natural correspondence between relations and predicates: 

for all (s, Q) C.                                              for an n-ary relation Q on a set A, the n-ary predicate Pe is 
                                                               true on a tuple a if and only if a Q. Usually, we will not 
Example 1 An instance of GRAPH Q-COLORABILITY con­
                                                               distinguish a relation and the corresponding predicate, and 
sists of a graph G. The question is whether the vertices of 
                                                               freely use both terminology. An existential first order formula 
G can be labelled with q colours so that adjacent vertices are 
                                                                                                     is said to be primitive 
assigned different colours. 
                                                               positive (pp-) if its quantifier-free part $ is a conjunction of 
   This problem corresponds to where A is a q-
                                                               atomic formulas. 
element set (of colours) and is 
the disequality relation on A.                                 Definition 3 A relation is an implicit relation of a constraint 
                                                               language Y on a set A if it can be expressed by a pp-formula 
A constraint language T is said to be tractable [NP-complete]  involving relations from Y and the equality relation =A. 
if the problem CSP(r) is tractable [NP-complete].                A constraint language Y is said to be a relational clone if it 
   Now we introduce the central notion of the paper.           contains all its implicit constraint relations. 
Definition 2 Let TA, TB Be constraint languages on sets A,       The relational clone (Y) of all implicit constraint relations 
B respectively. The amalgam of TA, TB is defined to be the     of T is called the relational clone generated by Y. 
constraint language on A U B                                   Example 4 The intersection of relations of the same arity, 
            = are and Cartesian product are expressible via pp-formulas: 
                     of the same arity]. 
Example 2 Let A = {a,c,d},B = {b,c,d}, and TA = 
{QA}, TB = {QB} where QA,QB are partial orders: 


198                                                                                                       CONSTRAINTS The notion of a relational clone considerably simplifies the   Theorem 2 (Schaefer, [Schaefer, 19781) A constraint lan•
analysis of constraint satisfaction problems in view of the    guage T on a 2-element set is tractable if and only if Pol T 
following result that links the complexity of a constraint lan• contains one of the operations listed in Proposition I. Other•
guage and the relational clone it generates.                   wise T is NP-complete. 
Theorem 1 ([Jeavons, 1998b]) Let T be a constraint lan•
guage on a finite set, and T (T) finite. Then CSP(T')          3 Tractable amalgams 
is polynomial time reducible to CSP(T). 
                                                               In this section we give a complete solution of Problems 1,2 
This result motivates restricting Problems 1,2 to the class of for amalgams of relational clones. Throughout the section 
relational clones.                                             A,B are finite sets, are relational 
Example 3 (continuation) Reconsider the constraint lan•        clones on A, B respectively. First, we reduce Problems 1,2 to 
guage T from Example 3. Results of [Cohen et al, 2000b]        the case when = 1 and prove NP-completeness results in 
implies that is also tractable. This larger amal•              this case. Then we concentrate on tractable cases and present 
gam includes, e.g., constraints of the form (mod m)V           a solving algorithm for these cases. 
y = b (mod n), which are not members of 
                                                               3.1 The result 
2.3 Invariance Properties of Constraints                       We assume that contain empty relations of any arity, 
Another advantage of considering relational clones is that     because otherwise contains a constant oper•
they often admit a concise description in terms of algebraic 
                                                               ation, and therefore is tractable by Proposition 1. 
invariance properties [Poschel and Kaluznin, 1979; Jeavons, 
                                                                 The case when D is empty was completely investigated in 
 1998b]. An (m-ary) operation / on a set A preserves an n-ary 
                                                               [Cohen et al, 2000a]. 
relation Q on A (or Q is invariant under /, or / is a polymor-
phism of Q) if for any                                         Proposition2 ([Cohen et al., 2000a]) /f D = then 

Q the tuple belongs CSP is polynomial time reducible to CSP(RA), 
to Q. For a given set of operations, C, the set of all relations 
                                                               CSP(RB). Hence, is tractable if and only if both 
invariant under every operation from C is denoted by Inv C. 
Conversely, for a set of relations, T, the set of all operations RA , RB are tractable. 
preserving every relation from T is denoted by Pol T. Ev•      So, we assume D to be non-empty. 
ery relational clone can be represented in the form Inv C for 
a certain set of operations C [Poschel and Kaluznin, 1979].    Proposition 3 ([Jeavons et al, 1997; Jeavons, 1998hl) /f / 
Therefore, in view of Theorem 1 the complexity of a finite     is a unary polymorphism of a constraint language T then the 
constraint language depends only on its polymorphisms. 
   We need operations of some particular types that give rise  mial time equivalent to CSP(T). 
to tractable problem classes. 
                                                               By we denote the restriction of a (unary) operation / onto 
Definition 4 Let A be a finite set. An operation f on A is 
called                                                         a set C. The following statement is straightforward. 
                                                               Proposition 4 (J) If f is a unary polymorphism of 
                                                               then are polymorphisms of respectively. 

                                                                                        is polynomial time equivalent to 

   • a majority operation if it is ternary, and f(x,x,y) =     (3) If the amalgam is tractable then there is a poly•
                                                               morphism f of such that Otherwise, 
   • affine if                                                                 complete. 
     where +, — are the operations of an Abelian group.          Therefore, we may restrict ourselves to the case 
Proposition 1 ([Jeavons et al, 1998; 1997]) // T is a con•     let In this case we need more notation and termi•
straint language on a finite set, and Pol T contains an op•    nology. 
eration of one of the following types: constant, semilattice,  Definition 5 The relational clone to be 
affine, majority; then Y is tractable.                         monolithic ifcon-
The complexity of constraint languages on a 2-elemcnt set is   tains no unary relation E with 
completely characterised in [Schaefer, 1978]. This outstand•   Let denote the relational clone generated by the set 
ing result is known as Schaefer's Dichotomy Theorem. By 
                                                                                      where c = (c,..., c)  . Obviously, 
making use of Proposition 1 the algebraic version of Schae-                                                 2
                                                                                         is defined analogously. 
fer's theorem can be derived [Jeavons et al, 1997]. 

   'Note that in some earlier papers [Jeavons, 1998b; Jeavons et al, 2We do not specify the length of the tuple c = (c,... ,c), be•
1998] the term AC1 operation is used.                          cause it is always clear from the context. 


CONSTRAINTS                                                                                                           199    In the following definition we introduce an auxiliary re•
 lational clone on the 2-element set Z = {A,B} that de•
 scribes interaction of the components of the amalgam. For 
 an-(n-ary) relation 
                                     We also define the cor•
responding predicate which is true if and 
only if The variable y will be called 
distinguished. 

Definition 6 The meta-clone is defined to be the set of all    3.2 The Split Problem 
relations on Z expressible through a pp-formula of the form 
                                                               We transform a problem over an amalgam so that the interac•
                                                               tion of its components becomes more transparent. 
where is a conjunction of predicates and 

y1 , • • •,ym ,Z1• • • ,zk are the distinguished variables. 
   The meta-clone is defined in a similar way. 
Lemma 1 Meta-clones are relational clones on Z. 
We now in a position to state the main result of this paper. 
Theorem 3 Let Then 
   1. if is monolithic then is tractable if and 
only if is tractable; 

   2. if both are not monolithic then RA & RB is 
tractable if and only if are tractable. 
It is not hard to see thatThere•
fore, by Theorem 1, is tractable whenever 
is tractable. The converse inclusion follows from Lemma 2. 
Then, it can be proved by straightforward calculation that 
                is polynomial time reducible to 
RB). Finally, in Sections 3.2,3.3, we show how to reduce 

Lemma 2 If RA is monolithic then is poly•
nomial time reducible to 
Proof: Let RA be monolithic. We set out the proof in several 
claims. 
CLAIM 1. For any a A - {c}, there is a unary polymor•
phismsuch that 

__ Let ; be the list of all unary polymorphisms of 
RA , and E = Sup•
pose that c E. Since RA is monolithic, E RA-

Therefore, there is a polymorphism h(x1,..., xn) such that 
h(b ... ,b  ) E for some b      E, say, b     = a   . The 
   1       n                   i             i     ji         Lemma 4 V is equivalent to V. 
operation is also a polymor•
phism of RA [Poschel and KaluZnin, 1979], and h'(a) E, 
a contradiction. 
CLAIM 2. RA is invariant under the constant operation c. 
  Sincefor any a A - {c}, we have 
            This implies for any 
           Then choosing an element 
we get Continuing the process 
we eventually obtain an operation f(x) = 
                                                              3.3 Solving the Split Problem 
such that is the required constant 
operation. 
Claim 2 implies that if is non-empty then 
CLAIM 3. The operation g on AuB where 
and is a polymorphism of 


200                                                                                                      CONSTRAINTS CONSTRAINTS                                                                                                          201 