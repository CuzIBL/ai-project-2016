                                          Logical Filtering 

                                     Eyal Amir and Stuart Russell 
                     Computer Science Division, University of California at Berkeley 
                                     Berkeley, CA 94720-1776, USA 
                                     {eyal,russell}@cs.berkeley.edu 


                     Abstract                          model. Crucially, the 0(/n3) update cost and the 0(n2) space 
                                                       requirement do not depend on the length of the observation 
    Filtering denotes any method whereby an agent up•
                                                       sequence; hence, a Kalman filter can run indefinitely. In this 
    dates its belief state—its knowledge of the state of 
                                                       paper, we are interested in developing analogous results in the 
    the world—from a sequence of actions and obser•
                                                       context of logical representations. 
    vations. In logical filtering, the belief state is a log•
                                                         We adopt a simple logical language (Section 2) for describ•
    ical formula describing possible world states and 
                                                       ing the transition and observation models; the observations 
    the agent has a (possibly nondeterministic) logi•
                                                       and the belief state itself are also logical formulae. The ini•
    cal model of its environment and sensors. This 
    paper presents efficient logical filtering algorithms tial state may be only partially known; the transition model, 
    that maintain a compact belief state representa•   which allows for actions by the agent itself, may be nondeter•
    tion indefinitely, for a broad range of environment ministic; and the observation model may be nondeterministic 
    classes including nondeterministic, partially ob•  and partial, in the sense that the agent may not be able to 
    servable STRIPS environments and environments      observe the actual state. 
    in which actions permute the state space. Efficient  Even when we restrict ourselves to propositional logic, it 
    filtering is also possible when the belief state is rep• is clear that the general filtering problem is nontrivial (we 
    resented using prime implicates, or when it is ap• prove it is computationally hard), because there are exponen•
    proximated by a logically weaker formula.          tially many possible states. We identify several classes of 
                                                       models that allow efficient filtering with respect to the belief-
                                                       state representation size. Our primary method is based on 
1 Introduction                                         decomposition theorems showing that 1) filtering distributes 
Any agent operating in a partially observable environment over disjunction in the belief state formula, and 2) filtering 
must perform computations that distinguish among the a pri• distributes over conjunction and negation if the actions are 
ori possible current states of the world on the basis of past ob• permutations of the state space. Such actions serve as one-to-
servations and actions. These computations may operate di• one mappings between states, for those states in which they 
rectly on a representation of the action observation sequence can be applied. We obtain efficient, exact algorithms for DNF 
(e.g., [Winslett, 1990; Kautz et al, 1996]); they may reduce belief states and for NNF (Negation Normal Form - all nega•
queries about the current state to queries about the initial state tions are in front of atoms) and CNF belief states with per•
(e.g., [Reiter, 2001]); or, they may update the belief state (the muting actions. In other cases, we obtain efficient algorithms 
agent's knowledge about the state of the world) after each ac• for approximate filtering. 
tion and observation. This latter approach, called filtering or In another class of dynamic systems, we can filter effi•
recursive state estimation in the control theory literature, is ciently if the belief state is represented in CNF that includes 
particularly useful with unbounded sequences of actions and all its prime implicates. Finally, we show that STRIPS mod•
observations.                                          els (possibly with nondeterministic effects of actions) also ad•
  The main computational difficulties are 1) the time needed mit efficient filtering. The STRIPS assumption, that every 
to update the belief state, and 2) the space required to repre• action has no conditional effects and that an effect's precon•
sent it. These depend on the nature of the transition model, ditions are the preconditions for the action's execution, is key 
which describes how the environment evolves over time, the to this efficiency. 
observation model, which describes the way in which the en• With respect to maintaining a compact representation, we 
vironment generates observations, and the family of repre• show that properties similar to those mentioned above allow 
sentations used to denote belief states. Early work, begin• us to filter A-CNF formulae (CNF with clauses of at most K 
ning with Gauss, assumed stochastic models. For example, literals, when k is fixed) such that the result is represented in 
the Kalman filter [Kalman, 1960] is a ubiquitous device that K-CNF (for the same fixed k). Thus, the belief state is main•
maintains a multivariate Gaussian belief state over n vari• tained in 0(nk) space indefinitely. In particular, we show 
ables, assuming linear-Gaussian transition and observation mild conditions under which a compact belief state can be 


AUTOMATED REASONING maintained in nondeterministic STRIPS domains and in per•     propositions that are true in this world state), A is the set of 
mutation domains. Finally, we show that DNF belief states     actions in the system and Rl(s, a, s') means that state s' is a 
remain compact if the effects of actions are deterministic and possible result of action a in state s. 
guaranteed to hold. These results are the first analogues, in 
the logical arena, of the desirable properties possessed by 
Kalman filters for continuous variables. 
   Ours is by no means the first work on filtering in a logical 
context. Early on, it was pointed out that filtering is easy 
for deterministic systems with a known initial state [Fikes et 
al. , 1972; Lin and Reiter, 1997]. Filtering in nondeterministic A logical nondeterministic domain description D is a fi•
domains is more difficult. In particular, the related problem of nite set of statements of the following kinds: value proposi•
temporal projection is coNP-hard when the initial state is not tions of the form 'Initially F" describe the initial state and 
fully known, or when actions have nondeterministic effects    effect rules of the form "a causes F if G" describe the effects 
[Liberatore, 1997] (see also Section 3.3).                    of actions, for F and G being state formulae (propositional 
   Traditionally, computational approaches for filtering take combinations of fluent names). We say that F is the head and 
one of three approaches: 1) enumerate the world states possi• G is the tail of those rules. 
ble in every belief state and update each of those states sep•
arately, together generating the updated belief state [Ferraris 
and Giunchiglia, 2000; Cimatti and Roveri, 2000], 2) list the 
sequence of actions and observations and prove queries on 
the updated belief state [Reiter, 2001; Sandewall, 1994], or 
3) approximate the belief state representation [Son and Baral, 
2001; Williams and Nayak, 1996]. 
  The first two approaches cannot be used when there are too 
many possible worlds (e.g., when the domain includes more 
than a few dozens of fluents and there are more than 240 pos•
sible states) or when the sequence of actions is long (e.g., 
more than 100 actions). Examples include robot localization, 
tracking of objects and their relationships, and data mining. 
The third approach gives rise to many mistakes that are some•
times dangerous, and requires an approximation that fits the 
given problem (if one exists). Many domains of 100 fluents 
or less are still computationally infeasible for it. 

2 Logical Filtering                                                When there is no confusion, we write R for RD. 
                                                              If action a has an effect of FALSE in s, then it cannot execute. 
In this section we define logical filtering using a transition  In partially observable domains, we update our knowledge 
model and action semantics that are compatible with the stan• as a result of executing an action and collecting observations 
dard semantics belief update operator of [Winslett, 1990].    in the resulting state. The following definition of filtering as•
(To avoid confusion, this is different from another operator  sumes that a is a set of world states. We use our transition 
presented in the same publication, PMA, that applies a non-   operator R to define the resulting belief state from each ac•
monotonic approach to formalize minimal change.) This op•     tion. An observation o is a formula in our language. 
erator is simple and allows us to examine computational prop•
erties easily. It can represent any logical transition system, 
and specifications in other action languages can be compiled 
into it IWinslett, 1990; Doherty et a/., 1998]. 


                                                              We call Step 2 progression with a and Step 3 filtering with o. 
                                                                For example, consider a robot that is in charge of cleaning 
                                                              a room. It can execute an action a = fetch(broom, closet) 
                                                              which has the single effect rule "a causes has(broom) A 


                                                                                             AUTOMATED REASONING 3 Filtering Logical Formulae 
Approaches to filtering actions and observations that at any 
stage enumerate the states in a belief state do not scale to 
large domains. An alternative approach is to perform logical 
progression in a form similar to the one described by [Lin and 
Reiter, 1997; Mcllraith, 1998]. The difference is that now we 
wish to do so (efficiently) in the context of nondeterministic 
actions and observations. 
   In this section we present a straightforward algorithm that 
filters belief state formulae directly, but does so in worst-case 
exponential time. This algorithm serves as a starting point 
for Section 4, where we propose efficient algorithms. We 
also present distribution properties of filtering over the log-


                                                               3.2 Distribution Properties and Permutation 


                                                               Definition 3.3 (Permuting Actions). Action a is permuting, 
                                                               if for every state s' there is at most one s such that R(s, a, s'). 
the assertion that no precondition of a holds. This has a sim•   Domains that include only permuting actions are called 
ilar effect to adding frame axioms to a set of effect axioms in permutation domain. 


AUTOMATED REASONING                                                                                                    77    For example, consider a — fetch(broom, closet) from 
 above, and assume that we add a second effect rule "a 
 causes FALSE if -in{broom, closet)". Thus, a is not exe•        The proof of this theorem reduces the problem of repre•
 cutable unless its first rule's precondition holds. Then, the ac• senting the belief state after performing an action to that of 
 tion is a one-to-one mapping between states, when this map•   representing a Craig Interpolant. It uses the following. 
 ping is defined (it is not defined when a state maps to no re•
 sulting state). If this second rule is not added, then the action 
 is not one-to-one because it maps two different states (in the 
 first we already have the broom and in the second the broom 
 is in the closet) to the same state. 
   In the same spirit, an action pickUp(A, D) that picks up 
 block A from the top of block B is one-to-one when it is pos• 4 Efficient and Indefinitely Compact Filtering 
 sible because we can find a single previous state for every 
                                                               In this section we present the main contribution of this paper, 
 resulting state. The same holds for putDown(A,C). Other 
                                                               namely, a polynomial-time algorithm that computes logical 
 natural examples include turning a row in a Rubik's cube, 
                                                               filtering exactly for a significant class of transition systems. 
flipping a light switch, and buying a gallon of gas. In con•
                                                               For some special cases we present simpler algorithms that 
trast, turning on the light, setting a Rubik's cube to a partic•
                                                               are even more efficient. For systems that do not fall within 
ular configuration, and filling up the gas tank are not permu•
                                                               this class our algorithm gives an approximation to the filter•
tation actions. Notice that we allow different actions to map 
                                                               ing. Also, we show that we can keep the representation of 
different states to the same state (e.g., accelerating by 5MPH 
                                                               the filtered belief state compact indefinitely for a class of dy•
when driving 40MPH results in the same state as when decel•
                                                               namic systems. This class includes nondeterministic STRIPS 
erating by 5MPH when driving 50MPH). 
                                                               systems and some systems whose actions are permuting. 


3.3 Limitations for Compact Representation 
It may be argued that filtering may require only polynomial 
space, if we limit ourselves to initial belief states that are rep•
resented compactly and to actions whose effects and precon•
ditions are represented compactly. In Theorem 3.5 we show        The conditions on action a in the last theorem hold, e.g., for 
the contrary. That is, for every general-purpose representa•   actions whose every defining rule has a precondition that is a 
tion of belief states there is a dynamic system, an initial be• single clause (e.g., a literal). It also holds for actions which 
lief state, and a sequence of actions after which our belief   are defined by at most two rules, and actions that affect all the 
state representation is exponential in the representation of the literals that appear in their preconditions. 
initial belief state. 


Theorem 3.5. There is dynamic system D with n fluents, be•

lief state 0, and action sequence a\,..., an such that, for all 


78                                                                                            AUTOMATED REASONING AUTOMATED REASONING                                                                                                   79 