                      Abstraction-based Action Ordering in Planning

                           Maria Fox   and  Derek Long    and  Julie Porteous
                           Department of Computer and Information Sciences
                                University of Strathclyde, Glasgow, UK


                    Abstract                          often makes some of the underlying symmetric structure ac-
                                                      cessible and a subset of the available symmetries can be efﬁ-
    Many planning problems contain collections of     ciently identiﬁed using automatic techniques [Fox and Long,
    symmetric objects, actions and structures which   1999; 2002]. However, it has been observed that the most di-
    render them difﬁcult to solve efﬁciently. It has been rectly accessible symmetries are often not the ones that would
    shown that the detection and exploitation of sym- be most useful to exploit.
    metric structure in planning problems can dramat-   It happens that structures within a planning problem are
    ically reduce the size of the search space and the often almost, but not quite, symmetric, and that treating them
    time taken to ﬁnd a solution. We present the idea of as symmetric would increase the efﬁciency of the search. Al-
    using an abstraction of the problem domain to re- most symmetries are revealed by the application of an appro-
    veal symmetric structure and guide the navigation priate abstraction to the domain. As we will see, the term
    of the search space. We show that this is effective almost refers to the fact that the associated symmetry be-
    even in domains in which there is little accessible longs to the abstracted domain and might be unsound with
    symmetric structure available for pruning. Proac- respect to the original domain. Such symmetries can only be
    tive exploitation represents a ﬂexible and powerful exploited in a positive way (to suggest how best to develop
    alternative to the symmetry-breaking strategies ex- the plan) because using them for pruning would compromise
    ploited in earlier work in planning and CSPs. The completeness. In this paper we consider how the application
    notion of almost symmetry is deﬁned and results are of a certain simple abstraction, which we call the property-
    presented showing that proactive exploitation of al- based abstraction, can reveal a form of almost symmetry
    most symmetry can improve the performance of a    which we then show can be effectively exploited to solve the
    heuristic forward search planner.                 original problem. We begin with a simple motivating exam-
                                                      ple, then we present the deﬁnitions and examples that support
                                                      the following discussion. We then describe the extension of
1  Introduction                                       FF that enables the proactive exploitation of symmetric prob-
Symmetries frequently occur in search problems such as lem structure and discuss a collection of results obtained from
planning problems [Joslin and Roy, 1997; Fox and Long, STRIPS domains used in the 2002 planning competition.
1999; Rintanen, 2003], CSPs [Roy and Pachet, 1998; Gent
and Smith, 2000; Roney-Dougal et al., 2004] and model 2   Identifying Almost Symmetry
checking [Ip and Dill, 1996; Audemard and Benhamou,   Consider the problem of transporting a number of crates from
2002]. Many techniques have been developed for symmetry- one location to another (as in the Depots domain [Fox and
breaking to improve search performance, with emphasis on Long, 2003]). The crates are stacked in several different piles
using symmetries to prune search spaces rather than to sug- in the initial state and must be moved into new conﬁgurations.
gest branches to pursue. In this paper we propose the use Any solution plan will involve unstacking the crates, loading
of symmetries to direct the forward search of an FF-style them onto transport and then delivering and unloading them.
planner in a positive way. We show that the proactive use At an abstract level at which the precise locations of the crates
of symmetries can lead to signiﬁcant performance improve- are ignored, the crates can be treated as symmetric because
ments across a variety of planning domains.           the same sub-plans are required to get all of the crates into
  The automatic identiﬁcation of all of the symmetries of a their goal conﬁgurations.
problem is NP-hard. Because of the complexity of the identi- The fact that the cargoes start stacked in different piles
ﬁcation problem most researchers working in symmetry have means that they cannot be automatically identiﬁed as func-
broken symmetries by hand by expressing speciﬁc symmetry- tionally equivalent [Fox and Long, 1999]). Furthermore,
breaking constraints in the modelling of the problem [Gent since their initial conﬁgurations are different they cannot be
and Smith, 2000; Ip and Dill, 1996; Roney-Dougal et al., identiﬁed as symmetric in the sense exploited in [Joslin and
2004]. Planning domain models are structured in a way that Roy, 1997]). Nevertheless, there is a high degree of symmetryin the structure of the problem even though it is not immedi- A special subclass of conﬁguration symmetries contains
ately accessible to automatic analysis. The crates are almost those symmetries that have proved to be amongst the most
symmetric because they can be made symmetric by abstract- fruitful in existing exploitations of symmetries [Fox and
ing out the speciﬁc domain objects to which they are related Long, 1999; 2002]. This is the class that is generated by all
(eg: crate1 is on something, but it doesn’t matter what), with- pairwise transpositions of a set of symmetric objects:
out losing sight of the properties (being on something as op- Deﬁnition 3.4 A conﬁguration symmetry, S, of P =
posed to having something else on top) that distinguish them. (O,I,G,C), is a functional symmetry if it is a permutation
When a collection of objects (in this case crates) are almost group, S , acting on a subset of n of the constants in C.
symmetrical we reason that we may well need to perform the   n
same operations on these objects during the course of any 3.1 The Property-based Abstraction
eventual solution plan.
  We say that two actions are almost symmetric if they are All symmetries can be seen as a consequence of some form of
two different instances of the same operator in which objects abstraction. The abstraction renders certain groups of actions,
in the corresponding argument positions are symmetric in the objects or structures equivalent by not specifying the details
abstracted domain. The stategy we describe below favours of the relationships that differentiate them. In some problems,
the selection of actions that are almost symmetric to actions applying an abstraction to remove the distinctions between
that have already been applied in the plan.           objects can lead to the discovery of new potential symmetries
                                                      that are not present in the base domain. It is this observation
                                                      that leads us to make the following deﬁnition:
3  Symmetries in Planning Domains
                                                      Deﬁnition 3.5 An abstraction of a planning problem, P, is a
In this section we develop a formal framework for deﬁning mapping, f, from P onto a new planning problem, Q.
symmetries in planning problems. We begin with familiar
deﬁnitions of a planning domain, a planning problem and a This deﬁnition is deliberately permissive, since we do not
plan. Symmetries have been studied for decades by math- wish to exclude any possible abstractions. In general we will
ematicians as groups. We therefore adopt a group-theoretic be considering compositional mappings in which the com-
characterisation, deﬁning each symmetry as a permutation ponents of Q are constructed by applying an abstraction in-
that preserves the equivalence of the domain conﬁgurations dependently to the different components of P. The following
to which it is applied. The elements of our groups act on the deﬁnition formalises the property-based abstraction described
objects in a domain.                                  earlier. Properties were ﬁrst deﬁned in [Fox and Long, 1998].
                                                      A property of an argument to a predicate is the pair contain-
Deﬁnition 3.1 A planning problem, P, is a tuple (O,I,G,C), ing the predicate name and the argument position index (this
where O is a set of operator schemas, I is a set of initial state is denoted below by subscripting the predicate name with the
facts, G is a set of goal propositions and C is a set containing argument position).
all of the constants appearing in I∪G.
                                                      Deﬁnition 3.6 The following mapping is the property-based
Deﬁnition 3.2 A plan, p, for a planning problem, (O,I,G,C), abstraction for planning problem P .
is a sequence of operator schemas from O each instantiated For each proposition in a planning problem, P, formed
with constants from C such that each instantiated operator from predicate p applied to k arguments, x1, . . . , xk,
schema can be applied from the preceding state, starting at I, f(p(x1, . . . , xk)) = {p1(x1), . . . , pk(xk)}. The k unary tar-
and the ﬁnal state satisﬁes G.                        get predicates, p1, . . . , pk are called properties.
  The ﬁrst symmetry we consider is the form explored by The property-based abstraction simpliﬁes the structure of a
Joslin and Roy [Joslin and Roy, 1997] and subsequently con- problem by removing the linkage between pairs of objects
sidered by Rintanen [Rintanen, 2003].                 and considering the problem as the union of separate projec-
                                                      tions of the original problem for each constant. This has the
Deﬁnition 3.3 A conﬁguration symmetry of a planning prob- effect of abstracting out which objects play which roles with
lem P = (O,I,G,C) is a group, S, acting on the constants in C, respect to other objects.
such that under the action of the elements of S, the initial and If we apply an abstraction to a planning problem and then
goal states are invariant and every plan for P remains a valid identify a symmetry in the abstracted problem, this symmetry
plan for P.                                           can have a useful relationship to the original problem:
This deﬁnition requires that a plan should remain valid un- Deﬁnition 3.7 Given a planning problem, P, and an abstrac-
der the action of elements of the symmetry S, but it does not tion, f, mapping P into the planning problem Q, a symmetry
require that the plan should be invariant. For example, con- of Q is called an almost symmetry for P with respect to the
sider the simple blocks problem illustrated in ﬁgure 1. The abstraction f.
group {id, (CE)(DF )}1 is a conﬁguration symmetry. How-
ever, although valid plans will remain valid, plans will not be Abstractions can throw away so much of the structure of a
invariant under the transpositions of C with E and D with F, problem that the abstracted domain has no useful connection
since this will rearrange the steps of a plan.        with the original domain. In practice we are interested in ab-
                                                      stractions that preserve signiﬁcant structure from the original
  1The identity element is denoted by id. The elements are ex- problem. One way in which structure might be preserved is
pressed in the standard cycle notation for groups.    in the behaviour of plans under an abstraction:                                                       1: makeGraph(P)
            A   C   E         D
                                 F   B                 2: input: planning problem P = (O, I, G, C)
            B   D   F         E  C   A                 3: output: coloured graph N
                                                       4: initialise an empty graph N.
             Initial state     Goal state              5: for all c ∈ C do
       Figure 1: A simple example blocks problem       6:  create vertex vc with colour equal to its type
                                                       7:  add vc to N
                                                       8:  initialise an empty set of propositions, QI
                                                       9:  for all propositions p ∈ I do
                                                      10:    if p contains c then
Deﬁnition 3.8 An abstraction, f, of planning problem P is 11:  add p to QI
plan preserving if, when p is a plan for P, f(p) is a plan for 12: let props = the bag of properties of c in QI

f(P ).                                                13:  create a vertex vQI with colour equal to (|QI |,props)
                                                      14:  {the names of the properties in props identify the arities of
The property-based abstraction of a problem is not necessar- the predicates and the types of their arguments}
ily plan preserving because each property is available only
                                                      15:  add vQI to N

once in the abstracted domain and once it is deleted it can- 16: create an edge e between vc and vQI
not be replaced. Thus, in cases where a set of propositions 17: add e to N
collapses to a single property there may be no solution to the 18: initialise an empty set of propositions, QG
abstracted problem.                                   19:  for all propositions p ∈ G do
                                                      20:    if p contains c then
Deﬁnition 3.9 An almost symmetry of planning problem P 21:     add p to QG
with respect to the abstraction f is a strong (weak) almost 22: let props = the bag of properties of c in QG

symmetry if f is (is not) plan preserving.            23:  create a vertex vQG with colour equal to (|QG|,props)
                                                      24:  add vQ to N
  In the case where f is the identity, any symmetry on P with    G
                                                      25:  create an edge e between vc and vQG
respect to f is, trivially, a strong almost symmetry. 26:  add e to N
  The property-based abstraction is just one abstraction func- 27: return N
tion that reveals exploitable almost symmetries. In gen-
eral, the abstraction process can remove important constraints Figure 2: The construction of the coloured graph.
from the original problem, so can only act as a guide to the
                                                                  0           2           4
solution of the original problem: indeed, even for use as a        A           C           E
guide, an abstraction must be chosen with care. For this rea-  6          8           10
                                                                      17          15          13
                                                               clear(A)   clear(C)    clear(E)
son, almost symmetries must be handled cautiously: pruning          on(B,A)     on(F,C)     on(D,E)
                                                                                      on(E,F)
a search space using an almost symmetry is very likely to      on(A,B)    on(C,D)
                                                              on(A,B)    on(C,D)      on(E,F)
compromise completeness.                                            on(B,A)     on(D,E)      on(F,C)
                                                              ontable(B) ontable(D)   ontable(F)
                                                                                               14
  Our starting point for identifying almost symmetries be-     7       16 9       12  11
                                                                                           F
tween objects is the method used by Joslin and Roy [Joslin          B          D
                                                                              3           5
and Roy, 1997]. For a given planning problem we build a            1
graph representing the object relationships in the initial and Figure 3: The graph constructed by makeGraph for the blocks
                                           [
goal states of the problem and then use NAUTY McKay,  example. Nodes with the same shape and outline have the
    ]
1990 , the graph automorphism discovery tool, to identify same colour and are numbered 0-17.
automorphisms in the graph. The key difference in our ap-
proach is the way in which the graph is constructed. Given
a planning problem, our approach identiﬁes a subset of the Having identiﬁed the almost symmetries that exist at the
almost symmetries of the domain. We construct a coloured object level in the domain we can construct the almost sym-
graph that represents an abstraction of the problem under the metric relation on actions, as described above. The applica-
property-based abstraction. This construction is performed tion of a property-based abstraction, as described in deﬁni-
by the makeGraph algorithm shown in ﬁgure 2. NAUTY is tion 3.6, allows the identiﬁcation of the symmetry in ﬁgure 1
then used to ﬁnd the symmetries in the abstracted problem. between the blocks on the tops of the stacks and between the
The colouring of the nodes distinguishes between the proper- blocks on the bottoms of the stacks. In such an interpreta-
ties that arise in the property-based abstraction described in tion it can be seen that the blocks A, C and E, which are on
deﬁnition 3.6. Thus, NAUTY ﬁnds the almost symmetries of other blocks and therefore at the tops of the three stacks, will
the problem with respect to the property-based abstraction. move to being at the bases of the three new stacks in the goal.
  The following theorem guarantees that makeGraph gen- Similarly, B, D and F will move from being beneath other
erates an almost functional symmetry with respect to the blocks to being at the tops of the new stacks. By abstraction,
property-based abstraction. The proof is omitted for brevity. the fact that these groups of blocks start in different positions
                                                      has been made irrelevant and the symmetry in their behaviour
Theorem 3.10 The automorphisms of the graph  make-    becomes apparent.
Graph(P), for planning problem P, restricted to the constants The coloured graph that we construct for this problem is
in P, form an almost functional symmetry with respect to the shown in ﬁgure 3. The round nodes are the 6 blocks in the
property-based abstraction of P.                      problem. These nodes have the same colour because theblocks are all of the same type (so can be considered to share 1: actionSelect(h,G,As,H)
the same unary type predicate). Each of these nodes is con- 2: input: The heuristic value of the current state h, a symmetry G,
                                                         a set of proposed actions As, a plan head H
nected to the set of propositions that mention the correspond- 3: output: An extended plan head H’
ing block in the initial state, and the set of propositions that 4: initialise a vector vs of counts, one for each action in As.
mention the block in the goal state. It can be seen that when 5: for all actions a in As do
the properties obtained from the propositions in these sets are 6: for all actions b in H do
different the corresponding nodes have different colours. For 7: if a uses object c and b uses object d and (b d) ∈ G then
example, nodes 16 and 17 have different colours because, al- 8: increment vs[a]
though they contain the same proposition, the colour of node 9: sort As according to vs
16 contains the property on with respect to block A (the prop- 10: for all a in As do
                                                      11:  if heuristic value of a > h then
erty on2) while the colour of node 17 contains the property
on with respect to block B (the property on ).        12:    H’ = H+a
                                    1                 13:    return H’
  The output from NAUTY is the generators for the graph
automorphism group. When restricted to domain objects, the
                                                      Figure 4: A modiﬁed version of FF favouring symmetric ac-
output for this problem is: vertices 0, 2, 4 or {A, C, E} and
                                                      tion choices.
vertices 1, 3, 5 or {B, D, F }
  The almost symmetry that is obtained by ﬁrst applying the
property-based abstraction to this blocks world problem, and 5 Exploitation of symmetry information
then applying NAUTY to the resulting graph, belongs to the In the work described in this paper we have explored a
abstracted problem in which the detailed relationships be- simple strategy where the symmetry information was used
tween particular blocks have been removed. It can be seen as a heuristic guide for selection between proposed action
that the blocks A, C and E are interchangeable in the property- choices. During plan generation FF performs a forward state
based abstraction, as are the blocks B, D and F. Interestingly, space search and at each stage proposes actions to apply at the
in this particular simple example these collections of blocks current state. We amend the action selection strategy of FF to
are interchangeable in the plan as well, so that the property- favour actions that are almost symmetric to actions selected
based abstraction is plan preserving in this case and the al- earlier in the plan. This is a positive exploitation of symme-
most symmetry is strong (as deﬁned in deﬁnition 3.9). try because we use the symmetric structure of the problem to
                                                      propose rather than to prune action choices.
4  Proactive Symmetry Exploitation                      The heuristic prefers actions that use objects that are sym-
                                                      metrical to objects that have appeared in the same actions ear-
In most existing work exploiting symmetry in search prob- lier in the plan. This exploits the observation that where sym-
lems, the exploitation has been negative, in the sense that it metric objects each require treatment in a plan they are likely
is used to prune the search space in order to avoid search- to require symmetric treatment.
ing symmetrically equivalent parts of the search space. This This heuristic is straightforward to implement in FF. At
is useful when one part of the space has been searched each stage during plan generation we have a current plan
fruitlessly, since the symmetry implies that the symmetri- which consists of the actions applied so far to get from the
cally equivalent parts of the space will also prove fruit- initial state to the current state. At this stage a set of pos-
less. Various approaches can be used to prune the search sible next actions are proposed by FF. These are the helpful
space, including the introduction of symmetry breaking con- actions, all of which occur in the ﬁrst layer of the relaxed
straints into the problem encoding itself (this technique is plan from the current state and are immediately applicable
used in the planning context in [Joslin and Roy, 1997; in the current state. FF normally chooses between these by
Rintanen, 2003]), by forcing an ordering between otherwise applying its relaxed distance measure to the states that they
symmetric choices for example, and monitoring choices in produce and choosing the ﬁrst helpful action that produces
the search machinery itself, pruning equivalent choices as the state closest to the goal. We modify the strategy that FF
they arise (the approach followed in [Fox and Long, 1999; uses for selecting between these by ordering the helpful ac-
2002; Long and Fox, 2003]). However, in the context of cer- tions so that those that use objects that are symmetrical to any
tain heuristic search strategies the utility of these approaches that have appeared in actions in the plan so far are visited ﬁrst
is signiﬁcantly reduced. In particular, the forward search in the selection strategy. The consequence of this is that only
approach of FF effectively breaks symmetries by not back- actions that improve the heuristic distance will be selected by
tracking over action choices. Although some beneﬁt might the modiﬁed strategy. We do not modify the heuristic esti-
be obtained by avoiding the consideration of symmetric ac- mate itself. To order the actions we record, for each action,
tion choices during a breadth-ﬁrst search of a plateau, pruning a count of the number of symmetric objects it uses and sort
symmetric branches appears likely to be less useful in heuris- the actions into descending order of this count. Any ties are
tic search planners than in systematic search planners. broken using FF’s standard action selection strategy. The nec-
  In order to exploit symmetry in heuristic search planners, essary modiﬁcations to the action selection step are shown in
we propose an alternative strategy to the pruning approach: in ﬁgure 4.
cases where action choices are available that are symmetric To illustrate the use of the symmetry information in FF ver-
with choices that have already been made and adopted, we sion 2.3 (ff-v2.3), consider a simple Depots example (pﬁle3
propose to encourage those choices.                   in the IPC3 archive). The following sets of objects are found  Action  Symmetric args                    Score

  (a)     (distributor1,depot0)             1              1000
                                                                Ferry
  (b)     (distributor1,depot0), (depot0,distributor1) 2       Gripper
                                                                Rovers
                                                                Depots
  (c)     (hoist2,hoist0)                   1                  DriverLog
  (d)                                       0                  FreeCell
  (e)     (hoist1,hoist0), (crate4,crate5)  2
 Table 1: Scoring helpful actions for symmetric arguments.

                                                            100


to be symmetric according to their properties in the initial FF  with symmetry
and goal states of the problem: {pallet0, pallet1, pallet2},
{crate4,crate5}, {crate0, crate2}, {truck1, truck2}, {depot0,
distributor1} and {hoist0, hoist1, hoist2} At some intermedi-
ate point during plan generation the plan contains the follow-

ing actions:                                                10
                                                             10                  100                1000
    drive(truck1,distributor0,depot0)                                         FF version 2.3
    drive(truck1,depot0,distributor1)
    drive(truck0,depot0,distributor1)                          Figure 5: Comparison of states visited.
    lift(hoist0,crate5,crate2,distributor1)
    load(hoist1,crate5,truck1,distributor1)
                                                      techniques discover at most 4 symmetric objects in any of
  The set of helpful actions proposed by FF at this point in these problems. Our results show that we obtain signiﬁcant
the plan contains:                                    advantages in both the artiﬁcial and the natural domains. The
    (a) drive(truck1,distributor1, distributor0)      Gripper results we present are for randomly generated prob-
    (b) drive(truck1,distributor1,depot0)             lems in which the number of balls and the number of grippers
    (c) lift(hoist2,crate2,pallet2,distributor1)      both vary. The Ferry problems are randomly generated with
    (d) lift(hoist0,crate1,pallet0,depot0)            varying numbers of ferries and cars. Increasing the numbers
    (e) lift(hoist1,crate4,crate3,distributor0)
                                                      of grippers and ferries in these problems reduces the num-
  The scores associated with these actions are obtained by
                                                      ber of times that a move or a sail is the only helpful action
counting the number of corresponding pairs of symmetric ar-
                                                      and therefore increases the relative density of choicepoints
guments between each action and an occurence of the same
                                                      at which symmetric actions are available. We begin by pre-
action in the plan so far. In scoring, we do not increment the
                                                      senting graphs of the results comparing numbers of states ex-
score in the case where the argument in the helpful action is
                                                      plored and time taken (which includes the time required to
identical to the corresponding argument in the earlier action
                                                      carry out the symmetry analysis itself).
as we want to encourage acting on other objects in the same
symmetric set.                                          Figure 5 shows the comparison of the performances of ff-
                                                      v2.3 and ff-v2.3+symm in terms of the number of states vis-
  We now consider the helpful actions in turn, scoring them,
                                                      ited in the search. The plot is log-scaled and the middle of
as shown in ﬁgure 1. The heuristic must choose between the
                                                      the three lines represents equal performance. The other lines
two actions weighted 2. In this case the lift action is selected
                                                      represent a 10% performance difference either side of equal.
(it is likely that the competing drive action was not highly
                                                      Again, points below the line represent a performance advan-
valued by the distance heuristic because it undoes the effect
                                                      tage for ff-v2.3+symm. It can be seen that ﬁve of the Free-
of an immediately preceding step).
                                                      cell problems and one Rovers problem (six problems in total)
  It can be seen that our strategy is forcing the planner to
                                                      were solved at least 10% more efﬁciently by ff-v2.3. By con-
commit earlier to actions that have already proved success-
                                                      trast, twenty eight problems were solved at least 10% more
ful for symmetrical objects (we needed to lift up crate5 and,
                                                      efﬁciently by ff-v2.3+symm.
since crate4 and crate5 are symmetric it may be a good idea
to do the same thing with crate4).                      Figure 6 shows the comparative time performance on prob-
                                                      lems taken from the six domains. In this plot, and in the sta-
                                                      tistical reported below, we exclude instances solved in under
6  Experimental Results                               one second. There are two reasons for this: ﬁrstly, noise ef-
In this section we report results of experiments that compare fects in the measurements are more severe in values this small
the performance of the planner ff-v2.3 [Hoffmann and Nebel, and, secondly, the implementation of our symmetry analysis
2001; Hoffmann, 2002] with a version of the same planner is not optimised for speed, making its overhead a relatively
that uses symmetry information as a positive heuristic in de- distorted penalty for these small problems. The line repre-
ciding which action to apply next. We refer to this planner sents equal performance and points below the line represent
as ff-v2.3+symm. We consider six domains: two of these are better performance by ff-v2.3+symm. It can be seen that ff-
artiﬁcially constructed to contain a high degree of directly ex- v2.3 outperforms ff-v2.3+symm in only four cases.
ploitable symmetry, whilst the remaining four are more natu- To conﬁrm statistical signiﬁcance of our results, we have
ral domains, taken from the IPC3 competition bench marks. used the Wilcoxon-Mann-Whitney matched pairs signed
In the latter group (Depots, Driverlog, Rovers and Freecell), ranks test. This test is more appropriate than a matched pairs
there is very little directly exploitable symmetry — existing t-test, since the distribution of the differences in performance