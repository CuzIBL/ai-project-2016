                     Redundancy-free        Island  Parsing    of Word    Graphs

                                             Bernd  Kiefer
                        Deutsches  Forschungszentrum   fur¨ Kunstliche¨ Intelligenz
                               Stuhlsatzenhausweg  3, 66119  Saarbruck¨ en,
                                             kiefer@dfki.de


                    Abstract                          ﬁxing the expansion direction of those items when they com-
                                                      bine for the ﬁrst time, duplicate derivations are avoided.
    Island parsing is a bidirectional parsing strategy  This paper extends the original algorithm in two aspects
    mostly used in speech analysis, as well as in appli- that make it more feasible for speech applications.
    cations where robustness is highly relevant and/or  Firstly, the original algorithm deals only with string input.
    processing resources are limited. Although there  Because many speech applications require the direct analysis
    exists an efﬁcient redundancy-free island parsing of word graphs, it is desirable to extend the method to word
    algorithm for string input, it has not yet been ap- graph input. Word graphs are acyclic directed graphs of input
    plied to word graph input, an application which is items with exactly one source node and one sink node (a node
    central for speech analysis systems. This paper de- with in-degree resp. out-degree zero). They encode ambigu-
    scribes how the established algorithm can be gener- ous input using possibly overlapping sub-paths, which lead
    alized from string input to word graphs, increasing to more complicated input conﬁgurations and require a mod-
    its ﬂexibility by integrating the selection of island iﬁcation of the original algorithm. The word graph in ﬁgure
    seeds into the search process inherent to parsing. 1, for example, can not be split into more than one region
                                                      because every border at an inner node would cross an input
                                                      item, thus inhibiting the use of more than one seed.
1  Introduction                                         A modiﬁed algorithm must be able to deal with these con-
Island parsing is a parsing strategy for context free grammars, ﬁgurations without losing efﬁciency, since speech applica-
mostly used in speech applications ([Ageno, 2003], [Gallwitz tions are typically time critical and often have limited space
et al., 1998], [Thanopoulos et al., 1997], [Mecklenburg et resources. Therefore, care has been taken to preserve the ef-
al., 1995], [Brietzmann, 1992]). It is a bidirectional strategy, ﬁciency and the redundancy avoidance of the original.
in that incomplete parse items, which encode partially ﬁlled Secondly, instead of picking all seeds in advance, the mod-
right hand sides of a context free rule, may extend in both iﬁed version integrates their selection into the search inherent
directions. Furthermore, parsing starts at some highly ranked to the parsing process. Since a lower number of seeds may re-
input items called seeds and tries to explore the “islands of sult in faster parsing, it is advantageous to be able to base seed
certainty” ﬁrst.                                      selection also on information created during parsing, namely,
  Since island parsing starts building all possible deriva- on already constructed items and their quality.
tions from every seed in both directions, provisions must be       hat
taken so as to avoid multiple computation of identical sub-                              tatoo
derivations, which would lead to spurious ambiguities and re- at        four        tea        two
duced efﬁciency. To my knowledge, there is only one descrip-
tion of an efﬁcient fully redundancy free algorithm for island
parsing, contained in an article comparing different bidirec-                 forty
tional parsing approaches for context-free grammars, namely        Figure 1: Example word graph
[Satta and Stock, 1994].
  This algorithm splits up the chart into consecutive regions Selecting a seed becomes one of the actions the parser can
such that the region borders correspond to chart nodes and take, like the combination or creation of other parse items.
every region contains exactly one seed item. Derived chart This provides full ﬂexibility in the design of the search strat-
items lying entirely within a region have been constructed egy, which in resource-limited applications can have a big
starting at the seed in a manner similar to Earley parsing, impact on the quality of the, possibly partial, results. Picking
which guarantees that they are build in a unique way. Items all seeds in advance is then just one of the possible options.
crossing region borders are a possible source of redundancy, Furthermore, dynamic selection of seeds is performed such
because the same derivation could be build starting either at that all sub-paths of the word graph will be be properly ex-
the right or the left seed (see ﬁgure 2 for an illustration). By plored to arrive at a complete solution, which might not be

                                                                                              ¢  ¥ f  ¥ 


                                                                                                (


                                                                                                  =  8 =


the case if seeds were picked disadvantageously. If, for ex- The algorithm is started by adding all tuples 2


                                                         (Fij (
ample, the seeds in ﬁgure 1 were the items labeled hat and to : and then calling add complete for all of them. The
tea, it might happen that the sub-path containing forty would program terminates whenever a derivation from the start sym-
not be considered.                                    bol to the input string was found and the exit statement in
  The modiﬁed algorithm does not ﬁx regions for the whole add new was reached, or else, if there are no more items to
word graph in advance. The resulting chart conﬁgurations are add, in which case the string is rejected.
rather such that every path through the word graph has its own Although items can potentially combine with other items
regions, and the borders of the different paths can, but need at both sides, their expansion direction is restricted dynam-
not, coincide. Since similar properties hold for the chart items ically to avoid redundant computation of sub-derivations.
with respect to the per-path regions as they do for the string These restrictions are implemented using two additional two-




version, the modiﬁed algorithm is still correct, complete and dimensional 17698Ek+1[6l8 arrays block left and block right,


                                                                            §m*d£n*
                                                                                       W


free of redundancy.                                   that contain symbols of         J .  If, for example,


                                                                    ¢ ¥Y>o      ¢  ¥ ¥Y>5


                                                                                            (; <


                                                         %                               %


                                                                                           :


                                                                     =            . =
                                                      .    block right  , the item            cannot com-
2  The  Original  Algorithm                           bine with any item adjacent to its right.
                                                        To illustrate the algorithm, ﬁgure 2 shows an example chart
Because [Satta and Stock, 1994] aim at describing bidirec- that will be referred to throughout the next paragraphs. Com-


tional context-free parsing in more generality, the formula- plete and incomplete items are represented by solid respec-
                                                                                            £
tion of the island parsing algorithm itself is somewhat com-                             §
                                                      tively dashed arcs, bearing symbols from , , and J W as la-


plicated and its implementation is not obvious at ﬁrst glance.        
                                                                           25p


                                                      bels. Input items 2 and are the seeds, the border between
                                                                  ¡rq
To facilitate the description of the modiﬁcations, the origi- them is at p  . The little blocks at the end of the arcs
nal algorithm is presented ﬁrst, albeit in an alternative, but depict the values of block left and block right, respectively.
equivalent form. Similar notation is used as far as possible The blocking of a complete item is based on its relation to
to stress the connection between the two formulations. In the seeds. Items dominating a seed, i.e., items whose yield
many respects, it is an ordinary chart parsing algorithm, that contains at least one seed, are blocked on both sides and
is only complicated by the bookkeeping necessary to avoid will only be extended by the projection step in the procedure


redundant computations. After introducing the notation, the add complete below. This is the case for all seed items, but


                                                                     ¢tsu¥ ¥ 
                                                                          q


algorithm is presented as a set of pseudo-code procedures.              A
                                                 ¡


                                                      also for the item      which projects to the incomplete


                                                           ¢t    s          ¥ ¥ 


                                                                               q
                                                                             A


  The  algorithm uses a context free grammar                  


                                                                        25pj25w


                 £     §


¢¤£¦¥¨§©¥
¥                                     item                       . Complete items in a right
                                                                    O&v


          , where  and   are ﬁnite sets of terminal and          O


                                                                                     .    2Xx
                             



                                                 ¡    substring, like the items labeled , , or , are blocked at
                                                                                  v



nonterminal symbols, respectively, is the set of rules 


                             §               £+*,§


         ! "$# &%        ' ()%
                                           the left side and can therefore only combine with active items
                 , where       and each           .

                                                     to their right. Thus, items in a right substring will be built


-  is the number of symbols on the right hand side of rule


     §
    %                                                 right-to-left starting at the seed. Complete items in a left sub-

 .      is the start symbol of the grammar. The grammar

                                              0/     string are treated analogously.



must not contain empty rules, i.e, rules of the form . .
                                       ¥ 3!3!3!¥


                                                       An unusual feature of this algorithm is that two incomplete


                                     2     254
The input is a string of 1 terminal symbols   . The   items can be combined (see the second and fourth for loop



algorithm uses a chart of size 17698 : a two-dimensional array


     ¥¤>   ¥!3 3!3C¥


 (; <                        (F <


       %@?BA
                              :


:                                                     in procedure add incomplete), while other chart parsing al-
                1ED
  , =             , where each   contains a set of two gorithms only allow the combination of an incomplete with


kinds of items: complete and incomplete items.


                               ¢;§©GH¥ ¥¤>5 §©G
                                                 %    a complete item. At the borders, these are the only possible



  A complete chart item is a triple =   with
                                              >
£+*I§                                                 combinations, since all complete items have been blocked.



      being the terminal or nonterminal category, = and the When incomplete items are created, they can at ﬁrst extend
                                          M
index of the start and end node of the item, respecti vely.


                                                     in both directions, except for those where one of the dots is



  For incomplete items, we introduce symbols JLK that rep-
                                            

                                          %           at its outermost position. Incomplete items are blocked when



resent dotted items (partial derivations) of a rule  : combined with another item for the ﬁrst time. If they combine


   M


                      ' M  M   "


             !¨      !       !Q #


 0N                                                  to the right, they will be forced to combine to the right from


 K


J


                          KQP       O    P


                     K)O                              that time on by blocking them at the left side, and vice versa.


                                                                                 ¢t   s         ¥ ¥ 


                                                                                                   q


                                                                                                 A


     ¥S    ¥!3 3!3Q¥        S


        %T?$A     


                 -


                                                                                            2  2


                                                                                             p  w


          M


                   D    RVU       JCW


    R                                                   In ﬁgure 2, incomplete items                  and


                                                      ¢t   s          ¥ ¥¨yz






with                and      . Let   be the set of all                  q
                                                         


                                                                                     O   Ov


                                       


        


                                                                  2 2


                                                                   p w


                                             M




       J5K                                                                   have been combined to the com-
                                                                    ¥yo


symbols    for the dotted items of grammar . Analogous          ¢¤)¥


                                                                   A


                                                              O&v     O


                                          ¢   ¥ ¥Y>5


                                           
                                              =


to complete items, incomplete items are triples JXK , plete item       and were then blocked at the left resp.


             S)\


                  


         A
                 -




     R[Z                                              right side, with no effect because of the dot positions. Alter-


                                                              ¢t   s        ¥ ¥    ¢t   s        ¥ ¥¨{z
                                                                                                     q




where      or      , or both.                                                  q

                                                                            A          


                                                 ¡


                                                                        2  2                   2  2


                                                                          p w                   p  w



  The island seeds are represented by a set of indices ] natively,                and


                                                                   O  Ohv                   Ohv  O


   ¥ 3!33!¥


  


?
       =_^$D
 =        of the corresponding input symbols. For the is- could have been combined. The second item would have been


                                                      blocked at the right side (instead of left as in the ﬁgure) and


                                                      ¢t   s          ¥ ¥yz
                                                                       q


land parsing algorithm, the chart is divided into regions, such 




                                                                 25p!25w    could not have been built. Instead,


                                                                               ¢t   s         ¥ ¥¨{z
                                                                                               A




that every region contains exactly one seed. The indices of                       


                                                              OEv    O


                                    ¡      ¡


                                      A


                                                                                         2  2


                                                                                          p  w


                                 `ba    `c^  1


                         `                            the resulting incomplete item                 would




                                                                              ¢  ¥¨{X¥yo      ¢¤)¥ ¥yz


the region borders are named , with    ,       and                                                 A


                                                                                    O  v   O


        \     ¥       ¥!3 3!3C¥¨egf


             


                 %d?


                          K


                                                                               2Lw


   Ud`    =    R     8        8hD


=                               . The region between  combine with the input item     to produce      .


      K    KCP
aK seed and its left border is called right substring, because This mechanism synchronizes incomplete items, especially
items in this region are built in a right-to-left top-down fash- those that cross region borders, which guarantees that items
ion. Analogously, there is a left substring to the right of a whose yield contains more than one seed are built in exactly
seed, where items are built from left-to-right, respectively. one manner.                                                                                                                                                                                                               S


                                                                                                                                                                                                                                               S->C.B a5 a6.

                                                                                                                                                                                                                          S->C.B a5.a6
                                                                                           S->.C.B a5 a6
                                                                                                          C                                                                                                       B

                                                                                                                                                                                        A                                B->A                  a4                      S->C B.a5.a6
                                                                             C->.a1.a2                                                                                                                                                      .         .

                                                        0                          a1                         1                      a2                       2                       a3                         3                         a4                       4                         a5                        5                        a6                       6

                                                                              i0=1                                                                                                                                                                                                       i1=5
                                                           p                                                                                                                                                                                                                                                                                                       p
                                                                0                                                                           p1=2                                                                                                                                                                                                                       2


                                                                                                                                                                                                       A->a3..                                        B->A a4..


                                                                                                                                                                                                                                                        ¥!3 3!3!¥                                                                                                                                               s


                                                                                                                                                                                                                                                    


                                                                                                                                                                                                                                                                          25w                                                                                                             .


Figure                  2:        A       decorated                          parse              chart              generated                          by        the          original                    algorithm.                            2                                    are         the          terminal                      (input)                 items,                       ,          ,            and


                                                                           ¥           ¥


                                                                                                                                                                                             


                                                                                                                                                                                                                                                                                                                                                                                                     v


                                                                   `           `           `c|
                                                                                                                                                                        a
        the         nonterminals,                                       a                            the         region                 borders,                     i        and           i       the         seed             indices




proc             add          complete                     }F~_;                                                                                                                                                            /*      combine                    to      the        right           with           complete                     items             */


                                                                                                                                                                                                                                                                                                              ®


               t&7                                                                                                                                                                                                                         };                    ;$«+                                                                                                            }²$«+


                                                                                                                                                                                                                                                             ª¶¢¡                                                                       ª¶¢¡


                                                                                                                                                                                                                                                                                                          ­                                                 °
                                                                                                                                                                                                                                                                                                                                                            £


        if                                        for       some                    then                                                                                                                                                for                                                      £¬                  with                                         block              left                            do


                                                                                                                                                                                                                                                                                                                                                                           !  ª




                                                                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                  };)                                              };bQ 


              /*      seed           dominating:                            block             both           sides            */                                                                                                                   block              left                                   block              left                                       


                                                                                                                                                                                                                                                                                     !  ª¶¦¡


                                                                                                              };b!~gE



              block               right          }t                block               right

                                                                                                                                                                                                                                                                                                    Y_Y«+
                                                                                                                                                                                                                                                                              } 


                                                                                                                                                                                                                                                   add           new                


                                                                                                      };c!~


              block               left       };)                block               left                                                                                                                                        /*      combine                    to      the        right           with           incomplete                         items             */


                                                                                                                                                                                                                                                          ªÃ                                                                     ªÃ


                                                                          u5T_                                     ~                                       


                                                                                                                                                 _  b


              /*      project                step:           add                                                                                                              */


                                                                                                                                                                                                                                                    }        ¿    ;$_«+                          ®                              ¿                                          }²BY«+


                                                                                                                                                                                                                                                                                                                                Ä°
                                                                                                                                                                                                                                                                                         £¬­


                                                                                                                                                                                                                                        for                                                                   with                          £      block              left                            do


                              !  ¢¡


                                                                                                                                                                                                                                                                                                                                                                           !  ª


                                                         Q¤                                             ¥~


                                                                                        ¢¡
                                                 £


              for                                                with                                                         do




                                                                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                  };)                                              };bQ 


                                                                                                                                                                                                                                                   block              left                                   block              left                                       


                                                           !  ¦¡


                                                                                                                                                                                                                                                                                                                                                                                           ªÃ


                                                     }                     ;


                          add          new                 


                                                                                                                                                                                                                                                                                      }²BY«+                                                      }²$_«ÀC                         ¿   
                                                                                                                                                                                                                                                   block              right                                          block              right                                             



        else                                                                                                                                                                                                                                                                         !


                                                                                                                                                                                                                                                                              }          ¿    «


                                                                                                                                                                                                                                                   add           new                


                    §LB¨              7I©t                                                          
              if                  ¡                                               for        some                   then                                                                                                  end


                     /*     right           substring                     :   block              complete                     item           left        */


                                                                                                            }tb!~


                     block              left       }_F                 block              left
                                                                                                                                                                                                                                                                      #


                                                                                                                                                                                                                          proc            add           new          }Å;


                                                                                                                                                                                                                                                                  È


                                                                              


                                                                                 T~                                                             ¨


                                                                                                                              _  ¦¡                  


                     /*     combine                     with                                                                                                             */


                                                                                                                                                                                                                                        ÅnÆ hÇ


                                                                                                                                                                                                                                                             
                                             ª


                                       !                                                                                                                                                                                        if                                       then




                                               ;$_«+                           ®
                                 } 
                                       


                     for                                             £¬­


                                                                                                                                                                                                                                                                                                                                                          }                      


                                                                                                                                                                                                                                        if     ¦É9Ê¯g¦¥¾¯&¥Ë                                                        then            exit           accept


                                                                                                  !   ª


                                                                ¥~©¯g                                                                         }²$«


                                                        
                                                                                                  ±°


                                  with                                                                      £      block              left                            do




                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                        µ


                                                                                                                                                                                                                                               }F          t


                                                                                                                                                                                                                                                                              °            ­


                                                                                                                                                                                                                                        if                                    £g¬                then


                                                                                                                                                                        !  ª


                                                                   }²$«+                                                      }²$«bC                             


                                                                                                                                                                       


                                                                                                                                                                                                                                                                      µF      h}F¦$_;_


                                block              right                                          block              right                                                                                                                       µF


                                                                                                                                                                                                                                              ¬      ­               ¬      ­


                                                                     ¨


                                                                         ¡  ª


                                                           }                    Y__«
                                                                 


                                add          new                                                                                                                                                                                              add           complete                    }Fu$;


                                      t&7I[§X                                                                         


              else            /*                                                         ¢¡       for       some                    */                                                                                           else




                                                                                                                                                                                                                                               }ÅY_t
                                                                                                                                                                                                                                                                                    µ


                                                                                                                                                                                                                                                                           °
                                                                                                                                                                                                                                                                                        ­


                     /*     left        substring                     :   block             complete                      item           right           */                                                                             if                                 £g¬               then


                                                        };                                                 }_FcC~




                                                                                                                                                                                                                                                                        µF
                                                                                                                                                                                                                                                 µF




                                                                                                                                                                                                                                                                                 h}Å_;_
                                                                                                                                                                                                                                                            




                                                                                                                                                                                                                                                                            ­
                                                                                                                                                                                                                                                     ­
                                                                                                                                                                                                                                                                     ¬


                     block              right                                    block              right                                                                                                                                     ¬


                                                                       u5T                         '                       ~7


                                                                                                                         _  ªo


                     /*     combine                     with                                                                                                     */                                                                           add           incomplete                        }Å;


                                       !   ª




                                               «³t                      ®´     µ
                                 } 
                                       


                     for                                             £¬                                                                                                                                                  end


                                                                                                         C  ª


                                                      ª¶¢¡9~g·¯g                                                                                   }«[Yt
                                                                                                        ±°


                                  with                                                                             £     block               right                              do


                                                                                                                                                                                                                                                                            C  ª


                                                                                                                                                               C  ª


                                                                                                                                                                                                                                                                     }             t


                                                                                                                                                                                                                                                                           




                                                                                                                                                                      
                                                               }«[t)                                                 }«³¤tb+Q 


                                block              left                                      block              left                                                                                                     proc            l-predict


                                                                  !  ª¶¦¡




                                                                                                                                                                                                                                                                                                                                       }t
                                                                                                                                                                                                                                                               ~Ì¯




                                                                                                                                                                                                                                             _  
                                                                                                                                                                                                                                                                                    _  


                                                                                                                                                                                                                                                                                               °
                                                                                                                                                                                                                                                        £


                                                                                                                                                                                                                                  if                                                           £      predict                left                 then


                                                                                 «³;
                                                           } 


                                add          new                 


                                                                                                                                                                                                                                                                           }t)                                               }tÀ!                       
                                                                                                                                                                                                                                                                                                                                                                


end                                                                                                                                                                                                                                     predict                left                            predict                left                                 _


                                                                                                                                                                                                                                                       ÈCÍz     ÈCÍ


                                                                                                                                                                                                                                                                                                Î


                                                                                                                                                                                                                                                       Î


                                                                                                                                                                                                                                                                                                     l           


                                                                                                                                                                                                                                        for                               with                                                do


                                                                                                                                                                                                                                                                                                             Í         Í


                                                                                                                                                                                                                                                                                                          È        È



                                                                       !   ª


                                                                                                                                                                                                                                                                                                         Î
                                                                                                                                                                                                                                                                                                                           _¤


                                                                                                                                                                                                                                                   add           incomplete                        } 


                                                                 }            _;


                                                                       
                                                                                                                                                                                                                                                                                              ÈCÍ




proc             add          incomplete                                                                                                                                                                                                                                            È!Íh


                                                                                                                                                                                                                                                                                    Î


                    !  ª
                                                                                                                                                                                                                                                                                                      t


                                                                                                                                                                                                                                                   l-predict                  } 


                                        




                 
                              B             ¹¸Q¸¸_                                                      ¸¸¸                                           ¸¸¸


                                                                                        ¢¡                       _  ªº           _  ª¶¢¡


        /*                                                                                                                                                                */
                                                                                                                                                       ª


                                                                                                                                                  C                                                                     end


              §X$¨              ©j©¤                                                                                                }             t
                           ¡


        if                                                    for       some                    then            l-predict                        


                                                                                                                                           !  ª




               t&»&[§X                                                                                                       }             F
                                                                                                                                                                                                                                                                            !  ª


        if                                             for       some                    then            r-predict                        




                                                                                                                                                                                                                                                                     } 
                                                                                                                                                                                                                                                                                    t+


                                                                                                                                                                                                                                                                           
                                                   ª


                                             !                                                                                                                                                                          proc            r-predict


               ¼½¾¯,                                                                      }t


                                             
                                                        °


        if                                              £     block               left                        then


                                                                                                                                                                                                                                                                     ~Ï¯                                                                              }t


                                                                                                                                                                                                                                             _  ª¶¦¡                                     ª¶¢¡


                                                                                                                                                                                                                                                                                                            °
                                                                                                                                                                                                                                                                                                           £
                                                                                                                                                                                                                                  if                           £                                                  predict                right                     then


              /*      combine                     to     the        left        with           complete                      items             */


                                                                                                                                                                                                                                                                               }t                                                   }tb+!                              
                                                                                                                                                                                                                                                                                                                                                                        ª¶¦¡


                                                                                                                                                                                                                                        predict                right                               predict                 right                                    _


                                                                                                                                                                                                                                                           


                                                                          ®´    µ


                          };              Y«³t                                                                                                         }«³t


                                                                                                        


                                                                                                                      °
                                                                                                                     £


              for                                               £¬                   with                                  block              right                              do


                                                                                                                                                                                                                                                                                       Î


                                                                                                                                                                                                                                                       Î


                                                                                                                                                                                                                                                       Ç    Ç


                                                                                                                                                                                                                                                                                            9


                                                                                                                                                                                                                                                                                                            ª¶¢¡
                                                                                                                                                               ª



                                                                                                                                                          !                                                                           for                      with                                                      do


                                                                                                                                                                                                                                                                                                             


                                                            }_F                                                  }tbC 
                                                                                                                                                                  


                          block              right                                      block              right                                         


                                                                                                                                                                                                                                                                                                         Î


                                                                                                                                                                                                                                                                                                          Ç    Ç




                                                                                                                                                                                                                                                                                                   }             _¤



                                                               ¨                                                                                                                                                                                   add           incomplete

                                                                   ¡ ª


                                                                                                                                                                                                                                                                                        


                                                     }                    «[;


                          add          new                 


                                                                                                                                                                                                                                                                                    Î


                                                                                                                                                                                                                                                                                     Ç    Ç
                                                                                                                                                                                                                                                                                             _¤
                                                                                                                                                                                                                                                   r-predict                  } 


              /*      combine                     to     the        left        with           incomplete                         items             */                                                                    end


                                                                                                            


                          } h¿            «³Y¤                      ®´    µ                    h¿                                                      }«[t


                                                                                                                   °
                                                                                                                     £
              for                                               £¬                  with                                  block               right                              do


                          /*     block              both           incomplete                         items             appropriately                             */                                                              The            procedures                            l-predict                     and           r-predict                      recursively                           generate


                                                                                                                                                             


                                                        }«³Y¤                                                 }«³Y¤ÀQ º¿
                                                                                                                                                                  


                          block              left                                      block              left                                                                                                           top          down                predictions                            for        an        incomplete                             item,              to       both            sides,               if


                                                                                                                                                          !  ª


                                                            }_F                                                  }tbC                          


                          block              right                                      block              right                                                                                                         the          item              is      dominating                               a      seed,               to        the          left,           if      it      is      in        a      right


                                                                ª


                                                           ¿


                                                     } 
                                                                    «[;


                          add          new                                                                                                                                                                               substring,                         and           to       the          right             otherwise.                            They               keep              track              of       the


                                                !  ª


                                


               Á¢©Â                 ¯                                                            };


                                               


                                                          °
                                                          £
        if                                                      block               right                           then                                                                                                  predictions                            generated                         so       far        using               two            arrays                of       length                 1[698             ,storing the nonterminals for which left or right predictions word graph must be rejected. Since all input items were
have been introduced at a speciﬁc chart node.         added to the priority queue in the beginning, it is also guaran-
  The loops at chart node 3 and 4 in ﬁgure 2 have been gen- teed that every sub-path of the word graph has been processed
erated by l-predict. Items that lie completely in right or left properly if parsing should stop with a failure. Every input


substrings stem from these top down predictions, like the item item will then have a non-neutral state, which means that it at


             
                   25Ð


labeled with   .      or the complete item with label . least took part in some of the derivations.


                 O   O                          v
  [Satta and v Stock, 1994] give a more formal description of The procedures l-predict and r-predict are the same as in
the algorithm, including an invariant describing its behaviour. the original algorithm, and are omitted here.


3  Modiﬁed    Algorithm                               proc add complete }F~_;



In the modiﬁed algorithm, instead of ﬁxing seed and border if state }F~t seed then


                                                                          


                                                                          T_  ~ j_ b¢
                                                                                         


                                                          /* project step: add                   */
                                                               ¢¡


indices in advance, every chart item is assigned a state, which !


                                                                     ¤


                                                                               ¥~


                                                                             ¢¡
                                                             


                                                          for     £    with           do
                                                                      ¦¡


is one of right substring, left substring or seed dominating         !




                                                                         ;$
                                                                   }               
                                                            add new         seed seed
(right, left and seed in the pseudo-code, respectively). Addi-

                                                        elsif state }F~t right then


tionally, complete items with a terminal category, i.e., input


                                                                        uLTQ_~  Q 


                                                                                       ¢¡ 


                                                            /* combine with                     */
                                                                  ª


items, can have neutral state, in fact, they are given this state !


                                                                            ®


                                                               }  ;$«+


                                                                
                                                                          ­


                                                            for         £¬
                                                                                ª


during initialization.                                                         !


                                                                      9~g·¯            }²$«


                                                                    _ 


                                                                               
                                                                                  °


                                                               with               £ block left  do


                                                                        ¨


                                                                         ¡ ª            C ª


  Because the search strategy of the parser shall be adapt-            


                                                                     }    _«³   }  ;$«
                                                                                         


                                                              add new          right state
                                                                                                  ª


able, a priority is assigned to every item, which is used in                                    !




                                                                                                  
                                                                       }²$«+     }²$_«+X+C 
                                                              block right      block right      




connection with a priority queue (an agenda) to expand the elsif state }F~t left then


                                                                        uLTQ Q' ~g»


                                                                                      ªº


best items ﬁrst. The assignment of priority values is omitted /* combine with                 */


                                                                ! ª


                                                                          ®´ µ


                                                               }  «³Y¤
                                                                


here for the sake of clarity.                               for         £¬


                                                                                 ! ª


                                                                       9~©¯g             }«³t


                                                                    _ ª¶¢¡
                                                                                ±°


  During initialization, all input items are added to the chart, with              £ block right  do


                                                                       ! ª¶¢¡         ! ª




                                                                           «³FB       «³t
                                                                     }               } 
                                                                                        


their state is set to neutral and they are added to the priority add new       left state


                                                                                              ! ª


                                                                      }«[t   }«[tbC  
queue. Parsing then continues by taking the highest ranked    block left      block left      
item from the priority queue and expanding it. A seed is end
selected when a neutral terminal item is retrieved from the


queue. Its state is updated to seed dominating, i.e., the item


                                                                        ! ª


                                                                          _;
                                                                      } 


itself becomes a seed. This puts seed selection on a level with proc add incomplete 


                                                           ! ª


                                                             BuÒ¹¸Q¸¸_    ¸¸¸     ¸¸¸


                                                                           ¢¡ _ ªº _ ª¶¢¡


the expansion of items, simplifying the implementation of a /*                                  */


                                                               ! ª                          ! ª


                                                             }  Y_t               }  Y¤


                                                                                             


search strategy, owing to uniformity.                   if state     £  seed right then l-predict


                                                               ! ª                         ! ª




                                                                 Y_t                    ;
                                                             }                          } 


                                                                                            


  If terminal items are neutral when they are combined with if state £  seed left then r-predict


                                                                 ! ª


                                                          ¼½¾¯,           }t
                                                                 ±°
another item in the ﬁrst or third for loop of the modiﬁed if        £ block left then


add incomplete procedure, they change state accordingly, ei- /* combine to the left with complete items */


                                                             }; Y«³t ®´ µ


                                                                
                                                          for         £¬


ther to left or right, depending on whether the incomplete


                                                                    };  «³¤t       


                                                                      _ 
                                                             with state       £ right neutral do


item grew to the left, in which case the item is now member
                                                                     º«[t
                                                            if state }; neutral


of a right substring, or vice versa. When such a terminal item


                                                                      }; _«[Yt 
                                                                         


                                                              then state       right


                                                                      ¨


                                                                       ¡ ª                    C ª


is retrieved from the priority queue later during parsing, its       


                                                                   }    «[;$ }; «[Yt }  ;


                                                                                    
                                                                                                


                                                            add new          state        state
                                                                                              ª


state is already set and it does not become a seed.                                         !


                                                                     }_F    }tbC  
                                                            block right     block right     


  Any other complete or incomplete combined items inherit /* combine to the left with incomplete items */


                                                                                




                                                                        ®´ µ
                                                              ¿                 ¿




                                                                 «³Y¤
                                                             }                               }«[t


                                                                               


                                                                                   °
                                                                      £¬


their state from their daughters: if at least one of the daugh- for        with    £ block right   do




                                                                       ª          
                                                                                               C ª


                                                                     ¿           ¿




                                                                       «[;$    «[t
                                                                   }           }           }  ;


                                                                                


ters is seed dominating, the new item becomes seed domi-    add new         state        state 


                                                                                              




                                                                    }«³Y¤   }«³Y¤ÀQ 
                                                                                              
                                                                                            ¿


nating too, otherwise all daughters are members of the same block left      block left      


                                                                                            ! ª


                                                                     }_F    }tbC  


substring, and the new item gets assigned the same state.   block right     block right     


                                                                  ! ª


                                                              


                                                          Á¢©Â ¯             };


                                                                  
                                                                     °
  All conditionals that use the seed and border indices in the if   £ block right  then


original algorithm are replaced by conditionals checking the /* combine to the right with complete items */


                                                                            ®


                                                             };  ;$«+


                                                                ª¶¢¡
                                                                          ­


state of the items. As a consequence, the seed and border for           £¬


                                                                    };   ;$«      


                                                                      _ ª¶¦¡


indices are no longer needed.                                with state         £ left neutral do


                                                                  };  FBY«+j
                                                                     ª¶¦¡
                                                            if state        neutral



  Instead of a string with 1 elements, the parser gets a word


                                                                         ª¶¦¡QFBY«+ 


                                                              then state };   left


                                                                      ª¶¦¡        ! ª


graph as input. A word graph is an acyclic directed graph            !


                 ¢ ¥ ¥¤>5


Ñ


                                                                   }    Y_Y«³ }  Y_F }; ;$_«


                                                                                               _ ª¶¢¡
                                                                                   


                                                            add new         state        state


                  2 =
                                                                                            ª


   of terminal items    with exactly one source and one                                   !


                                                                    };)   };bQ 
                                                                                            
sink node (nodes with in-degree resp. out-degree zero). The block left     block left     


                                                          /* combine to the right with incomplete items */
                                                                                       ªÃ


start and end node indices of the input items are typically in ªÃ


                                                             }  ¿ ;$_«+  ®©¯Ó  }  ¿ ;$_«+


                                                                                      


                                                          for         £¬­   block left       do


                                                                                 C ª       ªÃ


topological order, so that the source node gets index zero and       !


                                                                   }  ¿ «[ }  t }  ¿ ;$«+


                                                                                            


                                                            add new        state       state
                                                                                            ª


the sink the maximal end node index of all input items, which                             !


                                                                    };)   };bQ 
                                                                                            


                                                            block left     block left     
                                     1


in the modiﬁed version becomes the value of .                                                 ªÃ


                                                                     }²BY«+     }²$_«ÀC  ¿ 
                                                            block right      block right      
  Parsing stops when either a complete derivation was found end
or the priority queue becomes empty, which means that the

           #


           }Å;$Ô _Ô 
                        ¬YÕ¬YÖ Ø


proc add new      ¬YÕ¬YÖ×                           4.1  A new  left substring ends in a right substring


          È


                                                                                                >


                       


   ÅnÆ hÇ      ÅÙ l


  if       then                                      In this situation, which is depicted in ﬁg. 3, node behaves


                              }    


  if Ån9Ê¯,¦¥¾¯&9Ë then exit accept


                                                                                       Þ      Þ$|


                                                      like a new border node between seed a and . Because


   }Å; µF


          °
              ­
  if      £¬  then


                                                      of the completeness of the original algorithm, all possible


     Ô          ÚÔ    
                   ¬¤Õ¬Ö!Ø
   if ¬¤Õh¬YÖB× seed      seed then



                                                      derivations compatible with the seed ÞBa must be available at


         }Å;) 
     state        seed                                     >


   else                                               node  , although some of them may be blocked. Assume we


       Ô    


     if ¬¤Õh¬YÖB× right                               lose a complete derivation because of an indispensable in-
                     


      then state }Åt right                complete item that is blocked on the left side (like the item


            }Å;) 


     else state      left                             labeled . in ﬁg. 3). If this is the case, there must be ancestor


    µF   µF h}Åt_


   ¬ ­   ¬ ­


                                                      items of . whose creation caused the blocking. One of these
                     
   push }}Å; p queue                     ancestors, ultimately the one that ends in the sink node2, is
end                                                   available for combination at node > , which is a contradiction.




proc main };ÛÜ


     } ; Û
           £


  for Õ        do                                                                        A


     µ   µ +} Y_F_


    ¬ ­   ¬ ­   Õ


        } Yt) 


    state Õ      neutral


        }} ¤t 
    push  Õ     p queue


                                                                          k         j


             }     


  while Ó empty p queue do                                 s1                                      s0


                      }      
       }Å;) pop max p queue


                                                                         s


              ¯    }Å;
        Å                                                                 2


      if  £Ý   state       neutral then
                   


        state }Å;) seed


        Å   ~T                 }Åt
                Ý
      if  £       then add complete                   Figure 3: A new left substring ends in a right substring. The




      else add incomplete }Å;               thick arcs are items that are expanded later in the parsing pro-


     }    
  exit reject                                         cess. R is the old border node.
end
                                                        As was argued above, redundant items can only occur rela-
4  Correctness   of the modiﬁed  algorithm            tive to a path of input items through the word graph. Since the


If Ñ contains only string input and priorities are set appropri- same synchronization of items was used for the path through


                                                                        >


                                                       |
                                                            Þ a
ately to select the right seeds, the modiﬁed algorithm works Þ and with border as in the string method, the chart must
like the original. This is achieved by using the maximal pri- be free of redundancy for this path too.
ority value for all seed input items, the minimal value for all A special case of the conﬁguration described in this section
other input items, and priority values strictly between these is given when the new sub-path hits the old border node (e.g.,

values for all other items. Thus, seeds will be considered node R in ﬁg. 3). In this case, it is obvious that all, and only
ﬁrst and appropriately marked, and other input items will be the correct derivations will be created.
considered after all possible combinations have been tried in
some order, which is consistent with the original.    4.2  A new  left substring ends in a left substring
  It remains to be shown that in case of true word graph in-
put, the algorithm will still be correct and redundancy-free.
New situations arise from the fact that there are parallel sub-
paths of neutral input items to previously treated regions of
the chart, and new, possibly derived items can now interact
                                                                               j
with existing ones created from previous expansions.           s0
  The argumentation will be based on the respective prop-
erties of the original, which can not be shown here. It is         s2
clear that sub-derivations with equal span and item label may
be produced because of the ambiguity in the word graph in- Figure 4: A new left substring ends in a left substring


put. These items are not redundant because they have dif-                             >
                                                        All complete items starting at node in ﬁgure 4 are avail-

ferent yields. The type of redundancy that must be avoided                                        >


is the multiple creation of identical items with both identical able to the new sub-path. Every derivation starting at that is


                                                                               ÞB|                    Þ
derivation and yield, which could be produced by an incorrect compatible with the new seed but not with the old one ( a )
implementation of the island algorithm due to bidirectional- will be constructed by the appropriate predictions and expan-
ity and multiple seeds. Redundancy can therefore only occur sions, and since the predict methods keep track of which non-
relative to a path through the word graph.1           terminals have already been predicted, no work is duplicated
  Although there are six cases in total to be considered (three and thus, no redundancy is produced. For blocked incom-
each for left and right substrings), the treatment of left and plete items, the same argumentation as in 4.1 applies, which
right substrings will be completely analogous, so we will con- guarantees completeness.
tent ourselves with the discussion of the former.
                                                         2Incomplete items ending in the sink node can not be blocked at
  1For an in-depth description of the redundancy problem on the left side because there is no item to the right they can combine
strings and formal proofs, see [Satta and Stock, 1994] with.