          Efﬁcient Failure Detection on Mobile Robots Using Particle Filters
                               with Gaussian Process Proposals
               Christian Plagemann    1         Dieter Fox  2        Wolfram Burgard     1
            1 Albert-Ludwigs-University                        2 University of Washington
          Department of Computer Science            Department of Computer Science & Engineering
                 Freiburg, Germany                                  Seattle, WA, USA
   {plagem,burgard}@informatik.uni-freiburg.de                   fox@cs.washington.edu

                    Abstract                          have been proposed. In this paper, we propose an alterna-
                                                      tive approach, in which Gaussian processes (GP) are used to
    The ability to detect failures and to analyze their learn proposal distributions that represent informed guesses
    causes is one of the preconditions of truly au-   about the failure mode and its parameters. We demonstrate
    tonomous mobile robots. Especially online fail-   how GP classiﬁcation can be used to predict discrete failure
    ure detection is a complex task, since the effects modes and how GP regression can be used to model continu-
    of failures are typically difﬁcult to model and often ous failure parameters. Since Gaussian processes provide full
    resemble the noisy system behavior in a fault-free predictive distributions including the predictive uncertainties,
    operational mode. The extremely low apriorilike-  they can readily be used as proposal distributions in the parti-
    lihood of failures poses additional challenges for cle ﬁlter implementation. By including the most recent sensor
    detection algorithms. In this paper, we present an measurements received by the robot, these proposals can be
    approach that applies Gaussian process classiﬁca- seen as an approximation of the optimal proposals for the re-
    tion and regression techniques for learning highly spective state variables.
    effective proposal distributions of a particle ﬁlter Our system does not require additional hardware such as
    that is applied to track the state of the system. As a inertial sensors or bumper rings, which may be expensive
    result, the efﬁciency and robustness of the state es- or otherwise unfavorable in certain domains, e.g., for aerial
    timation process is substantially improved. In prac- blimps. The proposed algorithm has been implemented on
    tical experiments carried out with a real robot we a real robot and can be executed in real-time. We discuss
    demonstrate that our system is capable of detecting results from several test runs in realistic scenarios in which
    collisions with unseen obstacles while at the same we compared the achievable detection rates and pose track-
    time estimating the changing point of contact with ing quality of our system with an optimized standard particle
    the obstacle.                                     ﬁlter implementation without informed proposals.
                                                        This paper is organized as follows. After discussing related
1  Introduction                                       work, we describe particle ﬁlters for sequential state estima-
The detection of and reaction to unforeseen failure events tion and failure detection in Section 3. Our Gaussian process
is a fundamental ability for autonomous systems as an im- proposals are introduced in Section 4, followed by the exper-
proper treatment of such situations may cause loss of control imental results.
and can possibly harm the system or the environment. Con-
sider, for example, a mobile service robot that collides with a 2 Related Work
low doorstep or a planetary rover that hits an unforseen small The close coupling between a mobile system and its environ-
rock. In such situations, the mobile robot should be able to (a) ment makes it hard to detect abnormal behavior using instan-
detect the unexpected event quickly and (b) to infer the cause taneous statistical tests only without tracking possible failure
of the event in order to react appropriately. Many successful modes over time [Dearden and Clancy, 2002]. For this rea-
previous approaches to the online failure detection problem son, probabilistic state tracking techniques have been applied
are based on the sequential Monte-Carlo method. They typi- to this problem. Particle ﬁlters represent the belief about the
cally track multiple system modes in parallel before they de- state of the system by a set of state samples [Thrun et al.,
cide on the most probable one. A crucial problem for such 2005]. In particle ﬁlter based approaches to fault diagnosis,
sampling-based approaches especially in real-time scenarios, the system is typically modeled by a non-linear Markov jump
however, lies in the high dimensionality of the state space process [Driessen and Boers, 2004] or a dynamic mixture of
to be tracked and the low frequency and unpredictability of linear processes [de Freitas et al., 2003]. The look-ahead par-
failure events. To increase the efﬁciency of sample-based ticle ﬁlter introduced in the latter work also approximates the
representations, different techniques such as lookahead sam- optimal proposal distribution by considering the most recent
pling [de Freitas et al., 2003], risk sensitive sampling [Thrun sensor measurements, but in contrast to our work focuses on
et al., 2001], and hierarchical sampling [Verma et al., 2003] the case of discrete failure modes without continuous failure

                                                IJCAI-07
                                                  2185                                                      to include the discrete failure mode ft, the continuous failure
                                                      parameters ot, and the remaining part of the robot’s state xt.
                                                      We assume the commonly used constant failure rate model
                                                      (see [Ng et al., 2005]), where the failure event itself does not
                                                      depend on the rest of the system. The right diagram of Fig-
                                                      ure 1 shows the underlying graphical model. Since the ob-
                                                      servations are independent of the failure state (ft,ot) given
                                                      the state xt of the robot, the observation model simpliﬁes to
Figure 1: Graphical model for the dynamic system in an ab- p(zt | st)=p(zt | xt). The transition model can be factor-
stract view (left) and a more detailed form (right) where the ized as
             t
system states s are split up to include the discrete failure p(st | st−1,ut−1)=p(xt,ft,ot | xt−1,ft−1,ot−1,ut−1) (2)
mode ft, the failure parameters ot, and the robot’s state xt.
                                                           =  p(ft | ft−1) · p(ot | ft,xt−1,ot−1) · p(xt | ot,xt−1,ut−1) . (3)
                                                              |  {z  } |      {z     } |     {z      }
parameters. Benanzera et al. [2004] combine consistency-      failure event model failure parameter model robot motion model
based approaches, i.e., the Livingstone system, with particle The constant failure rate model states that failure events are
ﬁlter based state estimation techniques. Verma et al. [2003] distributed exponentially depending on a failure rate parame-
introduce the variable resolution particle ﬁlter for failure de- ter λ by
tection. Their approach is to build an abstraction hierarchy of        ( )=1−    −λ·(t−t˜)
system models. The models of consideration build a partition          p ft      e        ,            (4)
                                                            ˜
of the complete state space and the hierarchy is deﬁned in where t denotes the time of the last failure event. It can eas-
terms of behavioral similarity. A different kind of model ab- ily be shown that for such a model, the mean time between
                                                                             = 1
straction hierarchy based on explicit model assumptions was failures becomes MTBF λ . For realistic failure rates λ,
developed in [Plagemann et al., 2006] to detect failures on- this model results in extremely low failure probabilities per
line. Other approaches that deal with the time efﬁciency of ﬁlter iteration. Assume, for example, a mean time of 30 min-
                  [               ]                   utes between collisions of a service robot with unseen obsta-
particle ﬁlters include Kwok et al., 2002 in which real-time                  1
constraints are considered for single system models.  cles. This implies λ = 1800s =0.0005 and with a ﬁlter
  Gaussian processes have been widely studied in the Ma- frequency of δt =0.1 seconds yields a failure probability of
chine Learning community. Excellent introductions have p(ft |¬ft−1) ≈ 0.000056 within one iteration. For such
been given by [MacKay, 1998] and [Rasmussen, 1996]. [Gi- a small value, just one of 20, 000 particles would jump to a
rard et al., 2002] present a Gaussian process based model for failure mode on average. Thus, one would either need an ex-
multiple step ahead prediction of time series. Classiﬁcation tremely large particle set or would risk that failures remain
models are discussed in [Neal, 1997]. [Schwaighofer et al., undetected. This problem is ampliﬁed by the fact that not
2003] present an application of Gaussian processes to local- only the discrete failure mode has to be sampled, but also
ization using signals of a wireless phone network.    the unknown continuous failure parameters. Since in general,
                                                      there is no prior knowledge about the parameters of randomly
3  Sequential State Estimation                        occurring failures, we assume a uniform distribution
                                                               (   |           )=U           (  )
The temporal evolution of dynamic systems such as mobile      p ot  ft,xt−1,ot−1    [omin,omax] ot    (5)
robots can be described using the graphical model depicted over a certain interval. Note that this model applies only to
in the left diagram of Figure 1. In this ﬁgure, t denotes the
                                       s              the case where the system transitions into a failure state. The
state of the system at time t, zt stands for received sensor
                                                      evolution of failure parameters within a failure state is typi-
measurements, and ut is the issued control command. Given
the modeled independence assumptions, the state of the sys- cally governed by a much more peaked distribution similar to
tem can be evaluated recursively using the Bayes Filter for- the motion model of the robot. In Section 5, we describe our
malism [Thrun et al., 2005]                           model for the evolution of collision parameters based on rigid

 p(st | z0:t,u0:t−1)                                  body dynamics. This model is able to track collisions sufﬁ-
              Z                                       ciently accurate, if the initial collision parameters have been
   = ηt p(zt | st) p(st | st−1,ut−1) p(st−1 | z0:t−1,u0:t−2) dst−1.(1)
      |  {z }  |     {z    } |      {z      }         estimated well enough. The main focus of this work therefore
      observation model transition model recursive term is to improve the detection of failure events and to efﬁciently
Particle ﬁlters are widely used as a sample based implemen- estimate the initial parameters.
tation of this recursive ﬁlter. They represent the state of the To address the problem of low sampling probabilities for
                                      [i] [i]
system by a set of weighted samples X = {st ,wt }. With important parts of the state space, [Thrun et al., 2001] in-
the sample-based representation, the integral in Equation 1 troduced the risk sensitive particle ﬁlter that incorporates a
simpliﬁes to a ﬁnite sum over the samples resulting from the learned risk function to force the ﬁlter into less likely but
previous iteration. The transition model and the observation important states. While this approach ensures a reasonable
model can be applied directly to predict and weight the indi- amount of samples in the important failure modes, it cannot
vidual samples respectively.                          adapt to the speciﬁc situation the robot is in when the sam-
                                                      pling decision is made. We therefore propose to use learned
3.1  Modeling Failure Events and Parameters           proposal distributions to be able to make informed guesses
For dynamic systems under the inﬂuence of external or inter- about the discrete failure mode and the continuous failure pa-
nal failure events, the state st of the system can be split up rameters online.

                                                IJCAI-07
                                                  21863.2  Data-driven Proposal Distributions               can easily be sampled from, and provide the transition prob-
In the sequential importance sampling scheme (see [Doucet, abilities needed for the weight correction described above.
1998]) an arbitrary proposal distribution can be used to di-
rectly sample the relevant areas of the state space as long 4 Gaussian Processes Proposals for Discrete
as (a) all possible states have a non-zero possibility of be- and Continuous State Variables
ing chosen and (b) the importance weights of the particles
                                                      Gaussian processes are a powerful tool for learning and rep-
are adjusted appropriately. Proposal distributions that depend
                                                      resenting full predictive distributions for non-linear func-
on the most recent sensor measurements or on features ex-
                                                      tions [Rasmussen, 1996] and have also proven successful in
tracted by separate algorithms are typically denoted as data-
                                                      solving classiﬁcation problems. Given a training set and pri-
driven proposals or detector-mediated proposals (see [Khan
                                                      ors on the function to be learned, the Gaussian process model
et al., 2004]). Such proposals aim at approximating the opti-
                                                      allows to predict function values at new input locations and
mal proposal p(st | st−1,zt,ut−1) which fully includes the
                                                      also supplies predictive uncertainties. We ﬁrst introduce the
most current sensor measurement zt. With the process model
                                                      regression and classiﬁcation models as well as their role in
deﬁned in Equations 1 and 3, the weight for particle i at time
                                                      the general failure detection setting described above. In Sec-
t becomes
                                                      tion 4.3, we then describe a speciﬁc application in detail, the
            [i]              [i]         [i]
 [i]     p(s1:t | z1:t) p(zt | s1:t,z1:t−1) p(s1:t | z1:t−1) detection and tracking of collision events for mobile robots.
wt   =              =
          ( [i] |  )       (  |     )  ( [i] | )
         π s1:t z1:t      p zt z1:t−1 π s1:t z1:t 4.1  Non-linear Regression
                             =:1/η                    Assuming a non-linear functional dependency g between m-
                  [i]   [i] [i]      [i]              dimensional input vectors y1,...,yn and real-valued targets
            p(zt | s ) p(s | s )  p(s    | z1:t−1)
     =    ·       t     t   t−1 ·    1:t−1            t1 ...,tn such that ti = g(yi)+i for independent error
         η      [i]  [i]             [i]
             π(s   | s   ,z1:t)   π(s    | z1:t−1)    terms i, the task is to predict future targets tn+j at new
                t    1:t−1          1:t−1    
                                                      input locations yn+j. The idea of Gaussian processes is to
                                      =w[i]
                                         t−1          view all target values t1,...,tn+j as jointly Gaussian dis-
                               [i] [i] [i]            tributed with an (n + j)-dimensional mean and a covariance
                             (   |        )                          
     =    ·  [i] · ( | [i]) · p xt ot ,xt−1 ·         cov(t, t )=k(y, y ) speciﬁed via a kernel distance function
         η wt−1  p zt st       [i] [i] [i]
                            π(xt | ot ,xt−1)          k on the input vectors. Predictions for a new query point
                                                      yn+1 can thus be performed by conditioning on the known
          ( [i] | [i] ) ( [i] | [i] [i] [i] )
         p ft  ft−1  · p ot ft ,xt−1,ot−1             target values t1,...,tn,see[Neal, 1997]. The mean μ and
              [i]            [i] [i]             (6)           2
                                                                                                      n+1
         πf (ft | Ft)    πo(ot | ft ,Ft)              variance σ of the Gaussian predictive distribution for t
                                                      turn out to be
where π is the proposal distribution forto the transition model                          T  −1
deﬁned in Equation 3 with the failure event model exchanged  μ = E(tn+1 | t1,...,tn)=k    C   t       (7)
                                                             2                               T  −1
for πf and the failure parameter model exchanged for πo.    σ  = V (tn+1 | t1,...,tn)=v  − k  C   k   (8)
Here, πf and πo are the learned proposal distributions for the
                                                                  ×                                     t
discrete ft and the continuous ot respectively. The control with C the n n covariance matrix for the given targets,
                                                                                                    k
commands ut have been omitted for clarity, they are straight- the n-dimensional vector of given target values, and the
forward to include. The normalizing factor η is constant for n-dimensional vector of covariances between the new target
all particles i.Furthermore,Ft denotes an arbitrary feature value tn+1 and the known targets t1,...,tn.
vector extracted at time t. Any feature vector Ft as well as In our failure detection setting, we can use this regression
any functions f and o can be used for this task as long as model to predict the continuous parameters of new failure
            π     π                                                                                 y
the assumptions                                       events. We take extracted features Ft as input vectors and
  •   (  |  ) =0             ( |          ) =0      failure parameters ot as targets t. Given a training set of such
    πf f  Ft     for all f with p f s1:t,z1:t−1       quantities and a properly chosen covariance function k,we
  • πo(o | ft,Ft) =0for all o with p(o | s1:t,z1:t−1) =0. can compute the predictive distribution πo(ot | ft,Ft):=
                                                      N (   2)
hold, which means that all possible failure states have to be μ, σ as detailed in Equations 7 and 8. This (normal) dis-
assigned a non-zero probability of being chosen. Visually tribution naturally meets the requirements for proposal dis-
speaking, Equation 6 states that after each ﬁlter iteration, the tributions named in the previous section. It can be sampled
particle weights have to be multiplied with the current obser- from directly, it supplies the likelihoods of sampled values, it
                      [i]                             has an inﬁnite support, and it therefore only assigns non-zero
vation likelihood p(zt | s ) and with two correction terms
                      t                               likelihoods.
for the two learned proposal distributions. To calculate these
                                [i]                     An important aspect that has been left out so far is the
correction terms for a speciﬁc sample st , we divide the prob- choice of covariance function and how its parameters can be
abilities deﬁned in Equations 4 and 5 by the likelihoods ac- set. The covariance function plays an important role in the
                                [i]    [i]
cording to which the state variables ft and ot have been Gaussian process framework as it represents the prior knowl-
drawn from πf and πo. Another precondition for the learned edge about the underlying function g. By changing its form
proposals therefore is the availability of likelihoods for sam- and parameters, one can control the generalization behavior
pled values. As we will see in the next section, Gaussian pro- and smoothness of the predictor. A common choice of covari-
cesses always ensure the non-zero probability assumptions, ance function (see [MacKay, 1998])thatisalsousedinthis

                                                IJCAI-07
                                                  2187      1.5                                                                0.3
            not f (no collision)                                                      Regression result
                f (collision)                                           0.25 Training data (difft  v= -0.4 +/- 0.1)
       1
                                                                         0.2
      0.5                                                      0.03     0.15
                                                               0.025
                                 0.03                          0.02      0.1
                                 0.025
       0                         0.02                          0.015
                                 0.015                         0.01
   Diff  vt                      0.01                                   0.05
                                 0.005                         0.005
     -0.5                          0                           0          0
                                                           -1.5      Contact  point [m]
                                  1.5                     -1           -0.05
      -1                             1                 -0.5
                                      0.5                               -0.1
                                         0             0
                                     Diff vr -0.5   0.5 Diff vt
     -1.5                                          1                   -0.15
       -1.5 -1 -0.5  0  0.5  1  1.5         -1                           -2.5 -2 -1.5 -1 -0.5  0  0.5  1  1.5  2  2.5
                Diff vr                                                              Diff vr [m/s]

Figure 2: The collision event training set where two feature values are mapped to class instances (left), the learned class prob-
abilities πf (Ft) using Gaussian process classiﬁcation (middle), and the learned regression model for the collision parameters
visualized by a cut through the 2-dimensional pdf that maps velocity deviations to contact points for a collision (right).

work is                                               and without additional hardware like bumpers or inertial sen-
                                                    sors. For learning the collision event proposal and the pro-
                             1 m
     (y y):=   +    · exp −        (  −   )2        posal for the contact point of the robot with the obstacle, we
   k   ,      a0  v0         2    wd yd  yd
                              d=1                     achieve excellent results with simple features based on the
                                                      rotational and the translational velocity of the robot. Thus,
with a constant component and a non-linear, stationary term, we use as input to the Gaussian process classiﬁer the two-
which depends only on the distance between input points. dimensional feature vector Ft =(Δvt, Δvr),whereΔvt is
The parameters of the covariance function are called hyper- the difference between the translational velocity estimated by
parameters of the Gaussian process. They can either be ﬁxed the particle ﬁlter and the one estimated by local laser scan
by maximizing the likelihood of the given data points or, matching. Furthermore, Δvr is the difference of the rota-
for fully Bayesian treatment, can be integrated over using tional velocities respectively. A training set of 500 automat-
parameter-speciﬁc prior distributions. For our experiments ically labeled trajectories was generated by simulating ran-
reported in Section 5, we employed the latter strategy with dom collisions with different obstacles using the 3D simu-
Gamma priors on the hyperparameters. We set these priors to lator Gazebo [Koenig and Howard, 2004]. Whereas the left
favor smooth regression functions to avoid overﬁtting to the diagram of Figure 2 depicts the gathered data points, the mid-
training data. The analytically intractable integration over the dle diagram in the same ﬁgure shows the learned class prob-
hyperparameters is approximated using Markov Chain sam- abilities depending on the two velocity differences described
pling and the prediction results are cached on a ﬁne-grained above. As can be seen from the left diagram, Δvt is negative
grid.                                                 for nearly all “collision” data points, which corresponds to
                                                      the fact that the robot is slowed down when a collision occurs.
4.2  Binary Classiﬁcation                             The data points for “no collision” are spread widely and do
Binary classiﬁcation problems can consistently be modeled not separate well from the “collision” data points due to noisy
in this framework by including for every binary target ti a sensor measurements and imperfect labeling of the collision
real-valued latent variable li, such that             events. This makes the classiﬁcation problem a hard one. It
                                                      should be stressed, that we use this classiﬁer as a proposal
                             1                        distribution for collisions rather than as a collision detector
               p(ti =1)=          ,             (9)
                          1+e−li                      directly, because the features are too ambiguous to allow for
                                                      perfect instantaneous classiﬁcation. Experiments with a real
which is known as the logistic model that links class proba- robot (see Section 5) showed that this yields high detection
                      [         ]
bilities to real values, see Neal, 1997 . The latent variables rates with a low number of false alarms.
can now be given a Gaussian process prior as in the regression
setting and predictions of class probabilities can be performed Given a collision event, the continuous collision parame-
by predicting the corresponding latent variables and evaluat- ters o have to be estimated to simulate the effects on the sys-
ing Equation 9. For the failure detection problem, we again tem and to continue the tracking process. Since the task is not
use feature vectors Ft as inputs and binary failure labels ft to fully track the pushed obstacle over time, a simple model
as targets. The predicted class probabilities for new features
                                        (  |  )       that abstracts from the obstacle’s geometry and exact pose
then directly deﬁne the failure event proposal πf ft Ft . has proven sufﬁcient to describe the effects on the robot. A
                                                      collision with an unseen obstacle is represented by the ob-
4.3  Learning to Predict Collision Events and
                                                      stacle mass m and the contact point c on the front of the
     Parameters                                       robot. Therefore, the collision parameters are o =(m, c).
In this section, we apply the sequential failure detection ap- We learn the proposal distribution πo(ot|Ft) for the parame-
proach described above to the hard problem of collision de- ters ot using the same velocity-based features and simulated
tection for mobile robots under noisy sensor measurements training set as described above and the Gaussian process re-

                                                IJCAI-07
                                                  2188                                  0.7
     11                                                        1.2
                          1               Std PF                   Estimated heading
     10                           0.6     GP-PF                       True heading
                          0.8                                   1  Collision likelihood
     9                    0.6                                         True collision
                                  0.5                          0.8 Estim. contact point
     8                    0.4
     7                    0.2     0.4                          0.6
   y  [m]  6              0
                                  0.3                          0.4
     5
                                                               0.2
     4                            0.2
     3                                                          0
                               Average  trajectory error [m]  0.1
         9  10 11 12 13 14 15                                -0.2
                                    0
             x [m]                   0  100  200  300  400       75   80    85   90    95   100   105
                                       Number of particles                     Filter iteration
 Figure 3 (a): Two correctly Figure 3 (b): Average deviation Figure 3 (c): Estimation details around a correctly detected
 detected collisions (triangles), the of the estimated trajectory from the collision including the manually labeled true collision event.
 estimated trajectory (solid line), ground truth in meters for a varying One ﬁlter iteration corresponds to 0.1 seconds.
 and the ground truth (dotted). number of particles.

gression technique. The right diagram of Figure 2 depicts a cal abstraction, namely computing the impulse, the resulting
cut through the learned 2-dimensional distribution for the col- forces, and ultimately the inﬂuence on the robot’s state vec-
lision parameter c, which is the contact point of the obstacle tor. At the same time, this model describes how the point
on the front of the robot. The point of contact is measured of contact between the robot and the obstacle changes over
in meters from the center of the robot’s front to the right. It time and therefore deﬁnes the transition model for failure pa-
can be seen from the diagram that unexpected clockwise ro- rameters of Equation 3. From our experience, this physical
tations (Δvr < 0) of the robot are mapped to positive values model achieves the best balance between accuracy and efﬁ-
for the contact point, which corresponds to a collision on the ciency. Simpler models fail to handle important test cases
righthand side of the robot.                          while more complex models have too many free parameters
                                                      to be evaluated in real time.
5  Experimental Results                               5.1  Quantitative Evaluation of Failure Detection
Our system has been implemented on a real ActivMedia Pi-   and Tracking Performance
oneer 3DX robot and has been extensively tested in an ofﬁce To quantitatively evaluate the usefulness of our approach, we
environment. Before presenting experimental results, we de- compared it to a particle ﬁlter that implements the same pro-
scribe the motion model we implemented for our localization cess model with the standard uninformed proposals described
system. Since this model is not the focus of this work, we in Section 3.1. The parameters of the standard ﬁlter were op-
give only a brief overview here.                      timized for best tracking performance and failure detection
  The most widely used motion model for mobile robots is rates to ensure comparability. We recorded data by manu-
based on the wheel encoder measurements (see [Thrun et al., ally steering the robot through the environment and arranged
2005]). This information, rather than the the actual control for two collisions, one with boxes of milk and the other one
command, is taken as control input ut−1, which under nor- with a box of lemonade bottles. Both obstacles were placed
mal circumstances results in accurate predictions of the per- at arbitrary positions and the obstacle heights were too low
formed movement. Under the inﬂuence of failures like col- for the laser sensor to detect them. Figure 3(a) depicts a typ-
lisions or wheel slip, however, the motion of the wheels is ical test run, where our system successfully tracked the pose
not consistent with the whole robot’s motion any more. A of the robot and detected the two collisions. On the recorded
more appropriate model for such situations that still is efﬁ- data set, we tested our improved particle ﬁlter with Gaussian
cient enough to be evaluated online is based on simple rigid process proposals (GP-PF) as well as the standard particle ﬁl-
body dynamics (see [Plagemann et al., 2006]). We model ter (Std PF) for different parameter settings. Each ﬁlter was
the robot as a rigid body in the 2-dimensional plane, repre- executed 50 times for each parameter setting.
sented by a set of constant values and the variable state vector Table 1 gives the failure detection performance of the dif-
xt =(posx,posy,posθ,velt,velr) which includes the trans- ferent ﬁlters. The detection rate is deﬁned as the number
lational velocity velt and the rotational velocity velr. In each of correctly identiﬁed failures relative to the full number.
ﬁlter iteration, the wheel thrusts are calculated from the actual The false positives rate is the amount of false alarms rela-
velocity command that was sent to the motors. From this, the tive to the number of detections. The ground truth collision
next state vector is computed by numerical simulation using events were manually entered and a collision was counted as
the physical relationships between forces, acceleration, and correctly detected, when the marginal failure likelihood ex-
speed. Due to space limitations, we refer to [Witkin and ceeded a threshold Θ after a maximum of six ﬁlter iterations
Baraff, 1997] for details about rigid body physics. With this (0.6 seconds) after the true failure event. The threshold Θ was
model, collisions with another rigid object at a given point optimized independently for each ﬁlter to allow an unbiased
of contact can be simulated using the same type of physi- comparison.

                                                IJCAI-07
                                                  2189