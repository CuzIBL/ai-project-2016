                  Counting Solutions of CSPs: A Structural Approach∗

                                              Gilles Pesant
                        ILOG, 1681 route des Dolines, 06560 Valbonne, France
                                        pesant@crt.umontreal.ca


                    Abstract                          consistency algorithms act on the domains of the variables in
                                                      its scope (i.e. on which the constraint is deﬁned) to ﬁlter out
    Determining the number of solutions of a CSP has  values which do not belong to any solution of this constraint,
    several applications in AI, in statistical physics, and thus avoiding some useless search. For many families of con-
    in guiding backtrack search heuristics. It is a #P- straints, all such values can be removed in polynomial time
    complete problem for which some exact and ap-     even though globally the problem is N P-hard. The only vis-
    proximate algorithms have been designed. Suc-     ible effect of the consistency algorithms is on the domains,
    cessful CSP models often use high-arity, global con- projecting the set of solutions on each of the variables. But
    straints to capture the structure of a problem. This a constraint’s consistency algorithm often maintains informa-
    paper exploits such structure and derives polytime tion which may be exploited to evaluate the number of valid
    evaluations of the number of solutions of individ- tuples. We intend to show that a little additional work is often
    ual constraints. These may be combined to approx- sufﬁcient to provide close or even exact solution counts for a
    imate the total number of solutions or used to guide constraint, given the existing consistency algorithm.
    search heuristics. We give algorithms for several
                                                        The global counting problem for CSPs (denoted #CSP) is
    of the main families of constraints and discuss the
                                                      #P-complete even if we restrict ourselves to binary con-
    possible uses of such solution counts.            straints and is thus very likely intractable. Recent theoret-
                                                      ical work [Bulatov and Dalmau, 2003] characterizes some
1  Introduction                                       tractable classes of CSPs for this problem but these are quite
                                                      restrictive, especially for practical problems. The counting
Many important combinatorial problems in Artiﬁcial Intelli- problem for Boolean CSPs (#SAT) is the best studied subclass
gence (AI), Operations Research and other disciplines can be (see e.g. [Birnbaum and Lozinskii, 1999]).
cast as Constraint Satisfaction Problems (CSP). One is usually
                                                        For binary CSPs, exponential time exact algorithms have
interested in ﬁnding a solution to a CSP if it exists (the com-
                                                      been described (e.g. [Angelsmark and Jonsson, 2003]). For
binatorial existence problem) and much scientiﬁc literature
                                                      backtrack search, [Kask et al., 2004] adapts Iterative Join-
has been devoted to this subject in the past few decades. An-
                                                      Graph Propagation to approximate the number of solutions
other important question, though not as thoroughly studied,
                                                      extending a partial solution and uses its results in a value-
is how many solutions there are (the combinatorial enumera-
                                                      ordering heuristic to solve CSPs, choosing the value whose as-
tion problem). Our ability to answer this question has several
                                                      signment to the current variable gives the largest approximate
applications in AI (e.g. [Orponen, 1990],[Roth, 1996],[Dar-
                                                      solution count. An implementation optimized for binary con-
wiche, 2001]), in statistical physics (e.g. [Burton and Steif,
                                                      straints performs well compared to other popular strategies.
1994], [Lebowitz and Gallavotti, 1971]), or more recently in
                                                      [Refalo, 2004] proposes a generic variable-ordering heuris-
guiding backtrack search heuristics to ﬁnd solutions to CSPs
                                                      tic based on the impact the assignment of a variable has on
[Horsch and Havens, 2000][Kask et al., 2004][Refalo, 2004].
                                                      the reduction of the remaining search space, computed as the
In this latter context, an estimation of the number of solutions
                                                      Cartesian product of the domains of the variables. It reports
is sought repeatedly as search progresses. The best strategy
                                                      promising results on multi-knapsack, magic square, and Latin
to keep the overall runtime low may be to trade accuracy for
                                                      square completion benchmarks for (not necessarily binary)
speed while computing these approximations.
                                                      CSPs. The value- and variable-ordering heuristics described
  The model of a CSP is centered on the constraints, which above rely on an approximation of the solution count. Both
give it its structure. This paper proposes to exploit this in- can beneﬁt from an improvement in the quality and/or efﬁ-
herent structure to derive polytime approximations to the so- cient computation of this approximation.
lution count of a CSP by combining solution counts of com-
ponent constraints. At the level of the individual constraint, In the rest of the paper, Section 2 revisits several families of
                                                      constraints to evaluate the effort necessary to provide solution
  ∗Research conducted while the author was on sabbatical leave counts, Section 3 explores possible uses for them, Section 4
from Ecole´ Polytechnique de Montr´eal.               gives some examples, and Section 5 discusses future work.2  Looking at Constraints                             the total number of solutions decreases by dy − q(w) + 1 and
This section proceeds through a short list of usual constraints sc(y, v) is decremented by one for q(w) ≤ v ≤ dy.
(for their origin, see e.g.[R´egin, 2004]) and examines how Sometimes the domains of variables involved in such con-
solution counts may be derived. We assume throughout that straints are maintained as intervals. This simpliﬁes the com-
the constraints are domain consistent, unless stated otherwise. putation, for which we derive a closed form:
Given a variable x, we denote its domain of possible values             ymax−xmin      ymax−xmax−1
as D(x), the smallest and largest value in D(x) as xmin and #(x < y) =     X      i  −     X      i
xmax respectively, and the number of values in D(x) as dx.              i=ymin−xmin        i=1
We use #γ to mean the number of solutions for constraint γ.         =   ymax · (xmax + 1) − xmin · dy
                                                                         1    2             2
2.1  Binary Constraints                                                 − 2 · (xmax + xmax + ymin − ymin) (3)
Many arc consistency algorithms have been developed for Clearly, what preceded equally applies to constraints
binary constraints of the form γ(x, y). Among them, AC-4 x ≤ y, x > y, and x ≥ y, with small adjustments. Counting
[Mohr and Henderson, 1986] maintains a support counter for solutions for equality and disequality constraints is compar-
each value in D(x) and D(y). The total solution count is then atively straightforward (remember that domain consistency
simply the sum of those counters over the domain of one of has been achieved):
the variables:                                                #(x = y)  =   dx                        (4)
            #γ(x, y)  =    X   sc(x, v)         (1)           #(x 6= y) =   dx · dy − |D(x) ∩ D(y)|   (5)
                         v∈D(x)                       With an appropriate representation of the intersection of
                                                      D(x)  and D(y), an incremental version of the count for
where sc(x, v) stands for the support counter of value v in the x 6= y requires constant time.
domain of variable x. However, other consistency algorithms In some applications such as temporal reasoning, constants
only compute support witnesses as needed and hence would are present in the binary constraints (e.g. x < y + t for some
not have support counters available.                  constant t). The previous algorithms and formulas are easily
2.2  Arithmetic Binary Constraints                    adapted to handle such constraints.
Typically, support counters are not maintained by the con- 2.3 Linear Constraints
sistency algorithm for arithmetic binary constraints but one Many constraint models feature linear constraints of the form
rather relies on the semantics of the constraint. Take for ex- n
                                                      Pi=1 aixi ◦ b where ◦ stands for one of the usual relational
ample x < y: knowing xmin and ymax is sufﬁcient to remove operators and the ai’s and b are integers. Bound consistency
all the inconsistent values. To compute the number of valid is typically enforced, which is a fast but rather weak form
couples we can simply enumerate them, which done naively of reasoning for these constraints. Working from domains
would require Ω(dx · dy) time. Provided the domains are ﬁltered in this way is likely to yield very poor approximations
maintained in sorted order, a reasonable assumption, that enu- of the number of solutions.
meration can be done in Θ(dx + dy) time by using a running Example 1 Constraint 3x +2x −x −2x = 0 with bound
pointer in each domain as described in Algorithm 1.                         1    2   3    4
                                                      consistent domains D(xi) = {0, 1, 2}, 1 ≤ i ≤ 4 admits
                                                      only seven solutions even though the size of the Cartesian
  function lt card(x, y)                              product is 81. Since the value of any one variable is totally
  let tx and ty be tables containing the values of the determined by the combination of values taken by the others,
  domains of x and y, respectively, in increasing order; the upper bound can be lowered to 27 but this is still high.
  p := 1; q := 1 c := 0;                                These constraints are actually well studied under the name
  while q ≤ dy do                                     of linear Diophantine equations and inequations. In particu-
    while p ≤ dx and tx[p] < ty[q] do                 lar, [Ajili and Contejean, 1995] offers an algorithm adapted
      p := p + 1;                                     to constraint programming that produces a ﬁnite description
    c := c + p − 1;                                   of the set of solutions of a system of linear Diophantine equa-
    q := q + 1;                                       tions and inequations over N
  return c;                                                                             ′     n
                                                        When the constraints are of the form b ≤ Pi=1 aixi ≤ b
                                                      with the a ’s and x ’s belonging to N, we get knapsack con-
Algorithm 1: Computing the number of solutions to x < y.       i      i
                                                      straints for which [Trick, 2003] adapts a pseudo-polynomial
                                                      dynamic programming algorithm. It builds an acyclic graph
             #(x < y)  =   lt card(x, y)        (2)   Ghaii,hxii,b,b′ of size O(nb) in time O(nbd) (where d =
                                                      max{dxi }) whose paths from the initial node to a goal node
For each value v in D(y), it ﬁnds out of the number of sup- correspond to solutions. It is pointed out that enumerating
ports sc(y, v) from D(x) and adds them up in c. We can make solutions amounts to enumerating paths through a depth-ﬁrst
the algorithm incremental by storing sc(y, v) for each v in search, in time linear in the size of the graph.
D(y) and q(w), the smallest q such that w < ty[q], for each   n
w in D(x): if v is removed from D(y), the total number of ′
                                                      #(b ≤  Xaixi  ≤b)=|{paths traversing Ghaii,hxii,b,b′ }| (6)
solutions decreases by    ; if is removed from    ,
                   sc(y, v)  w               D(x)            i=1Interestingly, the approach could be generalized so as to lift 3. Any assignment of the variables of P such that νP =
the nonnegativity restriction on the coefﬁcients and variables c − |R| of them take a value in V can be extended into
at the expense of a larger graph of size O(nr) where r repre- Qx∈X\P dx complete solutions.
sents the magnitude of the range of n a x over the ﬁnite
                             Pi=1   i i                 4. There are such assignments for every value of from
domains.                                                                                          νP
                                                          cmin − |R| to cmax − |R| and for every subset S of P
2.4  Element Constraints                                  identifying the νP variables in question. How many as-
                                                          signments, given S? Each variable y ∈ S has |D(y)∩V |
The ability to index an array with a ﬁnite-domain variable, possible values and each variable z ∈ P \ S has |D(z) \
commonly known as an element constraint, is often present
                                                          V | possible values, totaling #a(S) = Qy∈S |D(y) ∩
in practical models. Given variables x and i and array of val- V | ·  |D(z) \ V | assignments.
ues a, element(i, a, x) constrains x to be equal to the ith   Qz∈P \S
element of a (x = a[i]). Note that this is not an arbitrary Putting it all together gives:
relation between two variables but rather a functional rela-                         cmax
tionship. As a relation, it could potentially number dx · di #among(c, X, V ) = Y dx ·X   X   #a(S)   (9)
solutions, corresponding to the Cartesian product of the vari-               x∈X\P  k=cmin S⊆P
ables. As a functional relationship, there are exactly as many                          |S|=k−|R|
tuples as there are consistent values for i:            In the worst case, the number of S sets to consider is ex-
             #element(i, a, x)  =  d            (7)   ponential in the number of variables. It may be preferable
                                     i                sometimes to compute faster approximations. We can re-
  This exact count improves on the product of the domain place every #a(S) by some constant lower or upper bound.
sizes by a factor dx.                                 Let tin be a table in which the sizes of D(x) ∩ V for ev-
                                                      ery x ∈  P appear in increasing order. Similarly, let tout
2.5  Regular Language Membership Constraints          be a table in which the sizes of D(x) \ V for every x ∈
                                                      P  appear in increasing order. We deﬁne a lower bound
Given a sequence of variables X = hx1, x2, . . . , xni and       k−|R|       |P |−k+|R|
a deterministic ﬁnite automaton A, regular(X, A) con- ℓ(a(k)) = Qi=1  tin[i] · Qi=1   tout[i]
strains any sequence of values taken by the variables of X and an upper bound
                                            [                     k−|R|             |P |−k+|R|
to belong to the regular language recognized by A Pesant, u(a(k)) = Qi=1 tin[|P |−i+1]·Qi=1  tout[|P |−i+1].
2004]. The consistency algorithm for this constraint builds a Then

directed acyclic graph GX,A whose structure is very similar                       cmax
to the one used by [Trick, 2003] for knapsack constraints, as among                     |P |
                                                         #       (c, X, V ) ≥ Y dx ·X (k−|R|) · ℓ(a(k)) (10)
reported in Section 2.3. Here as well, each path corresponds
                                                                           x∈X\P k=cmin
to a solution of the constraint and counting them represents
                                                                                  cmax
no complexity overhead with respect to the consistency algo-
                                                         #among(c, X, V ) ≤     d ·     |P | · u(a(k)) (11)
rithm.                                                                      Y    x X  (k−|R|)
                                                                           x∈X\P k=cmin
 #regular(X,   A)  =   |{paths traversing G }|  (8)
                                        X,A           Note that if the variables in P have identical domains then
2.6  Among Constraints                                the lower and upper bounds coincide and we obtain the exact
                                                      count.
Under constraint among(c, X, V ), variable c corresponds to
the number of variables from set X taking their value from Example 2 Consider among(c, {x1, x2, x3, x4, x5}, {1, 2})
set V [Beldiceanu and Contejean, 1994]. Let R = {x ∈ X : with D(c) = {3, 4}, D(x1) =   {1, 3, 4}, D(x2) =
D(x) ⊆ V }, the subset of variables required to take a value {1, 2}, D(x3) = {3, 4}, D(x4) = {2}, and D(x5) =
from V , and P = {x ∈ X \ R : D(x) ∩ V 6= ∅}, the subset {1, 2, 3}. We obtain R = {x2, x4}, P = {x1, x5}, and
of variables possibly taking a value from V . Those two sets #among(c, {x1, x2, x3, x4, x5}, {1, 2}) = dx2 · dx3 · dx4 ·
are usually maintained by the consistency algorithm since the (|D(x1) ∩ {1, 2}| · |D(x5) \ {1, 2}| + |D(x5) ∩ {1, 2}| ·
relationship |R| ≤ c ≤ |R|+|P | is useful to ﬁlter the domain |D(x1) \ {1, 2}| + |D(x1) ∩ {1, 2}| · |D(x5) ∩ {1, 2}|) =
of c.                                                 2 · 2 · 1 · (1 · 1 + 2 · 2 + 1 · 2) = 28, by (9). Using (10),(11)
                                                      we get 16 ≤ #among(c, {x , x , x , x , x }, {1, 2}) ≤ 40.
  Deﬁne νS as the number of variables from set S taking                       1  2  3  4  5
their value from V . To derive the number of solutions, we In comparison, the size of the Cartesian product is 72.
ﬁrst make the following observations:
                                                      2.7  Mutual Exclusion and Global Cardinality
 1. νR = |R|, a constant, so that in any solution to the con- Constraints
    straint the value taken by x ∈ R can be replaced by any
                                                      Besides among, other constraints are concerned with the
    other in its domain and it remains a solution.
                                                      number of repetitions of values. Constraint alldiff(X)
 2. νX\(R∪P ) = 0, a constant, so that in any solution to forces the variables of set X to take different values.
    the constraint the value taken by x ∈ X \ (R ∪ P ) can Constraint gcc(Y, V, X), for a sequence of variables
    be replaced by any other in its domain and it remains a Y = hy1, y2, . . . , ymi and a sequence of values V =
    solution.                                         hv1, v2, . . . , vmi, makes each yi equal to the number of timesa variable of X takes value vi. It is a generalization of the which could happen. However, successive transformations
former.                                               from distinct connected components is safe: each resulting
  Already for the alldiff constraint, the counting prob- matching is distinct. We may therefore take the product of
lem includes as a special case the number of perfect match- the number of maximum (sub)matchings in each connected
ings in a bipartite graph, itself equivalent to the N P-hard component of the bipartite graph. Identifying the connected
problem of computing the permanent of the adjacency ma- components C takes time linear in the size of the graph. Enu-
trix representation of the graph. So currently we do not merating all the appropriate cycles and paths of each con-
know of an efﬁcient way to compute #alldiff(X)   or   nected component can be done in O(nm2) time. Let their
#gcc(Y, V, X) exactly. A polytime randomized approxima- number be νg for each connected component g ∈ C. Then
tion algorithm for the permanent was recently proposed in
                                            10
[Jerrum et al., 2004] but its time complexity, in Ω(n ), re-      #alldiff(X)   ≥  Y  (νg + 1)       (13)
mains prohibitive. Therefore even getting a reasonable ap-                        g∈C
proximate ﬁgure is challenging. We nevertheless propose
                                                        For the gcc constraint, we may be able to adapt the ideas
some bounds.
                                                      which gave rise to the previous lower bound. The consis-
Upper Bound                                           tency algorithm for this constraint is usually based on net-
If D(x) ⊆ D(y) for some variables x, y ∈ X then regard- work ﬂows. Given a network and a ﬂow through it, a resid-
less of the value v taken by x we know that at most dy − 1 ual graph can be deﬁned and the circuits in this graph lead
possibilities remain for y since v ∈ D(y). We generalize this to equivalent ﬂows. Another idea is to decompose the con-
simple observation by considering D = {D(x) : x ∈ X}, straint into among constraints on singleton sets of values and
the distinct domains of X. For each D ∈ D, deﬁne ED = use (9)-(11).
{x ∈ X : D(x) = D}, the set of variables with domain D,
and SD = {x ∈ X : D(x) ⊂ D}, the set of variables whose 3 Using Solution Counts of Constraints
domain is properly contained in . Then
                           D                          This section examines the possible uses of solution counts of
                       |ED|                           constraints.
  #alldiff(X)   ≤         (|D| − |S | − i + 1) (12)
                   Y   Y          D                   3.1  Approximate the Solution Count of a CSP
                  D∈D  i=1
                                                      They can be used to approximate the number of solutions to
Computing it requires taking the product of n terms, each of
                                                      a CSP. Given a model for a CSP, consider its variables as
which can be computed easily in O(nm) time and probably a set S and its constraints as a collection C of subsets of S
much faster with an appropriate data structure maintaining deﬁned by the scope of each constraint. Add to C a singleton
the ED and SD sets. This upper bound is interesting be- for every variable in S. A set partition of S is a subset of C
cause for the special case where all domains are equal, say whose elements are pairwise disjoint and whose union equals
{v1, v2, . . . , vm}, it simpliﬁes to the exact solution count, S (see Section 4 for some examples). To each element of
            n                                         the partition corresponds a constraint (or a variable in case
            Y(m  − i + 1) = m!/(m − n)!               of a singleton) for which an upper bound on the number of
            i=1                                       solutions can be computed (or taken as the cardinality of the
Lower Bound                                           domain in case of a singleton). The product of these upper
                                                      bounds gives an upper bound on the total number of solutions.
As hinted before, the consistency algorithm for alldiff
                                                      In general there are several such partitions possible and we
computes a maximum matching in a bipartite graph. It is
                                                      can ﬁnd the smallest product over them. If it is used in the
known that every maximum matching of a graph can be ob-
                                                      course of a computation as variables become ﬁxed and can be
tained from a given maximum matching by successive trans-
                                                      excluded from the partition, new possible partitions emerge
formations through even-length alternating paths starting at
                                                      and may improve the solution count.
an unmatched vertex or through alternating cycles.1 Each
transformation reverses the status of the edges on the path or 3.2 Guide Search Heuristics
cycle in question: if it belonged to the matching it no longer
does, and vice versa. The result is necessarily a matching As we saw in the introduction, these counts are also useful
of the same size. Finding every maximum matching in this to develop robust search heuristics. They may allow a ﬁner
                                                                                                     [
way (or any other) would be too costly, as we established be- evaluation of impact in the generic search heuristic of Re-
                                                               ]
fore, but ﬁnding those that are just one transformation away falo, 2004 since their approximation of the size of the search
is fast and provides a lower bound on the number of max- space is no worse than the Cartesian product of the domains.
                                                                                  [              ]
imum matchings, or equivalently on the solution count of Value-ordering heuristics such as Kask et al., 2004 are also
alldiff.                                              good candidates. Other search heuristics following the ﬁrst-
  By not applying transformations in succession, we also fail principle (detect failure as early as possible) and centered
avoid having to check whether two matchings obtained by on constraints can be guided by a count of the number of so-
distinct sequences of transformations are in fact identical, lutions left for each constraint. We might focus the search
                                                      on the constraint currently having the smallest number of so-
  1An alternating path or cycle alternates between edges belonging lutions, recognizing that failure necessarily occurs through a
to a given matching and those not belonging to it.    constraint admitting no more solutions (see Section 4).3.3  Evaluate Projection Tightness                             domains       1st partition 2nd partition
                                                        var  solns  impact  solns impact   solns impact
We can also compute the ratio of the (approximate) solution
count of a constraint to the size of the Cartesian product of ℓ 1600  .898  1024    .872    600    .800
the appropriate domains, in a way measuring the tightness f  1600     .898  1024    .872    600    .800
of the projection of the constraint onto the individual vari- b 1280  .918   768    .904    480    .840
ables. A low ratio stresses the poor quality of the infor- g 1024     .934   576    .928    384    .872
mation propagated to the other constraints (i.e. the ﬁltered n 2000   .872  1280    .840    360    .880
domains) and identiﬁes constraints whose consistency algo- d 2500     .840  1600    .800    480    .840
rithm may be improved. Tightness can also serve as another avg  –     .893     –    .869      –    .839
search heuristic, focusing on the constraint currently exhibit-
                                                      Table 1: Comparing different approximations of the number
ing the worst tightness (i.e. the smallest ratio). An ideal ratio
                                                      of solutions of a small map coloring problem.
of one corresponds to a constraint perfectly captured by the
current domains of its variables.
                                                      4 and 6), and their corresponding impacts (columns 3, 5, and
4  Some Examples                                      7).
                                                        Again we note a signiﬁcant improvement in the approxi-
The purpose of this section is to illustrate solution counts and mation of the number of solutions over the Cartesian prod-
their possible uses through a few simple models, easier to uct, particularly from the second set partition based on the
analyse.                                              model using an alldiff constraint. The latter also provides
4.1  Map Coloring                                     a closer approximation of the true impact: the average com-
                                                      puted impact is less than 5% away whereas it is more than
Consider the well-known map coloring problem for six Euro- 11% away for the average computed impact using Cartesian
pean countries: Belgium, Denmark, France, Germany, Lux- products.
embourg, and the Netherlands. Any two countries sharing a
border cannot be of the same color. To each country we asso- 4.2 Rostering
ciate a variable (named after its ﬁrst letter) that represents its Consider next a simple rostering problem: a number of daily
color. Constraints                                    jobs must be carried out by employees while respecting some
f 6= b, f 6= ℓ, f 6= g, ℓ 6= g, ℓ 6= b, b 6= n, g 6= n, g 6= d, g 6= b labor regulations. Let E be the set of employees, D the days
                                                      of the planning horizon, and J the set of possible jobs, in-
model the problem. If we allow ﬁve colors, there are 1440 le- cluding a day off. Deﬁne variables jde ∈ J (d ∈ D, e ∈ E)
gal colorings. The cardinality of the Cartesian product of the to represent the job carried out by employee e on day d. To
domains of the variables initially overestimates that number ensure that every job is performed on any given day, we can
to be 15625 (56). A set partition such as {f 6= ℓ, b 6= n, g 6= state the following constraints:
d} provides a slightly better estimate, using (5):
                                                      gcc(h1, 1, . . . , 1i, J \ {day off}, (jde)e∈E ) d ∈ D. (14)
                          3           3
   (dx · dy − |D(x) ∩ D(y)|) = (5 · 5 − 5) = 8000.    Some jobs are considered more demanding than others and
Noticing that four of these countries are all pairwise adjacent, we wish to balance the workload among employees. We in-
an alternate model is                                 troduce variables wde representing the workload of employee
                                                      e on day d and link them to the main variables in the follow-
       alldiff({b, f, g, ℓ}), b 6= n, g 6= n, g 6= d  ing way:

yielding a still better upper bound on the  solution      element(jde, (ℓj )j∈J , wde)   d ∈ D, e ∈ E (15)
count, 5! · 52 =  3000, using (12) with set partition
{alldiff({b, f, g, ℓ}), n, d}. We see here that the solution where ℓj corresponds to the load of job j. We then add con-
counts of the constraints in a CSP model, particularly those straints enforcing a maximum workload k:
of high arity, can quickly provide good approximations of
                                                                  d∈D wde ≤ k             e ∈ E.     (16)
the number of solutions of CSPs. The projection tightness       P
of b 6= n, g 6= n, and g 6= d is 20/25 = 0.8; that of Finally work patterns may be imposed on individual rosters:
alldiff                  4
         ({b, f, g, ℓ}) is 5!/5 = 0.192. This could be taken regular((j   )    , A)         e ∈ E    (17)
as an indication that search should focus on the latter.                 de d∈D
  Let us now analyse the effect of coloring one of the coun- with the appropriate automaton A.
tries red. Regardless of the country we choose, the number of To approximate the number of solutions, there are a few
legal colorings will decrease ﬁve fold to 288 since colors are possibilities for a set partition of the variables (jde)d∈D,e∈E
interchangeable. The true impact of ﬁxing a variable, mea- and (wde)d∈D,e∈E: constraints (14)(16) are one, constraints
sured as 1 minus the ratio of the remaining search space after (17)(16) are another, and so are constraints (15). In deciding
and before ([Refalo, 2004]), is thus 0.8. Table 4.1 reports af- which one to use, its size (the number of parts), the qual-
ter each country is colored red the cardinality of the Cartesian ity of the bounds, and the projection tightness of each con-
product of the domains (column 2), the upper bound on the straint may help. Partition (15) has size |D| · |E| compared
solution count from each of the two set partitions (columns to |D| + |E| and 2 · |E| for the other two: a smaller size