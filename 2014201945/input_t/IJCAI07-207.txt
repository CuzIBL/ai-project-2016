Coordination to Avoid Starvation of Bottleneck Agents in a Large Network System

                     Rajesh Gautam                                Kazuo Miyashita
              University of Tsukuba, JAPAN                          AIST, JAPAN
                    r.gautam@aist.go.jp                        k.miyashita@aist.go.jp


                    Abstract                            In a network system, because of connectivity of the steps to
                                                      be processed, even if a system might have many overcapacity
    In this paper, we present a multi-agent control   resources, the ﬁnal throughput of the system is limited by the
    method for a large-scale network system. We pro-  resource that has the smallest capacity (called a bottleneck).
    pose an extension of a token-based coordination   Maximizing throughput of the system therefore means keep-
    technique to improve the tradeoff between two con- ing the maximum utilization of the bottleneck resource. High
    ﬂicting objectives of the network system: reducing utilization of the bottleneck resource is ensured by maintain-
    the lead time and increasing throughput. In our   ing a sufﬁcient amount of jobs before it as a safety buffer
    system, CABS, information about an agent’s ur-    against random events that might cause its starvation. Hence,
    gency of jobs to fulﬁll demanded throughput and to to improve the tradeoff between lead time and throughput of a
    maintain its utilization is passed from downstream manufacturing system, several methods have been developed
    agents in the network so that upstream agents can to regulate WIP at the lowest safe level that prevents starva-
    provide necessary and sufﬁcient jobs to bottleneck tion of bottleneck machines [Fowler et al., 2002].However,
    agents whose loss of capacity degrades the to-    those methods subsume that the bottleneck machines in the
    tal system performance. We empirically evaluate   system are identiﬁable by preliminary static analyses of the
    CABS performance using a benchmark problem of     problem and do not evolve over time. However, in the course
    the semiconductor fabrication process, which is a of manufacturing, the bottleneck machines might shift tem-
    good example of a large-scale network system.     porarily because of unexpected random events such as ma-
                                                      chine failures that disturb the smooth ﬂow of jobs. This phe-
1  Introduction                                       nomenon is called wandering bottlenecks. Most existing so-
Network systems have multiple resources that collectively lutions to the problem are rather philosophical and manage-
                                                                        [         ]
perform a desired task that is not atomic but rather com- rial (such as Kaizen Imai, 1997 and Theory of Constraint
                                                            [                    ]
prises a set of steps to be accomplished in a speciﬁc sequence. (TOC) Goldratt and Cox, 1992 ) with a few exceptions of
                                                                                   [              ]
Queueing theory [Allen, 1990] has addressed analysis and identifying wandering bottlenecks Roser et al., 2002 .
control of network queueing in its steady state. Neverthe- To prevent starvation of bottleneck machines, lot release
less, to understand and control its dynamic behavior is con- control to regulate workload in front of the bottleneck ma-
sidered critically important for realizing smooth operations of chines by controlling the entry of jobs in the system [Glassey
today’s complicated network system. Transportation, com- and Resende, 1988] has been widely used in practice. Never-
munication and manufacturing are typical examples of such theless, it has achieved limited success because its centralized
large networks, for which uninterrupted and stable operations decision-making mechanism at the job entry point cannot re-
are required. In this paper, we use a manufacturing problem spond to dynamics of the manufacturing system (such as wan-
as a benchmark for controlling a large-scale network system. dering bottlenecks). Rather than controlling the job entry, it is
  In queueing theory, Little’s Law [Little, 1961] states that desired that jobs are processed and requested dynamically by
the expected inventory of work in process (WIP) equals every machine in the system as to maintain a steady ﬂow of
the average lead time multiplied by the average throughput. jobs leading to the bottleneck machines. The desired control
Therefore, with a ﬁxed throughput, reducing the lead time re- (lot ﬂow control) is possible only through coordinated opera-
quires WIP to be reduced. However, with a variable and un- tions of the machines. Centralized control of all the machines
predictable manufacturing environment, reducing WIP tends shares the same weak point with the lot release control. A de-
to decrease throughput by cutting back job stocks of machines centralized coordination method is required so that every ma-
so that machine downtimes have a high probability of forc- chine decides its job request and job processing in harmony
ing idle time of other machines because of a lack of jobs to with other machines as an intelligent agent.
process. In this paper, we are concerned with improving the In a time-critical manufacturing environment, no machine
tradeoff between the lead time and the throughput in a manu- (i.e. agent) can afford to search and gather all necessary in-
facturing system with unpredictable machine failure.  formation of other machines for deciding its actions. Con-

                                                IJCAI-07
                                                  1281sequently, many coordination techniques proposed in multi- In addition to the agents that model the workstations, two
agent systems [Jennings et al., 2001; Sandholm, 1999; Falt- types of synthetic agents exist. One is a sink-agent for each
ings and Nguyen, 2005; Durfee, 1996] are inappropriate for kind of job, which receives the completed lots from the last
our purpose. Just-In-Time (JIT) [Ohno, 1988] is a method agent of the job’s process route. Another synthetic agent, a
of the distributed manufacturing control by exchanging to- source-agent, releases every job in the system by transferring
kens (Kanban cards) among the machines to control ﬂows and it to the agent processing the ﬁrst step of the job.
amounts of work (WIP) in the system. In fact, JIT and its ex-
tensions are instances of token-based coordination [Wagner 2.2 Semiconductor Fabrication Process
et al., 2003; Xu et al., 2005; Moyaux et al., 2003] and have
been widely used in manufacturing and other related ﬁelds. Semiconductor fabrication is among the most complex man-
However, because of its simplicity, JIT succeeds only in sta- ufacturing processes. For example, the production steps for
ble and leveled environments.                         semiconductor manufacturing usually number a few hundred,
  In this paper, we propose an extension of the token-based with numerous repetitive reentrant loops. Its lead time ex-
coordination method: Coordination for Avoiding Bottleneck tends over a couple of months [Atherton and Atherton, 1995].
Starvation (CABS) for improving a tradeoff between a lead
time and a throughput in a large-scale and uncertain network           SOURCE
system. In CABS, agents coordinate with other agents to                 FSI
maintain the adequate ﬂow of jobs to satisfy the various de- DFA2            DFB4                   DFB1_ 2
mands by preventing starvation of bottleneck agents. That                    C1_ 9                DFE1_ 2
coordination is achieved by efﬁcient passing of messages in       DFB3       PE1_ 5
the system. The message includes information that enables DFA4               D1_ 9
agents to identify the bottleneck agents and hence coordi-             QLESS1
nate with other agents by maintaining the desired ﬂow of       DRY1_ 2  TEG2
jobs to the bottleneck agents. In Section 2, we explain a                   QLESS2
generic manufacturing problem and the semiconductor fab-       ION1_ 3   BLU1    ASM2 WET5
rication process used for experiments. The details of algo- DFE3_ 4 WET3 DFA1 AME46 AME135 SCRUB
rithms in CABS are explained in Section 3. Section 4 illus- DFC2_ 3       MEG1_ 2        DFC1
trates basic behaviors of CABS using an example manufac-                   WET1              LPS1
turing scenario. Section 5 shows results of simulation exper-                    OSICD2
iments and validates the higher effectiveness of CABS than                          DFC4
other conventional manufacturing control methods. Finally,                          ANC1
                                                                     SINK (Product 2) SINK (Product 1)
Section 6 concludes the paper.
                                                          Figure 1: Network of agents in a semiconductor fab
2Problem
In this section, we ﬁrst describe a general model of a manu- For empirical validation of CABS, we used the Measure-
facturing problem and then introduce a semiconductor fabri- ment and Improvementof Manufacturing Capacity (MIMAC)
cation process as an example of the most complicated systems testbed datasets of the wafer fabrication processes [Fowler
in the current manufacturing industry.                and Robinson, 1995], available from Arizona State univer-
                                                      sity (http://www.was.asu.edu/˜masmlab/home.htm). The data
2.1  Deﬁnition                                        set speciﬁes the production steps of semiconductor manufac-
The manufacturing problem requires processing a set of jobs ture. The factory model that we have chosen for our ex-
J =  {J1, ..., Jn} by a set of workstations, which are mod- periments represents a factory with 38 workstations. Two
eled as agents A = {A1, ..., Am} in this paper. Each job Jl products, Product1 and Product2, are produced in the sys-
                      l = {  l    l }                 tem. Product1 has 92 processing steps and Product2 has
consists of a set of steps S S1, ..., Ssl to be processed
according to its process routing that speciﬁes precedence con- 19 steps. Many cycles exist in the process routes involving
                                                                                                    4 423
straints among these steps. Every lot of the jobs ﬂows through both products. The total process time for Product1 is ,
                                                                                   1 097
agents according to its process route. Each agent Aj has iden- min (73.7 h); for Product2,itis , min (18.3 h). Fig-
                                   j      j     j     ure 1, which depicts the process ﬂows of products through
tical pj machines to process its tj tasks T = {T , ..., Tt }.
                                         1      j     the workstations in the experiment problem, can be viewed
Each job Jl has a demand rate drl, which is the number of as a complex network of agents.
lots of Jl to be completed in one hour. Furthermore, when an
                        j                      j
agent Aj processes its task Ti , it takes a process time pti .A
task of the agents corresponds to a step in the jobs. Hence, 3 Coordination through Requirements
precedence constraints among steps create a complicated di-
                                                  j   In CABS, actions of the agents are coordinated using the
rectional network of agents. Presume an agent Aj’s task Tq
        l                                             messages transmitted among agents. An agent uses require-
is a step Si. A preceding agent of the agent Aj in terms of the
     j                             l                  ment information in the incoming messages from succeeding
task Tq , Apre(j,q),isinchargeofastepSi−1 and a succeed- agents for making lot processing decisions and for generating
                                l
ing agent, Asuc(j,q), processes a step Si+1.          messages to send to its preceding agents.

                                                IJCAI-07
                                                  12823.1  Action Selection                                 3.2  Message Passing
The CABS system utilizes token-based coordination so that Dispatching of agents in CABS is decided solely on require-
an agent selects its lot-processing actions based on require- ments from succeeding agents. Hence, information in the re-
ments from its succeeding agents in the process ﬂow. CABS quirement is a key to coordination among agents.
realizes a pull mechanism like a JIT system that does not pro- An agent tries to meet the requirements of succeeding
cess jobs until they are “pulled” by downstream agents. agents for all of its tasks. Aside from meeting the require-
  Each agent Aj periodically receives a requirement for pro- ments of succeeding agents, the agent must also minimize its
              j
cessing a task Tq from a corresponding succeeding agent workload deﬁcit at all times for satisfying the demand rates of
                                                                                            j
Asuc(j,q). The requirement consists of the following three jobs. For example, Aj ’s workload of a task Tq is the time re-
                                                                                          j
types of information (detailed deﬁnitions will be given later quired to process one lot of the task (i.e. ptq). Each agent has
in Section 3.2):                                      aggregated workloads of all of its tasks based on the demand
time limit:   time by which agent Asuc(j,q) needs another rates of jobs. The difference between the workloads and the
                               j                      total processing time of the tasks that have been processed is
    lot for the next step of the task Tq .
                                                      a current workload deﬁcit of an agent.
request rate:   rate at which agent Asuc(j,q) needs the
                                  j
    lots for the next step of the task Tq , starting at time
                                                      Algorithm 2 calcCriticality( ) of agent Aj
    limit.
                                                          ∀ ∈{1  ···  }       j                     j
criticality                                            1:  i    ,   ,tj set t wi as current WIP of task Ti
             : criticality of the agent Asuc(j,q).                                            j  j
                                                       2: t ftj ← current time +           (t w pt /pj)
  In addition to the requirement information from the suc-                        ∀i∈{1,···,tj } i i
                           j     j                        // earliest time to ﬁnish current WIP
ceeding agents, for each task Tq ∈ T , an agent Aj is as-                     j
                                                       3: ∀i ∈{1, ···,tj} set t dei
sumed to have local information such as the demand rate,                         j
current WIP and a total number of lots already produced.    as total demand of task Ti until t ftj
                                                                              j
                                                       4: ∀i ∈{1, ···,tj} set t pri
                                []                                                 j
Algorithm 1 selectTask( message im )ofagentAj               as total production of task Ti until current time
                       j                     j                                    j       j     j    j
   ∀  ∈{1  ···  }                                      5: t wldj ←   ∀i∈{1,···,t }(t dei − (t pri + t wi ))pti
 1: i     ,  ,tj set t wi as current WIP of task Ti                        j
      j ←{   j  ( j ∈ j) ∧ (  j  0)}                     // current estimated workload deﬁcit of Aj
 2: ET      Ti   Ti   T     t wi >                                                          j
          j
                                      []               6: scj ← pj(1.0 −  ∀i∈{1,···,t } drjob(T j )pti /pj)
 3: sort ET according to time limit (i.e., im .tl)oftasks                        j       i
                              j
 4: set FETj as the ﬁrst task in ET                       // surplus capacity of Aj
 5: loop                                               7: return t wldj /scj
 6:  set start time of FETj at current time
          j   ←{       j      (   j  ∈       j) ∧
 7:  OFT            ETi        ETi         ET           An agent can recover its workload deﬁcit by processing
         j                j                  j
     (ETi   overlaps F ET ) ∧  (criticality(ETi ) >   more lots than demand rates of jobs. The time needed to re-
     criticality(FETj))}                              cover the deﬁcit depends on the amount of deﬁcit and surplus
     // im[].cr decides criticality of a task         capacity available to the agent. Algorithm 2 calculates an
            j
 8:  if OFT  = ∅ then                                agent’s criticality as a ratio of its workload deﬁcit and sur-
                            j
 9:    remove FETj  from ET                           plus capacity. In CABS, an agent with a large criticality is
                                  j
10:    set FETj as the ﬁrst task in ET                considered a bottleneck agent. Dynamic change of an agent’s
11:  else                                             criticality represents wandering of bottlenecks.
                                                                                              j
12:    return FETj                                      To maintain a continuous lot ﬂow of a task Ti to Asuc(j,i)
13:  end if                                           at the requested rate im[i].rr, the agent requires an incoming
14: end loop                                          lot ﬂow at the same rate from the corresponding preceding
                                                      agent Apre(j,i). However, the agent itself might need the jobs
  Agent Aj uses the requirement information from its suc- earlier and at a higher rate in order to recover its workload
ceeding agents for choosing the next lot to process (i.e. deﬁcit. The agent requires jobs immediately and at the max-
dispatching) when any machine of the agent Aj becomes imum rate at which it can process materials to recover the
free. Algorithm 1 describes the dispatching algorithm for deﬁcit rapidly. Based on the requirement from the succeed-
the agent Aj . It returns a task with the earliest time ing agent and its current workload deﬁcit, the agent generates
limit whose dispatching will not delay a task of any higher a consolidated outgoing requirement for its preceding agent.
criticality   beyond its time limit. In algorithms of Algorithm 3 describes calculation of outgoing requirement
                                                                                      j    j
the paper, im[].tl, im[].rr and im[].cr respectively de- messages by the agent Aj . For each Ti ∈ T , a requirement
note requirement information of time limit, request   tuple (om[i].tl, om[i].rr, om[i].cr) is generated and sent to
rate and criticality   for the corresponding tasks in the the preceding agent Apre(j,i).
incoming messages of the agent. In addition, tasks mutually The agent acts to satisfy the requirement of its succeeding
overlap when an intersection exists in their processing periods agent when agent Aj is not critical (i.e., its workload deﬁcit is
(i.e., (time limit - process time) of one overlaps    less than that of Asuc(j,i)) or has enough WIP of other tasks
with (current time + process time) of other).         to process. In this case, the agent can postpone the time

                                                IJCAI-07
                                                  1283Algorithm 3 makeRequest( message im[])ofagentAj         The behavior of the algorithms mentioned above is illus-
                       j                     j        trated using a simple scenario of a production system, which
 1: ∀i ∈{1, ···,tj} set t wi as current WIP of task Ti
                                        j j          produces three job types (A, B, C) according to the process
       j ←             +             (        j)
 2: t ft   current time     ∀i∈{1,···,tj } t wi pti /p routes shown in Fig. 2. Five workstation agents (labeled one
   // earliest time to get starved                    to ﬁve) and their utilization according to the demand rate of
 3: t crj ← calcCriticality()                         jobs is shown with the attached percentage. Two failures
   // current criticality of Aj                       occur in the system around the same time. Agent4 fails at
 4: for all i ∈{1, ···,tj} do                         time 21,000 and recovers at time 60,000. Agent5 fails at time
         j                     j   j
 5:  t fti ← current time + t wi ∗ pti /pj            13,000 and recovers at time 90,000.
                                 j
     // earliest time to get starved of Ti
        j              j      j                           3000
 6:  t tli ← im[i].tl − pti + t wi /im[i].rr                                                 JobA
                       j                                  2000                               JobB
     // time to replenish Ti based on request from Asuc(j,i)                                 JobC
                             j                            1000                          Demand Level
 7:  if (t crj <im[i].cr) ∨ (t tli <tftj) then
                          j   j
 8:    om[i].tl ← max(t fti ,t tli )                       0
 9:    om[i].cr ← max(im[i].cr, t crj)
                                   j                    -1000
10:    om[i].rr ← min(im[i].rr, pj/pti )


                                                       Finished  Job Inventory -2000
11:  else // Aj is lagging and starving
12:    om[i].tl ← t ftj                                 -3000
13:    om[i].cr ← t crj
                       j                                -4000
14:    om[i].rr ← pj/pti
15:  end if                                             -5000
                                                            12     3     4   5          6
16: end for                                             -6000
                                                            0  20000  40000  60000  80000  100000  120000  140000  160000  180000  200000
17:          []
   return om                                                                     Time

                                                                  Figure 3: Finished job inventory
                             j
limit of requesting many tasks Ti beyond the earliest pos-
                                              j
sible timing when the current WIP is emptied (i.e., t fti ) un-
til the last timing when the succeeding agent’s request ex-  900
                            j
hausts the current WIP (i.e. t tli ). This situation realizes  800                        Agent3
lean manufacturing, which is intended to reduce the amount                                Agent4
of WIP and shorten lead times. As for criticality, agent  700                             Agent5
Aj intends to pass the highest criticality along the pro-  600
cess route by choosing a higher value of itself or its suc-
                                                         500
ceeding agent. The request rate is truncated only when
                                                       Criticality
the requested value is greater than the maximum capacity of  400
      j
agent A .                                                300
  The agent prioritizes recovering its workload deﬁcit over
satisfying the succeeding agent’s requirement when agent Aj  200
                                                           12     3      4  5          6
is critical and has no sufﬁcient WIP to process. Hence, as a  100
requirement to its preceding agent, the agent sends the values
                                                          0
of its own time limit, criticality    and request          0  20000  40000  60000  80000  100000  120000  140000  160000  180000  200000
rate for the purpose.                                                          Time
                                                                   Figure 4: Criticality of agents
4  Simpliﬁed Example Scenario
                                                        The achieved production of the products w.r.t. to the de-
                                                      mand is shown in Fig. 3. The criticality of three agents along
                                                      time is shown in Fig. 4 (the criticality of the other two agents
                                                      is unimportant this scenario). The time line is divided into six
                                                      sections, as shown in the ﬁgures.
                                                        In the second time section, when Agent3 stops receiving
                                                      JobC because of a failure on Agent5, its criticality rises and
                                                      it requests the other job, JobA, at a higher rate from Agent2
                                                      to meet its workload requirement. Agent2 propagates this
                                                      request to Agent1.
                                                        Then, in the third time section, when Agent4 stops request-
         Figure 2: Example production system          ing JobB because of its failure, this information is also prop-

                                                IJCAI-07
                                                  1284agated by Agent2 to Agent1. On receiving these updated re-  15000
                                                                                  Conventional system
quirements, Agent1 stops processing JobB and uses its full  14000
                                                                                         CABS
capacity to meet the requirement of Agent3 by processing            Demand Rate
                                                          13000       132.0
JobA at a higher rate. Because Agent3’s requirement of JobA
                                                          12000       129.4
at a high rate is consistently met, its criticality remains low       126.7
                                                          11000
until the recovery of Agent4 (at time 60,000). Although the           118.8
                                                                      105.6
utilization of Agent3 is higher than Agent4 according to the  10000
demand rate, Agent4’s criticality rises during the failure and
                                                          9000
it becomes more critical (i.e. bottleneck) than Agent3. Leadtime
  In the fourth time section, after recovery (at time 60,000)  8000
Agent4 requests JobB at a higher rate to recover its work-  7000

load deﬁcit. At time 60,000, Agent1 stops dispatching JobA,  6000
which has a lower criticality (of Agent3) in its requirement,
                                                          5000
and uses its full capacity to dispatch JobB, which has a higher  104  106  108  110  112  114  116  118  120  122  124  126
criticality (of Agent4). As Agent4 starts receiving jobs in-               Throughput
stead of Agent3, Agent4’s workload deﬁcit and criticality de-
                                                           Figure 5: Throughput and lead time of Product1
crease and those of Agent3 increase.
  In the ﬁfth time section, when criticality of Agent3 and  9000
Agent4 become equal at time 75,000, Agent1 uses its capac-                        Conventional system
ity to produce both JobA and JobB for balancing the respec-  8000                        CABS
                                                                     Demand Rate
tive criticalities of Agent3 and Agent4. Then, criticalities of  7000 151.2
Agent3 and Agent4 rise at the same rate until Agent5 restarts         148.2
processing JobC after its recovery at time 90,000.        6000        145.2
  In the sixth time section, because Agent3 has a large deﬁcit        136.1
of JobC, Agent3 dispatches JobC exclusively to recover this  5000     121.0

deﬁcit and reduce its own criticality at the same time. As Leadime  4000
Agent1 stops getting requests for additional JobA, it stops
processing JobA and starts processing JobB. Consequently,  3000
Agent1 recovers the inventory deﬁcit of JobB and also re-
duces the criticality of Agent4. The system therefore recov-  2000

ers the deﬁcit of all the jobs and returns to normal by time  1000
200,000. Although Agent1 has the highest utilization in this  120   125     130     135     140     145
example, it is not relevant because it is unaffected by any fail-             Throughput
ure and its criticality remains low at all times.
                                                           Figure 6: Throughput and lead time of Product2

5  Experiment                                             3.5e+06

We evaluated performance of CABS using data of the semi-        Aggregated Demand Conventional system
conductor manufacturing process described in Section 2.2.  3e+06     751,142             CABS
  A simulation system is developed to model a manufactur-            736,327
ing process with agents to test the proposed algorithms in  2.5e+06  721,046
                                                                     676,046
CABS. The system is built using SPADES [Riley and Riley,             600,949
2003] middleware (http://spades-sim.sourceforge.net), which  2e+06
is an agent-based discrete event simulation environment. It

provides libraries and APIs to build agents that interact with  1.5e+06
the world by sending and receiving time-based events.   Aggregated  Leadtime
5.1  Experimental Results                                  1e+06
In the experiments, we induced random failures of all the
                                                          500000
workstations. The failures occur based on the exponential dis-  580000  600000  620000  640000  660000  680000  700000  720000
tribution with the MTBF value as 5,000 min and the MTTR                  Aggregated Processing Time
value as 400 min. Because of dynamic changes of worksta-
tions’ capacity, bottleneck workstations shifted temporarily Figure 7: Aggregated result of two products
(i.e. criticality of agents changed dynamically).
  We compared the performances of CABS to those of a con- Figure 5 shows the result of throughputs and lead times
ventional manufacturing control method: constant releasing for Product1 with different demand rates. When demand
with earliest due date ﬁrst (EDD) dispatching. We were un- rates are high, some agents become bottlenecks and regulate a
able to make a comparison with more sophisticated methods throughput of the system when they become starved. In such
such as those in [Fowler et al., 2002] because they are inap- cases, CABS achieved approximately equivalent throughputs
plicable to problems with wandering bottlenecks.      with the conventional method, but required much less lead

                                                IJCAI-07
                                                  1285