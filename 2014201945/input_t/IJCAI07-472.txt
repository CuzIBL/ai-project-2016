        Mining Complex Patterns across Sequences with Gap Requirements∗

                            Xingquan Zhu1, 3   and  Xindong Wu2
    1Dept. of Computer Science & Eng., Florida Atlantic University, Boca Raton, FL 33431, USA 
          2Dept. of Computer Science, University of Vermont, Burlington, VT 05405, USA 
            3Graduate University, Chinese Academy of Sciences, Beijing 100080, China 
                             xqzhu@cse.fau.edu; xwu@cs.uvm.edu
                  Abstract                      of repetitive DNA fragments. Examples include recurring 
                                                short base pairs (BP) in protein coding DNA and repetitive 
   The recurring appearance of sequential patterns, 
                                                DNA/RNA motifs in genomes, where recurring patterns of 
   when confined by the predefined gap requirements, 
                                                different lengths and types are commonly found, at both 
   often implies strong temporal correlations or trends 
                                                genomic and proteomic levels, to have significant biologi-
   among pattern elements. In this paper, we study the 
   problem of mining a set of gap constrained sequen- cal/medical values. For example, the 10-11 BP periodicities 
   tial patterns across multiple sequences. Given a set in complete genomes reflect protein structure and DNA 
                                                folding [Herzel et al. 99] and some tandem repeats are now 
   of sequences S1, S2,., SK constituting a single hyper-
   sequence S, we aim to find recurring patterns in S, discovered to be influential to the bacterial virulence to hu-
   say P, which may cross multiple sequences with all man [Belkum et al. 97]. Studying correlations among multi-
   their matching characters in S bounded by the user ple gene sequences, their associations with environments 
   specified gap constraints. Because of the combina- and disease phenotypes, thus provides a means of predicting 
   torial candidate explosion, traditional Apriori- and preventing fatal diseases [Rigoutsos & Floratos 98].  
   based algorithms are computationally infeasible. Although recurring patterns convey important and useful 
   Our research proposes a new mechanism to ensure knowledge, in reality, they rarely just reproduce and repeat 
   pattern growing and pruning. When combining the themselves, but rather appear with a slight shift in the pat-
   pruning technique with our Gap Constrained   tern letters. For example, the tandem repeats in DNA or 
   Search (GCS) and map-based support prediction protein sequences often involve a phase shift incurred by the 
   approaches, our method achieves a speed about 40 insertion or deletion of a short sequence [Belkum et al. 97]. 
   times faster than its other peers.           A practical solution is to allow the mining or search process 
                                                to bear a certain degree of flexibility. Consider sequences in 
1 Introduction                                  Fig. 1(a), where a pattern across three sequences repeats 
                                                three times but with each appearance slightly different from 
Many real-world applications involve data characterized by the others. If we can allow that each time the pattern ap-
continuous sequences and streams. Examples include data pears, any two of its successive pattern letters’ appearances 
flows in medical ICU (Intensive Care Units), network traffic are within a range, rather than a fixed value, we may then be 
data, stock exchange rates, and DNA and protein sequences. able to find the pattern in Fig. 1(a). The introduction of a 
Since real-world events rarely happen independently but variable period (gap) thus provides a flexible way to capture 
rather associate with each other, to some degree, discover- interesting patterns hidden in sequences. 
ing structures of interest in multiple sequences provides us Mining recurring patterns from sequences essentially re-
an effective means to explore patterns trivial in a single data lies on a counting mechanism to check patterns’ occur-
stream but significant when unifying all observed data into rences. This, however, is inherently complicated by the se-
one view. For example, the information from multiple data quential order of the underlying sequences. Considering 
streams in ICU (such as the oxygen saturation, chest volume sequence “AAAGGGTTTTCCCTTTTCCCTTTTCCCC”, 
and hear rate) may indicate or predicate the state of a pa- to find the number of complete occurrences of pattern 
tient’s situation, and an intelligent agent with the ability to P=AGTC (we ignore gap constraints at this stage), there are 
discover knowledge from multiple sensors can automati- 3 × 3 combinations for “A” and “G”, and 4×10+4×7+4×4 
cally acquire and update its environment models [Oats & combinations for “T” and “C”. So in total, there are 9×84 
Cohen 96]. In microbiology, it is now well known that the occurrences for AGTC. Although this number does not 
genomes of most plants and animals contain a large quantity sound scary, considering complete occurrences, however, 
                                                brings one of the most difficult challenges to our problem: 
                                                the deterministic Apriori theory (the support of a pattern 
  ∗ This material is based upon work supported by the US Na- cannot exceed the support of any of its sub-patterns) does 
tional Science Foundation under Grant No. 0514819. The support not hold. Considering S=“AGCTTT”, pattern P=AGCT 
of NSF of China under Grant No. 60674109 is also acknowledged. 


                                           IJCAI-07
                                            2934 appears three times in S, but P’s subpattern AGC appears When considering complex patterns across multiple se-
 once only. Therefore, traditional Apriori-based algorithms quences, the work relevant to our problem here comes from 
 are computationally infeasible to handle our problem.  Oates et al. [96] and Mannila et al. [97]. Both efforts tried 
  Motivated by the above observations, we propose MCPaS to search frequent episodes across sequences, as well as the 
 to Mine Complex Patterns across Sequences with gap re- prediction rules in the form of x indicating y, where x and y
 quirements. We will review related work in the next section, are the frequent episodes in the sequences. For example, 
 and state our research problem in Section 3. In Section 4, after event A happens, exactly two time points later event B
 we will study pattern frequencies and propose a determinis- happens, and then exactly three time points later event C
 tic pruning technique for pattern mining. In Section 5, we happens. Notice that this is a very restrictive constraint, and 
 discuss our unique Gap Constrained Search and Map-based we are trying to find episodes like: after event A happens, 
 Support Prediction processes to accelerate the pattern min- within two time points event B happen, and within three 
 ing process. Based on the proposed pruning and searching time points later event C happens. This loose constraint 
 techniques, we elaborate, in Section 6, the mining algorithm leaves a great flexibility to explore useful patterns.  
 details. Comparative studies are reported in Section 7, fol- The problem of complex pattern mining across multiple 
 lowed by the concluding remarks in Section 8.   sequences is similar to multi-dimensional sequential pattern 
                                                 mining [Pino et al. 01], where a normal practice is to aggre-
           1     2   3    4    5     6    7    8   9    10    11   12  13  14
       S                                         gate values from all sequences to form a single sequence, as 
        1    A    .   .    .   A    .    .    .    .    A    .    .    .    . shown in Figure 1(b), so traditional sequential pattern min-
        S2     .    e  g    .    .     .    .   e    g     .     .    e   .    g 
        S  .    .   3    .    .     .    .    .    3    .    .     .    .    3 ing methods can apply.  
        3                                          In the domain of DNA or protein sequences, BLAST 
                      (a)                        [Altschul 90] is one of the most famous algorithms. Given a 
                1           2           3         4         5         6    . . . query sequence (pattern), it searches for a matching se-
            (A . .) (. e .) ( . g 3) (. . .) (A . .) (. . .) . . 
       Shyb                                      quence from the databases, while what we are pursuing here 
                      (b)                        is on mining the patterns. To find patterns, the TEIRESIAS 
  Figure 1. (a) Patterns across three sequences; (b) The hybrid se- algorithm [Rigoutsos & Floratos 98] is designed for pattern 
        quence generalized from the sequences in (a) discovery from biological sequences with the number of 
                                                 wild-cards that can be present in the extracted patterns re-
 2 Related Work                                  stricted and fixed by the users. Similar approaches such as 
                                                 Pratt [Jonassen 97] is also proposed to mine restricted pat-
 Existing research in mining patterns from data sequences terns (in terms of the maximum numbers of characters and 
 can be distinguished into two categories. (1) Mining pat- wild-cards in each pattern) from a single sequence. 
 terns frequently appearing in a certain number of (relatively 
 short) sequences with a Boolean count, i.e., whether a pat- 3 Problem Statement 
tern occurs in the sequence or not. Traditional pattern min-

ing in market baskets [Srikant & Agrawal 96, Pei et al. 01, The sequences S1,.., Si, .., SK from which we extract patterns 
Zaki 98] and Gene Motif search [Murray et al. 02] fall into are called a hyper-sequence, denoted by S, with each single 

this category. (2) Mining recurring patterns from long se- sequence Si called an element sequence. We use S[i] to rep-
quences such as episode mining [Yang et al. 00, Méger & resent the characters at the ith time point of S. Without losing 
Rigotti 04, Das et al. 98] and tandem repeats and base pair the generality, we assume all element sequences share the 
oscillation detection in DNA sequences [Herzel et al. 99].  same alphabet size, denoted by •, and |•| represents the size 
  Any mining process will have to rely on a counting of •. For simplicity, we assume that all element sequences 
mechanism to check patterns’ frequency information, from have the same lengths, denoted by L.
which frequent patterns can be found. It is worth noting that A wild-card (denoted by a single dot “.”) is a special 
the selected counting mechanism crucially impacts on the symbol that matches any character in •. A gap g is a se-
mining approach. For research efforts relying on a Boolean quence of wild-cards, bounded by the maximal and minimal 
count, because a pattern’s appearances are counted for only values. The size of the gap refers to the number of wild-
once w.r.t. each sequence, the deterministic Apriori theory cards in it. We use g M to represent a gap whose size is 
well holds, and is therefore commonly adopted in the min-          N
                                                 within the range [N, M]. We also call W=M-N+1, the gap 
ing process. On the other hand, when one has to determine a            1 2   l-1
pattern’s actual number of occurrences in the sequences, the flexibility. A pattern, P=p1g p2g ,…,g pl, is a set of charac-
situation becomes complicated, simply because the mining ters from different element sequences and gaps that begin 
process won’t follow Apriori theory at all. Existing efforts and end with characters, where pj is an element pattern 
                                                 which consists of letters from element sequences. An ele-
in the field have therefore proposed confined occurrence                                 j
counting, such as minimal occurrences [Mannila et al. 97], ment pattern should consist of at least one character. g is the 
one-off occurrences [Chen et al. 05], and windowing occur- gap requirement between element patterns pj-1 and pj. Figure 
rences [Mannila et al. 97]. The objective is to confine pat- 2 pictorially shows a pattern P with three element patterns. 
terns’ occurrences such that Apriori theory can apply.  The number of element patterns in P, denoted by |P|, is 


                                            IJCAI-07
                                             2935                                                                          M + N        −
 called the length of P, i.e., the wild-card symbols are not L = [ L − ( l − 1)( + 1)] ⋅ W l 1      (2) 
 counted towards a pattern’s length.                          l             2
  The problem of mining complex patterns across multiple Eq (2) holds only if (l+(l-1) ·M) • L, i.e., the maximal span 
 sequences is to find patterns of the following form: of the pattern is less than the length of the hyper-sequence.  
              P = p g M p g M ... p g M p    (1)
                   1 N  2 N    l −1 N l          4.2 Deterministic Pruning 
 which means that gaps between any two successive element 
                       1  2    1  M              In this subsection, we derive one theorem and two lemmas 
 patterns are the same, i.e., g =g =…=g = g N . An occur- for the deterministic pruning of our mining process. 
 rence of a pattern P in S is defined as a match between the THEOREM 1. Gien a length-l pattern P and its length l-3 
 characters of the element patterns and the element se- subpatterns Q, we have the supports of Q and P satisfy the 
 quences, under the gap constraints. The occurrences are               3  2
                                                 inequality sup(P) ≤ sup(Q) ⋅(W +W ) 2
 considered different, as long as the locations of one pair of 
 the matched characters are different. For example, we con- Proof: Because Q is a length l-3 subpattern of P, denoting 
                                                 Q by q1q2…ql-3, there are four possible relationships between 
 sider P=ATG appears 2 times in S=”ATTG”, w.r.t. g2 , i.e.,
                                         0       them: (1) P=p1Qpl-1pl; (2) P=p1p2Qpl; (3) P=Qpl-2pl-1pl; and (4) 

 S[1]S[2]S[4] and S[1]S[3]S[4]. The support of P in S (de- P=p1p2p3Q. Let’s first prove that Theorem 1 is true for (1). 
 noted by sup(P)) is the number of times P occurring in S. The same proof applies to all other possibilities.  
  Given a length-l pattern P and a length-L hybrid-sequence Assuming N=0 and the gap flexibility is W, the first ele-
S, we first calculate the total number of possible occurrences ment pattern of Q, q1, appears at time slot S[ ]. It is easy to 
                                                 know that p  has W possibilities to appear between S[-W]
of a length-l pattern in S, Ll, then we count the actual ap- 1

pearances of P, sup(P). We consider P a frequent pattern, iff and S[ -1]. So the maximal support of p1Q is sup(p1Q)=W·

sup(P)/Ll is larger than the user-specified threshold value  . sup(Q). Now assuming further that the last element pattern 

                        A         .       .      of Q, ql-3, appears at S[ + ], it is clear that pl-1 has W possi-
         1  1            .        e       g  
   P = p1g0 p2 g0 p3    p1 =                      p2 =                  p3= bilities to appear at the range between S[ ++1] and 
                          .       .       3 
                                                 S[ ++W], as shown in Figure 3. If pl-1 indeed appears at 

         .    .  Pattern letters corresponding to element sequence S1
      A                                          S[ ++W], the element pattern p1 will have W possibilities 
      .
   P =     e   g         ….                      to appear between S[ ++W+1] and S[ ++2W]. Denoting 
      .    .     Pattern letters corresponding to element sequence S
            3                             3      this region by ϕ1 ⊂ α +β + + α +β + , if p  appears at 
                                                              l−1 [  W  1,   2W]    l-1

   p1
        1  p2                                    S[ ++W-1], we know that p may possibly appear between 
       g0                                                              l
                                                 S[ ++W] and S[ + +2W-1]. Notice that S[ ++W] has 
             Figure 2. A pattern denotation 
                                                 been reserved for the possible appearance of pl-1, so the 
                                                 number of possible appearances of p  (w.r.t. to p  at 
 4  Pattern Frequency & Deterministic Pruning                                   l         l-1
                                                 S[ ++W-1]) is W-1, unless pl-1 and pl are the same, which 
 4.1  Pattern Frequency                          is not a generic case in reality. Similarly, the number of pos-
                                                 sible appearances of p (w.r.t. to p  at S[ + +W-2]) is W-2. 
 Given pattern P=p p …p  and its support in a length-L hy-        l       l-1
               1 2 l                             As a result, for all possible W appearances of p  between 
           S      L    l  sup          P’s                                            l-1
per-sequence (with  >> ),   (P), to assess  fre- S[ ++1] and S[ ++W], the sum of their possible match-
quency, we need to find L , the possible number of occur-
                     l                           ing p ’s occurrences is ϕ =W+W-1+W-2…+0=W(W+1)/2.
 rences of P in S. Considering pattern P with gap g M , each l     l−1
                                        N          So the maximal support for length-l pattern P=p Qp p is 
time P appears in S, its actual spans in S vary from l+(l-1)N                          1  l-1 l
                                                 W·sup(Q)·ϕ =     ⋅ 3 + 2  , that is, sup(P) • 
to l+(l-1)M, which correspond to the cases that whenever P l−1 sup(Q) (W W ) 2
appears in S, the gap between any two successive element sup( Q ) ⋅ (W 3 + W 2 ) 2 .
                    N     M
patterns exactly equal to  and  respectively. Assuming +1… + ++1 ++2…++W   + +W+1 + +W+2 … + +W+W …
                                 δ
the first element pattern p1 matches S at S[ ], then for ele-  x    x    …  x        x             x        …  x           x              …    x                  x              …. 

 ment pattern p2, its valid occurrences may possibly appear in 
 the range from S[δ+N] to S[δ+M], i.e., with W=M-N+1 pos-       W               W
                                                   Pattern Q  pl-1           pl
sibilities. The same situation holds for all other element pat- Figure 3. Pattern growing  
                                            δ
terns p3,…pl. So in total, a length-l pattern P starting at S[ ]
          l-1                                    LEMMA 1. Given a threshold  , we say that a length-l pat-
 may have W  possible occurrences in S. Assuming p1 has  
 possible appearances in S, the total number of possible ap- tern P is frequent iff sup(P)/Ll •  . If P’s any length l-3 sub-
                        l-1
                                                 pattern Q’s frequency, Freq(Q), is less than − − ⋅ ω + ,
 pearances of P in S is Ll= ·W . Because the average span                          L (l 1) ( 1) ⋅ ρ
 between successive element patterns is (N+M)/2+1, the av-                        L − (l − 4) ⋅ (ω + 1)
 erage span of P in S is (l-1)·((N+M)/2+1). Then, the possi- where ω=(N+M)/2, then P cannot be a frequent pattern.  

 ble number of occurrences of p1 equals to [L-(l- Proof: 
1)·((N+M)/2+1)], where [♦] means the maximal integer no 
         ♦
larger than . So the value of Ll is defined by Eq. (2).  


                                            IJCAI-07
                                             2936 Because    Freq(Q)=Sup(Q)/Ll-3, we know 
                                            −    5  Pattern Search with Gap Requirements 
        − − ⋅ ω +  , since L  =(L−(l−4)⋅(ω+1))⋅Wl 4 ,
 Sup (Q) ≤ L (l 1) ( 1) ⋅ ρ l−3                  Consider a length-l pattern P with a gap flexibility W, an 
  L    L − (l − 4) ⋅(ω + 1)
   l −3                                          exhaustive search will start from the first pattern letter p  to 
 We have     <  −  − ⋅ ω + ⋅ l−4 ⋅ ρ                                                       1
        Sup(Q) (L (L 1) ( 1)) W                  find its first match in S. Denoting this matching location by 
 Because Q is a length l-3 subpattern of P, according to 
                                                 x, the search process then starts from x to match p2 within 
Theorem 1, we know that Sup(P) ≤ sup(Q) ⋅(W 3 +W 2 ) 2 the range [x+1, x+W]. Such a process iteratively repeats 
 So Sup (P) < (L − (L − 1) ⋅ (ω + 1)) ⋅W l −4 ⋅ ρ ⋅ (W 3 + W 2 ) 2 until all possible locations starting from x have been 

                   − W + 1
   = (L − (L − 1) ⋅ (ω + 1)) ⋅W l 1 ⋅ ⋅ ρ        checked, then it moves one step forward (x+1). The time 
                      2W                         complexity is O(L•Wl-1), which is linear w.r.t. L, but expo-
                                      +
                Sup(P)     = Sup(P) < ρ ⋅ W 1       (3) nential w.r.t. W and l. In the case that S consists of K ele-
            −  − ⋅ ω + ⋅ l−1                                                             l-1
          (L (L 1) ( 1)) W    Ll     2W          ment sequences, this complexity increases to O(K•L•W ).
 Because the gap flexibility W •1, we know (W +1) 2W ≤ 1,
 i.e.,      < ρ . Therefore, P is not frequent.                5.1    Gap Constrained Search (GCS) 
    Sup(P) Ll
                                                 In this subsection, we propose a Dynamic Programming 
                                                 [Bellman 57] oriented search mechanism, which is able to 
 LEMMA 2:                                  S
           If the average span of the longest pattern in  is achieve a linear time complexity in gap constrained pattern 
 less than − ⋅   , i.e., about a half of a length-L hyper-
        (W 1) L 2W                               search. The algorithm consists of three steps. Given a 
sequence S, given a length-l pattern P, for any length l-3 
                                                 length-l pattern P= p1p2 …pl, we first build a length L list for 
subpattern of P, Q, if Freq(Q) is less than L − (l − 1) ⋅ (ω + 1) ,
                                           ⋅ ρ   each of the element patterns pl, denoted by OP . We initiate 
                                L − (l − 4) ⋅ (ω + 1)                               l
                                                 the value of O  to 0 before the search process (For easy 
 where ω=(N+M)/2, then patterns, with P as their subpat-     Pl
terns, are not frequent.                         understanding, we pictorially show a simple example in 
                                                                           2
Justification:                                   Figure 4 with P=AGTC and gap g0 ). 
According to Lemma 1, we know that given the conditions 1. GCS sequentially scans S from the left to right. For any 
in Lemm2, a length-l pattern P will not be frequent. Now current position x, if S[x] matches the first element pat-
assume pattern P is a subpattern of a length-l+k pattern F.
                                                    tern p1, set the value of O  [x] to 1.  
                                                                       P1
According to Eq. (2), we know Sup(P) < ρ ⋅ L ⋅ (W +1) 2W ,
                                    l            2.  At any location x, if S[x] matches any element pattern 
 for any length-l+k pattern F, with P as its subpattern, the 
                           k                        pj, j>l (i.e., excluding the first element pattern), we up-
maximal support of F is less than W  times of Sup(P).                         max(1, x −W )
                                                    date the value of  to =               −  .
                     +                                           OP    Op     =     O p − [x v]
So      <  k    < ρ ⋅W 1⋅ ⋅ k . The frequency of F is              j     j    v 1      j 1
   Sup(F) W Sup(P)      Ll W
                    2W                              As shown in Figure 4, when x=3, S[3] matches p2
                      +
          Sup ( F ) W   1  L    k                   (which is G), then the value of O [3] is updated to the 
 Freq ( F ) =   < ρ ⋅    ⋅  l ⋅W                                              G
           L l + k   2W   L l + k                   sum of OA[1] and OA[2]. The above process indicates 
        W +1 (L−(l −1)⋅(ω +1)) , where + − ⋅ ω +  is the that for any matches of the element pattern letter, p j>1, 
 Freq(F) < ρ ⋅ ⋅              (l k 1) ( 1)                                                j
        2W  (L−(l +k −1)⋅(ω +1))                    at location x, we backtrack W steps to find the number 

average span of the length-l+k pattern. Given that the long- of times pj’s last successive pattern letter pj-1 has ever 
est pattern is less than (W − 1) ⋅ L 2W , we have   appeared. If all element patterns (pj, j>1) were able to 
                  W + 1 ( L − ( l − 1 ) ⋅ (ω + 1 )) iteratively regulate and update their lists O in such a 
      Freq ( F ) < ρ ⋅ ⋅                                                             Pj
                          −  ⋅  −
                   2W  ( L L (W   1) 2W )           way, then the value in O [x] will indicate the number 
             +         −   −  ⋅ ω +                                    Pj
      = ρ ⋅ W 1 ⋅ 2W ⋅ L ( l 1 ) ( 1 ) < ρ
                  +
           2W   W   1       L                       of times that pattern p1p2…pj ever ends at position x.
So pattern F is not frequent.                    3.  We iteratively repeat the above process, until we finish 
  In reality, we may not know in apriori that whether the the whole sequence S. Then we sum up all elements 
average span of the longest pattern in S is less than 
                                                    inO  , which is the number of times P=p1p2…pl appears 
                                                       Pl
 (W −1) ⋅ L 2W  or not (since the longest patterns are yet to be 
                                                    in S. In addition, the values in O [x] will indicate the 
found), so Lemma 2 does not seem to be useful in the min-                     Pl
ing process. Nevertheless, because we are dealing with a number of times P ending at position x.
long hyper-sequence S, it is almost certain that the average The time complexity of GCS consists of two parts: (1) scan-
span (even the maximal span) of the longest pattern in S is ning the whole sequence L, and (2) at each location x, com-
less than a half of |S|. For the DNA sequences we are using paring S[x] with all element patterns, and backtracking W
(in Section 7), the average span of the longest pattern is less steps if necessary. Because each backtracking can be 
than 10 percent of the sampled length-1000 sequence S. So achieved through a sum operation, so the total time com-
we can safely assume that this prerequisite always holds. plexity is O(KL(l-1)), which is linear w.r.t. L, l,and K, and 
                                                 much more efficient than the exhaustive search O(KLWl-1).  


                                            IJCAI-07
                                             2937     1     2      3      4    5      6    7     8    9   10    11   12   13   14   15   16   17   18 
                                                 out rescanning S. For all generated length-l candidates in Cl,
     S    A   A   G   G   C   A   T   C   T   C   A   G    A   T    C   T   T   C we calculate a value l′ =l+3 and a threshold,  
     A    1    1    0    0    0   1    0    0   0    0    1    0    1   0    0    0   0   0 − ′ − ⋅ ω +
                                                                  ρ ′ = L (l 1) ( 1) ⋅ ρ      (5) 
     G    0    0    2    2    0   0    0    0   0    0    0    1    0   0    0    0   0    0 L − (l′ − 4) ⋅ (ω + 1)
     T    0    0    0    0    0   0    2    0   0    0    0    0    0    1    0   0    0   0  ρ
     C    0    0    0    0    0   0    0    2   0    2    0    0    0    0    1   0    0   0  All length-l candidates with their frequencies larger than 
                                                 are forwarded to a frequent set F. If any length-l candidate’s 
                                          2                              l
  Figure 4. Gap constrained pattern search (gap constraint g0 ) frequency is less than ρ′, we mark it as “suspicious”, which 
                                                 means that this pattern is unlikely to grow further, so we 
 5.2  Map-based Support Prediction               will keep an eye on it. Meanwhile, for any length-l candi-

 Notice that each time we grow a length-l pattern P to a date P in Cl, if any of P’s length-l-2 subpattern is suspicious,
                                                             P                   C
 length l+1 pattern F, we will have to check F’s frequency by we will remove  from the candidate set l (on lines 11 to 
searching its occurrences in S again. This reexamination 12 in Figure 6). According to Lemmas 1 and 2, if a pattern 
mechanism costs a considerable amount of system runtime, Q is suspicious, then any length-l patterns with Q as their 
as there are possibly millions of candidates. Nevertheless, if length l-3 patterns are not going to be frequent. Therefore, if 
we can reuse P’s occurrence information, we may be able to P’s length-l-2 subpattern is suspicious, then any length l+1 
speed up the search process dramatically. For this purpose, (and beyond) patterns containing such subpatterns are not 
after we find pattern P’s occurrences, we generate a rear- going to be frequent. So there is no need to put them into the 
map (RM) for P which records the number of times P ap- candidate set Cl for growing. As a result, we may safely 
                                                       P                 C
pears in S and all its ending positions (this RM is actually remove  from the candidate set l.
                                                   After MCPaS prunes out candidates from C, it builds RM
the O list in the above section). As shown in Figure 4, if P                       l
     Pl
                                                 for all remaining length-l patterns in Cl by rescanning S (on 
 ever ends at position x, the value of RM[x] will indicate the line 13 in Figure 6). MCPaS grows length-l+1 candidates by 
 number of times P ends at x; otherwise, RM[x] equals to 0.  
                                                 using all patterns in Cl (on line 5 in Figure 6). This can be 
  With the RM of pattern P=plp2…pl, denoted by the achieved through the following two techniques: (1) trying 
 RM    [x], we may just search P’s RM, instead of scan-
    p1 ... pl                                    all combinations by attaching any possible element pattern 

ning the whole sequence S, to find the number of times F to the patterns in Cl, or (2) using the popular Apriori candi-
appearing in S. This can be achieved by a simple production date generation procedure.  

and sum procedure. More specifically, for pattern F=                           M
                                                 Input: (1) Hyper-sequence S and gap gN , (2) # of element 
plp2…plpl+1, if we can build a head-map (HP) which records 
                                                 sequences K; (3) alphabet •; and (4) frequency threshold 
locations and times of the length-2 pattern plpl+1’s starting 
 information, where HP [x] indicates the number of times Output: Frequent pattern set  
                  pl pl+1                          1. WM-N+1 

plpl+1 starts at position x, then, the support of pattern F is 2.  Build length-2 pattern set C2, build BM and HM maps 
 determined by Eq. (4)                                for all patterns in C2.
                 =   L          ⋅                  3. l   3 
    Sup( p1 p2 ...pl+1 ) RM p .. p [x] HPp p [x]    (4)         φ
                     x=1   1 l      l l +1         4. While (Cl-1 • )
 As shown in Figure 5, when predicting the support of 5. Cl   PatternGen(Cl-1);  
                                                   6.    Predict support values for all candidates in Cl
 AGTC, we first find RMAGT and HMTC, the production and 
sum of the corresponding elements of these two lists will (Eq. (4)) 
                                                   7.    l′=l+3 AND calculate threshold ρ′
exactly equal to AGTC’s support.  
                                                   8.    For any pattern y in Cl
        1     2      3      4    5      6    7     8    9     10    11   12   13   14   15   16   17   18 ∪
                                                   9.        If Freq(y) •     Then   Fl Fl y
         S       A   A    A   G   C   G   T   C   T    C   A   G   G   T    C   T   T   C 10. If Freq(y) < ρ′   Then   y suspicious
     RMAGT   0    0     0    0    0   0    4    0   1    0    0    0    0    2    0    1    0   0 11. If  any length l-2 subset of y is suspicious

     HM TC   0    0     0    0    0   0    2    0   1    0    0    0    0    1     0    1    1   0 12.                    Then  Cl Cl \ y

                                                   13. Rescan S and build RM for all patterns in Cl
    RMAGTC  0    0     0    0    0   0    0    4   0    5    0    0    0    0     2    0    0   1 14. ll +1;  
                                          2                   ∪     ∪
                                                   15. Return (F3 F4… Fl-1)
   Figure 5. Map-based support prediction (gap constraint g0 )
                                                             Figure 6. MCPaS Algorithm 

 6 Algorithm                                     7 Experimental Results 
 The system framework of MCPaS is shown in Figure 6. 
                                                 The data used in our experiments are nucleotide DNA se-
MCPaS first generates all length-2 patterns, denoted by C .
                                             2   quences downloaded from the National Center for Biotech-
 After the first step, MCPaS begins pattern growing and 
                                                 nology Information website [NCBI], we choose four DNA 
pruning. Assuming now at a certain step, we have generated 
                                                 sequences as our test bed (AX829168, AX829170, 
a set of length-l candidates from length-l-1 patterns (on line 
                                                 AX829174, and AX829178). When using multiple se-
5 in Figure 6), then a length-l candidate’s support can be 
                                                 quences to form a hyper-sequence, we truncate sequences 
easily predicted by plugging its length-l-1 patterns’ RM and 
                                                 into equal length ones. Because we use DNA sequences, the 
the corresponding length-2 patterns’ HM into Eq. (4), with-


                                            IJCAI-07
                                             2938