 Quantiﬁed Constraint Satisfaction Problems: From Relaxations to Explanations

                                Alex Ferguson    and  Barry O’Sullivan
                 Cork Constraint Computation Centre, University College Cork, Ireland
                       and Centre for Telecommunications Value-Chain Research
                           {a.ferguson|b.osullivan}@4c.ucc.ie


                    Abstract                          the problem as a Quantiﬁed CSP. The parallels between ad-
                                                      versarial games and QCSP are natural: we can model variables
    The Quantiﬁed Constraint Satisfaction Problem     under our control using existential quantiﬁers and those vari-
    (QCSP) is a generalisation of the classical CSP in ables outside our control using universal quantiﬁers [Chen,
    which some of variables can be universally quanti- 2004].
    ﬁed. In this paper, we extend two well-known con-   The remainder of this paper is organised as follows. In
    cepts in classical constraint satisfaction to the quan- Section 2 we present a formal deﬁnition of the fundamen-
    tiﬁed case: problem relaxation and explanation of tal concepts in constraint satisfaction and the Quantiﬁed CSP.
    inconsistency. We show that the generality of the We present several new forms of problem relaxation in Sec-
    QCSP allows for a number of different forms of re- tion 3 that have previously not been considered due to the
    laxation not available in classical CSP.Wefurther literature’s focus on classical CSP. We show how these forms
    present an algorithm for computing a generalisation of relaxation can be captured using the notion of requirement
    of conﬂict-based explanations of inconsistency for relaxation. Section 4 presents an approach to generating ex-
    the QCSP.                                         planations of conﬂict in Quantiﬁed CSP based on requirement
                                                      relaxation. We show how an existing explanation generation
                                                      algorithm for classical CSPs can be extended to the quanti-
1  Introduction                                       ﬁed case. We review the most related work in Section 5. A
One of the disadvantages of the classical CSP framework is number of concluding remarks are made in Section 6.
that it lacks sufﬁcient expressive power for modelling par-
ticular aspects of real world problems, for example, uncer- 2 Preliminaries
tainty or other forms of uncontrollability in the environment
                                                      Deﬁnition 1 (Classical Constraint Satisfaction Problem)
in which a set of constraints must be satisﬁed.
                                                      A  constraint satisfaction problem (CSP) is a 3-tuple
  In this paper we are concerned with the Quantiﬁed CSP,
                                                      P   =ˆ X , D, C where X is a ﬁnite set of variables
a generalisation of the classical CSP that allows some of the
                                                      X   =ˆ   {x1,...,xn}, D  is a  set of ﬁnite domains
variables to be universally quantiﬁed [Chen, 2004].These-
                                                      D  =ˆ  {D(x1),...,D(xn)}  where the domain D(xi) is
mantics of universal quantiﬁcation over a variable is that the
                                                      the ﬁnite set of values that variable xi can take, and a set of
set of constraints must be satisﬁable for any assignment to it.
                                                      constraints C =ˆ {c1,...,cm}. Each constraint ci is deﬁned
This is in contrast with classical CSP, where all variables are
                                                      by the ordered set var(ci) of the variables it involves, and a
existentially quantiﬁed, i.e. any assignment to an existentially
                                                      set sol(ci) of allowed combinations of values. An assignment
quantiﬁed variable that satisﬁes the constraints is satisfactory.
                                                      of values to the variables in var(ci) satisﬁes ci if it belongs
While the classical CSP is known to be NP-complete in gen-
                                                      to sol(ci).Asolution to a CSP is an assignment of a value
eral, the QCSP is PSPACE-complete [Chen, 2004]. We con-
                                                      from its domain to each variable such that every constraint
sider the problem of relaxing an instance of the QCSP when it
                                                      in C is satisﬁed.
is, for example, unsatisﬁable. We propose several novel forms
of problem relaxation for the QCSP and present an algorithm A fundamental notion used in reasoning about classical CSPs
for generating conﬂict-based explanations of inconsistency. is that of arc consistency [Mackworth, 1977]. Due to logical
  Our motivation comes from problems in conformant plan- conjunction, any assignment to the variables that is locally
ning and supply-chain management. We are interested in inconsistent with a constraint is guaranteed not to be part of
using constraints to support the local decision-making pro- any consistent solution.
cesses of a company that must supply products to a set of cus- In the classical CSP we can regard all variables as being
tomers, while managing a complex network of its own suppli- existentially quantiﬁed: we wish to show that there exist as-
ers. Classical CSP is not sufﬁciently expressive to model this signments for each of the variables that satisfy all constraints
type of problem concisely, since some of the variables are not simultaneously. However, we can generalise further by also
under the control of the decision-maker, but we can model allowing variables to be universally quantiﬁed.

                                                IJCAI-07
                                                   74Deﬁnition 2 (Quantiﬁed CSP) A QCSP, φ, has the form   While all of these forms of relaxation are available to us in the
                                                      QCSP, the additional expressiveness we have access to within
 Q.C = Q  x  ∈ D(x ) ···Q x  ∈ D(x  ).C(x ,...,x )
         1 1      1      n n       n    1      n      the QCSP gives rise to new forms of relaxation that are not
where C is a set of constraints (see Deﬁnition 1) deﬁned over available in classical CSP.
            x ...x      Q
the variables 1   n, and   is a sequence of quantiﬁers 3.1 Relaxation for the Quantiﬁed CSP
over the variables x1 ...xn where each Qi (1 ≤ i ≤ n) is
either an existential, ∃, or a universal, ∀, quantiﬁer1.The A useful viewpoint to adopt when studying the QCSP is to
                                                      consider an instance of the problem as an adversarial game
expression ∃xi.c means that “there exists a value a ∈ D(xi)
                                                      between two players: a universal player who sets the univer-
such that the assignment (xi,a) satisﬁes c”. Similarly, the
                                                      sally quantiﬁed variables, and an existential player, who sets
expression ∀xi.c means that “for every value a ∈ D(xi),
                                                      the existentially quantiﬁed variables [Chen, 2004].Inthese
(xi,a) satisﬁes c”.
                                                      terms, we can regard relaxations of the QCSP as modiﬁcations
Deﬁnition 3 (Semantics of QCSP) (based on [Gent et al., to the problem that make it easier for the existential player to
2005]) We deﬁne the semantics of the QCSP, Q.C, recursively win. From the perspective of the universal player, a relaxation
as follows. If C is empty then the problem is true.IfQ is of of the QCSP may restrict the ways in which this player can fal-
the form ∃x1Q2x2 ...Qnxn then Q.C is true iff there exists a sify the formula. For example, we can restrict the domain of
value a ∈ D(x1) such that Q2x2 ...Qnxn.(C∪{x1 = a}) is values of the universally quantiﬁed variables. From the per-
true.IfQ is of the form ∀x1Q2x2 ...Qnxn then Q.C is true spective of the existential player, a relaxation increases the set
iff for every value a ∈ D(x1) such that Q2x2 ...Qnxn.(C∪ of responses that can be played to counteract the choices of
{x1 = a}) is true.Otherwise,Q.C is false.             the universal player. We proceed by discussing ﬁve classes of
                                                      relaxation that are available in the context of the QCSP. While
Example 1 (Quantiﬁed CSP) Consider a QCSP deﬁned on
                                                      the ﬁrst two of these are familiar from CSP, the remaining
the variables x1 and x2 such that D(x1)=D(x2)=
                                                      three are particular to the more expressive framework, and
{1, 2, 3} as follows: ∃x1∀x2.{x1 <x2}. This QCSP is false.
                                                      have no direct equivalents in the unquantiﬁed case.
This is because for any value for variable x1 there is at least
one value in the domain of x2 that is inconsistent with it. 
                                                      Single Constraint Relaxation. This is the type of relax-
  The above deals only with the equivalent of the decision ation equivalent to that normally considered in classical CSPs.
problem for QCSPs; the analogous treatment for exempliﬁca- For example this is the classical approach in the PCSP frame-
tion requires consideration of a winning strategy generalising work in which allowed tuples are added to an extensionally
the idea of a solution [Chen, 2004]. Of course, the order of represented constraint. In principle, this may be replacing a
the quantiﬁers in a QCSP is critical. Consider the following constraint with any logically weaker one. As mentioned ear-
QCSP: ∃x1 ∈{0, 1}∀x2 ∈{0, 1}.{x1  = x2} is false, while
∀x  ∈{0, 1}∃x ∈{0, 1}.{x   = x }  true                lier, complete removal of a constraint may be considered as a
  2          1          1    2  is   .                special case of this type of relaxation.
                                                      Example 2 (Single Constraint Relaxation) Consider the
3  Relaxation                                         following QCSP,whichisfalse:
Our motivation for studying relaxations of the QCSP relates   ∃x1 ∈{1, 2}∀x2 ∈{1, 2, 3}.{x1 <x2}.
to the observation that many real world problems are over-                         x     x       <   ≤
constrained. Accordingly, we are often interested in relaxing If we relax the constraint between 1 and 2 from to to
the constraints of the problem so that we ﬁnd a solution that get the following:
is at least relatively satisfactory. In this scenario, problem ∃x1 ∈{1, 2}∀x2 ∈{1, 2, 3}.{x1 ≤ x2},
relaxation can be seen as a way of exploring the space of al- the QCSP becomes true. This is because if the existential
ternative models for a given problem. Furthermore, problem player sets x1 to 1, the universal can no longer ﬁnd an as-
relaxations give us a language with which we can explain the signment that falsiﬁes the QCSP.          
over-constrainedness of a problem. Moving from classical
CSPstoQCSPs provides us with a richer class of relaxations,
and hence, a more expressive language for explanations. Relaxation of Existentially Quantiﬁed Domains. Enlarg-
  One of the most well known frameworks for reasoning ing the domain of an existentially quantiﬁed variable is the
                                                      direct equivalent of relaxing domains in the classical frame-
about problem relaxation in classical CSP is Partial Constraint
Satisfaction [Freuder and Wallace, 1992]. One can identify work.
four possible ways of relaxing a classical CSP: the domain Example 3 (Relaxation of Existential Domains) We revisit
of a variable can be enlarged; the relation of a constraint (the the QCSP presented in Example 2. This is false because the
set of allowed tuples) can be enlarged; a constraint can be scenario in which the universal player sets x2 to 1 is avail-
removed from the problem; or, a variable can be removed able. To counter this, the existential player must be able to
from the problem. Note that all of these strategies can be play a value that is smaller than 1. A suitable relaxation is
regarded as enlarging domain or constraint relations. (And the following, which adds the value 0 to the domain of x1:
domains can themselves be formulated as unary constraints.)  ∃x1 ∈{0, 1, 2}∀x2 ∈{1, 2, 3}.{x1 <x2};
                                                                       true
  1When the domain of a variable is clear from context we often the relaxed QCSP is since the existential player can set
                                                      x                                                
write Qixi rather than Qixi ∈ D(xi) in the quantiﬁer sequence. 1 to 0 and the universal player cannot falsify the formula.

                                                IJCAI-07
                                                   75Relaxation of Universally Quantiﬁed Domains. Aclass     We claim that this set of relaxations is comprehensive (un-
of relaxation not corresponding to any in classical CSPsis less reformulation of the original problem is considered in
to remove values from the domains of universally quantiﬁed conjunction with relaxation). It is also orthogonal, if we ap-
variables. Doing so reduces the number of scenarios un- ply quantiﬁer relaxation only in the case where the domain
der which the existential player must ﬁnd satisfying assign- is a singleton, in the sense that all possible single-step relax-
ments for the existential variables, leading to a more satisﬁ- ations result in problems that are mutually incomparable.
able problem. The rationale for this may be an analysis of
which ‘problem values’ it may be permissible to ignore, or 3.2 QCSP Relaxation as Requirement Relaxation
the narrowing of a range with a probabilistic interpretation. We now present a uniform treatment of the relaxation of both
Example 4 (Relaxation of Universal Domains) Returning quantiﬁers and constraints, that is, the ﬁrst four classes of
to the QCSP of Example 2, which is false, due to the avail- relaxation we identify above. Requirements correspond to ei-
                                                      ther a constraint in the QCSP, or a universal quantiﬁer, and
ability of the assignment of x2 to 1, for which the existential
player has no satisfying counter-assignment. However, if we we frame relaxation of each as instances of requirement re-
                                                      laxation, over a partial order deﬁned for that purpose.
relax the domain of the universally quantiﬁed variable x2 so
that it no longer contains the value 1 to get the following: Deﬁnition 4 (Relaxation of a QCSP) We deﬁne the relax-
                                                           φ[r]          φ
         ∃x  ∈{1, 2}∀x  ∈{2, 3}.{x <x  };             ation    of a QCSP   to a relaxed version of a single re-
           1          2           1    2              quirement to a new value, r, as follows:
the relaxed QCSP is true since the existential player can set                                 
                                                        Q1x1 ...Qixi ∈ D(xi) ...Qnxn.C[Qixi ∈ D (xi)]
x1                                               
  to 1 and the universal player cannot falsify the formula.                            
                                                                      =ˆ Q1x1 ...Qixi ∈ D (xi) ...Qnxn.C;
                                                                                      
Quantiﬁer Relaxation. A fourth form of relaxation, also Q.(c1 ...cj ...cm)[cj ]ˆ= Q.(c1 ...cj ...cm).
with no direct equivalent in classical CSP,istoreverse the
                                                      This can then be extended to a set of relaxations R: φ[∅]=φ,
quantiﬁcation of a variable from universal to existential. This φ[{r}∪R]=(φ[r])[R]
relaxation corresponds to achieving control over a factor pre-            .
viously considered to be environmental. This further relaxes Deﬁnition 5 (Ordering over Requirement Relaxations)
the universal domain relaxation.                      Given the set of possible relaxations, R(R), of a requirement
                                                      R, we say that (r1 ∈R(R))   (r2 ∈R(R))   iff for any
Example 5 (Quantiﬁer Relaxation) We revisit the QCSP          φ   φ[r ]                φ[r ]
presented in Example 2, which is false. If relax the universal problem ,if 1 is satisﬁable then 2 is, necessarily.
quantiﬁer on variable x2 to be existential to get:    We further require that this partial order also be a meet-
                                                      semilattice, i.e. that greatest lower bounds are guaranteed to
        ∃x1 ∈{1, 2}∃x2 ∈{1, 2, 3}.{x1 <x2};           exist: if r1,r2 ∈R(R),thenr1  r2 is well-deﬁned.

the relaxed QCSP is true.                              The ordering operator and property we use to make for-
                                                      mal the notion of relaxation per se:ifr1  r2,thenwesay
                                                          r                      r
Quantiﬁer Moving.  A ﬁfth class of problem relaxation cor- that 2 is a (strict) relaxation of 1. The greatest lower bound
responds to moving a universally quantiﬁed variable to the corresponds to the unique requirement relaxation which is as
left in the sequence of quantiﬁers. Equivalently, we can con- constraining as both of its arguments, but no more (that is,
sider moving an existentially quantiﬁed variable to the right the greatest such element of the relaxation space). The lat-
in the sequence of quantiﬁers. This corresponds to analysis or tice property follows naturally from the relaxation spaces we
oracular knowledge of the value of an environment variable, shall deﬁne, and is motivated by the observation that we pro-
or of delaying a decision until better information is available. gressively tighten approximations downwards, and that our
                                                      relaxation spaces must have a unique least element. For clar-
Example 6 (Quantiﬁer Moving) We consider an example,  ity in that respect, we will deﬁne the meet operator directly.
based on one presented earlier in this paper. The following The partial order may be deﬁned as r1  r2 =ˆ r1 =(r1 r2),
QCSP is false:                                        and we note that in each case it is straightforward to derive a
         ∃x  ∈{0, 1}∀x  ∈{0, 1}.{x  = x }             closed form for the comparison.
            1          2          1    2                We now deﬁne the space of relaxations for constraints, the
We relax this problem by moving the universally quantiﬁed ﬁrst form of relaxation we identiﬁed above. Essentially, a
variable to the left to give the following QCSP which is true: relaxation of a constraint involves adding additional allowed
                                                      tuples into its relation.
         ∀x2 ∈{0, 1}∃x1 ∈{0, 1}.{x1  = x2}
                                                      Deﬁnition 6 (Requirement Relaxation for Constraints)
Informally, the relaxed QCSP gives the existential player the Given a constraint c =ˆ var(c),sol(c) we deﬁne its relax-
opportunity to react to the actions of the universal player.  ations in terms of adding additional allowed tuples to sol(c)
  It should be noted that whether each of these relaxations as follows:
                                                                                 
is sensibly possible for a given application is a modelling or R(c)ˆ= {sol (c):sol(c) ⊆ sol (c) ⊆ Πx∈var(c)D(x)}.
knowledge engineering question. In each case, a given con-
straint, domain, or quantiﬁer may be inherent to the problem, The elements of R(c) form the usual lattice using intersec-
or “background”, and thus not susceptible to relaxation. tion, that is,  =ˆ ∩.

                                                IJCAI-07
                                                   76We now consider universal quantiﬁer relaxation. Informally, Deﬁnition 8 (Maximally Relaxed Explanation) Given
the space of possible relaxations for a universal quantiﬁer cor- a consistency propagator Π,amaximally relaxed (Π-
responds to restricting the quantiﬁer to any one of the expo- conﬂict-based) explanation of a Π-inconsistent QCSP φ,isa
nentially many subsets of the domain of the quantiﬁed vari- maximally relaxed QCSP, X, that is inconsistent with respect
able, narrowing to a single choice of value, and thereafter to Π; i.e. such that φ  X, ⊥∈Π(X) and for all X such
widening to existentially quantiﬁed subsets. It therefore cor- that X  X, ⊥ ∈/ Π(X).
responds to the second, third and fourth forms of relaxation
identiﬁed in Section 3.1. Of course, in practice, one can limit 4.1 Explanation Algorithms
this relaxation space to a subset of tractable size.  We adopt a scheme similar to that of the QUICKXPLAIN
Deﬁnition 7 (Requirement Relaxation for Universals)   ‘family’ of algorithms [Junker, 2001; 2004], modiﬁed and
Given a requirement, r, on a universally quantiﬁed variable extended in the following way. We replace the removal (re-
x,i.e.r =ˆ ∀x ∈ D(x), the set of relaxations R(∀x ∈ D(x)) spectively, addition) of a constraint with a speciﬁed require-
is deﬁned as:                                         ment relaxation (resp. tightening). The speciﬁed relaxations
    R(r)ˆ=    {(∀x ∈ D(x)) : ∅⊆D(x) ⊆ D(x)}         form a semilattice, as described in the previous section. This
          ∪{(∃x    ∈ D(x)) : ∅⊆D(x) ⊆ D(x)}.        could, in principle, be every possible relaxation, but at a min-
                                                      imum we generally wish to consider the speciﬁed relaxations
The elements of R(∀x ∈ D(x)) form the following meet- corresponding to the removal (resp. imposition) of each con-
semilattice:                                          straint, and the relaxation of a universal quantiﬁer to an ex-
  (∀x ∈ D(x))    (∀x ∈ D(x))                        istential one: that is, corresponding to relaxation space R2.
               =(ˆ ∀x ∈ (D(x) ∪ D(x)));              We may further restrict the set of speciﬁed relaxations on the
  (∃x ∈ D(x))    (∃x ∈ D(x))                        basis that some constraints, and some variables, are intrinsi-
               =(ˆ ∃x ∈ (D(x) ∩ D(x)));              cally environmental, and that they should participate in every
  (∀x ∈ D(x))    (∃x ∈ D(x))                        explanation; this corresponds to using relaxation space R1.
               =(ˆ ∀x ∈ D(x)), if D(x) ∩ D(x)  = ∅;    As consideration of every possible relaxation is in general
  (∀x ∈ D(x))    (∃x ∈ D(x))                        completely intractable, it will generally be desirable to spec-
               =(ˆ ∃x ∈∅), if D(x) ∩ D(x)=∅.         ify a much smaller set. This may be done in broadly two
                                                      ways. Firstly, as part of the modelling process, an expert
Note the existence of unique top and bottom points, corre- specifying the class of problem instances under considera-
                                                =
sponding to trivially- and un-satisﬁable quantiﬁcations: tion can give the sets of possible requirement relaxations that
(∀x ∈∅), ⊥ =(∃x ∈∅)
                    .                                 are meaningful. Secondly, we can consider a user-driven re-
  We can now deﬁne the space of possible relaxations of a ﬁnement step, after initial exploration of the available expla-
given QCSP in terms of its constituent requirements in the nat- nations, based on a base step choice of available relaxations,
ural way, in terms of the cross-product of the available relax- when these have been found to be unsatisfactory.
ations for each, and similarly the associated comparison and
meet operations.                                      4.2  The SIMPLEQUANTIFIEDXPLAIN        Algorithm
  Before we consider how explanations of falsity can be When the set of speciﬁed relaxations are binary, i.e. require-
computed using relaxations, we consider two special cases ments are either in place or fully relaxed, we can use the
of relaxation: namely, 1-point and 2-point relaxation spaces.
                           R                          equivalent of Junker’s algorithms, modiﬁed simply to use, in-
The former, which we denote by 1, contains only the origi- stead of the imposition and removal of a constraint, the choice
nal constraint itself, and is useful when we wish to ensure that between the original and relaxed requirement throughout. We
some constraints or quantiﬁers cannot be relaxed. The latter,                                [          ]
R                                                    ﬁrstly reformulate Junker’s REPLAYXPLAIN Junker, 2001
  2, contains both the original constraint, and , the maximal in terms of relaxations in Algorithm 1, thereby generalising
relaxation; it is useful when we wish to model the case where
                                                      it to QCSPs with (at most) one distinct relaxation available
we either maintain the requirement or completely relax it. for each of the original requirements, i.e. a requirement is ei-
                                                      ther present, or fully relaxed. We call this modiﬁed procedure
4  From Relaxations to Explanations                   SIMPLEQUANTIFIEDXPLAIN. We provide as arguments φ,a
We now consider explanations for the QCSP. A familiar no- QCSP,andR, a set of available relaxations, which here should
tion of explanation is that based on minimal conﬂicts [Junker, only contain the greatest relaxations allowed for each require-
2004]. As we have considered quantiﬁcation, which is not ment, ri, that is relaxable in the speciﬁed relaxation Rs,i.e.
readily presentable in terms of elements of a conﬂict set,and R = {i : i ∈ [1,m+ n], i = Rs(ri), |Rs(ri)| > 1}.
further, more general relaxations of constraints than their re- (This is only well-deﬁned for spaces with a unique maxi-
moval, it is necessary to generalise this notion to that of a min- mal relaxation.) We begin with a maximally relaxed prob-
imally conﬂicting explanation, or alternatively, a maximally lem, using all of the available relaxations R, then build a
relaxed conﬂict-based explanation. We will henceforth refer working set W of relaxations we then iteratively omit, un-
to these as maximal, following the relaxation ordering previ- til a Π−inconsistency occurs. At that point we conclude that
ously deﬁned. We deﬁne this notion with respect to a (typ- the relaxation r last added to W (that is, last removed from
ically incomplete) consistency propagation method Π,such the subproblem) can be added to a set X corresponding to a
as QAC [Bordeaux and Monfroy, 2002], in a similar way to partial conﬂict, and that no further relaxations need to be con-
Junker [Junker, 2004].                                sidered, as some subset of W must be minimal, and still yield

                                                IJCAI-07
                                                   77an inconsistency. We iteratively continue doing this until the φ0 = φ[R − (X ∪ W )]         ⊥∈Π(φ0)?
set of possible further relaxations is exhausted, at which point ∃x1 ∈{1, 2}∃x2 ∈{1, 2, 3}.∅ no
X                                   φ
  can be used to relax the original problem to yield a max- ∃x1 ∈{1, 2}∃x2 ∈{1, 2, 3}.{x1 <x2} no
                               φ[R − X]
imally relaxed inconsistent problem,   , which is our   ∃x1 ∈{1, 2}∀x2 ∈{1, 2, 3}.{x1 <x2}  yes
explanation.                                            ∃x1 ∈{1, 2}∀x2 ∈{1, 2, 3}.∅         no
                                                        ∃x1 ∈{1, 2}∀x2 ∈{1, 2, 3}.{x1 <x2}  yes
 Algorithm 1:SIMPLEQUANTIFIEDXPLAIN(φ, R)
  Input :AQCSP φ; a set of available single-step relaxations Figure 1: SIMPLEQUANTIFIEDXPLAIN: trace on Example 7.
         R ⊆{1,...,n+m}.
  Output: A maximally relaxed conﬂict-based explanation for φ.
                                                      lattices of arbitrary size. Once again we follow the basic
  if ⊥ ∈/ Π(φ) then return exception “no conﬂict”;
   R = ∅          φ                                   structure of REPLAYEXPLAIN, but now the key difference
  if     then return ;                                is that instead of successively adding constraints to a conﬂict
  X ←∅;
                                                      set (or as in SIMPLEQUANTIFIEDXPLAIN, removing avail-
  R0 ← R;
  while R0 = ∅ do                                    able relaxations), we instead consider a current candidate re-
     W  ←∅;                                           laxation comprising one element from each relaxation space,
     while ⊥ ∈/ Π(φ[R − (X ∪ W )]) do                 r1 ...rm+n, and use  to obtain successive approximations
        select (any) r from R0;                       to a maximally relaxed explanation. We begin with a max-
        W  ← W  ∪{r};                                 imal relaxation of each requirement, and then progressively
        R  ←  R −{r}
          0    0     ;                                tighten these one at a time: we select an i such that ri may be
     X ←  X ∪{r};                                     assigned a new value strictly less than the old one, tightening
     R0 ← W  −{r};                                    by a minimal amount at each step to ensure maximality of
  return φ[R − X];                                    the ﬁnal relaxation of the whole problem. When an inconsis-
                                                      tency is detected, we eliminate all relaxations tighter than or
                                                      incomparable to the current approximation from future con-
  Note that we do not, as with REPLAYXPLAIN and Junker’s
                                                      sideration, as unnecessary for a maximally relaxed explana-
other explanation procedures, split the input into background
                                                      tion. At the same time, we restrict the relaxation space for the
and user constraints, and nor do we restrict the output to only
                                                      last-relaxed requirement, Ri, to ensure that that requirement
user constraints, since the syntax of quantiﬁed problems pre-                             
                                                      may not be as relaxed as the earlier value, r , that did not pro-
cludes us from doing so. We are instead able to designate                                 i
                                                      duce an inconsistency, as we have guaranteed that that value
some constraints and some quantiﬁed variables as not relax-
                                                      cannot take part in the explanation currently under construc-
able, which then can be regarded as playing the same role as
                                                      tion. We then repeat this process with the relaxation spaces
background constraints. Thus implicitly, user requirements
                                                      so restricted, until eventually only one possibility remains for
must have at least one available relaxation. One difference
                                                      each relaxation, thus fully determining the chosen explana-
in the form of this algorithm is that the ‘background’ con-
                                                      tion. The complexity of this algorithm (and that of SIMPLE-
straints are included in the explanation. Background con-
                                                      QUANTIFIEDXPLAIN) is equivalent to that of Junker’s RE-
straints may be removed from the output after the fact if de-
                                                      PLAYXPLAIN, given a consistency operator of similar com-
sired. Observe that the two are equivalent in this sense: if
                                                      plexity, and similar numbers of available relaxations. How-
REPLAYXPLAIN   (C, U)=X,andSIMPLEQUANTIFIEDX-
                                                      ever, in the QCSP case, there is scope for each of those to be
PLAIN (C ∪ U, {i : ci ∈ U})=Xq,andXq = X ∪ C.(As-
                                                      signiﬁcantly larger.
suming similar ordering of relaxations (constraints) in each
case.) The remaining algorithms presented by Junker may be
reformulated in terms of relaxations similarly. (Discussion of Algorithm 2:QUANTIFIEDXPLAIN(φ, R)
the correctness and complexity of this algorithm is deferred
                                                        Input :AQCSP φ; a set of relaxation spaces for each
until after the presentation of QUANTIFIEDXPLAIN,ofwhich       quantiﬁer and constraint, R⊆R(φ).
it is a special case.)                                  Output: A maximally relaxed conﬂict-based explanation for φ.
Example 7 (SIMPLEQUANTIFIEDXPLAIN)     Consider the     if ⊥ ∈/ Π(φ) then return exception “no conﬂict”;
execution of SIMPLEQUANTIFIEDXPLAIN(φ,   R),where       enumerate R as R1 ...Rm+n;
φ =ˆ ∃x1 ∈{1,  2}∀x2 ∈{1,  2, 3}.{x1 <x2} and R  =ˆ     if ∀i ∈ [1,m+ n]|Ri| =1then return φ;
{x2 = ,c = }, a trace of the progress of which is shown while ∃i : |Ri| > 1 do
                                                           foreach Ri do choose an ri from maxima(Ri);
in Figure 1. Note that in this case, the explanation is unique,                                  
and identical to the original problem, as no relaxation is pos- if ⊥∈Π(φ = φ[{r1,...,rm+n}]) then return φ ;
                                                                ⊥ ∈/ Π(φ[{r ,...,r }])
sible without introducing consistency. Had different choices while        1   m+n    do
                                                               choose an i s.t. ri = (Ri);
of relaxations been made, a different trace would have oc-     r ← r
                                                              i    i;
curred, but the same ﬁnal result.                              choose an ri from maxima{r : r ∈Ri,r  ri};
                                                                           
                                                           Ri ←{r  : r ∈Ri,ri  r};
4.3  The QUANTIFIEDXPLAIN      Algorithm
                                                           foreach Rj do Rj ←{r : r ∈Rj ,rj  r};
We now  consider QUANTIFIEDXPLAIN   (Algorithm 2), a    return φ[{r1,...,rm+n}];
more general algorithm allowing for requirement relaxation

                                                IJCAI-07
                                                   78