                            A New Perspective on Stable Models∗
                       Paolo Ferraris1, Joohyung Lee2    and Vladimir Lifschitz1
       1Department of Computer Sciences             2Dept. of Computer Science and Engineering
          University of Texas at Austin                        Arizona State University
           1 University Station C0500                          South Mill Avenue 574
                Austin, TX 78705                                  Tempe, AZ 85281
            {otto,vl}@cs.utexas.edu                                joolee@asu.edu

                    Abstract                          are considered “stable models”; it turns out that the only sta-
                                                      ble model of (3) is
    The deﬁnition of a stable model has provided a
    declarative semantics for Prolog programs with                     {p(a),q(b),r(a)}.              (4)
    negation as failure and has led to the development  In spite of this difference between the two deﬁnitions, there
    of answer set programming. In this paper we pro-  is often a close relationship between the completion of a pro-
    pose a new deﬁnition of that concept, which covers gram and its stable models. For instance, in every model
    many constructs used in answer set programming    of (2) (in the sense of ﬁrst-order logic) that satisﬁes the unique
    (including disjunctive rules, choice rules and con- names assumption a = b, the elements of set (4) are true, and
    ditional literals) and, unlike the original deﬁnition, all other ground atoms are false.
    refers neither to grounding nor to ﬁxpoints. Rather, Practical needs of answer set programming (ASP) have
    it is based on a syntactic transformation, which  led to the invention of several declarative programming con-
    turns a logic program into a formula of second-   structs that are not used in Prolog. Clark’s completion seman-
    order logic that is similar to the formula familiar tics is not applicable to these constructs, at least directly. For
    from the deﬁnition of circumscription.            instance, the last rule of the program
                                                                         p(a),
1  Introduction                                                          p(b),                        (5)
                                                                         {q(x):p(x)}
Two widely used deﬁnitions of the semantics of logic
programs—in terms of program completion [Clark, 1978] is a “choice rule” containing a “conditional literal” [Simons
and in terms of stable models [Gelfond and Lifschitz, et al., 2002]. Intuitively, this rule says: for any x such that
1988]—look very different from each other. The former treats p(x), choose arbitrarily whether or not to include q(x) in the
a logic program as shorthand for its completion, which is a stable model. The semantics of programs with choice rules,
ﬁrst-order formula. For instance, the program         like the original stable model semantics, is deﬁned in terms of
                p(a),                                 grounding and a ﬁxpoint condition. For instance, grounding
                                                      turns the last line of (5) into the ground choice rule
                q(b),                           (1)
                r(x) ← p(x), not q(x)                                     {q(a),q(b)}.
is shorthand for                                      As it turns out, program (5) has 4 stable models:
        ∀x(p(x) ↔ x = a) ∧∀x(q(x) ↔  x = b)                          {p(a),p(b)},
                ∧∀x(r(x) ↔  (p(x) ∧¬q(x))).     (2)                  {p(a),p(b),q(a)},
                                                                     {p(a),p(b),q(b)},                (6)
On the other hand, according to the stable model seman-              {p(a),p(b),q(a),q(b)}.
tics, (1) is shorthand for the set of the ground instances of
its rules:                                              In this paper we propose a new deﬁnition of a stable model,
                p(a),                                 which covers many constructs used in ASP (including dis-
                q(b),                                 junctive rules, choice rules, cardinality constraints and condi-
                                                (3)
                r(a) ← p(a), not q(a),                tional literals) and refers neither to grounding nor to ﬁxpoints.
                r(b) ← p(b), not q(b).                Rather, like the deﬁnition of program completion, the new
                                                      deﬁnition of a stable model is based on a transformation that
The deﬁnition of a stable model describes a ﬁxpoint construc- turns the given logic program into a formula of classical logic.
tion that determines which sets of atomic formulas from (3) To be precise, the result of this transformation is a second-
  ∗The ﬁrst and third authors were partially supported by the Na- order formula, which looks similar to the formula famil-
tional Science Foundation under Grant IIS-0412907. The second iar from the deﬁnition of circumscription [McCarthy, 1980;
author was partially supported by DTO AQUAINT.        1986] in the form adopted in [Lifschitz, 1994].

                                                IJCAI-07
                                                   372              The new deﬁnition and examples of its use are discussed order sentences of special kinds.3
            in Section 2 below. In Section 3 we relate our deﬁnition To rewrite a “traditional” program, such as (1), as a ﬁrst-
            to a theorem from [Lin, 1991], to the encoding of proposi- order sentence, we
            tional logic programs by quantiﬁed Boolean formulas due to • replace every comma by ∧ and every not by ¬ ,
            Pearce, Tompits and Woltran [2001],1 and to recent research
                                                                    •                   ←
            on ﬁrst-order equilibrium logic [Pearce and Valverde, 2004; turn every rule Head Body into a formula by rewrit-
                                                                                               →
            2005]. A theorem about strong equivalence, illustrating the ing it as the implication Body Head,and
            nature of the ongoing work on reformulating the theory of • form the conjunction of the universal closures of these
            stable models on the basis of the new deﬁnition, is stated in formulas.
            Section 4. Finally, in Section 5 we propose a way to gener-
                                                                  For instance, we think of (1) as alternative notation for the
            alize the concept of program completion that is similar to the
                                                                  sentence
            new deﬁnition of a stable model.
              Our treatment of stable models may be of interest for three p(a) ∧ q(b) ∧∀x((p(x) ∧¬q(x)) → r(x)).  (7)
            reasons. First, it provides a new perspective on the place              ¬F               F →⊥
            of stable models within the ﬁeld of nonmonotonic reason- We are going to treat as shorthand for , so that the
            ing. We can distinguish between “translational” nonmono- last conjunctive term can be further expanded into
            tonic formalisms, such as program completion and circum-         ∀x((p(x) ∧ (q(x) →⊥)) → r(x)).
            scription, and “ﬁxpoint” formalisms—default logic [Reiter,
            1980]2 and autoepistemic logic [Moore, 1985]. In the past, In the spirit of [Ferraris and Lifschitz, 2005b], (5) is under-
            stable models were seen as part of the “ﬁxpoint tradition.” stood as
            In fact, the invention of stable models was an outgrowth of  p(a) ∧ p(b) ∧∀x(p(x) → (q(x) ∨¬q(x))).
            earlier work on the relationship between logic programming                                            (8)
            and autoepistemic logic [Gelfond, 1987]; the ﬁrst journal pa- Since the last conjunctive term is logically valid, the class
            per on answer sets [Gelfond and Lifschitz, 1991] emphasized of models of formula (8) would not change if we dropped
            their relation to default logic. The remarkable similarity be- that term; but the class of its stable models, as deﬁned below,
            tween the new deﬁnition of a stable model and the deﬁnition would be affected. In this sense, the last conjunctive term is
            of circumscription is rather curious from this point of view. essential.
              Second, we expect that the new deﬁnition of stable mod- Finally, here is an example of turning a cardinality con-
            els will provide a uniﬁed framework for useful answer set straint [Simons et al., 2002] into a ﬁrst-order formula. The
            programming constructs deﬁned and implemented by sev- rule
            eral different research groups, such as choice rules, cardinal-      p ← 10 {q(x):r(x)} 20
            ity constraints and conditional literals (Helsinki University of
                                                                  corresponds to the sentence
            Technology), disjunctive rules and aggregates [Faber et al.,
            2004] (Vienna University of Technology and University of  (∃10x(q(x) ∧ r(x)) ∧¬∃21x(q(x) ∧ r(x))) → p, (9)
            Calabria), and ASET-Prolog constructs [Gelfond, 2002, Sec-
            tion 5.2] (Texas Tech University).                    where ∃nxF (x) is understood as an abbreviation for
                                                                                ⎛                            ⎞
              Finally, we hope that this deﬁnition of a stable model will                       
            serve as a basis for a new approach to proving program cor- ∃x ···x ⎝      F (x ) ∧       x  = x ⎠ .
            rectness in ASP, which will be more straightforward than     1     n           i           i    j
                                                                                  1≤i≤n        1≤i<j≤n
            the one based on grounding and ﬁxpoint deﬁnitions [Ferraris
            and Lifschitz, 2005a, Sections 3.3–3.5, 3.7]. These correct- 2.2 Review of Circumscription
            ness proofs will use equivalent transformations of formulas
            of classical logic as the main tool.                  Since the new deﬁnition of a stable model looks similar to
                                                                  the deﬁnition of circumscription, we will begin with a brief
                                                                  review of the latter, for the special case when all predicate
            2  Deﬁnition and Examples                             constants occurring in the formula are circumscribed in par-
                                                                  allel [Lifschitz, 1994, Section 7.1].
            2.1  Logic Programs as First-Order Formulas             Both deﬁnitions use the following notation. If p and q are
                                                                                                      p =  q
            The concept of a stable model will be deﬁned here for ﬁrst- predicate constants of the same arity then stands for
                                                                  the formula
            order sentences (formulas without free variables); logic pro-           ∀x(p(x) ↔ q(x)),
            grams are viewed in this paper as alternative notation for ﬁrst-
                                                                     3In the propositional case, this approach to the syntax of ASP is
              1The fact that circumscription is related to program completion not new. The possibility of interpreting choice rules and weight con-
            has been known for a long time [Reiter, 1982; Lifschitz, 1985]. straints in terms of nested conjunctions, disjunctions and negations
            The relationship between circumscription and the Pearce-Tompits- was demonstrated in [Ferraris and Lifschitz, 2005b, Section 4.1].
            Woltran transformation is discussed in [Ferraris et al., 2006, Ap- General aggregates can be described in terms of nested implications
            pendix B].                                            [Ferraris, 2005, Section 4]. Including second (“strong,” “classical,”
              2The translational deﬁnition of default logic, proposed in [Lif- or “true”) negation without introducing an additional connective is
            schitz, 1990], is rather complicated: it uses third-order variables. discussed in [Ferraris and Lifschitz, 2005a, Section 3.9].

                                                            IJCAI-07
                                                               373and p ≤ q stands for                                    • (F →  G)∗ =(F  ∗ → G∗) ∧ (F → G);
                 ∀x(p(x) →  q(x)),                      • (QxF  )∗ = QxF ∗,whereQ ∈{∀, ∃}.
                                                                         F  → F ∗(u)
where x is a tuple of distinct object variables. If p and q are Note that the operator replaces each predicate
tuples p1,...,pn and q1,...,qn of predicate constants then constant with the corresponding predicate variable, and that
p = q stands for the conjunction                      it commutes with all propositional connectives except impli-
                                                      cation and with both quantiﬁers. If, in the deﬁnition of this
              p1 = q1 ∧···∧pn  = qn,                  operator, we drop the second conjunctive term in the clause
                                                      for implication, then F ∗(u) will turn into the formula F (u)
and p ≤ q for
                                                      referred to in the deﬁnition of circumscription. That con-
              p1 ≤ q1 ∧···∧pn  ≤ qn.                  junctive term is the only difference between the deﬁnitions
       p < q                   p ≤ q ∧¬(p =  q)       of CIRC and SM.
Finally,    is an abbreviation for             .        A model of F is stable if it satisﬁes SM[F ].
  In second-order logic, we will apply the same notation to
tuples of predicate variables.                        Example 1  If F is (10) then F ∗(u, v) is
                         F         [F ]
  Given a ﬁrst-order sentence ,byCIRC  we denote the         u(a) ∧∀x((u(x) → v(x)) ∧ (p(x) → q(x)))
second-order sentence
             F ∧¬∃u((u  <  p) ∧ F (u)),               and SM[F ] is
where p stands for the list of all predicate constants occur- p(a) ∧∀x(p(x) → q(x))
ring in F , u is a list of distinct predicate variables of the same ∧¬∃uv(((u, v) < (p, q)) ∧ u(a) ∧∀x((u(x) → v(x))
length, and F (u) is the formula obtained from F by substitut-                          ∧(p(x) →  q(x)))).
ing the variables u for the constants p. Intuitively, the second
conjunctive term of CIRC[F ] expresses that the extents of the It is clear that this formula is equivalent to (11), and conse-
predicates p are minimal subject to condition F .     quently to (12).
  For example, if F is                                  In logic programming notation, (10) can be written as
                                                                          p(a),
               p(a) ∧∀x(p(x) → q(x))           (10)
                                                                          q(x) ← p(x).
then CIRC[F ] is
                                                      The completion of this program
 p(a) ∧∀x(p(x) → q(x))
     ∧¬∃uv(((u, v) < (p, q)) ∧ u(a) ∧∀x(u(x) → v(x))).         ∀x(p(x) ↔ x = a) ∧∀x(q(x) ↔ p(x))
                                               (11)
                                                      is equivalent to (12) as well. In this example, all three
Using methods for eliminating second-order quantiﬁers dis-
                                                      transformations—SM, CIRC and completion—produce es-
cussed in [Lifschitz, 1994] and [Doherty et al., 1997], we can
                                                      sentially the same result.
simplify (11) and convert it into
                                                                  F
        ∀x(p(x) ↔ x = a) ∧∀x(q(x) ↔ x = a).    (12)   Example 2  If is (13) then, as in the previous example, it is
                                                      clear that SM[F ] is equivalent to CIRC[F ]. Consequently, the
  There are cases when CIRC[F ] is not equivalent to any stable models of (13) can be characterized by the condition
ﬁrst-order formula, as, for instance, when F is       stated at the end of the previous section: p is represented by
                                                                                  a, f(a),f(f(a)),...
             p(a) ∧∀x(p(x) → p(f(x))).                the set of the values of the terms           .
                                               (13)     In logic programming notation, (13) can be written as
                               [F ]
In this example, a model of CIRC   is any interpreta-                   p(a),
                 p
tion that represents as the set of the values of the terms              p(f(x)) ← p(x).              (14)
a, f(a),f(f(a)),....
                                                      The completion of this program
2.3  Stable Models
Given a ﬁrst-order sentence F ,bySM[F ] we denote the        ∀x(p(x) ↔ (x = a ∨∃y(x = f(y) ∧ p(y)))
second-order sentence
                                                      is weaker than SM[F ]: some (non-Herbrand4) models of the
             F ∧¬∃u((u  < p) ∧ F ∗(u)),               completion of (14) are not stable.
where p  stands for the list of all predicate constants It is easy to see that the operator SM produces essentially
p1,...,pn occurring in F , u is a list of n distinct predicate the same result as CIRC whenever it is applied to a for-
                       ∗
variables u1,...,un,andF (u) is deﬁned recursively:   mula corresponding to a set of Horn rules, as in the examples
  • p (t ,...,t )∗ = u (t ,...,t )
     i 1      m      i 1     m  ;                        4An Herbrand interpretation of a signature σ containing at least
           ∗
  • (t1 =t2) =(t1 =t2);                               one object constant is an interpretation such that (i) its universe is the
                                                                          σ
  •⊥∗  = ⊥;                                           set of all ground terms of , and (ii) every ground term represents
                                                      itself. Clearly, an Herbrand interpretation can be characterized by
           ∗     ∗    ∗
  • (F  G)  = F   G  ,where∈{∧,   ∨};              the set of ground atoms to which it assigns the value true.

                                                IJCAI-07
                                                   374above.5 But if negation in the bodies of rules is allowed then convert this formula into the completion (2) of program (1).
this may be no longer the case, as we will see Section 2.4. We conclude that in this case the stable models of the program
  What we can say, on the other hand, about this more gen- are identical to the models of its completion.
eral case is that stable Herbrand models of the corresponding We can further conclude that there is a unique Herbrand
formula exactly correspond to the stable models of the pro- stable model in this case, and that it corresponds to the set (4)
gram in the sense of the original deﬁnition from [Gelfond and of ground atoms. This fact follows also from Proposition 1.
Lifschitz, 1988]:
                                                      Example 4  If F is formula (8), corresponding to logic pro-
Proposition 1 Let σ be a signature containing at least one gram (5), then a similar calculation converts SM[F ] into
object constant, and Π a ﬁnite set of rules of the form
                                                             p(a) ∧ p(b) ∧∀x(p(x) → (q(x) ∨¬q(x)))
       A0 ←  A1,...,Am, not Am+1,...,not An,   (15)          ∧¬∃uv(((u, v) < (p, q)) ∧ u(a) ∧ u(b)
                                                                  ∧∀x(u(x) → (v(x) ∨¬q(x)))).
where A0,...,An are atomic formulas of σ not containing
                  X                  σ
equality. For any set of ground terms of , the following After the elimination of second-order quantiﬁers, this formula
conditions are equivalent:                            becomes
  • X                  Π
      is a stable model of in the sense of the 1988 deﬁni-        ∀x(p(x) ↔ (x = a ∨ x = b))
    tion;                                                         ∧∀x(q(x) →  (x = a ∨ x = b)).
  • the Herbrand interpretation of σ that makes the elements
    of X true and all other ground atoms false is a stable The stable models of (5) can be characterized as the interpre-
    model of the formula corresponding to Π.          tations that (i) represent p by the set of values of a and b,and
                                                      (ii) represent q by a subset of that set. Consequently, (8) has 4
  This theorem shows that the new deﬁnition of a stable Herbrand stable models, and they correspond to sets (6).
model, restricted to the “traditional” syntax, is a generaliza- We call a formula negative if every occurrence of every
tion of the 1988 deﬁnition to non-Herbrand models. In Sec- predicate constant in this formula belongs to the antecedent
tion 3.1 we will see that our deﬁnition generalizes also the of an implication. Clearly any formula of the form ¬F is
deﬁnition proposed in [Ferraris, 2005] andusedin[Ferraris negative, because this expression is shorthand for F →⊥
and Lifschitz, 2005a; Ferraris et al., 2006].         (Section 2.1). Proposition 2 can be generalized to arbitrary
2.4  Further Examples                                 negative formulas.
Proposition 2 below allows us to simplify the application of
the operator SM to formulas containing negation. In its state- 3 Relation to Earlier Work
ment, p is the list of predicate constants occurring in F ,andu 3.1 Propositional Case
                                                 p
is a list of distinct predicate variables of the same length as . In the propositional case, the operator SM turns into the
Proposition 2 If a formula F begins with ¬ then the formula encoding of formulas of equilibrium logic by quantiﬁed
                                                      Boolean formulas proposed in [Pearce et al., 2001] and re-
               u ≤ p → (F ∗(u) ↔ F )
                                                      viewed in [Ferraris et al., 2006, Appendix B].Inviewofthe
is logically valid.                                   Pearce-Tompits-Woltran theorem, as restated in that review, it
                                                      follows that in the propositional case our deﬁnition of a stable
Example 3  Let F be formula (7), corresponding to logic model is equivalent to the deﬁnition of a stable model (answer
program (1). Then SM[F ] is                           set) proposed in [Ferraris, 2005] andreviewedin[Ferraris et
                                                      al., 2006, Appendix A].
    p(a) ∧ q(b) ∧∀x((p(x) ∧¬q(x)) → r(x))
      ∧¬∃uvw(((u, v, w) < (p, q, r)) ∧ u(a) ∧ v(b)    3.2  Lin’s Transformation
                 ∧∀x(((u(x) ∧ (¬q(x))∗) → w(x))
                                                      Theorem 5 from [Lin, 1991] relates stable models of “tradi-
                    ∧((p(x) ∧¬q(x)) → r(x)))).
                                                      tional programs” (as in Proposition 1 above) to circumscrip-
It is clear that the implication in the last line can be dropped. tion. It involves a syntactic transformation that can be de-
Furthermore, since the subformula (u, v, w) < (p, q, r) con- scribed as a sequence of three steps. First, each rule is turned
tains the conjunctive term v ≤ q, from Proposition 2 we can into a formula that may contain new predicate constants—
                  ∗                                            p                     p
conclude that (¬q(x)) can be equivalently replaced here by “doubles” of the predicate constants occurring in the rule.
¬q(x). Consequently, SM[F ] can be rewritten as       Second, the new predicate constants are circumscribed in par-
                                                      allel. Third, the result is conjoined with the equivalences
     p(a) ∧ q(b) ∧∀x((p(x) ∧¬q(x)) → r(x))            p = p. We will show that this idea is applicable to arbitrary
       ∧¬∃uvw(((u, v, w) < (p, q, r)) ∧ u(a) ∧ v(b)   ﬁrst-order sentences, and that the result of this transformation
         ∧∀x((u(x) ∧¬q(x)) →  w(x))).                 is closely related to the operator SM.
Using the methods for eliminating second-order quantiﬁers To do this, we need parallel circumscription of a slightly
described at the end of [Lifschitz, 1994, Section 3.3], we can more general kind than deﬁned in Section 2.2. In the deﬁ-
                                                      nition of circumscription, there is no need to assume that p
  5This assertion remains true if we allow the heads of rules to be stands for the list of all predicate constants occurring in F ;
disjunctions of atomic formulas.                      p may include only some of these constants. The result of

                                                IJCAI-07
                                                   375                                                                        If   If
circumscribing the predicate constants p in a ﬁrst-order sen- • I |= t1 = t2 if t1 = t2 ;
     F                       [F ; p]             F
tence  will be denoted by CIRC    . For instance, if    • I |= ⊥;
is (10) then CIRC[F ; q] is
                                                        • I |= F ∧ G if I |= F and I |= G; similarly for ∨;
      p(a) ∧∀x(p(x) → q(x))
        ∧¬∃v((v<q)  ∧ p(a) ∧∀x(p(x) → v(x))),           • I |= F → G if
                                                           (i) I |= F or I |= G,and
which is equivalent to
                                                           (ii) I,It|= F → G;
              p(a) ∧∀x(p(x) ↔  q(x)).
                                                        • I |= ∀xF (x) if, for each ξ from the universe of If ,
                                                                  ∗
  Let F be a ﬁrst-order sentence, and let p be the list of all I |= F (ξ ); similarly for ∃.
                                         
predicate constants occurring in F . Take a list p of distinct (In (ii) we understand satisfaction as in classical logic.)
predicate constants that do not occur in F , of the same length                    I,J,J
                                                       An HT-interpretation of the form   is an equilibrium
as p.ByL[F ; p ] we denote the formula                model of F if
                   ∗          
            CIRC[F  (p ); p ] ∧ (p = p).                •I,J,J|=  F ,and
                                                                                       
This formula turns out to be equivalent to SM[F ] conjoined • for any proper subset J of J, I,J ,J |= F .
                                               
with explicit deﬁnitions of the new predicate constants p : This deﬁnition provides a precise model-theoretic counter-
Proposition 3 L[F ; p] is equivalent to SM[F ] ∧ (p = p). part of the operator SM:
This is immediate from the deﬁnitions of L and SM, using the Proposition 4 An interpretation I,J is a stable model of a
fact that F ∗(p) is equivalent to F .                 sentence F iff I,J,J is an equilibrium model of F .
  It follows that SM[F ] is equivalent to L[F ; p] with the
                  
predicate constants p replaced by existentially quantiﬁed 4 Strong Equivalence
predicate variables:
                                                      To turn the deﬁnition of a stable model proposed in this pa-
              [F ]            ∃u   [F ; u]
Corollary 1 SM   is equivalent to L     .             per into a tool that can help us in the design of provably
3.3  Equilibrium Logic                                correct ASP programs, we need to ﬁnd appropriate counter-
                                                      parts of the theorems that are used in correctness proofs to-
The deﬁnition of ﬁrst-order equilibrium logic below is similar day.6 The “traditional” theorems about stable models will
to the one proposed in [Pearce and Valverde, 2005, Section 7], roughly correspond to the special cases of these new theo-
except that ground terms are not identiﬁed here with their val- rems in which the formulas involved are propositional combi-
ues; as a result, different ground terms are allowed to have the nations of ground atoms, perhaps of a special syntactic form,
same value. Our deﬁnition describes essentially Kripke mod- and our attention is restricted to Herbrand models.
els with two worlds (“here” and “there”) that have the same To give an example illustrating this general point, we state
universe, interpret all function constants in the same way, and here a counterpart of the characterization of strong equiva-
satisfy the minimality condition introduced in [Pearce, 1997]. lence [Lifschitz et al., 2001] due to Fangzhen Lin [2002].
    I                              σ
  If  is an interpretation of a signature (in the sense of About ﬁrst-order sentences F and G we say that F is
                    σI                        σ
classical logic) then by we denote the extension of ob- strongly equivalent to G if, for every sentence H (possibly
                                    ξ∗
tained by adding pairwise distinct symbols , called names, of a larger signature), F ∧ H has the same stable models
             ξ               I
for all elements of the universe of as object constants. We as G ∧ H (or, to put it differently, if, for every H,SM[F ∧ H]
           I                 σI          I(ξ∗)=ξ
will identify with its extension to deﬁned by     .   is equivalent to SM[G ∧ H]). In the following theorem, p
             I                      t           σI
The value that assigns to a ground term of signature  is the list of predicate constants occurring in at least one of
                tI                                                          
will be denoted by .                                  the sentences F , G,andp is a list of new, distinct predicate
     σ                     σ
  By  f we denote the part of consisting of its function constants of the same length as p.
constants (including object constants, which are viewed as
                                                                   F                      G
function constants of arity 0). We will represent an inter- Proposition 5 is strongly equivalent to iff the formula
                                      
pretation I of σ as the pair I|σf ,I ,whereI is the set of      p ≤ p →  (F ∗(p) ↔ G∗(p))
all atomic formulas, formed using predicate constants from σ
and names ξ∗, which are satisﬁed by I.                is logically valid.
  An HT-interpretation of σ is a triple If ,Ih,It,where
     f                                                  Using this theorem we can show, for instance, that
  • I  is an interpretation of σf ,and                ¬∀xF (x) is strongly equivalent to ∃x¬F (x). (This is a pred-
     h  t                                                                              ¬(F ∧ G)
  • I , I are sets of atomic formulas formed using predi- icate logic counterpart of the fact that is strongly
                                          ∗                      ¬F ∨¬G
    cate constants from σ and object constants ξ for arbi- equivalent to .) Indeed, in view of Proposition 2, the
    trary elements ξ of the universe of If , such that Ih ⊆ It. implications
The  satisfaction relation between an HT-interpretation        p ≤ p → ((¬∀xF (x))∗ ↔¬∀xF  (x)),
                                              f  h                               ∗
I = If ,Ih,It and a sentence F of the signature σI ,I      p ≤ p →  ((∃x¬F (x)) ↔∃x¬F   (x));
is deﬁned recursively:
                                                         6See, for instance, [Ferraris and Lifschitz, 2005a, Sections 2.1–
                        If ∗      If ∗    h
  • I |= p(t1,...,tn) if p((t1 ) ,...,(tn ) ) ∈ I ;   2.4, 2.6–3.1].

                                                IJCAI-07
                                                   376