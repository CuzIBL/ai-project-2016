       A  Uniﬁed    Theory    of Structural    Tractability    for  Constraint    Satisfaction
                                and   Spread    Cut  Decomposition
            David Cohen                      Peter Jeavons                     Marc  Gyssens
     Dept  of Computer  Science          Computing   Laboratory              Department   WNI
          Royal  Holloway                  Oxford  University         Limburgs   Universitair Centrum
        University of London         Wolfson  Building, Parks Road         Universitaire Campus
         Egham,  Surrey, UK                   Oxford,  UK              B-3590  Diepenbeek,  Belgium
        D.Cohen@rhul.ac.uk          Peter.Jeavons@comlab.ox.ac.uk         marc.gyssens@luc.ac.be
                    Abstract                            A variety of such decomposition methods have been devel-
                                                      oped and applied in both the constraint satisfaction commu-
    In this paper we introduce a generic form of struc-
                                                      nity, and the database community. Examples include meth-
    tural decomposition for the constraint satisfaction
                                                      ods based on the use of treewidth [Freuder, 1985], cycle cut-
    problem, which we call a guarded decomposi-
                                                      sets [Dechter and Pearl, 1988], tree-clustering [Dechter and
    tion. We show that many existing decomposition
                                                      Pearl, 1989], hinges [Gyssens et al., 1994], cycle hypercut-
    methods can be characterized in terms of ﬁnding
                                                      sets and hypertrees [Gottlob et al., 2000]. All of these meth-
    guarded decompositions satisfying certain speci-
                                                      ods rely on reducing a given problem instance to an equiv-
    ﬁed additional conditions.
                                                      alent instance with a simpler structure, which can then be
    Using the guarded decomposition framework we      solved efﬁciently.
    are also able to deﬁne a new form of decompo-       In this paper we present a generic, abstract form of decom-
    sition, which we call a spread cut. We show that  position, which we call a guarded decomposition. We show
    discovery of width k spread-cut decompositions is that all of the earlier decomposition methods can be viewed
    tractable for each k, and that the spread cut decom- as special cases of guarded decomposition, each character-
    position strongly generalize all existing decomposi- ized by some simple additional conditions.
    tions except hypertrees. Finally we exhibit a family
                                                        One existing decomposition method, based on the use of
    of hypergraphs H , for n = 1, 2, 3 . . ., where the
                   n                                  hypertrees [Gottlob et al., 2000; 2002], is of particular im-
    width of the best hypertree decomposition of each
                                                      portance as it is has been shown to be strictly more general
    H  is at least 3n, but the width of the best spread-
      n                                               than many other decomposition methods and that, for each
    cut decomposition is at most 2n.
                                                      k, it is tractable to to discover hypertree decompositions of
                                                      width at most k. The general framework presented here al-
1  Introduction                                       lows us to identify a new decomposition method, based on
A constraint satisfaction problem consists of a set of vari- the use of a structure that we call a spread cut. We show
ables that must be assigned values subject to certain con- that spread-cut decompositions generalize all of the methods
straints. These constraints restrict the simultaneous assign- previously shown to be generalized by hypertree decomposi-
ments to certain speciﬁed subsets of the variables. Many tions, and still it is tractable, for each k to discover spread cut
real-world problems can be represented very naturally in this decompositions of width k. Furthermore, we exhibit a family
framework [Dechter, 2003; Marriott and Stuckey, 1998] of examples for which the spread-cut decomposition method
  Similar problems arise in the ﬁeld of relational databases, obtains better decompositions than the hypertree decomposi-
where they are referred to as conjunctive query evaluation tion method.
problems [Kolaitis and Vardi, 2000]. Many of the techniques
developed in this paper can also be applied directly to the 2 Constraint Satisfaction, Hypergraphs, and
conjunctive query evaluation problem, but we shall not pur-
sue this application here.                                Tractability
  The decision problem for the general constraint satisfaction Deﬁnition 2.1 A CSP instance is a triple P = hV, D, Ci
problem is NP-hard [Mackworth, 1977]. This motivates the where:
search for more restricted subproblems which are tractable,
that is, solvable in polynomial-time.                   • V is a ﬁnite set of variables;
  This paper considers subproblems of the constraint satis-
                                                        • D  is a set called the domain of P ;
faction problem which can be shown to be tractable using so-
called structural methods or decomposition methods. These • C is a set of constraints. Each constraint c ∈ C is a pair
methods rely exclusively on using the structural properties of c = hχ, ρi where χ ⊆ V is a set of variables, called the
instances, in other words the way in which the constraints scope of c, and ρ ⊆ Dχ is a set of functions from the
overlap each other.                                       scope to the domain, called the relation of c.A solution to the CSP instance P = hV, D, Ci is a function                       e
from V to D whose restriction1 to the scope of any constraint                 1   1     2
c ∈ C is one of the functions in the relation of c.                      e8
                                                                                       e2
Example 2.2 Consider the CSP instance PAG = hV, D, Ci                  8                       3
where V   =  {1, 2, . . . , 10}, D = {0, 1}, and C =
{c1, c2, . . . , c8}.                                          10          e7      9
  This instance has ten variables which must each be as-
signed the value 0 or 1, subject to 8 constraints. The con-
straints in C are deﬁned as follows:                                    7                      4
                                                                                           e4
              {1,2}                        {2,3,9}                                 e5
 c1 = {1, 2}, D    ,       c2 =  {2, 3, 9}, D    ,                      e6
                 {3,4,10}                {4,5}
 c3 = {3, 4, 10}, D      , c4 =  {4, 5}, D    ,                               6         5
     
          {5,6,9}        
           {6,7,10}
 c5 = {5, 6, 9}, D     ,   c6 =  {6, 7, 10}, D     ,
     
          {7,8,9}        
            
 c7 = {7, 8, 9}, D     ,
     
                         
                 
                                                                                e3
 c8 =
h{1, 8, 10}, {f | f(1) = f(8) = 0 → f(10) = 1}i .

Note that each constraint except c8 allows every assignment
to the variables of its scope. The constraint c8 does not allow Figure 1: The hypergraph HAG, which is the structure of the
the three variables of its scope all to take the value 0 simulta- CSP instance PAG, deﬁned in Example 2.2.
neously, but does allow all other assignments.
  A straightforward calculation shows that this instance has
exactly 7 ∗ 25 = 224 solutions.                       3   Guarded   Decompositions
                                                      Two CSP  instances with the same set of variables are called
In order to study the structural properties of CSP instances,
                                                      solution equivalent if they have the same set of solutions.
that is, the way in which the constraint scopes overlap each
other, we need the standard notion of a hypergraph.   All known tractable structural classes of CSP instances are
                                                      characterized by showing that the instances they contain can
Deﬁnition 2.3 A hypergraph is a pair H = hV, Ei, where V be transformed into solution equivalent instances with sim-
is an arbitrary set, called the vertices of H, and E is a set of pler structure. The constraints of these transformed instances
subsets of V , called the hyperedges of H.            are obtained by calculating the relational joins of certain con-
Deﬁnition 2.4 For any CSP instance P  =   hV, D, Ci,  straint relations in the original instances, and then projecting
the structure of P , denoted σ(P ), is the hypergraph these onto new scopes. To describe this general transforma-
hV, {χ | hχ, ρi ∈ C}i.                                tion scheme we introduce the following terminology.
  For any hypergraph H, the class of all CSP instances with Deﬁnition 3.1 A guarded block of a hypergraph H is a pair
structure H is denoted Ψ(H).                          hλ, χi where the guard, λ, is a set of hyperedges of H, and
                                                      the block, χ, is a subset of the vertices of the guard.
Example 2.5 Recall the CSP instance PAG deﬁned in Exam-
ple 2.2. The structure of PAG is the hypergraph HAG illus- Deﬁnition 3.2 For any CSP instance P , and any guarded
trated in Figure 1.                                   block hλ, χi of σ(P ), the constraint generated by P on hλ, χi
  The set of vertices of HAG is the set {1, 2, . . . , 10}, and the is the constraint hχ, ρi, where ρ is the projection onto χ of the
eight hyperedges of HAG are the following subsets of these relational join of all the constraints of P whose scopes are el-
vertices: e1 = {1, 2}, e2 = {2, 3, 9}, e3 = {3, 4, 10}, e4 = ements of λ.
{4, 5}, e5 = {5, 6, 9}, e6 = {6, 7, 10}, e7 = {7, 8, 9}, e8 =
{1, 8, 10}.                                           Given a CSP instance P , with structure H, and a collection
                                                      of guarded blocks of H, we can generate constraints on each
As indicated in the Introduction, the decision problem for of these guarded blocks to obtain a new collection of con-
the general constraint satisfaction problem is NP-hard [Mack- straints, and hence a new CSP instance. In some cases, if the
worth, 1977], so there has been considerable interest in ﬁnd- guarded blocks are carefully chosen, this new instance will
ing more restricted problem classes whose instances can be be solution equivalent to P , and so can be used to solve P .
recognized and solved in polynomial time.             If this property holds for any CSP instance with structure H,
Deﬁnition 2.6 A class I of CSP instances is called tractable then the collection of guarded blocks will be called a guarded
if there is a polynomial time algorithm to decide membership decomposition of H, which is formally deﬁned as follows:
of I, and a polynomial time algorithm which solves all in- Deﬁnition 3.3 A set of guarded blocks Ξ of a hypergraph
stances in I.                                         H  is called a guarded decomposition of H if for every
  A class I of CSP instances is called structural if I = CSP instance P = hV, D, Ci ∈ Ψ(H), the instance P 0 =
 H∈H  Ψ(H)  for some class of hypergraphs H.          hV, D, C0i, where C0 is the set of constraints generated by P
                                                      on the members of Ξ, is solution equivalent to P .
S 1To simplify the presentation we assume, throughout this paper,
that every variable of a CSP instance is constrained; that is, every How can we determine whether a given collection of guarded
variable occurs in the scope of some constraint.      blocks is in fact a guarded decomposition? Theorem 3.5 be-low gives a simple and efﬁcient way to answer this question, Tractable construction It must be possible to generate each
based on the following properties.                        of the new constraints in polynomial time.
Deﬁnition 3.4 A guarded block hλ, χi of a hypergraph H Tractable solution It must be possible to solve the resulting
covers a hyperedge e of H if e is contained in χ.         instances in polynomial time.
  A set of guarded blocks Ξ of a hypergraph H is called a Tractable discovery It must be possible to obtain a guarded
guarded cover for H if each hyperedge of H is covered by  decomposition of the type we are considering for a given
some guarded block of Ξ.                                  hypergraph (or else discover that no such decomposition
  A set of guarded blocks Ξ of a hypergraph H is called a exists) in polynomial time.
complete guarded cover for H if each hyperedge e of H oc-
                                                      We  will now consider extra conditions that can be imposed
curs in the guard of some guarded block of Ξ which covers
                                                      on a guarded decomposition to ensure that it has each of these
e.
                                                      properties.
Theorem 3.5 A set of guarded blocks Ξ of a hypergraph H
is a guarded decomposition of H if and only if it is a complete 4.1 Tractable Construction
guarded cover for H.                                  The time complexity of a relational join operation is O(rk ),
                                                      where k is the number of relations being joined, and r is the
Proof: Let   be a set of guarded blocks of a hypergraph
           Ξ                                          maximum  number of tuples in any of these relations. Hence
H    V, E .
  = h    i                                            to ensure that we have the tractable construction property, it
  Suppose that Ξ is not a complete guarded cover for H. is sufﬁcient to bound the number of constraint relations that
Choose e ∈ E such that there is no guarded block hλ, χi ∈ Ξ need to be combined using the relational join operation. This
for which e ∈ λ and e ⊆ χ. We will construct an instance can be done by bounding the number of hyperedges in the
Pe with structure H which will witness the fact that Ξ is not guard of any guarded block used in the decomposition.
a guarded decomposition of H.
                                                      Deﬁnition 4.1 The width of a set of guarded blocks is the
  Let the domain of Pe be D =  {0, 1}. For each edge
f ∈ E, f 6= e, let the constraint of Pe with scope f allow maximum number of hyperedges in any of its guards.
all mappings from f to D. Finally let the constraint of Pe For any ﬁxed value of k, the class of guarded decompositions
with scope e, ce, allow all mappings from e to D except for of width at most k has the tractable construction property.
the mapping that assigns the value 0 to all the vertices of e
simultaneously.                                       4.2  Tractable Solution
  Now let hλ, χi be any guarded block in the set Ξ. If e 6∈ λ One way to ensure that the new instances obtained by using
then the constraint generated by Pe on hλ, χi allows every a guarded decomposition have the tractable solution prop-
assignment. On the other hand, if e ∈ λ, then, by the choice erty, is to ensure that the structure of these new instances is
of e, we know that e 6⊆ χ. In this case we observe that any acyclic [Beeri et al., 1983]. The property of being acyclic can
projection of ce onto any proper subset of e allows all as- be deﬁned as follows:
signments. So again the constraint generated by Pe on hλ, χi
allows every assignment.                              Deﬁnition 4.2 A join tree of a hypergraph H is a connected
                                                      tree, T , whose nodes are the hyperedges of H, such that,
  Since all constraints generated by Pe on all elements of
Ξ allow every assignment, the resulting CSP instance is not whenever the vertex x of H occurs in two hyperedges e1 and
                                                      e2 of H then x occurs in each node of the unique path con-
solution equivalent to Pe, and hence Ξ is not a guarded de-
composition of H.                                     necting e1 and e2 in T . In other words, the set of nodes of T
                                                      in which x occurs induces a (connected) subtree of T .
  For the converse, suppose that Ξ is a complete guarded
cover for H. Let P be an arbitrary CSP instance with struc- A hypergraph is called acyclic if it has a join tree.
ture H. We have to show that the CSP instance PΞ obtained Theorem 4.3 ([Gyssens et al., 1994]) Any CSP instance
by taking the constraints generated by P on each element of whose structure is acyclic can be solved in polynomial time.
Ξ is solution equivalent to P .
                                                      Deﬁnition 4.4 A join tree of a set of guarded blocks Ξ of H
  Clearly, any solution to P is a solution to P . On the other
                                      Ξ               is a connected tree, T , whose nodes are the elements of Ξ,
hand, by the completeness of Ξ, and the construction of PΞ,
                                                      such that, whenever the vertex x of H occurs in two blocks of
the projection of any solution to PΞ onto any edge e ∈ E
                                                      Ξ then x occurs in each block of the unique path connecting
must be allowed by the constraint of P with scope e. Hence
                                                      them in T . In other words, the set of nodes of T for which x
any solution to P is also a solution to P .
              Ξ                                       occurs in the block induces a (connected) subtree of T .
                                                        A set of guarded blocks is acyclic if it has a join tree.
4  Tractability
                                                      By Theorem 4.3, any class of acyclic guarded decompositions
We have shown that guarded decompositions can be used to has the tractable solution property. Using Theorem 3.5 and
transform a given CSP instance to a solution equivalent in- Deﬁnition 4.4 we now show that an acyclic guarded decom-
stance which may have a different structure.          position can be obtained from an arbitrary acyclic guarded
  In order to be able to use guarded decompositions to iden- cover without increasing the width, or signiﬁcantly increas-
tify tractable structural classes we need to impose some addi- ing the number of guarded blocks, by adding appropriate ad-
tional conditions to ensure we have the following properties. ditional guarded blocks to make a complete guarded cover.Theorem 4.5 If the set of guarded blocks Ξ is an acyclic In each of the cases listed below (except for query decom-
guarded cover for H then the set Ξ ∪ {h{e}, ei | e ∈ E} positions), it has been shown that the additional conditions
is an acyclic guarded decomposition of H.             are sufﬁcient to ensure that the corresponding class of acyclic
In view of this result, we shall focus on acyclic guarded cov- guarded covers, ∆, is parameterized tractable. Hence, in all
ers and use them to deﬁne classes of decompositions.  cases (except query decompositions), the class of CSP in-
                                                      stances in C(∆, k) is a tractable structural class.
4.3  Tractable Discovery                                • A  biconnected-component decomposition of a hy-
The class of hypergraphs having a guarded cover in some   pergraph is an edge-deﬁned acyclic complete guarded
ﬁxed class ∆, with width at most k, will be denoted C(∆, k). cover, Ξ, satisfying an articulation condition:
Deﬁnition 4.6 A class of guarded covers ∆ will be called
                                                                ∀ hλ1, χ1i , hλ2, χ2i ∈ Ξ, |χ1 ∩ χ2| ≤ 1
parameterized tractable 2 if for each value of k there exists a
polynomial-time algorithm which, given any hypergraph H ∈ • A cycle-hypercutset decomposition of a hypergraph
C(∆, k), returns a guarded cover of H with width at most k, H =   hV, Ei is an edge-deﬁned acyclic complete
and given any hypergraph H 6∈ C(∆, k), reports failure.   guarded cover, Ξ, satisfying a simplicity condition:
It follows from the results above that if ∆ is a class of
acyclic guarded covers, which is parameterized tractable,         ∃C ⊆ E, ∀ hλ, χi ∈ Ξ, |λ − C| ≤ 1
then C(∆, k) will be a tractable structural class of CSP in-
                                                        • A  hinge-tree decomposition of a hypergraph H is an
stances, for each value of k.
                                                          edge-deﬁned acyclic complete guarded cover, Ξ, satis-
                                                          fying a separation condition:
5  Known    Tractable  Structural Classes
We will now show that many existing decomposition methods  ∀ hλ1, χ1i , hλ2, χ2i ∈ Ξ, ∃e ∈ λ1 ∩ λ2, χ1 ∩ χ2 ⊆ e.
for the CSP can be deﬁned in terms of ﬁnding acyclic guarded
                                                        • A cycle-cutset decomposition of a hypergraph H is an
covers with particular special properties.
                                                          edge-deﬁned acyclic extended cover, Ξ, such that every
  We ﬁrst note that for historical reasons some existing de-
                                                          hyperedge of every guarded block of Ξ consists of a sin-
composition methods for the CSP make use of extended
                                                          gle vertex, and Ξ satisﬁes a simplicity condition:
guards that contain both vertices and hyperedges. To be able
to present all of these methods in a uniform way we introduce  ∃C ⊆ V, ∀ hλ, χi ∈ Ξ, ∃e ∈ E, (χ − C) ⊆ e
the idea of transforming a CSP instance by adding a unary
                                               D
constraint cv, for each variable v, where cv = {v}, {v} . • A query decomposition of a hypergraph H = hV, Ei is
This corresponds to extending the structure of the instance to a pair hΞ, T i where Ξ is a complete edge-deﬁned acyclic
ensure that it includes a hyperedge for each variable.
  extended cover of H and T is a join tree of Ξ that satis-
Deﬁnition 5.1 Let H =  hV, Ei be any hypergraph. A        ﬁes a connectedness condition:
guarded cover for the hypergraph hV, E ∪ {{v} | v ∈ V }i is  ∀e ∈ E, {hλ, χi ∈ Ξ | e ∈ λ} is connected in T.
called an extended cover for H.
The following result shows that the existence of an extended • A hypertree decomposition of a hypergraph H is a pair
cover of width k is equivalent to the existence of a standard hΞ, T i, where Ξ is an acyclic guarded cover and T is a
guarded cover of width k. This means that extended covers rooted join tree of Ξ, which satisﬁes the following de-
are simply a notational convenience and do not allow better scendant condition:
decompositions.

Theorem 5.2 If a hypergraph H has an acyclic extended       ∀ hλ, χi ∈ Ξ,      e  ∩            χi   ⊆ χ
cover of width k, then H also has an acyclic guarded cover                                      
                                                                           e∈λ  !   hλi,χii∈D λ,χ
of width at most k with at most the same number of guarded                  [           [  h  i
                                                                                                
blocks.                                                   where Dhλ,χi is the set of all descendants of hλ, χi in T .
We also note that many existing decomposition methods are The minimum  width of any hypertree decomposition of
based on guarded covers in which every block is exactly the a hypergraph H is called the hypertree width of H.
union of the edges of its guard.
Deﬁnition 5.3 A guarded cover Ξ is edge-deﬁned if the block 6 Comparing Decompositions
of each guarded block in Ξ is exactly the set of vertices con- The relative strengths of different decomposition techniques
tained in the hyperedges of its guard.                derived from acyclic guarded covers can be compared using
  We can now characterize many known structural decompo- the measures developed by Gottlob et al [2000].
                [                ]
sition methods (see Gottlob et al., 2000 for traditional deﬁ- Deﬁnition 6.1 Let ∆1 and ∆2 be any two classes of guarded
nitions) in terms of a corresponding class of acyclic guarded covers. We say that ∆1 generalizes ∆2 if there exists a value
covers with certain additional conditions.            ε > 0 such that, for every k, C(∆2, k) ⊆ C(∆1, k + ε).
  2The notion of being parameterized tractable that we have de- We say that ∆1 strongly generalizes ∆2 if ∆1 generalizes
ﬁned here is strictly weaker than the well-known notion of being ∆2, and there exists k for which there does not exist ε > 0
ﬁxed parameter tractable.                             with C(∆1, k) ⊆ C(∆2, k + ε).Hypertrees have been shown to strongly generalize all the This special property of this guarded block relies on χ be-
other parameterized tractable classes of decompositions de- ing “large enough”. If χ were empty, then there would be
ﬁned in the previous section [Gottlob et al., 2000]. Further- just one vertex χ-component and this component would meet
more it has recently been shown that the hypertree width of both vertex λ-components.
any hypergraph is at most three times the minimal possible If we restrict the possible blocks for a given guard appropri-
                              [         ]                       S
width of any acyclic guarded cover Adler, 2004 . It follows ately then we can polynomially bound the number of guarded
that hypertrees cannot themselves be strongly generalized by blocks, whilst still getting effective decompositions. This mo-
any other class of acyclic guarded covers.            tivates the following deﬁnition.
  However, we will show in the next section that it is possible
to deﬁne a parameterized tractable class ∆ of acyclic guarded Deﬁnition 7.3 A guarded block hλ, χi of a hypergraph H
covers, such that for some families of hypergraphs, the min- has unbroken components if each χ-component of H meets
imal width of a guarded cover in ∆ is smaller than the hy- at most one λ-component of H and {e1 ∩ e2 | e1, e2 ∈
pertree width by some constant factor. Such an improvement λ} ⊆ χ.
allows the corresponding instances to be solved exponentially A spread cutS of H is an acyclic guarded cover for H in
faster than by using hypertree decompositions.        which all of the guarded blocks have unbroken components.

Deﬁnition 6.2 Let ∆1 and ∆2 be any two classes of guarded Example 7.4 Consider again the hypergraph HAG deﬁned in
covers. We say that ∆1 can be superior to ∆2 if there is some Example 2.5 and illustrated in Figure 1.
r > 1, such that for every k, C(∆2, rk) 6⊆ C(∆1, k).    The minimal width of any hypertree decomposition of
                                                                 4
                                                      HAG  is three .
7  Spread   Cuts                                        The  following set of guarded  blocks is a spread
                                                      cut of HAG   of width  two:  h{e2, e6}, {3, 6, 7, 9, 10}i,
In this section we will deﬁne a new class of acyclic guarded h{e3, e5}, {3, 4, 5, 6, 9, 10}i, h{e2, e8}, {1, 2, 3, 8, 9, 10}i,
covers, called spread cuts. We show that classes of instances h{e3, e7}, {3, 7, 8, 9, 10}i.
with bounded spread cut width are tractable and that spread
cuts can be superior to hypertrees.3                  7.1  Spread  Cuts are Parameterized Tractable
  Throughout this section, we will write λ to refer to the We will now deﬁne a canonical form for guarded blocks with
vertices of a set of hyperedges λ; that is, λ = e∈λ e. unbroken components, and show that if a hypergraph H has
                                   S                  a spread cut of width k, then it also has a spread cut of width
Deﬁnition 7.1 Let H = hV, Ei be a hyperSgraphSand χ ⊆ V at most k, in which each guarded block is canonical.
be a set of vertices. We say that two hyperedges e, f ∈ E are
χ-adjacent if e ∩ f 6⊆ χ.                             Deﬁnition 7.5 Let λ be any set of hyperedges of H. We deﬁne
  A  χ-path connecting e to f  is a sequence e   =    the label, Lλ(v), of any vertex of H to be the set of hyperedge
                                                        λ-components which include a hyperedge containing v.
e0, e1, . . . , er 1, er = f such that ei is χ-adjacent to ei+1,
           −                                            We say that a guarded block hλ, χi is canonical if for each
for i = 0, . . . , r − 1.                             S
  A set of hyperedges C ⊆ E is χ-connected if, for every hyperedge e ∈ λ the vertices of e outside of χ are exactly
pair of hyperedges in C, there is a χ-path connecting them. those with a particular label. That is,
  A set of hyperedges is a hyperedge χ-component of H if it ∀v ∈ e − χ, ∀w ∈ e, w 6∈ χ ↔ Lλ(w) = Lλ(v).
is a maximal non-empty χ-connected subset of E.
  A non-empty set of vertices C is a vertex χ-component of Theorem 7.6 If H has a spread cut of width k then H has a
                                                      spread cut of width at most k, in which each guarded block is
H if there is some hyperedge χ-component Cχ for which C =
                                                      canonical.
  Cχ − χ.
                                                      Proof: Due to space limitations, we can only give an outline
S In this paper, unless otherwise stated, a component will
mean a vertex component.                              of the proof.
                                                        The idea is to show that, for any guarded block hλ, χi
Example 7.2 Consider again the hypergraph HAG deﬁned in with unbroken components, and for any hyperedge e ∈ λ,
Example 2.5 and illustrated in Figure 1.              |  v∈e−χ Lλ(v)| ≤ 2. Given this fact, we can start with any
  Now consider the guarded block hλ, χi with λ = {e2, e6} spread cut and, for each hyperedge of each guard, remove
and χ = {3, 6, 7, 9, 10}.                             fromS the block any vertex with the same label as any vertices
  There  are three hyperedge  χ-components:   {e6},   already outside of the block. It is straightforward to show
{e1, e2, e7, e8} and {e3, e4, e5}. Hence, there are two that the result is still an acyclic guarded cover, and hence still
vertex χ-components: {4, 5} and {1, 2, 8}.            a spread cut with the same width, where each guarded block
  There are four hyperedge λ-components: {e2}, {e6},  is now canonical.
{e1, e7, e8} and {e3, e4, e5}. Hence, there are two vertex Using this canonical form, we can establish the following
  λ-components: {4, 5} and {S1, 8}.                   result.
  Notice that each vertex χ-component meets (has non- Theorem  7.7 Spread cuts are parameterized tractable.
Sempty intersection with) exactly one vertex λ-component.
                                                         4This is most easily shown by using the “Robbers and Marshals”
  3It is still an open research question whetherShypertrees can be characterization of hypertree width [Gottlob et al., 2003]. However,
superior to spread-cuts.                              due to space restriction we omit this proof.