                 Optimal Multi-Sensor based Multi Target Detection by  
              Moving Sensors to the Maximal Clique in a Covering Graph 

                           Ganesh P Kumar and K Madhava Krishna 
                         International Institute of Information Technology 
                                    Robotics Research Center 
                              Gachibowli, Hyderabad, India 500 032. 
                          ganesh@students.iiit.ac.in, mkrishna@iiit.ac.in  

                                                 sensor. Extending this technique to multiple sensors is in 
                 Abstract                        general nontrivial, involving searching over a discrete 
                                                 search space, which is accomplished by a tagging operation.  
    Different methodologies have been employed to These ideas are crucial in transforming a continuous search 
    solve the multi-sensor multi-target detection prob- space into a discrete one, enabling us to find an optimal 
    lem in a variety of scenarios. In this paper, we de- solution from among several disparate ones. In contrast al-
    vise a time-step optimal algorithm for this problem most all existing solutions employ some heuristic to deter-
    when all but a few parameters of the sensor/target mine a good solution in an uncountable search space. Fi-
    system are unknown.  Using the concept of cover- nally, we test our algorithm against two others whose pa-
    ing graph, we find an optimum solution for a single rameters are tweaked by hand to perform optimally. None-
    sensor, which is extended to multiple sensors by a theless, our results show that our algorithm is able to per-
    tagging operation. Both covering graph and tagging form better than compared approaches across a number of 
    are novel concepts, developed in the context of the test cases. 
    detection problem for the first time, and bring a 
    mathematical elegance to its solution. Furthermore, 2. Analysis of Existing Algorithms 
    an implementation of the resulting algorithm is 
                                                   In this section we examine the performance of two exist-
    found to perform better than other notable ap-
                                                 ing representative algorithms, those of [Parker 2002] and 
    proaches. The strong theoretical foundation, com-
                                                 [Sukhatme 2002].  
    bined with the practical efficacy of the algorithm, 
    makes it a very attractive solution to the problem.  2.1 Parker’s Algorithm 
 1. Introduction                                    Fig.1 shows a set of targets, depicted by small un-
                                                 shaded squares, moving counter clockwise about a circle. 
  The problem of multi-sensor target tracking has attracted The shaded squares represent sensors; one sensor, closest to 
a significant amount of interest over the past few years. The the circle, is repelled away by the sensor-target repulsive 
papers [Jung and Sukhatme, 2002] and Parker[2002] are force referred to in [Parker 2002]. Also, every target is out-
especially relevant in the context of this paper as representa- side the sensing range of every other sensor. It is evident 
tive algorithms; we appraise these in specific scenarios in a that optimal detection will occur if instead of getting re-
subsequent section. Other pertinent approaches include a pelled away, the former sensor is attracted to the inside of 
scheme for delegating and withdrawing robots to and from the circle.
targets through the ALLIANCE architecture [Parker 1999], 
a strategy for maximizing coverage with mobile sensors 2.2 Sukhatme-Jung Algorithm 
[Sameera and Sukhatme 2004] and a method for sensor Fig 2 shows an environment partitioned into five re-
management in a distributed tracking setup [Horling et. al, gions by landmarks represented by the diagonal black lines. 
2003]. There is also a large volume of work in the context of A sensor S  is initially stationed in region 1. Targets are 
using a network of static sensors to guide robots pursuing located along each edge of the dotted square ABCD . They 
invaders [Schenato et. al 2005]. A more detailed citation of move in the direction indicated by the arrows cyclically 
literature is avoided here due to strict page limits.  with uniform velocity. The dotted circle is the FOV (field of 
  Our first objective in this paper is to analyze performance vision) region of a nonexistent sensor placed at its center 
of existing solutions, and reformulate target detection as an O ; it is meant to touch the sides of the square, but  offset 
optimization problem. Subsequently, we introduce the no- for clarity. It is clear that optimal detection takes place at 
tion of covering graph to optimize the detections of a single 
                                                 O . Due to the uniform velocity of sensor motion the ur-


                                            IJCAI-07
                                             2135 gency of all regions will be the same, causing the sensor to 1. E  is a bounded region in the plane, called the environ-
 either remain in region 1 or switch continually from one ment over which sensors and targets move. The precise 
 region to an adjacent one.  Hence the algorithm is unable to shape of E  is of little significance in what follows, hence 
 find the optimal position O .                     will be assumed to be an A A  square.
                                                2. S(t) {S (t), S (t).., S (t)}is the snapshot of the set of 
                                                          1    2     n
                                                   sensors,  at time instant   . Each sensor has FOV f A .

                                                 3. T(t) {T1 (t),T2 (t)..,Tm (t)}is likewise the snapshot of the 
                                                   set of targets at time instant t .
                                                   Given S(0) as a set of points within E , and T (0)  as a set 
                                                 of points on the edges of E . At every time instant 
                                                 t  1,2,3.., every target moves with a maximum speed of 
                                                 vmax in an unknown direction. A sensor has a maximal 

                                                 speed of smax . Determine positions of S(t) over time in 
                                                 such a way that the number of targets detected by at least
                                                 one sensor is maximized. If there are several possible opti-
                                                 mal solutions, we prefer those which maximize the number 
                                                 of detections by precisely one sensor. This last requirement 
Fig. 1 A pathological run of Parker’s algorithm. The shaded minimizes redundant detections. 
squares are the sensors, the unshaded ones are the targets moving 
in a circle. Note the repulsion of the sensor closest to the circle 3.1 Preliminaries  
  Both these algorithms perform very well in many scenar-
                                                   If P  is a point on the plane and r 0 , define Cr (P)
 ios, (such as the ones cited in their sources); the pathological 
 runs shown above are exceptions to the rule.  Parker’s algo- (resp. Dr (P) ) as the circle (resp. closed disk) of radius 
 rithm fails when target-sensor and sensor-sensor forces give 
 conflicting results, and Sukhatme-Jung’s becomes subopti- r centered at P ; also, define Dr (P)  as the exterior 
 mal due to the artificial division of the environment area 
 into regions. The presence of these exceptions leads us to of Dr (P) . Define C(Si )  as the circle of radius smax cen-
 ask the question: Can the  performance be improved further? tered at Si (called the sensor circle of Si ) and C(T j ) a cir-
      
                                                 cle of radius vmax  centered at T j (called the target circle of 
        
                                                 T ).  Define D(S ) and D(T )  correspondingly as sensor 
     S   1          2     3                       j            i       j
        A            B 
                                                 and target disks. Note that D f (Si )  is the FOV disk of Si .
      
                                                 Given a set P of points on the plane, define Hull(P) as the 
                                                 vertex set of the convex hull of P .
                                                   We call the ordered pair (S(t0 ),T(t0 )) the configuration
            O 
                                                 of the sensor-target system at time instant t0 , and any set of 
                                                 consecutive configurations a configuration sequence. De-
                                                 fine a configuration sequence to be feasible if the following 
                                                 condition holds: For every pair of consecutive time instants  
      D              C                           t',t' 1 in the sequence, | Si (t' 1) Si (t') | smax for every 
      5          4 
                                                 sensor and | T j (t' 1) T j (t') | vmax  for every target; we 
                                                 will be interested only in feasible sequences hereafter. We 
  Fig. 2 Pathological run of Sukhatme-Jung algorithm. The define the number of k detections (resp. k detections)   of 
  black lines are landmarks, the dark circle S is the sensor, 
  and the dotted lines indicate target motion paths. the configuration as the number of targets detected by pre-
                                                 cisely (resp. at least) k sensors, and call k  the order of de-
                                                 tection.  With these definitions, the problem seeks to maxi-
 3. Problem Statement                            mize 1+ detections, preferring maximal 1-detections. 
  We introduce the following definitions: 


                                            IJCAI-07
                                             2136 3.2 Solving a set of Quadratic Constraints      idea as follows: Define the covering function
  This section develops a technique to be used later in Sec- CF : D(S1) N which takes a point in D(S1)  to the 
tion 4.2 to assign sensor positions in a multi-sensor system. number of targets that a sensor at that point will definitely 
Given two disjoint sets of targets, Tinc {T1,T2 ,..,Tk } and cover in the next time step. The maximal values of the cov-

 Texc {Tk 1,Tk 2 ,..T l} , we are asked to determine whether ering function will be attained at the points of intersection 
                                                 of C (T )  C  (T ) , where T  D  (S ) , giving us 
 we can place a sensor that covers all targets in Tinc and none f i f j   i, j  f  1

 of those in Texc . The problem reduces to determining if an algorithm to move S1  to  a covering center of a maximal 
there exists a sensor position P for which 
                                                 clique. S1  visits each of the points of intersection of the 
                                                 form above, and moves to that which gives maximal detec-
 || P Ti || f , Ti Tinc             [3.2a]       tions; should there be no intersections, it moves to a cover-
 || P Ti || f , Ti Texc                     [3.2b] ing point of any target it detects. This ensures a maximal 
has a solution . [3.2] has a solution if and only if the inter- number of detections in the next time step, and the algo-
                                                 rithm runs in O(m 2 ) time where m  is the number of targets. 
section I      Df (Ti)      D f (Ti) is non-null; in 
         Ti Tinc      Ti Texc                    Number of Cliques 
this case, every point in I is a solution. Further, suppose In this section we estimate the maximal number of 

that [3.2a] has a solution, but with the additional constraint cliques that can exist in D f (S1) . A clique in 
that || P Tk 1 || f , it does not. This means that every cir-
                                                 CG(S1 (t),T1 (t)) has all its targets lying within a circle of 
 cle of radius f which covers T also covers T . In such 
                        inc          k 1         radius d  f  v   as a result, the separation between 
 a case, T is said to be dependent on T ; in particular, if    max
        k 1                    inc               two cliques is at least d . Consequently, the number of 
 T k 1  falls within Hull(Tinc ) , it is always dependent on 
                                                 cliques in D f (S1) is at most the size of maximum set of 
 Tinc .
                                                 points M  that can be chosen in D f (S1) such that the dis-
 4 Methodology                                   tance between any every point in M , with its nearest 
                                                 neighbors in M ,  is d . Such an M  can be constructed as 
 4.1Single Sensor System 
                                                 follows. Choose a point P0 D f (S1 (t)) ; draw the circle 
 Covering Graph 
                                                 C'  Cd (P0 ) , and mark off the vertices of a regular hexagon 
  Consider the configuration (S1(t0 ),T (t0 ))  . We say that a inscribed in it .  Repeat the construction at every 

 point P D(S1 ) is a covering point with respect to S1 , of a Pi ,1 i 6 until no more points within D f (S1) can be 
 set T 'T of targets, currently within D (S ) , iff no target 
                               f  1              found. This leads to tiling of D f (S1) by regular hexagons of 
in T can escape out of C (P) in one time step.   Observe          f 2
                    f                            side d , leading to O(( d ) ) hexagons and clique centers. 
that if P is a covering point of target T T ' , then 
                                    i            4.2 Multi-sensor System 
 P  Dd (Ti ) , where d f vmax .  In the same scenario we In this section we use ideas from previous sections to 
say that every pair of targets in T ' is simultaneously cover- obtain an optimal solution to tracking with n sensors. The 
able. Note that two targets are simultaneously coverable iff sensors share knowledge of the targets they see at every 
the (Euclidean) distance between them is at most 2.d  De- time instant, enabling each to build the global covering 
fine the covering graph CG(S(t),T(t)) of the configuration graph..   
as a graph whose nodes are covered targets, and whose Taglists and Taglist types 
edges connect a pair of simultaneously coverable targets. To optimize 1+ detections is a nontrivial problem in gen-

From above, targets in T ' will form a clique in the covering eral. We assume for the purpose that every target Ti  is 
 graph. Further define a maximal clique in CG(S(t),T(t)) as
                                                 tagged with a list of sensors, Ti .taglist . Also, de-
one with the maximal number of vertices, noting that this 
                                                 fineT.taglist  {(i,T .taglist)} . The point of introduc-
could be non-unique.                                        T  T    i
    It is easy to see that moving to a covering point of a   i
maximal clique ensures that a maximum number of targets ing taglists- as claimed in Section 1- is to convert  a con-
will be detected at the next time instant. We formalize this tinuous search space into a discrete one. When we say Ti is


                                            IJCAI-07
                                             2137 tagged with a list S'S , we try to see if Ti can be covered 3. Assign sensor positions corresponding to 
by the sensors in S' ; if this is feasible, then sensor positions Current using the method in Section 3.2. 
can be assigned to sensors in S' by the algorithm in Section Finding all proper taglists 
3.2, or else deemed impossible by the same. We formalize It remains to specify how we find proper taglists. Note 
this in the following definitions.               that only sensors with overlapping FOV regions pose a dif-
  Given  S(t0 ) , an instance of T(t0 1).taglist  is said to be ficulty, for otherwise we run the single-sensor algorithm on 
feasible iff for every sensor the intersection   each sensor. The brute force approach would be to generate 
                                                 all possible taglists, check whether each is proper, and pass 
 R D(S )             D (T )             D (T )
 i    i               f  j               f  j                                         km
        T  Cover(T.taglist,S ) T Cover(T.taglist,S ) it to Findopt , at the expense of having an  O(2 ), k 1
         j          i       j          i         algorithm. This is too expensive a solution in time. Instead, 
is nonempty. Here Cover(T.taglist, Si ) is the set of all tar- we generate all taglists satisfying the convex hull property, 
                                                 which in general takes time sub-exponential in m , and 
gets covered by Si .  We say that a point P D(S ) is a
                                         i       check whether each is proper. This is formalized below. 
covering point with respect to S , of a set T ' T of targets, 
                         i                          If D f (Si ) D f (S j )) , for every pair of distinct 
currently detected by at least one sensor in the system, iff no 
                                                 sensors, the only proper taglist we generate corresponds to 
target in T can escape out of C f (P ) in one time step.  The maximal clique detections by each sensor.  If the sensors 
covering graph and covering function of a sensor are de- move in such a way that their FOV overlaps, we degenerate 
fined correspondingly.                           to the weakly overlapping case covered below. 
  For a single sensor, optimality of detection hinged on the We call S'(t0 ) {S1(t0 ), S2 (t0 ),.., Sk (t0 )} S(t0 )
assurance that a certain number of targets would be seen the strongly overlapping iff D (S (t ))  . Suppose 
next time step. This assurance is  formalized by the idea of a             f  i 0
                                                                     Si S'
proper taglist in a multi-sensor system. A feasible instance 
                                                 that T '(t0 ) is the set of targets detected by S' , and further 
of T(t0 1).taglist is said to be proper iff for every sensor 
                                                 that T ''(t0 ) T'(t0 )  is detected by more than one sensor.  
 Si (t) , targets in Cover(T.taglist, Si )  are vertices of a clique 
                                                 Suppose that  Qi (t0 ) is the set of cliques of 
in CG(Si (t0 ),T(t0 )) . It is difficult to construct proper 
taglists directly ; it is easier to take a shortcut through CG(Si (t0 ),T '(t0 )),1 i k .
taglists which satisfy  the hull property, defined next. We generate the space of proper taglist instances for  

  An instance of  T(t0 1).taglist is said to satisfy the hull T '(t0 )  as follows. Construct an iterator I1  that traverses the 
property if and only if the following criterion holds for space Q1 (t0 ) Q2 (t0 ) .. Qk (t0 ) . At every point of the 
 every subset T' of targets in it. If every target in T' is tagged 
                                                 traversal of I1 , do the following. Tag every target that ap-
with sensor Si , then every target located within  Hull(T') is pears in one or more cliques with all sensors in whose FOV 
also tagged with Si . Note that if an instance of it falls. Suppose that T'''  is that subset of T'' which is cur-
                                                 rently detected by more than one sensor in S'  . Construct 
 T(t0 1).taglist is proper, it also satisfies the hull property; 
the converse need not be true. We will use this property to iterator I 2 which goes over all possible combinations of 
generate proper taglists and later to compute the complexity sensor assignments to targets in Hull(T''') . Each of these 
of the multi-sensor system.                      satisfies the hull property.  Output the resulting taglist if and 
 Finding the Optimal Solution                    only if it is proper. 
  The Findopt routine finds the sensor assignment that We call S'(t0 ) weakly overlapping iff for every  
guarantees maximal 1+ detections in the next time step. 
                                                 Si  S'  there exists at least one S j S': j i such that 
 Findopt(S(t 0),T(t0 ))
    1. Generate an initial proper taglist, Current D f (Si ) D f (S j ) .  Following the same notation as 
       forT (t0 ) . Compute  N1 (Current)  and in the previous case, we generate the space of proper taglist 

        N1 (Current) , which denote the number of 1+ and instances as follows. I1  has the same meaning as before. It 

       1 detections in Current respectively.     is then possible to write          S' t0  as 
    2. For each proper taglist Next  remaining do 
                                                 S'(t0 ) S1 '(t0 ) S2 '(t0 ) .. Sr '(t0 ) , where sensors in 
          a.  If        N  (Next) N (Current) or 
                         1         1             each S '(t ) are strongly overlapping. Correspondingly 
              ( N (Next) N  (Current) and              i  0
                1         1                                             r
              N (Next) N (Current) ) then 
                1        1                       T '''  is expressible as a union T '''i (t0 ) . Construct itera-
              Current  Next                                             i 1


                                            IJCAI-07
                                             2138 tor I 2 which goes over all possible sensor assignments to FOV of OPT sensors during comparison; predictive tracking 
          r                                      and communication ranges do not matter for simulation. In 
targets in  Hull(T ''' (t )) , the Cartesian product of addition, we tweaked the values of dr and do , correspond-
          i 1      i 0                                                       i     i
                                                 ing to cut-off points for sensor-sensor and sensor-target 
hulls; output the resulting taglist iff it is proper. 
                                                 forces,  until they gave optimal performance. Specifically, 
 Complexity Analysis
                                                 we changed do1 and dr1  from one test case to another, ob-
    A typical worst case scenario is one in which S(t) is 
                                                 serving that 1.2do1        do2 1.5do1  and 
weakly overlapping.  In this case I 1   runs over 
                                                 2.0do1 do3  2.7do1  gave best results; likewise did 
    f 2n
 O(( d ) ) clique combinations, so the algorithm is exponen- 1.8dr1 dr2 2.4dr1  . Furthermore, we scaled the weighted 
 tial in the number of overlapping sensors. Suppose that there force vectors to an equal degree for all sensors. 
 are k :1 k n hulls for I  to consider, and that the i -th 
                     2                           Sukhatme-Jung Algorithm 
hull encloses, or has on its boundary, mi targets in all, and We partitioned the square environment into a cross-
                                                 shaped  topological map. We tweaked the urgency and 
 m'i  vertices. Suppose further that all m targets are currently 
                                                 availability thresholds from one test case to the next; in par-
                         m'i
 detected. Then I 2  takes O(n ) iterations to traverse its ticular, 4 availability 10  and 4 urgency 8  give 
space, and each iteration takes polynomial time in m  in for 
                                                 maximal detections.  The control parameter d was varied 
computing the hulls, verifying hull points, and so on. Note likewise across test cases till maximal detections were ob-
that m'i o(mi ) o(m)  except in rare cases, so that the tained; specifically, when the FOV or the number of sensors 
run-time is sub-exponential, typically polynomial, in the was decreased,  we gave a small value to d ,  between 0.5 
number of detected targets.                      and 0.6,  and large otherwise, between 1.5 and 1.8.  
    In essence while the algorithm is exponential in number 
of overlapping sensors it is typically polynomial in the 5.2 Tabulated Results 
number of targets due to tags for only the targets that form The environment is the square [0,500] [0,500] . Five 
the convex hull for a set of targets that constitute a clique. In sensors, each of FOV 50, are randomly placed in E , each 
steady state when sensors have diverged to maximize detec-
tions, the number of overlapping sensors is generally small, with smax 50 . Targets emanate from five sources placed 
and this is specifically so when the area of E, is considerably randomly on the edges of E every time instant. The speed 
greater than the total area covered by the sensors. Indeed of each target is uniformly distributed in [0,5]  and angle 
when the total area covered by sensors is greater than or uniformly distributed on [0,2 ] . In Tables 1-3, the rows 
equal to area of E maximizing detections is trivially 
                                                 indicate the order of the detection as a percentage rounded 
 achieved. 
                                                 to the nearest integer, and the columns indicate the algo-
                                                 rithm whose performance is noted. Tables 2 and 3 show 
 5. Simulation and Results                       readings of the form A|B, to be interpreted as follows. In 
                                                 table 2, A corresponds to the case of 7 sensors, and B to that 
 5.1 Implementation Specifics                    of 3 sensors, as indicated in its caption. Table 3 is read simi-
  The optimal algorithm above, hereafter called OPT, as larly.
 well as the representative algorithms of Parker and Suk-
 hatme-Jung,  have been implemented on an Intel P4 ma- 5.3  Performance Graphs 
 chine running Fedora Core 4 using the g++ compiler and Qt Fig. 3a (resp. 3b)  shows how the number of 1+ detec-
 for graphical simulation. The specifics of each implementa- tions varies with FOV(resp. number of sensors) for each 
 tion are given below.                           algorithm. The performance gain of OPT over the earlier 
                                                 ones is evident for various sensor and FOV combinations as 
 OPT Algorithm                                   it gives consistently higher 1+ detections, despite the man-
    This is essentially the same as the multi-sensor version 
                                                 ual tweaking of its adversaries to achieve optimal perform-
presented in Section 4.2 with the restriction that, when OPT 
                                                 ance.
runs for 1 second, it terminates and outputs the most optimal 
solution generated thus far.  This restriction ensures that 
                                                  Detection OPT Parker Sukhatme-
OPT takes nearly the same time to output its solution as its 
                                                                                       Jung 
adversaries.  
                                                        0 50                 60          55 
 Parker Algorithm                                       1 49                 37          45 
    We implemented the A-COMMT version of the Parker    2 1                   3           0 
algorithm. We set the sensing range of every sensor to the 3+ 0               0           0 
                                                   Table 1: Table of base case 

                                            IJCAI-07
                                             2139