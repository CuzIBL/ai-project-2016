                       Breaking symmetries in all different problems

                                         Jean-Franc¸ois Puget
                                                 ILOG
                                          9 Avenue de Verdun
                                     94253 Gentilly Cedex, France
                                             puget@ilog.fr

                    Abstract                          it is shown that a linear number of constraints can break all
                                                      symmetries for the pigeon hole problem: one simply needs
    Adding symmetry breaking constraints is one of the to order the variables. In this paper we consider a more gen-
    oldest ways of breaking variable symmetries for   eral class of problems: all different problems. These are CSPs
    CSPs. For instance, it is well known that all the such that the variables are subject to an all different constraint
    symmetries for the pigeon hole problem can be re- among other constraints. We show in section 4 that for such
    moved by ordering the variables. We have general- CSPs, all variable symmetries can be broken with at most
    ized this result to all CSPs where the variables are n − 1 binary constraints, where n is the number of variables.
    subject to an all different constraint. In such case it In [Roney-Dougal et al., 2004] a general purpose method
    is possible to remove all variable symmetries with for breaking all value symmetries is given: the GE-tree
    a partial ordering of the variables. We show how  method. We show in section 5 that this method can be safely
    this partial ordering can be automatically computed combined with symmetry breaking constraints, under some
    using computational group theory (CGT). We fur-   conditions on the order in which the search tree is traversed.
    ther show that partial orders can be safely used to- In section 6, we apply our method to some complex CSPs.
                                 [
    gether with the GE-tree method of Roney-Dougal    We summarize our ﬁndings and discuss some possible gener-
              ]
    et al., 2004 . Experiments show the efﬁciency of  alizations in section 7.
    our method.
                                                      2   Symmetries, Graphs and CSPs
1  Introduction
                                                      The symmetries we consider are permutations, i.e. one to one
A symmetry for a Constraint Satisfaction Problem (CSP) is mappings (bijections) from a ﬁnite set onto itself. Without
a mapping of the CSP onto itself that preserves its structure loss of generality, we can consider permutations of In, where
as well as its solutions. If a CSP has some symmetries, it In is the set of integers ranging from 0 to n − 1. For in-
may be the case that all symmetrical variants of every dead stance, we can label the variables of a graph with integers,
end encountered during the search must be explored before a such that any variable symmetry is completely described by a
solution can be found. Even if the problem is easy to solve, permutation of the labels of its variables. This is formalized
all symmetrical variants of a solution are also solutions, and as follows.
listing all of them may just be impossible in practice. Those
observations have triggered a lot of interest for the detection 2.1 Computational Group Theory
and removal of symmetries in the constraint programming Let Sn be the set of all permutations of the set In. The image
community. Adding symmetry breaking constraints is one of of i by the permutation σ is denoted iσ. A permutation σ ∈
the oldest ways of breaking variable symmetries for (CSPs). Sn is fully described by the vector [0σ, 1σ, . . . , (n−1)σ]. The
                        [                  ]
For instance, it is shown in Crawford et al., 1996 that all product of two permutations σ and θ is deﬁned by i(σθ) =
variable symmetries could be broken by adding one lexico- (iσ)θ.
graphical ordering constraint per symmetry. Unfortunately, Given i ∈ In and a permutation group G ⊆ Sn, the orbit
this method is not tractable in general, as there may be an of i in G, denoted iG, is the set of elements to which i can be
exponential number of symmetries. It has been shown that mapped to by an element of G:
in general there is no way to break all symmetries of a prob-
lem with a polynomial number of constraints[Roy and Luks,               iG = {iσ|σ ∈ G}
2004]. In [Flener et al., 2002], a linear number of constraints
are used to break symmetries for matrix problems. As ex- Given i ∈ In and a permutation group G ⊆ Sn, the sta-
pected, since there are a polynomial number of constraints, bilizer of i in G, denoted iG, is the set of permutations of G
not all symmetries are broken. However, a polynomial num- that leave i unchanged:
ber of constraints may be sufﬁcient for breaking all symme-
                                                                                   σ
tries in some special cases. For instance, in [Puget, 1993],          iG = {σ ∈ G|i  = i}2.2  CSP and symmetries                                     [1, 2, 0, 4, 5, 3], [2, 0, 1, 5, 3, 4], [2, 1, 0, 5, 4, 3],
A constraint satisfaction problem P (CSP) with n variables  [3, 4, 5, 0, 1, 2], [3, 5, 4, 0, 2, 1], [4, 3, 5, 1, 0, 2],
is a triple P = (V, D, C) where V is a ﬁnite set of variables
(vi)i∈In , D a ﬁnite set of ﬁnite sets (Di)i∈INn , and every con- [4, 5, 3, 1, 2, 0], [5, 3, 4, 2, 0, 1], [5, 4, 3, 2, 1, 0]}
straint in C is a subset of the cross product i∈In Di. With-
                                         k
out loss of generality, we can assume that Di ⊆ I for some 3 Breaking variable symmetries
k.
                                                      Without loss of generality, we can assume that domains are
  An assignment is a member of S, i.e. a vector of values       k
                                   n                  subsets of I for some k, with the usual ordering on integers.
(ai)i∈In such that ai ∈ Di for all i ∈ I , and is denoted
(vi = ai)i∈In . A partial assignment is sub vector of an as- 3.1 Lex leader constraints
signment.
  A solution to (V, D, C) is an assignment that is consistent Adding constraints is one of the oldest methods for reducing
with every member of C.                               the number of variable symmetries of a CSP[Puget, 1993].
  Given a permutation σ of In, we deﬁne a variable permu- In [Crawford et al., 1996], it is shown that all the variable
tation on (partial) assignments as follows:           symmetries of any CSP can be broken by the following con-
                                                      straints.
                       σ
         ((vi = ai)i∈In ) = ((viσ = ai)i∈In )
                                                                                      σ
  Such permutation is called a variable symmetry if it maps             ∀σ ∈  G, V ¹ V                (1)
solutions to solutions.                                 For a given σ, the constraint (V ¹ Vσ) is semantically
                        k
  Given a permutation θ of I , we deﬁne a value permutation equivalent to the disjunction of the constraints:
on (partial) assignments as follow:
                                                                            v0 < v0σ
                      θ          θ−1
         ((vi = ai)i∈In ) = ((vi = ai )i∈In )                          v0 = v0σ ∧ v1 < v1σ
                                                                               .
  Such permutation is called a value symmetry if it maps so-                   .
lutions to solutions.                                        v0 = v0σ ∧ . . . ∧ vi−1 = v(i−1)σ ∧ vi < viσ
                                                                               .
2.3  A graph coloring example                                                  .
Let us introduce an example that will be used throughout the v0 = v0σ ∧ . . . ∧ vn−2 = v(n−2)σ ∧ vn−1 < v(n−1)σ
paper. We say that a graph with m edges is graceful if there v0 = v0σ ∧ . . . ∧ vn−2 = v(n−2)σ ∧ vn−1 = v(n−1)σ
exists a labeling f of its vertices such that:
                                                        If the last constraint is omitted, the set of constraints is
  • 0 ≤ f(i) ≤ m for each vertex i,                   denoted V ≺ Vσ.
  • the set of values f(i) are all different,           In our example, the constraints given by [Crawford et al.,
  • the set of values abs(f(i), f(j)) for every edge (i, j) are 1996] are
    all different.
                                                           (v0, v1, v2, v3, v4, v5) ¹ (v0, v1, v2, v3, v4, v5)
A straightforward translation into a CSP exists where there is
                                                           (v0, v1, v2, v3, v4, v5) ¹ (v0, v2, v1, v3, v5, v4)
a variable vi for each vertex vi, see [Lustig and Puget, 2001].
The variable symmetries of the problem are induced by the  (v0, v1, v2, v3, v4, v5) ¹ (v1, v0, v2, v4, v3, v5)
automorphism of the graph. There is one value symmetry,    (v0, v1, v2, v3, v4, v5) ¹ (v1, v2, v0, v4, v5, v3)
which maps v to m − v. More information on symmetries      (v0, v1, v2, v3, v4, v5) ¹ (v2, v0, v1, v5, v3, v4)
in graceful graphs is available in [Petrie and Smith, 2003], (v , v , v , v , v , v ) ¹ (v , v , v , v , v , v )
[Petrie, 2004].                                              0 1  2  3  4  5        2  1  0  5  4 3
                                                           (v0, v1, v2, v3, v4, v5) ¹ (v3, v4, v5, v0, v1, v2)
  Let us consider the following graph K3 × P2:
    0                        3                             (v0, v1, v2, v3, v4, v5) ¹ (v3, v5, v4, v0, v2, v1)
                                                           (v , v , v , v , v , v ) ¹ (v , v , v , v , v , v )
     ¤@@                    ¤@@                              0 1  2  3  4  5        4  3  5  1  0 2
    ¤   @                   ¤   @                          (v0, v1, v2, v3, v4, v5) ¹ (v4, v5, v3, v1, v2, v0)
    ¤                      ¤
          @   2                   @                        (v0, v1, v2, v3, v4, v5) ¹ (v5, v3, v4, v2, v0, v1)
   ¤        @              ¤        @ 5
   ¤      ¨¨               ¤      ¨¨                       (v0, v1, v2, v3, v4, v5) ¹ (v5, v4, v3, v2, v1, v0)
   ¤  ¨¨                  ¤     ¨
    ¨                         ¨
  ¤¨¤                     ¤¨¤ ¨                       3.2  A polynomial number of constraints
  1                      4                            The number of constraints (1) can grow exponentially with
  The group of variable symmetries of the corresponding the number of variables V. Using the fact that the variable
CSP is equivalent to the group of symmetries of the graph. are subject to an all different constraint, we can signiﬁcantly
Such group can be computed by packages such as Nauty[Mc reduce the number of symmetry breaking constraints. Let us
Kay, 1981]. This group G is:                          consider one of the symmetries of our example, namely:
     {[0, 1, 2, 3, 4, 5], [0, 2, 1, 3, 5, 4], [1, 0, 2, 4, 3, 5],      σ = [0, 2, 1, 3, 5, 4]  The constraint breaking this symmetry is            All remaining stabilizers G3, G4, G5 are equal to G2.
                                                        Coset representatives are:
      (v0, v1, v2, v3, v4, v5) ¹ (v0, v2, v1, v3, v5, v4)
                                                                           G0
                                                                  U0  =   0   = {0, 1, 2, 3, 4, 5}
  Since v0 = v0 is trivially true, and since v1 = v2 cannot be
                                                                           G1
true because of the all different constraint, this constraint can U1  =   1   = {1, 2}
                                                                           G2
be simpliﬁed into:                                                U2  =   2   = {2}
                                                                  U   =   3G3 = {3}
                      v1 < v2                                      3
                                                                  U   =   4G4 = {4}
  This simpliﬁcation is true in general and can be formalized      4
as follows. Given a permutation σ, let s(σ) be the smallest i
        σ                              σ
such that i 6= i, and let t(σ) be equal to (s(σ)) .     Theorem  2. Given a CSP with n variables V such that
  Lemma 1. Given a CSP where the variables V are subject there exists an all different constraint on these variables, and
to an all different constraint, and a variable symmetry group
                                                      given coset representatives sets Ui for the variable symme-
G for this CSP, then all variable symmetries can be broken by try group of the CSP, then all the variable symmetries can
adding the following constraints:                     be broken by at most n(n − 1)/2 binary constraints. These
                                                      constraints are given by :
                ∀σ ∈ G, vs(σ) < vt(σ)           (2)
                                                                      n
  Proof. By deﬁnition kσ = k for all k < s(σ), and s(σ)σ 6=      ∀i ∈ I , ∀j ∈ Ui, i 6= j → vi < vj   (3)
s(σ). Let us look at the constraint V ¹ Vσ. There is an
                                                        Proof. By deﬁnition, for each element j ∈ Ui, there exists
all different constraint on the variables V, which means that                               σ
                    σ                                 at least one permutation σ ∈ Gi such that i = j and j =
vi = viσ if and only if i = i. In particular, vk = vkσ for all t(σ). The converse is also true. If there exists a permutation σ
k < s(σ), and vs(σ) 6= v(s(σ))σ . Therefore, only one disjunct
                                                      such that i = s(σ) and that j = t(σ), then j ∈ Ui. Therefore,
for the constraint can be true, namely:               the constraints (2) can be rewritten into:

 v0 = v0σ ∧ . . . ∧ vs(σ)−1 = v(s(σ)−1)σ ∧ vs(σ) < v(s(σ))σ           n
                                                                 ∀i ∈ I , ∀j ∈ Ui, i 6= j ⇒ vi < vj
Since kσ = k for k < s(σ) and s(σ)σ = t(σ), this can be          P
                                                        There are  n−1(|U | − 1) such constraints. All the per-
simpliﬁed into vs(σ) < vt(σ). 2                                    i=0   i
  Note that if two permutations σ and θ are such that s(σ) = mutations of Gi leave the numbers 0, . . . , i − 1 unchanged.
s(θ) and t(σ) = t(θ), then the corresponding symmetry Therefore Ui is a subset of {i, . . . , n − 1}. Then |Ui| − 1 ≤
                                                      n − i − 1. Therefore, the number of constraints is bounded
breaking constraints are identical. Therefore, it is sufﬁcient     Pn−1
to state only one symmetry breaking constraints for each pair from above by i=0 (n − i − 1) = n(n − 1)/2. 2
i, j such that there exists a permutation σ with i = s(σ) and In our example, these constraints are :
j = t(σ).
                                                        v0 < v1, v0 < v2, v0 < v3, v0 < v4, v0 < v5, v1 < v2
  The set of these pairs can be computed using what is known
as the Schreier Sims algorithm [Seress, 2003]. This algorithm Note that some of these constraints are redundant. For in-
constructs a stabilizers chain G0, G1, . . . , Gn as follows: stance, the constraint v0 < v2 is entailed by the ﬁrst and the
                                                      last constraints. This remark can be used to reduce the num-
                    G0   =  G                         ber of constraints as explained in the following section.
                  n
            ∀i ∈ I , Gi  =  (i − 1)Gi−1
                                                      3.3  A linear number of constraints
  By deﬁnition,
                   σ                 σ                The previous result can be improved by taking into account
    Gi = {σ ∈ G : 0 = 1 ∧ . . . ∧ (i − 1) = i − 1}    the transitivity of the < constraints. Given j ∈ In, it may be
             Gn ⊆  Gn−1 ⊆ . . . G1 ⊆ G0
                                                      the case that j belongs to several of the sets Ui. In such case,
  The Schreier Sims algorithm also computes set of coset let us deﬁne r(j) as the largest i different from j such that j
representatives Ui. Those are orbits of i in Gi:      belongs to Ui. If j belongs to no Ui other than Uj, then let
                                                      r(j) = j.
                           Gi
                     Ui = i                             Before stating our main result, let us prove the following.

  By deﬁnition, Ui is the set of values which i is mapped
to by all symmetries in G that leave at least 0, . . . , (i − 1) Lemma 3. With the above notations, if j ∈ Ui and i 6= j
unchanged.                                            then r(j) ∈ Ui and r(j) < j
  From now on, we will assume that all the groups we use
are described by a stabilizers chain and coset representatives. Proof. Let us assume that j ∈ Ui and i 6= j. By deﬁnition
                                                                                                σ
  In our example, the stabilizer chain is :           of Ui there exists a permutation σ ∈ Gi such that i = j. Let
                                                      k = r(j). By deﬁnition of r(j), i ≤ k and j ∈ Uk. Therefore,
    G0   =   G                                                                                θ
                                                      there exists a permutation θ ∈ Gk such that k = j. Let
                                                             −1         ν     σθ−1    θ−1
    G1   =   0G0 = {[0, 1, 2, 3, 4, 5], [0, 2, 1, 3, 5, 4]} ν = σθ . Then, i = i   = j    =  k. Moreover,

    G2   =   1G1 = {[0, 1, 2, 3, 4, 5]}               ν ∈  Gi because σ ∈ Gi and θ ∈ Gk  ⊆  Gi. Therefore,                                                                                             0
k ∈ Ui. The fact that r(j) < j is an immediate consequence 2002] how to transform P into a new CSP P such that all
of the deﬁnition of r(j).2                            value symmetries of P become variable symmetries of P0.
                                                      The idea is to add n × k additional binary variables xij (vari-
  We can now state our main result.                   ables with domains equal to {0, 1}). We also add the follow-
                                                      ing channeling constraints:

  Theorem 4. With the above notations, given a CSP with n            n     k
variables V, such that there exists an all different constraint ∀i ∈ I , j ∈ I , (xij = 1) ≡ (vi = j)
on these variables, then all variable symmetries can be bro- These constraints state that the variable x equals 1 if and
ken by at most n − 1 binary constraints. These constraints                                 ij
                                                      only if the variable vj equals j. Adding these new variables
are given by :                                        do not change the solutions of the CSP. Moreover, variable
                 n                                    symmetries of P are equivalent to permutations of the rows of
           ∀j ∈ I , r(j) 6= j → vr(j) < vj      (4)
                                                      the xij matrix, whereas value symmetries of P are equivalent
                                                      to permutations of the columns of the same matrix.
  Proof. The number of constraints (4) is at most n by def- Let us construct the vector X by concatenating the rows
inition. Note that r(0) = 0 by deﬁnition of r, therefore, the of the matrix xij . Therefore, the variables xij are ranked in
number of constraints is at most n − 1. Let us consider one of increasing values of i then increasing values of j in the vector
the constraints of (3). We are given i and j such that j ∈ Ui X.
and i 6= j. We want to prove that the constraint c = (vi < vj) Let us consider a value symmetry θ for P. Then θ is a
is implied by the constraints (4). Let us consider the sequence permutation of the matrix columns. This symmetry is broken
(j, r(j), r(r(j)), r(r(r(j))), . . .). Let us assume that the se- by the constraint:
quence never meets i. We have that j ∈ Ui and i 6= j. By
                                                                                  θ
application of lemma 3, we get r(j) ∈ Ui and r(j) < j.                      X ¹ X                     (5)
Since r(j) 6= i by hypothesis, lemma 3 can be applied again.
                                                        Let X  be the variables in the i-th row of the matrix. The
By repeated applications of lemma 3 we construct an inﬁnite  i
                                                      value symmetry θ maps variables in a given row to variables
decreasing sequence of integers all included in U . This is
                                          i           in the same row. This is formalized as follows.
not possible as Ui is ﬁnite. Therefore, there exists k such
that i = rk(j). Moreover, we have established rk(j) 6=
 k−1
r   (j), . . . , r(r(j)) 6= r(j), r(j) 6= j. Therefore, the con- Xi =  (xi0, xi1, . . . , xi(k−1))
straints vrk(j) < vrk−1(j), . . . vr(r(j)) < vr(j), vr(j) < vj are θ
                                                            (X  )i  =  (x  θ−1 , x θ−1 , . . . , x θ−1 )
constraints of (4). Together they imply vrk(j) < vj which is             i0     i1        i(k−1)
the constraint c. We have proved that the constraints (3) are
                                                        From the deﬁnition of ¹, we have that (5) is equivalent to
implied by the constraints (4). Since the set of constraints (4)
                                                      the disjunction of the following constraints:
is a subset of the constraints (3), both sets of constraints are
                                                                                  θ
equivalent. Then, by theorem 2, the constraints (4) break all             X0 ≺ (X  )0
                                                                            θ            θ
variable symmetries. 2                                             X0  = (X  )0 ∧ X1 ≺ (X )1
  In our example, we get from coset representatives:                           .
                                                                               .
                                                                 θ                   θ             θ
r(0) = 0, r(1) = 0, r(2) = 1, r(3) = 0, r(4) = 0, r(5) = 0 X0 = (X )0 ∧ . . . ∧ Xi−1 = (X )i−1 ∧ Xi ≺ (X )i
                                                                               .
  Therefore, the constraints (4) given by theorem 4 are:                       .
                                                              θ                   θ                 θ
                                                      X0 = (X  )0 ∧ . . . ∧ Xn−2 = (X )n−2 ∧ Xn−1 ≺ (X )n−1
      v < v , v < v , v < v , v < v , v < v                   θ                   θ                 θ
       0   1   0   3   0   4   0    5  1    2         X0 = (X  )0 ∧ . . . ∧ Xn−2 = (X )n−2 ∧ Xn−1 = (X )n−1
                                                                                               θ
  Note that the constraint v0 < v2 is no longer appearing. Let us compare lexicographically Xi with (X )i. Let ai

                                                      be the value assigned to vi. Then xi(ai) = 1 and xij = 0 for
4  Breaking both variable symmetries and                                                     θ−1
                                                      j 6= ai. Similarly, xi(j)θ−1 = 1 if and only if j = ai, i.e.
   value symmetries                                    θ                        θ                      θ
                                                      ai = j. Therefore, Xi = (X )i if and only if ai = (ai) ,
                                                                  θ                     θ
In [Roney-Dougal et al., 2004], a general method for break- and Xi ≺ (X )i if and only if ai < (ai) .
ing all value symmetries is described. This method uses the We then have that (5) is equivalent to the disjunction of the
group of value symmetries of the CSP. We will show that this constraints:
method can be combined with symmetry breaking constraints                          θ
                                                                           a0 < (a0)
when there are both variable symmetries and value symme-                     θ           θ
tries.                                                               a0 = (a0) ∧ a1 < (a1)
                                                                               .
                                                                               .
4.1  GE-tree and symmetry breaking constraints                     θ                    θ          θ
                                                           a0 = (a0) ∧ . . . ∧ ai−1 = (ai−1) ∧ ai < (ai)
We are given a CSP P with n variables vi subject to an all                     .
different constraint among other constraints. Without loss of                  .
                                                                θ                     θ               θ
generality, we can assume that the domains of the variables a0 = (a0) ∧ . . . ∧ an−2 = (an−2) ∧ an−1 < (an−1)
             k                                                  θ                     θ               θ
are subsets of I for some k. It is shown in [Flener et al., a0 = (a0) ∧ . . . ∧ an−2 = (an−2) ∧ an−1 = (an−1)  Let us now consider one of the disjunct, namely:    5.1  Graceful graphs
                                                      We have tested our approach on the graceful graphs of [Petrie
             θ                   θ           θ
     a0 = (a0) ∧ . . . ∧ ai−1 = (ai−1) ∧ ai < (ai)    and Smith, 2003]. Variable symmetries are broken by the
                                                      constraints (4). There is one non trivial value symmetry,
  This means that θ leaves invariant a0, a1, . . . , ai−1. In such which maps a to e − a; where e is the number of edges of
case ai must be minimal among the values that any such θ can the graph. Therefore, the orbits for this symmetry are the sets
map it to. We have therefore proved the following result. {a, e − a}, for 0 ≤ a ≤ e/2. Therefore, one can restrict the
  Lemma 5. With the above notations, ai is the minimum of domain of v0 by keeping one the smallest value in each of
its orbit in the group of symmetries that leave a0, a1, . . . ai−1 these orbits.
unchanged.                                              For each graph we report the number of solutions of the
  This is equivalent to the GE-tree method for breaking all CSP (sol), the size of the search tree (node) and the time
value symmetries [Roney-Dougal et al., 2004], when the vari- (time) needed to compute all these solutions the running time
ables and the values are tried in an increasing order during without symmetry breaking technique (no sym). We also re-
search.                                               port these ﬁgures when the SBC method is used. In this case
  From [Crawford et al., 1996], it is safe to add all possible the running time includes the time needed to perform all the
symmetry breaking constraints (1) on P0. In particular, it is group computations. Running times are measured on a 1.4
safe to state all the constraints (1) for the variable symmetries GHz Dell Latitude D800 laptop running Windows XP. The
of P together with all the constraints (5). By lemma 5, the implementation is done with ILOG Solver 6.0[ILOG, 2003].
set of constraints (5) is equivalent to the GE-tree method for
breaking value symmetries. We have just proved the follow- graph         no sym                SBC
ing result.                                                       sol      node  time  sol     node  time
                                                       K3 × P2     96      1518  0.12   8        83  0.01
                                                       K4 × P2   1440    216781  13.6   30     1863  0.27
  Theorem 6. Given a CSP, its group of variable symmetries K5 × P2 480 34931511  4454   2     53266   6.5
                                                       K6 × P2                          0   1326585  305
G1, and its group of value symmetries G2, then the combi-
nation of the GE-tree method for breaking value symmetries  Table 1. Computing all solutions for graceful graphs.
with the symmetry breaking constraints (1) computes a set of The running times are up to 30 times smaller than the ones
solutions S such that:                                reported in [Petrie, 2004] for the GAP-SBDD and the GAP-
                                                      SBDS methods, using a computer about half the speed of
                                  0      σθ    0
   ∀S ∈ sol(P), ∃σ ∈ G1, ∃θ ∈ G2, ∃S ∈ S, S = S       ours. This shows that in this example our symmetry break-
                                                      ing constraints are much more efﬁcient than modiﬁed search
  Theorem 4 in section 3 says that the set of all those con- methods. However, we ﬁnd twice as many more solutions.
straints (1) is equivalent to the constraints (4) when there is Let see why on the graph K5 × P2. This graph has 10
an all different constraints on all the variables V. This yields vertices and 25 edges. We list the values for the variables
the following result.                                 v0, v1, . . . , v9 for the two solutions:
                                                                   (0, 4, 18, 19, 25, 23, 14, 6, 3, 1)
  Corollary 7. Given a CSP where the variable are subject
to an all different constraint, its group of variable symmetries  (0, 6, 7, 21, 25, 24, 22, 19, 11, 2)
G1, and its group of value symmetries G2, then the combi- Let us apply the non trivial value symmetry to the second
nation of the GE-tree method for breaking value symmetries one. We get:
with the symmetry breaking constraints (4) computes a set of
solutions S such that:                                             (25, 19, 18, 4, 0, 1, 3, 6, 14, 23)

                                  0      σθ    0
   ∀S ∈ sol(P), ∃σ ∈ G1, ∃θ ∈ G2, ∃S ∈ S, S = S         Let us apply the following variable symmetry to it:
                                                                      [4, 3, 2, 1, 0, 9, 8, 7, 6, 5]
5  Experimental results
                                                        This yields the ﬁrst solution!
We have implemented an algorithm similar to Nauty[Mc    This example shows that we did not break all symmetries
Kay, 1981] for computing graph automorphisms, as well as that are a product of a variable symmetry by a value symme-
a Schreier Sims algorithm[Seress, 2003]. These have been try. This is so despite the fact that all variable symmetries and
used in the following examples. In our implementation, we all value symmetries are broken.
did not fully implement the GE-tree method, because it re-
quires more computational group algorithms than what we 5.2 Most Perfect Magic Squares
have implemented so far. We simply compute the orbits for Most perfect magic squares, studied in [Ollerenshaw, 1986],
the group G of value symmetries. Then, only the minimum are given as an example of a CSP with convoluted variables
element of each orbit is left in the domain of the variable v0. symmetries in [Roney-Dougal et al., 2004]. The authors
We will refer to this method as SBC (for Symmetry Breaking decided to use an inverse representation in order to trans-
Constraints) in order to differentiate it from other methods. form variable symmetries into value symmetries. These were