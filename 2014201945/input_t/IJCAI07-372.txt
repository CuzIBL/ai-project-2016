                                       Improving LRTA*(k)

                               Carlos Hernández1 and Pedro Meseguer
                            Institut d’Investigació en Intel.ligència Artificial
                            Consejo Superior de Investigaciones Científicas
                                Campus UAB, 08193 Bellaterra, Spain.
                                 {chernan|pedro}@iiia.csic.es

                    Abstract                          2   Preliminaries
   We identify some weak points of the LRTA*(k)al-    The state space is defined as (X, A, c, s, G), where (X,A)isa
   gorithm in the propagation of heuristic changes. To finite graph, c : A  [0,) is a cost function that associates
   solve them, we    present a  new  algorithm,       each arc with a positive finite cost, s  X is the start state,
   LRTA*LS(k), that is based on the selection and up- and G  X is a set of goal states. X is a finite set of states,
   dating of the interior states of a local space around and A  X  X \{(x, x)|x  X} is a finite set of arcs. Each arc
   the current state. It keeps the good theoretical prop- (v,w) represents an action whose execution causes the agent
   erties of LRTA*(k), while improving substantially  to move from v to w. The state space is undirected: for any
   its performance. It is related with a lookahead depth action (x, y)  A there exists its inverse (y, x)  A with the
   greater than 1. We provide experimental evidence of same cost c(x, y)=c(y, x). k(n, m) is the cost of the path
   the benefits of the new algorithm on real-time     between state n and m. The successors of a state x are
   benchmarks with respect to existing approaches.    Succ(x)={y|(x, y)  A}. A heuristic function h : X  [0,)
                                                      associates with each state x an approximation h(x)ofthe
1   Introduction                                      cost of a path from x to a goal, where h(g)=0, g  G.The
                                                      exact cost h*(x) is the minimum cost to go from x to a goal.
Real-time search interleaves planning and action execution
                                                      h is admissible iff  x  X, h(x)  h*(x). h is consistent iff 0
in an on-line manner. This allows to face search problems in
                                                       h(x)  c(x,w)+h(w) for all states w  Succ(x). A path (x0,
domains with incomplete information, where it is impossi-                         
ble to perform the classical search approach.         x1,  . ., xn) with h(xi) = h*(xi), 0 i n is optimal.
                                                        LRTA* [Korf 1990] is a real-time search algorithm that is
  A real-time agent has a limited time to planify the next
                                                      complete under a set of reasonable assumptions. LRTA*
action to perform. In such limited time, it can explore only a
                                                      improves its performance over successive trials on the same
relatively small part of the search space that is around its
                                                      problem, by recording better heuristic estimates. If h(x)is
current state. This part is often called its local space.
                                                      admissible, after a number of trials h(x) converges to their
  This paper considers some weak points of the updating
mechanism of the LRTA*(k) algorithm [Hernandez and    exact values along every optimal path. In each step, LRTA*
                                                      updates the heuristic estimation of the current state to make
Meseguer, 2005]. With    this purpose, we   present
                                                      it consistent with the values of their successors [Bonnet and
LRTA*   (k), based on local space selection and updating.
      LS                                              Geffner, 2006]. Originally, LRTA* performs one update per
Local space selection is learning-oriented. Local space is
                                                      step. Some versions perform more than one update per step.
divided into interior and frontier. Updating is done from the
frontier into the interior states, so some kind of lookahead is
done. Each state is updated only once. If the initial heuristic 3 LRTA*(k)
is admissible, it remains admissible after updating.  LRTA*(k) [Hernandez and Meseguer, 2005], is a LRTA*-
LRTA*LS(k) keeps the good properties of LRTA*(k).     based algorithm that consistently propagates heuristic
  The paper structure is as follows. In Section 2 we expose changes up to k states per step, following a bounded propa-
the basic concepts used. In Section 3 we describe some gation strategy. If the heuristic of the current state x
weak  points of LRTA*(k). In Section 4, we present    changes, the heuristic of its successors may change as well,
LRTA*LS(k), explaining the lookahead and update mecha- so they are reconsidered for updating. If the heuristic of
nisms. In Section 5, we relate LRTA*LS(k) with lookahead some successor v changes, the successors of v are reconsid-
greater than 1. In Section 6, we provide experimental re- ered again, and so on. The propagation mechanism is
sults. Finally, in Section 7 we extract  some conclusions. bounded to reconsider up to k states per step. This updating
                                                      strategy maintains heuristic admissibility, so LRTA*(k)
                                                      inherits the good properties of LRTA* (in fact, LRTA*(k
   1 On leave from Universidad Católica de la Santísima Concep- reduces to LRTA* when k=1). Experimentally, LRTA*(k)
ción, Caupolicán 491, Concepción, Chile.


                                                IJCAI-07
                                                  2312 improves significantly with respect to LRTA*.
                                                       4   LRTA*LS(k)
    The updating mechanism is implemented with a queue Q,
 that maintains those states that should be reconsidered for Trying to solve those weak points, we propose a new algo-
 updating. We have identified some weak points:        rithm LRTA*LS(k), based on the notion of local space
                                                       around the current state. Formally, a local space is a pair (I,
                                                                                             
 1.  If y enters Q, after reconsideration it may happen that F), where I X is a set of interior states and F X is the set
    h(y) does not change. This is a wasted effort.     of frontier states, satisfying that F surrounds I inmediate and
                                                                             

 2.  A state may enter Q more than once, making several completely, so I F =   .LRTA*LS(k) selects the local
    updatings before reaching its final value. Would it not space around the current state and then updates its interior
    be possible to perform a single updating per state? states. Each state is updated only once. Under some circum-
 3. The order in which states enter Q, combined with the stances, we can prove that every interior state will change its
    value of k parameter, may affect the final result. heuristic. The number of interior states is upper-bounded by
                                                       k. If the initial heuristic is admissible, LRTA*LS(k)main-
 As example, in the Figure 1 (i), a, b, c and d are states, the tains the admissibility, so it inherits the good properties of
 left column is the number of the update iteration, and the LRTA* (and LRTA*(k)).
 numbers below the states are their heuristic values. Moving
 from a state to a successor costs 1. Sucessors are revised in 4.1 Selecting the Local Space
 left-right order. The current state is d, iteration 0 shows the We want to find a local space around the current state
 initial heuristic values. In iteration 1, h(d) changes to 4, Q = such that its interior states will have a high chance to update
 {c}. In iteration 2, h(c) changes to 5, Q ={b, d}. In iteration its heuristic. We propose the following method,
 3, h(b) does not change. In iteration 4, h(d) changes to 6, Q
 ={c}. In iteration 5, h(c) does not change. After five itera- 1. Set I = 
, Q = {x | x is the current state}.
 tions no more changes are made and the process stops. We 2. Loop until Q empty or |I| = k
 see that c and d enters two times in Q, d is updated twice Extract a state w from Q.Ifw is a goal, exit loop. Oth-
 while c is updated only once. If k = 3, the final result de- erwise, check by looking at Succ(w) that are not in I if
 pends on the entering order in Q. If the left successor goes h(w) is going to change (that is, if h(w)<minv{Succ(w)-I}
 first, the states d, c, b will enter Q in that order, producing h(v)+c(w,v), we call this expression the updating con-
 the heuristic estimates of Figure 1 (ii). The agent moves to dition). If so, include w in I, and Succ(w) \ I in Q.
 c, and then it may move again to d. If the right successor 3. The set F surrounds I inmediate and completely.
 goes first, the states in Q will be d, c, d, causing heuristic
 values equal to those of iteration 5. Then, the agent moves For example, let us apply this strategy to Figure 1 (i). It
 from d to c, and then to b, not revisiting d.         starts with I ={d}sinceh(d)<minvSucc(d) h(v) + 1. Then, it
   In [Hernandez and Meseguer, 2005] it is required that up- checks the successors of d, adding c to I, I ={c, d}since
 dates are done on previously visited states only. In that case, h(c)<minv{Succ(c)-I} h(v) + 1. Then, it checks the successors
 weak point 1 is solved by the use of supports 2. However, of c that do not belong to I,thatis,b . Since h(b)=
 there is a version of LRTA*(k), called LRTA*2(k), which minv{Succ(b)-I} h(v) + 1, it is not possible to add more states to
 updates any state (not just previously visited states). In this I.ThenI ={c, d}andF ={b}. If the heuristic is initially
 case, supports can only partially solve this issue.   consistent, all interior states of the local space (I, F) built
                                                       with the previous method will change their heuristic, as
                                                       proven in the following result.

                                                       Proposition 1. If the heuristic is initially consistent, starting
                                                       from x LRTA*2 (k=) will update every state of I.
Iter. a bcd                      Iter. a bcd
                  a   bcd                              Proof. By induction in the number of states of I.If|I|=1,
 0  3   4  3   2                  0 3   4   3   2
 1  3   4  3   4   3  4   5   4   1 3   4   5   2      then I ={x}, the current state. In this case, h(x) is updated
 2  3   4  5   4                  2 3   4   5   6      because by construction it satisfies the updating condition.
 3  3   4  5   4   a  b   c   d
 4  3   4  5   6                                       Let us assume the proposition for |I| = p, and let us prove it
 5  3   4  5   6   3   4  5   4
                                                       for |I|=p+1.Letz     I, z  x, y = argminvSucc(z) h(v)+
         (i)           (ii)             (iii)          c(z,v). If y  I, z satisfies the updating condition by con-
                                                       struction. If y  I,letI’ = I –{z}. Since |I’| = p, every state
  Figure 1. (i) Example of LRTA*(k) updating; (ii)ifsucces- of I’ will be updated, so y will be updated, passing from
  sors enter Q in left-right order, and k=3, state d can be revis-
                                                       hold(y)toh new(y), hold(y)<hnew(y). We will see that this
  ited; (iii) example of LRTA*LS(k) updating.          causes z to be updated. We consider two cases:
                                                       1. If y is still argminvSucc(z) c(z,v)+h(v). The initial heuristic
                                                       is consistent so h(z)  c(z,y)+hold(y)<c(z,y)+hnew(y). So z
                                                       satisfies the updating condition and h(z) will change.
    2
     There, support usage does not consider ties. It is straightfor- 2. If w = argminvSucc(z) c(z,v)+h(v), w  y.Ifw  I’, z satis-
 ward to develop a support management including ties.  fies the updating condition by construction. If w  I’, w has


                                                 IJCAI-07
                                                   2313passed from hold(w)tohnew(w), hold(w)<hnew(w). Since y was Proposition 3. Every state updated by LRTA*2(k=)isalso
the initial minimum, we know that c(z,y)+hold(y)<c(z,w)+ updated by LRTA*LS(k=).
hnew(w). So, h(z)  c(z,y)+hold(y)<c(z,w)+hnew(w). Then, z
satisfies the updating condition and h(z) will change. The proof is direct, but it is omitted for space reasons. With
   LRTA*2(k=) reaches all interior states because every these selection and updating strategies, the weak points of
successor of a changing state enters the queue Q, which has LRTA*(k) are solved partial or totally. Regarding point 1, if
no limit in length (k=).                                                  qed. the heuristic is consistent all interior states will change its
                                                      heuristic estimator (propositions 1 and 3). If the heuristic is
If the heuristic is admissible but not consistent, some inte- just admissible, some internal states may not change (exam-
rior states may not change. For instance, consider the states ple in Section 4.1). Point 2 is totally solved, since the up-
a-b-c-d in a linear chain, with heuristic values 1, 1, 5, 6, and dating strategy considers every state only once. About point
b is the current state. The previous method will generate I = 3, it is not solved since the final result may still depend on
{b, c}. h(b) will change to 2, but h(c) will not change. the order in which successors are considered and the value
                                                      of k parameter. Since LRTA*LS(k) performs a better usage
4.2 Updating the Local Space                          of k than LRTA*(k) (non repeated states and with high

LRTA*LS(k) updates the interior states of (I, F) as follows, chance to change), we expect that, with the same k value,
                                                      the former will depend less than the latter on the successor
Loop while I is not empty:                            ordering. If the heuristic is consistent, after updating interior
1.  Calculate the pair of connected states (i, f), i  I, f  F, nodes the local space is locally consistent and agent deci-
    f  Succ(i), such that (i, f) = argmin v  I, w  F, w  Succ(v) sions are locally optimal [Pemberton and Korf, 1992].
    c(v, w) + h(w).                                     It is important to see that the new update method makes a
2.  Update h(i) = c(i,f) + h(f).                      more  aggressive learning  than LRTA*(k), because
3. Remove  i from I, include i in F.                  LRTA*(k) updates a state x considering all its successors,
                                                      while LRTA*LS(k) considers those successors that are fron-
Forexample,inFigure1(i), I ={c, d}andF ={b}, the re-  tier states only. One update of LRTA*LS(k) may be greater
sults of each iteration with the new updating appear in Fig- than one update of LRTA*(k). For instance, see the updating
ure 1 (iii). In iteration 1, (i, f)=(c, b), and h(c) changes to 5. of h(d)inFigure1(i): it goes from 2 to 4, and then to 6, in
In iteration 2, (i, f)=(d, c), and h(d) changes to 6. As I = 
 two steps. In Figure 1 (iii), h(d) goes from 2 to 6 in one step.
process stops. Update keeps admissibility, as proved next.
                                                      4.3  The algorithm

Proposition 2. If the initial heuristic is admissible, after The LRTA*LS(k) is a algorithm based on LRTA* similar to
updating interior states the heuristic remains admissible. LRTA*(k). The algorithm appears in Figure 2. The main
                                                      differences with LRTA* appear in the LRTA-LS-Trial
Proof. Let (i, f) = argmin v  I, w  F, w  Succ(v) c(v, w)+h(w). procedure, calling to SelectionUpdateLS. This proce-
Since i  I and connected to a frontier state f,itwillbeup- dure performs the selection and updating of the local space
dated (it satisfies the updating condition by construction). around the current state. Procedure SelectionUp-
There is an optimal path from i to a goal that passes through dateLS first performs the selection of the local space and
a successor j. We distinguish two cases:              then updates it. To select the local space, a queue Q keeps
                                                      states candidates to be included in I or in F. Q is initialized
1.j F. After updating                                with the current state and F and I are empty. At most k
                                                      states will be entered in I. This is controlled by the counter
  h(i)=c(i, f) + h(f)                                 cont. The following loop is executed until Q contains no
      c(i, j) + h(j)                 (i, f) minimum c(v,w) + h(w) states or cont is equal to k. The first state v in Q is extracted.
      c(i, j) + h*(j)    h admissible                The state y  argminwSucc(v), w  I h(w)+c(v, w) is com-
      =h*(i)              because optimal path        puted. If h(v) satisfies the updating condition, then v enters
                                                      I, the counter increments and those successors of v that are
2. j  F. If I contains no goals, the optimal path at some not in I or Q enters in Q in the last position. Otherwise, v
point will pass through F.Bep the state in the optimal path enters F. When exiting the loop, if Q still contains states
that belongs to F and q the interior state in the optimal path then these states go to F. Once the local space has been se-
just before p. After updating                         lected, its interior states are updated as follows. The pair (i,
                                                      f)  argmin vI, wF, wSucc(v) h(w)+c(v, w) is selected, h(i)is
  h(i)=c(i, j) + h(j)                                 updated, i exits I and enters F.
      c(q, p) + h(p)(i, f) minimum    c(v,w) + h(w)      Since the heuristic always increases, compleneteness
      k(i, p) + h(p)     k(i, p) includes c(q, p)    holds (Theorem 1 of [Korf, 1990]). Heuristic admissibility
      k(i, p) + h*(p)    h admissible                is maintained, so convergence of to optimal paths is guar-
      =h*(i)                            because optimal path anteed in the same terms as LRTA* (Theorem 3 of [Korf,
                                                      1990]). LRTA*LS(k) inherits the good properties of LRTA*.
In both cases h(i)h*(i) so h remains admissible.            qed.


                                                IJCAI-07
                                                  2314procedure LRTA*-LS(k) (X, A, c, s,G, k)               the frontier of the local space. If it finds an obstacle, the
  for each x  X do h(x)  h0(x);                     whole process is repeated again. In LRTA*-based algo-
  repeat                                              rithms the agent moves to its best successor.
   LRTA*-LS-trial(X, A, c, s,G, k);                     Figure 3 shows an example of a goal-directed navigation
   until h does not change;                           task on a grid (legal moves: north, south, east, west; all
                                                      moves of cost 1) with    three different algorithms:
procedure LRTA*-LS-trial(X, A, c, s,G, k)             LRTA*   (k=6), RTAA* with lookahead 6 and LRTS (with
                                                            LS
  x  s;                                               parameters =1 and T=) with lookahead 3. The visibility
  while x  G do                                      radius is one [Bulitko and Lee, 2006]. Black cells are obsta-
    SelectUpdateLS(x, k);                             cles. The initial heuristic is the Manhattan distance. The
     
    y   argminwSucc(x) [h(w) + c(x,w)];(Break ties randomly) current state is indicated with a circle. With similar looka-
           
    execute(a A such that a = (x, y));                head, LRTA*   (k) expands less states (the set of interior
                                                                 LS
    x  y;                                             states contains 5 states with k = 6, because only those 5
                                                      states will changes their heuristic) and after updating it ob-
procedure SelectUpdateLS (x, k)                       tains a heuristic more informed than RTAA* and LRTS.
        
    
       
  Q    x ; F   ; I   ; cont 0;                          The updating mechanism  of LRTA*  (k) is a general
        
                                                                              LS
  while Q    cont < k do                              method. Therefore, it is possible to use it with different loo-
    
   v  extract-first(Q);                               kahead mechanisms, like those of RTTA* and LRTS.
   y  argminwSucc(v)  w  I h(w) + c(v, w);
   if h(v) < h(y) + c(v, y)  then
     I I  {v};                                      6   Experimental Results
         
     cont  cont + 1;                                  We compare LRTA*LS(k) versus LRTA*(k). In addition, we
              
     for each w Succ(v) do                            compare LRTA*LS(k) with RTAA* and LRTS, algorithms
       if w  I  w  Q then Q  add-last(Q,w);       with lookahead greater than 1. As benchmarks we use these
   else                                               four-connected grids,
     if I 
then F F  {v};                          •   Grid35: grids of size 301x301 with a 35% of obstacles
  if Q 
then F F  Q;                                   placed randomly. In this type of grid heuristics tend to
  while I 
do                                            be slightly misleading.
   (i, f)  argmin vI, wF, wSucc(v) h(w) + c(v, w); •  Grid70: grids of size 301x301 with a 70% of obstacles
   h(i)  max[h(i), c(i, f) + h(f)];                      placed randomly. In this type of grid heuristics could be
   I I - {i};                                            misleading.
   F F   {i};                                       •   Maze: acyclic mazes of size 151x151 whose corridor
                                                          structure was generated with depth-first search. Here
             Figure 2: LRTA*LS(k) algorithm.              heuristics could be very misleading.
                                                        Results are averaged over 1000 different instances. In
                                                      grids and mazes, the start and goal state are chosen ran-
5   Lookahead and Local Space                         domly assuring that there is a path from the start to the goal.
                                                      All actions have cost 1. As initial heuristic we use the Man-
Real-time agents restrict planning to the local space [Koe- hattan distance. The visibility radius of the agent is 1. Re-
nig, 2001]. Basically an agent performs three steps: (i) loo- sults are presented in percentage with respect to the value of
kahead on the local space, (ii) updating the local space and row 100%, in terms of total search time, solution cost, trials
(iii) moving in the local space.                      to convergence, number of updated states, and time per step,
  On lookahead, in RTA*, LRTA* [Korf, 1990; Knight,   for the convergence to optimal path.
1993] and in LRTS [Bulitko and Lee, 2006] the local space
                                                        Comparing LRTA*LS(k) and LRTA*(k), we consider first
is determined by the depth of the search horizon. The search trial and convergence to optimal paths. Results for conver-
tree, rooted at the current state, is explored breadth-first gence to optimal paths appear in Table 1, where the LCM
until depth d. In the LRTA* version of [Koenig, 2004] and algorithm [Pemberton and Korf, 1992] is also included
in RTAA* [Koenig and Likhachev, 2006], the local space is (LCM has the same updating mechanism as LRTA*(k), but
determined by a bounded version of A*, limiting the num- without supports and limitation of entrances in the queue).
ber of states that can enter in CLOSED. LRTA*LS(k)triesto
                                                      LRTA*LS(k) converges to optimal paths with less cost,
find those states that will change in the updating process. number of trials and total time than LRTA*(k) for all values
Lookahead is limited by the k parameter: a maximum of k of k tested between 1 and  (except for Grid35 in total time
states can enter the set of interior states. About updating,
                                                      with k = 5). Respect to time per step, LRTA*LS(k) obtains
there are two approaches: updating the current state only better results than LRTA*(k ) except for Grid35.
(like LRTS with the max-min rule), and updating all interior
                                                      LRTA*LS(k) requires slightly more memory than LRTA*(k)
states of the local space (like RTAA* that update all states (except for Grid70 with k = ). LRTA*(k = )andLCM
in CLOSED and LRTA*LS(k)). Regarding moving, for un-  have the same cost and number of trials to convergence, but
known environments the free space assumption is assumed LRTA*(k=) improves over LCM in time because the use
[Koenig et al., 2003]. In RTAA* the agent tries to move to
                                                      of supports. LRTA*LS(k = ) has similar results in cost and


                                                IJCAI-07
                                                  2315number of trials to convergence, requiring less time than benchmarks, while there is no clear winner for the third.
LRTA*(k=) and LCM    (except for Grid35 in time per  LRTA*LS(k) performs better than LRTS. On memory usage,
step). We observe that the worse the heuristic information LRTS wins, while the second is unclear between
is, the better results LRTA*LS(k) obtains, for all values of k. LRTA*LS(k) and RTAA*.
For Grid35, LRTA*LS (5) improves over LRTA*(5) in steps
and trials, but it requires more running time. This is due to 7 Conclusions
the extra overhead of LRTA*LS(k) has over LRTA*(k)
(minimizing on two vs. one argument), that counterbalances Trying to solve some inefficiencies in LRTA*(k) propaga-
the benefits in steps and trials.                     tion, we have developed LRTA*LS(k) a new real-time search
                                                      algorithm. It is based on the selection and update of a local
  Results for first trial appear in Table 2. LRTA*LS(k) ob-
tains a solution with less cost than LRTA*(k) for all tested space, composed of interior and frontier states. The number
values of k between 1 and  (except for Maze with k =5). of interior states is upper-bounded by k. LRTA*LS(k) up-
                                                      dates the interior states from the heuristic values of frontier
Respect to time, LRTA*LS(k) obtains better solution for
Maze and Grid70 than LRTA*(k). In Grid35, LRTA*(k)    states, so it performs a kind of lookahead with varying
shows better results in total time and time per step. Trying depth. If the heuristic is initially consistent, all interior states
to improve  the running  time, we  have  developed    are updated. Experimentally, we show that LRTA*LS(k)
LRTA*   (k)-path, that only updates states that have been improves over LRTA*(k) (lookahead 1). and improves over
      LS                                              RTAA* and LRTS (with lookahead greater than 1).
visited previously (like LRTA*(k)andLCM). LRTA*LS(k)-
path improves the cost of the solution and total time for
small values of k, and this improvement is larger when References
worse is the heuristic information (in Grid35 it improves for [Bonnet and Geffner, 2006] Blai Bonet and Hector Geffner.
k = 5 only, in Maze it improves for k = 5, 25, 61 and 113). Learning Depth-First Search: A Unified Approach to
This fact can be explained as follows. Due to the free space Heuristic Search in Deterministic and Non-Deterministic
assumption, LRTA*LS(k) may perform an inefficient use of Settings, and its application to MDPs. Proc. of the Int.
k, updating states that are blocked (will never appear in any Conf. Automated Planning and Scheduling. UK. 2006.
solution). Since a great part of the states in Maze are
blocked, is better to update only states in the current path, as [Bulitko and Lee, 2006] Vadim Bulitko and Greg Lee.
the results show. Considering memory, LRTA* (k)uses      Learning in Real Time Search: A Unifying Framework.
                                          LS             Journal of AI Research, 25:119-157. 2006.
more memory than LRTA*(k)andLRTA*LS(k)-path with
increasing k and more than LCM with k = .            [Hernandez and Meseguer, 2005] Carlos Hernández and
  Comparing with lookahead algorithms, results for first Pedro Meseguer. LRTA*(k).  In Proc. of the 19th Int.
trial appear in Table 2. Comparing LRTA*LS(k)and         Joint Conference on Artificial Intelligence, 1238–1243,
RTAA*, the former obtains costs equal to or better than the Edimburgh, Scotland, Juny 2005.
latter in Grid70 and Maze for all values of k. However, from [Knight, 1993] Kevin Knight. Are many reactive agents
k = 25, RTAA* obtains slightly better costs in Grid35.   better than a few deliberative ones?. In Proc. of the 13th
RTAA* takes more time in finding a solution for all values Int. Joint Conference on Artificial Intelligence, 1993.
of k  in all benchmarks.  Considering time per step,
                                                      [Koenig and Likhachev 2006] Sven Koenig and Maxim
LRTA*LS(k) requires a smaller time for all values of k in all
benchmarks (except for Maze with k = 5, 25). From k =25  Likhachev. Real-Time Adaptive A*. In Proc. of the Int.
in Maze and from k = 61 in G70, RTAA* uses more mem-     Joint Conference on on Autonomous Agents and Multi-
                                                         Agent Systems. 2006.
ory than LRTA*LS(k). In G35, RTAA* uses less memory for
all values k. LRTS uses the radius of a circle centered in the [Koenig et al. 2003] Sven Koenig, Craig A. Tovey and
current state as lookahead parameter, while LRTA*LS(k)and Yury V. Smirnov. Performance bounds for planning in
RTAA* use the number of the states they consider in ad-  unknown terrain. Artificial Intelligence. 147(1-2): 253-
vance. To perform a fair comparison, we use LRTS (with   279, 2003.
                   
parameters =1 and T=  ) lookahead values that generate [Koenig, 2001] Sven Koenig. Agent-Centered Search.
circles including k states, where k is the lookahead of
                                                         Artificial Intelligence Magazine, 22, (4), 109-131, 2001.
LRTA*LS(k) and RTAA*. LRTS does not show a good per-
formance in terms of cost and time to find a solution respect [Koenig, 2004] Sven Koenig. A comparison of fast search
to LRTA*LS(k). LRTS uses less memory than LRTA*LS(k)     methods for real-time situated agents. In Proc. of the 3th
and smaller time per step.                               Int. Joint Conference on on Autonomous Agents and
  In summary, LRTA*LS(k) shows better performance than   Multi-Agent Systems, 864-871, 2004.
LRTA*(k) both in first trial and convergence to optimal [Korf 1990] Richard Korf. Real-time heuristic search. Arti-
paths. Sometimes updating only previously visited states ficial Intelligence, 42(2-3):189–211, 1990.
could improve performance: if the heuristic quality is good,
                                                      [Pemberton and Korf, 1992] Joseph Pemberton and Richard
it is advisable to update any state, but with bad quality heu-
                                                         Korf. Making locally optimal decisions on graphs with
ristics it is safer to update visited states only. In first trial,
                                                         cycles Tech. Rep. 920004. Comp. Sc. Dep. UCLA, 1992.
LRTA*LS(k) performs equal or better than RTAA* in two


                                                IJCAI-07
                                                  2316