       Incremental Tractable Reasoning about Qualitative Temporal Constraints 

                                                   Alfonso Gerevini 
                DEA - Universita degli studi di Brescia, via Branze 38,1-25123 Brescia, Italy 
                                           gerevini@ing.unibs.it 


                        Abstract                               In the fully-dynamic version, we deal with both assertions 
                                                               and retractions. Typically, the worst-case performance of an 
   In many applications of temporal reasoning we are in­
                                                               algorithm for a dynamic problem is specified in terms of its 
   terested in reasoning incrementally In particular, given 
                                                               amortized complexity for a single operation (assertion or re­
   a CSP of temporal constrains and a new constraint, we 
                                                               traction), that can be defined as the average runtime per oper­
   want to maintain certain properties in the extended CSP 
                                                               ation over a worst-case sequence of operations [Tarjan, 1985]. 
   (e.g., a solution), rather than recomputing them from 
                                                                 The large majority of the algorithms that have been devel­
   scratch. The Point Algebra (PA) and the Interval Algebra 
                                                               oped for reasoning within tractable classes of qualitative tem­
   (IA) are two well-known frameworks for qualitative tem­
                                                               poral constraints are static. In this paper we investigate the 
   poral reasoning. Most of the existing algorithms for PA 
                                                               incremental version of some reasoning problems for PA and 
   and the known tractable fragments of IA, such as ORD-
                                                               ORD-Horn, discussing the behavior of existing techniques 
   Horn, has been designed for "static" reasoning. In this 
                                                               and proposing new ones. Given a sequence s of input 
   paper we study the incremental version of some funda­
                                                               constraints involving n variables, our incremental algorithms 
   mental problems of temporal reasoning, proposing new 
                                                               improve the total runtime required for processing s using ex­
   algorithms that amortize their complexity when process­
                                                               isting techniques by a factor of  
   ing a sequence of input constraints. After analyzing the 
                                                                 In Section 2 we give the necessary background on PA and 
   role of path-consistency for incremental satisfiability, we 
                                                               I A. In Section 3, after analyzing the use of a path-consistency 
   propose algorithms for maintaining a solution of a CSP 
                                                               algorithm for incremental satisfiability checking, we propose 
   over either PA or ORD-Horn, and the minimal labels of a 
                                                               new incremental algorithms for finding a solution of a CSP 
   CSP over PA. Our algorithms improve the complexity of 
                                                               over either PA or ORD-Horn, and for computing the minimal 
   using existing techniques by a factor of 
                                                               labels of a CSP over PA. Finally, in Section 4 we briefly dis­
   where n is the number of variables involved in the CSP. 
                                                               cuss the fully-dynamic version of the problems considered, 
                                                               and we mention further results and future work. 
1 Introduction 
                                                               2 Background on PA and IA 
Constraint-based qualitative temporal reasoning is a widely 
studied area of AI in which the most prominent approaches      Vilain and Kautz's Point Algebra [1986] consists of three 
are Allen's Interval Algebra (IA) [1983] and Vilain and        basic relations between time points all possible 
Kautz's Point Algebra (PA) [1986]. Given a CSP of tempo­       unions of them where ? is the universal rela­
ral constraints, fundamental reasoning problems are deciding   tion), and of the empty relations Allen's Interval Algebra 
satisfiability of the CSP, finding a solution, and computing its [1983] consists of thirteen basic relations between temporal 
"minimal labels". These problems arc NP-hard for the full      intervals, all possible unions of these relations, and the empty 
IA, while they are polynomial for PA and for several frag­     relation. PA and IA are closed under the operations union 
ments of IA, such as Nebel & Burckert [19951 ORD-Horn          intersection difference converse and composi­
subalgebra, which is the unique maximal tractable subclass     tion (o). The first four operations are defined in the standard 
of IA containing all the basic relations.                      way. The composition for two relations can be derived from 
   In many applications of temporal reasoning we are in­       the transitivity tables of the basic relations in PA and IA. 
terested in "dynamic" or on-line reasoning. For instance,        A qualitative temporal constraint satisfaction problem (or 
given an initial (possibly empty) CSP of temporal constraints, briefly temporal CSP) in our context is a set of constraints 
whenever a new constraint is asserted, we want to in maintain  of the kind xRu, where x and y are cither point variables or 
a solution of the CSP, rather than recomputing it from scratch interval variables, and R is either a PA-relation (if x and y 
using a "static" algorithm.                                    are point variables) or an IA-relation (otherwise). 
   The design of algorithms for dynamic polynomial prob­         Given a temporal CSP over either PA or IA, a funda­
lems is an important research field in operation research and  mental reasoning problem is deciding the satisfiability of  
theoretical computer science (e.g., [Ausiello et ai, 1991]).     is satisfiable if and only if there exists a solution for i.e., 
A dynamic problem can be either semi-dynamic or fully-         an assignment of temporal values to the variables of (ratio­
dynamic. In the semi-dynamic version we deal with informa­     nal numbers for point variables, pairs of rational numbers for 
tion that is incrementally given (or decrementally retracted). interval variables) such that all the constraints in 0 are satis-


TEMPORAL REASONING                                                                                                   1283  fied. The problem of deciding the satisfiability of will be   graph of the CSP. From a topological sort of the vertices of 

 called PSAT, if is over PA, and ISAT if is over IA. The       this graph we can easily derive a scenario for the CSP.3 
 problem of finding a solution for will be called PSOL, if       Enforcing path-consistency to a temporal CSP requires 
 is over PA, and ISOL otherwise.                               cubic time and is sufficient to decide PSAT fLadkin and 
   A related reasoning problem is finding a scenario that re­  Maddux, 1988], but it does not solve PMIN. In order to 
 fines a given temporal CSP A scenario of a CSP is a satisfi-  solve PMIN for a CSP over PA, in addition to enforce path-
 able refinement of where the constraints between all pairs    consistency to it, we need to identify particular 4-variable 
 of variables are basic relations. A CSP is a refinement of    constraint subsets of the path consistent CSP containing a 
   if and only if and involve the same variables, and            -constraint that should be refined to Such subsets 
 for every pair of variables (x,y) such that and are called forbidden subgraphs in Ivan Beek, 1992] and 
                      Any scenario of a satisfiable temporal   diamonds in [Gerevini and Schubert, 1995]. 
 CSP over PA (IA) identifies a total order of the point (in­     Regarding IA, several tractable fragments have been iden­
 terval endpoint) variables of the CSP that is consistent with tified. The Simple Interval Algebra (SIA) [van Beek, 1992; 
 the constraints of the scenario, and in which point (interval Ladkin and Maddux, 1988] is formed by the IA-relations that 
endpoint) variables that must have the same interpretation are can be translated into a conjunction of PA-constraints be­
 mapped to the same position. Clearly, from a we can derive    tween interval endpoints. All reasoning problems for a CSP 
a solution for the CSP by just assigning to the points (end-     over SIA can be solved by applying the corresponding al­
points) of a numbers consistent with their relative order.2    gorithms to the PA-translation of The most interesting 
   Any temporal CSP involving n variables can be pro­          tractable fragment of IA is Nebel and Biirckert's ORD-Horn 
cessed using a cubic time algorithm that refines to an equiv­  class [1995]. ORD-Horn subsumes SIA and is the unique 
alent path consistent CSP [Montanari, 1974]. A CSP is path     maximal tractable sub-algebra of IA containing all the basic 
consistent if for every subset of constraints involving three  relations. Each constraint C over ORD-Horn can be trans­
variables i, j, and k, the relation between i and A; is        lated into a set of disjunctions of PA-constraints of the form 
stronger or equal than (i.e., is a subset of) the composition  P = q. P q or p q, where p and q are endpoints of in­
of and                                                         tervals in C, and at most one literal is of type "=" or 
   A temporal CSP is minimal if, for every pair of variables   Given a temporal CSP over ORD-Horn, will denote 
i, j, the relation between i and k is the strongest relations  the CSP of PA-constraints formed by the unary disjunctions 
between i and k that is entailed by the CSP, i.e., for each basic (PA-constraints) in the point translation of all interval con­
   relation in there exists a scenario for the CSP in which    straints in  
Rij is refined to f We call the problem of computing the         Like PSAT, ISAT for ORD-Horn can be decided in cubic 
minimal CSP PMIN for PA, and IMIN for IA.                      time by using a path-consistency algorithm. ISOL for ORD-
   From a computational point of view, PA and IA have dif­     Horn can be solved in square time, if the input CSP is known 
ferent properties. The reasoning problems introduced above     to be path consistent[Gerevini and Cristani, 1997], in cubic 
are polynomial for PA, while they are NP-hard for IA [Vi-      time otherwise [Ligozat, 1996]. 
lain and Kautz, 1986]. In particular, PSAT and PSOL can be       In the rest of the paper, the incremental version of the rea­
solved in time using van Beek's method [1992], while           soning problems for a temporal CSP is indicated by adding 
PMIN requires time Ivan Beek, 1992; Gerevini and               the prefix "I" to the name of the corresponding static problem, 
Schubert, 1995]. These techniques use a graph-based repre­     e.g., the incremental version of PSOL is I-PSOL. Without 
sentation of the CSP that in [Gerevini and Schubert, 1995] is  loss of generality, we assume that the initial temporal CSP al­
called temporally labeled graph (TL-graph). A TL-graph is a    ready involves all variables, possibly constrained only by the 
graph with a set of labeled edges, where each edge connects    universal relation. Moreover, our amortized complexity anal­
a pair of distinct vertices v, w representing the point variables ysis is based on input sequences of length quadratic in the 
of the temporal CSP. The edges are either directed and la­     number of the variables. These assumptions are discussed in 
beled or or undirected and labeled (=-constraints are          an extended version of the paper [Gerevini, 2003]. 
represented by a pair of -constraints), van Beek's method 
for finding a scenario for a satisfiable CSP of PA-constrains is 3 Incremental Tractable Reasoning 
based on first identifying the strongly connected components  3.1 Path-consistency for I-PSAT and I-ISAT 
(SCC) of the TL-graph representing the CSP [Cormen et a/., 
1990] using only its -edges. Each SCC is then collapsed        Although van Beek's method for solving PSAT requires only 
into a single vertex representing an equivalent class of vari­ quadratic time, when we consider the incremental version 
ables that must be interpreted with the same temporal value.   of this problem (I-PSAT), enforcing path-consistency turns 
If we omit the -edges from the resultant graph, we obtain      out to be more efficient than a simple iterative application 
a directed acyclic graph that we call the induced precedence  of van Beek's (static) algorithm. In fact, we can use a path-
                                                              consistency algorithm like the one given in Figure 1 (PC), 
    Without loss of generality we assume that, if no information which was proposed in [Allen, 1983] and slightly reformu­
between x and y is provided, R is the universal relation, and that lated and improved in [Vilain and Kautz, 1986; Bessiere, 
for every pair of variables (x, y) such that                   1996], to incrementally process a sequence of PA-
   2E.g., we assign an integer i to the points in the first position of o, 
i + 1 to the points in the second position, etc. If we have a solution, 3A topological sort for a DAG is a linear order a of its vertices 
we can derive a total order (and hence a scenario) in a trivial way. such that if v is a successor of w in the graph, then v precedes win a. 


1284                                                                                           TEMPORAL REASONING TEMPORAL REASONING                                                                                                  1285                                                                          Figure 4: Example of revision of the topological sort T when 
                                                                         a set E of variables become equal by adding x y to  
                                                                             = Directed solid arcs represent edges in the prece-
                                                                         dence graph of before and after collapsing the variables in E to 
                                                                         x. Dashed arrows indicate the shift performed by steps 14-15 of 
                                                                         INCREMENTAL-PA-SOL. 

                                                                         be anticipated. In particular, if a variable is not added to L, 
                                                                         we can shift it backward a number of positions equal to the 
                                                                         number of items currently in L (which is given by the value of 
                                                                         shift). This is done by steps 3-8 of the subroutine, while steps 
                                                                         9-10 move forward the variables in L to the positions of T 
                                                                         that were occupied by the variables shifted backward. Notice 
                                                                         that when UPDATE-TSORT(T,X,;U) terminates, the relative 
                                                                         order of the variables that entered into L, as well as of those 
                                                                         that were shifted backward, are not changed in the revised 
                                                                         topological sort. Figure 3 shows a simple example. 
                                                                            If xRy induces new equalities (E is not empty), then the 
                                                                         variables in E, together with those possibly represented by 
                                                                         them, form an equivalence class. Step 9 collapses the ver­
                                                                         tices in the precedence graph G of corresponding to the 
                                                                         variables in E into a single representative vertex ;r, transfer­
                                                                         ring to x all incoming and outgoing edges of the collapsed 
                                                                         vertices. In order to update T, we need now to reorder the 
                                                                         variables from that have not been 
                                                                         collapsed. These variables are topologically ordered using 
                                                                         G by step 11, and assigned to T in positions from to 
                                                                                             Then, steps 13 and 14 shrinks T by shifting 
                                                                         backward the variables appearing after x in T, starting from 
                                                                         position and with a shift equal to the num­
                                                                         ber of variables (vertices) eliminated from 
                                                                         Figure 4 gives an example illustrating steps 9-15. 

    7UPDATE-TSORT is similar to a technique used by Marchetti el         Theorem 2 INCREMENTAL-PA-SOL solves I-PSOL in 
ai [1993] in the context of an algorithm for detecting cycles in a       0(n3) total time, where n is the number of temporal vari•
DAG.                                                                     ables. 


1286                                                                                                           TEMPORAL REASONING Figure 5: Types -diamonds that can be generated in by the 
new constraint x < y. Directed (undirected) edges represent 
constraints In the minimal CSP of for cases 
           should be <, for cases (3)-(4) should be  

Proof (sketch). Correctness of the algorithm follows from 
Theorem 1 and the discussion in the description of the algo­
rithm. By Theorem 1 step 1 requires total time. The 
other most costly steps are 9, 11 requiring time. They 
are performed at most times for any input sequence.  
3.3 An Algorithm for I-PMIN 
The simple use of van Beek's (static) algorithm for PMIN af­
ter each constraint assertion to solve I-PMIN requires 
total time. In this section we propose an algorithm for solv­
ing I-PMIN, INCREMENTAL-PA-MIN, requiring total 
time. This is the best possible worst-case complexity bound. 
   In order to maintain a CSP over PA minimal when a new 
PA-constraint is given, in addition to enforce path-
consistency, we need to identify and remove all possibly 
  -diamonds that are generated (see Figure 5). Since 
diamonds consist only of constraints of type and clearly 
a new constraint can generate additional -diamonds only if 
                         where is the relation between x 
and y in the minimal CSP of  

   Let be minimal CSP of ∑i_i, and ∑i of the path con­         Theorem 3 INCREMENTAL-PA-MIN solves I-PMIN in 

sistent CSP of (and 0(n4) total time, where n is the number of temporal vari•
          then the new constraint and its propagation can gen­ ables. 
erate new -constraints in It is easy to see that any new       Proof (sketch). Since the algorithm eliminates all new 
possible -diamonds in must involve one of these new            diamonds, correctness follows from Theorem 1 and fact that 
constraints. Hence, in order to make minimal, it suffices      any path consistent CSP over PA with no -diamond is mini­
to identify and eliminate all diamonds involving one of these  mal [Gerevini and Schubert, 1995] Complexity follows from 
constraints. Figure 5 shows the only four possible types of    Theorem 1 and the fact that the total number of pairs that can 
diamonds that can be generated in by the new constraint        enter into L is O(n2).  
        Note that cases (1) and (2) are symmetric and can be 
reduced to the same case (analogously for (3) and (4)).        3.4 An Algorithm for I-ISOL over ORD-Horn 
   If (and then the propagation of                             Gerevini and Cristani [1997] showed that ISOL for a path 
cannot give rise to new -constraints, and hence in order to    consistent CSP over ORD-Horn can be solved in 
make minimal, it suffices to identify and eliminate all new    time by using a solution for the -translation of Figure 7 
diamonds involving                                             gives an algorithm solving I-ISOL for which exploits this 
   Our algorithm for solving I-PMIN is given in Figure 6. It   property and uses INCREMENTAL-PA-SOL. Our algorithm 
uses a modification of IPC, called 1PC-2, which like IPC-I     requires total time, while the application from sketch 
is a revision of IPC to keep track of certain constraints gen­ of a known static algorithm each time a new constraint is as­
erated by the propagation of xRy. IPC-2 adds all pairs of      serted requires total time. This cost can be reduced 
variables whose relation has been refined to to a list         to 0(n4) total time by using IPC combined with Gerevini & 
L. L is a global variable that is initialized by steps 1-2 of  Cristani's algorithm, which is still one order worse than the 
INCREMENTAL-PA-MIN to the list containing either (x,y),        complexity of the algorithm presented here. 
(y, x) or no pair. A pair of variables is added to L by the      Our algorithm uses a modification of IPC, called IPC-3, 
subroutine REVISE-2 of IPC-2, a modification of REVISE in      which again is a revision of IPC to keep track of certain con­
which after step 4 we perform the following additional steps   straints generated by the propagation of the new input con­
to update L:                                                   straint Given the path consistent CSPof the  


TEMPORAL REASONING                                                                                                   1287 