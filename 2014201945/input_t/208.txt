    Applying interchangeability techniques to the distributed breakout algorithm 

                                          Adrian Petcu and Boi Faltings 
                                        {adrian.petcu, boi.faltings}@epfl.ch 
                                          Artificial Intelligence Laboratory 
                                       Swiss Federal Institute of Technology 
                                 IN (Ecublens), CH-1015 Lausanne, Switzerland 


                        Abstract                                 We analyzed these phenomena, and drew the conclusion 
                                                               that using interchangeability techniques, one can determine 
     This paper presents two methods for improving the         what values from the local domain will not cause such conflict 
     performance of the Distributed Breakout Algorithm         propagations, and use one of those values as the next variable 
     using the notion of interchangeability. In particular,    assignment. In this way, we look for a "local resolution" to all 
     we use neighborhood partial and full interchange-         conflicts, in the sense that we keep them contained as much 
     ability techniques to keep conflicts localized and        as possible, and only involve "external parties" when there is 
     avoid spreading them to neighboring areas.                no other way. 
     Our experiments on distributed sensor networks              We discovered that techniques based on interchangeability 
     show that such techniques can significantly reduce        [Freuder , 1991] (both neighborhood partial and/w// inter•
     the number of cycles required to solve the prob•          changeability [Choueiry et al, 1998]) can improve the per•
     lems (therefore also reduce communication and             formance of this algorithm. 
     time requirements), especially on difficult prob•
     lems. Moreover, the improved algorithms are able          2 Preamble 
     to solve a higher proportion of the test problems. 
                                                               Problem description and formalization 
                                                                 The distributed sensor network problem ([Gomes et al, 
1 Introduction                                                 2002]) consists of a sensor field composed of n sensors, and 
Distributed Constraint Satisfaction (DisCSP) is a powerful     m targets to be tracked. Each sensor has its own visibility 
paradigm applicable for a wide range of coordination and       range. The sensors can communicate among themselves, but 
problem solving tasks in distributed artificial intelligence.  not necessarily every sensor with every other sensor. 
   Among the distributed algorithms that were developed for      Some restrictions apply: 3 sensors have to be assigned to 
this kind of problems ([Yokoo et al., 1998]), the Distributed  each target, and they must be able to communicate among 
Breakout Algorithm (DBA) received quite some interest (e.g.    themselves; each sensor can only track one target at a time. 

[Zhang et al.y 2002]) because of a number of properties that     In our approach, one agent corresponds to a target; each 
this algorithm exhibits (simple, efficient, low overhead, linear agent has 3 local variables (the sensors to be assigned to each 
memory requirements, good anytime characteristics).            target), and the domain of each variable is the set of sensors 
   DBA is an extension of the original centralized Breakout    that can track the respective target. 
Algorithm ([Morris, 1993]). This algorithm is a local search     There are two types of constraints: intra-agent constraints 
method, with an innovative technique for escaping from local   (the variables belonging to one agent must be assigned to dif•
minima: the constraints have weights, which are dynamically    ferent sensors, and the sensors assigned to one agent must 
increased to force the agents to adjust their values while in a have a communication link between themselves), and inter-
local minimum. During the execution of the algorithm, each     agent constraints (no 2 variables from any 2 agents can be 
agent proposes improvements to the current state by changing   assigned the same value - a sensor can track a single target) 
it's variable value such that the cost of violated constraints is Interchangeability background 
decreased as much as possible.                                   The concept of interchangeability informally means equiv•
   While having the interesting properties that we enumerated  alence between values of a CSP variable: 
above, local search algorithms also have a common problem: 
                                                                 • Neighborhood Interchangeability: 2 values a and b of a 
choosing indiscriminately between the possible values of the 
                                                                    variable Vi are A7 if they are equivalent for every con•
local variable (only considering the cost of the immediate 
                                                                    straint involving V ; 
constraint violations) can lead to "chain-reactions" (one con•                        i
flict originating in one part of the constraint graph needlessly • Neighborhood Partial Interchangeability: a weaker 
propagates throughout the whole graph, only to (hopefully)          form of NI, defined for a subset of values from the lo•
be resolved in a completely different part of the graph).           cal domain with respect to a set of neighbors, where the 


POSTER PAPERS                                                                                                        1381                                                                            For small numbers of targets, all the algorithms performed 
                                                                         well; the differences increased with the problem difficulty, 
                                                                         and peaked at 130 targets (most difficult problems), where 
                                                                         NPI-DBA solved more than 70% of the problems, whereas 
                                                                         Standard-DBA solved less than 50% (see Figure 1) Both the 
                                                                        average number of rounds and the solving time for standard 
                                                                        DBA are bigger than those for NPI-DBA, and close to the 
                                                                        ones of Nl-DBA. We see in Figure 2 that for difficult prob•
                                                                        lems, the number of required rounds for NPI-DBA is about 
                                                                        40% smaller than the one of Standard DBA. A similar dia•
                                                                        gram for the time is available, but not included here. 
           Figure 1: Percentage of solved problems                         We developed a visual interface that allows us to monitor 
                                                                        the solving process, thus giving us clear indications that using 
                                                                        the strategies based on NI/NPI greatly inhibits the propaga•
                                                                        tion of conflicts around the constraint graph. 
                                                                           The initialization of the variables was random, as in Stan•
                                                                        dard DBA, in order to keep the algorithms comparable, and 
                                                                        see the improvements that the search strategy brings. Initial•
                                                                        ization with values from the Nl-sets yields even larger im•
                                                                        provements, leading us to believe that both the "informed" 
                                                                        initialization of the variables and the subsequent search strat•
                                                                        egy play a role in the performance of the algorithm. 
                                                                           Overall, our results have shown that NPI-DBA is much bet•
                                                                        ter than NI-DBA. This is due to the fact that in dense prob•
 Figure 2: Average no. of rounds spent on each problem size             lems, there is usually little or no NI at all, whereas NPI, being 
                                                                        a weaker form of Nl is still computable. 
      impact of the change of the local variable is limited to          5 Conclusions and future work 
      the reference set of neighbors. 
                                                                        The techniques presented here can be easily generalized be•
3 Algorithms                                                            yond inequality constraints and resource allocation problems. 
                                                                           NPI-DBA clearly outperforms standard DBA for difficult 
Due to lack of space, we will present here only a high-level            problems, and NI-DBA shows comparable performance. Fur•
overview of the algorithms that we developed.                           ther speedups can be obtained with "informed" initializations, 
   NI-DBA: the idea is that if we find the Nl-sets for the local        based on the Nl data available after the preprocessing phase. 
variables, we can safely assign values from those sets, being              Further improvements could also be obtained by allow•
certain this won't cause any conflicts with the neighboring             ing multiple simultaneous changes of the local variables at 
agents. The Nl-sets are determined during the pre-processing            each step, and by trying a hierarchical approach, where cer•
phase, based on the domains of the neighbors, and are used              tain agents are delegated as "local authorities" for solving a 
at runtime like this: if an agent has a conflict with a neighbor,       particularly difficult local problem. It would be interesting to 
it will search for an improvement in it's local domain giving           study in more detail the scalability of these algorithms. 
preference to the values from the Nl-set. This avoids any fu•
ture conflicts with any neighbor.                                       References 
   NPI-DBA: the NPl-sets are computed at runtime, w.r.t. the            [Freuder, 1991] Eugene C. Freuder 'Eliminating interchangeable 
set of the neighbors that we already have conflicts with. When             values in CSPs' In Proc. of AAAI 1991 
searching for a local improvement, we give preference to the 
                                                                        [Zhang et al, 2002] Weixiong Zhang and Lars Wittenburg Dis•
values from the NPI-sets, thus not risking to cause future con•
                                                                           tributed Breakout Revisited. In Proc. of AAAI 2002 
flicts with neighbors that are not already involved, therefore 
                                                                        [Gomes et al, 2002] Carla Gomes, Cesar Fernandez, Ramon Bc-
keeping conflicts contained. 
                                                                           jar Communication and Computation in DisCSP Algorithms. In 
                                                                           Proc. of CP-2002, Ithaca, New York, USA 
4 Evaluation                                                            [Choueiry et al., 1998] Berthe Choueiry and G. Noubir: On the 
                                                                           Computation of Local lnterchangeability in Discrete Constraint 
We made our evaluations in these settings: a sensor field with 
                                                                           Satisfaction Problems. In Proc. of AAAI-98. 
400 sensors in total, and randomly generated solvable prob•
lems with 40, 60, 80, 100, 110,115, 120, 125 and 130 simul•             [Morris , 1993] Morris, P. The breakout method for escaping from 
                                                                           local minima. In Proceedings of the Eleventh National Confer•
taneous targets(meaning three times as many variables). 
                                                                           ence on Artificial Intelligence, 40-45 
   We collected these results: problem solved/not solved (a 
problem is declared unsolved after the number of cycles                 [Yokoo et al., 1998] Makoto Yokoo The Distributed Constraint 
                                                                           Satisfaction Problem: Formalization and Algorithms. IEEE 
reaches a threshold of 50000 cycles), and solving effort (time 
                                                                           Trans, on Knowledge and Data Engineering 
spent and number of cycles required). 


1382                                                                                                                   POSTER PAPERS 