                     Conditional Planning in the Discrete Belief Space

                                            Jussi Rintanen∗
                      Albert-Ludwigs-Universitat¨  Freiburg, Institut fur¨ Informatik
                           Georges-Kohler-Allee,¨ 79110 Freiburg im Breisgau
                                                Germany


                    Abstract                          al., 2000]. A second approach which has been pursued
                                                      with algorithms for conditional planning [Weld et al., 1998;
    Probabilistic planning with observability restric- Bonet and Geffner, 2000; Bertoli et al., 2001], ignores prob-
    tions, as formalized for example as partially ob- abilities and hence directly yields a ﬁnitary problem. Main
    servable Markov decision processes (POMDP), has   decision problems related to non-probabilistic planning with
    a wide range of applications, but it is computation- partial observability are 2-EXP-complete [Rintanen, 2004a].
    ally extremely difﬁcult. For POMDPs, the most       A main difference between POMDPs and corresponding
    general decision problems about existence of poli- non-probabilistic problems is that the latter do not use proba-
    cies satisfying certain properties are undecidable. bilistic notions like success probability or expected cost, and
    We consider a computationally easier form of plan- require that a plan must reach the goals with certainty. An
    ning that ignores exact probabilities, and give an al- implication of success probability 1 is that uncertainty about
    gorithm for a class of planning problems with par- observations and sensing can be ignored: if an observation is
    tial observability. We show that the basic backup correct with a probability strictly less than 1 then it is as good
    step in the algorithm is NP-complete. Then we pro- as no observation at all.
    ceed to give an algorithm for the backup step, and  For this planning problem we present an iterative algorithm
    demonstrate how it can be used as a basis of an ef- that has some resemblance to iterative algorithms for solving
    ﬁcient algorithm for constructing plans.          POMDPs. The algorithm maintains a data structure repre-
                                                      senting those belief states for which a conditional plan has
1  Introduction                                       been shown to exist. Initially this data structure represents
                                                      those belief states consisting of goal states only. Then this
When the sequence of states that will be visited during plan data structure is repeatedly extended by performing search
execution cannot be exactly predicted, for example because of backwards from the goal belief states.
nondeterminism, it is necessary to produce plans that apply The structure of the paper is as follows. Section 2 deﬁnes
different actions depending on how the plan execution has the planning problem. Sections 3 and 4 respectively describe
proceeded so far. Such plans are called conditional plans. the formal framework and analyze its properties. Section 5
  Construction of conditional plans is particularly difﬁcult proposes a planning algorithm and Section 6 presents exper-
when there is no full observability; that is, when during plan imental results obtained with an implementation of the algo-
execution it is not possible to uniquely determine what the rithm. Section 7 concludes the paper.
current state of the world is. Planning problems having this
property are said to be partially observable, and their solution
requires that the sets of possible current world states – the be- 2 The Planning Problem
lief states – are (implicitly) maintained during plan execution In this section we present a formalization of planning in
and (implicitly) represented by a plan.               which states are atomic objects without internal structure.
  The earliest work on planning with partial observability
was in the framework of partially observable Markov decision
processes (POMDPs) [Smallwood and Sondik, 1973; Kael- Deﬁnition 1 A problem instance is hS, I, O, G, P i where S
bling et al., 1998]. Planning with POMDPs is computation- is the set of states, I ⊆ S is the set of initial states, O
ally difﬁcult. For unbounded horizon lengths an unbounded is the set of actions o ⊆ S × S, G ⊆ S is the set of
number of probability distributions corresponding to belief goal states and P = (C1, . . . , Cn) is a partition of S into
                                                      classes of observationally indistinguishable states satisfying
states needs to be considered, and ﬁnding optimal plans is not S
in general solvable [Madani et al., 1999]. A natural approach {C1, . . . , Cn} = S and Ci ∩ Cj = ∅ for all i, j such that
for easing the computational difﬁculty of POMDP planning 1 ≤ i < j ≤ n.
is to consider horizons of a bounded length [Mundhenk et
                                                        Making an observation tells which set Ci the current state
  ∗
   This research was partly supported by DFG grant RI 1177/2-1. belongs to. Distinguishing states in a given Ci is not possible.  An action is a relation between states and their successor a block cannot be moved nothing happens. Initially we only
states. An action o is applicable in a state s if sos0 for some have the empty plan for the goal states.
 0
s ∈ S. Deﬁne the image of a set B of states with respect to an                          A   B    C
                      0             0                                 A B   A C   B C   ?    ?   ?
action o as imgo(B) = {s ∈ S|s ∈ B, sos }. The preimage
                                                              A B C   ? ?   ? ?   ? ?   ?    ?   ?
is preimgo(B) = {s ∈ S|∅= 6 imgo({s}) ⊆ B}, consisting
of those states from which o is guaranteed to reach a state in A B C
B. An action o is deterministic if it is a partial function.
  Plans are directed graphs with two kinds of nodes: action Then we compute the preimages of this set with actions
nodes and observation nodes.                          that respectively put the blocks A, B and C onto the table, and
                                                      split the resulting sets to the different observational classes.

Deﬁnition 2 Let hS, I, O, G, (C1, . . . , Cn)i be a problem in-                            A   B  C
                                                                           A B  A C   B C  ?   ?   ?
stance. A plan is a triple hN, b, li where                           A B C  ? ?  ? ?  ? ?  ?   ?   ?

  • N is a ﬁnite set of nodes,                                       A B C A    A
                                                                           C B  B C

  • b ∈ N is the initial node,                             preimage of A−onto−table
                      S                                    preimage of B−onto−table B B
                     2 ×N                                                  A C        A C
  • l : N → (O×N)∪2       is a function that assigns each  preimage of C−onto−table
    node an action and a successor node ho, ni ∈ O × N
                                              2S ×N                               C    C
    or a set of states and successor nodes hC, ni ∈ 2                           A B   B A
              S   0      0             0      0
    where C =   {C1, . . . , Cm} for some {C1, . . . , Cm} ⊆
    {C1, . . . , Cn}. In the ﬁrst case the node is an action Now for these 7 belief states we have a plan consisting of
    node and in the second an observation node.       one or zero actions. But we also have plans for sets of states
    For all n ∈ N and {hC, mi, hC0, m0i} ⊆ l(n) the ob- that are only represented implicitly. These involve branching.
    servations C and C0 may not intersect: C ∩ C0 = ∅. For example, we have a plan for the state set consisting of the
    Nodes with l(n) = ∅ are terminal.                 four states in which respectively all blocks are on the table,
                                                      A is on C, A is on B, and B is on A. This plan ﬁrst makes
  We restrict to acyclic plans. Acyclicity means that the observations and branches, and then executes the plan asso-
graph hN, Ei, where hn, n0i ∈ E iff l(n) = ho, n0i for some ciated with the belief state obtained in each case. Because 3
o or hC, n0i ∈ l(n) for some C, is acyclic.1          observational classes each have 2 belief states, there are 23
  Plan execution starts from the initial node b and any of the maximal state sets with a branching plan. From each class
initial states. For an action node with label ho, ni in state s only one belief state can be chosen because observations can-
execute o and continue from n and a state in imgo(s). For an not distinguish between belief states in the same class.
observation node identify hC, ni in the node label so that s ∈ We can ﬁnd more belief states that have plans by comput-
C, and then continue from n and s. A plan solves a problem ing preimages of existing belief states. Let us choose the be-
instance if all of its executions terminate in a terminal node lief states in which respectively all blocks are on the table, B
and a goal state. Execution of an acyclic plan can have at is on C, C is on B, and C is on A, and compute their union’s
most as many steps as there are nodes in the plan.    preimage with A-onto-table. The preimage intersected with
                                                      the observational classes yields new belief states: for the class
3  Problem Representation                             with A and B clear there is a new 2-state belief state covering
                                                      both previous belief states in the class, and for the class with
Now we introduce the representation for sets of state sets for A clear there is a new 2-state belief state.
which a plan for reaching goal states exists.
                                                                                        A   B    C
  In the following example states are viewed as valuations            A B   A C   B C   ?    ?   ?
of state variables, and the observational classes correspond to A B C ? ?   ? ?   ? ?   ?    ?   ?

valuations of those state variables that are observable.      A B C   A     A           A
                                                                      C B   B C         B
                                                                                        C
Example 3 Consider the blocks world with the state vari-               B
                                                                      A C               A
                                                                                  B
ables clear(X) observable, allowing to observe the top-                                 C
                                                                                  A C
most block of each stack. With three blocks there are                                   B
7 observational classes because there are 7 valuations of                    C     C
{clear(A), clear(B), clear(C)} with at least one block clear.               A B   B A
  Consider the problem of trying to reach the state in which
all blocks are on the table. For each block there is an action Computation of further preimages yields for each observa-
for moving it onto the table from wherever it was before. If tional class a belief state covering all the states in that class,
                                                      and hence a plan for every belief state.         
  1Construction of cyclic plans requires looking at more global
properties of transition graphs than what is needed for acyclic plans. The above example shows how the exponential number of
The difﬁculties of cyclic plans in our framework are similar to those state sets (corresponding to the Cartesian product of the ob-
in the MDP/POMDP framework when using average rewards in- servational classes) considered by Rintanen [2002] is repre-
stead of ﬁnite horizons or discounted rewards [Puterman, 1994]. sented only implicitly. The algorithm by Rintanen [2002] ex-plicitly generates the state sets, the number of which in many Theorem 7 Testing if for belief space G there is R ∈ ﬂat(G)
                                                                               0        0
cases is very high. With the new representation the computa- such that preimgo(R) 6⊆ R for all R ∈ ﬂat(G) is NP-
tional complexity is shifted from the size of the representation complete. This holds even for deterministic actions o.
to the time it takes to ﬁnd a combination of belief states hav-
ing a useful preimage. This shift is useful for two reasons. Proof: Membership is easy: For G = hG1, . . . , Gni choose
First, much of the space complexity (and the time complexity nondeterministically Ri ∈ Gi for every i ∈ {1, . . . , n}, com-
it implies) is traded to time complexity only: the state sets are pute R = preimgo(R1 ∪· · ·∪Rn), and verify that R∩Ci 6⊆ B
not represented explicitly (except in the unobservable special for some i ∈ {1, . . . , n} and all B ∈ Gi. Each of these steps
case.) Second, the succinct representation allows much better takes only polynomial time.
control on which belief states to produce, and although ﬁnd- Let T = {c1, . . . , cm} be a set of clauses over propositions
ing one new belief state and plan still takes worst-case expo- A = {a1, . . . , ak}. We deﬁne a belief space based on states
nential time, this may be performed by clever algorithms and {a1, . . . , ak, aˆ1, . . . , aˆk, z1, . . . , zk, zˆ1, . . . , zˆk}. The states aˆ
be further sped up by heuristics.                     represent negative literals. Deﬁne
  Next we formalize the framework in detail.            0
                                                       ci  =   (A\ci) ∪ {aˆ|a ∈ A, ¬a 6∈ ci} for i ∈ {1, . . . , m},
                                                                 0      0
                                                       G   =   h{c , . . . , c }, {{z1}, {zˆ1}}, . . . , {{zk}, {zˆk}}i ,
Deﬁnition 4 (Belief space) Let P = (C , . . . , C ) be a par-    1      m
                                 1      n               o  =   {hai, zii|1 ≤ i ≤ k} ∪ {haˆi, zˆii|1 ≤ i ≤ k}.
tition of the set of all states. Then a belief space is an n-tuple
                         Ci
hG1, . . . , Gni where Gi ⊆ 2 for all i ∈ {1, . . . , n} and We claim that T is satisﬁable if and only if there is B ∈
      0                           0                                                0       0
B 6⊂ B for all i ∈ {1, . . . , n} and {B, B } ⊆ Gi.   ﬂat(G) such that preimgo(B) 6⊆ B for all B ∈ ﬂat(G).
                                                        Assume  T is satisﬁable, that is, there is M such that
  Notice that in each component of a belief space we only               0
                                                      M  |= T . Deﬁne M  =  {zi|ai ∈ A, M |= ai} ∪ {zˆi|ai ∈
have set-inclusion maximal belief states. The simplest belief            0
                                                      A, M  6|= ai}. Now M ⊆ B for some B ∈ ﬂat(G) because
spaces are obtained from sets B of states as B(B) = h{C ∩                                            00
                                                1     from each class only one of {zi} or {zˆi} is taken. Let M =
B}, . . . , {Cn ∩ B}i. A belief space is extended as follows.   0
                                                      preimgo(M  ) = {ai ∈ A|M |= ai} ∪ {aˆi|ai ∈ A, M 6|= ai}.
                                                      We show that M 00 6⊆ B for all B ∈ ﬂat(G). Take any
Deﬁnition 5 (Extension) Let P = (C1, . . . , Cn) be the par- i ∈ {1, . . . , m}. Because M |= ci, there is aj ∈ ci ∩ A such
tition of all states, G = hG1, . . . , Gni a belief space, and T a that M |= aj (or ¬aj ∈ ci, for which the proof goes simi-
set of states. Deﬁne G⊕T as hG1 d(T ∩C1), . . . , Gn d(T ∩             0                   00          0
                                                      larly.) Now zj ∈ M , and therefore aj ∈ M . Also, aj 6∈ cj.
Cn)i where the operation d adds the latter set of states to the
                                                      As there is such an aj (or ¬aj) for every i ∈ {1, . . . , m},
former set of sets of states and eliminates sets that are not set- M 00       c0          M 00 6⊆ B
                           d                              is not a subset of any i, and hence      for all
inclusion maximal, deﬁned as U V = {R ∈ U ∪ {V }|R 6⊂ B ∈ ﬂat(G).
K for all K ∈ U ∪ {V }}.
                                                        Assume there is B ∈ ﬂat(G) such that D = preimgo(B) 6⊆
                                                      B0 for all B0 ∈ ﬂat(G). Now D is a subset of A ∪ {aˆ|a ∈ A}
  A belief space G = hG1, . . . , Gni represents the set of
                                                      with at most one of ai and aˆi for any i ∈ {1, . . . , k}. Deﬁne
sets of states ﬂat(G) = {B1 ∪ · · · ∪ Bn|Bi ∈ Gi for all i ∈
{1, . . . , n}} and its cardinality is |G | · |G | · . . . · |G |. a model M such that for all a ∈ A, M |= a if and only if
                              1    2        n         a ∈ D. We show that M  |= T . Take any i ∈ {1, . . . , m}
                                                      (corresponding to a clause.) As D 6⊆ B for all B ∈ ﬂat(G),
4  Complexity of Basic Operations                            0                             0
                                                      D  6⊆ ci. Hence there is aj or aˆj in D\ci. Consider the
The basic operations on belief spaces needed in planning al-                                0
                                                      case with aj (aˆj goes similarly.) As aj 6∈ ci, aj ∈ ci. By
gorithms are testing the membership of a set of states in a deﬁnition of M, M |= aj and hence M |= ci. As this holds
belief space, and ﬁnding a set of states whose preimage with for all i ∈ {1, . . . , m}, M |= T .      
respect to an action is not contained in the belief space. Next
we analyze the complexity of these operations.
                                                      5   Planning Algorithms
Theorem 6 For belief spaces G and state sets B, testing Based on the problem representation in the preceding section,
                0                        0
whether there is B ∈ ﬂat(G) such that B ⊆ B , and com- we devise a planning algorithm that repeatedly identiﬁes new
puting G ⊕ B takes polynomial time.                   belief states (and associated plans) until a plan covering the
                                                      initial states is found. The algorithm in Figure 2 tests for
Proof: Idea: A linear number of set-inclusion tests sufﬁces.
                                                     plan existence; further book-keeping is needed for outputting
                                                      a plan. The size of the plan is proportional to the number of it-
  Our algorithm for extending belief spaces by computing erations the algorithm performs, and outputting the plan takes
the preimage of a set of states (Lemma 8) uses exhaustive polynomial time in the size of the plan. The algorithm uses
search and runs in worst-case exponential time. This asymp- the subprocedure ﬁndnew (Figure 1) for extending the belief
totic worst-case complexity is very likely the best possible space (this is the NP-hard subproblem from Theorem 7). Our
because the problem is NP-hard. Our proof for this fact is a implementation of the subprocedure orders sets f1, . . . , fm
reduction from SAT: represent each clause as the set of liter- by cardinality in a decreasing order: bigger belief states are
als that are not in it, and then a satisfying assignment is a set tried ﬁrst. We also use a simple pruning technique for deter-
of literals that is not included in any of the sets, corresponding ministic actions o: If preimgo(fi) ⊆ preimgo(fj) for some i
to the same question about belief spaces.             and j such that i > j, then we may ignore fi.PROCEDURE   ﬁndnew(o,A,F ,H);                           The second lemma says that if we have belief states in dif-
IF F = hi AND preimgo(A) 6⊆ B for all B ∈ ﬂat(H)      ferent observational classes such that each is included in a
THEN RETURN   A;                                      belief state of a belief space H, then there is a set in ﬂat(H)
IF F = hi THEN RETURN  ∅;                             that includes all these belief states.
F is h{f1, . . . , fm}, F2, . . . , Fki for some k ≥ 1;
FOR i := 1 TO m DO
                                                      Lemma 10   Let B , . . . , B be sets of states so that for every
  B  := ﬁndnew(o,A ∪ f ,hF , . . . , F i,H);                         1      n
                     i  2      k                      i ∈ {1, . . . , n} there is B0 ∈ ﬂat(H) such that B ⊆ B0, and
  IF B 6= ∅ THEN RETURN  B;                                                i                   i    i
                                                      there is no observational class C such that for some {i, j} ⊆
END;
                                                      {1, . . . , n} both i 6= j and Bi ∩C 6= ∅ and Bj ∩C 6= ∅. Then
RETURN  ∅                                                     0                                  0
                                                      there is B ∈ ﬂat(H) such that B1 ∪ · · · ∪ Bn ⊆ B .
     Figure 1: Algorithm for ﬁnding new belief states   The proof of the next theorem shows how the algorithm
                                                      is capable of ﬁnding any plan by constructing it bottom up
PROCEDURE   plan(I,O,G);                              starting from the leaf nodes. The construction is based on
H := B(G);                                            ﬁrst assigning a belief state to each node in the plan, and then
progress := true;                                     showing that the algorithm reaches that belief state from the
                       0      0
WHILE  progress and I 6⊆ I for all I ∈ ﬂat(H) DO      goal states by repeated computation of preimages.
  progress := false;
             o ∈ O
  FOR EACH        DO                                  Theorem 11  Whenever there exists a ﬁnite acyclic plan for a
    B           o ∅ H H
       := ﬁndnew( , , , );                            problem instance, the algorithm in Figure 2 returns true.
    IF B 6= ∅ THEN
      BEGIN                                           Proof: Assume there is a plan hN, b, li for a problem instance
         H := H ⊕ preimgo(B);                         hS, I, O, G, P i. Label all nodes of the plan as follows. The
         progress := true;                            root node b is labeled with I, that is, Z(b) = I. When all
      END;                                            parent nodes of a node n have a label, we assign a label to n.
  END;                                                Let l(n1) = ho1, ni, . . . , l(nm) = hom, ni for action nodes
END;                                                                                                0
                                                      n1, . . . , nm that have n as the child node, and let l(n1) =
IF I ⊆ I0 for some I0 ∈ ﬂat(H) THEN RETURN true                          0
                                                      {hC1, ni, . . .}, . . . , l(nk) = {hCk, ni, . . .} for all observation
ELSE RETURN  false;                                          0     0
                                                      nodes n1, . . . , nk with n as one of the children. Then Z(n) =
                                                           (Z(n )) ∪ · · · ∪  (Z(n  )) ∪ (Z(n0 ) ∩ C ) ∪ · · · ∪
                                                      imgo1     1       imgom     m         1    1
 Figure 2: Algorithm for planning with partial observability 0
                                                      (Z(nk) ∩ Ck). If the above labeling does not assign anything
                                                      to a node n, then assign Z(n) = ∅. Each node is labeled with
Lemma 8  Let H be a belief space and o an action. The pro- those states that are possible in that node on some execution.
cedure call ﬁndnew(o,∅,F, H) returns a set B0 of states such We show that if plans for Z(n1), . . . , Z(nk) exist, where
     0                                      0    00   n1, . . . , nk are children of a node n in a possible plan, then
that B = preimgo(B) for some B ∈ ﬂat(F ) and B 6⊆ B
for all B00 ∈ ﬂat(H), and if no such belief state exists it re- the algorithm determines that a plan for Z(n) exists as well.
turns ∅.                                                Induction hypothesis: For each plan node n such that all
                                                      paths to a terminal node have length i or less, its label B =
                                                      Z(n)                  B0 ∈   (H)       H
Proof: Sketch:  The procedure goes through the ele-        is a subset of some  ﬂat    where   is the value
                                                      of the program variable H after the while loop exits and H
ments hB1, . . . , Bni of F1 × · · · × Fn and tests whether
preimg (B ∪ · · · ∪ B ) is in H. The sets B ∪ · · · ∪ B are could not be extended further.
      o  1        n                  1        n                  i = 0
the elements of ﬂat(F ). The traversal through F × · · · × F Base case : Terminal nodes of the plan are labeled
                                        1        n                 G                    G0        G ⊆  G0
is by generating a search tree with elements of F as children with subsets of . By Lemma 9, there is such that
                                        1             and G0 ∈ ﬂat(H) because initially H = B(G) and thereafter
of the root node, elements of F2 as children of every child of
the root node, and so on, and testing whether the preimage is it was repeatedly extended.
                                                        Inductive case i ≥ 1: Let n be a plan node. By the induc-
in H. The second parameter of the procedure represents the                        0        0
state set constructed so far from the belief space, the third pa- tion hypothesis for all children n of n, Z(n ) ⊆ B for some
rameter is the remaining belief space, and the last parameter B ∈ ﬂat(H).
is the belief space that is to be extended, that is, the new belief If n is an observation node with children n1, . . . , nk and
state may not belong to it.                          respective observations C1, . . . , Ck, then Z(n) ∩ C1, . . .,
                                                      Z(n) ∩ Ck all occupy disjoint observational classes and su-
  The correctness proof of the procedure plan consists of the perset of Z(n) ∩ Ci for every i ∈ {1, . . . , k} is in ﬂat(H).
following lemma and theorems. The ﬁrst lemma simply says Hence by Lemma 10 Z(n) ⊆ B for some B ∈ ﬂat(H).
                                                                                                        0
that extending a belief space H is monotonic in the sense that If n is an action node with action o and child node n ,
                                                                            0
the members of ﬂat(H) can only become bigger.         then imgo(Z(n)) ⊆ Z(n  ), and by the induction hypothe-
                                                      sis Z(n0) ⊆ B0 for some B0 ∈ ﬂat(H). We have to show that
                                                      Z(n) ⊆  B00 for some B00 ∈ ﬂat(H). Assume that there is
Lemma 9  Assume T is any set of states and B ∈ ﬂat(H). no such B00. But now by Lemma 8 ﬁndnew(o,∅,H,H) would
             0                         0                     000                 000
Then there is B ∈ ﬂat(H ⊕ T ) so that B ⊆ B .         return B such that preimgo(B ) 6⊆ B for all B ∈ ﬂat(H),and the while loop could not have exited with H, contrary to                   runtime in seconds iterations
our assumption about H.                                 problem          |S|   MBP     BBSP      BBSP
                                                         BTCS1601         98     0.60     1.21      32
                                                         BTCS1701        104     0.79     1.38      34
                                                         BTCS1801        110     1.01     2.08      36
Theorem 12 Let Π = hS, I, O, G, P i be a problem instance. BTCS1901      116     1.22     2.28      38
If plan(I,O,G) returns true, then Π has a solution plan. BTCS2001        122     1.44     2.52      40
                                                         medical18       148     7.34     2.49      21
Proof: Let H0, H1, . . . be the sequence of belief spaces H medical20    164    24.13     2.91      23
produced by the algorithm. We show that for all i ≥ 0, for medical22     180    60.53     3.48      25
every B ∈ ﬂat(Hi) there is a plan that reaches G.        medical24       196   > 20 m     4.11      27
  Induction hypothesis: Hi contains only such state sets B ∈ medical26   212   > 20 m     6.61      29
ﬂat(Hi) for which a plan reaching G exists.              emptyroom07      49     0.09     0.38      41
                                                         emptyroom08      64     0.12     0.63      53
  Base case i = 0: H0 = B(G), and the only state set in H0
is G. The empty plan reaches G from G.                   emptyroom10     100     0.16     1.56      81
                                                         emptyroom15     225     0.37     9.60     198
  Inductive case i ≥ 1: Hi+1 is obtained as Hi⊕preimgo(B) emptyroom20    400     0.62    25.58     243
where B = ﬁndnew(o,∅,Hi,Hi).                             ring03          162     0.09     0.16      11
  Because by Lemma 8 B ∈ ﬂat(Hi), by induction hypothe-  ring04          648     0.38     0.44      19
sis there is a plan π for B. The plan that executes o followed ring05   2430     1.99     1.03      23
by π reaches G from preimgo(B).                          ring06         8748    13.12     1.63      27
  Let B be any member of ﬂat(Hi+1). We show that for B   ring07        30618    94.73     2.41      31
there is a plan for reaching G. The plan for B starts by a ring08      104976  744.90     3.34      35
branch2. We show that for every possible observation, cor- ring09      354294  > 20 m     5.55      39
responding to one observational class, there is a plan that ring10    1180980  > 20 m     7.06      43
reaches G. Let C be the jth observational class. When ob- BW03fo          13    32.64     0.14       9
              j                                          BW04fo           73   > 20 m     0.67      22
serving Cj, the current state is in Bj = B ∩ Cj. Now for
           0                    0                        BW05fo          501   > 20 m     6.43      46
Bj there is Bj ∈ Hi+1,j with Bj ⊆ Bj where Hi+1,j is the BW06fo         4051   > 20 m   133.14      64
jth component of Hi+1. Now by induction hypothesis there BW03pfo          13     0.13     0.12       9
             0    0                0
is a plan for Bj if Bj ∈ Hi,j, and if Bj ∈ Hi+1,j\Hi,j,  BW04pfo          73    90.15     0.69      22
then for the branch corresponding to Cj we use the plan for BW05pfo      501   > 20 m     6.29      46
               0                                 
preimgo(B), as Bj must be preimgo(B) ∩ Cj.               BW06pfo        4051   > 20 m   133.88      64
                                                         BW03po           13     0.08     0.12       9
  Until now we have used only one partition of the state BW04po           73     0.71     0.64      22
space to observational classes. However, it is relatively BW05po         501    13.49     6.41      46
straightforward to generalize the above deﬁnitions and algo- BW06po     4051   394.21   198.85      64
rithms to the case in which several partitions are used, each
for a different set of actions. This means that the possible Table 1: Runtime comparison BBSP vs. MBP
observations depend on the action that has last been taken.

6  Experimentation with an Implementation               Some of the MBP runtimes given by Bertoli et al. [2001]
                                                      are much better than given by us in this paper (speciﬁcally on
We have implemented the algorithm from the previous sec- the medical and ring problems) because the branching heuris-
tion and call the resulting planning system BBSP. The only tic used by Bertoli et al. works well on their formulations of
heuristic is the one described in the preceding sections: ﬁnd- the benchmarks: branch only on one observable state variable
new chooses bigger belief states ﬁrst. The implementa- if possible. We used a slightly different formulation where
tion is based on representing sets of states and actions as one many-valued observation is replaced by a small number
      [               ]
BDDs  Burch et al., 1994 . There is a small improvement of Boolean observations.
in the belief space representation with BDDs: all components
of a belief space consisting of one belief state only are repre- Runtimes of the planners are given in Table 1. The runs
sented by one BDD.                                    were on a 360 MHz Sun Sparcstation under Solaris. The
                                                      problem instances are the same as in [Rintanen, 2002] where
  We carried out a comparison to the MBP planner [Bertoli
                                                      MBP was shown in almost all cases to be faster than GPT
et al., 2001] which uses forward-search together with some
                                                      [Bonet and Geffner, 2000] and much faster than the YKA¨
heuristics for restricting branching. MBP starts search from
                                                      planner [Rintanen, 2002] on most of the problems except the
the initial states, and proceeds forward by taking actions,
                                                      blocks worlds problems with full or almost full observability.
leading to another set of states, or by using observations to
                                                      BTCS is the bomb-in-the-toilet problem with sensing. In the
split the current state set to several smaller ones. Different
                                                      medical problems patients are cured by performing tests and
choices of actions and observations induce a search tree.
                                                      medicating. The emptyroom problems are about navigating
  2Some branches might not be needed, and if the intersection of B from an unknown location to the center of the room. The ring
with only one observational class is non-empty the plan could start problems are about closing and locking all the windows of
with an action node instead of a degenerate observation node. a building consisting of a cycle of rooms. BW is the blocks