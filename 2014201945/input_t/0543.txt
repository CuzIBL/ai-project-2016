                    Propagating Logical Combinations of Constraints

                     Fahiem Bacchus∗                                Toby Walsh†
                   University of Toronto                         NICTA and UNSW
                     Toronto, Canada                              Sydney, Australia
                 fbacchus@cs.toronto.edu                        tw@cse.unsw.edu.au

                    Abstract                          2   Inconsistent and Valid Assignments
                                                      A constraint satisfaction problem consists of a set of vari-
    Many constraint toolkits provide logical connec-
                                                      ables, each with a domain of values, and a set of constraints.
    tives like disjunction, negation and implication.
    These permit complex constraint expressions to    Each constraint consists of a scope of variables to which it is
                                                      applied, and a relation of allowed values for those variables.
    be built from primitive constraints. However, the
                                                      For convenience, we represent the domains D of the variables
    propagation of such complex constraint expres-
    sions is typically limited. We therefore present  by the set of possible assignments. For example, if we have
                                                      two 0/1 variables, X and Y then D = {X =0,X =1,Y =
    a simple and light weight method for propagat-
                                                      0,Y  =1}. We let domain(X)  be the set of values in the
    ing complex constraint expressions. We provide                       X  domain(X)={a    | X = a ∈D}
    a precise characterization of when this method en- domain of the variable :                         .
                                                      An assignment set τ is a set of assignments to variables such
    forces generalized arc-consistency. In addition, we
                                                      that no variable is assigned more than one value by τ. The
    demonstrate that with our method many different
                                                      scope                  τ          C
    global constraints can be easily implemented.          of an assignment set (constraint ) is the set of vari-
                                                      ables in τ (C) and is denoted by scope(τ) (scope(C)). Given
                                                                 C                     τ      scope(C) ⊆
1  Introduction                                       a constraint and an assignment set with
                                                      scope(τ), we write C(τ) iff the assignments in τ satisﬁes C.
Real world problems often contain logical combinations of That is C(τ) iff there exists X1 = a1, .., Xk = ak ∈ τ with
numerical and symbolic constraints. For example, many con- scope(C)={X1, .., Xk} and X1 = a1, .., Xk = ak satisﬁes
ﬁguration problems are naturally speciﬁed using implication C. We write ¬C(τ) otherwise.
and other logical connectives (e.g. if the car is a coupe or a An assignment is (generalized arc) inconsistent for a
convertible then a roof rack is not a valid option). To facilitate constraint iff no assignment set containing it satisﬁes the
the modeling of such problems, constraint toolkits allow log- constraint. That is, X = a is inconsistent for C iff
ical combinations of primitive constraints to be posted. How- ∀τ. scope(C) ⊆ scope(τ) ∧ X = a ∈ τ →¬C(τ). A con-
ever, such combinations are typically not propagated very ef- straint C has an unique maximal set of inconsistent assign-
fectively. For example, the propagation of a disjunction of ments MaxInc(C). For example, given the constraint X<Y
constraints is generally delayed until all but one of the dis- with X = {0, 1, 2} and Y = {1, 2}, then {X =2} is the
juncts are falsiﬁed after which the remaining disjunct (which maximal set of inconsistent assignments. Assignments that
must now hold) is propagated.                         are consistent have at least one witness falsifying the above
  We will present a simple and light weight method to propa- condition; i.e., X = a is consistent iff there is an assignment
gate constraint expressions built up from logical connectives set τ (called a support) with scope(τ)=scope(C) ∧ X =
and primitive constraints. This method can be incorporated a ∈ τ ∧C(τ). A constraint C is GAC (Generalized Arc Con-
into any current constraint toolkit by a simple extension to sistent) iff every value of every variable in scope(C) has at
the propagators for the primitive constraints. We can there- least one support. If X = a is inconsistent, we can prune a
fore provide the user with a rich language for specifying prob- from the domain of X. A constraint C can be made GAC by
lems, whilst preserving the ability to prune the search space. simply pruning all values in MaxInc(C) from the domains of
To demonstrate the usefulness of such a facility, we show that their respective variables.
many global constraints can be easily speciﬁed and, in some An essential notion for our approach is the concept of a
cases, effectively propagated, using simple constraint expres- valid assignment. Valid assignments are the dual of incon-
sions. Thus our method can often provide the toolkit user sistent assignments. An assignment is valid for a constraint
with a very low cost alternative to the enterprise of designing iff all assignment sets containing it satisfy the constraint. That
and implementing special purpose propagators for unusual is, X = a is valid for C iff ∀τ. scope(C) ⊆ scope(τ) ∧ X =
global constraints that might appear in their problem.      
                                                      a ∈  τ  →  C(τ). As with inconsistent values every con-
  ∗This research funded by NSERC Canada.              straint C has a unique maximal set of valid assignments,
  †This research funded in part by National ICT Australia. MaxValid(C). For example, given the constraint X<Ywith X = {0, 1, 2} and Y = {1, 2}, the maximal set of valid Inc(not(C1), D)=Valid      (C1, D)
assignments is {X =0}. All possible extensions of X =0 Valid (not(C1), D)=Inc(C1,       D)
satisfy the constraint X<Y, but all other assignments to X Inc(or(C1, .., Ck), D)=i Inc(Ci, D)
can be extended so that they fail to satisfy the constraint. Valid (and(C1, .., Ck), D)= i Valid (Ci, D)
  All of the concepts presented for inconsistent assignments Inc(and(C1, .., Ck), D)=ItInc(and(C1, .., Ck), D)
have dual versions for valid assignments. For example, the Valid (or(C1, .., Ck), D)=ItValid(or(C1, .., Ck), D)
dual of consistent assignments is the notion of non-valid as-
signments. An assignment X = a is non-valid if there is at ItInc(and(C1, .., Ck), D) ItValid(or(C1, .., Ck), D)
least one assignment set τ with scope(τ)=scope(C) ∧ X = inc := ∅                 valid := ∅
a ∈  τ ∧¬C(τ). Another example is that the dual of a    repeat                  repeat      
                                                                                      
support is a non-support. An assignment set τ is a non-  inc  :=   i Inc(Ci, D)    valid :=   i Valid (Ci, D)
                                                                                                    
support for an assignment X = a in a constraint C iff    D    :=  D−inc            D     :=  D−valid
                                                                                                       
scope(τ)=scope(C)∧X    = a ∈ τ ∧¬C(τ). A non-support     inc  :=  inc ∪ inc        valid :=  valid ∪ valid
                                                                                           
witnesses the non-validity of X = a.                    until(inc = ∅)            until(valid = ∅)
                                                          return(inc)              return(valid)

3  Constraint Expressions                             Table 1: Functions for computing valid and inconsistent assign-
                                                      ments of a constraint expression. In addition, Inc(true, D)=
To build complex constraints, we combine primitive con- Valid (false, D)=∅, and Valid (true, D)=Inc(false, D)=D.
straints using negation, disjunction and conjunction. A con-
straint expression is either a primitive constraint C or any constraint expression is DP -complete in general.1 There are
well-founded Boolean expression of the form: true, false, results on tractable languages that identify tractable cases for
not(C1), or(C1, .., Ck) or and(C1, .., Ck), where each Ci is it- computing MaxInc and MaxValid. However, we are inter-
self a constraint expression. true is the primitive constraint ested here in computing inconsistent assignments for arbi-
which is always valid, whilst false is always inconsistent. trary constraint expressions, which is intractable in general.
We also allow the expressions implies(C1, C2), iﬀ (C1, C2), We propose a simple and light weight method for comput-
xor(C1, C2) and ifthen(C1, C2, C3), but regard these addi- ing subsets of MaxInc and MaxValid in polynomial time.
tional connectives to be abbreviations:               The method is compositional, computing the inconsistent
 implies(C1, C2) ↔ or(not(C1), C2)                    and valid assignments of a constraint expression from the
      iﬀ (C , C ) ↔ and(or(not(C ), C ), or(not(C ), C ) inconsistent and valid assignments of its parts. For a con-
          1  2                  1  2          2   1   straint expression C and variable domains D, the functions
     xor(C1, C2) ↔ and(or(C1, C2), or(not(C1), not(C2)) Inc(C, D) and Valid (C, D) return subsets of MaxInc(C) and
ifthen(C1, C2, C3) ↔ and(or(not(C1), C2), or(C1, C3)) MaxValid(C) respectively. These functions recursively apply
                                                      the rules in Table 1, until they reach the primitive constraints.
  Each constraint expression C represents a new constraint We assume that each primitive constraint has a poly-time al-
whose scope is equal to the union of the scopes of the prim- gorithm to compute inconsistent and valid assignments.
itive constraints in C. An assignment set τ satisﬁes C iff The algorithm can be optimized by a simple caching
scope(C) ⊆ scope(τ) and the Boolean expression represent- scheme in which we remember the previously computed
   C                                                  value Inc(Ci, D) for each subexpression Ci. If in a subse-
ing evaluates to true given the truth values of the component              
primitive constraints under τ. For example, an absolute value quent call Inc(Ci, D ), D is identical to D when restricted
constraint X = abs(Y ) can be written as the constraint ex- to the variables in scope(Ci), then we can reuse the previ-
pression ifthen(Y ≥ 0,X = Y,X = −Y ). Similarly, a max ously computed result for Inc(Ci, D). A similar optimization
constraint X = max(Y,Z) can be written as the constraint works for Valid (Ci, D). In addition, if we compute and prune
expression and(X ≥ Y,X ≥ Z, or(X = Y,X  = Z)).        inconsistent values incrementally, we can stop as soon as any
  Since a constraint expression is itself a constraint, as- variable has a domain wipeout.
sociated with every constraint expression C is a maximal
set of inconsistent assignments, MaxInc(C), and a maximal 4.1 Entailment and Disentailment
set of valid assignments MaxValid(C). We can make the A constraint expression is entailed iff it holds for all possible
constraint expression C generalized arc consistent by prun- assignments. A constraint is disentailed iff it does not hold
ing all assignments in MaxInc(C). It is also useful to ob- for any possible assignment. As we show below, Valid (C, D)
serve that the duality between valid assignments and inconsis- returns only valid assignments. Hence, if Valid (C, D) equals
tent assignments implies MaxInc (C)=MaxValid(not(C)): the domains of all of the variables in the scope of C, C must be
X=a  ∈  MaxInc (C) ↔  ∀τ.X=a  ∈  tau →  (¬C(τ) ↔     entailed. In such a situation, we modify the computation of
not(C)(τ)) ↔ X=a  ∈ MaxValid(not(C)).                 Valid so that Valid (C, D)=D (note that D might include
                                                      domains of other variables besides those in the scope(C)).
4  Constraint Propagation                             Similarly, if Inc(C, D) equals the domains of all of the vari-

Not surprisingly, it is NP-hard to compute MaxInc for an ar- 1The complexity class DP contains problems which are the con-
bitrary constraint expression. More precisely, deciding if a set junction of a problem in NP and one in coNP [Papadimitriou and
of assignments is the maximal inconsistent set for an arbitrary Yannakakis, 1984].ables in the scope of C then C is disentailed; and we modify a simple example in which this bound is reached. Consider
the computation of Inc so that Inc(C, D)=D.           and(C1, .., Cn) where Ci is Xi = Xi+1 for i<nand X1 −
  To show the beneﬁt, consider implies(even(X),odd(Y )) Xn =1for i = n. Suppose domain(Xi)={1, .., d} for
with  D={X=0,     X=2,    Y =1,   Y =2}.Nowevery           i. Then in the ﬁrst iteration, ItInc returns {X1 =1}
Inc(implies(even(X), odd(Y )), D)= Valid (even(X), D) as this value is not supported in X1 − Xn =1. After this
 ∩   Inc(odd(Y ), D). Using the unmodiﬁed versions,   is pruned from D, a second iteration returns {X 2 =1} as
Valid (even(X), D) will return just valid values for X, whilst this value is now not supported in X1 = X2. And so on
Inc(odd(Y )), D) returns just inconsistent values for Y . Inc up to the nth iteration which returns {Xn =1}. After this
would then compute the empty set of inconsistent assign- is pruned, the n +1th iteration returns {X1 =2} as this
ments for implies(even(X), odd(Y )). Note, however, that value is now not supported in X1 − Xn =1. Hence, there
domain(X)  only contains even numbers. Hence even(X)  are nd iterations before all the values of all the variables are
is entailed. Therefore the modiﬁed Valid (even(X), D) can removed. Note that even if we stop when the ﬁrst variable has
return D, in which case Inc(implies(even(X), odd(Y ), D) a domain wipeout, it will still take (n − 1)d +1iterations. 2
= D∩   Inc(odd(Y ), D)={Y =2}. As required, this is the
maximal set of inconsistent assignments.              4.4  Maximality
                                                      These functions do not always compute maximal sets, even if
4.2  Correctness                                      maximal sets are computed for the primitive constraints from
We prove that Inc and Valid are correct. That is, they only which they are composed. This is not surprising given that
return inconsistent and valid assignments respectively. computing maximal sets for an arbitrary constraint expres-
          Inc     Valid                               sion is intractable in general. The following result precisely
Theorem 1     and      are correct assuming that incon-                Inc
sistent and valid assignments are correctly computed for the characterizes when returns the maximal inconsistent set
constituent primitive constraints.                    of assignments. In other words, the following result identiﬁes
                                                      exactly when pruning the values returned by Inc ensures that
Proof:  By induction on the structure of the constraint ex- a constraint expression is GAC.
pression. The base case holds by assumption. The step case We start with a number of deﬁnitions. A hypergraph
uses case analysis.                                   H  =(H, EH  ) is a set of vertices H and hyperedges E H
                           not(C , D)
  For a constraint expression   1    , we have that   each of which is a subset of H. A hypergraph H has an
Inc(not(C ), D)=Valid  (C , D)
         1               1   .  By induction, the as- acyclic tree decomposition [Flum et al., 2002] iff there is
           Valid (C , D)
signments in      1    are valid. Hence all of these as- a tree T satisfying: (1) there is a one-to-one correspondence
                         not(C , D)
signments are inconsistent for 1   . A dual argument  between the hyperedges of H and the nodes of T ; the hy-
                         Valid (not(C ), D)
shows that the assignments in       1    are valid.   peredge corresponding to a tree node t is called t’s label
                         C =  and(C , .., C )
  For a constraint expression     1    k ,wehave     (label(t)); (2) for every vertex v ∈Hthe set of nodes t of
Valid (C, D)=     Valid (C , D)         X  =  a  ∈
                 i       i   .  Suppose               T such that v ∈ label(t) form a subtree of T . The hyper-
Valid (C, D). Then for all i, X = a ∈ Valid (Ci, D).By graph of a conjunctive or disjunctive constraint expression,
the induction hypothesis, the assignments in each Valid (C i) C = and(C1, .., Ck) or C = or(C1, .., Ck), has the variables
are valid. Consider any assignment set τ such that X = in scope(C) as vertices and the sets of variables scope(Ci),
a ∈ τ and scope(C) ⊆  scope(τ). Since X = a is valid  i =1, .., k as hyperedges. We will relax this deﬁnition to take
for each Ci, τ must satisfy all Ci and thus must satisfy the account of (dis)entailment. If C = and(C1, .., Ck) then we
conjunction. Hence X = a is also valid for C.ForC =   ignore any entailed subexpression when constructing the hy-
Inc(and(C1, ..,Ck), D) a similar argument shows that the as- pergraph. Similarly, if C = or(C1, .., Ck) then we ignore any
signments in i Inc(Ci, D) are inconsistent. Deleting these disentailed subexpression. Under this relaxation we deﬁne a
assignments from D cannot cause any consistent assignment conjunctive or disjunctive constraint expression to be acyclic
                             
to lose its support, hence Inc(Ci, D ) on the reduced domain if its corresponding hypergraph has an acyclic tree decompo-
 
D  must still return inconsistent assignments. ItInc then re- sition. For example, a conjunction in which the primitive con-
computes  i Inc(Ci, D) until we reach a ﬁxed point.   straints are in a chain, and each has only one variable in com-
  Similar arguments hold for constraint expressions of the mon with the previous and next constraint is acyclic. Acyclic-
form or(C1, .., Ck). 2                                ity is, however, more general than being a chain. We will use
                                                      acyclicity to characterize when Inc computes MaxInc.
4.3  Termination
                                                      Theorem 3  For any constraint expression C and any vari-
The ItInc and ItValid functions only require a linear (in the able domains D, Inc(C, D)=MaxInc(C, D) if:
size of the CSP) number of iterations to reach their ﬁxed point C                           Inc(C, D)=
in the worst case.                                      1.   is a  primitive constraint and
                                                          MaxInc(C, D);
          ItInc    ItValid   O(nd)
Theorem 2      and        take     iterations to reach  2. C = not(C1) and Valid (C1, D)=MaxValid(C1, D);
their ﬁxed points for a constraint expression with n variables C = or(C , .., C ) Inc(C , D)=MaxInc(C , D)
                  d                                     3.        1    k  and     i               i   for
and domains of size . There exist constraint expressions  i ∈ (1, .., k);
which take Θ(nd) iterations to reach the ﬁxed point.
                                                        4. C   =   and(C1, .., Ck) and (a) Inc(Ci, D)=
Proof:  As each iteration removes at least one value, we  MaxInc(Ci, D) for i ∈  (1, .., k); (b) C is acyclic;
must reach the ﬁxed point in at most nd steps. We can give and (c) |scope(Ci) ∩ scope(Cj)|≤1 for i, j ∈ (1, .., k); 5. Inc(C, D)=D.                                      that characterizes when arc consistency achieves GAC on
                                                      conjunctions of binary constraints. The main difference be-
Proof: 1. Immediate.
            Valid (C , D)                     X  =    tween our result and these previous results is that we do not
  2. Suppose       1    is maximal. Then for any      place any restriction on the arity of the primitive constraints.
a ∈ Valid (C1, D), there exists τ with X = a ∈ τ and
¬C (τ)        X =  a            Inc(not(C ), D)  τ    Hence, our result does not depend on bounded tree width (the
  1   . Hence        cannot be in        1     as     tree width of the constraint graph is at least as large as the ar-
is one assignment that prevents it being inconsistent. Hence
Inc(not(C ), D)                                       ity of the primitive constraints). Given primitive constraints
         1    is maximal.                             for which GAC can be efﬁciently computed (no matter their
  3. Suppose Inc(Ci, D) are maximal. Consider X = a ∈
Inc(or(C , .., C ), D)  X  =  a ∈       Inc(C , D)   arity), our result characterizes when this efﬁciency can be
        1    k    . Then           1≤i≤k      i   .   lifted to complex combinations of these constraints.
That is, X = a ∈ Inc(Cj, D) for some j ∈ (1, .., k).As
Inc(Cj, D) is maximal, there exists τ with X = a ∈ τ and 5 Some Applications
C (τ)      X =  a           Inc(or(C , .., C ), D) τ
 j  . Thus       cannot be in       1    k     as     To demonstrate the usefulness of constraint expressions and
is one assignment that prevents it being inconsistent. Hence
                                                      our propagation algorithm, we show that a wide range of
Inc(or(C1, .., Ck), D) is maximal.
            X ∈ scope(C)    X  = a ∈D      X = a ∈   global and other constraints can be speciﬁed and propagated
  4. Suppose            with          ,but            using simple constraint expressions. In many cases, our light
Inc(C, D). We must show that X = a ∈ MaxInc(C, D). Let
Dc = D−Inc(C,  D)                                     weight propagation algorithm is able to achieve GAC. Our
                 , i.e., the consistent assignments remain- method is then an effective and low cost means to implement
ing in the variable domains. From Table 1 we observe that
        c                                   c         these constraints. This is especially valuable when the con-
Inc(Ci, D )=∅  and by condition (a) MaxInc(Ci, D )=∅
     i ∈ (1, .., k)                                   straints useful for a particular problem are too specialized to
for all         . Consider the acyclic tree decomposition be in the user’s constraint toolkit.
associated with C. Orient this tree so that the root is labeled
    scope(C )        C      X  ∈ scope(C )
with       i for some i with           i . Note that  DOMAIN   constraint. This channels between a variable
by property (2) of an acyclic tree decomposition and condi- and a sequence of 0/1 variables representing the pos-
tion (c), each of the subtrees below Ci can have at most one sible values taken by the variable. More precisely,
variable in common with the other subtrees. Furthermore if DOMAIN(X, [X1, .., Xn]) ensures X = i iff Xi =1[Refalo,
two subtrees do have a variable in common that variable must 2000]. We can decompose this into a disjunction:
be in the scope(Ci).
       X =  a ∈Dc                       τ   C                  or(and(X =1,X1   =1,..,Xn =0), ..,
  Since           it must have some support on i such              and(X  = n, X =0, .., X =1))
that τ ∈Dc. Now we extend this support downwards in the                         1        n
                                   1    
tree decomposition to the children of C i: Cj , .., Cj . Each such The equality constraints in each conjunct again have no vari-
child Cj shares only one variable with Ci, say Y , and Y must ables in common. Hence pruning the values returned by Inc
                                                  c
be assigned some value in τ, say Y = b. Since Y = b ∈D enforces GAC.
                   τ    C         τ  ∈Dc
it must have a support j in j such that j . Thus we   ELEMENT   constraint. This indexes into an array with a
         τ              and(C , C )             C
can extend to a support for  i  j for each child of i. variable [Van Hentenryck and Carillon, 1988]. More pre-
                     τ                          C
Furthermore the supports j for the individual children of i cisely, ELEMENT(I,[X1, .., Xn],J) holds iff XI = J.We
                  C     C 
cannot be in conﬂict: j and j can only share a variable al- can use this to look up the price of a particular component
               τ       τ     τ               τ
ready assigned by , hence j and j must agree with and included in a conﬁguration problem. It decomposes into a
with each other on the value assigned to this variable. Thus simple disjunction:
we can extend τ to a support for all of Ci’s children. Further-
                                                          or(and(I =1,J  = X  ),..,and(I = n, J = X ))
more, by the same argument each support τ j for the child Cj                 1                    n
can be extended to a support for all of the conjuncts in the The equality constraints within each conjunct share no vari-
subtree below Cj. Hence, τ can be extended to a support for ables. Hence pruning the values returned by Inc enforces
all of C, and since X = a ∈ τ, X = a ∈ MaxInc(C, D). GAC.
           and(C  , .., C )
  Note that if   1    k contains any entailed conjuncts, MEMBER constraint. This ensures that a particular value
these can be eliminated without changing the maximal set of
                                                      is used. More precisely, MEMBER(I,[X1, .., Xn]) holds iff
inconsistent assignments. We can then apply the argument
                                                      there exists j with Xj = I. We can decompose this into a
above to the remaining acyclic part of the conjunction. disjunction:
                  MaxInc(C, D) ⊆D   2
  5. Immediate since               .                                 or(X1  = I, .., Xn = I)
  In fact, we can show that these ﬁve cases are the only                        Inc
ones in which Inc is always guaranteed to be maximal. This Pruning the values returned by enforces GAC.
reverse direction needs a little care as Inc may compute MAX constraint. This computes the maximum  value
MaxInc by chance. However, these ﬁve cases are the only taken by a sequence of variables.  More  precisely,
ones in which, irrespective of the constraint subexpressions, MAX(N,[X1,..,Xn]) holds iff there exists i with N = Xi
Inc is guaranteed to compute MaxInc. A dual result holds, and Xi ≥ Xj for all j.AMAX constraint can be decom-
and characterizes precisely when Valid computes MaxValid. posed into a disjunction:
  Previous related results have shown that acyclic database or(and(N = X1,X1 ≥ X2, .., X1 ≥ Xn)
queries of bounded tree width are tractable. Bounded tree    and(N =  X2,X2 ≥  X1,X2 ≥  X3, .., X2 ≥ Xn)
width (tree width one) is also known to be the condition     .., and(N = Xn,Xn ≥ X1, .., Xn ≥ Xn−1))Pruning the values returned by Inc on such a decomposition AMONG constraint. This limits the number of variables
enforces GAC.                                         taking values from a set [Beldiceanu and Contejean, 1994].
                                                      More precisely, AMONG([X1, .., Xn], [d1, .., dm],N) holds
CHANNELLING    constraints. It is often advantageous to  N  = |{i|X  = d }|
specify multiple viewpoints of a problem. Constraints may iff      i    j  . The constraint is useful in many
                                                      resource allocation and scheduling problems. By introducing
be easier to specify in one viewpoint and propagate better in          N
another. Channelling constraints are then needed to link the additional variables i in which to accumulate a count, we
different viewpoints. For example, multiple viewpoints have can decompose this into a relatively simple constraint expres-
proved useful in the orchestra rehearsal problem, prob039 sion:
in CSPLIB. The channelling constraints used here can be and(ifthen(X1 ∈ D, N1 =1,N1  =0),
speciﬁed as constraint expressions:                         ifthen(X2 ∈ D, N2 = N1 +1,N2  = N1),
                                                            .., ifthen(Xn ∈ D, N = Nn−1 +1,N = Nn−1)),
          iﬀ (Xi =1, or(Xi−1 =1,Yi =1))
         iﬀ (Zk = j, and(Xj =1,Xj−1 =0))              where Xi ∈ D  is an abbreviation for or(Xi = d1, .., Xi =
                                                      dm).
The problem also contained a specialized optimality con- Unfortunately, Inc does not achieve GAC on such a de-
straint which can be speciﬁed as the constraint expression:
                                                      composition. Consider, for example, X 1,X2 ∈{0, 1},
                                                      N   ∈{0,  1, 2}    N   ∈{0,  1}
              implies(X<Y,WX    =1)                                  and  1          .  Enforcing GAC on
                                                      AMONG([X1,X2],  [0, 1],N) will prune 0 and 1 from N
Where WX   =1can itself be speciﬁed with an ELEMENT   whilst Inc returns the empty set. Similar decompositions
constraint.                                           and results hold for the ATMOST,ATLEAST,CHANGE, and
                                                      COUNT  constraints.
LEX constraint. This lexicographically orders two vectors
of variables. It has many applications when dealing with sym- NOTALLEQUAL constraint. This ensures that not all vari-
metry [Frisch et al., 2002]. We can decompose it into a dis- ables take the same value [Beldiceanu and Contejean, 1994].
junction:                                             More precisely, NOTALLEQUAL([X1, .., Xn]) holds iff there
                                                      exists i and j with Xi = Xj. This can be decomposed into
    or(X1 <Y1,                                        the following constraint expression:
        and(X1  = Y1,X2 <Y2),
        and(X1  = Y1,X2 =  Y2,X3 <Y3),..,                             or(X1 = X2, .., X1 = Xn)
        and(X1  = Y1, .., Xn−1 = Yn−1,Xn ≤ Yn))
                                                      Pruning the values returned by Inc enforces GAC.
As the constraints in each conjunct share no variables, prun- NVALUE constraint. This counts the number of values
ing the values returned by Inc enforces GAC on the LEX used by a sequence of variables [Pachet and Roy, 1999]. More
constraint. In addition, if we memoize previous results, Inc precisely, NVALUE([X1, .., Xn],N) holds iff |{Xi|1 ≤ i ≤
will be comparable to the efﬁcient algorithm in [Frisch et al., n}| = N. The constraint is useful in a wide range of prob-
2002].                                                lems involving resources The ALLDIFFERENT constraint is
  The choice of decomposition of a global constraint is im- a special case of the NVALUE constraint in which N = n.
portant for ensuring as much propagation as possible. For Unfortunately, it is NP-hard in general to enforce GAC on a
instance, an alternative decomposition is the conjunction: NVALUE constraint [Bessiere et al., 2004].
                                                        One way to propagate this constraint in polynomial time is
 and(X1 ≤  Y1,
     implies(X  = Y ,X  ≤ Y ),..                      to decompose it with an additional set of 0/1 variables repre-
              1    1  2    2                          senting the characteristic function of the set of values used:
     implies(and(X1 = Y1, .., Xn−1 = Yn−1),Xn ≤ Yn))
                                                            and(iﬀ (S1 =1, or(X1 =1,..,Xn =1)),
Pruning the values returned by Inc on this decomposition
                                                                ..,iﬀ (Sm =1, or(X1 = m, .., Xn = m)),
may not enforce GAC on the LEX constraint. Consider X 1           m
                                                                  i=1 Si = N)
and Y1 ∈{0, 1}, X2 =1and  Y2 =0. Then   X1 =1and
Y1 =0are both inconsistent assignments. However, Inc ap- Where the domains of the Xi are assumed to be from 1 to m.
plied to this decomposition will return the empty set. Not surprisingly, Inc does not compute the maximal set of
VALUE  PRECEDENCE    constraint. This breaks symme-   inconsistent assignments for this constraint expression. For
                                                                     X1  X2  ∈{1, 2} X3 ∈{1,  2, 3} N =3
tries in a sequence of variables, X1 to Xn caused by two example, suppose ,         ,             ,
                                                          S =1     1 ≤  i ≤ 3      Inc
indistinguishable values s and t [Law and Lee, 2004].We and i    for         . Then    returns the empty set,
                                                                 X  =1     X  =2
can decompose it into a simple conjunction:           even though 3     and  3    are inconsistent.
                                                        A similar decomposition and result holds for the COMMON
    and(X1 = t, implies(X2 = t, X1 = s), ..,         constraint, which is also NP-hard to propagate.
        implies(Xn = t, or(X1 = s, .., Xn−1 = s)))
                                                      6   Related Work
Theorem 2 of [Law and Lee, 2004] shows that enforcing GAC Lhomme has proposed GAC algorithms for logical combi-
on each conjunct achieves GAC on the global constraint. As nations of primitive constraints, focused primarily on those
each conjunct expands out into a simple disjunction, pruning that are given in extension [Lhomme, 2004]. For example,
the values returned by Inc enforces GAC on the global con- on a disjunction like or(C1, .., Ck), the algorithm tests each
straint.