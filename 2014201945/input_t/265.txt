                  Real-Time Strategy Gaines: A New AI Research Challenge 

                                                     Michael Buro 
        Department of Computing Science, University of Alberta, Edmonton, AB, T6J 2E8, Canada 
                                            email: mburo@cs.ualberta.ca 

                        Abstract                               • Opponent modeling, Learning. One of the biggest short•
                                                               comings of most (RTS) game AI systems is their inability to 
     This poster motivates AI research in the area of          learn from experience. Human players only need a couple 
     real-time strategy (RTS) games and describes the          of games to spot opponents' weaknesses and to exploit them 
     current status of a project whose goals are to imple•     in upcoming games. Current machine learning approaches in 
     ment an RTS game programming environment and              this area are inadequate. 
     to build AIs that eventually can outperform human         • Adversarial real-time planning. In fine-grained simula•
     experts in this challenging and popular domain.           tions, agents cannot afford to think in terms of micro actions. 
                                                               Instead, abstractions have to be found which allow a machine 
 1 Real-Time Strategy Games                                    to conduct forward searches in a manageable abstract space 
                                                               and to translate found solutions back. Because the environ•
Commercial computer games are a growing part of the en•        ment is also dynamic, hostile, and smart - adversarial real-
tertainment industry and simulations are a critical aspect of  time planning approaches need to be investigated. 
modern military training. The two fields have much in com•       Playing RTS games is challenging. Even more challeng•
mon, cross-fertilize, and are driving real-time AI research    ing is the creation of autonomous real-time systems capable 
[Herz and Macedonia, 2002]. With the advent of fast per•       of outperforming human experts in this domain. Because 
sonal computers, simulation-based games have become very       search space abstraction, real-time planning, and temporal 
popular. Today, these games constitute a multi-billion dollar  and spatial reasoning are central to many other problems, the 
enterprise. Examples are sports games and real-time strategy   scope of applications seems endless. One example is high-
games. The common elements of simulation games are severe      performance combat simulators which are in large demand 
time constraints and a strong demand of real-time AI which     for training military personnel today and will become the core 
must be capable of solving real-world decision tasks quickly   of automated battlefield decision-support systems of tomor•
and satisfactorily. Popular simulation games are therefore     row, [von der Lippe et al., 1999] predicts that 20% of the US 
ideal test applications for real-time AI research.             armed forces will be robotic by 2015. 
   Real-Time-Strategy (RTS) games - such as the million-
sellers Starcraft by Blizzard Entertainment and Age of Em•     2 An RTS Game Programming Environment 
pires by Ensemble Studios - can be viewed as simplified        The lack of AI interfaces even in upcoming RTS game titles 
military simulations. Several players struggle over resources  makes it hard to conduct real-time AI research in this area and 
scattered over a 2D terrain by setting up an economy, build•   to compare the strength of the resulting Al systems with that 
ing armies, and guiding them into battle in real-time. RTS     of human experts. In order to solve this problem we launched 
games offer a large variety of fundamental AI research prob•   an open source RTS game programming project [Buro, 2002] 
lems, unlike other game genres studied by the AI community     with the following goals: 
so far:                                                        • Building a hack-free server-client RTS game system. At 
• Resource management. Players start off by gathering local    the core of the system is a simulator to which players con•
resources to build up defenses and attack forces, to upgrade   nect via UNIX sockets (Fig. 1). The unique system features 
weaponry, and to climb up the technology tree. Proper re•      include: server-side simulation - which only sends visi•
source management is a vital part of any successful strategy.  ble information to clients thereby rendering common map-
• Decision making under uncertainty. Initially, players are    revealing client hacks useless - and an open message proto•
not aware of the enemies' base locations and intentions. They  col that allows Al researchers and players to connect what-
have to gather intelligence by sending out scouts. If no infor• ever client software they like. 
mation is available yet, the players must form plausible hy•   • Sparking competition among players and researchers. 
potheses and act accordingly.                                  Popular games in which human players still have the upper 
• Spatial and temporal reasoning. Static and dynamic ter•      hand are ideal test-domains for AI research. Unlike the con•
rain analysis as well as understanding temporal relations of   fined GUIs of commercial RTS games, our open design al•
actions is of utmost importance in RTS games - and yet, cur•   lows the construction of hybrid AI systems in which the hu•
rent game AIs largely ignore these issues and fall victim to   man general is aided by Al modules of growing capabilities. 
simple common-sense reasoning [Forbus et al., 2002].           Competitive game playing on an open Internet RTS game 
• Collaboration. In RTS games groups of players can join       server is therefore likely to improve AI performance and er-
forces and intelligence. How to coordinate actions effec•      gonomic GUI design. 
tively by communication among the parties is a challenging     • Applying planning and machine learning techniques to 
research problem.                                              RTS games. Classic game Al methods - such as alpha-


1534                                                                                                   POSTER PAPERS  beta search - cannot be applied directly in this domain due             formation. Another big difference is that in computer soccer 
 to the large number of game objects, imperfect information,             a small number of agents are required to compute their ac•
 and real-time demands. Search space abstraction, hierarchi•             tions autonomously whereas in RTS games a large number of 
 cal planning, and machine learning arc approaches to over•              objects have to be orchestrated. 
 come these problems.                                                       The other body of literature relevant to this project is on 
   Our initial software release implemented a basic RTS pro•             military analyses and applications. Research in this area 
 gramming infrastructure . Recently, we added terrain fea•               spans from mathematical combat models [Ilachinski, 1996] 
 tures (water, ground, plateaus, and ramps), view obstruction            over computer generated forces - which are used in simula•
 by terrain, and a split-view GUI which allows to watch differ•          tion and training - to decision-support systems that aid com•
 ent parts of the playing field simultaneously. In order to main•        manders and troops on the battle-field or even control entire 
 tain the high simulation speed, terrain and vision are based on         weapon systems autonomously. Our project tries to bring 
 tiles (Fig. 2). Soon, the complete source code of our RTS pro•          both research communities together. 
 gramming environment will be released. It is being used in 
 two thesis projects dealing with machine learning of low-level          References 
 unit behavior and abstraction, planning, and heuristic search           [Atkin, 1998] M.S. Atkin. AFS and HAC: Domain-general agent 
 in RTS games. We hope to report first results in the RTS                   simulation and control. In AAAI Workshop on Software Tools for 
 game AI domain later this year and to spark enough interest to             Developing Agents, 1998. 
 be able to organize man-machine and machine-machine RTS                 [Buro, 2002] M. Buro. ORTS: A hack-free RTS game environment. 
 game tournaments in the near future. For this it will be neces•            In Proceedings of the Third International Conference on Comput•
 sary to define standard game setups including unit properties              ers and Games, pages 156 161, 2002. 
 (size,speed,sight and attack ranges,...), technology tree, and          [Forbus et al., 2002] K.D. Forbus, J.V. Mahoney, and K. Dill. How 
 resources. In contrast to commercial products, the focus here              qualitative spatial reasoning can improve strategy game AIs. 
 will be on simplicity to ease the initial Al development.                  IEEE Intelligent Systems, 17(4):25 30, July 2002. 
                                                                         [Herz and Macedonia, 2002] J.C. Hcrz and M.R. Macedonia. Com•
                                                                            puter games and the military: Two views. Defense Horizons. 
 3 Related Work                                                             Center for Technology and National Security Policy, National 
                                                                            Defense University, 11, April 2002. 
 The growing literature on Al in commercial games surely                 [Ilachinski, 1996] A. Ilachinski. Land warfare and complexity 
 indicates the demand of smarter game Al. Many articles on                  CRM 96-68, Center for Naval Analysis Research, 1996. 
 planning are relevant to this project. Due to space limitation          [Laird, 2001] J. Laird. Using a computer game to develop advanced 
 we only briefly mention J. Laird's Soar architecture and its               AI. Computer, 34(7):70-75, July 2001. 
 application to first-person shooter games [Laird, 2001] and             [Stone, 2002] P. Stone. Multiagent competitions and research: 
 M. Atkin's work on the GRASP system that is applied to a                   Lessons from RoboCup and TAC. RoboCup 2002 International 
 capturc-thc-flag game [Atkin, 1998].                                       Symposium, June 2002. 
   Computer soccer pursues similar goals and has become                  [von der Lippe et al., 1999] S. von der Lippe et al. A robotic army: 
 quite popular [Stone, 2002]. This domain can be regarded as                The future is CGF. In 10th Conference on Computer Generated 
 a simplified RTS game with only a few objects, no economy,                 Forces and Behavioral Representation, Florida, USA, 1999. 
 unremarkable terrain features, and more or less complete in-


Figure 1: Server-client RTS game architecture. Clients con•              Figure 2: a) Motion/collision stress test: hundreds of moving 
nect to a central server which sends player views, receives              ground and air units on hilly terrain. All units are visible to all 
actions for all objects, and updates the state of the world.             players, b) Tile-based vision: views are obstructed by hills. 

POSTER PAPERS                                                                                                                         1535 