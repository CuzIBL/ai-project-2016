                                 AND/OR Cutset Conditioning

                                 Robert Mateescu     and  Rina Dechter
                              School of Information and Computer Science
                               University of California, Irvine, CA 92697
                                    {mateescu, dechter}@ics.uci.edu


                    Abstract                          expresses independencies between variables, resulting in a
                                                      search tree exponential in the depth m of the pseudo tree,
    Cutset conditioning is one of the methods of solv- where clearly m ≤ n.
    ing reasoning tasks for graphical models, espe-     This paper applies the AND/OR paradigm to the cycle cut-
    cially when space restrictions make inference (e.g., set method. We show that the AND/OR cycle cutset is a strict
    jointree-clustering) algorithms infeasible. The w- improvement of the traditional cycle cutset method (and the
    cutset is a natural extension of the method to a hy- same holds for the extended w-cutset version). The result
    brid algorithm that performs search on the condi- goes beyond the simple organization of the traditional cutset
    tioning variables and inference on the remaining  in an AND/OR pseudo tree, which would be just the straight-
    problems of induced width bounded by w. This pa-  forward improvement. The complexity of exploring the tradi-
    per takes a fresh look at these methods through the tional cutset is time exponential in the number of nodes in the
    spectrum of AND/OR search spaces for graphical    cutset, and therefore it calls for ﬁnding a minimal cardinality
    models. The resulting AND/OR cutset method is a   cutset C. The complexity of exploring the AND/OR cutset is
    strict improvement over the traditional one, often time exponential in its depth, and therefore it calls for ﬁnd-
    by exponential amounts.                           ing a minimal depth AND/OR cutset AO-C. That is, a set of
                                                      nodes that can be organized in a start pseudo tree of mini-
1  Introduction                                       mal depth. So, while the cardinality of the optimal AND/OR
Graphical models are a widely used knowledge representa- cutset, |AO-C|, may be far larger than that of the optimal tra-
tion framework that captures independencies in the data and ditional cutset, |C|, the depth of AO-C is always smaller than
allows for a concise representation. The complexity of a or equal to |C|.
reasoning task over a graphical model depends on the in-
duced width of the graph. For inference-type algorithms, 2 Preliminaries
the space complexity is exponential in the induced width in Reasoning graphical models A reasoning graphical model
the worst case, which often makes them infeasible for large is a triplet R = (X, D, F ) where X is a set of variables,
and densely connected problems. In such cases, space can X = {X1, . . . , Xn}, D = {D1, . . . , Dn} is the set of their
be traded at the expense of time by conditioning (assigning respective ﬁnite domains and F = {F1, . . . , Ft} is a set of
values to variables). Search algorithms perform condition- real-valued functions, deﬁned over subsets of X. The primal
ing on all the variables. Cycle-cutset schemes [Pearl, 1988; graph of a reasoning problem has a node for each variable,
Dechter, 1990] only condition on a subset of variables such and any two variables appearing in the same function’s scope
that the remaining network is singly connected and can be are connected. The scope of a function is its set of arguments.
solved by inference tree algorithms. The more recent hy- Belief networks A belief network can be viewed as an in-
brid w-cutset scheme [Rish and Dechter, 2000; Bidyuk and stance of a reasoning graphical model. In this case the set
Dechter, 2003] conditions on a subset of variables such that, of functions F is denoted by P = {P1, . . . , Pn} and rep-
when removed, the remaining network has induced width w resents a set of conditional probability tables (CPTs): Pi =
or less, and can be solved by a variable elimination [Dechter, P (Xi|pai), where pai are the parents of Xi. The associated
1999] type algorithm.                                 directed graph G, drawn by pointing arrows from parents to
  The AND/OR search space for graphical models [Dechter children, should be acyclic. The belief network represents
and Mateescu, 2004] is a newly introduced framework for a probability distribution over X having the product form
                                                                                 n
search that is sensitive to the independencies in the model, PB(¯x) = P (x1, . . . , xn) = Πi=1P (xi|xpai ). The moral
often resulting in exponentially reduced complexities. The graph of a directed graph is the undirected graph obtained by
traditional way of doing search consists of instantiating the connecting the parent nodes of each variable and eliminating
n variables of the problem as if they were all connected in direction.
a chain, which results in a search tree exponential in n. In Constraint networks A constraint network can also be
contrast, AND/OR search is based on a pseudo tree which viewed as an instance of a reasoning graphical model. In this                                    A                                          A
    A         A              0             1                           0              1
                             B             B                           B              B
                         0
              B                 1      0      1                     0      1       0      1
                        E  C  E   C  E   C  E   C
B      C                                                          E   C  E   C   E  C   E   C
           E     C     0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1

                          D D   D  D    D D   D  D                  0  1      0   1   0   1
E   D            D       0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
                                                                              D   D   D   D
   (a)        (b)                   (c)
                                                                                  0   1

             Figure 1: AND/OR Search Tree                   Figure 2: Context-minimal AND/OR Search Graph

case the functions are denoted by C = {C1, ..., Ct}, and the (hX1, x1i, hX2, x2i, . . . , hXi−1, xi−1i). Consistency is well
constraint network is denoted by R = (X, D, C). Each con- deﬁned for constraint networks. For probabilistic networks,
straint is a pair Ci = (Si, Ri), where Si ⊆ X is the scope consistent tuples have non zero probability.
of the relation Ri that denotes the allowed combinations of The children of an AND node hXi, xii are OR nodes la-
values.                                               beled with the children of variable Xi in the pseudo tree T .
Induced-graphs and induced width   An ordered graph   Example 1  Figure 1a shows a belief network. Figure 1b
is a pair (G, d), where G is an undirected graph, and d = shows a pseudo tree of the moral graph, together with the
X1, ..., Xn is an ordering of the nodes. The width of a node back-arcs (dotted lines). Figure 1c shows the AND/OR search
in an ordered graph is the number of the node’s neighbors tree based on the pseudo tree, for binary valued variables.
that precede it in the ordering. The width of an ordering d,
denoted w(d), is the maximum width over all nodes. The  The AND/OR Search Tree can be traversed by a depth ﬁrst
induced width of an ordered graph, w∗(d), is the width of search algorithm. The arcs from Xi to hXi, xii are associ-
the induced ordered graph obtained as follows: nodes are ated with appropriate labels of the functions in F . The al-
processed from last to ﬁrst; when node X is processed, all gorithm maintains values for each node, accumulating the re-
its preceding neighbors are connected. The induced width of sult of the computation performed in the subtree below. The
a graph, w∗, is the minimal induced width over all its or- computation is dictated by the graphical model and task at
derings. The tree-width of a graph is the minimal induced hand, for example for belief networks, AND nodes are asso-
width. The path-width pw∗ of a graph is the tree-width over ciated with multiplication (of the values of the independent
the restricted class of orderings that correspond to chain de- subproblems) and OR nodes are associated with summation
compositions.                                         (over all the values of the variable). Based on earlier work
                                                      [Freuder and Quinn, 1985; Bayardo and Miranker, 1996;
3  AND/OR Search Spaces for Graphical                 Darwiche, 2001], it can be shown that:
   Models                                             THEOREM   1 Given a graphical model R and a pseudo tree
                                                      T of depth m, the size of the AND/OR search tree based on T
This section introduces the basics of AND/OR search spaces
                                                      is O n     m  . A graphical model of tree-width w∗ has an
for graphical models as presented in [Dechter and Mateescu, ( · exp( ))
                                                      AND/OR search tree of size O(exp(w∗ · log n)).
2004].  Given a graphical model R  =  (X, D, F ), its
AND/OR search space is driven by a pseudo tree [Freuder
and Quinn, 1985]:                                     3.2  AND/OR Search Graph
                                                      The AND/OR search tree may contain nodes that root iden-
DEFINITION 1 (pseudo tree) Given an undirected graph
G = (V, E), a directed rooted tree T = (V, E0) deﬁned on tical subtrees. These are called uniﬁable. When uniﬁable
all its nodes is called pseudo tree if any arc of G which is not nodes are merged, the search space becomes a graph. Its size
included in E0 is a back-arc, namely it connects a node to an becomes smaller at the expense of using additional memory.
ancestor in T .                                       In this way, the depth ﬁrst search algorithm can be modiﬁed
                                                      to cache previously computed results, and retrieve them when
                                                      the same nodes are encountered again. Some uniﬁable nodes
3.1  AND/OR Search Tree                               can be identiﬁed based on their contexts [Darwiche, 2001].
Given a graphical model R = (X, D, F ), its primal graph The context of an AND node hXi, xii is deﬁned as the set
G and a pseudo tree T of G, the associated AND/OR search of ancestors of Xi in the pseudo tree, including Xi, that are
tree, denoted ST (R), has alternating levels of AND and OR connected to descendants of Xi. It is easy to verify that the
nodes. The OR nodes are labeled Xi and correspond to the context of Xi d-separates [Pearl, 1988] the subproblem be-
variables. The AND nodes are labeled hXi, xii and corre- low Xi from the rest of the network. The context minimal
spond to the value assignments in the domains of the vari- AND/OR graph is obtained by merging all the context uniﬁ-
ables. The structure of the AND/OR search tree is based on able AND nodes.
the underlying backbone tree T . The root of the AND/OR
search tree is an OR node labeled with the root of T . Example 2 Figure 2 shows the context-minimal AND/OR
                                                      search graph of the problem and pseudo tree from Figure 1.
  The children of an OR node Xi  are AND  nodes la-
beled with assignments hXi, xii that are consistent with It can be shown that [Bayardo and Miranker, 1996; Dechter
the assignments along the path from the root, path(xi) = and Mateescu, 2004]:                                 A                                            >.
                                                                               .

                                                                        >/           >/
                                                                         .            /
      B      A      C            B          A
                                                                    >0      >0   >0     >0
                                                                     .       /    0      1   …
                                 C      B      C               …
                                                          >o                  >o                  >o
                                                           .                   f                   /o .
                                                                                                    w
             (a)                (b)        (c)

                                                          ?o                  ?o                  ?o
                                                           .        …f                  …          /o .
   Figure 3: Traditional cycle cutset viewed as AND/OR tree                                         w

THEOREM  2 Given a graphical model R, its primal graph G
and a pseudo tree T , the size of the context minimal AND/OR       Figure 4: AND/OR cycle cutset
                               ∗              ∗
search graph based on T is O(exp(wT (G))), where wT (G)
is the induced width of G (extended with the pseudo tree extra If a cycle cutset of cardinality |C| = c is explored by
arcs) over the ordering given by the depth ﬁrst traversal of T . AND/OR search, based on a start pseudo tree T over the set
                                                      C, and the depth of T is m, then m ≤ c. Therefore,
4  Cycle Cutset Explored by AND/OR Search
                                                      Proposition 1 Exploring a cycle cutset by AND/OR search is
The AND/OR paradigm exploits the problem structure, by always better than, or the same as, exploring it by OR search.
solving independent components separately. This fundamen-
tal idea can also be applied to the cycle cutset method, or
reasoning by conditioning [Pearl, 1988].
                                                      5   AND/OR Cycle Cutset
DEFINITION 2 (cycle cutset) Given a graphical model R =
(X, D, F ), a cycle cutset is a subset C ⊂ X such that the pri- The idea presented in section 4 is a straightforward applica-
mal graph of R becomes singly connected if all the nodes in tion of the AND/OR paradigm to cycle cutsets. In the follow-
C are removed from it. An optimal cycle cutset is one having ing we will describe a more powerful version of the AND/OR
the minimum number of variables.                      cycle cutset.

  The cycle cutset method consists of enumerating all the DEFINITION 4 (AND/OR cycle cutset) Given a graphical
possible instantiations of C, and for each one of them solv- model R = (X, D, F ), an AND/OR cycle cutset AO-C is
ing the remaining singly connected network by a linear time a cycle cutset together with an associated start pseudo tree
and space tree algorithm. The instantiations of C are enumer- TAO-C of depth m. An optimal AND/OR cycle cutset is one
ated by regular OR search, yielding linear space complexity having the minimum depth m.
and O(exp |C|) time complexity, therefore requiring a mini-
mal cycle cutset to optimize complexity.              Example 4  Figure 4 shows a network for which the op-
  A ﬁrst simple improvement to the traditional cycle cutset timal cycle cutset contains fewer nodes than the optimal
scheme described above would be the enumeration of C by AND/OR cycle cutset, yet the latter yields an exponential
AND/OR search.                                        improvement in time complexity. The network in the ex-
                                                      ample is based on a complete binary tree of depth r, the
Example 3 Figure 3a shows two 3 × 3 grids, connected on             j
                                                      nodes marked A  shown on a gray background. The up-
the side node A. A cycle cutset must include at least two           i
                                                      per index j corresponds to the depth of the node in the bi-
nodes from each grid, so the minimal cycle cutset contains
                                                      nary tree, and the lower index i to the position in the level.
three nodes: the common node A and one more node from                             r     r
                                                      Each of the leaf nodes, from A to A r−1 is a side node
each grid, for example B and C. The traditional way of solv-                      1     2
                                                      in a 3 × 3 grid. A cycle cutset has to contain at least 2
ing the cycle cutset problem consists of enumerating all the
                                                      nodes from each of the 2r−1 grids. An optimal cycle cut-
assignments of the cycle cutset {A, B, C}, as if these vari-       r      r     r      r                r
                                                      set is C = {A , . . . , A r−1 , B , . . . , B r−1 }, containing 2
ables form the chain pseudo tree in Figure 3b. However, if         1      2     1      2
                                                      nodes, so the complexity is O(exp |C|) = O(exp(2r)). We
A is the ﬁrst conditioning variable, the remaining subprob-
                                                      should note that the best organization of C as an AND/OR
lem is split into two independent portions, so the cycle cut-
                                                      space would yield a pseudo tree of depth 2r−1 +1. This is be-
set {A, B, C} can be organized as an AND/OR search space                   r      r
                                                      cause all the nodes in {A , . . . , A r−1 } are connected by the
based on the pseudo tree in Figure 3c. If k is the maximum                 1      2
                                                      binary tree, so they all must appear along the same path in the
domain size of variables, the complexity of solving Figure 3b
                                                      pseudo tree (this observation also holds for any other optimal
is O(k3) while that of solving Figure 3c is O(k2).
                                                      cycle cutset in this example). Exploring C by AND/OR search
  We can improve the general cycle cutset method, based on lowers the complexity from O(exp(2r)) to O(exp(2r−1 +1)).
the previous example: ﬁrst ﬁnd the minimal cycle cutset C;                                             j
                                                        Let’s now look at the AND/OR cycle cutset AO-C = {Ai |
then ﬁnd the minimal depth start pseudo tree made of nodes                    j−1       r      r
                                                      j =  1, . . . , r; i = 1, . . . , 2 } ∪ {B1 , . . . , B2r−1 }, con-
in C:                                                 taining all the A and B nodes. A pseudo tree in this case is
DEFINITION 3 (start pseudo tree) Given an undirected  formed by the binary tree of A nodes, and the B nodes exactly
graph G =  (V, E), a directed rooted tree T = (V 0, E0), in the same position as in the ﬁgure. The depth in this case is
where V 0 ⊆ X, is called a start pseudo tree if it has the same r + 1, so the complexity is O(exp(r + 1)), even though the
root and is a subgraph of some pseudo tree of G.      number of nodes is |AO-C| = |C| + 2r−1 − 1.  The previous example highlights the conceptual difference a variable elimination type algorithm, or by search with w-
between the cycle cutset method and what we will call the bounded caching - in particular, AND/OR search with full
AND/OR cycle cutset method. In cycle cutset, the objective caching is feasible for these subproblems.
is to identify the smallest cardinality cutset. Subsequently,
the exploration can be improved from OR search to AND/OR 7.1 Improved AND/OR Caching Scheme
search. In AND/OR cycle cutset the objective is to ﬁnd a cut-
set that forms a start pseudo tree of smallest depth. In [Dechter and Mateescu, 2004], the caching scheme of
                                                      AND/OR search is based on  contexts [Darwiche, 2001],
THEOREM  3 Given a graphical model R, an optimal cycle which are precomputed based on the pseudo tree before
cutset C, its corresponding smallest depth start pseudo tree search begins. Algorithm AO(i) performs caching only at the
TC, and the optimal AND/OR cycle cutset AO-C with the start variables for which the context size is smaller than or equal
pseudo tree TAO-C, then:                              to i (called i-bound).
                                                        The cutset principle inspires a more reﬁned caching
                depth T    depth T
           |C| ≥     ( C) ≥     ( AO-C)         (1)   scheme for AO, which caches some values even at nodes with
There exist instances for which the inequalities are strict. contexts greater than the i-bound. Lets assume the context of
                                                      the node Xk is context(Xk) = {X1, . . . , Xk}, where k > i.
  We should note that strict inequalities in Eq. 1 could trans- During the search, when variables X1, . . . , Xk−i are instan-
late into exponential differences in time complexities. tiated, they can be regarded as part of a cutset. The problem
                                                      rooted by Xk−i+1 can be solved in isolation, like a subprob-
6  AND/OR     w-Cutset                                lem in the cutset scheme, after the variables X1, . . . , Xk−i
                                                      are assigned their current values in all the functions. In this
The principle of cutset conditioning can be generalized using
                                                      subproblem, context(Xk) = {Xk−i+1, . . . , Xk}, so it can
the notion of w-cutset. A w-cutset of a graph is a set of nodes be cached within i-bounded space. However, when the search
such that, when removed, the remaining graph has induced
                                                      retracts to Xk−i or above, the cache table for variable Xk
width at most w. A hybrid algorithmic scheme combining needs to be purged, and will be used again when a new sub-
                                              [
conditioning and w-bounded inference was presented in Rish problem rooted at X is solved.
and Dechter, 2000; Larrosa and Dechter, 2002]. More re-                k−i+1
                                                        This improved caching scheme only increases the space re-
cently, w-cutset sampling was investigated in [Bidyuk and
                                                      quirements linearly, compared to AO(i), but the time savings
Dechter, 2003], and the complexity of ﬁnding the minimal
                                                      can be exponential. We will show results in section 8.
w-cutset was discussed in [Bidyuk and Dechter, 2004].
  The hybrid w-cutset algorithm performs search on the cut-
set variables and exact inference (e.g. bucket elimination 7.2 Algorithm AO-C(i)
[Dechter, 1999]) on each of the conditioned subproblems. If We can now deﬁne the different versions of AND/OR i-cutset
the w-cutset Cw is explored by linear space OR search, the algorithm that we experimented with. We chose to explore
time complexity is O(exp(|Cw| + w)), and the space com- the cutset portion either by linear space AND/OR search (no
plexity is O(exp w).                                  caching) or by AND/OR search with improved caching. For
  The AND/OR cycle cutset idea can be extended naturally the i-bounded subproblems, we chose either Bucket Elim-
to AND/OR w-cutset. To show an example of the difference ination (BE) or AND/OR search with full caching (which
between the traditional w-cutset and the AND/OR w-cutset coincides with the improved caching on the bounded sub-
we refer again to the example in Figure 4. Consider each problems). The four resulting algorithms are: 1) AO-LC(i)
3 × 3 grid replaced by a network which has a minimal w- - linear space cutset and full caching for subproblems; 2)
cutset Cw. The minimal w-cutset of the whole graph contains AO-LC-BE(i) - linear space cutset and BE for subproblems;
           r−1
in this case 2 · |Cw| nodes. If this w-cutset is explored by AO-C(i) - improved caching everywhere; 4) AO-C-BE(i)
OR search, it yields a time complexity exponential in (2r−1 · - improved caching on cutset and BE on subproblems.
|Cw| + w). If the w-cutset is explored by AND/OR search it
                                    r−1
yields a time complexity exponential in (2 + |Cw| + w) 7.3 Finding a Start Pseudo Tree
(similar to Example 4). In contrast to this, the AND/OR w-
cutset, which contains the A nodes and the w-cutsets of each The performance of AO-C(i) is inﬂuenced by the quality of
leaf network, yields a time complexity exponential only in the start pseudo tree. Finding the minimal depth start pseudo
                                                      tree for the given i-bound is a hard problem, and it is beyond
(r + |Cw| + w), or possibly even less if the nodes in Cw can
be organized in a start pseudo tree which is not a chain (i.e. the scope of this paper to address its complexity and solution.
                                                      We will only describe the heuristic we used in creating the
has depth smaller than |Cw|).
                                                      pseudo trees for our experiments.
                                                        Min-Fill [Kjæaerulff, 1990] is one of the best and most
7  Algorithm Description                              widely used heuristics for creating small induced width or-
The idea of w-cutset schemes is to deﬁne an algorithm that derings. The ordering deﬁnes a unique pseudo tree. The min-
can run in space O(exp w). The AND/OR w-cutset algorithm imal start pseudo for an i-bound contains the nodes for which
is a hybrid scheme. The cutset portion, which is organized some descendant has adjusted context (i.e. context without
in a start pseudo tree, is explored by AND/OR search. The the variables instantiated on the current path) greater than i.
remaining w-bounded subproblems can be solved either by Min-Fill heuristic tends to minimize context size, rather than                    CPCS 422 - f(i)                                  N=40, K=3, P=2, 20 instances, w*=7
  i         1  2   3  4   5  6   7  8   9  10 11         i  Algorithms  d      Time(sec)     # nodes
  d(AO-C)  32  32 32  32 31  31 31  31 31  30 29                     MF  MD    MF   MD       MD      MF
  d(C)     40  37 32  32 38  37 36  34 32  30 29         1     AO(i) 12   9  610.14 27.12 50,171,141 1,950,539
  |C|      79  71 65  59 54  50 46  41 37  34 32             AO-LC(i)        174.53 8.75 13,335,595 575,936
                                                              AO-C(i)         67.99 7.61 4,789,569 499,391
  GWCA     79  67 60  55 50  46 42  38 34  31 29            AO-C-BE(i)        16.95 2.18      -       -
                                                         3     AO(i)  7   6   71.68 8.13 5,707,323 595,484
         Table 1: CPCS 422 - Cutsets Comparison              AO-LC(i)         5.73  0.84  501,793  69,357
                                                              AO-C(i)         2.94  0.84  248,652  69,357
                                                            AO-C-BE(i)        0.69  0.25      -       -
pseudo tree depth. Nevertheless, we chose to try it and dis- 5 AO(i)  4   3   11.28 2.77  999,441  24,396
covered that it provides one of the best pseudo trees for higher AO-LC(i)     0.55  0.54   50,024  4,670
                                                              AO-C(i)         0.55  0.55   49,991  4,670
values of i.                                                AO-C-BE(i)        0.10  0.04      -       -
  Min-Depth  We developed a heuristic to produce a bal-             N=60, K=3, P=2, 20 instances, w*=11
anced start pseudo tree, resulting in smaller depth. We  i  Algorithms  d      Time(sec)     # nodes
start from a Min-Fill tree decomposition and then iteratively        MF  MD    MF   MD       MD      MF
                                                         6   AO-LC(i) 7   6  159.79 63.01 14,076,416 5,165,486
search for the separator that would break the tree in parts that AO-C(i)     112.43 62.98 9,925,855 5,165,486
are as balanced as possible, relative to the following mea- AO-C-BE(i)        27.33 5.50      -       -
sure: on either side of the separator eliminate the separator 9 AO-LC(i) 3 3  24.40 41.45 2,140,791 3,509,709
                                                              AO-C(i)         24.15 40.93 2,140,791 3,509,709
variables, count the number of remaining clusters, say n, and AO-C-BE(i)      4.27  2.89      -       -
then add the sizes of the largest log n clusters.       11   AO-LC(i) 0   1   17.39 38.46 1,562,111 3,173,129
        [                      ]                              AO-C(i)         17.66 38.22 1,562,111 3,173,129
  GWC   Bidyuk and Dechter, 2004 is a greedy algorithm      AO-C-BE(i)        1.29  2.81      -       -
to build a minimal cardinality cutset. In the process, we also
arranged the minimal cardinality cutset as AND/OR cutset, to         Table 2: Random Networks
compare with the minimal depth cutset that we could ﬁnd.
                                                      The time and the number of nodes expanded in the search are
8  Experimental Evaluation                            shown for the two pseudo trees correspondingly.
                                                        Random networks.  Table 2 shows results for random net-
We investigated two directions. One was to empirically test works, generated based on N, K and P and averaged over 20
the quality of the start pseudo trees, and the other was to com- instances. Note that K=3, which makes the problems harder,
pare actual runs of the different versions of AO-C(i). even though w∗ seems small. For N=40 we see that the
8.1  The Quality of Start Pseudo Trees                old scheme AO(i) is always outperformed. Using improved
                                                      caching on the cutset is almost always beneﬁcial. For i very
We report here the results on the CPCS 422b network from close to w∗, caching on the cutset doesn’t save much, and in
the UAI repository. It has 422 nodes and induced width some cases when no caching is possible, the extra overhead
22. Table 1 shows the values of f(i), which expresses the may actually make it slightly slower. Also, for strictly posi-
total complexity of a cutset scheme. For a cardinality cut- tive distributions, switching to BE is faster than running AO
set, f(i) = i + |C| and for an AND/OR cutset of depth d, search with caching on the remaining problems.
f(i) = i + d. The row d(AO-C)  shows the depth of the   CPCS networks.  CPCS are real life networks for med-
best AND/OR cutset we could ﬁnd. |C| shows the num-   ical diagnoses, which are hard for belief updating. Table 3
ber of nodes in the best cutset found by GWC, and d(C) shows results for CPCS 360 ﬁle, having induced width 20.
shows its depth when organized as AND/OR cutset. GWCA For i = 20, AO-C-BE(i)  is actually BE. It is interesting
is taken from [Bidyuk and Dechter, 2004]. The best complex- to note that AO-LC-BE(i), for i = 12 is actually faster
ity, expressed by small values of f(i), is always given by the than BE on the whole problem, while requiring much less
AND/OR cutset, and for smaller values of i they translate into space (exp(12) compared to exp(20)), due to smaller over-
impressive savings over the cardinality cutset C.     head in caching (smaller cache tables) and a good ordering
  In all our experiments described in the following, we re- that doesn’t require recomputing the same problems again.
frained from comparing the new cutset scheme with the old We also mention that AO(i) was much slower on this prob-
cardinality cutset scheme (equivalent to an OR search on the lem and therefore not included in the table.
cutset), because the latter was too slow.               In the above experiments, the values of d show that MF
                                                      heuristic provided a better cutset for large values of i, while
8.2  Performance of AO-C(i)                           the MD heuristic provided good cutsets when i was small.
We tested the different version of the AO-C(i) family primar- Genetic linkage network. We include in Table 4 results
ily on Bayesian networks with strictly positive distributions, for the genetic linkage network EA4 [Fishelson and Geiger,
for the task of belief updating. This is necessary to grasp the 2002]. This is a large network, with N=1173, but relatively
power of the scheme when no pruning is involved in search. small induced width, w∗ = 15. This network contains a lot of
  In all the tables N is the number of nodes, K is the maxi- determinism (zero probability tuples). We did not use in AO
mum domain size, P is the number of parents of a variable, search any form of constraint propagation, limiting the algo-
w∗ is the induced width, i is the i-bound, d is the depth of the rithm to prune only the zero value nodes (their subproblems
i-cutset. For most problems, we tested a min-ﬁll pseudo-tree do not contribute to the updated belief). We note here that for
(MF) and one based on the depth minimizing heuristic (MD). i-bound 13 and 9, AO-C(i) is faster than AO-C-BE(i) be-