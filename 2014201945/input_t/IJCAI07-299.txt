                       When is Temporal Planning           Really   Temporal?

     William Cushing    and  Subbarao Kambhampati          Mausam     and  Daniel S. Weld
               Dept. of Comp. Sci. and Eng.                 Dept. of Comp. Sci. and Eng.
                 Arizona State University                     University of Washington
                     Tempe, AZ 85281                             Seattle, WA 98195


                    Abstract                          This architecture is appealing, because it is both conceptually
                                                      simple and facilitates usage of powerful reachability heuris-
    While even STRIPS planners must search for plans
                                                      tics, ﬁrst developed for classical planning [Bonet et al., 1997;
    of unbounded length, temporal planners must also
                                                      Hoffmann and Nebel, 2001; Nguyen et al., 2001; Helmert,
    cope with the fact that actions may start at any
                                                      2004]. Indeed, SGPlan, which won the International Plan-
    point in time. Most temporal planners cope with
                                                      ning Competition’s Temporal Planning Track in both 2004
    this challenge by restricting action start times to
                                                      and 2006, is such a progression planner.
    a small set of decision epochs, because this en-
                                                        There is an important technical hurdle that these tempo-
    ables search to be carried out in state-space and
                                                      ral state-space planners need to overcome: each action could
    leverages powerful state-based reachability heuris-
                                                      start at any of an inﬁnite number of time points. Most of these
    tics, originally developed for classical planning.
                                                      planners avoid this inﬁnite branching factor by a (seemingly)
    Indeed, decision-epoch planners won the Interna-
                                                      clever idea: restricting the possible start-time of actions to a
    tional Planning Competition’s Temporal Planning
                                                      small set of special time points, called decision epochs. Un-
    Track in 2002, 2004 and 2006.
                                                      fortunately, the popularity of this approach belies an impor-
    However, decision-epoch planners have a largely   tant weakness — decision epoch planners are incomplete for
    unrecognized weakness: they are incomplete. In    many planning problems requiring concurrency [Mausam and
    order to characterize the cause of incompleteness, Weld, 2006].
    we identify the notion of required concurrency,     Seen in juxtaposition with their phenomenal success in the
    which separates expressive temporal action lan-   planning competitions, this incompleteness of decision epoch
    guages from simple ones. We show that decision-   planners raises two troubling issues:
    epoch planners are only complete for languages in
    the simpler class, and we prove that the simple class 1. Are the benchmarks in the planning competition captur-
    is ‘equivalent’ to STRIPS! Surprisingly, no prob-     ing the essential aspects of temporal planning?
    lems with required concurrency have been included   2. Is it possible to make decision epoch planners complete
    in the planning competitions. We conclude by de-      while retaining their efﬁciency advantages?
    signing a complete state-space temporal planning
    algorithm, which we hope will be able to achieve    In pursuit of the ﬁrst question, we focused on characteriz-
    high performance by leveraging the heuristics that ing what makes temporal planning really temporal — i.e. dif-
    power decision epoch planners.                    ferent from classical planning in a fundamental way. This
                                                      leads us to the notion of required concurrency: the ability
                                                      of a language to encode problems for which all solutions are
1  Introduction                                       concurrent. This notion naturally divides the space of tem-
Although researchers have investigated a variety of architec- poral languages into those that can require concurrency (tem-
tures for temporal planning (e.g., plan-space: ZENO [Pen- porally expressive) and those that cannot (temporally simple).
berthy and Weld, 1994], VHPOP [Younes and Simmons,    What is more, we show that the temporally simple languages
2003]; extended planning graph: TGP [Smith and Weld,  are only barely different from classical, non-temporal, lan-
1999], LPG [Gerevini and Serina, 2002]; reduction to lin- guages. This simple class, unfortunately, is the only class for
ear programming: LPGP [Long and Fox, 2003]; and others), which decision epoch planners are complete.
the most popular current approach is progression (or regres- In pursuit of the second question, we show that the incom-
sion) search through an extended state space (e.g., SAPA [Do pleteness of decision epoch planners is fundamental: anchor-
and Kambhampati, 2003], TP4 [Haslum and Geffner, 2001], ing actions to absolute times appears doomed. This leaves
TALPlan [Kvarnström et al., 2000], TLPlan [Bacchus and the temporal planning enterprise in the unenviable position
Ady, 2001], and SGPlan [Chen et al., 2006]) in which a of having one class of planners (decision epoch) that are
search node is represented by a world-state augmented with fast but incomplete in fundamental ways, and another class
the set of currently executing actions and their starting times. of planners (e.g., partial order ones such as Zeno and VH-

                                                 IJCAI07
                                                  1852POP) that are complete but often unacceptably slow. For- An action, A, is given by a beginning transition begin(A),
tunately, we ﬁnd a way to leverage the advantages of both an ending transition end(A), an over-all condition o(A), and
approaches: a temporally lifted state-space planning algo- a positive, rational, duration δ(A).
rithm called TEMPO. TEMPO  uses the advantage of lift-
                                                      Deﬁnition 2 (Plans) A plan, P = {s1,s2,s3,...,sn},is
ing (representing action start times with real-valued variables                    s
and reasoning about constraints) from partial order planners, a set of steps, where each step, , is given by an action,
                                                      action(s), and a positive, rational, starting time t(s). The
while still maintaining the advantage of logical state informa-  P
tion (which allows the exploitation of powerful reachability makespan of equals
heuristics). The rest of the paper elaborates our ﬁndings. δ(P )=max(t(s)+δ(action(s)))  − min(t(s))
                                                                   s∈P                     s∈P

2  Temporal Action Languages                            A rational model of time provides arbitrary precision with-
Many different modeling languages have been proposed for out Real complications.
planning with durative actions, and we are interested in Deﬁnition 3 (Problems) A problem, P =(A,I,G), con-
                                         [
their relative expressiveness. The TGP language Smith and sists of a set of actions (A), an initial model (I), and a goal
          ]
Weld, 1999 , for example, requires that an action’s precon- condition (G).
ditions hold all during its execution, while PDDL 2.1.3 al-
lows more modeling ﬂexibility.1 We study various restric- Deﬁnition 4 (States) A (temporal) state, N, is given by a
tions of PDDL 2.1.3, characterized by the times at which model, state(N), a time, t(N), and a plan, agenda(N),
preconditions and effects may be ‘placed’ within an action. recording the actions which have not yet ﬁnished (and when
Our notation uses superscripts to describe constraints on pre- they started).
conditions, and subscripts to denote constraints on effects:
Lpreconditions is the template. The annotations are:    A precise formulation of plan simulation is long and unnec-
 effects                                              essary for this paper; see the deﬁnition of PDDL 2.1.3 [Fox
s  “at-start”                                         and Long, 2003].  Roughly, the steps of a plan, P =
e  “at-end”                                           {s1,...,sn}, are converted into a transition sequence, i.e., a
o: “over-all” (over the entire duration)              classical plan. Simulating P is then given by applying the
               o                                      transitions, in sequence, starting from the initial model (a
  For example, L  is a language where every action pre-
               s,e                                    classical state). Simulation fails when the transition sequence
condition must hold over all of its execution and effects may
                                                      is not executable, simulation also fails if any of the over-all
occur at start or at end. PDDL 2.1.3 does not deﬁne, or allow,
                                                      conditions are violated. In either case, P is not executable. P
effects over an interval of time: o is only used as an annota-
                                                      is a solution when the goal condition is true in the model that
tion on preconditions.
                                                      results after simulation.
  Many other language features could be included as possi-
ble restrictions to analyze; however, most end up being less Plans can be rescheduled; one plan is a rescheduling of
interesting than one might expect. For example, deadlines, another when the only differences are the dispatch times of
                                                      steps. Let s = delay(s, d) be the result of delaying a step
exogenous events (timed literals), conditional effects, param- s d       t(s)=t(s)+d              (s)=
eters (non-ground structures), preconditions required at inter- by units of time:        (and action
                                                      action(s)). Similarly, P  = delay(P, d) is the result of de-
mediate points/intervals inside an action, or effects occurring           P  = {     (s, d):s ∈ P }
at arbitrary metric points (as in ZENO) can all be compiled laying an entire plan: delay           . Has-
    Ls,o,e                                            tening steps or plans is the result of applying negative de-
into s,e [Smith, 2003; Fox et al., 2004]. In particular, an      s          d                     P
analysis of just Ls,o,e is simultaneously an indirect analysis lay. A step has slack in an executable plan when
              s,e                                     P \{s}∪{delay(s, −t)} is also an executable plan for every
of these syntactically richer languages. Naturally these com- t            d
pilations can have dramatic performance penalties if carried value of between 0 and . A step without slack is slackless,
out in practice; the purpose of such compilations is to ease likewise, a plan is slackless when every step is slackless, that
the burden of analysis and proof. Of course, we also exclude is, the plan is “left-shifted”.
some interesting language features (for the sake of simplic- Deﬁnition 5 (Completeness) A planner is complete with re-
ity), for example, metric resources and continuous change. spect to an action language L, if for all problems expressible
                                                      in L, the planner is guaranteed to ﬁnd a solution if one ex-
2.1  Basic Deﬁnitions                                 ists. A planner is optimal, with respect to language L and
Space precludes a detailed speciﬁcation of action semantics; cost function c, if for all solvable problems expressible in L,
thus, we merely paraphrase some of the relevant aspects of the planner is guaranteed to ﬁnd a solution minimizing c.A
the PDDL 2.1.3 semantics for durative actions [Fox and Long, planner is makespan optimal if it is optimal with makespan
2003].                                                as the cost function.
Deﬁnition 1 (Actions) A model is a total function mapping 2.2 Required Concurrency
ﬂuents to values and a condition is a partial function mapping
ﬂuents to values. A transition is given by two conditions: its We now come to one of the key insights of this paper. In
preconditions, and its effects.                       some cases it is handy to execute actions concurrently; for
                                                      example, it may lead to shorter makespan. But in other cases,
  1PDDL 2.1.3 denotes level 3 of PDDL2.1 [Fox and Long, 2003]. concurrency is essential at a very deep level.

                                                 IJCAI07
                                                  1853       P                             P
   Initially  True
            A [4]              A [4]             A [4]                A [4]               A [4]
    P
                G1 Q     GQ1                         G1  G2      R        RG                  G1  G2
    Q     Q                        Q                                      R
            B [2]              B [2]                    B [2]               B [2]               B [2]
                                                       G   G                    G
             G2 P            G2 P                      1    2                                      G2
            s                   e                 (c)L                 (d)Ls
         (a)Le                (b)Ls                  s,e                 s,e               (e)Le

Figure 1: Preconditions are shown above actions at the time point enforced; effects are depicted below. Action durations are shown in square
                                                    s  e
brackets. (a), (b), and (c): The ﬁrst three problems demonstrate that Le, Ls,andLs,e are temporally expressive, respectively. In the ﬁrst two
problems, every solution must have both A and B begin before either can end. In (c), every solution must have B contain the end of A.(d):
Modeling resources can easily lead to required concurrency. In this example, A provides temporary access to a resource R, which B utilizes
to achieve the goal. (e): B must start in the middle of A, when nothing else is happening, to achieve makespan optimality.
Deﬁnition 6 (Required Concurrency) Let                precondition of an action holds over its entire duration, the
P ={s1,...,sn} be a plan.  A step, s ∈   P ,iscon-    preconditions of action(s) hold immediately prior to apply-
current2 when there is some other step, s ∈ P ,so    ing its effects, i.e., in the ﬁnal model of P \{s}. Therefore
that either t(s) ≤  t(s) ≤  t(s)+δ(action(s))   or   P  =(P \{s}) ∪{delay(s, δ(action(s)))} is an executable
t(s) ≤ t(s) ≤ t(s)+δ(action(s)). A plan is concurrent rescheduling of P . The ﬁnal models in simulations of P and
when any step is concurrent, otherwise the plan is sequential. P  are identical, since both result from applying action(s)
A solvable planning problem has required concurrency when to the same model. By induction on the number of concur-
all solutions are concurrent.                         rent steps (note that P  has fewer concurrent steps), there is a
                                                                   P                        2
  To make this concrete, consider the plan in Figure 1(d). rescheduling of into a sequential solution.
The literals above the action denote its preconditions and be- Theorem 1 is interesting, because a large number of
                            G    R               A    temporal planners (TGP, TP4 [Haslum and Geffner, 2001],
low denote effects. Starting with and false, assuming     ∗
and B are the only actions, the problem of achieving G has HSP [Haslum, 2006], TLPlan [Bacchus and Ady, 2001], and
required concurrency. That is, both of the sequential plans (A CPT [Vidal and Geffner, 2004]) have restricted themselves to
before B or vice versa) fail to be executable, let alone achieve the TGP representation, which is now shown to be so simple
G.                                                    that essential temporal phenomena cannot be modeled! Note,
                                                      for example, that the common motif of temporary resource
Deﬁnition 7 (Temporally Simple / Expressive) An action utilization (Figure 1(d)) cannot be encoded in these represen-
        L                        L
language, ,istemporally expressive if can encode a prob- tations. Yet some of these planners did extremely well in the
                                     L
lem with required concurrency; otherwise is temporally last three International Planning Competitions. The reality:
simple.                                               the majority of the problems in the Temporal Track do not
2.3  Temporally Simple Languages                      require concurrency!
          Lo                                            Note that the proof of Theorem 1 demonstrates a signiﬁ-
Theorem 1   e is temporally simple (and so is the TGP rep- cantly stronger result than the theorem itself; not only does
resentation3).                                                         o
                                                      every problem in Le have sequential solutions, but there is
                       o
Proof: We will prove that Le is temporally simple by show- in fact a sequential rescheduling of every concurrent solu-
ing that every concurrent solution of every problem in the tion. This idea can be applied in reverse: problems in tempo-
language can be rescheduled into a sequential solution. rally simple languages can be optimally solved using classical
  Fix a concurrent solution, P , of a problem P =(A,I,G). techniques.
Without loss of generality, assume the step which ends last,
say s ∈ P , is a concurrent step.4 Since actions have effects Theorem 2 Let P be a planning problem in a temporally
                                                                                         
only at end, the model that holds after simulating all of P \{s} simple subset of PDDL 2.1.3, and let P be a correspond-
is identical to the model that holds immediately before apply- ing STRIPS problem where durations are ignored and every
ing the effects of action(s) when simulating P . Since every action is collapsed into a single transition.5
                                                        There is a linear-time computable bijection between the
  2
   Actions execute over closed intervals in PDDL 2.1.3, so actions slackless solutions of P and the solutions of P.
with overlapping endpoints are executing concurrently — at an in-
stantaneous moment in time.                             In particular, with the appropriate heuristics, optimal so-
  3
   While the TGP representation is temporally simple, there is no lutions to P can be found by solving P instead. That
perfect correspondence to any strict subset of PDDL 2.1.3, because is, STRIPS and temporally simple languages are essentially
they have slightly different semantics and hence different mutex
     o                                                equivalent; though we do not delve into the details, one can
rules. Le is extremely close, however.
                                                   show this correspondence in a formal manner using Nebel’s
  4If not, consider the problems P =(A,I,S) and P =
(A,S,G) where S is the model that holds after simulating just past
all the concurrent steps of P ; the sufﬁx of P is a sequential solution 5This transformation is performed by MIPS, LPG, and SGPlan:
to the latter problem, and the argument gives a sequential reschedul- see those planners for details [Edelkamp, 2003; Gerevini and Serina,
ing of the preﬁx of P solving the former problem.     2002; Chen et al., 2006].

                                                 IJCAI07
                                                  1854framework of expressive power [Nebel, 2000].6
Proof: We give a linear-time procedure for mapping solutions
of the STRIPS problem to slackless solutions, which is the
bijection of the theorem. However, we omit showing that the
inverse is a linear-time computable total function on slackless
                                             o
solutions. We also omit proof for any case besides Le; the
same basic technique (PERT scheduling) can be applied, with
minor modiﬁcations, to every other case.
                            
  Consider some solution of P , P = A1,A2,...,An. As-
sociate with every literal, f=v, the time at which it was
achieved, τ(f=v), initially 0 if v is the initial value of f,
and -1 otherwise. Find the earliest dispatch time of each Ai,
                             7
τ(Ai), by the following procedure ; initializing τ(A1) to 
and i to 1:
                                                 
 1. For all (f=v) ∈ eﬀects(Ai),ifv = argmax v τ(f=v )
    set τ(f=v)=τ(Ai)+δ(Ai)
 2. Set τ(Ai+1)=     +  max({τ(f=v):(f=v)       ∈
    precond(Ai+1)}∪{τ(Ai)+δ(Ai)   − δ(Ai+1)})
 3. Increment i, loop until i>n

  Then P = {si : action(si)=Ai and t(si)=τ(Ai)} is a
slackless rescheduling of P , preserving the order of the ends Figure 2: The taxonomy of temporal languages and their ex-
of actions, starting each action only after all of its precon- pressiveness; those outlined by dotted lines are discussed in
ditions have been achieved. In particular, P is a slackless the text.
solution. 2                                             What is surprising is that there is a different technique to
                                                      exploit allowing effects at multiple times, one that does not
2.4  Temporally Expressive Languages                  even require any preconditions at all.
                                s
We have already seen one language, Ls,e, which can express
                                                      Theorem 5  Ls,e is temporally expressive.
problems with required concurrency (Figure 1(d)). Of course,
                                                                                                 s  e
the full language, PDDL 2.1.3, is also a temporally expressive Proof (of Theorems 3, 4, and 5): We prove that Le, Ls, and
language. It is no surprise that by adding at-start effects to Ls,e are temporally expressive by demonstrating problems in
 o
Le one can represent required concurrency, but it is interest- each language that require concurrency. See Figure 1(a), (b),
ing to note that merely shrinking the time that preconditions and (c), respectively. 2
                                  s
must hold to at-start (i.e. the language Le) also increases ex-
                    s
pressiveness. In fact, Le is a particularly special temporally 2.5 Temporal Gap
expressive language in that it exempliﬁes one of three funda- Figure 2 places the languages under discussion in the context
mental kinds of dependencies that allow modeling required of a lattice of the PDDL sub-languages, and shows the divide
concurrency.                                          between temporally expressive and simple. We have already
                                                                 o
            s                                         shown that Le, our approximation to TGP, is temporally sim-
Theorem 3 Le is temporally expressive.
             s  e                                     ple. Surprisingly, the simple syntactic criteria of temporal
  The dual of Le, Ls, is an odd language — all preconditions gap is a powerful tool for classifying languages as temporally
must follow effects. Nonetheless, the language is interesting expressive or temporally simple.
because it is also one of the three minimal temporally expres- Roughly, an action has temporal gap when there is no sin-
sive languages.                                       gle time point in the action’s duration when all preconditions
            e                                         and effects hold together (which is easy to check via a simple
Theorem 4 Ls is temporally expressive.
                                                      scan of the action’s deﬁnition). A language permits temporal
  It is not surprising that adding at-start effects (to a lan- gap if actions in the language could potentially have tempo-
guage allowing at-end effects) allows modeling required con- ral gap, otherwise a language forbids temporal gap. We show
currency, because there is an obvious technique to exploit the that a language is temporally simple if and only if it forbids
facility: make a precondition of some action available only temporal gap. This makes intuitive sense since without a tem-
during the execution of another action. Figure 1(d) is a good poral gap, the duration of an action becomes a secondary at-
example.                                              tribute such as cost of the action.8
  6The basic idea is to compile the scheduling into the planning 8This understanding of temporal expressiveness in terms of tem-
problem.                                              poral gap is reminiscent of the “unique main sub-action restric-
  7Technically, one must take  to be some positive value by the tion” [Yang, 1990] used in HTN schemas to make handling of task
requirements of PDDL 2.1.3. In a temporally simple language with- interactions easy. The resemblance is more than coincidental, given
out a non-zero separation requirement (such as TGP) one can take  that temporal actions decompose into transitions in much the same
as 0 instead.                                         way as HTNs specify expansions (see Section 2.1).

                                                 IJCAI07
                                                  1855Deﬁnition 8 A before-condition is a precondition which is 3 Decision Epoch Planning
required to hold at or before at least one of the action’s ef- The introduction showed that most temporal planners, no-
fects. Likewise, an after-condition is a precondition which is tably those dominating the recent IPC Temporal Tracks, use
required to hold at or after at least one of the action’s effects. the decision epoch (DE) architecture. In this section, we look
  A gap between two temporal intervals, non-intersecting in detail at this method, exposing a disconcerting weakness:
and not meeting each other, is the interval between them incompleteness for temporally expressive action languages.
(so that the union of all three is a single interval). An ac- SAPA [Do and Kambhampati, 2003], TLPlan [Bacchus
                                                                                ∗
tion has temporal gap if there is a gap between its precondi- and Ady, 2001], TP4, and HSPa [Haslum and Geffner, 2001],
tions/effects, i.e., if there is                      among others, are all decision-epoch based planners. Rather
  a gap between a before-condition and an effect, or  than consider each in isolation, we abstract the essential el-
  a gap between an after-condition and an effect, or  ements of their search space by deﬁning DEP. The deﬁning
                                                      attribute of DEP is search in the space of temporal states. The
  a gap between two effects.
                                                      central attribute of a temporal state, N, is the world state,
  Actions without temporal gap have a critical point: the state(N). Indeed, the world state information is responsible
(unique) time at which all the effects occur.         for the success and popularity of DEP, because it enables the
                                                      computation of state-based reachability heuristics developed
Theorem 6 A sub-language of PDDL 2.1.3 is temporally  for classical, non-temporal, planning.
simple if and only if it forbids temporal gap.          We deﬁne  DEP’s search space by showing how temporal
                                                      states are reﬁned; there are two ways of generating children:
Proof: We begin by showing that forbidding temporal gap is
necessary for a language to be temporally simple.       Fattening: Given a temporal state, N, we generate a child,
  Languages permitting a gap between a before-condition NA, for every action, A ∈A. Intuitively, NA represents an
and an effect, a gap between an after-condition and an effect, attempt to start executing A; thus, NA differs from N only
                                           s  e
or a gap between effects are super-languages of Le, Ls,or by adding a new step, s,toagenda(NA) with action(s)=A
Ls,e, respectively. By Theorems 3, 4, and 5, such languages and t(s)=t(N).
are temporally expressive. Therefore temporally simple lan-
                                                                                                N
guages require that, for every action, all before-conditions Advancing Time: We generate a single child, epoch ,by
hold just before any effect is asserted, all after-conditions simulating forward in time just past the next transition in the
                                                             N     =        (N,d+  )      d=min  {t : s ∈
hold just after any effect is asserted, and that all effects are agenda: epoch simulate , where
                                                             (N)    (t=t(s)   t=t(s)+δ(      (s)))    t ≥
asserted at the same time. That is, a temporally simple lan- agenda and    or           action    and
                                                      t(N)}
guage must forbid temporal gap.                            .
  For the reverse direction, i.e., the interesting direction, we Our deﬁnition emphasizes simplicity over efﬁciency. We
show that any language forbidding temporal gap is tempo- rely on simulate to check action executability; inconsistent
rally simple, by demonstrating that slackless solutions to any temporal states are pruned. Obviously, a practical implemen-
problem can be rescheduled into sequential solutions, a gen- tation would check these as soon as possible.
eralization of the proof of Theorem 1. Fix some slackless The key property of DEP is the selection of decision epochs,
solution to some problem in a language forbidding temporal that is, the rule for advancing time. In order for DEP to branch
gap.                                                  over action selection at a given time point, time must have ad-
  Consider the sequence of critical points in the slackless so- vanced to that point. Since time always advances just past the
lution, along with the models that hold between them, i.e., earliest transition in the agenda, DEP can only choose to start
M0,c1,M1,c2,...,Mn−1,cn,Mn, where the  ci are critical an action when some other action has just ended, or just be-
points and the Mi are models. It is trivial to insert an arbitrary gun. Conversely, DEP is unable to generate solutions where
amount of delay between each critical point, lengthening the the beginning of an action does not coincide with some tran-
period of time over which each model holds, without altering sition. Forcing this kind of behavior is surprisingly easy.
them, by rescheduling steps. For example, multiplying each
                                                      Theorem 7  DEP is incomplete for temporally expressive lan-
dispatch time by the maximum duration of an action achieves
                                                      guages.
a sequential rescheduling preserving the sequence. For each
                                                                                                   Ls Le
critical point ci, all of that action’s before-conditions hold in Proof: It sufﬁces to show that DEP is incomplete for e, s,
                                                          L
Mi−1 and all of its after-conditions hold in Mi, because the and s,e to show that DEP is incomplete for all temporally
original plan is executable. Since those models are unaltered expressive languages, by Theorem 6 (see Figure 2).
                                                                          L
in the sequential rescheduling, the rescheduling is also exe- Figure 1(c) gives a s,e example which stumps DEP—
cutable, and thus a solution. 2                       achieving the goal requires starting B in the middle of A,but
  Coming back to the space of languages, we have al-  there are no decision epochs available in that interval. DEP
ready noted that several popular temporal planners (e.g. TGP, can solve the problems in Figure 1(a) and (b), but not minor
        ∗                                                                                            A
TP4, HSP , TLPlan, CPT) restrict their attention to tempo- modiﬁcations of these problems. For example, altering to
                                                            G             B
rally simple languages, which are essentially equivalent to delete 2,in(a), forces to start where there are no decision
                                                             2
STRIPS. The next section shows that most of the planners epochs.
which claim to address temporally expressive languages, are Theorem 8 DEP is complete for temporally simple sub-
actually incomplete in the face of required concurrency. languages of PDDL 2.1.3, but not makespan optimal.

                                                 IJCAI07
                                                  1856