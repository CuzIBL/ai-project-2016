                               Planning Via Petri Net Unfolding

                 Sarah Hickmott1, Jussi Rintanen2, Sylvie Thiebaux´    2,LangWhite1
                                         National ICT Australia
             1School of Electrical & Electronic Engineering, The University of Adelaide, &
                  2Computer Sciences Laboratory, The Australian National University

                    Abstract                          net, which is acyclic and avoids certain conﬂicts. In Petri net
                                                      analysis, where the problem is often to prove the absence of
    The factored state representation and concurrency deadlocks, unfolding amounts to a breadth-ﬁrst search which
    semantics of Petri nets are closely related to those stops when the generated occurrence net represents all mark-
    of concurrent planning domains, yet planning and  ings reachable in the original net. The size of the unfolded
    Petri net analysis have developed independently,  net is bounded below by and is typically exponentially larger
    with minimal and usually unconvincing attempts at than the size of the original Petri net, but is bounded above
    cross-fertilisation. In this paper, we investigate and by and is typically exponentially smaller than the size of the
    exploit the relationship between the two areas, fo- state space it represents. Hence searching in unfolding space
    cusing on Petri net unfolding, which is an attractive offers potential gains over state space search.
    reachability analysis method as it naturally enables
                                                        In Section 2, we provide the necessary background on Petri
    the recognition and separate resolution of indepen- nets and unfolding, pointing out the differences with the ap-
    dent subproblems. On the one hand, based on un-
                                                      proximate reachability analysis performed by the planning
    folding, we develop a new forward search method
                                                      graph [Blum and Furst, 1997]. In Section 3, we give a trans-
    for cost-optimal partial-order planning which can lation from planning problems to 1-safe place transition nets,
    be exponentially more efﬁcient than state space
                                                      low level nets to which off-the-shelf unfolding tools apply.
    search. On the other hand, inspired by well-known
                                                        In Section 4, we describe our new planning method. A
    planning heuristics, we investigate the automatic
                                                      rather costly option would be to ﬁrst build the complete un-
    generation of heuristics to guide unfolding, result-
                                                      folded net, and then extract from it the partially ordered plans
    ing in a more efﬁcient, directed reachability analy-
                                                      of interest in time linear in their size. To capitalise on the
    sis tool for Petri nets.
                                                      approach for planning, we instead embed heuristic search
                                                      into the unfolding, resulting in a directed model-checker
1  Introduction                                       [Edelkamp et al., 2001] for Petri nets. We show that mono-
                                                                                    m
Petri nets are traditionally used for modelling and analysing tonic planning heuristics such as h [Haslum and Geffner,
distributed systems [Murata, 1989]. They provide a compact 2000] can be directly computed from the original Petri net,
description of the state space in much the same way as plan- and guide the unfolding towards minimal cost plans without
ning operators do, but additionally represent independence loss of completeness.
(concurrency) and causal relations between actions in a way Finally, in Section 5, we present and analyse experimen-
that enables the recognition and separate resolution of inde- tal results obtained with benchmark problems from the Inter-
pendent subproblems. This confers, e.g., the ability to rea- national Planning Competition and with a standard Petri net
son about partially ordered sets of actions without having to benchmark. Proofs are omitted on grounds of space and are
consider their interleavings. This was exploited early on by available in the technical report [Hickmott et al., 2006].
Godefroid and Kabanza [1991] to synthesize reactive plans.
  Nevertheless, it is fair to say that work since then has failed 2 Petri Nets and Unfolding
to sufﬁciently develop and utilize the connections between
the two areas. A recent exception is Edelkamp and Jabbar’s 2.1 Place-Transition Net
[2006] work on applying planning via heuristic search to de- We consider low level Petri nets called place-transition (PT)
tecting deadlocks in Petri nets. The primary goal of our work, nets. A PT-net (see left-hand side of Figure 1) consists of a
by contrast, is to determine whether techniques developed for net N and its initial marking M0. The net is a directed, bipar-
Petri net analysis could be successfully applied to planning. tite graph. The two types of nodes are places and transitions,
  We focus on Petri net unfolding [McMillan, 1992; Esparza which represent the state variables and the events of the un-
et al., 2002],anexact reachability analysis technique which is derlying system. Arcs, which capture the dynamics of the
particularly attractive in that it preserves and exploits much of system, are directed from places to transitions and vice versa.
the structure inherent in the Petri net. The unfolding process The marking M of a PT-net represents the state of the system
generates, forward, a simpler type of net called an occurrence it models. It assigns to each place 0 or more tokens.

                                                 IJCAI07
                                                  1904Deﬁnition 1 A PT-net is a 4-tuple (P, T, F, M0) where P path through the net in which the events in its causal history
and T are disjoint ﬁnite sets of places and transitions, re- are not in conﬂict.
spectively, F :(P × T ) ∪ (T × P ) →{0, 1} is a ﬂow re-
lation indicating the presence (1) or absence (0) of arcs, and 2.3 Conﬁgurations
M0 : P → IN is the initial marking.                   To understand how the unfolding is built, the most important
             •                                        notions are that of a conﬁguration and the local conﬁguration
  The preset  x  of a node  x in the net is the set   of an event. A conﬁguration represents a possible partial run
{ ∈   ∪   | (   )=1}.Thepostset    • of a node is the
 y  P   T F  y,x                  x                   ofthenet.ItisanysetofeventsC such that:
set {y ∈ P ∪ T |F (x, y)=1}. For simplicity, we assume that
every transition has non-empty preset and postset. A partic- 1. C is causally closed, that is if any event is in the con-
                                  ∀  ∈      (  ) ≤        ﬁguration, then so are all its ancestors in the occurrence
ular marking M enables a transition t if p PFp, t                             
M(p). The occurrence, or ﬁring, of transition t absorbs a to- net: ∀e ≤ e, e ∈ C ⇒ e ∈ C.
ken from each of its preset places and produces a token in 2. C contains no forward conﬂict — this is motivated by
each of its postset places, thus moving the net from M to the the fact that two events in forward conﬂict cannot both
              ( )=   ( ) −  (   )+   (   ) ∀ ∈           occur (in any order or simultaneously) in the same run
new marking M  p    M  p    F p, t  F  t, p p   P .                                      •    •
This corresponds to a state transition of the modelled system. of the net: ∀ e1,e2 ∈ C, e1  = e2 ⇒ e1 ∩ e2 = ∅.
A set of transitions T  is concurrently enabled at the marking                             {           }
                                                     For instance, in the ﬁnite preﬁx in Figure 1, e1, e3, e4, e5
M  if it is possible for all t ∈ T to occur simultaneously, viz. is a conﬁguration. A conﬁguration C can be associated with
∀  ∈           (   ) ≤   ( )
 p   P    t∈T  F p, t M  p . For instance, in the net of a marking Mark(C) of the original net by identifying which
Figure 1, transitions 1 and 3 are concurrently enabled for the conditions will contain a token after the events in C are ﬁred
                                                                                                  •  •
given marking, as are transitions 2 and 3. Conversely, transi- from the initial marking: Mark(C)=ϕ((B0 ∪ C )\ C),
tions 1 and 2 are in forward conﬂict, which means that, whilst where C• = {e•|e ∈ C} and •C = {•e|e ∈ C}.Thatis,
each is individually enabled, only one of them can ﬁre. Firing the marking of conﬁguration C identiﬁes the resultant state
transitions 2 and 3 (in any order or concurrently) followed by of the original Petri net when (only) the events in C oc-
transition 5 results in one token each in places f and g.Wesay cur. For instance, in Figure 1, the marking of conﬁguration
that a PT-net is n-safe if the number of tokens in each place {e1, e3, e4, e5} is ϕ({c6, c8})={g, b}.
can never exceed n. In this paper, we consider 1-safe nets. The local conﬁguration of an event e, denoted [e], consists
                                                      of that event and all of its ancestors. It is the minimal conﬁg-
2.2  Unfolding the Place-Transition Net               uration containing e. For example, [e5]={e1, e3, e4, e5}.A
Unfolding is a method for reachability analysis which ex- set of conditions can be simultaneously marked if the union of
ploits and preserves concurrency information. In planning the local conﬁgurations of their presets forms a conﬁguration.
terms, the unfolding approach allows searching for partially The unfolding process involves identifying which transitions
ordered plans without considering unnecessary interactions are enabled by those conditions, currently in the occurrence
between actions. The unfolding of a PT-net produces an oc- net, that can be simultaneously marked. The identiﬁed tran-
currence net whose nodes are called conditions and events. sitions are referred to as the possible events. A new instance
These represent particular occurrences of the places and tran- of each is added to the occurrence net, as are instances of the
sitions, respectively, in possible runs of the original net from places in each of their postsets.
the initial marking. The unfolding achieves this by eliminat- 2.4 Finite Complete Preﬁx of Unfolded net
ing cycles and backward conﬂicts. Two transitions that output
                                                      In most cases, the unfolding β of a Petri-net is inﬁnite. For
to the same place are in backward conﬂict; by eliminating this                                 
we know exactly which transitions were ﬁred to obtain a par- this reason, we seek a complete ﬁnite preﬁx β of β, one
                                                      which contains as much information as β. Formally, the pre-
ticular marking. In planning terms, the elimination of back- 
ward conﬂicts achieves the property of post-uniqueness of the ﬁx β of β is complete if for every reachable marking M,
                                                                               ∈  
action set [Backstrom and Nebel, 1995], which implies that there exists a conﬁguration C β such that
we know the exact set of actions that causes a state variable 1. Mark(C)=M,and
to have a certain value at some point in the plan.      2. for every transition t enabled by M there exists a con-
  The unfolding of a PT-net N =(P, T, F, M0) is β =       ﬁguration C ∪{e} such that e/∈ C and ϕ(e)=t.
(     )           =(        )
 ON, ϕ ,whereON      B,E,F    is an occurrence net and  The key to obtaining a complete ﬁnite preﬁx is to identify
ϕ is a homomorphism from ON to N, a mapping from con- those events at which we can cease unfolding without loss of
ditions B and events E to places P and transitions T respec- information. Such events are referred to as cut-off events and
tively. The occurrence net starts with conditions representing are deﬁned in terms of an adequate order on conﬁgurations
the places initially marked in the PT-net, that is, ϕ maps the [McMillan, 1992; Esparza et al., 2002]. In the following,
set B0 of conditions which have an empty preset one-one onto ⊕E
                          ( ) ≥ 1                     C     denotes a conﬁguration that extends C with the ﬁnite
the set of places p such that M0 p .                  set of events E disjoint from C.
  The right-hand side of Figure 1 shows a preﬁx of the un-                    ≺
folding of the PT-net example in the left-hand side. Notice the Deﬁnition 2 A partial order on ﬁnite conﬁgurations is ad-
multiple instances of place g for example, due to the different equate if
paths through which it can be reached. Note also that tran- 1. ≺ is well founded,
sition 0 does not appear in the unfolding, as there exists no 2. C1 ⊂ C2 ⇒ C1 ≺ C2, and

                                                 IJCAI07
                                                  1905                                                             g (c17)
                                                                                                      g (c15)
                                  b (c1) 3 (e3) e (c5) 5 (e12)

                                                             f (c18)                    c (c10)
                                                                                 1 (e7)        4 (e11) f (c16)
                                         2 (e2) d (c4)

                     g            a (c2)
                                                             g (c6) 7 (e6) a (c9) 2 (e8) d (c11)
                                         1 (e1)
                                               c (c3) 4 (e4)
                                                                                                      g (c13)
                     f

                                                             f (c7) 6 (e5) b (c8) 3 (e9) e (c12) 5 (e10)

                                                                                                      f (c14)
 Figure 1: Example PT-net (left). Finite Preﬁx of its Unfolding (right). Places=circles, transitions=squares and tokens=dots.


 3. ≺ is preserved by ﬁnite extensions: if C1 ≺ C2 and Algorithm 1 The MOLE Unfolding Algorithm
        (   )=       (  )
    Mark C1     Mark  C2 , then for all ﬁnite extensions Add the conditions in B0 to the preﬁx
      ⊕E         ⊕E          E     E
    C1   1 and C2   2 such that 1 and 2 are isomorphic, Initialise the priority queue with the events possible in B0
              ⊕E   ≺    ⊕E
    we have C1   1   C2    2                          while the queue is not empty:
Without loss of information, or in other terms, without threat remove the ﬁrst event in the queue
to completeness, we can cease unfolding from an event e,ife if it is not a cut-off
takes the net to a marking which can be caused by some other   Add the event and its postset to the preﬁx
event e such that [e] ≺ [e]. This is because the events (and Identify the new possible events and
thus markings) which proceed from e will also proceed from     insert them in the queue
e. Relevant proofs can be found in [Esparza et al., 2002]: endif
                                                      endwhile
Deﬁnition 3 Let ≺ be an adequate partial order. An event e
                                                      Add the postsets of all cut-off events to the preﬁx
is a cut-off event with respect to ≺ if the preﬁx contains some
event e such that Mark([e]) = Mark([e]) and [e] ≺ [e].
  MOLE1  is a freeware program which unfolds 1-safe PT-
nets. It uses an adequate order ≺ on conﬁgurations which is bound if there is no concurrency at all [Esparza et al., 2002].
based on comparing their cardinality. This is reﬁned by com- The presence of concurrency typically leads to preﬁxes expo-
parisons based on Parikh-vectors and the Foata normal form nentially smaller. This is because the unfolding builds a space
to make the order strict and thus minimise the size of the gen- of partially ordered sets of events and avoids the combinato-
erated preﬁx [Esparza et al., 2002]. The preﬁx on the right- rial interleavings of events that can be handled concurrently.
hand side of Figure 1 is the complete ﬁnite preﬁx that MOLE
generates for our example. The events e10, e11,ande12 are 2.6 Unfolding vs Planning Graph
all cut-off events. This is because each of their local conﬁg-
urations, ﬁrstly, has the same marking as the local conﬁgura- The reader might ﬁnd it useful to view the unfolding as a
tion of event e4,ie.{f, g}, and, secondly, is greater than the powerful planning graph [Blum and Furst, 1997], where con-
local conﬁguration of event e4 with respect to the adequate ditions and events play the role of the graph’s proposition
partial order implemented by MOLE. Notice that the ﬁnite and action nodes, respectively. There are a number of impor-
preﬁx of the unfolding ceases at cut-off events, even though tant differences, however. Firstly, whilst the planning graph
resulting conditions could indeed enable other actions. performs an approximate reachability analysis, the unfolding
                                                      computes reachability exactly: a by-product of the Petri net
2.5  Unfolding Algorithm                              semantics is that all mutexes (not just binary ones) are prop-
MOLE  builds the complete ﬁnite preﬁx following Algo- agated and accounted for when determining sets of possible
rithm 1. The algorithm maintains a priority queue of possible events. Secondly, the unfolding duplicates nodes as needed
events in increasing order of ≺ wrt. their local conﬁguration. to guarantee post-uniqueness, i.e., that conditions (proposi-
The expensive part of the algorithm is the computation of the tion nodes) have a unique event (action node) as predecessor.
possible events which is exponential in the maximal size of A consequence of these differences is that plans can be ex-
the presets of the transitions; see [Esparza et al., 2002] for tracted from the unfolding in time linear in their length, while
details. The size of the preﬁx obtained decreases with the plan extraction from the planning graph requires search. Fi-
strength of the ordering and with the amount of concurrency nally, there is no global notion of level in the unfolding. In-
in the original net. When the ordering is strict, the size of stead, there is an asynchronous vision of time which confers
the unfolding is bounded above by that of the reachable state on independent subproblems their own local levels. Conse-
space of the net (up to a small factor) and only equals that quently, the unfolding lends itself more easily to the gener-
                                                      ation of partially-ordered plans with optimal cost, while the
  1
   http://www.fmi.uni-stuttgart.de/szs/tools/mole/    graph is better suited to producing step-optimal parallel plans.

                                                 IJCAI07
                                                  19063  Translating Planning   Problems into PT-Nets                          a    b     d
To use an unfolding tool such as MOLE for planning, we need
                                                                                  
to turn planning problems into 1-safe place-transition nets,            x1        x2
which these tools accept as an input. In fact, 1-safety rather
helps in representing propositional planning operators. When
reading the truth value of a boolean variable as the presence
                                                                                   
or absence of a token, allowing multiple tokens in a place               a    b    d
would be meaningless. At best, it would require non-trivial
book-keeping, since multiple tokens in a place resulting from Figure 2: The PT-Net translation of operator x =
repeatedly making a variable true would all need to be re- {a, ¬b}, {¬a, d} (after transformation into two 1-safe op-
                                                                                            
moved to make this variable false.                    erators with positive preconditions x 1 = {a, b, d}, {¬a, a}
  Our translation operates in three steps. In the ﬁrst step 1-              
                                                      and x 2 = {a, b, d}, {¬a a, ¬d, d}).
safety is established by replacing every planning operator by
several 1-safe ones (the concept of 1-safe operator is deﬁned
below). In the second step, we eliminate negative precon-
ditions which are lacking in PT-nets. In the third step, the In the second step of our translation, negative preconditions
                                                      ¬
resulting problem is ﬁnally mapped onto a PT-net. We prove a are eliminated in the usual way [Gazen and Knoblock,
that our translation is correct. We also characterise the extent 1997], by replacing them by corresponding positive precon-
                                                                                        
to which the notion of concurrency in the PT-net we obtain ditions a and forcing every state variable a to have the value
                                                                                           
matches the independence-based notion of concurrency com- opposite to the value of a. An operator p, e over A is re-
                                                                                 
monly used in planning.                               placed by p ,e over A∪A where p =(p∩A)∪{a|¬a ∈ p},
                                                      and e = e ∪{¬a|a ∈ e ∩ A}∪{a|¬a ∈ e}.
3.1  Establishing 1-safety                              For instance, the operator o1 = {a, ¬b, c, d, ¬e}, {¬a, b}
                                                                                                  
Let A be a set of state variables. The set of literals over above is replaced with o1 = {a, b, c, d,e}, {¬a, b, a, ¬b}.
A is L =  A ∪{¬a|a  ∈  A}.Thecomplement   l of a lit-
     ∈                 =  ¬      ¬  =         ∈
eral l  L is deﬁned by a   a and  a    a for a  A.    3.3  Correctness
For sets e of literals, we deﬁne e = {l|l ∈ e}.Astate
                                                                 ( )
s : A  →{0,  1} assigns values 0 or 1 to the state vari- We deﬁne S o as the set of operators obtained from o by
ables. A planning operator over A is a pair p, e such that performing the above two steps. Since a is an effect literal
                                                         ¬                    ¬                   
p ∪ e ⊆ L. A planning operator p, e has positive precon- iff a is an effect literal, and a is an effect literal iff a is an
                                                                                           ( )
ditions if p ⊆ A.Itis1-safe if e ⊆ p, that is, if all effect effect literal, executing every operator in S o preserves the
                                                                                    ∈     ( )+  ()=1
literals appear (negatively) in the preconditions. A planning property that for every state s and a A, s a s a .
problem is a quadruple A, I, O, G where A is a set of state Instead of executing the operator o, we can always execute
variables, I : A →{0, 1} is an initial state, O is a set of exactly one of the operators in S(o) with the same effects.
planning operators, and G is a set of goal literals.  This operator depends on the current state and has the prop-
  We map every planning problem to an equivalent one with erty that every state variable mentioned in its effects actually
the property that every operator has positive preconditions changes when the operator is executed, which is what the def-
and is 1-safe. We start by establishing 1-safety. An opera- inition of 1-safety requires.
tor o = p, e is ﬁrst replaced by 2|e\p| 1-safe operators as The following theorem establishes the correctness of our
             ⊆   \                                   translation. The proof is based on the fact that in any operator
follows. Let e  e   p be a set of effect literals. We de-          
ﬁne a new operator that works like o when o changes exactly sequence any o ∈ S(o) can be replaced by o,ando can be
the literals e (in addition to those literals in e ∩ p which o replaced by exactly one operator in S(o).
clearly requires to change). A 1-safe operator that changes
                                                      Theorem 1  Let R = A, I, O, G be any planning problem.
exactly these literals and retains the values of other effects of 
                                                          =   ∪    ∪      ( )                     :
o is p ∪ e ∪ (e\p)\e ,e ∪ e ∩ p.                    Let R     A   A, I, o∈OS o ,G . Then for all states s
                                                                                                
  Take e.g. p={a, ¬b, c} and e={¬a, b, d, ¬e}. The operator A →{0, 1} and s : A∪A →{0, 1} such that s (a)+s (a)=
                                                                   
o=p, e is replaced with the four 1-safe operators oi =pi,ei 1 and s(a)=s (a) for all a ∈ A, s is a reachable state of R
                                                                                       
given below along with the respective values for e.  if and only if s is a reachable state of R .
 p = {a, ¬b, c}      e = {¬a, b, d, ¬e}
                                        
 p1 = {a, ¬b, c, d, ¬e} e1 = {¬a, b}   e1 = {}
                                                     3.4  Mapping to PT-Nets
 p2 = {a, ¬b, c, ¬d, ¬e} e2 = {¬a, b, d} e2 = {d}
                                        
 p3 = {a, ¬b, c, d, e} e3 = {¬a, b, ¬e} e3 = {¬e}     Finally we map the resulting planning problem to a PT-net as
                                        
 p4 = {a, ¬b, c, ¬d, e} e4 = {¬a, b, d, ¬e} e4 = {d, ¬e} follows. Let R = A, I, O, G be a planning problem. We
                                                      deﬁne a PT-net pnet(R)=P, T, F, M0 such that
3.2  Eliminating Negative Preconditions                 • the places are P = A ∪ A,
                                               
For a given set A of state variables, we introduce the set A = • the transitions are T = ∪o∈OS(o)
{a|a ∈ A} of new state variables. The idea is that a is true • the set F of arcs is obtained from t = p, e∈T as
exactly when a is false.                                  {(a, t) | a ∈ p}∪{(t, a) | a ∈ e or a ∈ p and ¬a  ∈ e}

                                                 IJCAI07
                                                  1907  • for all a ∈ A, M0(a)=1iff I(a)=1and  M0(a)=1     MOLE  actually already supports this option. Therefore, it suf-
                                   
    iff I(a)=0,andforalla   ∈  A ∪ A, M0(a)=0or       ﬁces to augment the planning operator set with a dummy op-
    M0(a)=1.                                          erator whose precondition is the goal, and to require MOLE to
                                                      stop whenever an event labelled with the corresponding tran-
Figure 2 illustrates this mapping for a single operator.
                                                      sition is dequeued. The local conﬁguration of this event is a
  For every reachable marking M and every place a ∈ P in
                                                      partially ordered plan for the problem. Further, owing to the
the resulting PT-net, M(a) ≤ 1. The proof of the following
                                                      fact that MOLE’s queue orders events by increasing local con-
theorem is by induction on the length of transition sequences
                                                      ﬁguration cardinality, this plan contains the fewest actions.
leading to M.
                                                        The cardinality-based ordering relation used by MOLE has
Theorem 2 Let R be a planning problem. Then the PT-net a serious drawback for planning however, as it leads MOLE to
pnet(R) is 1-safe.                                    perform a breadth-ﬁrst search. A natural idea is to change the
                                                      ordering to provide better guidance towards the goal, while
3.5  Concurrency                                      generalising from the restricted notion of optimality currently
We are interested in the notion of concurrent or partially- in place by considering arbitrary additive action costs.
ordered plans which allow the simultaneous execution of sev- It turns out that given an arbitrary monotonic heuristic, it is
eral operators. The question arises if the notion of concur- possible to build an adequate order which implements A*, let-
rency used in connection with the PT-nets obtained by our ting the heuristic guide the unfolding towards optimal plans
translation coincides with the standard notion of concurrency (adequacy ensures that we are retaining completeness of the
in AI planning. It turns out that this is not the case. preﬁx generated). This rejoins the work on directed model-
  The standard notion of concurrency in planning is indepen- checking pioneered by Edelkamp et al. [Edelkamp et al.,
dence: two operators p1,e1 and p2,e2 are independent iff 2001]. A heuristic h estimates the optimal cost of reaching
pi ∩ ej = ∅ and ei ∩ ej = ∅ for i, j ∈{1, 2} and i  = j.This the goal from a given state and is such that h(s)=0at goal
captures the intuition that they can be executed in any order, states. Let cost(o) be the (positive) cost of operator o,and
yielding the same result in both cases.               res(o, s) be the result of applying o in state s; h is mono-
  Independence does not in general imply concurrency in tonic iff h(s) ≤ h(res(o, s)) + cost(o) for all non-goal states
the PT-net sense. For instance, consider the two indepen- s and operators o applicable in s. These deﬁnitions easily
dent planning operators {a}, {b} and {a}, {c}.Thecor- transfer to the PT-net case, by identifying each operator with
responding Petri net transitions both take a token from a and the corresponding transition and considering a set of places
therefore cannot ﬁre concurrently. This could be remedied by as the state in which all and only the variables represented by
considering Petri nets with read-arcs, but this complicates the those places are true. Monotonic heuristics which, like hm
unfolding process, and is not supported by MOLE.      [Haslum and Geffner, 2000], can be automatically generated
  For PT-nets in general, the converse implication does not from a planning problem description, are equally easily gen-
hold either, ie. in some cases, transitions that could not take erated from PT-nets. We then deﬁne the following ordering
place simultaneously in the planning context can be simul- on conﬁgurations:
taneous. For instance, consider two Petri net transitions t       ≺
and t such that •t = {a}, t• = {b}, •t = {c},and    Deﬁnition 4 ( h) Let h be a heuristic. For a conﬁguration
 •                                                              ( )=            ( ( ))      (  )=   ( )+
t =  {a}. In markings in which places a and c contain C, deﬁne g C      e∈C cost ϕ e , and f C    g c
                                                       (     ( ))         ≺                 (  )    ( )
a token these two transitions can ﬁre in any order and con- h Mark C . Deﬁne C h C if and only if f C <f C
                                                          ( )=   ( )    | |   | |
currently. If these transitions are interpreted as planning op- or f C f C and C < C .
      { } {¬   }    { } {¬   }
erators a ,  a, b  and  c ,   c, a , no concurrency is Theorem 4 If h is monotonic, the ordering ≺h is adequate.
possible because the operators are dependent. However, un-
like in the general case, the concurrency relation arising out The proof is a matter of checking the 3 conditions required
of our translation is strictly stronger than independence: for adequacy. Only the 2nd condition is non-trivial to prove,
                                                      and makes use of the monotonicity of the heuristic.
Theorem 3 Let R = A, I, O, G be a planning problem, let                              ≺
    ( )=                                              When ordering MOLE’s queue with  h for some mono-
pnet R     P, T, F, M0 , and let o1 and o2 be operators in tonic heuristic h, we obtain a planner that generates partially
O. If there are transitions t1,t2 ∈ T such that t1 ∈ S(o1),
  ∈  (  )                                             ordered plans with the smallest total action cost. In contrast,
t2  S o2 and t1 and t2 can ﬁre simultaneously, then o1 and most state of the art deterministic planners optimise parallel
o2 are independent (and can be executed simultaneously). plan length. Moreover, we are not aware of any partial-order
This can be proven contrapositively, assuming that o1 and o2 planner able to optimise the sum of arbitrary action costs.
are not independent, and showing that together with 1-safety Finally, our heuristic search in unfolding space substantially
and the complementary role of places in A and A, this implies differs from existing partial-order planning algorithms.
that to and to cannot ﬁre simultaneously.
                                                      5   Experimental Results
4  Directing Mole for Planning                        We implemented Petrify, an extended version of our trans-
Once the problem is translated to a PT-net, it is easy to let lation from planning operators to PT-nets. Petrify handles
MOLE produce a partially ordered plan for that problem. Al- most of the ADL fragment of PDDL. We modiﬁed MOLE
gorithm 1 can be slightly altered to stop whenever the event to implement a variety of search strategies and heuristics de-
taken out of the queue is labelled by a designated transition. ﬁned by their respective ordering relations. All these order-

                                                 IJCAI07
                                                  1908