              On   Solution   Correspondences        in Answer-Set     Programming∗

                          Thomas   Eiter, Hans  Tompits,  and Stefan  Woltran
                     Institut fur¨ Informationssysteme, Technische Universitat¨ Wien,
                             Favoritenstraße 9–11, A-1040   Vienna, Austria
                                  [eiter,tompits,stefan]@kr.tuwien.ac.at

                    Abstract                          equivalence [Inoue and Sakama, 2004]. Informally, the for-
                                                      mer notions consider programs P and Q to be equivalent, if
    We introduce a general framework for specifying   P ∪ R and Q ∪ R have always the same answer sets, where
    program correspondence under the answer-set se-   R is a set of rules from a particular collection of rules. Thus,
    mantics. The framework allows to deﬁne different  if R is regarded as possible input, equivalent P and Q are
    kinds of equivalence notions, including previously guaranteed to compute always the same answer sets. Note
    deﬁned notions like strong and uniform equiva-    that also open logic programs [Bonatti, 2001], in which part
    lence, in which programs are extended with rules  of the rules are to be added at runtime, ﬁt within this scheme.
    from a given context, and correspondence is deter-  However, none of these works have considered the practi-
    mined by means of a binary relation. In particu-  cably important setting of projected answer sets in ASP. Here,
    lar, reﬁned equivalence notions based on projected not a whole answer set of a program P is of interest, but only
    answer sets can be deﬁned within this framework,  its intersection on a subset B ⊆ U of all letters; this includes,
    where not all parts of an answer set are of relevance. in particular, removal of auxiliary letters in computation. For
    We study general characterizations of inclusion and a simple example, consider the programs
    equivalence problems, introducing novel semanti-
    cal structures. Furthermore, we deal with the issue P = { sel(X) ← s(X), not out(X),
    of determining counterexamples for a given corre-         out(X) ∨ out(Y ) ← s(X), s(Y ), X 6= Y } and
    spondence problem, and we analyze the computa-
                                                        Q = { sel(X) ← s(X), not skip(X),
    tional complexity of correspondence checking.
                                                              skip(X) ← sel(X), s(Y ), X 6= Y }.
1  Introduction                                       They should select, by means of sel, one element satisfying s
                                                      in their answer sets. Here, an important issue is whether the
With the availability of efﬁcient implementations of the programs are equivalent with respect to the “output” predicate
answer-set semantics [Gelfond and Lifschitz, 1991] for non- sel, for all “inputs” s, where s may be deﬁned by rules over
monotonic logic programs, answer-set programming (ASP) predicates from a set A, say, or given by facts.
has been recognized as a fruitful paradigm for declarative Another aspect is that, apart from equivalence, other rela-
problem solving. In this approach, a problem is encoded as tionships between the sets of answer sets of P and Q might
a logic program such that its models, called answer sets, cor- be of interest. A natural example is inclusion, which means
respond to the solutions of the problem, which can be easily that each answer set of P is also an answer set of Q. Here Q
extracted from them. Due to the availability of default nega- can be viewed as an approximation of P , which is sound with
tion, ASP has become an important host for solving many AI respect to cautious reasoning from P .
problems, including planning, diagnosis, information integra- Motivated by these observations, in this paper, we consider
tion, and inheritance reasoning (cf. Gelfond and Leone [2002] solution correspondences in ASP at a generic level. Our main
for an overview on ASP).                              contributions are brieﬂy summarized as follows.
  To support engineering of ASP solutions, an important is-
                                                        (1) We introduce a general framework for correspondences
sue is determining equivalence of different encodings, given
                                                      between the answer sets of programs P and Q, which are
by two programs. To this end, various notions of equivalence
                                                      augmented by further rules from a context C of possible ex-
between programs under the answer-set semantics have been
                                                      tensions, where the correspondence is determined by a binary
studied in the recent past, viz. strong equivalence [Lifschitz
                                                      relation ρ. Previous notions of equivalence and projected an-
et al., 2001], uniform equivalence [Eiter and Fink, 2003], and
                                                      swer sets amount to particular instances of this framework.
relativized notions thereof [Woltran, 2004], as well as update
                                                        (2) We provide characterizations of inclusion correspon-
  ∗
   This work was supported by the Austrian Science Fund under dence and equivalence between programs under projected
grant P18019, and by the EC via projects FET-2001-37004 WASP, answer sets, in terms of novel semantical structures, called
IST-2001-33570 INFOMIX, and IST-2001-33123 CologNeT.  spoilers, which refute this property, and certiﬁcates, whichcapture the essence of equivalence, similar as SE-models and Under the answer-set semantics, two programs P and Q
UE-models do for strong and uniform equivalence, respec- are regarded as (ordinarily) equivalent iff AS(P ) = AS(Q).
tively. Based on these characterizations, we present interest- The more restrictive forms of strong equivalence [Lifschitz
ing correspondence results on varying projection sets in ASP. et al., 2001] and uniform equivalence [Eiter and Fink, 2003]
  (3) We show how spoilers can be used to construct coun- have recently been generalized as follows [Woltran, 2004]:
terexamples to an inclusion resp. equivalence correspon- Let P, Q be programs over U, and let A ⊆ U. Then, P and Q
dence, consisting of a suitable interpretation M and a rule are strongly (resp., uniformly) equivalent relative to A iff, for
set R such that M is an answer set of exactly one of P ∪ R any R ∈ PA (resp., R ⊆ A), AS(P ∪ R) = AS(Q ∪ R).
and Q ∪ R.                                              If A = U, strong (resp., uniform) equivalence relative to A
  (4) Finally, we determine the computational complexity of reduces to strong (resp., uniform) equivalence simpliciter; if
correspondence checking for propositional disjunctive pro- A = ∅, ordinary equivalence results in either case.
grams under projected answer sets. Our main result is that We use the following notation. For an interpretation I and
                       P
equivalence checking is Π4 -complete in general, and thus a set S of (pairs of) interpretations, we write S|I = {Y ∩ I |
feasible in polynomial space as compared to a naive guess- Y ∈ S} (S|I = {(X ∩I, Y ∩I) | (X, Y ) ∈ S}). If S = {s},
and-check procedure which requires exponential space. Fur- we write s|I instead of S|I , if convenient.
thermore, we show that for restricted settings, the complexity For any A ⊆ U and any Y ⊆ U, a pair (X, Y ) of interpre-
                       P
gradually decreases from Π4 to coNP.                  tations is an A-SE-interpretation (over U) iff either X = Y
  The results presented in this paper signiﬁcantly advance or X ⊂ Y |A. (X, Y ) is an A-SE-model of a program P iff
the current state of equivalence testing in ASP towards highly (i) Y |= P ;
relevant settings for practical applications, and provide novel
                                                       (ii) for all Y 0 ⊂ Y with Y 0| = Y | , Y 0 6|= P Y ; and
insight into the structure of equivalent programs. Besides                    A     A
the papers quoted above, further related work mostly ad- (iii) X ⊂ Y implies the existence of an X 0 ⊆ Y with
                                                            0                 0    Y
dresses semantic and complexity characterizations of equiva- X |A = X such that X |= P holds.
lence [Lin, 2002; Turner, 2003], or describes implementation A pair (X, Y ) is total iff X = Y , and non-total otherwise.
methods [Eiter et al., 2004; Oikarinen and Janhunen, 2004]. The set of all A-SE-models of P is denoted by SE A(P ).
The recent work by Pearce and Valverde [2004] addresses For A = U, A-SE-interpretations (resp., A-SE-models) are
strong equivalence of programs over disjoint alphabets which simply called SE-interpretations (resp., SE-models), coincid-
are synonymous under structurally deﬁned mappings.    ing with the notions deﬁned by Turner [2003], and we write
  The characterizations we present are non-trivial and, as              U
                                                      SE(P ) instead of SE (P ).
shown by our complexity results, necessarily involved in the
sense that no “simple” criteria exist. Together with counterex- Proposition 1 ([Woltran, 2004]) Two programs P and Q
amples, they provide a basis for powerful program optimiza- are strongly equivalent relative to A iff SE A(P ) = SE A(Q).
tion and debugging tools for ASP, which are lacking to date.
                                                      Example 1  Consider the following two programs, P1 and
                                                      P , which we shall use as a running example:
2  Preliminaries                                       2
We deal with propositional disjunctive logic programs, which P1 = P0 ∪ {c ∨ d ← a; c ∨ d ← b},
are ﬁnite sets of rules of form                         P2 = P0 ∪ {c ∨ d ← a, b; d ← b, not c; c ← a, not d},

 a1 ∨ · · · ∨ al ← al+1, . . . , am, not am+1, . . . , not an, (1)
                                                      for P0 = {a ← c; b ← c; a ← d; b ← d; ← not c, not d}.
                                                                                      1
n ≥ m ≥ l ≥ 0, where all ai are propositional atoms and not They have the following SE-models:
denotes default negation; for n = l = 1, we usually identify
                                                        SE(P1)={(∅,abc),(∅,abd),(∅,abcd),(abcd,abcd),
the rule with the atom a1. If all atoms occurring in a program
P are from a given set A of atoms, we say that P is a program   (abc,abcd),(abd,abcd),(abc,abc),(abd,abd)},
over A. The set of all programs over A is denoted by PA. We SE(P )=SE(P )∪{(b,abc),(a,abd),(b,abcd),(a,abcd)}.
call a rule (resp., program) normal iff it contains no disjunc- 2    1
tion ∨. A program is unary if it contains only rules of the form Hence, P1 and P2 are not strongly equivalent. On the other
              un
a ← b or a ←; PA denotes the set of all unary programs over hand, AS(P1) = AS(P2) = ∅, i.e., P1 and P2 are (ordinar-
A.  For a set of atoms A = {a1, . . . , am}, not A denotes ily) equivalent. Moreover, P1 and P2 are strongly equivalent
the set {not a1, . . . , not am}. Accordingly, rules of form (1) relative to A iff A ∩ {a, b} = ∅. For A = {a, b}, we get
will also be written as a1 ∨ · · · ∨ al ← B1, not B2, where
                                                        SE A
B1 = {al+1, . . . , am} and B2 = {am+1, . . . , not an}.    (P1) = {(∅, abc), (∅, abd), (abc, abc), (abd, abd)},
                                                           A         A
  Following Gelfond and Lifschitz [1991], an interpreta- SE (P2) = SE  (P1) ∪ {(b, abc), (a, abd)}.
tion I, i.e., a set of atoms, is an answer set of a program P
iff it is a minimal model of the reduct P I , which results from 3 General Framework
P by (i) deleting all rules containing default negated atoms In order to deal with differing notions of program equivalence
not a such that a ∈ I and (ii) deleting all default negated in a uniform manner, taking in particular the currently ex-
atoms in the remaining rules. The set of all answer sets of isting notions of equivalence, as presented above, as well as
a program P is denoted by AS(P ). The relation I |= P be-
tween an interpretation I and a program P is deﬁned as usual. 1We write abc instead of {a, b, c}, a instead of {a}, etc.equivalence notions based on the projection of answer sets Proposition 2 Let (U, C, =B) be an equivalence frame and
into account, we introduce a general framework for express- P, Q ∈ PU . Then, the following conditions hold:
ing solution correspondences between logic programs. In this                         0              0
                                                        1. If P '(U,C,=B ) Q, then P '(U,C ,=B0 ) Q, for all C ⊆ C
framework, we parameterize, on the one hand, the set R of and all B0 ⊆ B.
rules to be added to the programs P and Q, and, on the other
                                                        2. P '        Q iff P '      Q  and Q '        P .
hand, the relation that has to hold between the collection of (U,C,=B )       (U,C,⊆B )        (U,C,⊆B )
answer sets of P ∪ R and Q ∪ R. Concerning the latter pa- We recall an important result due to Woltran [2004], ex-
rameter, besides equality, other comparison relations like set- tending an analogous result by Lifschitz et al. [2001].
inclusion may be used. This leads to the following notion: Proposition 3 Consider a frame (U, PA, =), for A ⊆ U, and
                                                      let P, Q ∈ P . Then, P '      Q iff P '   un  Q.
Deﬁnition 1 By a correspondence frame, or simply frame, F,       U          (U,PA,=)        (U,PA ,=)
we understand a triple (U, C, ρ), where (i) U is a set of atoms, Example 2 We have already seen that for P1, P2 from Ex-
called the universe of F, (ii) C ⊆ PU , called the context ample 1, P1 6'(U,PA,=) P2 holds, for A = {a, b} and U =
                                            U    U
                                           2    2     {a, b, c, d}                   P  6'   un   P
programs of F, or simply the context, and (iii) ρ ⊆ 2 ×2 .     . Hence, by Proposition 3, 1 (U,PA ,=) 2. This
  For all programs P, Q ∈ PU , we say that P and Q are is witnessed by the fact that, e.g., AS(P1 ∪{a}) = {abc, abd}
F-corresponding, symbolically P 'F Q, iff, for all R ∈ C, while AS(P2 ∪ {a}) = {abc}.
(AS(P  ∪ R), AS(Q ∪ R)) ∈ ρ.                            The relevance of Proposition 3 is that it allows to dras-
                                                      tically reduce the number of required rules for equivalence
  Intuitively, in a correspondence frame F = (U, C, ρ), U
                                                      checking. However, the proposition does not generalize to
determines the general alphabet under consideration, C de-
                                                      projections of answer sets.
termines the kind of rules used for comparison, and ρ is the
speciﬁc operation used for checking the correspondence of Theorem 1 For any equivalence frame (U, PA, =B) with
two programs.                                         A, B ⊆  U, and any P, Q ∈ PU , if P '(U,PA,=B ) Q, then
                                                      P '     un   Q, but the converse does not hold in general.
  It is quite obvious that the equivalence notions discussed (U,PA ,=B )
                                                                                            un
above are special cases of F-correspondence. Indeed, for any Proof. That P '(U,PA,=B )Q implies P '(U,PA ,=B )Q is im-
universe U and any A ⊆ U, we have that strong equivalence mediate from Part 1 of Proposition 2. Our running exam-
                                                                                                 un
relative to A coincides with (U, PA, =)-correspondence, and ple shows the failure of the converse: P1 '(U,P ,=B ) P2
                                             A                                                   A
uniform equivalence relative to A coincides with (U, 2 , =)- holds, where U = {a, b, c, d} and A = B = {a, b}, but
correspondence. Consequently, it holds that (i) strong equiv-
                                                      P16'(U,PA,=B )P2. The latter holds in view of AS(P1 ∪
alence coincides with (U, PU , =)-correspondence, (ii) uni-
                                U                     {a ∨ b ←}) =  {abc, abd} but AS(P2 ∪ {a ∨ b ←}) = ∅,
form equivalence coincides with (U, 2 , =)-correspondence, as easily shown.                            2
and (iii) ordinary equivalence coincides with (U, {∅}, =)-
                                                                                           un
correspondence.                                         The above theorem also holds if the set PA is substituted
  In this paper, we are mainly concerned with correspon- by the class of all normal programs over A. Indeed, programs
dence frames of form (U, PA, ⊆B) and (U, PA, =B), where P1 and P2 of our running example are corresponding with
A ⊆ U is some set of atoms, and ⊆B and =B are projections respect to a frame using normal programs over A = {a, b} as
of the standard subset and set-equality relation, respectively, context, because in each stable model of P1 ∪ R resp. P2 ∪ R,
                                        0
to a set B ⊆ U, deﬁned as follows: for sets S, S of interpre- both a and b must be true. Thus, rules in R (⊆ PA) with
tations,                                              negative literals in the body are immaterial.
  • S ⊆  S0 iff S| ⊆ S0| , and                          Theorem 1 indicates that equivalence for projected answer
        B       B      B                              sets is more involved. The same holds for inclusion, since
           0          0
  • S =B  S iff S|B = S |B.                           as an easy corollary to Theorem 1, P '(U,PA,⊆B ) Q implies
                                                              un
                                                      P  '(U,P ,⊆B ) Q, but not vice versa. In fact, the next re-
  In particular, =B amounts to answer-set existence if B =    A
∅, and to correspondence between answer sets if B = U. sult shows that, in general, a smallest extension R violating
                                                      inclusion has exponential size.
  In what follows, if F is of the form (U, C, =B), we refer
to F also as an equivalence frame, and, accordingly, to F- Theorem 2 There exists a family of problems Π = (P, Q,
correspondence also as F-equivalence. As well, a frame of PA, ⊆A) such that each R ⊆ PA witnessing AS(P ∪R)|A 6⊆
the form (U, C, ⊆B) is also referred to as an inclusion frame. AS(Q ∪ R)|A is exponential in the size of P and Q.
  For later purposes, we also introduce the following no- Proof (Sketch). The idea is to encode a propositional CNF
                                                            n
tion: A correspondence problem, Π, over U, is a quadru- φ = Vi=1 Ci over atoms V , for Ci = ci,1 ∨ · · · ∨ ci,ki , into
ple (P, Q, C, ρ), where P, Q ∈ PU and (U, C, ρ) is a frame. Π = (P, Q, PA, ⊆A) such that, for any R ∈ PA, AS(P ∪
We say that Π holds iff P '(U,C,ρ) Q holds. In accord with R)|A 6⊆ AS(Q ∪ R)|A and ¬R˜ must include a DNF for φ,
the above designations, we call Π an equivalence problem if where R˜ is the result of interpreting R as a classical formula.
(U, C, ρ) is an equivalence frame and an inclusion problem if Let V¯ = {v¯ | v ∈ V }, V 0 = {v0 | v ∈ V }, V¯ 0 = {v¯0 | v ∈
(U, C, ρ) is an inclusion frame.
                                                      V }, and G = {g1, . . . , gn} be sets of new atoms. We deﬁne
  For a correspondence problem Π = (P, Q, C, ρ) over U,
                                                          P  =   {v ∨ v¯ ←; ← not v; ← not v¯ | v ∈ V } ∪
we usually leave U implicit, assuming that it consists of all
atoms occurring in P , Q, and C.                                 {v ←  u, u¯; v¯ ← u, u¯ | v, u ∈ V } ∪
                                                                        ∗        ∗
  We next list some basic properties of F-equivalence.           {v ←  Ci ; v¯ ← Ci | v ∈ V ; 1 ≤ i ≤ n},       ∗    ∗      ∗    ∗            ∗                               A
where Ci = ci,1, . . . , ci,ki , v = v¯, and (¬v) = v, and (i) (Y, Y ) ∈ SE (P ),
Q  =   {v ∨ v¯ ←; v0 ←v¯,not v¯0; v¯0 ←v,not v0 | v ∈ V } ∪ (ii) for each (Z, Z) ∈ S, some non-total (X, Z) ∈ S exists,
           0  0        0     0                                                  A∪B    A
       {← v , v¯ ; ← not v , not v¯ | v ∈ V } ∪       (iii) (Z, Z) ∈ S iff (Z, Z) ∈ σY (SE (Q)), and
             0       0      0       0
       {v ← u ; v¯ ← u ; v ← u¯ ; v¯ ← u¯ | v, u ∈ V } ∪ (iv) (X, Z) ∈ S implies (X, Y ) ∈/ SE A(P ).
       {gi ← ci,j | i = 1..n, j = 1..ki} ∪ {← g1, . . . , gn},
             b                                          Intuitively, in a spoiler (Y, S), the interpretation Y is an
with v = v0 and ¬v = v¯0. Let A = V ∪ V¯ . Informally, P ∪ R answer set of P ∪ R but not of Q ∪ R, for some R, which is
only admitsb answerc sets containing A, and indeed it holds that semantically given by S.
(A, A) ∈ SE(P ∪R)|A \SE(Q∪R)|A,   for some R. For any
                                                      Example 3  For P1 and P2 from our running example and
such R, the SE-models (X, A) with X ⊂ A must be precisely A = {a, b}, (Y , S) and (Y , S) are the only spoilers for
                                              ˜A                    1          2
those where X is a countermodel of φ. This means that R is (P1, P2, PA, ⊆A), where Y1 = {abc}, Y2 = {abd}, and
a CNF for ¬φ, and thus ¬R˜A amounts to a DNF for φ. This S = {(a, abd), (b, abc), (abc, abc), (abd, abd)}, with the lat-
proves the claim. Now, as well-known, the smallest DNF for ter being a subset of σA (SE A(P )) = σA (SE A(P )) =
                                                 2                        Y1       2       Y2       2
a CNF φ can be exponential in φ, which proves the result. S ∪ {(∅,abc), (∅,abd)}, as required in Deﬁnition 3.
  We can similarly construct a family of problems showing The central property of spoilers is as follows:
that a smallest extension R violating equivalence has expo-
                                                      Theorem  3 Let F = (U, PA, ⊆B) be a frame. Then, for any
nential size. Hence, a naive guess and check algorithm to P, Q∈P , P ' Q iff there is no spoiler for (P, Q, P , ⊆ ).
disprove inclusion or equivalence needs exponential space.   U     F                              A   B
For a better algorithm, we have to develop suitable semanti- An immediate consequence of this theorem, together with
cal characterizations, which must take disjunctive extensions Part 2 of Proposition 2, is the following result:
into account.
                                                      Corollary 1 Let F = (U, PA, =B) be an equivalence frame
                                                      and P, Q ∈ PU . Then, P 'F Q iff neither (P, Q, PA, ⊆B)
4  Characterizations                                  nor (Q, P, PA, ⊆B) has a spoiler.
In this section, we ﬁrst present some characteristic structures As discussed later on, spoilers provide a semantical basis
associated with inclusion and equivalence problems under for counterexample generation.
projections of answer sets, termed spoilers and certiﬁcates.
Based on them, we then discuss some interesting invariance 4.2 Certiﬁcates
results.
                                                      After having introduced structures which disprove program
  We start with some general properties.
                                                      correspondence, we now discuss structures which prove pro-
Deﬁnition 2 A set S of SE-interpretations is complete iff, for gram correspondence. Roughly speaking, the structures in-
each (X, Y ) ∈ S, also (Y, Y ) ∈ S as well as (X, Z) ∈ S, troduced below express the essence of a program P , with re-
for any Y ⊆ Z with (Z, Z) ∈ S.                        spect to program equivalence, in terms of a semantic condi-
  It can be shown that the set SE(P ) of all SE-models of a tion on P alone.
program P is always complete.                         Deﬁnition 4 Let C be a set of atoms and S a set of SE-
  The following guarantees that a complete set S of SE- interpretations. A pair (X , Y ), where X is a set of inter-
interpretations can be represented by some program P . pretations and Y ⊆ C, is a C-projection of S iff there exists
Proposition 4 Let S be a complete set of SE-interpretations, some set Z such that (i) (Z, Z) ∈ S, (ii) Z|C = Y |C , and
and let A be a set of atoms. Then, there exists a program (iii) X = {X | (X, Z) ∈ S, X ⊂ Z}.
PS,A ∈ PA such that SE(PS,A)|A = S|A.                   For a program  P , we call an (A ∪ B)-projection of
                                                         A
  One possibility to obtain PS,A from S is as follows: take SE (P ) an (A, B)-certiﬁcate of P .
rules ← Y, not (A \ Y ), for each Y ⊆ A such that (Y, Y ) ∈/ The following lemma can be shown by means of spoilers,
S|A, and rules Wp∈(Y \X) p ← X, not (A \ Y ), for each X ⊂ and expresses that programs are corresponding with respect
Y such that (X, Y ) ∈/ S|A and (Y, Y ) ∈ S|A.         to inclusion frames iff their certiﬁcates satisfy a certain con-
                                                      tainment relation.
4.1  Spoilers
                                                                                (P, Q, P , ⊆ )
The ﬁrst class of characteristic structures associated with pro- Lemma 1 Correspondence of A B holds, iff for
                                                           (A, B)          (X , Y ) P     (A, B)
gram correspondence we are dealing with are of such a nature each -certiﬁcate    of   , an      -certiﬁcate
                                                      (X 0, Y ) Q          X 0 ⊆ X
that their existence prevents the equivalence of programs un- of  exists with     .
der projected answer sets.                              The next result expresses the central property of certiﬁ-
  We need the following auxiliary notation: Let S be a set of cates. Towards its formulation, we require a further concept:
                                            C
SE-interpretations and Y , C sets of atoms. Then, σY (S) = An (A,B)-certiﬁcate (X ,Y ) of a program P is minimal iff,
{(X, Z) ∈ S | Z|C = Y |C }.                           for any (A,B)-certiﬁcate (Z,Y ) of P , Z ⊆X implies Z =X .

Deﬁnition 3 Let Π = (P, Q, PA, ⊆B) be an inclusion prob- Theorem 4 Let F = (U, PA, =B) be an equivalence frame.
lem over U, let Y ⊆ U be an interpretation, and consider Then, for any P, Q ∈ PU , P 'F Q iff the minimal (A, B)-
     A∪B     A
S ⊆ σY   (SE  (Q)). The pair (Y, S) is a spoiler for Π iff certiﬁcates of P and Q coincide.  Note that this result is the pendant to Proposition 1, which • R ∈ PA such that AS(P ∪ R) ⊆6 BAS(Q ∪ R), and

deals with a model-theoretic characterization of relativized • M ∈ AS(P ∪ R) and M|B ∈/ AS(Q ∪ R)|B.
strong equivalence. Indeed, two programs P, Q ∈ P are
                                              U         Furthermore, a counterexample for an equivalence prob-
strongly equivalent relative to A iff their minimal (A, U)-
                                                      lem (P, Q, P , = ) is any counterexample for either (P, Q,
certiﬁcates coincide. Some further relations between program     A   B
                                                      P  , ⊆ ) or (Q, P, P , ⊆ ).
correspondence and relativized and non-relativized strong A B           A  B
                                                        Our notion of a spoiler from Deﬁnition 3 provides a basis
equivalence, respectively, are given in the next subsection.
                                                      for such counterexamples.
Example 4 In our running example with A = B = {a, b}, Theorem  6 Suppose (Y, S) is a spoiler for a correspondence
we get that P1 has a single (A, A)-certiﬁcate, ({∅}, {ab}),
                                                      problem Π =  (P, Q, PA, ⊆B). Then, (PS,A, Y ) is a coun-
while P2 has two (A, A)-certiﬁcates, ({∅, {a}}, {ab}) and
                                                      terexample for Π, where PS,A is as in Proposition 4.
({∅, {b}}, {ab}), all of them minimal. Since they do not
                                                        This result follows from Theorem 3 and Proposition 4 by
coincide, we obtain that P1 and P2 are not (U, PA, =A)-
equivalent, as expected.                              the fact that S|A is complete for any spoiler (Y, S).
                                                      Example 5  For our example and the sketched construction
4.3  Invariance Results                               after Proposition 4, we derive counterexamples (R, {abc})
Theorem 4 allows us to derive some interesting invariance and (R, {abd}), where R = {a ∨ b ← ; ← not a; ← not b;
results with respect to varying projection sets B.    ←  not a, not b}; obviously, the last rule is redundant.
                                                        Note that if an inclusion problem (P, Q, P , ⊆ ) fails,
Theorem 5 Let U be a set of atoms and A, B ⊆ U. Then, for                                     A   B
any P, Q ∈ P , P '        Q  iff P '          Q.      some counterexample as in Theorem 6 does exist.
           U     (U,PA,=B )        (U,PA,=A∪B )         We  observe that the programs in the counterexamples of
  This result follows immediately from Theorem 4 and Deﬁ- Theorem 6 may contain redundant clauses, as succinctness
nition 4, by observing that (A, B)-certiﬁcates of a program P is not a concern of spoilers. For instance, in our example,
and (A, A∪B)-certiﬁcates of P are actually identical objects, R0 = {a ∨ b ←} would yield a simpler counterexample. In
since (A ∪ B)-projections of SE A(P ) trivially coincide with fact, spoilers are not geared towards providing minimal coun-
(A ∪ (A ∪ B))-projections of SE A(P ).                terexamples with respect to particular syntactic subclasses of
  Theorem 5 has several interesting consequences.     contexts.
                                                        Towards facilitating special counterexamples, we may ex-
Corollary 2 For programs P, Q and any set A of atoms, tend the notion of a spoiler to pairs (Y, S), where S 6⊆
(P, Q, PA, =∅) holds iff (P, Q, PA, =A) holds.         A∪B     A
                                                      σY   (SE  (Q)) is admitted for complete S, by replacing in
                                                                                        B    A
  That is, answer-set existence (which is relevant regarding Deﬁnition 3 the set S in (ii) with S ∩ σY (SE (Q)) and in
Boolean properties) relative to additions from PA is tanta-               A∪B     A
                                                      (iii) and (iv) with S ∩ σY (SE (Q)), calling the result an
mount to relativized strong equivalence under projection to A. extended spoiler.

Corollary 3 Let U be a set of atoms. Then, for any programs Example 6 In our running example, Π = (P1, P2, PA, ⊆A)
P, Q ∈ PU and any set B ⊆ U of atoms, P '(U,PU ,=B ) Q iff has spoilers ({abc}, S) and ({abd}, S), with S = {(a, abd),
P and Q are strongly equivalent.                      (b, abc), (abc, abc), (abd, abd)}. Since both (ab, ab) 6∈
                                                         A                         A
This result is quite striking as it shows that strong equivalence SE (P2) and (abcd, abcd) 6∈ SE (P2), one can verify that
                                                                            0
corresponds to (U, P , =B)-equivalence, for any projection any complete superset S of S not containing any (∅, Z),
                 U                                                                                  0
set B. It is derived from the fact that, for any B, the (U, B)- with Z|A = {ab}, yields extended spoilers ({abc}, S ) and
                                                               0                          0
certiﬁcates of a program P are in a one-to-one correspon- ({abd}, S ). In particular, we may set S = S ∪ {(a, a),
                                                                         0
dence to the SE-models of P as follows: ({X , . . . , Xm}, Y ) (b, b)}. Note that S |A = {(a, a), (a, ab), (b, b), (b, ab),
                                     1                                                 0
is a (U, B)-certiﬁcate of P iff (X , Y ), . . . , (Xm, Y ), (Y, Y ) (ab, ab)}. Now, the simpler program R = {a ∨ b ←} ful-
                           1                                   0        0          0             0
are all the SE-models of P with ﬁxed second component Y . ﬁlls SE(R )|A = S |A; thus, (R , {abc}) and (R , {abd})
  In particular, consistency under answer-set semantics (i.e., are counterexamples for Π.
if B = ∅) coincides with strong equivalence. More generally: Theorems 3 and 6 generalize to extended spoilers. More
Corollary 4 Let U be a set of atoms. Then, for all programs counterexamples can be constructed using such spoilers in
                                                      general, which may include a counterexample of particular
P, Q ∈ PU  and all sets A and B of atoms such that A ∪
                                                      form. In our example, adding {(a, a), (b, b)} to an ordinary
B = U, P '(U,PA,=B ) Q iff P and Q are strongly equivalent
relative to A.                                        spoiler allowed us to give a counterexample program which
                                                      is positive. On the other hand, we can show that no coun-
In fact, in this setting, a correspondence between A-SE- terexample program which is normal exists (as no (∅, Z) with
models of a program and its (A, B)-certiﬁcates is analo- Z|A = {ab} can be added). An elaboration of this issue re-
gously established as above.                          mains for further work.
5  Counterexamples                                    6   Computational    Complexity
Given that a correspondence problem Π = (P, Q, PA, ⊆B) Our ﬁrst result is concerned with recognizing whether an in-
does not hold, it is interesting to know why this is the case. terpretation is a discriminating answer set for the extended
We deﬁne a counterexample for Π as a pair (R, M), where programs P ∪ R and Q ∪ R, i.e., a “partial” spoiler.