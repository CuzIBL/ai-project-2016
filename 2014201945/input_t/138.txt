             Generalizing GraphPlan by Formulating Planning as a CSP 

                     Adriana Lopez                          Fahiem Bacchus 
                   Dept. of Computer Science              Dept, Of Computer Science 
                    University of Toronto                   University of Toronto 
                      Toronto, Ontario                        Toronto, Ontario 
                     Canada, M5S 3G4                         Canada, M5S 3G4 
                    alopez@cs.toronto.edu                  fbacchus@cs.toronto.edu 


                   Abstract                      and Selman, 1998] and GP-CSP [Do and Kambhampati, 
                                                 2001] planners. These systems encode a transformed repre•
    We examine the approach of encoding planning sentation of the planning problem called the planning graph 
    problems as CSPs more closely. First we present to SAT and CSP respectively. The planning graph is a plan•
    a simple CSP encoding for planning problems and ning specific construction, due to [Blum and Furst, 1997], that 
    then a set of transformations that can be used to computes and represents some important additional structural 
    eliminate variables and add new constraints to the information about the planning problem. Thus by encoding 
    encoding. We show that our transformations un• the planning graph rather than the original planning problem, 
    cover additional structure in the planning problem, 
                                                 BLACKBOX and GP-CSP are able to capture more of the 
    structure that subsumes the structure uncovered by structure of the planning problem in their encoding, which 
    GRAPHPLAN planning graphs. We solve the CSP  results in a significant improvement in performance. 
    encoded planning problem by using standard CSP 
                                                   In our approach we bypass the construction of a planning 
    algorithms. Empirical evidence is presented to val•
                                                 graph. Instead, we study techniques that can equally well 
    idate the effectiveness of this approach to solving 
                                                 exploit the structure of the planning problem and at the same 
    planning problems, and to show that even a pro•
                                                 time work directly on the CSP encoding. We demonstrate 
    totype implementation is more effective than stan•
                                                 that it is possible to develop transformations that uncover all 
    dard           Our prototype is even compet•
        GRAPHPLAN.                               of the additional structure obtained from planning graphs. 
    itive with far more optimized planning graph based 
                                                   The advantage of our approach is that it works directly on 
    implementations. We also demonstrate that this ap•
                                                 a much richer and more robust representation. Consequently 
    proach can be more easily lifted to more complex 
                                                 we obtain at least three important advances over the planning 
    types of planning than can planning graphs. In par•
                                                 graph construction: (1) Our approach allows us to general•
    ticular, we show that the approach can be easily ex•
                                                 ize planning graphs. In particular, we can enhance our ap•
    tended to planning with resources. 
                                                 proach to extract other kinds of structure to allow us to solve 
1 Introduction                                   the planning problem more efficiently. (2) We can more eas•
                                                 ily extend our approach to more complex types of planning 
A powerful technique for solving planning problems, first 
                                                 problems, e.g., those involving resource usage. (3) Since the 
used in [Kautz and Selman, 1996], is to impose a fixed bound 
                                                 final result is a CSP we can automatically utilize CSP solu•
on plan length. This converts the problem to one that lies 
                                                 tion techniques which can be more powerful than standard 
in NP. The resulting problem can then be solved by encod•
                                                            searching methods. In the paper we will pro•
ing it in any of a number of alternative NP-complete for• GRAPHPLAN
                                                 vide evidence for all of these points. 
malisms, e.g., SAT [Kautz and Selman, 1996], integer pro•
                                                   First, we present our CSP encoding of a planning problem. 
gramming [Vossen et ai% 2001], or constraint satisfaction 
problems (CSPs) [van Beek and Chen, 1999; Do and Kamb- Then we present a set of transformations that can be used to 
hampati, 2001], and then using the powerful algorithms that eliminate variables and add new constraints to the encoding, 
have been designed to solve these general problems. and show that these transformations subsume and generalize 
                                                 planning graphs. Then we present empirical evidence to val•
  In this paper we examine the approach of encoding plan•
                                                 idate the effectiveness of our approach to solving planning 
ning problems as CSPs more closely. We use a very simple 
                                                 problems. To demonstrate that our approach can be more eas•
encoding to translate the planning problem into a CSP. The 
                                                 ily lifted to more complex types of planning, we show how it 
advantage of using CSPs in general, and our encoding in par•
                                                 can be easily extended to planning with resources. Finally we 
ticular, is that it preserves much of the structure of the original 
                                                 close with some conclusions and a description of future work. 
planning problem, and thus various transformations that uti•
lize this specific structure can be applied to create a new CSP 
that is easier to solve.                         2 Generating the BASE-CSP 
  The utility of exploiting planning specific structure has To encode a planning problem as a CSP we impose a bound 
been convincingly demonstrated by the BLACKBOX [Kautz on the "size" of the plan. In this paper we will measure 


954                                                                                   PLANNING plan size by the number of GraphPlan-concurrent steps (GP- 4. GP-Concurrency Constraints. The above successor state 
steps) in the plan. It will become apparent in the sequel what axiom allows the unintended model in which we have two 
GP-steps means.                                        actions at the same step, one creating a proposition and one 
  In k GP-steps each proposition or action can change at deleting it. To avoid such unintended solutions we must re•
most k times. So to encode a k GP-step plan in a CSP we strict concurrent actions in some way. The most natural way 
can utilize fc -f 1 sets of propositional variables and k is a serial constraint, which says that only one action variable 
sets of action variables where s ranges from 0 to k for can be true at any step.2 Another type of constraint is one that 
propositions and 0 to k - i for actions, and i and j range imposes GraphPlan concurrency. Basically it asserts that two 
over the number of distinct propositions and action instances actions cannot be simultaneously true if they interfere with 
in the planning problem respectively. Each of these variables each other. In this work we have chosen to use the GraphPlan 
will be boolean. Intuitively, means that proposition P{ is (GP) concurrency constraints. 
true at GraphPlan step s, and means that action instance 5. Non-Null Steps Constraints. We impose the constraint that 
Aj was executed at GraphPlan step sdenote              for every step s at least one action variable should be true. 
the opposite).                                         This blocks null steps in the plan, in contrast LBlum and Furst, 
  Clearly by setting each of these variables we can capture 1997] and [Do and Kambhampati, 2001] both allow null plan 
any GP-step plan and its effects. However, many illegal steps. 
plans and nonsensical outcomes are also captured. We need We will refer to this set of variables and constraints as 
constraints to ensure that any solution to the CSP (i.e., any the BASK-CSP. Any solution to the BASR-CSP will contain 
setting of the variables that satisfies all of the constrains) is a a setting of the action variables that comprises a valid GP-
legal plan. There are various possible sets of constraints that concurrent plan. If the BASE-CSP has no solution then no k 
can serve our purpose. Here we present one particular set: GP-step plan exists for the problem. 
1. Unary initial state and goal constraints. The Dropositional 
variables from step zero, and from step are required   3 Reduction of the BASE-CSP 
to have values compatible with the initial and goal states of Given a BASE-CSP representing a k-step planning problem 
the planning problem.                                  we can use various transformations to modify it, generating a 
2. Precondition constraints. An action cannot be true  new CSP that is empirically easier to solve, and that is equiv•
unless its precondition is satisfied. This Rives the constraint alent to the BASe-CSP in the sense that any solution to the 
               where Pre precondition rela•            new CSP can easily be extended to a solution to the origi•
tive to GP-step s.                                     nal BASE-CSP. These transformations include inferring new 
3. Successor state constraints. Implicit in classical planning constraints that can be added to the CSP and eliminating var•
representations is the frame assumption: predicates not men• ious single valued variables. Our transformations are related 
tioned in the action's description are unaffected by the action. to the well known techniques of enforcing local consistency 
We can capture the effects of actions, including the implicit on a CSP prior to solving it [Freuder, 1985], however they are 
non-effects in a number of different ways. Here we use Re- based on taking advantage of the specific logical form of the 
iter's formulation of successor state axioms [Reiter, 2001]. above set of constraints. 
In particular, for each propositional variable at GP-step s 
(a > 0) we have a constraint between it and the same propo• 3.1 Adding GraphPlan Mutex Constraints 
sition at GP-step .s-1. The constraint says that is true if A well known technique for making CSPs easier to solve is to 
and only if some action made it true, or it was previously true add redundant constraints, e.g., [Getoor et ai, 1997], which 
and no action made it false. Thus the successor state axiom are constraints that make explicit additional relations between 
constraints take the form:                             the variables. Redundant constraints that are useful to add are 
                                                       usually determined by examining the structure of the partic•
                                                       ular CSP. This is precisely what is done in planning graphs, 
                                                       where insights into the manner in which actions and propo•
                                                       sitions interact, are used to generate a new set of binary con•
where Creatc(Pl) and Delete(Pt) are the set of actions that 
create and delete P{. It is easy to automatically generate a set straints called mutexes. 
of successor state constraints from a set of STRIPS action de• New binary constraints can be added to a CSP by enforcing 
scriptions. Additionally, by using successor state constraints consistency [Freuder, 1985]. A CSP is consistent if 
that mention additional propositions from step .s-1, it is easy for every valid assignment to a pair of variables, there is a set 
to encode ADL [Pednault, 1989] operators as a set of succes• of values for every additional variables such that the 
sor state axioms.                                      assignments satisfy all of the constraints over these variables. 
              1                                        Making a CSP consistent can be very expensive as it in•
   'Note that the successor state constraints do not encode the volves testing all sets variables, and each test in the 
action preconditions. These arc encoded as separate constraints. worst case takes time exponential in In planning problems 
Thus, the only complication with ADL actions has to do with con• there can be thousands of variables, so it would be impossible 
ditional effects. If Pi is a conditional effect of action subject to 
the condition the successor state constraint will have a disjunct 2Serial actions can be used to represent true concurrency by 
           ". That is, will be true if was executed and adding timestamps to the states [Bacchus and Ady, 2001; Pirri and 
condition held at the previous step.                   Reiter, 2000]. 


PLANNING  to make the entire BASE-CSP consistent even for small     all actions that create A similar condition must be 
 The contribution of GRAPHPLAN is that it demonstrated a   satisfied by the actions creating 
 technique that quickly achieves a very effective partial form 
 of consistency over a limited collection of variables. 
   We can use the CSP representation to directly compute the 
 binary mutex constraints generated by planning graphs. In 
 this manner we lift the mutex computation to a more general 
 framework where it can be more easily generalized. 
   Mutexes in GraphPlan are generated by three simple rules: 
 (1) Base Action Mutexes. Actions in the same GP-step with 
 interfering effects and preconditions are mutex. (2) Addi•
 tional Action Mutexes. Two actions in the same GP-step are 
 mutex if there is a pair of propositions, one from each action's 
 preconditions, that are mutex at this GP-step. (3) Proposi-
 tional Mutexes. Two propositions, and at the same 
 GP-step, are mutex if every action that achieves is mutex 
 with every action that achieves We can create all of these As in planning graphs, We can use the constraints added 
 binary constraints by testing for very similar conditions in the at step to test for new mutex constraints at step The 
 CSP encoded planning problem:                         following result can then be easily proved (we omit the proof 
                                                       for reasons of brevity). 

 Base Action Mutexes. These mutexes are already present Proposition 1 // the planning graph construction has de•
                                                       tected a mutex constraint between two variables and 
 in the BASH-CSP; they are the GP-concurrency constraints. 
                                                       (action or propositional variables), then after transforming 
                                                       the BASH-CSP to add the above mutex constraints we will 
                                                       have that either both variables in the CSP will have be•
                                                       come single valued with not both being true or (h) there will 
                                                       be binary constraint in the CSP between these variables 
                                                       that prohibits them from both being true. 
                                                       That is, the transformed CSP will capture all of the planning 
                                                       graph mutexes. Furthermore, it might contain more mutexes 
                                                       than those inferred by the planning graph. In the simplest case 
                                                       this can arise from the last case presented above where every 
                                                       action deletes one of or This can create a new mutex 
                                                       in the middle of the plan. In planning graphs, on the other 
                                                       hand, once and appear in the graph without a mutex 
                                                       between them, they can never become mutex again (due to 
                                                       the presence of no-ops and the possibility of null steps in the 
                                                       plan). 


 Propositional Mutexes. For propositional mutexes we 
 have one added complication, which is that our encoding, un•
 like planning graphs, does not utilize no-ops. Nevertheless, a 
 general condition for when two propositions and are 
 mutex can be given by examining the three cases. 
                                                         Our translation from a planning problem produces a BASB-
                                                       CSP in which every constraint C is represented symboli•
                                                       cally by a logical formula. We can simplify this logical for•
                                                       mula directly by replacing the single valued variable V by its 
                                                       value, and then performing standard logical reductions, e.g., 


956                                                                                             PLANNING FALSE etc. This yields a new                               become single valued. Thus they can be reduced from 
logical formula that represents the reduced constraint C". the CSP prior to searching for a solution. 
  In the case of the BASH-CSP we also know the form of  2. If all possible actions at step s create proposition 
its different constraints. This allows us to precompute many 
                                                           then is forced to be true. Similarly if it is deleted 
types of constraint reductions, so we can realize many types 
                                                           by all possible actions then it is forced to be false, 
of single valued variable reductions more efficiently. 
  The reduction of a single valued variable, or the applica• can then be reduced from the CSP. This particular reduc•
tion of some of the other transformations described below, tion is not possible in planning graphs due to the pres•
might generate new single valued variables that can in turn ence of no-ops. 
be reduced. It can also interact with the generation of mutex 3. Variables that are forced to be true further reduce all 
constraints, allowing new mutexes to be detected. For exam• variables that are mutex with them to be false. This 
ple, say that we have determined that a propositional variable does not help reduce a planning graph since in planning 
   must be false. If appears in any conjunctive precon•    graphs mutexes are monotonically decreasing and, other 
ditions, e.g., wc will also immediately infer              than the initial state variables, variables are never forced 
i.e., that. has also become single valued (false). With    to be true.4 But in the CSP encoding the previous rules 
false it can no longer be a candidate for producing some other for forcing a variable to be true, and for creating a new 
proposition , and we could possibly infer a new mutex      mutex when it did not exist at the previous step, enable 
involving since one of the ways of making it true is       additional single valued variable reductions. 
now blocked. With mutexes, single valued variable reduction 
subsumes reachability analysis of planning graphs.     4.3 Sequence Constraints 
                                                       There are some additional constraints that can be imposed on 
Proposition 2 The variables that remain in the CSP after plans to rule out obvious inefficiencies. For example, it never 
single valued variables have been reduced, are a subset of makes sense in the plan to immediately follow an action by 
the variables appearing in the planning graph.         its inverse (e.g., a load followed by an unload). Adding this 
                                                       constraint allows eliminating different invalid combinations 
4 Beyond GRAPHPLAN                                     of actions by making mutex any inverse pairs of actions at 
                                                       consecutive time steps. 
Besides subsuming, and slightly generalizing, the planning 
graph inferences, further transformations can be utilized on Blocking the immediate sequencing of inverse actions also 
the CSP. These transformations either add more constraints to allows us to infer additional sequence constraints. Say that 
the CSP or cause further variables to become single valued. actions and are inverses of each other, and that is 
In either case, like the planning graph inferences, they are the only action that produces while Aj is the only action 
used to make the CSP easier to solve. These additional con• that deletes it. Then another constraint that can be inferred 
straints can also feed into the standard GraphPlan reductions from the mutex between and is that when first 
described above, and thus generate even further mutexes. becomes true, it must remain true for at least one more time 
                                                       step: 
4.1 Additional Binary Constraints 
Graphplan mutexes only prohibit the single pair of values There is also a similar constraint for when first becomes 
for two variables (TRUH,TRUE). Our representation treats false. 
negated propositions and actions in an entirely symmetric Our system automatically detects action pairs that are in•
fashion. This means that the analysis for mutexes given above verses of each other as well as any predicates over which a 
will allow us to compute mutexes between any two values. sequence constraint can be imposed. 
For example,when applied tobeing mutex 
with means that is" with i.e., these vari•             5 CSP-PLAN: Implementation 
ables must both be true or both be false. Such binary con•
straints can be detected and added to the BASE-CsP.    Based on the transformations explained before, we have de•
                                                       veloped a planner called CSP-PLAN that will find a solution 
4.2 Single Valued Variable Reduction beyond            to a planning problem. CSP-PLAN builds the BASE-CSP in•
     GRAPHPLAN Reachability                            crementally up to step s (beginning with s = 1), and then 
                                                       sends it to a CSP Solver for its solution. If the solver reports 
As demonstrated above, single valued variable reduction is as 
                                                       no solution to it, then the BASK-CSP is constructed for s+l. 
powerful as the reachability analysis inherent in the planning 
                                                       This cycle can continue until some termination condition has 
graph construction. However, in the CSP encoding it is more 
                                                       been reached or a plan has been found. It is important to 
powerful, obtaining, for example, the following additional re•
                                                       notice          solves these problems incrementally, thus 
ductions:                                                    CSP-PLAN
                                                       ensuring that it finds a GP-step optimal plan. 
  1. Propositions that are never modified by any action, are The CSP solver used by CSP-PLAN is EFC [Katsirelos and 
    propagated without change in the planning graph. Since Bacchus, 2001] which allows the use of different techniques 
    these propositions have no creators nor deletors, their 
    successor state axiom reduces all of them to being equiv• 4This means that the variable that is mutex with the true variable 
    alent to their status in the initial state, i.e., they will all never appears in the planning graph until the mutex no longer holds. 


PLANNING                                                                                              957        Problem  GAC  GACCBJ GACvsCBJ Record NoGoods                 | Problem dom+deg BSEARCH 
       Bw-large-12 0 46 0.10    0 10       0.11                      Bw-large-12 0 10    0 08 
       Bw-large-a 1.44  0.49    0.49       0.50                      Bw-lnrge-a  0.51    0.56 
       Rocket-a 2166   13 74    1401      10 67                     | Rockct-a  10 65    0.54 
       Rocket-b  5.26   4.44    4 48       3.39                      Rockct-b    3 38    1.24 
       DnverLog2 59 13 2109    21.28      1038                       DnverLog2  10.38    0 46 
       Driver Log3 0 42 0.23    0.23       0.15 |                    DnverL.og3  0 15    0.03 
      Driver Log4 71.13 29.96  29 96      16.54                      DnvcrLog4  16.54    0.19 
      DrivcrLog5 139 98 62.98  63.65      29.59                      DriverLog5 24.59    0 17 
      DnverLog6 006     0.05    0.06       006                       DnvcrL.og6  006     0.01 
                                                       Table 2: Effect of changing the DVO heuristic on the perfor•
                                                       mance of the CSP solver for planning problems. Experiments 
                                                       were run using GACvsCBJ+RecordNoGoods 

                                                                I Problem No redundant Inverse Sequence 
                                                                          constraints mutexes constraints 
                                                                 Log-a        0.06   0 09    0 06 
                                                                 Log-b        16.14 15.17  213.50 
                                                                 Rockct-a     1 41   148     1.31 
                                                                 Rockct-b     1.85   1 77    2 15 
                                                                 Gripper-01   0 12   0 06    0 10 
                                                                 Gripper-02   17 11 13 20   1701 
                                                       Table 3: Effect of adding mutexes between inverse actions 
                                                       and sequence constraints to the BASE-CSP. 

                                                       DVO heuristics, the addition of redundant constraints, the re•
                                                       moval of single valued variables, etc. The addition of redun•
                                                       dant binary constraints, particularly mutexes, and the detec•
                                                       tion and removal of single valued variables has a clear and 
                                                       dramatic effect on the efficiency of CSP-PLAN, even for sim•
                                                       ple problems. For example, on bw-large-12, the BASE-CSP 
                                                       has 1,289 variables and 10,426 constraints, but only 657 vari•
                                                       ables and 2,847 constraints after single valued variables are 
                                                       removed. Similarly, without the inferred mutex constraints 
                                                       and the removal of single valued variables, CSP-PLAN re•
                                                       quired 154.3 sec. to solve the problem. Adding the mutex 
                                                       constraints reduced this time down to 0.33 sec, and removing 
                                                       single valued variables brought the time down even further to 
                                                       0.04 sees. The effect of some of the other planning specific 
                                                       techniques is described below. 
                                                       DVO heuristic: The order in which variables are instanti•
                                                       ated during search greatly affects the solution times for a 
                                                       CSP. Table 2 shows the difference in performance between 
                                                       the standard CSP heuristic and our BSEARCH 
                                                       heuristic which was designed specifically to take advantage 
                                                       of the planning based structure of the CSPs that CSP-PLAN is 
                                                       solving. These representative problems show that BSEARCH 
                                                       performs much better than dom+deg. 
                                                       Redundant Constraints: Table 3 shows the performance of 
                                                       CSP-PLAN when mutexes between inverse actions and se•
                                                       quence constraints are added to the BASE-CSP. On these 
                                                       problems we see that there is a slight improvement in CSP-
                                                       PLAN when mutexes between inverse actions are present. In•
                                                       terestingly, adding sequence constraints did not help. Minor 
                                                       improvements on some problems were negated by significant 
                                                       degradation on others. 

                                                       6.3 Comparison with similar approaches 
                                                       The results in Table 4 show how CSP-PLAN (using the same 
                                                       setting for all problems)7 compares with GRAPHPLAN [Blum 

                                                         7 A number of planning domains could be solved faster with dif•
                                                       ferent settings; e.g., the heuristics sometimes performed differently 


958                                                                                             PLANNING 