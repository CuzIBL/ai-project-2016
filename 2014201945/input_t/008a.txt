Session 3 Theorem Proving and 
Logic: I 

                                               A MAN-MACHINE THEOREM PROVING SYSTEM 

                                                   W. W. Bledsoe and Peter Bruell 
                                                     University of Texas, Austin 

 ABSTRACT: This paper describes a man-machine theorem                    with the mathematician. The theorem prover, which is 
 proving system at the University of Texas (Austin)                      described in Section 3, is written in LISP and is 
 which has been used to prove a few theorems in                          based on IMPLY (see Section 4 of [1]) and the methods 
 general topology. The theorem (or subgoal) being                        given in [1] and [2], It has the ability to prove 
 proved is presented on the scope in its natural form                     theorems on its own; human intervention is used to 
 so that the user can easily comprehend it and, by a                      increase its power and speed up proofs. 
 series of interactive commands, can help with the                       The DETAIL Feature. 
 proof when he desires. A feature called DETAIL is                              One of the principal difficulties with most man-
 employed which allows the human to interact only when                   machine provers is in knowing when and how the man 
 needed and only to the extent necessary for the proof.                   should intervene. Firstly the human may have trouble 
       The program is built around a modified form of                     in reading and comprehending the text on the scope, 
 IMPLY, a natural-deduction-like theorem proving                          and secondly, he doesn't know when the machine should 
 technique which has been described earlier.                             be helped, and how much he should do. He does not 
       A few examples of proofs are given.                               want to make a lot of unneeded entries, and if he 
                                                                         makes a mistake he wants to easily recover. 
                                                                                The first difficulty is solved in the system 
                                                                          described here by employing the human oriented lan•
                                                                          guage IMPLY and in displaying the theorem on the scope 
                                                                          in a "pretty-print" form. This is further described 
                       1. Introduction.                                  below. 
                                                                                The second difficulty is handled by a procedure 
       Some workers in automatic theorem proving, in•                    which allows the computer by itself to first try to 
 cluding the authors, believe that it will be many                       prove the theorem (or subgoal). If it succeeds, then 
 years (if ever) before machines alone can prove                         all is well, but if it fails within a prescribed time-
 difficult theorems in mathematics. Thus some, who                        limit, it prints on the scope the statement of the 
 hope to see machines used as practical assistants to                     theorem and the word "FAILURE" and awaits a command 
 pure mathematicians, have redirected their attention                     from the user. If he commands "DETAIL" then it will 
 to man-machine theorem provers [3, 4, 5] and theorem                    proceed (again) with its proof to the point where the 
 proof checking [6, 7, B].                                                current goal is split into subgoals. At that point it 
       The present paper describes a man-machine theo•                   prints on the scope the statement of the new subgoal 
 rem proving system at the University of Texas which                      for which it failed and stops, and the whole process 
 has been used to prove a few theorems in general                        can be repeated. 
 topology. Our system is organized in the same general                          At any of these stops the user can employ a 
 way as those of Guard [3], Luckham [4], and Huet [5],                   variety of other commands such as DEFN, PUT, USE, etc. 
 but with many major differences. For example,                            (which are described below) to help with the proof. 
 Luckham and Huet use variations of Resolution as                        In this way he can easily isolate the difficulty and 
 their principal rules of inference whereas we use a                     make only those entries needed by the machine in its 
 modified form of IMPLY [1], which is a natural-deduc•                   proof. Indeed he can start the machine on the proof 
 tion-type method.                                                       of a theorem without enough hypotheses (reference 
       Also our system displays formulas on the scope                    theorems) and supply them only when and if they are 
 in a natural, easy to read, manner and has available                    needed in the proof. 
 a variety of interactive commands the user can employ                          The following is a symbolic example for explain•
 to help with the proof. Among these is a feature                         ing the DETAIL process. Real examples are given in 
 called DETAIL which allows the human to interact only                   Section 4. 
 when needed and only as much as is required for the 
 proof. 
       As yet this system has proved no new theorem in 
 topology. The program is still in the state of devel•
 opment and It will be sometime before we can deter•
 mine whether It can materially help a mathematician 
 prove new theorems. 
       This paper describes the facility, the inter•
 active commands available to the user mathematician, 
 the modified version of IMPLY which is used, and 
 gives a few examples of proofs of theorems. 

        2. The Facility and Interactive Commands. 

       The facility consists of a Datapoint 3300 ter•
 minal connected to the CDC 6600 computer via the UT 
 interactive (time-sharing) system TAURUS [11]. A 
 mathematician (the user) sits at the terminal, types 
 in a theorem to be proved and occasionally helps the 
 program with the proof by providing information he 
 feels is needed and answering questions the program 
 poses. 
       The computer program consists of a large auto•
 matic theorem prover and a subroutine for interacting 

                                                                     56      The other subgoals of (3) are handled similarly, 
using other hypotheses from H. 
     Thus the very difficult problem (1) has been re­
duced to a series of easier problems by the human 
 action (2) and some machine manipulations. It is 
 true that the mathematician is required to provide 
 the most difficult step in the proof but then the 
 computer does the rest, proving a series of smaller 
 theorems and verifying that the mathematician's 
 choice for G was indeed correct, if he made a 
wrong choice at (2) he might want to intervene later, 
backup, and try a different value for G. 
     The PUT feature, though quite simple, is a very 
 powerful device. It alone makes a tremendous differ­
 ence in the number of theorems the computer program 
 can prove. 

                                                                    58                                                                        REDUCE helps convert expressions into forms which are 
                                                                       more easily provable by IMPLY. It also is a con•
to be printed.                                                         venient place to store facts that can be used by the 
HISTORY. If commanded the program keeps a record                       machine as they are needed. For example REDUCE returns 
(history) of each step it has taken in the proof of a                  "TRUE" when applied to such formulas as (Closed C1ST 
theorem, including steps where the human intervenes                    A), (Open X), (Open (Open interior A), 
but excluding unproductive steps. This history can                     etc. 
be used by the mathematician later, upon the command                   Forward Chaining. It seems that unrestrained forward 
"RUN HISTORY N", to rerun all or part of the proof                     chaining is a poor idea in automatic theorem proving 
without interruption, and to try if desired a                          because it tends to produce an excessive number of 
different line of proof at any step.                                   useless hypotheses (lemmas). Consequently, our earlier 
                   3. The. Machine Prover                              versions of IMPLY relied heavily on backward chaining. 
      The prover used by this system consists mainly                   However, the use of the man-machine system (especially 
of a modified form of IMPLY (Section 4 of [1]), with                   the PUT feature) on theorems in topology has brought 
the addition of REDUCE (see p. 57 of [2]), and other                   to our attention the power of forward chaining in 
concepts from [2] and [17].                                            many proofs, especially in cases where the chaining 
      Two of the principal differences in the present                  expression is a ground (all constant) formula. We 
version is that IMPLY is now the main routine (instead                  therefore have provided ground forward chaining as a 
of CYCLE), and REDUCE is now applied inside IMPLY.                     new rule in IMPLY. 
The SPLIT functions (p. 56 of [2]) are an integral                     RULE (forward chaining). If PO is a ground expres•
part of IMPLY itself. Also IMPLY has been given a                      sion (i.e., contains no variables) which is an instance 
breadth-first search capacity (see below), and the                     of P(i.e., there is a substitution T for which 
back-up feature (see Footnote 11 of [1]) has been                      PO = PT) then the goal 
removed and replaced by a human back-up capability. 
IMPLY. IMPLY is a natural deduction type system which 
processes formulas in their "natural" form (see also 
[9, 10]). It consists partially of a few rewrite                        is converted to the new goal 
rules such as 

                                                                              This rule need only be applied at the time some•
                                                                        thing new is added to the hypothesis, such as when an 
                                                                       expression (H (A B)) is converted to (H A B), 
which convert the expression being proved from one                      or when another forward chaining step has just been 
form to another. Its main function is to split a                        completed. 
goal into subgoals                                                            This rule has been further extended in the system 
                                                                        to provide for so-called "PEEK forward chaining", 
                                                                       which works as follows: 
                                                                       RULE (PEEK forward chaining). If P is a ground 
backchain, substitute equals, and forward chain (new                    expression, P. = A has the definition (P Q), 
addition). A fundamental part of IMPLY is a matching                    then the goal 
routine (unification): if T is a most general 
unifier of A and A' then the subgoal 

                                                                        is converted to the new goal 

is judged "TRUE" with T being returned to be applied 
to further subgoals. 
REDUCE. REDUCE consists wholly of a set of rewrite                            Note that the machine "peeks" at the definition of 
rules which converts parts of formulas. It contains                     A to see if forward chaining is possible, but then 
special heuristics for set theory, topology, etc.                       returns A to its original form. This variation is 
                                                                        very useful (see Example 2, (111 H1)). Returning A 
For example 
                                                                        to Its original form makes the theorem much easier to 
                                                                        comprehend for the mathematician reading the display 
                                                                        on the scope. 
                                                                              Forward chaining still tends to clutter up the 
                                                                        scope with useless hypotheses, and the user occasion•
                                                                        ally finds It useful to remove some of them by the 
                                                                        command DELETE. More importantly the user, when he 
                                                                        gives the computer a theorem to prove, need not list 
                                                                        all required lemmas but can give them only as they are 
                                                                        aeeded In the proof, and thereby can eliminate much 
                                                                        irrelevant forward chaining. 
                                                                        Breadth-First-Search. One of the difficulties with the 
                                                                        previous version of IMPLY was that its search was 
                                                                        essentially "depth-first." For example, in proving 


*Since REDUCE is now called from inside IMPLY, it (RE•                  It would back chain off of 
DUCE) must eliminate quantifiers and skolemize in the 
course of reducing formulas. As was explained in Sec•
tion 2 under DEFN, the exact form of this skolemization 
depends on the position of the expression in the theorem. 
                                                                    59 and try to prove H(x ), before finally getting 
around to the trivial proof (P(xO) -> P(x )). 
      A human, acting more intelligently, would 
casually glance across the hypotheses, and notice 
P(xo.) before trying to establish H(xO). 
      A more serious difficulty is encountered in 
instantiating definitions, in that not enough direc•
tion is provided as to which definition to instantiate 
first. As a general rule, an expression such as "reg" 
should not be replaced by its definition unless it 
will "do some good." Otherwise a glut of new symbols 
hamper both man and machine. Also it is usually 
better to instantiate definitions in the conclusion 
before those in the hypothesis, and to instantiate 
definitions of "strange" terms such as "paracompact" 
before those of ordinary terms such as "closed" or 

      We have attempted to remedy these two diffi•
culties and have also added another feature called 
"PAIRS" which tries if possible to apply that 
hypothesis which is like the desired conclusion, even 
when a complete match cannot be made. 
      The following is a rather sketchy description of 
the revised IMPLY program, which gives only the 
flavor of It. A detailed description is given in 
[12]. 
      When a theorem (or subgoal) 


is given for IMPLY to prove, it first calls REDUCE, 
then applies its own rewrite rules, and SPLITS it if 
appropriate. Next it does a breadth-first search 
by trying the following seven steps In the order 
indicated. If any step fails it goes to the next; 
the success of a step usually results in another call 
to the function IMPLY. 


      These are described in more detail below. With 
the exception of step 5 each of the steps listed 
involves a call from IMPLY to a function called HOA. 
What basically happens is that IMPLY splits the 
theorem into subgoals on the basis of the OR-AND 
structure of C , and HOA attempts to use the hypo•
theses to prove these subgoals. 
       1. Try matching the conjuncts of H with C. 
           That is if H is of the form H1 - H2 - H3 
            it tries to match C with one or the H.. 
      2. Same as 1., except that backchaining is 
           allowed. For example, in 


                                                                   60 