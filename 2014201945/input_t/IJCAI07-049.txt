                                Tractable Temporal Reasoning            ∗

                            Clare Dixon, Michael Fisher and Boris Konev
                       Department of Computer Science, University of Liverpool,
                                        Liverpool L69 3BX, UK
                          {clare,michael,konev}@csc.liv.ac.uk


                    Abstract                          particular models of concurrency such as synchrony, asyn-
                                                      chrony etc., or particular coordination or cooperation actions.
    Temporal reasoning is widely used within both
                                                        In this paper we consider a new fragment of PTL that incor-
    Computer Science and A.I. However, the underly-
                                                      porates the use of XOR operators, denoted (q1 ⊕q2 ⊕...⊕qn)
    ing complexity of temporal proof in discrete tempo-
                                                      meaning that exactly one qi holds for 1 ≤ i ≤ n.Since
    ral logics has led to the use of simpliﬁed formalisms
                                                      the complexity of unsatisﬁability for XOR clauses in classi-
    and techniques, such as temporal interval algebras
                                                      cal propositional logic is low [Schaefer, 1978], there is the
    or model checking. In this paper we show that
                                                      potential to carry much of this over to the temporal case.
    tractable sub-classes of propositional linear tem-
                                                        Thus, in this paper we provide several results. First, we in-
    poral logic can be developed, based on the use of
                                                      troduce the PTL fragment to be considered, called TLX, and
    XOR fragments of the logic. We not only show
                                                      show a complete clausal resolution system for this. The frag-
    that such fragments can be decided, tractably, via
                                                      ment allows us to split the underlying set of propositions into
    clausal temporal resolution, but also show the ben-
                                                      distinct subsets such that each subset (except one) represents
    eﬁts of combining multiple XOR fragments. For
                                                      a set of propositions where exactly one proposition can hold
    such combinations we establish completeness and
                                                      (termed XOR sets); the remaining set has no such constraints.
    complexity (of the resolution method), and also
                                                      Then we show that deciding unsatisﬁability of speciﬁcations
    describe how such a temporal language might be
                                                      in such a logic is, indeed, tractable.
    used in application areas, for example the veriﬁca-
    tion of multi-agent systems. This new approach to
    temporal reasoning provides a framework in which  2   XOR Temporal Logic
    tractable temporal logics can be engineered by in- The logic we consider is called “TLX”, and its syntax and se-
    telligently combining appropriate XOR fragments.  mantics essentially follow that of PTL [Gabbay et al., 1980],
                                                      with models (isomorphic to the Natural Numbers, N)ofthe
                                                              =
1  Introduction                                       form: σ    t0,t1,t2,t3,... where each state, ti,isasetof
                                                      proposition symbols, representing those propositions which
Temporal logics have been used to describe a wide variety of aresatisﬁedintheith moment in time. The notation (σ, i) |=
systems, from both Computer Science and Artiﬁcial Intelli- A denotes the truth (or otherwise) of formula A in the model
gence. The basic idea of proof, within propositional, discrete σ at state index i ∈ N. This leads to semantic rules:
                                                                g
temporal logics, is also both intuitive and appealing. How- (σ, i) |= A iff (σ, i +1)|= A
ever the complexity of satisﬁability for such logics is high. (σ, i) |= ♦A iff ∃k ∈ N. (k  i) and (σ, k) |= A
For example, the complexity of satisﬁability for propositional (σ, i) |= A iff ∀j ∈ N. if (j  i) then (σ, j) |= A
linear time temporal logic (PTL) is PSPACE-complete [Sistla
                                                                                                ∈ N
and Clarke, 1985]. Consequently, model checking [Clarke et For any formula A, model σ, and state index i ,then
                                                           (   ) |=         (   ) |=
al., 1999] has received much attention as it also allows users either σ, i A holds or σ, i A does not hold, denoted
                                                         (  )  |=                          ( 0) |=
to check that a temporal property holds for some underlying by σ, i A.Ifthereissomeσ such that σ,  A,then
                                                                               (  0) |=
model of the system.                                  A is said to be satisﬁable.If σ,  A for all models, σ,
                                                                                       |=
  Often temporal problems involve an underlying structure, then A is said to be valid and is written A.
such as an automaton, where a key property is that the au- The main novelty in TLX is that it is parameterised by
                                                               P   P                           P  P
tomaton can be in exactly one state at each moment. Such XOR-sets 1, 2,. . . , and the formulae of TLX( 1, 2,...)
problems frequently involve several process or agents, each are constructed under the restrictions that exactly one propo-
                                                                        P
with underlying automaton-like structures, and we are inter- sition from every set i is true in every state. For example, if
                                                                                        P
ested in properties relating to how the agents progress under we consider just one set of propositions ,wehave
  ∗                                                              (p1 ⊕ p2 ⊕ ...⊕ pn) for all pi ∈P.
   The work of the first and last authors was partially supported
by EPRSC grant number GR/S63182/01 “Dynamic Ontologies: a Furthermore, we assume that there exists a set of proposi-
Framework for Service Descriptions”.                  tions in addition to those deﬁned by the parameters, and that

                                                IJCAI-07
                                                   318these propositions are unconstrained as normal. Thus, TLX() and SRESPk involve XOR resolution. Note we can only ap-
is essentially a standard propositional, linear temporal logic, ply IRESA and SRESA between clauses with complementary
while TLX(P,Q,R) is a temporal logic containing at least (non-XOR) literals on the right hand side. We can also apply
              P∪Q∪R            P  =  {           }
the propositions        ,where        p1,p2,...,pl ,  the IRESPk and SRESPk rules to these clauses but the dis-
Q =  {            }    R  = {            }      P          ∨    ∨
      q1,q2,...,qm ,and       r1,r2,...,rn where  ,   junct A1 ∨ A2 on the right hand side of the conclusion will be
Q    R
  and   are disjoint, but also satisfying             equivalent to true.
  [(p1⊕p2⊕...⊕pl) ∧(q1⊕q2⊕...⊕qm)  ∧(r1⊕r2⊕...⊕rn)]
                                                      3   Soundness and Completeness
2.1  Normal Form                                      Similarly to [Fisher et al., 2001; Degtyarev et al., 2006], one
Assume we have   n sets of XOR   propositions P1 =    can show that whenever the parent clauses are satisﬁable then
{          }         = {           }
 p11,...p1N1 , ..., Pn  pn1,...pnNn  and a set of ad- so is the resolvent. Since all the rules of initial,andstep res-
                    = {         }
ditional propositions A a1,...aNa . In the following: olution follow the same pattern, we ﬁrst prove the classical
    ∧ −
  • P  denotes a conjunction of negated XOR propositions propositional counterpart of the completeness theorem, and
     ij                                               then use it to prove the completeness of temporal resolution.
    from the set Pi;
                                                      Consider the following classical set of resolution rules con-
    ∨ +
  • Pij denotes a disjunction of (positive) XOR proposi- sisting of the rule RESA:
                                                           ∨      ∨     ∨        ∨       ∨    ∨
    tions from the set Pi;                                (P + ∨ ...P + ∨ A ∨ a); (P + ∨ ...P + ∨ A ∨¬a)
    ∧                                                       11     n1    1        12      n2   2
  • Ai denotes a conjunction of non-XOR literals;               ∨+     ∨+   ∨+      ∨+   ∨    ∨
                                                               (P  ∨ ...P ∨ P  ∨ ...P  ∨ A1 ∨ A2)
    ∨                                                            11     n1   12      n2
  • Ai denotes a disjunction of non-XOR literals.                   ∈{1       }
                                                     and, for every k  ,...,n ,theruleRESPk :
A normal form for TLX is of the form i Ci where each                 ∨+     ∨+      ∨+
                                                                   (P  ∨ ...P  ∨ ...P  ∨ A1)
Ci is an initial, step or sometime clause (respectively) as fol-     11      k1      n1
                                                                     ∨+     ∨+      ∨+
lows:                                                              (P12 ∨ ...Pk2 ∨ ...Pn2 ∨ A2)
                        ∨         ∨    ∨                ∨    ∨           ∨  ∨          ∨    ∨    ∨    ∨
                         +         +                   (P + ∨ P + ∨ ...com(P + , P + ) ∨ ...∨ P + ∨ P + ∨ A ∨ A )
              start ⇒  P1i ∨ ...∨ Pni ∨ Ai               11   12          k1 k2         n1   n2   1    2
   ∧ −     ∧ −   ∧      g  ∨ +       ∨ +  ∨
  P1j ∧ ...Pnj ∧ Aj ⇒    (P1j ∨ ...∨ Pnj ∨ Aj)
                          ∨          ∨    ∨           Lemma 1   If a set of classical propositional clauses is unsat-
                   ⇒   ♦(  + ∨    ∨   + ∨   )
               true       P1k  ...  Pnk   Ak .        isﬁable than its unsatisﬁability can be established by the rules
                                                                           (   ×    ×···×     × 2Na )
Note that due to the semantics of the XOR clauses, if i  = k RESA and RESPk in O N1 N2     Nn        time.

           pji ∧ pjk ≡ false    ¬pji ∨¬pjk ≡ true     Proof:  First we show that if an unsatisﬁable set of clauses
                                                      C
            Nj                     Nj                 does not contain non-XOR literals, then its unsatisﬁability
  and          ¬pji ≡ false            pji ≡ true.    can be established by rules RESPk . Note that any such set of
                                                             C                                    0    ≤
            i=1                    i=1              clauses is unsatisﬁable if, and only if, for every l, <l
          ≡           ¬     ¬   ≡                     n, and every set of propositions p1,p2,...,pl,wherepi ∈
 Also  pji             pjk   pji            pjk                C                    C
                                                      Pi,theset p1,...,pl of clauses from , which contain none of
             pjk∈Pj ,k=i          pjk∈Pj ,k=i
                                                      p1,..., pl, is nonempty. Indeed, otherwise every clause from
allow us to maintain positive XOR propositions on the right C contains at least one of the propositions p1,...pl,somaking
hand sides of clauses and negated XOR propositions on the p1,...,pl true satisﬁes C.
left hand side of clauses.                              Assume all clauses from C consist of propositions from P1,
                                                      ..., Pk only (originally, k = n) and show that with the rule
2.2  Resolution Rules                                                                                C
                                                      RESPk  one can obtain an unsatisﬁable set of clauses in
We decide the validity of formulae in TLX using a form of which all clauses consist of propositions from P1,..., Pk−1
clausal temporal resolution [Fisher et al., 2001].Thereso- only.
lution rules are split into three types: initial resolution, step Take arbitrary propositions p1 ∈ P1, p2 ∈ P2, ...pk−1 ∈
                                                                                       ∈C
resolution and temporal resolution. These are presented in Pk−1 and take arbitrary clauses C1 p1,p2,...,pk−1,pk,1 ,
Fig. 1. Initial resolution resolves constraints holding in the 2 ∈Cp1,p2,...,p ,p N ∈Cp1,p2,...,p ,p
                                                      C            k−1  k,2 ,..., C k        k−1 k,Nk .Ap-

initial moment in time. Step resolution involves resolving two plying rule RESPk to C1,..., CNk one can obtain a clause
                                                        
step clauses or deriving additional constraints when a contra- C consisting of propositions from P1,..., Pk−1 only such
                                                                                                     
diction in the next moment is derived. Temporal resolution that C does not contain any of p1,...,pk−1.ThesetC is
resolves a sometime clause with a constraint that ensures that formed from such clauses C for all possible combinations
the right hand side of this clause cannot occur.      of p1 ∈ P1, p2 ∈ P2,...pk−1 ∈ Pk−1. Clearly, for every l,
                                           ∨ + ∨ +    0    ≤
  In the conclusion of these resolution rules com(Pij , Pik ) <l n, and every set of propositions p1,p2,...,pl,where
                                            ∨                                                
                                             +        pi ∈ Pi,thesetC p1,...,p is nonempty, hence, C is unsatisﬁ-
denotes the disjunction of the propositions in both and                   l
                                            Pij       able. Applying this reasoning at most n times, one can obtain
∨ +
Pik or false if there are no propositions common to both. For an empty clause.
example, com(p1 ∨ p2,p2 ∨ p3)=p2.                       Consider now a set of clauses C, which may contain non-
  Observe that IRESA and SRESA apply classical resolution XOR literals. For arbitrary p1 ∈ P1,...pn ∈ Pn con-
                                                           C
to the right hand side of the parent clauses whereas IRESPk sider p1,...,pn . Similarly to the previous case, every such

                                                IJCAI-07
                                                   319 Initial Resolution:
                                             ∨+      ∨+   ∨
                                  start ⇒   (P11 ∨ ...Pn1 ∨ A1 ∨ a)
                                             ∨+      ∨+   ∨
                        IRESA     start ⇒   (P12 ∨ ...Pn2 ∨ A2 ∨¬a)
                                             ∨+      ∨+   ∨+      ∨+   ∨    ∨
                                  start ⇒   (P11 ∨ ...Pn1 ∨ P12 ∨ ...Pn2 ∨ A1 ∨ A2)
 For every k ∈{1,...,n} we have the rule.

                                     ∨+       ∨+      ∨+   ∨
                          start ⇒   (P11 ∨ ...∨ Pk1 ∨ ...Pn1 ∨ A1)
                                     ∨        ∨       ∨    ∨
               IRES             ⇒   (P + ∨ ...∨ P + ∨ ...P + ∨ A )
                   Pk     start       12       k2      n2   2
                                     ∨+   ∨+            ∨+  ∨+        ∨+   ∨+    ∨   ∨
                          start ⇒   (P11 ∨ P12 ∨ ...∨ com(Pk1, Pk2) ∨ ...∨ Pn1 ∨ Pn2 ∨ A1 ∨ A2)
 Step Resolution:
                                     ∧   ∧−      ∧−        g ∨+      ∨+   ∨
                                     A1 ∧ P11 ∧ ...Pn1 ⇒    (P11 ∨ ...Pn1 ∨ A1 ∨ a)
                                     ∧   ∧−      ∧−        g ∨+      ∨+   ∨
        SRESA                        A2 ∧ P12 ∧ ...Pn2 ⇒    (P12 ∨ ...Pn2 ∨ A2 ∨¬a)
                    ∧   ∧   ∧−      ∧−   ∧−      ∧−        g ∨+      ∨+   ∨+      ∨+   ∨    ∨
                   A1 ∧ A2 ∧ P11 ∧ ...Pn1 ∧ P12 ∧ ...Pn2 ⇒  (P11 ∨ ...Pn1 ∨ P12 ∨ ...Pn2 ∨ A1 ∨ A2)
 For every k ∈{1,...,n} we have the rule
                       ∧   ∧−      ∧−        g ∨+       ∨+        ∨+
                      A1 ∧ P11 ∧ ...Pn1 ⇒     (P11 ∨ ...∨ Pk1 ∨ ...∨ Pn1 ∨ A1)
                       ∧   ∧       ∧           ∨        ∨       ∨
      SRES            A  ∧ P − ∧ ...P − ⇒    g(P + ∨ ...∨ P + ∨ ...P + ∨ A )
           Pk           2   12      n2          12       k2      n2   2
     ∧    ∧   ∧−      ∧−   ∧−      ∧−        g ∨+   ∨+            ∨+  ∨+        ∨+   ∨+
     A1 ∧ A2 ∧ P11 ∧ ...Pn1 ∧ P12 ∧ ...Pn2 ⇒  (P11 ∨ P12 ∨ ...∨ com(Pk1, Pk2) ∨ ...∨ Pn1 ∨ Pn2 ∨ A1 ∨ A2)

                                      ∧   ∧−      ∧−        g
                                     A1 ∧ P  ∧ ...P    ⇒     false
              CONV                         11      n1
                                 ∧−     ∧−       ∧−               g   ∧−    ∧−       ∧−
                        start ⇒ (¬A1 ∨¬P11 ∨ ...¬Pn1);     true ⇒  (¬A1 ∨¬P11  ∨ ...¬Pn1)
 Temporal Resolution:
                                                        ∨+         ∨+
                                            L  ⇒      (¬P11 ∧ ...∧¬Pn1 ∧¬A1)
                          TRES                        ∨+        ∨+
                                          true ⇒   ♦(P11 ∨ ...∨ Pn1 ∨ A1)
                                                           g
                                    start ⇒¬L      true ⇒   ¬L

                               Figure 1: Resolution Rules for the XOR Fragment

                                            
Cp1,...,pn should be nonempty. Consider the set Cp1,...,pn T be the set of all step clauses; and E be the sometime
of clauses obtained by deleting all XOR-propositions from clauses.
                         
clauses of Cp1,...,pn .EveryCp1,...,pn must be unsatisﬁable Given a set of clauses over a set of propositional symbols
                                                     P, we construct a ﬁnite directed graph G as follows. The
(otherwise, extending the satisfying assignment for Cp ,...,p
                                             1   n    nodes of G are interpretations of the set of propositions, that
with p1,...,pn we satisfy all the clauses in C). Then clas-
sical binary resolution will be able to prove unsatisﬁability satisfy the XOR constraints over the XOR subsets. Notice
                                                     that, because of the XOR-constraints, exactly one proposi-
of Cp1,...,pn . Applying RESA “in the same way”, one can
                                                      tion from each set of XOR propositions Pi and any subset of
obtain a clause C, which does not contain neither non-XOR
                                                     propositions in A are true in I. This means that there at at
literals, nor p1,...,pn.ThesetC , formed from such clauses                   Na
                                                     most N1 ×N2 ×···×Nn  ×2   nodes in the behaviour graph.
C  for all possible combinations of p1 ∈ P1, p2 ∈ P2,                                                   
       ∈                                                For each node, I, we construct an edge in G to a node I
...pk−1   Pk−1, is an unsatisﬁable set of clauses not con- if, and only if, the following condition is satisﬁed:
taining non-XOR literals.                                                           g
                                                        • For every step clause (P ⇒ Q) ∈T,ifI  |= P then
  Finally, one can see that it is possible to implement the 
                                           Na             I |= Q.
described procedure in O(N1 × N2 ×···×Nn × 2 ) time.
                                                     A node, I, is designated an initial node of G if I |= I.The
                                                      behaviour graph G of the set of clauses is the maximal sub-
Next we sketch the proof of completeness of temporal resolu- graph of G given by the set of all nodes reachable from initial
                                       [
tion, which is obtained combining the ideas of Fisher et al., nodes.
2001; Degtyarev et al., 2002] and Lemma 1.
                                                      If G is empty then the set I is unsatisﬁable. In this case there

Deﬁnition 1 (Behaviour Graph) We split the set of tempo- must exist a derivation by IRESA and IRESPk as described in
                                                                                             N
ral clauses into three groups. Let I denote the initial clauses; Lemma 1 (and in O(N1 × N2 ×···×Nn × 2 a ) time).

                                                IJCAI-07
                                                   320                                                   1.  start ⇒ st
    ("think") s                    sb ("bid")                g
           t                                       2.st   ⇒   (st ∨ sb)     ("start") t
                                                             g                     s
                                                   3.sb   ⇒    sw
                                                              g
                                                   4.sa   ⇒    st
                                                              g
                                                   5.sw   ⇒    (sw ∨ sa)
                                                   6        ⇒ ♦¬
                                                    .  true      st                           tr
                                                   7.  start ⇒ ts
                                                             g                              ("receiving")
                                                   8.ts   ⇒   tr
                                                             g
                                                   9.tr   ⇒   (tr ∨ tf )
   ("assess") s                   sw ("wait")                g
           a                                       10.tf  ⇒    ts          ("finish") tf


              Figure 2: Automata for agents S and T , together with corresponding clauses in normal form.

                                                                                                  N
  Now suppose G is not empty. Let I be a node of G which rule, in time polynomial in N1 × N2 ×···×Nn × 2 a .
                              g
has no successors. Let {(Pi ⇒  Qi)} be the set of all
step clauses such that I |= Pi,then∧Qi is unsatisﬁable. Proof: To ﬁnd such L, it sufﬁces to ﬁnd a strongly con-
Using Lemma 1, one can show that step resolution proves nected component in the behaviour graph of the set of clauses,
        g                                                                                      |=    ¬ k
∧Pi ⇒    false. After the set of clauses is extended by the such that for every node I of this component, I k q .
conclusion of the CONV rule, ∨¬Pi, the node I is deleted The simplest brute-force algorithm would analyse all pairs of
                                                                       (   ×   ×···×    ×2Na )2
from the graph.                                       nodes (and there are N1 N2     Nn        such pairs),
  In the case when all nodes of G have a successor, a and this can be done more efﬁciently with step resolution as
contradiction can be derived with the help of the tempo- in [Degtyarev et al., 2006].                   
ral resolution rule TRES. Note that we impose no restric-
                                                      Theorem 4  If a set of temporal clauses is unsatisﬁable, tem-
tion on this rule (it coincides with the temporal resolution
                                                      poral resolution will deduce a contradiction in time polyno-
rule for the general calculi presented in [Fisher et al., 2001;                   N
                                                      mial in N1 × N2 ×···×Nn  × 2 a .
Degtyarev et al., 2002]) and the proof of completeness is no
different from what is already published [Fisher et al., 2001;
Degtyarev et al., 2002].                              5   Example
                                                      Having described the underlying approach, we will now con-
4Complexity                                           sider an example that makes use of some of these aspects.
Again, we consider initial and step resolution ﬁrst.  In particular, we will have multiple XOR fragments, together
                                                      with standard propositions (unconstrained by XOR clauses).
Lemma 2  Using the rules of initial and step resolution, it The example we will use is a simpliﬁcation and abstraction
is possible to reduce a set of temporal clauses to one whose of agent negotiation protocols; see, for example [Ballarini et
behaviour graph does not have nodes   without successors in al., 2006]. Here, several (in our case, two) agents exchange
                          N  3
O   N1 × N2 ×···×Nn   ×  2 a    time.                 information in order to come to some agreement. Each agent
                                                      essentially has a simple control cycle, which can be repre-
Proof: Consider the following resolution strategy. For every sented as a ﬁnite state machine. In fact, we have simpliﬁed
set of propositions p1 ∈ P1,...,pn ∈ Pn and a ∈ A, consider these still further, and sample basic control cycles are given
the set of all step-clauses                           in Fig. 2 (for both agents S and T ).
      ∧    ∧ −     ∧ −    g ∨ +     ∨ +   ∨             Thus, we aim  to use these automata as models of the
     A1 ∧ P   ∧ ...P  ⇒    (P  ∨ ...P   ∨ A1)
           11       n1       11      n1               agents, then formalise these within our logic. Importantly,
          ∧   ∧ −       ∧ −
such that A1, P11,...,...Pn1 do not contain any  of   we will add additional clauses (and propositions) characteris-
                                                N
a, p1,...,pn (there are at most N1 × N2 ×···×Nn × 2 a ing agreements or concurrency and, ﬁnally, we will show how
such sets of clauses), and try establishing the unsatisﬁabil- our resolution method can be used to carry out veriﬁcation.
ity of the conjunction of the right-hand sides together with We begin by characterising each agent separately as a set
the universal clauses by step resolution (as Lemma 1 shows, of clauses within our logic. To achieve this, we use a set of
                                          N
this can be done in O(N1 × N2 ×··· × Nn × 2 a ) time. propositions for each agent. Thus, the automaton describing
Then, all nodes without successors will be deleted from the agent S is characterised through propositions of the form sa,
behaviour graph (but some new such nodes may emerge). Af- sb, etc., while the automaton describing agent T is charac-
                       N
ter N1 × N2 ×···×Nn × 2 a repetitions, we obtain a graph terised using propositions such as tr, ts, etc. Both these sets
in which every node has a successor.                 are XOR sets. Thus, exactly one of sa, sb, ..., and exactly
                                                      one of tr, ts, ..., must be true at any moment in time.
Lemma 3  Given a set of temporal clauses, it is possible to Now, the set of clauses characterising the two automata are
ﬁnd L such that L ⇒     ¬qk, as required for the TRES given in Fig. 2. Regarding automaton S’s description, note
                      k                               that clause 6 ensures that the automaton is inﬁnitely often in

                                                IJCAI-07
                                                   321   1.             start ⇒   st                                                              g
                             g                10.                            ¬ts ∧¬tr  ⇒     ts
   2.  ¬sb ∧¬sw  ∧¬sa   ⇒     (st ∨ sb)
                             g                11.                                true  ⇒   ♦agree
   3.  ¬st ∧¬sw  ∧¬sa   ⇒     sw                                                            g
                             g                12.  (agree ∧¬st ∧¬sb ∧¬sa  ∧¬ts ∧¬tf )  ⇒     sa
   4.  ¬st ∧¬sb ∧¬sw    ⇒     st                                                            g
                             g                13.  (agree ∧¬st ∧¬sb ∧¬sa  ∧¬ts ∧¬tf )  ⇒     tf
   5.   ¬st ∧¬sb ∧¬sa   ⇒     (sw ∨ sa)                                                     g
                                              14.            (¬agree ∧¬st ∧¬sb ∧¬sa)   ⇒     sw
   6.             true  ⇒   ♦(sb ∨ sw ∨ sa)                                                 g
                                              15.                 (¬agree ∧¬ts ∧¬tf )  ⇒     tr
   7.             start ⇒   ts                                                              g
                             g                16.        (agree ∧¬st ∧¬sb ∧¬sa ∧¬tr)   ⇒     sw
   8.        ¬tr ∧¬tf   ⇒     tr                                                            g
                             g                17.             (agree ∧¬sw ∧¬ts ∧¬tf )  ⇒     tr
   9.        ¬ts ∧¬tf   ⇒     (tr ∨ tf )
                                                  g
  18.                                  true  ⇒     (sb ∨ sw ∨ sa ∨ tr ∨ tf )
                                                  g
  19.           (¬st ∧¬sb ∧¬sw  ∧¬ts ∧¬tr)   ⇒     false                          [18, 10, 4 SRESP ]
                                                  g                                             k
  20.                                  true  ⇒     (st ∨ sb ∨ sw ∨ ts ∨ tr)[19CONV]
                                                  g
  21.    (agree ∧¬st ∧¬sb ∧¬sa  ∧¬ts ∧¬tf )  ⇒     false                          [20, 12, 13 SRESP ]
                                                  g                                              k
  22.                                  true  ⇒     (¬agree ∨ st ∨ sb ∨ sa ∨ ts ∨ tf )[21CONV]
                                                  g
  23.   (¬agree ∧¬st ∧¬sb ∧¬sa  ∧¬ts ∧¬tf )  ⇒     ¬agree                         [22, 14, 15 SRESP ]
                                                  g                                              k
  24.                                  true  ⇒     (agree ∨ st ∨ sb ∨ sa ∨ ts ∨ tf )[23, 15, 14, 11 TRES]
                                                  g
  25.                                  true  ⇒     (st ∨ sb ∨ sa ∨ ts ∨ tf )[24,      22 SRESA]
                                                  g
  26.                      (¬st ∧¬sw ∧¬sa)   ⇒     (ts ∨ tf )[25,                     3 SRESP ]
                                                  g                                          k
  27.  (¬agree ∧¬st ∧¬sw  ∧¬sa  ∧¬ts ∧¬tf )  ⇒     false                          [26, 15 SRESP ]
                                                  g                                           k
  28.                                  true  ⇒     (agree ∨ st ∨ sw ∨ sa ∨ ts ∨ tf )[27CONV]
                                                  g
  29.    (agree ∧¬st ∧¬sw ∧¬sa  ∧¬ts ∧¬tf )  ⇒     false                          [26, 17 SRESP ]
                                                  g                                           k
  30.                                  true  ⇒     (¬agree ∨ st ∨ sw ∨ sa ∨ ts ∨ tf )[29CONV]
                                                  g
  31.                                  true  ⇒     (st ∨ sw ∨ sa ∨ ts ∨ tf )[28,      30 SRESA]
                                                  g
  32.                       ¬sb ∧¬sw  ∧¬sa   ⇒     (st ∨ ts ∨ tf )[31,                2 SRESP ]
                                                  g                                          k
  33.  (¬agree ∧¬sb ∧¬sw  ∧¬sa  ∧¬ts ∧¬tf )  ⇒     st                             [32, 15 SRESP ]
                                                  g                                           k
  34.    (agree ∧¬sb ∧¬sw ∧¬sa  ∧¬ts ∧¬tf )  ⇒     st                             [32, 17 SRESP ]
                                                  g                                           k
  35.                                  true  ⇒     (sb ∨ sw ∨ sa ∨ ts ∨ tf )[33,      15, 34, 17, 6 TRES]
                                                  g
  36.  (¬agree ∧¬st ∧¬sb  ∧¬sw  ∧¬ts ∧¬tf )  ⇒     false                          [35, 15, 4 SRESP ]
                                                  g                                             k
  37.                                  true  ⇒     (agree ∨ st ∨ sb ∨ sw ∨ ts ∨ tf )[36CONV]
                                                  g
  38.   (agree ∧¬st ∧¬sb  ∧¬sw  ∧¬ts ∧¬tf )  ⇒     false                          [35, 17, 4 SRESP ]
                                                  g                                             k
  39.                                  true  ⇒     (¬agree ∨ st ∨ sb ∨ sw ∨ ts ∨ tf )[38CONV]
                                                  g
  40.                                  true  ⇒     (st ∨ sb ∨ sw ∨ ts ∨ tf )[37,      39 SRESA]
  41                                         ⇒    g(  ∨   )[4035                         31 25 SRES  ]
    .                                  true         ts  tf                           ,  ,  ,       Pk
  42                              ¬   ∧¬     ⇒    g                               [41 8 SRES  ]
    .                               tr   tf        false                             ,      Pk
  43.                                  start ⇒   tr ∨ tf                          [42 CONV]
  44                                         ⇒                                    [43 7 IRES  ]
    .                                  start     false                               ,      Pk

                            Figure 3: Resolution Proof for Automata Agents Example.

a state other than st, ensuring that the automaton can not re- the future (clause 11). Clauses 12 and 13 capture the exact
main in state st forever.                             synchronisation. If an agreement occurs while automaton S is
  We can also characterise how the computations within each in state sw and automaton T is in tr, then the automata make
automaton relate. To begin with, we assume a simple, syn- transitions forward to states sa and tf respectively. Finally,
chronous, concurrent model where both automata make a clauses 14–17 ensure that, if no synchronised agreement is
transition at the same time (see Section 5 for variations on possible, then the automata remain in their relevant states.
this). Next we add a key aspect in negotiation protocols, The clauses above represent the speciﬁcation of a simple
namely a description of what happens when an agreement is system. As an example of how resolution can be used, we
reached. In our example, this is characterised as a synchro- also wish to verify that the system is simultaneously in states
nised communication act. Logically, we use the proposition st and ts eventually. To verify this, we add the negation of
agree to denote this, and add the following clauses.  this property, as characterised by clause 18:
     11.  true ⇒ ♦agree                                                 g
                             g                             18.  true ⇒   (¬st ∨¬ts)
     12.  (agree ∧ sw ∧ tr) ⇒ sa
                             g
     13.  (agree ∧ sw ∧ tr) ⇒ tf                                                                 1 18
                          g                           Thus, if we can derive a contradiction from clauses – then
     14.  (¬agree ∧ sw) ⇒  sw
                          g                           we know the negated property is valid for this speciﬁcation.
     15.  (¬agree ∧ tr) ⇒  tr
                              g                       We ﬁrst rewrite clauses 1–18 in the correct format for the
     16.  (sw ∧ agree ∧¬tr) ⇒  sw
                              g                       normal form. The refutation is given in Figure 3.
     17.  (¬sw ∧ agree ∧ tr) ⇒ tr                       The example above essentially captures activity within a
Here, we say that agreements will occur inﬁnitely often in synchronous, truly concurrent, system. If we wish to move to

                                                IJCAI-07
                                                   322