                                  In Defense of PDDL Axioms* 
                      Sylvie Thiebaux                   Jorg Hoffmann and Bernhard Nebel 
               Computer Sciences Laboratory                      Institut fur Informatik 
             The Australian National University                  Universitat Freiburg 
               Canberra, ACT 0200, Australia                 D-79110 Freiburg, Germany 
                Sylvie.ThiebauxOanu.edu.au            <last-name>@informatik.uni-freiburg.de 


                     Abstract                          a basic relation is affected.1 There is no intuitive way to up•
                                                       date transitive closures in the body of a PDDL action, while 
    There is controversy as to whether explicit sup•
                                                       it is easy to axiomatize them recursively by means of PDDL 
    port for PDDL-like axioms and derived predicates is 
                                                       axioms (see [4] for a power flow example). 
    needed for planners to handle real-world domains 
    effectively. Many researchers have deplored the      The most common criticism of the original PDDL axioms 
    lack of precise semantics for such axioms, while   was that their semantics was ill-specified, and that the condi•
    others have argued that it might be best to compile tions under which the truth of the derived predicates could be 
    them away. We propose an adequate semantics for    uniquely determined were unclear. We remedy this by pro•
    PDDL axioms and show that they are an essential    viding a clear semantics for PDDL axioms while remaining 
    feature by proving that it is impossible to compile consistent with the original description in [17]. In particular, 
    them away if we restrict the growth of plans and   we identify conditions that arc sufficient to ensure that the ax•
    domain descriptions to be polynomial. These re•    ioms have an unambiguous meaning, and explain how these 
    sults suggest that adding a reasonable implementa• conditions can efficiently be checked. 
    tion to handle axioms inside the planner is benefi•  Another common view is that axioms are a non-essential 
    cial for the performance. Our experiments confirm  language feature which it might be better to compile away 
    this suggestion.                                   than to deal with explicitly, compilation offering the advan•
                                                       tage of enabling the use of more efficient, simple, standard 
                                                       planners without specific treatment [10; 9; 7]. We bring new 
1 Motivation                                           insight to this issue. We give evidence that axioms add signif•
It is not uncommon for planners to support derived predi• icant expressive power to PDDL. We take "expressive power" 
cates, whose truth in the current state is inferred from that to be a measure of how concisely domains and plans can be 
of some basic predicates via some axioms under the closed expressed in a formalism and use the notion of compilability 
world assumption. While basic predicates may appear as ef• to analyse that [19]. As it turns out, axioms are an essen•
fects of actions, derived ones may only be used in precon• tial feature because it is impossible to compile them away-
ditions, effect contexts and goals. Planners in this family provided we require the domain descriptions to grow only 
include the partial order planner UCPOP [3], the HTN plan• polynomially and the plans to grow only polynomially in the 
ner SHOP [18], and the heuristic search planner GPT [4], to size of the original plans and domain descriptions. Of course, 
cite but a few. The original version of PDDL [17], the Inter• if we allow for exponential growth, then compilations become 
national Planning Competition language, also featured such possible and we specify one such transformation, which, un•
axioms and derived predicates. However, these were never like those previously published [10; 9; 7], works without re•
used in competition events, and did not survive PDDL2.1, the striction. However, the above mentioned results suggest that 
extension of the language to temporal planning [8].    it might be much more efficient to deal with axioms inside the 
  This is unfortunate, as the lack of axioms impedes the abil• planner than to compile them away. In fact, our experiments 
ity to elegantly and concisely represent real-world domains. with FF [11] suggest that adding even a simple implementa•
Such domains typically require checking complex conditions tion of axioms to a planner clearly outperforms the original 
which are best built hierarchically, from elementary con• version of the planner solving the compiled problem. 
ditions on the state variables to increasingly abstract ones. 
Without axioms, preconditions and effect contexts quickly 2 Syntax and Semantics 
become unreadable, or postconditions are forced to include 
supervenient properties which are just logical consequences We remain in the sequential planning setting of PDDL2.1 
of the basic ones—that is when extra actions do not need to level 1, which is essentially that of the version of PDDL with 
be introduced or action descriptions customised. Moreover, ADL actions used in the 2000 planning competition. See [2] 
axioms provide a natural way of capturing the effects of ac• for a description of the syntax. For clarity we do not consider 
tions on common real world structures such as paths or flows, types. Although we see axioms with conditions on numeric 
as we then need to reason about how the transitive closure of 
                                                         !In that respect, PDDL axioms offer advantages over the use of 
  *The full proofs of the theorems appear in the techreport: purely logical axioms as in the original version of STRIPS [14]. 
http : //csl.anu.edu.au/M;hiebaux/papers/trarp0103.pdi. 


PLANNING                                                                                               961                                                        when no derived predicate occurs negated in the NNF of the 
                                                       antecedent of any axiom, a single stratum suffices. Several 
                                                       planning papers have considered this special case [10; 9; 7]. 
                                                         Working through the successive strata, applying axioms in 
                                                       any order within each stratum until a fixed point is reached 
                                                       and then only proceeding to the next stratum, always leads to 
                                                       the same final fixed point independently of the chosen strati•
                                                       fication [1, p. 116]. It is this final fixed point which we take 
                                                       to be the meaning of the axiom set. 
                                                         We now spell out the semantics formally. Since we have a 
                                                       finite domain and no functions, wc identify the objects in the 
same state. Unlike traditional implications, these derivations domain with the ground terms (constants) that denote them, 
are not to be contraposed (the negation of / is not derived and states with finite sets of ground atoms. More precisely, a 
from the negation of d), and what cannot be derived as true is state is taken to be a set of ground basic atoms: the derived 
false (closed world assumption). Because of the closed world ones will be treated as elaborate descriptions of the basic 
assumption, there is never any need to explicitly derive neg• state. In order to define the semantics, however, we first need 
ative literals, so the constraint that the consequent of axioms to consider an extended notion of "state" consisting of a set S 
be positive literals does not make us lose generality. of basic atoms and an arbitrary set D of atoms in the derived 
  In sum, axioms are essentially (function free) logic pro• vocabulary. The modeling conditions for extended states are 
gram statements [15]. For example, from the basic predicate just the ordinary ones of first order logic, as though there 
on and the predicate holding in Blocks World, we can define were no relationship between S and D. Where denotes a 
the predicate clear, as follows:                       vector of variables and denotes a vector of ground terms, 
                                                       we define: 


  In a planning context, it is natural and convenient to re•
strict attention to so-called stratified axiom sets—stratified 
logic programs avoid unsafe use of negation and have an un•
ambiguous, well-understood semantics [1]. The idea behind 
stratification is that some derived predicates should first be 
defined in terms of the basic ones possibly using negation, or 
in terms of themselves (allowing for recursion) but without 
using negation. Next, more abstract predicates can be defined 
building on the former, possibly using their negation, or in 
terms of themselves but without negation, and so on. Thus, a 
stratified axiom set is partitionable into strata, in such a way 
that the negation normal form2 (NNF) of the antecedent of an 
axiom defining a predicate belonging to a given stratum uses 
arbitrary occurrences of predicates belonging to strictly lower 
strata and positive occurrences of predicates belonging to the 
same stratum. Basic predicates may be used freely.                                                          In the following, we take a PDDL planning domain de•
                                                       scription to be a tuple where is the 
                                                       set of constant symbols, is the set of basic predicates, is 
                                                       the set of derived predicates, A is a stratified axiom set as in 
                                                       Definition 1, and is a set of action descriptions (with the 
                                                       mentioned restriction on the appearance in atomic effects of 
                                                       the symbols in A PDDL planning instance or task is 
                                                       a tuple where is the domain description, 
                                                       and and are the initial state (a set of ground basic atoms) 
                                                       and goal descriptions (a formula), respectively. The result 
                                                       of applying an action in a (basic) state and what constitutes 
                                                       a valid plan (sequence of actions) for a given planning task 
                                                       arc defined in the usual way [2], except that the modeling re•
                                                       lation in Definition 5 is used in place of the usual one. By 
                                                       a PDDL domain description and planning instances we mean 
                                                       those without any axioms and derived predicates, i.e., a PDDL 
                                                       domain description has the form 
                                                         We now use compilation schemes [19] to translate PDDL 
                                                       domain descriptions to PDDL domain descriptions. Such 
                                                       schemes are functions that translate domain descriptions be•
                                                       tween planning formalisms without any restriction on their 
                                                       computational resources but the constraint that the target do•
                                                       main should be only polynomially larger than the original.4 

This modeling relation is used when applying an action in 
state S to check preconditions and effect contexts, and to de•
termine whether S satisfies the goal. This is the only change 
introduced by the axioms into the semantics of PDDL and 
completes our statement of the semantics. The rest carries 
over verbatim from [2]. 
  Checking that the axiom set in a domain description is 
stratified and computing a stratification can be done in poly•
nomial time in the size of the domain description, using Algo•
rithm 1. The algorithm starts by building a matrix3 
R such that when it follows from the axioms that 
predicate 's stratum must be strictly lower than predicate j 's 
stratum, when stratum must be lower than 
 's stratum but not necessarily strictly, and when 
there is no constraint between the two strata (lines 2-15). R 
is first filled with the values encoding the status (strict or not) 
of the base constraints obtained by direct examination of the 
axioms (lines 5-10). Then, the consequences of the base con•
straints arc computed, similarly as one would compute the 
transitive closure of a relation (lines 11-15). There exists a 
stratification iff the strict relation encoded in R is irreflexivc, 
                                                         From a practical point of view, one can regard compilabil•
that is iff for all V (line 16). In that case, the 
                                                       ity preserving plan size linearly as an indication that the target 
stratification corresponding to the smallest pre-order consis•
                                                       formalism is at least as expressive as the source formalism. 
tent with R is extracted, i.e. predicates are put in the lowest 
                                                       Conversely, if a super-linear blowup of the plans in the target 
stratum consistent with R (lines 17-26). 
                                                       formalism is required, this indicates that the source formal•
                                                       ism is more expressive than the target formalism—a planning 
3 Axioms Add Significant Expressive Power              algorithm for the target formalism would be forced to gener•
It is clear that axioms add something to the expressive power ate significantly longer plans for compiled instances, making 
of PDDL. In order to determine how much power is added, it probably infeasible to solve such instances. If plans are re•
we will use the compilability approach [19]. Basically, what quired to grow even super-polynomially, then the increase of 
we want to determine is how concisely a planning task can expressive power must be dramatic. Incidentally, exponential 
be represented if we compile the axioms away. Furthermore, growth of plan size is necessary to compile axioms away. 
we want to know how long the corresponding plans in the 
compiled planning task will become.                      4 We use here a slightly simplified definition of compilability. 
                                                          5The size of an instance, domain description, plan, etc. is de•
   By we denote the cardinality of a set.              noted by 


PLANNING    In order to investigate the compilability between PDDL and 
 PDDL we will analyze restricted planning problems such 
as the J-step planning problem and the polynomial step plan•
ning problem. The former is the problem of whether there 
exists a 1-step plan to solve a planning task, the latter is the 
problem whether there exists a plan polynomially sized (for 
some fixed polynomial) in the representation of the domain 
description.*From the results on the computational complex•
ity of pure QATALOG and DATALOG with stratified negation 
16], the next theorem is immediate. 
Theorem 1 The 1-step planning problem for PDDL is 
EXPTIME-complete, even if all axioms are in pure DATALOG. 
  If we now consider PDDL planning tasks, it turns out that 
the planning problem is considerably easier, even if we allow 
for polynomial length plans. Since guessing a plan of poly•
nomial size and verifying it can easily be done in polynomial 
space, the polynomial step PDDL planning problem is obvi•
ously in PSPACE. Taking in addition Vardi's [20] result into 
account that first-order query evaluation over a finite database 
is PSPACE-complete, hardness follows as well. 
Theorem 2 The polynomial step planning problem for PDDL 
is PSPACE-complete. 
  From these two statements it follows immediately that it is 
very unlikely that there exists a polynomial time compilation 
scheme from PDDL to PDDL preserving plan size polyno•
mially. Otherwise, it would be possible to solve all prob•
lems requiring exponential time in polynomial space, which 
is considered as quite unlikely. As argued, however, by Nebel 
[19], if we want to make claims about expressiveness, then we 
should not take the computational resources of the compila•
                                                       planning task,  and the latter scheme [9] is further restricted 
tion scheme into account but allow for computationally un•         6
                                                       to pure DATALOG axioms. 
constrained transformations. Interestingly, even allowing for 
such unconstrained compilation schemes changes nothing.  An interesting contrasting approach is that of Davidson and 
                                                       Garagnani [7]. They propose to compile pure DATALOG ax•
Theorem 3 Unless EXPTIME = PSPACE, there is no compi•  ioms solely into conditional effects, which means that the re•
lation scheme from PDDL (even restricted to pure DATA LOG sulting plans will have exactly the same length. However, as 
axioms) to PDDL preserving plan size polynomially      is implied by Theorem 3, their domain description suffers a 
                                                       super-polynomial growth. 
Proof Sketch. We use a proof idea similar to the one Kautz 
and Selman [13] used to prove that approximations of logi• We now specify a generally applicable compilation scheme 
cal theories of a certain size are not very likely to exist. By producing poly-size instances, which we will use as a base•
using a DATALOG theory in order to describe all instances line in our performance evaluation. In contrast to the schemes 
of the linearly bounded alternating Turing machine accep• mentioned above, it complies with the stratified semantics 
tance problem up to a certain size, which in its general form specified in Section 2 while dealing with negated occurrences 
is EXPTIME-complete [5], we get a polynomial advice string of derived predicates anywhere in the planning task. 
[12] if a compilation scheme from PDDL to PDDL preserv•
ing plan size polynomially exists. This would imply that EX•
PTIME PSPACE/poly. However, by Karp and Upton's 
[12] results, this implies that EXPTIME = PSPACE. 
4 Compilations with Exponential Results 
While it is impossible to find a concise equivalent PDDL plan•
ning instance that guarantees short plans, it is possible to 
come up with a poly-size instance which may have expo•
nentially longer plans in the worst case. Such compilation 
schemes have been described by e.g. Gazen and Knoblock 
[10] and Garagnani [9] under severe restrictions on the use 

of negated derived predicates. Specifically, these schemes do 6This remains true even if negation is compiled away as per the 
not work if negated derived predicates appear anywhere in the Gazen and Knoblock method [10]. 


964                                                                                             PLANNING encodes each stratum as an extra action stratum, (see lines  transforms each axiom (: derived into 
5-15 in Figure 4) which applies all axioms at this stratum an operator with parameters preconditionand 
in parallel, records that this was done (done;) and whether effectwith a flag set to distinguish it from a "normal" 
anything new (new) was derived in doing so. Each is operator, uuring the relaxed planning process that FF per•
encoded as a universally quantified and conditional effect of forms to obtain its heuristic function, the axiom actions are 
stratuml—see lines 9-15. To ensure that the precedence be• treated as normal actions and can be chosen for inclusion in 
tween strata is respected, stratum* is only applicable when a relaxed plan. However, the heuristic value only counts the 
the fixed point for the previous stratum has been reached (i.e. number of normal actions in the relaxed plan. During the for•
when f ixed2_i) and the fixed point for the current stratum ward search FF performs, only normal actions are considered; 
has not (i.e. when (not (fixedi)))—see line 7. f encodes the after each application of such an action, the axiom actions are 
fixpoint computation at each stratum i using an extra action applied so as to obtain the successive fixed points associated 
fixpoint, which is applicable after a round of one or more with the stratification computed by Algorithm 1. 
applications of stratumt (i.e., when donez is true), asserts One domain we chose for our experiments is the usual 
that the fixed point has been reached (i.e. fixedj whenever Blocks World (BW) with 4 operators. In contrast to most 
nothing new has been derived during this last round, and re• other common benchmarks, in BW there is a natural distinc•
sets new and don for the next round—see lines 16-21. Next, tion between basic and derived predicates; in particular BW is 
the precondition and effect of each action description the only common benchmark domain we are aware of where 
are augmented as follows (see lines 22-30). be         the stratification of the axioms requires more than one stra•
the highest stratum of any derived predicate appearing in the tum. The basic predicates are on and ontable, and the de•
precondition of o, or 0 if there is no such predicate. Before rived ones are above and holding (stratum 1), as well as 
applying o, we must make sure that the fixed point for that clear and handempty (stratum 2) whose axiomatisations 
stratum has been computed by adding f ixed*. to the precon• use the negation of holding, above is only used in goal 
dition. Similarly, let 1 be the lowest stratum         descriptions. For the experiment labelled BW-1 in the fig•
such that some predicate in the antecedent of some axiom in ures below, we generated 30 random initial states for each 
    is modified in the effect of o, or 1 if there is none. size .. 10 and took the goal that any block initially 
After applying wc may need to re-compute the fixed points on the table had to be above all those that were initially not. 
for the strata above that is, the effect must reset fixed, Note that expressing the resulting goal using on and ontable 
done, and the value of all derived propositions, at strata would require exponential space, highlighting once more the 
and above. Finally, holds initially, and the goal re•  utility of derived predicates. As shown in the figure, the me•
quires to be true. The fact that f preserves domain    dian run-time of shows a significant improvement over 
description size polynomially, and the bounds given in theo• that of FF+f. The plans found by FF+ f in this experiment were 
rem 4, follow directly from the construction.          an order of magnitude longer than those found by The 
  It is obvious that a plan P for a planning task II can be experiment labelled BW-2 shows, for , the spe•
recovered from a plan for the compiled planning task   cial case of those instances for which the initial state has only 
F(H), by simply stripping all occurrences of stratum and one tower. Here the improvement in run time is dramatic, as 
fixpoint actions. In the worst case of course, there is    finds the optimal plans whose length is only linear in 
no polynomial such that . Indeed,                        Another domain we ran experiments on is the challenging 
the worst-case is obtained when, initially and after each ac• Power Supply Restoration (PSR) benchmark [4], which is de•
tion from P, all derived predicates need to be (re)computed rived from a real-world problem in the area of power distribu•
and only one proposition is ever derived per application of tion. The domain description requires a number of complex, 
stratum actions. Even if the planner is able to interleave recursive, derived predicates to axiomatize the power flow, 
as few fixpointt actions as possible with the stratum ac• [4]. We considered a version of the benchmark without any 
tions, this still leads to a plan of length            uncertainty for which the goal is to resupply all resuppliablc 
                                                       lines. For each number to 7 feeders, we generated 100 
where denotes the set of all instances of predicates in random networks with a maximum of 3 switches per feeder 
Observe that is not polynomially bounded in and        and with 30% faulty lines. The third figure above compares 
                                                       the median run times of and FF+f as a function of n. 
                                                       Again the improvement in performance resulting from han•
5 Planning: With or Without Axioms?                    dling axioms explicitly is undeniable. In this experiment, the 
The absence of a polynomial time compilation scheme pre• plan length does not vary much with n: with our parameters 
serving plan size linearly not only indicates that axioms bring for the random instances generation, it is clustered around 5 
(much needed) expressive power, but it also suggests that ex• actions for instances, and around 50 for the compiled 
tending a planner to explicitly deal with axioms may lead to instances. Yet this makes all the difference between what is 
much better performance than using a compilation scheme solvable in reasonable time and what is not. 
with the original version of the planner. To confirm this hy• Although the domains in these experiments are by no 
pothesis, we extended the FF planner [11] with a straight• means chosen to show off the worst-case for the compilation 
forward implementation of axioms—we call this extension scheme, they nevertheless illustrate its drawbacks. The dif•
FF —and compared results obtained by FF on PDDL in•    ference of performance we observe is due to the facts that 
stances with those obtained by FF on the PDDL instances pro• compilation increases the branching factor, increases the plan 
duced via compilation with f.                          length, and obscures the computation of the heuristic. 


PLANNING 