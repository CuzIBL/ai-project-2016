         Detecting & Avoiding Interference Between Goals in Intelligent Agents 

                        John Thangarajah and Lin Padgham and Michael Winikoff 
                                                   RMIT University 
                                              Melbourne, AUSTRALIA 
                                     {johthan,linpa,winikoff}@cs.rmit.edu.au 


                        Abstract                               by an earlier step to be interfered with before the later step 
                                                               that relies on the pre-condition is done. For example sup•
     Pro-active agents typically have multiple simulta•
                                                               pose an agent is using a plan to cook dinner, involving going 
     neous goals. These may interact with each other 
                                                               to the store, buying some items, coming home and prepar•
     both positively and negatively. In this paper we 
                                                               ing the meal. Having arrived at the location of the store, a 
     provide a mechanism allowing agents to detect 
                                                               rational agent would not allow a plan which took the agent 
     and avoid a particular kind of negative interaction 
                                                               elsewhere to intervene, prior to actually purchasing the items 
     where the effects of one goal undo conditions that 
                                                               at the store. 
     must be protected for successful pursuit of another 
                                                                 This paper focuses on recognising situations where these 
     goal. In order to detect such interactions we main•
                                                               linkages exist in a plan and controlling plan interleaving to 
     tain summary information about the definite and 
                                                               ensure that an agent does not allow negative interference in 
     potential conditional requirements and resulting ef•
                                                               the pursuit of separate parallel goals. We provide detailed 
     fects of goals and their associated plans. We use 
                                                               mechanisms that can be easily implemented in agent plat•
     these summaries to guard protected conditions by 
                                                               forms such as PRS [Ingrand et al., 1992] JAM [Huber, 1999], 
     scheduling the execution of goals and plan steps. 
                                                               dMARS [dTnverno et al, 1998], and JACK [Busetta et al., 
     The algorithms and data structures developed allow 
                                                               1998]. 
     agents to act rationally instead of blindly pursuing 
     goals that will conflict.                                   There has been significant work in the area of conflicts in 
                                                               agent systems [Tessier et aL, 2000]. However, the focus has 
                                                               been on multi-agents and identifying various types of con•
1    Introduction                                              flicts. Our work focuses rather on providing algorithms and 
Pro-active intelligent agents are those agents that pursue goals representations that allow detection and resolution of con•
[Thangarajah et al, 2002a]. These agents typically have mul•   flicts due to multiple parallel goals in a single agent. 
tiple goals that are active simultaneously. These goals can      There is also work in plan scheduling to avoid conflicts 
interact with each other both positively and negatively. For   such as the work of [Boutilier and Brafman, 1997] and 
example consider a Mars rover agent that has a goal to per•    [Clement and Durfee, 1999b; 1999a]. Boutilier and Braf•
form soil analysis at location A and another goal to perform   man provide a representation of concurrent interacting ac•
rock analysis at location D. Clearly the agent cannot pursue   tions by extending the STRIPS action representation lan•
these goals in parallel since they require the agent to be at dif• guage, and provide an algorithm for planning with concur•
ferent locations. This is an example of negative interaction.  rent plans. However this work, like traditional planning ap•
   An intelligent agent should not blindly pursue conflicting  proaches, requires the agent to have a completed plan, and 
goals or unintentionally make its own goals unattainable if    perform the scheduling prior to execution (i.e. off-line). This 
such is easily avoidable. In earlier work [Thangarajah et aL,  is not useful for the type of agents that we deal with which are 
2003] we provided mechanisms for identifying and facilitat•    situated in highly dynamic environments where it is generally 
ing positive interactions with respect to the effects of goals. not possible to determine which plans to use in advance. 
Horty and Pollack's work on evaluating an agent's options in     Clement et al. use the notion of summary information to 
the context of its existing plans [Horty and Pollack, 2001] and co-ordinate plans at abstract levels. They have provided a 
Pollack's work on overloading intentions [Pollack, 1991] also  formalism which defines correct interleaved plan execution 
contribute to managing positive interactions.                  [Clement and Durfee, 1999b] and a scheduling algorithm 
   In pursuing their goals intelligent agents often use interme• which uses this information to appropriately interleave plans 
diate steps which enable later steps to achieve the goal. This to avoid resource conflicts [Clement et al, 2001]. The work 
is often managed using a series of plan steps where the effect presented here focusses on recognising the way in which 
of an earlier step achieves the pre-condition for a later step. early steps in a plan typically pave the way for later steps, 
A rational agent engaged in this kind of pro-active behaviour  setting up "dependency links" and provides mechanisms to 
should not allow the pre-conditions that have been achieved    ensure that an agent recognizes these in managing its execu-


MULTIAGENT SYSTEMS                                                                                                    721  tion of parallel goals. We also provide mechanisms for con•   an in-condition fails to hold when a plan begins executing 
 tinually updating summary information so that agents are also then the plan fails immediately. 
 able to reason about partially completed goals.                 Each goal-type G also has a goal-plan tree template where 
   In [Thangarajah et al, 2002b] we provided means for an      a goal-plan tree is a tree structure of goals whose children 
 agent to detect and avoid resource conflicts by using sum•    are the plans that achieve it and the children of a plan are the 

 mary information about resources.1 In the current paper       subgoals of the plan, with G as the root. All of the subgoals 
 we use a notion of interaction summaries, based on the ef•    of a plan must be executed in order for the plan to succeed 
 fect summaries developed by Clement and Durfee [Clement       ("AND"). However, it is not necessary that all plans of a goal 
 and Durfee, 1999b], containing information about effects,     be executed ("OR"). 
 pre-conditions and in-conditions of goals and plans. Effects    When the agent decides to pursue a goal, a goal-plan tree 
 are the conditions that a goal or plan aims to achieve, pre•  instance is created and updated at run-time to contain goal 
 conditions are conditions that must be true for a plan to begin and plan instances. In addition to the above properties, goal 
 execution, and in-conditions are conditions that must remain  and plan instances will also have a label (instance-name) that 
 true while the relevant goal or plan is active.               gives a unique handle to it at run-time. This is basically a path 
   Specifically, we protect in-conditions and pre-conditions   expression in a goal-plan tree instance (e.g. in figure 1 G 
that have been achieved by earlier steps in a plan. We do not  P SGZ PA is the instance-name for plan PA). 
protect all pre-conditions: if the pre-condition has not been    The execution cycle of the agent is similar to the well-
achieved by a previous step then there is no clear justification known and developed BD1 (Belief Desire Intention) [Rao and 
 for protecting it. In particular, when defining the notion of Georgeff, 1995] style of agents that map to agent implemen•
preparatory effects in section 3, we only consider dependen•   tation systems such as PRS, JAM, dMARS, and JACK, where 
cies between nodes that are part of the same top-level goal.   a plan is selected from an applicable plan set and if it fails an 

   In this work we consider only "achievement goals"2, that    alternative applicable plan is tried if available. We extend 
is goals where the agent attempts to achieve some condition,   this model by requiring that a goal with an in-condition that 
and when this condition is achieved the goal is removed from   is false is delayed until the in-condition becomes true6. 
the agent's mental state. 
                                                               3 Preparatory Effects and Dependency links 
2    Plan and Goal representation                              Typically, when developing a set of plans to achieve a goal, a 
This work builds on our previous work presented in [2002a;     developer is not able to consider all the ways in which the pur•
2002b; 2003]. The representation of goals and plans arc        suit of other goals may interfere with this goal. There are two 
therefore similar to what we presented in [Thangarajah et al,  important ways in which parallel goals can interfere, which 
2003]. To summarise these agents have a pre-defined set of     we try to capture and reason about in this work. Consider•
plans which are used to satisfy goals at run-time. A goal-type ing the logical outcomes of goals and plans, interference can 
                                                               occur: 
is a template for a goal which consists of (i) a label that in•
dicates the type of the goal, e.g. TransmitResultsGoal (ii) in-  1. When an in-condition is made false while a plan or goal 

conditions of the goal3 (iii) the effects of the goal4 and (iv) the is executing, causing the plan or goal to fail. 
possible set of plan-types that can satisfy the goal [Winikoff   2. When a previously achieved effect is made false before a 
e/a/., 2002].                                                      plan or goal that relies on it begins executing, preventing 
   Similarly a plan-type is a template for a plan and consists     the goal or plan from being able to execute. 
of (i) a label for the type of plan (ii) pre-conditions for the 
plan to begin (iii) in-conditions that must be maintained dur•   We thus define a preparatory-effect (p-effect) of a goal G 
ing plan execution (iv) the direct effects of the plan and (v) a as follows. Consider two plans P1 and P2 which are utilised 
plan body which specifies what the plan does. Plan bodies can  to satisfy G and P1 is executed before P2 as shown in figure 
contain subgoals and actions. These are combined by either     1. If P1 brings about an effect e which is a pre-condition of 
                                                               P2, then there is a dependency-linkbetween the preparatory-
sequencing them (e.g. "achieve goal G1 and then perform ac•
                                                               effect e and the dependent-plan P2 (e {p2}). We shall 
tion A" written as "G1; -A") or by performing them in parallel 
(e.g. "achieve goals G\ and G2" written as                     term this a dependency-planlink. In the event that an ef•
                                                               fect of a plan serves as a pre-condition to all the plans that 
   The pre-conditions include in-conditions5. The reason for 
this is that in-conditions are stronger than pre-conditions: if satisfy a sub-goal (as is the case with effect e and sub-goal 
                                                                     then there is a dependency-link between the p-effect 

    'This work was done independently from, but is quite similar to and the dependent-subgoal (e {SG3 }). We shall term this 
that of [Clement and Durfee, 1999b].                           a dependency-subgoallink. 
   2 Another type of goal is a Maintenance goal" where the agent A dependency-planlink is complete when the dependent 
ensures that a particular condition is never violated.         plan begins execution. A dependency-subgoallink is com•
   3Pre-conditions, in-conditions and effects are all represented as plete when either (a) the dependent-subgoal is complete or 
logical conditions.                                            (b) the last possible plan to satisfy the sub-goal begins execu•
   4These effects are the direct, desired effects of the goal, similar tion (all other plans have been tried but failed). 
to the notion of primary expectations of [Pollack, 1991]. 
   5Formally, if i is the in-conditions then we consider the pre• 6Some of the systems will begin executing the goal and have it 
conditions to be t p.                                          immediately fail. 


722                                                                                             MULTIAGENT SYSTEMS                                                                action summaries. When there is potential interference these 
                                                               interaction-summaries help us to schedule appropriately. 
                                                                 Interaction-summaries are similar to effect-summaries de•
                                                               veloped in [Thangarajah et al, 2003] and based on the work 
                                                               of Clement and Durfee [Clement and Durfee, 1999b] on con•
                                                               dition summaries. The effect-summaries of a goal summarise 
                                                               the effects that will definitely be achieved irrespective of the 
                                                               path chosen to satisfy the goal and those that may be achieved 
                                                               depending on the path chosen. These were used in [Thangara•
                                                               jah et ai, 2003] to detect situations where the plans of two 
                                                               goals that bring about the same effect could be merged and to 
                                                               facilitate this merging. 
                                                                 We use interaction summaries to ensure that the effects 
                                                               of one goal do not interfere with active in-conditions and 
            Figure 1: Dependency-links example                 dependency-links of other goals. Therefore we need to main•
                                                               tain summary information of (a) effects as they could cause 
   When a p-effect is achieved the agent should protect the    the interference, and (b) in-conditions and preparatory-effects 
effect from being undone until all the dependency-links asso•  as these are what need to be protected when active. Only 
ciated with the effect are complete.                           those pre-conditions that are set-up by p-effects are protected 
   All dependency-planlinks are potential by definition be•    so we do not need to maintain pre-condition summaries sep•
cause the agent has other means of achieving the dependent-    arate from the information in the dependency-entries. 
plan's parent sub-goal.                                          For the discussion ahead the general term condition refers 
   A dependency-subgoallink is either                          to either in-conditions or effects (including p-effects). Sim•
                                                               ilarly to [Thangarajah et al, 2003], conditions can be either 
   • definite if the dependent-subgoal will definitely be pur• definite or potential. A definite condition will definitely be 
     sued as is the case with .SG3 (figure 1); or              achieved/required (achieved for effects and required for in-

   • potential if the dependent-subgoal is not definite. SG5   conditions) at some point along every possible path of achiev•
     is an example of such a sub-goal as it depends on the     ing the goal (i.e. this condition need not be required by all 
     path chosen for SG4.                                      plans, but is required by at least one plan in every possible 
                                                               way of achieving the goal). A potential condition will pos•
   The above categorisations leads to a ranking of importance 
                                                               sibly be achieved/required at some point in the pursuit of the 
with respect to guarding a p-effect. A definite dependency-
                                                               goal (i.e. this condition is part of at least one plan in at least 
subgoallink is strongest because the dependent-subgoal will 
                                                               one path of achieving the goal but not achieved/required in 
definitely be pursued and all ways of achieving it require 
                                                               all possible paths of achieving the goal). The set of potential 
the p-effect as a pre-condition. A potential dependency-
                                                               conditions and definite conditions are exclusive of each other. 
subgoallink is stronger than a dependency-planlink because 
                                                               Interaction Summary: 
although they are both potential the dependent-subgoal of the 
                                                               An interaction-summary of a goal/plan contains the defi•
dependency-subgoallink will definitely fail if the p-effect is 
                                                               nite and potential in-conditions, effects and p-effects. For•
not true. In contrast the parent sub-goal of the dependent-plan 
                                                               mally the interaction-summary of a goal/plan n is a 3 tuple. 
of a dependency-planlink has other means of being achieved. 
This ranking is useful for defining agents that are more or less 
careful with respect to protecting preparatory effects from in• where Si, Se and Spc are the summaries of in-conditions, ef•
terference.                                                    fects and preparatory-effects respectively. The in-conditions 
Dependency-entry:                                              summary contains the definite and potential in-conditions of 
In order to reason about and protect p-effects we attach de•   the node. and each of and are simply 
pendency information at each plan-node of a goal-plan tree.    sets of conditions, . Similarly for the 
                                                               effects and p-effects summaries. We shall see how we can 
This is done at compile time7 and each entry which we shall 
term a dependency-entry consists of a set of dependency-       derive interaction-summaries of a goal/plan in section 4.1. 
links, (p-effect, dependent-plan/subgoal), where the p-effect  Interaction-Tree: 
is an effect of the plan. We attach dependency-entries only    The interaction-tree structure is a goal-plan tree where at-
to plans because p-effects are achieved by plans, goals only   tached at each node is the interaction-summary and in ad-
declare what the plans will achieve.                           dition for plan-nodes the dependency-entry8 of the plan. This 
                                                               tree is built at compile time for each goal-type and instanti•
                                                               ated at run-time for each goal-instance. Figure 2 shows the 
4 Interaction Tree                                             interaction tree of a simple goal of a Mars rover agent to per•
In order to detect if goals can be executed in parallel without form soil experiments at location A. 
any interference from each other we define the notion of inter-  The interaction-tree for any active goal is updated dynam-
                                                               ically as the goal is pursued. When a plan/sub-subgoal com-
   7Wc do not describe the computation method in detail - the def•
initions above form a specifi cation that can be easily realised. 8 as described at the end of section 3. 


MULTIAGENT SYSTEMS                                                                                                   723                                             Figure 2: Interaction Tree example 

pletes the corresponding node is removed and the interaction   execute one of these alternative plans and thus the combined 
summary of the parent-node is re-computed. Any changes         definite conditions are those that are definite for all plans, 
to the parent node are propagated up the tree. Dependency-     while the combined potential conditions are those potential 
entries are updated when plans (dependent-plans) begin exe•    for some plan plus those that are definite for some plan, but 
cution.                                                        not for all. The conditions of plans are combined using a 
                                                               merge operator defined as follows: 
4.1 Deriving Interaction Summaries 
Interaction summaries are derived at compile time and 
updated at runtime, similarly to the mechanism used in           Goals do not have effects other than the effects of their 
[Thangarajah et al, 2002b]. In this section we use the fol•    plans, so the effect summary10 of a goal is: 
lowing notation: G(P) is the set of subgoals of the plan P, 
and in-cond(n) is the in-conditions of n (with n being either    The in-condition summary of a goal is then defined as the 
a goal or a plan).                                             merged in-conditions of its plan nodes, combined with the 
  The interaction-summary of a node of a goal-plan tree is     local in-conditions of the goal as follows: 
derived by combining the local conditions of that node with 
the interaction-summaries of all its child nodes. Each piece     In order to determine the interaction-summary (IS) of a set 
of the summary (the in-condition summary, the effect sum•     of goals, the operator is applied to all of the goals in the set 
mary and the p-effect summary) is calculated by combining      as follows  
the relevant pieces of the local and children nodes. The inter•
action summaries of goal nodes and plan nodes are calculated 
                                                               where  
slightly differently and the details are as follows. 
  The effects summary of a plan is computed by taking the 
union of the local effects of the plan with the effects of each 
of the goals within the plan, using the addition operator     5    Executing goals simultaneously 
defined as follows:                                           Having calculated interaction summaries, we then use these 
                                                              to detect and avoid potential interference. We will first look at 
where D and P are respectively sets of definite and potential ways of determining whether two goals will definitely not in•
conditions (either effects or in-conditions).                 terfere with each other, in which case they can be pursued in 
  The effects summary of a plan is then:                      parallel without any monitoring or scheduling of plans. Then 
                                                              we will discuss how goals that may have potential interfer•
The p-effect summaries are analogous to effect summaries.     ence can be scheduled to avoid such conflicts whilst being 
  The in-condition summary of a plan is similar to the        pursued simultaneously. 
above and is defined as:                                         As we have discussed in section 3, when two goals are exe•
                                                              cuted in parallel, we track and protect the following two con•
  The summaries of goals however need to take into account    straints: (a) the in-conditions of each goal and its active plan 
that the plans whose conditions are being combined, are alter• instances must not be violated and (b) the preparatory-effects 
native ways to achieve a goal. The agent will typically9 only (p-effects) that have been achieved must not be undone until 
                                                              the dependency-links are complete. 
   9 More than one plan may be executed in the case of plan failure. 
This does not change the rationale for the combination operators.  The p-effect summary is similar 


724                                                                                             MULTIAGENT SYSTEMS    We can determine that a new goal Gnew will not interfere         the derived in-conditions) are added to the GS. 
with an existing set of goals GSet if all (i.e. both definite and 
                                                                 2. When the agent satisfies a goal or the goal fails any in-
potential) the effects of G  are compatible with all the de•
                         new                                        conditions of the goal in the GS are removed. If the goal 
rived in-conditions and p-effects of GSet. Two conditions
                                                         11         is part of a dependency-subgoallink in the GS this entry 
are compatible if it is possible for them to be simultaneously 
                                                                    is also removed. 
true. The details depend on the specific representation of con•
ditions.                                                         3. When a plan begins execution 
                                                                     (a) In addition to placing the in-conditions into the 
5.1 Scheduling                                                          GS, if the plan has any p-effects then the relevant 
If there is interference between two goals this can be avoided          dependency-entry of the p-effects are placed in the 
by pursuing the goals in sequence. However, this restriction             GuardedSet. The reason we do this at the start 
is too strong since it requires that the agent never have more           of the plan, instead of the end (when the p-effect 
than one goal that is being pursued. A more reasonable re•               is achieved) is because the plan step that achieves 
striction is to pursue the goals in parallel, but monitor these         the effect is not known in advance; and the agent 
goals for the steps which cause conflict and schedule them              should not begin another plan that could possibly 
such that they do not interfere with each other. We do this              undo the p-effect while the plan is executing. 
by guarding the in-conditions and dependency-links that are         (b) If the plan either completes a dependency-planlink 
active when adopting new goals and executing new plans. 
                                                                        or a dependency-subgoallink13 that is protected in 
   In order to do this we use the interaction-trees and we fur•         the GS, then delete that dependency entry. 
ther require a data structure that we shall call the Guard•
                                                                 4. When a plan completes or fails execution, the in-
edSet12 (GS) which includes in-conditions and dependency-
links that are currently active and need to be guarded by the       conditions of the plan that are in the GS are removed. 
agent. Dependency-links are obtained from the dependency-           Further, in the event of plan failure any dependency-
entry of the associated plan-node from the interaction-tree.        entries associated with p-effects of the plan are removed 
In-conditions are placed together with the name of the asso•        from the GS. 

ciated goal or plan instance The GuardedSet can be defined       5. Before the agent adopts a goal Gnew, it should perform 
by the following simple grammar:                                    the following to avoid deadlocks. Check for each goal 
GuardedSet dependency-entry InCondEntry                             G that has an associated condition in the GS, whether 

dependency-entry p-effect PGName                                    the in-conditions of Gnew are compatible with the com•
InCondEntry in-condition PGName                                     bined definite and potential effects of G. 
PGName planlnstanceName goallnstanceName 
                                                                    If they are compatible then Gnew can be pursued in par•
   We avoid interference between goals by (i) protecting the        allel with G. Else check for compatibility with the defi•
in-conditions while a plan or goal is executing, and (ii) pro•      nite effects of G. 
tecting the p-effects that are achieved by a plan from the ef•
                                                                    If they are not compatible then unless Gnew completes 
fects of new plans until the relevant dependency-links com•         before G they will conflict. Since we have no notion of 
plete. However, in doing this, we must be careful to avoid 
                                                                    time Gnew should not be pursued in parallel with G, but 
deadlocks. For example, imagine we have the following two           should be re-considered when the incompatible effects 
goals:                                                              of G have been achieved. 
G   .incondition(x), G  .. subgoal 1 .effect(NOT y), 
  1                  1                                              Else the agent can either (a) choose to be cautious and 
G2-incondition(y), G2 .. subgoal2.effect(NOTx). 
                                                                    not allow G   to execute until the incompatible effects 
Assume that the agent is pursuing G , but has not yet reached                  new
                                   1                                in G are achieved, or (b) since potential conditions de-
subgoall. The GS contains x, as it is an in-condition of G . 
                                                         1          pend on the path chosen, be optimistic and allow G  , 
In considering G2, if the agent checks only the conditions in                                                        new
                                                                    to execute hoping that the incompatible effects (and re•
the GS there appears to be no problem and G2 could be pur-
                                                                    sulting goal/plan failure) will be avoided. 
sued, placing y also in the GS. However when subgoal I and 

subgoal2 are respectively reached, they would be suspended       6. Before the agent executes a plan Pnew, it should check 
as they affect y and x respectively, both of which are in the       whether the effects of Pnew are compatible with the con•
GS, thus creating a deadlock. Consequently, before adopt•           ditions protected in the GS. If they are not compatible 
ing a goal/plan, we look ahead at effects that can be achieved      then the plan must wait until they are compatible. Also 
by existing goals (using their interaction summaries) and en•       in order to prevent deadlocks the in-conditions and p-
sure they don't interfere with the in-conditions of the new         effects of the plan must be checked against the derived 
goal/plan to be executed.                                           effects of existing goals that have a guarded condition as 
  Interference can then be avoided between goals by incor•          done before adopting a new goal. 
porating the following steps into the agent execution cycle.     Above we have given priority to the goal that is already 
  1. When the agent begins the pursuit of a goal the in-       being pursued as opposed to the new goal. This however is 
     conditions of the goal (i.e. the direct in-conditions, not totally dependent on the priority mechanism of the applica•
                                                               tion. If the new goal is more important then existing goals 
   ''More generally, sets of conditions 

   12 Actually, this is a pair of multisets.                      13By being the last plan to be attempted. 


MULTIAGENT SYSTEMS                                                                                                    725 