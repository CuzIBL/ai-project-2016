                   Building    the  Semantic    Web    Tower    from   RDF   Straw

                                       Peter  F. Patel-Schneider
                                           Bell Labs Research
                          600  Mountain  Ave, Murray  Hill, NJ 07974, U. S. A.
                                      pfps@research.bell-labs.com


                    Abstract                          RDF  graph can be read as a collection of facts correspond-
                                                      ing to the edges in the graph (which are generally referred
   A same-syntax extension of RDF to ﬁrst-order logic to as triples) where an edge with label R (the property) from
   results in a collapse of the model theory due to log- node n (the subject) to node n (the object) corresponds to
   ical paradoxes resulting from diagonalization. RDF       1                    2
                                                      the fact R(n1,n2). If n1 (n2) has a label then it is treated
   is thus the wrong material for building the Semantic as a constant and its label is the name of the constant, if n
   Web tower.                                                                                           1
                                                      (n2) doesn’t have a label then it is treated as an existentially
                                                      quantiﬁed variable with some arbitrary name. The model the-
1  The  Semantic   Web                                ory for RDF is slightly non-standard, to provide an integrated
   The Semantic Web is an extension of the current web meaning for edge labels that are also node labels.
   in which information is given well-deﬁned meaning,   So in RDF the only way of providing information is via
   better enabling computers and people to work in co- triples (graph edges). These triples are often written infor-
   operation. [Berners-Lee et al., 2001]              mally in a form very similar to N-triples. An edge with label
                                                      R from a node labelled with the URI reference A to node la-
Thus the goals of the Semantic Web are very similar to the belled with the URI reference B is written as
goals of Knowledge Representation—to provide means for
representing information in a way that can be processed by A R B .
machines.                                             As URI references can be very long, names of the form N:L
  The base language of the Semantic Web is RDF [Manola are very often used where the URI reference is constructed
and Miller, 2004], a simple representation language based on by concatenating the expansion of N to L. (The expansion
a graph structure.                                    is generally speciﬁed informally or left unspeciﬁed.) Nodes
   The Semantic Web provides a common framework       without labels are given “local tags” of the form :l. These
   that allows data to be shared and reused across    tags are not URI references or constant names; they instead
   application, enterprise, and community boundaries. correspond to existentially quantiﬁed variables.
   [. . . ] It is based on the Resource Description Frame- Because RDF has only triples, there is no way of provid-
   work (RDF), which integrates a variety of applica- ing syntactic constructs beyond what is speciﬁed above (i.e.,
   tions using XML for syntax and URIs for naming.    binary facts, implicit conjunction, and existential quantiﬁca-
   [http://www.w3.org/2001/sw/]                       tion). Any other syntactic constructs have to be encoded as
RDF is based on labelled graphs—an RDF knowledge base triples and their special meaning conveyed by stating seman-
is (roughly) a graph where some of the nodes have labels (in tic conditions in the model theory.
the form of URI references and literal data) and the edges RDF has only a few of these semantic conditions. There is
have labels (which are also URI references). Node labels are a particular property, rdf:type, which is considered to be the
unique, i.e., a URI reference can be the label of at most one typing construct, i.e., the triple
node.                                                    A rdf:type B .
  The normative surface syntax for RDF is XML. This syn-
tax is called RDF/XML [Dave Beckett, 2004]. There are is interpreted as A has type B (or A belongs to the class B).
other surface syntaxes for RDF, including N-triples [Jan There is a semantic condition that any name used as an edge
Grant and Dave Beckett, 2004]. What counts in RDF is the label, i.e., as a property, must have type rdf:Property.
graph that is conveyed, and not any other aspect of the surface RDF is thus a very simple representation language. How-
syntax.                                               ever, triples are a very powerful construct in that any ground
  RDF, however, is more than just a graph language. It is ac- or existentially quantiﬁed atomic fact can be encoded in RDF
tually a logic, with a model theoretic semantics and an entail- triples by by using a new unnamed node with triples that link
ment relationship. The details of all this have been speciﬁed it to each of its arguments. This simple trick has been used in
in an W3C Recommendation [Hayes, 2004]. In essence, an many other knowledge representation formalisms.2  Extending   the Semantic  Web                      be encoded as RDF triples. This means that, for example, en-
The power of triples has given rise to a vision that RDF coding ﬁrst order sentences as strings or Goedel numbers is
should be the universal language for the Semantic Web. This not permitted. Second, the extension has to give meaning to
means that the syntax of all Semantic Web languages should every RDF graph. This means that the extension can’t iden-
be (RDF) triples and their meaning should be speciﬁed as se- tify a subset of RDF graphs (such as tree-like RDF graphs) as
mantic conditions that add to the RDF model theory. (This is well-behaved, and only provide meaning for these graphs.
often referred to as a same-syntax extension of RDF.)   What then would an “RDF Logic” look like? It would pro-
  This process was successfully carried out with RDF  vide enough constructs to nicely provide facilities for all of
Schema [Dan Brinkley and R. V. Guha, 2004], an extension ﬁrst-order logic (including predicates, constants, variables,
to RDF that provides simple vocabulary structuring facilities. conjunction, disjunction, negation, quantiﬁcation, equality,
RDF  Schema interprets nodes labelled with particular URI functions, etc.). Its entailment relationship would, when re-
references as providing these vocabulary structuring facili- stricted to the constructs that are used to provide the facilities
ties. In particular, rdfs:Class is interpreted as the type of of ﬁrst-order logic, mirror entailment in ﬁrst-order logic.
all types, so that if something is used as a type its types must A language suitable for this purpose is binary predicate
include the interpretation of rdfs:Class (and objects of type calculus with equality. (Recall that predicate calculus is
rdfs:Class are called classes); and rdfs:subClassOf is in- function-free ﬁrst-order logic without function symbols and
terpreted as requiring a subtyping relationship between its ar- equality [Barr and Feigenbaum, 1981, Volume 1, p. 163].)
guments. These interpretations are provided by appropriate As indicated above, binary predicates can be used to encode
semantic conditions that extend the RDF model theory to the predicates of arbitrary arity, also equality can be used to en-
RDF Schema model theory [Hayes, 2004].                code functions thus obtaining all the facilities of ﬁrst-order
  Problems ﬁrst arose in this vision when the Seman-  logic.
tic Web was extended to include an ontology language.
The charter for the group charged with doing this ex- 3   RDF   Logic
tension included the requirement that the language “will
be designed for maximum  compatibility with XML and   Our task is thus to design a same-syntax extension of RDF to
RDF  language conventions” [http://www.w3.org/2002/11/ binary predicate calculus with equality. We are deﬁning “log-
swv2/charters/WebOntologyCharter]. This was interpreted ical” interpretations, special RDF interpretations that provide
for the working group as requiring that the resultant language a mechanism for logical constructs. We both add some new
be a same-syntax extension of RDF.                    vocabulary and some new semantic conditions, in the same
                                                                                      [           ]
  After considerable work, and some compromises, the re- style as used in the RDF model theory Hayes, 2004 .
sultant language, OWL [Dean et al., 2004], was ﬁnally spec-
iﬁed as a same-syntax extension of RDF [Patel-Schneider et 3.1 Equality
al., 2004]. Because the only syntax allowed is triples, com- Equality is the easiest part of our task. All we need to do is to
plex OWL  constructs (such as Description Logic [Baader “anoint” a particular URI reference as the equality predicate
et al., 2003] restrictions) have to be encoded as a num- by providing its semantic conditions. As OWL already has
ber of triples. For example, the Description Logic restric- a notion of equality, we will use the URI reference that it
tion that represents everything whose friends are lawyers uses for this purpose, which we will write, using the standard
(∀ex:friend.ex:lawyer) is encoded as the triples      abbreviation, as owl:sameAs.
    :x rdf:type owl:Restriction .                       The semantic condition for equality is
   :x owl:onProperty ex:friend .                         Equality Condition:
   :x owl:allValuesFrom ex:lawyer .                      hx,yi ∈ IEXT(I (owl:sameAs) iff x = y
Because all triples are facts, entailment would not work cor- This condition says that in any logical interpretation two do-
rectly in OWL unless OWL interpretations required that there main elements are related by the relationship that is the prop-
be facts corresponding to every possible piece of complex erty interpretation (I followed by IEXT)1 of owl:sameAs
OWL  syntax. (These requirements are often called compre- precisely if they are the same.
hension principles.) Otherwise, it would not be the case
that ex:John belonging to ∀ex:friend.ex:lawyer entailed 3.2 Encoding Formulae
ex:John belonging to ∀ex:friend.(ex:lawyer t ex:doctor),
the restriction that represents everything that whose friends Because of the need to use only RDF syntax we have to have
are lawyers or doctors. (Why? Because there might not be an encoding facility for predicate calculus formulae. There
enough facts to encode the union of lawyers and doctors.) are many possible schemes to do so, but let’s pick one that
  The success of RDF Schema and OWL as same-syntax ex-   1
tensions of RDF has lead to several calls to make another ex- Here we see the slightly unusual nature of the RDF semantics.
                                                      In a standard semantics for ﬁrst-order logic we would go directly
tension of the Semantic Web in a similar style to a ﬁrst-order from the syntactic token owl:sameAs to its property interpretation.
logic language.                                       Here, instead, there is a preliminary mapping to an object in the
  What do I mean here by a “similar style”? Well, “style” is domain of discourse (I ) followed by a mapping to the property in-
in the eye of the beholder, but some ground rules can be laid terpretation (IEXT). This means that properties are objects of the
down. First, the syntactic constructs of the extension have to domain of discourse.uses RDF as much as possible.2 As in OWL, we are also    Composite Formulae Conditions:
going to need comprehension principles so that the formulae ICEXT(I (lx:Negation)) ⊆ ICEXT(I (lx:Formula))
exist in all interpretations, so we might as well introduce them ICEXT(I (lx:Conjunction)) ⊆ ICEXT(I (lx:Formula))
along with the syntax encoding.                          ICEXT(I (lx:Exists)) ⊆ ICEXT(I (lx:Formula))
  We  will use lx:Formula as the class of formulae and We also need the composite formulae to exist.
lx:Atomic
         as the class of atomic formulae. We can’t just use Negation Comprehension Principle:
RDF triples directly as atomic formulae because these formu-
                                                         ∀ f ∈ ICEXT(I (lx:Formula))
lae might not be true and they might have variables in them.
                                                         ∃n ∈ ICEXT(I (lx:Negation))
  We require that atomic formulae be formulae, i.e.,     hn, f i ∈ IEXT(I (lx:left))
   Atomic Formulae Condition:                            Conjunction Comprehension Principle:
   ICEXT(I (lx:Atomic)) ⊆ ICEXT(I (lx:Formula))          ∀ f ,g ∈ ICEXT(I (lx:Formula))
We are here using some terminology from the RDF Schema   ∃ j ∈ ICEXT(I (lx:Conjunction))
semantic conditions. ICEXT(x), the class extension of x, is h j, f i ∈ IEXT(I (lx:left)) & h j,gi ∈ IEXT(I (lx:right))
deﬁned as those domain elements that have x as one of their Quantiﬁcation Comprehension Principle:
types.                                                   ∀ f ∈ ICEXT(I (lx:Formula)), ∀v ∈ IR
  We  will use lx:predicate, lx:subject, lx:object, and  ∃q ∈ ICEXT(I (lx:Exists))
lx:subjectv and lx:objectv to construct atomic formulae. In hq,vi ∈ IEXT(I (lx:left)) & hq, f i ∈ IEXT(I (lx:right))
our syntax anything can be a variable, so we need to distin- We have now guaranteed that all ﬁnite non-circular for-
guish when something is being used as a variable or not and mulae exist in all interpretations. Lots of other formulae or
thus we need two variants of the subject and object links. We quasi-formulae might exist as well, of course, but (in keeping
do not allow predicates to be variables, i.e., our logic is syn- with the permissive nature of RDF) we won’t rule them out.
tactically ﬁrst-order, not higher-order.
  Our ﬁrst comprehension principles are concerned with 3.3 Truth
atomic formulae, requiring that all atomic formulae exist in So far all we have is the existence of formulae, not whether
all logical interpretations. There are four different compre- they are true or not. We now need to provide a mechanism
hension principles corresponding to the different ways vari- for determining the truth of formulae in an interpretation. We
ables can be used in atomic formulae.                 start out doing this meta-theoretically and only later provide
   Atomic Formulae Comprehension Principles:          syntax for determining true formulae.
   ∀r ∈ IP ∀x,y ∈ IR3                                   Because this is a ﬁrst-order logic, i.e., it has variables, we
                                                      need some mapping from variables to their values. Our mech-
   ∃ f1 ∈ IR f1 ∈ ICEXT(I (lx:Atomic)) &              anism needs to be slightly different from that in standard ﬁrst-
            h f1,xi ∈ IEXT(I (lx:subject)) &          order logic because our variables are just elements of the do-
            h f1,ri ∈ IEXT(I (lx:predicate)) &        main of discourse.
            h f1,yi ∈ IEXT(I (lx:object));            Deﬁnition 1 (Variable mapping) Let V be the set of total
   ∃ f2 ∈ IR f2 ∈ ICEXT(I (lx:Atomic)) &              mappings from IR to IR.
            h f ,xi ∈ IEXT( (lx:subjectv)) &
             2           I                              Now  we can provide a meta-theoretic mapping that, given
            h f ,ri ∈ IEXT( (lx:predicate)) &
             2           I                            a formula and a variable mapping, assigns a truth value to the
            h f ,yi ∈ IEXT( (lx:object));
             2           I                            formula.
   ∃ f3 ∈ IR f3 ∈ ICEXT(I (lx:Atomic)) &
            h f3,xi ∈ IEXT(I (lx:subject)) &          Deﬁnition 2 (Formula truth) Let Bool be a total mapping
            h f3,ri ∈ IEXT(I (lx:predicate)) &        from IR × V into boolean values (true and false) such that
            h f3,yi ∈ IEXT(I (lx:objectv));           ∀V ∈ V
   ∃ f4 ∈ IR f4 ∈ ICEXT(I (lx:Atomic)) &               1. ∀ f ∈ ICEXT(I (lx:Atomic)), ∀x ∈ IR, ∀r ∈ IP, ∀y ∈ IR
            h f4,xi ∈ IEXT(I (lx:subjectv)) &            (h f ,xi ∈ IEXT(I (lx:subject)) &
            h f4,ri ∈ IEXT(I (lx:predicate)) &           h f ,ri ∈ IEXT(I (lx:predicate)) &
            h f4,yi ∈ IEXT(I (lx:objectv)).              h f ,yi ∈ IEXT(I (lx:object))) →
                                                         Bool( f ,V ) = true iff hx,yi ∈ IEXT(r)
  We  will use a limited but complete set of connec-
tives to construct composite formulae, so lx:Negation, 2. ∀ f ∈ ICEXT(I (lx:Atomic)), ∀x ∈ IR, ∀r ∈ IP, ∀y ∈ IR
lx:Conjunction, and lx:Exists are our only classes of com- (h f ,xi ∈ IEXT(I (lx : subjectv)) &
posite formulae. We will use lx:left and lx:right as our struc- h f ,ri ∈ IEXT(I (lx:predicate)) &
tural connectives for all composite formulae.            h f ,yi ∈ IEXT(I (lx:object))) →
                                                               ,                 ,
  We require that composite formulae be formulae, i.e.,  Bool( f V ) = true iff hV(x) yi ∈ IEXT(r)
                                                       3. ∀ f ∈ ICEXT(I (lx:Atomic)), ∀x ∈ IR, ∀r ∈ IP, ∀y ∈ IR
  2It really doesn’t matter which one as long as formulae can be (h f ,xi ∈ IEXT(I (lx:subject)) &
“manipulated” within the formalism itself.               h f ,ri ∈ IEXT(I (lx:predicate)) &
  3IP is the set of all RDF properties. IR is the set of all RDF h f ,yi ∈ IEXT(I (lx:objectv))) →
domain elements, including properties.                   Bool( f ,V ) = true iff hx,V (y)i ∈ IEXT(r)4. ∀ f ∈ ICEXT(I (lx:Atomic)), ∀x ∈ IR, ∀r ∈ IP, ∀y ∈ IR Unfortunately, this claim is not true. Ian Horrocks [Hor-
   (h f ,xi ∈ IEXT(I (lx:subjectv)) &                 rocks and Patel-Schneider, 2003] has pointed out that there
   h f ,ri ∈ IEXT(I (lx:predicate)) &                 are sentences whose truth is affected by the unusual nature of
   h f ,yi ∈ IEXT(I (lx:objectv))) →                  the RDF semantics. (Actually Ian’s observation was done in
   Bool( f ,V ) = true iff hV(x),V (y)i ∈ IEXT(r)     the context of SCL (http://www.ihmc.us/users/phayes/CL/),
5. ∀ f ∈ ICEXT(I (lx:Negation)), ∀x ∈ IR              but SCL has similar semantic features to those of RDF.) For
                                                      example, in an RDF interpretation that has only one domain
   h f ,xi ∈ IEXT(I (lx:left)) →
   Bool( f ,V ) = true iff Bool(x,V ) = false         element, there is only one predicate, no matter what name.
                                                        This doesn’t matter much in RDF and RDF Schema be-
6. ∀ f ∈ ICEXT(I (lx:Conjunction)), ∀x ∈ IR, ∀y ∈ IR  cause neither can place conditions on the size of the domain.
   (h f ,xi ∈ IEXT(I (lx:left)) &                     However, such conditions can be easily stated in predicate
   h f ,yi ∈ IEXT(I (lx:right))) →                    calculus with equality. For example, the formula
   Bool( f ,V ) = true iff                              (∀x ∀y x = y) → (ex:P(ex:a,ex:a) ↔ ex:Q(ex:a,ex:a))
   (Bool(x,V ) = true & Bool(y,V) = true)             is not a theorem of predicate calculus with equality but every
7. ∀ f ∈ ICEXT(I (lx:Exists)), ∀x ∈ IR, ∀y ∈ IR       encoding of it is true in every logical interpretation.
   (h f ,xi ∈ IEXT(I (lx:left)) &                       So I can only claim that this version of RDF Logic is as
   h f ,yi ∈ IEXT(I (lx:right))) →                    good as any other. Further, I claim that this version of RDF
   Bool( f ,V ) = true iff ∃w ∈ IR Bool(y,V 0) = true Logic is as paradox-free as any other.
   where V 0(x) = w, V 0(z) = V (z) otherwise.
  Note that this gives truth values to all elements of the 4 Self-Reference and Diagonalization
domain of discourse, including non-formulae, but does not Does the above encoding actually work? Well, in a word, no.
give any speciﬁcation of what these truth values are for non- It falls prey to one of the (many) paradoxes related to the truth
formulae. Note also that this does provide conditions on the predicate, ﬁrst noticed by Tarski [Tarski, 1933].
truth values for over-speciﬁed formulae like a formula that is As in OWL, we have only provided comprehension princi-
both a conjunction and a disjunction. Finally, note that this is ples for tree-like formulae. This means we don’t require the
not a recursive deﬁnition of truth values. Instead we just re- existence of self-referential sentences like the Liar’s sentence
quire that Bool satisﬁes the above conditions and rule out in- (“I am lying” or “This sentence is false”), which would here
terpretations for which no such Bool exists; which amounts to be encoded as
almost the same thing but with fewer opportunities for para- :x rdf:type lx:Negation .
doxes. For example, this method will work for inﬁnite and :x lx:left :x .
circular formulae.
  Now we  need some way of getting at the truth of formu- If this construction had to exist in every logical interpretation
lae. We will use lx:True to do so, providing the appropriate then there would be no logical interpretations. (Try to deter-
semantic condition so that true formulae belong to its class mine whether I ( :x) ∈ ICEXT(I (lx:True)).) We have thus
extension:                                            lost something of the free-form ﬂavour of RDF, as some self-
                                                      referential sentences are useful and we can’t entail them, but
   Truth Condition:                                   otherwise our model theory have have easily been shown to
   f ∈ ICEXT(I (lx:True)) iff                         break down.
   ∃V ∈ V  Bool( f ,V ) = true                          We  have also been careful not to break down on self-
  This looks as if ICEXT(I (lx:True)) is deﬁned somehow referential sentences if they do occur. For example, if we
after Bool, but this is not really the case, as Bool depends on had deﬁned Bool in a recursive manner starting with atomic
ICEXT(I (lx:True)) for formulae that use lx:True.     formulae, then we would have had problems with circular and
  A logical interpretation is then simply an RDF interpre- inﬁnite formulae.
tation that satisﬁes the above semantic conditions, including We have thus been fairly careful not to get hung up on the
having a Bool mapping, and logical entailment is deﬁned in obvious problems. However we still have enough power in
the obvious way.                                      our formalism for it to break down. This is actually not a
                                                      surprising result—just about any encoding of ﬁrst-order logic
3.4  The Result                                       falls prey to the problem, but our minimalist RDF Logic is
I claim that this is about as good a version of RDF Logic as weaker in some ways than the standard ﬁrst-order logics in
one can get. I would have liked to make the following claim: which this result is usually shown.
                                                        What we are going to do next is to show how our encod-
Claim 1 For every logical interpretation, L, there is a (stan- ing breaks down by building a self-referential sentence using
dard) predicate calculus with equality interpretation, P, such a process of diagonalization. We are proceeding in a some-
that for every predicate calculus sentence, S, i.e., a predicate what similar fashion as done by Goedel in his diagonalization
calculus formula with no free variables, for every domain el- lemma.
ement, d, in L that corresponds to S (in the obvious way) S is
true in P iff d ∈ ICEXT(I (lx:True)).                 4.1  Building Up  Formulae
This could be then used to show a strong correspondence be- Throughout this process we will need to get ahold of compos-
tween RDF Logic and predicate calculus with equality. ite syntactic structures. The formulae for this turn out to befairly long, so we will introduce some abbreviations. These :e2 lx:right :c1 .
are only abbreviations and thus don’t add any power.      :c1 rdf:type lx:Conjunction .
  First, an abbreviation for a formula that checks for a single :c1 lx:left construct(s;lx:Exists;
triple.                                                                    lx:left,x;lx:right,s1) .
Deﬁnition 3 Let s, p, and o be URI references, and let sv and :c1 lx:right c2 .
ov be boolean values. Then require(s,sv,p,o,ov) is a formula :c2 rdf:type lx:Conjunction .
that looks like                                           :c2 lx:left construct(s1;lx:Conjunction;
                                                                           ;lx:left,s2,lx:right,g) .
    :r rdf:type lx:Atomic .                               :c2 lx:right construct(s2;lx:Atomic;
   :r lx:predicate p .                                                      lx:subjectv,x,
   :r lx:subjectv s . if sv = true                                          lx:predicate,owl:sameAs;
   :r lx:subject s . if sv = false                                          lx:object,g) .
   :r lx:objectv o . if ov = true
                                                        diag(s,g) is true under a variable mapping V precisely
   :r lx:object o . if ov = false
                                                      when there are some domain elements s1 and s2 such that
  Next, an abbreviation for a formula that checks for a col- the variable mapping of s, V(s), is a domain element with
lection of triples all with the same subject.         the following characteristics
Deﬁnition 4 Let s be a URI reference (used for the subject); V(s) ∈ ICEXT(I (lx:Exists))
let t be a URI reference (used for the type of the subject); hV(s),I (x)i ∈ IEXT(I (lx:left))
let p1, a1, p2, a2, . . . , pn, an be URI references (used hV(s),s1i ∈ IEXT(I (lx:right))
for predicates and values); let q1, v1, q2, v2, . . . , qm, s1 ∈ ICEXT(I (lx:Conjunction))
vm be URI references (used for predicates and variables). hs1,s2i ∈ IEXT(I (lx:left))
Then construct(s;t;p1,a1,. . . ,pn,an;q1,v1,. . . ,qm,vm) is a hs1,V(g)i ∈ IEXT(I (lx:right))
formula that is a conjunction of                         s2 ∈ ICEXT(I (lx:Atomic))
   require(s,true,rdf:type,t,false)                      hs2,I (x)i ∈ IEXT(I (lx:subjectv))
   require(s,true,p1,a1,false) . . .                     hs2,I (owl:sameAs)i ∈ IEXT(I (lx:predicate))
   require(s,true,pn,an,false)                           hs2,V(g)i ∈ IEXT(I (lx:object))
   require(s,true,q1,v1,true) . . .                   Informally, if g is a formula with only x free, which we could
   require(s,true,qm,vm,true)                         write g(x), then if diag(s,g) then s is the formula g(0g(x)0).
  This doesn’t actually construct anything, of course. Nei- 4.3 A Paradoxical Formula
ther does it require the existence of anything. However, for
any domain element v such that                        Now  consider any logical interpretation. All non-circular ﬁ-
                                                      nite formula exist in this interpretation, so, in particular there
   v ∈ ICEXT(I (t))                                   is a formula with the following characteristics. (Here I am
   hv,I (a1)i ∈ IEXT(I (p1)) ...                      being a bit sloppy, using triples instead of a metatheoretical
   hv,I (an)i ∈ IEXT(I (pn))                          formulation, but this does not introduce any problems.)
   hv,v1i ∈ IEXT(I (q1)) ...
                                                            rdf:type lx:Exists
   hv,vmi ∈ IEXT(I (qm))                                  :p                .
                                                          :p lx:left y .
then construct(s;t;p1,a1,. . . ,pn,an;q1,v1,. . . ,qm,vm) is :p lx:right :p1 .
true under any variable mapping that maps s to v and vi to vi, :p1 rdf:type lx:Conjunction .
1 ≤ i ≤ m. Note especially that because all the non-circular :p1 lx:left :p2 .
formulae exist, from the formula comprehension principles, :p1 lx:right :d .
therefore any non-circular formula “built” in this way will :p2 rdf:type lx:Atomic .
exist.                                                    :p2 lx:subjectv y .
4.2  Diagonalization                                      :p2 lx:predicate owl:sameAs .
                                                          :p2 lx:object :d .
Diagonalization of a formula with one free variable is the ap-
plication of that formula to itself, i.e., the diagonalization of :d rdf:type lx:Exists .
A(x) is A(‘A(x)’), where the quotes are not string quotes, but :d lx:left x .
instead represent some encoding process. Diagonalization is :d lx:right :d1 .
part of the process of creating a self-referential structure. :d1 rdf:type lx:Conjunction .
                                                                           4
Deﬁnition 5 Let s and g be URI references (used as variable :d1 lx:left diag(x,y) .
names) Then diag(s,g) is a formula of the form            :d1 lx:right :d2 .
                                                          :d2 rdf:type lx:Negation .
    :e1 rdf:type lx:Exists .                              :d2 lx:left :d3 .
    :e1 lx:left s1 .                                      :d3 rdf:type lx:Atomic .
    :e1 lx:right :e2 .
    :e2 rdf:type lx:Exists .                             4That is, :d1’s left conjunct is a formula that requires that x be a
    :e2 lx:left s2 .                                  diagonalization of y.