                              Finite Domain Constraint Solver Learning 

             Arnaud Lallouet, Thi-Bich-Hanh Dao, Andrei Legtchenko, AbdelAli Ed-Dbali 
                       University d'Orleans - LIFO - BP 6759 - 45067 Orleans - France 
                                      firstname.name@lifo.univ-orleans.fr 


                        Abstract 

     In this paper, we present an abstract framework 
     for learning a finite domain constraint solver mod•
     eled by a set of operators enforcing a consistency. 
     The behavior of the consistency to be learned is 
     taken as the set of examples on which the learn•
     ing process is applied. The best possible expres•
     sion of this operator in a given language is then 
     searched. We instantiate this framework to the 
     learning of bound-consistency in the indexical lan•
     guage of Gnu-Prolog. 
                                                               Operators which satisfy the first three conditions are called 
                                                               pre-consistencies for c. As an example of consistency, if we 
1 Introduction                                                 suppose that each variable domain Dx is ordered by a total 
                                                               ordering and for A Dx, we denote by [A] the set {a  
Constraint Satisfaction Problems (or CSPs) have been widely                                    then the bound-consistency 
recognized as a powerful tool to model, formulate and solve        is defined by 
artificial intelligence problems as well as industrial ones. A with Tx the projection of T on A\ 
common framework to address this task is the combination of 
                                                                 Let csc be the consistency to be learned. Our aim is to 
search and filtering by a local consistency. Enforcing a local 
                                                               build a consistency / which behaves like csc as much as pos•
consistency is usually done by the scheduling of monotonic     sible. Thus / must be contracting, monotonic, correct w.r.t 
and contracting operators up to reach their greatest common                                   and singleton complete w.r.t 
fix point. The consistency is obtained as the common closure                      for any singletonic search state s). How•
of the set of operators. This closure is efficiently computed by ever, singleton completeness is difficult to get and even not 
a chaotic iteration of the operators [Apt, 1999]. But usually, always possible to express in a given language. In order to 
the task of finding efficient operators which actually define a transform a pre-consistency into a consistency, let us define a 
consistency is considered as one of the smartest skills of the 
                                                               consistency idc such that is an empty state 
solver's implementor. The essence of the learning framework    if s is a non-solution singletonic state, and = s other•
consists in considering the behavior of the operator enforcing wise. Thus / and o / are consistencies for c if / is 
the desired consistency as a set of examples in order to find an a pre-consistency for c. Therefore by adding in the set of 
adequate representation of this operator in a given language.  operators, processed by a chaotic iteration mechanism [Apt, 
                                                               19991, we only need to build pre-consistencies for c. On the 
2 Theoretical framework                                        other hand, the correctness condition must be ensured for ev•
                                                               ery s Sw which is generally huge. We show that: 
                                                               Proposition I If f is a monotonic and contracting operator 
                                                               such that f(s) = sfor every singletonic state s which repre•
                                                               sents a solution of c, then f is a pre-consistency for c. 
                                                               Therefore, by considering monotonic operators, we can re•
                                                               duce the search space to a sample set E which is a subset of 
                                                               Sw and which contains all singletonic search states. Let C 
                                                               be the language in which operators are expressed and / be an 
                                                               operator in this language. In order to find the best possible ex•
                                                               pression, we shall be able to compare two consistencies. This 


POSTER PAPERS                                                                                                       1379 is usually done with a distance. Let d be such a distance be•            4 Conclusion 
tween two consistencies. The learning problem is formulated              Related work Solver learning has been first introduced by 
as follows:                                                              [Apt and Monfroy, 1999] in which they automatically gener•
                                                                         ate a set of rules from the tuples defining a constraint. The 
                                                                         complexity of the rules generation limits them to small finite 
where Sw, E contains all singletonic search states of                    domains such as boolean. 
Sw and / is a monotonic operator. Following the machine                    The system PROPMlNER [Abdennadher and Rigotti, 2002; 
learning vocabulary, represents the example space and                    2003 J is devoted to the learning of Constraint Handling Rules 
the hypothesis space.                                                    [Fruwirth, 1998]. The produced solver is often very readable, 
                                                                         especially when a small number of rules are produced. While 
3 Learning indexicals                                                    being less general in theory since we only deal with finite 
To instantiate our theoretical framework, we have to define              domains, our method works on domains and constraint arities 
strong language biases in order to limit the combinatorial ex•           much larger. 
plosion.                                                                   In an earlier paper [Dao et al., 2002], we have presented 
   The first question is the language in which operators are ex•         an indexical learning process. We propose here two main im•
pressed. The language of indexicals [van Hentenryck et al,               provements, besides a more general theoretical framework: 
 1991J is chosen, motivated by the ease of integration of the            the possibility of using only a sample of the example space 
user-defined indexicals in Gnu-Prolog [Diaz and Codognet,                while still ensuring the correctness of the learned solver and 
2001]. In this language, an operator is written X in r,                  the reparation method. It follows that our system is able to 
where X represents the domain of the variable X and r is an              handle larger constraint arity and larger domains and there•
expression representing a subset of Dx. If we denote x the               fore yields a better solver. 
unary constraint representing A'\s domain, then the indexical            Summary We have presented a general, language-
represents the operator                                                  independent framework for finite domain constraint solver 
   Then comes the choice of consistency. We learn the bound-             learning and an instantiation to the learning of bound-
consistency, since it allows to limit the example space to in•           consistency with Gnu-Prolog indexicals. 
tervals instead of arbitrary subsets. 
                                                                         Acknowledgment We gratefully thank Michel Bergere and the 
   For each variable we learn a reduction indexical and de•              anonymous referees for their remarks on this paper. This work is 
fine an indexical for The reduction indexical for X is of               supported by french CNRS grant 2JE095. 
the form X in minX . . maxX where minX, maxX are in 
some fixed forms. In practice, we use linear, piecewise lin•            References 
ear and rational forms. In order to the reduction indexical to 
be monotonic, the bound minX must be anti-monotonic and                  [Abdennadher and Rigotti, 2002] Slim Abdennadher and 
                                                                           Christophe Rigotti. Automatic generation of rule-based 
maxX monotonic. This can be ensured by syntactic condi•
                                                                           solvers for intensionally defined constraints. International 
tions on the sign of the coefficients for each expression.                 Journal on Artificial Intelligence Tools, 11(2):283-302, 2002. 
   The indexicals for id   could be implemented in two ways: 
                          c                                              [Abdennadher and Rigotti, 20031 Slim Abdennadher and 
by using Gnu-Prolog indexicals for predefined constraints in               Christophe Rigotti. Automatic generation of rule-based 
which each instance of min and max is simply replaced by                   constraint solvers over finite domains. Transaction on Computa•
val, or by a direct code using val and C operators.                        tional Logic, 2003. accepted for publication. 
   As distance between two consistencies, we use the global 
                                                                         [Apt and Monfroy, 1999] K. R. Apt and E. Monfroy. Automatic 
error on the example space E. By considering that / must be                generation of constraint propagation algorithms for small finite 
correct w.r.t csc, this distance is                                        domains. In Joxan Jaffar, editor, International Conference on 
Example For lack of space, we present here one example.                    Principles and Practice of Constraint Programming, volume 
An user defined global constraint is defined by the follow•                 1713 of LNCS, pages 58-72. Springer, 1999. 
ing conjunction: X - Y > 3, A - Y < 30,3* X - Y > 
50,5 * Y - X < 120, X < 45, Y > 5. When treated glob•                   [Apt, 1999] K. R. Apt. The essence of constraint propagation. The•
                                                                           oretical Computer Science, 221 (1-2): 179-210, 1999. 
ally as a two dimensional polyhedra, these constraints yield 
less indexicals than the above decomposition. On the domain             [Dao et al, 2002] Thi Bich Hanh Dao, Arnaud Lallouet, Andrei 
[0..49] x [0..49], our system generates the following opera•               Legtchenko, and Lionel Martin. Indexical-based solver learn•
tors:                                                                      ing. In Pascal van Hentenryck, editor, International Conference 
                                                                           on Principles and Practice of Constraint Programming, volume 
                                                                           2470 of LAO, pages 541-555. Springer, 2002. 
Reparation operators are implemented from Gnu-Prolog in•                [Diaz and Codognet, 2001] Daniel Diaz and Philippe Codognet. 
dexicals. Here is the one for X':                                          Design and implementation of the Gnu-Prolog system. Journal 
                                                                           of Functional and Logic Programming, 2001(6), 2001. 
                                                                        [Fruwirth, 1998] Thorn Friiwirth. Theory and practice of Constraint 
                                                                           Handling Rules. Journal of Logic Programming, 37(l-3):95-
When trying all reductions on boxes included in [16,25] x                  138, 1998. 
[5,26], the learned operators ran in 290 ms, while the non-
decomposed constraints ran in 400 ms. All tests have been               [van Hentenryck et al, 1991] P. van Hentenryck, V. Saraswat, and 
                                                                           Y. Deville. Constraint processing in cc(fd). draft, 1991. 
done on a Pentium4,2Ghz, 512MB running Linux. 


1380                                                                                                                   POSTER PAPERS 