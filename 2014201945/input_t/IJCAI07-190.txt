                              On the Logic of Normative Systems

             Thomas   Agotnes˚ 1,  Wiebe van der Hoek2,JuanA.Rodr´ıguez-Aguilar3,
                                Carles Sierra3,   Michael Wooldridge2
       1Bergen University College      2University of Liverpool        3CSIC-IIIA
        Norway                           United Kingdom                 Catalonia, Spain
        tag@hib.no                      wiebe,mjw@csc.liv.ac.uk         jar,carles@iiia.csic.es

                    Abstract                          normative system η”. Here, ϕ is a temporal logic expres-
                                                                                             g
                                                      sion over the usual CTL temporal operators , ♦, ,and
    We introduce Normative Temporal Logic (NTL), a    U  (every temporal operator must be preceded by a deontic
    logic for reasoning about normative systems. NTL
                                                      operator, cf. CTL syntax), and η denotes a normative system.
    is a generalisation of the well-known branching-
                                                      In NTL, obligations and permissions are thus, ﬁrst, contextu-
    time temporal logic CTL, in which the path quan-                           η
          A                        E                  alised to a normative system and, second, have a temporal
    tiﬁers  (“on all paths. . . ”) and (“on some      dimension. It has been argued that the latter can help avoid
    path. . . ”) are replaced by the indexed deontic
                                                      some of the paradoxes of classical deontic logic. NTL gener-
    operators Oη and Pη, where for example Oηϕ                                 η
           ϕ                                          alises CTL because by letting ∅ denote the empty normative
    means “  is obligatory in the context of norma-   system, the universal path quantiﬁer A can be interpreted as
    tive system η”. After deﬁning the logic, we give
                                                      Oη ; much of the technical machinery developed for reason-
    a sound and complete axiomatisation, and discuss    ∅
                                                      ing with CTL can thus be adapted for NTL [Emerson, 1990;
    the logic’s relationship to standard deontic logics.
                                                      Clarke et al., 2000]. NTL is in fact a descendent of the Norma-
    We present a symbolic representation language for
                                                      tive ATL (NATL) logic introduced in [Wooldridge and van der
    models and normative systems, and identify four
                                                      Hoek, 2005]:however,NTL is much simpler (and we believe
    different model checking problems, corresponding
                                                      more intuitive) than NATL, and we are able to present many
    to whether or not a model is represented symboli- more technical results for the logic: we ﬁrst give a sound and
    cally or explicitly, and whether or not we are given complete axiomatisation, and then discuss the logic’s rela-
    an interpretation for the normative systems named tionship to standard deontic logics. We introduce a symbolic
    in formulae to be checked. We show that the com-  representation language for normative systems, and investi-
    plexity of model checking varies from P-complete
                                                      gate the complexity of model checking for NTL, showing that
    up to EXPTIME-hard for these variations.
                                                      it varies from P-complete in the simplest case up to EXPTIME-
                                                      hard in the worst. We present an example to illustrate the
1  Introduction                                       approach, and present some brief conclusions.
Normative systems, or social laws, have been widely pro-
moted as an approach to coordinating multi-agent sys- 2   Normative Temporal Logic
tems [Shoham and Tennenholtz, 1996]. Crudely, a norma-
                                                      Kripke Structures: Let Φ={p,   q,...} beaﬁnitesetof
tive system deﬁnes a set of constraints on the behaviour of
                                                      atomic propositional variables.AKripke structure (over Φ)
agents, corresponding to obligations, which may or may not             0
                                                      is a quad K = S, S , R, V,where:S is a ﬁnite, non-empty
be observed by agents. A number of formalisms have been                0       0
                                                      set of states, with S ⊆ S (S = ∅)beingtheinitial states;
proposed for reasoning about normative behaviour in multi-
                                                      R ⊆  S × S is a total binary relation on S, which we refer to
agent systems, typically based on deontic logic [Meyer and                               Φ
                                                      as the transition relation1;andV : S → 2 labels each state
Wieringa, 1993]. However the computational properties of
                                                      with the set of propositional variables true in that state. A
such formalisms – in particular, their use in the practical de-
                                                      path over R is an inﬁnite sequence of states π = s0, s1,...
sign and synthesis of normative systems and the complexity
                                                      which must satisfy the property that ∀u ∈ N: (s , s +1) ∈ R.
of reasoning with them – has received little attention. In this                               u  u
                                                      If u ∈ N, then we denote by π[u] the component indexed by u
paper, we rectify this omission. We present Normative Tem-
                                                      in π (thus π[0] denotes the ﬁrst element, π[1] the second, and
poral Logic (NTL), a logic for reasoning about normative sys-
                                                      so on). A path π such that π[0] = s is an s-path.
tems, which is closely related to the well-known and widely-
used branching time logic CTL [Emerson, 1990].InNTL,the
universal and existential path quantiﬁers of CTL are replaced Normative Systems: In this paper, a normative system is
by indexed deontic operators Oη and Pη,whereOηϕ means a set of constraints on the behaviour of agents in a system.
that “ϕ is obligatory in the context of the normative system
                                                                                          
η”, and Pηϕ means “ϕ is permissible in the context of the 1A relation R ⊆ S × S is total iff ∀s ∃s :(s, s ) ∈ R.

                                                IJCAI-07
                                                  1175More precisely, a normative system deﬁnes, for every possi- K is a Kripke structure, s is a state in K, I an interpretation
ble system transition, whether or not that transition is con- over K,andϕ a formulae of the language, as follows:
sidered to be legal or not. Different normative systems may K, s |= ;
differ on whether or not a transition is legal. Formally, a nor- I
                                           0              K,  |=      ∈  ( )          ∈ Φ
mative system η (w.r.t. a Kripke structure K = S, S , R, V) s I p iff p V s  (where p   );
is simply a subset of R, such that R \ η is a total relation. The K, s |=I ¬ϕ iff not K, s |=I ϕ;
               \η
requirement that R is total is a reasonableness constraint: it K, s |=I ϕ ∨ ψ iff K, s |=I ϕ or K, s |=I ψ;
prevents normative systems which lead to states with no suc-        f
                                                          K, s |= Oη ϕ iff ∀π ∈C(η)(s):K,π[1] |= ϕ;
cessor. Let N(R)={η | (η ⊆ R) & (R \ η is total)} be the        I              I             I
                                                          K,  |= P  fϕ   ∃π ∈C   ( ):K,π[1] |= ϕ
set of normative systems over R. The intended interpretation s  I η    iff    I(η) s         I ;
                              
of a normative system η is that (s, s ) ∈ η means transition K, s |= Oη(ϕ U ψ) iff ∀π ∈C(η)(s), ∃u ∈ N,s.t.K,π[u] |=
                                                               I                I                      I
(s, s ) is forbidden in the context of η; hence R \ η denotes the ψ and ∀v, (0 ≤ v < u):K,π[v] |=I ϕ
legal transitions of η. Since it is assumed η is reasonable, we
                                                          K, s |=I Pη(ϕ U ψ) iff ∃π ∈CI(η)(s), ∃u ∈ N,s.t.K,π[u] |=I
are guaranteed that a legal outward transition exists for every ψ and ∀v, (0 ≤ v < u):K,π[v] |=I ϕ
state. If π is a path over R and η is a normative system over
                                                                                            ∧   →    ↔
R,thenπ is η-conformant if ∀u ∈ N, (π[u],π[u +1]) ∈ η. The remaining classical logic connectives (“ ”, “ ”, “ ”)
                                                                                                     ¬, ∨
Let Cη(s) be the set of η-conformant s-paths (w.r.t. some R). are assumed to be deﬁned as abbreviations in terms of ,
                                                                                      K|=   ϕ  K,   |= ϕ
  Since normative systems are just sets (of disallowed tran- in the conventional manner. We write I if s0 I
                                                              ∈  0 K|= ϕ   K|=  ϕ            |= ϕ  K|= ϕ
sitions), we can compare them, to determine, for example, for all s0 S , if    I  for all I,and  if
                                                            K
whether one is more liberal (less restrictive) than another: if for all . The remaining CTL temporal operators are deﬁned:
η ⊂ η,thenη places fewer constraints on a system than η,
hence η is more liberal. Notice that, assuming an explicit rep- Oη♦ϕ ≡ Oη(Uϕ)   Pη♦ϕ    ≡   Pη(Uϕ)
resentation of normative systems, (i.e., representing a norma- Oη ϕ ≡¬Pη♦¬ϕ      Pη   ϕ  ≡¬Oη♦¬ϕ
tive system η directly as a subset of R), checking such prop-
erties can be done in polynomial time. We can also operate Recalling that η∅ denotes the empty normative system, we
on them with the standard set theoretic operations of union, obtain the conventional path quantiﬁers of CTL as follows:
                                                      Aα ≡  O  α Eα  ≡ P  α
intersection, etc. Taking the union of two normative systems η∅ ,       η∅ .
η1 and η2 may yield (depending on whether R \ (η1 ∪ η2) is
total) a normative system that is more restrictive (less liberal) Properties and Axiomatisation: The following Proposi-
than either of its parent systems, while taking the intersection tion makes precise the expected property that a less liberal
of two normative systems yields a normative system which is system has more obligations (and less permissions) than a
less restrictive (more liberal). Care must be taken when oper- more liberal system.
ating on normative systems in this way to ensure the resulting
                                                      Proposition 1 Let K be a Kripke structure, I be an interpre-
system is reasonable.
                                                      tation over K, and η1,η2 ∈ Ση:IfI(η1) ⊆ I(η2) then K|=I
                                                      O  ϕ →  O  ϕ     K|=  P  ϕ →  P  ϕ
                                                        η1      η2 and     I η2      η1 .
Syntax of NTL:  The language of NTL is a generalisation of
                                                      We now present a sound and complete axiomatisation for NTL
CTL: the only issue that may cause confusion is that, within                             −
this language, we refer explicitly to normative systems, which and some of its variants. First, let NTL be NTL without
                                                                                               −
are semantic objects. We will therefore assume a stock of the empty normative system η∅. Formally, NTL is deﬁned
syntactic elements Ση which will denote normative systems. exactly as NTL, except for the requirement that Ση contains
                                                 η
To avoid a proliferation of notation, we will use the symbol the η∅ symbol and the corresponding restriction on interpre-
                                                                                   −          −
both as a syntactic element for normative systems in the lan- tations. An axiom system for NTL , denoted  ,isdeﬁned
                                                                                                 −
guage, and the same symbol to denote the corresponding se- by axioms and rules (Ax1)–(R2) in Figure 1. NTL can be
mantic object. An interpretation for symbols Ση with respect
                                 :Σ  →   ( )          seen as a multi-dimensional variant of CTL, where there are
to a transition relation R is a function I η N R .When several indexed versions of each path quantiﬁer.
R is a transition relation of Kripke structure K we say that I
                    K                                   GoingontoNTL, we add axioms (Obl) and (Perm) (Fig-
is an interpretation over . We will assume that the symbol                                         
η∅ always denotes the emptyset normative system, i.e., the ure 1); the corresponding inference system is denoted .We
normative system which forbids no transitions. Note that this then, have the following chain of implications in NTL (the
normative system will be reasonable for any Kripke structure. second element in the chain is a variant of the deontic ax-
Thus, we require that for all I: I(η∅)=∅. The syntax of NTL iom discussed below). If something is naturally, or physically
is deﬁned by the following grammar:                   inevitable, then it is obligatory in any normative system; if
                       f                f             something is an obligation within a given normative system
ϕ ::= |p |¬ϕ | ϕ∨ϕ | Pη ϕ | Pη(ϕ U ϕ) | Oη ϕ | Oη(ϕ U ϕ)
                                                      η, then it is permissible in η; and if something is permissible
where p ∈ Φ and η ∈ Ση. Sometimes we call α occurring in a given normative system, then it is naturally (physically)
in an expression Oηα or Pηα a temporal formula (although possible:
such an α is not a well-formed formula).
                                                       (Aϕ →  Oηϕ)      (Oηϕ  → Pηϕ)      (Pηϕ →  Eϕ)
                                                                     +
Semantic Rules: The semantics of NTL are given with re- Finally, let NTL be the extension of NTL obtained by ex-
spect to the satisfaction relation “|=”. K, s |=I ϕ holds when tending the logical language with propositions on the form

                                                IJCAI-07
                                                  1176(Ax1) All validities of propositional logic           and require interpretations to interpret  as set union and 
(Ax2) Pη♦ϕ ↔ Pη (Uϕ)                                 as set intersection. As discussed above, we must then further
                                                                                   \ ( (η ) ∪ (η ))
(Ax2b) Oη  ϕ ↔¬Pη♦¬ϕ                                  restrict interpretations such that R I 1 I 2 always is
                                                      total. This would give us a kind of calculus of normative sys-
(Ax3) Oη♦ϕ ↔  Oη(Uϕ)
                                                      tems. Let K beaKripkestructureandI be an interpretation
      P            ♦¬ϕ
(Ax3b)  η  ϕ ↔¬Oη                                     with the mentioned properties:
        f             f       f
(Ax4) Pη (ϕ ∨ ψ) ↔ (Pη ϕ ∨ Pη  ψ)
                                                           K|=  Pηη ϕ → Pηϕ     K|=  Pηϕ →  Pηη ϕ
     O   fϕ ↔¬P   f¬ϕ                                          I                      I
(Ax5)  η        η                                         K|=   Oηϕ →  Oηη ϕ    K|=  Oηη ϕ → Oηϕ
                            f                                  I                      I
(Ax6) Pη(ϕ U ψ) ↔ (ψ ∨ (ϕ ∧ Pη Pη(ϕ U ψ)))
                            f                         (all of which follow from Proposition 1). Having such a cal-
(Ax7) Oη(ϕ U ψ) ↔ (ψ ∨ (ϕ ∧ Oη Oη(ϕ U ψ)))            culus allows one to reason about the composition of norma-
        f       f
(Ax8) Pη ∧Oη                                        tive systems.
                       f
(Ax9) Oη  (ϕ → (¬ψ ∧ Pη  ϕ)) → (ϕ →¬Oη(γ U ψ))
                        f
(Ax9b) Oη  (ϕ → (¬ψ ∧ Pη  ϕ)) → (ϕ →¬Oη♦ψ)            Relationship with Deontic Logic: The two main differ-
      O    (ϕ  →  (¬ψ ∧  (γ →   O  fϕ))) →   (ϕ →     ences between the language of NTL and the language of
(Ax10)  η                        η                    conventional deontic logic (henceforth “deontic logic”) are,
    ¬Pη(γ U ψ))
                                                      ﬁrst, contextual deontic operators allowing a formula to refer
       O                  f              ♦ψ)
(Ax10b)  η  (ϕ → (¬ψ ∧ Oη  ϕ)) → (ϕ →¬Pη              to several different normative systems, and, second, tempo-
                         f       f
(Ax11) Oη  (ϕ → ψ) → (Pη  ϕ → Pη  ψ)                  ral operators. All deontic expressions in NTL refer to time:
                                                         g
                                                      Pη   ϕ                              η     ϕ
(R1) If  ϕ then  Oη ϕ (generalization)                     (“it is permissible in the context of that is true at
                                                                        O    ϕ
       ϕ     ϕ → ψ     ψ                           the next time point”); η (“it is obligatory in the context
(R2) If  and        then    (modus ponens)            of η that ϕ always will be true”); etc. Deontic logic contains
     O  α → O  α
(Obl) η∅      η                                       no notion of time. In order to compare our temporal deon-
      P  α → P  α
(Perm)  η     η∅                                      tic statements with those of deontic logic we must take the
                                                     temporal dimension to be implicit in the latter. Two of the
(Obl+) η  η → (Oηα → Oη α)
                                                     perhaps most natural ways of doing that is to take “obliga-
       η  η →  (P  α → P α)
(Perm+)           η     η                             tory” (Oϕ) to mean “always obligatory” (Oη ϕ), or “oblig-
                                                                                      g
                                                      atory at the next point in time”(Oη ϕ), respectively, and
                           −
Figure 1: The three systems NTL ((Ax1)–(R2), derived from similarly for permission. In either case, all the principles
an axiomatisation of CTL); NTL ((Ax1)–(R2),(Obl),(Perm)); of Standard Deontic Logic (SDL) hold also for NDL,viz.,
   +
NTL  ((Ax1)–(R2),(Obl+),(Perm+)). α stands for a temporal O(ϕ → ψ) → (Oϕ →  Oψ)  (K); ¬O⊥ (D); and from ϕ
formula.                                              infer Oϕ (N). The two mentioned temporal interpretations of
                                                      the (crucial) deontic axiom D are (both NTL validities):
                                                                                     g
η ≡ η  and η  η ( can then be deﬁned), interpreted in               ¬Oη   ⊥     ¬Oη   ⊥
                                                                            and
the obvious way (e.g., K, s |=I η  η iff I(η) ⊂ I(η )). An
                  +          +                −
axiom system for NTL , denoted  , is obtained from  by With these translations, all of the most commonly discussed
adding the schemes (Obl+) and (Perm+) (Figure 1).     so-called paradoxes of deontic logic also holds in NTL.How-
                                                      ever, it has been argued (cf., e.g., [Meyer and Wieringa,
Theorem 1 (Soundness and Completeness) The inference  1993]) that one of the causes behind some of the instances of
          −
mechanism    is sound and complete with respect to validity the paradoxes (particularly those involving contrary-to-duty
      −                            ϕ
of NTL  formulas, i.e., for every formula in the language obligations) is that the language of conventional deontic logic
      −        |= ϕ   −  ϕ                  
of NTL , we have    iff    . The same holds for with  is too weak, and that by incorporating temporal operators
                            +                  +
respect to formulas from NTL and with respect to NTL . some instances of the paradoxes can be avoided.
Proof:  All three cases are proven by adjusting the tech-
                                            −
nique presented in [Emerson, 1990].FortheNTL  case,   3   Symbolic Representations
the tableau-based construction of [Emerson, 1990] immedi-
ately carries through: we will encounter, for every generated In practice, explicit state representations of Kripke structures
                                                      are rarely if ever used when reasoning about systems, be-
state, successors of different dimensions. For the case of NTL,
                       η                              cause of the state explosion problem: given a system with
which includes the symbol ∅,wehavetoaddclausescorre-                                             2n
sponding to (Obl) and (Perm) to the construction of the clo- n Boolean variables, the system will typically have states.
     (ϕ)            ϕ    O  α             P α         Instead, practical reasoning tools provide succinct, symbolic
sure cl  of a formula :if η∅  (respectively, η )isin
 (ϕ)         O α             P  α              (ϕ)    representation languages for deﬁning Kripke structures. We
cl   then also η (respectively, η∅ ) should be in cl .
                +                                     present such a language for deﬁning models, and also intro-
In the case of NTL ,wehavetocloseoffcl(ϕ) under the
                                                      duce an associated symbolic language for deﬁning normative
implications of axioms (Obl+) and (Perm+).       2
                                                      systems.
                  +
  Going beyond NTL , we can impose further structure on
Ση and its interpretations. For example, we can add unions A Symbolic Language for Models: We present the SIM-
and intersections of normative systems by requiring Ση to in- PLE REACTIVE MODULES LANGUAGE (SRML), a “stripped
                                               
clude symbols η  η , η  η whenever it includes η and η , down” version of Alur and Henzinger’s REACTIVE MODULES

                                                IJCAI-07
                                                  1177                                                                              
LANGUAGE  (RML) [Alur and Henzinger, 1999],whichwas   each rule is enabled in s and s is obtained from executing this
introduced in [Hoek et al., 2006]. SRML represents the core collection of rules on s.
of RML, with some “syntactic sugar” removed to simplify the
presentation and semantics. The basic idea is to present a
Kripke structure K by means of a number of symbolically A Symbolic Language for Normative Systems: We now
represented agents, where the choices available to every agent introduce the SRML Norm Language (SNL) for representing
are deﬁned by a number of rules, deﬁning which actions are normative systems, which corresponds to the SRML language
available to the agent in every state; a transition (s, s) in K for models. The general form of an SNL normative system
corresponds to a tuple of actions, one for each agent in the deﬁnition is:
system. Here is an example of an agent deﬁnition in SRML
                                                                   normative-system  id
(agents are referred to as “modules” in (S)RML):                       χ            ,...,
                                                                        1 disables 11     1k
                                                                          ···
              module toggle controls x
                                                                       χ disables   ,...,
                init                                                    m           m1    mk
                 :  ;   := 
                1       x                              Here, id ∈ Ση is the name of the normative system; these
                 :  ;   := ⊥
                2       x                             names will be used to refer to normative systems in formulae
                update
                                                     of NTL. The body of the normative system is deﬁned by a set
                3 : x ; x := ⊥
                                                     of constraint rules. A constraint rule
                4 :(¬x) ; x := 
This module, named toggle, controls a single Boolean vari-
                                                                     χ disables   1,...,
able, x. The choices available to the agent are deﬁned by                                k
the init and update  rules2.Theinit  rules deﬁne the  consists of a condition part χ, which is a propositional logic
choices available to the agent with respect to the initialisation formula over the variables of the system, and a set of rule
of its variables, while the update rules deﬁne the agent’s labels {1,...,k} (we require [] ∈{1,...,k}). If χi is
choices subsequently. In this example, there are two init satisﬁed in a particular state, then any SRML rule with a label
rules and two update rules. The init rules deﬁne two  that appears on the r.h.s. of the constraint rule will be illegal
choices for the initialisation of variable x: assign it the value in that state, according to this normative system.AnSNL
 or the value ⊥. Both of these rules can ﬁre initially, as interpretation is then simply a set of SNL normative systems,
their conditions () are always satisﬁed; in fact, only one each with a distinct name.
of the available rules will ever actually ﬁre, corresponding Given SNL normative systems η1 and η2,forsomeSRML
to the “choice made” by the agent on that decision round. system ρ,wesay:η1 is at least as liberal as η2 in system ρ if
The effect of ﬁring a rule is to execute the assignment state- for every state s ∈ Sρ, every rule that is legal according to η2
ments on the r.h.s. of the rule, which modify the agent’s con- is legal according to η1;andtheyareequivalent if for every
trolled variables. (The “prime” notation for variables, e.g., state s ∈ Sρ, the set of rules legal according to η1 and η2 are
 
x , means “the value of x afterwards”.) Rules are identiﬁed the same.
by labels (i); these labels do not form part of the original
RML language, and in fact play no part in the semantics of Theorem 2 The problem of testing whether SNL normative
                                                            η                                        η
SRML – they are used to identify rules in normative systems, system 1 is at least as liberal as SNL normative system 2 is
as we shall see below. We assume a distinguished label “[] ” PSPACE-complete, as is the problem of testing equivalence of
for rules, which is used to identify rules that should never such systems.
be made illegal by any normative system. With respect to
                                                      Proof:  We do the proof for checking equivalence; the lib-
update  rules, the ﬁrst rule says that if x has the value ,
                                                      erality case is similar. For membership of PSPACE, consider
then the corresponding action is to assign it the value ⊥, while
                                                      the complement problem: guess a state s, check that s ∈ Sρ,
the second rule says that if x has the value ⊥, then it can sub-
                                                      (reachability of states in RML is in PSPACE [Alur and Hen-
sequently be assigned the value . In sum, the module non-
                                                      zinger, ]) and check that there is some rule legal in s according
deterministically chooses a value for x initially, and then on
                                                      to η2 is not legal in s according to η1, or vice versa. Hence the
subsequent rounds toggles this value. In this example, the
                                                      complement problem is in NPSPACE, and so the problem is
init rules are non-deterministic, while the update rules
                                                      in PSPACE.ForPSPACE-hardness, we reduce the problem of
are deterministic. An SRML system, ρ, is a set of such mod-
                                                      propositional invariant checking over (S)RML modules [Alur
ules, where the controlled variables of modules are mutually
                                                      and Henzinger, ]. Given an SRML system ρ and propositional
disjoint.
                              0                       formula ϕ, deﬁne normative systems η1 and η2 as follows
  The Kripke structure Kρ = Sρ, S , Rρ, Vρ corresponding
                              ρ                       (where  does not occur in ρ):
to SRML system ρ is given as follows: the state set Sρ and val-
uation function Vρ corresponds to states (valuations of vari-
                          ρ                 0          normative-system   η1       normative-system   η2
ables) that could be reached by , with initial states Sρ being ¬ϕ                     ⊥          
states that could be generated by init rules; the transition  disables                   disables
                    ( , ) ∈
relation Rρ is deﬁned by s s Rρ iff there exists a tuple of According to η2,  is always enabled; thus η1 will be equiva-
update  rules, one for each module in the system, such that lent to η2 iff ϕ holds across all reachable states of the system.
                                                      2
  2To be more precise, the rules are guarded commands.

                                                IJCAI-07
                                                  11784  Model Checking                                         s1
                                                            t(x1)     s4 t(x2)                t(xk)
                                                       s0                                           s(3k)
Model checking is an important computational problem for
                                                                             s6     ...
any modal or temporal logic [Clarke et al., 2000]. We con-      s3
sider two versions of the model checking problem for NTL,
                                                            f(x1)        f(x2)                f(xk)
depending on whether the model is presented explicitly or s2          s5
symbolically. For each of these cases, there are two fur-
ther possibilities, depending on whether we are given an in-     Figure 2: Reduction for Theorem 3.
terpretation I for normative systems named in formulae or
not. If we are given an interpretation for the normative sys-
tems named in the formula, then NTL model checking essen- Symbolic Model Checking: As we noted above, explicit
tially amounts to a conventional veriﬁcation problem: show- state model checking problems are perhaps of limited inter-
ing that, under the given interpretation, the model and asso- est, since such representations are exponentially large in the
ciated normative systems have certain properties. However, number of propositional variables. Thus we now consider the
the uninterpreted model checking problem corresponds to the SRML model checking problem for NTL.Again,wehavetwo
synthesis of normative systems: we ask whether there exist versions, depending on whether we are given an interpreta-
normative systems that would have the desired properties. tion or not.
                                                      Theorem 4  The interpreted SRML model checking problem
                                                      for NTL is PSPACE-complete.
Explicit State Model Checking: The interpreted explicit
state model checking problem for NTL is as follows.   Proof:  PSPACE-hardness is by a reduction from the prob-
                                                                                                    [
                                0                     lem of propositional invariant veriﬁcation for SRML Alur
    Given a Kripke structure K = S, S , R, V, interpreta- and Henzinger, ]3. Given a propositional formula ϕ and an
    tion I :Ση → N(R) and formula ϕ of NTL, is it the case          ρ      = {η }
       K|=  ϕ                                         (S)RML system  ,letI     ∅ , and simply check whether
    that   I ?                                        K  |=  O     ϕ
                                                        ρ  I  η∅    . Membership of PSPACE is by adapting the
                                                                                           [          ] 2
The CTL model checking problem is P-complete [Schnoebe- CTL symbolic model checking algorithm of Cheng, 1995 .
len, 2003]. The standard dynamic programming algorithm for
                                                      Theorem 5  The uninterpreted SRML model checking prob-
CTL model checking may be easily adapted for interpreted ex-
                                                      lem for NTL is EXPTIME-hard.
plicit state NTL model checking, and has the same worst case
time complexity. More interesting is the case where we are Proof: By reduction from the problem of determin-
not given an interpretation. The uninterpreted explicit state ing whether a given player has a winning strategy in the
model checking problem for NTL is as follows.         two-player game PEEK-G4 [Stockmeyer and Chandra, 1979,
                               0                           ]                      4          1,  2, 3,ϕ
    Given a Kripke structure K = S, S , R, V and formula p.158 . An instance of PEEK-G is a quad X X X
                                                              1     2
    ϕ of NTL, does there exist an interpretation I :Ση → where: X and X are disjoint, ﬁnite sets of Boolean variables
    N(R) such that K|=I ϕ?                            – variables X1 are under the control of agent 1, and X2 are
                                                      under the control of agent 2; X3 ⊆ (X1 ∪X2) are the variables
Theorem 3 The uninterpreted explicit state model checking true in the initial state of the game; and ϕ is a propositional
problem for NTL is NP-complete.                       formula over X1 ∪ X2, representing the winning condition.
                                                      The agents take try to make ϕ true, by taking it in turns to
Proof:  For membership in NP, simply guess an interpre- alter the value of at most one of their variables. The deci-
tation I and verify that K|=I ϕ. Since interpretations are sion problem is to determine whether agent 2 has a winning
polynomial in the size of the Kripke structure and formula, strategy in a given game. The idea of the proof is to deﬁne an
guessing can be done in (nondeterministic) polynomial time, SRML system that such that the runs of the system correspond
and checking is the interpreted explicit state model checking to plays of the given game instance, and then to deﬁne an
problem. Hence the problem is in NP.ForNP-hardness, we NTL formula to be model checked, which names a normative
reduce SAT.GivenSAT instance ϕ over variables x1,...,xk, system η, such that the transitions legal according to η corre-
for each variable xi, create two variables t(xi) and f (xi),and spond to a winning strategy for player 2. The construction of
deﬁne a Kripke structure with 3k +1states, as illustrated in the SRML system follows that of the EXPTIME-completeness
Figure 2; state s0 is the initial state, and state s3k is a ﬁnal proof of ATL model checking in [Hoek et al., 2006], with
          ∗
state. Let ϕ denote the NTL formula obtained from ϕ by the difference that player 2’s update rules are given labels (so
systematically replacing every variable xi with (Pη♦t(xi)). that they may be disabled). The formula to model check then
Deﬁne the formula to be model checked as:             deﬁnes three properties: (i) if it is agent 2’s turn, then accord-
                                                      ing to η at most one of its possible moves is legal; (ii)allof
      V
   ∗                                                  agent 1’s moves are legal according to η (i.e, agent 2 must
  ϕ ∧       (Pη♦(t(x ) ∨ f (x ))) ∧
  V     1≤i≤k      i     i                            win against all of these); and (iii) the legal paths according to
       (Pη♦t(x ) →¬Pη♦f (x ))(Pη♦f (x ) →¬Pη♦t(x ))
   1≤i≤k      i           i        i           i      η must represent wins for agent 2.                2
This formula is satisﬁed in the structure by some interpreta-
                                                         3                [                   ]
tion iff ϕ is satisﬁable.                        2       In fact, the result of Alur and Henzinger, 1999 is stated for
                                                      RML, but the proof only makes use of features from SRML.

                                                IJCAI-07
                                                  1179