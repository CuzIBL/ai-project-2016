            Formalizing Communication Protocols for Multiagent Systems∗

                                          Munindar P. Singh
                                    Department of Computer Science
                                    North Carolina State University
                                     Raleigh, NC 27695-8206, USA
                                             singh@ncsu.edu

                    Abstract                          Singh, 2004; Winikoff et al., 2005; Yolum and Singh, 2002].
                                                      To simplify comparison with previous work, we use NetBill
    Protocols structure interactions among communi-   as an example protocol. In NetBill, a customer requests a
    cating agents. A commitment machine models a      quote for some goods, followed by the merchant sending the
    protocol in terms of how the commitments of the   quote. If the customer accepts the quote, the merchant de-
    various parties evolve. Commitment machines thus  livers the goods. The customer then pays. After receiving
    support ﬂexible behavior while providing a mean-  the payment, the merchant sends a receipt to the customer.
    ingful basis for compliance with a protocol. Unfor- Figure 1(l) (or “left”) is an FSM representation of NetBill.
    tunately, current formulations of commitment ma-  Figures 1(c) (“center”) and (r) (“right”) are discussed below.
    chines are not sufﬁciently general or rigorous.
                                                        1   C: rfq        1   C: rfq         1   C: rfq
    This paper develops generalized commitment ma-                2                 2                  2
    chines (GCMs)  whose elements are described            M: offer          M: offer           M: offer
                                                        3                 3


                                                                        C:  reject           3
    generically in terms of inferences, and whose com-    C:accept           C:accept      C:  reject C:accept
    putations are inﬁnite (thus supporting nonterminat-           4                 4                  4
                                                          M: goods           M: goods          M: goods
    ing protocols). This paper shows how a GCM can      5                 5                  5
    be understood as a nondeterministic B¨uchi automa-     C: pay             C: pay            C: pay
                                                                  6                 6                  6
    ton (BA), whose acceptance condition accommo-       7 M: receipt      7  M: receipt    M: receipt
    dates inﬁnite as well as ﬁnite executions.
    Deterministic BA are readily emulated by conven-  Figure 1: NetBill automata: original (l); terminating but un-
    tional software, e.g., a script running in a Web  bounded (c); and nonterminating (r). States 1 are initial and 7
    browser. In general, nondeterministic BA may have are ﬁnal. Section 2.4 explains state 6 of (r). C and S refer to
    no equivalent deterministic BA. However, under    message senders customer and merchant, respectively
    well-motivated technical conditions, a GCM yields   The above papers observe that the original NetBill is quite
    a deterministic B¨uchi automaton that, although not rigid. It cannot handle natural situations such as (1) a mer-
    necessarily equivalent in automata theory terms, is chant proactively sending a quote, mimicking the idea of ad-
    sound (produces only computations allowed by the  vertising a price; (2) a customer sending an “accept” message
    GCM) and  complete (produces the effect of any    before requesting a quote (as in cases of trust or urgency); (3)
    computation allowed by the GCM).                  a merchant sending the goods prior to the customer accepting
                                                      (as in a trial offer). These papers show how to model proto-
1  Introduction                                       cols based on commitments, enabling each participant to per-
                                                      form a wider variety of actions yet ensure its own compliance
Protocols streamline communication and enable the develop-
                                                      and check others’ compliance based on their actions.
ment of interoperable agents by independent vendors. The
                                                        Although promising, previous work on CMs is not sufﬁ-
participants in a protocol should be able to exploit opportu-
                                                      ciently general, rigorous, or clear in its assumptions. Yolum
nities offered by the environment, negotiate and exploit spe-
                                                      and Singh model actions in restrictively. Their approach
cial relationships with others, and handle exceptions. Unfor-
                                                      only indirectly models the discharge of a commitment. Their
tunately, conventional engineering techniques for specifying
                                                      strong point is a compilation of CMs to ﬁnite state machines.
and enacting protocols are tedious and result in interactions
                                                      Winikoff et al. use the event calculus to reconstruct some
that are unnecessarily rigid [Yolum and Singh, 2002].
                                                      of Yolum and Singh’s work. They improve the methodology
  Work on commitment machines (CMs) shows how repre-
                                                      by which commitments are modeled, but don’t study com-
senting and inferencing on commitments can produce ﬂexible
                                                      pilation as such. Chopra and Singh consider a richer, non-
protocols while providing a basis for compliance [Chopra and
                                                      monotonic theory of action based on causal logic. They don’t
  ∗This research was partially supported by the National Science discuss compilation except the general translation of causal
Foundation under grant DST-0139037.                   logic into a transition system.

                                                IJCAI-07
                                                  1519  As a case in point, current and emerging ﬁnancial protocols modeled, and (4) how a protocol should function, i.e., “reg-
are not adequately formalized. For example, price discovery ulative” rules in force. Here, (1) and (2) are ﬁxed; (3) and
protocols, which are crucial for wholesale foreign exchange (4) vary for each protocol. The above kinds of rules can be
transactions, are conventionally described via scenarios and captured in a variety of existing action formalisms. Impor-
text descriptions [TWIST, 2006]. However, such descriptions tantly, GCMs are compiled in a novel manner into determin-
are ambiguous and unwieldy. They treat each of several cases istic B¨uchi automata, a well-known model of inﬁnite com-
separately, losing opportunities for generalization and com- putations [Thomas, 1990]. Automata facilitate veriﬁcation;
pactness. Our preliminary work with TWIST captures the deterministic representations can be directly executed by a
key commitments and succinctly represents multiple scenar- computer using a single thread, in constant space.
ios using a few primitive patterns, that can be validated mod- Brieﬂy, our contributions are as follows. We seek a compu-
ularly. The value of commitments in modeling and analysis tational model of protocols that is natural for humans: thus it
is clear; this paper strengthens their operational aspects. must reﬂect semantics. In general, producing an executable,
  Previous work assumes that a CM necessarily includes all deterministic representation can cause an exponential blow
states that are reachable through the actions modeled. How- up and include unnatural states. Using semantics, we can map
ever, the design of a protocol can involve considerations such GCMs to deterministic automata with natural states.
as which states to include, e.g., to respect integrity and secu-
rity constraints, and participants’ preferences. This is espe- 2 Technical Framework
cially so when subtle organizational requirements or complex
roles are involved. Likewise, although nonmonotonic speciﬁ- We introduce our action representation, and review commit-
cations can be valuable, monotonic representations that enu- ments and B¨uchi automata. Below, x, y, z are agents; p, q,
merate the modeled conditions facilitate veriﬁcation of sim- etc. are formulas; and α is an atomic proposition or its nega-
pliﬁed, high-performance automaton-based implementations tion: identify α with ¬¬α.
that nevertheless follow a speciﬁed protocol.
  This paper introduces generalized commitment machines 2.1 Generic Action Theory
(GCMs), which are a more general and rigorous version of The meaning of an action is speciﬁed in terms of the propo-
CMs. It introduces a simple approach for modeling actions, sition it brings about (reﬂecting “causes” in causal logic or
so that we can clearly state the key requirements on them. “initiates” in event calculus) under different conditions. Each
The action models can be expressed in a variety of existing action is described via an action theory, Δ, i.e., a set of ax-
formalisms, including causal logic and event calculus. This ioms that capture how the state of a protocol evolves when
paper handles the complete set of commitment operations. an action occurs. For simplicity, the performer of the action
  Additionally, the semantics of GCMs is based on inﬁnite is kept implicit in the action label. Deﬁnition 1 describes ac-
computations, thus providing a proper treatment of nontermi- tion axiom schemas, which correspond to potential transitions
nating (and even terminating) protocols. To motivate nonter- (some of which might be allowed in a GCM).
mination, notice that protocols can readily have cycles. Fig-      a
ure 1(c) introduces a reject transition, which induces a cycle. Deﬁnition 1 p→q means that q is a consequence of perform-
Thus unbounded computations can be produced. However, if ing action a in a state where p holds.
our model is a traditional ﬁnite automaton, each computation          a
                                                        If p holds and p→q, then performing a yields q.Whenq is
would terminate in a ﬁnal state of the automaton. By contrast, ¬p, a overturns p;whenq is false, that means a is impossible
if we automatically restart NetBill upon sending a receipt and            a
                                                      if p holds. The relation → is closed under the inference rules
interpret it as not having a ﬁnal state but requiring that a good below. An action theory Δ must respect these rules. Below
state (say, state 6) occurs inﬁnitely often, then we would bring p  q means that q is a logical consequence of p.
about inﬁnite computations (Figure 1(r)). A good state is one      a        
                                                          p  qq→      rru
in which some desirable condition, relative to design goals, −−−−−−−−−−−−−a−−−−−−−−−−−−  (CONSEQUENCE)
                                                                  p →  u
is achieved. In traditional applications of automata, a good a       a
state is typically one where a stimulus has been responded to. −r−−→−−−pr−−−−−−−→−−−q−
                                                               a  ∧                       (CONJUNCTION)
For GCMs, a simple domain-independent basis may be that a    r → p q
                                                        The following is not an inference rule but a requirement
good state is one where there are no pending commitments.     a
                                                      that the → relation preserve consistency.
  More natural nonterminating protocols involve maintain-     a
ing a relationship (as in an organization) rather than com- −−−−p−→−−−q−−−
                                                          ¬(  a ¬  )                      (CONSISTENCY)
pleting a transaction. Participants of such protocols would p →  q
continually send messages and respond as often as required. a        ¬
                                                         −p−−→−−−qq−−−−−−−−−−−α−
One can think of the underlying relationship as a standing   ∧   a   ∧                         (INERTIA)
                                                           p   α → q α
agreement, analogous to those in real-life organizations or INERTIA speciﬁes that if α holds before a and isn’t over-
distributed systems. You don’t want a multiagent system to turned by a,thenα continues to hold after a. INERTIA is not
terminate any more than you want your OS to terminate. required here but is a convenient property of action theories.
  GCMs are speciﬁed modularly via sets of inference rules.
We cleanly separate rules involving (1) generic expectations Example 1 Example of overturn and inertia: Consider a state
                                                      s where goods ∧¬pay holds. Now if payment is made, the
from action theories, (2) commitment operations, (3) how         
commitment operations are “constituted” in the setting being new state is s where goods ∧ pay holds.

                                                IJCAI-07
                                                  15202.2  Commitments                                        • Before the customer pays, the merchant sends the re-
A commitment is an explicitly manipulable directed obliga- ceipt, making receipt true. The conditional commitment
tion (in a context, ignored here for simplicity).         is terminated, but no other commitment is created: the
                                                          customer did not commit to paying (eliminate).
Deﬁnition 2 A commitment Cx,yp relates a debtor x, a cred-
itor y, and a condition p. Speciﬁcally, x commits to y to bring 2.3 Mapping to Existing Logics
about p.                                                                       a
                                                      The inference schemas on → deﬁned above are generic
Commitment Actions                                    and can be represented in more than one existing formal-
The creation and manipulation of commitments can be de- ism. Hence, an interpreter for any of these formalisms can
scribed using the following operations, modeled as actions. be plugged in to derive appropriate inferences. The following
                                                      causal laws show how some commitment actions are captured
  •     create(x,Cx,yp)                                            [                     §   ]
    true    →     Cx,yp: establish                   in causal logic Chopra and Singh, 2004, 4.1 .
                                                                            ¬
  •  ∧       discharge(x,Cx,yp) ¬                       1. Discharge: p causes Cx,yp if Cx,yp
    p  Cx,yp      →       Cx,yp: resolve and remove
                                                        2. Detach: maps to two expressions
         cancel(x,Cx,yp)
  •  x,y            ¬  x,y
    C   p    →       C  p: remove (by debtor)            p causes ¬CCx,y(p, r) if CCx,y(p, r)
             (y,C  p)
  •      release x,y ¬                                    p causes Cx,yr if CCx,y(p, r)
    Cx,yp    →       Cx,yp: remove (by creditor)
                                                                            ¬     (   )       (   )
  •      assign(y,z,Cx,y p) ∧¬                          3. Eliminate: r causes CCx,y p, r if CCx,y p, r
    Cx,yp     →     Cx,zp    Cx,yp: change creditor
                                                      The following event calculus expressions capture the same
  •      delegate(x,z,Cx,y p) ∧¬
    Cx,yp      →      Cz,yp   Cx,yp: change debtor   actions as the above [Winikoff et al., 2005, Fig. 7] (time is
A debtor who cancels a commitment may be subject to penal- explicit here, but not speciﬁcally used i this formalization):
ties whereas a creditor may release a commitment (typically 1. Discharge:
for organizational reasons) with no penalties.            Terminates(e, Cx,yp, t) ← HoldsAt(Cx,yp, t) ∧
                                                          Happens(e, t) ∧ Subsumes(p,p) ∧ Initiates(e, p,t)
Deﬁnition 3 A conditional commitment CCx,y(p, r) means
that if antecedent p becomes true, then the debtor x will be- 2. Detach: maps to two expressions
come committed to bringing about consequent r.            Initiates(e, Cx,yp, t) ← HoldsAt(CCx,y(p, q),t) ∧
                                                                  (  ) ∧         (  ) ∧       (    )
  When a conditional commitment’s antecedent becomes      Happens  e, t Subsumes  p ,p  Initiates e, p ,t
                                                                    (       (  )  ) ←
true, it is discharged and a commitment for its consequent Terminates e, CCx,y p, q ,t
                                                                 (     (   ) ) ∧        (  ) ∧
is created (typically, z = y):                            HoldsAt CCx,y p, q ,t Happens  e, t
                                                          Subsumes(p,p) ∧ Initiates(e, p,t)
              detach(z,CCx,y (q,r))
  •    x,y(  )               ¬   x,y(  ) ∧ x,y
    CC    q, r      →        CC    q, r  C   r         3. Eliminate: Terminates(e, CCx,y(p, q),t) ←
                                                          HoldsAt(CCx,y(p, q),t) ∧ Happens(e, t) ∧
When a conditional commitment’s consequent becomes true,                            
it is discharged and nothing else is needed (typically, z = x): Subsumes(q ,q) ∧ Initiates(e, q ,t)
  •      (   ) eliminate(z,CCx,y(q,r)) ¬ ( )          We could just as easily use ECASL, the Extended Cognitive
    CCx,y q, r       →         CCx,y q, r            Agent Speciﬁcation Language [Khan and Lesp´erance, 2006].
Constituting Commitment Actions
The above rules provide the semantics of commitment ac- 2.4 Buchi¨ Automata
tions. In each setting, the actions would be performed in some Finite state machines (FSMs) have long been used to specify
domain-speciﬁc manner. In protocols, commitment actions protocols. The acceptance condition of FSMs requires termi-
correspond to message types. In some cases, the messages nation in a ﬁnal state. But, as Section 1 argues, many inter-
may combine the effects of multiple commitment actions. Or, esting protocols are nonterminating. To model such protocols
as in the case of partial returns and payments, multiple mes- requires that we consider automata over inﬁnite words.
sages may be needed to implement one action. For example, B¨uchi automata (BA) have ﬁnitely many states and the
paying $3 would replace a commitment to pay $9 by a com- same transition rules as FSMs. However, their acceptance
mitment to pay $6. The domain action theory would capture condition handles nonterminating computations by requiring
such requirements.                                    that a good state (see Section 1) be visited inﬁnitely often.
Example 2 Consider   the   conditional  commitment    Deﬁnition 4 AB¨uchi automaton is a ﬁve-tuple, B  =
CCm,c(pay, receipt) meaning that the merchant would   S, A,s0, G,δ ,whereS is a set of states, A is the alphabet,
commit to sending a receipt if the customer pays.     s0 ∈ S is the start state, G ⊆ S is a set of good states, and
                                                      δ ⊆ S × A × S is the transition relation.
  • The customer pays ﬁrst, making pay true. The con-
    ditional commitment is terminated and a new commit- Below, ω is the ﬁrst inﬁnite ordinal. A computation τ =
    ment, Cm,creceipt, is created in its stead (detach). When s0,a0,s1,...  is an ω-long alternating series of states and
    the merchant actually sends the receipt, i.e., when the intervening actions. For a computation τ, inf(τ) is the set of
    proposition receipt becomes true, then the commitment states that occur inﬁnitely often in τ. Throughout this paper,
    Cm,creceipt is discharged (discharge).            B is a BA and τ is a computation.

                                                IJCAI-07
                                                  1521Deﬁnition 5 τ is realized by B if and only if (∀i ∈   Example 3  Previous work formalizes NetBill and other ter-
ω,si,ai,si+1 ∈δ) and inf(τ) ∩ G = ∅.                minating protocols as commitment machines. A similar ap-
                                                      proach applies here. Brieﬂy, the modeling steps are:
Figure 1(r) is an example BA with S = the set of vertices, A
                                                        •
= the set of edge labels, s0 =1, G={6} shown in reverse   Model the atomic propositions, such as request or pay.
video, and δ = the set of edges. The computation that cycles • Introduce the commitments needed. For example, ac-
            1 2 3 4 5 6        1   :   2    :
through states , , , , , , namely, , C rfq, , M oﬀer,     cept abbreviates CCc,m(goods, pay), i.e., if customer c
3, C : accept, 4, M : goods, 5, C : pay, 6, M : receipt,...  is receives the goods, he would pay merchant m.
accepted by this BA, because it visits state 6 inﬁnitely often.
                                                        • Identify the states in S. For example, state 3 in Fig-
The computation that cycles through states 1, 2, 3 is not ac-
                                                          ure 1 means that the merchant has made an offer thus
cepted because it does not visit state 6. Figure 2 shows BA
                      ω           ω                       committing to delivering goods and sending a receipt
for the languages a(ba+b) and a(a+b) , respectively. No-
                        ω                                 upon payment: formally, request ∧ promiseReceipt ∧
tice that Figure 2(r) accepts a , but Figure 2(l) doesn’t. Thus,
                                                          promiseGoods.
viewed in automata theoretic terms, the two are obviously not
equivalent.                                             • Identify the actions in A: these are the messages ex-
                                                          changed, e.g., sendAccept and sendGoods.
      a                                a
 1         2                       1        2           • Assert action theory axioms, Δ: (1) sending an ac-
      b       b                                a, b
                                                                   sendAccept
                                                          cept: true →   accept; (2) delivering the goods and
                                                                              sendGoods  ∧
  Figure 2: (l) nondeterministic BA; (r) deterministic BA promising receipt: true → goods promiseReceipt.
                                                        •
  The move to inﬁnite computations complicates some as-   Identify the good states in G. For example, (1) the cus-
pects of the automata. Importantly, whereas all nondetermin- tomer has made a request but no commitments have
istic FSMs have an equivalent deterministic FSM, some non- been made: request; (2) the merchant has delivered
deterministic BA have no equivalent deterministic BA. Fig- the goods and the receipt and the customer has paid:
                                                                 ∧      ∧     ∧
ure 2(l) is a famous example of a BA that cannot be deter- request goods  pay   receipt.
minized. A deterministic BA can be efﬁciently emulated by Example 4 A GCM analogous to Figure 2(l). State 1 is p∨q;
a script: if the BA is correct we know the script complies state 2 (∈ G)isp ∧ q,andΔ includes the following axioms:
with the given protocol. This paper shows how to produce (if ∨ a  ∧       ∧    b  ∧           ∧   b  ∨
                                                      (1) p q → p  q,(2)p  q → p  q,and(3)p   q → p q.
possible) a correct deterministic BA for a protocol.    This example helps relate GCMs to the well-known BA of
                                                      Figure 2(l) (revisited in Section 4). A scenario where such
3  Generalized Commitment Machines                    a GCM may occur is if p and q refer to some organizational
                                                      relationships. Action a strengthens the relationship from p or
A generalized commitment machine (GCM) is speciﬁed via q to p ∧ q. Action b conﬁrms the relationship or can weaken
states whose content is captured via logical expressions, ac- it. (One can imagine that b was originally speciﬁed for two
tions and an action theory to transition between the states, and organizational roles, now being played by the same party.)
a set of good states. Terminating computations can be mod-
eled by transitioning at their end to an artiﬁcial good state
with a self-loop. Given a state, the new state reached by per- 4 Compiling GCMs into Buchi¨ Automata
forming an action is logically inferred. In effect, a GCM spec- Reasoning with declarative representations at runtime can be
iﬁes meanings of the states, and lets inferencing do the rest. expensive, may increase the code footprint of the agents.
  Since we construct BA from the same set of states and ac- Many applications such as ﬁnancial transactions [TWIST,
tions as GCMs, we use the same symbols S, s0, G,andA  2006] call for ﬂexibility when designing a protocol but rigid
in both deﬁnitions. Below, p ≡ q means that p and q are enactment to make performance guarantees. Also, the popu-
logically equivalent, that is, p  q and q  p.       larity of AJAX indicates the potential for simpliﬁed interact-
                                                      ing agents. Compiling a GCM into a deterministic BA is thus
Deﬁnition 6 A GCM is a tuple P = S, A,s0, Δ, G ,where highly desirable. A GCM is in essence a nondeterministic
S is a ﬁnite set of states, A is a ﬁnite set of actions, , s0 ∈ S BA. In general, an equivalent deterministic BA may not exist.
is the start state, Δ is an action theory, and G⊆S is a set of But we can exploit the semantics of the protocol to produce
good states. Members of S are logically distinct: (∀si,sj ∈ (if possible) a deterministic BA that for practical purposes is
S :(si ≡ sj) ⇒ (si = sj)); false ∈ S; any state stronger than equivalent.
a good state is also good: (∀si ∈ G,sj ∈ S :(sj  si) ⇒
(sj ∈ G)).                                            4.1  Determinism and Soundness
Deﬁnition 7 τ is generated by a GCM P if and only if (∀i ∈ The states, initial state, and good states of a GCM map
                     ai                               straight to those of a BA. More importantly, to ensure de-
ω : si ∈ S, (∃ai ∈ A : si → si+1)), and inf(τ) ∩ G = ∅.
                                                     terminism, we can choose no more than one transition for a
Throughout this paper, P (for “protocol”) is a GCM. Given given state and action: this is what Algorithm 1 does.
q, r ∈ S, a ∈ A, P transitions from q to r under action a if To understand the min calculation in Algorithm 1, imagine
           a
and only if q→r. In effect, a GCM functions as an inference- that the GCM states are partially ordered according to logical
driven (nondeterministic) BA.                         consequence: si is placed below sj iff si  sj.ForS ⊆ S,

                                                IJCAI-07
                                                  1522min(S) is the unique minimum, if any, of S according to this                                b
                                                                                       q1        r1
                                            1
order. For example, assume that performing a in s could     q1      q2             a
                                                                                                b
yield s2 and s3,wheres2 ≡ s3.Ifs2  s3, Algorithm 1                            p          q         r
                                                         a                          a       2         2
would select s2;ifs3  s2, it would select s3; if neither, Al-
                                                             a                    a
gorithm 1 would select nothing, thus omitting the a transition p q1/\q2               q1/\q2      r
                                                             a                               b
from s1. Theorem 1 shows that the result is deterministic.

Theorem 1 Algorithm 1 yields a deterministic BA B.    Figure 3: (l) Lack of coherence; (r) failure of coverage.
Proof. Assume B has two transitions for the same state Dashed ellipses represent potential states that are not in S
and action, i.e., si,a,sj  and si,a,sk . Algorithm 1
ensures sj  sk and sk  sj, i.e., sj ≡ sk. Deﬁnition 6 Second, a GCM computation may involve a transition that
ensures sj = sk. Thus, B is deterministic.            doesn’t exist in the BA. To address this, the basic idea is that
                                                      because of the action rule CONSEQUENCE, although a spe-
1 δ = {};                                             ciﬁc GCM computation may not be realized in the BA, a com-
2 foreach si ∈ S,a∈ A do                              putation taking the strongest state at each step would be real-
        = {  ∈   :   a   }
3    Si    sk  S  si → sk ;                          ized. Thus the BA would be complete for practical purposes.
4    if sj =min(Si) then δ := δ ∪si,a,sj             Deﬁnition 9 and Lemma 3 capture this intuition.
                                                                                 =            
    Algorithm 1: Compiling GCM P into a BA B          Deﬁnition 9 A computation τ    s0,a0,s1,... is the se-
                                                      mantic supremum of a computation τ = s0,a0,s1,...  if and
                                                             
Example 5 On Example 4, Algorithm 1 would yield the BA only if τ begins at the same state, involves the same action
                                                      sequence as τ, and for each transition si,ai,si+1  exercised
of Figure 2(r) with states 1 and 2, state 2 in G, and transitions                             
1   2                        2  2                   by τ, τ exercises a transition si,ai,si+1  where si+1 is the
  ,a,  (based on the axiom for a), ,a, (based on apply-                                   
ing CONSEQUENCE  on the axiom for a), 2,b,2  (2,b,1  is strongest consequence of performing a in si.
not included, based on line 4 of the algorithm). Thus, even Lemma 3 Any computation that begins from s0 and is the
though Figure 2(l) and Figure 2(r) are not equivalent, based semantic supremum of some computation in the GCM can
on our knowledge of the meanings, they are practically equiv- be realized by the BA produced by Algorithm 1.
alent.                                                Proof. The proof is simply by transﬁnite induction on
                                                                                              0
  Example 5 is fortunate. The compilation doesn’t always computations: consider preﬁxes of length from to ω.
work. The following develops additional steps to make com- Theorem 4 establishes our main completeness result ﬁ-
pilation work, or to determine that it cannot work. Correct- nessed for coherent GCMs and supremal computations.
ness has two main aspects. Soundness means that the com- Theorem 4 Given a coherent GCM compiled into a BA, for
piled BA won’t realize a computation that the GCM wouldn’t any computation generated by the GCM that begins from s0,
have generated. Completeness means that if the GCM can there exists a semantic supremum computation realized by
generate a computation, the compiled BA can realize it. Be- the BA.
cause the BA’s transitions are chosen from among those in the Proof. By construction of a coherent GCM and Lemma 3.
GCM, soundness is guaranteed. This is Theorem 2.
                                                      4.3  Producing Coherent GCMs
Theorem 2 Let P be compiled into B.Thenany
computation realized by B is generated by P .         Let’s now consider the question of whether and how an ar-
                                                      bitrary GCM P can be mapped into an equivalent coherent
                                                             
4.2  Completeness via Coherence                       GCM  P  . Producing a coherent GCM requires ensuring that
                                                      supremal states exist for each action allowed in each state.
In general, because the BA may not include all the transitions
of the GCM, it would not be complete. First, the BA may
have no transition for a state and action, because none is the 1 U = minimal states from the above partial order of states;
(unique) strongest, as required by Algorithm 1. To address 2 foreach u ∈ U, a ∈ A do
                                                              = {  ∈   :   a  }
this, the basic idea is to restrict GCMs such that if there is a 3 Va v U u → v ;
transition for a state and action, then there is a strongest tran- 4 if |Va|≥2 then
sition for the same state and action: by exploiting the action 5 w = Va;
rule CONJUNCTION. Deﬁnition 8 captures this as coherence. 6    U = U \ Va ∪{w};
However, Figure 3(l) shows a situation where a may occur in
                               a          a           7 foreach u ∈ U, a ∈ A do
p and produce q1 and q2.Thatis,p → q1 and p → q2 both         a                             a
                                                      8    if u   true and ¬(∃s ∈ S : u  s and s true)
hold. In this situation, q1 ∧ q2 ∈ S. That is, coherence is   →                            →
                                                           then announce failure and exit;
violated.                                                
                                                      9 S  = S ∪ U;
Deﬁnition 8 For s ∈ S,a ∈ A, the projection of a on s,
                                   a                                                               
πa,s, is the set of states s in S such that s → s .AGCMis Algorithm 2: Producing a coherent GCM with states S
                                              a
coherent if (∀s ∈ S,a ∈ A : πa,s = ∅⇒(∃n ∈ S : s → n
                                            
and (∀s ∈ πa,s : n  s ))). Here, n is the supremal state for Algorithm 2’s ﬁrst foreach block maintains a set of the
s and a, meaning it is the strongest resulting state. known minimal states in the GCM P  being constructed, and

                                                IJCAI-07
                                                  1523