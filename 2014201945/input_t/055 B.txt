Session No. 15 Heuristic Problem Solving                                                        641 


                                                         1.0 Introduction and Summary 
           BRANCH-AND-BOUND AND BEYOND 
                                                              The branch-and-bound algorithm is a 
                                                         simple technique for the optimisation 
     Patrick A. V. Hall                                  search for the minimum (or maximum) of 
                                                         a function. It is very basic to 
     Department of Mathematics,                          artificial intelligence and operations 
        (Division of Computing Science),                 research, and has been repeatedly 
                                                         rediscovered and used in the solution of 
     City University,                                    hard problems. (1,2,6,9) In this paper 
     London, EC1.                                        I shall give a general statement of the 
                                                         algorithm, and then consider the 
                                                         application to reducing a sparse matrix 
     Abstract                                            to the band matrix of minimal band-width. 
                                                         After this I shall show that the well 
     The branch-and-bound algorithm is stated            known graph searching methods (4,5,9) are 
     in generality, and illustrated by two               somewhat disguised examples of branch-
     applications, unidirectional graph search,          and-bound. 
     and reducing a sparse matrix to its 
     minimal band form. The algorithm is then                 This simple branch-and-bound idea 
     generalised to multiple partitions,                 will then bp extended to a more complex 
     applied to bidirectional graph searching            optimisation search with multiple starting 
     for both heuristic and non-heuristic                points, in which form it will be used to 
     searches, and further extended to graph             solve the bidirectional graph-search 
     searches and problem solving with subgoals.         problem, giving a new unified view of 
                                                         existing solutions, both heuristic and 
                                                         non-heuristic. Finally the application 
                                                         of multiple branch-and-bound is further 
                                                         extended to cover the use of subgoals in 
                                                         graph search and problem solving. 

                                                              Graph searching as a problem area 
                                                         in artificial intelligence is important 
                                                         because many problems can be represented 
                                                         as a graph which requires a path to be 
                                                         found between two given nodes (3,5,9). 
                                                         Any path between the start and termination 
                                                         nodes would constitute a solution, 
                                                         but a path of minimal length (= number of 
                                                         steps) can be thought of as the most 
                                                        'elegant' solution, and is often aimed for. 
                                                         Hence icneral Problem Solving becomes 
                                                         finding the shortest path in a graph, which 
                                                         in turn is, as we shall see, a special 
                                                         application of the branch-and-bound 
                                                         al Torithm. 

                                                              However, not. all problems are most 
                                                         naturally formulated as graph searches; 
                                                         for example the travelling salesman problem 
                                                         is expressible as a shortest path problem, 
                                                         but occurs more naturally as a branch-and-
                                                         bound application (6). Another example is 
                                                         a matching problem in chromosome analysis 
                                                         considered by Montonari (7); the natural 
                                                         way to tackle this problem is directly 
                                                         using branch-and-bound, but the author 
                                                         laboriously converts the problem to a 
                                                         graph search and then applies the algorithm 
                                                         of Hart, Nilson and Raphael (5). 642                                                            Session No. 15 Heuristic Problem Solving 


                                                            The actual lower bounding function g 
                                                       depends upon the particular problem and In 
                                                        that sense is a 'heuristic funcztion'. The 
                                                       more information about the problem that is 
                                                       used, the closer g approaches the 
                                                       greatest lower bound g*, the more efficient 
                                                       is the algorithm as outlined above. One 
                                                       could even contemplate using any estimate of 
                                                       the greatest lower bound, recognising that 
                                                       if the bounding condition is violated, a 
                                                       non-optimal solution may be returned, but 
                                                       the error could be no more than the error 
                                                       in the estimator. 
                                                             In the form given, the algorithm 
                                                       may only find a candidate solution point 
                                                       after considerable searching and branching: 
                                                       in practice this is undesirable since it may 
                                                       be necessary to terminate search early with 
                                                       a suboptimal solution, because of exceeding 
                                                       either storage or time limits. This requires 
                                                       a modification to the basic algorithm to 
                                                       force the search to refine partitions until 
                                                       a possible solution point has been found -
                                                       and then to continue searching until the 
                                                       minimal point is found; one way to do this 
                                                       would be to subtract a depth factor from the 
                                                       bounds to bias the search towards depth. An 
                                                       additional advantage to locating a potential 
                                                       solution point early in the search is that 
                                                       pruning of the search tree is possible, 
                                                       while we acquire the disadvantage of 
                                                        (possibly) more iterations. Note however 
                                                       that we are still guaranteed finding the 
                                                       optimum providing that early termination is 
                                                       not forced upon us. 

                                                        2.1 Application to Band Matrix Reduction 

                                                             A sparse matrix is one in which the Session No. 15 Heuristic Problem Solving                                                       643 


                                                      [(count + 1)/2] where [I] means the intege r 
   majority of the elements are zero: these           part of I. 
   arise in many problems such as engineering 
   structural analysis.(10) Storing sparse                 Figure 1 illustrates the method for a 
   matrices in the usual way is wasteful; one         4 by 4 matrix of bandwidth 2. Figure 1(a) 
   solution is to store only the non-zero             shows the original matrix and Figure 1(b) 
   elements, for example by using hashing             illustrates in tree form the complete search. 
   methods.(6) This leads to special numerical       Each node is labelled with the value of the 
   techniques.(10) A preferred solution would         lower bound function g, and the matrix to data; 
   be to reduce the matrix by row and column         the elements whose positions are fixed appear 
   permutations to a band matrix (i.e. a matrix       in the upper left-hand submatrix marked with 
   in which all non-zero elements lie in some         thick lines. The search for the next node 
   band close to the diagonal), for which only        to develop selects, when more than one node 
   the band elements need be stored: the              has the minimal value, that node nearest the 
   advantage is then that standard and efficient     bottom of the tree. Each level of the tree is 
   numerical techniques are applicable. The          labelled to show what development is being 
   reduction to a band matrix is normally            made, which row or column is being fixed: 
   carried out by ad hoc methods, by skilled         each branch of the tree is labelled to 
   humans prior to computer runs: what is            indicate which row or column in the original 
   desired is a guaranteeable method for             matrix is the one that is being fixed in the 
   performing this reduction. The branch-            position indicate for the whole level. 
   and-bound algorithm proved ideal. 

        For an n by n matrix, there are              FIGURE 1. The application of Branch-and-bound 
   (n!)2 possible configurations, and                to reducing a sparse matrix to its minimal band 
   exhaustive searches are untenable. The            matrix form. 
   technique used was to partition by row or           (a) the original matrix 
   column selection. Assuming for the moment           (b) the search tree: branches are labelled 
   that the lower bound function g is                with the row or column of the original being 
   available (this will be outlined later),          fixed in the position shown at the left; nodes 
   then the first partition of the totality of       are labelled with the bound, and the fixed 
   possible configurations is to consider the        portion in the upper left marked off. 
   n possible selections of particular columns 
   of the original matrix for the first 
   position in the reduced matrix. Among 
   these n subsets, the one with smallest 
   lower bound is selected, and the n possible 
   selections of rows for the first position 
   of the reduced matrix considered. Among 
   the resulting 2n-l subsets that with minimal 
   lower bound is selected for row or column 
   partition as appropriate, and so on, for a 
   minimum of 2n partitions. 

        The lower bound function computes a 
   best possible bandwidth for a partially 
   determined matrix (with the first m columns 
   fixed and the first m or m-1 rows fixed) 
   as the maximum of the following-
   (i) for the fixed portion at top left; 
   count from the diagonal of the fixed 
   portion along the rows and columns to 
   locate the last non-zero.element; within 
   the fixed portion (m by m or m by m-1) the 
   elements are fixed, while beyond the fixed 
   portion it is assumed that the non-zero 
   elements could be positioned immediately 
   following the fixed columns or rows. Repeat 
   this for each row and column within the 
   fixed portion, taking the maximum count 
   found. 
   (ii) for the unfixed portion at bottom 
   right; count the number of elements in each 
   row and column and assume that these could 
   be placed symmetrically about the diagonal -
   hence bound to bandwidth here is maximum of 644                                                             Session No. 15 Heuristic Problem Solving 


        The algorithm as actually implemented          the partition are named by the path that is 
   (in Algol) uses a depth forcing initial             common (thus <sac> is the set of all paths 
   search (as discussed previously) so that            starting at s going through a and then c 
   suboptimal results could be returned on             and finally ending at t). The search 
   exceeding storage bounds. Search length             starts with the partition consisting of 
   has been found to be very dependent upon            the single set <s> of all possible routes 
   the particular matrix, varying from searches        from s to t. This is then partitioned into 
   direct to goal (as in the example) to               two subsets, <sa> all those routes from s 
   searches where only suboptimal (but acceptable)     through a to t and <sb> all those routes 
   solutions could be found.                           from s through b to t. These have bounds 
                                                       1 and 2 respectively. The minimum of these 
                                                       is selected for further refinement, and thus 
                                                       <sa> is refined to <sac> and <sad> with 
                                                       bounds 6 and 7 respectively. And so on until 
   3.0 Graph Searching as Branch-and-bound             stage 8 where the search for partition-
        We shall now examine graph searching           subset of minimum bound g finds <sbct> which 
   and apply the preceding algorithm to its            contains a single point which is therefore 
   solution. We wish to find the shortest              the minimum. Part (c) of Figure 2 shows 
   route between two nodes s and t in a graph,         the search process displayed as a tree with 
   such as that illustrated in Figure 1.               nodes labelled inside by subset and outside 
                                                       by bound. The sequence in which the tree 
        We shall define a weighted directed            nodes are developed (i.e. subsets 
   graph as an ordered set (N,F,w) where N is          partitioned) is in ascending order of bound, 
   the set of nodes of the graph; E is a set           with development from left to right where 
   of ordered pairs of nodes which we call the         nodes have equal bound. 
   edges of the graph, saying that an edge 
                                                            This search procedure is almost the 
   (a,b) goes from node a to node b; and w is 
                                                       Dijkstra (4) graph search method, excepting 
   the weight or length function, mapping 
                                                       that some redundant routes are eliminated 
   E to the non-negative real numbers, saying 
                                                       in the Dijkstra method - for example, having 
   that w(a,b) is the length of edge (a,b). 
                                                       two sets of routes with initial parts ending 
                                                       in c (i.e. <sac> and <sbc>) is wasteful 
                                                       and only that of small bound <sbc> need be 
                                                       retained after stage 4: effectively one is 
                                                       coarsening the partition by forming the 
                                                       union of the two sets, and computing the union 
                                                       bound from g(A U B) = min(g(A),g(B)). Note 
                                                       that this pruning is also retroactive in the 
                                                       sense that some unions would occur between a 
                                                       new subset and one that was previously 
                                                       partitioned (for example between 
                                                       <sacd> and <shcd>), but in this case cannot 
        The set X to be searched is the set of         change the earlier bound (of <sbca>) since 
   all possible loop-free routes from s to t,          g has the monotonic property g(A) > g(B) 
   and the subsets of routes which will be used        if A C B. 
   in partitions of X will be those which start 
   at s and have an initial part in common. 
   The function g will give the length of the 
  path in common - all routes in the set must               The branch-and-bound algorithm can 
   obviously be at least that long.                    further be extended to heuristic graph search 
   Partitioning will be by extending the initial       in a way comparable to the extension of the 
   path by one edge for all possible edges             Dijkstra Algorithm.(6,9) Suppose that we 
   eliminating those which introduce loops:            possess a heuristic function h(x,y) which 
   each of these extended initial paths defines        estimates the distance through the graph 
   a subset of the refined partition. A                from node x to node y. If h(x,y) < d(x,y) 
   subset of the partition comprises a single         where d(x,y) is the 'true' minimal distance 
   point when the defining initial path extends        through the graph from x to y, then using 
   from s all the way to t.                            the bounding function 

        With these definitions, the graph                   •g(<s...x>) = w(<s...x>) + h(x,y) 
   search becomes a branch-and-bound problem, 
   and the search of a simple graph is                 (formed from the length of the part in common 
   illustrated in Figure 2. In part (a)               plus the estimate of the distance left to go) 
   the graph is shown, a directed graph with          gives a lower bound for the set of all paths 
   edge weights as labelled. The search                initially along <s...x> and thence to t. 
   process is shown in part (b)t subsets of Session No. 15 Heuristic Problem Solving                                                        645 


                                                      and not the new leaf, unless the monotonacity 
                                                      property holds for g. This is the 
                                                      "consistency condition" of Hart et al,(6) 
                                                      and allows a 'tidy' algorithm, but in no way 
                                                      affects the correctness of the solution 
  Using this g in the branch-and-bound                obtained. 
  algorithm applied to graph search leads to a 
  guided search, guaranteed to return the                   A note on difference of emphasis 
  minimum. Again irrelevant repetitions               between the approach here, and the more 
  can be eliminated - if two partial paths            standard approach (6,9) to graph search, must 
  have a common end point, one can coarsen            be made to avoid confusion. We have seen 
  the partition as in the non-heuristic case,         above that in partitions, sets defined by 
  but there is a note of caution: retroactive         partial paths with common end points should 
  coarsening could prune a branch of the tree 