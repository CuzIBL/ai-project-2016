                Applying Local Search to Disjunctive Temporal Problems

                              Michael D. Mofﬁtt and Martha E. Pollack
                      Department of Electrical Engineering and Computer Science
                                         University of Michigan
                                      Ann Arbor, MI 48109, USA
                                 {mmofﬁtt, pollackm}@eecs.umich.edu

                    Abstract                            In this paper, we show how local search can be success-
                                                      fully applied to overconstrained instances of the Disjunctive
    We present a method for applying local search to  Temporal Problem (DTP) [Stergiou and Koubarakis, 1998],a
    overconstrained instances of the Disjunctive Tem- particularly expressive form of temporal constraint satisfac-
    poral Problem (DTP). Our objective is to gener-   tion problem. While local search has been commonly applied
    ate high quality solutions (i.e., solutions that vi- to ﬁnite-domain CSPs, its application to DTPs is of particular
    olate few constraints) in as little time as possi- interest, as the domains of the temporal variables are inﬁnite,
    ble. The technique presented here differs markedly ranging over the entire set of either integers or real numbers.
    from previous work on DTPs, as it operates within Previous work on DTP-solving has focused on a reformula-
    the total assignment space of the underlying CSP  tion of the problem, in which a meta-CSP is constructed and
    rather than the partial assignment space of the re- searched. In contrast, we apply local search directly to the
    lated meta-CSP. We provide experimental results   original CSP, i.e., the DTP itself. We discuss issues such as
    demonstrating that the use of local search leads to solution initialization, neighbor generation, and cost compu-
    substantially improved performance over system-   tation, and provide experimental results demonstrating that
    atic methods.                                     the use of local search in solving overconstrained DTPs can
                                                      lead to substantially improved performance as compared to
1  Introduction                                       systematic methods.
Previous work on temporal reasoning has focused primar- It should be noted that ours is not the ﬁrst attempt to ap-
ily on exact and complete methods for efﬁciently solving ply local search to temporal reasoning. This work is closely
                                                               [                  ]
temporal problems (e.g., [Stergiou and Koubarakis, 1998; related to Beaumont et al., 2004 ; however, that line of re-
Tsamardinos and Pollack, 2003; Armando et al., 2004]). The search deals with a qualitative interval algebra representation,
purpose of these algorithms is to ﬁnd a solution that sat- which is strictly less expressive than that allowed by DTPs.
isﬁes a set of constraints, or else prove, by means of ex- Nonetheless, their endpoint-ordering technique bears similar-
haustive search, that no solution exists. Recently, there has ity to our approach, in that it also abandons the meta-CSP
also been work on temporal formalisms where the goal is in- for the original CSP search space. Our work is also related
                                                        [           ]
stead to optimize an objective function; for instance, to max- to Walser, 1998 , where local search is applied to overcon-
imize a user’s preference when the problem permits many strained integer programs without disjunctions.
solutions [Khatib et al., 2003; Peintner and Pollack, 2004;
Morris et al., 2004], or to minimize the number of violated 2 Disjunctive Temporal Problems
constraints when no complete solution exists [Mofﬁtt and A Disjunctive Temporal Problem (DTP) is a constraint satis-
Pollack, 2005]. Although these algorithms are guaranteed to faction problem deﬁned by a pair X, C, where each element
ﬁnd optimal solutions, they are computationally expensive, Xi ∈ X designates a time point, and C is a set of constraints
and hence may not be applicable to large problems. Given of the following form:
this, it may be advantageous to instead search for approxi-            c  ∨ c  ∨ ... ∨ c
mate solutions when strict optimality is not required.                  i1   i2       in
  Local search algorithms are known to be among the most where in turn, each cij is of the form x − y ≤ b; x, y ∈ X
effective methods for solving computationally intractable and b ∈. (In practice, b is often restricted to the integers.)
problems such as propositional satisﬁability, scheduling, and DTPs are thus a generalization of Simple Temporal Problems
constraint satisfaction [Hoos and Stutzle, 2004]. While they (STPs), in which each constraint is limited to a single in-
do not guarantee optimality, they are often able to produce equality [Dechter et al., 1991]. A solution to a DTP is an
high-quality solutions within a short amount of time. Despite assignment of values to time points such that all constraints
the signiﬁcant attention that local search has received in com- are satisﬁed.
binatorial optimization, its application to problems of quanti- Several algorithms have been developed for solving DTPs
tative temporal reasoning has as yet been largely overlooked. [Stergiou and Koubarakis, 1998; Armando et al., 1999;Oddi and Cesta, 2000; Tsamardinos and Pollack, 2003]. Typ- to the propositional variables, and then repeatedly chooses a
ically, these algorithms transform the problem into a meta- variable to ﬂip that results in the maximal decrease in vio-
CSP, in which the original DTP is viewed as a collection of lated clauses, breaking ties randomly. To avoid getting stuck
alternative STPs. Using this approach, the algorithm selects in local minima, a technique called random restarts is of-
a single disjunct from each constraint of a given DTP. The re- ten used, where the algorithm begins anew with another ran-
sulting set forms an STP, called a component STP, which can dom assignment. Several variants exist for GSAT; of these,
then be checked for consistency in polynomial time using a GSAT/Tabu [Mazure et al., 1997] is among those with best
shortest-path algorithm. Clearly, a DTP D is consistent if and performance. It maintains a tabu list of recently ﬂipped vari-
only if it contains at least one consistent component STP. Fur- ables, which are then temporarily prohibited from being se-
thermore, any solution to a consistent component STP of D lected for another ﬂip.
is also a solution to D itself. Consequently, it is standard in The basic method used in GSAT and GSAT/Tabu can be
the DTP literature to consider any consistent component STP applied to other problems besides SAT. Indeed, the structure
to be a solution of the DTP of which it belongs.      of a DTP closely resembles that of a SAT problem, and it is
  A number of pruning techniques can be used to focus for this reason that a SAT solving approach has been applied
the search for a consistent component STP of a DTP, in- to the problem of ﬁnding complete solutions to DTPs (as in
cluding conﬂict-directed backjumping, removal of subsumed TSAT [Armando et al., 1999] and TSAT++ [Armando et al.,
variables, and semantic branching. The DTP solver Epilitis 2004]).
[Tsamardinos and Pollack, 2003] integrated all these tech-
niques, in addition to no-good recording. At the time it 3.1 Application to DTPs
was developed, Epilitis was the fastest existing DTP solver, In applying local search to possibly overconstrained DTPs,
though it was recently surpassed by TSAT++ [Armando et we again need to decide whether to work in the meta-CSP or
al., 2004].                                           in the original CSP (the DTP). To illustrate these candidates,
  DTP solvers such as Epilitis perform total constraint sat- consider the following very small problem:
isfaction — that is, their objective is to ﬁnd a solution that
                                                          C1 : {c11 : a − b ≤ 10}
satisﬁes all the constraints of a DTP. In the event that a DTP
                                                          C2 : {c21 : b − a ≤−15}∨{c22 : c − a ≤−25}
is inconsistent, these solvers are capable of detecting such
                                                          C3 : {c31 : b − c ≤ 10}
infeasibility, but are incapable of providing partial solutions
                                                          C4 : {c41 : a − c ≤ 20}
that come close to satisfying the problem. In response, the
DTP solver Maxilitis [Mofﬁtt and Pollack, 2005] was de- Clearly there is no complete solution to this problem, since
signed to ﬁnd solutions that maximize the number of satisﬁed c21 conﬂicts with c11, and c22 conﬂicts with the constraint
constraints. Partial constraint satisfaction has the disadvan- induced by the transitive composition of c11 and c31.Asa
tage of being expensive, as the pruning techniques typically result, our objective will be to ﬁnd a solution that maximizes
used in DTP solving become weaker when relaxations are the number of constraints satisﬁed in the DTP. We deﬁne the
allowed. If the overconstrained DTP is very large, the sys- cost of a solution to be the number of constraint violations it
tematic search that Maxilitis performs becomes intractable, induces; thus, low-cost solutions are better.1
and one must instead settle for an approximate solution. For- Partial Assignment Space of the Meta-CSP
tunately, Maxilitis is an anytime algorithm, and one can in-
terrupt it at any point to extract a (possibly suboptimal) par- One way to view a solution to overconstrained DTPs such as
                                                                           partial
tial assignment. It is not, however, obvious that a systematic the example above is as a assignment to the meta-CSP,
search is the fastest way to ﬁnd an approximate solution. in which some of the meta-level variables are left unassigned.
                                                      For example, consider the assignment (C1,C2,C3,C4) ←
                                                      (c11,c22,,), in which the constraints C3 and C4 are not
3  Local Search                                       given an assignment (indicated by ). Here the (partial) com-
                                                      ponent STP that is selected consists of c11 and c22, and has
When exact, systematic methods for solving hard combina-
                                                      a cost of 2. This particular partial assignment cannot be ex-
torial problems are too expensive, local search offers an al-
                                                      tended to any solution of lower cost, since inclusion of either
ternative approach for quickly generating approximate solu-
                                                      of the disjuncts c31 or c41 would result in an inconsistency.
tions. Applications of local search are numerous, and include
                                                      However, this does not mean that a solution of higher quality
planning [Ambite and Knoblock, 1997], scheduling [Storer et
                                                      does not exist. Indeed, the partial assignment (c11,,c31,c41)
al., 1992], and constraint satisfaction [Minton et al., 1992].
                                                      with cost 1 is both consistent and optimal.
  The Satisﬁability Problem (SAT) is a classic domain for
                                                        While search in the partial assignment space of the meta-
application of local search. The objective of SAT is to ﬁnd
                                                      CSP is common to most systematic methods for solving
an assignment to a set of binary variables that satisﬁes a
                                                      DTPs, it is less attractive for the application of local search.
Boolean formula F , typically given in Conjunctive Normal
                                                      First, systematic methods work within a backtracking tree,
Form (CNF). A common variation on SAT is MAX-SAT,
                                                      where disjuncts are removed in the order in which they were
where the objective is to maximize the number of satisﬁed
        F
clauses in . A number of local search algorithms have been 1Other cost functions – for instance, the maximum deviation
constructed for both SAT and MAX-SAT. One of the most from the bound of any constraint – are possible. However, there cur-
successful variants is GSAT [Selman et al., 1992]. In this al- rently exist no systematic methods to compare against that minimize
gorithm, one begins with a random assignment of truth values such alternative cost functions.added.2 One technique that is commonly used in DTP solv- 4.1 Generating the Initial Solution
ing, incremental full-path consistency [Mohr and Henderson, Typically in algorithms such as GSAT, the initial solution
1986], exploits this property by maintaining a stack of the is chosen by selecting random assignments for each of the
temporal network updates made during search, using it to Boolean variables. A similar initialization can be done with
cheaply repair path dependencies when backtracking. Lo- DTPs: each time point can be randomly assigned a value
cal search requires the ability to modify arbitrary values in within some interval [L, U]. If one employs random restarts,
the partial assignment, not necessarily respecting the order in this initialization can be done several times to ensure adequate
which they were originally assigned; thus it cannot exploit exploration of the search space.
the incremental approach. Second, several of the powerful A potentially better alternative is to make a greedy assign-
pruning techniques used by DTP solvers such as Epilitis and ment to the time points, so that the algorithm begins with
Maxilitis have no meaning outside the context of a systematic a reasonable solution. We adopt this approach in Localitis.
search tree. For example, semantic branching is able to ac- To generate the initial solution, we make use of the Maxilitis
quire additional network constraints by exhaustively explor- solver. Recall that Maxilitis searches in the meta-CSP space.
ing particular assignments of disjuncts to constraints. In local We invoke it and let it run until it generates its ﬁrst solution, in
search, no such exhaustive search is performed, and conse- which every constraint is assigned either a disjunct or . Since
quently it is hard to imagine how to adapt this mechanism. this solution is not necessarily optimal, Maxilitis would nor-
Finally, in local search, the number of neighbors for a par- mally continue, but we instead terminate it, and project an as-
tial assignment will typically be much larger than the number signment to time points from the component STP it has com-
of successors in systematic search, thus making evaluation of puted, making random assignments to all time points outside
alternatives prohibitively expensive.                 the scope of the component STP. Because of the variable and
Total Assignment Space of the Original CSP            value ordering heuristics used by Maxilitis, the ﬁrst solution
An alternative approach is to perform search in the space it encounters is likely to be better than what a purely random
of total assignments to the time points in the original CSP. assignment would provide. One could repeat this process for
For the example DTP above, one possible assignment is random restarts, placing bias on the selection of assignments
(a, b, c) ← (30, 25, 0). Since this solution violates con- so that the set of disjuncts chosen differs between runs.
      C      C
straints 3 and 4 it has a cost of 2. A better solution would 4.2 The Neighborhood
be (20, 10, 0), which violates only constraint C2.
  A key issue for this search space is how to deﬁne the neigh- As described earlier, the most obvious way to deﬁne the
bors of an assignment. One approach is to include all solu- neighbor(s) of an assignment is as the set of assignments
                                                      that differ in the value of only one time point (for example,
tions whose variable assignments differ in exactly one posi- (a, b, c) ← (30, 25, 0) (a, b, c) ← (30, 15, 0)
tion; for example, (a, b, c) ← (30, 15, 0) would be a neighbor            and                    ). Unfor-
of (a, b, c) ← (30, 25, 0), since the two differ only on the tunately, this deﬁnition results in each assignment having in-
assignment to b. However, because the value of each vari- ﬁnitely many neighbors. The key to reducing the size of the
                                                      search space is to note that if we hold ﬁxed the values of all
able may take any real (or any integer), the cardinality of the          b
set of possible neighbors is uncountably (or countably) inﬁ- the variables but one ( in the current example), then only a
nite. It is for this reason that most of the prior work on DTPs small set of new values for the selected variable are signiﬁ-
has avoided search in this space: the inﬁnite cardinality of cant. Speciﬁcally, we only need to consider those values for
the variables’ domains precludes the use of methods for ex- which the slack of a disjunct belonging to some constraint
haustive search. We address this concern in the next section, becomes zero — that is, when an inequality becomes a strict
where we describe our local search algorithm in detail. equality. This is somewhat similar to a pivot step in the sim-
                                                      plex method for linear programming, which maintains a ba-
                                                      sic feasible solution that corresponds to an “active system” of
4  Localitis                                          constraints in the LP. For instance, in our running example,
In this section, we present Localitis, our algorithm for us- suppose we are given the assignment of (30, 25, 0). Then the
ing local search to perform partial constraint satisfaction in signiﬁcant values for b are 20, 15, and 10, as they would make
a DTP. Its basic framework derives from the GSAT/Tabu al- the disjuncts c11, c21, and c31 active, respectively. Some of
gorithm that is commonly used for SAT and MAX-SAT in- these values may satisfy several new disjuncts at once (for in-
stances. It also bears considerable resemblance to Walk- stance, if b is assigned the value 10, it satisﬁes disjuncts c21
SAT(OIP), used in [Walser, 1998] to solve overconstrained and c31 simultaneously). No other values for b are capable of
integer programs without disjunctions3.               satisfying a set of constraints that one of the these signiﬁcant

  2                                                   values cannot.
   With chronological backtracking, the last disjunct added is We can impose yet another restriction on the set of neigh-
the ﬁrst one removed; with more sophisticated techniques such as bors; namely, that they include only those new, signiﬁcant
conﬂict-directed backjumping, additional disjuncts may be removed
                                                      values that change the resulting set of satisﬁed constraints.
at the same time, but the removal always follows the structure of the                      b
backtracking tree.                                    For instance, while the assignment of 20 to is signiﬁcant in
                                                                            c
  3While any disjunctive program can be cast as an integer pro- that it makes the slack for 11 zero, it does not change the set
gram, the conversion process requires the creation of additional vari- of satisﬁed constraints. As a result, this new assignment is
ables and constraints. Our method instead operates directly on the not particularly interesting, and need not be considered in the
constraints in their disjunctive form.                set of neighbors of this assignment.4.3  Neighbor Selection and Tabu Moves                Localitis(DTP D)
Since our objective is to satisfy the maximum number of con- 1. Best-Assign ← Assign ← Maxilitis-First-Path(D)
straints, selection of which neighbor to explore is a fairly 2. For it = 1tomax-steps
straightforward process: choose the candidate that satisﬁes 3. min cost ←∞, moves ←
the maximum number of constraints possible. This is identi- 4. For each disjunct d: x − y ≤ b
cal to GSAT, where the variable chosen to ﬂip is the one that 5. If x not tabu
will minimize the number of unsatisﬁed clauses. In the case 6. move ← (x ← y + b)
that several assignments would result in the same minimal 7.  If Sat(Assign) = Sat(Assign/move)
number of violations, one is selected at random.      8.        If cost(Assign/move) = min cost
  When a local search process is required to continually 9.       moves ← moves ∪{move}
make greedy moves, it can easily get stuck in local minima. 10. EndIf
To avoid this, we adopt a common variation on the technique 11. If cost(Assign/move) < min cost
of tabu search [Glover and Laguna, 1997], and forbid local 12.    moves ←{move}
search to change the values of variables that were recently 13.   min cost ← cost(Assign/move)
modiﬁed. A parameter tt, called the tabu tenure, determines 14. EndIf
the duration (in search steps) for which this restriction ap- 15. EndIf
plies. When tabus are applied to SAT, no variable ﬂipped at 16. EndIf
iteration number i is allowed to ﬂip again until tt steps have 17. Repeat lines 5 – 16 for y (i.e., y ← x − b)
passed. We introduce tabu moves into Localitis in a similar 18. EndFor
way. If the value of a variable x is changed at step i, its value 19. new-move ← Random-Member(moves)
is then ﬁxed until tt steps have passed. To efﬁciently deter- 20. Assign ← Assign/new-move
mine the tabu status of each variable x, we maintain an array 21. If cost(Assign) < cost(Best-Assign)
                                                                      ←
it, where itx stores the search step number when variable x 22. Best-Assign Assign
was last changed. A variable is tabu if and only if i−itx <tt. 23. EndIf
                                                     24.  Update tabu count for the time point in new-move
4.4  Efﬁcient Cost Computation                       25. EndFor
The simplest way to compute the cost of a neighbor assign- 26. return Best-Assign
ment is to temporarily enforce the assignment being consid-
ered, and subsequently test all constraints for satisﬁability, Figure 1: Localitis, a local search algorithm for DTPs
counting the number that are not satisﬁed. However, this
straightforward implementation has been shown to be rather
inefﬁcient, since many of the constraints will not be affected the way in which the initial assignment is made, 2) to analyze
by the local modiﬁcation [Selman et al., 1992].       the effect of various neighborhood functions and tabu tenures,
  A common technique is to instead compute the relative and 3) to compare the anytime quality of this solver against its
change in cost by testing only those clauses that contain the cousin Maxilitis, which performs an exhaustive search of the
variable in question. This can be facilitated by a preprocess- DTP in the meta-CSP space. No random restarts were used
ing step which creates a list for each variable, containing in- for these tests. To benchmark our algorithm, we used DTPs
dices for those constraints that it participates in.  created by a random generator used in testing previous DTP
                                                      solvers [Stergiou and Koubarakis, 1998]. The test case gen-
4.5  The Algorithm                                    erator takes as arguments the parameters k, N, m, L, where
Figure 1 provides the pseudocode for Localitis. The function k is the number of disjuncts per constraint, N is the number
Maxilitis-First-Path() is used to generate the initial assign- of time points, m is the number of constraints, and L is the
ment (line 1). The algorithm then performs local search, gen- constraint width, i.e., a positive integer such that for each dis-
erating the neighbors of the current assignment by looking at junct x − y ≤ b, b ∈ [−L, L] with uniform probability. In
the non-tabu variables in each disjunct of the DTP (lines 4-5), our experiments, we set k =2, N =25, m = 175, and
and considering “moves”, i.e., assignments to signiﬁcant val- L = 100. A derived parameter R (the ratio of constraints
ues (line 6) that change the set of satisﬁed constraints (line 7). over variables, m/N) expressing constraint density was thus
(The notation X/Y, where Y is an assignment Z ← z, denotes 7. For this set of parameters, 50 random problems were gen-
the substitution of Y for the original assignment to Z in X. erated. The domains of the variables are integers instead of
The function Sat() returns the set of constraints in the DTP reals, which again is standard in DTP literature. Our imple-
that are satisﬁed by its argument.) The set moves stores the mentation of Localitis was developed in Java, and our exper-
set of minimal-cost neighbors (lines 8-13), from which one iments were conducted on a 3 GHz Intel Pentium 4 machine
is eventually selected at random (lines 19-20). After storing running Windows XP and having 1 GB of memory.
the value of the best solution seen to date (lines 21-22) and In our ﬁrst experiment, we tested 5 different values for the
updating tabu tenures (line 24), the process iterates. tabu tenure to measure its effect on solution quality as a func-
                                                      tion of time. In Figure 2, we plot a curve for each tabu tenure
5  Experimental Results                               in the set {0, 1, 2, 3, 4}. The number of seconds elapsed is
We implemented Localitis and conducted a set of experiments shown on the x-axis, and the number of constraint violations
whose primary goals were 1) to determine the inﬂuence of in the solution (averaged over the 50 test cases) is shown on      12                                                     12
                                  tt = 00                                       Maxilitis
      11                          tt = 01                    11                 Localitis (Any 0−slack move)
                                  tt = 02                                       Localitis (Random Initialization)
      10                          tt = 03                    10                 Localitis (Normal)
                                  tt = 04                                       opt. solution cost
       9                          opt. solution cost         9
       8                                                     8

       7                                                     7

       6                                                     6

       5                                                     5

       4                                                     4

       3                                                     3

      Average  # of Constraint Violations in Solution 2     Average  # of Constraint Violations in Solution 2
        0      1      2       3      4       5                0      1       2      3       4      5
                        Seconds                                               Seconds

    Figure 2: Anytime curves for various tabu tenures Figure 3: Anytime curves for Maxilitis & Localitis variations

the y-axis. We also show the optimal solution cost, which ex- ated an average solution cost of 5.3. Only 1.28 seconds were
presses the average number of violations in the optimal solu- required for ‘Localitis (Normal)’ to obtain this same average.
tion (i.e., what Maxilitis reported when run until completion). As a result, it seems that one can expect signiﬁcantly better
Convergence is slowest for when the tabu tenure is 0 (this ef- results when the neighborhood is restricted to only those can-
fectively corresponds to the absence of tabu search), and is didates which modify the partial assignment of the meta-CSP.
also somewhat slow for when the tabu tenure is 1. For values Finally, we compare the anytime quality of our Localitis
2, 3, and 4, convergence is almost identical. Larger values solver to that of the systematic solver Maxilitis, which is (at
(not shown) displayed no improvement over these curves, and present) the only other existing method for performing par-
so a tabu tenure of 2 was used for all subsequent tests. tial constraint satisfaction of DTPs. The results are again
  In our second experiment, we studied two different strate- shown in Figure 3. The curves of interest are labeled ‘Locali-
gies for generating the initial set of temporal values: one us- tis (Normal)’ and ‘Maxilitis.’ By inspection, it seems that de-
ing random assignments, uniformly chosen from the range spite its numerous pruning techniques and sophisticated con-
[−L, L], and the other using Maxilitis to greedily generate straint propagation methods, Maxilitis is far slower at pro-
an initial solution, as described previously. The results are ducing high quality solutions. For instance, at the end of the
shown in Figure 3 (among other results that will be addressed 5 seconds shown, Maxilitis has generated an average solution
momentarily). Once again, the x- and y-axes represent the cost of about 7.12. For Localitis to produce the same average
seconds elapsed and the solution cost, respectively. The curve cost requires only 0.29 seconds. To reach the average cost
labeled ‘Localitis (Normal)’ uses the greedy selection, and of 4 that Localitis achieves after 5 seconds requires 104 sec-
the curve labeled ‘Localitis (Random Initialization)’ does not. onds of Maxilitis runtime. Based on these observations, the
The former begins with an average cost of 11.64 violated con- speedup achieved appears to be roughly 17 to 20 times faster.
straints, where the latter begins with a drastically higher av-
erage of 43.60 not shown on the graph. The randomly initial- 6 Discussion and Future Work
ized search is able to make up the difference fairly quickly,
although it continues to lag for the duration of the search. The In this paper, we have presented a method for applying local
shape of the curves are roughly identical, despite the horizon- search to overconstrained instances of the Disjunctive Tem-
tal displacement. Thus, it appears that the greedy initializa- poral Problem. In contrast to previous algorithms for solv-
tion does indeed improve the starting solution, although the ing DTPs, our technique abandons the meta-CSP and instead
effect on the convergence rate is negligible.         explores the total assignment space of the underlying CSP.
  In our third experiment, we tested two different neighbor- Our results show that the computation time required to gener-
hood criteria: the ﬁrst includes all assignments of signiﬁcant ate high-quality solutions is signiﬁcantly reduced in compar-
values (ones that force the slack of some disjunct to be zero), ison to traditional branch-and-bound algorithms for perform-
while the second also requires that there be some change in ing partial constraint satisfaction.
the set of satisﬁed constraints in the DTP. The results are Given the freedom allowed by this alternative search space,
shown in Figure 3. The curve labeled ‘Localitis (Normal)’ one particularly interesting avenue of research would be to
uses the more restricted deﬁnition, and the curve labeled ‘Lo- extend this approach toward more expressive cost functions.
calitis (Any 0-Slack move)’ does not. While the two begin at Whereas this paper concentrates on minimizing the number
the same initial point (as they should, since both use greedy of violated constraints, one could instead capture the amount
initialization), the ‘Localitis (Normal)’ curve is able to gen- by which the constraints are violated. This would give higher
erate solutions of higher quality much earlier. For instance, value to those solutions whose assignments come close to
after 5 seconds, ‘Localitis (Any 0-Slack move)’ has gener- falling within the prescribed bounds.