                           Observation Reduction for Strong Plans

                     Wei Huang1, Zhonghua Wen1,       2, Yunfei Jiang1, Lihua Wu1
             1. Software Research Institute, School of Information Science and Technology,
                               Sun Yat-sen University, Guangzhou, China
              2. College of Information Engineering, Xiangtan University, Xiangtan, China
                                  Email: huangbodao@yahoo.com.cn

                    Abstract                          are optional and many of them are useless in the executions
                                                      of the plans; on the other side, information acquisition may
    Strong planning under full or partial observability require some kind of cost (e.g. time, money, and power etc.).
    has been addressed in the literature. But this re- So it is signiﬁcant to ﬁnd a minimal set of observation vari-
    search line is carried out under the hypothesis that ables that are necessary for the execution of a plan, and to
    the set of observation variables is ﬁxed and compul- best of our knowledge, it is still an open problem.
    sory. In most real world domains, however, obser-   In this paper we present a ﬁrst attempt to solve the problem.
    vation variables are optional and many of them are Under the hypothesis that any two distinct states of the do-
    useless in the execution of a plan; on the other side, main can be distinguished by an observation variable at least,
    information acquisition may require some kind of  we deﬁne an algorithm that ﬁnds an approximate minimal set
    cost. So it is signiﬁcant to ﬁnd a minimal set of
                                                      (written as Vobs) of observation variables that are necessary
    observation variables which are necessary for the for the execution of a strong plan under full observability (i.e.
    execution of a plan, and to best of our knowledge, a state-action table), and transforms the plan into a strong plan
    it is still an open problem. In this paper we present under partial observability (i.e. a conditional plan branching
    a ﬁrst attempt to solve the problem, namely, we de-
                                                      on the observations built on Vobs). This algorithm ﬁrst ex-
    ﬁne an algorithm that ﬁnds an approximate minimal ploits the belief state [Bonet and Geffner, 2000] (i.e. the set
    set of observation variables which are necessary for
                                                      of possible current states) at every step to compute Vobs; then,
    the execution of a strong plan under full observabil- it transforms the given state–action table into a conditional
    ity (i.e. a state–action table); and transforms the
                                                      plan branching on the observations built on Vobs. The algo-
    plan into a strong plan under partial observability rithm is based on the frameworks for strong planning under
    (i.e. a conditional plan branching on the observa- full observability proposed in [Cimatti et al., 2003] and par-
    tions built on these observation variables).      tial observability proposed in [Bertoli et al., 2006].
                                                        The paper is organized as follows. We ﬁrst recap the frame-
1  Introduction                                       works proposed in [Cimatti et al., 2003] and [Bertoli et al.,
                                                          ]
In recent years, increasing interest has been devoted to plan- 2006 (Section 2); then, we introduce the key notions of the
ning in non–deterministic domains. Strong planning (i.e. algorithm and describe the algorithm in detail (Section 3); ﬁ-
ﬁnding automatically a plan which is guaranteed to achieve nally, Section 4 draws some conclusions and discusses future
the goal regardless of nondeterminism) is an important prob- research directions.
lem in this research ﬁeld. Under full observability or partial
observability, this problem has been addressed in the litera- 2 Domains, Observations, Plans, and
ture: in the frame for full observability proposed in [Cimatti Problems
et al., 1998b; 2003], a plan is a state-action table; in the frame
for partial observability proposed in [Bertoli et al., 2001; In this section, we brieﬂy review some deﬁnitions of strong
2006], a plan is a conditional plan branching on the values planning in non-deterministic domains under full observabil-
of observation variables.                             ity and partial observability that are relevant to our work. Fur-
  The cases of full observability, see e.g., [Cimatti et al., ther details and examples of these deﬁnitions can be found in
                                                      [                                 ]
1998b; 2003], where the whole status of the domain is ob- Cimatti et al., 2003; Bertoli et al., 2006 .
served at every step, and the cases of partial observability, see A planning domain is a model of a generic system with its
e.g., [Boutilier, 2002; Eiter et al., 2003; Herzig et al., 2003; own dynamics.
Bertoli et al., 2001; 2006], where the plan executor cannot Deﬁnition 1 A planning domain is a tuple Σ=S, A, R,
access the whole status of the domain, are both under the where S is a ﬁnite set of states, A is a ﬁnite set of actions, and
assumption that the set of observation variables is ﬁxed and R : S×A→2S is the transition function. The transition
compulsory. In real world domains (e.g., many robotics, con- function associates to each state s ∈Sand to each action
trol, and scheduling domains), however, observation variables a ∈Athe set R(s, a) ⊆Sof next states.

                                                IJCAI-07
                                                  1930  The set of actions that are applicable in state s is ACT(s)= +,-
                                                           4
{a|∃s ∈R(s, a)}.
  In practice, a domain may have many observation vari-   5
ables, whose value can be observed at run–time.          +    6+     6,     6-       6+             6,
Deﬁnition 2 Let Σ=S, A, R be a planning domain. Let V
be a ﬁnite set of observation variables.Anobservation func-
tion over S and V is a function X : S×V→{, ⊥}.          ,    6.     6/     60       6.            6/
  From Deﬁnition 2, for each state, there is a corresponding
complete set of assignments to observation variables.
  Plans can control the evolutions of the domain by trigger- - 61    62     63       61            62
ing actions. A plan under full observability is a set of state–
action pairs.
Deﬁnition 3 A plan πF for Σ is a set of pairs s, a (i.e. a Figure 1: A simple domain and the execution structure in-
                       s ∈S  a ∈     (s)
state–action table), where: ,    ACT   , and there is duced by πF from I
at most one action a such that s, a∈πF for any state s.
  The execution of a state–action table πF in Σ can be rep-
resented as execution structure, i.e. a directed graph in which In the following example, we illustrate the deﬁnitions given
the nodes are all of the states of the domain that can be in this section.
reached by executing actions in the state–action table, and Example 1 A simple robot navigation domain Σ is
the arcs represent possible state transitions caused by actions
  π                                                   shown on the left of Figure 1.  The robot can be in
in F .                                                nine positions of a room, corresponding to the states
Deﬁnition 4 Let πF be a state–action table for Σ.Theex- of the domain: S  =   {s0,...,s8}.Itcanmove
ecution structure induced by πF from the set of initial states in the four directions, corresponding to actions A =
I⊆Sis a tuple K = Q, T,whereQ⊆Sand     T⊆S×S        {GoNorth, GoSouth, GoEast,GoWest}. Anactionisap-
are the minimal sets satisfying the following rules:  plicable only if there is no wall in the direction of mo-
                                                               R(s0, GoSouth)=∅
 1. if s ∈I,thens ∈Q, and                             tion, e.g.                   . All the actions are de-
                                                      terministic (e.g., R(s7, GoWest)={s6}), except for ac-
 2. if s ∈Qand there exists a state–action pair s, a∈πF GoEast           s0     s3
                                                   tion        when on     (or   ), where the robot may
    such that s ∈R(s, a),thens ∈Qand T (s, s ).       slip and end up either in s1 or s4 (or in s1, s4,ors7),
A state s ∈Qis a terminal state of K if there is no s ∈Q i.e. R(s0, GoEast)={s1,s4} and R(s3, GoEast)=
                                                     {s1,s4,s7}        I   =   {s0,s3}      G  =   {s6}
such that T (s, s ).Apath of K from s0 ∈Iis a possi-            .Let                    and             .
                                                           π   =  {s0, GoEast, s1, GoSouth, s3, GoEast,
bly inﬁnite sequence s0,s1,... of states in Q such that, for Then F
                                                      s4, GoSouth, s7, GoWest}                  P  =
every state si in the sequence, either si is the last state of                    is a strong plan to
                                                      Σ, I, G                      K
the sequence (in which case si is a terminal state of K)or    , and its execution structure is shown on the right
T (si,si+1) holds.                                    of Figure 1.
                                                        Suppose that the sensors of the robot can detect walls in
  A planning problem for a given domain is described by a
                                                      the current position. This can be formalized with four obser-
set of possible initial states, and a set of goal states.
                                                      vation variables, i.e. WallN, WallS, WallW and WallE.
Deﬁnition 5 Let Σ=S,  A, R be a planning domain. A  In addition, there are six responders (i.e. X0, X1, X2, Y0,
planning problem for Σ is a triple P = Σ, I, G,whereI⊆ Y1, and Y2) located at the north or west border of the room.
S and G⊆S.                                            They work as the X–axis and Y–axis of the nine positions (let
                                                      1 ≤ n ≤ 3
  In the following discussion, Σ=S, A, R, V, X , P =         ):
Σ, I, G, πF ,andK represent a planning domain, a ﬁnite set 1. The robot sends n pulses north (or west) via the ground.
of observation variables, an observation function over S and
                                                                        X        Y            n
V, a planning problem for Σ, a state–action table for Σ,and 2. If the responder n−1 (or n−1) receives pulses then
the execution structure induced by πF from I, respectively. it sends a responsive pulse south (or east), else it does
  In many cases, we are interested in strong solutions to P, nothing.
i.e. plans that are guaranteed to achieve the goal in spite of 3. The robot can detect whether its X-coordinate (or Y-
nondeterminism.                                           coordinate) is n by receiving a responsive pulse or not
Deﬁnition 6 πF is a strong solution to P if K is acyclic and in a appointed time.
                 K       G
all terminal states of are in .                       This   can   be  formalized  with   six  observation
  In fact, any state–action table πF for Σ is a strong solution variables, i.e. X0, X1, X2, Y 0, Y 1  and
to some planning problems for Σ, if its execution structure Y 2. So the set of observation variables V is
K is acyclic and all terminal states of K are in G.Soin {WallN, WallS, WallW, WallE, X0,X1,X2,Y0,Y1,
the following discussion, we use interchangeably the terms Y 2}; and the observation function X is such that
strong solution and strong plan.                      X (s0, WallE)=⊥,  X (s2,X2) = , and so on.

                                                IJCAI-07
                                                  19313  Observation Reduction for Strong Plans               • ε ∈ Π, ε is the empty plan;
In most real world domains, observation variables are op- • if a ∈Aand π ∈ Π,thena ◦ π ∈ Π;
tional and many of them are useless in the execution of a plan
                                                        • if o   ∈O(V,    X ),  and  π1,π2   ∈   Π,then
(e.g. consider the situation represented in Example 1, the re-
                                                          if o then π1 else π2 ∈ Π.
sponder X2 can be turned off before the execution of πF );
on the other side, information acquisition may require some In general, we are interested in applicable plans, i.e. plans
kind of cost (e.g. time, money, and power etc.). So it is sig- whose execution guarantees that an action is never attempted
niﬁcant to ﬁnd a minimal set of observation variables which unless it is applicable, regardless of nondeterminism.
are necessary for the execution of a plan.            Deﬁnition 8 Aplanπ for Σ, V, Xis applicable in state s iff
  In this paper, it is assumed that any two distinct states of either
the domain can be distinguished by an observation variable
                                                        • π is the empty plan ε;or
at least. So state–action tables are acceptable at execution
                                                                                          
level. In the execution of a state–action table πF , the execu- • π is a ◦ π , a is applicable in s, and π is applicable in
                                                                
tor is required to observe the values of all the observation every s ∈R(s, a);or
variables; consequently, it can know what the current state • π is if o then π1 else π2, and:
is and execute the appropriate action at every step. But in
                                                            – if the formula CODE(s, V, X ) → o is a tautology,
many cases, there is much observation information that is     π               s
useless in the execution of a plan. For example, it makes no    1 is applicable in ; and
sense to observe the value of an observation variable v,where – if the formula CODE(s, V, X ) →¬o is a tautology,
X (s, v)= (or X (s, v)=⊥) for any possible current state     π2 is applicable in s.
s (hereafter, B denotes the set of possible current states, i.e. The execution of a conditional plan is deﬁned in terms
the current belief state); and there is no need to do any de- of the runs associated to it. Intuitively, a run contains the
tection if there exists a ∈Asuch that s, a∈πF for any states, observations and actions encountered while executing
s ∈B.                                                 the plan.
  In this section, we deﬁne an algorithm that ﬁnds an approx-
                                        V             Deﬁnition 9 A run is a sequence σ =(s0,o0) ◦ a1 ◦ (s1,o1) ◦
imate minimal set of observation variables (i.e. obs)which ... ◦ a ◦ (s ,o )  s  ∈S    o  ∈O(V,  X )
are necessary for the execution of a strong plan, and trans- n    n  n ,where  i     ,  i           , and
                                                      ai ∈A. A sequence σ is a run of π (π is a conditional plan
forms the strong plan into a conditional plan branching on Σ, V, X       s
the observations built on these observation variables. Before for ) from state iff either
explaining the algorithm in detail, we introduce some notions • π = ε, and σ =(s, o) with o = CODE(s, V, X );or
used in it.                                             • π  =  a ◦ π1 and  σ =(s, o)  ◦ a ◦ σ1 with o =
                    π
  In the execution of F , the action that should be exe-  CODE(s, V, X ), and σ1 is a run for π1 from some s1 ∈
        s                    (s, π )
cuted on  is written as ACTION   F .Thatistosay,          R(s, a) = ∅;or
if ∃a ∈A.  s, a∈πF   then ACTION(s, πF )=a,else
                                                        • π  =  if o then π1 else  π2   ODE(s, V, X ) → o
ACTION(s, πF )=nop  (nop means doing nothing).                                       , C
                                                                             σ            π1
  Let ∅⊂Vobs   ⊆V. For each  s ∈S,werepresentthe          is a tautology, and  is a run of   starting from
                                                          (s,     (s, V, X ))
corresponding set of assignments to the observation variables CODE         ;or
of Vobs with CODE(s, Vobs, X ),where:                   • π  = if o then π1  else π2, CODE(s, V, X ) →¬o
                                                                             σ            π
  • if Vobs   =   {v}   and X (s, v)=,then               is a tautology, and  is a run of 2 starting from
                                                          (s,     (s, V, X ))
    CODE(s, Vobs, X )=v.                                     CODE          .
                                                                                    (s, π)
  • if Vobs   =   {v}   and X (s, v)=⊥,then             In the following, we write RUNS  to denote the set of
                                                             π            s                       (s, π)
    CODE(s, Vobs, X )=¬v.                             runs of  starting from . We write FINALSTATES    to
                                                      indicate the set of the ﬁnal states of the runs of RUNS(s, π).
  • if |Vobs| > 1 and v ∈Vobs,then
                                                        The deﬁnition of strong plans to P, V, Xis given as fol-
    CODE(s, Vobs, X )=CODE(s,           {v}, X ) ∧
                                                      lows. In fact, it is similar to the one proposed in [Bertoli et
    CODE(s, Vobs −{v}, X ).
                                                      al., 2006].
The above representation naturally extends to any ∅⊂Q⊆S
                                                      Deﬁnition 10 A conditional plan π for Σ, V, X is a strong
as follows:                                                 P, V, X
                                                     plan to        iff
      CODE(Q,  Vobs, X )=    CODE(s, Vobs, X )          • π is applicable in every state of I, and
                         s∈Q                            • every run of π from a state in I ends in G,i.e.
The set of observations built on V and X is O(V, X )=       s∈I FINALSTATES(s, π) ⊆G.
{CODE(Q, Vobs, X ) |∅⊂Q⊆S,   ∅⊂Vobs  ⊆V}.
                                           O(V, X )     Now we can introduce the algorithm for observation reduc-
  The deﬁnition of conditional plans branching on     tion of strong plans in detail.
is given as follows. In fact, it is an extension of the one pro- The basic algorithm (i.e. STRONG–FO–PO) is presented
posed in [Bertoli et al., 2006].
                                                      in Figure 2. Given a planning problem P, a strong plan πF to
Deﬁnition 7 The set of conditional plans Π for Σ, V, X is P, a ﬁnite set of observation variables V, and an observation
the minimal set such that:                            function X , the algorithm transforms πF into a strong plan

                                                IJCAI-07
                                                  1932     1.   function STRONG–FO–PO(P,πF   , V, X)               1.  function REDUCTION(dis, V, X )
     2.     dis ← FINDSTATEPAIRS(P,πF  );                          // Suppose V = {v1,...,vn}
     3.     Vobs ← REDUCTION(dis, V, X );                    2.    for n ≥ i ≥ 1 do di[i] ← 0;
     4.     return TRANSFORM(P,πF  , Vobs, X );              3.    for all (s1,s2) ∈ dis
     5.   end                                                4.      for n ≥ i ≥ 1
                                                             5.        if (X (s1,vi) = X (s2,vi)) then
                                                                         di[i] ← di[i]+1
         Figure 2: STRONG–FO–PO algorithm                    6.                        ;
                                                             7.        ﬁ;
                                                             8.      endfor;
     1.  function FINDSTATEPAIRS(P,πF )                      9.    endfor;
           // Suppose P = Σ, I, G                         10.    Vobs ←∅;
     2.    parts ← DIVIDE(I,πF );                           11.    while (dis = ∅)
     3.    if (parts = ∅) then                              12.      let di[i]=max{di[k] | n ≥ k ≥ 1};
     4.      return ∅;                                      13.      Vobs ←Vobs ∪{vi};
     5.    ﬁ;                                               14.      for all (s1,s2) ∈ dis
     6.    dis ←∅;                                          15.        if (X (s1,vi) = X (s2,vi)) then
     7.    for each (a, Q) ∈ parts                          16.           delete (s1,s2) from dis;
     8.      Inext ← EXECUTE(Σ,  Q,a);                      17.        ﬁ;
               
     9.      P  ←Σ,  Inext, G;                            18.      endfor;
                                          
    10.      dis ← dis ∪ FINDSTATEPAIRS(P  ,π);             19.      di[i] ← 0;
    11.    endfor;                                          20.    endwhile;
    12.    if (I∩G= ∅) then                                21.    return Vobs;
    13.      parts ← parts ∪{(nop, I∩G)};                   22.  end
    14.    ﬁ;
                  (a , Q ) (a , Q ) ∈ parts
    15.    for any  1  1 ,  2  2        ,                        Figure 4: REDUCTION procedure.
              where a1 = a2
    16.      for any s1 ∈Q1, s2 ∈Q2
               dis ← dis ∪{(s ,s )}
    17.                      1  2  ;                      empty set is returned by FINDSTATEPAIRS.
    18.      endfor;                                    •                                dis
    19.    endfor;                                        Third (lines 6–11), the elements of corresponding
    20.    return dis;                                    to the next belief state are computed by simulating the
    21.  end                                              strong plan’s execution for one step and an application
                                                          of FINDSTATEPAIRS  itself. The simulation of a plan
                                                          is realized through the function EXECUTE. Formally,
         Figure 3: FINDSTATEPAIRS procedure
                                                          EXECUTE(Σ,  Q,a)=    s∈Q R(s, a).
                                                        • Finally (lines 12–19), if the actions speciﬁed by πF for I
                                                                             |parts| > 1
to P, Vobs, X,whereVobs is an approximate minimal set of are not consistent (i.e.    ), then any two states
observation variables which are necessary for the execution of (e.g. s1 and s2) from different divisions of I should be
                                                                                         (s ,s )  (s ,s )
πF .TheSTRONG–FO–PO algorithm has two main phases:        distinguished from each other, i.e. 1 2 or 2 1
                                                                             dis  a = a  (a , Q ) ∈ parts
(1) an observation reduction phase (lines 2–3), in which Vobs should be included in if 1 2, 1  1        ,
                                                          (a , Q ) ∈ parts s ∈Q       s ∈Q
is computed by applications of FINDSTATEPAIRS and RE-       2   2        , 1    1,and  2    2.
DUCTION,and(2)a transform phase (line 4), in which πF   Figure 4 shows the REDUCTION procedure. Given dis ⊆
is transformed into a conditional plan for Σ, Vobs, X by an S×S, V,andX as input, the REDUCTION procedure returns
application of TRANSFORM.                             an approximate minimal set of observation variables Vobs
  In order to compute Vobs, we calculate dis ⊆S×S:if  such that ∀(s1,s2) ∈ dis. ∃v ∈Vobs. X (s1,v) = X (s2,v).It
(s1,s2) ∈ dis,then{s1,s2}⊆B(i.e. the set of possi-    starts with Vobs = ∅ and iteratively adds some v ∈Vinto
ble current states) at some step of the execution of πF and Vobs until d = dis,whered = {(s1,s2) ∈ dis |∃v ∈
ACTION(s1,πF ) = ACTION(s2,πF ). This task is accom- Vobs. X (s1,v) = X (s2,v)}.
plished by the FINDSTATEPAIRS procedure, which is pre-  The TRANSFORM   procedure is presented in Figure 5. Its
sented in Figure 3.                                   role is to transform πF (i.e. a strong plan to P) into a strong
  Now let us introduce the FINDSTATEPAIRS procedure in plan π to P, Vobs, X.
detail:                                                 Now let us introduce the TRANSFORM procedure in detail.
                                                                                     I
  • First (line 2), the set of possible current states (i.e. I) At ﬁrst (line 2), the belief state (i.e. ) is divided into some
                                                                                             π
    are divided into some divisions according to the ac- divisions according to the actions speciﬁed by F . The parti-
                                                                                      IVIDE
    tions speciﬁed by πF . The partition is realized through tion is realized through the function D .Andthen:
    the function DIVIDE. Formally, DIVIDE(I,πF )=       1. If I⊆G(lines 3–4), then an empty plan ε is returned.
    {(a, Q) | a ∈A, ∅⊂Q⊆I,s∈Q         s, a∈π }
                                   iff        F .       2. Else if I∩G = ∅ (lines 5–8), then if o then ε else
                                                                        
  • Second (lines 3–5), if parts = ∅ (i.e. I⊆G), then an  TRANSFORM(P    ,πF , Vobs, X ) is returned, where:

                                                IJCAI-07
                                                  1933  1.  function TRANSFORM(P,πF  , Vobs, X )                  1.  function MAKECODE(Q1,   Q2, Vobs, X )
        // Suppose P = Σ, I, G                            2.     dis ←∅;
  2.    parts ← DIVIDE(I,πF );                              3.     for any s1 ∈Q1, s2 ∈Q2
  3.    if I⊆Gthen                                          4.       dis ← dis ∪{(s1,s2)};
  4.      return ε;                                         5.     endfor;
  5.    else if I∩G= ∅ then                                6.     Vnow ← REDUCTION(dis,  Vobs, X );
  6.      o ←MAKECODE(I∩G,     I−G,   Vobs, X );            7.     return CODE(Q1, Vnow, X );
  7.      P ←Σ,  I−G,  G;                                8.  end
  8.      return if o then ε
                                   
                else TRANSFORM(P   ,πF , Vobs, X );              Figure 6: MAKECODE  subroutine.
  9.    else if parts = {(a, Q)} then // i.e. |parts| =1
 10.      Inext ←EXECUTE(Σ,  Q,a);
            
 11.      P  ←Σ,  Inext, G;
                                                       In fact, Theorem 1 can be proved by showing that all the
 12.      return a ◦ TRANSFORM(P  ,πF , Vobs, X );    paths of the execution structure K induced by πF from I are
 13.    else                                          ﬁnite. According to Deﬁnition 6, all the paths of K are ﬁnite
                         (a, Q)    parts
 14.      select an element    from     ;             (i.e. K is acyclic) because πF is a strong plan to P.
 15.      o ←MAKECODE(Q,    I−Q,   Vobs, X );
                                                   Theorem 2 Let πF be a strong plan to P.LetQt be the set
 16.      P  ←Σ,  Q, G, P ←Σ,  I−Q,  G;
                                                     of terminal states of K (i.e. the execution structure induced
 17.      return if o then TRANSFORM(P ,πF , Vobs, X )
                                                    by πF from I). Suppose π is the conditional plan returned by
                else TRANSFORM(P    ,πF , Vobs, X );
                                                      STRONG–FO–PO(P,πF    , V, X ). Then:
 18.    ﬁ;
                                                        • π is a strong plan to P, V, X, and
 19.  end                                                 
                                                        •   s∈I FINALSTATES(s, π)=Qt  ⊆G.
           Figure 5: TRANSFORM procedure.
                                                        In the following example, we illustrate the algorithms de-
                                                      scribed in this section.
      • o is an observation that can distinguish the states in Example 2 Consider the situation depicted in Exam-
        I∩Gfrom the states in I−G.                    ple 1.   We apply  STRONG–FO–PO    to (P,πF , V, X ).
      •P  = Σ, I−G, G.                             Firstly, dis is computed by FINDSTATEPAIRS(P,πF ), and
                                                      it is {(s1,s7), (s4,s7)}; and then, Vobs is computed by
    o is computed by MAKECODE(I∩G,   I−G,  Vobs, X ).
                                                      REDUCTION(dis, V, X ), and it is {WallS}; lastly, π is re-
    Figure 6. shows the MAKECODE  subroutine. Given
                                                      turned by TRANSFORM(P,πF  , Vobs, X ),where:
    Q1 ⊆S,   Q2 ⊆S,  Vobs,andX   as input, the MAKE-
                                                        • π = π  = GoEast  ◦ π
    CODE  subroutine ﬁnds an approximate minimal set of        0              1, and
    observation variables Vnow ⊆Vobs such that ∀(s1,s2) ∈ • π1 = if WallS then (GoWest ◦ ε) else π2, and
    Q1 ×Q2.  ∃v ∈Vnow.  X (s1,v) = X (s2,v),andre-
                                                        • π2 = GoSouth  ◦ π3, and
    turns the observation of Q1 built on Vnow and X (i.e.
                                                        • π  = if WallS then (GoWest ◦ ε) else π
    CODE(Q1, Vnow, X )).                                   3                                   4, and
                                                        • π  = GoSouth  ◦ GoWest  ◦ ε
 3. Else if the actions speciﬁed by πF for I are con-      4                         .
                  |parts|  =1
    sistent, i.e.                (lines 9–12), then   It is easy to ﬁnd that π is a strong plan to P, V, X, and G =
    a ◦           (P,π  , V  , X )
       TRANSFORM        F  obs    is returned, where:   s∈I FINALSTATES(s, π)={s6}   (i.e. the set of terminal
                                                                                           π      I
      • a is the action speciﬁed by πF for all the possible states of the execution structure induced by F from ).
                                                                                      V−V
        current states.                                 In fact, the observation variables of obs are useless in
                                                     the whole executions of π and πF . So the sensors and the re-
      •P   = Σ, Inext, G. Inext is the belief state at next
                                                      sponders that correspond to these observation variables (i.e.
        step, and it is computed by EXECUTE(Σ, Q,a).
                                                      WallN,  WallW,  WallE, X0,  X1, X2, Y 0, Y 1, and Y 2)
 4. Else (lines 13–17) (a, Q) is selected from parts,andif can be turned off before executing π. Furthermore, it is not
    o then π1 else π2 is returned, where:             necessary to observe all the values of observation variables
                                                        V                          π
      • o is an observation that can distinguish the states in of obs at every step: for instance, requires the plan execu-
                                                                  GoEast
        Q from the states in I−Q, and it is computed by tor to execute    at ﬁrst, regardless of the observation
        MAKECODE(Q,   I−Q,   Vobs, X ).               information about the current state.
      • π1 =TRANSFORM(Σ,   Q, G,πF , Vobs, X ).
                                                      4   Conclusions
      • π2 =TRANSFORM(Σ,   I−Q,  G,πF , Vobs, X ).
                                                      This paper presents an algorithm (i.e. STRONG–FO–PO) for
  From Deﬁnition 6, Deﬁnition 10 and the algorithms pre- observation reduction of strong plans under full observability,
sented above, we can get Theorem 1 and Theorem 2.     which take the form of state–action tables. To the best of
Theorem   1  If πF  is a  strong plan  to P,then      our knowledge, no other work has discussed and tackled this
STRONG–FO–PO(P,πF    , V, X ) terminates.             problem.

                                                IJCAI-07
                                                  1934