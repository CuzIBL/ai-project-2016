            Operator Component Matrix Model for IMP Program Diagnosis 

                                      Zhao-Fu Fan    Yunfei Jiang 
                                   Department of Computer Science 
                            School of Information Science and Technology 
                                        Sun Yat-Sen University 
                          No. 135 Xingang Xi Rd, Guangzhou, 510275, China 
                                         fanzhaofu@163.com 

                    Abstract                         structure, and the usage of assertions about the expected 
                                                     program. These advantages make diagnoses more accurate, 
    This paper presents a new modeling approach for  and even help to correct the faults by mutation of operator 
    IMP  programs with operator component matrix 
                                                     components. 
    (OCM) model, which can be used in IMP program      In this paper, section 2 presents the operator component 
    diagnosis. Using this model and model-based di-  matrix model for programs. Section 3 further analyses the 
    agnosis method, some logic errors can be found in 
                                                     dependencies implied in the model, including black-box 
    IMP programs. The model  can also be extended to dependency and white-box dependency. Section 4 is the core 
    all kinds of imperative programs. The advantages of of the paper, it defines such terms as isomorphism, abstract 
    this diagnosis method lie in its simple and regular 
                                                     program, program specification and breakpoint, and under 
    presentation, uniform diagnosed objects, usage of these terms, it also defines the model-based program diag-
    isomorphism assumptions  in structure, and usage of nosis problem, diagnosis and conflict etc., and gives an ex-
    assertions about the expected program. These ad-
                                                     ample to illustrate them. Section 5 introduces related works, 
    vantages make diagnoses more accurate, and even  and the last section makes a conclusion.   
    help to correct the faults by mutation of operator 
    components. 
                                                     2   Operator Component Matrix Model 
1   Introduction 
                                                     2.1  Operator Component and 1-variable 
Model-based diagnosis was first proposed in 1987 by Reiter                         n
[Reiter, 1987], this approach is mainly used to diagnose the Definition 1. In an n-ary function F (x0,x1,…xn-1), we use a 
                                                             F n F n F n          Fn     F n
systems composed of some physical components. Applying vector 0 , 1 ,..., n 1 to denote ,  then k (k=0,...n-1) is 
                                                     called the k-th operator component of n-ary function Fn.  
model-based diagnosis to program debugging is still a new                  n
field. Now, dependency model [Mateis et al., 1999] [Wieland, So, we can represent F (x0,x1,…,xn-1) as 
                                                                 n      n         n
2001] and value-base model [Mateis et al., 2000] are widely          F0 x0 F1 x1 ... Fn 1 xn 1                (1) 
used in program diagnoses, both of which use program slic-       Where “ ” is called as operator-plus , “ ” is called as 
ing technology [ Wotawa, 2002]: the former considers static operator-times, and we stipulate that the symbol “ ” has 
slices of a program by analysing the dependency between associativity and exchangeability, and “ ” has associativity 
variables, and the latter in fact uses dynamic slices depending and distributivity to “ ”. So, we can also represent (1) as  
on a special test by computing the valuation trajectory. But n n n         T
these methods are not competent in structural errors, and [F0 , F1 ,...Fn 1 ][x0 , x1,...xn ] . 
always result in very coarse diagnoses, i.e., too many can- We can prove that the above stipulation is reasonable, 
didate diagnoses.                                    because under the stipulation, any legal expression in the 
  This paper uses a simple imperative programming lan- form of operator components has a unique computable form, 
guage—IMP  which helps to focus on the important issues 
                                                     i.e. F0 x0 F1 x1 ... Fn 1 xn 1 is computable iff the se-
and avoid considering unnecessary detail. The syntax of IMP 
                                                     quence (F , F , , F ) is a permutation of all the operator 
is shown in [Winskel, 1993]. For IMP programs, we present a   1 2     n
new modeling approach with OCM, which can be used in components of an n-ary function. 
IMP program diagnosis. Using this model and  model-based Definition 2. If a domain is composed of a single element 1, 
diagnosis method, some logic errors can be found in IMP then we call the variable in the domain as 1-variable. i.e., we 
programs. The model can also be extended to all kinds of consider the constant 1 as a special variable.  
imperative programs. The advantages of this diagnosis Definition 3.  Given two variables x and y, if the value of y is 
method lie in its simple and regular presentation, uniform independent of x, we call x has a null operator component 
diagnosed objects, the usage of isomorphism assumptions in to y, represented as 0. 


                                               IJCAI-07
                                                  354   The arithmetic operators of IMP are defined as follows: before the execution of the k-th command, and X(k) be the 
   (1) n (x) n x , where n is a constant in N. Especially, program state after the execution of the k-th command, then 
                                                       (k)   (k-1)
we call 1 as identical operator component, which can also X =CkX ,  where Ck is the state transition matrix of the 
be represented as 1, but note that here 0  is different from k-th command.  The value of an expression a under program 
null operator component 0.                           state X(k) is represented as (a, X(k)). 
   (2) (x,y)   x+y.    (3)  (x,y)  x y. 
                                                     Skip statement 
   x-y can be derived from   and i.e., 
                              -1                     In a unit matrix, if we look number 1 as operator component 
x-y=x+(-1) y= (x, -1(y))= 0 x ( 1 -1) y. 
                     1                               1, and number 0 as operator component 0, we call such ma-
Property 1. For a Aexp , suppose x , ..., x  are variables in 
                               1    n                      unit OCM               E
a,  then it can be represented in the form of        trix as        , represented as . We also call the OCM 
                                                                       zero OCM              O
      a=F 1 F x F x  ... F x ,                       composed of all 0 as       , represented as .      
       0    1 1  2 2      n n                           So, skip statement (skip) can be represented as X:=EX . 
where F0, F1, F2, ..., Fn are operator component expressions. 
For instance,  x (2 y+5)=( 1 1 5) 1  0 x  ( 1 0 2)  y Presentation of compound statement 
Property 2.  For any F ,G ,H ,  m,n N                Compound   statements take the form of c0;c1. Suppose 
      F 0=0 F=0, F 1=1 F=F, F 0=0 F=F                command  c0 can be represented as X:=C0X and c1 can be 
       m  n= m n                                     represented as X:=C1X, where C0 and C1 are all OCMs, then 
                                                     we can represent the command as X:= (C1C0)X . 
2.2 Presentation of Commands 
                                                     Presentation of branch statement 
In  IMP programs, there are five types of commands: skip Branch statements take the form of  if b then c  else c . 
          skip                     x  a                                                        0      1
statement (  ), assignment statement ( := ), compound Suppose command c  can be represented as X:=C X and c
         c c                  if b then c else c                      0                        0      1 
statement ( 0; 1), branch statement (    0   1) and  can be represented as X:=C X, where C  and C  are all 
loop statement (while b do c). Here we present these state-                   1          0      1
                                                     OCMs.   Then we  can represent the command as  X:= 
ments in the form of OCM.                                                                (0)
                                                     (mC0  (1-m)C1)X, where m=1 when  (b,X )=true, other-
Assignment statement                                 wise m=0, X(0) is the program state before the execution of 
                                                                                            m      m
Suppose the variable set of a program is{x1,..., xn} then the command. Note that we look the result of  and 1-  as  
from property 1 and definition 3, each a Aexp takes the operator component 1 or 0. 
form of  F 1 F  x  ... F x , where F =0 if variable x  
         0    1 1      n  n        k             k   Presentation of loop statement 
does not occur in a. 
                                                     Loop statements take the form as  while b do c.  Suppose 
     So, we can denote assignment statement xk:=ak (k=1..n) as  
                                                     command  c can be represented as X:=CX, where C is an 
        x   F  1  F  x  ... F  x                                                              n
         k:= k 0   k1 1      kn n                    OCM. Then we can denote the command as  X:= C X,  where 
                                T
or            xk:=[Fk0 Fk1 ... Fkn][1 x1 ... xn]     . n is the number of executions of loop body c (i.e. n= min{k|(b, 
      When the program executes the assignment statement X(k)) =false, k 0}, where X(k) is the program state after the 
xk:=ak, only the value of variable xk will be changed. So we k-th execution of command c). 
can consider that it implies such assignment statements as        According to structural induction, it can be proved that 
follows:     xj:=xj  (j=1,..n, j k),                 any IMP program can be denoted in the form of  X:=CX. We 

i.e.,  xj:= 0 1 0 x1 ... 1 x j 0 x n                 call C as the OCM model of the program. 
      X              T
     Let =[1  x1  x2  ...  xn] , then xk:=ak is equivalent to 2.3 An example 
         1    0       0
                                                     To facilitate analysis, we use an example shown in Fig 1.  
         0    1       0                               
                                                     1(key point)   if (from  to)  then 
      X :                X , represented as X:=CX 
        F    F       F                               1.1              {start := from ; 
          k 0 k1      kn                             1.2                stop := to} 
                                                                       else  
         0    0       1                              1.3                   {start := to;  
                                                     1.4                stop := from}; 
   C is a matrix composed of operator components, such 
                                                     2               i:= start; 
matrix is called as operator component matrix, abbreviated 
                                                     3               s:= 0; 
as OCM. We can treat  C as a state transition matrix. 
                                                     4(key point)    while (i  stop )  do 
Property 3.  The first row of any state transition matrix has 
                                                     4.1                   {s:=s+i;  
the form  of  [1  0  ...  0]. 
                                                     4.2                i:= i+1} 
Property 4.  In any row of any state transition matrix, there is 
                                                     5                  [end] 
at least one operator component that is not 0. 
   We label the commands with 1, 2, ..., n by their occur-      Figure 1:   An IMP program 
rence order in a program. Let X(k-1) be the program state 
                                                        Let X=[1 from to start stop i s]T,  we can get the OCM 
                                                     model of the program  
                                                                         n
   1                                                 C  C
     Aexp is the set of arithmetic expressions in IMP. = 4C3C2C1=(C4.2C4.1) C3C2(mC1.2C1.1 (1-m)C1.4C1.3) 

                                               IJCAI-07
                                                  355                     n
   1  0 0 0  0  0  0    1   0    0  0  0 0  0          From K, we can get the dependencies of the final values of 
   0  1 0 0  0  0  0    0   1    0  0  0 0  0        variables to the initial values of variables; we represent these 
                                                                    X(n)  B  KX(0)        X(n)
   0  0 1 0  0  0  0    0   0    1  0  0 0  0        dependencies as               , where    is the final 
                                                     program state, X(0) is the initial program state. For instance, 
                            m     m
   0  0 0 1  0  0  0    0      1    0  0 0  0        we extend the variable s, we can get 
   0  0 0 0  1  0  0    0  1 m   m  0  0 0  0                    s(n) B 1 from(0)  to(0),  
                            m     m
   1  0 0 0  0  0  0    0      1    0  0 0  0        which means the final value of s is decided by the initial 

   0  0 0 0  0  1   0    0  0    0  0  0 0  0        value of from, the initial value of to, and the constant value of 
where Cl  is  the state transition matrix of the command la- s assigned in the program. Especially, if the black-box de-
beled with l; m=1 if ( from to, X(0))=true or else m=0;  pendency of a variable includes the item 1, it shows the 
n=min{k|( i   stop, X(4.2,k))=false, k 0}, where X(0) is the variable has been assigned with a constant in the program. 
program state before execution of the command labeled with        In the black-box dependency, if we find a variable does 
1; X(4.2,k) is the program state after the k-th execution of the not appear in the dependencies of any other variables and its 
command labeled 4.2.                                 final value is not concerned about, the variable is usually 
      If a program includes branch statements or loop state- considered useless, which can be deleted from the program.  
ments, there are some unknown “constants” appearing in its 
OCM   model, such as m, n in the above example. Though 3.2 White-box Dependency  
their values are dependent on a given test case, we still look Definition 6.  For an OCM C, after replacing all its operator 
them as formal constants.                            components except 0 and 1 with formal operator compo-
                                                     nent represented as [p](p is the label set of the commands 
3   Dependency Analysis                              where the actual operators occur), the new components ma-
                                                     trix H is called as the formal matrix of C. The properties of 
3.1  Black-box Dependency                             [p] are shown as follows: 
                                                          p1,p2,  [p1] [p2]= [p1  p2], [p1] [p2]= [p1  p2], 
Definition 4.                                      
            Such  an operator component  is called a           [p1] 0=0   [p1]= [p1], [p1] 0=0 [p1]=0  
characteristic operator component
                              , if it satisfies that           [p1] 1=1   [p1]= [p1], [p1] 1=1 [p1]= [p1]. 
      = ,     = ,   0=0   = ,  0=0  = .              Definition 7.  Assume that X is the vector of all variables in  
An OCM K is called the characteristic matrix of C,  if K  is program P , C is the model of P, H is the formal matrix of C,  
constructed by replacing all the operator components in C then we call H is the white-box dependency matrix of P. 
except 0 with  .                                          From the example shown in Figure 1, we can get its 
Theorem 1.  For any OCM C1, C2, if K1 and K2 are respec- white-box dependency matrix 
tively the characteristic matrix of C1 and C2, then K1K2 is the 1         0           0       0 0 0  0
                    C C
characteristic matrix of 1 2.                                   0         1           0       0 0 0  0
Theorem 2.   For any characteristic matrix K , the chain K, 
                                                                0         0           1       0 0 0  0
K2, K3, ..., Kn satisfies one of the two cases as below:                                                
(1)  N,  n>N, Kn=KN;                                    H       0         [1.3]       [1.1]   0 0 0  0
(2)  N, M,  n> N, Kn+M=Kn.                                      0         [1.4]       [1.2]   0 0 0  0
    Since the set of all characteristic matrixes of a given di- [4.2]   [1.1,2,4.2] [1.3,2,4.2] 0 0 0 0
mension is limited, any chain K, K2, K3, ..., Kn  must reach a [4.1,4.2,3] [1.1,2,4.1,4.2] [1.3,2,4.1,4.2] 0 0 0 0
fixed point or enter into a ring. The theorem indicates that the From H, we can get the dependency of variables to com-
dependency in a loop is definite.                    mands which is represented as  X(n) W HX(0) , where X(n) 
Definition 5.  Assume that X is the vector of all variables in  is the final program state, X(0) is the initial program state. For 
program2 P , C is the OCM model of P, K is the character- any variable in X, we can get its dependency to commands 
istic matrix of C, then K is called the black-box dependency from H. For instance, we extend the variable s, and get    
matrix of P.                                              s(n)  W   [4.1,4.2,3] 1 [1.1,2,4.1,4.2] from(0)  
      From the example shown in Figure 1, we can get its          [1.3,2,4.1,4.2] to(0).  
black-box dependency matrix                          Then we  establish a set s which is composed of all the 
          0  0 0  0 0 0                              command labels appearing in the right part, i.e.,  
       0     0 0  0 0 0                                    s = {1.1,1.3,2,3,4.1,4.2}.  
                                                     We call    as the white-box dependency of variable s, which 
       0  0    0  0 0 0 .                                    s
   K   0       0  0 0 0                              means the final value of s is decided by the command set 
                                                     {1.1,1.3,2,3,4.1,4.2}. It can be proved to be equivalent with 
       0       0  0 0 0
                                                     the program slice about the slicing criterion (s, 5) [Wotawa, 
               0  0 0 0                              2002]. Note that white-box dependencies include data de-
               0  0 0 0                              pendencies and control dependencies which are implied in 
                                                     the formal constants related to a branch statement or a loop 
                                                     statement.  
                                                 
   2 Here ‘program’ indicates IMP program without special note. 

                                               IJCAI-07
                                                  356                                                                                            (l) (l)  (l)
3.3  Complexity analysis                              to the actual model is MAP, then MAP={{( 0 , 0 ), ( 1 , 
                                                       (l))}}. In order to identify the operator components which 
      In this model, the dimension of each OCM is  (n+1) (n+1) 1
where n is the number of variables in the program. It seems have the same form, we add the command label to them. 
                                                                         l s  s i         l  s  s i
that the size of  the matrix model would grow quickly with Suppose the command :  := +  should be  :  :=  , it is 
                                                      known that the abstract model of the “correct” command has 
the number of variables. However, it is not a big problem, 
                                                      the same form of the abstract model of the “wrong” com-
because when we diagnose a program, at one time, a diag-                           (l) (l)   (l) (l)
nosed object is generally a program module (a procedure or a mand. Given a mapping MAP ={( 0 , 0 ), ( 1 , 1 )}, we 
                                                      can get the correct command from the abstract model. 
function) where the number of variables won’t be too big. 
Moreover, we can store all state transition matrixes in the Under the isomorphism assumption, we can construct 
dense mode of sparse matrix.                          the abstract model of expected program from the concrete 
                                                      model of the diagnosed program by replacing components in 
      
                                                      the concrete model  with abstract components. 
                                                         Note that each extended null operator component must be 
4   Model-based Program Diagnosis                     replaced by an abstract operator component in the abstract 
                                                      model. 
4.1  Isomorphism Assumption and Abstract Pro-
     gram                                             4.2  Program Specification and Breakpoint 
Definition 8. Two commands c and c  are isomorphic, rep- Program specification  
resented as Isomorph(c, c ), iff one of  the following cases is To further describe the abstract program, we need offer some 
satisfied:                                            assertions about the static properties of it, each assertion is 
   1) c::=skip  c ::=skip;                            called a program specification [Morgan, 1998]. 
   2) c::= x:=a0  c ::= y:=a1  x  y  VS(a0) = VS(a1)  Definition 10.  A program specification  has the form as 
      where x  y  means that x and y are the same variable, below: 
      VS(a) means the set of  all the variables in  a;       ( precond(X), frame(X), postcond(X)), 
   3) c::= c0; c1  c ::= c0 ; c1   Isomorph(c0, c0 )  Iso- where X  is the set of variables, precond(X) is a description 
      morph(c1, c1 );                                 of the initial state of X, frame(X) indicates a piece of the 
   4) c::= if b then c0 else c1  c ::= if b  then c0  else c1   abstract program including X, and postcond(X) gives a de-
      Isomorph(c0, c0 )  Isomorph(c1, c1 );           scription of the final state of X after the “execution ” of the 
   5) c::= while b do c0  c ::= while b  do c0   Iso- piece of abstract program.   
      morph(c0, c0 ).                                    Note that frame(X) cannot be executed until a concrete 
   Generally, a diagnosed program should be close to an implementation is given. If slice(X) is a concrete imple-
expected program. That is to say, it is possible that minor mentation of frame(X), postcond(X) must come true after 
revisions will make the diagnosed program correct. So, we execution of slice(X) under the condition precond(X), and 
always suppose that for any diagnosed program, there exists we denote it as  {precond(X)} slice(X){ postcond(X)}. 
a “correct” program which is isomorphic with the diagnosed For example, to such a specification,  
program. This assumption is called isomorphism assump-     precond(s, i)={s>0, i>0}, 
tion.  
                                                           frame(s, i)={ s:= 0 s 1 i},  
    In some diagnosed programs, it is possible that some   postcond(s, i)={s>1}, 
variable is lost in the right-side expression of an assignment slice {s:=s+i} is an implementation of frame(s,i), but slice 
statement, such that the isomorphism assumption cannot hold {s:=s i} is not . 
any more. But fortunately, we can extend the expression to a 
new equivalent expression which includes the lost variable Breakpoint 
by adding a null operator component. For instance, if x:=x+i The position of a program is called a breakpoint, if where 
is written as x:=x+1 by mistake,  we can extend the expres- there is an assertion. The assertions about the variables in a 
sion x+1 to x+1 0 i. We call this case as extendable iso- breakpoint are called intermediate results. The value of 
morphism, so it assures that many diagnosed programs are at variable x in a breakpoint B is represented as x(B).  
least extendable isomorphic with a correct program.     In program diagnosis, a kind of special position is often 
Definition 9. For a given program (OCM model), if we re- used as breakpoints, and those positions are closely followed 
place all the operator components of the program with ab- with a boolean expression, we call them as key points. For 
stract operator components, the new program is called an example, in Figure 1, there are two key points in the positions 
abstract program.  An abstract operator component is only of label 1 and label 4.    
a marker which does not refer to any concrete operator com- Note that in a runtime of a program, a breakpoint may be 
ponent.                                               passed by several times or zero times, but it corresponds to a 
   For example, there is a command l:  s:=s+i in a program unique position in a program.  
(where l is the label), whose model is represented as s:= For a given breakpoint, if all test cases should pass it, we 
  (l)   (l)                                                                          invariant (“always”) 
 0  s   1 i, and whose abstract model is represented as call the assertions in this breakpoint as 
    (l)   (l)         (l)     (l)                     assertion                              intermittent 
s:= 0 s  1  i, where 0  and  1  are abstract operator        ,   otherwise, we call them as  
components. Suppose the mapping from the abstract model (“sometime”) assertion [ Mayer and Stumptner, 2003].  


                                               IJCAI-07
                                                  357   So, it is known that any program specification must relate implementation of frame(B1,B2) in the diagnosed program P. 
to two breakpoints, and the program code between the two Suppose there is an equation y=f(W(0)) in postcond(X), where 
                                                                      (0)
breakpoints must be a legal (compound) command. For  y  X, W  X, and W   denotes the state of W in B1. If the 
example, in Figure 1, the codes between breakpoint 1.3 and black-box dependency set of y in slice(B1,B2) is not equal to 
breakpoint 3 are not legal commands. If B1 and B2 are the W, then the white-box dependency set of y in slice(B1,B2) is a 
breakpoints related to frame(X), we also represent frame(X) conflict set. 
as frame(B1,B2, X). If X includes all the variables of the      The conclusions of theorem 4 and 5 are obvious; theorem 
program, X can be omitted.                           5 is a special case of theorem 4.   
4.3  Program Diagnosis                               4.4 A Diagnosis Example  
Definition 11. A program diagnosis problem is a triple (SD, 
                                                     Program diagnosis problem 
COMPS, SPECS) where SD is the OCM model of the actual 
program to be diagnosed, COMPS is the set of operator Consider the program shown in Figure 1. Suppose command 
                                                     4.1 is written as s:=s i by mistake. Then the program diag-
components in SD, SPECS is the set of program specifica-
tions.                                               nosis problem is given as below: 
                                                     SD=(X,C), 
Definition 12. Suppose (SD, COMPS, SPECS) is a program 
                                                         where X=[1 from to start stop i s]T 
diagnosis problem. Let AD be the abstract program of SD, 
                                                         C=C4C3C2C1 
ACOMPS be the abstract operator components in AD, and                n
MAP   be the mapping from COMPS  to ACOMPS.  Then          = (C4.2C4.1) C3C2(mC1.2C1.1 (1-m)C1.4C1.3) 
   COMPS is a diagnosis  iff  there exists MAP : SA      where Cl denotes the OCM model of the command la-
                                                         beled with l in the diagnosed program; 
where   is the set of all operator components and SA is a       (1.1) (1.2) (1.3) (1.4) (2) (3) (4.1) (4.1)
                                                     COMPS={1     , 1  , 1  , 1   , 1 , 0 ,  0  ,  1  , 
subset of ACOMPS, such that                               (4.2) (4.2)
      AD    MAP     SPECS    is consistent, and          0   , 1   }; 
       C  COMPS\   , MAP  (MAP-1(C))=C.              SPECS={PS1, PS2, PS3},  where 
     Under isomorphism assumption, AD  SPECS is always       PS1=( {from to}, frame(1,3), {i=from}), 
consistent, that is, the expected program is an interpretation       PS2=( {from to}, frame(1,3), {i=to}), 
of AD.                                                     PS3=( {i stop}, frame(3,5),  
                                                             {i=stop(0)+1, s=(i(0)+stop(0)) (i-i(0))/2}) 
   Since any operator component corresponds to a com-          (0)     (0)
mand in the program, components in  indicate the possible where  i and stop  denote respectively the initial values 
faults in the program.                                  of i and stop before the execution of the frame. 
Definition 13. Let  be a diagnosis. If there exists no ’  Diagnosis 
such that ’ is also a diagnosis, then  is a minimal diag- AD=(X,F), 
nosis.                                                   where X=[1 from to start stop i s]T 
Definition 14. Suppose (SD, COMPS, SPECS) is a program 
                                                          F=F4F3F2F1 
                    AD                        SD                   n
diagnosis problem. Let  be the abstract program of ,      =(F  F  ) F F (mF F    (1-m)F F  ) 
ACOMPS                                    AD                 4.2 4.1 3 2  1.2 1.1     1.4 1.3
          be the abstract operator components in , and   where F  denotes the abstract OCM model of the com-
MAP                     COMPS      ACOMPS                       i
      be the mapping from        to         . Then       mand labeled with l in the expected program;  
C  COMPS    is a  conflict set iff  for any MAP  :                (1.1) (1.2) (1.3) (1.4) (2) (3) (4.1) (4.1) (4.2)
                                                     ACOMPS={ f     , f  , f , f , f , f , f0 , f1 , f0 , 
ACOMPS       where MAP  (C)=MAP(C), AD    MAP            (4.2)
                                                        f1   }; 
SPECS                                                        (1.1) (1.1) (1.2) (1.2) (1.3) (1.4) (2) (2)
          is inconsistent.                           MAP={ f       1  ,  f    1   ,  f   1   ,  f   1  ,  
Definition 15.  Let C be a conflict set. If there exists no (3) (3) (4.1) (4.1) (4.1)  (4.1) (4.2)  (4.2)
                                                        f     0  ,  f0    0  ,  f1    1   ,  f0    0  ,  
C’  C        C’                      C    minimal         (4.2)  (4.2)
      such that  is also a conflict set, then  is a     f           } 
conflict set                                             1      1
         .                                           Given a set of  inputs of the diagnosed program 
Theorem 3    C   C   C
          .  If 1, 2,... n are all minimal conflict sets of INPUT={from=6,  to=3} (i.e., from(1)=6 and  to(1)=3)  
       P                            C  C   C
program  , then all the least hitting sets of { 1, 2,... n} are which satisfy the precondition of PS , by running the diag-
                  P                                                                 2
minimal diagnoses of .                               nosed program with the inputs, we can get the results of 
                                             et al
  The definitions about hitting set can be found in [Lin ., i(3)=3 and  to(3)=3, which  are consistent with the postcond 
2003].                                               of PS . In this case, we cannot get a conflict set.  
Theorem  4         PS  precond X  frame B B  post-        2
          . Suppose  =(       ( ),    ( 1, 2),          We go on checking the other program specifications. By 
cond X                             slice B B
    ( )) is a program specification. Let ( 1, 2) be the observing the values of the variables of the precondition of 
                frame B B                       P
implementation of   ( 1, 2) in the diagnosed program . PS  in breakpoint 3, we get i(3)=3 and  stop(3)=6, which 
                                             B         3
Given a program input,  if (1) the program state in 1 is satisfy the precondition of PS . And after applying PS , s(5) 
              precond X     Y                                                 3                   3
consistent with     (  ), (2)  is the set of variables should be (3+6) (7-3)/2=18. But s(5) equals to 360 actually, 
             B                  postcond X
whose states in 2 are inconsistent with ( ) , and (3) so there is a conflict. In frame(3,5), the white-box depend-
C                              Y    slice B B
  is the white-box dependency set of   in  ( 1, 2), then ency of s is {3, 4.1, 4.2} which makes a conflict set. If we go 
C
  is a conflict set.                                 on observing i, i(5) is always consistent with the postcondi-
Theorem  5         PS  precond X  frame B B  post-
          . Suppose  =(       ( ),    ( 1, 2),       tion of PS , so the white-box dependency of i (i.e., {4.2}) 
cond X                             slice B B                  3
    ( )) be a program specification. Let ( 1, 2) be the must not be included in a conflict set.  If we have another 


                                               IJCAI-07
                                                  358