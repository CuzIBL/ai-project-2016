                                     MANIPULATING DESCRIPTIONS O F P R O G R A M S F O R DATABASE A C C E S S 


                                                        P.M.D.Grayy  and D.S.Moffat 

                                                        Dept. of Computing Science, 

                                                  University of Aberdeen, Scotland, U.K.. 

                                                                      relational algebra instead of having to work at 
                           ABSTRACT                                   the low level of record access operations 
                                                                      following pointers through the database and 
A method is described for manipulating                                embedding these operations in Fortran Code. 
descriptions of programs to access Codasyl 
Databases to meet a specification given in                                 2. He can write complicated m u l t i - l i n e 
r e l a t i o n a l algebra. The method has been                      queries that compute derived data both from 
implemented as a Prolog program which is compared                     records and groups of records (averages, counts 
with the previous Pascal version. The methodology                     etc.) and appear to generate several intermediate 
is discussed as an Automatic Programming technique                    tables. The system w i l l endeavour to find an 
which explores the transformations on a program                       access path that computes the same r e s u l t without 
induced by changes of data structure                                  storing these tables, which could be very costly 
representation at two levels.                                         f o r l a r g e databases. The program generated may be 
                                                                      quite complicated to write by hand and should be 
                                                                      competitive with a trained programmer's code. 
                      I_ INTRODUCTION 
                                                                           The system goes through several stages. 
     The problem of generating equivalent programs                    F i r s t the user types a query in r e l a t i o n a l algebra 
under changes of data representation is an                            which i s parsed and c h e c k e d . Then i t i s 
important one. In the case of l i s t processing, a                   manipulated at two levels. At the top level the 
change of data structure representing sets of                         query is rewritten s t i l l in algebraic form using 
objects and their relationships can completely                        rewrite rules so as to assist transformations at 
change the program. The same applies to Codasyl                       the next l e v e l . The lower level uses a concrete 
databases which are essentially enormous l i s t                      representation of the Codasyl data structure by a 
structures on secondary storage. However because                      traversal (see below). The system reads in a 
of the variety of redundant pointers it is                            number of stored traversals for each r e l a t i o n . 
possible to traverse the same l i s t s t r u c t u r e in            These have each to be manipulated and combined in 
many d i f f e r e n t ways. Thus it is not just a                    various ways to satisfy the requirements of the 
question of changing the program but of generating                    query. S o m e combinations w i l l represent very 
alternative programs whose run-times, because of                      slow and i n e f f i c i e n t programs and be discarded. 
disc access, may d i f f e r by factors of 10 or more.                However this cannot be done immediately, as a good 
                                                                      program f o r p a r t of the query may l a t e r t u r n out 
     This paper concerns the manipulation of                          to be second best after modification to f i t the 
abstract descriptions of such programs. A query is                    remainder. Finally the descriptions are costed 
formulated in a functional language ( r e l a t i o n a l             according to information on database access times 
algebra) which specifies the logical relationships                    and the selected version is used to generate 
between the retrieved data values and the stored                      Fortran code to run against the actual database. 
data items but does not specify the sequence used                     The system is oriented towards complex queries 
to access them ( the access path ). The aim is to                     accessing thousands of records which can only run 
generate a program that produces the desired items                    in batch producing substantial printout. Thus it 
e f f i c i e n t l y by exploring a variety of alternative           is not the run-time for the translator which 
program structures, which are the consequence of                      matters but the complexity of query which it can 
following d i f f e r e n t access paths.                             handle. Currently other systems only handle a 
                                                                      very restricted r e l a t i o n a l view or a rather 
     A method of doing this has been developed                        restricted query language. 
(Bell 1980) and embodied in a system (ASTRID) 
(Gray 1982) for typing in queries in r e l a t i o n a l                   The ASTRID system was o r i g i n a l l y written in 
algebra and generating and running programs on                        Pascal. More recently the two levels of 
Codasyl databases (IDS-II and IDMS). From the                         manipulation have been rewritten in Prolog. This 
user's point of view the benefits are twofold.                        paper describes the basic methodology and shows 
                                                                      how Prolog is well adapted to this task. 
     1. It gives the user a r e l a t i o n a l view of 
the Codasyl database. Thus he is able to think                             The layout of the paper is as follows. 
about his r e t r i e v a l problem in terms of table                 Section { I I } describes some transformations which 
manipulations using the high level operations of                      affect the resultant program but are best carried 22 P. Gray and D. Moffat 


out on the relational algebra in Prolog. Section 
 { I I I } describes the basic notion of a traversal                   B. Relational Algebra 
and how it is used to represent a piece of 
program. Section {IV} describes the combination                             Relations can be treated as tables and new 
of traversals and how t h i s is used to b u i l d                     relations derived from them by the operations of 
descriptions of more complex programs. Section                         r e l a t i o n a l algebra. The operations used are 
 {V} i l l u s t r a t e s some of the Prolog used to combine          adapted from Codd. They are selection, 
traversals and discusses i t s advantages and snags                    projection, j o i n , extend and group_by (Gray 1981). 
in this application. The f i n a l section draws                       The join operation is a generalised intersection, 
conclusions for future work.                                           formed from the cartesian product of two relations 
                                                                      by selecting those tuples with matching values for 
A. Relation to Other Work                                              the common a t t r i b u t e s . A t y p i c a l query starts by 
                                                                       joining several r e l a t i o n s , then selects tuples, 
     Burstall and Darlington (1977) describe a                         then extends and or groups these tuples and 
system for specifying a program by recursion                           f i n a l l y projects to required columns. 
equations. These can be manipulated and play a 
role similar to r e l a t i o n a l algebraic expressions                   The relational algebra can be rewritten, just 
in our system. They discuss a way to rewrite the                      l i k e standard algebra, by using rewrite rules in 
abstract program given a concrete data                                PROLOG. We have 17 such rules with special 
representation in terms of a "coding function".                       predicates for handling commutation. A t y p i c a l 
However our use of a traversal represents the data                    transformation would move a p r o j e c t i o n 
in a rather different way. Apart from Tarnlund                        operation(%) in an expression involving j o i n ( * ) 
(1978) few have addressed the problem of e f f i c i e n t            and selection(;) to ease the join method. 
access to relations using information about the 
mode of storage. Tarnlund has studied ways to                          (STADIUM_ALLOCATION ; [stadium = "Cordoba''] %year, 
answer queries e f f i c i e n t l y by representing them as            group)*(GROUP_PLACINGS ;[placing=1] *year,group) 
theorems to be derived in the f i r s t order calculus                            becomes 
and looking for e f f i c i e n t derivations where                    (STADIUM_ALLOCATION ;[stadium="Cordoba"] * 
relations are held as a binary tree structure.                          GROUP_PLACINGS ; [placing = 1 ]) %year,group 

        II_ RELATIONAL A L G E B R A TRANSFORMATIONS 
                                                                         I I I TRAVERSALS of CODASYL DATABASE STRUCTURES 
     The user asks his query in r e l a t i o n a l algebra. 
We f i r s t describe t h i s and then see how the system                  Although the user thinks of relations just as 
improves the query by rewriting i t .                                 tables, they are actually complicated doubly-
                                                                      linked l i s t structures. At the second level of 
A. Relational Databases                                               transformation we need to represent possible paths 
                                                                      through these structures by traversals in order to 
     A r e l a t i o n is a set of tuples each containing             search for an e f f i c i e n t one. Thus we f i r s t 
values for a fixed set of a t t r i b u t e s . Viewed as a           explain the Codasyl "set" relationship used to 
table the a t t r i b u t e values are in columns. A                  l i n k d i f f e r e n t records. We then see how a 
r e l a t i o n a l database usually contains several                 number of alternative "base traversals" can be 
relations which have attributes in common. The                        defined for each relation and held on f i l e . 
examples used come from a database on World Cup 
f o o t b a l l results. The two relations of interest                     A Codasyl database consists of sets of records 
are shown in Table 1.                                                 of the same type which are linked by pointers to 
                                                                      other records in the set and to a common owner 
Table 1. R e l a t i o n a l View of World Cup Database               record which uniquely i d e n t i f i e s an instance of a 
                                                                      given set type. Figure 1 shows the linkages 
                                                                      between records in the World Cup database. 


                                                                      A. Traversals 

                                                                           We can now define a traversal of a r e l a t i o n 
                                                                      more precisely. It is a description of a piece of 
                                                                      code which realises the tuples of the r e l a t i o n one                                                                                                         P. Gray and D. Moffat 23 


at a time by accessing the records in some                            A.     Combination by JOIN 
sequence following the set pointers and modifying 
the values as necessary. Thus it is a generator                            Since Join is based on a cartesian product it 
for a r e l a t i o n . Corresponding to each relation                can be formed by a nested for loop with one 
stored in the database ( e . g . GROUP_PLACINGS) we                   i t e r a t i o n for each record type i n v o l v e d . This is 
hold on f i l e one or more base traversals. Each                     very similar to a traversal structure and it turns 
one is essentially a description of a piece of                        out that the traversal representing the j o i n can 
code with a number of nested loops.                                   often be formed just by concatenating parts of the 
                                                                      separate traversals {Bell 1980, Gray 1981}. The 
     We have a notation for traversals as follows.                    s e l e c t i o n s f o r matching are then performed 
Internally it is represented by a Prolog l i s t                      a u t o m a t i c a l l y by the f a c t t h a t a Codasyl owner 
structure. There are three obvious base traversals                    record w i l l in many cases be linked to j u s t those 
of STADIUM-ALLOCATION and two for GROUP_PLACINGS.                     records whose values would have been selected by 
Each {SA} t r a v e r s a l v i s i t s the same number of G A M E    the join operator! Let us consider examples of 
records, generating one tuple for each.                               this using 
                                                                               RES:= STADIUM-ALLOCATION j o i n e d _ t o G R O U P -
S(YEAR) -> D(GROUP) -> D(GAME) -> U(VENUE) {SA1}                      PLACINGS 
V(VENUE) -> D(GAME) -> U(GROUP) -> U(YEAR) {SA2} 
B(GROUP) -> U(YEAR) -> D(GAME) -> U(VENUE) {SA3)                           If we use S A 1 and G P 1 t h e n these both have 
S(YEAR) -> D(GROUP) -> D(LINK) -> U(TEAM) {GP1}                       "common s t a r t " section. 
B(GROUP) -> U(YEAR) -> D(LINK) -> U(TEAM) {GP2}                                S(YEAR) -> D(GROUP) 

                                                                      which generates the common a t t r i b u t e s in the two 
     Here S means a singular set a ccess to visit-                    cases. If we concatenate the traversals keeping 
a l l records of a given type (there is only one set                  one copy of the common s t a r t we get 
owning a l l year records), D mean go down to v i s i t 
a l l member records belonging to the given owner                     S(YEAR) -> D(GROUP) -> D(GAME) -> U(VENUE) -> 
using the appropriate set type ( i f this i s                                                  D(LINK) -> U(TEAM) 
ambiguous it is specified) and U means go up to                       we can also get in the other order :-
v i s i t the owner of a given record, V means direct                 S(YEAR) -> D(GROUP) -> D(LINK) -> U(TEAM) -> 
access to the record containing a value (usually                                                D(GAME) -> U(VENUE) 
given by selection). B means vi it every record 
of that type in the database, In an A l g o l - l i k e 
syntax we can represent the corres ponding code for                        Both traversals correspond to nested loop code 
SA1 as : -                                                            which w i l l produce the desired tuples though in a 
                                                                      different sequence. Which is best depends on 
for each Y E A R record do                                            subsequent selections. If a selection on 
  for each G R O U P record owned by Y E A R do                       " p l a c i n g = 1 " is made a f t e r "D(LINK)" then the 
     for each G A M E record owned by G R O U P do                    second method is best as it v i s i t s fewer records. 
       for the VENUE owner of G A M E do 
          p r i n t YEAR.year, GROUP.group, GAME.game,                     One can also join traversals where the head of 
                  VENUE.stadium, GAME.date.                           one traversal matches the t a i l or middle of the 
                                                                      second. We can do this with the alternative 
                                                                      traversals SA2 & GP2 g i v i n g :-
     Thus each arrow in a traversal represents an 
inner level of nested code. Note that the record                      V(VENUE) -> D(GAME) -> U(GROUP) -> U(YEAR) -> 
g e n e r a t i o n s such as D(GAME) in SA3 must f o l l o w                                 D(LINK) -> U(TEAM) 
those such as B(GROUP), which generates the owner 
f o r G A M E , but they need not be c o n s e c u t i v e .               We notice here that a B(GROUP) since it v i s i t s 
                                                                      a l l records can match a U(GROUP) which v i s i t s only 
                                                                      certain records because j o i n has the properties of 
    IV COMBINATION & MODIFICATION of T R A V E R S A L S              an intersection. 

     Corresponding to every algebraic operation on                         The second traversal (using SA2,GP2) would be 
a given r e l a t i o n there is a modification to I t s              preferred if a subsequent s e l e c t i o n were made on 
traversal which produces a derived t r a v e r s a l ,                stadium as it could use V(VENUE) e f f i c i e n t l y . 
which is a generator for the new r e l a t i o n . Thus               General conditions for choosing an optimum are 
the method is complete. This derived traversal can                    discussed in (Esslemont & Gray 1982). 
then be modified by the next operation and so on. 
For example a selection can be done by inserting 
" i f (year=1978) then" just after "for each YEAR                         1 O V E R V I E W of the JOIN ALGORITHM in P R O L O G 
record do". The resulting traversal depends 
somewhat on the order of application of operations                         The basic method is given in Figure 2. It 
specified by the user. However many of these are                      starts by reading in a number of traversals for 
commutative and the order of others can be                            each r e l a t i o n and holds them as unit clauses 
improved by top level r e w r i t i n g .                             trav(X). The term X contains a record generation 
                                                                      l i s t giving the sequence of record and set 
                                                                      accesses, which we have symbolised. The procedure 
                                                                      j o i n trav (see below) then picks the f i r s t clause  24 P. Gray and D. Moffat 


 for each r e l a t i o n and t r i e s to f i n d an overlap in                                                VI CONCLUSIONS 
 accordance w i t h the c o n d i t i o n s given in ( B e l l 
 1980). Prod overlap is c a l l e d twice w i t h the                                       Although the direct use of Codasyl databases 
 record generation l i s t s reversed in order to t r y                               for storage of facts is unlikely in A.I. the 
 the two cases of common s t a r t and l i k e w i s e f o r                          general problem of generating programs that 
 head to t a i l (IV.A). If t h i s is successful the                                 traverse and manipulate list structures is 
 r e s u l t traversal is asserted. A ' f a i l ' clause then                         important and the techniques described could have 
 causes b a c k t r a c k i n g and another p a i r of t r a v e r s a l              other applications. The methodology used is :-
 clauses i s chosen thus t r y i n g a l l combinations o f 
 the operand t r a v e r s a l s . The ' f a i l ' also has the                              1. Arrange that the specification of the 
 e f f e c t of r e c l a i m i n g much-needed space once the                        result to be computed by the generated program is 
 t r a v e r s a l i s safely asserted. I f a l l attempts                            given in functional form such as relational 
 f a i l an o p e r a t i o n node to j o i n by sort-merge is                        algebra but not in procedural form with loops and 
 inserted.                                                                            assignment. This is easier for the user to think 
                                                                                      about and also does not commit him to an 
       It is p o s s i b l e f o r a t r a v e r s a l to pass through                unsuitable representation. It allows easier 
 two i n s t a n c e s of the same r e c o r d t y p e . In o r d e r                 overall program transformation; in particular some 
 to d i s t i n g u i s h which instance is being used f o r                          transformations are easier in the functional form 
 a c c e s s i n g subsequent r e c o r d types i t i s necessary                     than the traversal form. 
 to assign a unique number to each record 
 generation element in the t r a v e r s a l .                                              2. Prolog is particularly suitable for this 
 Correspondences are e s t a b l i s h e d by clauses of the                         work because of its good list-matching and back•
 form equiv_curr(X.Y).                                                                tracking facilities. The use of "assert and fail" 
                                                                                     was necessary, but given this it out-performs 
                                                                                      Pascal by running larger problems in the PDP 11 
                                                                                      address space in similar time. 


                                                                                                                   ACKNOWLEDGEMENTS 

                                                                                            The r e w r i t e r u l e s described in s e c t i o n II were 
                                                                                     developed by T.N. S c o t t (now at SCICON, London). 
                                                                                     Ben du Boulay gave us many v a l u a b l e comments 
                                                                                     d u r i n g the p r e p a r a t i o n of t h i s paper. The 
                                                                                     generous a s s i s t a n c e of the U.K. SERC is a l s o 
                                                                                     acknowledged. 

                                                                                                                    REFERENCES 


                                                                                      [ 1 ] B e l l R., "Automatic Generation of Programs 
A. Effect of Joining Modified Traversals                                                     f o r R e t r i e v i n g I n f o r m a t i o n from CODASYL Data 
                                                                                             Bases", PhD T h e s i s , Aberdeen U n i v e r s i t y , 1 9 8 0 . 
      T r a v e r s a l s which have been m o d i f i e d by 
s e l e c t i o n , extension, p r o j e c t i o n or group-by w i l l               [2] B u r s t a l l R.M. & Darlington J. "A 
have elements in t h e i r record g e n e r a t i o n l i s t s to                           Transformation System f o r Developing 
i n d i c a t e these operations(operation nodes). Such                                      Recursive Programs", JACM, (1977), pp 4 4 - 6 7 . 
t r a v e r s a l s are joined as before but with a l l 
operation nodes being copied d i r e c t l y i n t o the                             [3] Esslemont P.E. & Gray P.M.D. "The 
result traversal.                                                                            Performance of a R e l a t i o n a l I n t e r f a c e to a 
                                                                                             Codasyl Database" in Proc. BNC0D-2, ed. 
B. Comparison of Pascal and Prolog Versions                                                  S.M.Deen and P.H. Hammersley, B r i s t o l 1982. 

      The Pascal v e r s i o n takes several thousand                                [ 4 ] Gray, P.M.D. "The GR0UP_BY Operation in 
l i n e s whereas Prolog needs s e v e r a l hundred and is                                  R e l a t i o n a l A l g e b r a " , in "Databases (Proc. 
much e a s i e r to read and modify. Pascal is a very                                        BNC0D-2)" ed. S.M. Deen & P. Hammersley 
much wordier language f o r l i s t p r o c e s s i n g . Also                               (1981),pp. 84-98. 
one has to w r i t e m u l t i p l e v e r s i o n s of many 
f u n c t i o n s such as "member" because the type of                               [ 5 ] Gray, P.M.D. "Use of Automatic Programming 
l i s t argument must be known at compile t i m e .                                          and Simulation to F a c i l i t a t e Operations on 
Further the use of Prolog D e f i n i t e Clause Grammars                                    Codasyl Databases" in " S t a t e of the Art 
saves pages of r e c u r s i v e Pascal procedures to                                        Report DATABASE", Series 9 No.8, ed. 
parse base t r a v e r s a l s e t c . . F i n a l l y because                               M.P.Atkinson, Pergamon I n f o t e c h (Jan 1982),pp 
Pascal has no backtracking f a c i l i t i e s it has to                                     346-369. 
keep r e t u r n i n g sets of a l t e r n a t i v e combined 
t r a v e r s a l s and c u r r e n t l y runs out of l i s t space on               [ 6 ] Tarnlund S-A, "An Axiomatic Data Base 
l a r g e q u e r i e s . The Prolog v e r s i o n can handle these                          Theory" in "Logic and Data Bases", ed. 
because it reclaims space f o l l o w i n g f a i l .                                        G a l l a i r e & Minker (1978), pp. 259-289. 