  Progression of Situation Calculus Action Theories with Incomplete Information

                                 Stavros Vassos  and  Hector Levesque
                                    Department of Computer Science
                                         University of Toronto
                                        Toronto, ON, CANADA
                             {stavros,hector}@cs.toronto.edu

                    Abstract                          formed. This is a fundamental reasoning problem and a nec-
                                                      essary prerequisite to other forms of reasoning in dynamic
    In this paper, we propose a new progression mecha- domains such as planning and high-level program execution.
    nism for a restricted form of incomplete knowledge While the projection problem can be solved by regression or
    formulated as a basic action theory in the situation by progression [Lin, 2007], it is generally agreed that regres-
    calculus. Speciﬁcally, we focus on functional ﬂu- sion alone is impractical when the number of actions is large
    ents and deal directly with the possible values these [Lakemeyer and Levesque, 2007].
    ﬂuents may have and how these values are affected   While formalisms based on logic can represent a general
    by both physical and sensing actions. The method  form of incomplete knowledge in a straightforward way, they
    we propose is logically complete and can be cal-  would then require systems based on some form of theorem-
    culated efﬁciently using database techniques under proving. It is quite typical of the practical implementations
    certain reasonable assumptions.                   of these formalisms to forego this generality and either insist
                                                      on complete knowledge or to employ an inference mecha-
1  Introduction                                       nism that is logically incomplete. For the situation calculus,
                                                      the former approach was taken in the practical implementa-
This paper deals with the problem of getting a robot or agent tions of the GOLOG agent programming language [Levesque
to reason efﬁciently about action and change under the fol- et al., 1997; De Giacomo and Levesque, 1999]; the latter was
lowing three conditions:                              taken by Liu and Levesque [2005] where incomplete knowl-
 1. the agent has incomplete knowledge about certain chang- edge was dealt with using a logically incomplete form of pro-
    ingvaluesintheworld(ﬂuents);                      gression. In the FLUX implementation of the ﬂuent calculus
                                                      [Thielscher, 2004] incomplete knowledge is dealt with using
 2. the agent has both physical (world-changing) and sens-
                                                      constraint rules and a logically incomplete constraint solver.
    ing (knowledge-producing) actions at its disposal;
                                                        In this paper, we propose a new progression mechanism
 3. the agent is long-lived and may have performed thou- for a restricted form of incomplete knowledge formulated as
    sands or even millions of actions to date.        a basic action theory in the situation calculus. Speciﬁcally,
These conditions are typical of robots or agents that must op- we focus on functional ﬂuents and deal directly with the pos-
erate autonomously over long periods of time, such as the sible values these ﬂuents may have and how these values are
agents found in role-playing games. For example, an agent affected by both physical and sensing actions. Our approach
may not know the relative locations of other agents or impor- handles a restricted form of (functional) local-effect action
tant objects, but may be able to move and to sense what agents theories but generalizes the Liu and Levesque account where
and objects are nearby. The challenge is to reason efﬁciently progression is logically complete only for action theories that
about the overall state of the world in this setting, taking into are context complete, that is, where there is complete knowl-
account what has been done and what has been sensed, as a edge about the context of any context-dependent successor
large number of such actions are performed.           state axioms. Our method can be calculated efﬁciently using
  There is a signiﬁcant body of work on logical formalisms database techniques (related to those of [Antova et al., 2007])
for dynamic domains that are appropriate here, such as the under certain reasonable assumptions. To our knowledge, no
situation calculus [McCarthy and Hayes, 1969],theevent other logical formalism handles progression (and therefore
calculus [Kowalski and Sergot, 1986], and the ﬂuent calcu- the projection task) in a way that is both logically complete
lus [Thielscher, 1999]. In logical terms, we seek an efﬁcient and practical under the three conditions listed above.
solution to the projection problem [Reiter, 2001]: given an The rest of the paper is organized as follows. In Sec-
action theory that speciﬁes the preconditions and effects of tion 2, we review the situation calculus notation, as well as
actions (including sensing), and a knowledge base about the the deﬁnitions of projection and progression. In Section 3,
initial state of the world, determine whether or not some con- we discuss the notion of a possible value and deﬁne the local-
dition holds after a given sequence of actions has been per- effect and bounded action theories. In Section 4, we present a

                                                IJCAI-07
                                                  2029progression mechanism for local-effect and bounded theories 7. E is a set of unique-names axioms for constants along
and in Section 5, we discuss the complexity of the approach. with a domain closure axiom for sort object.
In Section 6, we discuss related work. Finally, in Section 7, To describe actions along with their sensing results, we use
we draw conclusions and discuss future work.          terminology as in [De Giacomo et al., 2001].Ahistory h is
                                                      a sequence (a1,r1) · ...· (an,rn), where each ai is a ground
2  Situation calculus theories and progression        action term and ri is a constant that represents the action’s
                                                      sensing outcome. We assume that non-sensing actions always
The situation calculus [McCarthy and Hayes, 1969] is a                                ( )
ﬁrst-order language with some limited second-order features return the ﬁxed result c.Weuseend h as an abbreviation
speciﬁcally designed for representing dynamically changing for the ground situation term that corresponds to h.Thisis
                                                      deﬁned as follows: end(h) is S0 for the empty history, and
worlds. The language has disjoint sorts for actions, situations, ( · ( )) (  ( ))           S( )
and objects (everything else).                        end h  a, r  is do a, end h . Similarly, h is the set
                                                      of atoms that describe the sensing results in . S( ) is an
  A situation represents a world history as a sequence of ac-                                h    h
                                                      abbreviation for {sr(ai, end(hi)) = ri | 1 ≤ i ≤ n},where
tions. The constant S0 is used to denote the initial situation                      (    )·  ·(        )
where no actions have been performed. Sequences of actions hi is the sub-history up to action ai, a1,r1 ... ai−1,ri−1 .
are built using the function symbol do, such that do(a, s) de- A situation-suppressed expression is a formula in the lan-
                                                      guage without Possand sr, and with all situation arguments
notes the successor situation resulting from performing ac-       [ ]
tion a in situation s.Aﬂuent is a predicate or function whose suppressed. φ σ denotes the situation calculus formula ob-
                                                      tained from φ by restoring the situation argument σ into all
last argument is a situation, and thus whose value can change                                   C
from situation to situation. Actions need not be executable in ﬂuents in φ.Weusea, b, c, d, e to range over and f,g
                               (   )                  to range over F.Aprimitive ﬂuent term is a ground term
all situations, and the predicate Poss a, s states that action                                 (    )
a is executable in situation s. Actions have sensing results, that mentions at most one ﬂuent symbol, e.g. f c, S0 ,and
                (   )                                 a primitive atom is one that mentions at most one primitive
and the function sr a, s denotes the sensing result of action        (    )=     (    )=
a when executed in situation s [Scherl and Levesque, 2003]. ﬂuent term, e.g. f c, S0 d, f c, S0 x. A primitive for-
                                                      mula (sentence) is a formula (sentence) that mentions only
  Here, we restrict our attention to a situation calculus lan-
                                                      primitive atoms. Note that quantiﬁcation is allowed in prim-
guage L that includes only the function symbols do, sr, S0
                                                      itive formulas but not when the variable appears as an argu-
as described above, the predicate symbol Poss, a ﬁnite num-
                                                      ment of a ﬂuent. Finally, we use τ,u to denote a situation-
ber of functional1 ﬂuent symbols F, a ﬁnite number of action
                                                      suppressed primitive ﬂuent term.
function symbols A whose arguments are of sort object, and
                                                        In this notation, the projection task [Reiter, 2001] is the fol-
a ﬁnite number of constant symbols C of sort object.
                                                      lowing: given a history h and a situation-suppressed sentence
  Within L, we can formulate action theories that describe
                                                      φ, determine whether or not D∪S(h) |= φ[end(h)].Wepro-
how the world changes as the result of the available actions.
                                                      pose to solve it for certain restricted action theories using a
We focus on a variant of the basic action theories [Reiter,
                                                      form of progression, which we deﬁne along the lines of [Lin
2001]. An action theory D has the following form:2
                                                      and Reiter, 1997] and [Liu and Levesque, 2005].LetI be a
                                                                      I        E
    D  = Dap ∪Dss ∪Dsr  ∪Duna  ∪D0  ∪Dfnd  ∪E         standard model iff satisﬁes .
                                                                                                        
                                                      Deﬁnition 1. Let I  be a standard model of D0.   I
 1. D   is a set of action precondition axioms, one per ac-
      ap                                              is a successor model of I  wrt a world-changing ac-
    tion symbol A, of the form Poss(A(y),s) ≡ Π (y,s).              
                                           A          tion A(e) iff I  is a  standard model and  for any
                                                                                       
 2. Dss is a set of successor state axioms (SSAs), one for primitive ﬂuent atom f(c)=d[S0], I |= f(c)=d[S0] iff
    each ﬂuent symbol f, of the form f(x, do(a, s)) = v ≡ I|=Φf (c, A(e),d)[S0]. For a sensing action A(e) with
                                                                                              
    Φf (x, a, v, s). SSAs characterize the conditions under result b, I is a successor model of I iff I is a stan-
                                                                       
    which the ﬂuent has a speciﬁc value at situation do(a, s) dard model, and I |= f(c)=d[S0] iff I|= f(c)=d[S0]
    as a function of situation s.                     and I|=ΘA(e, b)[S0].
                                                                    
 3. Dsr is a set of sensing-result axioms (SRAs), one for Deﬁnition 2. D0 is a progression of D0 wrt (A(e),b) iff the
                                                                         
    each action symbol A, of the form sr(A(y),s)=r ≡ standard models of D0 are exactly the successor models of
    ΘA(y,r,s). SRAs relate sensing outcomes with ﬂuents. D0 wrt (A(e),b).

 4. Duna is the set of unique-names axioms for actions: One step of progression is a solution to one step of projection
    A(x) = A(y),andA(x)=A(y) ⊃ x = y.         in the sense that if h =(a, r) and D∪S(h) is consistent, then
                                                                              
                                                      D∪S(h)   |= φ[end(h)] iff D0 |= φ[S0].
 5. D0 is a set of axioms describing the initial situation S0.
    D
 6.   fnd consists of the axioms for equality and a set of do- 3 Possible values and bounded action theories
    main independent foundational axioms which formally
    deﬁne legal situations.                           Although we are assuming that every ﬂuent is functional, and
                                                      thus has a single value, we do not assume that this value is
  1Relational ﬂuents can be represented by functional ﬂuents that known. For example, to say that the value of the ﬂuent age
are forced to take only values true/false. Non-ﬂuent functions and in situation S0 might be 19, 20 or 21, D may contain the fol-
predicates can be formalized as unchanging ﬂuents [Reiter, 2001]. lowing disjunction: (age =19∨ age =20∨ age = 21)[S0].
  2We will be omitting leading universal quantiﬁers.  Thus, we say that 19, 20 and 21 are the possible values that

                                                IJCAI-07
                                                  2030the ﬂuent age can take.3 As another example, suppose that the possible values of ﬂuent terms as above. To ensure that
we have the following sentence in D:                  we get a T that correctly captures any constraints among the
   (  =1∨    =0)∧   ( =1∨     =0)∧   ( = )[  ]       ﬂuents, we will restrict the form of the basic action theory.
    f      f         g      g        f   g  S0 .      The main idea behind what we call a bounded action theory
In this case, the ﬂuents f and g each have two possible val- is that D0 will explicitly list the initial possible values of the
ues. But because of the constraint between them, we should ﬂuents according to some grouping T, and that the bodies of
consider the pair  f,g
 which has two (rather than four) pos- the successor state and sensing-result axioms will be suitable
                                                                                  
sible values:  1, 0
 and  0, 1
. More generally, we have the for specifying a new grouping T such that what is known
following deﬁnition:                                  about the ﬂuents after some action is performed is accurately
                                                                               T 
Deﬁnition 3. Let τ be a tuple of distinct situation-suppressed captured by the new grouping .
primitive ﬂuent terms. A ﬁnite set of constant tuples V = Deﬁnition 5. Let T = {τ1,...,τ k} be a set of tuples of
{c1,...,c n}, each of the same length as τ is the set of possi- situation-suppressed primitive ﬂuent terms such that every
                                                                                                       D
ble values for τat history h iff V is the smallest set such that primitive ﬂuent term appears in exactly one τi. We say that
D∪S(   ) |=( n    =   )[   ( )]                                                 T
      h      i=1 τ  ci end h . Each element of V is a is local-effect and bounded by iff the following all hold:
possible value of τ at h.
                                                        1. D0 = {α1[S0],...,αk[S0]}, where for each i,thereisa
                             D∪S(    )                                                            =
Note that V is the empty set only if h is inconsistent.   set C of constant tuples such that αi is c∈C τi c.
  When we say that a sentence is possibly true, we mean 2. Each successor state axiom in D has the form
that it is entailed for some possible value of the ﬂuents in                         ss
the sentence, taking into account that some ﬂuents may be       f(x, do(a, s)) = v ≡ γf (x, a, v)[s] ∨
                                                                                                 
grouped with others because of constraints.                            f(x, s)=v ∧ (¬∃v )γf (x, a, v )[s],
Deﬁnition 4. Let h be a history and let φ be a situation- where γ (x, a, v) is a disjunction of formulas γi (x, a, v)
                             T = {         }                     f                               f
suppressed primitive sentence. Let τ1,...,τ k beaset    of the form ∃z(a = A(y) ∧ ψ(y)),y contains x ∪{v},
of tuples of situation-suppressed primitive ﬂuent terms such z is the remaining variables of y,andψ is a primitive
that every primitive ﬂuent term in φ appears in exactly one τi. formula that is called the context of γi (x, a, v).
We say that φ is possibly true at history h wrt T iff E|= φ,                            f
       
where φ is φ with each τ ∈Treplaced by one of its possible 3. Each sensing result axiom in Dsr has the form
                                                            (  ( ) )=     ≡ Θ  (   )[ ]      Θ  (   )
values at h. (A tuple  τ1,...,τn
 is replaced by  c1,...,cn
 sr A y ,s r     A y,r s , where A y,r is a
by replacing each term τi by the corresponding ci.)       primitive formula.
  We say that φ is known to be true at h wrt T iff ¬φ is not
                                                        4. Each precondition axiom in  Dap  has the  form
possibly true at h wrt T .
                                                          Poss(A(y),s) ≡ ΠA(y)[s],whereΠA(y) is a primitive
  It is not hard to see that a sentence φ is known to be true at formula.
h iff for every possible value of the ﬂuents at h, the substituted
                                                       5. Each action symbol A is either a sensing action or a
φ obtained is indeed entailed. But this is not the same thing world-changing action and appears exclusively in ex-
             [   ( )]                D∪S(    )
as saying that φ end h itself is entailed by h .This      actly one SRA or in some SSAs, respectively.
depends on how we group the ﬂuent terms into tuples.
                           D                            6. If action symbol A appears in γf then it cannot appear
Example 1. Consider a theory containing the above sen-    in γ for any ﬂuent g that appears in γ .
tence about f and g.Leth be the empty history and let φ be   g                            f
(f = g). Then we have the following:                   Local-effect and bounded action theories have the property
                                                      that for any pair of ground action term A(e) and sensing re-
 1. D∪S(h)   |= φ[end(h)];                                      Θ  (   )    Π  ( )
                                {    }                sult b, both A e, b and A e are primitive sentences and
 2. φ is not known to be true at h wrt f, g ;         γi (x, A(e),v) is logically equivalent to (x = c ∧ v = d ∧ φ),
 3. φ is known to be true at h wrt { f,g
}.            f
                                                      where c, d are contained in e and φ is a primitive sentence.
                             T  =  {   }
What is going on here is that for   f, g we look at   These theories are restricted in that if an action A(e) changes
the possible values of f and g independently, including cases the value of a ﬂuent term f(c),thenc is contained in the ar-
where f = g.ForT  = { f,g
} on the other hand, we only guments of the action.
look at the two possible values for  f,g
, and so rule out the
            =
cases where f g.                                      4   Progression using databases
  This idea of ﬂuent terms taking values independently is
                                                      GivenanactiontheoryD  that is local-effect and bounded by
very much related to the weak disjunctive knowledge prop-
                                                      T, we will use a database to represent the possible values for
erty deﬁned in [Petrick and Levesque, 2002; Petrick, 2006]
                                                      each τ in T, as a way to capture the models of D0.Thenwe
for an epistemic setting of the situation calculus. Our account
                                                      will deﬁne a procedure PROG that transforms this database
here generalizes this idea by allowing tuples of ﬂuent terms.
                                                      into one that represents a progression of D0.
  What we will be proposing in this paper, is a method of
                                                        We ﬁrst review some basic notions of relational database
computing progression under incomplete knowledge that uses
                                                      theory. Let L be a ﬁrst-order language with a ﬁnite number
  3Note that this notion of possibility has an epistemic ﬂavor and of predicate symbols and a ﬁnite number of constant symbols
is distinct from the physical possibility of action execution, as char- C. A database instance for the language L is a ﬁrst-order
acterized by Poss.                                    structure I such that the domain of I is C, = is interpreted

                                                IJCAI-07
                                                  2031  φ := DBQ(ΘA(e, b))                                   for each f ∈Fdo
    :=   ·   · ··· ·                                               i (    )    (     )
  τ  τ1 τ2      τk,                                   for each γf x, a, v in γf x, a, v that mentions A do
     where Rτ1 ,...,Rτk are the relation names in φ       c := the subset of e that corresponds to x
  T := T−{τ1,...,τk} + {τ}                               d := the element of e that corresponds to v
  I := I  −{            } + {  }
   0    0    Rτ1 ,...,Rτk  Rτ ,                          u := the element of T that mentions f(c)
                                                              +
     where the extension of is (I0)                            :=   ( ( )) ∧    ( i (   ( ) ))
                         Rτ  φ                             φ     Ru ξ u  DBQ  γf x, A e ,v
                                                            φ−:=  same as φ+ but with context formula negated
    Figure 1: Progress I0 wrt sensing action A(e) and b      +     +
                                                            Q   := φ (I0) but with the column corresponding
                                                                to ξ(f(c)) replaced by the value d in all rows
as identity, and each constant is interpreted as itself. Let x, y − := −(I )
be tuples of variables. An x-relation over I is a ﬁnite set of Q  φ   0
                                                            τ := τ1 · τ2 · ··· · τk,
mappings ζ from x into C, which we write as {ζ :[x →C]}.                                             +
                                 =           
                  where Rτ1 ,...,Rτk are the relation names in φ
Let φ be a formula with free variables x x1,...,xn .The    T  := T−{          } + { }
             I                                                         τ1,...,τk  τ
answer to φ wrt is the x-relation                          I  := I −{             } + {  }
                                                             0     0   Rτ1 ,...,Rτk  Rτ ,
     (I)={    :[ →C]  |I|=   ( ( )      (  ))}                                            +    −
    φ       ζ  x          φ ζ x1 ,...,ζ xn   .                 where the extension of Rτ is Q ∪ Q
                                                          end for
Deﬁnition 6. Let L0 be the language that has the constants
                                                        end for
in C, and for each τ ∈T the relation name Rτ with arity
| |          I                           D
τ .Wedeﬁne   0,thedatabase that represents 0, as the    Figure 2: Progress I0 wrt world-changing action A(e)
database instance for language L0 such that the interpretation
of each Rτ is the set of constant tuples C that appear in the result pair such that D∪S((A(e),b)) is consistent. Let I0
corresponding α[S0] ∈D0, in item 1 of Deﬁnition 5.    be the database that represents D0. Then PROG[I0,A(e),b]
  The following deﬁnition shows how to transform a primi- represents a progression of D0 wrt (A(e),b).
tive situation calculus formula φ into a query DBQ(φ) of L0. The proof of Theorem 1 follows from the following lemma
We will need to use a set of new variables, and we assume and the property of bounded theories listed in item 6 of Def-
that there is a mapping ξ from primitive ﬂuent terms to these inition 5 which implies that the processing of ﬂuents in the
variables such that each term is mapped to a distinct variable. main loop of Figure 2 can be done in any order.
Deﬁnition 7. Let φ be a situation-suppressed primitive for- Lemma 2. Let φ be a situation-suppressed primitive sen-
          
mula. Let φ be φ with each primitive ﬂuent term replaced by tence. Then, φ is possibly true at the empty history wrt to
                                             
the corresponding variable wrt the mapping ξ.LetT ⊆T  T iff there exists a standard model of D0 that satisﬁes φ[S0]
                               
be the smallest set such that τ ∈T if some element of τ iff DBQ(φ)(I0) is non-empty.
appears in φ.WedeﬁneDBQ(φ)  as the formula
                                                       We conclude this section with an example.
                                 
                    Rτ (ξ(τ)) ∧ φ                   Example 2. Consider the following scenario where an agent
                τ∈T                                 lives in a fantasy world of some role playing game. The agent
                                                      is trapped inside a dungeon and in order to get out she has
                                        [I   ( )  ]
  Now, on to progression. Here is how PROG 0,A e ,b  to unlock the main door and climb out. Unfortunately, the
works when A is a sensing action: The ﬂuents that are af- main door can only be unlocked by casting a magical spell.
                         Θ  (   )
fected are those that appear in A e, b . We use the concate- In particular, the agent has to cast the spell while being in the
                 ∈T
nation of all the τi that mention these ﬂuent terms to same room with a magical orb that is hidden somewhere in
construct a new relation. The tuples in this relation will be the dungeon, otherwise the spell has no effect. Finally, even
                          (Θ  (  ))
the answers to the query DBQ A e, b . The progression though the agent cannot ﬁnd the magical orb, she knows that
for a world-changing action is more complex. For each ﬂuent it is hidden somewhere in rooms R1 or R2 of the dungeon.
     ( )                                     ( )
term f c that is potentially given value d by action A e ac- For simplicity we use three (functional) ﬂuents to represent
                           ∈T                   ( )
cording γf , we collect all the τi that contain either f c this scenario: hero, orb, door which hold the location of the
or a ﬂuent term in the context, and we concatenate them to- agent, the location of the orb, and the state of the door respec-
gether to make a new τ. We then assign Rτ to be the tuple of tively. We use two actions: go(y), the agent moves to room
all possible values for these terms, using both the new value y; cast(y), the agent casts a spell that magically instructs the
      ( )
d for f c when the context is true and the previous values door to change to state y. Also, we use the constants Cl, Op
when the context is false.                            to represent the state of the door (closed, open) and R1, R2
Deﬁnition 8. Let I0 be a database, A(e) be a ground ac- for the two rooms.
tion term, and b be a sensing result. Then the procedure Let D be an action theory such that D0 consists of the
PROG[I0,A(e),b] is deﬁned as follows:                sentences door = Cl[S0], (orb = R1 ∨ orb = R2)[S0],and
                                                      hero=R1[S0]; Dap consists of precondition axioms such that
 1. if A is a sensing action, then do as in Figure 1; Π       Π                     D
 2. if A is a world-changing action, then use Figure 2. go and cast are always true; and ss consists of the SSAs
                                                      such that γ  (a, v)[s] is a = go(v), γ (a, v)[s] is false,
Now we are ready to present our main result:                   hero                    orb
                                                      and γdoor(a, v)[s] is a = cast(v) ∧∃z(hero = z ∧ orb = z).
Theorem 1 (Progression). Let D be a local-effect action the- D is local-effect and bounded by T = {agent, orb, door},
ory that is bounded by T and (A(e),b) be an action-sensing but it is not context-complete. The following ﬁgure shows

                                                IJCAI-07
                                                  2032the database that represents D0 and the transformed database such as hero in Example 2. This can be avoided by aug-
after applying PROG once for action cast(Op),andafter menting PROG to check, as a ﬁnal step, whether some of the
applying PROG two more times for go(R2) and cast(Op). updated ﬂuents have only one possible value and should be
                                                      stored separately. Finally, following the proof of the com-
hero   orb  door   hero  orb door   hero  orb door
                                                      plexity result about GFk in [Liu and Levesque, 2003], note
 R1    R1    Cl     R1   R1  Op      R2   R1  Op      that n is the size of the largest relation in I0. Hence, under
       R2           R1   R2   Cl     R2   R2  Op      the stated assumptions the complexity of PROG[I0,A(e),b]
                                                      is  (  K+1)  where is the depth of D,and   as above.
Note that after the three steps of progression the ﬂuent door O lN ,    l                   K, N
has exactly one possible value, Op, as intended.
  Finally, to justify concerns about why this approach is bet- 6 Related Work
ter than just calculating all the possible worlds, the reader One of the main differences between our approach and most
should imagine there being a large number of ﬂuents with of the related work in the literature is that we work with
unknown value (e.g. other doors, objects) for which the data- functional ﬂuents. Our intuition is that when it comes to
base remains unchanged. A more detailed discussion follows. restricted forms of incomplete knowledge, functional ﬂuents
                                                      with possible values are an attractive alternative. In a for-
5  Complexity analysis                                malism with relational ﬂuents (such as [Son and Baral, 2001;
                                                      Liu and Levesque, 2005]) it is not clear how to handle infor-
We ﬁrst review some results about the complexity of database           (    =19∨        =20∨       =  21)
queries of a certain form. The guarded fragment GF is the mation of the form age    age        age
smallest set of formulas such that any existentially quantiﬁed without using a general method for unrestricted disjunctions,
sub-formula φ is conjoined with a guard, i.e. an atom contain- which will have computational problems of its own. Our way
ing all the free variables of φ [Andr´eka et al., 1998].In[Gott- of handling the disjunctions by using a database of possible
lob et al., 2003] GF was extended to the k-guarded fragment values is similar to ideas in [Antova et al., 2007] (where, how-
                                                      ever, actions and progression are not handled).
GFk where up to k atoms may jointly act as a guard. When I
is a database of size n such that the domain and all relations One serious limitation of our approach is that we are forced
                                                      to represent all the primitive ﬂuent terms in the language.
are sorted, and φ ∈ GFk is a formula of size l,thenφ(I) can
be computed in time O(lnk) (see [Liu and Levesque, 2003]). Also, the theories we are dealing with are essentially propo-
  The complexity of PROG(I0,A(e),b) is dominated by the sitional and we insist that an action does not affect both a
evaluation of database queries of the form DBQ(φ).By  ﬂuent and its context. The approach of [Liu and Levesque,
Deﬁnition 7, it follows that DBQ(φ) is a k-guarded for- 2005] does not suffer from these limitations. Nevertheless,
mula, where k is the number of relation names that appear our progression mechanism is always logically correct, un-
in DBQ(φ). For any theory D, we let the width of D be the like the weak progression mechanism that is employed by
maximum  k and the depth of D be the maximum length over Liu and Levesque which is logically complete only for the-
                 i (    )    Θ (   )   D              ories that are context-complete. An example of the theories
all of the formulas γf x, a, v and A y,r in .ByDeﬁni-
tion 8, we get the following:                         that we can handle better is illustrated at the end of Section 4.
                                                        One approach that is very similar in spirit to our own is that
               D
Theorem  3. Let   be a local-effect action theory that is of the FLUX system for implementing ﬂuent calculus theo-
          T     ( ( ) )
bounded by  and A  e ,b be an action-sensing result pair. ries [Thielscher, 2004].FLUX can express incomplete knowl-
   I                           D
Let 0 be the database that represents 0. Then, the complex- edge in the form of ﬁnite domain arithmetic constraints that
          [I    ( ) ]    (  k+1)
ity of PROG 0,A e ,b is O ln   ,wherel is the depth  are handled by constraint handling rules [Fr¨uhwirth, 1998].
                 D                  I
and k is the width of , and n is the size of 0.       When incomplete knowledge is progressed in FLUX,new
  The tractability of the approach relies on the assumption constraints that represent the progression are appended to the
that the width of D is often a small constant K. (Note that the constraint store. When ﬂuents remain unknown and are con-
width of D is bounded by what we are calling the depth of D.) stantly progressed, the “chain” of stored constraints becomes
There is also one more issue: As we saw in Example 2, after a larger which, apart from affecting the efﬁciency of reasoning,
progression step is performed some of the relations in I0 may can lead to failure due to lack of memory resources. So while
be joined together in the updated database and eventually this FLUX can be more efﬁcient in computing the progression of a
can lead to an exponential blow-up of the size of the database. state after an action has been executed, appending constraints
  Nevertheless, we expect that in real-world domains there is can be problematic for long-lived agents.
a small upper-bound on the number of primitive ﬂuent terms Another similar approach is that of [Funge, 1998], deal-
that are both unknown and mutually constrained at any his- ing with real-valued functional ﬂuents. Unlike our approach
tory, and thus need to appear in the same relation in I0.Also though, Funge’s does not provide a mechanism for joining
assuming that there is a constant upper-bound for the number ﬂuents together whenever they are related with some con-
of possible values that a single ﬂuent may have at any history straint. Other related approaches for doing approximate pro-
then the size of the largest relation in I0 is always bounded gression of action theories include (approximate) logical ﬁl-
by a large constant N.                                tering [Amir and Russell, 2003], and the 0-approximation se-
  With the current deﬁnition of PROG, the size of the re- mantics for an extension of the action language A [Son and
lations in I0 may not be optimal because ﬂuents that are Baral, 2001]. Finally, the idea of reasoning with possible val-
known to be true may not be stored in a separate relation, ues has been applied in an iterative planner [Levesque, 2005]

                                                IJCAI-07
                                                  2033