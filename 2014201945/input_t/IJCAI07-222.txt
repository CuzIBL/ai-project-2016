                         RoxyBot-06: An (SAA)2           TAC Travel Agent

                      Seong Jae Lee, Amy Greenwald, and Victor Naroditskiy
               Department of Computer Science, Brown University, Providence, RI 02912
                            {sjlee,amy,vnarodit}@cs.brown.edu


                    Abstract                            In this paper, we describe RoxyBot–06, the top-scoring
                                                      TAC Travel agent in 2006. Here, we reveal RoxyBot’s secrets.
    In this paper, we describe our entrant in the travel divi- One feature that distinguishes RoxyBot–06 from most other
    sion of the 2006 Trading Agent Competition (TAC). At TAC agents is that it builds noisy (i.e., stochastic) models of
    a high level, the design of many successful autonomous the auctions’ clearing prices, rather than predicting clearing
    trading agents can be summarized as follows: (i) price prices via point estimates. Given stochastic price predictions,
    prediction: build a model of market prices; and (ii) opti- stochastic optimization is at the heart of RoxyBot–06. Our
    mization: solve for an approximately optimal set of bids, approach is decision-theoretic rather than game-theoretic.
    given this model. To predict, we simulate simultaneous
    ascending auctions. To optimize, we apply the sample
    average approximation method. Both of these proce-   REPEAT
    dures might naturally be abbreviated SAA; hence the title {start bid interval}
    of this paper. Our agent dominated the preliminary and 0. Download current prices and winnings from server
    seeding rounds of TAC Travel in 2006, and emerged as
    champion in the ﬁnals in a photo ﬁnish.                1. predict: build stochastic models
                                                                 a. ﬂights: Bayesian updating/learning
                                                                 b. hotels: simultaneous ascending auctions
1  Introduction                                                  c. entertainment: sample historical data
A TAC Travel agent is a simulated travel agent whose task is 2. optimize: sample average approximation
to organize itineraries for a group of clients to travel to and
from TACTown. The agent’s objective is to procure travel   3. Upload current bids to server
goods that satisfy its clients’ preferences as inexpensively as (three separate threads)
possible. Travel goods are sold in simultaneous auctions:    {end bid interval}
  • ﬂights are sold by the “TAC seller” in dynamic posted- UNTIL game over
    pricing environments; no resale is permitted
                                                                                 RoxyBot-06
  • hotel reservations are sold by the “TAC seller” in multi- Table 1: A high-level view of ’s architecture.
    unit ascending call markets; speciﬁcally, 16 hotel reser-
    vations are sold in each hotel auction to the 16 highest
    bidders at the 16th highest price; no resale is permitted
                                                          RoxyBot-06
  • agents trade tickets to entertainment events among them- 2         ’s Architecture
    selves in continuous double auctions; resale is permitted Table 1 depicts the high-level architecture of RoxyBot–06.
Flights and hotel reservations are complementary goods: After current prices and winnings are downloaded from the
ﬂights are not useful to a client without the complementary server, the key prediction and optimization routines are run.
hotel reservations, nor vice versa. Tickets to entertainment Output from the optimization routine is a bidding policy, that
events, e.g., the Boston Red Sox and the Boston Symphony is, a mapping from auctions to bids. Finally, current bids
Orchestra, are substitutable.                         are uploaded to the server by three separate threads, one for
  The TAC Travel environment models the problem faced by ﬂights, one for hotels, and one for entertainment.
an agent bidding in simultaneous auctions for complementary TAC Travel games last 9 minutes. Flight price updates are
and substitutable goods, e.g., an agent bidding on eBay. At a broadcast every ten seconds. The eight hotel auctions clear on
high-level, the design of many successful TAC Travel agents the minute at each of minutes 1 through 8, with exactly one
(e.g., Walverine [Cheng et al., 2004] and ATTac [Stone et al., auction closing. (The precise auction to close is decided at
2003]) can be summarized as: (i) price prediction: build a random, with all open auctions equally likely to be selected.)
model of the auctions’ clearing prices, and (ii) optimization: For the others, the server reports the “hypothetical quantity
solve for a near-optimal set of bids, given this model. won” by each agent as well as the current ask price. Although

                                                IJCAI-07
                                                  1378the entertainment auctions clear continuously, price updates Conditioned on z, however, ﬂight prices may increase or de-
are broadcast only every 30 seconds.                  crease (i.e., the expected perturbation can be positive or neg-
  RoxyBot–06 discretizes time into bid intervals. Since ative). To facilitate their ﬂight deliberations, one of the tasks
server updates are received only every ten seconds, it sufﬁces faced by TAC agents is to model the probability distribution
for TAC Travel agents to reason about intervals of this length. Pt[z] associated with z at time t for use in predicting current
  For simplicity, assume the prediction and optimization and future ﬂight prices. Models of probability distributions
steps are instantaneous. Under this assumption, based on the can be built using Bayesian updating.
current bidding policy, (i) the ﬂight thread bids on a ﬂight Given a probability distribution Pt[z], to predict a ﬂight
only if its price is near its predicted minimum; (ii) the hotel price, RoxyBot could simulate a random walk from time
                                                                
thread bids on a hotel only if it is moments before the end of t +1,...,t and select the minimum price. In practice, how-
a minute; and (iii) the entertainment thread places bids im- ever, only RoxyBot-06’s hotel and event price predictions are
mediately. In practice, the prediction and optimization steps stochastic; its ﬂight price predictions are point estimates (i.e.,
are time-consuming, so the timing of bid placement in TAC constant across scenarios). For each ﬂight and for each possi-
Travel games is often complex.                        ble value of the hidden parameter z, RoxyBot-06 simulates an
                                                      “expected” random walk (see Algorithm 1), selects the min-
3  Price Prediction                                   imum price, and then outputs as its prediction the expecta-
                                                      tion of these minima, averaging according to Pt[z]. Alter-
In this section, we describe how RoxyBot-06 builds its native scenario generation procedures are also possible: e.g.,
stochastic models of ﬂight, hotel, and event prices. Each an agent could sample instead of calculating expected per-
model is a discrete probability distribution, represented by turbations. Our choice of ﬂight price prediction method was
a weighted set of “scenarios.” Each scenario is comprised guided by time constraints.
of a vector of “current” prices—prices at which goods can
                                                                                          
be bought and sold during the current stage—and a vector Algorithm 1 Expected Minimum Price(t, t ,pt,Pt)
of “future” prices—prices at which goods can be bought and
                                                        for all z ∈ R do
sold after the current stage. For ﬂights, the current (or future) min[z]=+∞
buy price is RoxyBot-06’s prediction of the expected mini-                 
                                                          for τ = t +1,...,t do
mum price during (or after) the current stage. For hotels, the
                                                            [a, b]=getRange(τ,z)
current buy prices are predicted by simulating simultaneous      b−a
                                                            Δ=    2  {expected perturbation}
ascending auctions to approximate competitive equilibrium   p  = p    +Δ{             }
prices. There are no future buy prices for hotels. For enter- τ   τ−1      perturb price
        RoxyBot-06                                          pτ = max(150, min(800,pτ ))
tainment,         predicts current and future buy and sell    p  < min[z]
prices based on historical data.                            if τ         then
                                                              min[z]=pτ
3.1  Flights                                                end if
                                                          end for
Flight prices follow a biased random walk. They are initial- end for
ized uniformly in the range [250, 400], and constrained to re-
                                                        return   z Pt[z]min[z]
main in the range [150, 800]. At the start of each TAC game
instance, a bound z on the ﬁnal perturbation value is selected
for each ﬂight. These bounds are not revealed to the agents.
What is revealed to the agents is a sequence of random ﬂight 3.2 Hotels
prices. Every ten seconds, TACAir perturbs the price of each RoxyBot-06’s approach to hotel price prediction is inspired by
ﬂight by a random value that depends on the hidden parame- Walverine’s [Cheng et al., 2004],inwhichthetˆatonnement
ter z and the current time t as follows: given constants c ∈ R method is used to approximate competitive equilibrium
and T>0, each (intermediate) bound on the perturbation prices. In a competitive market where each individual’s ef-
value is a linear function of t:                      fect on prices is negligible, equilibrium prices are prices at
                           t                          which supply equals demand, assuming all producers are
               x(t, z)=c +   (z − c)                  proﬁt-maximizing and all consumers are utility-maximizing.
                           T                    (1)
                                                        Formally, let p denote a vector of prices. If y(p) denotes the
The perturbation value at time t is drawn uniformly from one cumulative supply of all producers, and if x(p) denotes the
of the following ranges:                              cumulative demand of all consumers, then z(p)=x(p)−y(p)
  • U[−c, x(t, z)] x(t, z) > 0                        denotes the excess demand in the market. The tˆatonnement
                ,if                                   process adjusts the price vector at iteration n +1,giventhe
  • U[−c, +c],ifx(t, z)=0                             price vector at iteration n and a sequence {αn} of adjustment
                                                      rates: pn+1 = pn + αnz(pn).
  • U[x(t, z), +c],ifx(t, z) < 0
                                                        In the TAC game context, tˆatonnement is not guaran-
  For TAC’s parameter settings, namely c =10and T =   teed to converge. Walverine forces convergence by letting
540, with z uniformly distributed in the range R =[−10, 30], αn → 0. We force convergence by modifying the adjust-
given no further information about z, ﬂight prices are ex- ment process to simulate simultaneous ascending auctions
pected to increase (i.e., the expected perturbation is positive). (SimAA) [Cramton, 2005]. In SimAAs prices increase as

                                                IJCAI-07
                                                  1379long as there is excess demand but they can never decrease: dicted price during (or after) the current bid interval.
pn+1 = pn + αn max{z(pn), 0}.                       RoxyBot-06’s estimates of entertainment ticket prices are
  Following [Wellman et al., 2004], we evaluate these ho- based on historical data from the past 40 games. To gener-
tel price predictions using two metrics: Euclidean distance ate a scenario, a sample game is drawn at random from this
and “expected value of perfect prediction” (EVPP). Euclidean collection, and the sequences of entertainment bid, ask, and
distance is a standard way of measuring the difference be- transaction prices are extracted. Given such a history, for each
tween two vectors, in this case the actual and the predicted auction a,lettradeai denote the price at which the last trade
prices. The value of perfect prediction (VPP) for a client before time i transacted; this value is initialized to 200 for
is the difference between the value of the best package for buying and 0 for selling. In addition, let bid ai denote the bid
the client based on the actual prices and the value of the best price at time i,andletask ai denote the ask price at time i.
package for the client based on the predicted prices. EVPP is To predict current buy price in auction a at time t, RoxyBot-
the expected VPP averaged over the client distribution. 06 ﬁrst computes the minimum among the historical trade and
  In Figure 1 (left), we reproduce a scatter plot generated ask prices at time t and the current ask price in the present
by the Walverine team that evaluates the hotel price predic- game. The current buy price is then constrained to be above
tion methods of TAC 2002 agents at the beginning of the the current bid price in the present game. Without this latter
game. We add two versions of SimAA and tˆatonnement to the constraint, the agent might be inclined to buy a good at a price
plot. Following Wellman et al. [Cheng et al., 2003], one uses that is lower than the outstanding bid, which is impossible.
56 “expected” clients; the other samples 56 random clients. Formally,
Eight agents play the TAC game, each with eight clients. curr buy =max{currBid, min{trade , ask , currAsk}}
Each agent knows the preferences of its own clients, but must at                         at   at
                                                                                                      (2)
simulate the demand of the 56 others. An expected client cor-
                                                      The current sell price is predicted analogously:
responds to one of ten different arrival/departure pairs, with
average hotel and entertainment values.               curr sell at =min{currAsk, max{tradeat, bid at, currBid}}
  We interpret each prediction with 56 random clients as a                                            (3)
sample scenario, so that a set of such scenarios represents RoxyBot-06 predicts the future buy price in auction a after
draws from a probability distribution over competitive equi- time t as follows:
librium prices. The vector of predicted prices that is evaluated
                                                           future buy at =minmin{tradeai,     ask ai} (4)
and plotted is the average of multiple (40) such predictions.            i=t+1,...,T
The predictions generated using sets of random clients are
                                                                                         i = t +1,...,T
not as good as the predictions with expected clients, although In words, the future buy price at each time is
                                                                                       i
with more than 40 sets of random clients, the results might the minimum of the ask price after time and the most recent
                                                                                          t
improve. Still, using random clients helps us make better in- trade price. The future buy price at time is the minimum
terim predictions later in the game as we explain next. across the future buy prices at all later times. As above, the
                                                                            t
  As hotel auctions close, RoxyBot-06 updates the predicted future sell price after time is predicted analogously:

clearing prices of the open hotel auctions. We experimented future sell at =maxmax{tradeai,   bid ai} (5)
with two ways of constructing interim price predictions. The             i=t+1,...,T
ﬁrst is to ﬁx the prices of the closed auctions at their clearing
prices and then to run SimAA or tˆatonnement with expected 4 Optimization
or random clients. The second is to distribute goods from We characterize RoxyBot-06’s optimization routine as
the closed auctions to the clients who want them the most, (i) stochastic, (ii) global, and (iii) dynamic. It takes as in-
and then to exclude any closed auctions in further runs of put stochastic price predictions; it simultaneously considers
SimAA or tˆatonnement. (NB: We determine which clients ﬂight, hotel, and entertainment bids in unison; and it simul-
want which goods most by running SimAA or tˆatonnement taneously reasons about bids to be placed in both current and
as usual.) Note that we can only distribute goods to random future stages of the game.
clients. It is not clear how to distribute goods to “expected We assume that our agent’s decisions do not affect
clients,” which are aggregate clients rather than real clients. prices and express the game-theoretic bidding problem as a
Figure 1 (center and right) shows that the predictions based decision-theoretic optimization problem. The inﬂuence of
on the distribution method are better than the others. Hotels other agents on prices is represented by a set of scenarios or,
that close early tend to sell for less than hotels that close late; more generally, a distribution over prices.
hence, any method that makes relatively constant predictions Hence, RoxyBot-06 is confronted with a dynamic stochas-
all throughout the game is bound to suffer.           tic optimization problem. It solves this problem by collapsing
                                                      the future into only two relevant stages—“current” and “fu-
3.3  Entertainment                                    ture”. This approach is reasonable in TAC, and other similar
During each bid interval, RoxyBot-06 predicts current and fu- combinations of sealed-bid and continuously-clearing simul-
ture buy and sell prices for tickets to all entertainment events. taneous auction environments, as we now explain.
These price predictions are optimistic: the agent assumes it The key bidding decisions are: what goods to bid on, at
can buy (or sell) goods at the least (or most) expensive prices what price, and when? Since hotel auctions close in an un-
that it expects to see before the end of the game. More specif- known random order, RoxyBot-06, like most TAC agents, op-
ically, each current (or future) price prediction is the best pre- erates under the assumption that all hotel auctions close at the

                                                IJCAI-07
                                                  1380    70                                    22                                    140
                                                        tatonnement, expected clients        tatonnement, expected clients
                                          20              SimAA, expected clients               SimAA, expected clients
    65                        livingagents
                            PackaTAC                     tatonnement, random clients  120     tatonnement, random clients
                          Southampton     18                SimAA, random clients                SimAA, random clients
    60                                             tatonnement, random clients, with distribution tatonnement, random clients, with distribution
                       RoxyBot UMBCTAC    16          SimAA, random clients, with distribution SimAA, random clients, with distribution
                     whitebear                                                  100
                          SICS_baseline
     55               ATTac               14
                                                                                80
                                          12
    50
                                          10
                 harami                                                         60
     45              cuhk                  8
         kavayaH
                    tatonnement, random
               SimAA, random              6                                     40
    40                                                                       Euclidean  Distance per Hotel
  Expected  Value of Perfect Prediction Walverine  tatonnement, expected  4
           SimAA, expected                                                      20
     35
              ATTac01                   Expected  Value of Perfect Prediction per Hotel  2

    30                                    0                                     0
       190  200  210  220  230  240  250  260  0  1  2  3   4   5   6    7       0    1   2   3   4   5   6   7
                Euclidean Distance                      Minute                                Minute

Figure 1: Left: EVPP and Euc. Dist. for TAC 2002 agents as well as our prediction methods: Tˆat. and SimAA; expected and
random. Center and Right: EVPP and Euc. Dist. in TAC 2006 of our hotel price prediction methods with distribution as the
game progresses.

end of the current stage. Hence, the only pressing decisions hotel bids can only be as high (or as low) as the maximum
regarding hotels are: what goods to bid on and at what price? (minimum) price in the scenarios although an agent may be
There is no need to consider the timing of bids. Accordingly, willing to pay more (less). We overcome this problem by
the only model of hotel prices is the current one.    adding to the set of scenarios generated by our stochatic
  In contrast, since ﬂight and entertainment auctions are con- model additional scenarios in which one of the hotels is
tinuous, a trading agent should reason about the timing of priced higher/lower than in any other scenario. This way the
its bids for these goods. Still, it sufﬁces to consider only agent may bid higher or lower than predictions in case the ac-
two pricing models. The current model predicts the best tual clearing prices are unexpectedly high or low. RoxyBot-06
good prices during the current bid interval, whereas the fu- optimized with respect to 30 scenarios generated as described
ture model predicts the best good prices after the current bid in Section 3 and up to 30 extra scenarios with high and low
interval, conditioned on current prices.              prices. These choices were guided by time constraints.
  We express the bidding problem as a stochastic program
where current and future prices are given by corresponding
stochastic models. The sample average approximation (SAA) 5 Competition Results
method is a numerical means of approximating solutions to
stochastic programs via Monte Carlo simulation [Ahmed and We present the results of the last day of the TAC-06 Finals (80
Shapiro, 2002]. The main idea is simple: (i) sample a set games). We omit the ﬁrst two days because agents can vary
of scenarios from the input distribution, and (ii) approximate across days, but cannot vary within. Presumaly, the entries on
the solution to the stochastic program by solving an approx- the last day are the teams’ preferred versions of the agents.
imation of the stochastic optimization problem which incor- Mean scores are plotted in Figure 2 and detailed statistics are
porates only the sample scenarios. RoxyBot–06 samples sce- tabulated in Table 2.
narios by simulating SimAA as described in Section 3.2.
                                                        There is no single metric such as low hotel or ﬂight costs
  The ILP formulation of SAA applied to the TAC bidding
                                                      that is responsible for RoxyBot’s success. Rather its success
problem is included in Appendix A. The power of this for-
                                                      derives from the right balance of contradictory goals. In par-
mulation is in its ability to make globally optimal decisions.
                                                      ticular, RoxyBot incurs high hotel and mid-range ﬂight costs
Flight, hotel, and entertainment bids are optimized together
                                                      while achieving mid-range trip penalty and high event proﬁt.
to produce a consistent bidding policy. The ﬁrst stage deci-
sions are the bids that are submitted now. The second stage We compare RoxyBot with two closest rivals: Walverine
decisions are the bids that can be submitted later. All hotel and WhiteDolphin. Comparing to Walverine ﬁrst, Walver-
bids are submitted now; ﬂight and entertainment bids can be ine bids lower prices (by 55) on fewer hotels (49 less), yet
submitted now or later.                               wins more (0.8) and wastes less (0.42). It would appear
  The formulation of the problem facilitates reasoning not that Walverine’s hotel bidding strategy outperforms Roxy-
only about what bids to place but also about when to place Bot’s, except that RoxyBot earns a higher hotel bonus (15
them. The fundamental issue regarding TAC ﬂight decisions more). RoxyBot also gains an advantage by spending 40 less
is a common one: balancing concern about future price in- on ﬂights and earning 24 more in total entertainment proﬁt.
creases with the beneﬁt of delaying commitment to travel on A very different competition takes place between RoxyBot
particular days. We model this tradeoff explicitly by giving and WhiteDolphin. WhiteDolphin bids lower prices (120 less)
the agent the option of buying ﬂight and entertainment tickets on more hotels (by 52) than RoxyBot. RoxyBot spends much
now at the current prices or later at the scenario’s (i.e., future) more (220) on hotels than WhiteDolphin but makes up for it by
prices. If the agent decides to buy a ﬂight or entertainment earning a higher hotel bonus (by 96) and a lower trip penalty
ticket later, it can submit different bids in different scenarios. (by 153). It seems that WhiteDolphin’s strategy is to minimize
  One of the weaknesses of the ILP formulation is that its costs even if that means sacriﬁcing utility.

                                                IJCAI-07
                                                  1381                                           Rox     Wal    Whi      SIC    Mer     L-A     kin    UTT
                    # of Hotel Bids        130     81     182      33      94     58      15      24
                    Average of Hotel Bids  170     115     50      513    147     88      356    498
                    # of Hotels Won       15.99   16.79   23.21   13.68  18.44   14.89   15.05   9.39
                    Hotel Costs            1102   1065    882     1031    902     987    1185    786
                    # of Unused Hotels     2.24    1.82   9.48    0.49    4.86    1.89    0.00   0.48
                    Hotel Bonus            613     598    517      617    590     592     601    424
                    Trip Penalty           296     281    449      340    380     388     145    213
                    Flight Costs           4615   4655    4592    4729    4834   4525    4867    3199
                    Event Proﬁts           110     26       6      -6     123     -93    -162     -4
                    Event Bonus            1470   1530    1529    1498    1369   1399    1619    996
                    Total Event Proﬁts     1580   1556    1535    1492    1492   1306    1457    992
                    Average Utility        9787   9847    9597    9775    9579   9604    10075   6607
                    Average Cost           5608   5693    5468    5765    5628   5605    6213    3989
                    Average Score          4179   4154    4130    4010    3951   3999    3862    2618

                                        Table 2: Last day of Final 2006. 80 games.


                        2006 Finals, Last Day
               4.5                                             References
                                                               [Ahmed and Shapiro, 2002] Shabbir Ahmed and Alexander Shapiro. The sample av-
                4                                                erage approximation method for stochastic programs with integer recourse. Opti-
                                                                 mization Online, http://www.optimization-online.org, 2002.

               3.5                                            [Cheng et al., 2003] S.F. Cheng, E. Leung, K.M. Lochner, K.O’Malley, D.M. Reeves,
                                                                 L.J. Schvartzman, and M.P. Wellman. Walverine: A Walrasian trading agent. In
                                                                 Proceedings of the Second International Joint Conference on Autonomous Agents
                3                                                and Multi-Agent Systems, pages 465–472, July 2003.

              Score  (thousands)                              [Cheng et al., 2004] S.F. Cheng, E. Leung, K.M. Lochner, K.O’Malley, D.M. Reeves,
               2.5
                                                                 L.J. Schvartzman, and M.P. Wellman. Walverine: A Walrasian trading agent. Deci-
                                                                 sion Support Systems, page To Appear, 2004.
                2
                 Rox Wal Whi SIC Mer L-A kin UTT              [Cramton, 2005] Peter Cramton. Simultaneous ascending auctions. In Peter Cramton,
                             Agent                               Yoav Shoham, and Richard Steinberg, editors, Combinatorial Auctions. MIT Press,
                                                                 2005.
                                                              [Greenwald and Boyan, 2004] A. Greenwald and J. Boyan. Bidding under uncertainty:
Figure 2: 2006 Finals’ Scores and 95% Conﬁdence Intervals.       Theory and experiments. In Proceedings of the 20th Conference on Uncertainty in
                                                                 Artiﬁcial Intelligence, pages 209–216, July 2004.
                                                              [Greenwald and Boyan, 2005] Amy Greenwald and Justin Boyan. Bidding algorithms
6Conclusion                                                      for simultaneous auctions: A case study. Journal of Autonomous Agents and Multi-
                                                                 agent Systems, 10(1):67–89, 2005.
                                                              [Stone et al., 2003] P. Stone, R.E. Schapire, M.L. Littman, J.A. Csirik, and
The success of an autonomous trading agent, particularly         D. McAllester. Decision-theoretic bidding based on learned density models in simul-
TAC agents, often hinges upon two key modules: (i)   price       taneous, interacting auctions. Journal of Artiﬁcial Intelligence Research, 19:209–
prediction, in which the agent builds a model of market          242, 2003.
prices; and (ii) optimization, in which the agent solves for an [Wellman et al., 2004] M.P. Wellman, D.M. Reeves, K.M. Lochner, and Y. Vorobey-
                                                                 chik. Price prediction in a Trading Agent Competition. Artiﬁcial Intelligence Re-
approximately optimal set of bids, given this model. For ex-     search, 21:19–36, 2004.
ample, at the core of RoxyBot’s 2000 architecture [Greenwald
and Boyan, 2005]  was a deterministic optimization problem,   A    TAC Bidding Problem: SAA
namely how to bid given price predictions in the form of
point estimates. In spite of its effectiveness in the TAC-00  The problem of bidding in the simultaneous auctions that charac-
                                                  RoxyBot     terize TAC can be formulated as a two-stage stochastic program, in
tournament, a weakness of the 2000 design was that            which bids are placed in the ﬁrst stage and winnings are allocated in
could not explicitly reason about variance within prices. In  the second stage. In this appendix, we present the implementation
the years since 2000, we recast the key challenges faced by   details of the integer linear program (ILP) encoded in RoxyBot-06
TAC agents as several different stochastic bidding problems   that approximates an optimal solution to this stochastic program.
(see [Greenwald and Boyan, 2004]), whose solutions exploit       This ILP formulation of the TAC bidding problem assumes linear
price predictions in the form of distributions. In spite of our prices, that is, constant economies of scale. Table 3 lists the the
perseverance, RoxyBot  fared unimpressively in tournament     price constants that comprise scenarios. Each scenario includes a
conditions year after year. . . until 2006. Half a decade in the “current” price, which is the best price expected within the stage,
laboratory spent searching for bidding heuristics that can ex- and a “future” price, which is the best price expected from the start
ploit stochastic information at reasonable computational ex-  of the next stage until the end of the game, for each good (except
                            RoxyBot                           hotels, which do not have future buy prices because they are treated
pense ﬁnally bore fruit, as          emerged victorious in    as one-shot auctions).
                                     RoxyBot-06
TAC-06. In a nutshell, the secret of             ’s success      Table 3 also lists the decision variables that pertain to each auc-
is: hotel price prediction by simulating simultaneous ascend- tion type. For hotels, the only decisions pertain to buy offers, right
ing auctions, and optimization based on the sample average    now; for ﬂights, the agent chooses buy offers for now and for later;
approximation method.                                         for entertainment events, both buy and sell offers are made now and

                                                        IJCAI-07
                                                          1382