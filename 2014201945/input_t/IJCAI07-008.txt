          New Constraint Programming Approaches for the Computation of
                   Leximin-Optimal Solutions in Constraint Networks

                               Sylvain Bouveret    and Michel Lemaˆıtre
                        Ofﬁce National d’Etudes´ et de Recherches A´erospatiales
                       sylvain.bouveret@onera.fr and michel.lemaitre@onera.fr

                    Abstract                          variables, and can possibly be used to ensure a kind of equity
                                                      among a set of agents. Equity is also studied in Operational
    We study the problem of computing a leximin-
                                                      Research, with for example [Ogryczak and Sliwi´´ nski, 2003],
    optimal solution of a constraint network. This prob-
                                                      who investigate a way of solving linear programs by aggre-
    lem is highly motivated by fairness and efﬁciency
                                                      gating multiple criteria using an Ordered Weighted Average
    requirements in many real-world applications im-
                                                      Operator (OWA) [Yager, 1988]. Depending on the weights
    plying human agents. We compare several generic
                                                      used in the OWA, this kind of aggregators can provide equi-
    algorithms which solve this problem in a constraint
                                                      table compromises.
    programming framework. The ﬁrst one is entirely
                                                        Microeconomy and Social Choice theory provide an im-
    original, and the other ones are partially based on
                                                      portant literature on fairness in collective decision making.
    existing works adapted to ﬁt with this problem.
                                                      From this theoretical background we borrow the idea of rep-
                                                      resenting the agents preferences by utility levels, and we
1  Introduction                                       adopt the leximin preorder on utility proﬁles for conveying
                                                      the fairness and efﬁciency requirements. Being a reﬁnement
Many advances have been done in recent years in modeling                    1
and solving combinatorial problems with constraint program- of the maximin approach , it has an inclination to fairness,
ming (CP). These advances concern, among others, the abil- while avoiding the so-called drowning effect of this approach.
ity of this framework to deal with human reasoning schemes, Apart from the fact that it conveys and formalizes the con-
such as, for example, the expression of preferences with soft cept of equity in multiagent contexts, the leximin preorder is
constraints. However, one aspect of importance has only re- also a subject of interest in other contexts, such as fuzzy CSP
ceived a few attention in the constraints community to date: [Fargier et al., 1993], and symmetry-breaking in constraint
the way to handle fairness requirements in multiagent combi- satisfaction problems [Frisch et al., 2003].
natorial problems.                                      This contribution is organized as follows. Section 2 gives a
  The seek for fairness stands as a subjective but strong re- minimal background in social choice theory and justiﬁes the
quirement in a wide set of real-world problems implying hu- interest of the leximin preorder as a fairness criterion. Sec-
man agents. It is particularly relevant in crew or worker tion 3 deﬁnes the search for leximin-optimality in a constraint
timetabling and rostering problems, or the optimization of programming framework. The main contribution of this pa-
long and short-term planning for ﬁremen and emergency ser- per is Section 4, which presents three algorithms for com-
vices. Fairness is also ubiquitous in multiagent resource al- puting leximin-optimal solutions, the ﬁrst one being entirely
location problems, like, among others, bandwidth allocation original, and the other ones adapted from existing works.
among network users, fair share of airspace and airport re- The proposed algorithms have been implemented and tested
sources among several airlines or Earth observing satellite within a constraint programming system. Section 5 presents
scheduling and sharing problems [Lemaˆıtre et al., 1999]. an experimental comparison of these algorithms.
  In spite of the wide range of problems concerned by fair-
ness issues, it often lacks a theoretical and generic approach. 2 Background on social choice theory
In many Constraint Programming and Operational Research We ﬁrst introduce some notations. Calligraphic letters (e.g.
works, fairness is only enforced by speciﬁc heuristic local X
                                                        ) will−→ stand for sets. Vectors will be written with an−→ arrow
choices guiding the search towards supposed equitable solu- (e.g. x ), or between brackets (e.g. x1,...,xn). f( x ) will
                                                                                                  −→↑
tions. However, a few works may be cited for their approach                   1        n 
                                                      be used as a shortcut for f(x ),...,f(x ) . Vector −→x will
of this fairness requirement. [Lemaˆıtre et al., 1999] make stand for the vector composed by each element of x rear-
                                                                                           ↑
use of an Earth observation satellite scheduling and sharing ranged in increasing order. We will write x the ith compo-
                                                                  −→                       i
problem to investigate three ways of handling fairness among nent of vector x ↑. Finally, the interval of integers between k
agents in the context of constraint satisfaction. More recently and l will be written k, l.
[Pesant and R´egin, 2005] proposed a new constraint based on
statistics, which enforces the relative balance of a given set of 1Trying to maximize the utility of the unhappiest agent.

                                                IJCAI-07
                                                   622.1  Collective decision making and welfarism         much better than the ﬁrst one. In other words, the min ag-
                                                      gregation function can lead to non Pareto-optimal decisions,
Let N beasetof    agents, and S be a set of admissible
                n                                     which is not desirable.
alternatives concerning all of them, among which a benevo-
                                                        The leximin preorder is a well-known reﬁnement of the or-
lent arbitrator has to choose one. The most classical model
                                                      der induced by the min function that overcomes this draw-
describing this situation is welfarism (see e.g. [Keeney and
                                                      back. It is classically introduced in the social choice literature
Raiffa, 1976; Moulin, 1988]): the choice of the arbitrator is
                                                      (see [Moulin, 1988]) as the social welfare ordering that rec-
made on the basis of the utility levels enjoyed by the indi-
                                                      oncile egalitarianism and Pareto-efﬁciency, and also in fuzzy
vidual agents and on those levels only. Each agent i ∈N
                                                      CSP  [Fargier et al., 1993].Itisdeﬁnedasfollows:
has an individual utility function ui that maps each admissi-                                      −→
              ∈S                                                                 [            ]
ble alternative s to a numerical index ui(s).Wemake   Deﬁnition−→ 1 (leximin preorder−→ Moulin,−→ 1988 ) Let x and
here the classical assumption that the individual utilities are y be two vectors of Nn. x and y are said leximin-
                                                                      −→         −→            −→↑   −→↑
comparable between the agents2. Therefore each alternative s indifferent (written x ∼leximin y ) if and only if x = y .
                                                             −→                    −→       −→ ≺
can be attached to a single utility proﬁle u1(s),...,un(s) . −→The vector y is leximin-preferred to x (written x leximin
According to welfarism, comparing two alternatives is per- y ) if and only if ∃i ∈ 0,n − 1 such that ∀j ∈ 1,i,
                                                       ↑     ↑     ↑       ↑            −→          −→
formed by comparing their respective utility proﬁles. x  =  y  and x   <y     . We write x 
leximin y for
                                                      −→j    j    −→i+1 −→ i+1      −→
  A standard way to compare individual utility proﬁles is to x ≺leximin y or x ∼leximin y . The binary relation
aggregate each of them into a collective utility index, stand- 
leximin is a total preorder.
ing for the collective welfare of the agents community. If g is
a well-chosen aggregation function, we thus have a collective In other words, the leximin preorder is the lexicographic pre-
utility function uc that maps each alternative s to a collec- order over ordered utility vectors. For example, we have
                                                             ≺              
tive utility level uc(s)=g(u1(s),...,un(s)). An optimal 4, 1, 5, 1 leximin 2, 2, 1, 2 .
alternative is one of those maximizing the collective utility. A known result is that no collective utility function can rep-
                                                      resent the leximin preorder5, unless the set of possible utility
                                                      proﬁles is ﬁnite. In this latter case, it can be represented by
2.2  The leximin preorder as a fairness and                                             −→     n
                                                                                           →−        −xi
     efﬁciency criterion                              the following non-linear functions: g1 : x  i=i n
                                                      (adapted for leximin from a remark in [Frisch et al., 2003])
                                                              −→      n    −q
The main difﬁculty of equitable decision problems is that and g2 : x →− i=1 xi ,whereq>0   is large enough
we have to reconcile the contradictory wishes of the agents. [Moulin, 1988]. Using this kind of functions has however
Since generally no solution fully satisﬁes everyone, the ag-
                                                      a main drawback: it rapidly becomes−→ unreasonable when the
gregation function g must lead to fair and Pareto-efﬁcient3 upper bound of the possible values of x increases. Moreover,
compromises.                                          it hides the semantics of the leximin preorder and hinders the
  The problem of choosing the right aggregation function g computational beneﬁts we can possibly take advantage of.
is far beyond the scope of this paper. We only describe the In the following, we will use the leximin preorder as a
two classical ones corresponding to two opposite points of criterion for ensuring fairness and Pareto-efﬁciency, and we
view on social welfare4: classical utilitarianism and egalitar- will be seeking the non-dominated solutions in the sense of
ianism. The rule advocated by the defenders of classical util- the leximin preorder. Those solutions will be called leximin-
itarianism is that the best decision is the one that maximizes optimal. This problem will be expressed in the next section
the sum of individual utilities (thus corresponding to g =+). in a CP framework.
However this kind of aggregation function can lead to huge
differences of utility levels among the agents, thus ruling out 3 Constraint programming and
this aggregator in the context of equitable decisions. From
the egalitarian point of view, the best decision is the one that leximin-optimality
maximizes the happiness of the least satisﬁed agent (thus cor- The constraint programming framework is an effective and
responding to g =min). Whereas this kind of aggregation ﬂexible tool for modeling and solving many different com-
function is particularly well-suited for problems in which fair- binatorial problems such as planning and scheduling prob-
ness is essential, it has a major drawback, due to the idempo- lems, resource allocation problems, or conﬁguration prob-
tency of the min operator, and known as “drowning effect” in lems. This paradigm is based on the notion of constraint
the community of fuzzy CSP (see e.g.[Dubois and Fortemps, network [Montanari, 1974]. A constraint network consists
1999]). Indeed, it leaves many alternatives indistinguishable, of a set of variables X = {X1,...,Xp} (in the following,
such as for example the ones with utility proﬁles 0,...,0 variables will be written with uppercase letters), a set of asso-
                  
and 1000,...,1000, 0 , even if the second one appears to be ciated domains D = {DX1 ,...,DXp },whereDXi is the set
                                                      of possible values for Xi, and a set of constraints C,where
  2In other words, they are expressed using a common utility scale. each c ∈Cspeciﬁes a set of allowed tuples R(c) over a set of
  3A decision is Pareto-efﬁcient if and only if we cannot strictly variables X (c). We make the additional assumption that all
increase the satisfaction of an agent unless we strictly decrease the the domains are in N, and we will use the following notations:
satisfaction of another agent. Pareto-efﬁciency is generally taken as X =min(DX ) and X =max(DX ).
a basic postulate in collective decision making.
  4                                                      5                              −→         −→ ⇔
   Compromises between these two extremes are possible. See e.g. −→In other−→ words there is no g such that x leximin y
[Moulin, 2003, page 68] or [Yager, 1988] (OWA aggregators). g( x ) ≤ g( y ).See[Moulin, 1988].

                                                IJCAI-07
                                                   63  An instantiation v of a set S of variables is a function that Deﬁnition 3 (Meta-constraint AtLeast) Let Γ be a set of p
maps each variable X ∈Sto a value v(X) of its domain DX . constraints, and k ∈ 1,p be an integer. The meta-constraint
If S = X , this instantiation is said to be complete, otherwise AtLeast(Γ,k) holds on the union of the scopes of the con-
it is partial. If S  S, the projection of an instantiation of straints in Γ, and allows a tuple if and only if at least k con-
S over S is the restriction of this instantiation to S and is straints from Γ are satisﬁed.
written v↓S . An instantiation is said to be consistent if and
only if it satisﬁes all the constraints. A complete consistent Due to its genericity, this meta-constraint cannot provide
instantiation of a constraint network is called a solution. The very efﬁcient ﬁltering procedures. In our case where the
set of solutions of (X , D, C) is written sol(X , D, C). We will constraints of Γ are linear, this meta-constraint is simply a
also write v[X ← a] the instantiation v where the value of X counting constraint, and bound-consistency can be achieved
is replaced by a.                                     in O(n).  The speciﬁc meta-constraint AtLeast can also
                                                                                                [
  Given a constraint network, the problem of determining be implemented with a set of linear constraints Garﬁnkel
                                                      and Nemhauser, 1972, p.11], by introducing n 0–1 variables
whether it has a solution is called a Constraint Satisfaction {  }                          {          ≥
Problem (CSP)andisNP-complete. The  CSP can be clas-   Δ1,...,Δn  , and a set of linear constraints X1 +Δ1Y
                                                                       ≥     n     ≤   −  }
sically adapted to become an optimization problem in the fol- Y,...,Xn +ΔnY Y, i=1 Δi n  k .
lowing way. Given a constraint network (X , D, C) and an Our ﬁrst approach for computing a leximin-optimal solu-
objective variable O ∈X, ﬁnd the value m of DO such   tion is presented in algorithm 1.
that m =max{v(O)   | v ∈ sol(X , D, C)}. We will write
     X D  C
max(  ,  , ,O) for the subset of those solutions that maxi- Algorithm 1: Computation of a leximin-optimal solution
mize the objective variable O.                         using a cardinality combinator.
  Expressing a collective decision making problem with a                    (X D C)          ∈Xn
numerical collective utility criterion as a CSP with objective input : A const. network , , ; U1,...,Un
                                                        output: A solution to the MaxLeximinCSP problem
variable is straightforward: consider the collective utility as
the objective variable, and link it to the variables represent- 1 if solve(X , D, C)=“Inconsistent” return “Inconsistent”;
                                                        (X  D C ) ← (X D C)
ing individual utilities with a constraint. However this cannot 2 0, 0, 0 , , ;
                                                      3 for i ← 1 to n do
directly encode our problem of computing a leximin-optimal X  ←X     ∪{  }
solution, which is a kind of multicriteria optimization prob- 4 i i−1  Yi ;
                                                           D  ←D    ∪{D  }    D   = min (  ) max (  )
lem. We introduce formally the MaxLeximinCSP problem  5      i    i−1   Yi  with Yi      j Uj ,   j Uj ;
as follows :                                          6    Ci ←Ci−1  ∪
                                                                 {AtLeast({  ≤          ≤   }   −  +1)}
           MaxLeximinCSP                                                   Yi  U1,...,Yi  Un ,n   i    ;
Deﬁnition 2 (               problem)                  7    vb(i) ← maximize(Xi, Di, Ci,Yi);
Input: a constraint network (X , D, C); a vector of variables 
                                                      8    Di ←Di  with DYi ←{vb(i)(Yi)};
−→                  n
      1      n∈X
U =  U  ,...,U       , called an objective vector.    9 return vb(n)↓X ;
Output:                  X  D C    ∅
       “Inconsistent” if sol( , , )=−→ .Otherwiseaso-−→
lution v such that ∀v ∈ sol(X , D, C), v(U ) 
leximin v(U ).
                                                        The functions solve and maximize (the detail of which is
  We describe in the next section several generic constraint
                                                      the concern of solving techniques for constraints satisfaction
programming algorithms that solve this problem. The ﬁrst
                                                      problems) of lines 1 and 7 respectively return one solution
one is entirely original, and the other ones are based on exist-
                                                      v ∈ sol(X , D, C) (or “Inconsistent” if such a solution does
ing works that are adapted to ﬁt with our problem.
                                                      not exist), and an optimal solution v ∈ max(Xi, Di, Ci,Yi)
                                                      (or “Inconsistent” if sol(Xi, Di, Ci)=∅). We assume – con-
4  Proposed algorithms                                trary to usual constraint solvers – that these two functions do
4.1  Using a cardinality combinator                   not modify the input constraint network.
Our ﬁrst algorithm is based on an iterative computation of the The following example illustrates a1 a2 a3
                                                      the behavior of the algorithm. It is a
components of the leximin-optimal vector. It ﬁrst computes                              o1   3   3    3
                 1                              ∀     simple resource allocation problem,
the maximal value y such that there is a solution v with i,                            o2   5   9    7
 1 ≤    i ,orinotherwords     1 ≤     i     ,where    where 3 objects must be allocated
y    v(U )                  i(y   v(U )) = n                                            o3   7   8    1
by convention the value of (y1 ≤ v(Ui)) is 1 if the inequality to 3 agents, with the following con-
is satisﬁed and 0 otherwise6. Then, after having ﬁxed this straints: each agent must get one and only one object, and
value for y1, it computes the maximal value y2 such that there one object cannot be allocated to more than one agent (i.e. a
is a solution v with i(y2 ≤ v(Ui)) ≥ n − 1, and so on perfect matching agent/objects). A utility is associated with
until the maximal value yn such that there is a solution v with each pair (agent,object) with respect to the array above.
  i(yn ≤ v(Ui)) ≥ 1.                                    This problem has 6 feasible solutions (one for each permu-
  To enforce the constraint on the yi,wemakeuseofthe  tation of 1, 3), producing the 6 utility proﬁles shown in the
meta-constraint AtLeast, derived from a cardinality com- columns of the following array:
binator introduced by [Van Hentenryck et al., 1992],and
                                                                      p1  p2   p3  p4  p5   p6
present in most of CP systems:
                                                                 u1   3    3   5   5    7   7
  6This convention is inspired by the constraint modeling language u2 9    8   3   8    3   9
OPL [Van Hentenryck, 1999].                                      u3   1    7   1   3    7   3

                                                IJCAI-07
                                                   64  The algorithm runs in 3 steps: Step 1: After having intro- Proof of proposition 1: If sol(X , D, C)=∅,andifsolve
duced one variable Y1, we look for the maximal value y1 of is correct, then algorithm 1 obviously returns “Inconsistent”. Other-
                                                                                             (b  )
Y1 such that each (at least 3) agent gets at least Y1.Weﬁnd wise, following lemma 2, it outputs an instantiation v(n) ↓X which
                                                                                   (X  D  C )=(X   D C)
y1 =3.ThevariableY1 is ﬁxed to this value, implicitly re- is, according to lemma 3, a solution of 0, 0, 0 , , .
                                                        Suppose that there is a   ∈     (X D  C) such that
moving proﬁles p1 and p3. Step 2: After having introduced −→           −→     v       sol ,  ,
                                                     v(U ) leximin vb(n)(U ). Then following deﬁnition 1, ∃i ∈ 1,n
one variable Y2, we look for the maximal value y2 of Y2 such          −→         −→       −→         −→
                                                                        ↑         ↑         ↑         ↑
that at least 2 agents get at least Y2.Weﬁndy2 =7.Thevari- such that ∀j<i, v(U )j = vb(n)(U )j and v(U )i > vb(n)(U )i .
able 2 is ﬁxed to this value, implicitly removing proﬁle 4. +
    Y                                           p     Let v(i) be the extension of v respectively instantiating Y1,...Yi−1
Step 3: After having introduced one variable Y3, we look for                         −→ ↑
                                                      to vb(n)(Y1),...vb(n)(Yi−1) and Yi to v(U ) . Following lemma 4,
the maximal value y3 of Y3 such that at least 1 agent gets at        −→               i
                                                      ∀  b  (  )=b   (  )↑
least Y3.Weﬁndy3 =9. Only one instantiation maximizes j, v(n) Yj v(n) U j . By gathering all the previous equalities,
                                                                   +                  −→ ↑    +  −→ ↑
Y3: p6. Finally, the returned leximin-optimal allocation is: we have ∀j<iv(i)(Yj )=vb(n)(Yj )=v(U )j =(v(i)(U ))j .We
a1 ← o3, a2 ← o2 and a3 ← o1.                                  +        −→ ↑    + −→  ↑
                                                      also have v (Yi)=v(U )i =(v (U ))i . By lemma 1, ∀j ≤ i at
                                                              (i)               (i)−→
                               maximize      solve                            +
Proposition 1 If the two functions       and          least n − j +1numbers from (v(i)(U )) are greater than or equal to
are both correct and both halt, then algorithm 1 halts and + ( )        +
        MaxLeximinCSP                                 v(i) Yj , proving that v(i) satisﬁes all the cardinality constraints at
solves the              problem.                      iteration i. Since it also satisﬁes each constraint in C and maps each
                                                     variable of Xi to one of its possible values, it is a solution of soli,
  In the next proofs, we will write soli and soli for respec-       −→        −→
                                                         + (  )=  (  )↑  b   ( )↑ = b  ( )
tively sol(Xi, Di, Ci) and sol(Xi, Di, Ci). We will also write and v(i) Yi v U i > v(n) U i v(i) Yi . It contradicts the
                                                               maximize                      
(soli)↓Xj and (soli)↓Xj for the same sets of solutions pro- deﬁnition of , proving the proposition 1.
jected on Xj (with j<i). We can notice that sol0 =
                                                     4.2  Using a sorting constraint
sol(X , D, C),andthat∀i, soli ⊆ soli.
             −→                                       Our second algorithm is directly based on the deﬁnition 1 of
Lemma 1  Let x be a vector of size n.Atleastn − i +1
            −→                          ↑             the leximin preorder, which involves the sorted version of the
components of x are greater than or equal to x .
                                        i             objective vector. This can be naturally expressed−→ in the CP
  The proof of this useful lemma is obvious, so we omit it. paradigm by introducing−→ a vector−→ of variables Y and enforc-
                                                      ing the constraint Sort(U,Y ) which is deﬁned as follows:
Lemma 2  If sol0 = ∅ then v(n) is well-deﬁned and not equal                        −→    −→
to “Inconsistent”.                                    Deﬁnition 4 (Constraint Sort) Let X and X  be two vec-
                                                     tors of variables of the same length, and v be an instantiation.
  Proof: Let i ∈ 1,n, suppose that soli−1 = ∅,andletv(i) ∈           −→ −→
                                                     The constraint Sort(X,X ) holds on the set of variables be-
soli−1. Then extending v(i) by instantiating Yi to minj (Uj ) leads
                                                                 −→      −→
to a solution of (Xi, Di, Ci) (only one constraint has been added and ing either in X or in X , and is satisﬁed by v if and only if
                                                        −→                      −→
it is satisﬁed by the latter instantiation). Therefore soli = ∅ and, if is the sorted version of in increasing order.
                                                     v(X  )                   v(X )
maximize is correct, vb(i) = “Inconsistent” and vb(i) ∈ soli.So,
                                                       This constraint has been particularly studied in two works,
soli = ∅. It proves lemma 2 by induction. 
                                                      which both introduce a ﬁltering algorithm for enforcing

Lemma 3  If sol0 = ∅,then(v(n))↓Xi ∈ soli, ∀i ∈ 0,n. bound consistency on this constraint. The ﬁrst algorithm
                                                                 [                                   ]
                                                    comes from Bleuzen-Guernalec and Colmerauer,−→ 1997 and
  Proof: We have soli ⊆ soli,and(soli+1)↓Xi ⊆ soli (since
                                                     runs in O(n log n) (n being the size of X). [Mehlhorn and
from (Xi, Di, Ci) to (Xi+1, Di+1, Ci+1) we just add a constraint).
                                                     Thiel, 2000] designed a simpler algorithm that runs in O(n)
More generally, (soli)↓Xj ⊆ (soli)↓Xj ,and(soli+1)↓Xj ⊆                                               −→
                                          
(soli)↓Xj , as soon as j ≤ i. Hence, (vb(n))↓Xi ∈ (soln)↓Xi ⊆ plus the time required to sort the interval endpoints of X,
                                                     which can asymptotically be faster than    .
(soln)↓Xi ⊆···⊆(soli+1)↓Xi ⊆ soli ⊆ soli.                                              O(n log n)
                                        −→
                ∅     −→                ↑
Lemma 4  If sol0 = , v(n)( y ) is equal to v(n)(U ) .  Algorithm 2: Computation of a leximin-optimal solution
                                                       using a sorting constraint.
  Proof: For all i ∈ 1,n, (vb(n))↓Xi is a solution of soli
                                         −→                                                        n
                                            ↑                               (X D C)  1      n∈X
by lemma 3. By lemma 1, (vb(n))↓X [Yi ← vb(n)(U ) ] satis- input : A const. network , , ; U ,...,U
                              i             i                              MaxLeximinCSP
ﬁes the cardinality constraint of iteration i, and is then a solu- output: A solution to the problem
                              maximize                    solve(X D C)=
tion of soli. By deﬁnition−→ of function , we thus have 1 if     , ,     “Inconsistent” return “Inconsistent”;
                 ↑                                      X  ←X∪{           }
vb(i)(Yi) ≥ vb(n)(U )i .Sincevb(i)(Yi)=vb(n)(Yi),wehave 2         Y1,...,Yn ;
             −→ ↑                                         
                                                        D  ←D∪{DY        DY  } DY  = minj ( j ) maxj ( j )
vb(n)(Yi) ≥ vb(n)(U )i .                              3             1 ,..., n ,  i        U  ,     U   ;
                                                                     −→ −→
  Since vb(n) is a solution of soln, at least n − i +1numbers from 4 C ←C∪{Sort(U,Y )};
         −→                                                 ←  1
     b  (  )                      b  ( i)             5 for i   to n do
vector v(n) U are greater than or equal to v(n) Y . At least the                
                            −→                        6    vb(i) ← maximize(X , D , C ,Yi);
n − i +1greatest numbers from vb(n)(U ) must then be greater than
                                                      7    DY  ←{b(i)( i)}
                                         −→ ↑                 i   v   Y  ;
or equal to vb(n)(Yi). These components include vb(n)(U )i ,which
                                                              b(n)↓X
                   −→ ↑                               8 return v   ;
leads to vb(n)(Yi) ≤ vb(n)(U )i , proving the lemma. 
  We can now put things together and prove proposition 1.

                                                IJCAI-07
                                                   65Proposition 2 If the two functions maximize and solve  Algorithm 3: Computation of a leximin-optimal solution
are both correct and both halt, then algorithm 2 halts and in a branch and bound manner.
        MaxLeximinCSP                                                                              n
solves the              problem.                        input : A const. network (X , D, C); U1,...,Un∈X
  Proof: If sol(X , D, C)=∅ and if solve is correct, then al- output: A solution to the MaxLeximinCSP problem
gorithm 2 obviously returns “Inconsistent”. We will suppose in the 1 vb ← null; v ← solve(X , D, C);
             (X D  C) = ∅
following that sol , ,  and we will use the following nota- 2 while v = “Inconsistent” do
                                  (X  D C)
tions: soli and soli are the sets of solutions of , , respec- 3 vb ← v;
tively at the beginning and at the end of iteration i.                        −→  −→
                                                     4    C←C∪{Leximin(vb(U    ), U )};
  We have obviously ∀i ∈ 1,n− 1 soli+1 = soli, which proves
                                                      5    v ← solve(X , D, C);
that if soli = ∅, then the call to maximize at line 6 does not
return “Inconsistent”, and soli+1 = ∅. Thus vb(n) is well-deﬁned, 6 if vb = null then return vb else return “Inconsistent”;
and obviously (vb(n))↓X is a solution of (X , D, C).
  We note vb = vb(n) the instantiation computed by the last
maximize  in algorithm 2. Suppose that there is an instantiation work by enumerating, at each step, all the subsets of fuzzy
                       −→           −→           +
v ∈ sol(X , D, C) such that vb(U ) ≺leximin v(U ).Wedeﬁnev constraints (corresponding to our agents) having a property
                                     −→ ↑
the extension of v that instantiates each yi to v(U )i . Then, due connected to the notion of consistency degree.
                −→      +
to constraint Sort, vb(Y ) and v (Y ) are the respective sorted ver- [Ehrgott, 2000, p. 162] describes two very simple algo-
       −→      +
sion of vb(U ) and v (U). Following deﬁnition 1, there is an i ∈ rithms for solving the closely related “Lexicographic Max-
                                  +                   Ordering” problem (that could be called “leximax-optimal”
0,n− 1 such that ∀j ∈ 1,i, vb(Yj )=v (Yj ) and vb(Yi+1) <
 +                                                    in our terms). However, they do not seem realistic in the con-
v (Yi+1). Due to line 7, we have vb(Yi+1)=vb(n)(Yi+1)=
                  +                                text of combinatorial problems, since they are based on an
vb(i+1)(Yi+1). Thus v is a solution in max(X , D , C ,Yi+1)
                +                                     enumeration of all utility proﬁles.
with objective value v(i+1)(Yi+1) strictly greater than vb(i+1)(Yi+1),
which contradicts the hypothesis about maximize. 
                                                      5   Experimental results
4.3  Using a multiset ordering constraint             The algorithms 1, 2, 3 and the ﬁrst algorithm proposed
Our third algorithm computing a leximin-optimal solution is in [Dubois and Fortemps, 1999] have been implemented and
perhaps the most intuitive one. It proceeds in a pseudo branch tested using the constraint programming tool CHOCO [Labur-
and bound manner: it computes a ﬁrst solution, then tries to the, 2000]. So as to test them on realistic instances, we have
improve it by specifying that the next solution has to be better extracted, from a real-world problem, a simpliﬁed multiagent
(in the sense of the leximin preorder) than the current one, and resource allocation problem. In this problem, the resource is a
so on until the constraint network becomes inconsistent. This set of objects O, that must be allocated to some agents under
approach is based on the following constraint:        volume and consumption constraints. The individual utility
                                  −→                  functions are speciﬁed by a set of weights wa,o (one per pair
Deﬁnition−→ 5 (Constraint Leximin) Let X be a vector of (agent, object)): given an allocation of the objects, the indi-
variables, λ be a vector of integers,−→ →− and v be an instanti- vidual utility of an agent i is the sum of the weights wi,o of
                   Leximin                            the objects o that she receives. The weights can be generated
ation. The constraint −→   ( λ,X) holds on the set of
variables belonging to X, and is satisﬁed by v if and only if uniformly or can be concentrated around some powers of 10,
−→         −−−→                                       so as to simulate some kind of priorities8.
  ≺
λ   leximin v(X).                                       We have developed a customizable generator of random
  Although this constraint does not exist in the literature, the instances, available online9. We tested our algorithms on sev-
work of [Frisch et al., 2003] introduces an algorithm for en- eral instances, with very different characteristics, leading to
forcing generalized arc-consistency on a quite similar con- very different kind of problems. Here is a brief description
straint: the multiset ordering constraint, which is, in the con- of each kind of instances appearing in table 1 (by default, the
text of multisets, the equivalent of a leximax7 constraint on weights are non-uniformly distributed, and the constraints are
vectors of variables. At the price of some slight modiﬁca- of medium tightness):
tions, the algorithm they introduce can easily be used to en- (1) 10 agents, 100 objects. (2) 4 agents, 100 objects. (3) 20
force the latter constraint Leximin.                  agents, 40 objects. (4) 10 agents, 100 objects, low-tightness
                                                      constraints. (5) 10 agents, 100 objects, hard-tightness con-
Proposition 3 If the function solve is correct and halts, then
                           MaxLeximinCSP              straints. (6) 10 agents, 30 objects, uniform weights (with low
algorithm 3 halts and solves the           problem.   values), hard-tightness constraints. (7) 4 agents, 150 objects.
  The proof is rather straightforward, so we omit it.   The results from table 1 show that algorithm 1 has the best
                                                      running times with most of the instances, followed by algo-
4.4  Other approaches                                 rithm 2 which is almost as fast, but is less efﬁcient when the
In the context of fuzzy constraints, two algorithms dedicated number of agents increases (instances of kind 3), whereas al-
to the computation of leximin-optimal solutions have been gorithm 3 is better on this kind of instances. As expected, the
published by [Dubois and Fortemps, 1999]. These algorithms algorithm from [Dubois and Fortemps, 1999] explodes when

  7The leximax is based on an increasing reordering of the values, 8Approximating the conditions of our real-world application.
instead of a decreasing one for leximin.                 9http://www.cert.fr/dcsd/THESES/sbouveret/benchmark/

                                                IJCAI-07
                                                   66