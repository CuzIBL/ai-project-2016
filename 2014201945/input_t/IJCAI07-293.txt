       Waiting and Relocation Strategies in Online Stochastic Vehicle Routing

                               Russell Bent and Pascal Van Hentenryck
                                           Brown University
                                       {rbent,pvh}@cs.brown.edu


                    Abstract                          using a sampling-based approach. Their idea is to generate
                                                      scenarios consisting of existing and sampled customers, to
    This paper considers online stochastic multiple ve- solve the scenarios using large neighborhood search [Shaw,
    hicle routing with time windows in which requests 1998], and to make online decisions based on the scenario so-
    arrive dynamically and the goal is to maximize the lutions. Compared to other online stochastic problems such
    number of serviced customers. Contrary to ear-    as packet scheduling [Chang et al., 2000]1 and reservation
    lier algorithms which only move vehicles to known systems [Benoist et al., 2001], online stochastic vehicle rout-
    customers, this paper investigates waiting and re- ing introduces an additional difﬁculty: it takes time to serve a
    location strategies in which vehicles may wait at request. Indeed serving a request involves moving to the cus-
    their current location or relocate to arbitrary sites. tomer, and then processing the request. In addition, a rout-
    Experimental results show that waiting and reloca- ing plan for a scenario may schedule a “sampled” customer
    tion strategies may dramatically improve customer (in contrast to an actual request) on a vehicle, something that
    service, especially for problems that are highly dy- never occurs in these other applications. How to best proceed
    namic and contain many late requests. The deci-   when this situation arises is the key issue studied in this paper.
    sions to wait and to relocate do not exploit any    [Bent and Van Hentenryck, 2004c] took a conservative ap-
    problem-speciﬁc features but rather are obtained by proach to this issue: Their algorithm, which is reviewed sub-
    including choices in the online algorithm that are sequently, ﬁrst ﬁlters all the “sampled” customers from the
    necessarily sub-optimal in an ofﬂine setting.     plans, leaving only actual requests. Vehicles, when they be-
                                                      come idle, are then sent to actual customers, chosen from the
1  Introduction                                       ﬁltered solutions of the scenarios. Apparently, their design
Vehicle routing with time windows is a hard combinatorial decision was motivated by the fact that sampled customers
optimization problem with many important applications in may never actually place a request. However, the fact that a
distribution and transportation scheduling. It has received sampled customer is served next in a scenario solution pro-
considerable attention in the last decades and sophisticated vides insight into the nature of the uncertainty and solutions.
algorithms are now available to ﬁnd near-optimal solutions in The key contribution of this paper is to propose two novel
reasonable time. In recent years, attention has shifted to on- strategies, waiting and relocation, to address this issue and to
line and/or stochastic versions of the problem. The stochastic better exploit stochastic information in online vehicle routing.
and online versions are motivated by the inherent uncertain- The waiting strategy recognizes that it is sometimes beneﬁcial
ties arising in many industrial problems and technological de- for a vehicle to wait at the current location instead of moving
velopments, such as onboard computers and communication to a known customer. The relocation strategy goes one step
systems, which give transportation systems the opportunity to further and may move vehicles to customer locations where
update plans even after the vehicle has been deployed. no requests were placed (yet). These new strategies make
  In online stochastic problems, customers arrive dynami- several fundamental contributions:
cally as the algorithm proceeds and each customer request • The vehicles can wait or relocate anywhere and at
has a time window during which it can be served. The al-  any time during the algorithm execution. This con-
gorithm must decide whether to accept or reject the request trasts with earlier approaches (e.g., [Larsen et al., 2004;
upon arrival. If it is accepted, the online algorithm must serve van Hemert, 2004]) where waiting and relocation points
the request. The online algorithm typically has two black- are deﬁned a priori using knowledge of the distribution,
boxes available to make decisions: an optimization algorithm clustering of the customers, and heuristics.
for the deterministic version of the problem and a conditional • The decisions of when and where to wait are systemati-
sampling procedure to generate future requests (e.g., [Chang cally derived from stochastic information. Indeed, wait-
et al., 2000; Benoist et al., 2001]).
  Online stochastic vehicle routing was ﬁrst studied in [Bent 1This paper also contains a comparison between online stochas-
and Van Hentenryck, 2003; Bent and Van Hentenryck, 2004c] tic optimization and POMDP approaches.

                                                 IJCAI07
                                                  1816                                                                                      n
    ing and relocation simply make available to the online of its customer capacities, i.e., q(ρ)= i=1 q(ci). A routing
    algorithms decisions that are necessarily sub-optimal in plan is a tuple of routes (ρ1,...,ρm) one for each vehicle,
    the ofﬂine setting. This contrasts with heuristics to dis- in which each customer appears at most once. We also use
    tribute waiting time in routing plans (e.g., [Mitrovic- cust(ρ) and cust(γ) to denote the customers of a route ρ and
    Minic et al., 2004; Mitrovic-Minic and Laporte, 2004]) aplanγ. A routing plan assigns a unique successor and pre-
    which do not use stochastic information.          decessor for each served customer and depot. For a plan γ,
                                                      the successor of site c is denoted by c+ and the predecessor
  • A decision to wait or relocate solely relies on the sce-       −
    nario solutions, not on speciﬁc properties of the distribu- is denoted by c .
    tion which is used as a black-box. Hence the strategies Departure Times Routing plans do not prescribe departure
    should naturally transfer to a variety of applications. times for the vehicles. These departure times are typically not
                                                      uniquely deﬁned: a vehicle may depart at different times from
Experimental results show that the waiting and relocation speciﬁc customers and still visit all its assigned customers
strategies may produce dramatic improvements in customer before the deadline. In addition to the routing plan, a solution
service compared to earlier algorithms, bridging much of the will also consist of an assignment σ : R → H of starting
gap between the online solution and an ofﬂine, a posteriori times to all customers.
solution where all the uncertainty has been revealed. The im-
provements are particularly impressive for highly dynamic in- The Vehicle Routing Problem We are now in position to
stances with many late customers, which are particular chal- describe the vehicle routing problem. A solution to a vehicle
lenging for earlier algorithms.                       routing problem with time windows (VRPTW) is a routing
  The rest of the paper is organized as follows. Sections 2–3 plan γ =(ρ1,...,ρm) and a starting time assignment σ sat-
present the ofﬂine and online problems. Sections 4–6 present isfying the capacity and time window constraints, i.e.,
the online stochastic algorithm in stepwise reﬁnements, con-   ⎧
                                                               ⎪ q(ρj) ≤ Q                (1 ≤ j ≤ m)
cluding with the waiting and relocation strategies. Section 7  ⎪
                                                               ⎨ σ(c) − p(c) ≤ l(c)(c        ∈ cust(γ))
presents the problem instances and the experimental results.
                                                       C(γ) ≡    σ(c) ≥ max(e(c),
                                                               ⎪     −       −
                                                               ⎩⎪  σ(c )+d(c  ,c)) + p(c)(c  ∈ cust(γ))
2  The Ofﬂine Problem                                            σ(c)+d(c, c+) ≤ l(o)(c      ∈ cust(γ))
The Input Data  A vehicle routing problem is speciﬁed by The objective is to ﬁnd a solution maximizing the number
a number of customers that must be visited by a pool of ve- of served customers |cust(γ)|. This objective function dif-
hicles. Each customer makes a request that must be served fers from the optimization criterion used the Solomon bench-
within a time window and takes some capacity from the vehi- marks, where the goal is to minimize the number of vehi-
cle. Each vehicle starts at the depot, serves some customers, cles and, in case of ties, to minimize the total travel time.
and must return to the depot by the deadline.         This highlights the difference between strategic planning and
  Each problem contains a set R of n customers and a depot operational decision making. As maximizing the number of
o.ThesetS of sites is thus R ∪{o}. The travel time between
                       (   )                          served customers is very difﬁcult on the problems considered
sites i and j is denoted by d i, j . Each request is associated here, the cost associated with relocating or waiting (as fac-
with a customer and, since each customer makes at most one tored into the travel time) is negligible.
request, we use customer and request interchangeably. Every
request c has a demand q(c) ≥ 0 and a service time p(c) ≥ 0. Notations If S is a non-empty sequence, FIRST(S) and
Each instance has a pool of m identical vehicles with capacity LAST(S) denote the ﬁrst and the last element of a non-empty
                                                      sequence. The concatenation of two sequences S1 and S2 is
Q. Each vehicle starts from the depot.                                                      −
  Each customer c has a time window speciﬁed by an interval denoted by S1 : S2.IfS is a sequence and S is a preﬁx of
                                                              −  −                 +           =  − :  +
[e(c),l(c)] satisfying e(c) ≤ l(c). The time window repre- S,thenS S denotes the sufﬁx S such that S S S .
sents the earliest and latest possible arrival times of a vehicle If S is a sequence and R is a set, FILTER(S, R) denotes the
serving customer c. In other words, the service for customer sequence obtained by removing the elements of R from S.
c may start as early as e(c) and as late as l(c). A customer c
may not be served before e(c) but a vehicle arriving early to 3 The Online Problem
serve c may wait at the site until time e(c) before beginning
                                    =[     ]          In the online problem, requests arrive dynamically as the al-
service. The depot has a time window H e0,l0 ,which   gorithm proceeds. The online algorithm maintains a par-
represents the earliest departure and latest possible return for      −      −       −
                                                      tial routing plan γ = ρ1 ,...,ρm consisting of a par-
the vehicles. Typically, e0 denotes the beginning of the day
                                                      tial route ρi for each vehicle i. It also maintains a par-
and l0 is the deadline by which all vehicles must return. tial assignment σ− of starting times for all customers in
                                                           −
Routing Plans Optimization algorithms for vehicle routing cust(γ ) \{LAST(ρ1),...,LAST(ρm)}. These times spec-
typically return a routing plan that speciﬁes the order in which ify when the vehicle serving a given customer has departed
each vehicle visits its customers. A vehicle route, or route for to the next customer on the same vehicle. The last customers
short, starts at the depot, serves some customers, and returns on the vehicles have no departure times, since they have not
to the depot. A customer appears at most once on a route. been served yet.
Hence a route is a sequence o, c1,...,cn,o, where ci ∈ R The online algorithms have at their disposal an optimiza-
and all ci are distinct. The capacity of a route ρ is the sum tion algorithm O. Given a set of customer requests R and

                                                 IJCAI07
                                                  1817                  A(          )                                     C(   R   Γ)
ONLINE ALGORITHM      R1,...,Rh                       CHOOSEREQUEST-   ρt,  t,
       ←;                                                     t
 1  ρ0                                                 1  F ←   i=1 Ri;
 2  σ0 ←  σ⊥;                                          2  for r ∈ F
 3  Γ ←  GENERATESOLUTIONS(ρ0,σ0,R1);                  3  do f(r) ← 0;
 4  for t ∈ H                                          4  for ρ ∈ Γ
       A  ←                  (             A     Γ);
 5  do   t   ACCEPTREQUESTS   ρt−1,σt−1,Rt,  t−1,      5  do r ← FIRST(FILTER(ρ − ρt,F));
 6     Γ ←  UPDATEPLANS(ρt−1,σt−1, At, Γ);             6    f(r) ←  f(r)+1;
 7     if IDLE(ρt−1,σt−1)                              7  return argmax(r ∈ F ) f(r);
 8       then st ← CHOOSEREQUEST(ρt−1,  At, Γ);
 9           ρt ← ρt−1 : st;                              Figure 2: Consensus for Online Stochastic Routing.
10           σt ←  σt−1[LAST(ρt−1) ← t];
                                                      determines whether to accept any new requests that have ar-
11           Γ ←{ρ   ∈ Γ | FIRST(ρ − ρt−1)=st };
                                                      rived. Next those plans that cannot accommodate the new
12       else ρt ← ρt−1;
                                                      accepted requests At (line 6) are removed from Γ.Itisim-
13           σt ←  σt−1;
                                                      portant to stress that a least one plan p ∈ Γ should be able
14     Γ ←  Γ ∪ GENERATESOLUTIONS(ρt,σt,  At);
                                                      to accommodate the requests in At (through insertion or re-
15  return (ρh,σh);
                                                      placement of an equivalent sampled customer) since other-
                                                      wise the algorithm cannot provide the necessary service guar-
GENERATESOLUTIONS(ρt,σt,  At)
1  Γ ←∅;                                              antees. In this paper, customers are accepted greedily when-
2  repeat                                             ever a routing plan can accommodate them. Using stochastic
                                                      information for accepting/rejecting did not bring signiﬁcant
3         R ← SAMPLE(t);
                                                      improvements. The algorithm then determines whether the
4         Γ ← Γ ∪{O(ρt,σt, At,R)};
5    until time t +1                                  vehicle is idle, that is whether service is completed for the
6  return Γ;                                          last customer in ρt−1 given the departure times in σt−1.If
                                                      the vehicle is busy traveling or servicing the last customer in
          Figure 1: Online Stochastic Routing         ρt−1, the routing plan and departure times remain the same
                                                      (lines 12–13) and the algorithm simply continues generating
       −   −      −  −                         +
apair(γ  ,σ ), O(γ ,σ  ,R) returns a routing plan γ = plans (line 14). Otherwise, the vehicle is idle and the algo-
  −   +      −    +                  +
ρ1 : ρ1 ,...,ρm : ρm maximizing |cust(γ )| and satisfy- rithm chooses a request st to serve using the plans in Γ (line
ing C−(γ+),whereC−   denotes the problem-speciﬁc con- 8), augments the routing plan (line 9) and the departure times
straints C where the time windows of each customer c in (line 10), and updates Γ to remove the plans incompatible
     −
cust(γ ) \{LAST(ρ1),...,LAST(ρm)} have been tightened with the decisions (line 11). It is useful to review some of the
to [σ−(c),σ−(c)]. The online algorithms also use a proce- details of the algorithm.
dure SAMPLE(t) to conditionally sample the request distribu-
                                                        • a vehicle is idle at time t for a plan s1,...,sk and
tion from time t to the time horizon.                     departure times σ if
  The rest of this paper describes the online stochastic algo-
rithms in stepwise reﬁnements using the algorithms of [Bent k =0∨ max(σ(sk−1)+d(sk−1,sk),e(sk))+p(sk) ≤ t.
and Van Hentenryck, 2004a] as a basis to clearly identify our
contributions. The algorithms are presented for a single ve- In other words, a vehicle is idle when its route has no
hicle, their generalization to multiple vehicles being obtained customers or when it has ﬁnished serving its last cus-
naturally using pointwise decisions [Bent and Van Henten- tomer sk by time t.
ryck, 2004a].                                           • The algorithm assigns the departure time of the last cus-
                                                          tomer in ρt−1 to time t in line 10. The vehicle thus de-
4  Online Vehicle Routing                                 parts for customer st at time t.
                                                        • A routing plan ρ that next visits a customer other than st
We now present the generic online routing algorithm. Since                    Γ
there is only one vehicle, a routing plan is simply the vehi- must be removed from since its decisions are incom-
cle route and we use both terms interchangeably. The generic patible with ρt (line 11).
online algorithm is depicted in Figure 1. It maintains a set of Figure 1 also depicts how to generate plans. Line 3 of func-
plans Γ representing scenario solutions that are used to make tion GENERATESOLUTIONS generates a scenario by sam-
decisions over the course of the computation. At every time pling the distribution from time t to the horizon (the time
t, the algorithm also maintains a partial routing plan ρt, its in which the vehicles must return to the depot). Line 4
associated departure times σt,andRt the requests that be- calls the optimization algorithm with the routing plan and
come available. Finally, the algorithm assumes that the set of departure times at time t. It remains to specify how to
requests R1 is available before the start of the computation. make decisions. Figure 2 shows how to implement function
The implementation also includes service guarantees: Once a CHOOSEREQUEST to obtain the consensus algorithm C from
request is accepted, it must be served.               [Bent and Van Hentenryck, 2004d] where the details can be
  Lines 1–2 initialize the partial routing plan and the depar- found. Algorithm C considers all known requests F (line 1)
ture times, while line 3 generates the initial set of plans used and initializes their evaluations (lines 2–3). It then considers
in the decisions. The body of the algorithm (lines 5–15) ﬁrst each routing plan ρ ∈ Γ (line 4), retrieves the request served

                                                 IJCAI07
                                                  1818                    (  A   Γ)                                            (   A  Γ)
CHOOSEREQUEST-CW   ρt,  t,                           CHOOSEREQUEST-CR    ρt,  t,
          t                                                   ∈ Customers
1  F  ←   i=1 Ai;                                      1  for r
2  for r ∈ F ∪{⊥}                                      2  do f(r) ← 0;
3  do f(r) ← 0;                                        3  for ρ ∈ Γ
4  for ρ ∈ Γ                                           4  do r ← FIRST(ρ − ρt);
                                                              ( ) ←  ( )+1;
5  do r ← FIRST(ρ − ρt);                               5    f  r    f r
6     if r ∈ F                                         6  return argmax(r ∈ Customers) f(r);
              ( ) ←  ( )+1;
7       then f r   f r                                     Figure 4: Consensus with a Relocation Strategy.
8       else f(⊥) ← f(⊥)+1;
9  return argmax(r ∈ F ∪{⊥})  f(r);                   Mitrovic-Minic and Laporte, 2004]). The beauty in the al-
                                                      gorithm presented here is that the choice of when and where
Figure 3: The Consensus Algorithm with a Waiting Strategy. to wait is fully automatic and guided by the scenarios.
next in ρ, and increments its credit (line 6). The request in F
with the best evaluation is selected in line 7.       6   A Relocation Strategy
  It is important to emphasize a critical point in this imple- The waiting strategy recognizes that it may be beneﬁcial to
                    ∈ Γ                 =      : +
mentation. A solution ρ is a routing plan ρ ρt−1 ρ    wait at the current location instead of serving an accepted
starting with partial route ρt−1 followed by a sequence of re- request. It is especially appropriate for problems in which
quests coming from F and the sampling. As a consequence, the bottleneck is to minimize travel times and it is reason-
there is no guarantee that the request s served next on the ve- ably easy to serve the customers. When the challenge is in
          =       ( +)                    ∈
hicle, i.e., s FIRST ρ , is an actual request (s F ), not maximizing the number of served requests, it is appealing to
a sampled customer (s/∈ F ). This is precisely why the im-
                                  +                   explore a relocation strategy and to consider moving to the
plementation in Figure 2 uses FILTER(ρ ,F) to prune plan
 +                                                    location of sampled customers. Once again, the difﬁculty is
ρ  and keep only the requests in F . This guarantees that to determine when and where to move. Figure 4 proposes a
     (     ( +   ))
FIRST FILTER ρ ,F   returns a real customer and that the natural relocation strategy. Its fundamental idea is to avoid
vehicle departs for a customer who requested service. differentiating between accepted and sampled customers: the
                                                      vehicle simply moves to the request with the best evaluation.
5  A Waiting Strategy                                 Lines 1–2 initialize the evaluation of all customers, lines 4–
The algorithm by [Bent and Van Hentenryck, 2004c] ﬁlters 5 increments the ﬁrst request, and line 6 selects the request
sampled customers before selecting the request. This conser- with the best evaluation. The selected request may be either
vative approach ensures that the vehicle always moves to a an accepted or a sampled request.
known customer, not a sampled request. This section investi- A relocation strategy may be beneﬁcial for improving the
gates a waiting strategy based on the recognition that it may number of served requests because it anticipates future re-
be beneﬁcial for the vehicle to wait at its current location in- quests and positions the vehicle to serve them quickly. It is
stead of serving customers too eagerly. For instance, the fact never advantageous when minimizing travel times, since it
that the solution ρ to a scenario at time t starts with a sampled may move to locations where no requests will ever materi-
customer, that is                                     alize. Observe also that when and where to relocate is also
                     +           +                    fully automatic and systematically derived from the scenario
          ρ = ρt−1 : ρ ∧  FIRST(ρ ) ∈/ F,             solutions. This contrasts with other approaches (e.g., [Larsen
                                                      et al., 2004; van Hemert, 2004]) where relocation points are
indicates that it may be beneﬁcial to wait since the sampled
                                                      created using heuristics based on a priori information for spe-
request may materialize, in which case it must be served be-
                                                      ciﬁc problems, instances, and distributions.
fore the ﬁrst accepted customer. The difﬁculty is to decide
when to wait in a systematic fashion given that the algorithm
has solved multiple scenarios, all of which may have differ- 7 Experimental Results
ent customers to serve next in their routing plans. Figure 3 We now describe the experiments that compare our algo-
depicts a natural implementation. Its key idea is to add a wait rithms with those of [Bent and Van Hentenryck, 2004c].
action ⊥ to the accepted requests. When considering a plan
ρ ∈ Γ, the algorithm retrieves the request r to serve next The Benchmarks The online vehicle-routing problems are
in the scenario (line 5). In the case of an accepted request generated from the Solomon benchmarks [Solomon, 1987],a
(r ∈ F ), the evaluation of r is incremented. Otherwise, if r is collection of very challenging vehicle-routing problems with
a sampled customer (r/∈ F ), the evaluation of the wait action 100 customers, many of which have yet to be solved opti-
is incremented. The implementation then selects the element mally. The stochastic versions were developed by [Bent and
of F ∪{⊥}with the best evaluation, which may be either an Van Hentenryck, 2004c] where the details are found. We re-
accepted request or the wait action. The online generic rout- view the salient features of these benchmarks. The problems
ing algorithm must also be generalized slightly to wait. When are divided into classes 1 through 5. The degree of a dy-
the request is the wait action, the algorithm modiﬁes neither namism (DOD) of a problem is the ratio of the number of
the routing plan nor the departure times.             stochastic customers over the number of total customers. The
  Waiting heuristics have attracted considerable attention class 1 problems are characterized by early arriving requests.
recently (see, for instance, [Mitrovic-Minic et al., 2004; and class 2 problems by more late arriving requests. The third

                                                 IJCAI07
                                                  1819class mixes class 1 and 2. For these three classes, the aver-
age DOD is 44%. Class 4 considers problems with more late
arriving customers than class 2 and have an average DOD of
59%. Class 5 considers problems with a higher proportion
of stochastic customers, i.e. an average DOD of 81%.Inall
problems, the expected number of customers is 100.
The Algorithms  The results compare local optimization
(LO) with the consensus and regret algorithms which may in-
clude the waiting and relocation strategies. Algorithm LO is
a generalization of the parallel tabu-search algorithm in [Gen-
dreau et al., 1999]. It generates multiple routing plans on the
accepted customers. These plans are then used to accept or
reject new customers and to select the decisions at each time
step. LO is thus close to algorithm C, the main difference
being that no stochastic information is exploited. The con-  Figure 5: Unserviced Customers for Regret.
sensus algorithms C, CW,andCR have been fully described
in this paper: C is the algorithm originally proposed by [Bent
and Van Hentenryck, 2004c], while CW and CR respectively
include the waiting and relocation strategies. The regret al-
gorithms, R, RW,andRR, improved upon the consensus
algorithms by using a sub-optimality approximation to eval-
uate the value of scheduling each request next on the vehi-
cles and are described in detail in [Bent and Van Hentenryck,
2004b]. They use a simple and fast sub-optimality approx-
imation whose details are described in [Bent et al., 2005].
Consider the decision of choosing which customer to serve
next on vehicle v and let st be the next customer on the route
of vehicle v at time t. To evaluate the regret of another cus-
tomer r on the same vehicle v, the sub-optimality approxima-
tion determines whether there is a feasible swap of r and st
on v, in which case the regret is zero. Otherwise, if such a
                                                           Figure 6: Unserviced Customers for Consensus.
swap violates the time-window constraints, the regret is 1.
                                                                                     R
Initial Plans and Online Process The online stochastic al- DOD grows. The improvement over is signiﬁcant, indicat-
gorithms generate and solve 50 scenarios to select the deci- ing the importance of using relocation on this set of instances.
sions at time 0. The algorithms also generate and solve 50 Subsequent results will characterize more precisely when the
additional samples to create plans given the set of decisions at relocation strategy is of paramount importance. Algorithm
                                                      RW
time 0. As these scenarios are generated and solved ahead of is also quite effective in general, but it is dominated by
                                                      RR
time, the number of scenarios can be arbitrarily large depend- as the DOD increases. Similar results can be observed
                                                                              C  CW      CR
ing on the application. Each such optimization is allocated for the consensus algorithms , ,and but, in general,
one minute. During the online execution, each optimization they serve fewer customers than their regret counterparts.
runs for 10 seconds and uses the LNS procedure from [Shaw, Results on Class 4 Figure 7 depicts the results on class 4.
1998]. All algorithms are executed on an AMD Athlon 64 We highlight the best and second best result for each problem
3000 processor with 512MB of RAM running Linux. Each  in boldface and italics respectively. Algorithms RR and RW
of the instances is run 50 times to account for the nondeter- are reasonably close. For small DODs, R performs the best,
ministic nature of the algorithms. In the results, we often omit
the words “in the average” for brevity.
                                                               DOD   LO   C   CW   CR   R    RW   RR
                                                          101-1 46.3% 2.08 2.24 4.16 3.30 1.94 3.72 2.68
The Results Figures 5 and 6 summarize all the results for 101-2 45.8% 6.78 5.42 5.94 3.62 3.50 4.18 3.44
                                                          101-3 50.0% 3.06 2.06 3.06 2.28 1.66 3.46 3.42
the regret and consensus algorithms regarding the number of 101-4 45.6% 2.90 3.16 4.30 5.54 3.28 4.86 4.58
unserviced customers. (All customers can be served in the 101-5 47.4% 7.70 4.02 5.48 5.12 3.38 5.82 4.58
                                                          102-1 59.0% 1.74 1.78 1.22 0.54 0.92 1.10 1.34
ofﬂine, a posteriori problems.) The ﬁgures depict the results 102-2 57.5% 4.28 1.94 3.44 2.76 2.12 2.86 2.60
for the speciﬁc instances and a linear regression for each class 102-3 56.0% 8.70 3.24 5.06 3.32 3.38 4.14 3.24
                                                          102-4 52.0% 2.18 0.92 1.48 1.84 1.64 1.96 1.78
of algorithms. Some speciﬁc results are cropped by the graph 102-5 57.6% 3.76 2.46 2.90 2.02 1.52 2.68 2.28
extent to maintain its readability. The main result is the out- 104-1 76.1% 21.1 19.7 14.4 13.8 8.64 11.1 11.4
                                                          104-2 75.6% 25.6 28.6 13.9 11.7 20.1 11.9 10.5
standing behavior of RR, i.e., the regret algorithm with a re- 104-3 76.1% 20.9 16.6 10.4 8.84 7.88 7.80 9.06
                                                          104-4 72.2% 19.6 19.3 14.1 6.36 9.80 8.74 7.38
location strategy. From the interpolations, it can be seen that 104-5 74.4% 15.9 19.0 14.0 9.94 11.7 10.1 8.72
algorithm RR dominates all the algorithms for DODs over
50% and that the improvements increase substantially as the  Figure 7: Unserviced Customers on Class 4.

                                                 IJCAI07
                                                  1820