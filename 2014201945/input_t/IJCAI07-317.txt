                          Planning for Temporally Extended Goals
                                  as Propositional Satisﬁability
                    Robert Mattmuller¨                             Jussi Rintanen
                Albert-Ludwigs-Universit¨at                  National ICT Australia and
                   Institut f¨ur Informatik                Australian National University
                    Freiburg, Germany                            Canberra, Australia
           mattmuel@informatik.uni-freiburg.de              Jussi.Rintanen@nicta.com.au

                    Abstract                          2001], and Metric Interval Temporal Logic (MITL) and Lin-
                                                      ear Temporal Logic (LTL) in TLPlan [Bacchus and Kabanza,
    Planning for temporally extended goals (TEGs)     1996; 2000]. Recently, the Planning Domain Deﬁnition Lan-
    expressed as formulae of Linear-time Temporal     guage (PDDL) has been extended to express state trajectory
    Logic (LTL) is a proper generalization of classi- constraints [Gerevini and Long, 2005]. Both TALplanner and
    cal planning, not only allowing to specify prop-  TLPlan are forward-chaining planners, pruning the search
    erties of a goal state but of the whole plan exe- space by progressing the temporal formula. Other approaches
    cution. Additionally, LTL formulae can be used    include compiling tasks including LTL goals into classical
    to represent domain-speciﬁc control knowledge to  tasks [Cresswell and Coddington, 2004; Baier and McIlraith,
    speed up planning. In this paper we extend SAT-   2006] before solving them by using a classical planner.
                    LTL                    LTL
    based planning for  goals (akin to bounded          Bounded model-checking [Biere et al., 1999; Latvala et al.,
    model-checking in veriﬁcation) to partially ordered 2004], which is an extension of the planning as satisﬁabil-
    plans, thus signiﬁcantly increasing planning efﬁ- ity approach [Kautz and Selman, 1992], can be viewed as a
    ciency compared to purely sequential SAT plan-    SAT-based technique for planning with TEGs. Since the ef-
    ning. We consider a very relaxed notion of par-   ﬁciency of SAT-based planning techniques is often strongly
                                      LTL
    tial ordering and show how planning for goals     dependent on the notion of partially ordered or parallel plans
    (without the next-time operator) can be translated [Kautz and Selman, 1996; Rintanen et al., 2006], extend-
    into a SAT problem and solved very efﬁciently. The ing the SAT-based LTL model-checking/planning approach to
    results extend the practical applicability of SAT- parallel plans may in some cases be very critical to obtain efﬁ-
    based planning to a wider class of planning prob- cient planning. The contribution of this paper is an encoding
    lems. In addition, they could be applied to solving of constraints that preserve the semantics of LTL formulae
    problems in bounded LTL model-checking more ef-   under parallel plans.
    ﬁciently.                                           In Section 2 we give a formal description of the problem to
                                                      be solved. In Section 3 we present the propositional encod-
                                                      ing, in which we use the base encoding of planning as sat-
1  Introduction                                       isﬁability [Kautz and Selman, 1992] reproduced in Section
In classical planning, a goal that an agent has to achieve is 3.1 and the translation of LTL formulae to propositional logic
simply a property of a goal state to reach. TEGs are speciﬁ- [Latvala et al., 2004] reproduced in Section 3.2. Section 3.3
cations not only stating desired properties of a ﬁnal state but shows our adaption of the encoding of parallelism constraints
of a sequence of states, namely the execution of a plan sat- given in [Rintanen et al., 2006] to tasks with TEGs. Our ex-
isfying the speciﬁcation. Expressing these goals as formulae periments are described in Section 4.
of an adequate temporal logic, one can impose more precise
constraints on plans than one could with classical reachabil- 2 Planning for Temporally Extended Goals as
ity goals. So for instance it is possible to specify mainte-
nance goals (some property must be maintained indeﬁnitely), Propositional Satisﬁability
goals stating how the agent should react to some environmen- 2.1 Problem Description
tal condition, and safety goals that impose a restriction on the
agent’s behavior not to change certain properties of the world Notation
state while trying to achieve a reachability goal.    Let A be a set of propositional variables and Φ a proposi-
  In planning, temporal speciﬁcations are usually either re- tional or temporal formula. We write Lit(A) as a shorthand
garded as extended goals or as a means of encoding domain- for A ∪{¬a | a ∈ A} and Lit(Φ) instead of Lit(var(Φ)),
speciﬁc search control knowledge used to guide the planner. where var(Φ) is the set of variables in Φ.IfLit is a set of lit-
                                                                      Φ
Different formalisms have been used, e. g. Temporal Ac- erals, we write Lit := Lit ∩ Lit(Φ).IfΦ is a propositional
tion Logics (TAL) in TALplanner [Doherty and Kvarnstr¨om, formula, then a occurs positively (negatively) in Φ iff there

                                                IJCAI-07
                                                  1966                                                                                            ∞
is an occurrence of a in Φ nested within an even (odd) num- q[(i−b)mod(b−k)]+k, otherwise. Note that q¯k is actually a
ber of negation signs. A negative literal ¬a occurs positively path, i. e. consecutive states are related by →.AnLTL−X
(negatively) in Φ iff a occurs negatively (positively) in Φ.A formula ϕ is valid along such a ﬁnite sequence q¯, written as
literal  occurs in Φ if it occurs positively or negatively in Φ. q¯ |= ϕ,iffthereisak ∈{0,...,b− 1} such that qb = qk and
                                                       ∞
We write pos(, Φ), neg(, Φ),andocc(, Φ), respectively. q¯k |= ϕ.
                                                        We make sure that there is a k ∈{0,...,b− 1} such that
Linear Temporal Logic
                                                      qb = qk by allowing idling in a ﬁnal state (enforcing it if there
In order to specify TEGs, we have to choose a speciﬁcation is no other loop).
language. Here we use propositional LTL [Emerson, 1990]
without next-time operator because it has a simple and well- Planning
deﬁned semantics and it is sufﬁciently expressive for many A planning task is a tuple P = A, I, O, ϕ ,whereA is a
qualitative TEGs.                                     ﬁnite set of Boolean state variables, I ∈ 2A is the initial state,
  The set of well-formed LTL−X formulae in negation nor- O is a ﬁnite set of operators, and ϕ is an LTL−X formula with
mal form over a set A of propositional variables (LTL−X variables in A. Operators have the form o = p, e, c ,wherep
formulae for short) is inductively deﬁned as follows: for all is a propositional formula over A, the precondition of o, e is a
a ∈ A, a and ¬a are LTL−X formulae. If ϕ, ϕ1,andϕ2 are ﬁnite set of literals over A, the unconditional effects of o,and
LTL−X  formulae, so are ϕ1 ∧ ϕ2, ϕ1 ∨ ϕ2, Fϕ (“eventually c is a ﬁnite set of pairs f  d, consisting of a propositional
ϕ”), Gϕ (“always ϕ”), ϕ1Uϕ2 (“ϕ1 until ϕ2”) and ϕ1Rϕ2 formula f and a ﬁnite set of literals d. These pairs are the
(“ϕ1 releases ϕ2”).                                   conditional effects of o.
     LTL           ϕ      A                                                    o                  o
  An     −X formula   over  is evaluated along an inﬁ-  The set of all effects of will be written as [ ]♦ :=
nite path in a state space over A. Formally, a Kripke model e ∪ {d | f  d ∈ c}, the set of unconditional effects as
M  =   Q, →,L  is a triple where Q is a set of states, o      e                                     q
                                                      [ ] :=   , and the set of active effects in a state as
→⊆   Q × Q                              Q              o     e ∪  {d | f  d ∈ c   q | f}
           is a reﬂexive binary relation over ,thetran- [ ]q :=                and  =    for a single oper-
sition relation, and L : Q → 2A is a function assigning to
                                                      ator o and [S]q := o∈S [o]q for a set S of operators.
each state a propositional valuation of the variables in A.A S                               q  q |  p
      M             π  N →  Q               n ∈ N       Aset   of operators is applicable in a state if = for
path in  is a function :      such that for all   ,   all o ∈ S and [S] is consistent. We identify an operator
π(n) → π(n +1).Ifπ is a path in M and i ∈ N, then the ith             q
           i                     i                    o with the singleton set {o}, thus o is applicable in q if its
sufﬁx of π, π : N → Q,isdeﬁnedasπ (j):=π(i  + j) for
all j ∈ N.                                            precondition is satisﬁed and its active effects are consistent.
     k, b ∈ N k<b       π   u · vω                    For a set S of operators, possibly singleton for sequential
  For       ,     ,apath  =       consisting of a ﬁnite                                    q         S
preﬁx u = π(0),...,π(k−1) and a loop v = π(k),...,π(b− plans or empty to model idling, and a state such that is
                                 b, k                 applicable in q, the simultaneous application of S in q results
1), repeated inﬁnitely often, is called a ( )-loop. It is called q           q                       S
a b-loop if it is a (b, k)-loop for some k<b.         in the state obtained from by making the literals in [ ]q
                                                      true and leaving the other state variables unchanged. We then
               LTL−X         ϕ           π
  The truth of an     formula  along a path , symbol-        S      o  
ically π |= ϕ, is now inductively deﬁned as follows:  write q−→q (or q−→q if S = {o}). Let S¯ = S0,...,Sb−1 
                                                      be a sequence of sets of operators and q0 a state such that
          π | a  ⇔ a ∈ L π
            =   :       ( (0))                           S0   S1    Sb−1
                                                      q0−→q1−→   ...−−−→qb is deﬁned. Then the sequence of
         π | ¬a  ⇔ a/∈ L π
           =    :       ( (0))                        states exec(q0, S¯):=q0,...,qb  is called the execution
    π |= ϕ1 ∧ ϕ2 :⇔ π |= ϕ1 and π |= ϕ2               of S¯ in q0. Finally, let S¯ = S0,...,Sb−1  be a sequence
                                                                         ≺    ≺  ,...,≺    
    π |= ϕ1 ∨ ϕ2 :⇔ π |= ϕ1 or π |= ϕ2                of sets of operators, ¯ =  0      b−1  a sequence of
                            i                         binary relations such that ≺t is a total ordering of St,say
        π |= Fϕ :⇔∃i  ∈ N : π |= ϕ                    o   ≺  ··· ≺  o             t ∈{,...,b−    }     q
                                                       t,0  t     t  t,|St|−1,forall   0        1 ,and  0
                            i                                              o     o     o      o
        π | Gϕ   ⇔∀i  ∈ N  π  | ϕ                                           t,0 1 t,1 2 t,2    t,|St|−1
          =     :         :   =                       a state. Assume that qt−−→qt −−→qt −−→ ...−−−−−→qt+1
                            i                                             t   ∈{,...,b−       }
     π |= ϕ1Uϕ2 :⇔∃i  ∈ N : π |= ϕ2 and               is  deﬁned  for all           0        1 .Then
                                                                                            ¯
                                       j              the   sequence   of   states  exec(q0, S,≺¯ ):=
                   ∀j ∈{  ,...,i−  }  π |  ϕ1              1  2        1  2
                         0        1  :   =            q0,q0,q0,...,q1,q1,q1,...,q2,...,qb−1  is called a
                            i                                             S¯  q
     π |= ϕ1Rϕ2 :⇔∀i  ∈ N : π |= ϕ2 or                linearized execution of in 0.
                                       j                A plan of length b for P = A, I, O, ϕ  is a tuple S¯ =
                   ∃j ∈{0,...,i−  1} : π |= ϕ1.
                                                      S0,...,Sb−1  with St ⊆  O for all t ∈{0,...,b−  1}
  If a given path π is a b-loop, the ﬁrst b states of π together together with a sequence ≺¯ = ≺0,...,≺b−1  such that
with the value of k contain all the information needed to eval- (a) ≺t is a total ordering of St for all t ∈{0,...,b− 1}
uate ϕ along π. In the following, all paths we will deal with and (b) q¯ = exec(I,S,¯ ≺¯ ) is deﬁned and q¯ |= ϕ in the Kripke
are of that type.                                     model induced by P.
  Let q¯ = q0,...,qb  be a ﬁnite sequence of states such
that qi → qi+1 for all i ∈{0,...,b− 1} and that there is 2.2 Reduction to Satisﬁability
a k ∈{0,...,b−  1} with qb = qk. In order to be able to Planning as satisﬁability [Kautz and Selman, 1992] roughly
evaluate an LTL−X formula along q¯, we consider an inﬁnite works as follows: given a planning task P = A, I, O, ϕ ,
unraveling of q¯:Ifqb ∈{q0,...,qb−1},sayqb = qk,let   propositional formulae Φ0, Φ1, Φ2,... are generated such
 ∞                  ∞                       ∞
q¯k : N → Q,whereq¯k  (i)=qi,ifi<b,andq¯k     (i)=    that there exists a plan of length b for P if Φb is satisﬁable.

                                                IJCAI-07
                                                  1967The Φb are evaluated by using a SAT solver. If Φb is unsatis- P = A, I, O, ϕ  be a planning task and b ∈ N.Then
ﬁable, the evaluation will proceed to Φb+1, otherwise a plan Pb  looptoAx  ∧ beforeAx ∧ uniqueAx  ∧
for P can be extracted from a satisfying valuation v for Φb. bmc :=        b           b          b
                                                                                 0
                                                                    inftyAx b ∧ ϕb , where
                                                                                            
2.3  Solution Quality                                              b−1        
                                                       looptoAx b :=      lt →      (at ↔ ab) ,
                          S¯   S ,...,S                              t=0        a∈A
The quality of a parallel plan = 0      b−1  can be                        b−1                      
                                         b
measured with respect to its parallel plan length or its se- beforeAx b := ¬bef 0 ∧ bef t ↔ (bef t−1 ∨ lt−1) ,
                    b−1 |S |                                                 t=1
quential plan length t=0 t . We will focus on ﬁnding               b−1                         b−1
plans with a low parallel plan length because the size of the uniqueAx b := bef t →¬lt , inftyAx b :=  lt,
                                                                      t=0                          t=0
largest propositional formula to be considered for a given task
is roughly proportional to the parallel length of a plan corre- with fresh auxiliary variables lt, bef t, t ∈{0,...,b− 1}
sponding to a satisfying valuation. As SAT solver running (with the intended semantics that there is a loop from qb−1
                                                                                  
times grow exponentially in the formula size in the worst back to qt or back to some qt ,t <t, respectively). The
                                                                          0
case, obtaining small formulae is particularly important. recursive translation ϕb of ϕ is deﬁned as
                                                                         t<b                t  b
                                                                                            =
                                                             t                            b−1
3  Propositional Encoding                                 a             at                 (lj ∧ aj)
                                                             b                           j=0
                                                              t                          b−1
                                                          ¬a           ¬at                (lj ∧¬aj)
3.1  Base Encoding                                            b                         j=0
                                                                t        t      t     b−1             j
                             b                         ϕ1 ∧ ϕ2     ϕ1 ∧ ϕ2         (lj ∧ ϕ1 ∧ ϕ2 )
We ﬁrst give the base encoding P of the transition sys-       b        b      b   j=0              b
                             base                               t        t      t     b−1             j
                          P   A, I, O, ϕ              ϕ1 ∨ ϕ2     ϕ1 ∨ ϕ2         (lj ∧ ϕ1 ∨ ϕ2 )
tem induced by a planning task =         for a bound            b        b      b     j=0            b
b                                                             t        t       t+1      b−1          j
 on the plan length ﬁrst proposed by [Kautz and Selman,  Fϕ       ϕ ∨ Fϕ             (lj ∧Fϕ   )
                                                              b        b       b       j=0          b
1992], omitting the reachability goal formula:                t        t       t+1     b−1           j
                                                         Gϕ       ϕ ∧ Gϕ            (lj ∧Gϕ   )
                                                              b        b  
    b      j=0           b
                           b−1                                 t      t       t      b−1             j
                 b                                      ϕ1Uϕ2b   ϕ2b ∨ ϕ1b ∧    j=0(lj ∧ϕ1Uϕ2   b)
              Pbase = I0 ∧     Rt,                                            
                              t=0                                    ϕ Uϕ  t+1
                                                                       1   
2 b     
                                                                t       t       t     b−1             j
where Rt is the conjunction of precondition axioms ot → ϕ1Rϕ2     ϕ2 ∧  ϕ1 ∨        lj ∧ϕ1Rϕ2  
                                                               b       b       b    j=0(            b)
pt, effect axioms ot → et+1, conditional effect axioms                      t+1
                                                                    ∨ϕ1Rϕ2b
       ((ot ∧ ft) →   dt+1) for all o = p, e, c ∈O,
 fd∈c                                                    Fϕ   t  ϕt ∨Fϕ   t+1         ⊥
and positive and negative frame axioms (¬at ∧at+1) →        b        b       b
                                                          Gϕ   t ϕt ∧Gϕ   t+1          
 o∈O(ot ∧ (EPC a(o))t) and (at ∧¬at+1) →   o∈O(ot ∧            b      b   
    b
 EPC    o                      a ∈  A                   ϕ Uϕ    t ϕ t ∨ ϕ t ∧          ⊥
(    ¬a( ))t), respectively, for all . In the frame       1   2 b    2 b     1 b 
axioms, EPC (p, e, c ) is deﬁned as ,if ∈ e,andas               ϕ Uϕ    t+1
                                                                       1  
2 b
 {f | f  d ∈ c and  ∈ d},otherwise.                           t      t       t
                                                        ϕ1Rϕ2   b ϕ2b ∧ ϕ1b ∨          
  This encoding contains propositional variables at for all                     
                                                                     ϕ Rϕ    t+1
state variables a ∈ A and time points t ∈{0,...,b} as                  1   2 b
well as ot for all operators o ∈ O and time points t ∈                      ·t
{ ,...,b−  }                              a           Notice that the translation b is closely related to the formula
 0        1  with the intended semantics that holds at                          [
         t   a                        o               progression procedures used in Bacchus and Kabanza, 2000;
time point iff t is true, and that operator is applied at Doherty and Kvarnstr¨om, 2001].
time point t iff ot is true. Where sets of variables or proposi-
                                t                       The following theorem states the correctness and com-
tional formulae are indexed with some , this actually denotes pleteness of the propositional translation. A slightly different
the sets or formulae with variables indexed correspondingly. formulation as well as a proof can be found in [Latvala et al.,
  The following theorem states the correctness of the propo- 2004].
sitional translation. A proof can be found in [Rintanen et al.,      P    A, I, O, ϕ 
2006].                                                Theorem 2.  Let   =            be a planning task and
                                                      b ∈  N. Then there exists a sequence of sets of operators
Theorem  1. Let P  =  A, I, O, ϕ  be a planning task. S¯ = S0,...,Sb−1  such that q¯ = exec(I,S¯) is deﬁned and
                                                                            b        b
Then there exists a sequence of sets of operators S¯ = q¯ |= ϕ iff the formula Pbase ∧ Pbmc is satisﬁable.
S0,...,Sb−1  such that exec(I,S¯) is deﬁned iff the formula
   b                                                  3.3  Parallel Plans
Pbase is satisﬁable.
                                                      In this section we present our main contribution, being con-
3.2  Temporally Extended Goals                        straints which guarantee that the meaning of LTL−X formulae
                                                      is preserved under parallel plans, and a propositional encod-
In this subsection we reproduce the reduction of the bounded ing of these constraints.
LTL/LTL−X  model-checking problem to propositional satis- Theorem 2 tells us how to encode the requirement that
ﬁability given in [Latvala et al., 2004], adding the constraint there is a sequence S¯ such that exec(I,S¯) |= ϕ.Butwe
that a satisfying sequence of states must contain a loop: let have not yet made sure that S¯ is in fact a plan, i. e. there

                                                IJCAI-07
                                                  1968is a sequence ≺¯ of corresponding total orderings such that its set of active effects for any t ∈{0,...,b− 1}.These
exec(I,S,¯ ≺¯ ) |= ϕ. For such a sequence ≺¯ toyieldanadmis- two possibilities are ruled out by condition (1.a.) together
sible linearization, it must ensure that (a) q¯ = exec(I,S,¯ ≺¯ ) with (1.b.i.) and (1.b.ii.) of Deﬁnition 2 respectively (see
is deﬁned and if so, that (b) q¯ |= ϕ. In order to state how this [Rintanen et al., 2006] for a detailed proof of that claim).
can be achieved, we need some deﬁnitions. The ﬁrst one and If exec(I,S,¯ ≺¯ ) is deﬁned, by using Lemma 3 it is sufﬁ-
the subsequent lemma are due to [Lamport, 1983].      cient to show that exec(I,S¯) ∼ exec(I,S,¯ ≺¯ ) in the Kripke
               π    q ,q ,q ,...   π   q , q , q ,... model M   =  Q, →,L ,whereQ    and →  form the state
Deﬁnition 1. Let =  0  1  2    and ˜ =˜0  ˜1 ˜2                                         var(ϕ)
be two inﬁnite (ﬁnite) paths in a Kripke model Q, →,L . space induced by P and L : Q → 2     is deﬁned by
                                                      L q    q ∩ var ϕ
Then π and π˜ are called stuttering equivalent, π ∼ π˜ for ( )=     ( ). To see that this is true, consider a sin-
short, if there are two inﬁnite (ﬁnite) sequences of natural gle time point t ∈{0,...,b− 1} ﬁrst. Let ≺t be the total
                                                                S          o   ≺  ··· ≺  o
numbers 0=i0   <i1  <i2  <  ...(<in)  and 0=j0   <    ordering of t and, say, t,0 t    t  t,|St|−1. Then the
j1 <j2  <  ...(<jn)  such that for all 0 ≤ k (<n):    subsequence of the linearized execution exec(I,S,¯ ≺¯ )
L q       L q        ...    L q           L q
 ( ik )=   ( ik+1)=      =    ( ik+1−1)=   (˜jk )=                o     o    o       o
L q        ...   L q                                       ···−→q −−t,→0 q1−−t,→1 q2−−t,→2 ...−−−−−t,|St|−→1 q −→ ···
 (˜jk +1)=     =   (˜jk+1−1). A ﬁnite subsequence like          t     t     t                t+1
q ,q    ,...,q        π   π
 ik ik +1    ik+1−1 of  or ˜ consisting of identically la-                                     exec I,S¯
beled states is called a block.                       corresponds to the subsequence of the execution ( )

             ϕ      LTL            M    Q, →,L                              St
Lemma 3.  Let  be an    −X formula,   =          a                    ···−→qt−→qt+1−→ ···
Kripke model, where L : Q → 2A for some A ⊇ var(ϕ), and
π, π˜ two inﬁnite (ﬁnite) paths in M with π ∼ π˜.Thenπ |= ϕ Note that condition (2.) of Deﬁnition 2 together with the fact
iff π˜ |= ϕ.                                          that no operator affects an operator applied later in ≺t makes
                                                                  o ≺  o  o ϕ ⊆  o ϕ
  The following deﬁnition, adapted from a similar one by sure that for t , [ ]♦   [ ] holds and thus all ef-
                                                              St             ϕ
[Rintanen et al., 2006], is crucial for the rest of this section fects in [ ]qt relevant to , i. e. those effects concerning
                                                                          ϕ             o
in that it describes under which circumstances an operator o a variable occurring in , are effects of t,0. Therefore, the
                                                             o   ,...,o
may or may not be applied before an operator o in a lin- operators t,1 t,|St|−1 do not have an additional effect
                                                                               1       2
earization ≺ of a set of operators S if one wants to ensure on the labeling L. Thus, L(qt )=L(qt )=... = L(qt+1),
                                                           1  2
that for all time points t the application of St in qt in the or- and qt ,qt ,...,qt+1 form one block of the stuttering equiv-
dering given by ≺t is deﬁned in the ﬁrst place, and if so, that alence of exec(I,S,¯ ≺¯ ) and exec(I,S¯). The corresponding
exec(I,S,¯ ≺¯ ) |= ϕ.                                 block in exec(I,S¯) is the singleton {qt+1}. The other blocks
                                                      are constructed analogously.
Deﬁnition 2. Let P = A, I, O, ϕ  be a planning task and
o   p, e, c ,o p,e,c ∈O.Theno affects o iff o  o
 =           =                                 =        The next step is to ﬁnd a propositional formula encoding
and either (1.) there is a literal  over A such that (a.)  ∈ [o]♦                                     
                                                 the condition that at no time point t any two operators o, o
and (b.) (i.) neg(, p ) or (ii.) occ(, f ) for some f  d ∈ c , o   o    o ≺  o
      o ϕ \ o ϕ  ∅                                  such that affects and    t   can be applied simultane-
or (2.) [ ]♦ [ ] = .                                 ously. For that purpose we deﬁne the notion of a disabling
          ϕ                                                                                  P
  Here, [o ]♦ is the restriction of [o ]♦,i.e. ofthesetof graph [Rintanen et al., 2006] for a planning task .
                                          
all conditional and unconditional effect literals of o , to those Deﬁnition 3. Let P = A, I, O, ϕ  be a planning task. A
literals occurring (positively or negatively) in ϕ. Similarly, directed graph G = O, E ,whereE ⊆ O ×O,isadisabling
   o  p, e, c  o ϕ e ∩ Lit ϕ                                                          
for =        , [ ] =     ( ).                        graph for P if E contains all edges (o, o ) such that (1.) there
  The cases correspond to different problems that can poten-  q              I                O         o
                                                     is a state reachable from with operators in in which
tially arise if o is applied before o in a linearization, namely and o are simultaneously applicable and (2.) o affects o.
to o falsifying the precondition of o [(1.a.) + (1.b.i.)], o af-
                            o                   o      Let St be a set of operators. If the subgraph Gt = St,Et ,
fecting the set of active effects of [(1.a.) + (1.b.ii.)], and E E ∩ S × S                 G    O, E 
and o putting at risk the stuttering equivalence of exec(I,S¯) t = ( t t), of a disabling graph =    for
                                                      P induced by St is acyclic, then there is an ordering ≺t of
and exec(I,S,¯ ≺¯ ) [(2.)]. The deﬁnition gives rise to a condi-                               
                                                      St in which there are no two operators o ≺t o with o af-
tion on the admissibility of a sequence ≺¯ of total orderings. 
                                                      fecting o . In fact, ≺t can be an arbitrary topological or-
             P     A, I, O, ϕ                S¯                    −1
Lemma 4.  Let   =            be a planning task, =    dering of St,Et  . As the strongly connected components
S0,...,Sb−1  a sequence of sets of operators such that (SCCs) of a directed graph form a directed acyclic graph, in-
exec I,S¯ | ϕ     ≺    ≺ ,...,≺    
    (   ) =  , and ¯ =   0      b−1  a sequence such  stead of ensuring the acyclicity of Gt, it is sufﬁcient to ensure
that ≺t is a total ordering of St for all t ∈{0,...,b− 1}.                          G
                                                    the acyclicity of the subgraphs of t induced by the SCCs
If there are no operators o, o ∈ St such that o affects o and C G    Gi    Si,Ei        Si   S  ∩ C
                                                       i of ,i.e. of t =    t  t ,where  t =   t   i and
o ≺t o       t ∈{ ,...,b−  }     S¯            ≺¯       i         i    i
      for any    0        1 ,then  together with is   Et = Et ∩ (St × St ). This can be achieved as follows:
        P
aplanfor  .                                             Let G = O, E  be a disabling graph, C = {C1,...,Cm}
                                                                        G      ≺i
Proof sketch. We have to show that exec(I,S,¯ ≺¯ ) is deﬁned the set of SCCs of ,and an arbitrary total ordering
                                                         Ci     {oi ,...,oi  }       i  ∈{,...,m}
   exec I,S,¯ ≺ | ϕ                                   of     =     1      |Ci| for all      1       ,say
and    (     ¯ ) = . As argued in [Rintanen et al., 2006], i      i           1      n
                                                      oi  ≺  ··· ≺ oi        o ,...,o  ∈ O  E,R  ⊆ O
in order to show that exec(I,S,¯ ≺¯ ) is deﬁned, it sufﬁces to 1     |Ci | .For            ,          and
show that no operator o ∈ St can disable another operator  ∈ Lit(A), we deﬁne formulae stating that there are no
                                                               1     n
o ∈ St by potentially falsifying its precondition or altering oi,oj ∈{o ,...,o },i < j, such that oi ∈ E,oj ∈ R,and

                                                IJCAI-07
                                                  1969oi,oj are applied simultaneously (intuitively, operators in E in Remark 1 form such a sequence. Thus, the precondition
can disable operators in R wrt ):                    of Lemma 4 is satisﬁed and it follows that S¯ together with ≺¯
      1     n                                         is a plan for P, and in particular that exec(I,S,¯ ≺¯ ) is deﬁned
chain(o ,...,o ; E; R; ):=                                      ¯
^˘                                               ¯    and exec(I,S,≺¯ ) |= ϕ.
   oi → aj, | i<j,oi ∈ E,oj ∈ R, {oi+1,...,oj−1}∩R = ∅
  ˘                                              ¯
 ∪ ai, → aj, | i<j,{oi,oj }⊆R, {oi+1,...,oj−1}∩R = ∅ 4  Experiments
  ˘               ¯
 ∪ ai, →¬oi | oi ∈ R ,                               4.1  Setting

          i,                                         We compared the cumulative SAT solver running times un-
where the a  are fresh auxiliary variables. Now, the nega- til the ﬁrst satisﬁable formula for (a.) the parallel encoding
tion of (1) in Deﬁnition 2 translates to the conjunction of
chain                                           ϕ     described in Section 3 and (b.) a sequential encoding derived
     formulae for all time points, SCCs, and literals in , from the parallel one by replacing the parallelism constraints
if we use the following sets E,R:
                                                      by axioms demanding at most one operator per time point.
 E := {o ∈ O |  ∈ [o]♦ } and                        The evaluation of the formulae corresponding to increasing
                                                      plan lengths was performed sequentially. Additionally, we
 R := {p, e, c ∈O | pos(, p) or ex. f  d ∈ c s. t. occ(, f)}.
                                                      compared the (parallel) plan lengths of the resulting plans.
Similarly, the negation of (2) in Deﬁnition 2 translates to the We used two types of planning tasks. First, we considered
            chain                    E∼,R∼
conjunction of    formulae with the sets   :        a simple hand-crafted logistics-like transportation task with
   ∼                         ∼                        three portables and trucks each. The goal was to ﬁnd an in-
 E  := {o ∈ O | /∈ [o] } and R := {o ∈ O |  ∈ [o]♦ }.
                                                     ﬁnite plan assuring that the portables are shipped back and
So, the parallelism constraints can be encoded in the formula forth between two locations indeﬁnitely.
  The goal formula
               "                                                        2         3
          b^−1 ^m  ^                                  we used was ϕ =   j=1 GF    i=1 at(pi, dij) ,wherethe
     b
  Plin :=            chain(oi ,...,oi ; E; R; )t pi                  dij
                              1     |Ci|                are portables and the are locations.
          t=0 i=1 ∈Lit(A)                              The other tasks were adapted from the 2006 International
                                              #
               ^                                      Planning Competition. We modiﬁed the qualitative prefer-
                                      ∼  ∼  ˜
           ∧       chain(oi ,...,oi ; E ; R ; )t .
                          1      |Ci|                 ences tasks from the rovers domain by turning the soft tem-
             ∈Lit(ϕ)                                 poral constraints (preferences) into hard constraints and by
                                                      ignoring the metric function. When changing soft into hard
Remark 1. If the valuation corresponding to a sequence of
              S¯   S ,...,S            Pb          constraints, it turned out that it was necessary to drop some
sets of operators =  0      b−1  satisﬁes  lin ,then  of them in order to keep the tasks solvable. This was done by
for all time points t and SCCs Ci of the disabling graph                       κ
G   O, E                        Pb                 drawing uniformly at random constraints for each task and
  =       used in the construction of lin , all subgraphs only retaining the ones drawn.2 The constraints were trans-
Gi    Si,Ei           1
 t =    t  t are acyclic. As the SCCs form an acyclic lated to LTL−X as explained in [Gerevini and Long, 2005].
                            ≺     C
graph, there is a total ordering C on such that for all Unlike the ﬁrst task above, the rovers tasks lacked explicit
i, j ∈{1,...,m} with Ci ≺C Cj,therearenoo ∈  Ci and                           3
                               i                    nesting of temporal operators and could, if solvable at all, be
o ∈ Cj such that (o, o ) ∈ E.SinceGt is acyclic, there is a solved by plans always yielding ﬁnite executions, apart from
             i     i
total ordering ≺t of St for each t ∈{0,...,b− 1} and i ∈ inﬁnite idling in a ﬁnal state. The reachability goals speci-
                                    i
{1,...,m} (consistent with the ordering ≺ used in the con- ﬁed in the problem deﬁnitions were required to hold in such
             b                           
struction of Plin ) such that there is no pair o, o ∈ Ci with a ﬁnal state.
                i                i
(o, o ) ∈ E and o ≺t o . The relations ≺t, i ∈{1,...,m}, The SAT solver we used was SIEGE V. 4 [Ryan, 2004].The
and ≺C can be combined lexicographically, resulting in an or- experiments were run on a PC with 1.8 GHz AMD ATHLON
dering ≺t of St. It follows that there is no t ∈{0,...,b− 1} 64 CPU, 768 MB RAM, and a LINUX operating system.
                                       
and no o, o ∈ St such that o affects o and o ≺t o .
  The following theorem combines the conclusions from 4.2  Results
Theorem 2 and Lemma 4 with the above Remark.          Table 1 contains results from the logistics task and the modi-
                                                                       κ
Main Theorem.  Let P =  A, I, O, ϕ  be a planning task ﬁed rovers tasks for =3.
               b        b        b                      The second and third columns show the size M of the
and b ∈ N.IfPbase ∧ Pbmc ∧ Plin is satisﬁable, then
there is a plan of length b for P.                    largest SCC of the computed disabling graph compared to its
                                                      overall number of nodes |O|. The fourth column shows the
Proof sketch. From Theorem 2 we know that there exists a parallel plan lengths bp obtained with our parallel encoding,
sequence of sets of operators S¯ = S0,...,Sb−1  such that compared to sequential plan lengths bs in column ﬁve. Where
q¯ = exec(I,S¯) is deﬁned and q¯ |= ϕ. In order to be able to an interval (m, n] is given, the shortest sequential plan has
use Lemma 4, we still need a sequence ≺¯ = ≺0,...,≺b−1  length m<bs ≤ n, but we could not precisely determine bs
of corresponding total orderings such that there is no time because of SAT solver running times exceeding our time-out
                                  
point t ∈{0,...,b− 1} and no pair o, o ∈ St of operators
                                                       2   κ =3
with o affecting o and o ≺t o . The orderings ≺t constructed For , the tasks r-03, r-05 and r-15 remained unsolvable.
                                                         3There is an implicit nesting of depth two to three in the tem-
  1We will not formally prove this here. A similar proof can be poral operators sometime-after, sometime-before and
found in [Rintanen et al., 2006].                     at-most-once.

                                                IJCAI-07
                                                  1970