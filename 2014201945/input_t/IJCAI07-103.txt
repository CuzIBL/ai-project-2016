                           Epistemic Reasoning in Logic Programs
                                              Yan Zhang
                                     Intelligent Systems Laboratory
                                 School of Computing & Mathematics
                                     University of Western Sydney
                                Penrith South DC NSW     1797, Australia
                                   E-mail: yan@scm.uws.edu.au
                    Abstract
                                                      property for epistemic logic programs. Based on these dis-
    Although epistemic logic programming has an en-   coveries, we eventually identify two non-trivial classes of
    hanced capacity to handle complex incomplete in-  epistemic logic programs whose consistency checking com-
    formation reasoning and represent agents’ epis-   plexity is reduced from PSPACE-complete to NP-complete
                                                           P
    temic behaviours, it embeds a signiﬁcantly higher and Σ2 -complete respectively. We observe that many impor-
    computational complexity than non-disjunctive and tant applications on epistemic representation fall into these
    disjunctive answer set programming. In this paper, two classes of epistemic logic programs.
    we investigate some important properties of epis-
    temic logic programs. In particular, we show that 2   Gelfond’s Semantics for Epistemic
    Lee and Lifschitz’s result on loop formulas for dis-
    junctive logic programs can be extended to a spe-     Reasoning
    cial class of epistemic logic programs. We also   2.1  Language, Structure and Satisfaction
    study the polysize model property for epistemic                       LG
    logic programs. Based on these discoveries, we    We consider a language which is a propositional language
                                                                                      K     M
    identify two non-trivial classes of epistemic logic augmented with two modal operators and to represent
                                                      knowledge and belief respectively. Formulas of LG are stan-
    programs whose consistency checking complexity                                           Kϕ      Mϕ
    is reduced from PSPACE-complete to NP-complete    dard propositional formulas augmented with and
         P                                            and are closed under ∧, ∨ and ¬.AG-structure V is a collec-
    and Σ2 -complete respectively. We observe that
                                                      tion of sets of propositional literals called the set of possible
    many important applications on epistemic repre-                                  G          V
    sentation fall into these two classes of epistemic states of an agent. A situation in a -structure is a pair
                                                      (V,s)       s ∈V                     LG
    logic programs.                                        ,where       . The satisfaction in is deﬁned in
                                                      terms of the truth relation and falsity relation between a for-
                                                      mula and a situation. The truth of a formula ϕ in a situation
1  Introduction                                       (V,s), denoted as (V,s) |= ϕ,andthefalsity, denoted as
                                                      (V,s)=| ϕ, are deﬁned as follows.
As a new logic programming paradigm developed by Gel- (V,s) |= p iff p ∈ s where p is a propositional atom.
fond, epistemic logic programming integrates epistemic no- (V,s) |= Kϕ iff (V,si) |= ϕ for all si ∈V.
tions such as knowledge and belief into disjunctive answer (V,s) |= Mϕ iff (V,si) |= ϕ for some si ∈V.
set semantics [Gelfond, 1994], which has an enhanced ca- (V,s) |= ϕ ∧ ψ iff (V,s) |= ϕ and (V,s) |= ψ.
pacity to handle complex incomplete information reasoning (V,s) |= ϕ ∨ ψ iff (V,s) |= ϕ or (V,s) |= ψ.
and represent agents’ epistemic behaviours. However, re- (V,s) |= ¬ϕ iff (V,s)=| ϕ.
cently Zhang has shown that epistemic logic programming (V,s)=| p iff ¬p ∈ s where p is an atom.
embeds a signiﬁcantly higher computational complexity than (V,s)=| Kϕ iff (V,s) |= Kϕ does not hold1.
non-disjunctive and disjunctive answer set programming (as- (V,s)=| Mϕiff (V,s) |= Mϕ does not hold.
suming that P = NP and the polynomial hierarchy does not (V,s)=| ϕ ∧ ψ iff (V,s)=| ϕ or (V,s)=| ψ.
collapse) [Zhang, 2006]. Therefore, the question of whether (V,s)=| ϕ ∨ ψ iff (V,s)=| ϕ and (V,s)=| ψ.
there are some useful classes of epistemic logic programs that It is clear that if a formula is of the form Kϕ, ¬Kϕ, Mϕ
have a lower computational complexity becomes crucial to or ¬Mϕ where ϕ does not contain operator K or M,thatis,
apply epistemic logic programming to practical domains. ϕ is an objective formula, then its truth value in (V,s) will
  In this paper, we undertake a deep study on this topic. We not depend on s, and we call this formula subjective.Inthis
ﬁrst reﬁne some key notions of Gelfond’s epistemic seman- case, (V,s) |= Kϕ (or (V,s) |= Mϕ) can be simply written
tics and show its essential complexity properties. We then as V|= Kϕ (or V|= Mϕ resp.) On the other hand, it is easy
show that Lee and Lifschitz’s result on loop formulas for dis- to see that an objective formula’s truth value in (V,s) will
junctive logic programs can be extended to a special class of
epistemic logic programs. We also study the polysize model 1In this case, we will denote (V,s) |= Kϕ.

                                                IJCAI-07
                                                   647only depend on s. Therefore, notion (V,s) |= ϕ may also form head ←  body,wherehead   =  {F1, ···,Fk} and
be simpliﬁed as s |= ϕ. A propositional literal is also called body = {G1, ···,Gm,not Gm+1, ···,not Gn}. Note that
an objective literal, and formulas KL,¬KL,ML,¬MLare   if head =  ∅, then the rule becomes a constraint; and if
called subjective literals where L is a propositional literal. body = ∅,i.e. head ←, it means that head should be true
  It is important to notice that in Gelfond’s semantics, without any condition.
(V,s)=| ϕ is not equivalent to (V,s) |= ϕ in general. This is For an epistemic logic program Π without constraints, its
because by allowing s to be a set of propositional literals, an semantics is given by its world view which is deﬁned in the
atom is not assigned a truth value in s if neither of the atom following steps:
nor its negation is presented in s. Consequently, K and M       Π
                             G                        Step 1.Let  be an epistemic logic program not containing
are not dual modal operators2 in L . For instance, consider modal operators K and M and negation as failure not.A
V = {{a, b}, {a, b, ¬c}}. Clearly we have V|= ¬K¬c.But set s of propositional literals is called a belief set of Π iff
we do not have V|= Mc.                                s is a minimal set of satisfying conditions: (i) for each rule
    G         V                            s ∈V  s
  A   -structure is called consistent if for each ,   F ←  G1, ···,Gm from Π such that s |= G1 ∧···∧Gm we
does not contain a propositional atom as well as its negation. have s |= F (F is F1 ∨···∨Fk); and (ii) if s contains a pair
Otherwise, V is inconsistent and is denoted as V = {Lit} of complementary literals then we write s = Lit.
where Lit denotes the inconsistent set of all propositional lit- Step 2.LetΠ be an epistemic logic program not containing
erals.                                                modal operators K and M and s be a set of propositional
         G         V                ϕ            V
  Given a -structure ,wesayaformula   is satisﬁed in  literals in the language of Π.ByΠs we denote the result of
if there is some s ∈Vsuch that (V,s) |= ϕ. A formula ϕ is (i) removing from Π all the rules containing formulas of the
satisﬁable if ϕ is satisﬁed in some consistent G-structure V. form not G such that s |= G and (ii) removing from the rules
A consistent G-structure V is called a model of ϕ if for every in Π all other occurrences of formulas of the form not G.We
s ∈V  (V,s) |= ϕ         V|=  ϕ            Mod(ϕ)
     ,         , denoted as    .Wemayuse              call s is a belief set of Π if it is a belief set of Πs.
                           ϕ
to denote the set of all models of .                  Step 3. Finally, let Π be an arbitrary epistemic logic program
Lemma 1  Aformulaϕ  of LG is satisﬁable if and only if it is and V a collection of sets of propositional literals in its lan-
satisﬁed in a consistent G-structure with at most |ϕ| states, guage. By ΠV we denote the epistemic logic program ob-
where |ϕ| denotes the length of formula ϕ.            tained from Π by (i) removing from Π all rules containing
                                                      formulas of the form G such that G is subjective and V |= G,
Theorem 1 Deciding whether a formula is satisﬁable is NP- and (ii) removing from rules in Π all other occurrences of
complete.
                                                      subjective formulas.
  Given a satisﬁable formula ϕ, very often the maximal  Now we deﬁne that a collection V of sets of ground literals
model of ϕ is of a special interest in our study, as will be is a world view of Π if V is the collection of all belief sets of
shown in section 3. Formally a G-structure V is a maximal ΠV . Clearly, a world view of an epistemic logic program is
model of ϕ if V is a model of ϕ and there does not exist an- also a G-structure in language LG.
                                          
other consistent V such that V |= ϕ and V⊂V. Con-       It is easy to extend the world view deﬁnition above for epis-
sider formula K(a ≡¬b), it has three models {{a, ¬b}}, temic logic programs Π with constraints: V is a world view of
{{¬a, b}} and {{a, ¬b}, {¬a, b}}, where only the last one is Π if V is a world view of the program obtained by deleting all
a maximal model. On the other hand, formula ((a ∧¬b) ≡ constraints from Π, and for each constraint in Π of the form
¬Mb)  ∧ ((¬a ∧ b) ≡¬Ma)               {{a, ¬b}}
                         has two models        and    (2), either V |= Gi for some 1 ≤ i ≤ m,orV|= Gj for some
{{¬a, b}} and both are maximal models.                (m +1)  ≤  j ≤ n. An epistemic logic program may have
Proposition 1 Let ϕ be a formula of LG and let V be a G- one, more than one, or no world views.
structure. Deciding whether V is a maximal model of ϕ is
                                                      Theorem 2  [Zhang, 2006] Deciding whether an epistemic
co-NP-complete.
                                                      logic program has a world view is PSPACE-complete.
2.2  World View Semantics for Epistemic Logic           It is easy to see that extended/normal logic programs and
     Programs                                         disjunctive logic programs are two special classes of epis-
We specify an epistemic logic program in language LG to be temic logic programs whose world views always exist. Al-
a ﬁnite set of rules of the form:                     though computing the world view (i.e. the collection of all
          F  ∨···∨F   ←  G , ···,G ,                  stable models/answer sets) for these types of programs could
           1         k    1       m             (1)   be difﬁcult (this will be addressed in section 7), in general,
                not Gm+1, ···,notGn,                  we are more interested in discoverying non-trivial classes of
                                                      epistemic logic programs with a lower computational com-
and constraints of the form:
                                                      plexity.
      ←  G1, ···,Gm,notGm+1,  ···,notGn.        (2)

In (1) and (2), F1, ···,Fk are objective literals, G1, ···,Gm 3 Completion for Epistemic Logic Programs
are objective or subjective literals, and Gm+1, ···,Gn are without Positive Knowledge
objective literals. Sometimes, we also present a rule in the
                                                      Let us consider a simple epistemic logic program Π={a ←
  2K and M are called dual if ¬K¬ϕ is equivalent to Mϕ. ¬Mb}. This program has one world view {{a}}.However,

                                                IJCAI-07
                                                   648under the previous G-structure semantics, Π’s equivalent for- and (3) for each a ∈ Atom(Π), if there is no rule head ←
mula ¬b∧(a ≡¬Mb)3   has a unique model {{a, ¬b}},which body in Π such that a ∈ head,then¬a is in Comp(Π).
                       Π
is obviously different from ’s world view. This inconsis- Example 1 Let Π consist of the following rules:
tency can be avoided if we slightly revise the deﬁnitions of
G-structure and the associated satisfaction in LG.        a ∨ b ←¬Mc,
                                                          d ←¬Ka
  To begin with, we ﬁrst need to remove negative proposi-          .
                                                                          −K
tional atoms from epistemic logic programs. An epistemic Clearly, Π is an ELP program.  From  Deﬁnition 1,
logic program Π is said in canonical form if no negative Comp(Π) consists of the following formulas:
                         Π
propositional atom occurs in . Note that this does not ex- ¬Mc ⊃  (a ∨ b),
clude occurrences of negative subjective formulas in Π.For a ⊃ (¬b ∧¬Mc)
               {a∨b ←¬Mc}                                                ,
instance, program            is to be in canonical form,  b ⊃ (¬a ∧¬Mc),
while program {a ∨b ←¬M¬c}  is not. For an arbitrary pro- d ≡¬Ka
     Π                                                             ,
gram  , we can always transform it into the canonical form ¬c.
by introducing new propositional atoms in the language. In
                         G                                                   Π
particular, for each atom a in L , we introduce a new atom a It is easy to check that has a unique world view
to represent literal ¬a. Therefore, by replacing each negative {{a, d}, {b, d}}, which is also the unique model of
atom ¬a occurring in Π with the corresponding new atom a, Comp(Π). 
the resulting program, denoted as Πc, is in canonical form. If
                           G   c                        In general, Deﬁnition 1 cannot be extended to arbitrary
V is a G-structure in language L , V is obtained by replac- epistemic logic programs. Consider the following program
ing each negative atom occurring in V with the corresponding Π:
new atom.                                                 a ∨ b ←¬Mc
                                                  c                   ,
Proposition 2 Let Π be an epistemic logic program and Π   d ←  Ka.
be Π’s canonical form. A consistent G-structure V is a world                    
                     c                 c              If we apply Deﬁnition 1 to Π , its completion is the same
view of Π if and only if V is a world view of Π .
                                                      as in Example 1 except formula d ≡¬Ka  is replaced by
  Due to Proposition 2, in the rest of this paper, we can as- d ≡ Ka. We can see that Π has one world view {{a}, {b}},
sume that all epistemic logic programs are in canonical form where Comp(Π) has two maximal models {{a}, {b}} and
                             G                                        
in our context. Now we re-deﬁne a -structure to be a collec- {{a, d}}.SinceΠ does not contain any loop (see next sec-
tion of sets of propositional atoms. Consequently, we revise tion), Deﬁnition 1 actually does not provide a precise comple-
                  LG           (V,s)=|¬p     p ∈ s
the falsity relation in as follows:        iff        tion characterization for arbitrary epistemic logic programs.
p
( is a propositional atom), while the truth relation and falsity The following proposition establishes an important con-
relation for all other formulas remain the same. We should             ELP−K
                                   K     M            nection between an      program and its completion.
mention that this change will imply that and become                              −K
dual modal operators in LG (recall that in section 2.1, we Proposition 3 Let Π be an ELP program. If V is a world
showed that K and M are not dual operators). Despite this view of Π, then it is also a maximal model of Comp(Π).
difference, this new satisfaction will not affect the world view
                                                                                    −K
deﬁnition for epistemic logic programs.               4   Loop Formulas for    ELP     Programs
  Given an epistemic logic program Π,weuseAtom(Π) to
                                  Π                   Now we show that Lee and Lifschitz’s loop formula result for
denote the set of all atoms occurring in .Nowwedeﬁne  disjunctive logic programs [Lee and Lifschitz, 2003] can also
a class of epistemic logic programs without positive knowl-        ELP−K
               ELP−K                  Π ∈ELP−K        be extended to      programs.
edge, denoted as      . That is, for each         ,     Given an epistemic logic program Π,thepositive depen-
no knowledge operator K positively occurs in the body of                            +
                                                      dency graph of Π, denoted as GΠ, is the directed graph
each rule. It is easy to obverse that many typical epistemic constructed in the following way: the set of vertices is
                                   ELP−K
logic programs in applications are actually programs  Atom(Π)  ∪ KM(Π),whereKM(Π)       is the set of all sub-
[Gelfond, 1994].                                      jective atoms occurring in Π, and for each pair of vertices
                          −K
Deﬁnition 1 Let Π be an ELP  program. The completion  x, y ∈ Atom(Π) ∪ KM(Π): (1) there is an edge from x to y
of Π, denoted as Comp(Π), consists of the following formu- if there is a rule head ← body in Π, such that x ∈ head,
las: (1) if head ← body is a rule in Π, then the following and y positively occurs in body; (2) for each path in the
formula is in Comp(Π)4:                               graph formed from (1), if both a and Ka (or Ma) occur in
                                                                          x,y ∈ Atom(Π)  ∪ KM(Π)
                 body ⊃ head;                   (3)   the path, then for any                         such
                                                      that (x,a) and (a, y) are edges, add edges (x,Ka) and
 (2) for each a ∈ Atom(Π), the following formula is in (Ka,y) ((x,Ma) and (Ma,y) resp.) respectively; (3)
Comp(Π):
                                                    based the graph formed from (1) and (2), if there is no such
  a ⊃                  (body ∧          ¬p);          cycle containing vertex a but not Ka (Ma resp.), then re-
                                                (4)               a
      head←body∈Π,a∈head      p∈head\{a}              move vertex   and all its associated edges. We may use
                                                      Pos(body) to denote the set of all (objective and subjective)
  3Later we will see that this formula is the completion of Π. atoms positively occurring in body. We call a nonempty set
  4When we view body as a formula in language LG, the negation L ⊆ Atom(Π) ∪ KM(Π) a loop of Π if for any x and y in
                                                                        +
as failure not in body is interpreted as the classical negation ¬. L,thereisapathinGΠ from x to y with length > 0.

                                                IJCAI-07
                                                   649Deﬁnition 2 Let Π be an epistemic logic program and L a Proposition 4 Let ϕ be a formula of LG and let V be a G-
loop of Π. R(L) is denoted as the set of following formulas: structure. Then V is a maximal model of ϕ if and only if
                                                     Mod(ϕV  )={s  | s ∈V}.
              body ∧         ¬p,
                                                        Now with a slight change, we may extend the notion of
                     p∈head\L                         epistemic reduction to epistemic logic programs. Let Π be an
                                                      epistemic logic programs and V be a G-structure in language
for each rule head ← body in Π such that head ∩ L = ∅  G
    Pos(body) ∩ L =  ∅                      LF (L)    L  . A disjunctive logic program (without containing any K
and                   . Then the loop formula             M           eReduct(Π, V)
associated with L in Π is speciﬁed as                 and    operators)            is called the epistemic re-
                                                    duction of Π under V if it is obtained from Π in the following
              (  L) ⊃ (   R(L)).                (5)   way: (1) removing all rules from Π where G is a subjective
                                                      literal occurring in the rules and V |= G, and (2) removing all
We use LF (Π) to denote the set of all loop formulas in Π. other occurrences of subjective literals in the remaining rules
                                                      (i.e. replacing those G with T due to V|= G). Then we have
  It is easy to see that (5) is equivalent to Lee and Lifschitz’s
                     [                    ]           the following results.
disjunctive loop formula Lee and Lifschitz, 2003 and Lin              Π                                V
and Zhao’s loop formula [Lin and Zhao, 2004] if Π is re- Proposition 5 Let be an epistemic logic program and
                                                      a G-structure of LG. V is a world view of Π if and only if
stricted to a disjunctive logic program and a normal logic pro- V
gram respectively.                                      is the collection of all stable models of disjunctive logic
                                                      program eReduct(Π, V).
                                         Π
Example 2 Consider an epistemic logic program :         The following two lemmas establish an important connec-
                                                                         −K
    a ∨ b ← Mc,                                       tion between an ELP    program and its completion and
    c ← a,                                            loop formulas.
    d ←¬Ka.                                                                        −K
                                                      Lemma 2   Let Π  be  an ELP      program  and  V  a
Π has one loop L = {a, Mc}.ThenwehaveR(L)=∅,and       world view  of Π.Then(Comp(Π)       ∪  LF (Π))V  ≡
LF (L)={¬(a   ∨ Mc)}. On the other hand, since Π is an Comp(eReduct(Π, V)) ∪ LF (eReduct(Π, V)).
    −K
ELP     Π            Comp(Π)                                                        −K
       ,  ’s completion       consists of the following Lemma 3 Let Π   be  an  ELP      program  and  V
formulas:                                             a  maximal model of   Comp(Π)   ∪  LF (Π).Then
    Mc  ⊃ a ∨ b,                                      (Comp(Π)   ∪ LF (Π))V   ≡   Comp(eReduct(Π,  V)) ∪
    a ⊃ ((¬b ∧ Mc) ∨ c),                              LF (eReduct(Π, V)).
    b ⊃ (¬a ∧ Mc)                                                                       −K
                 ,                                    Proof of Theorem 3: Consider an ELP   program Π and
    c ⊃ a,                                            Comp(Π)  ∪ LF (Π)             V                Π
    d ≡¬Ka                                                             . We show that is a world view of iff
            .                                         V is a maximal model of Comp(Π) ∪ LF (Π).
We can see that Comp(Π)   has two (maximal) models    (⇒)  Suppose  V   is a  world view  of  Π.Then
{{a, c}} and {{d}},whereComp(Π)∪LF (L) has one (max-  from  Proposition 5, we  know   that V  is the  col-
imal) model {{d}}, which is also the unique world view of lection of all stable models of disjunctive program
Π.                                                   eReduct(Π, V). On the other hand, from Lemma 2, we
                          −K                               (Comp(Π)  ∪ LF (Π))V ≡  Comp(eReduct(Π,  V)) ∪
Theorem 3 Let Π be an ELP     program, C omp(Π) the   have
                                                      LF (eReduct(Π, V))
completion of Π, and LF (Π) the set of loop formulas of Π.A             . On the other hand, from Theorem
G                        Π                            1in[Lee and Lifschitz, 2003], we know that each stable
 -structure is a world view of if and only if it is a maximal          eReduct(Π, V)
model of C omp(Π) ∪ LF (Π).                           model of program               is also a model of for-
                                                      mula Comp(eReduct(Π,  V)) ∪ LF (eReduct(Π, V)).So
                                                                                               V
4.1  Proof of Theorem 3                               we conclude V = Mod((Comp(Π)    ∪ LF (Π)) ). Finally,
                                                                                    V
In order to prove Theorem 3, we need to ﬁrst show some im- from Proposition 4, it follows that is a maximal model of
                                                      Comp(Π)  ∪ LF (Π).
portant properties of formulas and epistemic logic programs ⇐        V                        Comp(Π)  ∪
in language LG. We ﬁrst introduce the notion of epistemic ( ) Suppose   is a maximal model of
                                                      LF (Π). From Lemma 3, we know (Comp(Π)∪LF  (Π))V ≡
reduction for formulas.                               Comp(eReduct(Π,  V)) ∪ LF (eReduct(Π, V))
  Let V be a G-structure and ϕ a formula of LG. A formula                                     . According
 V                                                    to Proposition 4, on the other hand, V = Mod((Comp(Π) ∪
ϕ  is called the epistemic reduction of ϕ with respect to V  V
   V                                                  LF (Π)) )                             [
if ϕ is obtained from ϕ in the following way: (1) for each     .   Then from  Theorem  1 in  Lee and Lif-
                                                                 ]                Comp(eReduct(Π,  V)) ∪
ϕ’s subformula of the form Kφ (here φ is objective), Kφ schitz, 2003 , each model of
            φ   V|=  Kφ            Kφ                 LF (eReduct(Π, V)) is also a stable model of disjunctive
is replaced by if        ,otherwise   is replaced by              eReduct(Π, V)
F; and (2) for each ϕ’s subformula of the form Mφ, Mφ is logic program         . Finally, from Proposition 5, it
          T  V|=  Mφ           Mφ              F      follows that V is a world view of Π. This completes our proof
replaced by if       ,otherwise    is replaced by .                
  Consider formula ϕ = Ka ∨ Mb. Suppose  a and b are  of Theorem 3.
the only propositional atoms in the language. Then V =
{∅, {a}, {b}, {a, b}} is a maximal model of ϕ.Furthermore, 5 Polynomial Bound on Loop Formulas
we can see that ϕV = T,whereV  is exactly the set of all Since there may be an exponential number of loops in an epis-
                                                                                                      −K
models of ϕV .                                        temic logic program, the way of transforming an ELP

                                                IJCAI-07
                                                   650program into Comp(Π) ∪ LF (Π) and then computing its G-
                                                      has an exponential number of world views and each world
structures will not have particular computation advantages.
                          ELP−K                       view contains an exponential number of belief sets. Nev-
However, we will show that for    programs with poly- ertheless, it is easy to observe that many speciﬁc epistemic
nomially bounded numbers of loop formulas, the consistency logic programs indeed satisfy the polysize model property.
check problem will be signiﬁcantly reduced from PSPACE- Consequently, we can further identify an important class of
complete to NP-complete. Formally, given an epistemic logic                                            P
                                                      epistemic logic programs whose consistency check is Σ2 -
program Π, we say that Π has a polynomial bound on its
                                    +                 complete.
loop formulas if the number of cycles in GΠ is bounded by
       +            +                    +            Deﬁnition 3 An epistemic logic program Π is said to satisfy
O(f(|GΠ|)) where f(|GΠ|) is a polynomial of |GΠ|.
                                                      the polysize model property if either Π has no world view,
                          −K
Theorem 4 Let Π be an ELP    program that has a poly- or for each Π’s world view V, |V| is bounded by O(f(|Π|)),
nomial bound on its loop formulas. Deciding whether Π has where f(|Π|) is a polynomial of |Π|.
a world view is NP-complete.                          Theorem 5  Let Π be an epistemic logic program satisfying
Proof: Here we only give membership proof. From Theorem the polysize model property. Deciding whether Π has a world
                                                              P
3, Π has a world view iff Comp(Π) ∪ LF (Π) has a maximal view is Σ2 -complete.
                                   G+
model. Clearly, if the number of cycles in Π is bounded by Proof: Since for each world view V of Π, |V| is bounded
O(f(|G+|))                       Comp(Π)  ∪ LF (Π)
       Π  , then the size of formula                  by O(f(|Π|)), we can guess, in polynomial time, a k with k
                        +
is also bounded by O(f(|GΠ|)). So we can guess such   being bounded by O(f(|Π|)) and a collection V consisting
LF (Π) in polynomial time with a nondeterministic Turing of k different sets of atoms. Then we check whether V is a
machine. From Theorem 1, we know that checking whether world view of Π in the following way: (1) transform Π into a
Comp(Π)  ∪ LF (Π) has a model is in NP. Also it is easy to disjunctive logic program ΠV by performing Step 3 in section
see that Comp(Π) ∪ LF (Π) has a model iff it has a maximal 2.2, and (2) for each s ∈V, check whether s is a stable model
model.                                               of ΠV . Clearly, (1) can be done in polynomial time, and (2)
                                                      is solvable with k queries to an NP oracle.
  In the following, we provide a polynomial upper bound Hardness proof. The hardness is proved by a reduc-
                                                                                                        
on the number of loop formulas for an epistemic logic tion of the validity of QBF A = ∃x1 ···∃xn∀y1 ···∀ymA
                                                                         
program. Given an epistemic logic program Π and a ∈   (n, m ≥ 1), where A  = D1 ∨ ··· ∨ Dh and each Dk =
head(Π),aninference chain of a is a sequence of atoms lk,1 ∧ lk,2 ∧ lk,3 is a conjunction of propositional literals
(a, b1, ···,bl−1,bl),wherea, b1, ···,bl are different atoms li,j over {x1, ···,xn,y1, ···,ym}. We know that deciding
  Atom(Π)                l              r , ···,r                          P
in         ,andthereare    different rules 1   l in   whether A is valid is Σ2 -complete [Papadimitriou, 1995].
Π such that a ∈  head(r1),b1 ∈ Pos(body(r1)), b1 ∈    We construct in polynomial time an epistemic logic program
head(r2), b2 ∈ Pos(body(r2)), ···, bl−1 ∈ head(rl) and Π from A and show that Π has a world view and each of
bl ∈ Pos(body(rl)). For each a ∈ head(Π),itmayhave    its world views contains exactly one belief set if and only
one or more inference chains. The inference depth of a,de- if A is valid. In particular, Π is constructed on propositional
        i depth(a)               a                                                                
noted as -       , is the length of ’s longest inference atoms {x1, ···,xn,y1, ···,ym}∪{x1, ···,xn,y1, ···,ym}∪
chain. The inference depth of Π is deﬁned as i-depth(Π) = {valid, invalid},wherex and y are used to imitate the
max(i-depth(a):a ∈ head(Π)).                          negations of x and y respectively. Π consists of the following
                Π                                     rules:
Proposition 6 Let  be an epistemic logic program. If                
i depth(Π) <k              k     |LF (Π)|                 xi ←¬Mxi,
-             for some ﬁxed ,then        is bounded        
  O((2k/k!) · nk)     |Atom(Π)| =  n                      xi ←¬Mxi,fori   =1, ···,n,
by              ,where              .                           
                                                          yj ∨ yj ←,
Proposition 7 Let Π be an epistemic logic program. For a  yj ← Kvalid,
                                                           
ﬁxed k, deciding whether i-depth(Π) <kis solvable in time yj ← Kvalid,forj =1,  ···,m,
      k+1
O(k · n  ) where |Atom(Π)| = n.                           valid ← ρ(lk,1),ρ(lk,2),ρ(lk,3),
                                                                    for k =1, ···,h,
6  Polysize Model Property                                invalid ←¬Minvalid,notvalid,
                                                      where ρ(l)=a   if l = a and ρ(l)=a if l = ¬a for any
Some special modal logics such as single agent S5 and KD45
                                                      a ∈{x1, ···,xn,y1, ···,ym}. It is easy to see that if Π has
[                  ]
Blackburn et al., 2001 have polysize model property which a world view V,thenV must only contain one belief set.
brings the consistency check (satisﬁability problem) in these Then we can show that Π has a world view if and only if A
logics down to NP-complete. We have shown that Gelfond’s is valid. 
epistemic semantics also has this property (i.e. Lemma 1).
However, epistemic logic programs under the world view se- Now we investigate under what conditions, an epistemic
mantics do not satisfy the polysize model property in general. logic program will satisfy the polysize model property. We
For instance, the following program                   ﬁrst deﬁne the dependency graph for an epistemic logic pro-
         
    xi ∨ xi ←,                                        gram.  The dependency graph GΠ of Π is a directed graph
              
    yi ←¬Myi,                                         where the set of vertices is Atom(Π); and for vertices a
     
    yi ←¬Myi,wherei   =1, ···,n,                      and b, there is an edge (a, b) from a to b if there is a rule

                                                IJCAI-07
                                                   651