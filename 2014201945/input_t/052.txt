                                Keys, Nominate, and Concrete Domains 

               Carsten Lutz1 Carlos Areces2 Ian Horrocks3 Ulrike Sattler1 

      1 Inst, for Theoretical Computer Science 2INRIA Lorraine 3Dept. of Computer Science 
           Technical University Dresden Nancy University of Manchester 
                       Germany France UK 
         (lastname)@tcs.inf.tu-dresden.de Carlos.Areces@loria.fr horrocks@cs.man.ac.uk 

                        Abstract                                 In this paper, we extend the well-known DLs with concrete 
                                                               domains ACC(V) and SHOQ(D) [Baader and Hanschke, 
     Many description logics (DLs) combine knowledge 
                                                               1991; Horrocks and Sattler, 2001] with key constraints and 
     representation on an abstract, logical level with an 
                                                               analyse the complexity of reasoning with the resulting log•
     interface to "concrete" domains such as numbers 
                                                               ics ALLOK(D) and SHOQK(D). We show that allowing 
     and strings. We propose to extend such DLs with 
                                                               complex concepts to occur in key constraints dramatically 
     key constraints that allow the expression of state•
                                                               increases the complexity of ALL(D) (which is PSPACE-
     ments like "US citizens are uniquely identified by 
                                                               complete): it becomes undecidable. Restricting key con•
     their social security number". Based on this idea, 
                                                               straints to atomic concepts (such as "Human" in the above 
     we introduce a number of natural description logics 
                                                               example) still yields a NEXPTlML-hard formalism, even for 
     and present (un)decidability results and tight NEx-
                                                               rather simple (PTlME) concrete domains. We show several 
     PTlME complexity bounds. 
                                                               variants of this result that depend on other characteristics of 
                                                               key constraints, such as the number of concrete features and 
1 Introduction                                                 the "path length". This effect is consistent with the observa•
                                                               tion that the PSPACE upper bound for ACC(V) is not robust 
Description Logics (DLs) are a family of popular knowledge 
                                                               [Lutz, 20031. 
representation formalisms. Many expressive DLs combine 
powerful logical languages with an interface to concrete do•     Additionally, we prove the NEXPTIME bounds to be 
mains (e.g., integers, reals, strings) and built-in predicates tight by presenting tableau algorithms for ALLOK{V) and 
(e.g., <, sub-string-of) [Lutz, 2002bl. These can be used to   SHOQK{V) with key admissible concrete domains that are 
form descriptions such as "employee working for the govern•    in NP, where key admissibility is a simple and natural prop•
ment and earning more than her boss" that combine "abstract"   erty. We have chosen to devise tableau algorithms since they 
logical components (e.g., working for the government) with     have the potential to be implemented in efficient reasoners 
components using concrete domains and predicates (e.g., a      and have been shown to behave well in practise [Horrocks 
numerical comparison of earnings).                             et al, 2000]. Due to space restrictions, we can only sketch 
                                                               proofs and refer to [Lutz et al, 2002] for more details. 
  DLs with concrete domains have turned out to be useful for 
reasoning about conceptual (database) models [Lutz, 2002c], 
and as the basis for expressive ontology languages [Horrocks   2 Preliminaries 
et al.  20021. So far, however, they have not been able to ex•
     y                                                         First, we formally introduce the description logic 
press key constraints, i.e., constraints expressing the fact that 
                                                               ALLOK(D). 
certain "concrete features" uniquely determine the identity of 
the instances of a certain class. E.g., the concrete feature "so• Definition 1. A concrete domain V is a pair 
cial security number (SSN)" might serve as a key for citizens  where is a set and a set of predicate names. Each 
of the US, and the combination of identification number and    predicate name is associated with an arity n and an 
manufacturer might serve as a key for vehicles. Such con•      n-ary predicate 
straints are important both in databases and in realistic on•                         be pairwise disjoint and countably in•
tology applications. In a DL context, key constraints have     finite sets of concept names, nominate, role names, and con•
so far only been considered on logical, "non-concrete" do•     crete features. We assume that NR has a countably infinite 

mains [Borgida and Weddell, 1997; Calvanese et a/., 2000;      subset NaF of abstract features. A path u is a composition 
Khizder et al, 2001; Toman and Weddell, 20021.                           of n abstract features and a 
  It is easy to see that concrete keys can express nominate,   concrete feature g. Let V be a concrete domain. The set of 
i.e., concepts to be interpreted as singleton sets (closely re• ALLOK(D)-concepts is the smallest set such that (i) every 
lated to the "one-of" operator): e.g., if SSN is a key for Hu• concept name and every nominal is a concept, and (ii) if C 
man (SSN keyfor Human), then the concept "Human with SSN       and D are concepts, R is a role name, g is a concrete feature, 

                              has at most one instance.        u1,..., un are paths, and is a predicate of arity n. 


DESCRIPTION LOGICS                                                                                                    349  then the following expressions are also concepts:             Definition 3. Let V be a concrete domain. A D-conjunction 
                                                               is a (finite) predicate conjunction of the form 


  " A key definiton is an expression (u1,..., Uk keyfor C) for 
                   paths and C a concept. A finite set of key 
definitions is called a key box.                               where Pi is an n,-ary predicate for and the are 
                                                               variables. A 'P-conjunction c is satisfiable iff there exists a 
As usual, we use T to denote an arbitrary propositional tau•
                                                               function 6 mapping the variables in c to elements of such 
tology. Throughout this paper, we will consider several frag•
ments of the logic ALLOK{V)\ A£CO{V) is obtained from          that for each We say 
ALLOK(D) by admitting only empty key boxes; by disal•          that the concrete domain V is admissible iff (i) contains a 
lowing the use of nominals, we obtain the fragment ACC(V)      name TD for ; (ii) D is closed under negation, and (iii) 
                                                               satisfiability of P-conjunctions is decidable. We refer to the 
of ALCO{D) and ALCK(D) of ALLOK{D). 
                                                               satisfiability of D-conjunctions as D-satisfiability. 
   The description logic ALCOK(D) is equipped with a 
Tarski-style set-theoretic semantics. Along with the seman•    As we shall see, it sometimes makes a considerable differ•
tics, we introduce the standard inference problems: concept    ence w.r.t. complexity and decidability to restrict key boxes 
satisfiability and concept subsumption.                        in various ways. Because of this, it is convenient to introduce 
                                                               the following notions: 
Definition 2. An interpretation X is a pair, where 
    is a non-empty set, called the domain, and is the in•     Definition 4. A key box K is called Boolean if all concepts 
terpretation function. The interpretation function maps each  appearing in (key definitions in) K. are Boolean combinations 
                                                              of concept names; path-free if all key definitions in K are of 
concept name C to a subset CI of , each nominal N to 
                                                               the form (g1,..., gn keyfor C) with ; sim•
a singleton subset N1 of , each role name R to a subset 
                 each abstract feature / to a partial function ple if it is both path-free and Boolean; and a unary key box if 
                   , and each concrete feature g to a partial all key definitions in K are of the form (u keyfor C). A con•
                                                              cept C is called path-free if, in all its subconccpts of the form 
function q1 from 
   Ifis a path and d is de•                                                ~ are concrete features. 
fined as The interpretation function                          To emphasize that a key box must not necessarily be Boolean 
is extended to arbitrary concepts as follows:                 or path-free, we sometimes call such a key box general. Sim•
                                                              ilarly, to emphasize that a key box is not necessarily a unary 
                                                              key box, we sometimes call such a key box n-ary key box. 

                                                              3 Lower Complexity Bounds 
                                                              In this section, we present lower complexity bounds for DLs 
                                                              with concrete domains, key boxes and nominals. We start by 
                                                              showing that satisfiability of ALLK (V)-concepts w.r.t. gen•
                                                              eral key boxes is undecidable for many interesting concrete 
                                                              domains. This discouraging result is relativized by the fact 
An interpretation I is a model of a concept C iff             that, as shown in Section 4, the restriction to Boolean key 
                                                              boxes recovers decidability. Next, we prove that satisfiabil•
Moreover, X satisfies a key definition (u1,..., un keyfor C) 
if, for any (b) forn implies                                  ity of path-free ALLK(D)-concepts w.r.t. simple key boxes 
a — b. 2 is a model of a key box K. iff X satisfies all key   is NExpT3lME-hard for many concrete domains and that this 
definitions in K. A concept C is satisfiable w.r.t. a key box holds even if we restrict ourselves to unary key boxes. Fi•
K iff C and K have a common model. C is subsumed by a         nally, we identify a concrete domain such that ALLO(D)-
concept D w.r.t. K, (written C for all                        concept satisfiability (without key boxes) is already NEXP-
models I of K TlME-hard. 
                                                                 Undecidability of ALLK.(D)-concept satisfiability w.r.t. 
It is well-known that, in DLs providing for negation, sub-    general key boxes is proved by reduction of the undecidable 
sumption can be reduced to (un)satisfiability and vice versa: Post Correspondence Problem (PCP) [Post, 1946]. 
C D itf C -D is unsatisfiable w.r.t. K and C is sat•
isfiable w.r.t. KZ iff C -iT. Thus we can concentrate         Definition 5. An instance P of the PCP is given by a finite, 
on concept satisfiability when investigating the complexity   non-empty list of pairs of words over 
of reasoning: the above reduction implies the corresponding   some alphabet . A sequence of integerswith 
bounds for subsumption and the complementary complexity       m 1, is called a solution for P iff 
class (usually CO-NEXPTIME in this paper).                    The problem is to decide whether a given instance P has a 
  When devising decision procedures for DLs which are not     solution. 
tied to a particular concrete domain, admissibility of the con• The reduction uses the admissible concrete domain W intro•
crete domain usually serves as a well-defined interface be•   duced in [Lutz, 2003], whose domain is the set of words over 
tween the decision procedure and concrete domain reasoners    £ and whose predicates express concatenation of words. For 
[Baader and Hanschke, 1991; Lutz, 2002b]:                     each PCP instance we define a 


350                                                                                              DESCRIPTION LOGICS concept Cp and unary key box Kp such that P has no solu•       of a domain element a into concrete domain values: for 
tion iff Cp is satisfiable w.r.t. Kp. Intuitively, Cp and Kp               , we enforce that and 0 
enforce an infinite, A;-ary tree, where each node represents a otherwise (analogously for . Then the key def•
sequences of integers, i.e. a potential solution. The role of  inition obvi•
the key box is to guarantee that the tree is of infinite depth; ously ensures uniqueness of positions. Since the reduction 
concrete features are used to store the left and right concate• concept is path-free and D1-satisfiability is easily seen to be 
nations corresponding to the potential solutions; and concate• in PTlME, we obtain the following: 
nation predicates from the concrete domain W are used to 
                                                               Theorem 8. D1 -satisfiability is in PTlME and satisfiability 
compute them. Finally, an inequality predicate also provided 
                                                               of path-free ALC/C(D1)-concepts w.r.t. simple key boxes is 
by W is used to guarantee that none of the potential solutions NExrTlME-hard. 
is indeed a solution. Since it is known that W-satisfiability is 
in PTlME [Lutz, 2003J, we obtain the following theorem.        The (somewhat artificial) concrete domain D1 can be replaced 
                                                               by many natural concrete domains V proposed in the litera•
Theorem 6. There exists a concrete domain V such that 
                                                               ture [Baader and Hanschke, 1992; Haarslev and Moller, 2002; 
D-satisfiability is in PTlME and satisfiability of ALLK(D)-
                                                               Lutz, 2002b; 2002dj: it suffices that V provides two unary 
concepts w.r.t. (general) unary key boxes is undecidable. 
                                                               predicates denoting disjoint singleton sets. 
As shown in [Lutz, 2003; Lutz et a/., 2002], the reduction can 
easily be adapted to more natural concrete domains such as       The second reduction uses the more complex concrete do•
numerical ones based on the integers and providing predicates  main Do, which "stores" whole bit vectors rather than only 
for equality to zero and one, binary equality, addition, and   single bits. In D2, we can translate the position (i,j) of an 
multiplication.                                                element a. from concepts Xl, YK into a single bit vector of 
                                                               length 2(n + 1) that is then stored as a bv-successor of a, 
   We now establish lower bounds for ALLK{V) with 
                                                               where bv is a concrete feature. Since we replaced the 2(n +1) 
Boolean key boxes and for ALLO('D). These results are 
                                                               concrete features used in the first reduction (one for each bit) 
obtained using a NExpTlME-completc variant of the well-
                                                               by the single feature bv, it now suffices to use the simple 
known, undecidable domino problem [Knuth, 1968]. 
                                                               unary key box (bv keyfor T) to ensure uniqueness of posi•
Definition 7. A domino system D is a triple (T, H, V), where 
                                                               tions. As in D1, the reduction concept is path-free. In [Lutz 
T N is a finite set of tile types and repre•                   et al., 2002], it is shown that Do-satisfiability is in PTlME. 
sent the horizontal and vertical matching conditions. For D a 
domino system and an initial condi•                            Theorem 9. Do -satisfiability is in PTlME and satisfiability of 
tion, a mapping r : is path-free ALCK(D2)-concepts w.r.t. simple unary key boxes 
a solution for 2) and , the following                          is NExpTIME-hard. 
holds:, then Again, the artificial concrete domain Do can be replaced by 
                                                               more natural ones: we can simulate bit vectors using inte•
/', then                                                       gers and the necessary operations on bit vectors by unary 
  This variant of the domino problem is NEXPTIME-              predicates =„ for every interger n and a ternary addition 
complete [Lutz, 2003]. The three NEXPTIME lower bounds         predicate—for more details sec [Lutz et al., 2002]. 
are obtained by using suitable and admissible concrete do•       The last lower bound is concerned with the DL ALCO(V). 
mains D1, D2, and D3 to reduce the above domino prob•          In the absence of key boxes, we need a different reduction 
lem. More precisely, the simplest concrete domain D1 is used   strategy and the more complex concrete domain D3, which 

in the reduction to ALLK(Di)-concept satisfiability w.r.t.     extends D2 with so-called domino arrays that allow us to store 
Boolean (n-ary) key boxes, the slightly more complex D2        the tiling of the whole torus in a single concrete domain value. 
is used in the reduction to ACCK.(D2)-concept satisfiabil•     We can then ensure uniqueness of positions using a single 
ity w.r.t. Boolean unary key boxes, and the most powerful      nominal. Computationally, the concrete domain D3 is still 
concrete domain D3 is used in the reduction to ALLO(D3)-       very simple, namely in PTlME. However, it no longer suffices 
concept satisfiability without key boxes.                      to use only path-free concepts. 
  The idea underlying all three reductions is to use concept   Theorem 10. D    satisfiability is in PTlME and satisfiability 
namesto represent positions in the                                             3
                                                               ofALCO(D  )-concepts is NExPTlME-hard. 
              torus: if a is a domain element representing              3
the position expresses that the l-th bit in 
the binary coding of i is 1, and expresses that the I'-lh      4 Reasoning Procedures 
bit of j is 1. We use standard methods to enforce that there   We describe two tableau-based decision procedures for con•
exists a domain element for every position in the torus. The   cept satisfiability in DLs with concrete domains, nomi-
main difference between the three reductions is how it is en•  nals, and keys. The first is for ASLCC'(9AJ(T))-concepts w.r.t. 
sured that no position is represented by two different domain  Boolean key boxes. This algorithm yields a NEXPTIME up•
elements—we call this uniqueness of positions.                 per complexity bound matching the lower bounds established 
  The first reduction uses the very simple concrete do•        in Section 3. The second procedure is for S'HOOK(D) w.r.t. 

main D1, which is based on the set {0,1} and only pro•         path-free key boxes and also yields a tight NEXPTIME up•
vides unary predicates =0, =1 and their negations. Unique•     per complexity bound. S'HOQK('D) is an extension of the 
ness of positions is ensured by translating the position (i, j) DL SHOQ{'D) introduced in [Horrocks and Sattler, 2001; 


DESCRIPTION LOGICS                                                                                                   351  Pan and Horrocks, 2002], which provides a wealth of ex•       box K. Moreover, we use cl(C, K) as abbreviation for the set 
 pressive possibilities such as transitive roles, role hierar•
 chies, nominals, qualifying number restrictions, and general 
 TBoxes with a path-free concrete domain constructor and 
 path-free key boxes. Path-freeness of SHOQK(T>ys con•         Complexity of ALCOK:{V) 
 crete domain constructor is crucial for decidability. More•   We start the presentation of the ALCOK(D) tableau algo•
over, it allows us to admit general rather than only Boolean   rithm by introducing the underlying data structure. 
key boxes. 
   Tableau algorithms decide the satisfiability of the input   Definition 12. Let Oa and Oc be disjoint and countably in•
concept (in our case w.r.t. the input key box) by attempting to finite sets of abstract and concrete nodes. A completion tree 
construct a model for it: starting with an initial data structure for an ALCOK(D)-concept C and a key box K, is a finite, 
induced by the input concept, the algorithm repeatedly ap•     labeled tree (Va,VC,E, C) with a set of nodes such 
plies completion rules. Eventually, the algorithm either finds that Va Oa, Vc Oc, and all nodes from Vc are leaves. 
an obvious contradiction or it encounters a contradiction-free Each node a Va of the tree is labeled with a subset C(a) 
situation in which no more completion rules are applicable.    of cl(C, K); each edge (a, b) E with a, b Va is labeled 
In the former case the input concept is unsatisfiable, while in with a role name C(a, b) occurring in C or K; and each edge 
the latter case it is satisfiable.                             (a, x) E with a Va and x Vc is labeled with a concrete 
   Existing tableau algorithms for DLs with concrete do•       feature L(a, x) occurring in C or K,. 
mains use admissibility as an "interface" between the tab•       For T = (Va,VC,E,C) and a Va, we use levT(a) to 
leau algorithm and a concrete domain reasoner [Lutz, 2002b;    denote the depth at which a occurs in T (starting with the root 
Baader and Hanschke, 1991]. In the presence of keys,           node at depth 0). A completion system for an ACCOK,(V)-
this is not enough: besides knowing whether a given V-         concept C and a key box K is a tuple where 
conjunction is satisfiable, the concrete domain reasoner has   T = ' is a completion tree for C and K, V is 
to provide information on variables that must take the same    a function mapping each with arity n appearing in 
value in solutions. As an example, consider the concrete       C to a subset of is a linear ordering of Va such that 
domainand the N-conjunction                                    levx(a) impliesis an equivalence 
                                . Obviously, every solution    relation on Vc. 

5 for c identifies two of the variables v1, V2,v3. This informa• Let T = (Va, Vc, E, C) be a completion tree. A node b 
tion has to be passed from the concrete domain reasoner to the Va is an R-successor of a node a Va if (a, b) E and 
tableau algorithm since, in the presence of key boxes, it may  L(a, b) = R. Similarly, a node x Vc is a g-successor of 
have an impact on the satisfiability of the input concept. E.g., a if (a, x) E and L(a, x) = y. For paths u, the notion 
this information transfer reveals the unsatisfiability of      u-successor is defined in the obvious way. 
                                                               Intuitively, the relation ~ records equalities between concrete 
To formalize this requirement, we strengthen the notion of ad• nodes that have been found during the model construction 
missibility into key-admissibility.                           process. The relation ~ induces an equivalence relation 
Definition 11. A concrete domain V is key-admissible iff (i)  on abstract nodes which, in turn, yields the equivalence rela•
    contains a name is closed under                           tion on concrete nodes. 
negation, and (iii) there exists an algorithm that takes as input 
                                                              Definition 13. Let S = be a completion system 
a D-conjunction c, returns clash if c is unsatisfiable, and oth•
                                                              for a concept C and a key box K. with T = 
erwise non-deterministically outputs an equivalence relation 
                                                              and let be an equivalence relation on Va. For each R 
~ on the set of variables V used in c such that there exists a 
                                                               NR, a node b V    is an of a node a V
solution 5 for c with the following property: for all v, v' V                  a                                        a 
                                                              if there exists a node c Va such that a c and b is an 
                           Such an equivalence relation is    i?-successor of c. For paths u, the notion , -neighbor is 
henceforth called a concrete equivalence. We say that ex-     defined analogously. 
tended V-satisfiability is in NP if there exists an algorithm as 
above running in polynomial time. 
It can easily be seen that any concrete domain that is ad•
missible and provides for an equality predicate is also key-
admissible [Lutz et a/., 2002]. 
  In the following, we assume that all concepts (the input 
concept and those occuring in key boxes) are in negation nor•
mal form (NNF), i.e., negation occurs only in front of concept 
names and nominals; if the concrete domain V is admissi•
ble, then every ALCCK(D)-concept can be converted into 
an equivalent one in NNF [Lutz et al. , 2002]. We use C 
to denote the result of converting the concept C into NNF, 
sub(C) to denote the set of subconcepts of C, and sub(/C) to 
denote the set of subconcepts of all concepts occurring in key 


352                                                                                              DESCRIPTION LOGICS Finally, setand define xor 
 there are a such that x and y are 
 neighbors of a. 
 Intuitively, if we have then a and b describe the same 
 domain element of the constructed model (and similarly for 
 the relation on concrete nodes). 
   Let D be a key-admissible concrete domain. To de•
cide the satisfiability of an ALCOK.{V)-concept Co w.r.t. 
a Boolean key box K (both in NNF), the tableau algo•
rithm is started with the initial completion system 
                 where 
 and maps each occurring in Co to 0. We now 
 introduce an operation that is used by the completion rules to 
 add new nodes to completion trees. 
Definition 14. Let be a completion system 

with .An element of Oa or 0C is called 
fresh in T if it does not appear in T. We use the following 
 notions: 

 S + aRb: Let fresh in T, and R NR. We 
write S + aRb to denote the completion system S' that can be 
obtained from S by adding (a, b) to E and setting L(a, b) — 
 R and Moreover, b is inserted intosuch that 
      implies lev (b) < lev  (c)' 
                 T          T                                         Figure 1: Completion rules for ACCOK{V). 
 S + agx: Let fresh in T and 
 We write S + agx to denote the completion system S' that 
can be obtained from S by adding (a,x) to E and setting        say that the completion system S is concrete domain satisfi-
L{a,x) = g.                                                    able iff the conjunction 
When nesting +, we omit brackets writing, e.g., 
bR2c for be a path. 
With is fresh in T, we 
denote the completion system S' that can be obtained from 5    is satisfiable. 5 contains a clash iff (i) there is anand 
by taking fresh nodes and setting                              ansuch that(ii) there are 
                                                               and such thatand x is of 
                                                               a; or (iii) S is not concrete domain satisfiable. If S does not 
                                                               contain a clash, then S is called clash-free. S is complete if 
 The completion rules are given in Figure 1, where we assume   no completion rule is applicable to S. 
that newly introduced nodes are always fresh. The and We now give the tableau algorithm in pseudocode nota•
 Rch rules are non-deterministic and the upper five rules are  tion, where check denotes the algorithm computing concrete 
well-known from existing tableau algorithms for ALC('D)-       equivalences as described in Definition 11: 
concept satisfiability (c.f. for example fLutz, 2002dl). Only    define procedure sat(S) 
    deserves a comment: it considers -neighbors rather              do 
than R-successors since relates nodes denoting the same                if S contains a clash then return unsatisfiable 
domain element. 
   The last two rules are necessary for dealing with key boxes.        compute and then 
The "choose rule" Rch (c.f. [Hollunder and Baader, 1991;            while 
Horrocks et al., 2000]) guesses whether an abstract node a          if S contains a clash then return unsatisfiable 
satisfies C in case of C occurring in a key definition and          if S is complete then return satisfiable 
                                                                    apply a completion rule to S yielding , 
a having neighbors for all paths uL in this key definition. 
The Rp rule deals with equalities between abstract nodes as         return sat(S") 
recorded by the relation: if. b, then a and b describe           The algorithm realizes a tight coupling between the con•
the same element, and thus their node labels should be identi• crete domain reasoner and the tableau algorithm: if the con•
cal. We choose one representative for each equivalence class   crete domain reasoner finds that two concrete nodes are equal, 
of (the node that is minimal w.r.t. ) and make sure that       the tableau algorithm may use this to deduce (via the com•
the representative's node label contains the labels of all the putation of even more equalities between con•
nodes it represents.                                           crete nodes. The concrete domain reasoner may then return 
                                                               in check further "equalities" ~ and so forth. 
Definition 15. Let S = be a completion system                    A similar interplay takes place in the course of several re•
for a concept C and a key box K with We cursion steps: equalities of concrete nodes provided by the 


DESCRIPTION LOGICS                                                                                                   353 