       Solving    Logic   Program     Conﬂict    through    Strong   and  Weak    Forgettings

             Yan Zhang                        Norman   Foo                     Kewen   Wang
     School  of Computing  &  IT     School  of Comp.  Sci. & Eng.      School  of Computing   & IT
    University of Western Sydney     University of New  South Wales          Grifﬁth University
        NSW   1797, Australia            NSW    2052, Australia            QLD   4111, Australia
    E-mail:  yan@cit.uws.edu.au    E-mail: norman@cse.unsw.edu.au      E-mail: k.wang@cit.gu.edu.au

                    Abstract                              r3 : Goodfriend(John, T om) ←,
                                                          r4 : Copy(T om, Assignment) ←
    We consider how to forget a set of atoms in a logic                    Goodfriend(John, T om),
    program. Intuitively, when a set of atoms is forgot-                   Complete(John,  Assignment),
    ten from a logic program, all atoms in the set should
    be eliminated from this program in some way, and  and Sue’s knowledge base ΠS:
    other atoms related to them in the program might      r5: Hate(Sue, T om) ←,
    also be affected. We deﬁne notions of strong and      r6: ← Help(Sue, John), Copy(T om, Assignment).
    weak forgettings in logic programs to capture such  In order to take Sue’s knowledge base into account, sup-
    intuition and reveal their close connections to the
                                                      pose John updates his knowledge base ΠJ in terms of Sue’s
    notion of forgetting in classical propositional the-
                                                      ΠS. By applying proper logic program update approach, John
    ories. Based on these notions, we then propose a                       final
                                                                         Π     =  {r1, r2, r3, r5, r6}
    framework for conﬂict solving in logic programs,  may obtain a solution: J                   or its sta-
                                                      ble model, from which we know that Sue will help John to
    which is general enough to represent many impor-
                                                                              John           T om
    tant conﬂict solving problems. We also study some complete the assignment and   will not let  copy his
                                                                                           Π       Π
    essential semantic and computational properties in assignment. Although the conﬂict between J and S has
                                                      been solved by updating, the result is somehow not always
    relation to strong and weak forgettings and conﬂict
    solving in our framework.                         satisfactory. For instance, while John wants Sue to help him,
                                                      he may have no interest at all in integrating the information
                                                      that Sue hates Tom into his new knowledge base.
1  Introduction                                         As an alternative, John may just weaken his knowledge
                                                      base by forgetting atom Copy(T om, Assignment) from ΠJ
One promising approach in the research of reasoning about in order to accommodate Sue’s constraint. Then John may
knowledge dynamics is to represent agents’ knowledge bases                final
                                                      have a new program ΠJ    =  {r1, r2, r3} - John remains
as logic programs on which necessary updates are conducted a maximal knowledge subset which is consistent with Sue’s
as a way to model agents’ knowledge evolution. A key issue condition without being involved in Sue’s personal feeling
in this study is to solve various conﬂicts and inconsistencies about Tom.
                   [         ]
in logic programs, e.g. Leite, 2003 .                   The formal notion of forgetting in propositional theories
  While different logic program update approaches have was initially considered by Lin and Reiter from a cognitive
been developed recently, we observe that some typical con- robotics perspective [Lin and Reiter, 1994] and has recently
ﬂict solving problems in logic programs have yet to be thor- received a great attention in KR community. It has been
oughly investigated in the literature. Let us consider a sce- shown that the theory of forgetting has important applications
nario. John wants Sue to help him to complete his assign- in solving knowledge base inconsistencies, belief update and
ment. He knows that Sue will help him if she is not so busy. merging, abductive reasoning, causal theories of actions,
Tom is a good friend of John and wants John to let him copy and reasoning about knowledge under various propositional
John’s assignment. Then John also learns that Sue hates Tom, (modal) logic frameworks, e.g. [Lang and Marquis, 2002;
and will not help him if he lets Tom copy his assignment, Lang et al., 2003; Lin, 2001; Su et al., 2004].
which will be completed under Sue’s help. While John does In this paper, we consider how to forget a set of atoms from
not care whether Sue hates Tom or not, he has to consider a propositional normal logic program and how this idea can
Sue’s condition to offer him help. What is John going to do? be used in general conﬂict solving under the context of logic
We formalize this scenario in a logic programming setting. programs. The rest of this paper is organized as follows. We
John’s knowledge base ΠJ :                            present preliminary deﬁnitions and concepts in section 2. In
    r1 : Complete(John, Assignment) ←                 section 3, we give formal deﬁnitions of strong and weak for-
                     Help(Sue, John),                 gettings in logic programs. Based on these notions, in section
    r2 : Help(Sue, John) ← notBusy(Sue),              4, we propose a framework called logic program contexts forgeneral conﬂict solving in logic programs. In section 5, we If Ci is a clause, we call any sub formula of Ci a subclause
investigate related semantic and computational properties. In of Ci.
section 6 we conclude the paper with some discussions.  Now  we introduce the notion of forgetting in a classical
                                                      propositional theory [Lin and Reiter, 1994; Lin, 2001]. Let T
2  Preliminaries                                      be propositional theory. We use T (p/true) (or T (p/false),
We consider ﬁnite propositional normal logic programs in resp.) to denote the theory obtained from T by substituting all
which each rule has the form:                         occurrences of propositional atom p with true (or false, resp.).
                                                      For instance, if T = {p ⊃ q, (q ∧ r) ⊃ s}, then T (q/true) =
                       not      not
        a ←  b1, · · · , bm, c1, · · · , cn     (1)   {r ⊃ s} and T (q/false) = {¬p}. Then we can deﬁne the
where a  is either a propositional atom or empty, and notion of forgetting in terms of a propositional theory. For a
                                                      given propositional theory T and a set of propositional atoms
b1, · · · , bm, c1, · · · , cn are propositional atoms. When a is
empty, rule (1) is called a constraint. Given a rule r of the P , the result of forgetting P in T , denoted as F orget(T, P ),
                                                      is deﬁned inductively as follows:
form (1), we denote head(r) = {a}, pos(r) = {b1, · · · , bm}
and neg(r) = {c1, · · · , cn}, and therefore, rule (1) may be Forget(T, ∅) = T ,
represented as the form:                                  Forget(T, {p}) = T (p/true) ∨ T (p/false),
                                                          Forget(T, P ∪{p}) = Forget(Forget(T, {p}), P ).
          head(r) ← pos(r), not neg(r).         (2)
                                                        It is easy to see that the ordering in which atoms in P are
We also use Atom(r) to denote the set of all atoms oc- considered does not affect the ﬁnal result of forgetting P from
curring in rule r. For a program Π, we deﬁne notions  T . Consider T = {p ⊃ q, (q∧r) ⊃ s} again. From the above
head(Π)  =   Sr∈Π head(r), pos(Π)  =   Sr∈Π pos(r),   deﬁnition, we have Forget(T, {q}) = {(r ⊃ s) ∨ ¬p}.
neg(Π) =  Sr∈Π neg(r), Atom(Π)  the set of all proposi-
tional atoms occurring in program Π. Given sets of atoms P 3 Strong and Weak Forgettings  in Logic
and Q, we may use notion                                  Programs
    r0 : head(r) ← (pos(r) − P ), not (neg(r) − Q)    Let us consider how to forget a set of atoms from a logic pro-
to denote rule r0 obtained from r by removing all atoms oc- gram. Intuitively, we would expect that after forgetting a set
curring in P and Q in the positive and negation as failure parts of atoms, all occurrences of these atoms in the underlying
respectively.                                         program should be eliminated in some way, and moreover,
  The stable model of a program Π is deﬁned as follows. other atoms having connections to them through rules in the
Firstly, we consider Π to be a program in which each rule program might also be affected. We observe that the notion of
does not contain negation as failure sign not. A ﬁnite set S forgetting in propositional theories is not applicable to logic
of propositional atoms is called a stable model of Π if S is programs since there is no disjunctive operation for logic pro-
the smallest set such that for each rule a ← b1, · · · , bm from grams. Further, different ways of handling negation as failure
Π, if b1, · · · , bm ∈ S, then a ∈ S. Now let Π be an arbitrary in forgetting may also lead to different resulting programs.
normal logic program. For any set S of atoms, program ΠS To formalize our idea of forgetting in logic programs, we ﬁrst
is obtained from Π by deleting (1) each rule from Π that con- introduce a program transformation called reduction.
    not                                       not
tains   c in the body and c ∈ S; and (2) all forms of c Deﬁnition 1 (Program reduction) Let Π be a program and
in the bodies of the remaining rules. Then S is a stable model p an atom. We deﬁne the reduction of Π with respect to p,
                                      S
of Π if and only if S is a stable model of Π . A program denoted as Reduct(Π, {p}), to be a program obtained from Π
may have one, more than one, or no stable models at all. A by (1) for each rule r with head(r) = p and each rule r0 with
program is called consistent if it has a stable model. We say p ∈ pos(r0), replacing r0 with a new rule r00 : head(r0) ←
that an atom a is entailed from program Π, denoted as Π |= a (pos(r) ∪ pos(r0) − {p}), not(neg(r) ∪ neg(r0)); (2) if there
if a is in every stable model of Π.                   is such rule r0 in Π and has been replaced by r00 in (1), then
  Given two programs Π1 and Π2. Π1 and Π2 are equivalent removing rule r from the remaining program. Let P be a
if Π1 and Π2 have the same stable models. Π1 and Π2 are set of atoms. Then the reduction of Π with respect to P is
called strongly equivalent if for every program Π, Π1 ∪ Π inductively deﬁned as follows:
and Π2 ∪ Π are equivalent [Lifschitz et al., 2001].       Reduct(Π, ∅) = Π,
Observation: Let Π be a logic program. If each rule r in Π Reduct(Π, P ∪ {p}) = Reduct(Reduct(Π, {p}), P ).
is of one of the following two forms: (1) head(r) 6= ∅ and
head(r) ⊆ pos(r), or (2) pos(r) ∩ neg(r) 6= ∅, then Π is Note that in our program reduction deﬁnition, step (1) is
                                                                                      [                 ]
strongly equivalent to the empty set.                 the same as logic program unfolding Brass and Dix, 1999 .
  For a later reference, we call the two types of rules men- While unfolding is to eliminate positive body occurrences of
tioned above redundant rules.                         an atom in a logic program, the reduction, on other hand, is
  Let Π be a logic program. We use [Π]C to denote the con- further to remove those rules with heads of this atom.
junctive normal form obtained from Π by translating each Example 1 Let Π1 = {a ← notb, a ← d, c ← a, note},
rule of the form (1) in Π in to the clause: a∨¬b1 ∨· · ·∨¬bm ∨ Π2 = {a ← c, notb, c ← notd}, and Π3 = {a ←
c1 ∨ · · · ∨ cn. For instance, if Π = {a ← notb, c ← a}, then b, b ← notd, c ← a, note}. Then Reduct(Π1, {a}) =
          C
we have [Π] = (a ∨ b) ∧ (c ∨ ¬a). In general, we may write {c ← notb, note, c ← d, note}, Reduct(Π2, {a}) = Π2,
  C                                             C
[Π]  = {C1, · · · , Cn} where each Ci is a conjunct of [Π] . and Reduct(Π3, {a, b}) = {c ← notd, note}. Deﬁnition 2 (Strong forgetting) Let Π be a logic program, Proposition 1 Let Π be a logic program and p, q two propo-
and p an atom. We  deﬁne a program to be the result of sitional atoms. Then
strongly forgetting p in Π, denoted as SForgetLP(Π, {p}), 1. SForgetLP(SForgetLP(Π, {p}), {q}) is strongly
if it is obtained from the following transformation:      equivalent to SForgetLP(SForgetLP(Π, {q}), {p});
     0
 1. Π  = Reduct(Π, {p});                                2. WForgetLP(WForgetLP(Π,   {p}), {q}) is strongly
 2. Π0 = Π0 − {r | r is a redundant rule};                equivalent to WForgetLP(WForgetLP(Π, {q}), {p}).
     0    0
 3. Π  = Π − {r | head(r) = p};                       Example 2  Let Π = {b ←  a, c, d ← nota, e ← notf}.
 4. Π0 = Π0 − {r | p ∈ pos(r)};                       Then we have SForgetLP(Π, {a}) = {e ← notf}, and
     0    0                                           WForgetLP(Π,  {a}) =  {d  ←, e  ←  notf}.  Now  we
 5. Π  = Π − {r | p ∈ neg(r)};                                          C
                         0                            consider Forget([Π] , {a}), which is logically equivalent
 6. SForgetLP(Π, {p}) = Π .                           to formula (b ∨ ¬c ∨ d) ∧ (f ∨ e). Then it is clear that
                                                                  C                          C
  Let us take a closer look at Deﬁnition 2. Step 1 is just to |= Forget([Π] , {a}) ⊃ [SForgetLP(Π, {a})] , and
                                                                            C            C
perform reduction on Π with respect to atom p. This is to re- |= [WForgetLP(Π, {a})] ⊃ Forget([Π] , {a}). 
place those positive body occurrences of p in rules with other The above example motivates us to examine the deeper
rules having p as the head. Step 2 is to remove all redundant relationships between strong and weak forgettings in logic
rules which may be introduced by the reduction of Π with programs and forgetting in propositional theories. Let Π
respect to p. From Observation in section 2, we know that be a program and L a clause, i.e. L = l1 ∨ · · · ∨ lk
this does not change anything in the program. Steps 3 and 4 where each li is a propositional literal. We say that L is Π-
are to remove those rules which have p as the head or in the coherent if there exists a subset Π0 of Π and a set of atoms
positive body. Note that after Steps 1 and 2, there does not P ⊆ Atom(Π) (P could be empty) such that L is a sub-
exist any pair of rules r and r0 such that head(r) = {p} and clause of [Reduct(Π0, P )]C (i.e. [Reduct(Π0, P )]C is a sin-
p ∈ pos(r0). Then the intuitive meaning of Steps 3 and 4 is gle clause). The intuition behind this notion is to specify
that after forgetting p, any atom’s information in rules having those clauses that are parts of clauses generated from pro-
p as their heads or positive bodies will be lost because they are gram Π through reduction. Consider program Π = {a ←
all relevant to p, i.e. these atoms either serve as a support for b, d ← a, notc, e ← notd}. Clause d ∨ b is Π-coherent,
p or p is in part of the supports for these atoms. On the other where clause ¬d ∨ e is not. Obviously, for each rule r ∈ Π,
hand, Step 5 states that any rule containing p in its negation as [{r}]C is Π-coherent. The following proposition provides a
failure part will be also removed. The consideration for this semantic account for Π-coherent clauses.
                          neg(r)
step is as follows. If we think is a part of support of Proposition 2 Let Π be a program and L a Π-coherent
head(r), then when p ∈ neg(r) is forgotten, head(r)’s en- clause. Then either |= [Π]C ⊃ L or |= L ⊃ Φ for some
tire support is lost as well. Clearly, such treatment of negation clause Φ where |= [Π]C ⊃ Φ.
as failure in forgetting is quite strong in the sense that more
atoms may be lost together with notp. Therefore we call this Deﬁnition 3 Let Π be a logic program, ϕ, ϕ1 and ϕ2 three
kind of forgetting strong forgetting.                 propositional formulas where ϕ1 and ϕ2 are in conjunctive
  With a different way of dealing with negation as failure, normal forms.
we have a weak version of forgetting. We deﬁne a pro-   1. ϕ1 is called a consequence of ϕ with respect to Π if |=
gram to be the result of weakly forgetting p in Π, denoted ϕ ⊃ ϕ1 and each conjunct of ϕ1 is Π-coherent. ϕ1 is
as WForgetLP(Π, {p}), exactly in the same way as in Deﬁ-  a strongest consequence of ϕ with respect to Π if ϕ1 is
nition 2 except that Step 5 is replaced by the following step: a consequence of ϕ with respect to Π and there does
                                                                                      0      0
   Π0 = (Π0 − Π∗) ∪ Π†, where                             not exist another consequence ϕ1 of ϕ (ϕ1 6≡ ϕ1) with
                                                                                 0
   Π∗ =  {r | p ∈ neg(r)} and Π† = {r0 | r0 : head(r) ←   respect to Π such that |= ϕ1 ⊃ ϕ1.
                  not                         ∗
            pos(r),   (neg(r) − {p}) where r ∈ Π }.     2. ϕ2 is called a premiss of ϕ with respect to Π if |= ϕ2 ⊃
  Suppose we have a rule like r : head(r) ← pos(r),       ϕ and each conjunct of ϕ2 is Π-coherent. ϕ2 is a weak-
not
   neg(r) where p ∈ neg(r). Instead of viewing neg(r)     est premiss of ϕ with respect to Π if ϕ2 is a premiss
as part of the support of head(r), we may treat it as a default of ϕ with respect to Π and there does not exist another
                                                                   0      0
evidence of head(r), i.e. under the condition of pos(r), if premiss ϕ2 of ϕ (ϕ2 6≡ ϕ2) with respect to Π such that
                                                                   0
all atoms in neg(r) are not presented, then head(r) can be |= ϕ2 ⊃ ϕ2.
derived. Therefore, forgetting p will result in the absence of
                                     0                Example 3  (Example 2 continued) It is easy to verify
p in any case. So r may be replaced by r : head(r) ←                        C
pos(r), not (neg(r) − {p}).                           that [SForgetLP(Π, {a})] is a strongest consequence of
                                                      Forget([Π]C , {a}) and [WForgetLP(Π, {a})]C is a weakest
  Strong and weak forgettings can be easily extended to the              C
case of a set of atoms:                               premiss of Forget([Π] , {a}). In fact, the following theorem
                                                                                  
   SForgetLP(Π, ∅) = Π,                               conﬁrms that this is always true.
   SForgetLP(Π, P ∪ {p}) =                            Theorem  1 Let Π  be a  logic program and  P  a set
         SForgetLP(SForgetLP(Π,  {p}), P ),           of atoms.   Then  [SForgetLP(Π, P )]C is a strongest
and WForgetLP(Π, P ) is deﬁned accordingly. The follow- consequence of Forget([Π]C , P ) with respect to Π
ing proposition ensures that our strong and weak forgettings and [WForgetLP(Π, P )]C is a weakest premiss of
in logic programs are well deﬁned under strong equivalence. Forget([Π]C , P ) with respect to Π.  Theorem 1 actually provides a precise semantic character- Deﬁnition 7 (Preferred solution) Let Σ and Σ0 be two logic
ization for strong and weak forgettings in logic programs in program contexts. We say that Σ0 is a preferred solution of Σ,
terms of the forgetting notion in the corresponding proposi- if Σ0 ∈ Solution(Σ) and there does not exist another Σ00 ∈
tional theory.                                        Solution(Σ) such that Σ00 ≺Σ Σ0.
4  Solving  Conﬂicts  in Logic Program                Example 4  Let Σ = (Φ1, Φ2), where
   Contexts                                             Φ1:                   Φ2:
                                                          Π1: a ←,              Π2: c ←,
In this section, we deﬁne a general framework called logic     b ← a, notc,          d ← note,
program context to represent a knowledge system which con-     d ← a, note,          e ← c,
sists of multiple agents’ knowledge bases. We consider the     f ← d,                f ← d,
issue of conﬂicts occurring in the reasoning within the under- C1: ← d, notf,   C2: ← b, notc,
lying logic program context. As we will show, the notions of  ← notd, notf,        b ← c,
strong and weak forgettings provide an effective way to solve F1: {a, b, c},    F2: {a, b, c, d, e, f}.
such conﬂicts.
                                                      It is easy to see that Σ is consistent but not conﬂict-free
Deﬁnition 4 (Logic program context) A logic program con- because neither Π1 ∪ C2 nor Π2 ∪ C1 is consistent. Now
                                                                                                0  0
text is a n-ary tuple Σ = (Φ1, · · · , Φn), where each Φi is a consider two logic program contexts Σ1 = (Φ1, Φ2) and
                                                              00 00
triplet (Πi, Ci, Fi) - Πi and Ci are two logic programs, and Σ2 = (Φ1 , Φ2 ), where
Fi ⊆ Atom(Πi)  is a set of atoms. We also call each Φi the  0
                                                          Φ1 = (SForgetLP(Π1, {c}), C1, F1),
ith component of Σ. Σ is consistent if for each i, Πi ∪ Ci is 0
                                                          Φ2 = (WForgetLP(Φ2,  {e}, C2, F2), and
consistent. Σ is conﬂict-free if for any i and j, Πi ∪ Cj is 00
                                                          Φ1 =  (WForgetLP(Π1, {a, c}), C1, F1),
consistent.                                                 00
                                                          Φ2 =  (WForgetLP(Φ2, {e}, C2, F2).
  In the above deﬁnition, for a given logic program context It can be veriﬁed that both Σ1 and Σ2 are solutions of Σ, but
Σ, each component Φi represents agent i’s local situation, only Σ1 is a preferred solution. 
where Πi is agent i’s knowledge base, Ci is a set of constraints
that agent i should comply and will not change in any case,
                                                      5   Semantic  and  Computational    Properties
and Fi is a set of atoms that agent i may forget if necessary.
To simplify our following discussion, we assume that for each In this section, we study some important semantic and com-
component Φi, the corresponding agent’s knowledge base Πi putational properties in relation to strong and weak forget-
does not contain constraints (i.e. rules with empty heads). Al- tings and conﬂict solving.
ternatively such constraints will be contained in the constraint
set Ci though Ci may also contain rules with nonempty heads. 5.1 Semantic Characterizations
  Now  the problem of conﬂict solving under this setting We observe that the consistency of program Π does
can be stated as follows: given a logic program context not necessarily imply a consistent SForgetLP(Π, P ) or
Σ = (Φ1, · · · , Φn), which may not be consistent or conﬂict- WForgetLP(Π, P ) for some set of atoms P , and vice
free, how can we ﬁnd an alternative logic program context versa. For example, consider program Π = {a ←, b ←
 0     0      0           0                           not  not
Σ =  (Φ1, · · · , Φn) such that Σ is conﬂict-free and is closest a, b}, then weakly forgetting a in Π will result in an
to the original Σ in some sense?                      inconsistent program {b ← notb}. Similarly, strongly forget-
                                                      ting a from an inconsistent program Π = {b ← nota, c ←
           (       ) Let Σ =  (Φ1, · · · , Φ ) be a logic
Deﬁnition 5 Solution                   n              b, notc} will get a consistent program {c ← b, notc}.
program context, where each Φ = (Π , C , F ). We call a
                           i     i  i  i                To understand why this may happen, we ﬁrst introduce
logic program context Σ0 a solution that solves conﬂicts in Σ,
                                                      some notions. Given program Π  and a set of atoms P ,
if Σ0 satisﬁes the following conditions:
                                                      we specify two programs X and Y . Program X is a sub-
 1. Σ0 is conﬂict-free;                               set of Π containing three types of rules in Π: (1) for each
     0     0      0         0     0            0      p ∈ P , if p 6∈ head(Π), then rule r ∈ Π with p ∈ pos(r)
 2. Σ  = (Φ1, · · · , Φn), where Φi = (Πi, Ci, Fi), and Πi =
                         0                            is in X; (2) for each p ∈ P , if p 6∈ pos(Π), then rule
    SForgetLP(Πi, Pi) or Π =  WForgetLP(Πi, Pi) for
                         i                            r ∈  Π with head(r) =  {p} ⊆  X; and (3) rule r ∈ Π
    some Pi ⊆ Fi.
                                                      with neg(r) ∩ P 6= ∅ but not of the types (1) and (2) is
We denote the set of all solutions of Σ as Solution(Σ). also in X. Clearly, X contains those rules of Π satisfying
Deﬁnition 6 (Ordering on solutions) Let Σ, Σ0 and Σ00 be Atom(r) ∩ P 6= ∅ but will not be affected by Reduct(Π, P ).
three logic program contexts, where Σ0, Σ00 ∈ Solution(Σ). On the other hand, program Y is obtained as follows: for each
We say that Σ0 is closer or as close to Σ as Σ00, denoted rule r in X of the type (3), a replacement of r of the form:
    0      00              0      0           0       r0 : head(r) ← pos(r), not(neg(r) − P ) is in Y . It should
as Σ  Σ Σ  , if for each i, Φi = (Πi, Ci, Fi) ∈ Σ and
 00     00          00        0                       be noted that both X and Y can be obtained in linear time in
Φi =  (Πi , Ci, Fi) ∈ Σ , where Πi = SForgetLP(Πi, Pi)
    0                                                 terms of the sizes of Π and P .
or Πi =   WForgetLP(Πi, Pi) for some Pi ⊆  Fi, and
 00                         00
Πi =  SForgetLP(Πi, Qi) or Πi =  WForgetLP(Πi, Qi)    Theorem  2 Let Π be a program and P a set of atoms. A
for some Qi ⊆ Fi respectively, we have Pi ⊆ Qi ⊆ Fi. We subset S of atoms occurring in SForgetLP(Π, P ) (or in
       0     00   0     00     00     0
denote Σ ≺Σ Σ  if Σ Σ Σ  and Σ  6Σ Σ .              WForgetLP(Π,  P )) is a stable model of SForgetLP(Π, P )(or WForgetLP(Π, P ) resp.) iff program Π − X (or (Π − removable by strongly forgetting atom lr without inﬂuenc-
                              0             0
X) ∪ Y resp.) has a stable model S such that S = S − P . ing other rules. Finally, we specify ΣSI = (Φ1, Φ2), where
                                                              0    r
                                                      Φ1 = (Π1, ∅, {l | r ∈ Π1}) and Φ2 = (∅, Π2, ∅).
  Theorem 2 presents an interesting result: given program Π                        −notP
and set of atoms P , although computing SForgetLP(Π, P ) or For convenience, we also use Π to denote a program
WForgetLP(Π,  P ) may need exponential time (see Section obtained from Π by removing all occurrences of atoms in P
5.3), its stable models, however, can be computed through from the negative bodies of all rules in Π. For instance, if Π =
                                                              notc  not         −not{c}            not
some program that is obtained from Π in linear time.  {a ←   b,    ,   d}, then Π       =  {a ←  b,   d}.
  Now we consider the existence of (preferred) solutions for Now we have the following characterization result.
logic program contexts in conﬂict solving. It is easy to see
                                                      Theorem  4 Let Π1 and Π2 be two consistent programs, and
that not every logic program context has a preferred solution.              0                        1
                                                      ΣSI as speciﬁed aborve. Π is a SI-result of updating Π by
           Σ = (({a ← nota}, ∅, ∅))                          0    −not{l |r∈Π1}            0           r
For instance,                     has no solution, and Π2 iff Π = Π           ∪ Π2, where Σ =  ((Π, ∅, {l |
hence has no preferred solution neither. The following result
                                                      r ∈ Π1}), (∅, Π2, ∅)) is a preferred solution of ΣSI .
shows that the existence of a Σ’s solution always implies the
existence of Σ’s preferred solution, and vice versa.    In our full paper we have showed that other logic program
                                                      update approaches such as Eiter et al’s causal rejection and
Theorem 3 Let Σ be a logic program context. Σ has a pre-
                                                      Dynamic Logic Programming [Eiter et al., 2002; Leite, 2003]
ferred solution iff Solution(Σ) 6= ∅.
                                                      for dealing with sequence of programs can also be embedded
  Although deciding whether a Σ has a (preferred) solution into our framework. In this sense, the logic program context
is NP-hard (see Theorem 6 in section 5.3), we can identify provides a uniﬁed framework for logic program updates.
a useful class of logic program contexts whose solutions al-
ways exist (we have showed in our full paper that all major 5.3 Complexity Results
logic program update approaches can be transformed into the
                                                      We  assume that readers are familiar with the complexity
following form of conﬂict solving context).                                  P      P       P
                                                      classes of P, NP, coNP, Σ2 and Π2 = coΣ2. The class of
Proposition 3 Let Σ = (Φ1, · · · , Φn) be a logic program DP contains all languages L such that L = L1 ∩ L2 where L1
context. If for each Φi = (Πi, Ci, Fi), Ci is consistent, and is in NP and L2 is in coNP. The class coDP is the comple-
for each r ∈ Πi, Fi ∩ Atom(r) 6= ∅, then Solution(Σ) 6= ∅. ment of class DP (readers refer to [Papadimitriou, 1994] for
                        0         0      0            further details).
Proof:  We  show  that Σ    =   (Φ1, · · · , Φn), where
 0                                                      We observe that the main computation of strong and weak
Φi =  (∅, Ci, Fi) (1 ≤ i ≤ n) is a solution of Σ. Since
for each i, Fi ∩ Atom(r) 6= ∅ for each r ∈ Πi, we have forgettings relies on the procedure of reduction that further
 0                                                    inherits the computation of program unfolding. Hence, in
Πi =  SForgetLP(Πi, Fi) =  ∅ (note that this is because
we already assumed that Πi does not contain any rules with general computing strong and weak forgetting may need ex-
empty heads. Instead, this type of rule is contained in Ci). ponential steps of rule substitutions in terms of the sizes of the
                0                                     input program and the set of forgotten atoms. However, the
This follows that Πi ∪ Cj = Cj for all j = 1, · · · , n are con-
sistent. So ((∅, C1, F1), · · · , (∅, Cn, Fn)) is a solution of Σ.  following result shows that the inference problem associated
                                                      to strong and weak forgettings still remains in coNP.
5.2  Representing Logic program  Updates              Proposition 4 Let Π be a logic program, P a set of atoms,
One major advantage of the proposed framework of logic pro- and a an atom. Then deciding whether SForgetLP(Π, P ) |=
gram contexts is that it can represent new conﬂict solving a (or WForgetLP(Π, P ) |= a) is coNP-complete.
scenarios for which the traditional logic program update ap-
                                                      Proof: (Sketch) The hardness is followed by setting P = ∅,
proaches may not handle properly, like the one discussed in                                          
section 1 (or Example 4). In fact, our framework can also and the membership can be proved by using Theorem 2.
represent previous logic program update approaches. To il-
lustrate this, we take Sakama and Inoue’s update approach Now we consider the complexity of irrelevance in re-
[Sakama and Inoue, 1999] as an example (note that we need lation to strong and weak forgettings and conﬂict solving.
to restrict their approach to a normal logic program setting). From a semantic viewpoint, the irrelevance tells us whether a
                                                      strong/weak forgetting or conﬂict solving procedure will af-
Deﬁnition 8 [Sakama and Inoue, 1999] Let Π1 and Π2 be fect some particular atoms occurring in the underlying pro-
                                     0
two consistent logic programs. Program Π is a SI-result grams. Hence, studying its associated computational proper-
                                   0
of a theory update of Π1 by Π2 if (1) Π is consistent, (2) ties is important.
Π2 ⊆  Π0 ⊆ Π1 ∪ Π2, and (3) there is no other consistent
         00         0    00
program Π  such that Π ⊂ Π ⊆ Π1 ∪ Π2.                 Deﬁnition 9 (Irrelevance) Let Π be a logic program, P a set
                                                      of atoms, and a an atom. We say that a is irrelevant to P in
  Now we transform Sakama and Inoue’s theory update into Π, if either Π |= a iff SForgetLP(Π, P ) |= a, or Π |= a iff
a logic program context. First, for each rule r ∈ Π1, we intro-
               r                                      WForgetLP(Π,  P ) |= a.
duce a new atom l which does not occur in Atom(Π1 ∪ Π2).
                          0
Then we deﬁne  a program Π1: for each r ∈  Π1, rule     We  generalize the notion of irrelevance to the logic pro-
 0                                 r        0
r : head(r) ← pos(r), not(neg(r) ∪ {l }) is in Π1. That gram context. Formally, let Σ be a logic program context and
is, for each r ∈ Π1, we simply extend its negative body a an atom, we say that a is derivable from Σ’s ith component,
                  r                      0     0
with a unique atom l . This will make each r in Π1 be denoted as Σ |=i a, if Φi = (Πi, Ci, Fi) ∈ Σ and Πi |= a.