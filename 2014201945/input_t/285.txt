                         Automatically Personalizing User Interfaces 

          Daniel S. Weld Corin Anderson* Pedro Domingos Oren Etzioni 
                        Krzysztof Gajos Tessa Lau* Steve Wolf man 
                            Department of Computer Science & Engineering 
                                 University of Washington, Box 352350 
                                     Seattle, WA 98195-2350 USA 

                     Abstract                          factor of mobile devices is enormously more variable than 
                                                       that of desktop machines — for example, the ratio of large 
    Todays computer interfaces are one-size-fits-all.  to small desktop display size is about four, but it varies by a 
    Users with little programming experience have      factor of 625 between a cell-phone and a liveboard. 
    very limited opportunities to customize an inter•    The wisdom of user-centered design have been well doc•
    face to their task and work habits. Furthermore,   umented [Lewis and Reiman, 1993]. However, as user 
    the overhead induced by generic interfaces will be needs and device characteristics diverge, the traditional de•
    proportionately greater on small form-factor PDAs, sign methodology of intensive user studies becomes unscal•
    embedded applications and wearable devices. Au•    able. While each user deserves a personalized interface, de•
    tomatic personalization may greatly enhance user   signed for the device at hand and providing simple access to 
    productivity, but it requires advances in customiza• the commands and features they need, there aren't enough 
    tion (explicit, user-initiated change) and adapta• ethnomethodologists and designers to manage, interpret, and 
    tion (interface-initiated change in response to rou• respond to so many studies. Indeed, the only resources that 
    tine user behavior). In order to improve customiza• scale with the number of users are the users themselves and 
    tion, we must make it easier for users to direct these the computing devices they are using. 
    changes. In order to improve adaptation, we must 
                                                         We use the term adaptation to denote personalization 
    better predict user behavior and navigate the in•
                                                       which is automatically performed by the interface without 
    herent tension between the dynamism of automatic 
                                                       explicit user directives. By customization we mean person•
    adaptation and the stability required in order for the 
                                                       alization which is directly requested by the user. Our argu•
    user to predict the computers behavior and main•
                                                       ment, thus, is that adaptivity and customization are the only 
    tain control. This paper surveys a decade's work on 
                                                       scalable approaches to personalization. Interfaces should au•
    customization and adaptation at the University of 
                                                       tomatically adapt to the capabilities of the device at hand, 
    Washington, distilling the lessons we have learned. 
                                                       to network connectivity, and to the individual user's activi•
                                                       ties, location, and context; users should be able to guide and 
1 Introduction                                         control adaptation through a variety of customization mecha•
                                                       nisms. 
Today's software is mass produced with a plethora of features 
designed to satisfy every user. But since different people are 1.1 Customization and Adaptation 
working on different tasks with different styles, there is no 
                                                       Of course, many existing desktop applications allow limited 
way to organize features in a way that makes essential func•
                                                       customization by letting the user (1) select which menus are 
tionality convenient for everyone. Consider word processing, 
                                                       visible, (2) add buttons to toolbars, (3) define macros, and (4) 
for example; most people will never use automatic line num•
                                                       even add custom functionality via scripting languages such as 
bering, but legal secretaries couldn't survive without it. 
                                                       Visual Basic. While customization is important, most users 
  The shift away from the desktop and towards pervasive 
                                                       fail to customize effectively. Few users are comfortable with 
computing greatly exacerbates the problem of "Steelcase In•
                                                       macros, regular expressions, or scripting languages, and even 
spired" software for several reasons. First, the shift from quiet 
                                                       programmers are often too busy to invest the necessary time 
office to ubiquitous use introduces complex environmental 
                                                       now in order to speed future sessions. Thus, the challenge 
factors that increase the differences between the usage pat•
                                                       is to create improved methods for users to direct their inter•
terns of distinct individuals; indeed, a single user will require 
                                                       face, rearrange functionality as well as appearance, and re•
different features depending on context. Second, the form 
                                                       cover from inappropriate adaptations. 
  "Current address: Google Inc, 2400 Bayshore Parkway, Moun• Similarly, many systems support limited adaptation, but 
tain View, CA, 94043                                   users don't always appreciate it. Defaults that remember the 
  +Current address: IBM TJ Watson Research Center, P.O. Box last option or directory selected are simple and can be help•
704, Yorktown Heights, NY 10598                        ful, but Microsoft's smart menus disorient, while the Office 


INVITED SPEAKERS                                                                                      1613 Assistant's guesses fall far from the mark. The danger of Yates et al., 2003] and programming by demonstration [Lau 
adaptivity is its potential to create confusing inconsistency et al, 2000]. 
and rob the user of control. Thus, the challenge is to develop 
datamining algorithms that can accurately predict a user's be• 3 Programming by Demonstration 
havior and to navigate the tension between too rapid adap•
tation (disorienting) and too little (inefficient), and to seek If it's too hard for users to specify goals, then a natural ob•
interface metaphors that increase user control.        jective is the design of an interface that can watch a user's 
                                                       normal behavior and help as appropriate. In the case of repet•
1.2 Deep Deployment                                    itive tasks, this amounts to programming by demonstration 
Successful customization and adaptation methods will max• (PBD). Of course, PBD has been studied extensively (Cypher, 
imize their benefit when used by a broad range of applica• 1993], but most previous systems were heuristic and domain-
tions. Ideally, there will be deep deployment', a uniform specific. We sought a domain-independent approach, suit•
layer at the operating systems level that records clickstream able for deep deployment, that offered the expressiveness of 
data across applications, and supports ubiquitous personaliza• a scripting language and the ease of macro recording, with•
tion. For this to work, the interfaces themselves must be de• out a verbatim recorder's accompanying brittleness. While 
scribed using declarative representations like those developed our PBD interface resembles a keystroke-based macro inter•
by the model-based interface community [Foley et al, 1989; face, it generalizes from the demonstrated actions to a robust 
Puerta, 1996]                                          program which is more likely to work in different situations. 
  Deploying personalization methods at the OS layer will It is useful to think of a PBD-interface as having three com•
bring several advantages. The first is consistency of behavior ponents: 1) segmentation determines when the user is execut•
amongst applications. Second, knowledge of a user's activ• ing an automatable task, 2) trace induction predicts what the 
ity with one application may improve adaptation of another's user is doing from a prefix of her activity trace, and 3) facili•
interface. Third, cross-application personalization may offer tation manages user interaction to aid the user in completing 
the highest benefit to users, since many common tasks involve her task. The focus of our work was on the trace induction 
patterns connecting two or more programs.              phase. 
                                                         We formalized PBD trace induction as a learning problem, 
1.3 Outline                                            as follows. A repetitive task may be solved by a program 
                                                       with a loop, where each iteration solves one instance of the 
In the rest of this paper, we describe a sequence of our task. The PBD system must infer the correct program from 
projects which are making progress on this vision. The under• a demonstration of the first few iterations. Each action (e.g., 
lying techniques range along a continuum of user-involvment, move, select, copy, paste, ...) the user performs during this 
and our expository progression follows this vector from cus• demonstration causes a change in the state of the application 
tomization towards pure adaptation. Along the way we com• (e.g., defines a mapping between editor states). Therefore, 
pare related endeavors and summarize lessons learned.  we modeled this problem as one of inferring the function that 
                                                       maps one state to the next, based on observations of the state 
2 Customization by Command                             prior to and following each user action. 
The Internet Softbots project [Etzioni and Weld, 1994]   PBD presents a particularly challenging machine learning 
marked the genesis of work on Intelligent User Interfaces at problem, because users are extremely reluctant to provide 
the University of Washington. By acting as a personal as• more than a few training instances. Thus the learner must 
sistant, the softbot supported a qualitatively different kind of be able to generalize from a very small number of iterations. 
human-computer interface. Users were able to make high- Yet in order to be useful, a wide range of programs must 
level requests, and the softbot used search [Weld, 1996], in• be learnable. Thus the problem combines a weak bias with 
ference [Etzioni et al., 1997], and knowledge to determine the demand for low sample complexity. Our solution, called 
how to satisfy the request. Furthermore, the softbot was able version-space algebra, lets the application designer combine 
to tolerate and recover from ambiguity, omissions, and errors multiple strong biases to achieve a weaker one that is tailored 
in these requests.                                     to the application, thus reducing the statistical bias for the 
  At its core, the softbot could handle goals specified in an least increase in variance. In addition, the learning system 
expressive subset of first-order logic with modal operators for must be able to interact gracefully with the user: presenting 
handling time and for distinguishing information gathering comprehensible hypotheses, and taking user feedback into ac•
goals from those that requested state changes [Golden and count. Version-space algebra addresses this issue as well. 
Weld, 1996]. We labeled the softbot a goal-oriented inter•
face, because human requests specified what the user wanted; 3.1 Version-Space Algebra 
the softbot was responsible for deciding how and when to sat• Originally developed for concept learning, a version space is 
isfy the request. Since most users are uncomfortable with the subset of a hypothesis space which is consistent with a 
logical notation, we provided a forms-oriented interface front set of training instances [Mitchell, 1982]. If there is a partial 
end. Unfortunately, we found the forms approach to be un• order over candidate hypotheses, one may represent the ver•
scalable, and goal-specification was a challenge for many sion space implicitly (i.e., with boundary sets) and manage 
users. In response, we investigated two research directions: updates efficiently. Version space algebra defines transforma•
reliable natural-language interfaces [Popescu et al, 2003; tion operators (e.g., union, join, etc.) for combining simple 


1614                                                                                    INVITED SPEAKERS                                                                these scenarios can be learned quickly in as few as one or 
                                                               two training examples. An informal user study confirmed 
                                                               SMARTEDIT'S usability and usefulness, and showed that even 
                                                               novice SMARTEDIT users perform tasks more quickly and 
                                                               concisely with PBD than without. 
                                                                 However, we learned a negative lesson when we started 
                                                               widespread distribution — despite incorporation within 
                                                               Emacs, relatively few people used SMARTEDIT frequently. 
                                                               From this we conclude that the overhead of a macro recorder 
                                                               interface is relatively high. Since most repetitive tasks are 
                                                               short, it is often easier to do them manually and avoid the 
                                                               cognitive load of complex customization. Others have found 
                                                               similar results — users customize relatively little [Mackay, 
                                                               1991] — perhaps because customization facilities are com•
                                                               plex themselves [McGrenere et al, 2002]. We conjecture 
Figure 1: Algebraic specification of the version space for a 
                                                               that widespread PBD adoption requires automatic segmen•
SMARTEDIT program.                                             tation, and the adaptation mechanisms, described in the next 
                                                               section, may provide this capability. 
version spaces into more complex ones. We also developed a 
probabilistic framework for reasoning about the likelihood of  4 Adapting to User Behavior 
each hypothesis in a composite version space. 
                                                               The AI community has a long-standing interest in adaptive in•
   After constructing a library of reusable, domain-
                                                               terfaces. The Calendar's Apprentice [Dent et al, 1992] used 
independent component version spaces, we combined a set of 
                                                               machine learning to predict meeting location and durations. 
primitive spaces to form a bias for learning text-editing pro•
                                                               This research and similar work on email classification [Maes 
grams (Figure 1), which was used in the SMARTEDIT PBD 
                                                               and Kozierok, 1993] led to an important principle about the 
implementation. 
                                                               incorporation of imperfect behavioral predictions in an inter•
3.2 The SmartEdit Implementation                               face: defaults are an effective way to minimize the cost to the 
                                                               user of (inevitable) poor predictions. Horvitz's decision the•
We verified the utility of version-space algebra for PBD with 
                                                               oretic framework [Horvitz, 1999] resulted in additional prin•
SMARTEDIT, an Emacs-like editor. When a user notices that 
                                                               ciples: graceful degradation of service prediction, expected 
she is about to perform a repetitive task, she clicks a button 
                                                               utility of disambiguation dialogs as a function of user time 
to start the PBD recorder. After completeing one instance of 
                                                               and attention), and the use of timeouts to minimize cost of 
the task, she clicks another button to mark the first demon•
                                                               prediction errors.
stration. SMARTEDIT initializes the version space using the                    1 
                                                                 Our work on adaptive interfaces focussed initially on web•
recorded state sequence as the first training example. As 
                                                               site design [Perkowitz and Etzioni, 1997] and led to al•
the user continues to type, SMARTEDIT updates the version 
                                                               gorithms for datamining web logs to discover aggregate 
space with every action. In parallel, SMARTEDIT displays 
                                                               patterns, which powered the automatic creation of index 
what action it thinks the user will next perform, and its con•
                                                               pages [Perkowitz and Etzioni, 2000]. Later we concentrated 
fidence in the prediction. These probabilities are calculated 
                                                               on mining individual behavior patterns, generating personal•
by voting the version space. When the user is confident that 
                                                               ized sites for display on small, wireless devices [Anderson et 
SMARTEDIT has learned her procedure, she may let it exe•
                                                               al, 2001b], Our emphasis was on "information-goal seek•
cute in single-step or fully autonomous mode. We explored 
                                                               ing" behavior, common to wireless internet use, rather than 
a number of ways of structuring the user's dialog with the 
                                                               general browsing or surfing. The PROTEUS system mod•
learner, including decision-theoretic control [Wolfman et al, 
                                                               eled adaptation as search through the space of possible web•
2001], but many aspects of facilitation require further study. 
                                                               sites. Site modification operators included highlighting text, 
   Version-space algebra provides SMARTEDIT with several 
                                                               adding shortcut links, and eliding parts of pages. We adopted 
benefits: efficient methods for incremental update and voting, 
                                                               the decision-theoretic approach, guiding search with expected 
without explicit enumeration of the version space [Lau et al, 
                                                               utility calculations based on a model of the cost of manipu•
2000], and flexibility. By varying the algebraic formulation 
                                                               lating the small PDA screen and fetching pages over the slow 
for the hypothesis space, we experimented with several other 
                                                               wireless connection. 
version spaces for learning single-loop programs from traces 
                                                                 A small user study revealed two important lessons. For the 
with varying amounts of segmentation information, as well as 
                                                               most part, the adaptations were good ones; PROTEUS sug•
learning programs with multiple nested loops. 
                                                               gested useful shortcuts and the elided content was almost al•
3.3 Experiments and Observations                               ways useless to the user. However, the cost of deleting im•
                                                               portant parts of a page was very high. Reweighting our utility 
Empirical studies validated our approach on a range of text-   function would have led to more conservative behavior, but 
editing scenarios (e.g., bibliographic reformatting, HTML 
to conversion, information extraction, etc.). We                  'it is ironic that the Office Assistant violates most of Horvitz'\s 
show that a program that generalizes correctly for each of     principles, which were developed at Microsoft Research. 


INVITED SPEAKERS                                                                                                    1615 Figure 2: (a) Main dialog box for print command, (b) After clicking the "Properties..." button, the default "Setup" tab is 
displayed, (c) After clicking the "Features" tab, the user can select double-sided printing; the user must now click "ok" twice. 

the problem of accurate behavior prediction is central to in• can infer nothing from this about what the user will do when 
terface adaptation; we discuss it in the next section. visiting a page about a Pearl Jam CD, but an RMM would be 
  A second problem stemmed from the fact that frequently able to infer that the user might next go to a Pearl Jam bi•
users didn't find a shortcut link, even though PROTEUS had ography. RMMs make effective learning possible in domains 
added it in the appropriate place. Shortcut-naming was usu• with very large and heterogeneous state spaces, given only 
ally to blame, and this raised the general issue of saliency, sparse data. Experiments on academic and e-commerce web•
which we discuss in section 4.2.                      sites show that RMMs trained on only ten instances perform 
                                                      as well as Markov models which were trained on ten thousand 
4.1 Predicting User Behavior                          instances [Anderson et al, 2002]. We are currently extending 
High-quality adaptation requires the ability to learn an ex• RMMs by incorporating structure in the same way that dy•
tremely accurate model of user behavior. Our comparison of namic Bayes nets extend Markov models; see [Sanghai et al, 
existing techniques showed that a mixture of Markov mod• 2003]. 
els had the best predictive power [Anderson et al, 2001a]. 
(Shortcuts generated by the mixture model saved users up to 4.2 Partitioned Dynamicity 
40% of their navigational effort.) But all models performed As our experience with unnoticed shortcuts showed, saliency 
poorly when data was sparse; hence none of these models is essential — any adaptive mechanism that introduces new 
would work well for situations where a user is exploring new commands or options to an interface, must ensure that the 
parts of the interface — even if she is performing a task which user finds them. Furthermore, the mechanism must take care 
is similar to one she has performed frequently in another con• not to obscure important existing functionality. 
text (e.g., shopping cart checkout at a new store). To rem• One way to increase saliency, while minimizing the cogni•
edy this problem, we developed relational Markov models tive dissonance associated with adaptivity, is to partition dy-
(RMMs), a generalization of Markov models that overlays namism — to segregate dynamic and static areas of an inter•
relational structure on the states [Anderson et al, 2002]. face. Indeed, a number of well-designed adaptive interfaces 
  Intuitively, RMMs do for Markov models what Prob•   exhibit this property. For example, the news stories and ad•
abilistic Relational Models (PRMs) do for Baysian net• vertisements on Yahoo change continuously, but because the 
works [Friedman et al., 1999]. RMMs generalize Markov layout is fixed, the adaptation causes little distress to users. In 
models by partitioning the states into classes; each class has contrast, the automatic menu shortening feature of Microsoft 
an associated k-ary relation, R, and members of the class cor• Office 2000 violates partitioned dynamicity, since the loca•
respond to R instantiated with distinct ground values. The tion of commands in the menus changes unpredictably. 
domain of each variable can be hierarchically structured, and Powerpoint XP's "Insert Symbol" command provides an•
a smoothing techniqued called shrinkage is carried out over other example. Previous versions required a long sequence 
the cross product of these hierarchies. RMMs make it pos• of clicks to select the correct font and navigate to the desired 
sible to generalize beyond the observed states. For example, symbol, but the dialog box in the XP version has a "Recently 
suppose a user surfing through an e-commerce Web site goes used symbols" area. 
from a page about Nirvana's "Nevermind" CD to a page con• We conjecture that partitioned dynamicity is a useful 
taining a biography of Nirvana. An ordinary Markov model general principle for adaptation in interfaces. Because 


1616                                                                                   INVITED SPEAKERS Figure 3: Abstract-state machine for the printing dialogs; the 
example user's path is darkened. 
                                                      Figure 4: After adaptation, duplex printing is the default and 
users become accustomed to changes in the dynamic area, visible on the main print dialog. By discarding the infre•
these changes don't disturb their conceptual model [Norman, quently used "tablet" value, the variable can be cast as a 
1998]. And because existing navigational patterns remain un• Boolean and a simple, space-efficient check-box widget used. 
changed, users maintain control even if adaptation is unhelp•
ful. The alternative, dual-interface approach of [McGrenere 
et al, 2002] shares many benefits with partitioned dynamic• could find it unchanged on the "Features" tab.4 
ity, but trades convenience for screen real estate.     Restricting a state variable's set of valid values and type 
                                                      casting are just two representative transformations; many 
4.3 Example: Adapting Desktop Dialogs                 more exist. Note that it is only possible to perform these 
                                                      transformations when the interface is represented in an ab•
We believe that the PROTEUS architecture, developed for stract, declarative language. The next section discusses addi•
adaptive websites, would be even more useful in a desk• tional benefits from such a representation. 
top application setting. As a story-board example, suppose 
that a user wishes to print a Word document, doublesided. 5 Adapting to Device Characteristics 
As Figures 2 and 3 show this requires six user actions.2 
First, the user presses ctrl-P to print the current docu• The trend towards mobile and ubiquitous computing has re•
ment. Next, she must click on "Properties..." which yields sulted in an morass of device form factors and input mech•
"Setup" options. Clicking on the "Features" tab uncovers anisms, and it is nearly impossible for a designer to tar•
two sided printing options; another click selects book-style get each of these manually. Furthermore, as shown in pre•
duplex. Then "Ok" must be clicked twice, once to close the vious section, some parts of the interface may be gener•
Properties window and the other to confirm printing.3 How• ated dynamically in response to the particular usage pat•
ever, if an individual user executes this pattern hundreds of terns. Hence, we are building an automated solution, called 
times, always choosing duplex printing, the system should SUPPLE. Others researchers have laid useful foundations. 
recognize this and provide a shortcut.                Starting with [Foley et ai, 1989], the model-based UI com•
  Figure 4 shows one possible result, where the main screen munity has developed declarative, interface-representation 
has partitioned dynamicity, and the duplex options (with a languages; SUPPLE uses an extension of the representation 
new default value) have been added. In this example, we as• developed for PEBBLES [Nichols et ai, 2002]. 
sume that the user had never chosen the "tablet" duplex value. Researchers have explored many methods for "compil•
For the shortcut, therefore, the system deleted the value, cast• ing" a declarative Ul representation into concrete form for 
ing the duplex variable into a Boolean. As a result, the duplex use on a specific target device. For example, PEBBLES 
option could be rendered with a simple, space-efficient check• uses a hand-constructed decision tree for this task; other 
box. Of course, if the user later desired the tablet format, they approaches include hierarchical templates [Szekely et ai, 
                                                       1993], stylesheets [Schreiber, 1994], and tools for facilitating 
  2Using Windows ME, Office XP, and a HP R80 printer. 
  3Of course, one can quibble with the design of this particular 4 Some might argue that this problem could be simply solved by 
interaction, but it is a result of today's software engineering pro• using a MRU default for options like duplex, without restructuring 
cess, and many similar designs exist —that's why adaptation is so the dialogs. But changing defaults is very dangerous unless they are 
promising                                             visible to the user. 


INVITED SPEAKERS                                                                                     1617 