   On the Equivalence between Answer Sets and Models of Completion for Nested 
                                                 Logic Programs 

            Jia-Huai You and Li-Yan Yuan Mingyi Zhang 
            Department of Computing Science Guizhou Academy of Sciences 
              University of Alberta, Canada RR. China 


                        Abstract                               there exists a level mapping from A" to ordinals, such that 
                                                               for any rule 
     We present a sufficient as well as a necessary 
     condition for the equivalence between answer sets 
     and models of completion for logic programs with 
     nested expressions in the bodies of rules. This con•
     dition is the weakest among all that we are aware of 
     even for normal logic programs. To obtain this re•
     sult, we present a polynomial time reduction from         Erdem and Lifschitz lErdem and Lifschitz, to appear] ex•
     this class of nested logic programs to extended pro•      tended the work to nested logic programs, and weakened the 
     grams. Consequently, answer sets for these nested         condition so that the positive literals are required to be or•
     programs can be computed by an answer set gen•            dered by only for applicable rules w.r.t. A\ 
     erator for extended programs on the one hand, and           As shown in [Babovich et al, 2000; Erdem and Lifschitz, 
     characterized in terms of models of completion on         to appear], that a program is tight on S is a sufficient con•
     the other.                                                dition for the equivalence of S being an answer set and S 
                                                               satisfying the completion of the program. However, there are 
                                                               simple programs that are not tight even on their answer sets. 
1 Introduction                                                 For example, suppose we want to express that two or more 
We consider logic programs with nested expressions in the      propositions are equivalent, and they are true if certain condi•
bodies of rules , called nested logic programs in this paper.  tions are satisfied. For instance, consider 
Nested expressions arc formulas built from literals (atoms 
with or without classic negation), connectives such as nega•
tion as failure not, disjunction ";", and conjunction ",". This Clearly, is not tight on its unique answer set {a, b}. Any 
is a proper subset of the class of programs considered in iLif- level mapping that maps the domain {a, b} to non-negative 
schitz et al, 1999], where the head of a rule can also be an   integers will have to satisfy as well as  
arbitrary formula. Lloyd and Topor [Lloyd and Topor, 1984]      (a), which is impossible. 
defined nested logic programs without negation as failure,       Even for logic programs without negation as failure, tight•
and argued for the higher expressive power of the extended     ness may fail to apply, e.g., with II = II is 
language, while Lifschitz et al. further showed the role of    not tight on its unique answer set {a}. 
negation as failure in nested logic programs.                    In this paper, we define the notion of weak tightness, which 
   Our goal in this paper is to provide a characterization of  is a sufficient as well as a necessary condition for a model of 
answer sets for nested logic programs in terms of tightness    completion to be an answer set. Consequently, an answer set 
on the one hand, and to use an answer set generator, such      is characterized by three independent properties: weak tight•
as Smodels or DLV to compute answer sets for nested logic      ness, supportedness, and closedness. This characterization of 
programs on the other. The studies on characterizations of     answer sets can be generalized to nested programs via a lin•
answer sets have proved useful in relating the completion se•  ear time transformation to extended programs. This yields a 
mantics iClark, 1978] with the answer set semantics [Gel-      new characterization of answer sets for nested programs. Al•
fond and Lifschitz, 1988]. Fages [Fages, 1994] defined a       though the transformation uses a linear number of extra vari•
syntactic condition on logic programs, called positive-order-  ables, we will see that these extra variables are non-split, in 
consistent, which guarantees the equivalence of the two se•    the sense that in a Davis-Putnam procedure [Davis and Put•
mantics. Positive-order-consistent requires a program to have  nam, 1960], they need not create choice points during search 
no positive loops. For example, the program is not             for answer sets, and thus they need not enlarge the search 
positive-order-consistent. Babovich et al. [Babovich et al,    space. 
2000] on the other hand formalized the notion, tight on a set,   Our results have some practical implications. First, 
which says that an extended logic program II is tight on X if  they widen the application range of systems like Cmodels 


NONMONOTONIC REASONING                                                                                                859  [Babovich, 2002], a system implemented for the computa•         A consistent set of literals A' is an answer set of program 
 tion of answer sets for tight logic programs. Secondly, the      if and only if A" is minimal among the consistent sets of 
 transformation from nested programs to extended programs      literals closed under , where the reduct is obtained 
 allows answer sets for nested programs to be computed by an   from by replacing every maximal occurrence of a formula 
 answer set generator for extended programs, or indirectly via not F by if X F and otherwise. 
 the models of their completed programs.                         We define the completion semantics for finite nested pro•
   The next section introduces logic programs with nested ex•  grams without the classic negation. Let II be such a program. 
 pressions. In Section 3 we define weak tightness and show     The completion of , denoted Comp\ , is the following set 
 that answer sets are characterized by this condition along with of propositional formulas: for each atom which is either an 
 models of completion. In Section 4 we present a polynomial    atom in L, or , 
 time transformation from nested programs to extended pro•       • if does not appear as the head of any rule in IT, then 
 grams. Section 5 remarks on related work. 

 2 Nested Logic Programs                                         • otherwise, (with 
                                                                    each default negation not ^ replaced by negative literal 
 We consider a propositional language L. A literal is an               , if there are exactly n rules 
 atom, or an atom with the sign in front, called the classi•        as the head. 
 cal negation. Elementary formulas are literals and constants 
                                                                 Finally, given a nested program without negation as fail•
                          . Formulas are built from elemen•
                                                               ure, to construct the unique minimal set among the consistent 
 tary formulas using the unary connective not and the binary 
                                                               sets of literals closed under II, we define the familiar op•
connectives, (conjunction) and ; (disjunction). A nested logic 
program (or, just program if not otherwise specified) is a set erator as 
of rules of the form 
                                                               It is clear that is monotonic over the domain of sets of 
where H is a literal or , and G is a formula. H is called the  literals. The least fixpoint can then be computed by 
head of the rule and G the body. If G = , we will drop it 
from the body; rules with the body are called facts. 

   Here are some special cases. A formula of the form not t 
where is a literal, is called a default negation. When G is a 
conjunction of literals and default negations, the rule is called 
an extended rule. In an extended rule, the literals that do not The following proposition is needed later in this paper. 
appear in the scope of not are called positive literals. The   Proposition 2.1 Let be a program without negation as fail•
programs that consist of only extended rules are called ex•    ure. Then, X is an answer set for iff X is consistent and 
tended programs; and extended logic programs without clas•
sic negation arc called normal programs. 
   An extended rule may be denoted by where 3 Weakly Tight Logic Programs 
     is the set of positive literals and B- the set of default 
                                                               Let be an extended program, A' a set of literals, and h a 
negations. 
                                                               literal in A". We define the set of applicable rules of , with 
   We denote by the set of literals occurring in  
                                                               respect to h and A\ as follows; 
where is any syntactic entity, such as a formula or a pro•
gram. Let A" be a set of literals. denotes the subset of 

Ar, restricted to the literals in V, i.e., . A set of 
elementary formulas A' is consistent if i. tf X and it contains  A level mapping A is a partial function from literals to nat•
no complementary literals / and                                ural numbers such that the set A/* of natural numbers mapped 
   That a consistent set of literals X satisfies a formula F,  from literals forms a partial order  
denoted , is defined recursively as follows: 
                                                               Definition 3.1 Let X be a set of literals and an extended 
     for elementary formula                                   program. is said to be weakly tight on X if there ex•
                                                               ists a level mapping with the domain such that for 
                                                               any nonempty where there is a rule  
                                                               Body* \Body~ in [h,X) such that for each Body*, 

A consistent set A  of literals is closed under a program II if, 
                 r                                             Example 3.2 Let program  
for every rule H G in H X whenever X G. X is 
                                                               c, not d. .}. Then, is the only answer set 
supported by if, for any / X there is a rule / G such 
                                                              for Though is not tight on S, n is weakly tight on S. 
that X G. 
                                                               For example, a level mapping A satisfying the weak tightness 
  We now define answer sets for a program. For a program 
                                                               condition can be:  
   without negation as failure, a consistent set of literals X is 
an answer set for II if and only if X is minimal among the        'By a partial order, we mean a relation that is transitive and ir-
consistent sets of literals closed under II.                  reflexive. 


860                                                                                      NONMONOTONIC REASONING Lemma 3.3 Let be an extended program, and S an answer          a level mapping to be applied to a rule with a body literal that 
set for Then is weakly tight on S.                             does not appear in the head of any rule. 
Proof. Since S is an answer set for , S — It can 
be seen that the following mapping exists: for each literal q  4 Transformation 
such that 
                                                               When a program II is translated to another program II7, new 
Clearly, satisfies the condition for weak tightness.           propositional symbols may be used. Thus, the language for 
Theorem 3.4 For any extended program and any consis•              is enlarged. Below, we define a notion of equivalence be•
tent set of literals S, S is an answer set for iff is weakly   tween a program and its translation. Throughout this section, 
tight on S, and S is closed under and supported by II.         a program means a finite nested program. 
Proof Let S be an answer set for . Then !                      Definition 4.1 Let be a program in language L. Suppose 
5. It's obvious that S is closed under and supported by IT     the language V for is a superset of L. ' is equivalent 
From Lemma 3.3 we know that TI is also weakly tight on S.      to , denoted , if and only if both of the following 
                                                               statements hold. 
     Assume is weakly tight on S, and S is closed under 
and supported by II. We show that S is an answer set for         • For any answer set S for , there is exactly one answer 

Let Mm The condition that S is closed implies                       set S' for such that  
M S. We are done if M - S. Otherwise we have M S. 
                                                                 • For any answer set S' for is an answer set for 
Let q Since S is supported by II, there is a rule 
r : in such that Body  Lemma 4.2 The relation is reflexive and transitive. 
and Body Thus, the same rule r is in II (q, S), which 
is nonempty. As II is weakly tight on 5, there is a mapping      Our transformation makes use of some transformations in 
                                                               [Lifschitz et ai, 19991 that preserve strong equivalence. Two 
  and a rule q , Body , Body ' in such that  
                                                               programs are said to be strongly equivalent if for 
Body and - for each . Since                                    any program and have the same set of 
M is also closed, there is " Body such that                    answer sets. Strong equivalence entails our notion of equiva•
Then, from the definition of ', there is a literal ~ " such    lence. 
that I is minimal, hence . This contradicts the 
assumption that M is the least fixpoint of the operator        Proposition 4.3 If two programs and are strongly 
                                                               equivalent, then they are equivalent to each other, i.e.,  

   Note that neither supportcdness nor closedness can be re•
moved from the theorem for it still to hold. E.g. the program  4.1 Transformation 
                 is tight as well as weakly tight on {a,/;}, 
which is not supported by For closedness, we note that         In the following, we say that a formula is basic if it is built 
any program is tight as well as weakly tight on the empty set. from lY\ 47\ literals, constants, and not L and not not L 
                                                               where L is a literal or constant. A program is said to be basic 
Corollary 3.5 Let be a finite normal program and S a set       if it consists of rules whose body formulas are basic. A rule 
of atoms satisfying Comp . Then, is weakly tight on S 
ifj'S is an answer set for  
   To compare two conditions that guarantee a model of com•    is said to be fiat if every G\ is a conjunction of literals and 
pletion to be an answer set, we have the following definition. default negations. A program \sflat if every rule in it is flat. 
Deiinilion 3.6 Let Cond\ (A\ Y) and Cond'2(X,Y) be con•          Let II be a nested program. Our transformation consists of 
ditions where X ranges over the set of all extended programs   three steps, briefly described below. 
and Y over the set of all sets of literals. Cond\(X, Y) is said  • II is transformed to a basic program II' by some simpli•
to be weaker than Cond2(X, Y) if                                    fication rules. 
   • for all X and Y, Cond2(X, Y) implies Comll(X, Y),           • IT is transformed to a flat program II" by transformation 
     and                                                            rules that name some subexpressions by new atoms. 
   • there exist some X and Y such that Condi (A  , V) does 
                                                 r               • II" is then transformed to    by splitting each flat rule 
     not imply Cond2{X, Y).                                                                  f
                                                                    with disjunctive body into several extended rules with 
Proposition 3.7 For any extended program and set of lit•            the same head. 
erals X, if is tight on X then it is weakly tight on X. But 
                                                                 We now give the details. Below, Jenotes a rewrite 
the converse is not true. 
                                                               rule. 
   In Section 5, we will see that weak tightness is also weaker 
than other conditions used to characterize answer sets in the  Step 1. Simplification 
literature. Then, the question arises as whether the weak 
tightness condition is the weakest. Technically, the answer 
is no, since the weak tightness condition can be made weaker 
in trivial ways, e.g., one can make it weaker by not requiring 


NONMONOTONIC REASONING                                                                                                861                                                                A program s called an normal form if cannot be re•
                                                               duced further by transformation rules in Step where 
                                                               [1..3]. In addition, we denote by 

                                                               a rewrite sequence generated only by the transformation rules 
                                                               in Step  

 where Rule 3 has higher priority to be applied than Rules 1 
and 2.  

   The simplification rules given here are essentially their cor•
responding equivalences given in [Lifschitz^/a/., 1999]. The 
only difference is that, for the purpose of termination, we 
cannot directly adopt an equivalence for symmetry, such as 
               as a rewrite rule. We therefore have to repre•  Lemma 4.5 There is no infinite sequence 
sent the symmetric cases by rules. 
   The simplification rules are similar to the ones found in 
propositional logic, except perhaps Rule 3, which simplifies 
negation as failure only when it is nested at least three lev•
els deep. Among these rules, only 1-3 are essential for the 
purpose of producing a basic program. The rest are used to 
simplify basic formulas further.                               Lemma 4.6 Let n be the size of the program mentioned 
   That a rule has a higher priority to be applied than another below. 
rule means that when both rules are applicable, the former 
should be applied and the latter should not. The only intention 
here for Rule 3 over Rules 1 and 2 is to prevent transforming 
an expression of the form 


where by distributing each not over F (which would 
result in higher complexity). 

Step 2. Naming subexpressions 
                                                                 We can show that every transformation in Step 2 preserves 
                                                               equivalence. 
                                                               Lemma 4.7  
                                                                 For any program II, Lemmas 4.5 and 4.6 together guaran•
                                                               tee the existence of a finite rewrite sequence 


Step 3. Splitting                                              where is an -normal form, is an u>2-normal form, 
                                                               and is an extended program. Let us call such a the 
  A flat rule of form                is replaced by rules 
                     t                                         transformation of denoted by 
                                                                 We are ready to show the main theorem of this section. 


  The set of all transformation rules in Steps 1, 2 and 3 de•
fine a binary relation over programs. We will use to 
denote a single transformation step that transforms program 
n to program by an application of a transformation rule in 
Step i where By a rewrite sequence, we mean a se•
quence of zero or more rewrite steps which takes the general 
form 

                                                                  3Although transformation rules can be applied nondcterministi-
                                                               cally, it is easy to show that the rewrite relation for any 
   2Apparently, in this case all the occurrences of {G\ H) in the is confluent [Dershowitz and Jouannaud, 1990J so that the final ex•
given program can be replaced by simultaneously.               tended program is unique, up to atom renaming. 


862                                                                                      NONMONOTONIC REASONING Corollary 4.9 For any programs II and P,                         The level mapping in Fages' definition depends on the sup-
                                                               portedness: one needs to find a rule that supports an atom, and 
                                                               then determines if a level mapping applies to the same rule. 
                                                               The two conditions in our case are independent. 


The claim in 1 above is considered by some authors as a form 
of strong equivalence within the same language. 
   It follows from Lemma 4.6 that 
                                                                 To summarize the relationships among tightness, weak 
Theorem 4.10 For any program there is a linear time re•        tightness and well-supportedness for normal programs, we 
duction of to an extended program 11' so that the answer       have, for any normal program and set of atoms 5, 
sets for can he identified in linear time from those for         • If 5 is well-supported, then is weakly tight on 5; but 
   We remark that the extra atoms introduced in our transfor•      the converse is not true. 
mation are non-split. They are just "connecting atoms" serv•     • If is tight on 5, then is weakly tight on 5; but the 
ing the purpose of propagating values from subexpressions.         converse is not true. 
Their values can be determined solely by constraint propaga•
tion from the values of the original atoms.                      • That is tight on S is not a sufficient condition for S 
                                                                   to be well-supported; that S is well-supported is not a 
   Non-split variables can be accommodated easily in systems 
                                                                   sufficient condition for to be tight on S. 
like Smodels by applying the procedure Heuristic only to the 
set of original variables, so that non-split variables will not Therefore, the weak tightness is the weakest among all three, 
be picked up for guessing a value. In this way, non-split vari• bridging the gap between tightness and well-supportedness. 
ables do not create choice points during the search for answer 
                                                               Strong Compatibility of Logic Programs 
sets. 
                                                                 In [Zhang, 1992], Zhang showed a characterization of de•
4.2 Weakly tight nested logic programs                         fault extensions. Here, we re-formulate it for logic programs. 
                                                                 For an extended logic program let us define 
We give a characterization of answer sets for nested pro•
grams, in terms of their transformations, and show the coun•
terpart of Theorem 3.4 for nested programs. 


                                                               / 
                                                               C  

Theorem 4.12 Let be a nested program, and X a consis•
tent set of literals. X is an answer set for II iff is weakly 
tight on X, and X is closed under and supported by II. 
Corollary 4.13 Let be a finite nested program without the 
classic negation and S a set of atoms satisfying Co7np(U). 
Then, U is weakly tight on SiffS is an answer set for II.        The characterization of default extensions as given in 
                                                               [Zhang, 1992], when applied to logic programs, can be stated 
5 Related Work                                                 as follows. 

Well-Supported Model                                           Theorem 5.4 Let U be an extended logic program. U has an 
                                                               answer set iff there is a subprogram II' C 17 such that 
Definition 5.1 [Fages, 1991] Let be a normal program. A 
set of atoms S is well-supported iff there exists a level map•
ping with S as the domain such that for any atom a 

there exists a rule v , „ .. . which is appli•
cable w.r.t. S, and for each  

   Ben-Eliyahu and Dechter's characterization [Ben-Eliyahu       A subprogram is said to be strongly compatible if 
and Dechter, 1994] of answer sets for head cycle-free disjunc• it is compatible and We can show the following 
tive programs reduces to that of Fages for normal programs.    relationship. 
Theorem 5.2 [Fages, 1991] For any normal program II, the       Proposition 5.5 Let be an extended program. For any 
well-supported models ofU are exactly the answer sets for II. 


NONMONOTONIC REASONING                                                                                               863 