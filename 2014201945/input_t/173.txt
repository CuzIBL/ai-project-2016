    Contract Algorithms and Robots on Rays: Unifying Two Scheduling Problems 

          Daniel S. Bernstein                       Lev Finkelstein                     Shlomo Zilberstein 
      Dept. of Computer Science            Computer Science Department              Dept. of Computer Science 
      University of Massachusetts                   Technion—IIT                    University of Massachusetts 
          Amherst, MA 01003                       Haifa 32000, Israel                   Amherst, MA 01003 
          bern@cs.umass.edu                      lev@cs.technion.ac.il                 shlomo@cs.umass. 


                        Abstract                               contract algorithms, which are anytime algorithms that re•
                                                               quire the deadline as input prior to the start of execution. With 
     We study two apparently different, but formally           contract algorithms, no assumptions can be made about re•
     similar, scheduling problems. The first problem in•       sults produced before the given deadline. This is in contrast to 
     volves contract algorithms, which can trade off run       the familiar interruptible algorithms, which can be queried at 
     time for solution quality, as long as the amount of       any point during execution. Although less flexible than inter-
     available run time is known in advance. The prob•         ruptible algorithms, contract algorithms typically use simpler 
     lem is to schedule contract algorithms to run on par•     data structures, making them easier to implement and main•
     allel processors, under the condition that an inter•      tain. An example in Al is game playing programs based on 
     ruption can occur at any time, and upon interruption      heuristic search. For these programs, the allowed deliberation 
     a solution to any one of a number of problems can         time is usually known in advance, and is used to set internal 
     be requested. Schedules are compared in terms of          parameters. Another example is planning algorithms that per•
     acceleration ratio, which is a worst-case measure of      form state-space abstraction. With these algorithms, the run 
     efficiency. We provide a schedule and prove its op-       time can be controlled by setting the abstraction level at the 
     timality among a particular class of schedules. Our       start of execution. 
     second problem involves multiple robots searching           Our problem can be stated as follows. We are given n 
     for a goal on one of multiple rays. Search strate•        instances of an optimization problem, along with a contract 
     gics are compared in terms of time-competitive ra•        algorithm for the problem, and we have an m-processor ma•
     tio, the ratio of the total search time to the time       chine on which to run the algorithm. An interruption can oc•
     it would take for one robot to traverse directly to       cur at any time, and a solution can be requested for any one 
     the goal. We demonstrate that search strategies and       of the problem instances. Given these constraints, we want a 
     contract schedules are formally equivalent. In addi•      good general strategy for scheduling runs of the algorithm on 
     tion, for our class of schedules, we derive a formula     the processors. 
     relating the acceleration ratio of a schedule to the 
                                                                 In the case of one problem instance and one processor, 
     time-competitive ratio of the corresponding search 
                                                               Russell and Zilberstein [1991] suggested iteratively doubling 
     strategy. 
                                                               the contract lengths. With this schedule, for any interruption 
                                                               time t, the last contract completed (if one exists) is always 
                                                               of length at least t/4. This factor of four is the acceleration 
1 Introduction 
                                                               ratio of the schedule, a worst-case measure of its efficiency. 
In this paper, we demonstrate a connection between two prob•   Zilberstein et al. [1999] showed that no schedule can achieve 
lems that initially seem unrelated. The first involves comput• an acceleration ratio less than four. 
ing solutions to multiple problems, under the condition that a   The generalization to multiple problem instances has been 
solution to any one of the problems can be requested at any    considered [Zilberstein et al., 1999], as has the generaliza•
time. Challenges of this type arise in the design of intelligent tion to scheduling contracts on parallel processors [Bernstein 
user interfaces, information prefetching systems, and medi•    et al, 2002]. Optimal acceleration ratios have been derived in 
cal diagnosis systems. The second problem involves multiple    both cases. The more general multi-processor, multi-instance 
robots searching an unknown environment for a goal. Prob•      case has not previously been studied. In this paper, we pro•
lems of this nature arise in robotics and space exploration.   vide a schedule for this case, and we prove that this schedule 
In the following paragraphs we describe the problems, along    is optimal among a restricted, though still interesting, class of 
with our contribution, in more detail.                         schedules. The optimality proof is a nontrivial extension of 
  The first problem concerns anytime algorithms [Horvitz,      the previous proofs, and contains as a lemma a generalization 
1987; Dean and Boddy, 1988; Russell and Zilberstein, 1991],    of the monotone convergence principle. 
which produce solutions of different qualities depending on      This work is most closely related to Horvitz's continual 
available computation time. More specifically, we focus on     computation framework [Horvitz, 2001]. In his framework, 


SCHEDULING                                                                                                          1211  as in ours, computation is performed with limited knowledge 
 about the deadline or desired result. However, the assump•
 tions underlying the two frameworks are different. In the con•
 tinual computation framework, the limited knowledge comes 
 in the form of probability distributions. In contrast, our use of 
 acceleration ratio does not require probabilistic information. 
 Furthermore, contract algorithms and parallel processing are 
 both not considered in continual computation. 
   Our contract scheduling results can be directly applied to 
 a robot search problem. In this problem, m robots search for 
 a goal that is located on one of p intersecting rays. The aim 
 is to minimize the time-competitive ratio, which is the worst-
 case ratio of the total time spent searching to the time for a 
 single robot to traverse directly to the goal. The optimal ratio Figure 1: Scheduling a contract algorithm on three processors 
 for the one-robot case was derived previously [Baeza-Yates    to create a two-problem multi-interruptible algorithm. 
 etal, 1993]. 
   We address the general multi-robot case, for which search 
 strategies are formally equivalent to contract schedules. For 
 our class of schedules, we derive a formula relating the accel•
eration ratio of a schedule to the time-competitive ratio of the 
 corresponding search strategy. The optimal time-competitive 
 ratio is derived as a corollary. 
   This work is the first to draw a precise connection between 
contract scheduling and multi-robot search, and the first to 
provide nontrivial results for the multi-robot case. Kao 
al [1998] studied the multi-robot problem, but used a dif•
 ferent performance measure. They minimized the distance-
competitive ratio, which is the worst-case ratio of the total 
distance traveled during the search to the distance between 
the origin and the goal. 

2 Scheduling a Contract Algorithm 
2.1 Problem Description 
An anytime algorithm A, when applied to an optimization 
problem instance i for time t, produces a solution of some 
real-valued quality The function QA is called A's             Note that although G depends on A", we omit the subscript. 
performance profile. In general, one does not know an al•      Dependence on the schedule will be made implicit through•
gorithm's performance profile. Nevertheless the concept of     out the paper for ease of notation. For every schedule, the 
a performance profile is useful in reasoning about anytime     index ordering must correspond to the completion time or•
algorithms. We assume that the performance profile of an       dering. Furthermore, no two contracts may complete at the 
anytime algorithm on any problem instance is defined for all   exact same time. The formal statement of these two condi•
      and is a nondecreasing function oft.                    tions is that is equivalent to for all k, I. Also, 
   The distinctions among different types of anytime algo•    a schedule must have for This 
rithms arise from different assumptions about which param•    ensures that after time a solution is available for 
eters are known prior to execution. When both t and i are     each problem instance. 
known in advance, the algorithm is called contract. When         To compare schedules, we use a worst-case metric called 
only i is known in advance, the algorithm is called interrupt- acceleration ratio. The acceleration ratio tells us how much 
ible. For the case where both are unknown, we will say that   faster our constructed algorithm would need to run in order to 
the algorithm is multi-interruptible, because it acts like mul• ensure the same quality as if the query time and problem were 
tiple interruptible algorithms running in parallel.           known, and a dedicated processor was assigned to producing 
   Suppose we have a contract algorithm A, which we can run   a result. Intuitively, it measures how well a schedule handles 
on a machine with m processors. At some unknown deadline,     the uncertainty about the problem instance and interruption 
a solution to one of n problem instances will be requested.   time. 
This setup requires a multi-interruptible algorithm, which we    Before formally defining acceleration ratio, we must state 
can create by scheduling contracts in such a way that progress some more technical details of the problem and present some 
is continually made on each problem instance. Upon inter•     more definitions. First, we take the view that when a contract 
ruption and query, the result returned is that of the longest completes at time t, its solution is available to be returned 
completed contract dedicated to the desired problem instance. upon interruption at any time r t. Second, we assume that 


1212                                                                                                      SCHEDULING   We can now give a precise definition of acceleration ratio. 


  In the next section, we provide a schedule that is optimal 
within a restricted, though still interesting, class of schedules. 
We state below in precise terms the properties that delineate To show that equality holds, assume the contrary and derive 
the class of schedules under consideration. Schedules having  a contradiction with the fact that is defined as the 
the three properties below will be called cyclic schedules.   smallest constant enforcing the inequality between 
  The first property states that problem instances arc com•   and  
pleted in a round-robin manner. This seems sensible, as the     Next we show that 
desired problem instance is unknown. However, we cannot 
yet prove that for every non-problem-round-robin schedule, 
there is an equally good problem-round-robin schedule. 
Property 1 (Problem-round-robin) mod for all                  For each is left-continuous everywhere and piece-
k.                                                            wise constant, with the pieces delimited by time points 
                                                              So for all is left-continuous and piecewise linear 
  The next property states that the lengths of contracts for 
                                                              and increasing. Thus, the local maxima of occur at 
each problem instance must increase with time. Given that 
                                                              the points Gk; no other times may play a role in the supre-
performance profiles are nondecrcasing, it seems that it would 
                                                              mum. 
never be beneficial to use a schedule that doesn't satisfy this 
                                                                Finally, 
property. However, as with the first property, we cannot 
yet prove this. One difficulty lies in having to satisfy the 
problem-round-robin property mentioned above. We would 
like to be able to "remove" useless contracts from a schedule, 
but we have not found a way to do this while guaranteeing     follows from the problem-round-robin and length-increasing 
that the resulting schedule will be problem-round-robin.      properties, and the fact that no two contracts can finish at the 
                                                              exact same time.  
Property 2 (Length-increasing) For all and 
                                                                To conclude this section, we define the minimal accelera•
      then  
                                                              tion ratio for m processors and ?/ problems to be 
  The final property states that processors return results in a 
round-robin manner. This property does not play a part in our 
lower bound derivation, but it is used in drawing a connection 
to the robot search problem. We introduce it at this point only where the infimum is taken over the set of cyclic schedules. 
for ease of exposition.                                       In the following sections, we provide tight bounds for this 
                                                              ratio. 
Property 3 (Processor-round-robin) mod m for 
all k.                                                        2.2 An Exponential Schedule 
  We can prove a lemma that allows us to cast acceleration    A simple approach to scheduling contract algorithms is to 
ratio in simpler terms when we are considering only cyclic    have the contract lengths increase exponentially. We consider 
schedules. In the proof, the following facts arc established: the schedule 
acceleration ratio can be stated without reference to perfor•
mance profiles; the only interruption times that need to be 
considered are completion times; and upon interruption, the   It is easily verified that this is a cyclic schedule. The follow•
result returned is from the contract with index exactly n less ing theorem gives an expression for this schedule's accelera•
than index of the current contract.                           tion ratio. 


SCHEDULING                                                                                                         1213 Theorem 1 The acceleration ratio for the exponential sched•
ule is 


  There are a few things to note about the ratio we just de•
rived. As the number of processors approaches infinity, it 
tends to one. This is intuitive; by adding processors, we can 
get arbitrarily close to the omniscient algorithm. As the num•
ber of problems approaches infinity, the ratio tends to infinity. 
Finally, the ratio depends only on the ratio of problems to pro•
cessors, and not on the absolute numbers. 
  We turn now to showing that no cyclic schedule can 
achieve a smaller ratio. 

2.3 Lower Bound 
We define a function to represent the sum of the lengths of all 
the contracts finishing no later than contract k finishes: 


We can derive an inequality involving only the acceleration 
ratio and {#*}. 
Lemma 2 For all cyclic schedules X and all k, 


1214                                                                                                      SCHEDULING                                                               Figure 2: The search problem with three robots and five rays. 

                                                              at the same speed, search for a goal at an unknown location 
                                                              on one of the rays (see Figure 2). The search ends as soon as 
                                                              one of the robots finds the goal. Because there are not enough 
                                                              robots to cover all of the rays, finding a good search strategy 
                                                              is nontrivial. At this level of detail, the search problem may 
                                                              seem very different from the contract scheduling problem. 
                                                              Below we provide a more precise description of the search 
                                                              problem and show how the contract scheduling results can be 
                                                              applied. 
                                                                 A search is an infinite sequence of search extents, or return 
                                                              trips departing from the origin. Formally, a search strategy is 
                                                              a triple where 
                                                                 is the robot executing search extent  
                                                              is the ray on which search extent takes place, and 
                                                              is the length of search extent By adding the same con•
                                                              ditions as in the contract scheduling case, we get an exact 
                                                              correspondence between schedules and search strategies. A 
                                                              cyclic search strategy is defined in the same way as a cyclic 
                                                              schedule. 
                                                                 A natural metric for the efficiency of a search strategy is 
                                                              the time-competitive ratio, the worst-case ratio of the total 
                                                              time spent searching to the time required for a single robot to 
                                                              traverse directly to the goal. We assume that the goal is not 
                                                              considered discovered until a robot actually moves beyond it. 
                                                              We assume also that the location of the goal is such that it 
                                                              cannot be found on the first search extent on any of the rays. 
                                                              This means that for each ray a, we consider only locations 

                                                                Before formally defining time-competitive ratio, we need 
                                                              to introduce a new function and explain its use in the defini•
Combining this inequality with Theorem 1, we get the desired 
                                                              tion. Let us define to be the index of the first search ex•
result.  
                                                              tent that goes past point t on ray a. This means that if the goal 
3 Multi-Robot Search on Rays                                  is located at point t on ray a, then it is found during search ex•
                                                              tent The total search time up through extent is 
The results from the previous section can be directly ap•              (The factor of two results from search extents going 
plied to a formally similar problem involving multiple robots out and back on rays.) However, since the search ends as soon 
searching for a goal. The problem is described as follows.    as the goal is found, the last extent does not go to completion, 
Initially, m robots stand at the intersection of p rays (with and thus we must subtract out This leads us to 
m p). The robots, all moving in a continuous fashion and      the following formal definition for time-competitive ratio. 


SCHEDULING                                                                                                         1215 