                                 Optimal Soft Arc Consistency

                       M.C. Cooper                           S. de Givry  and  T. Schiex
              IRIT, Univ. Toulouse III, France        INRA, Applied Math. & CS Dept., France
                       cooper@irit.fr                    {degivry,tschiex}@toulouse.inra.fr


                    Abstract                          functions of different arities which preserve problem equiva-
                                                      lence, local consistency offers all the services of local con-
    The Valued (VCSP) framework is a generic opti-
    mization framework with a wide range of applica-  sistency in classical CSP. It is speciÔ¨Åcally capable of pro-
                                                      ducing strong incrementally maintained lower bounds which
    tions. Soft arc consistency operations transform
                                                      are crucial for efÔ¨Åcient branch and bound search. It is how-
    a VCSP into an equivalent problem by shifting
    weights between cost functions. The principal aim ever plagued by the absence of uniqueness of the Ô¨Åxpoint
                                                      (so-called arc consistent closure) and by the fact that Ô¨Ånding
    is to produce a good lower bound on the cost of
                                                      a closure which maximizes the lower bound is an NP-hard
    solutions, an essential ingredient of a branch and
                                                              [                    ]
    bound search.                                     problem Cooper and Schiex, 2004 . This has led to the def-
                                                      inition of a large number of variants of arc consistency (di-
    But soft AC is much more complex than tradi-      rectional [Cooper, 2003], existential [Larrosa et al., 2005],
    tional AC: there may be several closures (Ô¨Åxpoints) cyclic [Cooper, 2004]...), each using different strategies to try
    and Ô¨Ånding the closure with a maximum lower       to get closer to an optimal closure.
    bound has been shown to be NP-hard for integer
                                                        In this paper, we show that by relaxing the condition that
    costs [Cooper and Schiex, 2004].
                                                      costs be integers and by allowing simultaneous cost move-
    We introduce a relaxed variant of soft arc consis- ments between cost functions, it is possible to deÔ¨Åne a new
    tency using rational costs. In this case, an optimal class of local consistency such that Ô¨Ånding an optimal closure
    closure can be found in polynomial time. Further- is a polynomial time problem. On a large class of problems,
    more, for Ô¨Ånite rational costs, the associated lower we show that the lower bound produced is always better than
    bound is shown to provide an optimal arc consistent the previous integer arc consistency variants and provides an
    reformulation of the initial problem.             optimal reformulation of the initial problem.
    Preliminary experiments on random and structured    Beyond a better understanding of local consistency in WC-
    problems are reported, showing the strength of the SPs, preliminary experiments of Optimal Soft Arc Consis-
    lower bound produced.                             tency on random and structured WCSPs show that it may also
                                                      be used in practice as a preprocessing algorithm.
1  Introduction
The Valued Constraint Satisfaction Problem [Schiex et al., 2 Preliminaries
1995] is a generic cost function optimization framework with
many applications. A VCSP is deÔ¨Åned by a set of variables Valued CSP extends the CSP framework by associating costs
with Ô¨Ånite domains and a set of local cost functions (soft con- to tuples [Schiex et al., 1995]. In general, costs are speciÔ¨Åed
straints) which associate costs to tuples. The goal is then to by means of a so-called valuation structure deÔ¨Åned as a triple
                                                      S =(E,‚äï,   )       E
Ô¨Ånd an assignment to all variables with a minimum com-             ,where    is the set of costs totally ordered
                                                                                                   
bined cost. Costs from different constraints are combined by . The maximum and a minimum costs are noted and
                                                      ‚ä•             ‚äï
with a domain dependent operator ‚äï. In this paper, we focus , respectively. is a commutative, associative and mono-
                                                                      E                    ‚ä•
on Weighted CSP (WCSP) where costs are natural numbers, tonic operation on used to combine costs. is the identity
                                                                 
combined by addition. This VCSP sub-case has been shown element and is absorbing.
to capture the essential complexity of non-idempotent VCSP Weighted CSPs (WCSP) form a speciÔ¨Åc subclass of valued
in [Cooper, 2005] and has a lot of direct applications in do- CSP that relies on a speciÔ¨Åc valuation structure S(k).
mains such as resource allocation, combinatorial auctions, DeÔ¨Ånition 2.1 S(k) is a triple ({0, 1,...,k}, ‚äï, ‚â•) where,
bioinformatics, probabilistic reasoning, graph theory...
  Following the initial deÔ¨Ånition of arc consistency for non ‚Ä¢ k ‚àà{1,...,‚àû}.
idempotent operators in [Schiex, 2000], local consistency ‚Ä¢‚äïis deÔ¨Åned as a ‚äï b =min{k, a + b}
is now considered as a crucial mechanism for solving WC-
SPs. Based on iterated integer cost movements between cost ‚Ä¢‚â•is the standard order among numbers.

                                                IJCAI-07
                                                   68Observe that in S(k),wehave0=‚ä•  and k = . k may be
either Ô¨Ånite or inÔ¨Ånite.
  AWCSPP     is deÔ¨Åned by P =(X, D, C, k).Thevalu-
ation structure is S(k). X and D are sets of variables and
domains, as in a standard CSP. For a set of variables S ‚äÇ X,
we note (S) the set of tuples over S. C is a set of cost func-
                                                       Figure 1: A simple WCSP and two arc consistent closures.
tions. Each cost function (or soft constraint) cS in C is de-
Ô¨Åned on a set of variables S called its scope. A cost func-
tion cS assigns costs to assignments of the variables in S i.e.: the unary cost function ci to the cost function cS. To guaran-
cS : (S) ‚Üí{0,...,k}. For simplicity, we assume that ev- tee that the problem obtained after each application is valid,
ery constraint has a different scope. For binary and unary one must guarantee that its cost functions remain in the val-
constraints, we use simpliÔ¨Åed notations: a binary soft con- uation structure. To avoid negative costs, one must have
straint between variables i and j is denoted cij . A unary con- ‚àíci(a) ‚â§ Œ± ‚â§ mint‚àà(S),t[{i}]=a{cS(t)}. Similarly, Projec-
straint on variable i is denoted ci. We assume the existence tUnary works on a subproblem deÔ¨Åned just by one variable
of a unary constraint ci for every variable, and a zero-arity i ‚àà X. It moves a cost Œ± from the unary cost function ci to the
              c
constraint, noted ‚àÖ (if no such constraint is deÔ¨Åned, we can nullary cost function c‚àÖ (with ‚àíc‚àÖ ‚â§ Œ± ‚â§ mina‚ààdi {ci(a)}
always deÔ¨Åne dummy ones ci(a)=0, ‚àÄa ‚àà Di and c‚àÖ =0).  in order to get a valid WCSP).
  When a constraint cS assigns cost  = k to a tuple t,it
means that cS forbids t,otherwiset is permitted by cS with
the corresponding cost. The cost of a complete tuple t in a Algorithm 1: Project and UnaryProject for soft arc and
                                                       node consistency enforcing
WCSP  P , noted VP (t), is the sum of all costs:
                                                       Procedure Project(cS,i,a,Œ±)
               VP (t)=      cS(t[S])                       ci(a) ‚Üê ci(a) ‚äï Œ±;
                                                                   t ‚àà (S)        t[{i}]=a
                       cS ‚ààC                               foreach (       such that       ) do
                                                               cS(t) ‚Üê cS(t)  Œ±;
  where t[S] denotes the usual projection of a tuple on the
set of variables S. A complete assignment is feasible if it has Procedure UnaryProject(i, Œ±)
a cost less than k and optimal if there are no complete assign- c‚àÖ ‚Üê c‚àÖ ‚äï Œ±;
ment with a lower cost. The problem is to Ô¨Ånd a complete   foreach (a ‚àà di) do
optimal assignment (NP-hard).                                  ci(a) ‚Üê ci(a)  Œ±;
  We say that two WCSPs P and P  deÔ¨Åned over the same
variables are equivalent if they deÔ¨Åne the same global cost
           V      V 
function, i.e. P and P are identical.                   Avariablei is said to be node consistent [Larrosa, 2002]
                                                      if 1) for all values a ‚àà di, ci(a) ‚äï c‚àÖ = k, 2) there exists a
3  Node and arc consistencies                         value b ‚àà di such that ci(b)=0. A WCSP is node consistent
Local consistency algorithms are characterized by the fact (NC) if every variable is node consistent.
that they reason at a subproblem level and that they preserve Stronger arc level consistencies rely on the notion of sup-
equivalence. This is captured by the following notion: port. For simplicity, we introduce these notions for binary
                                                      WCSP but most have been generalized to arbitrary arities
DeÔ¨Ånition 3.1 For a valued CSP with a set of variables X, (see [Cooper and Schiex, 2004]). A value b ‚àà dj is a sup-
an equivalence preserving transformation (EPT) on W ‚äÜ X port for a value a ‚àà di along cij if cij (a, b)=0.
is an operation which transforms cost functions whose scope Variable i is arc consistent if every value a ‚àà di has a sup-
is included in W to produce an equivalent valued CSP. port in every constraint cij ‚àà C. A WCSP is arc consistent
                                                      (AC) if every variable is arc and node consistent.
  In WCSP, basic EPT move costs between cost functions in            (i, a)
order to preserve the equivalence of the problem. To move When a value    has no support on a constraint, one
costs, it is necessary to be able to subtract costs from its ori- can create one using the Project operation. This is exempli-
gin. This is done using the  operation deÔ¨Åned as:    Ô¨Åed in Figure 1a. This WCSP has two variables with 2 val-
                                                     ues a and b. Vertices, representing values, can be weighted
                      a ‚àí b  : a = k                 by unary costs. An edge connecting two values represents a
            a  b =
                          k  : a = k                  cost of 1. If two values are not connected, it means that the
                                                      corresponding cost is 0. Notice that value (1,b) has no sup-
  Although we restrict our presentation to WCSPs for the port on variable 2. We can apply Project(c12, 1,b,1). This
sake of simplicity, we remind the reader that such a pseudo- creates a unary cost of 1 for (1,b) which is now AC. Apply-
difference operator exists in a large class of VCSPs (fair ing UnaryProject(1, 1) on the resulting WCSP (Figure 1b)
VCSP [Cooper and Schiex, 2004]).                      makes the problem AC and increases c‚àÖ by 1.
  Algorithm 1 gives two elementary EPT. Project works in But a different sequencing may lead to a different result. If
the scope of a single constraint cS. It moves an amount of we Ô¨Årst note that value (2,a) has no support on c12 and apply
cost Œ± from cS to a unary cost function ci,i ‚àà S,fora Project(c12, 2,a,1), we get the problem in Figure 1c. It is
value a ‚àà di.IfthecostŒ±  is negative, cost moves from now AC, but the lower bound c‚àÖ is 0.

                                                IJCAI-07
                                                   69  Given an initial WCSP P , any WCSP obtained from P  AC  [Mohr and Masini, 1988]. Then only Ô¨Ånite costs can be
by iterated applications of Project and UnaryProject with further propagated by Project and UnaryProject.Wethen
a positive integer Œ± until a Ô¨Åxpoint is reached is called an want to determine a set of SAC operations which, when ap-
arc consistent closure of P .AnACclosureofaWCSPP is   plied simultaneously, maximize the increase in c‚àÖ. For each
                                                                                                       S
optimal if it has the maximum lower bound c‚àÖ among all AC cS ‚àà C with |S| > 1, and for every variable i ‚àà S,letpi,a
closures of P . [Cooper and Schiex, 2004] showed that Ô¨Ånding be the amount of cost projected from cS to ci(a) (remember
an optimal AC closure for a WCSP is an NP-hard problem. that costs moved from ci(a) to cS are counted as negative in
  Alternative deÔ¨Ånitions of AC have therefore been pro- Project). Let ui ‚â• 0 be the amount of cost projected by
                                          b
posed. They exploit the notion of full support. is a full UnaryProject from ci to c‚àÖ. Thus the problem is to maxi-
          a   c    c (a, b) ‚äï c (b)=0
support for on ij if ij       j      . Replacing the  mize   i ui while keeping the WCSP valid (no negative cost
notion of support by the stronger notion of full supports in appears) i.e.:
AC is attractive but the corresponding property cannot be en-                          
                                                                                               S
forced [Schiex, 2000]. Restricted versions must be used.  ‚àÄi ‚àà X, ‚àÄa ‚àà di,ci(a) ‚àí ui +       pi,a ‚â• 0
  Given a variable ordering <,variablei is directional arc                         (c ‚ààC),(i‚ààS)
                                                                                    S  
consistent (DAC) if every value a ‚àà di has a full support
                                                      ‚àÄc  ‚àà C, |S| > 1, ‚àÄt ‚àà (S) c (t) ‚àí  pS    ‚â• 0
in every constraint cij ‚àà C such that j>i.AWCSP         S                        S          i,t[{i}]
is DAC if every variable is DAC and node consistent. It is                             i‚ààS
full directional arc consistent (FDAC) if it is AC and DAC. All inequalities for which ci(a)= = ‚àû or cS(t)= can
Several heuristics for ordering variables in FDAC have been be ignored since they are necessarily satisÔ¨Åed. The remain-
tried [Heras and Larrosa, 2006a].                     ing inequalities deÔ¨Åne a linear programming problem over Q
         i
  Variable is existential arc consistent [Larrosa et al., 2005] with O(ed + n) variables which can be solved in polynomial
            a ‚àà d          c (a)=0       a
if there exists  i such that i       and  has a full  time [Karmarkar, 1984].
support on every constraint cij . A WCSP is existential arc
consistent (EAC) if every variable is EAC and node consis- A local version of the above theorem, limited to subprob-
tent. It is existential directional arc consistent (EDAC) if it lems of 3 variables, is actually the basis of the algorithm en-
is EAC, and FDAC. All these deÔ¨Ånitions can be seen as well forcing 3-cyclic consistency [Cooper, 2004]. In our case, a
deÔ¨Åned polynomial time heuristics trying to get closer to the problem will be called Optimal Soft Arc Consistent (OSAC)
optimal closure, but without any guarantee.
                                                      when c‚àÖ cannot be improved as above. Obviously, in SQ(‚àû),
                                                      OSAC is stronger than AC, DAC, FDAC or EDAC.
4  Optimal arc consistency                              Note that if k<‚àû, things get more involved since an in-
From now on, we relax the deÔ¨Ånition of WCSP by allowing crease in c‚àÖ can, through node consistency, lead to the dele-
rational costs. This mean we use the new valuation structure tion of values, thus requiring a new optimization. Because
SQ(k)=([0,k], ‚äï, ‚â•) where [0,k] denotes the set of rational value deletion cannot occur more than nd times, this is still
numbers (elements of Q) between (and including) 0 and k. polynomial time but the proof of optimality of the Ô¨Ånal clo-
DeÔ¨Ånition 4.1 GivenaWCSPP  , a Soft Arc Consistent (SAC) sure is an open question.
Transformation is a set of soft arc consistency operations                        To better understand how
Project and UnaryProject which, when applied simultane-                         OSAC works, consider the 4-
ously, transform P into a valid WCSP.                                           variable WCSP on the left.
                                                                                All unary costs are equal to
  Note that in this deÔ¨Ånition there is no precondition on the                   0. All edges represent a unit
costs moved individually by each EPT application. We just                       cost, omitted for clarity. c‚àÖ
want the Ô¨Ånal equivalent WCSP to be valid (with positive ra-                    is assumed to be 0. None of
tional costs): this also guarantees that c‚àÖ is a lower bound of                 the basic EPTs can transform
the optimal cost. Previously, [Affane and Bennaceur, 1998]                      the problem into a valid one.
proposed to split integer costs by propagating a fraction wij                   However, we may simultane-
of the binary constraint cij towards variable i and the remain-                 ously perform the following
ing fraction 1 ‚àí wij towards j (where 0 ‚â§ wij ‚â§ 1), sug-                        operations:
                                           1
gested determining optimal wij but just used wij = . [Ben-
                                           2            1. Project(c23, 2,c,‚àí1): we move (a virtual) cost of 1
                     ]
naceur and Osamni, 2003 further suggested to use different from value (2,c) to 3 pairs inside c23.
weights wiajb for every pair of values (a, b) ‚àà di √ó dj .It
                                                                 c  , 3,a,1         c , 3,b,1
turns out that using one weight for each triple (i, j, a) where 2. Project( 23 ), Project( 23 ): this moves
                                                                          1   (3,a)   (3,b)
a ‚àà di, allows us to Ô¨Ånd optimal weights in polynomial time. two unary costs of to and     .
                                                                 c34, 3,a,‚àí1         c31, 3,b,‚àí1
Theorem 4.2 If the valuation structure SQ(‚àû) is used, then 3. Project(      ), Project(        ): these two
                                                                                   c      c
it is possible to Ô¨Ånd in polynomial time a SAC transformation unary costs are moved inside 34 and 31 respectively.
of P which maximizes the lower bound c‚àÖ provided the arity 4. Project(c34, 4,c,1): this moves a unary cost of 1 to
of the constraints in P is bounded.                       (4,c).
Proof:  Assume Ô¨Årst as in [Cooper, 2003] that all inÔ¨Å-  5. Project(c31, 1,a,1), Project(c31, 1,c,1): this moves
nite costs have been propagated using standard generalized two unary costs of 1 to (1,c) and (1,a).

                                                IJCAI-07
                                                   70 6. Project(c12, 1,a,‚àí1), Project(c12, 2,c,1): we reim- bound produced is then compared to the lower bound pro-
    burse our initial loan on value (c, 2).           duced by EDAC.
           c  , 1,c,‚àí1        c  , 4,a,1                The Ô¨Årst set of instances processed are random Max-CSP
 7. Project( 14      ), Project( 14    ): we send a                                   1
    unary cost to value (4,a).                        created by the random vcsp generator using the usual four
                                                      parameters model. The aim here is to Ô¨Ånd an assignment that
                                                      minimizes the number of violated constraints. Four differ-
                                                      ent categories of problems with domain size 10 were gener-
                                                      ated following the same protocol as in [Larrosa et al., 2005]:
                                                      sparse loose (SL, 40 var.), sparse tight (ST, 25 var.), dense
                                                      loose (DL, 30 var.) and dense tight (DT, 25 var.) (see the
                                                      Benchmarks section of [de Givry et al., 2006b]).
                                                                         SL     ST    DL     DT
                                                              Optimum    2.84  19.68  2.22  29.62
                                                              EDAC lb.    0    4.26    0     9.96
                                                              OSAC lb.    0    12.30   0    19.80
                                                        Samples have 50 instances. The table above shows re-
  Finally, the application of UnaryProject(4, 1) yields the spectively the average optimum value, the average values of
problem above with a lower bound c‚àÖ =1. This set of EPT the EDAC lower bound and the average value of the OSAC
corresponds to a solution of the previous linear programming
              23    34     31    12    14             lower bound. On loose problems, OSAC and EDAC leave the
problem where p2c = p3a = p3b = p1a = p1c = ‚àí1 and    lower bound unchanged. This shows that higher level local
 23    23    34   31    31    12    14
p3a = p3b = p4c = p1a = p1c = p2c = p4a = u4 =1(all   consistencies are required here. However for tight problems,
other variables being equal to 0).                    OSAC is extremely powerful, providing lower bounds which
                                                      are sometime three times better than EDAC.
5  Properties                                           The second  set of benchmarks is deÔ¨Åned  by  open
                       S  (‚àû)                         instances of  the  Radio   Link  Frequency  Assign-
Theorem 4.2 shows that on Q   , OSAC always provides  ment Problem  of the CELAR    [Cabon et al., 1999].2
an optimal lower bound using only a set of arc level preserv- These problems have been extensively studied (see
ing operations. Actually, one can prove that for a large class http://www.zib.de/fap/problems/CALMA) but the gap
of WCSP the Ô¨Ånal problem obtained is an optimal reformula- between the best upper bound (computed by local search
tion of the problem using the initial set of scopes.  methods) and the best lower bound (computed by ex-
DeÔ¨Ånition 5.1 AWCSPP   is in-scope c‚àÖ-irreducible if there ponential time algorithms) is not closed. The problem
is no equivalent WCSP Q with the same set of constraint considered are the scen0{7,8}reduc.wcsp       and
                        Q    P         P  Q                   {   }
scopes as P and such that c‚àÖ >c‚àÖ (where c‚àÖ, c‚àÖ are the graph1  1,3 reducmore.wcsp     which  have  already
nullary constraints in P , Q).                        been through different strong preprocessing (see the Bench-
                                                      marks section in [de Givry et al., 2006b]).
Theorem 5.2 Let P be a WCSP over SQ(‚àû) using only Ô¨Å-
nite costs. If no SAC transformation applied to P produces a
      Q     cQ >cP      P           c                                   scen07   scen08  graph11  graph13
WCSP    with ‚àÖ    ‚àÖ,then   is in-scope ‚àÖ-irreducible.  Total # of values 4824    14194    5747     13153
Proof:   This is a direct consequence of Lemma 5.2     Best known ub    343592    262     3080     10110
in [Cooper, 2004].                                     Best known lb    300000    216     3016      9925
                                                       EDAC lb          10000      6      2710      8722
  Thus, for Ô¨Ånite rational costs, OSAC can be used to estab- OSAC lb    31453.1    48     2957     9797.5
lish in-scope c‚àÖ-irreducibility. This naturally does not work Cpu-time  3530‚Äù    6718‚Äù     492‚Äù    6254‚Äù
when inÔ¨Ånite costs (hard constraints) exist. The 3-clique 2- As the table above shows, OSAC offers substantial im-
coloring problem is inconsistent and is therefore equivalent provements over EDAC, especially on the graph11 and
to the same problem with just c‚àÖ set to  but no SAC trans- graph13 instances. For these instances, the optimality gap
                                                      UB‚àíOSAC
formation can be applied to this WCSP.                   UB     is reduced to 4% and 3% respectively. The poly-
  Naturally, higher-order consistencies which may change nomial time lower bounds obtained by OSAC are actually
scopes could provide possibly stronger lower bounds: soft close to the best known (exponential time) lower bounds. The
3-consistency [Cooper, 2005] or soft path inverse consis- cpu-time show the cpu-time for computing the OSAC lower
tency [Heras and Larrosa, 2006b] applied to the previous 2- bound.
coloring problem would detect infeasibility.            To actually assess the practical interest of OSAC for pre-
                                                      processing, we tried to solve problems where OSAC was ef-
6  Experiments                                        fective: tight problems. The difÔ¨Åculty here lies in the fact
We applied OSAC during preprocessing. The linear pro-    1www.inra.fr/mia/T/VCSP
gramming problem deÔ¨Åned by OSAC was solved using ILOG    2We would like to thank the french Centre Electronique de
CPLEX version 9.1.3 (using the barrier algorithm). The lower l‚ÄôArmement for making these instances available.

                                                IJCAI-07
                                                   71that CPLEX is a Ô¨Çoating point solver while the open source strength of OSAC used as a preprocessing technique (remem-
WCSP solver used (toolbar, section Algorithms in [de Givry ber that EDAC is maintained during search).
et al., 2006b]) deals with integer costs. To address this is- The strength of OSAC compared to local consistencies us-
sue, we use ‚ÄúÔ¨Åxed point‚Äù costs: for all WCSP considered, we ing full supports such as DAC is that is does not require an
Ô¨Årst multiply all costs by a large integer constant Œª =1, 000, initial variable ordering. Indeed, DAC directly solves tree-
and then solve the linear programming problem deÔ¨Åned by structured problems but only if the variable ordering used for
OSAC using integer variables (instead of Ô¨Çoating point). The DAC enforcing is a topological ordering of the tree. To eval-
Ô¨Årst integer solution found is used. The resulting problem uate to what extent OSAC can overcome these limitations,
has integer costs and can be tackled by toolbar3. This means we used random problems structured as binary clique trees as
that we shift from a polynomial problem to an NP-hard one. in [de Givry et al., 2006a]. Each clique contains 6 variables
In practice, we found that the problems obtained have a very with domain size 5, each sharing 2 variables with its parent
good linear continuous relaxation and are not too expensive clique. The overall tree height is 4 leading to a total number
to solve as integer problems. Using a polytime rational LP of 62 variables, with a graph density of 11%.
solver would allow time complexity to remain polynomial.


                                                        The Ô¨Ågure above uses a logarithmic scale for cpu-time for
                                                      different constraint tightnesses (below 40%, problems are sat-
                                                      isÔ¨Åable). On these tree-like problems, two DAC ordering
                                                      were used. One is compatible with a topological ordering
                                                      of the binary tree (and should give good lower bounds), the
                                                      inverse order can be considered as pathological. The cpu-
                                                      times for MEDAC alone (default toolbar parameters and up-
                                                      per bound) and OSAC+MEDAC (as previously) are shown in
                                                      each case. Clearly, OSAC leads to drastic (up to 20 fold) im-
                                                      provements when a bad DAC ordering is used. Being used
                                                      just during preprocessing, it does not totally compensate for
  The Figure above reports cpu-time (up) and size of the tree the bad ordering. But, even when a good DAC ordering is
search (down) for dense tight problems of increasing size. used, OSAC still allows impressive (up to 4 fold) speedups,
The time limit was set to 1800‚Äù. Four cpu-times are reported: especially on tight problems.
(1) OSAC LP: time taken by CPLEX to solve the Ô¨Årst lin- Finally, we also tried to solve the challenging open CELAR
ear relaxation (2) OSAC MIP: time taken to get the Ô¨Årst in- instances after OSAC preprocessing. Despite the strength of
teger solution, (3) MEDAC: time taken to solve the original OSAC, all problems remained unsolvable. Simultaneously
problem by maintaining EDAC [Larrosa et al., 2005] in tool- taking into account the strong structure of the problems as
bar with default parameters and a good initial upper bound, in [de Givry et al., 2006a] is an attractive direction here.
(4) OSAC+MEDAC is the sum of OSAC MIP with the time
needed by toolbar to solve the OSAC problem (with the same
default parameters and upper bound).                  7   Related work
  Clearly, for small problems (with less than 29 variables), As a reviewer pointed out, the LP program optimized for
OSAC is more expensive than the resolution itself. But as the OSAC is the dual of the relaxation of the 01-linear formu-
problem size increases, OSAC becomes effective and for 33 lation proposed in [Koster, 1999]. The LP formulation of
variables, it divides the overall cpu-time by roughly 2. The OSAC was also found in the image processing community
number of nodes explored by toolbar in both cases shows the [Schlesinger, 1976; Werner, 2005].
                                                        If all constraints are binary over boolean domains, WCSP
  3The code of toolbar has been modiÔ¨Åed accordingly: if a solution reduces to weighted MAX-2SAT. A direct encoding of
of cost 2Œª is known for example and if the current lb. is 1.1Œª then MAX-2SAT to quadratic pseudo-boolean function optimiza-
backtrack occurs since all global costs in the original problem are tion [Boros and Hammer, 2002] exists: using 0 and 1 to repre-
integer and the Ô¨Årst integer above 1.1 is 2, the upper bound. sent respectively true and false, √ó for disjunction, (1 ‚àí x) for

                                                IJCAI-07
                                                   72