                                  Parameterized      Compilability

                                              Hubie  Chen
                                      Departament   de Tecnologia
                                       Universitat Pompeu   Fabra
                                            Barcelona, Spain
                                       hubie.chen@upf.edu

                    Abstract                          [Cadoli et al., 1996; 1997; 1999; Gogic et al., 1995], were
                                                      based on ad hoc proofs that did not explicitly use a uniﬁed
    Compilability is a measure of how effectively com- proof technique.
    pilation (or preprocessing) can be applied to knowl- In [Cadoli et al., 2002], a robust theory of compilability
    edge bases speciﬁed in a particular knowledge rep- was developed that made it possible to systematically orga-
    resentation formalism; the aim of compilation is  nize knowledge representation formalisms according to their
    to allow for efﬁcient, on-line query processing. A compilability, much in the way that classical complexity the-
    theory of compilability has been established for or- ory made it possible to systematically organize languages
    ganizing knowledge representation formalisms ac-  according to their (in)tractability. In particular, the theory
    cording to a scheme of “compilability classes”,   of compilability provides a way to deﬁne, for every clas-
    and bears strong analogies to the classical theory sical complexity class C, an analogous compilability class
    of complexity, which permits the organization of  comp-C;  the theory also provides a notion of reduction for
    computational problems according to complexity    use with the compilability classes comp-C. The compilabil-
    classes. We develop a novel theory of compilabil- ity class comp-P, which is the analog of P (those languages
    ity, called parameterized compilability, which in- decidable in polynomial time), contains those formalisms that
    corporates the notion of parameterization as used in are compilable to a second formalism in which query pro-
    parameterized complexity and permits for reﬁned   cessing can be performed in polynomial time. In saying that
    analysis of compilability.                        a formalism is compilable to a second formalism, we mean
                                                      (roughly) that for every knowledge base x of the ﬁrst formal-
1  Introduction                                       ism, there is a knowledge base f(x) in the second formal-
                                                      ism having the same answers to queries as x and such that
Compilability. Many computational reasoning problems  the size of f(x) is always polynomial in the size of x. This
involve deciding whether or not a query is entailed by a “polynomial size” requirement models the intuition that com-
knowledge base (or database). Such reasoning problems are pilation is only useful if it does not greatly increase the size
often computationally intractable. A methodology for cop- of a knowledge base.
ing with this intractability is compilation (also called prepro- Demonstration that a formalism is in comp-P is a pos-
cessing), which involves translating a knowledge base into a itive compilation result, analogous to demonstration that a
form that allows for more efﬁcient query processing. Compi- language is in P, a positive tractability result. Likewise,
lation is appropriate for knowledge bases that remain stable demonstration that a formalism is comp-NP-hard is a neg-
over time and will be queried numerous times, even if the ative compilation result and implies that the formalism is
compilation itself cannot be performed efﬁciently, since the not in comp-P (under a complexity-theoretic assumption),
cost of the compilation will be amortized by the speed-up in just as demonstration that a language is NP-hard implies that
query processing. Although recent years have seen many in- the language is not in P (under the standard assumption that
teresting results on compilation, the basic idea of simplifying P 6= NP).
a sequence of computations by preprocessing a set of useful
                                                        First in [Cadoli et al., 2002; 2000] and later in other papers
values is as old as mathematics, as discussed in [Cadoli et al.,
                                                      including [Liberatore, 1997; Liberatore and Schaerf, 2000;
2002].
                                                      Liberatore, 2000; 2001], the theory of compilability pre-
                                                      sented in [Cadoli et al., 2002] was applied successfully to
A systematic theory. A number of results in the nineties classify knowledge representation formalisms that have ap-
demonstrated non-compilability results, which show, for in- peared in the artiﬁcial intelligence literature. In particular, a
stance, that the knowledge bases of a particular knowledge multitude of formalisms, including propositional logic, cir-
representation formalism are not compilable to those of an- cumscription, and default logic, have been demonstrated to
other formalism in which query processing can be performed be contained in comp-P or complete for the analog comp-C
in polynomial time. The initial results of this type, including of a standard complexity class C. The downside of theseclassiﬁcation results is that many of them are negative, show- Viewed classically, these two example languages are both
ing that a formalism is complete for the compilability ver- NP-complete, and hence demonstrate that parameterized
sion of an intractable complexity class, such as comp-NP or complexity is somewhat orthogonal to classical complexity;
comp-co-NP.                                           moreover, the example of VERTEX COVER indicates that pa-
                                                      rameterized complexity can provide tractability results where
                                                      classical complexity does not. Indeed, the allowance of a
Parameterized complexity. The abundance  of negative  non-polynomial dependence on the parameter of an input in-
compilability results mirrors a state of affairs in complexity stance in ﬁxed-parameter tractability permits the use of al-
theory: although many problems of interest can be classiﬁed gorithmic ideas not utilized in proving standard polynomial-
according to the developed scheme of complexity classes (P, time tractability results, and the ﬁeld of parameterized com-
NP, co-NP, etc.), there is an abundance of negative results plexity has developed a rich and mathematically deep suite of
that show completeness or hardness for classes believed to algorithmic techniques.
be strictly larger than P. Because such generally intractable
problems do need to be dealt with in practice, a number of Parameterized compilability. The contribution of this pa-
theoretical frameworks have been developed to provide a ﬁner per is parameterized compilability, a new theory of compil-
analysis of hard problems than that offered by standard com- ability incorporating the notion of parameterization as used
plexity theory. Examples of such frameworks include the the- in parameterized complexity. Our theory provides a novel
ory of approximation algorithms and average-case analysis. set of concepts for proving compilability results, allowing
A relatively recent alternative framework is parameterized the use of the sophisticated toolkit that has been developed
         [                        ]
complexity Downey and Fellows, 1999b .                for proving ﬁxed-parameter tractability and intractability re-
  Parameterized complexity is a theory that, as with classical sults, and provides an avenue for reﬁning the many negative
complexity theory and compilability theory, provides classes non-compilability results that have been proved using the es-
and a notion of reduction for categorizing objects. In the case tablished theory of compilability. As articulated in [Downey
of parameterized complexity, the objects categorized are pa- et al., 1999], one beneﬁt of using a parameterized notion of
rameterized languages: languages with instances consisting computational tractability is that it becomes possible to en-
of two parts, a main part and a parameter. Many languages gage in an extended dialogue with a single problem, by the
that have been classically studied can be viewed naturally as investigation of a variety of parameters. We thus provide a
parameterized languages. For example, each instance of the theoretical framework in which we anticipate that the formu-
VERTEX  COVER  problem can be viewed as consisting of a lation and exploration of interesting parameters in the context
graph G as the main part, and a natural number k as the pa- of parameterized compilability will lead to reﬁned analysis of
rameter; the question is to decide whether or not the graph compilability results.
G has a vertex cover of size at most k. Similarly, the INDE- The results in this paper are as follows. For every parame-
PENDENT  SET problem may be viewed as a parameterized terized complexity class C, we deﬁne a compilability variant
language: an instance is again a graph G paired with a natu- par-comp-C. We also deﬁne a notion of reduction for use
ral number k, and the question is to decide whether or not the with the par-comp-C classes, and demonstrate its robustness
graph G has an independent set of size at least k.    – in particular, that it is transitive and compatible (in a formal
  The parameterized ﬂavor of tractability is called ﬁxed- sense) with the classes par-comp-C. We also develop a gen-
parameter tractability; formally, a parameterized language is eral method for demonstrating hardness of a formalism for
ﬁxed-parameter tractable (or, in the class FPT) if there exists a class par-comp-C, and study the structure of the classes
a constant c such that for every k, instances with main part of par-comp-C, relating this structure directly to the structure
                                        c
size n and parameter k can be solved in time O(n ). As an ex- of non-uniform versions of parameterized complexity classes
                                          k 2
ample, VERTEX COVER can be solved in time O(r k +kn), C.
where r is a constant, k is the parameter, and n is the size
of the main part; consequently, for any ﬁxed k, instances 2 Preliminaries
of VERTEX  COVER  with main part of size n and parame-
ter k can be solved in time O(n), and so VERTEX COVER While we have attempted to make this paper as self-contained
is considered to be ﬁxed-parameter tractable. Because the as possible, some familiarity with the basic notions of com-
running time of ﬁxed-parameter tractable languages exhibits plexity theory (including non-uniform complexity classes),
a restricted form of dependence on the parameter, such lan- parameterized complexity, and compilability theory will be
guages are often solvable in practice when the parameter falls helpful; we name [Balcazar´ et al., 1995], [Downey and Fel-
into a limited range. (In fact, one can see from the given time lows, 1999b], and [Cadoli et al., 2002] as references for
bound for VERTEX COVER that this problem can be solved in these topics, respectively. We also recommend the surveys
polynomial time when the parameter k is O(log n).) On the [Downey and Fellows, 1999a; Downey et al., 1999] on pa-
other hand, INDEPENDENT SET is believed to require time rameterized complexity.
where the main part exhibits an exponential dependence on
the parameter – that is, a time of form similar to Ω(nk). In- 2.1 Deﬁnitions and Notation
deed, INDEPENDENT  SET is complete for a parameterized Strings. We assume Σ to be a ﬁxed ﬁnite alphabet that is
complexity class believed to properly contain FPT, and ac- used to form strings. The length of a string x is denoted
cordingly is believed to be outside of FPT.           by |x|. We will at times assume that pairs of strings (thatis, elements of Σ∗ × Σ∗) are represented as strings (that is, of C, denoted by C/ppoly, contains those parameterized lan-
elements of Σ∗) via a pairing function h·, ·i. We make stan- guages A such that there exists a parameterized polynomial-
dard assumptions about this pairing function, namely, that the size function f : 1∗ × Σ∗ → Σ∗ and a language B in C
length of hx, yi is linear in |x| + |y|; hx, yi can be computed such that for all (x, k) ∈ Σ∗ × Σ∗, (x, k) ∈ A if and only if
in time polynomial in |x| + |y|; there are polynomial-time (hf(1|x|, k), xi, k) ∈ B.
                                      ∗      ∗
computable projection functions π1, π2 : Σ → Σ such     When  L is a parameterized language, deﬁne L to be the
that π1(hx, yi) = x and π2(hx, yi) = y; and h·, ·i is length- set {(, y, k) : (y, k) ∈ L}.
monotone, that is, if |y| ≤ |z| then |hx, yi| ≤ |hx, zi| and
|hy, xi| ≤ |hz, xi|. We also assume that there is a tripling Knowledge Representation Formalisms. A knowledge
function , ,  for representing triples of strings as single
       h· · ·i                                        representation formalism (KRF) is a subset of Σ∗ × Σ∗. A
strings, for which similar assumptions hold.          parameterized knowledge representation formalism (PKRF)
                                                      is a subset of Σ∗ × Σ∗ × Σ∗.
Functions. As usual, we consider a function p : N → N
to be a polynomial if there exists a constant c ∈ N such that Conventions. We view a ternary function f : Σ∗ × Σ∗ ×
          c                      ∗
p(n) is O(n ). A function p : N × Σ → N is a param-   Σ∗ →  Σ∗ as a binary function g : Σ∗ × Σ∗ → Σ∗ by pair-
eterized polynomial if there exists a constant c ∈ N and a ing together the ﬁrst two arguments, that is, g(hx, yi, z) =
             ∗                                   ∗
function h : Σ →  N such that for all (n, k) ∈ N × Σ , f(x, y, z). For example, a ternary function f : Σ∗ × Σ∗ ×
                   c                       ∗
p(n, k) ≤ h(k)(n + 1) . In other words, p : N × Σ → N is Σ∗ → Σ∗ is considered to be parameterized polynomial-size
a parameterized polynomial if there exists a constant c ∈ N if there exists a parameterized polynomial p : N × Σ∗ → N
                     ∗
such that for each k ∈ Σ , the function pk : N → N deﬁned such that for all (x, y, k) ∈ Σ∗ × Σ∗ × Σ∗, |f(x, y, k)| ≤
                      c
by pk(n) = p(n, k) is O(n ).                          p(|hx, yi|, k). Similarly, a PKRF F is viewed as a parameter-
  A function f : Σ∗ → Σ∗ is polynomial-size if there ex- ized language by pairing together the ﬁrst two strings of each
ists a polynomial p : N → N such that for all x ∈ Σ∗, triple, and so is considered to belong to a parameterized com-
                                      ∗    ∗     ∗
|f(x)| ≤ p(|x|). Similarly, a function f : Σ × Σ → Σ  plexity class C if the language L = {(hx, yi, k) : (x, y, k) ∈
is parameterized polynomial-size if there exists a parame- F } belongs to C.
                            ∗
terized polynomial p : N × Σ  →  N  such that for all   For readability, we at times use a natural number m ∈ N in
         ∗    ∗
(x, k) ∈ Σ × Σ , |f(x, k)| ≤ p(|x|, k).               place of its unary representation 1m.
  A function g : Σ∗ → Σ∗ is polynomial-time computable
if there exist a polynomial p : N → N and a Turing machine 2.2 Compilability
M  such that for all x ∈ Σ∗, the Turing machine M, on input In this subsection, we review the theory of compilability;
x, produces output g(x) in time less than p(|x|). Similarly, a the deﬁnitions and theorems of this subsection are all from
function g : Σ∗×Σ∗ → Σ∗ is parameterized polynomial-time [Cadoli et al., 2002], on which our presentation is based.
computable if there exist a parameterized polynomial p : N × Throughout this subsection, the following two assumptions
Σ∗ →  N and a Turing machine M such that for all (x, k) ∈ concerning complexity classes and languages are in effect,
Σ∗ × Σ∗, the Turing machine M, on input hx, ki, produces just as in [Cadoli et al., 2002].
output g(x, k) in time less than p(|x|, k).
                                                      Assumption 1 Every complexity class C is compatible with
  A function h : Σ∗ → Σ∗ is recursively computable if there
                                                      and has complete problems under the polynomial-time many-
exists a Turing machine M such that for all x ∈ Σ∗, the
                                                      one reduction ≤p .
Turing machine M, on input x, produces output h(x).                 m
                                                      Assumption 2 In languages, sufﬁxed blanks are considered
                                                      to be irrelevant, that is, a string x is considered to be in a
Languages and Complexity Classes. A language is a sub- language A if x is in A.
set of Σ∗, that is, a set of strings. A parameterized language
is a subset of Σ∗ × Σ∗, that is, a set of pairs of strings. A For a KRF F , we will refer to each x ∈ π1(F ) as a knowl-
(parameterized) complexity class is a set of (parameterized) edge base; a knowledge base x is considered to represent the
                                                                       ∗
languages. When C is a (parameterized) complexity class and knowledge {y ∈ Σ : (x, y) ∈ F }. Roughly speaking, a
≤ is a reduction, we say that C is compatible with ≤ if for KRF is considered to be compilable to a complexity class C
all (parameterized) languages A and B, A ≤ B and B ∈ C if following a preprocessing of each knowledge base x, pos-
imply that A ∈ C. Also, when C is a (parameterized) com- ing a query y to the knowledge base x – that is, deciding if
plexity class and ≤ is a reduction, we say that B is hard for C (x, y) ∈ F – can be performed in C. The formal deﬁnition of
(alternatively, is C-hard) under ≤ reductions if for all A ∈ C, those KRFs compilable to a complexity class C includes two
A ≤ B; and, we say that B is complete for C (alternatively, is ingredients. The ﬁrst is a preprocessing function f; because
C-complete) under ≤ reductions if B ∈ C and B is C-hard. preprocessing of a knowledge base is not useful if it greatly
  When C is a complexity class, the non-uniform version (or increases the size of the knowledge base, f is required to be of
                                                                                               0
“advice” version) of C, denoted by C/poly, contains those polynomial size. The second is a “target” KRF F , mandated
languages A such that there exists a polynomial-size func- to be inside the class C, to which the KRF F is translated via
tion f : 1∗ → Σ∗ and a language B in C such that for all the function f.
x ∈ Σ∗, x ∈ A  if and only if hf(1|x|), xi ∈ B. When C Deﬁnition 3 (comp-C) Let C be a complexity class. A KRF
is a parameterized complexity class, the non-uniform version F belongs to comp-C if there exist  • a binary polynomial-size function f : Σ∗ × 1∗ → Σ∗, that is, C is properly contained in C0 if and only if C/poly is
    and                                               properly contained in C0/poly.2
  • a KRF F 0 in C
                                                      2.3  Parameterized  Complexity
such that for all pairs (x, y) ∈ Σ∗ × Σ∗,
                                                      Parameterized complexity is a theory for the classiﬁcation
       (x, y) ∈ F if and only if (f(x, |y|), y) ∈ F 0. of parameterized languages – languages whose constituents
  One can obtain a compilability class comp-C from any have two components. In classical complexity theory, the
complexity class C. Hence, the comp-C classes offer a rich base complexity class modeling feasible computation is P,
scheme by which one can classify KRFs, just as conventional which is deﬁned using the notion of polynomial-time; in pa-
complexity classes offer a rich scheme by which one can clas- rameterized complexity theory the base complexity class is
sify computational problems. Upon a ﬁrst reading of Deﬁ- FPT (“ﬁxed-parameter tractable”), which is deﬁnable using
nition 3, it may be conceptually easiest for one to take the the notion of parameterized polynomial-time.
complexity class C to be equal to P (polynomial-time). In         FPT                         L
                           0                          Deﬁnition 7 (   ) A parameterized language belongs to
this case, the requirement that F is in C means that queries                        FPT
               0                                      the parameterized complexity class if there exists a pa-
(x, y) posed to F can be processed efﬁciently, so f trans- rameterized polynomial-time computable function g : Σ∗ ×
lates each F -knowledge base x – which is not necessarily in Σ∗ → {0, 1} such that for all pairs (x, k) ∈ Σ∗ × Σ∗,
a form that allows for efﬁcient resolution of queries (x, y)
– into a F 0-knowledge base f(x) – which is in a form that      (x, k) ∈ L if and only if g(x, k) = 1.
                                       1
allows for efﬁcient resolution of queries (x, y).       Roughly speaking, a parameterized language L is in the
  The following notion of reduction, associated with the class FPT if there exists a constant c ∈ N such that each
comp-C  classes, allows one to compare the compilability of      def
                                                      “k-slice” L    x   x, k  L  of L is computable in poly-
different KRFs.                                                 k = {  : (  ) ∈  }
                                                      nomial time via a polynomial of degree c. The degree of the
Deﬁnition 4 (comp reducibility) A KRF F is comp reducible polynomials bounding the time for Lk must be a “universal”
          0                    0
to a KRF F (denoted by F ≤comp F ) if there exist     constant c and cannot depend on k; on the other hand, the
                                        ∗   ∗    ∗    coefﬁcients of these polynomials may have arbitrary depen-
  • binary polynomial-size functions f1, f2 : Σ × 1 → Σ
    and                                               dence on k.
                                               ∗        The following notion of reducibility may be used to com-
  • a binary polynomial-time computable function g : Σ × pare the complexity of parameterized languages.
    Σ∗ →  Σ∗
                                                      Deﬁnition 8 (parameterized reducibility) A parameterized
such that for all pairs (x, y) ∈ Σ∗ × Σ∗,
                                                      language L is parameterized reducible to a parameterized
                                                0
 (x, y) ∈ F if and only if (f1(x, |y|), g(f2(x, |y|), y)) ∈ F . language L0 (denoted by L ≤par L0) if there exist
Theorem 5 For every complexity class C, the comp reduc- • a parameterized polynomial-time computable function
tion is transitive and is compatible with the class comp-C. f : Σ∗ × Σ∗ → Σ∗, and
  The structure of the compilability classes comp-C can • a recursively computable function h : Σ∗ → Σ∗
be directly related to the structure of the complexity classes                    ∗   ∗
C/poly.                                               such that for all pairs (x, k) ∈ Σ × Σ ,
                                                                                                 0
Theorem 6 Let C and C0 be complexity classes. The con-      (x, k) ∈ L if and only if (f(x, k), h(k)) ∈ L .
tainment comp-C ⊆ comp-C0  holds if and only if the con- We now deﬁne two parameterized complexity classes. In
tainment C/poly ⊆ C0/poly holds.                      contrast to the class FPT, each of these two classes is deﬁned
  When  C  and C0 are complexity classes that obey the directly as those languages reducible to a particular language.
                        0
proper containment C ( C , Theorem 6 gives strong evi- Deﬁnition 9 We deﬁne the following parameterized lan-
dence that the corresponding compilability classes comp-C guages; the weight of a truth assignment is deﬁned to be the
           0
and comp-C  obey a similar proper containment: comp-C ( number of variables it maps to true.
comp-C0. Note that in making this observation, we appeal to
the widely held belief that relationships between “standard” • WEIGHTED FORMULA SATISFIABILITY
complexity classes C, C0 are not affected by non-uniformity, Input: A boolean formula F .
                                                          Question: Does  F have a  satisfying assignment of
  1This deﬁnition of comp-C is “non-uniform” in that the prepro- weight at most k?
cessing or translation function f not only takes the knowledge base
x as input, but in addition is given the length of the query y. A “uni- • WEIGHTED CIRCUIT SATISFIABILITY
form” version of the classes comp-C where the translation function Input: A boolean circuit C.
f is only given the knowledge base x is studied and compared to the Question: Does C have a satisfying assignment of
comp-C classes in [Cadoli et al., 2002]. In this paper, we present a weight at most k?
non-uniform theory of parameterized compilability, and do not fur-
ther discuss the uniform comp-C classes. One can use the ideas 2Note that the term “non-uniformity” is intended here to take
and concepts we present in this paper to develop a corresponding on the usual complexity-theoretic sense, as opposed to the slightly
uniform theory.                                       different sense in which comp-C was called non-uniform.Deﬁnition 10 We deﬁne the following parameterized com- classes in a natural way. We substantiate this claim by con-
plexity classes.                                      sidering two special cases of Deﬁnition 12, which may lend
                                                      some intuition to the reader.
  • W[SAT] is the class of all parameterized languages that
                                                        First, consider the case where the preprocessing function f
    are parameterized reducible to WEIGHTED FORMULA
                                                      simply returns as output its ﬁrst argument, that is, f is equal
    SATISFIABILITY .                                                                              0
                                                      to the projection π1. It follows that F must equal F ; conse-
  • W[P] is the class of all parameterized languages that are quently, a PKRF F is contained in par-comp-C via such an f
    parameterized reducible to WEIGHTED CIRCUIT SAT-  if and only if F is contained in C itself. Intuitively, the func-
    ISFIABILITY .                                     tion f does not perform any preprocessing, so the compilabil-
  It is straightforward to verify that the parameterized com- ity class par-comp-C simpliﬁes out to the original class C.
plexity classes deﬁned here (FPT, W[SAT], and W[P]) are Next, consider the case where the PKRF F has the property
                                                                             0   ∗
compatible with the parameterized reduction. Throughout that for all strings x, y, k, k ∈ Σ , it holds that (x, y, k) ∈ F
                                                                        0
this paper, we will assume that all discussed parameterized if and only if (x, y, k ) ∈ F ; that is, F “ignores” the third
complexity classes have this property, and also that they have component (the “parameter”) of its strings. In this case, the
complete problems.                                    PKRF  F naturally induces a KRF F˜, deﬁned to be
Assumption 11 Every parameterized complexity class C is {(x, y) : ∃k.(x, y, k) ∈ F } = {(x, y) : ∀k.(x, y, k) ∈ F }.
compatible with and has complete problems under the pa- Such a PKRF F is contained in par-comp-FPT if and only
rameterized reduction ≤par.
                                                      if the induced KRF F˜ is contained in comp-P.3 In “ignor-
                                                      ing” the parameter of the PKRF F , the compilability class
3  Parameterized    Compilability                     par-comp-FPT  simpliﬁes out to its non-parameterized vari-
3.1  Classes and reductions                           ant, namely, comp-P. We mention that by imposing the re-
As with the theory of compilability, the starting point for strictions discussed in the two cases simultaneously, we ef-
the theory of parameterized compilability is the deﬁnition fectively obtain the class P. Thus, one can think of FPT
of compilability classes. Whereas a compilability version of and comp-P as two different generalizations of P which are
each non-parameterized complexity class was deﬁned (Deﬁ- uniﬁed together in and can be obtained as specializations of
nition 3), here we deﬁne a compilability version par-comp-C par-comp-FPT.
of each parameterized complexity class C.               We have the following notion of reducibility for comparing
  As with the deﬁnition of comp-C,  the deﬁnition of  the compilability of PKRFs.
par-comp-C  includes a translation function f with a space Deﬁnition 13 (par-comp reducibility) A PKRF F is par-
                              0                                                0               par    0
bound, as well as a “target” PKRF F , which is required to be comp-reducible to a PKRF F (denoted by F ≤comp F ) if
inside C.                                             there exist
                                                                                                      ∗
Deﬁnition 12 Let C be a parameterized complexity class. A • parameterized polynomial-size functions f1, f2 : Σ ×
PKRF F  belongs to par-comp-C if there exist              1∗ × Σ∗ → Σ∗,
  • a parameterized polynomial-size function f : Σ∗ × 1∗ × • a parameterized polynomial-time function g : Σ∗ ×Σ∗ ×
    Σ∗ →  Σ∗, and                                         Σ∗ →  Σ∗, and
                                                                                           ∗     ∗
  • a PKRF F 0 in C                                     • a recursively computable function h : Σ → Σ
                                                                                    ∗    ∗    ∗
such that for all triples (x, y, k) ∈ Σ∗ × Σ∗ × Σ∗ and natural such that for all triples (x, y, k) ∈ Σ × Σ × Σ and natural
numbers m ≥ |y|,                                      numbers m ≥ |y|,
     x, y, k F             f x, m, k , y, k F 0.                    (x, y, k) ∈ F if and only if
    (     ) ∈  if and only if ( (  )    ) ∈                                                       0
                                                            (f1(x, m, k), g(f2(x, m, k), y, k), h(k)) ∈ F .
  An implication of the containment of a PKRF F inside
par-comp-C via the function f and the PKRF F 0 is the fol- We note that our deﬁnition of par-comp reducibility is not a
lowing. Deﬁne, for each k ∈ Σ∗, the “k-slice” of a PKRF direct analog of the deﬁnition of comp-reducibility; in Deﬁni-
          def                                         tion 13 the “preprocessing phase” f is given an upper bound
G to be Gk =  {(x, y) : (x, y, k) ∈ G}. Moreover, deﬁne m on the size of the query y, as opposed to the length of the
     ∗   ∗     ∗
fk : Σ ×1 →  Σ  to be the function fk(x, m) = f(x, m, k). query |y|, as in Deﬁnition 4. We believe that our notion of re-
                      ∗              0
Notice that for each k ∈ Σ , the KRFs Fk, Fk and the binary duction is preferable because an assumption like Assumption
function fk satisfy the condition of Deﬁnition 3. That is, each 2 is not necessary to establish transitivity, and also because it
                                                  0
k-slice Fk of F is compilable to the corresponding k-slice Fk allows for a simpler proof of transitivity. Our proof of transi-
    0
of F by the function fk. Because the size of f is bounded tivity can be specialized to a proof of transitivity for an “upper
by a parameterized polynomial, for k falling into a limited bound” variant of Deﬁnition 4 by removing the parameter k.
range, the functions fk will behave polynomially; likewise,
when F 0 ∈ FPT, for k falling into a limited range, the KRF 3Sketch of one direction of this claim: suppose that the PKRF
slices F 0 will have time complexity behaving polynomially. F is of the described form and in par-comp-FPT. Fix an arbitrary
      k                                                    ∗                     ∗    ∗     ∗
  Upon initial acquaintance, Deﬁnition 12 may appear to be s ∈ Σ , deﬁne the function f˜ : Σ × 1 → Σ by f˜(x, m) =
complex. However, we believe that the classes par-comp-C f(x, m, s), and deﬁne the KRFF˜0 as {(x, y) : (x, y, s) ∈ F 0}. It
unify the classes comp-C with parameterized complexity can be veriﬁed thatF˜ is contained in comp-P via f˜ and F˜0.