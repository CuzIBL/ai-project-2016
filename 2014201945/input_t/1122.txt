                          Value Ordering for Finding All Solutions

                    Barbara M. Smith                                Paula Sturdy
       Cork Constraint Computation Centre, Ireland.       University of Huddersﬁeld, U.K.
                 b.smith@4c.ucc.ie                           p.sturdy@hud.ac.uk


                    Abstract                          selected for instantiation, its values are assigned via a se-
                                                      quence of binary choices. If the values are assigned in the
    In ﬁnding all solutions to a constraint satisfaction
                                                      order {v1,v2, ..., vk}, the ﬁrst choice point creates two alter-
    problem, or proving that there are none, with a
                                                      natives, x = v1 and x = v1. The ﬁrst (the left branch) is
    search algorithm that backtracks chronologically
             k                                        explored; if that branch fails, or if all solutions are required,
    and forms -way branches, the order in which the   the search backtracks to the choice point, and the right branch
    values are assigned is immaterial. However, we
                                                      is followed instead. Crucially, the constraint x = v1 is propa-
    show that if the values of a variable are assigned
                                                      gated, before a second choice point is created between x = v 2
    instead via a sequence of binary choice points, and
                                                      and x = v2, and so on. (The MAC algorithm also allows the
    the removal of the value just tried from the domain
                                                      possibility that on backtracking after trying x = v 1, a differ-
    of the variable is propagated before another value ent variable could be assigned next, not just a different value:
    is selected, the value ordering can affect the search that possibility is not considered here.)
    effort. We show that this depends on the problem    With binary branching, the subtrees resulting from succes-
    constraints; for some types of constraints, we show sive assignments to a variable are not explored independently:
    that the savings in search effort can be signiﬁcant, propagating the removal of a value from the current variable’s
    given a good value ordering.                      domain on the right branch can lead to further domain reduc-
                                                      tions. This propagation can affect the search when future val-
1  Introduction                                       ues of the variable are considered: indeed, sometimes a future
It is well-known that the order in which variables are instanti- value can be removed from the domain. Hence, the order in
ated can make an enormous difference to the search effort in which the values are assigned can affect the search.
                                                        [          ]
solving a constraint satisfaction problem, whether just one so- Smith, 2000 gives an example of the value ordering af-
lution is required, or all solutions. However, value ordering is fecting the search to ﬁnd all solutions. Here, we present a
relatively neglected, partly because no cheap general-purpose more extensive investigation and explain how value order-
                                                      ing can affect search effort. We show that, depending on the
value ordering heuristics are known, and partly because it has                                     k
been accepted that value ordering is not important if all solu- problem constraints, the saving in search effort over -way
tions are required, or there is no solution.          branching can be around 50%, given a good value ordering.
  Frost and Dechter [1995] showed that, with backjumping,
the value ordering can have an effect on the search for all so- 2 Search Trees for a Golomb Ruler Problem
lutions, but say: “With backtracking the order in which values First, we examine in detail the effect of the value ordering
are chosen makes no difference on problems which have no when ﬁnding all solutions, using a variant of the Golomb ruler
solution, or when searching for all solutions.” Their argument problem (prob006 in CSPLib). A Golomb ruler with m marks
is that when a node corresponding to a variable is created in may be deﬁned as a set of m integers 0=x0 <x1 < ... <
the search tree, the children correspond to the values of that xm−1, such that the m(m − 1)/2 differences xj − xi, 0 ≤
variable, and that the subtrees rooted at the children nodes are i<j≤ m − 1, are distinct. The length of the ruler is xm−1,
explored independently. To ﬁnd all solutions, or to prove that and the objective is to ﬁnd a minimum length ruler. Modeling
there are none, every subtree must be explored, and the order the problem is discussed in [Smith et al., 2000].
makes no difference to the overall search.              To create a problem with no solution, we set xm−1 =
  This argument assumes that the search tree is formed by minl − 1, where minl is the minimum possible length. The
k-way branching [Mitchell, 2003], i.e. when a variable with model is chosen so that the search trees (using ILOG Solver’s
k values in its domain is selected for instantiation, k branches default binary branching) for one instance of the problem are
are formed. Constraint solvers such as ILOG Solver and small enough to display, while the value ordering makes a
ECLiPSe  by default use a search strategy similar to the signiﬁcant difference to the number of backtracks.
MAC algorithm [Sabin and Freuder, 1997], and in particu- The chosen model is not the quickest way to solve the
lar use 2-way, or binary, branching. When a variable x is problem, since it does expensive constraint propagation inorder to reduce search. Auxiliary variables represent the        x1 =5
                                                                       x  ∈{1..4}
m(m  − 1)/2 differences between the marks on the ruler, de-             1
ﬁned by di,j = xj − xi, where i<j; generalized arc con-             x1 =4
                                                                          x  ∈{1..3}
sistency (GAC) is enforced on these ternary constraints using              1
ILOG Solver’s table constraints. We also enforce GAC on the           x1 =3
                                                                             x1 ∈{1, 2}
allDifferent constraint on the difference variables. Since x i is
the sum of i difference variables, its minimum value is set to         x1 =2
                                                                                     x1 =1
be the sum of the ﬁrst i integers. Similarly, the length xm−1−i
  x                             i
to m−1 is at least the sum of the ﬁrst integers, and this re- x2 =10         x2 =10
                                                                    x ∈{3, 5..9}    x2 ∈{3..9}
duces the maximum value of xm−1−i. We add the constraint             2
d   <d
 0,1   m−2,m−1 to break the reﬂection symmetry.                x2 =9            x2 =9
                                                                     x  ∈{3, 5..8}   x  ∈{3..8}
  The search variables are x0,x1, ..., xm−1, assigned in that         2               2

order. We compare two value ordering heuristics; choosing        x2 =8           x2 =8
either the smallest value in the domain, or the largest. Choos-        x2 ∈{3, 5..7}   x2 ∈{3..7}

ing the largest value would not be a sensible strategy for ﬁnd-   x2 =7            x2 =7
ing a minimum length Golomb ruler, since the length is not              x2 ∈{3, 5,6}     x2 ∈{3..6}

known in advance, but here it shows the effect on search of         x2 =6            x2 =6
changing the value ordering.                                              x2 ∈{3, 5}      x2 ∈{3..5}

  Figure 1 shows the search trees resulting from proving that         x2 =5           x2 =5
there is no 6-mark Golomb ruler with length 16, with the two                   x2 =3        x2 ∈{3, 4}

selected value orderings. The difference is striking, given the                        x2 =4
conventional view that the value ordering only reorders the                                      x2 =3
search, and does not affect the overall search effort.
  The black circles show where a failure is detected and the
                                                                          x1 =1
search backtracks. When values are assigned in increasing or-                        x ∈{2.. 5}
der, on backtracking to take the right branch the domain of the                       1
                                                                x2 =3              x1 =2
variable can sometimes be reduced, or eliminated altogether.          x  ∈{4.. 10}       x ∈{3.. 5}
We examine a case in detail. Initial constraint propagation            2                  1
reduces the domains of the search variables to x0 :0;x1 :         x2 =4         x2 =3
                                                                        x2 ∈{5.. 10}  x2 ∈{5.. 10}
{1..5}; x2 : {3..10}; x3 : {6..13}; x4: {10..14}; x5 : 16. On
backtracking from x1 =1, the right branch has x1 ∈{2..5}.           x2 =5
                                                                          x2 ∈{6.. 10}
Constraint propagation reduces this to x1 =2: there are 14
pairwise differences between the marks in this instance (ex-         x2 =6
                                                                           x2 ∈{7.. 10}
cluding d0,5, which has already been assigned) and just 14
possible values for these differences, from 1 to 14. If x 1 =1,       x2 =7
                                                                             x2 ∈{8.. 10}
then x4 ≤ 13, because of the symmetry constraint. Hence,
the value 14 can only be assigned to the difference x 5 − x1,
which means that x1 =2. Enforcing GAC on the allDifferent Figure 1: Search trees formed in proving that there is no Golomb
constraint on the difference variables makes this inference, ruler with 6 marks of length 16, using (top) decreasing value order
and the branch x1 ∈{3..5} is not considered further. On the and (bottom) increasing value order.
other hand, when values are assigned in decreasing order, the
domain of x1 on the right branch always contains the value 1,
and the allDifferent constraint is already GAC.       problem, and also shows the effect of using an implementa-
                                                      tion of k-way branching in ILOG Solver. k-way branching
           Increasing  Decreasing   k-way             nearly doubles the number of backtracks compared with bi-
       n      order      order    branching           nary branching using increasing value order. Although de-
       6           8          18         18           creasing order is much worse than increasing order, it still
       7          71          97        113           allows signiﬁcantly less search than k-way branching for the
       8         304         456        525           larger instances.
       9       1,748       2,809      3,252             The runtimes for k-way branching are usually shorter than
       10      6,759      11,395     13,592           for binary branching with decreasing value ordering, even
       11    117,251     206,510    227,815           when the search tree is larger. For n = 11, k-way branch-
                                                      ing takes 1390 sec. (on a 600MHz Celeron PC), compared
Table 1: Number of backtracks to prove that there is no Golomb to 1410 sec. for binary branching with decreasing value or-
ruler with n marks of length minl− 1, where minl is the minimum dering. With increasing value ordering, binary branching is
possible length, using binary branching with increasing or decreas- signiﬁcantly faster (980 sec.).
ing value ordering, or k-way branching.
                                                        The explanation given earlier for the immediate failure of
                                                      the right branch at the choice point between x 1 =2and
  Table 1 gives the results for larger instances of the same x1 ∈{3..5} depends on the global allDifferent constraint.However, even if the allDifferent constraint is treated as a • x5 <x6; x5 <x7; x6 <x8 (to eliminate symmetry in
clique of binary = constraints and the constraints d i,j = the cycle consisting of nodes 5, 6, 7, 8).
xj − xi are not made GAC, choosing the smallest value
                                                        • x1 <x5  (to prevent interchanging the two cycles).
in the domain requires fewer backtracks to prove insolubil-
ity than choosing the largest value. The crucial constraints What propagation can follow from the removal of a value
are x0 <x1  <  ... < xm−1 and the symmetry constraint from the domain of a variable in this case? The (binary) sym-

d0,1 <dm2,m−1, which is equivalent to x1 < 16 − x4 in the metry constraints are monotonic and so a value removal will
example analysed. With monotonic binary constraints such propagate as in the Golomb Rulers problem. Given a clique
as these, the removal of the largest or smallest value in the of = constraints, as on the node variables, removing a value
domain of one of the variables can reduce the domain of the from the domain of a variable does not affect the other vari-
other, and removing any other value has no effect [van Hen- ables. However, if there is a global allDifferent constraint,
tenryck et al., 1992]. Given a constraint x<ywith x as- as on the edge variables, removing a value may affect other
signed before y, trying the values of x in increasing order domains; for instance, if there are only as many values as vari-
means that on backtracking, the smallest value in the domain ables and a value occurs in the domain of only two variables,
of x is removed on the right branch and this removal in turn removing it from the domain of one means that it must be
reduces the domain of y. Since the variables are assigned assigned to the other. However, the immediate effect on the
in lexicographic order in this case, this explains why assign- search variables (the node variables) is limited, since GAC is
ing the values in increasing order has the largest effect on the not maintained on the ternary constraints linking the edge and
search.                                               node variables.
                                                        We have tried several different variable orders for this prob-
3  Graceful Labeling of a Graph                       lem. In each case, if binary branching is used with a value
In this section, we consider further the effect of value ordering ordering that chooses a value from the middle of the domain,
when there are monotonic constraints, and the interaction of it takes the same number of backtracks to ﬁnd all solutions as
                                                      k
the variable ordering and the value ordering.          -way branching. However, if the value chosen is either the
  The problem is that of determining all graceful labelings of smallest or the largest in the domain, binary branching takes
                                                                         k
the graph shown in Figure 2. A labeling f of the nodes of a fewer backtracks than -way branching. This suggests that
graph with q edges is graceful if f assigns each node a unique the reduction in search is mainly due to the symmetry con-
label from {0, 1, ..., q} and when each edge xy is labeled with straints: any propagation due to the other constraints would
|f(x) − f(y)|, the edge labels are all different.     not be restricted to the largest and smallest value in the do-
  A possible CSP model has a variable for each node,  main.
x1,x2, ..., xn, each with domain {0, 1, ..., q} and a variable Table 2 shows the results of solving this problem with dif-
for each edge, d1,d2, ..., dq, each with domain {1, 2, ..., q}. ferent variable and value orders. As well as lexicographic and
The constraints are: if edge k joins nodes i and j then d k = reverse lexicographic variable order, we use the orders that
|xi − xj|; x1,x2, ..., xn are all different, as are d1,d2, ..., dq. we found to be respectively best and worst, when assigning
Since the edge variables must be assigned a permutation of the values in increasing order [Sturdy, 2003]. (Incidentally,
the values 1 to q, it is worthwhile to enforce GAC on the all- the comparison also demonstrates that the value order cannot
Different constraint. The allDifferent constraint on the node compensate for a poor variable order in ﬁnding all solutions.)
variables is looser (9 variables and 17 possible values in the It is not necessary to use the same order (increasing or de-
example of Figure 2) and this is expressed by = constraints. creasing) for all variables. The rightmost columns in Table
The search variables are x1,x2, ..., xn.              2 give the results for a heuristic that, for most variable or-
                                                      ders, assigns the values of x1 and x5 in increasing order, and
                   8            5
                               
                                                   those of the other variables in decreasing order. However, if

                          1                          x5 comes after x6, x7 and x8 and before x1 in the variable
                          
                          
                                                      ordering, it is assigned in decreasing order, and if x 1 comes

                        0                                 x2  x8
                   4         2                    after  to   in the variable order, it is assigned in decreas-
                                                  ing order. (Hence, when the variables are assigned in reverse

                                                    lexicographic order, decreasing order for all variables is best.)
                          
                        3
                                                     Table 2 shows that the heuristic is at least as good as the bet-
                                
                                
                7                6                    ter of increasing or decreasing order in all cases, and this was
                                                      true for the other variable orders that we tried.
Figure 2: A graph that can be gracefully labeled. The node numbers The heuristic was derived empirically by trying increasing
correspond to the variables of the CSP.               or decreasing order for each variable, with a range of variable
                                                      orders. We found that the effect of changing the value order
  Symmetrically equivalent solutions can be eliminated by
                                                      for a single variable does not depend on the value order cho-
adding constraints to the model [Petrie and Smith, 2003].
                                                      sen for the other variables, so that the best order, for a given
  • x  <
     0   8 (to eliminate the complement symmetry, i.e. the variable order, can be chosen independently for each variable.
                                  v   q − v
    symmetry that replaces every value by ).          The heuristic can be related to the binary symmetry-breaking
  • x1 <x2; x1 <x3;  x2 <x4 (to eliminate rotations and constraints: unless x1 and x5 are late in the variable order, as-
    reﬂections in the cycle consisting of nodes 1, 2, 3, 4). signing their values in ascending order will lead to reducing                  Variable order           k-way       Increasing   Decreasing     Heuristic
                                          branching      order         order
                                           bt.  sec.     bt.  sec.     bt.  sec.    bt.  sec.
           x0,x1,x2,x3,x4,x5,x6,x7,x8    6043   0.21   3126  0.21   3793   0.21   2929   0.21
           x8,x7,x6,x5,x4,x3,x2,x1,x0   11963   0.46  10167  0.55   5304   0.37   5304   0.37
           x8,x0,x4,x3,x1,x5,x2,x6,x7    3129   0.15   1839  0.14   2374   0.16   1730   0.14
           x1,x7,x5,x3,x2,x8,x0,x6,x4   39469   1.57  31338  1.68  15871   1.04  15834   1.04

 Table 2: Finding all graceful labelings of the graph in Figure 2, with k-way branching or binary branching with different value orderings.

the domains of other variables on backtracking. The variables discussed in [Hnich et al., 2004], if a value appears in the
assigned in decreasing order are those that appear mainly on domain of only one dj variable, it will be assigned to that
the right of > constraints; on backtracking, the largest value variable. Hence, if there is a value that appears in the domains
in the domain will be removed, and again this will reduce the of the current variable and only one other search variable, it
domains of other variables.                           should be chosen: on backtracking, propagation will assign
                                                      the value to the other variable.
4  Langford’s Problem                                   In [Smith, 2000], dualsdf ordering was used, which
                                                      chooses the value appearing in fewest domains, i.e. corre-
In the previous examples, assigning values in either increas- sponding to the dual variable with smallest domain. dualsdf
ing or decreasing order reduces the search effort consider- was shown to give better results than increasing value order,
ably, in comparison with k-way branching, because of the for ﬁnding all solutions. It will always choose a value appear-
monotonic binary constraints in the problem. In this section, ing in the domain of only one other search variable, if there
a problem with no monotonic constraints is discussed. is one; hence, we can now explain its good performance. Its
  Langford’s problem (prob024 in CSPLib) can be stated as anti-heuristic, dualldf, chooses the value corresponding to the
follows: “A sequence of n × m integers consists of the in- dual variable with largest domain, and will not choose a value
tegers 1 to m each appearing n times. There is one integer appearing in only two domains unless there is no alternative.
between consecutive occurrences of the integer 1, two inte- Whereas dualsdf can be expected to give as much search re-
gers between consecutive occurrences of the integer 2, and duction as possible in ﬁnding all solutions, dualldf will rarely
so on. Find all possible such sequences.”             be able to reduce the domains of other variables on the right
  Modeling this problem as a CSP is discussed in [Hnich et branch and so should be nearly as bad as k-way branching for
al., 2004]. A possible model has nm variables, one for each this problem. The results in Table 3 conﬁrm this.
location in the sequence; its value represents the integer at
this location. Thus, the value i of dj, 1 ≤ j ≤ nm,isan    Instance dualsdf  dualldf k-way branching
integer in the interval [1,nm], representing the fact that oc- (9,3)   182      208         210
currence (i div n)+1 of the integer i mod n occurs at location (10,3)  562      619         631
j. For example, in the (3,9) instance, i.e. n =3, m = 9,    (11,3)    2381     2697        2736
d1 =1,d3  =2,d5  =3represent the 1st, 2nd and 3rd oc-
currences of the integer 1 appearing in positions 1, 3 and 5 Table 3: Number of backtracks to ﬁnd all solutions to three instances
of the sequence. A dual model of the problem has a variable of Langford’s problem, using binary branching with different value
                                                              k
xi, 1 ≤ i ≤ nm, for each occurrence of each integer: its orders, or -way branching.
value is the position in the sequence of this occurrence. The
problem can be viewed as a permutation problem: any valid Hence, dualsdf reduces the search effort to ﬁnd all solu-
                                nm
sequence assigns a permutation of the possible values to tions compared with k-way branching, and its good perfor-
           d ,d , ..., d
the variables 1 2   nm. To ensure that any solution is a mance can be explained in relation to to the problem con-
permutation of the values, both sets of variables are included straints. However, the reduction in search is much less than
in the model, with channeling constraints between them, i.e. in the previous examples, and does not make binary branch-
d = j   x  = i
 i    iff j   . We also add constraints to break the sym- ing cost-effective in terms of run-time.
metry: given any solution, another can be found by reversing
the sequence. We assign values to d1,d2, ..., dnm in turn.
  A value ordering heuristic for this problem can be devised 5 Symmetry Breaking During Search
by considering how removing a value from the domain of a We have shown that the effect of the value order on the search
variable dj on backtracking will affect other variables. The for all solutions depends on propagating the removal of the
removal will also remove a value from the domain of n − 1 value just tried, on the right branch at binary choice points. In
other variables; for example, in the (3,9) instance, if d 1 =1, Symmetry Breaking During Search [Gent and Smith, 2000],
then d3 =2and d5 =3. However, the values 2 and 3 are constraints to avoid assignments symmetric to those already
only assigned as a consequence of assigning the value 1, and considered are added dynamically during search, on the right
these deletions will not lead to further propagation. The other branch. These additional constraints can reinforce the effect
possible propagation is from the channeling constraints: as of the value order on search. We demonstrate this in the n-queens problem, whose symmetries are described in [Gent      = constraints  GAC on allDifferent constraints
and Smith, 2000].                                               k-way                           k-way
  The basic program (from the ILOG Solver User Manual)        branching        dualsdf        branching
has a variable xi,i =1, 2, ..., n for each row of the board, n bt.    sec.    bt.     sec.    bt.     sec.
representing the queen on that row, with a value for each col- 9 1111 0.04      854  0.03       858  0.03
umn. There are three allDifferent constraints, representing 10 5072   0.11     3831  0.14      3869  0.12
that the queens are on different columns and on different di- 11 22124 0.41   16308  0.63     16478  0.54
agonals in each of the two possible directions. SBDS requires 12 103956 1.90  74514  3.05     75448  2.62
a speciﬁcation of the effect of each symmetry on the assign- 13 531401 9.79  366488  15.6   371298   13.5
ment of a value to a variable. For instance, in the n-queens 14 2932626 53.9 1964642 84.8  1990925   73.8
problem, the reﬂection in the top-left to bottom-right diagonal
(symmetry d1) transforms the assignment xi = j to xj = i. Table 4: Number of backtracks (bt.) and runtime (on a 1.7GHz Pen-
                                                                                   n
The ﬁrst assignments made are x1 =1and x3  =2(the     tium M PC) to ﬁnd all solutions to the -queens problem, if symme-
variable ordering heuristic chooses the variable with smallest try is not eliminated.
domain, using the smallest value as a tie-breaker). On back-
                                                               Increasing   anti-
tracking to take the alternative choice x3 =2, d1 is the only
                                                           n     order    promise   promise   dualsdf
symmetry remaining, given the assignment x1 =1. SBDS
                                                           9        144       144       158      148
adds the symmetric equivalent of x3 =2, i.e. x2 =3,tothe
                                                          10        649       617       674      647
right branch. Both constraints, i.e. x3 =2and x2 =3, are
propagated before choosing another value.                 11       2433      2375      2375     2384
                                                          12      11305     10872     11547    11252
  When using SBDS to eliminate the symmetry in the n-
                                                          13      52140     51045     52825    51452
queens problem, we compare four value ordering heuristics.
                                                          14     292869    279844    295522   291825
First, we select values in increasing order, as a basis for com-
                                                          15    1562199   1521670  1541946   1547019
parison. Second, we use a heuristic which seems likely to
give most scope for the SBDS constraints to prune the do- Table 5: Number of backtracks to ﬁnd all non-isomorphic solutions
mains of future variables. It is not obvious how best to do to the n-queens problem, using different value ordering heuristics.
this, but the value that attacks the most unattacked squares
will free these squares on backtracking: it seems plausible
that this will increase the likelihood that the SBDS constraints pare the heuristics with k-way branching in this case, be-
remove one. The opposite heuristic, choosing the value that cause SBDS depends on binary branching. Anti-promise, in-
attacks fewest unattacked squares, is similar to the promise tended to allow propagation of the SBDS constraints to re-
                          [    ]
heuristic introduced by Geelen 1992 ; hence, we call these duce search, is indeed the best of the four heuristics. Dual-
two heuristics anti-promise and promise respectively. Finally, sdf is often a rather poor second best, suggesting that the
we use dualsdf, as in Langford’s problem, taking into account SBDS constraints are more signiﬁcant than the allDifferent
that x1, ..., xn must be assigned a permutation of the values
    n                                                 constraints in allowing domain reductions on the right branch.
1to  ; in a permutation problem, a global allDifferent con- The experience with this problem class shows that it is pos-
straint does at least as much domain pruning as channeling sible to design value ordering heuristics for ﬁnding all solu-
constraints would do, when a value is removed from the do- tions by considering the propagation of the constraints added
                       [               ]
main of one of the variables Hnich et al., 2004 .     on the right branch during search, whether the removal of
  We ﬁrst compare the four heuristics if the symmetry is not the value just tried or SBDS constraints. The differences in
eliminated: the results are given in Table 4. The effect of search effort are relatively small, however, and the runtimes
the value ordering then depends on how the allDifferent con- for promise, anti-promise and dualsdf are very similar; in-
straints are treated. If they are treated as cliques of binary creasing order is fastest, being simplest to implement.
=
  constraints, the value ordering can have no effect on the                         [           ]
                                    k                   The original promise heuristic Geelen, 1992 was de-
search effort. Table 4 gives the results for -way branching signed to ﬁnd a ﬁrst solution quickly, and it is worth noting
only, since the four binary branching heuristics give the same that our version is much better than anti-promise in this re-
number of backtracks, though a marginally longer runtime. spect. For n ≤ 100, promise can usually ﬁnd a ﬁrst solution in
  On the other hand, if the allDifferent constraints are treated just a few backtracks, whereas anti-promise becomes increas-
                                             k
as global constraints, dualsdf requires less search than -way ingly successful at avoiding solutions. For instance, when
branching, and least search of the binary branching heuris- n = 100, promise ﬁnds a solution in 2 backtracks, whereas
tics. However, the reduction in search, in comparison with anti-promise takes more than 21 million. However, promise
k
 -way branching, is not great. Overall, if the symmetry is is slightly worse than anti-promise for ﬁnding all solutions.
not eliminated, k-way branching and = constraints give the
fastest runtime. Maintaining GAC on the allDifferent con-
straints is time-consuming, especially when GAC has to be 6 Conclusions
re-established after each individual value for a variable has Mitchell [2003] showed that binary branching can do much
been tried, as in binary branching.                   less search than k-way branching, due to the possibility that
  Table 5 compares the four heuristics when the symmetry on backtracking to a choice point, the next assignment tried
in the problem is eliminated using SBDS. We cannot com- need not be another value (if there is one) of the same vari-