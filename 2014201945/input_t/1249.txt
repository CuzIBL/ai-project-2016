                                       Going Far, Logically
                       Fusun Yaman     and  Dana Nau    and  V.S. Subrahmanian
                                   Department of Computer Science,
              University of Maryland Institute for Advanced Computer Studies (UMIACS),
                                and Institute for Systems Research (ISR)
                                         University of Maryland
                                       College Park, MD, 20742
                                     {fusun, nau, vs}@cs.umd.edu

                    Abstract                          man et al., 2004] deﬁne interpretations and a notion of satis-
                                                      faction. For near(o1, o2, d, t1, t2) atom to be a logical conse-
    There are numerous applications where we need to  quence of a go-theory G, for every interpretation I that satis-
    ensure that multiple moving objects are sufﬁciently
                                                      ﬁes G, it must be the case that for all times t1 ≤ t ≤ t2, the
    far apart. Furthermore, in many moving object do- distance between the locations of o and o at time t is less
    mains, there is positional indeterminacy — we are                               1     2
                                                      than or equal to d. Thus, ¬near(()o1, o2, d, t1, t2) is a logical
    not 100% sure exactly when a given moving object  consequence of G if for every interpretation I which satisﬁes
    will be at a given location. [Yaman et al., 2004]
                                                      G there exists a time t1 ≤ t ≤ t2, the distance between the lo-
    provided a logic of motion but did not provide algo- cations of o and o at time t (according to the interpretation
    rithms to ensure that moving objects are kept suf-          1     2
                                                      I) is greater than d. In contrast, for far(o1, o2, d, t1, t2) to be
    ﬁciently far apart. In this paper, we extend their entailed by S, it must be the case that for every interpretation
    logic to include a “far” predicate. We develop the I which satisﬁes G and for every time point t ≤ t ≤ t , the
    CheckFar algorithm that checks if any given two                                         1       2
                                                      distance between the locations of o1 and o2 at time t is greater
    objects will always be sufﬁciently far apart at dur- than d. Thus, entailment of far() atoms is not the same as en-
    ing a time interval. We have run a set of experi- tailment of either near() atoms or ¬near() literals.
    ments showing that our CheckFar algorithm scales    In this paper, we deﬁne the semantics of far() and develop
    very well.                                        an algorithm called CheckFar to check entailment of ground
                                                      far() atoms by a go-theory G. We have conducted extensive
1  Introduction                                       experiments on the computational feasibility of CheckFar —
                                                      our experiments show in a compelling way that in real world
All of us ﬂy in airplanes. We know that ﬂight plans are al-   1
most never 100% accurate. We all have a vested interest in situations , CheckFar will work very well indeed. In our
ensuring that planes we ﬂy in are sufﬁciently far from other experiments we answered far queries in less than 0.6 seconds
planes that are ﬂying in the sky at the same time. The goal of for go theories up to 1000 atoms per object.
this paper is to develop a hybrid logical and constraint based
framework to ensure that moving objects with positional un- 2 Background On go-Theories
certainty (where will the object be at a given time) remain We now provide a quick overview of go-theories from[Ya-
sufﬁciently far apart.                                man et al., 2004]. We assume the existence of several sets of
  Our work builds on [Yaman et al., 2004] who developed constant symbols: R is the set of all real numbers, O is the
the concept of a “go-theory”. A go-theory is a ﬁnite set of set of names of objects, P = R × R is the set of all points
“go-atoms.” A go-atom can express statements such as ‘Plane in two-dimensional cartesian space. We assume the existence
p1 leaves location L1 some time between 10 and 12 and ar- of three disjoint sets of variable symbols, VR, VO, and VP,
rives at location L2 at some time between 30 and 40 and ranging over R, O and P, respectively. A real term t is any
during the ﬂight the speed of the plane is between 5 and 6”. member of R ∪VR. Object terms and point terms are deﬁned
They provide algorithms to check if a given plane is within similarly. Ground terms are deﬁned in the usual way. We now
a given region at a given time point. They also introduce deﬁne atoms as follows.

ground atoms of the form near(o1, o2, d, t1, t2) — intuitively, • If o1, o2 are object terms, and d, t1, t2 are positive real
this means that at all times during the interval t1, t2, o1 and terms, then near(o1, o2, d, t1, t2) is an atom. Intuitively,
o2 are guaranteed to be within d units of each other.     this atom says that o1, o2 are within distance d of each
  In this paper, we introduce a predicate symbol called   other during the time interval [t1, t2].
far(o , o , d, t , t )
    1  2   1  2 —  intuitively, this means that at all times • If o is an object term, P , P are point terms, and t , t
                t , t o     o                                                 1   2                  1  2
during the interval 1 2, 1 and 2 are guaranteed to be at  are positive real terms, then in(o, P , P , t , t ) is an
least d units apart.                                                                     1   2 1  2
  One may think that near() and far() are complements of 1We built an application to manage separation between ships in
each other. Unfortunately, this is not true. Yaman et. al.[Ya- port shipping lanes.    atom. Intuitively, this atom says that object o is in the of MT, denoted MT |= L, iff every model of MT is also a
    rectangle whose lower left (resp. upper right) corner is model of L.
    P1 (resp. P2) at some point in the time interval [t1, t2].
  • If o is an object term, P1, P2 are point terms, and 3 far() atoms
     −  +  −  +  −   +
    t1 , t1 , t2 , t2 , v , v are positive real terms, then
                −  +  −  +  −   +                     We are now ready to extend the logic in [Yaman et al., 2004]
    go(o, P1, P2, t1 , t1 , t2 , t2 , v , v ) is an atom called a to include far() atoms. If o , o are objects, and d, t , t are
    go atom. Intuitively, this atom says that object o leaves                1  2                 1  2
                          −  +                        real terms, then far(o1, o2, d, t1, t2) is a far() atom.
    point P1 at some time in [t1 , t1 ] and arrives at point P2
           −  +                                       Deﬁnition 2 (satisfaction of far() atoms) Suppose f is a
    during [t2 , t2 ], traveling in a straight line with a mini-
    mum speed v− and maximum speed v+.                ground far atom and I is an interpretation. I |= f iff for
                                                      all t ≤ t ≤ t , dist(I(o , t), I(o , t)) > d.
Ground atoms are deﬁned in the usual way. A go theory is  1       2       1       2
a ﬁnite set of ground go-atoms. Note that go-theories do not We say a go theory G entails f iff whenever I |= G, it is
contain near() or in() atoms.                         also the case that I |= f. The far()-entailment problem is
                          −  +  −  +   −  +
Notation. If g = go(o, P1, P2, t1 , t1 , t2 , t2 , v , v ), then, that of checking whether a given go-theory entails a ground
                                                      far()-atom. The entailment of a negated near literal does
                     −       −    +       +
      obj(g) = o,   v (g) = v ,  v  (g) = v ,         not imply entailment of the associated far atom. Similarly
                     −      −     +      +
      loc1(g) = P1, t1 (g) = t1 , t1 (g) = t1 ,       entailment of a negated far literal does not imply entailment
                     −      −     +      +
      loc2(g) = P2, t2 (g) = t2 , t2 (g) = t2 .       of the associated near atom. However, the following results
If G is a go-theory and o is an object id, the restriction of G hold:
to o, denoted Go is the set {g ∈ G | obj(g) = o}.     Lemma 1   Suppose  G   is a   go  theory  and  sup-
                                              +
  An interpretation is a continuous function I : O × R → pose far(o1, o2, d, t1, t2) and near(o1, o2, d, t1, t2)
P. Intuitively, I(o, t) is o’s location at time t.    are  ground.    If G    |=   far(o1, o2, d, t1, t2), then
                                                      G  |= ¬near(o , o , d, t , t ). If G |= near(o , o , d, t , t ),
Deﬁnition 1 Let g = go(o, P , P , t−, t+, t−, t+, v−, v+)         1  2    1 2               1  2    1 2
                          1   2 1  1  2  2            then G |= ¬far(o , o , d, t , t ).
be a ground atom and I be an interpretation. I satisﬁes g           1  2    1 2
w.r.t. a time interval T = [t1, t2] iff:                The following result tells us that checking for entailment
         −   +                                        of a ground far()-atom is co-NP complete.
  • t1 ∈ [t1 , t1 ] and I(o, t1) = P1
         −   +                                        Theorem 1  Let G be a go theory and f = far(o, o0, d, t , t )
  • t2 ∈ [t , t ] and I(o, t2) = P2                                                                 1  2
         2   2                                        be a ground atom. Checking if G |= f is coNP-complete.
  • ∀t ∈ [t1, t2], I(o, t) is on the line segment [P1, P2]
       0                  0
  • ∀t, t ∈ [t1, t2], t < t implies dist(I(o, t), P1) < We will omit the proofs due to space constraints.
             0
    dist(I(o, t ), P1), where dist is the function that com-
    putes the Euclidean distance between two points.  4   Far Algorithm
  • For all but ﬁnitely many times in [t1, t2], v =                               far()
                              −           +           Finding an algorithm to solve the -entailment problem is
    d(|I(o, t)|)/dt is deﬁned and v (g) ≤ v ≤ v (g).  a complex task. Our solution involves the following steps.
This intuitively says that I |= g w.r.t. a time interval T = First we partition a go-theory into clusters Go of go-atoms
[t1, t2] iff o starts moving at t1 and stops moving at t2 and about the same object o. Next, for any given go-atom g, we
furthermore, during [t1, t2], the object moves away from P1 deﬁne the temporal certainty interval which speciﬁes a time
towards P2 without either stopping or turning back or wan- interval when the object is guaranteed to be on the line seg-
dering away from the straight line connecting P1 and P2. We ment [loc1(g), loc2(g)]. Third, we deﬁne the positional cer-
are now ready to deﬁne the full concept of satisfaction. tainty interval that ﬁnds the smallest subsegment of the above
  I satisﬁes a ground literal (denoted I |= A) in these cases: line in which the vehicle is guaranteed to be at time t. Both
                    −  +  −  +   −  +                 temporal and positional certainty intervals are deﬁned w.r.t.
 1. I |= go(o, P1, P2, t1 , t1 , t2 , t2 , v , v ) iff there exists a given ordering of go-atoms. Our fourth step is to explain
    an interval [t1, t2] such that I |= A w.r.t. [t1, t2]. how to solve the far()-entailment problem when a go-theory
 2. I |= near(o1, o2, d, t1, t2) iff dist(I(o1, t), I(o2, t)) ≤ has only two go-atoms (one for each object) and t1 = t2 in
    d for all t1 ≤ t ≤ t2.                            the far() atom whose entailment we are trying to check. Our
 3. I  |= in(o, P1, P2, t1, t2) iff there are numbers t ∈ ﬁfth step generalizes this to the case when t1 ≤ t2. Finally,
                  x   x             y   y
    [t1, t2], x ∈ [P1 , P2 ] and y ∈ [P1 , P2 ] such that we show how to remove the assumption that G contains only
    I(o, t) = (x, y).                                 two go-atoms.
 4. I |= ¬A iff I does not satisfy A.                   Due to space constraints, we will proceed under the as-
                                                      sumption that G is non-collinear as deﬁned below. Extending
The above deﬁnition can be extended in the obvious way to our algorithm to remove this assumption is straightforward 2
handle quantiﬁcation — in this paper, we will only consider Our implementations do not require this assumption.
the ground case.
  I satisﬁes (or is a model of) a set of ground atoms MT iff 2[Yaman et al., 2004] provides a technique to merge multiple
I satisﬁes every A ∈ MT. MT is consistent iff there is an in- collinear go-atoms into “movements” that are non-collinear. The
terpretation I such that I |= MT. L is a logical consequence same technique can be used here.Deﬁnition 3 A go theory G is non-collinear iff there are no Conversely, given a time point t and a ground go-atom g, we
go-atoms g, g0 ∈ G such that obj(g) = obj(g0) and the fol- wish to know the potential segment on the line connecting
lowing two conditions both hold:                      loc1(g) and loc2(g) where the object associated with g could
                                                      possibly be. To ﬁnd this, we need another linear program.
  • The intersection of line segments [loc1(g), loc2(g)] and
          0       0
    [loc1(g ), loc2(g )] is a line segment [P, Q] such that P Deﬁnition 6 (P CI(G, o, v, g, t)) Let G be a go theory, o
    is visited before Q in both g and g0 and          be an object, and v be a total order on atoms of Go such
     −      +  0      −  0    +                       that C(G, o, v) has a solution. Let g be an atom in Go
  • t1 (g) ≤ t2 (g ) and t1 (g ) ≤ t2 (g).
                                                      such that T CI(G, o, v, g) is deﬁned and t be any time
4.1  Temporal and Positional Certainty Intervals      point in T CI(G, o, v, g). The positional certainty interval,
In this section, we deﬁne the notions of temporal and posi- P CI(G, o, v, g, t), of atom g at time t w.r.t. ordering v is
tional uncertainty.                                   deﬁned as follows:
Deﬁnition 4 (C(G, o, v)) Let G be a go theory and o be an • Let C(g, t) be the set of constraints:
                                         o
object id. Let v be any total ordering on G . The set          dg,t            dg,t
                                                            –   +   ≤ t − Sg ≤ −
C(G, o, v) of linear constraints associated with G, o, v is de- v (g)         v  (g)
                                                               D−dg,t           D−dg,t
ﬁned as follows:                                            –  v+(g) ≤ Eg − t ≤  v−(g)
                     −  +  −  +  −   +     o
  • ∀g = go(o, P1, P2, t1 , t1 , t2 , t2 , v , v ) ∈ G    where D  =  dist(loc1(g), loc2(g)). Note that this is
         −         +     −         +                      a linear program when g is ﬁxed because many terms
      – t1 ≤ Sg ≤ t1 and t2 ≤ Eg ≤ t2                                      −     +
         −                            +                   above (such as D, v (g),v (g) are constants).
      – v  × (Eg − Sg) ≤ dist(P1, P2) ≤ v × (Eg − Sg)          min
                                                        • Let dg,t be the result of solving the linear program
               0    o             0
  • for every g, g ∈ G such that g v g : Eg ≤ Sg0 .
                                                              minimize dg,t subject to C(G, o, v) ∪ C(g, t).
Sg and Eg are variables associated with an atom g which
                                                               max
intuitively denote the start time and end time of the movement • Let dg,t be obtained by maximizing the objective func-
described by g. When Go has only one atom g,we will use   tion in the above linear program (instead of minimizing).
                                                                −                                     min
C(g) as a short hand notation.                          • Let  P  (G, o, v, g, t) be the point exactly dg,t
             g = go(o, (40, 10), (70, 50), 12, 13, 21, 21, 4, units away from loc1(g) on the line connecting
Example 1 Let                                                                            +
10)    g0 =  go(o, (70, 50), (30, 80), 20, 21, 30, 31, 4, 10) loc1(g), loc2(g) and likewise, let P (G, o, v, g, t) be
   and                                            .                       max
Suppose G = {g, g0} and g v g0. Then C(G, o, v) contains  the point exactly dg,t units away from loc1(g) on the
the following constraints:                                same line.
                                                      The positional certainty interval P CI(G, o, v, g, t) is the
  • 12 ≤ Sg ≤ 13, 21 ≤ Eg ≤ 21 ,
                                                      line segment from P −(G, o, v, g, t) to P +(G, o, v, g, t).
  • 4 × (Eg − Sg) ≤ 50 ≤ 10 × (Eg − Sg).
                                                      When  Go has only one atom g we use the shorter notation
  • 20 ≤ Sg0 ≤ 21, 30 ≤ Eg0 ≤ 31 ,
                                                      P CI(g, t).
  • 4 × (Eg0 − Sg0 ) ≤ 50 ≤ 10 × (Eg − Sg),
                                                      Lemma 2   Let g be a go atom such that T CI(g) is deﬁned,
  • E  ≤ S 0 .
     g    g                                           I be an interpretation, and suppose t ∈ T CI(g). If I |= g,
We now use linear programming methods to deﬁne the tem- then I(o, t) is on the line segment P CI(g, t).
poral certainty interval of a go atom.
                                                      4.2  Binary go-theories about a single time point
Deﬁnition 5 (T CI(G, o, v, g)) Let G be a go theory, o be an
object, and v be a total order on Go such that C(G, o, v) has A binary go-theory is one which contains two go-atoms G =
                                                      {g, g0} where obj(g) = o, obj(g0) = o0. Consider a ground
a solution. The temporal certainty interval, T CI(G, o, v, g),        0
                o                            −  +     far() query far(o, o , t1, t2, d) where t1 = t2. We need to
of an atom g ∈ G  w.r.t. v is the time interval [T , T ]                               0
where                                                 check if the distance between o and o is guaranteed to be
                                                      greater than d at time t. The following lemma presents neces-
     −
  • T  is the result of solving the linear program: “maxi- sary and sufﬁcient conditions for entailment of such queries
    mize Sg subject to C(G, o, v)”,                   under the above assumptions.
     +
  • T  is the result of solving the linear program: “mini- Lemma 3 Let G = {g, g0} be a go-theory such that
    mize Eg subject to C(G, o, v)”.                   obj(g) = o and obj(g0) = o0 and let f = far(o, o0, d, t, t)
T CI(G, o, v, g) is undeﬁned if T − > T +.            be a ground atom. G |= f iff
When Go  has only one atom g we will T CI(g) as a short • t ∈ T CI(g) and t ∈ T CI(g0) and
hand notation. Intuitively, T CI(G, o, v, g) is the interval • The minimum distance between line segments P CI(g, t)
when we know for sure that object o is within the line speci- and P CI(g0, t) is greater than d.
ﬁed in go-atom g.
                                                      Example 3  Let g = go(o, (40, 10), (70, 50), 12, 13, 21, 21,
Example 2 Let g and g0 be the two go atoms in Example 4, 10) and g0 = go(o0, (55, 20), (45, 80), 17, 18, 32, 33, 2, 6)
1. T CI(g) is [13, 21]. If G = {g, g0} and g v g0, then be two atoms. Let G = {g, g0} and f = far(o, o0, 5, 19, 19).
T CI(G, o, v, g0) = [21, 30].                         T CI(g) = [13, 21] and T CI(g0) = [18, 32] both include the                                                      Deﬁnition 8 (d-neighbourhood) Let g be a ground go-atom
                                                      such that T CI(g) is deﬁned. Let d be a real number and
                                                      let T = [t1, t2] be a time interval such that T ⊆ T CI(g).
                                                      The d-neighbourhood of g during T , denoted Nbr(g, T, d) =
                                                      {(x, y, t) | t1 ≤ t ≤ t2 and (x, y) ∈ NearP ts(g, t, d)}
                                                      where NearP ts(g, t, d) = {(x, y) | ∃(x0, y0) ∈ P CI(g, t)
                                                      and dist((x, y), (x0y0)) ≤ d}.
                                                      Intuitively NearP ts(g, t, d) is the set of all points p such that
                                                      all points on the line segment P CI(g, t) which are d units or
                                                      less in distance from p at time t. Similarly Nbr(g, T, d) is the
                                                  0
Figure 1: The polygon on the left is the space envelope of g set of all points (x, y, t) such that it is possible for obj(g) to
during [19, 21] and the volume on the right is 5-neigbourhood be within d units of (x, y) at some time t in interval T .
of g during time interval [19, 21]. g and g0 are as deﬁned in
Examples 4,5 and 6.                                   Theorem 3  (i) Nbr(g, T, d) is a convex set. (ii) If d = 0,
                                                      then Nbr(g, T, d) = SE(g, T ).
                                                      Example 5  Let g = go(o, (40, 10), (70, 50), 12, 13, 19, 21,
time point 19. At time 19, o is somewhere on the line segment
                                                      4, 10) be a go atom. The 5-neighborhood of g over time in-
P CI(g, 19) = [(58, 34), (65.2, 43.6)] and object o’ is on the
                                                      terval [19, 21] is shown on the far right hand side of Figure 1.
line segment P CI(g0, 19) = [(54.67, 21.97), (53.08, 31.84)].
                                                      It is easy to see that it is a convex set.
The minimum distance between these two lines is 33.73 which
is greater than 5 so G |= f.                          The following theorem states necessary and sufﬁcient condi-
                                                      tions under which {g, g0} |= f.
  Consider the atom near(o, o0, d, t, t) atom instead of
      0                                                                       0                    0
far(o, o , d, t, t) then the second bullet of Lemma 3 becomes: Theorem 4 Let f = far(o, o , d, t1, t2) and G = {g, g } be a
“The maximum  distance between line segments P CI(g, t) go theory where obj(g) = o and obj(g0) = o0. G |= f iff
and P CI(g0, t) is less than or equal to d”. This maxi-                                     0
                                                        • [t1, t2] ⊆ T CI(g) and [t1, t2] ⊆ T CI(g )
mum distance is achieved at the end points of P CI(g, t) and
                                                        • Nbr(g, [t , t ], d) ∩ SE(g0, [t , t ]) = ∅
P CI(g0, t), e.g. P −(g, t) and P +(g0, t). However the mini-     1  2             1  2
mum distance between P CI(g, t) and P CI(g0, t) is not nec- Thus, an algorithm to solve the far()-entailment problem only
essarily at the end points hence its computation is more com- needs to check both these conditions. [Mantyla, 1988] pro-
plex.                                                 vides polynomial algorithms to check for the intersection of
                                                      two convex sets — these can be used directly to check the
4.3  Binary go-theories with temporal intervals       second condition above.
The complexity of computing far queries gets magniﬁed even Example 6 Let g = go(o, (40, 10), (70, 50), 12, 13, 21, 21, 4,
more when we consider the case t1 ≤ t2. For the near atom 10) and g0 = go(o0, (55, 20), (45, 80), 17, 18, 32, 33, 2, 6) be
this is easy because it is enough to check the distance at the two go atoms. Let G = {g, g0} and f = far(o, o0, 5, 19, 21).
end points of P CI(g, t) and as shown in [Yaman et al., 2004] Then T CI(g) = [13, 21] and T CI(g0) = [18, 32].
end points of P CI(g, t) are piecewise linear functions over a Both include the time interval [19, 21]. Figure 1 shows
time interval. This is not enough for the far atom. For this Nbr(g, [19, 21], 5) and SE(g0, [19, 21]). It is apparent from
reason answering far queries over time intervals requires a the ﬁgure that the two do not intersect: hence G |= f.
different approach then the one in [Yaman et al., 2004].
  We ﬁrst deﬁne the space envelope of a go-atom. Intu- 4.4 Arbitrary Go-theories with temporal intervals
itively, the space envelope of a go-atom g is the set of all We now remove the restriction that G is a binary go-theory.
(x, y, t)-triples such that there exists a model I of g in which Doing so introduces several complications. For any single o,
I(obj(g), t) = (x, y). In other words, it deﬁnes where and there may be many possible total orderings associated with
when it is possible for object o to be.               Go. Furthermore, for some theories we can predict the pos-
Deﬁnition 7 Let g be a ground go-atom such that T CI(g) sible locations of an object not only in the certainty interval
is deﬁned and let T = [t1, t2] be any time interval such that of an atom, but also during a time interval that spans over
T ⊆  T CI(g). The space envelope, SE(g, T ) of g during several atoms. The following lemma gives the necessary and
interval T is {(x, y, t) | t ∈ T and (x, y) ∈ P CI(g, t)}. sufﬁcient conditions when this can be done.
Theorem 2 SE(g, T ) is a convex set.                  Lemma 4   Let G be a go-theory, o be an object, and v be a
                                                                    o
              0       0                               total order on G such that C(G, o, v) has a solution. Sup-
Example 4 Let g = go(o , (55, 20), (45, 80), 17, 18, 32, 33,                               o
                                   0                  pose g1 v g2 . . . v gn are the atoms of G . T CI(G, o, v
2, 6) be a go atom. The space envelope of g over time interval , g ) ∪ T CI(G, o v, g ) . . . ∪ T CI(G, o, v, g ) is a sin-
[19, 21], is shown in Figure 1 on the left side. It is easy to see i     i+1                   j
        0                                             gle time interval iff for every 1 ≤ i ≤ k < j ≤ n with
that SE(g , [19, 21]) is convex.                                          −   +
                                                      T CI(G, o, v, gk) = [Tk , Tk ] the following are true
We now deﬁne the set of points that are closer than a given • T + = T −
distance d to any possible location of an object at a given k    k+1
time.                                                   • loc2(gk) = loc1(gk+1)Deﬁnition 9 Let G be a go-theory, o be an object, and v
be a total order on Go such that C(G, o, v) has a solution.
Suppose S ⊆ Go. S is temporally relevant to time interval
[t1, t2] is iff
  • The atoms in S satisfy the conditions in lemma 4 and

  • There are atoms g, g’ in S such that t1 ∈ T CI(G, o, v
                            0
    , g) and t2 ∈ T CI(G, o, v, g )

Example 7 Let g1 = go(o, (40, 10), (70, 50), 12, 13, 21, 21, 4,
10) and g2 =  go(o, (70, 50), (30, 80), 20, 21, 30, 31, 4, 10)
be go atoms.  If G  =   {g1, g2} and g1 v   g2 then
C(G, o, v) has a solution. Moreover T CI(G, o, v, g1) =
                                                                                    0
[13, 21], T CI(G, o, v, g2) = [21, 30] and T CI(G, o, v Figure 2: The space envelope of o with respect to G and
, g1) ∪ T CI(G, o, v, g2) is a single interval. Suppose 5-neighbourhood of o w.r.t. G and v during time interval
T = [19, 30] then {g1, g2} is temporally relevant to T . [19, 30]. G and v are as deﬁned in Example 8
We now generalize deﬁnitions 7 and 8 to accommodate non-
binary go-theories.                                   Algorithm CheckFar(G, v, v0, f)
                                                                       0
Deﬁnition 10 (SE(G, o, v, T )) Let G be a go-theory, o be Suppose f = far(o, o , d, t1, t2);
                                                                         0 0
an object, and v be a total order on Go such that C(G, o, v) if C(G, o, v) or C(G, o , v ) has no solution then return true
                                                       Let S ⊆ Go such that S is temporally relevant to [t t ]
has a solution. If T = [t1, t2] is a time interval, then   o              o                    1 2
                                                                 o0
SE(G, o, v, T ) is the set of all points (x, y, t) such that Let So0 ⊆ G such that So0 is temporally relevant to [t1t2]
                                                       if no such S or S 0 exists then return false
  • t ∈ T and t ∈ T CI(G, o, v, g) for some g ∈ Go,             o    o
                                                       Let T1, T2 . . . Tn be the convex partition of [t1, t2]
  • (x, y) is on P CI(G, o, v, g, t).                  for each i < n do
                                                                                  0  0
SE(G, o, v, T ) is not deﬁned if there is a time point t ∈ T if Nbr(G, o, v, Ti, d) ∩ SE(G, o , v , Ti]) 6= ∅
such that for all g ∈ Go, t 6∈ T CI(G, v, g).           then return false
                                                       end for
          SE(G, o, v, T )
  Note that             is not necessarily convex when return true
T spans over multiple go atoms. We can generalize Nbr to
Nbr(G, o, v, T, d) in a similar manner — these are omitted Theorem 6 Suppose G is a go-theory and  f   =
                                                            0
due to space constraints. Nbr(G, v, T, d) also may not be far(o, o , d, t1, t2) is a ground atom. Then: f is en-
                                                                                                        0
convex. We now state a theorem describing the conditions tailed by G iff for every total order v and v0 on Go and Go ,
under which a go theory G entails a far() atom.       the algorithm CheckFar(G, v, v0, f) returns “true”.
Theorem 5 Suppose G is a go-theory and o, o0 are objects.
                          0
The ground atom f = far(o, o , d, t1, t2) is a logical conse- 5 Implementation
quence of G iff for every pair of total orders v and v0 on Go
      0                                               We have implemented the CheckFar algorithm in Matlab.
and Go such that C(G, o, v) and C(G, o0, v0) are solvable: Our test results show that CheckFar(G, v, v0, f) runs in lin-
  • ∃S ⊆ Go such that S is temporally relevant to [t , t ] ear time. Note that a single run of CheckFar does not check
                                            1  2                                        0
      0    o0          0                              if G |= f. In fact CheckFar(G, v, v , f) should be exe-
  • ∃S  ⊆ G  such that S is temporally relevant to [t1, t2] cuted for every possible v, v0 pair that produce a solvable
                                 0   0
  • Nbr(G, o, v, [t1, t2], d) ∩ SE(G, o , v , [t1, t2]) = ∅. set of constraints. Although in theory this number is exponen-
                                                      tial which leads to coNP-hardness, in practice we expect this
Example 8 Let g1 and g2 be go atoms in Example 7 and
g0 = go(o0, (55, 20), (45, 80), 17, 18, 32, 33, 2, 6). Let G = number to be bounded by a manageable constant k. In gen-
        0                0                            eral individual movements can have some uncertainty how-
{g1, g2, g } and f = far(o, o , 5, 19, 30). If g1 v g2 and
v0=  ∅ then Figure 2 shows Nbr(G, o, v, [19, 30], 5) and ever the order in which they are going to be accomplished is
SE(G, o0, v0, [19, 30]). The ﬁgure also shows that the sets usually well known. Figure 3 shows the running time of 3
intersect - hence G 6|= f.                            far queries as we vary the number of atoms per object when
                                                      k =  256. Each data point is an average of 300 runs. For
  As Nbr(G, o, v, T, d) and SE(G, o0, v, T ) are not always these experiments we created go theories G with at most 16
convex, computing their intersection is tricky. We partition total orderings and all atoms are in a rectangle of size 300
T into subintervals T1, T2, . . . , Tn (we call this a convex by 400. We queried those theories using three query tem-
                                                                        0                      0
partition of T ) such that for all i < n, the end point of Ti plates Q1 = far(o, o , 1, t1, t2), Q2 = far(o, o , 50, t1, t2)
is the end point of the temporal certainty interval of some and Q3 = far(o, o0, 10000, t , t ) where [t , t ] is a random
            0                                    0                            1  2        1  2
g ∈ Go ∪  Go . It is easy to verify that n ≤ |Go| + |Go |. time interval with length 10. The reader will notice that as the
                                        0
For each Ti, Nbr(G, o, v, Ti, d) and SE(G, o , v, Ti) are distance increases, the time to compute the query decreases.
convex and we leverage this in the CheckFar algorithm In the case of Q3 which is trivially false it takes almost no
below.                                                time to return the answer. Queries Q1 and Q2 take at most
                                                      0.6 seconds for go theories with 1000 atoms per object.