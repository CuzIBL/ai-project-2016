                                      Multiset Ordering Constraints* 

    Alan Frisch and Ian Miguel Zeynep Kiziltan Brahim Hnich and Toby Walsh 
       Dept of Computer Science Dept of Information Science Cork Constraint Computation Centre 
           University of York Uppsala University University College Cork 
                 England Sweden Ireland 
     {frisch, ianm}@cs.york.ac.uk Zeynep.Kiziltan@dis.uu,se {brahim,tw}@4c.ucc.ie 

                        Abstract 

     We identify a new and important global (or non-
     binary) constraint which ensures that the values 
     taken by two vectors of variables, when viewed 
     as multisets, are ordered. This constraint is use•
     ful for a number of different applications including 
     breaking symmetry and fuzzy constraint satisfac•
     tion. We propose and implement a linear time al•
     gorithm for enforcing generalised arc-consistency 
     on such a multiset ordering constraint. Experimen•
     tal results show considerable promise. 

1 Introduction 
Global (or non-binary) constraints are one of the factors cen•
tral to the success of constraint programming [Regin, 1994; 
1996; Beldiceanu, 2000]. Global constraints specify patterns 
that occur in many problems, and call efficient and effective 
constraint propagation algorithms. In this paper, we identify 
a new and important global constraint. This constraint en•
sures that the values taken by two vectors of variables, when 
viewed as multisets, are ordered. Such a constraint is use•
ful in a number of domains. For example, in the progressive 
party problem (probO13 in csplib.org), we wish to assign a 
host for each guest and period. We can model this with a vec•
tor of variables for each period. Each variable is assigned the  Vectors of variables are indexed from 0. The minimum 
host for a particular guest. This model has unnecessary sym•   element in the domain of x1 is , and the maximum 
metry as the periods can be freely permuted. We can break      is max(xl). The function floor(x) assigns all variables in f 
this symmetry by considering the multiset of values associ•    to their minimum values, whilst ceil(x) assigns all to their 
ated with each vector and ordering these multisets.The aim of  maximums. The vector is identical to x except v now 
this paper is to study such multiset ordering constraints and to has the domain . An occurrence vector occ(x) associ•
develop efficient and effective techniques for enforcing them. ated with x is indexed in decreasing order from the maximum 
                                                               max(x) to the minimum rnin(x) value from the domains in 
2 Formal Background                                            x. The ith element of occ(x) is the number of occurrences of 
                                                               max(x) - i in x. When comparing two occurrence vectors, 
A constraint satisfaction problem (CSP) consists of a set of   we assume they start and end with the occurrence of the same 
variables, each with a finite domain of values, and a set of   value, adding leading/ trailing zeroes as necessary. Finally, 
constraints that specify allowed values for subsets of vari•            iff x is lexicographically less than or equal to y. 
ables. A solution is an assignment of values to the variables 
satisfying the constraints. To find such solutions, we explore 3 Motivating applications 
partial assignments enforcing a local consistency like gener•
alized arc-consistency (GAC). A constraint is GAC iff, when    3.1 Matrix symmetry 

   * Support received by EPSRC under GR/R30792 and by the Sci• Many constraints programs contain matrices of decision vari•
ence Foundation Ireland. We thank Chris Beck and Chris Jefferson. ables (so called "matrix models"), and the rows and/or 


CONSTRAINTS                                                                                                           221  columns of these matrices are symmetric and can be permuted   all symmetry (but it is unlikely that any polynomial set of 
 [Flener et al,, 2002]. Such symmetries are very difficult to  constraints does). Consider the symmetric matrices: 
 deal with as there are a super-exponential number of permu•
 tations of the rows or columns to consider. There are several 
 ways to break symmetry in a CSP, such as SBDS [Gent and       Both have rows that are multiset ordered, and rows and 
 Smith, 2000] or SBDD [Fahle et al, 2001]. One of the most     columns that are lex ordered. Multiset ordering the rows and 
 effective, and the one which we will concentrate on as a major lex ordering the columns is again incomparable to lex order•
 application for a multiset ordering constraint, is adding extra ing rows and columns. Consider the symmetric matrices: 
 symmetry-breaking constraints to an initial model. Existing 
 techniques for dealing with such symmetries typically elimi•
 nate only some of the symmetry. Additional techniques, like 
 those proposed here, are therefore of considerable value. 
   The progressive party problem mentioned earlier has a 2d    The first matrix has rows that are multiset ordered and 
 matrix of decision variables with matrix symmetry. The rows   columns that are lex ordered. However, its rows are not lex 
 of the matrix are the guests, the columns are the periods. Each ordered. The second matrix has rows and columns that are 
 variable gives the host assigned to a given guest in a given pe• lex ordered but does not have rows that are multiset ordered. 
riod. As periods are indistinguishable, the columns of the ma• Whilst the two orderings are theoretically incomparable, our 
trix are symmetric. One way to break such column symmetry      experimental results (see later) show that multiset ordering 
 is to lex order the columns [Frisch et al., 2002]. Similarly, the rows and lex ordering the columns is often the most ef•
as guests can be indistinguishable, (some of) the rows may     fective symmetry breaking constraint currently known. 
be symmetric and can be lex ordered. Alternatively, we can 
treat each row and/or column as a multiset and break such      3.2 Fuzzy constraints 
symmetry by multiset ordering the rows and/or columns.         Another application for multiset ordering is to fuzzy CSPs. A 
   Unlike lex ordering, multiset ordering the rows of a matrix fuzzy constraint associates a degree of satisfaction to an as•
may not eliminate all row symmetry. For example, consider      signment tuple for the variables it constrains. To combine de•
the symmetric matrices:                                        grees of satisfaction, we can use a combination operator like 
                                                               the minimum function. Unfortunately, the minimum function 
                                                               may cause a drowning effect when one poorly satisfied con•
                                                               straint 'drowns' many highly satisfied constraints. One solu•
Both satisfy the constraint that the first row is multiset less 
                                                               tion is to collect a vector of degrees of satisfaction, sort these 
than the second. It is therefore a little surprising to dis•
                                                               values in ascending order and compare them lexicographi•
cover that multiset ordering (which does not break all row 
                                                               cally. This leximin combination operator identifies the as•
symmetry) is not dominated by lex ordering (which does) 
                                                               signment that violates the fewest constraints [Fargier, 1994]. 
but is incomparable. For example, but 
                                                               This induces an ordering identical to the multiset ordering ex•
                                                               cept that the lower elements of the satisfaction scale are the 
   When we have both row and column symmetry, we can           more significant. It is simple to modify a multiset ordering 
multiset order both rows and columns. Like lex ordering both   constraint to consider the values in a reverse order. To solve 
rows and columns, this may not eliminate all row and column    such leximin fuzzy CSPs, we can then use branch and bound, 
symmetry. Consider the symmetric matrices:                     adding an ordering constraint when we find a solution to en•
                                                               sure that future solutions are greater in the leximin ordering. 

Both have multiset ordered rows and columns. Unsurpris•        4 GAC algorithm for multiset ordering 
ingly, multiset ordering rows and columns is incomparable 
                                                               The last section motivated why we want multiset ordering 
to lex ordering rows and columns. Consider the symmetric 
                                                               constraints. We need, however, to be able to propagate such 
matrices: 
                                                               constraints efficiently. We therefore developed an efficient 
                                                               GAC algorithm for such constraints. 

The first has lex ordered rows and columns, but the columns    4.1 Background 
are not multiset ordered. The second has rows and columns      The algorithm exploits two theoretical results. The first re•
that are multiset ordered but the columns are not lex ordered. duces the problem to testing support for upper bounds of x 
  An alternative way to deal with row and column symmetry      and lower bounds of y on suitable ground vectors. The sec•
is to multiset order in one dimension and apply the symme•     ond reduces these tests to lex ordering suitable occurrence 
try breaking method of our choice in the other dimension.      vectors. Identical results hold for the strict multiset ordering 
This is one of the best features of using multiset ordering to constraint but for reasons of space we omit them here. 
break symmetry. It is compatible with any other method in      Lemma 1 Given two disjoint and non-repeating vectors of 
the other dimension. For instance, we can multiset order the   variables, x and y, with non-empty domains, GAC(x <my) 
rows and lex order the columns. Preliminary results in [Kizil-
tan and Smith, 2002] suggest that such a combined method 
is very promising. This combined method does not eliminate 


222                                                                                                      CONSTRAINTS  Proof: (=>) As the constraint is GAC, all values have sup­    domain of x2 • Now consider x3. Changing to 
 port. In particular, has support. The best                                                                     decreases 
 support comes if all the other variables in x take their mini- the number of occurrences of by 1, and 

 mums, and all the variables in y take their maximums. Hence,  increases the number of occurrences of max(x3) = 4 by 1. 
                                Similarly, for y1.             The occurrence vectors beneath a would now be lex ordered 

   («=) The first constraint ensures that rnax(x1) is supported. the wrong way. We therefore also prune the value = 4, 
The values which support max(xi) also support all smaller      leaving a single supported value 2 in the domain of x3. As 
                                                               x  and x  have singleton domains, their values have support. 
 values. Hence, all the values in the domain of Xi are sup­     4      5
ported. By an analogous argument, all the values in the do­       Similarly, we check the minimums of the for support. 

 main of yi are supported. Hence the constraint is GAC. QED.   However, rather than prune values above (and in some cases 
   The next lemma reduces these tests for support to lex or­   equal to) , there is now a dual pointer . and we prune values 
dering suitable occurrence vectors.                            in the domains of up to (and in some cases equal to) The 
 Lemma 2 Given two multisets of values, M and N, M <           pointer is the largest index such that the occurrence vectors 
                                                         m     beneath it are lex ordered the wrong way. Any value less than 
                                                                 cannot hope to change the lex ordering 
 Proof: See [Kiziltan and Walsh, 2002].                        will still order the vectors the wrong way. Such values can 
4.2 A worked example                                           therefore be pruned. Once we have considered each of the yj, 
                                                               we have the following generalized arc-consistent vectors: 
Based on these lemmas, we have designed an efficient algo­
rithm for enforcing GAC on a multiset ordering constraint. 
The algorithm goes through the xt and yj checking for sup­
port in the appropriate occurrence vectors. Incremental com­   4.3 Algorithm details 
putation of the lex ordering test avoids repetition of work.   The algorithm uses two pointers and and two flags 
Consider the multiset ordering constraint where: and S to avoid traversing the occurrence vectors each time we 
                                                               look for support. The pointer is set to to the most significant 
                                                               index above which all occurrences are pair-wise equal and at 
                                                               ά they are strictly ordered. If the vectors are equal then ά is 
 We construct occurrence vectors for floor(x) and ceil(y), in­ set to - The pointer is set to the most significant index 
dexed from 5 to 0: 
                                                               below ά such that the occurrence vectors are lex ordered the 
                                                               wrong way. If no such index exists, we set to — 00. The 
                                                               flag is set to true if all the indices between ά and (3 are 
                                                               pair-wise equal and the flag is set to true if the sub-vectors 
 Recall that indexdenotes the number of 
                                                               below are lex ordered the wrong way. For example, given 
occurrences of the For example, index 4 is 
                                                               the occurrence vectors in section 4.2, ά is set to 4, to 2, and 
2 as the value 4 occurs twice. 
                                                               the flags and are set to true. 
   We first check if If so, we 
                                                                 We summarise the major steps the algorithm performs: 
can fail immediately because no value for any variable can 
have support. Here, . In fact,                                 A. 
we record (in a pointer, ά) that the two occurrence vectors    B. according to their definitions 
are lex ordered by index 4 of occ(floor{x)), which is strictly 
                                                               C. For each x    If its maximum disturbs the lex ordering 
smaller than index 4 of occ(ceil(y)). This means that we will                 i
                                                                    on the occurrence vectors, tighten its upper-bound to ά 
fail to find support in the y  if any of the x  is assigned a new 
                          j             i                           when the occurrence vectors are lex ordered below ά, 
value greater than 4. We now go through the x  checking for 
                                             i                      otherwise to 
support for their maximum values, and then the yi checking 
for support for their minimum values.                          D. For each yi If its minimum disturbs the lex ordering on 
                                                                    the occurrence vectors, then tighten its lower-bound to 
   Consider X0. AS it has a singleton domain, and 
                                     its only value must              when the occurrence vectors are lex ordered below a, 
have support so we skip it. Now consider x\. Do                     otherwise to + 1. 
its values have support? Changing occ(floor{x)) to               When we prune a value, we do not need to check re­
                                             decreases the     cursively for previous support. Pruning changes neither the 
number of occurrences ofmm(ii) = 4 by 1, and increases         lower bounds of x nor the upper bounds of y. These values 
the number of occurrences of by 1. As                          continue to provide support. The exception is when a domain 
                   this upsets the lex ordering of the two oc­ is a singleton, and pruning causes a domain wipe-out. 
currence vectors. We therefore prune all values in the domain    We now give pseudo-code for an algorithm that maintains 

of x1 larger than ά. This leaves a single supported value, 4.  GAC on a multiset ordering constraint between vectors x and 
   Now consider x2. Changing to y which are of length n and m respectively. As the algorithm 
                                                  decreases    reasons about occurrences vectors, the original vectors need 

the number of occurrences of min (x2) = 3 by 1, and            not be identical in length (though they often are). 
increases the number of occurrences of                           The algorithm is called whenever lower bounds of x1 or 
by 1. As with x1 any value of x2 larger than                   upper bounds of yj change. Lines Al to A3 build the oc­
upsets the lex ordering. We therefore prune 5 from the         currence vectors ox and dy. Line Bl calls the procedure to 


CONSTRAINTS                                                                                                           223 224                                                                                                       CONSTRAINTS is equivalent to GAC on the original multiset ordering con•
straint. However, such an arithmetic constraint is only feasi•
ble for small n. Further, most existing solvers will not enforce 
BC on such an arithmetic constraint, but will delay it until all 
but one of the variables are instantiated. 

5.2 Decomposition 
Multiset ordering is equivalent to the lex ordering the asso•
ciated occurrence vectors. As we have efficient algorithms 
for constructing occurrence vectors (via the global cardinal•  Table 1: 5-13-29 progressive party problem using row-by-
ity constraint [Regin, 1996]) and for lex ordering [Frisch et  row labelling. 
al., 2002], this might be an alternative approach. However, 
as the following theorem shows, such a decomposition hin•
ders constraint propagation. Also, the two global cardinality  for each guest and period, such that a guest crew never visits 
constraints in such a decomposition are more expensive to en•  the same host twice, no two guest crews meet more than once, 
force than the algorithm presented here. We write gcc(x, ox)   and the spare capacity of each host boat, after accommodating 
for the global cardinality constraint that channels from a vec• its own crew, is not exceeded (probO13 in csplib.org). 
tor of variables x to the associated occurrence vector ox.       A matrix model of this problem [Smith et al., 1995] is a 
                                                               2-d matrix of guests x periods where each variable is as•
                                                               signed a host representing that a host is accommodating a 
                                                               particular guest in a given time period. The rows are the 
                                                               guests, the columns are the periods. This model has col•
                                                               umn and partial row symmetry: any two periods, and any 
                                                               two guests with the same crew size are indistinguishable. We 
                                                               consider the 13-hosts and 29 guests problem with 5 and 6 
                                                               time periods, referred as 5-13-29 and 6-13-29. These prob•
                                                               lems have ;P!14!2!4!5!7! row and column symmetries where 
   Another approach is to use the sorted constraint in the     p is the number of time periods. The actual data can be 
Eclipse solver. This ensures that the values taken by one vec• found in csplib.org. Due to the problem constraints, no pair 
tor of variables are identical but in sorted order to the values of rows/columns can be equal, hence we can safely pose strict 
taken by a second vector of variables. To post a multiset or•  lex ordering. However, any two distinct rows/columns might 
dering constraint on two vectors, we can channel each into a   be equal when viewed as multisets. 
sorted vector and lex order these. The above example demon•      As in [Smith et al., 1995], the guest boats are ordered in 
strates that such a decomposition again hinders propagation.   descending order of their size. We order the host boats in 
The sorting constraint is also more expensive to enforce.      descending order of spare capacity to choose a value in a 
                                                               succeed-first manner. Results obtained by row-by-row, and 
6 Experimental results                                         column-by-column labelling strategies are given in Tables 1 
We designed some experiments to test three goals. First, is    and 2. With row-by-row labelling, we cannot solve 6-13-29 
multiset ordering an effective method for dealing with row     with or without symmetry breaking. For the 5-13-29 problem, 
and/or column symmetry? Second, how does multiset order•       <ieXK breaks a lot more row symmetry thanHowever, 
ing compare to lex ordering? Which one breaks more sym•        the reverse is true for the columns. Here, ' does not 
metry? Is a combined method, which multiset orders one di•     break any symmetry but does. Multiset ordering one 
mension and lex orders the other one of the matrix, superior?  dimension of a matrix therefore does not necessarily break 
Third, does our GAC algorithm do more inference in prac•       less symmetry than lex ordering the same dimension. Such 
tice than the decomposition? Similarly, is the algorithm more  phenomena occur through interactions with the search strat•
efficient in practice than its decomposition?                  egy: a search strategy might already lex order, so multiset 
   The symmetry breaking constraints we used are strict lex    ordering constraints break additional symmetry. The smallest 
ordering on the columns on the rows mul•                       search tree and also the least solving time is obtained by 
tiset ordering on the rows , (strict) multiset ordering        <lexR. This supports our conjecture that lex ordering one di•
on the columns and combinations of these                       mension combined with multiset ordering the other can break 
constraints. Such constraints are posted between adjacent      more symmetry than lex/multiset ordering both dimensions. 
rows/columns. The results of the experiments are shown in        With column-by-column labelling, we are able to solve the 
tables where a "-" means no result is obtained in 1 hour (3600 6-13-29 problem. Neither of break 
secs). The experiments are done using 1LOG Solver 5.2 on a     any symmetry. The smallest search tree is obtained by 
 1000MHz pentium III with 256 Mb RAM using Windows XP.         This supports our conjecture that multiset ordering one di•
                                                               mension can break more symmetry than lex ordering the same 
6.1 Progressive Party Problem                                  or both dimensions. If the search strategy already orders both 
There are a set of host boats, each with a capacity, and a set of dimensions lexicographically, imposing a constraint like mul•
guest boats, each with a crew size. We wish to assign a host   tiset ordering in one dimension breaks additional symmetry. 


CONSTRAINTS                                                                                                          225 