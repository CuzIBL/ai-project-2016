                 A Logic Program Characterization of Causal Theories∗
                                             Paolo Ferraris
                                   Department of Computer Sciences
                                      University of Texas at Austin
                                       1 University Station C0500
                                           Austin, TX 78705
                                           otto@cs.utexas.edu

                    Abstract                          says that Boolean ﬂuent p is normally true. The frame prob-
                                                      lem [McCarthy and Hayes, 1969] is solved in causal logic
    Nonmonotonic causal logic, invented by McCain     using the rules
    and Turner, is a formalism well suited for repre-
    senting knowledge about actions, and the deﬁnite                   pt+1 ⇐ pt ∧ pt+1
                                                                                                      (4)
    fragment of that formalism has been implemented                   ¬pt+1 ⇐¬pt  ∧¬pt+1.
    in the reasoning and planning system called CCalc.
    A 1997 theorem due to McCain shows how to trans-  These rules express inertia: if a ﬂuent p is true (false) at time
    late deﬁnite causal theories into logic programming t then normally it remains true (false) at time t +1.
    under the answer set semantics, and thus opens the  The equivalence of two ﬂuents or actions can be expressed
                                                      by equivalences in the head. For instance, to express that two
    possibility of using answer set programming for the                    
    implementation of such theories. In this paper we actions constants a and a are synonymous, we can use causal
                                                      rule
    propose a generalization of McCain’s theorem that                          
    extends it in two directions. First, it is applicable to              at ≡ at ⇐.                 (5)
    arbitrary causal theories, not only deﬁnite. Second, Rules of those kind are used to semantically characterize
    it covers causal theories of a more general kind, the relationship between modules in the Modular Action De-
    which can describe non-Boolean ﬂuents.            scription language MAD [Lifschitz and Ren, 2006].Forin-
                                                      stance, [Erdo˘gan and Lifschitz, 2006; Erdo˘gan et al., 2007]
1  Introduction                                       use an equivalence of this kind to state that pushing the box
                                                      in the Monkey and Bananas domain is a specialization of a
Causal logic [McCain and Turner, 1997] is a formalism for more general action “move”.
knowledge representation, especially suited for representing The language of causal theories has been extended
effects of actions. Causal theories are syntactically simple but in [Giunchiglia et al., 2004] to handle multi-valued constants,
also very general: they consist of causal rules of the form in which a constant may assume values different from true
                      F ⇐  G                    (1)   and false. For instance, we can express the fact that object
                                                      x is in location l with loc(x)=l. One advantage of us-
where F  and G are propositional formulas. Intuitively, ing loc(x)=l instead of the Boolean ﬂuent loc(x, l) is that
rule (1) says that there is a cause for F to be true if G is loc(x)=l implicitly expresses the commonsense fact that
true. For instance, the causal rule                   every object is exactly in one position.
                                                        In many useful causal rules, such as (2)–(4), the formula
                     pt+1 ⇐ at                  (2)
                                                      before the “⇐” is a Boolean literal, a non-Boolean atom
can be used to describe the effect of an action a on a Boolean (such as loc(x)=l)or⊥. Rules of this kinds are called
ﬂuent p:ifa is executed at time t then there is a cause for p to deﬁnite. Such rules are important because a causal theory
hold at time t+1. Other important concepts in commonsense consisting of deﬁnite rules can be converted into an equiva-
reasoning can be easily expressed by rules of this kind too. lent set of propositional formulas [McCain and Turner, 1997;
For instance, a rule of the form                      Giunchiglia et al., 2004], so that its models can be computed
                      F ⇐  F                          using a satisﬁability solver. That translation is used in an im-
                                                      plementation of the deﬁnite fragment of causal logic, called
(“if F is true then there is a cause for this”) expresses, in- the Causal Calculator, or CCALC.1 The Causal Calculator
tuitively, that F is true by default. In particular, the causal has been applied to several problems in the theory of com-
rule                                                  monsense reasoning [Lifschitz et al., 2000; Lifschitz, 2000;
                      pt ⇐ pt                   (3)   Akman  et al., 2004; Campbell and Lifschitz, 2003; Lee and
                                                      Lifschitz, 2006].
  ∗This research was partially supported by the National Science
Foundation under Grant IIS-0412907.                      1http://www.cs.utexas.edu/˜tag/ccalc/ .

                                                IJCAI-07
                                                   366  On the other hand, a rule of the form (5) is not deﬁnite, so formation from causal theories in clausal form into logic pro-
that the method of computing models described above is not gram is shown in Section 4, and Section 5 describes how to
applicable in the presence of such rules.             make it more compact. Clausifying causal theories is dis-
  Another method of computing the models of a causal the- cussedinSection6.
ory uses converting it into a logic program under the an-
swer set semantics [Gelfond and Lifschitz, 1988; 1991].This 2 Causal Theories
translation, discovered by McCain [1997], is modular (i.e.,
                                                      We review  the more general syntax and semantics of
can be applied to a causal theory rule-by-rule). It converts,
                                                      causal theories — which allow multi-valued constants —
for instance, causal rule (3) into
                                                      from [Giunchiglia et al., 2004].
                   pt ← not ¬pt,                        A (multi-valued) signature is a set σ of symbols c, called
                                                      constants, with a set of symbols Dom(c) (the domain of c)
                                  p
which is the usual way of expressing that t is true by default associated to each of them. A (multi-valued) atom is a string
in logic programs [Gelfond and Lifschitz, 1991, Section 3]. of the form c = v,wherec ∈ σ and v ∈ Dom(c).A(multi-
Answer set solvers — systems that ﬁnd the answer sets for valued) formula is built from atoms using the connectives ∧,
logic programs — can then be used to ﬁnd the models of def- ∨, ¬,  and ⊥. Formulas of the forms F ⊃ G and F ≡ G
inite causal theories [Do˘ganda˘g et al., 2001]. On the other can be seen as abbreviations in the usual way.
hand, this translation is only applicable to Boolean causal the- A (multi-valued) causal rule is an expression of the form
ories consisting of deﬁnite rules.                    F  ⇐  G,whereF    and G are formulas. These formulas
  In this paper we propose a translation that is more general are called the head and the body of the rule respectively. A
than McCain’s: it is applicable to arbitrary causal theories, (multi-valued) causal theory is a set of causal rules.
including multi-valued theories containing nondeﬁnite rules. A (multi-valued) interpretation over σ is a (total) function
The price that we pay for this generality is that the logic pro- that maps each constant c of σ to an element of Dom(c).An
grams produced by our translation are programs with nested interpretation I satisﬁes (or is a model of)anatomc = v if
expressions. Such programs, deﬁned in [Lifschitz et al., I(c)=v. The deﬁnition of satisfaction and model of formu-
1999], can be converted into disjunctive programs in polyno- las of more general form follows the usual rules of proposi-
mial time at the price of introducing additional atoms [Pearce tional logic.
                                          2
et al., 2002]; this process has been implemented. Conse- The semantics of causal theories of [Giunchiglia et al.,
quently, our translation may allow us to compute the mod- 2004] deﬁnes when an interpretation I of σ is a model of
els of arbitrary causal theories using answer set solvers ap- a causal theory T , as follows. The reduct T I of T relative to
                                       3      4
plicable to disjunctive programs, such as DLV ,GNT and I is the set of the heads of the rules of T whose bodies are
         5
CMODELS,  .                                           satisﬁed by I. We say that I is a model of T if I is the only
  Our translation, like the one due to McCain, is modular. It model of T I . It is clear that replacing the head or the body
is deﬁned in two steps. First, every rule of the given causal of a causal rule by an equivalent formula doesn’t change the
theory is converted into a set of rules in clausal form models of a causal theory.
                                                        Take, for instance, the following causal theory with
                 l1 ∨···∨ln ⇐  G                (6)
                                                      Dom(c)={1,   2, 3}:
          li                [
where each   is a literal, using Giunchiglia et al., 2004,           ¬(c =1)∨  c =2⇐
Proposition 4]. Then each rule (6) is replaced by a logic pro-                                        (7)
gram with nested expressions; we will see that this program          ¬(c =2)∨  c =1⇐,
is ”small” – usually linear in the size of the input.
                                                      The reduct relative to any I is always
  In addition, we show how both steps can be done more ef-
ﬁciently. First of all, the “clausiﬁcation” of a causal theory {¬(c =1)∨  c =2, ¬(c =2)∨  c =1},
can be done without much increase in size if we agree to in-
                                                                         c =1≡  c =2
troduce auxiliary atoms. About converting a clausiﬁed causal which is equivalent to  . The only model of the
                                                                             J         J(c)=3
theory into a logic program, we will show that many rules reduct is the interpretation such that .Itisthen
                                                              J                                         I
and atoms can be dropped in special cases. For instance, in clear that is a model of (7), while no other interpretation
                                                                                         I
case of causal theories with Boolean signature, we get a much is a model of this causal theory because is not a model of
simpler deﬁnition of the translation. Our optimizations also the reduct.
                                                                               a             ¬a
allow us to translate causal theories whose heads are literals A literal is either an atom or its negation .Aruleof
                                                                       n ≥  0    l ,...,l
or ⊥ into nondisjunctive logic programs. It follows that, for the form (6), where and 1 n are literals, is said
                                                                                               n ≤ 1
this class of causal theories, the problem of the existence of a to be in clausal form.Itisalsosemi-deﬁnite if ,and
                                                                              ⊥  n =0
model is in class NP.                                 deﬁnite if either the head is ( ) or an atom. A causal
  We review the syntax and semantics of causal theories and theory is in clausal form (semi-deﬁnite, deﬁnite) if all its rules
logic programs in Sections 2 and 3, respectively. The trans- are in clausal form (respectively semi-deﬁnite, deﬁnite).
                                                        A constant c is binary if |Dom(c)| =2.ItisalsoBoolean
  2http://www.cs.uni-potsdam.de/˜torsten/nlp/         if Dom(c)={t,  f}. Signatures, formulas, causal rules and
  3http://www.dbai.tuwien.ac.at/proj/dlv/ .           causal theories are binary (Boolean), if they contain binary
  4http://www.tcs.hut.fi/Software/gnt/ .              (respectively, Boolean) constants only. In case of a binary
  5http://www.cs.utexas.edu/˜tag/cmodels/ .           signature, the difference between deﬁnite and semi-deﬁnite

                                                IJCAI-07
                                                   367causal rules is not essential, because every negative literal can with ⊥ if X |= F , and with  otherwise. A set X is an
be rewritten as an atom. For instance, if the underlying signa- answer set for Π if X is a minimal set (in the sense of set
ture is Boolean then ¬(c = t) is equivalent to c = f. In case inclusion) satisfying ΠX .
of Boolean constants c, we will often write c = t simply as An expression of the form F ↔ G will stand for two rules
c. If a causal theory of a Boolean signature doesn’t contain F ← G and G ← F .
atoms of the form c = f then the heads and bodies of its rules
are essentially classical, as in the original deﬁnition of causal 4 Main translation
       [                      ]
theories McCain and Turner, 1997 . We call such theories Consider a multi-valued signature σ. For any formula F of
MCT theories.                                         that signature, we deﬁne F ne as the nested expression ob-
  Take, for instance, the following MCT theory T of signa-       F                 ∧               ∨
    {p, q}                                            tained from  by replacing each with a comma,   with
ture     :                                            a semicolon and ¬ with not.
                    p ∨¬q ⇐                            We are now ready to deﬁne our translation. Given any
                                                                  T                      Π
                         q ⇐ p.                 (8)   causal theory in clausal form, we deﬁne T as the program
                                                      with nested expressions obtained from T
The interpretation I deﬁned by I(p)=I(q)=t is a model of • by replacing each causal rule (6) by
                    I
T . Indeed, in this case T = {p ∨¬q, q}, and its only model                    ne
                                                           l1; ...; ln ← not not G , (l1; not l1),...,(ln; not ln)
is I. No other interpretation is a model of T :ifI(p)=t and
                                     I                                                                (9)
I(q)=f  then I is not a model of the reduct T = {p∨¬q, q},          l                                  l
       I(p)=f                T I = {p ∨¬q}                where each i stands for the literal complementary to i,
while if       then the reduct             has more       and
than one model.
                                                        • by adding, for every constant c ∈ σ and every distinct
                                                          v, v ∈ Dom(c)
3  Logic programs                                                       ,rules
                                                                   c = v ↔       ,     ¬(c = w)      (10)
The answer set semantics was originally deﬁned in [Gelfond                 w∈Dom(c)\{v}
and Lifschitz, 1988] for logic programs of a very simple
                                                           ¬(c = v); ¬(c = v) ←   (c = v),  (c = v)
form and has been generalized several times. Here we re-                        not       not        (11)
view the syntax and semantics of programs with nested ex- where the “big comma” is used in the same way as big
pressions [Lifschitz et al., 1999]. In this section, the words conjunctions.
”atom” and ”literal” are understood as in classical proposi- According to this deﬁnition, each rule (9) of ΠT can be
tional logic. A nested expression is built from literals using obtained from the corresponding rule of T in three steps: by
                        ⊥
the 0-place connectives and , the unary connective “not” • replacing each propositional connective with the corre-
(negation as failure) and the binary connectives “,” (conjunc- sponding “logic program connective”, with the excep-
tion) and “;” (disjunction).                              tion of negation in the head,
  A logic program rule (with nested expressions) has the
                                                        •
form                                                      prepending not not to the body of the rule, and
                      F ←  G                            • adding some “excluded middle hypotheses” to the body
                                                          of the rule.
where F and G are nested expressions. As in causal rules, F
is called the head of the rule and G its body. Finally, a logic This last step “compensates” the replacement of ∨ with the
program (with nested expressions) is a set of logic program corresponding “stronger” logic program connective. It is
rules.                                                clear that this translation is linear if there is an upper bound
  The answer set semantics deﬁnes when a consistent set of on the size of the domain for each constant in T (for instance,
literals (a set that doesn’t contain both a and ¬a for the same when T is binary).
atom a) is an answer set for a logic program. In the rest of this Rules (10) and (11) relate literals containing the same con-
section X stands for a consistent set of literals, l for a literal, stant. They are needed to establish a 1–1 relationship between
                                                                  T I               I          ΠI
F and G for nested expressions and Π for a logic program. the models of and the subsets of that satisfy T .
  We deﬁne when X satisﬁes F (symbolically, X |= F )re- For instance, if T is (7) then ΠT is
cursively as follows:                                   ¬(c =1);c =2←    not not , (c =1;not (c =1)),
  • X |= l if l ∈ X,                                                           (¬(c =2);not ¬(c =2))
  • X |=  and X |= ⊥,                                 ¬(c =2);c =1←    not not , (c =2;not (c =2)),
                                                                               (¬(c =1);   ¬(c =1))
  • X |= not F if X |= F ,                                                             not
                                                               c =1↔¬(c   =2), ¬(c =3)
  • X |= F, G if X |= F and X |= G,and
                                                               c =2↔¬(c   =1), ¬(c =3)               (12)
  • X |= F ; G if X |= F or X |= G.
                                                               c =3↔¬(c   =1), ¬(c =2)
       X        Π  X |=Π               F ←  G   Π
Finally, satisﬁes (      ) if, for all rules  in  ,     ¬(c =1);¬(c =2)←       (c =1),   (c =2)
X |= F whenever X |= G.                                                    not        not
  The reduct ΠX of Π relative to X is the result of replacing ¬(c =1);¬(c =3)← not (c =1), not (c =3)
every maximal subexpression of Π that has the form not F ¬(c =2);¬(c =3)←  not (c =2), not (c =3).

                                                IJCAI-07
                                                   368If T is (8) then ΠT is                                5   Reducing the translation
                                                                        Π
       p; ¬q ← not not , (¬p; not ¬p), (q; not q)    Our simpliﬁcation of T depends on two parameters:
           q ←       p, (¬q;  ¬q)                       • asetS  of atoms of σ such that every atom occurring in
               not not     not                            T          S
                 p ↔¬(p  =  f)                              belongs to ,and
                                                        •      C              σ                    T
              p = f ↔¬p                                   aset   of constants of such that every rule of con-
                                                          taining a constant from C in the head is semideﬁnite.
                  q ↔¬(q =  f)                 (13)
                                                        For each constant c,letNc denote the number of atoms
              q = f ↔¬q
                                                      containing c that do not occur in S. We deﬁne the logic pro-
       ¬p; ¬(p = f) ← not p, not (p = f)              gram ΔT (S, C) as obtained from ΠT by:
       ¬q; ¬(q = f) ← not q, not (q = f).               • dropping all rules (11) such that c ∈ C or {c = v, c =
                                                          v} ⊆ S,
  The theorem below expresses the soundness of this transla-
                                                        • replacing, for each constant c such that Nc > 0,
tion. We identify each interpretation with the (complete) set
                                                          rules (10) with the set of rules
of literals over σ that are satisﬁed by the interpretation.
                                                                         ,      ¬(c = w) ← c = v     (15)
Theorem 1 For any causal theory T in clausal form, the             w : c=w∈S,w=v
models of T are identical to the answer sets for ΠT .
                                                          for all v ∈ Dom(c) such that c = v ∈ S,and
                                           {¬(c  =
  For instance, the only answer set for (12) is         •
1), ¬(c =2),c =3}, and indeed it is the only model of (7). adding
                           {p, ¬(p = f),q,¬(q = f)}                   ⊥←      ,    not (c = w)       (16)
The only answer set for (13) is                   ,                        w : c=w∈S
which is the only model of (8).
                                                          for each constant c such that Nc > 1.
  For each causal rule (6) that has the form l1 ⇐ G (i.e.,
n =1), we can drop the “excluded middle hypothesis” from We will denote ΔT (S, ∅) by simply ΔT (S). We can easily
the corresponding rule (9) of ΠT . Two logic programs Π1 notice that ΔT (S, ∅) contains atoms from S only. Clearly,
and Π2 are strongly equivalent if, for any program Π, Π1 ∪ Π when S contains all atoms, ΔT (S)=ΠT .TakingS smaller
has the same answer sets of Π2 ∪ Π [Lifschitz et al., 2001]. and C larger makes ΔT (S, C) contain less and generally sim-
                                                      pler rules.
Proposition 1 For any literal l and any nested expression F , Rules (15) impose a condition similar to the left-to-right
the one-rule logic program                            half of (10), but they are limited to atoms of S. Rule (16)
                                                    expresses, in the translation, the following fact about causal
                  l ← F, l;   l
                           not                        theories: if neither of two distinct atoms c = v1 and c = v2
                                                      occurs in a causal theory T then no model of T maps c to
is strongly equivalent to
                                                      either v1 or v2. For instance, if Dom(c)={1, 2, 3} and
                                                          c =1           T                  T      c   1
                      l ← F.                          only      occurs in  then every model of maps  to .
                                                      However, if c =2occurs in T as well then c can be mapped
  For instance, the second rule of (13) can be rewritten as to3,asshownbyexample(7).
                                                        For instance, if T is (7) then ΔT ({c =1,c=2}) is
                   q ←        p
                       not not                          ¬(c =1);c =2←    not not , (c =1;not (c =1)),
and the answer sets don’t change.                                              (¬(c =2);not ¬(c =2))
  However, dropping terms of the form li; not li from (9) is ¬(c =2);c =1← not not , (c =2;not (c =2)),
usually not sound when n>1. Take, for instance, the one-                       (¬(c =1);not ¬(c =1)) (17)
rule MCT causal theory:                                            ¬(c =2)←   c =1
                   p ∨¬p  ⇐,                                      ¬(c =1)←   c =2
                                                        ¬(c =1);¬(c =2)←   not (c =1), not (c =2)
which has no models. As we expect, the corresponding logic
program ΠT :                                            If S is a set of atoms, a subset of {a, ¬a : a ∈ S} is
                                                      complete over S if it contains exactly one of the two literals
         p; ¬p ←not not , (¬p; not ¬p), (p; not p)   a or ¬a for each a ∈ S.
            p ↔¬(p  =  f)                                           T                     σ     S
                                               (14)   Theorem 2  Let  be a causal theory over .Let be a set
         p = f ↔¬p                                    of atoms of σ such that every atom occurring in T belongs to
  ¬p; ¬(p = f) ← not p, not (p = f)                   S, and let C be a set of constants of σ such that every rule of
                                                      T containing a constant from C in the head is semideﬁnite.
has no answer sets. If we drop the two disjunctions in the Then I → I ∩{a, ¬a : a ∈ S} is a 1–1 correspondence
body of the ﬁrst rule of (14) we get a logic program with two between the models of T and the answer sets of ΔT (S, C)
answer sets {p, ¬(p = f)} and {¬p, p = f} instead.    that are complete over S.

                                                IJCAI-07
                                                   369  We get the models of the original causal theory by look- • replacing the head of each rule F ⇐ G in T by dF ,and
ing at the unique interpretation that satisﬁes each complete •                    F
             Δ  (S, C)                                    adding, for each subformula that occurs in the head of
answer set for T     . (The uniqueness of the interpre-   rules of T ,(⊗ denotes a binary connective)
tation is guaranteed by the theorem.) For instance, {¬(c =
1), ¬(c =2)} is the only complete answer set for (17); it   – dF ≡  F ⇐,ifF   is an atom,  and ⊥,
corresponds to the interpretation that maps c to 3, and this is – dF ≡¬dG ⇐,ifF has the form ¬G,and
indeed the only model of (7).                               – dF ≡  dG ⊗ dH ⇐,ifF   has the form G ⊗ H.
  Program ΔT (S, C) may have incomplete answer sets, and
those don’t correspond to any interpretation. They can be Intuitively, the equivalences in the heads of the rules above
                                                                               d            T 
eliminated from ΔT (S, C) by adding the constraint    recursively deﬁne each atom F occurring in to be equiv-
                                                             F
                 ⊥←      a,   ¬a                      alent to . This translation is clearly modular.
                      not  not                 (18)     If T is an MCT theory then T  is an MCT theory also. For
for every a ∈ S.                                      instance, MCT rule
  We can notice that no constant c ∈ C occurs in the head
                                                                        p ∨ (q ∧¬r) ⇐ r
of “intrinsically disjunctive” rules of ΔT (S, C). Indeed, if
c ∈ C then each rule (9) with c in the head is nondisjunc-
                                                      is transformed into the following 7 MCT rules:
tive because it comes from a semi-deﬁnite causal rule, and
Δ  (S, C)                                        c
 T       doesn’t contain rules (11) whose head contains .              dp∨(q∧¬r) ⇐ r
Moreover, rules (10) and (16) can be strongly equivalently d        ≡ d ∨ d     ⇐
rewritten as nondisjunctive rules. In particular, it is possi- p∨(q∧¬r) p  q∧¬r
ble to translate semi-deﬁnite causal theories into nondisjunc-  dq∧¬r ≡ dq ∧ d¬r ⇐
tive programs of about the same size. As a consequence, the           d¬r ≡¬dr  ⇐
problem of the existence of a model of a semi-deﬁnite causal
                                                                         da ≡ a ⇐      (a ∈{p, q, r})
theory is in class NP.
  When, for a binary constant c, only one of the two atoms Theorem 3 For any causal theory T over a signature σ,
         S                       Π                                                                      
belongs to , all rules (10) and (11) in T for such constant I → I|σ is a 1–1 correspondence between the models of T
c are replaced in ΔT (S, C) by a single rule (15) whose head and the models of T .
is , which can be dropped. In particular, an MCT theory T
    σ                               Δ  (σ)              We can see that every rule in causal theories of the form
over  can be translated into logic program T , basically 
consisting just of rules (9) for all rules (6) in T . T  is either already in clausal form, or has the body  and
  For instance, if T is (8) then ΔT ({p, q}) is       at most three atoms in the head. It is not hard to see that
       p; ¬q ←       , (¬p;   ¬p), (q;  q)           the clausiﬁcation process described at the beginning of the
               not not      not       not             section is linear when applied to T .
           q ← not not p, (¬q; not ¬q)
whose only complete answer set is {p, q} as expected. 7   Related work and conclusions
                                                      McCain’s translation [McCain and Turner, 1997] is a linear
6  Clausifying a causal theory                        and modular translation applicable to (semi-)deﬁnite MCT
As we mentioned in the introduction, the translations from theories T (over σ) whose bodies are conjunction of literals.
the previous sections can also be applied to arbitrary causal Our translation ΔT (σ) is similar to McCain’s translation for
theories, by ﬁrst converting them into clausal form. One way causal theories of those kinds. Also, the two outputs are —
to do that is by rewriting the head of each rule in conjunctive in presence of rules of the form (18) — strongly equivalent to
normal form, and then by breaking each rule           each others. In this sense, our translation is a generalization
                C1 ∧···∧Cn   ⇐  G,             (19)   of McCain’s translation.
                                                        Another translation [Do˘ganda˘g et al., 2004] turns MCT
where C1,...,Cn (n ≥ 0) are clauses, into n rules
                                                      theories called “almost deﬁnite” into logic programs. For a
                      C ⇐  G
                       i                       (20)   causal theory T that is both almost deﬁnite and in normal
(i =1,...,n)  [Giunchiglia et al., 2004, Proposition 4]. form, ΔT (σ) is essentially strongly equivalent to the out-
However, this reduction may lead to an exponential increase put of their translation. Causal theories in normal form seem
in size unless we assume an upper bound on the number of more general than almost deﬁnite causal theories, as we don’t
atoms that occur in the head of each single rule.     know if there is any simple, modular and almost linear trasfor-
  We propose a reduction from an arbitrary causal theory mation from arbitrary causal theories (or even from MCT the-
to a causal theory where the head of each rule has at most ories) to almost deﬁnite causal theories.
three atoms. This translation can be computed in polyno- Future work will include studying how we can turn a the-
mial time and requires the introduction of auxiliary Boolean ory in the Modular Action Description language MAD into
atoms. The translation is similar to the one for logic programs a logic program. This will require extending the translation
from [Pearce et al., 2002] mentioned in the introduction. to causal theories with variables [Lifschitz, 1997] and ﬁnding
  We denote each auxiliary atom by dF ,whereF is a for- other simpliﬁcations of the translation.
mula. For any causal theory T , the causal theory T  is ob- We will also like to investigate the relationship between
tained by T by                                        causal theories and logic programs with aggregates. It turns

                                                IJCAI-07
                                                   370