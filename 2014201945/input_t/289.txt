                               GSTP: A Temporal Reasoning System 
                    Supporting Multi-Granularity Temporal Constraints* 

                            Claudio Bettini, Sergio Mascetti, Vincenzo Pupiilo 
                                          Universita di Milano, Italy 


 1 Introduction                                           terms of hours with a minimum of 1 hour and a maximum of 
                                                          95 hours. (The number 95 takes into account a check clear•
 The GSTP system has been developed at the University of 
                                                          ance at the beginning of a Friday and a shipment at the end 
 Milan with the objective of providing universal access to the 
                                                          of next Monday according to the constraint.) However, if the 
 implementation of a set of algorithms for multi-granularity 
                                                          check is cleared on Monday, the new constraint would allow 
 temporal constraint satisfaction. The many formalisms and 
                                                          a shipment on Thursday which is clearly a violation of the 
 algorithms proposed in the literature for Temporal Constraint 
                                                          original constraint. Approximate conversion algorithms are 
 Satisfaction Problems (TCSP) have essentially ignored the 
                                                          extensively discussed in [Bettini et al. 1998]. We have shown 
 subtleties involved in the presence of multiple time granu•
                                                          that any consistency algorithm adopting these conversions as 
 larities in the temporal constraints. Examples of simple con•
                                                          the only tool to reduce the problem to a standard CSP is in•
 straints specified in terms of a time granularity are the fol•
                                                          evitably incomplete, and have proposed a different algorithm, 
 lowing: "package shipment must occur the next business day 
                                                          called ACG, which has been proved to be complete [Bettini 
 after check clearance" and "package delivery should occur 
                                                          et al.2002]. 
 during working hours". More technically, the GSTP sys•
                                                             GSTP, in addition to implementing the reasoning algo•
 tem allows the user to specify binary constraints of the form 
                                                          rithms, assists the user in the definition of constraint net•
 Y - X € [m^n]G, where m and n are the minimum and 
                                                          works, in their submission to a remote processing service and 
 maximum values of the distance between X and Y in terms of 
                                                          in the analysis of the output. 
 granularity G. Variables take values in the positive integers, 
 and unary constraints can be applied on their domains. This 
 can be considered the extension of STP [Dechter et al. 1991] 2 The Algorithms 
to multiple and arbitrary granularities.                  The most interesting part of the system is perhaps the imple•
   A first issue in the representation and processing of these mentation of the ACG algorithm which has been recently pro-
 constraints is the need for a clear semantics for time gran• posed in [Bettini et a/.2002]. It is based on arc-consistency, 
 ularities. Business days, for example, may really have dif• and it is essentially an extension of the AC-3 algorithm 
 ferent meanings in different countries or even in different [Mackworth et al. 1985] to deal with possibly infinite (but 
companies. In this respect GSTP adopts a formalism, first periodic) domains and with constraints in terms of multiple 
 introduced in [Wang et al. 1997; Bettini et al. 1998], which periodic granularities. This extension is not trivial since it in•
can model arbitrary user-defined time granularities and has volves the algebraic manipulation of the mathematical char•
a clear set-theoretic semantics. In order to guarantee a fi• acterization of granularities. ACG also derives the minimal 
nite representation, granularities in GSTP are limited to those solution for the constraint network. 
that can be defined in terms of periodic sets. Hours, days, 
weeks, business days, business weeks, fiscal years, and aca•      Repeat 
demic semesters are common examples.                                     1. Conversion+PC 
   A second issue is related to the difficulty to reduce a net•          2. ACG 
work of constraints given in terms of different granularities            3. RcfincEdgcsFromNodes() 
into an equivalent one with all constraints in terms of the same  Until no change is observed 
                                                                  Return Inconsistent or NewNetwork+solution 
granularity, so that some of the standard algorithms for CSP, 
like consistency checking through arc- or path-consistency 
                                                                Figure 1: The main loop of the constraint solver 
[Bessiere 1994; Dechter et al. 1991], could be successfully 
applied. Indeed, any conversion necessarily introduces an 
approximation; For example, the above constraint imposing    Despite several optimizations have been introduced in the 
delivery to start the next business day may be translated in implementation, ACG greatly benefits from any preprocess•
                                                          ing phase that can refine some of the original constraints. This 
   *This work has been partially supported by Italian MIUR (FIRB is the main reason why GSTP integrates with ACG an approx•
"Web-Minds" project).                                     imate algorithm, proposed in [Bettini et al. 1998], and based 


INTELLIGENT SYSTEMS DEMONSTRATIONS                                                                          1633  on the conversion of constraints in different granularities fol•     networks, to submit them to the constraint solver, and to ana•
 lowed by path consistency. The interaction of the two algo•          lyze results. In particular, it is possible to have views in terms 
 rithms is also used to further refine the original constraints.      of specific granularities, to visualize implicit constraints, to 
    Fig. 1 shows the three main steps behind the GSTP con•            browse descriptions of domains, and to obtain a network so•
 straint solver. In step 1, the original network is decomposed        lution. Fig. 3 shows a screenshot from the interface. 
 in as many networks as are the granularities appearing in the 
 constraints; each network has the explicit constraints given 
 in terms of one granularity as well as constraints in the same 
 granularity obtained by conversion from others on the same 
 edge, but in terms of different granularities. Then, standard 
 path consistency is applied to each network. The resulting 
 network most likely has refined constraints with respect to 
 the original one. Any inconsistency captured by this process•
 ing has the effect of terminating the constraint solver report•
 ing the inconsistency status. However, if this is not the case, 
 the network may still be inconsistent and it will go through 
 ACG, the complete consistency algorithm (step 2). From the 
 node domains returned by ACG, it is possible to further refine 
 some of the constraints (the function doing this job in step 3 
 is called RefineEdgesFromNodesO)- The steps are repeated, 
 since path consistency applied to the refined constraints may                         Figure 3: The User Interface 
 lead to some changes. Our experiments show that after few 
 iterations of the main loop a fixpoint is always reached.            Credits 
                                                                      Many people contributed to the implementation of the GSTP 
 3 The GSTP Architecture                                              system. R. De Sibi, G. Gabrielli, M. Colombo, S. Ruffini, 
                                                                      and V. Pupillo worked at the implementation of the temporal 
 Fig. 2 shows the general architecture of the GSTP system. 
                                                                      reasoning algorithms; S. Gotta and S. Mascetti worked at the 
 There are three main modules: the constraint solver, the web 
                                                                      graphical interface; C. Cestana worked at the web service ar•
 service, which enables external access to the solver, and a 
                                                                      chitecture. The theory underlying GSTP is due to the authors 
 user interface that can be used locally or remotely to design 
                                                                      of [Bettini et a/.2002]. S. Wang gave valuable suggestions 
 and analyze constraint networks. 
                                                                      on implementation issues. C. Bettini coordinated the system 
                                                                      implementation and worked closely with all of the above. 

                                                                      References 
                                                                      [Bessiere 1994] C. Bessiere. Arc-Consistency and Arc-
                                                                         Consistency Again. Artificial Intelligence 65(1): 179-190, 
                                                                         1994. 
                                                                      [Bettini et al.1998] C. Bettini, X. Wang, S. Jajodia. A Gen•
                                                                         eral Framework for Time Granularity and its Application 
                                                                         to Temporal Reasoning. Annals of Mathematics and Arti•
                                                                        ficial Intelligence 22(l,2):29-58,1998. 
                                                                      [Bettini etal.2002] C. Bettini, X. Wang, S. Jajodia, Solving 
                                                                         Multi-Granularity constraint networks, Artificial Intelli•
                                                                         gence, 140(1-2):107-152,2002. 

               Figure 2: The GSTP Architecture                        [Dechter et al.1991] R. Dechter, I. Meiri, J. Pearl. Tempo•
                                                                         ral constraint networks. Artificial Intelligence 49:61-95, 
   The constraint solver is the C implementation of the al•              1991. 
 gorithms described above, and it runs on a server machine.           [Mackworth et al,1985] A. Mackworth, E. Freuder. The 
 The Web Service defines, through a WSDL specification, the              complexity of some polynomial network consistency al•
parameters that can be passed to the constraint solver, includ•          gorithms for constraint satisfaction problems. Artificial 
 ing the XML schema for the constraint network specification;            Intelligence 25:65-74,1985. 
 It accepts connections through soap/http from client appli•
                                                                      [Wang etal 1997] X. Wang, C. Bettini, A. Brodsky, S. Ja•
 cations or other web services which require constraint pro•
                                                                        jodia. Logical design for temporal databases with multi•
 cessing, it invokes the solver after validating the parameters, 
                                                                         ple granularities. ACM Transactions on Database Systems 
 and it passes back the results. The third module is a remote            22(2):115-170, 1997. 
java-based user interface, which is extensively described in 
 the system demo. It allows the user to easily edit constraint 


 1634                                                                              INTELLIGENT SYSTEMS DEMONSTRATIONS 