           Abstract Interpretation of Programs for Model-Based Debugging

                               Wolfgang Mayer        Markus Stumptner
                                 Advanced Computing Research Centre
                                      University of South Australia
                                      [mayer,mst]@cs.unisa.edu.au


                                                                           Language
                    Abstract                                               Semantics      Test-Cases
    Developing model-based  automatic debugging
    strategies has been an active research area for sev-
                                                        Program
    eral years. We present a model-based debug-                                  Conformance Test
                                                                     Components
    ging approach that is based on Abstract Interpre-                                            Fault
                                                                                      Conﬂict sets
    tation, a technique borrowed from program analy-                                             Assumptions
    sis. The Abstract Interpretation mechanism is inte-
    grated with a classical model-based reasoning en-                             MBSD Engine
    gine. We test the approach on sample programs
    and provide the ﬁrst experimental comparison with
    earlier models used for debugging. The results                                     Diagnoses
    show that the Abstract Interpretation based model
    provides more precise explanations than previous
                                                                      Figure 1: MBSD cycle
    models or standard non-model based approaches.
                                                      2   Model-based debugging
1  Introduction                                       Model-based software debugging (MBSD) is an application
                                                      of Model-based Diagnosis (MBD) [19] techniques to locat-
Developing tools to support the software engineer in locating ing errors in computer programs. MBSD was ﬁrst intro-
bugs in programs has been an active research area during the duced by Console et. al. [6], with the goal of identifying
last decades, as increasingly complex programs require more incorrect clauses in logic programs; the approach has since
and more effort to understand and maintain them. Several dif- been extended to different programming languages, includ-
ferent approaches have been developed, using syntactic and ing VHDL [10] a n d JAVA [21].
semantic properties of programs and languages.          The basic principle of MBD is to compare a model,ade-
  This paper extends past research on model-based diagnosis scription of the correct behaviour of a system, to the observed
of mainstream object oriented languages, with Java as con- behaviour of the system. Traditional MBD systems receive
crete example [14]. We show how abstract program anal- the description of the observed behaviour through direct mea-
ysis techniques can be used to improve accuracy of results surements while the model is supplied by the system’s de-
to a level well beyond the capabilities of past modelling ap- signer. The difference between the behaviour anticipated by
proaches. In particular, we discuss adaptive model reﬁne- the model and the actual observed behaviour is used to iden-
ment. Our model reﬁnement process targets loops in partic- tify components that, when assumed to deviate from their nor-
ular, as those have been identiﬁed as the main culprits for mal behaviour, may explain the observed behaviour.
imprecise diagnostic results. We exploit the information ob- The key idea of adapting MBD for debugging is to ex-
tained from abstract program analysis to generate a reﬁned change the roles of the model and the actual system: the
model, which allows for more detailed reasoning and conﬂict model reﬂects the behaviour of the (incorrect) program, while
detection.                                            the test cases specify the correct result. Differences between
  Section 2 provides an introduction to model-based diag- the values computed by the program and the anticipated re-
nosis and its application to automatic debugging. Section 3 sults are used to compute model elements that, when assumed
outlines the adaption of the program analysis module of our to behave differently, explain the observed misbehaviour. The
debugger and discusses differences between our and the clas- program’s instructions are partitioned into a set of model com-
sical analysis frameworks. Section 4 contains results obtained ponents which form the building blocks of explanations. Each
though a series of experiments and compares the outcome component corresponds to a fragment of the program’s source
with other techniques. A discussion of related and future text, and diagnoses can be expressed in terms of the original
work concludes the paper.                             program to indicate a potential fault to the programmer (see

                                                IJCAI-07
                                                   471Figure 1).                                                         I : n  → 4
  Each component can operate in normal mode, denoted          1   int i =1
¬AB  (·), where the component functions as speciﬁed in the    2   int x =1
program, or in one or more abnormal modes, denoted AB (·),    3   while (i ≤ n) {
with different behaviour. Intuitively, each component mode    4     x = x + i “ correct is x = x ∗ i ”
corresponds to a particular modiﬁcation of the program.       5     i = i +1
                                                              6   }
Example 1 The program  in Figure 2 can be partitioned
into ﬁve components, C1,...,C5, each representing a sin-           O  : assert (x == 24)
gle statement. For components representing assignments, a
possible AB mode is to leave the variable’s value undeter- Figure 2: Example program and test speciﬁcation
mined. Another possibility is to expand the assignment to a
set of variables, rendering their values undetermined. For
                                                                                 C
loops, the number of iterations could be altered.     Example 2  Assume component  1 representing line 1 of the
                                                      program in Figure 2 is abnormal. In this case, there is no ex-
  The model components, a formal description of the seman- ecution that terminates in a state satisfying x == 24.There-
tics of the programming language and a set of test cases are fore, a fault in line 1 cannot explain the program’s misbe-
submitted to the conformance testing module to determine haviour. In contrast, if the value of x is left undetermined
if the program reﬂecting the fault assumptions is consistent after line 2, an execution exists where the program satisﬁes
with the test cases. A program is found consistent with a test the assertion. Therefore, C2 is a potential explanation.
case speciﬁcation if the program possibly satisﬁes behaviour
speciﬁed by the test case.                              While the deﬁnition of an explanation is intuitive, the pre-
  In case the program does not compute the anticipated re- cise test is undecidable and must be approximated. Differ-
sult, the MBSD engine computes possible explanations in ent abstractions have been proposed in the literature, ranging
terms of mode assignments to components and invokes the from purely dependency-based representations [10] to Pred-
conformance testing module to determine if an explanation is icate Abstraction [13]. The following section introduces an
indeed valid. This process iterates until one (or all) possible approximation based on Abstract Interpretation [8], a tech-
explanations have been found.                         nique borrowed from program analysis.
  Formally, our MBSD framework is based on Reiter’s the-
ory of diagnosis [19], extended to handle multiple fault modes 3 Model construction
for a component. MBSD relies on test case speciﬁcations to Models developed for VHDL and early models for Java were
determine if a set of fault represents is a valid explanation, based on static analysis and represented the program as a
where each test case describes the anticipated result for an ﬁxed model representing the program’s structure. As test
execution using speciﬁc input values.                 cases were not taken into account, it was necessary to repre-
Deﬁnition 1 (Debugging Problem) A Debugging Problem   sent all possible executions and fault assumptions. While this
is a triple P, T, C where P is the source text of the pro- approach has been used successfully to debug VHDL pro-
gram under consideration, T is a set of test cases, and C grams, the dynamic method lookup and exception handling
denotes the set of components derived from P .        lead to large models for Java programs.
                                                        Mayer and Stumptner [15] propose an approach where
       C                             P
The set  is a partition of all statements in and contains the model is constructed dynamically, taking into account
the building blocks for explanations returned by the debugger. only executions that are feasible given a test case. The ap-
For simplicity of presentation, it is assumed that there is a proach is based on Abstract Interpretation [8] of programs,
separate component for each program statement.        generalised to take fault assumptions and test case informa-
  A    set   of    fault  assumptions   Δ        =ˆ   tion into account. In the following, the basic principles are
{AB (C1) ,...,AB (Ck)} is a valid explanation if the  introduced. More detailed presentations are given in [15;
model modiﬁed such that components  Ci  may exhibit   16].
deviating behaviour, while the remaining components exhibit
normal behaviour, no longer implies incorrect behaviour. 3.1 Abstract interpretation
Deﬁnition 2 (Explanation) A fault assumption Δ is a con- The model is derived from a graph representing the effects of
sistent explanation for a Debugging Problem P, T, C iff for individual statements of the program.
alltestcasesT ∈ T, it cannot be derived that all executions
  P                Δ        T                         Deﬁnition 3 (Program Graph) A program graph for a pro-
of  (altered to reﬂect ) violate :                    gram P is a tuple V,S,Sω, E where V is a ﬁnite set of
       ∀T =ˆ I,O∈T   [[ P ⊕ Δ ⊕ O]] ( I) = ⊥.      vertices, E ⊆ V × V a set of directed edges, and S ∈ V
                                                      and Sω ∈ V denote distinct entry and exit vertices.
I and O represent the input values and assertions describing The vertices of the program graph represent sets of program
the correct output values speciﬁed in a test speciﬁcation, re- states; the edges represent the effects of program instructions,
spectively. [[ ·]] denotes the semantic function of the program- transforming sets of program states into new sets of states.
ming language and the fault assumptions. ⊕ denotes the ap- The initial vertex  is associated with the initial program state
plication of the fault assumptions in Δ and test assertions O I described by the test speciﬁcation. An execution of a pro-
  P  ⊥
to  .  denotes an infeasible program state.           gram starts in the initial state in S and proceeds following the

                                                IJCAI-07
                                                   472                                                                   S
                          ˆ    ˆ                      proximation of  is computed such that the program is guar-
   S : n → 4            S = I                                                   ˆ
                                                      anteed to terminate in a state in γ(Sω). In our work we apply
       C1 :[[i =1]]       ˆ          ˆ
                          S1 = [[ i =1]](S)          a variant of Bourdoncle’s bidirectional method [2] where for-
     S1
                          ˆ           ˆ    ˆ         ward and backward analyses are applied repeatedly to reﬁne
       C2 :[[x =1]]       S2 = [[ x =1]](S3)  S5     approximations.
     S
      2       C3 :[[i>n]] ˆ             ˆ   ˆ
                          S3 = ∇([[ i ≤ n]] ( S2), S3) Example 4 Using backward analysis it can be derived that if
    ∇  C :[[i ≤ n]]
        3                                             the program in Figure 2 should terminate in Sω with i  → 24,
                   S      ˆ              ˆ
                    6     S4 = [[ x = x + i]] ( S3)       n  ≤ 4            S               n
     S3                                               then       must hold in  (assuming that has been left
       C  :[[x = x + i]]  ˆ             ˆ            undetermined in I).
        4                 S5 = [[ i = i +1]](S4)
     S
      4                   ˆ          ˆ               3.2  Dynamic model creation
       C5 :[[i = i +1]]   S6 = [[ i>n]] ( S2)
                                                      To utilise Abstract Interpretation for debugging, Deﬁnition 2
     S5                  Sˆ  = [[ x == 24]](Sˆ )
                           ω              6           must be lifted to the abstract domain, replacing [[ ·]] and I
                                                                                 
                                                      with their abstract counterparts [[ ·]] and Iˆ, respectively. For
                                                      O translation is not necessary, as it is assumed that O is rep-
   Figure 3: Program graph and abstract equation system resented as assertions in the programming language and can
                                                                      
                                                      be evaluated using [[ ·]] .
edges until the ﬁnal vertex ω has been reached. The program In our framework, we apply the well-known non-relational
states in Sω represent the result computed by the program. interval abstraction [8] to approximate concrete program
Example 3 Figure 3 depicts the program graph derived from states. Further, we use the simple abstraction described in [7]
the program in Figure 2 (where Δ = ∅). Each program state- to ensure dynamically allocated data structures are repre-
ment is represented as an edge, connecting the program state sented ﬁnitely.
before the statement is executed to the successor state. The In contrast to purely static program analysis, we do not
loop statement in line 3 induces two possible successors: one assume a ﬁxed program graph modelling all possible execu-
                                                      tions. Instead, the graph is constructed dynamically, using in-
transition representing the case where the loop is entered, and I      O
one transition representing loop termination. Starting in the puts and assertions from the test case speciﬁcations. Only
                n  → 4                                the paths that may be executed when starting in a state I are
initial state where    , the ﬂow graph induces a trace                        ⊥
that traverses the loop four times and the stops in Sω with created. Paths that contain are ignored. Once a program
x  → 12.                                              state is reached where multiple paths could be followed, we
                                                      apply the conventional equation-based analysis to the remain-
In case the initial state is not fully speciﬁed or parts of an ing execution. Our framework can thus be placed in the mid-
intermediate state become undetermined due to fault assump- dle grounds between purely static analysis [8] and dynamic
tions, a potentially inﬁnite number of paths must be followed analysis [9].
                     S
to determine the states in ω.                           The algorithm for determining consistency for a program
  To ensure every analysis of the graph is ﬁnite, the concrete P with fault assumptions Δ and test case T is outlined as
program states and the concrete semantics of the program follows:
are replaced with abstract versions. Formally, the Abstract
                                                                            T   P          Δ    P
Interpretation framework [8] uses complete lattices to repre- 1. Add the assertions in to and apply to .
sent concrete (S) and abstract states (Sˆ) such that Sˆ, ⊥, ,  2. Construct the initial program graph using the forward
                                                                          
, ,  is a safe abstraction of P (S) , ∅, S, ⊆, ∪, ∩. ⊥ de- abstract semantics [[ ·]] and initial state Iˆ.
notes infeasibility and  represents all possible states.  rep-
resents the abstract state ordering, and  and  denote the 3. Apply backward analysis to approximate the initial pro-
least upper bound and greatest lower bound operator, respec- gram states not implying assertion violations later in the
tively.                                                   execution.
  The key component in this framework is a pair of functions 4. Analyse program graph in forward direction using the
α, γ (“Galois connection”), where α maps sets of concrete new initial program states to eliminate values that cannot
program states to their abstract representation and γ imple- be realised.
ments the reverse mapping. The semantic functions operating 5. Repeat from step 3 until a ﬁxpoint is reached.
                                     [[·]]= ˆ α◦[[ ·]] ◦γ
on the abstract domain can then be deﬁned as      .     6. In case the initial program state is is ⊥, no execution
An approximation of the program execution can be obtained satisfying all test case speciﬁcations can be found and
by translating the program graph into a set of equations and Δ is not a valid explanation. Otherwise, Δ is consistent
computing the ﬁxpoint solution. In case the abstract lattice is and another test case is considered.
of inﬁnite height and the program graph is cyclic, widening
operators (∇) must be applied to ensure termination. Widen- The beneﬁts of the dynamic approach are as follows:
ing operators selectively discard information from the ab- (i) The equation system is concise. This is a signiﬁcant
stract states to guarantee that the computation of mutually advantage when dealing with paths representing excep-
dependent equations eventually converges.                  tions, as in Java runtime exceptions may be thrown by a
  Similar equations systems and ﬁxpoint solutions can be de- large number of statements. However, typically only a
                                          ˆ
rived for backward analyses, where for any given Sω an ap- few of these paths are actually followed in an execution.

                                                IJCAI-07
                                                   473 (ii) Ambiguity in control ﬂow is reduced compared to the to Sω : x  → 24,i  → [1..∞). Backward analysis reveals
    purely static approach. This is an important advan- that x  → 24 must also hold after the loop. This state con-
    tage for the precision of the abstraction of dynamic data ﬂicts with the program state before the loop, which contains
    structures, which deteriorates dramatically in the pres- x  → 1. Subsequently, the loop is expanded in an attempt
    ence of loops in the program graph.               to prove that Δ does not represent the true fault. The pro-
                                                      cess repeats and stops after six expansions, leading to a state
(iii) Simple non-relational abstractions are sufﬁcient to ob- S : i  → [8..∞],x → [29..∞]
    tain good results if values for most related variables are 6               . At this point, it can be proved
                                                      that the assertion is violated and Sω : ⊥. A subsequent back-
    known. Expressions can be partially evaluated, leading            S  : ⊥              Δ
    to tighter bounds for the remaining variables.    ward pass derives     and eliminates from the set of
                                                      potential explanations.
(iv) In case all values potentially accessed by a called
    method are known in a program state and the method 3.4 Fault assumptions/structural ﬂaws
                   AB
    does not include   components, the ﬁxpoint compu- Similar to model-based hardware diagnosis [1], previous
    tation can be replaced with native execution.     MBSD approaches have great difﬁculty with faults that mani-
  The ﬁxpoint analysis is limited to the regions of the execu- fest as structural differences in the model. The dynamic mod-
tion where the values of abstract states critical to the region’s elling approach described here is more ﬂexible in that fault
execution are undetermined. As many fault assumptions af- assumptions modifying variables that were originally not af-
fect only a minor part of a program state, execution can pro- fected by a component’s behaviour can now be addressed
ceed normally in unaffected regions. Consequently, many al- appropriately. The modelling of dynamically allocated data
ternative branches that must be considered by purely static structures beneﬁts in particular, as the scope of fault assump-
Abstract Interpretation can be eliminated.            tions can now be determined more precisely compared to the
Example 5 Assume  that the MBSD    examines Δ    =    crude modelling in previous MBSD approaches, which led to
                                                      a large fraction of undesirable explanations. Together with
{AB (C4)} for our running example. In this case, execu-
tion proceeds normally until line 4 is reached. The execution more expressive speciﬁcations of the correct behaviour [17],
                                                      we believe that extended fault modes can deal effectively with
of AB (C4) leads to a state where i  → 1 and x is unde-
termined. As i is known, the execution of statement 5 can complex faults.
proceed normally and no ambiguity in the control ﬂow arises
at line 3. In fact, the entire trace reduces to a linear chain. 4 Evaluation
Backward analysis derives that the value of x must hold af- This section presents experimental results obtained from the
ter statement 4 was last executed. The remaining occurrences model described in the previous sections and compares the
of x have undetermined values. Since the initial state in the results with other MBSD approaches, as well as results ob-
graph is not ⊥, Δ is consistent and is considered a valid ex- tained by Slicing [20]. Readers interested in a theoretical
planation.                                            comparison of the different models are referred to [18].
3.3  Iterative reﬁnement                              4.1  Slicing
The partially determined abstract states facilitate further iter- The classic principle of Program Slicing [20] is to eliminate
ative model reﬁnement. Abstraction of the effects of loops all statements from a program that cannot inﬂuence the value
and recursive method calls can be improved if the known of a distinguished variable at a given location in the program.
states before and after a loop or method call contain conﬂict- The pair V ariable, Location denotes the slicing criterion.
ing values. In this case, the execution is either inconsistent, The working hypothesis is that typically, only a small fraction
or the loop (or method) must be expanded further. In case of a program contributes to a variable’s value; the rest can be
the loop (call) has been shown to terminate (for example, pruned away to reduce debugging effort.
through syntax-based methods presented in [16]) or a limit Static backward slicing starts at the variable and location
on the number of iterations (recursive calls) has been set by mentioned in the slicing criterion and recursively collects all
the user, the loop (call) can be expanded. As a result, values statements that may inﬂuence the variable’s value in any pro-
lost through widening and heap abstraction may be regained, gram execution. Further, all statements that may cause the
potentially leading to a contradiction elsewhere. Similar im- location to be skipped are also included. This process repeats
provements can be achieved through informed restructuring until a ﬁxpoint is reached. While static slices can be com-
of the model based on automatically derived or user-speciﬁed puted quickly even for large programs, the remaining pro-
properties of program regions. For space reasons we illus- gram often remains large.
trate the reﬁnement approach in the context of our running Dynamic slicing aims at reducing the number of statements
example and rely on [16] for more detailed discussion. by considering only dependencies that arise between state-
Example 6 Assume the MBSD engine examines the candi-  ments executed for a particular test case execution. Similar to
date explanation Δ = {AB (C3)}. As the loop condition static slicing, dependencies for a variable are followed and all
is assumed incorrect, the loop condition cannot be evaluated statements contributing to the variable’s value are collected.
uniquely. This implies that the number of loop iterations is While dynamic slices are typically much smaller than their
not known and the program state S6 after the loop is approx- static counterparts, for programs with many control depen-
imated using intervals: S6 : x  → [1..∞),i  → [1..∞).The dencies or long data-ﬂow chains, results remain similar.
upper bound of the intervals is due to the widening opera- Example 7 The static slice of the program in Figure 2 w.r.t.
tor. The assertion x==24 may be satisﬁed in S6, leading the slicing criterion i, 6 includes statements 1, 3 and 5. The

                                                IJCAI-07
                                                   474remaining statements are ignored as they are not relevant for niﬁcant differences could be detected in any of the test pro-
the computation of i. For this test case dynamic slicing com- grams (with the exception of Adder) when using more than
putes the same result. The difference between the two ap- two test cases. This can be attributed to the structure of the
proaches can be seen in case the loop is executed only once: selected programs, where a large fraction of statements and
The static slice for x, 6 contains all statements, while the test cases are executed for all test cases.
dynamic slice does not include statement 5.             It can be seen that static slicing and dynamic slicing in
                                                      many cases cannot improve much compared to the entire pro-
4.2  Dependency-based MBSD                            gram and the statements executed in test cases. Similarly, dy-
A number of dependency-based MBSD approaches have been namic slices often improve little compared to the executed
introduced in [21].Wotawa[22] has shown that these ap- statements, as all statements contribute to the ﬁnal result.
proaches provide results equivalent to static or dynamic slic- Comparing VBM and AIM, it can be seen that the AIM im-
ing in case only a single abnormal variable is observed. In the proves over the VBM in most cases. In fact, the case where
following, we limit our attention to results obtained through the VBM provides fewer explanations is due to explanations
slicing without explicitly stating that the same results hold for missed by the VBM. Comparing AIM and slicing: the AIM
dependency-based MBSD.                                provides signiﬁcantly fewer explanations, but is computation-
                                                      ally more demanding. (Slicing approaches typically compute
4.3  Value-based MBSD                                 solutions in a few milliseconds). Note that VBM and AIM
                                                      are not currently optimised for speed and rely on a Java inter-
                        [  ]
Value-based Models (VBM) 14 extend beyond simple de-  preter written in VisualWorks Smalltalk.
pendency tracking and model the effects of program state-
ments explicitly. In contrast to the Abstract Interpretation- 5 Related Work
based approach discussed here, the VBM does not abstract
from the concrete semantics and relies on statically con- Delta Debugging [5] aims at isolating a root cause of a pro-
structed models. While the model is effective for programs gram failure by minimising differences between a run that
where dependency-based representations do not provide ac- exhibits a fault and a similar one that does not. Differences
curate results, the poor abstraction causes the model to col- between program states at the same point in both executions
lapse when loop iterations or recursive method calls cannot are systematically explored and minimised, resulting in a sin-
be determined precisely.                              gle “root cause” explaining why the program fails.
                                                        Model checking has recently been applied to locate
4.4  Experimental results                             faults [11; 3] by comparing abstract execution traces leading
                                                      to correct and erroneous program states. Likely causes for
A set of test programs have been used to evaluate the perfor-
                                                      a misbehaviour can be identiﬁed by focussing on traces that
mance of different debugging approaches. Some programs
                                                      deviate only slightly from passing and failing test cases.
were taken from the Siemens Test Suite 1 (transcribed to Java),
                                                        Error traces have also been applied to synthesise poten-
a debugging test bench commonly used in the debugging
                                                      tial corrections of faulty programs, given a speciﬁcation of
community; others have been retained from earlier tests of
                                                      the program’s correct behaviour [12]. Symbolic evaluation is
the VBM and dependency-based models.
                                                      used to compare symbolic representations of program states
  A summary of he results obtained is given in Figure 4.
                                                      as computed by the program versus states necessary to satisfy
LoC denotes the number of non-comment lines in the pro-
                                                      the post condition of the program. Differences in the pred-
gram’s source code, Comp represents the number of diagno-
                                                      icates allow to heuristically synthesise replacement expres-
sis components used to construct explanations, SSlice, DSlice
                                                      sions correcting single faults in the program. The approach
and Exec denote the number of statements in the static slice,
                                                      is able to provide corrections automatically only if a formal
dynamic slice and the number of executed statements, respec-
                                                      speciﬁcation is given, which is not required for MBSD.
tively. VBM and AIM denote the number of statements re-
turned as potential explanations for the VBM and the model
described in this paper, and Time is the average diagnosis time 6Conclusion
in seconds (wall-clock time) required for the AIM. The results We introduced the basic principle of model-based software
of the AIM and the VBM are limited to single fault explana- debugging and illustrated a model centred around abstract
tions. Due to limitations of the implementation of the VBM, simulation of programs. Differences to previous approaches
some diagnoses listed for the AIM may not be included in the were outlined and results obtained using different debugging
VBM’s results. Initial experiments with multiple faults indi- strategies were compared. Notable improvements over other
cated that the number of explanations does not differ signiﬁ- approaches have been achieved, in particular for “difﬁcult”
cantly from static slicing and does not warrant the additional programs where traditional debugging techniques do not per-
overhead necessary for the AIM and VBM.               form well.
  For each program, n variants with different faults were cre- The Abstract Interpretation based model has been shown to
ated and tested with up to eight test cases per variant. The achieve considerable improvement compared to slicing and
test results reported are the averages for each program over previous model-based debugging approaches, with a reduc-
all variants and test cases. Slight improvements could be ob- tion of the average number of explanations from 81% for
served when using two rather than a single test case; no sig- static slicing to roughly 26%. Conversely, the model is com-
                                                      putationally more demanding and will require optimisation to
  1http://www-static.cc.gatech.edu/aristotle/         be applicable to mid-sized or large programs in an interactive
Tools/subjects/                                       setting.

                                                IJCAI-07
                                                   475