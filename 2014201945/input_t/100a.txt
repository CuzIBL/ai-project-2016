                     Knowledge-Based Anytime Computation 

                Abdel-illah Mouaddib*                      Shlomo Zilberstein* 
           IUT de Lens-CRIL/CRIN-INRIA                 Computer Science Department 
              Rue de l'universite, S. P. 16             University of Massachusetts 
               62300 Lens Cedex Prance                  Amherst, MA 01003 U.S.A. 
                  mouaddib@lens.lifl.fr                    shlomo@cs.umass.edu 

                   Abstract                          To avoid these problems, the AI community has con•
                                                   structed several general paradigms such as anytime algo•
    This paper describes a real-time decision•     rithms [Dean and Boddy, 1988; Horvitz, 1987], design-to-
    making model that combines the expressiveness  time [Garvey and Lesser, 1993] and various types of pro•
    and flexibility of knowledge-based systems with gressive reasoning techniques [Winston, 1984; Mouad•
    the real-time advantages of anytime algorithms. dib et a/., 1992]. Another approach has been to con•
    Anytime algorithms offer a simple means by     struct special architectures for particular problem do•
    which an intelligent system can trade off com• mains such as the Guardian system for monitoring the 
    putation time for quality of results. Previ•   patient's condition in an intensive care unit [Hayes-Roth 
    ous attempts to develop knowledge-based any•   et a/., 1991]. Among the general paradigms, anytime 
    time algorithms failed to produce consistent,  algorithms in particular are increasingly used in AI ap•
    predictable improvement of quality over time.  plications since they are easy to construct and monitor 
    Without performance profiles, that describe the and since they can be efficiently combined to produce 
    output quality as a function of time, it is hard larger real-time systems [Zilberstein, 1993]. But success•
    to exploit the flexibility of anytime algorithms. ful control of anytime algorithms require the use of per•
    The model of progressive reasoning that is pre• formance profiles that describe the dependency of output 
    sented here is based on a hierarchy of reason• quality on computation time. Knowledge-based anytime 
    ing units that allow for gradual improvement of algorithms that have been proposed in the past do not 
    decision quality in a predictable manner. The  exhibit high correlation between computation time and 
    result is an important step towards the ap•    output quality. Therefore, their performance profiles can 
    plication of knowledge-based systems in time-  not be constructed and their use as anytime algorithms 
    critical domains.                              is very limited. 
                                                     In this paper, we describe a model of knowledge-based 
1 Introduction                                     progressive reasoning that meets the requirements of a 
                                                   "well-behaved" anytime algorithm. The model consists 
This paper describes a real-time decision-making model of a rule-based language and an associated inference 
that combines the expressiveness and flexibility of mechanism. Problem solving is performed by an iter•
knowledge-based systems with the real-time advantages ative process that produces quickly a first solution and 
of anytime algorithms. The application of knowledge- refines it step-by-step until interrupted by the control 
based systems to real-time domains such as process con• mechanism. In Section 2, we describe the problem of 
trol, automated navigation systems, medical monitor• constructing knowledge-based anytime algorithms and 
ing, and robotics is an important problem in artificial the difficulties with current solutions to the problem. 
intelligence. A major difficulty in solving this problem Section 3 describes the model of progressive reasoning 
arises since real-time domains require continuous opera• in detail. In Section 4, we describe an application of the 
tion and predictable performance while knowledge-based model to a collision avoidance system. We conclude with 
systems rely on time-consuming algorithms with highly a summary of the contribution of this work and future 
variable performance. Performance variability has lim• research directions. 
ited the application of knowledge-based systems to real-
time domains. 
                                                   2 Anytime computation and 
  'This author continues to collaborate with CRIN-1NRIA 
until September 1995 at the address: Batiment loria BP 239, knowledge-based systems 
54500 Vandoeuvre, France, e-mail: amouaddi@loria.fr 
  Support for this author was provided in part by the Na• This section presents the advantages of anytime algo•
tional Science Foundation under grant IRI-9409827. rithms for real-time decision making. The section de-


                                                                   MOUADDIB AND ZILBERSTEIN 775  scribes several efforts to develop knowledge-based sys• mains. One successful example is the Guardian system 
 tems as anytime algorithms and explains the difficulty for monitoring the patient's condition in an intensive 
 of combining the two paradigms.                    care unit [Hayes-Roth et a/., 1991]. The system inte•
                                                    grates perceptual capabilities with real-time reasoning 
 2.1 Anytime algorithms                             and action. Closer to our approach is the patient moni•
                                                    toring system developed by Ash et al. [1993]. The sys•
 Anytime algorithms are algorithms whose quality of re• tem exhibits an anytime behavior accomplished by orga•
 sults improve gradually as computation time increases, nizing actions in a hierarchical structure. The result has 
 hence they offer a tradeoff between resource consump• been integrated into the Guardian system to provide a 
 tion and output quality. The quality of the results pro• response when the slower, deliberative methods cannot 
 duced by anytime algorithms can be measured by their complete their tasks. The work described in this paper 
 level of certainty, accuracy, or specificity. A performance extends the hierarchical decomposition approach to gen•
 profile [Dean and Boddy, 1988] is a probabilistic descrip• eral knowledge-based systems. Our motivation is best 
 tion of the dependency of output quality on computation summarized by the conclusion of the above survey: 
 time. Zilberstein and Russell generalized this notion cap•
 turing also the dependency on input quality using con• "We concluded that one of the main reasons for 
 ditional performance profiles. The latter can be used  this situation is that expert systems developers * 
 to optimally compose real-time systems using a library have often tried to apply traditional tools to 
 of anytime algorithms [Zilberstein, 1993]. To solve the applications for which they are not well suited. 
 composition problem, an important distinction is made  Tools specifically built for real-time monitor•
 between two types of anytime algorithms, namely inter• ing and control applications need to be built. 
 ruption and contract algorithms. An interruptible algo• An immediate goal should be the development 
 rithm can be interrupted at any time to produce results of high-performance inference engines that can 
 whose quality is described by its performance profile. guarantee response times." 
 A contract algorithm offers a similar trade-off between 
 computation time and quality of results, but it must 2.3 Knowledge-based anytime 
 know the total allocation of time in advance. Interrupt• computation 
 ible algorithms are more flexible, but they are also more 
                                                    Knowledge-based systems rely on an inference engine 
 complicated to construct. Zilberstein [1993] solved that 
                                                    combined with a body of declarative knowledge. Since 
 problem by a general construction that produces an in•
                                                    the amount of relevant knowledge varies from situation 
 terruptible version for any given contract algorithm and 
                                                    to situation, it is hard to predict how problem solving 
 requires only a small, constant penalty. Subsequently, a 
                                                    will progress as a function of time. Hence, a naive im•
 set of programming tools for composition and monitor•
                                                    plementation of progressive reasoning techniques does 
 ing of anytime algorithms have been developed by Grass 
                                                    not lead to "well-behaved" anytime algorithms. In this 
 and Zilberstein [1995]. 
                                                    section we describe two attempts to construct anytime 
   Since their introduction in the late 1980's, anytime al• knowledge-based systems and their limitations. 
 gorithms have been applied to such real-time problems as 
                                                      Elkan [1990] presents an abductive strategy for dis•
 mobile robot navigation, medical diagnosis and monitor•
                                                    covering and revising plausible plans. In his approach, 
 ing, information gathering, and model-based diagnosis. 
                                                    candidate plans are found quickly by allowing them to 
 In addition, several anytime algorithms have been de•
                                                    depend on assumptions. His formalism makes explicit 
 veloped for evaluation of probabilistic networks and for 
                                                    which antecedents of rules have the status of default 
 dynamic programming. But the technique has been less 
                                                    conditions. Candidate plans are refined incrementally 
 successful in the area of knowledge-based systems. 
                                                    by trying to justify the assumptions on which they de•
                                                    pend. The implementation of the model replaces the 
 2.2 Real-time knowledge-based systems              standard depth-first exploration strategy of Prolog with 
 In a 1988 comprehensive survey of real-time knowledge- an iterative-deepening version. The result is an anytime 
 based systems [Laffey et a/., 1988], the authors concluded algorithm for incremental approximate planning. 
 that "Currently, ad hoc techniques are used for making a As we pointed out earlier, it is hard to find the per•
 system produce a response within a specified time inter• formance profile of such a planner. Even in the context 
 val." Unfortunately, not much has been changed since of particular domain knowledge, the performance of the 
 that survey was conducted. The primary method for  inference engine (a theorem prover) is going to be highly 
 achieving real-time performance is based in many cases dependent on the particular query and is hard to predict 
 on speeding up individual algorithms in a generate-and- in advance. Another difficulty is to measure the quality 
 test manner. This method slows down the development of results in a meaningful way. Our model of progressive 
 of real-time systems and makes them inefficient when reasoning addresses successfully these two issues. 
 operating in dynamic environments.                   Smith and Liu [1989] propose a monotone query pro•
   One approach to deal with the problem has been   cessing algorithm which derives approximate answers di•
 to develop specialized architectures for particular do• rectly from relational algebra query expressions. An ap-

776 KNOWLEDGE BASE TECHNOLOGY proximate relation R of a standard relation 5 is a subset between computation time and quality of results offered 
of the Cartesian product of all the domains of S that can by progressive reasoning systems. 
be partitioned into two blocks, the certain set C and the 
                                                     This section explains how progressive reasoning works. 
possible set P such that: C C 5 and R = CuP > S. The 
                                                   The two major issues in progressive reasoning are the 
algorithm assumes that the information stored in the 
                                                   hierarchical organization of knowledge and the control of 
database is complete and that the input data is precise. 
                                                   the evolution of solution quality. We cover these issues 
An incomplete answer to a query is generated when there 
                                                   by first describing the conceptual model and then its 
is not enough time to complete processing the Query, or 
                                                   implementation and properties. The implementation is 
because some relation that must be read is not accessi•
                                                   based on the GREAT (Guaranteed REAsoning Time) 
ble. 
                                                   model [Mouaddib et a/., 1992]. 
  Vrbsky and Liu have implemented the approximate 
query processing algorithm in a system called APPROX• 3.1 Conceptual model 
IMATE [Vrbsky and Liu, 1992]. The operation associ•
ated with each leaf node of the tree is an approximate- The distinctive features of our progressive reasoning ap•
read that returns one segment of the requested relation proach result from the combination of: (1) A generic 
at a time. Approximate relational algebra is used in or• knowledge representation language that facilitates pro•
der to evaluate the tree. Initially, the certain set is empty gressive problem solving; and (2) A control mechanism 
for every approximate object and the possible set is the that progressively feeds data and knowledge into the in•
complete range of values for the particular object. After ference engine using a preference criterion. 
each approximate-read, a better approximate answer to Knowledge is represented using a rule-based language 
the query is produced. The exact answer is returned if that refers to data by a set of attributes. The progressive 
the system is allowed to run to completion.        problem solving process assumes that there are several 
  APPROXIMATE suffers from the same problem as     solutions with different qualities each of which represents 
Elkan's approximate planning technique, namely the dif• an intermediate (approximate) view of the final solution. 
ficulty to derive the performance profile of the system The transition from one solution to a more precise one 
due to its dependence on the contents of the database is done by using additional attributes and rules that are 
and the complexity of the query. It is also hard to evalu• more precise than those previously used. Each rule can 
ate the quality of an approximate relation and represent change the current solution by adding, deleting or mod•
it quantitatively. To summarize, existing knowledge- ifying the attributes contained in the current solution. 
based techniques are hard to convert to anytime algo• This process is shown schematically in Figure 1. 
rithms due to wide variability in performance improve•
ment over time. 

3 Progressive reasoning 
Progressive reasoning is an important technique to de•
sign knowledge-based systems that exhibit a highly pre•
dictable time-quality tradeoff. The technique uses multi•
level deliberation in order to gradually transform an ap•
proximate solution into a precise one. The mapping from 
the set of inputs (problem instance) to the set of outputs 
(solution) is based on progressive exploration of data and 
knowledge, hence the name progressive reasoning. Pro• Figure 1: The schematic structure of progressive reason•
gressive exploration is facilitated by using a hierarchical ing. 
structure of input elements defined by weights that the 
system's designer attaches to each input according to its This organization is defined by a preference criterion 
importance. Correspondingly, knowledge is also orga• representing the accuracy of the attributes specified by 
nized in a hierarchical way. This mapping is especially the system's designer. The attributes preference crite•
suitable in domains where the reasoner uses abstraction rion allows the solution to be represented at different 
to structure the search space (as in hierarchical plan• levels of detail. This preference criterion, named crit-
ning) , and in problems that require the result to be ex• icality by Knoblock et al. [1991], is generalized by the 
pressed at varying levels of detail (as in model-based notion of granularity in the GREAT model. We also use 
diagnosis).                                        the certainty of attributes to control progressive manip•
  Furthermore, this organization is an important factor ulation of data of the same granularity. Based on the 
in reducing the unpredictability of knowledge-based sys• attributes preference criterion, the preference criterion 
tems by limiting the amount of knowledge and data that of rules is computed automatically as will be shown in 
is the focus of the system at each level of the hierarchy. the next section. The preference criterion defines aggre•
As a result, we can characterize precisely the tradeoff gations of attributes and aggregations of rules that are 

                                                                   MOUADDIB AND ZILBERSTEIN 777 Figure 2: A single execution cycle consists of a reason•
ing cycle and an evaluation cycle at a distinct level of 
reasoning. 

Reasoning cycles 
Each reasoning cycle consists of using one region and one 
package of rules corresponding to the current level of rea•
soning. This approach limits the amount of relevant data 
and knowledge at each level. Reasoning is performed by 
exploring rules of the current package and attributes of 
the current region. The cycle of reasoning consists of 
activating relevant rules. The execution of rules modi•
fies the quality of the solution which is evaluated at the 
end of each cycle. When the quality is unsatisfactory, 
another execution cycle is activated. This process is re•
peated until the quality is satisfactory or the deadline is 
reached. 

Evaluation cycle 
At the end of each reasoning cycle, the evaluator judges 
the quality of the actual solution and decides whether 
further improvement is needed. When further reason•
ing is required, the evaluator decides whether it must be 
pursued at the same level or it is necessary to change the 
reasoning level and use more precise attributes. Quality 
is evaluated based on a multi-dimensional criterion that 
measures the level of completeness, certainty, and preci•
sion of the solution. The evaluator checks first whether 
completeness and certainty are insufficient, in which case 
another reasoning cycle at the same level is executed. 
Otherwise, the evaluator verifies the precision quality of 
the solution. If it is acceptable, the solution is returned 
and the process terminates. Otherwise, the evaluator 

778 KNOWLEDGE BASE TECHNOLOGY completeness and its certainty. If the evaluation fails, 
processing resumes at level Li until the evaluation suc•
ceeds or the deadline is reached. When the evaluation 
succeeds, the evaluator invokes the next level in order to 
improve the precision of the solution. 
  The construction of the reasoning levels (Li) guaran•
tees the improvement of the solution quality as the sys•
tem moves from one level to another. This is true since 
the attributes computed by a new level Li are always 
more precise than those contained in the current result. 
The level Li deletes, from the current solution, attributes 
judged incorrect at the current level of granularity (for 
example, the attribute time that contains the value 6h 
can be replaced at another level of granularity which 
takes minutes into account by the value 6hl5min). That 
is why the quality of the solution Slrea is preferred to that 
of*-1. 

4 Application: A collision avoidance 
    system 
Consider the problem of collision avoidance in a railway 
network. Assume that a railway network consists of n 
horizontal railway tracks and n vertical tracks each of 
which is used by one train. Each horizontal track in•
tersects all the vertical ones. The main objective is to 
prevent two trains from colliding with each other at one 
of the n2 crossings. The system needs to detect potential 
collisions and to optimally modify the speeds of the train 
to avoid any chance of collision. The rest of this section 
describes how the GREAT model was used to construct 
this collision avoidance system [Mouaddib, 1993]. 

4.1 Collision avoidance with progressive 
      reasoning 
In our implementation, the collision avoidance task is 
achieved using different levels of approximation depend•
ing on how much time is available. The deadline is de•
fined as the time remaining before a collision may oc•
cur. In this domain, there are several different policies 
to avoid collision. The system can either control the 
train in a qualitative manner (stop, slow, speed) or it 
can compute the actual speed at various levels of pre•
cision. Different constraints can be taken into account, 
such as passenger comfort (this means that acceleration 
or slowing down have to be limited), the time-table of 
each train, and the priorities or time-dependent utilities 
of the different trains. 
To capture these types of knowledge, we used the com•
ponents of GREAT as follows: 

  • The set of data attributes is defined as: 
    D — {speed, tendency, nextcross, distance, railpri-
    ority, maxspeed, minspeed, timetable} 
  • The context of a situation is defined as: 
    C — ControlCollision. In this context the set D is 

                MOUADDIB AND ZILBERSTEIN 779 