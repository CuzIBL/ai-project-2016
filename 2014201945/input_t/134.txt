                                         Factored Planning 

                                  Eyal Amir and Barbara Engelhardt 
                     Computer Science Division, University of California at Berkeley 
                                     Berkeley, CA 94720-1776, USA 
                                       {eyal,bee}@cs.berkeley.edu 


                     Abstract                          our planning procedure finds plans for multiple subgoals in 
                                                       each of the subdomains separately, using a generic black box 
     We present a general-purpose method for dynami•
                                                       planner. It searches over possible plans using complex action 
     cally factoring a planning domain, whose structure 
                                                       descriptors from each of the subdomains to form a plan for 
     is then exploited by our generic planning method 
                                                       the overall goal. The planning procedure uses dynamic pro•
     to find sound and complete plans. The planning al•
                                                       gramming principles, and backtracking occurs only within a 
     gorithm's time complexity scales linearly with the 
                                                       subdomain as part of the black box planner. 
     size of the domain, and at worst exponentially with 
                                                         We prove that our planning procedure runs in time linear in 
     the size of the largest subdomain and interaction be•
                                                       the number of subdomains and takes time that is at most ex•
     tween subdomains. The factorization procedure di•
                                                       ponential in the size of the largest subdomain and the number 
     vides a planning domain into subdomains that are 
                                                       of dependencies between subdomains. The type of factoring 
     organized in a tree structure such that interaction 
                                                       that we select is justified by this complexity result. We also 
     between neighboring subdomains in the tree is min•
                                                       prove that the combined algorithm is sound and complete, 
     imized. The combined planning algorithm is sound 
                                                       and that it can be applied to solve any planning problem us•
     and complete, and we demonstrate it on a represen•
                                                       ing any generic black box planner for planning within subdo•
     tative planning domain. The algorithm appears to 
                                                       mains. The complexity is upper bounded by the complexity 
     scale to very large problems regardless of the black 
                                                       of the black box planner on the unpartitioned domain. 
     box planner used. 
                                                         We implemented and tested our planning algorithm on a 
                                                       simple domain to guide further development. We created two 
 1 Introduction                                        implementations, one with the IPP planning system [Koehler 
                                                       and Hoffmann, 2000] and one with the FF planner [Hoffmann 
Many planning algorithms use independencies or loose in•
                                                       and Ncbel, 2001]. We compared the results of our algorithm 
teractions between components in the planning domain to 
                                                       with those of IPP and FF, and have shown that for a single do•
find plans more efficiently. For example, hierarchical plan•
                                                       main our results scale much better than these planners alone. 
ners divide a goal into subgoals (high-level operators) using 
                                                       The example validates our analytical results and shows that 
a decomposition of the domain into loosely interacting parts 
                                                       our planner's performance scales linearly with the size of the 
(e.g., [Knoblock, 1990; Erol et ai, 1994]). Planning is done 
                                                       domain for this problem, motivating further development. 
at each level separately, and later the subplans are pieced to•
gether to build a valid plan. Other planners that use domain 
decomposition (e.g., [Lansky and Getoor, 1995]) are not lim• 2 Factored Planning 
ited to domains with explicit hierarchical structure, but re• In this section we present an algorithm for planning with a 
quire backtracking across subdomains, and often replan for partitioned planning domain, where the subdomains are ar•
subgoals that already have valid plans. In general, domain- ranged in a rooted tree. Each subdomain corresponds to a 
decomposition planning does not scale well because back• subset of the fluents, or single states, in the domain and a 
tracking between subdomains can dominate the complexity subset of the actions which use only those fluents. Neighbor•
of the search, and the domain decomposition is often ad hoc. ing subdomains may share fluents and actions, and the ideal 
  In this paper we present an approach to planning that scales partition has the smallest number of shared fluents. We ana•
to very large domains by taking advantage of domain struc• lyze this algorithm computationally and present a procedure 
ture. This approach is composed of two procedures: factoring for finding a tree partition with close-to-optimal properties. 
and planning. The factoring procedure partitions a planning 
domain into loosely interacting subdomains that are orga• 2.1 Partitioned Planning Problems 
nized in a tree structure. Our factoring procedure uses decom• We restrict ourselves to partitioned planning problems that 
position algorithms from graph theory, and our contribution are described using a simple propositional action language. 
in this matter is in translating the planning-problem decompo• A partitioned domain description is a labeled graph that de•
sition task into a graph decomposition task. After factoring, scribes a set of subdomains and the connections between the 


PLANNING                                                                                               929 subdomains. Formally, a partitioned domain description is a with the reported capabilities of the children in the tree. Ev•
labeled graph with                                     ery capability that appears in this plan is expanded into a sub-
                                                      plan by the subdomain that reported it. Those subplans can 
  • vertices: for all is a 
                                                       themselves contain capabilities that are then expanded, and 
    planning domain description with 
                                                       the process continues until the plan contains only the original 
           a set of propositional //MeflAv (features of our do• domain actions. 
         main that may change value over time), 
                                                      The Simple Algorithm is Incomplete 
           a set of action (operator) definitions over 
                                                      The view presented above leaves the exact nature of plan•
  • Edges E over and                                  ning in each subdomain unspecified. It suggests, roughly, that 
  • A labeling / of the edges in E. For every         planning in each subdomain takes the form of finding a plan 
              is a subset of fluents from             that starts from some initial state of local fluents and reaches 
                                                      a specified end state of local fluents. Unfortunately, limiting 
  The label includes at least the fluents shared be•  ourselves to this kind of message from children subdomains 
tween but it may include other (e.g.                  to parents is incomplete, as demonstrated in the following ex•
global) fluents. We use the convention that action refers ample (see Figure 1 for an illustration). 
to the action definition (also called action schema) and that at 
denotes the instantiation of the action in a plan. We say that Charger                     Robot 
action is in subdomain iff it is defined in 

  We specify the preconditions and effects of actions in Ai Actions:                    Actions-
                                                           charge, switch battery l_full add_line_segment 
using the simple language of situation calculus (with preposi•            battery2_full 
tional fluents), and allow actions to have conditional effects. Fluents:  second_powe line Fluents: 
We use the simple compilation technique of [Reiter, 2001]  battery I full               battery 1 ..full 
                                                           battery 2 full               battery 2_iu II 
to provide monotonic semantics for this language (and avoid second_power_line           sccond_power_lme 
the frame problem). All of our results apply to the PDDL   upgraded                     one_segment 
language [Fox and Long, 2002] as well. PDDL is the repre•                               two_scgments 
sentation language used in our example (Section 3) to model 
the domains, the subdomains, and the plans.              Figure 1: Subdomains for upgrading a battery charger. 
2.2 Planning Algorithm 
Here we present our planning algorithm, PartPlan (Figure 2), Consider a scenario in which we have a charger that can 
which finds plans in a partitioned domain. We use the follow• charge batteries and a robot that can connect power cables to•
ing notation. For P a set of propositional fluents, is the gether and that uses two batteries. Initially, every charge ac•
language of P, i.e., the set of propositional sentences that can tion of the charger charges exactly one battery, so two charge 
be built with P.                                      actions are required to charge both of the robot's batteries. 
                                                      However, if the charger is connected to an additional power 
High-Level Overview                                   source, then a single charge action charges two batteries at 
PartPlan processes a partitioned domain tree iteratively from once. Our task is to upgrade the charger so that it can charge 
the leaves to the root (the subdomain that holds the goal of two batteries at once. For this, the robot needs to build a 
PartPlan). It selects a leaf subdomain, tries to build plans for power line that is long enough to reach the charger, and the 
each of a set of possible preconditions and goals (Step 2b), charger needs to switch to using both sources. Thus, build•
records the successful attempts, adds them as new (macro• ing this line requires multiple charges interleaved with adding 
like) actions to this leaf's single parent subdomain (Step 2c), lines. A plan that solves this problem needs to charge the 
and removes that leaf subdomain from the graph.       robot's batteries, add a line segment, charge again, add an•
  The result of planning in each subdomain is not a complete other line segment, charge again, add the final line segment, 
plan, but rather a compilation of capabilities, which contain and switch the charger to the new mode. 
both subdomain actions and capabilities of descendant sub- We want our factored-planning approach to apply to any 
domains. Generally, every subdomain's capabilities are those given planning problem and be complete (i.e., find a plan if 
plans that it can find (using its own actions and capabilities of there is one) regardless of the plan partition. We will show 
its neighbors) that affect the fluents that it shares with its par• that there is a partitioning of this problem so that simple mes•
ent subdomain in the tree. Capabilities of a subdomain are sages of the form "if X holds, then 1 can make Y hold" are 
shared by sending a message to the parent domain containing not sufficient in a directed tree to find a complete plan. Mes•
a complex action describing the capability.           sages of the form "if holds, then 1 can cause if you 
  When the tree is reduced to the single subdomain (after the subsequently make hold, then 1 can cause to hold" are 
iterative processing and removal of leaves) that contains the required for domains with interleaved interactions as in this 
problem goal, we perform planning in that node to achieve example. These complex messages can be extended for larger 
the goal condition, based on the capabilities from the (elim• numbers of interleaved preconditions and effects, and the al•
inated) child subdomains (Step 3). Then, the plan found by gorithm we present allows that type of message. 
this subdomain is expanded into a plan that achieves the over• One possible partitioning of the example above is pre•
all problem goal, using the actions of this subdomain along sented in Figure 1. On the left-hand side we include the 


930                                                                                            PLANNING  actions charge and switch, and the features battery I. full, that we strive to employ, reducing our problem to that of tradi•
 battery2.full, second jpotver. and upgraded. The ac•  tional planning on the entire domain and forcing backtracking 
 tion charge has the following effects and preconditions: across different subdomains. 
                                                       Detailing the Planning Algorithm 
                                                       Procedure PartPlan is presented in Figure 2 and its subrou•
                                                       tines are presented in Figures 3 and 4. PartPlan is given a 
 Action switch has the following effects and preconditions: partitioned planning domain a 
   • If second .power dine, then switch causes upgraded. set of initial conditions indexed by subdomain 
   On the right-hand subdomain we include the ac•      such that is the initial state for the fluents in a goal 
 tion add dine .segment, and the features              state condition in for root node , and search pa•
 ••••••••••••••• one.segment, and                      rameters (interactions) and d (depth). It returns a plan for 
 two.segments. The action add dine.segment has the fol• achieving the specified goal conditions in the given domain, 
 lowing effects and preconditions:                     if such a plan exists under the search constraints. Notice that 
                                                       we show goals that can be represented in a single subdomain. 
                                                       We illustrate how to get around this restriction in Section 2.5. 


   Now, consider all the possible simple messages, i.e., mes•
 sages of the form "if X, then 1 can cause Y to hold". We 
 require each of those X and Y to be a combination of flu•
ent values for fluents that are shared between the two subdo-
mains. In our case, those shared fluents are 
 battery2.full, and second.power.line. 
   Assume that we chose the root node in our partition to be 
the left-hand side subdomain. The only non-trivial message 
that the right-hand side can send is 
                                    then 1 can cause 

   We would like to find a plan in the root subdomain (the 
left-hand side subdomain) that uses these messages and that 
results in the charger being upgraded. Note that this is not 
possible with only simple messages. 
  One way to resolve this problem is to allow more complex 
messages. Particularly, in our example, we can allow the fol•
 lowing message to be sent: 

                                                                 Figure 2: Planning with Subdomains 

                                                         We discuss two of the subroutines of PartPlan in detail. 
                                                       The first, SinglePlan, is presented in Figure 3. It determines 
                                                       whether there is a plan with at most actions in subdomain 
                                                          that starts with the state described by the initial state 
   If our planner on the left-hand subdomain can handle such and arrives at a state that satisfies We require the plan to 
complex actions, then it can use such a message to find a have preconditions interleaved within effects, corre•
plan that succeeds in upgrading the charger. Indeed allow• sponding to the number of interleaved conditions in the mes•
ing this kind of messages makes our planning algorithm com• sage (e.g., in (1), the message sent in our example above, 
plete. This is consistent with results achieved by [Amir and   To find such an interleaving message the planner 
Mcllraith, 2000; Mcllraith and Amir, 2001] for inference in uses fluent-setting actions, which set the fluents in 
first-order logic, and is also consistent with [Amir, 2002] that to a truth assignment in one of They correspond 
presented results for projection in factored domains.  to (yet undetermined) action sequences that can be performed 
  An alternative to using such long messages is to include in• in ancestor (or cousin) subdomains. If the parent subdomain 
ternal (i.e., not shared) fluents in shorter messages. However, wishes to use the result of this planning, it will need to find a 
this has the effect of breaking the encapsulation and structure sequence of actions that replaces these fluent-setting actions. 


PLANNING                                                                                              931    Every fluent-setting action, can be used at most once, 
 and all of must have been used before this ac•
 tion. Also, prior to using this fluent-setting action, 
 must hold. This condition corresponds to the state that is 
 required by the other subdomain's complex action as a pre•
 condition for the subsequent complex action. 


                                                          Figure 4: Sending a message, and expanding a plan. 

Figure 3: Planning in a single subdomain, and storing a plan. 
                                                       (minus one) for which there is subsequence of actions and 
                                                       an edge in G such thatare in subdomains 
  Subroutine SendMessage (Figure 4) takes a plan found by on different sides of 
subdomain (stored in table T by subroutine StorePlan) 
and adds a new complex action definition in the parent sub- The plan-width k for our partitioned domain is the least that 
domain, whose initial state and goal are fluents found will allow PartPlan to find a plan. In our example in Figure 1 
in This new action contains complex action definitions     4 because for 4 there is no message that we can send 
from child subdomains and actions local to Plans execute that will allow us to find a plan in the left-hand subdomain. 
sequentially to ensure that the preconditions for complex ac• Also, notice that every plan for D has width at most 
tions are satisfied at the appropriate times.            A tree decomposition of planning domain D is a parti•
                                                       tioned domain description tree satisfying the run•
2.3 Properties of PartPlan                             ning intersection property: if a fluent / appears in and also 
In this section we prove the completeness and soundness of in Pj, then all the edge-labels on the path between in 
PartPlan and analyze its computational behavior. We pursue G must include /. 
the intuition that our planning algorithm can find a plan more Theorem 2.2 Let G(D, E,l), be a tree decomposition of 
efficiently if the number of interactions between subdomains planning domain D with m subdomains. PartPlan(G, I, Q, 
is small. The maximum shared fluents across the partition k, d) returns a plan n of that achieves Q in D starting from 
determines the time complexity of the algorithm.       I, if and only if one exists with width at most 2k and at most 
                                                       d • m actions. 
Definition 2.1 (Width of a Plan) Let be 
a partitioned planning domain tree, and                  The role of d is to bound the length of the complex actions 
sequence of actions. The width of for G is the largest to at most d interactions; bounding this variable can be used in 


932                                                                                             PLANNING an iterative deepening algorithm to find plans with the short• 2.5 Distribution of the Goal 
est possible complex actions. The parameter can be used So far we have assumed that the goal is represented in the set 
similarly, and its role is to restrict the length of messages that of fluents of a single subdomain. In many planning problems 
are sent from children subdomains to parent subdomains. the goal consists of a conjunction of conditions on many dif•
Corollary 2.3 Iterative deepening of search parameters ferent fluents. If we create a single subdomain that includes 
in PartPlan is sound and complete planning algorithm.  all those fluents, then the width of the tree decomposition will 
  The time bound for procedure PartPlan is exponential in be high, and so will be the planning time. Instead, we can dis•
the number of fluents in the links between subdomains and tribute the goal between subdomains, as we show here. 
the plan-width of the partitioned-planning problem, but is lin• Assume that we are given a tree decomposition G(D, E, I) 
ear in the number of subdomains.                       of domain with Let a goal condition be 
                                                                where Qx is a part of the goal represented with the 
Theorem 2.4 PartPlan terminates in time                fluents in Pi. Arbitrarily, choose a single subdomain, as 
                                     being the largest the root of the tree. To each subdomain we add a new 
number of action symbols and largest number of fluent sym• fluent symbol, and a new action, For every leaf sub-
bols in any subdomain, respectively, and I being the largest 
                                                       domain, precondition is and its effect is qt. For every 
number of symbols in for all subdomains                internal node in the tree, with childrens pre•
2.4 Automatic Factoring                                condition is and its effectis 
                                                         When planning with this revised decomposition we use a 
Theorem 2.2 assumes that a tree decomposition G(B, E,l/) is single goal, in subdomain The revised planning prob•
given. For a planning domain D we can build the decomposi• lem in this tree decomposition is equivalent to the original 
tions by hand, adding a knowledge-engineering and planning one, and we have reduced a (worst case) exponentially large 
perspectives to the domain description. We can also find a de• problem down to a linear one. 
composition automatically using graph decomposition tech•
niques. In this section we describe such an algorithm. 
  The notion of tree decomposition in planning domains is 3 An Extended Example 
a special case of tree decomposition in graphs [Robertson Consider the following domain, where a robot can move 
and Seymour, 1986]. The width of a tree-decomposition is around in a set of rooms connected by doors as a ring [Cimatti 
the width of the largest subset in the tree minus one. The and Roveri, 2000]. Each room has a window which can be 
treewidth of a graph G(V, E) is the minimum width over all open, closed, or locked. The robot has four possible actions: 
tree-decompositions of G minus one                     move clockwise, move counterclockwise, close the window 
  Finding optimal tree decompositions is NP-hard. Nonethe• of the current room, and lock the window of the current room 
less, there are several algorithms that find close-to-optimal if the window is already closed. The goal state is that the win•
tree decompositions (e.g., [Becker and Geiger, 1996; Amir, dows of all the rooms are locked. The start state is the robot in 
2001]), and there are also some heuristics (e.g., [Kjaerulff, one of the rooms and some configuration of windows open, 
1993]) that have been applied successfully in inference algo• closed, and locked. In this simple example we assume that 
rithms for Bayesian networks and theorem proving.      the state of windows and the location of the robot are known. 
  The reduction of the planning decomposition problem into In other words, the initial condition is one of possible 
a graph decomposition problem is as follows. We create a initial configurations. 
graph G(V, E) with a vertex V for every propositional    Define the following set of fluents: 
fluent in our domain D. E is the set of edges in this graph, and • Agent location: 
it includes an edge between V if and only if there is an • Windows closed: 
action definition that includes both v, u (either as a precondi• • Windows locked: 
tion or as an effect). In the next step we find a tree decompo• • Windows locked from room 1 up to room 
sition (5, T), for this graph 
using one of the algorithms mentioned above. Finally, we cre•
                                                         The fluents represent conjunctions of the 
ate a partitioned domain description as 
                                                                          fluents from parent and ancestor 
follows: The vertices (domain descriptions) 
                                                       subdomains in the tree, as in the previous section. Define the 
are chosen such that includes all the fluents in and 
                                                       following set of actions and corresponding effect axioms: 
   includes all the action definitions that can be expressed 
                                                         • Actions: close, 
with the fluents in The edges in ED are the tree edges, 
F, in T. The labeling I of a edge is the set             • Effect axioms: 
of fluents that are shared between the vertices , i.e., 

  This algorithm complexity is taken up by the decomposi•
tion of the graph G(V,E). Most heuristics are at most O 
and one approximation algorithm [Amir, 2001] takes time 
                    (fc is the treewidth of G, and is typ•
ically much smaller than n). This is an upper bound on the 
time taken by the planning domain decomposition algorithm. 


PLANNING                                                                                               933 