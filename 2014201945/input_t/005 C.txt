Session No. 2 Applications                                                                       59 


                                                     from the application of artificial intelligence 
                                                     techniques. Put another way, it seems about 
 CHALLENGE TO ARTIFICIAL INTELLIGENCE: 
                                                     time that the workers in this field begin to 
  PROGRAMMING PROBLEMS TO BE SOLVED 
                                                     choose as vehicles for the exploration of artifi•
               J. E. Sammet                          cial intelligence techniques some problems 
               IBM Corporation                       whose solution might really be of use - at least 
               Cambridge, Mass.                      to other computer scientists and to the data pro•
               U. S. A.                              cessing field. Playing checkers or chess on a 
                                                     computer is an interesting tour de force, and 
 Abstract                                            when such programs win from their developers 
     This paper is in the nature of a challenge      then the event is even more significant. Some 
 to artificial intelligence experts. It suggests     of the early motivations (e. g., well structured 
 that the techniques of artificial intelligence      problem, attention getting) which led to the 
 should be applied to some realistic problems        choice of these and other problems are still ex•
                                                     istent but can now also be applied to some real•
 which exist in the programming and data pro•
                                                     istic programming problems. 
 cessing fields. After a brief review of the lit•
 tle related existing work which has been done,          This should not be interpreted as saying 
 the characteristics of programming problems         that no useful problems have been attacked in 
 which make them suitable for the application of     the name of, or in the spirit of, using artificial 
 artificial intelligence techniques are given. Spe•  intelligence tools. On the contrary, the assem•
 cific illustrations of problems are provided un•    bly line balancing program of Tonge (22), the 
 der the broad categories of data structure and      formal integration systems of Slagle (18) and 
 organization, program structure and organiza•       Moses (16), the chemistry work in Heuristic 
 tion, improvements and corrections of pro•          DENDRAL (3), project scheduling (10), and even 
 grams, and language.                                the solution of algebra word problems in 
                                                     STUDENT (2) all represent direct or slightly 
 Descriptors                                         indirect realistic practical problems which 
 artificial intelligence                             have been or are being addressed. However, 
 applications                                        the thrust of this paper is to concentrate on 
 programming                                         problems which arise in, or from the program•
 heuristic techniques                                ming and data processing fields, and the related 
                                                     issue of communication between the human and 
                                                     the computer. 
 I. INTRODUCTION 
                                                         It is also important to recognize that there 
     It has been over 15 years since computers 
                                                     really are areas in which programming technol•
 were first used for anything resembling "arti•
                                                     ogy and problems have grown so complex that 
 ficial intelligence". The pioneering work of        straightforward techniques and algorithms are 
 Newell, Shaw, and Simon on proving theorems         inadequate to deal with them. As one illustra•
 in the propositional calculus is so well known as   tion, the difficulty in planning a combined soft•
 not to need discussion for the people knowledge•    ware-hardware configuration for a new installa•
 able in the field of artificial intelligence. Simi• tion, or even for a specific application, has al•
 larly, the early work of Samuel in checker play•    most gotten out of hand. The proliferation of 
 ing is also well known. The total amount of         central processor numbers and speeds, memory 
 work which has been done in the field of artifi•    sizes, peripheral and storage devices, com•
 cial intelligence, as represented by bibliogra•     bined with the variability inherent from oper•
 phies, papers, conferences, etc. , is quite         ating systems which allow multi-processors, 
 large, even if a narrow definition of artificial    multiprogramming, on-line systems and real 
 intelligence is used. However, there is a ma•       time systems all simultaneously, make it diffi•
 jor anachronism and irony in all of this, which     cult to determine adequate (let alone the best) 
 is the subject of this paper.                       configurations and methods of scheduling. Even 
     The techniques of artificial intelligence       the measurement of throughput and other cri•
 have seldom been used to improve the use of         teria for performance is extremely difficult. 
 computers, i.e., the programming process, even      While this whole problem area is probably not 
 though primitive attempts were made as early        yet amenable to aid from the artificial intelli•
 as 1958. Even worse, there are vast numbers         gence field, it is at least a specific indication 
 of problems, even from the limited view of          of the complexity of the programming field today 
 systems programming, which could benefit            and the type of problem which can eventually 60                                                                           Session No. 2 Applications 


benefit from heuristic techniques.                   guage which can be used for stating a wide 
                                                     variety of problems to be solved, and then with 
II. RELATED EXISTING WORK                            the effectiveness of methods for solving those 
      The earliest work dealing with a realistic     problems. Although most of the problems he 
programming problem seems to be that of              solves are unrelated to programming, one ex•
Friedberg (7, 8) in 1958. He assumed the exis•       ample is shown of changing the values of com•
tence of a computer, and tried to develop a          puter registers given their existing contents 
"learning machine" which would program the           and certain machine instructions. 
computer to yield an acceptable output for each             The PILOT system of Teitelman (20) 
input, e. g., complement the input bit. The ap•      makes automatic corrections to certain errors 
proach was by trial and error, with feedback         in LISP programs, while still allowing the user 
given on the correctness of the result in each       to override the automatic facility. 
case. Other attempts to develop "learning 
                                                            Although the use of a computer to do 
programs" were made by Campaigne (4) and 
                                                     formal integration is somewhat different from 
Arnold (1). The latter dealt specifically with 
                                                     the types of problems with which this paper 
finding a program for a new computer which is 
                                                     deals, the development of SAINT by Slagle (18) 
equivalent (with respect to input and output) to a 
                                                    deserves mention. What makes this particu•
program on another computer; he used a "modi•
                                                     larly interesting, and relevant for the future, 
fied British Museum" approach. Kilburn, 
                                                     is the later development of SIN by Moses (16) in 
Grimsdale and Sumner (11) developed a program 
                                                    which he was able to replace some of the heu•
which could produce programs for a computer 
                                                     ristic work done by SAINT with algorithms 
with 4 arithmetic and 2 copy instructions; the 
                                                    which provided great improvements in speed. 
program was considered acceptable if it pro•
                                                     This implies that in at least some problems, if 
duced a sequence of numbers satisfying some 
                                                    appropriate heuristic techniques can be devel•
predefined criteria (e. g., weak convergence). 
                                                    oped, then perhaps after further study they can 
     In 1963, Simon (17) used an approach sim•       be (partially) replaced by algorithms which are 
ilar to the techniques of GPS to develop a heu•      actually more efficient. 
ristic compiler which constructed an IPL-V 
program from stated input and output require•        III. PROGRAMMING PROBLEMS NEEDING 
ments. While some success was achieved in                SOLVING 
simple cases, this work has apparently not 
                                                            This section discusses a number of 
been developed further. 
                                                     programming problems which need solution and 
      The DEDUCOM system (19) was primarily          which seem amenable to solution, or at least 
concerned with question answering, but did con•      improvement, by various techniques common 
sider the problem of writing simple programs,        in artificial intelligence. It should not be as•
and solved a small portion of a problem dealt        sumed that all programming problems fall in 
with by Simon's heuristic compiler.                  this category. Section III. 1 indicates the char•
                                                     acteristics which programming problems should 
      The problem of writing programs from 
                                                     (and should not) have to make them suitable for 
stated inputs and outputs has been considered 
                                                     attack by artificial intelligence techniques. Sec•
more recently. Green (9) and Waldinger (23, 
                                                    tion III. 2 then discusses some specific prob•
24) deal with this problem, and provide simple 
                                                     lems, divided into four main areas. 
but practical illustrations of their techniques, 
which are closely related to theorem proving        III. 1 Characteristics of Programming Prob-
and formal logic. In a further development,               lems Which Make Them Suitable for AI 
(14) describes a theorem-proving approach to              Techniques 
automatic program synthesis. 
                                                           Although the phrase "artificial intelli•
     The problem of writing programs from           gence techniques" appears frequently in this 
stated inputs and outputs is of course closely      paper, a definition of this phrase is deliberately 
related to the concept of proving the validity of   being omitted. The reason is to avoid an argu•
existing programs; much work has been done in       ment on the definition or scope of artificial 
this area lately, as shown by London's bib•         intelligence and its techniques. Intuitively what 
liography (12).                                     is being postulated is the situation in which a 
                                                    number of possible solutions for a problem 
     A conceptually different approach is used 
                                                    (which itself may be large or small) are avail•
by Fikes in his REF-ARF system (6). His con•
                                                    able, and at least one of these solutions is 
cern is with the development of an input Ian-
                                                    desired. In most cases, the "solution" is Session No. 2 Applications                                                                       61 


 required to be optimal according to some cri•       program or application). 
teria. The facet of AI techniques which involve             (2) Problems where the interaction of 
 "self-improving" facilities in the programs is      factors is not well defined (e. g. , language 
also needed. It is immaterial whether the AI         design). 
approach is via "generality" (e.g., GPS) or 
 "expertise" (e. g., SIN). It is inherent in this           (3) Problems where timing is critical 
formulation that for some problems the solu•         and solutions must be reached in minutes or 
tions cannot be found at all, or cannot be found     seconds (e. g., process control, traffic control). 
in a "reasonable" length of time. This has an               (4) Problems where lives are at stake 
 effect in terms of limiting the class of prob•      (e. g. , manned space flights, air traffic con•
lems which should be attacked.                       trol). 
      The two basic characteristics which pro•
 gramming problems should have to make them          III. 2 Specific Problems Suitable for Applica•
 suitable for the application of artificial intelli•      tion of AI Techniques 
 gence techniques are as follows:                           This section describes some specific 
      (1) The problem must be structured well        programming problems which are amenable to 
 enough so that a method for obtaining one or        solution or improvement through the use of AI 
more basic solutions is known or can be devel•       techniques. This is a representative - but by 
 oped by people knowledgeable about the problem      no means an exhaustive - list of such problems. 
 (e. g., design of large data files).                       The problems have been divided into 
      (2) The problem should have a very             four main areas: (1) data structure and organi•
 large number of potential or feasible solutions     zation, (2) program structure and organization, 
 (which may vary with time), but without a clear     (3) improvement and correction of programs, 
 or easy or practical way of determining the best    and (4) language. It will be noted that in one 
 one (e. g., file layouts, scanning algorithms in    guise or another the issue of language keeps 
 compilers).                                         cropping up. This is not merely because of 
                                                     personal predilections of the author, but be•
      In addition to having these required           cause language is the means by which people 
 characteristics, problems with one or more of       communicate with each other and with the com•
 the following elements are suitable:                puter. If an idea is in the mind of a person, he 
      (1) Individual cases or users should have      needs a language (however feeble or inarticu•
 individual treatment to achieve the best results    late either the language or the idea is) to com•
 (e. g., error checking of programs or data).        municate it. 

      (2) Reorganization of the program or the       III. 2.1 Data Structure and Organization 
 system can improve efficiency or reduce errors, 
 but this can't be determined until the program             One of the major practical problems 
 is developed and then it is too late to rewrite     facing any organization is the handling of large 
 (e. g., any case where sequencing of computa•       quantities of data, commonly referred to as 
 tions has been specified but is not necessarily     "data bases". This data can range from highly 
 the most efficient).                                structured information such as personnel infor•
                                                     mation such as personnel information (e. g. , 
      (3) Individual modules or algorithms           name, address, social security number, job 
 needed in the overall program are available but     identification, salary, education, etc.) to more 
 proper selection of the right one(s) is time-con•   amorphous or frequently changing information 
 suming and laborious and not obvious (e. g. ,       (e. g. , the location of parts, finished goods, or 
 routines to access data, modules in a self-         delivery trucks, and the financial status of each 
 adjusting compiler).                                of these). Furthermore, in todays environment 
      It might be assumed that all programming       where teleprocessing equipment and terminals 
 problems fall into one or more of the above cat•    are common, people in one part of a large com-
 egories. This is not true, and there are cer•       pary want immediate - or at least rapid -
 tain characteristics which make a problem           access to this information. In the cases of the 
 unsuitable for the application of current artifi•   structured data this is not too difficult to do ef•
                                                     ficiently, but in the less well, or non-structured 
 cial intelligence techniques: 
                                                     data, it is virtually impossible. 
      (1) Very broad problems which require 
 intuition or vast experience to solve (e. g. , 
 overall systems design for any very large  62                                                                          Session No. 2 Applications 


       The problem involved is not how to find a_     Similarly, the logical data structure could be 
 way to structure the data. This is done in each      changed based on usage. 
 case by the systems analysts, data base man•                A second major problem is so old it is a 
 agers, programmers, and anyone else involved.        shame that it has not been attacked before. This 
 However, the techniques they use are generally       involves the classical decision as to when to 
 ad hoc and based on experience, intuition, or        store information, and when to compute it. In 
 often just doing what seems easiest, even            the early days of computing, it was thought that 
 though analytic techniques are becoming avail•       tables for trigonometric routines should be 
 able. The large numbers of access methods for        stored. It was rapidly ascertained that com•
 data make it clear that the way in which data is     puters had insufficient storage for all those 
 prepared logically and then stored physically in     numbers and the program as well, so the value 
 a computer is not a stereotyped activity and re•     of a particular trig function had to be calculated 
 quires careful consideration. The complexity         as needed. Now, with modern day computers 
 of the problem is partially illustrated by the      whose storage capacities are orders of magni•
 need for using a File Organization Evaluation        tude greater, it may be time to reevaluate this 
 Model (FOREM) to do a simulation of a para•          classical problem and solution. Again, this 
 metric study of file design (see (13)). Thus, the   decision could be made by a program from 
 number of possibilities for a file design is so      specification of the given problem and the 
 large that even though the analytic techniques      available equipment, and adjusted as necessary 
 for doing a thorough study are available, the       based on experience. 
 people and machine time required may be pro•
 hibitive. This is a case in which heuristic         III. 2. 2 Program Structure and Organization 
 techniques might fruitfully be used to reduce 
 the solution space so as to permit existing ana•            All programming languages in use today 
 lytic techniques to be applied to a smaller (and    tell the computer what to do and in what se•
 hence more practical) number of cases.              quence to do it. They vary considerably in the 
                                                     amount of information supplied to the computer, 
      In addition to the above problem, the 
                                                     and the level of detail in that sequencing. This 
 artificial intelligence field should find ways of 
                                                      is represented by the conclusion reached by 
 developing a system (i. e. , program) which 
                                                     thiB author that the definition of a "nonproce•
 itself will determine the "best" way to store the 
                                                     dural language" is relative to the state of the 
 data, depending upon its potential usage. The 
                                                     art of languages and compilers. The problem 
 real key to this is the phrase "depending upon 
                                                     to be dealt with here is to allow both major and 
 its potential usage". Information which in 
                                                     minor decisions of program organization to be 
 practise is used only in a batch environment, or 
                                                     made by an "intelligent" system. In the case 
 by a very limited number of people at termi•
                                                     of higher level languages and their compilers, 
 nals, can be handled today. It is when the com•
                                                     many decisions are already made by the latter. 
 binations of possibilities get very large that the 
                                                     For example, detailed code sequences, alloca•
 difficulties set in. The problem has to be bro•
                                                     tion of memory, and manipulation of registers 
 ken down into (a) specifying the ways in which 
                                                     are all decided by the compilers, but in a 
 the data is to be used, (b) describing the data, 
                                                     fairly rigid way. Several things need to be done 
 (c) specifying the constraints (which often means 
                                                     by the compilers. 
 the objectives), and then allowing a program to 
 produce the optimum data layout for the objec•              The compilers should be able to accept 
 tives specified. Furthermore, this program          a much higher level of language and decide how 
 should include "learning" facilities so that the    to structure the program. For example, in the 
 data can be automatically reorganized, based on     problem "CALCULATE THE SQUARE ROOT 
 practical experience by the users, or changes       OF THE PRIME NUMBERS FROM 3 TO 99 AND 
 in the constraints or objectives. For example,      PRINT IN TWO COLUMNS", there are essen•
 a large company might set up a data manage•         tially two main organizational approaches. One 
 ment system based on the assumption that on•        is to take each odd number in turn from 3 to 99, 
 line access to the data would be equally required   immediately test it for primeness, and then 
 from many places in the country. Actual expe•       immediately calculate and print the square root 
 rience might show that only a few locations         for each prime number. The other major orga•
used the on-line facility, and a program with        nization is to first test all the odd numbers and 
built-in learning facilities could monitor the       create a list of prime numbers, then take each 
usage and automatically readjust the physical        prime number and produce the list of numbers 
data organization to produce greater efficiency.     to be printed, and finally to do the printing. It 
                                                     is not the least bit obvious which is the more Session No. 2 Applications                                                                       63 


 efficient organization since it depends entirely    in developing module libraries lie primarily in 
 on the computer configuration. (This is a           finding methods of describing the module so 
 greatly simplified version of a very practical      anyone can know which to select, and specify•
 problem encountered by this author in which the     ing interfaces which would allow modules devel•
 first program structure was used whereas the        oped by different people for different purposes 
 second would have reduced the running time by       to be pulled together in one program. ) 
 a factor of 100. ) In cases like these the pro•
                                                             In considering an operating system, 
 grammer should not have to (or be allowed to) 
                                                     the use of AI techniques would enable automatic 
 specify the sequencing except where needed log•
                                                     reassignment of data in an installation to dif•
 ically. Even when - or if - we get compilers 
                                                     fering storage devices, with self-improvement 
 which are capable of accepting the sentence 
                                                     of the system based on continuous changes in 
 cited above, it is unlikely that the compiler will 
                                                     the individual programs, and experience from 
 do anything other than use one or the other of 
                                                     the general job stream. Furthermore, heu•
 these organizational approaches, i. e. , the com•
                                                     ristic analysis of the job mix would enable fre•
 piler will almost surely have a single built-in 
                                                     quent reorganization of the operating system to 
 method whereas it should have heuristics to 
                                                     achieve the best performance for the individual 
 determine the best. 
                                                     installation. 
        Two major programming efforts for 
                                                             Of the two major systems program•
 systems programmers are compilers and oper•
                                                     ming activities cited above, the application of 
 ating systems. In both cases, a major design 
                                                     AI techniques to compilers will be far easier 
 objective is modularity, i, e. , the program 
                                                     initially because the compilers - although 
 should be designed in small units each of which     large - are an order of magnitude smaller than 
 can be replaced without affecting others. Com•      the operating systems, and are much better 
 pilers are generally designed to achieve one        understood at this point in time. However, as 
 major objective, e. g. , speed of compilation,      an illustration of one small example of improve•
 speed of object code, minimum storage for ob•       ment in an operating system, the MULTICS 
 ject code, maximum error checking, etc. Sel•        system at Project MAC (5) is experimenting 
 dom does the user have a choice. What needs         with inclusion of an algorithm for doing pre•
 to be tackled from the artificial intelligence      dictive paging, i. e. , guess which pages will be 
 view is to create a self-organizing compiler,       needed next based on the history of the partic•
 i. e. , provide many modules in a compiler to do    ular program, and bring them in; their experi•
 the same task with each using different tech•       ence shows a slight gain in performance from 
 niques, and bring them together in an "intelli•     doing this. 
 gent" fashion, depending on the needs of the par•
 ticular user and program to be compiled. Prob•               In a general sense, an "understanding" 
 ably no two compilations would be done the          of any program would permit its reorganization 
 same way, if this capability were available.        in a manner most effective for the equipment 
 The heuristic techniques can be applied in two      (hardware and software) available. In a con•
 ways. One is to select, as indicated above, the     crete situation involving parallel processors, 
 "best set" of modules for a particular compila•     rearrangement of the program by heuristic 
 tion. The information needed for this selection     techniques would eliminate the need for special 
 would include constraints and priorities from       language features to denote parallelism. 
 the user, the compiler's knowledge of the cur•      (Numerous proposals have been made for the 
 rent operating environment, history about that      latter; sre for example (21) and its bibliography) 
 particular user, etc. An alternate use of heu•
 ristics would involve a "quick and dirty" scan      III. 2. 3 Improvement and Correction of Pro•
 of the source code combined with whatever in•               grams 
 formation of the type above was available, and               For any program which solves a spe•
 then production of the most effective compiler.     cific problem, it should be possible for another 
 This represents a compiler generator of a new       program to improve the first one, i.e., it 
 type.                                               should be possible to have the system rewrite 
        (The use of artificial intelligence to       the problem program for better efficiency. As 
 select the right modules from compilers should      an example of this, consider the earlier state•
 not be confused with the classical programming      ment "CALCULATE THE SQUARE ROOT OF 
 problem of developing module libraries, which       THE PRIME NUMBERS FROM 3 TO 99 AND 
 has not yet been solved and for which AI is un•     PRINT IN TWO COLUMNS". If this is coded 
 likely to be of much assistance. The problems       (in a current language) in either way indicated 