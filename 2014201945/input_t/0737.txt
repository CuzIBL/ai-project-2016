      The   computational      complexity     of dominance      and  consistency     in CP-nets

    Judy  Goldsmith             Jer´ omeˆ Lang        Miroslaw  Truszczynski´          Nic Wilson
  Dept. of Comp.   Sci.              IRIT               Dept. of Comp.  Sci.         Cork Constraint
 University of Kentucky    Universite´ Paul Sabatier  University of Kentucky       Computation  Centre
     Lexington, KY          31062  Toulouse Cedex         Lexington,  KY         University College Cork
   40506-0046,  USA                 France               40506-0046,  USA                Ireland
  goldsmit@cs.uky.edu            lang@irit.fr            mirek@cs.uky.edu          n.wilson@4c.ucc.ie

                    Abstract                            We study the computational complexity of these two prob-
                                                      lems. The results obtained so far concerned only restricted
    We  investigate the computational complexity of   classes of CP-nets, all requiring that the graph of variable de-
    testing dominance and consistency in CP-nets. Up  pendencies implied by preference statements in the CP-net be
    until now, the complexity of dominance has been   acyclic. Under certain assumptions, the dominance-testing
    determined only for restricted classes in which the problem is in NP and, under some additional assumptions,
    dependency graph of the CP-net is acyclic. How-   even in P [Domshlak and Brafman, 2002; Boutilier et al.,
    ever, there are preferences of interest that deﬁne 2004a]. Its complexity in the general case has remained until
    cyclic dependency graphs; these are modeled with  now an open problem. We show that it is in fact PSPACE-
    general CP-nets. We show here that both domi-     complete, even for the propositional case, by exhibiting in
    nance and consistency testing for general CP-nets Section 4 a PSPACE-hardness proof for dominance testing.
    are PSPACE-complete. The reductions used in the     We  then turn to consistency testing. While acyclic CP-
    proofs are from STRIPS planning, and thus estab-  nets are guaranteed to be consistent, this is not the case
    lish strong connections between both areas.       with general CP-nets (see [Domshlak and Brafman, 2002;
                                                      Brafman and Dimopoulos, 2004] for detailed examples and
1  Introduction                                       discussions). In Section 5, we show that consistency testing
The problems of eliciting, representing and reasoning with is as hard as dominance testing.
preferences over a multivariable (or, multiattribute) domain To prove the hardness part of the results, we ﬁrst establish
                                                         PSPACE
arise in many ﬁelds such as planning, design, and group de- the  -hardness of some problems related to proposi-
cision making. An explicit representation of a preference or- tional STRIPS planning. We then show that these problems
dering of elements (we refer to them as outcomes) of such can be reduced to CP-net dominance and consistency testing
multivariable domains is exponentially large in the number by exploiting connections between actions in STRIPS plan-
of attributes. Therefore, AI researchers have developed lan- ning and preference statements in CP-nets.
guages for representing preference orderings succinctly. The We assume some familiarity with the complexity class
                                                      PSPACE             [                 ]
formalism of CP-nets [Boutilier et al., 1999] is among the     (we refer to Papadimitriou, 1994 for details). In
                                                                                             NPSPACE   =
most popular ones. A CP-net provides a succinct represen- particular, we rely later on the equivalences
                                                      PSPACE   = coPSPACE
tation of preference ordering on outcomes in terms of local                .
                                                        The complexity results in this paper address cyclic CP-
preference statements of the form p : xi > xj , where xi, xj
are values of a variable X and p is a logical condition. Infor- nets. Most earlier work has concentrated on the acyclic
mally, a preference statement p : x > x means that given model. However, we argue that acyclic CP-nets are not suf-
                              i    j                  ﬁciently expressive to capture human preferences on even
p, xi is (strictly) preferred to xj ceteris paribus, that is, all
other things being equal. The meaning of a CP-net is given some simple domains. Consider, for instance, a diner who
by a certain ordering relation (dominance) on the set of out- has to choose either red or white wine, and either ﬁsh or meat.
comes, derived from such reading of preference statements. Given red wine, they prefer meat, and conversely, given meat
If one outcome dominates another, we say that the dominant they prefer red wine. On the other hand, given white wine,
one is preferred.                                     they prefer ﬁsh, and conversely, given ﬁsh they prefer white
  Reasoning about the preference ordering (dominance rela- wine. This gives a consistent cyclic CP-net, and there is no
tion) expressed by a CP-net is far from easy. The key prob- acyclic CP-net giving rise to the same preferences on out-
lems include dominance testing and consistency testing. In comes. So, such cyclicity of preference variables does not
the ﬁrst problem, given a CP-net and two outcomes α and β, necessarily lead to a cyclic order on outcomes.
we want to decide whether β dominates α. The second prob-
lem asks whether there is a dominance cycle in the dominance 2 Generalized propositional CP-nets
ordering deﬁned by an input CP-net, that is, whether there is Let V = {x1, . . . , xn} be a ﬁnite set of variables. For each
an outcome that dominates (is preferred to) itself.   variable x ∈ V , we assume a ﬁnite domain Dx of values. Anoutcome is an n-tuple (d1, . . . , dn) of Dx1 × · · · × Dxn . Deﬁnition 3
  In this paper, we focus on propositional variables: vari- A GCP-net C over V is locally consistent if for every x ∈
                                                                    −       +
ables with binary domains. Let V be a ﬁnite set of propo- V , the formula pC (x) ∧ pC (x) is unsatisﬁable. It is locally
                        x    V       D       x, x                                         −      +
sitional variables. For every ∈ , we set x = { ¬ }    complete if for every x ∈ V , the formula pC (x) ∨ pC(x) is a
(thus, we overload the notation and write x both for the vari- tautology.
able and for one of its values). We refer to x and ¬x as liter-
                                                      Deﬁnition 4 (Propositional CP-net) A CP-net over the set
               l        ¬l                       l
als. Given a literal we write to denote the dual literal to . V of (propositional) variables is a locally consistent and lo-
The focus on binary variables makes the presentation clearer cally complete GCP-net over V .
and has no impact on our complexity results.
  A conditional preference rule (or, for short, a [preference] Problems CP-DOMINANCE and CP-CONSISTENCY are de-
rule) over V is an expression p : l > ¬l, where l is a literal ﬁned analogously to Deﬁnition 2.
of some atom x ∈ V and p is a propositional formula over V This deﬁnition of a CP-net differs from the one given in
that does not involve variable x.                     [Boutilier et al., 2004a], which uses explicit conditional pref-
                                                      erence tables. Our representation is often more compact, but
Deﬁnition 1 (Generalized CP-net) A generalized CP-net C it is easy to verify that it is equivalent in that it gives rise to
(for short, a GCP-net) over V is a set of conditional prefer-
                             +         −              the same deﬁnition of dominance.
ence rules. For x ∈ V we deﬁne pC (x) and pC (x), usually When deﬁning a decision problem, it is critical to specify
            +        −               +
written just: p (x) and p (x), as follows: pC (x) is equal to the way to represent its input instances, as the representation
the disjunction of all p such that there exists a rule p : x > ¬x may affect the complexity of the problem. Unless stated oth-
      −
in C; pC(x) is the disjunction of all p such that there exists erwise, we assume that GCP-nets (and so, also CP-nets) are
a rule p : ¬x > x in C. We deﬁne the associated directed represented as a set of preference rules, as described in Deﬁ-
graph GC (the dependency graph) over V to consist of all nition 1. Therefore, the size of a GCP-net is given by the total
                                              +
pairs (y, x) of variables such that y appears in either p (x) size of the formulas p−(x), p+(x), x ∈ V .
or p−(x).
  In our complexity results we will also need the following 3 Propositional STRIPS planning
representation of GCP-nets: a GCP-net C is said to be in con- In this section we derive some technical results on proposi-
junctive form if C only contains rules p : l > ¬l such that p tional STRIPS planning which form the basis of our complex-
is a (possibly empty) conjunction of literals. In this case all ity results in Sections 4 and 5. We establish the complexity of
formulas p−(x), p+(x) are in disjunctive normal form, that plan existence problems for propositional STRIPS planning,
is, a disjunction of conjunctions of literals (including > – the under restrictions on input instances that make the problem
empty conjunction of literals).                       useful in the studies of dominance and consistency in GCP-
  GCP-nets determine a transitive relation on outcomes, in- nets.
terpreted in terms of preference. A preference rule p : l > ¬l Let V be a ﬁnite set of variables. A state over V is a com-
represents the statement “given that p holds, l is preferred to plete and consistent set of literals over V (which we often
¬l ceteris paribus”. Its intended meaning is as follows. If view as the conjunction of its members). A state is therefore
outcome β satisﬁes p and l, then β is preferred to the out- equivalent to an outcome, deﬁned in a CP-nets context.
come α which differs from β only in that it assigns ¬l for
                                                      Deﬁnition 5 (Propositional STRIPS planning) A proposi-
variable x. In this situation we say that there is an improv-
                                                      tional STRIPS instance is a tuple hV, α , γ, ACT i, where
ing ﬂip from α to β sanctioned by the rule p : l > ¬l. If                              0
                                                        1. V is a ﬁnite set of propositional variables;
α0, . . . , αm is a sequence of outcomes with m ≥ 1 and each
next outcome in the sequence is obtained from the previous 2. α0 is a state (over V ), called the initial state;
                                    α , . . . , α
one by an improving ﬂip, then we say that 0 m is an     3. γ is a state called the goal;
improving sequence (from α0 to αm) for the GCP-net, and
                                                        4. ACT  is a ﬁnite set of   , where each action a
that αm dominates α0, written α0 ≺ αm.                                        actions                  ∈
  Finally, A GCP-net is consistent if there is no outcome α ACT is described by a consistent conjunction of literals
which is strictly preferred to itself, i.e., such that α ≺ α. pre(a) (a precondition) and a consistent conjunction of
  The main objective of the paper is to establish the com- literals post(a) (a postcondition, or effect).
plexity of the following two problems concerning the notion An action a is executable in a state α if α |= pre(a). The ef-
of dominance associated with GCP-nets (sometimes under re- fect of a in state α is the state α0 containing the same literals
strictions on the class of input GCP-nets).           as α for all variables not mentioned in post(a), and the liter-
                                                      als of post(a) otherwise. We assume that an action can be ap-
Deﬁnition 2
                                                           to any state, but that it has no effect if its preconditions
               : given a GCP-net C and two outcomes α plied
GCP-DOMINANCE                                         do not hold (this assumption has no effect on complexity).
and β, decide whether α ≺ β in C.
                                                      The                                      problem, or
                 : given a GCP-net C, decide whether C    PROPOSITIONAL  STRIPS PLAN EXISTENCE
GCP-CONSISTENCY                                                    for short, is to decide whether for a given
is consistent.                                        STRIPS PLAN
                                                      propositional STRIPS instance hV, α0, γ, ACT i there is a
  There are two properties of GCP-nets that are essential in successful plan, that is, sequence of actions leading from the
linking them to the original notion of CP-nets [Boutilier et initial state α0 to a state satisfying the goal γ.
al., 1999; 2004a].                                    A plan is irreducible if its every action changes the state.We assume, without loss of generality, that for any action a, We will denote states over V 0 by pairs (α, k), where α is
no literal in post(a) also appears in pre(a); otherwise we can a state over V and k is an integer, 0 ≤ k ≤ 2n − 1. We
omit the literal from post(a) without changing the effect of view k as a compact representation of a state over variables
the action; (if post(a) then becomes an empty conjunction, z1, . . . , zn: assuming that the binary representation of k is
the action a can be omitted from ACT as it has no effect). d1 . . . dn (with dn being the least signiﬁcant digit), k repre-
  We have the following result, proved in [Bylander, 1994] : sents the state which contains zi if di = 1 and ¬zi, otherwise.
                                                           0                                  ACT  0
Proposition 1 ([Bylander, 1994])                        PE  is acyclic, since executing any action in incre-
                                                      ments the counter k and no action can be executed once the
STRIPS PLAN is PSPACE-complete.
                                                      counter has reached the value 2n − 1.
  Typically, propositional STRIPS instances do not require We claim that there is a plan for PE if and only if there is
that goals be complete. We restrict consideration to com- a plan for PE0. First, assume that there is a plan in PE. Let
plete goals. This restriction has no effect on the complex- π be a shortest plan in PE and let m be its length. We have
ity: the plan existence problem remains PSPACE-complete m ≤ 2n −1, since no state along π repeats (otherwise, shorter
under the goal-completeness restriction [Lang, 2004]. plans than π for PE would exist). Let α0, α1, . . . , αm =
                                                      γ be the sequence of states obtained by executing π. Let a
3.1  Acyclic STRIPS
                                                      be the action used in the transition from αk to αk+1. Since
Deﬁnition 6 (Acyclic sets of actions) A set of actions ACT k < 2n − 1, there is exactly one i, 1 ≤ i ≤ n, such that
is acyclic if there is no state α such that hV, α, α, ACT i has the action ai applies at the state (α, k) over V 0. Replacing a
                                                            i
a non-empty irreducible plan (informally, if there are no non- with a in π yields a plan that when started at (α0, 0) leads
trivial directed cycles in the space of states induced by ACT ). to (αm, m) = (γ, m). Appending that plan with appropriate
                                                            b                        2n − 1
We will now consider the following two problems:      actions i to increment the counter to yields a plan for
                                                      PE0. Conversely, if τ is a plan for PE0, the plan obtained from
 1. ACYCLIC STRIPS PLAN: given a propositional STRIPS τ by removing all actions of the form bj and replacing each
    instance hV, α0, γ, ACTi such that ACT is acyclic action ai with a is a plan for PE.
    and α0  6=  γ, decide whether there is a plan for   Thus, the claim and the assertion follow.      
    hV, α0, γ, ACTi.
 2. ACTION-SET ACYCLICITY: given a set ACT of actions, Proposition 3
                 ACT
    decide whether    is acyclic.                     ACTION-SET  ACYCLICITY is PSPACE-complete.
We will show that both problems are PSPACE-complete.  Proof: The argument for the membership in PSPACE is
Proposition 2                                         standard. To  prove PSPACE-hardness,  we proceed as
ACYCLIC STRIPS PLAN is PSPACE-complete.               follows. Let PE = hV, α0, γ, ACT i be a STRIPS instance
                                                      such that ACT is acyclic and α 6= γ. Let a be a new action
Proof: Membership in PSPACE is evident as the problem is a                       0
                                                      deﬁned by pre(a) = γ and post(a) = α . It is easy to see
                               PSPACE                                                    0
restriction of STRIPS PLAN. To prove   -hardness, we  that ACT ∪ {a} is not acyclic if and only if there exists a
exhibit a polynomial-time reduction from STRIPS PLAN. Let
                                                      plan for PE. Thus, the PSPACE-hardness of the complement
PE = hV, α , γ, ACTi be an instance of STRIPS PLAN. The
          0                                           of the ACTION-SET  ACYCLICITY  problem follows from
                                     counter
idea behind the reduction is to introduce a , so that Proposition 2. Since PSPACE = coPSPACE,  this sufﬁces
each time an action is executed, the counter is incremented.
                                                      to prove the hardness part of the assertion.     
The counter may count up to 2n, where n = |V |, making
use of n additional variables. The counter is initialized to 0.
Once it reaches 2n − 1 it can no longer be incremented and 3.2 Mapping STRIPS plans to single-effect
no action can be executed. Hence, the set of actions in the STRIPS  plans
resulting instance of STRIPS PLAN is acyclic.
                                                      Versions of the STRIPS PLAN and ACYCLIC STRIPS PLAN
  To describe the reduction, we write V as {x1, . . . , xn}. We
deﬁne PE0 = hV 0, α0 , γ0, ACT 0i as follows:         problems that are important for us allow only single-effect ac-
                 0                                    tions (actions with exactly one literal in their postconditions)
      0
  • V  = {x1, . . . , xn, z1, . . . , zn}, where zi are new vari- in input propositional STRIPS instances. We refer to these re-
    ables we will use to implement the counter;       strictions as SE STRIPS PLAN and ACYCLIC SE STRIPS PLAN.
     0                                                           PSPACE
  • α0 = α0 ∧ ¬z1 ∧ · · · ∧ ¬zn;                        To prove         -hardness of both problems, we de-
     0                                                scribe a mapping from STRIPS instances to single-effect
  • γ = γ ∧ z ∧ · · · ∧ zn;
             1                                        STRIPS instances.
                                          0
  • for each action a ∈ ACT , we include in ACT n actions Consider an instance PE = hV, α0, γ, ACT i of the STRIPS
     i
    a , 1 ≤ i ≤ n, such that                          PLAN problem (where ACT  is not necessarily acyclic). For
         i
    pre(a ) = pre(a) ∧ ¬zi ∧ zi+1 ∧ · · · ∧ zn        each action a ∈ ACT we introduce a new variable xa. We
    post ai   post a   z    z           z
        ( ) =     ( ) ∧ i ∧ ¬ i+1 ∧ · · · ∧ ¬ n       set X =  Va∈ACT  ¬xa.  That is, X is the conjunction of
                                0
  • Furthermore, we include in ACT n actions bi, 1 ≤ i ≤ negative literals of all the additional variables. In addition,
    n, such that                                      for each a ∈ ACT we set Xa = xa ∧ Vb∈ACT−{a} ¬xb. We
                                                                             0     0  0  0
    pre(bi) = ¬zi ∧ zi+1 ∧ · · · ∧ zn                 now deﬁne an instance PE = hV , α0, γ , S(ACT )i of the
    post(bi) = zi ∧ ¬zi+1 ∧ · · · ∧ ¬zn               SE STRIPS PLAN problem as follows:                    0
  • Set of variables: V = V ∪ {xa : a ∈ ACT };        the GCP-DOMINANCE  and GCP-CONSISTENCY  problems by
                0                                     constructing a reduction in the other direction.
  • Initial state: α0 = α0 ∧ X;
               0                                        This reduction is much more complex than the one used in
  • Goal state: γ = γ ∧ X;                            [Boutilier et al., 1999], due to the fact that CP-nets impose
  • Set of actions: S(ACT ) = {ai : a ∈ ACT  , i =    more restrictions than STRIPS planning. Firstly, STRIPS
    1, . . . , 2|post(a)| + 1}.                       planning allows multiple effects, but GCP-nets only allow
    Let a ∈  ACT   and post(a) =  l1 ∧ · · · ∧ lq. For ﬂips x > ¬x or ¬x > x that change the value of one vari-
    i = 1, . . . , q, we deﬁne:                       able; this is why we constructed the reduction from STRIPS
        i                          i
    pre(a ) = pre(a) ∧ X ∧ ¬li; post(a ) = xa;        planning to single-effect STRIPS planning in the last section.
        q+i              q+i
    pre(a  ) = Xa; post(a   ) = li.                   Secondly, CP-nets impose two more restrictions, local con-
    We also deﬁne:                                    sistency and local completeness, which do not have natural
        2q+1                          2q+1
    pre(a   ) = Xa ∧ l1 ∧ · · · ∧ lq; post(a ) = ¬xa. counterparts in the context of STRIPS planning.
  Let π be a sequence of actions in ACT . We deﬁne S(π) to For all dominance and consistency problems considered in
be the sequence of actions in S(ACT ) obtained by replacing the paper, the membership in PSPACE can be demonstrated
each action a in π by a1, . . . , a2q+1 (where q = |post(a)|). by considering nondeterministic algorithms consisting of re-
Now consider a sequence τ of actions from S(ACT ). Re- peatedly guessing appropriate improving ﬂips. Such algo-
move from τ any action ai such that i 6= 2|post(a)| + 1, and rithms work in polynomial space and show the membership
replace actions of the form a2|post(a)|+1 by a. We denote the of problems they solve in NPSPACE and consequently in
resulting sequence of actions from ACT by S0(τ). The fol- PSPACE, since NPSPACE = PSPACE. Therefore, due to
lowing properties are easy to check (details are omitted): space restrictions, from now on we only provide arguments
                                                      for the PSPACE-hardness of problems we consider.
Lemma  1 With the above deﬁnitions,
 (i) if π is a plan for PE then S(π) is a plan for PE0; 4.1 Dominance  for generalized CP-nets
(ii) if τ is an irreducible plan for PE0 then S0(τ) is a plan We will prove that the GCP-DOMINANCE problem is
    for PE;                                           PSPACE-complete   by a reduction from the problem SE
(iii) ACT is acyclic if and only if S(ACT ) is acyclic. STRIPS PLAN, which we now know to be PSPACE-complete.
Proposition 4                                         Mapping  single-effect STRIPS problems to GCP-nets
SE STRIPS  PLAN  and ACYCLIC   SE STRIPS  PLAN  are   dominance problems
PSPACE-complete.                                      Let hV, α0, γ, ACT i be an instance of the SE STRIPS PLAN
Proof: SE STRIPS PLAN and ACYCLIC  SE  STRIPS PLAN    problem. For every action a ∈ ACT we denote by la the
                                                      unique literal in the postcondition of a, that is, post(a) = la.
problems are restrictions of STRIPS PLAN, from which                 0
membership in PSPACE   follows. PSPACE-hardness  of   We denote by pre (a) the conjunction of all literals in pre(a)
                                                      different from ¬la (we recall that by a convention we adopted
ACYCLIC SE STRIPS PLAN  (and so, also of the other prob-       0
                                                      earlier, pre (a) does not contain la either). We then deﬁne ca
lem) is shown by reduction from ACYCLIC STRIPS PLAN.                                    0
                                                      to be the conditional preference rule pre (a) : la > ¬la and
Consider an instance PE = hV, α0, γ, ACT i of ACYCLIC
                      0     0  0  0                   deﬁne M(ACT  ) to be the GCP-net C = {ca: a ∈ ACT }.
STRIPS PLAN. Deﬁne PE  =  hV , α0, γ , S(ACT )i, which
by Lemma  1(iii) is an instance of the ACYCLIC SE STRIPS A sequence of states in a plan corresponds to an improving
PLAN problem. By Lemma  1(i) and (ii) there exists a plan sequence from α0 to γ, which leads to the following result.
                                      0
for PE if and only if there exists a plan for PE .   Lemma  2  With the above notation,
                                                       (i) there is  a   non-empty  irreducible plan  for
4  Dominance                                              hV, α0, γ, ACTi if and only if γ dominates α0 in
                                                          C;
The goal of this section is to prove that the GCP-DOMINANCE
problem is PSPACE-complete, and that the complexity does (ii) ACT is acyclic if and only if M(ACT ) is consistent.
not go down even when we restrict the class of inputs to CP-
                                                      Theorem  1 The GCP-DOMINANCE   problem is PSPACE-
nets. We use the results on propositional STRIPS planning complete. Moreover, this remains so under the restrictions
from Section 3 to prove that the general GCP-DOMINANCE that the GCP-net is consistent and is in conjunctive form.
problem is PSPACE-complete. We then show that the com-
plexity does not change if we impose the requirements of lo- Proof: PSPACE-hardness is shown by  reduction
cal consistency and local completeness on input GCP-nets. from ACYCLIC SE STRIPS PLAN (Proposition 4). Let
  The similarities between dominance testing in CP-nets and hV, α0, γ, ACTi be an instance of the ACYCLIC SE STRIPS
propositional STRIPS planning were ﬁrst noted in [Boutilier PLAN problem. By Lemma 2(ii), M(ACT ) is a consistent
et al., 1999], where a reduction (presented in more detail GCP-net in conjunctive form. Since α0 6= γ, there is a
in [Boutilier et al., 2004a]) was given from the dominance plan for hV, α0, γ, ACT i if and only if there is a non-empty
problem to the plan existence problem for a class of propo- irreducible plan for hV, α0, γ, ACT i, which, by Lemma 2(i),
sitional STRIPS planning speciﬁcations consisting of unary is if and only if γ dominates α0 in C.      
actions (actions with single effects). We prove our results for4.2  Dominance  in CP-nets                             (i) if s is an improving sequence for C from α to β then
                                                                                         0           ¯
In this section we show that GCP-DOMINANCE  remains       L(s) is an improving sequence for C from αα¯ to ββ;
PSPACE-complete  under the restriction to locally-consistent (ii) if t is an improving sequence from αα¯ to ββ¯ then L0(t)
and locally-complete GCP-nets, i.e., CP-nets. We refer to this is an improving sequence from α to β;
restriction of GCP-DOMINANCE as CP-DOMINANCE.         (iii) C is consistent if and only if C0 is consistent
  We will show PSPACE-hardness for CP-DOMINANCE by                            n
a reduction from GCP-DOMINANCE for consistent GCP-nets. Sketch of proof: Let e = Vi=1(xi ↔ yi). The deﬁnitions
                                                      have been arranged to ensure the following for CP-net C 0 :
Mapping locally-consistent GCP-nets to CP-nets
                                                       (a) Suppose e holds in an outcome, so the outcome can
Let C  be  a locally-consistent GCP-net. Let V   =
                                               0          be written as αα¯ for some α; then no improving ﬂip
{x1, . . . , xn} be the set of variables of C. We deﬁne V =
                                                          changes any variable xi; furthermore, there is an im-
V ∪ {y1, . . . , yn}, where {y1, . . . , yn} ∩ V = ∅. We deﬁne a
         0      0                                         proving ﬂip changing variable yi if and only if there is
GCP-net C over V , which we will show is a CP-net. To this an improving ﬂip for the GCP-net C from outcome α
end, for every z ∈ V 0 we will deﬁne conditional preference
                                                          changing variable xi. After applying this ﬂip changing
rules q+(z) : z > ¬z and q−(z) : ¬z > z to be included in
                                                          variable yi, there is exactly one improving ﬂip possible,
C0 by specifying formulas q+(z) and q−(z).
                                                          changing xi, after which e holds again (this follows us-
  First, for each variable xi ∈ V , we set
                                                          ing (b), as yi cannot be immediately ﬂipped back again,
            +               −                             because C0 is locally consistent).
           q (xi) = yi and q  (xi) = ¬yi.
                                                       (b) If e does not hold in an outcome then the only improving
Thus, xi depends only on yi. We also note that the for-
      +         −                                         ﬂips possible change the value of some variable (xi or
mulas q (xi) and q (xi) satisfy local-consistency and local-
                                                          yi) to make xi ↔ yi hold for some i.
completeness requirements.
                                                        (a) implies (i) and (ii). Also, (i) implies half of (iii), that
  Next, for each variable yi, 1 ≤ i ≤ n, we deﬁne
                                                      if C is inconsistent then C0 is inconsistent. Conversely,
                                                                   0
      ei  =  (x1 ↔ y1) ∧ · · · ∧ (xi−1 ↔ yi−1)        suppose that C is inconsistent, so there exists an improving
                                                              t    C0
             ∧(xi+1 ↔  yi+1) ∧ · · · ∧ (xn ↔ yn),     sequence  for   from some outcome to itself. By (b), any
                                                      improving ﬂip applied to an outcome in which e does not
        +        +           −        −
       fi = ei ∧ p (xi) and fi = ei ∧ p (xi).         hold increases (by one) the number of i such that xi ↔ yi
                                                      holds. This implies that e must hold in some outcome in
Finally, we deﬁne
                                                      t, because t is cyclic. Write this outcome as αα¯. We can
              +        +      −                                       t                               αα¯
             q  (yi) = fi ∨ (¬fi ∧ xi)                cyclically permute to form an improving sequence from
                                                      to itself. Part (ii) then implies that there exists an improving
and                                                   ﬂipping sequence for C from α to itself, showing that C is
              −       −       +
             q (yi) = fi ∨ (¬fi ∧ ¬xi)                inconsistent.                                    
                                 0
Thus, yi depends on every variable in V but itself.
                                               +
  We note that by the local consistency of C, formulas fi ∧ Theorem 2 CP-DOMINANCE is PSPACE-complete. This
 −
fi , 1 ≤ i ≤ n, are unsatisﬁable. Consequently, formulas holds even if we restrict the CP-nets to being consistent.
 +       −                                      0
q (yi) ∧ q (yi), 1 ≤ i ≤ n, are unsatisﬁable. Thus, C is Proof: We use a reduction from PSPACE-hardness of the
                       q+(y ) ∨ q−(y )
locally consistent. Finally, i     i  is equivalent to GCP-DOMINANCE  problem when the GCP-nets are restricted
 +          −                            0
fi ∨ ¬xi ∨ fi ∨ xi, so is a tautology. Thus, C is locally to being consistent (Theorem 1). Let C be a consistent
                              0
complete and hence a CP-net over V .                  (and hence locally consistent) GCP-net over V , and let α
  Let α  and  β be  outcomes over  {x1, . . . , xn} and and β be outcomes over V . Consider the CP-net C 0 over
{y1, . . . , yn}, respectively. By αβ we denote the outcome variables V 0 constructed above. Lemma 3(i) and (ii) imply
      0
over V obtained by concatenating n-tuples α and β. Con- that β dominates α in C if and only if ββ¯ dominates αα¯ in
                        0
versely, every outcome for C can be written in this way. C0. Moreover, C0 is consistent by Lemma 3(iii). Thus, the
  Let α be an outcome over V . We deﬁne α¯ to be the out- hardness part of the assertion follows.      
come over {y1, . . . , yn} obtained by replacing in α every
component of the form xi with yi and every component ¬xi
with ¬yi. Then for every i, 1 ≤ i ≤ n, αα¯ |= ei.     5   Consistency  of GCP-nets
  Let s be  a sequence α0, . . . , αm of outcomes over
V .  Deﬁne  L(s) to be the sequence of V 0-outcomes:  In this section we show that the GCP-CONSISTENCY problem
                                                      is PSPACE-complete, using results from Sections 3 and 4.
α0α0, α0α1, α1α1, α1α2, . . . , αmαm. Further, let t be a se-
                       0
quence 0, 1, . . . , m of V -outcomes with 0 = αα¯ and Theorem 3
       ¯          0
m = ββ.  Deﬁne L (t) to be the sequence obtained from t GCP-CONSISTENCY is PSPACE-complete. This holds even
by projecting each element in t to V and iteratively removing under the restriction to GCP-nets in conjunctive form.
elements in the sequence which are the same as their prede-
                                                      Proof:  PSPACE-hardness   is shown by reduction from
cessor (until any two consecutive outcomes are different).
                                                      ACTION-SET  ACYCLICITY.   We  apply function S from
Lemma  3 With the above deﬁnitions,                   Section 3.2 followed by M from Section 4.1. This maps