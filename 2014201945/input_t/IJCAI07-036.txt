                 Non-monotonic Temporal            Logics for Goal Speciﬁcation

                                   Chitta Baral   and  Jicheng Zhao
                           Department of Computer Science and Engineering
                                        Arizona State University
                                         Tempe, Arizona 85281
                                       {chitta,jicheng}@asu.edu

                    Abstract                          non-monotonic goal speciﬁcation language should allow us
                                                      to specify a simple goal initially and should allow us to reﬁne
    One of the main ways to specify goals of agents is it by adding new exceptions.
    to use temporal logics. Most existing temporal log- Although non-monotonic versions of various modal logics
    ics are monotonic. However, in representing goals [McDermott, 1982] have been proposed in the past, so far we
    of agents, we often require that goals be changed have come across only two1 [Fujiwara and Honiden, 1991;
    non-monotonically. For example, the initial goal of Saeki, 1987] non-monotonic versions of temporal logics. The
                                           p
    theagentmaybetobealwaysinstateswhere     is       ﬁrst extends auto-epistemic logic with temporal operators and
    true. The agent may later realize that under certain does not explore issues such as elaboration tolerant represen-
    conditions (exceptions) it is ok to be in states where tation of exceptions and weak exceptions. The second has
    p
     is not true. In this paper, we propose a simple ex- semantics issues that are mentioned in the ﬁrst.
    tension of LTL, which we call N-LTL, that allows
                                                        In this paper we start with developing a non-monotonic
    non-monotonic speciﬁcation of goals. We study
                                                      temporal logic based on the linear temporal logic LTL and
    properties of N-LTL. We also consider a transla-  then brieﬂy mention non-monotonic versions of a branching
    tion from N-LTL to logic programs and study the
                                                      time temporal logic. In designing our non-monotonic ver-
    relationship between N-LTL and logic programs.
                                                      sions of temporal logics, we keep focus on our overall aim of
                                                      having non-monotonic goal languages. So rather than follow
1  Introduction and Motivation                        the path of non-monotonic modal logics and auto-epistemic
In specifying goals of agents [Bacchus and Kabanza, 1998; logic we focus on speciﬁc aspects of knowledge represen-
Niyogi and Sarkar, 2000; Baral et al., 2001; Baral and Zhao, tation that need non-monotonicity and borrow some speciﬁc
2004; 2006] many have used temporal logics such as linear techniques that allow such non-monotonicity.
temporal logic LTL, branching time temporal logics CTL∗, One of the important use of non-monotonicity is the ability
π-CTL∗, and their extensions. However, all these logics are to express normative statements such as “normally q’s have
monotonic. In specifying goals of agents, often there is a the property p.” This resonates well with our need of non-
need of being able to specify goals non-monotonically. For monotonic goal languages as we may need to specify that
example, initially, an agent may be given a goal of having p “normally a state should satisfy the property p”. Accompa-
true through the trajectory while reaching s. Later, the agent nying normative statements we have various kinds of excep-
may decide to weaken its goal so that in certain exceptional tions. For example, consider the age old normative statement
cases p does not have to be true. One way to do that would “birds normally ﬂy”. One kind of exception (called “strong
be for the agent to replace its original goal by a revised goal. exceptions”) to such a statement is that “penguins are birds
Coming up with a completely new revised goal, or obtaining that do not ﬂy”. Another kind of exception, referred to as
the revised goal by doing surgery on the original goal spec- weak exceptions, is that “injured birds are weak exceptions to
iﬁcation violate the principle of elaboration tolerance [Mc- the normative statement about birds ﬂying;” as for wounded
Carthy, J., 1988]. But if we use existing temporal logics, we birds we do not know whether they ﬂy or not. There is a
do not have a choice. What we need is a goal speciﬁcation need of similar exceptions with respect to goal speciﬁcations.
language that allows us to update the goal speciﬁcation by A normative goal speciﬁcation may specify that “normally
simply adding new statements to the original speciﬁcation. a state should satisfy the property p”. Strong exceptions may
Such a goal speciﬁcation language would be non-monotonic. be states that satisfy some speciﬁc conditions, while weak ex-
  Another motivation for having a non-monotonic goal spec- ceptions may be other states that satisfy some other speciﬁc
iﬁcation language that allows easy updating through adding conditions.
is that we may not want to give the agent a directive that 1There are several other papers, such as [Giannotti et al., 1999;
is too speciﬁc, too complicated, and that takes into account Stein and Morgenstern, 1994; MacNish and Fallside, 1990],which
all possible exceptions, from the very beginning. Besides from their titles seem like dealing with non-monotonic temporal log-
we may not even know all the exceptions initially. A good ics. However, they are not quite related.

                                                IJCAI-07
                                                   236  To accommodate the above we introduce two special nota- non-monotonicity of our proposed language. We now move
tions2                                                to the formal deﬁnition of our language and its semantics.
                                                        The rest of this paper is organized as follows: Since our
  • [r]φ
                                                      ﬁrst non-monotonic goal language N-LTL is based on LTL,
  • [[r]]φ                                            we ﬁrst give an overview of the temporal logic LTL. Then, in
The intuitive meaning of the ﬁrst one is that normally φ holds Section 3, we propose the syntax and semantics of a new lan-
in a state and the label r lists the weak exceptions. The intu- guage N-LTL, together with its properties. In Section 4, we
itive meaning of the second one is that normally φ holds in a study the relationship between N-LTL and logic programs.
state and the label r lists the strong exceptions.    We then brieﬂy discuss how one can use a similar approach
                                                      to develop non-monotonic versions of other temporal logics
  Theroleofr here is similar to the role of labeling defaults    ∗
                                                      such as CTL .
and normative statements when representing them in logic
programming. There, often the label is used as a parameter
with respect to the ab predicates.                    2   Background: Goal Representation Using
  Since the non-monotonicity in goal languages is not due to LTL
having incomplete knowledge about the states, but rather due In this section, we summarize the linear temporal logic LTL
to the speciﬁer not quite precisely knowing what she wants, and what it means for a sequence of actions to be a plan
we do not use operators such as the negation as failure opera- with respect to a goal in LTL. Syntactically, LTL formulas
   not
tor ‘ ’ from logic programming. Here the issue is different are made up of propositions, propositional connectives ∨, ∧,
from inferring or assuming negation by default.       and ¬, and future temporal connectives , 2, 3 and U.We
  On the other hand we borrow the idea behind program now formally deﬁne truth values of temporal formulas with
completion in logic programming to specify and interpret the respect to trajectories. A trajectory is an inﬁnite sequence of
conditions listed corresponding to the label r. Thus there may states.
be a set of conditions written as
                                                      Deﬁnition 2 Let p be an atomic proposition, f an LTL
 :          :   
 r ψ1   ...   r ψk                                    formula.
that specify the strong exception or weak exception condi- f ::= p|f∧f|f∨f|¬f|f|
tions with respect to r. Given the above, the overall condition
                                                                                2f|3f|fUf
associated with r becomes ψ1 ∨ ... ∨ ψk. One is allowed
to add additional conditions. For example, if r : ψk+1 is                                            2
added to the above set then the overall condition associated
with r becomes ψ1 ∨ ...∨ ψk ∨ ψk+1.                   Deﬁnition 3 Let σ given by s0,s1,...,sk,sk+1,...be a tra-
                                                                                             ≥  0
  We now illustrate the above with respect to an example. jectory, p denote a propositional formula, sj (j ) denote a
                                                      state, and f and fis(i =1, 2) denote LTL formulas.
                                             p
Example 1 Suppose initially we want to maintain true    • (    ) |=
while reaching for s. We know beforehand that our aim to   sj,σ    p iff p is true in sj.
maintain p is not strict; it is just that we do not know yet, un- • (sj,σ) |= ¬f iff (sj ,σ) |= f.
der what conditions truth of p may not be necessary. After a
                                                        • (sj,σ) |= f1 ∨ f2 iff (sj,σ) |= f1 or (sj,σ) |= f2.
while, we realize that when q is true we may not need to have
p true.                                                 • (sj,σ) |= f1 ∧ f2 iff (sj,σ) |= f1 and (sj,σ) |= f2.
                                                        • (    ) |=     (      ) |=
The initial goal can be written in our language as g :    sj,σ      f iff sj+1,σ   f.
(2[r]p)∧3s. It says that we should maintain p while reach- • (sj,σ) |= 2f iff (sk,σ) |= f,forallk ≥ j.
ing s. If the strong exception r happens in some states, we
                                                        • (sj,σ) |= 3f iff (sk,σ) |= f,forsomek ≥ j.
may not need to maintain p in those states. The weak excep-
tion r is then speciﬁed as r : q.                     • (sj,σ) |= f1 U f2 iff there exists k ≥ j such that
                                                          (sk,σ) |= f2 and for all i, j ≤ i<k, (si,σ) |= f1.
  To informally illustrate how non-monotonicity is mani-  2
fested in the above example, we ﬁrst deﬁne when a language
is monotonic.                                           Often [Bacchus and Kabanza, 1998; Baral et al., 2001]
                                                      planning with respect to LTL goals are formalized with the
Deﬁnition 1 A logic L together with a query language Q and assumption that there is complete information about the ini-
entailment relation |= is monotonic if for all T , T  in L and t                              Φ
                                                     tial state, and the actions are deterministic. Let be a tran-
in Q, T |= t implies T ∪ T |= t.                 2    sition function that deﬁnes transitions between states due to
                                                              Φ(     )=
  With respect to Example 1 let T be {g :(2[r]p) ∧ 3s}, actions. si,ak sj iff the action ak transits the agent
T  = {r : q}. Intuitively, T |= 2p and T ∪ T  is equivalent from state si to state sj.Lets be a state designated as the
to 2(p∨q)∧3s in LTL; thus T ∪T  |= 2p. This illustrates the initial state, and let a1,...,an be a sequence of deterministic
                                                      actions whose effects are described by a domain description.
  2Unlike traditional exceptions and weak exceptions, we want the Since truth of LTL formulas are deﬁned with respect to
speciﬁer to have pre-decided control over whether a particular goal a reference state and a trajectory made up of an inﬁnite se-
fragment could have a weak exception or an exception, but not both. quence of states, to deﬁne the correctness of a plan consisting

                                                IJCAI-07
                                                   237of a ﬁnite sequence of actions with respect to an initial state Deﬁnition 6 (Atom Dependency) Let e1 : f1 bearulein
and an LTL goal, the ﬁnite sequence of states obtained by ap- an N-LTL formula. If e2 ∈ R occurs in the body of e1 : f1,
plying the plan to the initial state is appended with the last then e2 depends on e1. The dependency relation is transitive.
state inﬁnitely.                                      2
  The trajectory corresponding to s and a1,...,an is the
                                                      Deﬁnition 7 (Loop Free) An N-LTL formula is loop free if
sequence s0,s1,..., that satisﬁes the following conditions:
                                                      in the formula, no atom in R depends on itself.  2
s =  s0, si+1 =Φ(si,ai+1),for0   ≤  i ≤  n − 1,and
sj+1 = sj,forj ≥ n.                                   Example 2  The following formula
Deﬁnition 4 (Plans with respect to LTL goals) The se-
                                                                       g :[r1](p)Uq
quence of actions a1,...,an is a plan from the initial state s
                                                                           :[  ]( )
for the LTL goal f,if(s, σ) |= f,whereσ is the trajectory                 r1  r2 s
corresponding to s and a1,...,an.                2                       r2 :[r1](t)
  The role of LTL in specifying planning goals has been well
                                                      is not loop free as r1 depends on r2 and r2 depends on r1.
studied and examples of that can be found in [Bacchus and
Kabanza, 1998; Niyogi and Sarkar, 2000; Baral et al., 2001]. An N-LTL speciﬁcation is a loop free N-LTL formula.
3  N-LTL: A Non-monotonic Extension of LTL            3.2  Semantics of N-LTL Speciﬁcations
In this section, we extend LTL to capture non-monotonic re- As we mentioned earlier, we deﬁne the semantics of N-LTL
quirements in specifying a goal. We call the new language speciﬁcations by following the approach taken by Reiter to
N-LTL which stands for non-monotonic LTL.Weﬁrstdeﬁne  reason about actions: we compile N-LTL speciﬁcations to
the syntax and semantics of the language.             LTL theories.
3.1  Syntax                                           Deﬁnition 8 Given a loop-free N-LTL formula (i.e., an N-
                                                      LTL speciﬁcation) T , we translate it to an LTL formula
While designing the language we asked ourselves two ques- Tr(T ) as follows:
tions.
                                                               :     :   ···  :   
  • If syntactically the goal is one temporal formula, how 1. Let e f1 , e f2 , , e fn  be all the rules in T
                                                          with e in the head, e ∈{g}∪R. We construct a formula
    can we revise it to have new goals by just adding to the ∨  ∨···∨                 ( )
    original formula?                                     f1  f2      fn, and we call it E e . We do this for any
                                                          atom e if the set of rules with e in the head is not empty.
  • How to refer to one part of a speciﬁcation in another part
    of the speciﬁcation?                                2. If atom a1 depends on atom a2,andE(a1) is deﬁned,
                                                          we replace any occurrence of [a1](f) in E(a2) with f ∨
For the ﬁrst we borrow ideas from Reiter’s approach to
                                                          E(a1). The revised formula is still called E(a2).
reason about actions [Reiter, 2001] where he compiles his
speciﬁcation to classical logic. While the classical logic 3. If atom a1 depends on atom a2,andE(a1) is deﬁned,
part is monotonic, reasoning with respect to the speciﬁca- we replace any occurrence of [[a1]](f) in E(a2) with
tion language is non-monotonic and the non-monotonicity is E(a1). The revised formula is still called E(a2).
achieved through the compilation process. For the second 4. We do Step 2 and Step 3 recursively until no atoms e
we borrow ideas from logic programming. Similar to a logic depending on g while E(e) is not empty occurs in E(g).
program consisting of a set of rules, we consider each N-LTL
                                                                      ( )                       [ ]( )
formula to be a set of rules and we use rule labels such as r 5. Finally, in E g , we replace all remaining r f and
                                                          [[ ]]( )                               (  )
in Example 1 to link these rules into one temporal formula. r f  with f. The revised goal formula is Tr T .
Deﬁnition 5 Let {g}, R,andP  be three disjoint sets of                                                 2
atoms. Let r be an atom in R, p be an atom in P ,
                                                      Example 3  Let us consider the N-LTL formula T as follows:
e ∈{g}∪R.  f is a formula deﬁned below:
f ::= p|f∧f|f∨f|¬f|f|2f|                        g :(3[r1](p)) ∧ [r3](q)
              3f|fUf|[r](f) |[[r]](f)                         r1 :[[r2]](v)
  An N-LTL formula is a set of rules e : f,Wheree is the                       r1 : 2t
head,andf is the body of the rule e : f.       2                                r2 : s
In an N-LTL formula, g is a special symbol that stands for
                                                      According to the deﬁnition, we know initially E(g)=
the ﬁnal goal formula. R is the set of labels to be used to
                                                      3[r1](p) ∧ [r3](q), E(r1)=[[r2]](v) ∨ 2t, and E(r2)=s.
deﬁne corresponding strong exceptions and weak exceptions.
                                                      By replacing the formulas according to the dependence rela-
Aformulaf  deﬁnes the conditions of atoms in R or the con-
                                                      tions, we have E(g)=3(p∨[[r2]](v)∨2t)∧[r3 ](q)=3(p∨
ditions of g. Intuitively, [r](f) means that normally f is
                                                      s ∨ 2t) ∧ [r3](q). There is no rules with r3 as the head. Thus
true, with the weak exceptions denoted through r. [[r]](f)
                                                      E(g)=3(p∨s∨2t)∧q.Further,Tr(T     )=3(p∨s∨2t)∧q.
means that normally f is true, with the strong exceptions de-
noted through r. The weak and strong exception conditions Loop-free N-LTL formulas (also called N-LTL speciﬁca-
corresponding to r are deﬁned through other rules.    tion) have the following properties.

                                                IJCAI-07
                                                   238Proposition 1 Given an N-LTL speciﬁcation T , Tr(T ) is a Let us consider one example to illustrate the use of N-LTL.
well deﬁned LTL formula.                              Example 5  One professor asks his robot to make a photo-
  Given this property, we can deﬁne when a plan satisﬁes an copy of one document and fetch a cup of coffee. However, be-
N-LTL goal.                                           fore the robot goes out the ofﬁce, the professor ﬁnds out that
Deﬁnition 9 Let T be an N-LTL speciﬁcation. Given a state the coffee is sold out. No plan can satisfy the goal given to
s, and a trajectory σ = s0,s1, ··· ,sk, ···, (s, σ) |= T in the robot. The professor would now like to weaken the goal.
N-LTL if (s, σ) |= Tr(T ) with respect to LTL.   2    Following are three possibilities:
Deﬁnition 10 (Plans with respect to N-LTL goals) Let T  1. He would be happy with a cup of tea instead;
be an N-LTL speciﬁcation. A sequence of actions a1, ···, 2. He just needs the copy of the document and is willing to
an is a plan from the initial state s for the N-LTL goal T ,if forget about the coffee;
σ is the trajectory corresponding to s and a1, ···, an,and
(   ) |=                                         2      3. The robot may come back to his ofﬁce with the document
 s, σ   T in N-LTL.                                       copied and go about looking for the coffee later.
  N-LTL speciﬁcations that do not have any strong excep- If the professor was using N-LTL and from past experience
tions (but may have weak exceptions) always make the goal knows that he may have to revise his goal, especially with
weaker by accepting more plans when adding new rules. respect to coffee, he can express his initial goal as:
Proposition 2 For any N-LTL speciﬁcation T and T ∪ T ,if
P is a plan with respect to T which does not have any strong  g : 3(([r]coffee) ∧ copy ∧ 3office)
exceptions (but may have weak exceptions), then P is a plan                    3(        ∧     ∧ 3      )
                                                       It is equivalent to satisfying coffee copy office
with respect to T ∪ T .                               in LTL.
  Temporal logics such as LTL have a different property Later on, according to the new conditions and new alter-
when we consider an LTL goal formula to be a set of tem- natives, the professor may revise his original goal by adding
poral formulas and add new formulas to an existing theory. one of the following three rules:
                                         
If P is a plan with respect to an LTL goal T ∪ T then P is 1. Adding the new rule r : tea which makes the overall
also a plan with respect to T . In LTL, adding more formulas goal equivalent to 3((coffee∨tea)∧copy ∧3office)
reduces (or at best leaves it unchanged) the set of plans satis- in LTL;
fying it while in N-LTL that does not have strong exceptions,
                                                                     true    ⊥       false
adding more rules enlarges the set of plans satisfying it (or 2. Let denote and denote     . Adding the new
                                                              r : 
at least leaves it unchanged). This is not the case when the rule    which makes the overall goal equivalent to
                                                          3((coffee ∨)  ∧ copy ∧ 3office)
N-LTL theory has strong exceptions.                                                        in LTL, which is
                                                          equivalent to 3(copy ∧ 3office) in LTL;
Example 4 Consider the problem in Example 1. The initial
                                                        3. Adding the new rule r : 3(coffee∧ 3office) which
N-LTL formula is the speciﬁcation T given as:
                                                          makes the overall goal equivalent to 3(coffee∧copy ∧
                                                          3office)∨3(copy∧3office∧3(coffee∧3office))
                 g : 2[r1](p) ∧ 3s
                                                          in LTL. Now it allows the agent to get the document
According to the deﬁnition, since there are no rules with head copied ﬁrst before waiting for the coffee.
r1, we have (sj ,σ) |= T in N-LTL iff (sj,σ) |= 2p ∧ 3s in
LTL.                                                    If we want to get tea instead of coffee, we should know
  Suppose we add T , as given below, to it:          initially that the sub-task of getting coffee can be replaced by
                                                      a different goal.3 Now, the initial formulation is
                      r1 : q
                                                              g : 3(([[r]]coffee) ∧ copy ∧ 3office)
According to the deﬁnition, we know E(g)=(2[r1](p))∧3s
                                                      When we add a new goal r : tea. The goal afterwards is
and E(r1)=(q). Further revision makes E(g)=2(p   ∨
                                                     equivalent to 3(tea ∧ copy ∧ 3office) in LTL.
q) ∧ 3s. Thus, (sj,σ) |=(T ∪ T ) in N-LTL iff (sj,σ) |=
                                                                  copy
2(p ∨ q) ∧ 3s in LTL.                                   Note that “   ” must be satisﬁed in this domain as the
  We can check that any plan satisﬁes LTL formula 2p ∧ professor does not want to weaken this condition. While the
3s also satisﬁes 2(p ∨ q) ∧ 3s. T does not have strong robot is on its way of getting things done, some other excep-
exceptions, and Proposition 2 holds here.             tions may happen. With N-LTL, we may further reﬁne part of
                                                      the goal.
  Now, let us deﬁne what do we mean when we say that N-
                                                                                                 [[r1]](f)
LTL is non-monotonic. LTL is monotonic since T |= t im- Note that if a rule in the formula has a substring ,
                                                                     r1 : ⊥
plies T ∪T |= t where T and T are two sets of LTL temporal then removing rules may affect the semantics of the
                                                                                  [[r1]](f)
formulas and t is an LTL temporal formula. We consider the formula. If there is no substring in any part of the
                                                                                   r1 : ⊥
following entailment in N-LTL.                        formula, then we can remove rules    without affecting
                                                      the semantics of the formula.
                        T |= t  Tr(T ) |= t      T
Deﬁnition 11 (Entailment)     if          ,where         3
is an N-LTL speciﬁcation and t is an LTL formula. 2      We made this design decision consciously. Thus unlike in logic
                                                      programming where the same default may have strong exceptions
Proposition 3 The entailment in Deﬁnition 11 is non-  and weak exceptions, here we empower the initial goal speciﬁer to
monotonic.                                            make that decision beforehand.

                                                IJCAI-07
                                                   2393.3  Complexity of N-LTL                                6. The following rules corresponding to the temporal oper-
                                                              U
The complexity of various problems (planning etc.) with re- ator are in the program:
spect to N-LTL speciﬁcations is at the same level of the poly- nfirst(s, s2,f) ← future(s, s1),
nomial hierarchy as with respect to LTL speciﬁcations. This
                                                                                future(s1,s2),holds(s1,f).
is because, the loop-free criteria and the fact that there are
polynomial number of special symbols like [r] and [[r]] en-  first(s, s2,f) ←   not nfirst(s, s2,f),
sure that an N-LTL speciﬁcation can be converted to an LTL                      future(s, s2),holds(s2,f).
speciﬁcation in polynomial time and the increase in size is nholds(s, f1Uf2) ←  first(s, s2,f2), future(s, s1),
also polynomial.
                                                                                future(s1,s2),holds(s1, ¬f1).
                                                                (    U  )  ←             (    U  )
4  Relation to Logic Programs                               holds s, f1 f2      not nholds s, f1 f2 .
We now consider the relation between N-LTL goals and logic                                             2
programs, especially with respect to planning. Use of tempo- Deﬁnition 13 We encode an N-LTL formula T into a logic
ral domain knowledge in planning was ﬁrst proposed in [Bac- program, denoted by LP (T ) as follows:
                      ]
chus and Kabanza, 1998 . Planning with temporal logic   For each rule e : f in T , we create a list of the atoms
                         [
LTL has also been studied in Neljanko and Niemel¨a, 2001; from R (the set of rule labels) that occur in f. If one atom
             ]
Son et al., 2002 . In this section, we translate a domain de- occurs multiple times in f, we include it as many times in the
scription and a goal speciﬁed in N-LTL to a logic program. list. We now revise f to a set of new formulas simplify(f):
We consider the relations of stable models of the translated
programs and the original planning problems. In the follow- • For any atom rk in the list, if it is not in the head of
                                                                                                [ ](  )
ing translation, for i = j,evenifsi and sj in the trajectory are any rule, then we replace all occurrences of rk fk or
referring to the same state, we assign them different labels. [[rk]](fk) with fk;
                                                        • Otherwise, suppose the ith atom in the list is ej.Ifit
Deﬁnition 12 Let σ given by s0,s1, ··· ,sk, ··· be a trajec-
                                                          occurs in the formula f as [[ej]](fj), then we replace
tory, p denote an atom, sj denote a state, f, f1,andf2 denote
                                                                        [[ej]](fj) f     ej
LTL formulas that also take elements in R as atoms. We now this sub-formula      in  with  .
deﬁne an encoding of σ, called encoding(σ, T ),whereT is • Suppose a list of atoms ei1,ei2, ··· ,eil remaininfor-
an N-LTL formula. The encoding consists of the following  mula f. We calculate a Cartesian product of l sets, where
parts:                                                    the sth set is {eis,fis} and the sth atom eis occurs in
                                                          the formula f as [eis](fis). We replace each occurrence
 1. For any i such that 0 ≤ i, there is a rule
                                                          [eis](fis) by either eis or fis according to its value in
                                                                                                       2l
                 next(si,si+1) ← .                        one element of the Cartesian product. Thus we have
                                                          different combinations. We consider each combination
                                                                                  ( )
 2. For any 0 ≤ i<j, there is a rule                      as one instance of simplify f , the revised formula of
                                                          f.
                       (     ) ←
                 future si,sj    .                    We then add the rule
 3. If p is true in state s, there is a rule                   holds(s, e) ← holds(s, simplify(f)).

                    holds(si,p) ← .                   into LP (T ) for each of formula in simplify(f). 2

    where si is the ith state in the trajectory and it corre- Example 6 Suppose one rule in an N-LTL goal T is as fol-
    sponds to the state s.                            lows:
 4. The following rules corresponding to ¬, ∨,and∧ are in    r :[r1](f) ∧ [r2](h) ∧ [[r1]](s) ∧ [[r3]](t)
    the program
                                                      There are rules in T with the head r1 and also rules with the
         holds(s, ¬f) ←   not holds(s, f).            head r2. There are no rules in T with the head r3. We need
                                                                                 LP (T )
      holds(s, f1 ∨ f2) ← holds(s, f1).               to add the following 4 rules into :
      holds(s, f1 ∨ f2) ← holds(s, f2).
                                                                 (   )  ←        (   ∧   ∧   ∧  )
      holds(s, f1 ∧ f2) ← holds(s, f1),holds(s, f2).        holds s, r      holds s, f h   r1  t .
                                                            holds(s, r) ←   holds(s, f ∧ r2 ∧ r1 ∧ t).
 5. The following rules corresponding to temporal operators holds(s, r) ←   holds(s, r1 ∧ h ∧ r1 ∧ t).
    , 3,and2  are in the program:
                                                            holds(s, r) ←   holds(s, r1 ∧ r2 ∧ r1 ∧ t).
      holds(s, f)  ←   holds(s1,f),next(s, s1).
                                                        Note that in the translated program, we have an atom
       holds(s, 3f) ←   holds(s1,f), future(s, s1).
                                                      holds(s, f ∧ r2 ∧ r1 ∧ t). r1 and r2 are not atoms in the
       holds(s, 2f) ←   not holds(s, 3¬f).            transition system. They are deﬁned by other rules.

                                                IJCAI-07
                                                   240