          Proactive    Algorithms     for Scheduling     with   Probabilistic    Durations∗

                   J. Christopher  Beck                              Nic Wilson
               Department  of Mechanical  &             Cork  Constraint Computation   Centre
                   Industrial Engineering                 Department  of Computer   Science
               University of Toronto, Canada              University College  Cork, Ireland
                   jcb@mie.utoronto.ca                           n.wilson@4c.ucc.ie

                    Abstract                          probabilistic makespan of solutions. (iii) It is demonstrated
                                                      that the method introduced by Beck & Wilson for the in-
    Proactive scheduling seeks to generate high quality
                                                      corporation of uncertainty in deterministic problems can in-
    solutions despite execution time uncertainty. Build-
                                                      crease the correlation between deterministic and probabilis-
    ing on work in [Beck and Wilson, 2004], we con-
                                                      tic makespan, providing an explanation for its strong perfor-
    duct an empirical study of a number of algorithms
                                                      mance.
    for the job shop scheduling problem with proba-
                                                        In the next section we brieﬂy review previous work. The
    bilistic durations. The main contributions of this
                                                      six search algorithms investigated in this paper are deﬁned in
    paper are: the introduction and empirical analy-
                                                      Section 3 and Section 4 presents our experiments and results.
    sis of a novel constraint-based search technique
                                                      In Section 5, we present our conclusions.
    that can be applied beyond probabilistic scheduling
    problems, the introduction and empirical analysis
    of a number of deterministic ﬁltering algorithms for 2 Background
    probabilistic job shop scheduling, and the identiﬁ- The job shop scheduling problem (JSP) consists of a set A
    cation of a number of problem characteristics that of activities each with a positive integer-valued duration, di.
    contribute to algorithm performance.              A is partitioned into jobs, and with each job is associated a
                                                      total ordering on that set of activities. Each activity speci-
                                                      ﬁes a resource on which it must execute without interruption.
1  Introduction                                       No activities that require the same resource can overlap in
Classical models of scheduling assume all information is their execution. We represent this formally by a partition of
known and static. When faced with uncertainty, proactive A into resource sets. A solution consists of a total ordering
scheduling techniques seek to incorporate models of the un- on each resource set such that the union of the resource and
certainty in the off-line problem solving and to build solu- job orderings is an acyclic relation on A. The makespan of
tions that can achieve a satisfactory level of performance at a solution is the difference between the minimum start time
execution time. [Beck and Wilson, 2004] addressed the prob- and the maximum end time of all activities. Finding a solu-
lem of job shop scheduling with probabilistic durations with tion with minimum makespan is NP-hard [Garey and John-
two styles of algorithm both using Monte Carlo simulation to son, 1979]. An independent probabilistic job shop schedul-
evaluate the probabilistic makespan of solutions. This paper ing problem is a JSP where the duration di associated with
builds on that work, making the following contributions: (i) an activity Ai ∈ A is a positive integer-valued random vari-
A novel constraint-based search technique is introduced that able. These random variables are fully independent. di has
                                                                            d                2        d
performs a series of complete branch-and-bound searches on expected value µi = E[ i] and variance σi = Var[ i].
highly constrained problem models. The models are gradu- The makespan make(s) of solution s is therefore also a ran-
ally relaxed with the cost of the best solution model found in dom variable. We ﬁx a degree of conﬁdence p, e.g., we set
the previous searches being used as an upper bound. Exper- p = 0.95 in the experiments. The minimum probabilistic
imental results show that the algorithm performs as well as makespan, D(s), of a solution s is the smallest value D such
the existing branch-and-bound style of search on small prob- that the probability that all jobs will ﬁnish before D is at least
lems and signiﬁcantly out-performs it on larger problems. (ii) p. That is, D(s) = min{D : Pr(make(s) ≤ D) ≥ p}. An
A number of novel deterministic ﬁltering algorithms are pre- optimal probabilistic makespan is the minimum D(s) over all
sented. On larger problems such algorithms out-perform the solutions s.
other algorithms tested. Their performance is affected by the Beck & Wilson introduce an analytical model and develop
following two factors: the quality of the deterministic solu- two main results. First, it is demonstrated that Monte Carlo
tions found and the correlation between the deterministic and simulation can be used to ﬁnd the probabilistic makespan
  ∗This material is based upon works supported by the Science for a solution and to ﬁnd a lower bound on the probabilistic
Foundation Ireland under Grant No. 00/PI.1/C075 and by ILOG, makespan of a partial solution. Second, it is shown that a de-
SA.                                                   terministic JSP instance can be constructed from a probabilis-tic JSP instance by setting the duration di of each activity to B&B-DQ-L():
µi+qσi and that, for the appropriate choice of non-negative q, Returns the solution with lowest probabilistic makespan
                                                          ∗   ∗
the optimal makespan of the deterministic instance is a lower 1 (s , D ) ← ﬁndFirstB&BSimLeaves(∞, 0)
bound on the optimal probabilistic makespan of the corre- 2 q ← q0
sponding probabilistic JSP. Three algorithms are deﬁned: a 3 while q ≥ 0 AND not timed-out do
                                                                                          ∗
branch-and-bound approach where Monte Carlo simulation is 4 (s, D) ← ﬁndOptB&BSimLeaves(D , q)
used at each node to ﬁnd a lower bound (at internal nodes) or 5 if s 6= NIL then
                                                               ∗       ∗
an upper bound (at a leaf node) on the probabilistic makespan, 6 s ← s; D ← D
and two deterministic ﬁltering algorithm consisting of using end
either constraint-based search or tabu search to ﬁnd a series 7 q ← q − qdec
of increasingly good deterministic solutions, each of which is end
                                                               ∗
simulated. Empirical results indicated that the ﬁrst algorithm 8 return s
was able to ﬁnd optimal solutions only for very small prob-
lems, that for medium-sized problems the constraint-based           Algorithm 1: B&B-DQ-L
ﬁltering algorithm found the best solutions, and for the largest
problems the tabu-based ﬁltering algorithm performed best. found by any point in the overall search is used, as in B&B-N,
Choosing q > 0 led to stronger performance of the ﬁlter- as an upper bound on subsequent search.
ing algorithms. No empirically founded explanations were Algorithm 1 presents pseudocode for the basic algorithm.
provided to explain the differences in problem solving per- We make use of two functions not deﬁned using pseu-
formance.                                             docode: ﬁndFirstB&BSimLeaves(c, q) creates a JSP with
                                                      activity durations deﬁned based on the q value and con-
3  Algorithms   for Probabilistic JSP                 ducts a branch-and-bound search where Monte Carlo sim-
In this section, we describe six algorithms for solving the ulation is used for each leaf node and standard constraint
probabilistic job shop scheduling problem.            propagation is used at interior nodes. The ﬁrst solution
                                                      that is found whose probabilistic makespan is less than c
3.1  Approximately  Complete  Branch-and-Bound        is returned. ﬁndOptB&BSimLeaves(c, q) does the same as
                                                      ﬁndFirstB&BSimLeaves(c, q) except the solution with lowest
We implemented a branch-and-bound algorithm identical to probabilistic makespan is returned rather than the ﬁrst one.
that of Beck & Wilson except that we use stronger heuristics If no solution is found, a NIL value is returned. Unless the
that make decisions on the sequence of activities in each re- q value is low enough that the deterministic makespan is a
source set (see Section 3.5). We refer to this algorithm as the lower bound on the probabilistic makespan, this function does
B&B-N  as it performs Branch-and-Bound with simulation at not necessarily return the globally optimal solution. We ﬁnd a
each Node.                                            starting solution with q = 0 to serve as an initial upper bound
                                                      on the probabilistic makespan. In practice, B&B-DQ-L is run
3.2  Iterative Descending Bound Search                with a maximum CPU  time. If q = 0 is reached within the
By setting activity durations based on a q value that ensures a time limit, this algorithm is approximately complete.
lower bound on the probabilistic makespan, we can use stan- We refer to this algorithm as B&B-DQ-L as it does a series
dard constraint propagation on the deterministic durations to of Branch-and-Bound searches with Descending Q values and
implicitly calculate a lower bound at each internal node. At with simulation is used at the Leaves of the tree.
each leaf node, simulation is used as in B&B-N to ﬁnd the
probabilistic makespan. Rather than parameterize the algo- 3.3 Branch-and-Bound Filtering Algorithms
rithm with a ﬁxed q value, we perform repeated tree searches
                                                      Preliminary experiments with the branch-and-bound ﬁltering
                q                          q
with a descending value. Starting with a high value,  algorithm presented by Beck & Wilson showed that a signiﬁ-
we begin a tree search. When the ﬁrst leaf, e, is reached,
                                                      cant amount of simulation was being done early in the search
simulation is used to ﬁnd D(s ). It is likely that D (s ),
                          e                  q  e     when the upper bound on the deterministic makespan was rel-
                        s
the minimum makespan of  e in the corresponding deter- atively high. Such solutions would seem to have little chance
ministic problem, will be larger than D(s ). Since we en-
                                    e                 of being the optimal probabilistic solution as the deterministic
force D (s ) ≤ D(s ), estimating D(s ) through simulation
      q  e       e              e                     solution is very poor. We present two constraint-based ﬁlter-
                                         i
causes the search to backtrack to a interior node, , very high ing algorithms that seek to avoid these wasted simulations.
in the tree. At node i, Dq(Si) ≤ D(se): Si is the set of
solutions in the subtree below node i and Dq(Si) is a lower
bound on the deterministic makespan of those solutions based Branch-and-Bound Timed Better Solution A simple
on standard constraint propagation. With high q values, we method is to spend a ﬁxed amount of CPU time, tinitial to ﬁnd
                                                                ∗
commonly observe that there are very few nodes that meet a solution, s , with a low deterministic makespan Dinitial us-
this criterion and the search space is quickly exhausted. We ing a ﬁxed q value and constraint-based search. Then search
then decrement the q value (e.g., by 0.05) and start a new tree can be restarted using the same q value and using Dinitial as
search. Eventually, and often very quickly, we reach a q value an upper bound on the deterministic makespan. Whenever a
such that there exists a full solution where Dq(se) ≤ D(se). solution, s, is found such that Dq(s) ≤ Dinitial, a simulation
The probabilistic makespan of the best solution that has been is run to evaluate the probabilistic makespan. The solution  B&B-TBS(q):                                           B&B-I-BS(q):
  Returns the solution with lowest probabilistic makespan Returns the solution with smallest probabilistic makespan
    ∗                                                     ∗
1 (s , Dinitial) ← ﬁndOptB&B(∞, q, tinitial)          1 (s , Dinitial) ← ﬁndOptB&B(∞, q, t0 − 1)
    ∗                                                     ∗            ∗
2 D  ←  ∞                                             2 D  ←  simulate(s )
3 while termination criteria unmet AND not timed-out do 3 i ← 0
4    (s, D) ← ﬁndNextB&B(Dinitial, q, tremaining)     4 while not timed-out do
       0
5    D  ← simulate(s)                                 5    while termination criteria unmet do
        0     ∗
6    if D < D  then                                   6       (s, Dq) ← ﬁndNextB&B(
         ∗       ∗     0
7       s  ← s; D  ← D                                        Dinitial × (1 + i/100), q, tremaining)
     end                                              7       D  ← simulate(s)
                                                                       ∗
  end                                                 8       if D < D  then
        ∗                                                          ∗       ∗
8 return s                                            9           s ←  s; D ←  D
                         : B&B-TBS                            end
               Algorithm 2                                 end
                                                      10   i ← i + 1
                                                        end
with the lowest probabilistic makespan is returned when ei-    ∗
ther the entire tree has been searched or when the maximum 11 return s
allowed CPU time has expired. Algorithm 2 contains pseu-             Algorithm 3: B&B-I-BS
docode for this approach.
  As above, we make use of a number of functions not de- ulated. However, i would have to grow unreasonably large
                                c q  t
ﬁned with pseudocode: ﬁndOptB&B( , , ) creates a JSP  and therefore we treat this algorithm as, practically, incom-
                                 q
with activity durations deﬁned based on and conducts a de- plete. We refer to this algorithm as B&B-I-BS for Branch-
                                      t
terministic branch-and-bound search for up to CPU seconds and-Bound-Iterative-Best Solution.
using c as an upper bound on the makespan. When the search
tree is exhausted or the time-limit is reached, the best solution 3.4 Local Search Filtering Algorithms
found, together with its makespan, are returned. No simula- We also experiment with two local search ﬁltering algorithms
tion is done. ﬁndNextB&B(c, q, t) produces a sequence of analogous to the constraint-based algorithms above except
solutions (one solution each time it is called) whose deter- that tabu search is used in place of constraint-based search.
ministic makespan is less than or equal to c. The problem is
deﬁned using the q value and t is the CPU time limit. The
solutions produced are the leaves of the B&B search tree in Tabu Timed Better Solution For a ﬁxed q and for a ﬁxed
the order encountered by the algorithm. The c value does not CPU time, tinitial, a solution with the lowest determinis-
change. Given enough CPU time, the algorithm will evalu- tic makespan, Dinitial, possible is sought. Search is then
ate the probabilistic makespan of all solutions whose deter- restarted and whenever a solution, s, is found that has a de-
                                                      terministic makespan Dq(s) ≤ Dinitial, simulation is used
ministic makespan is less than or equal to Dinitial. Finally,
simulate(s) runs Monte Carlo simulation on solution s and to evaluate the probabilistic makespan. The solution with
the probabilistic makespan is returned.               the lowest probabilistic makespan is returned. The pseu-
  The algorithm is called B&B-TBS for Branch-and-Bound docode for Tabu-TBS is the same as that for B&B-TBS
Timed Better Solution. The algorithm is not complete, as (Algorithm 2) with the following changes. The function
there is no guarantee that the optimal probabilistic solution ﬁndNextTabu(c, q, t) replaces ﬁndNextB&B(c, q, t); it pro-
will have a deterministic makespan less than D .      duces a sequence of solutions whose deterministic makespan
                                       initial        is less than c. The ﬁndBestTabu(c, q, t) function replaces
                                                      ﬁndOptB&B(c, q, t); tabu search is run for up to t CPU sec-
Branch-and-Bound  Iterative Best Solution A more ex-  onds and the solution with the lowest deterministic makespan
treme ﬁltering algorithm ﬁrst ﬁnds an optimal deterministic that is less than c is returned. We call this algorithm Tabu-TBS
solution and uses it as a ﬁlter for choosing the solutions to for Tabu-Timed Better Solution.
simulate. Using a ﬁxed q value, a solution with an optimal
                       ∗
deterministic makespan, Dq , is found and simulated. Then Tabu Iterative Best Solution The core tabu search imple-
we execute a series of iterations beginning with i = 0. For mentation does not necessarily use the entire CPU time. We
each iteration, all solutions, se, with deterministic makespan can therefore create an iterative tabu-based solver for the
           ∗
Dq(se) ≤ Dq × (1 + i/100) are simulated and the one with probabilistic JSP similar to B&B-I-BS. In the ﬁrst phase,
the lowest probabilistic makespan is returned. If an opti- using the overall time limit less one second, tabu search is
mal deterministic solution cannot be found within the CPU used to ﬁnd a good deterministic solution, based on a ﬁxed q
time limit, the best deterministic solution found is simulated value. That solution is then simulated. Any remaining time
and returned (i.e., only one simulation is done). Algorithm 3 is spent generating solutions with a deterministic makespan
presents the pseudocode.                              within a ﬁxed percentage of the initial solution’s determin-
  The algorithm is theoretically complete. When i is large istic makespan. As with B&B-I-BS, iterations are run with
enough that the cost bound is greater than the deterministic increasing i value starting with i = 0. In each iteration, solu-
makespan of all activity permutations, they will all be sim- tions found by the tabu search whose deterministic makespanare within 1 + i/100 of the initial deterministic makespan    q0   q1     q2           q3
                                                                                               σ2
are simulated. The solution with the lowest probabilistic           B    q1+q3  B  pAverageAi∈π i
                                                               0          2
                                                                   √2n          √n  Average   σi
makespan is returned. The algorithm is termed Tabu-I-BS                                   Ai∈π
for Tabu-Iterative-Best Search. The pseudocode for this al-
gorithm is the same as that for B&B-I-BS (Algorithm 3) with Table 1: The q-values used, following Beck & Wilson. n is
the same substitutions that were made for Tabu-TBS.   the number of jobs and B = 1.645.
3.5  Core Algorithm  Details
                                                                                a   l            D  (l)
The branch-and-bound algorithms described use texture- makespan found by algorithm on over 10 runs, lb is
                                                                                                 l
based heuristics [Beck and Fox, 2000] to decide on the the the lower bound on the probabilistic makespan for . For all
                                                                    20 × 20    D
pair of activities to sequence and which sequence to try ﬁrst. problems except , the lb is found by solving the de-
                                                                                           q
When constraint propagation is used (i.e., all B&B algorithms terministic problems to optimality using the 1 durations (see
                                                                 [                   ]       20 × 20
except B&B-N), we use temporal propagation, timetables Section 3 of Beck and Wilson, 2004 ). For the prob-
                                                                                                      D
[Le Pape et al., 1994], edge-ﬁnder [Nuijten, 1994], and the lems, the optimal solutions could not be found and so the lb
balance constraint [Laborie, 2003].                   values represent the best deterministic solutions found. These
  The tabu search is the same one used by Beck & Wilson: values, therefore, are not a true lower bound.
the TSAB algorithm of [Nowicki and Smutnicki, 1996].    The hardware used for the experiments is a 1.8GHz Pen-
                                                      tium 4 with 512 M of main memory running Linux RedHat 9.
                                                      All algorithms were implemented using ILOG Scheduler 5.3.
4  Empirical   Investigations
Our empirical investigations aim to evaluate and investigate 4.2 Results
the performance of the algorithms. In particular, we are inter-
ested in algorithm scaling with problem size and uncertainty Table 2 presents the results of our experiment. Each cell is
level and with the usefulness of representing uncertainty in- the mean over 10 independent runs of 10 problems. The ob-
formation using q values.                             served mean standard deviations for each cell are small: the
                                                      maximum  over all cells is less than 10.3% of the correspond-
4.1  Experimental  Details                            ing mean makespan, while the mean over all cells is less than
We use four sets of probabilistic JSPs of size {4×4, 6×6, 10× 0.8%. We did not observe a large difference among the q val-
                                                                 q > 0                               q
10, 20 × 20} with three uncertainty levels uj ∈ {0.1, 0.5, 1}. ues provided and therefore present the results for 2.
A deterministic problem is generated using an existing gen-
     [                ]                                                             Algorithms
erator Watson et al., 2002 with integer durations drawn uni- Problem Unc. B&B Complete B&B Heuristic tabu
formly from the interval [1, 99]. Three probabilistic instances Size Level N DQ-L  TBS   I-BS TBS   I-BS
                                                                  0.1  1.027* 1.023* 1.026 1.026 1.027 1.023
are then produced by setting the mean durations µi to be the 4 4  0.5  1.060* 1.049* 1.064 1.059 1.061 1.046
                                                           ×
deterministic durations and by uniformly drawing the stan-        1    1.151* 1.129 1.154 1.149 1.150 1.128
dard deviation σi from the interval [0, ujµi]. The distribution   0.1  1.034 1.021 1.022 1.022 1.025 1.023
                                                          6 6     0.5  1.113 1.073 1.083 1.077 1.089 1.074
                                                           ×
of each duration is approximately normal. For each problem        1    1.226 1.170 1.178 1.174 1.182 1.168
size, we generate 10 deterministic problems which are trans-      0.1  1.185 1.028 1.024 1.024 1.035 1.028
                                                         10 10    0.5  1.241 1.115 1.101 1.101 1.121 1.112
                                                           ×
formed into 30 probabilistic instances.                           1    1.346 1.234 1.215 1.215 1.244 1.223
  Given the stochastic nature of the simulation and the tabu      0.1  1.256 1.142 1.077 1.071 1.029 1.027
                                                         20 20    0.5  1.326 1.233 1.177 1.181 1.136 1.137
                                                          ×   †
search algorithm, each algorithm is run 10 times on each          1    1.482 1.388 1.334 1.338 1.297 1.307
problem instance with different random seeds. Each run has a
time limit of 600 CPU seconds. Each Monte Carlo simulation Table 2: The mean normalized probabilistic makespans for
uses 1000 trials. For B&B-TBS and Tabu-TBS, tinitial is 60 each algorithm. ‘*’ indicates a set of runs for which we have,
CPU seconds.                                          with high conﬁdence, found close-to-optimal makespans. ‘†’
  For the heuristic techniques, a deterministic duration is as- indicates problem sets for which normalization was done with
signed to each of the activities based on the q value. We ex- approximate lower bounds. The lowest MNPM found for
periment with the same four q values used by Beck & Wilson each problem set are shown in bold.
as displayed in Table 1. The B&B-DQ-L algorithm requires
an initial value of q, q , and a decrement, q . For all except
                  0                dec                  For the 4 × 4 problems, a number of algorithms ﬁnd lower
                          q  = 1.25    q    = 0.05
the largest problems, we used 0     and dec       .   mean probabilistic makespans than B&B-N despite the fact
                            20 × 20
Preliminary experiments with the   problems indicated that B&B-N  terminates before the limit on CPU time and
that q = 1.25 resulted in long runs with no solutions due to
    0                                                 therefore ﬁnds approximately optimal solutions. This is an
a large search space with few if any solutions. To avoid such artifact resulting from algorithms that simulate the same so-
            q = 0.9
runs, we used 0    , for which solutions could be found. lution multiple times. In B&B-N, a particular solution is
  The probabilistic makespans are based on conﬁdence level
                                                      only simulated once. In other algorithms, the same solution
p =  0.95
         . Our primary evaluation criterion is the mean may be simulated multiple times leading to a bias to lower
                              MNPM
normalized probabilistic makespan (  ) that each algo- probabilistic makespan values. Based on the theoretic model
rithm achieves: MNPM(a, L) =  1       D(a,l) . L is a
                              |L| Pl∈L Dlb(l)         of Beck & Wilson, these values still correspond to approxi-
set of problem instances, D(a, l) is the mean probabilistic mately optimal solutions.4.3  Analysis                                             Problem   Unc.       B&B            Tabu
                                                            Size    Level  TBS     I-BS   TBS    I-BS
Overall the empirical results agree with those presented by         0.1    0.001    0       0      0
Beck & Wilson. Here, we will focus on investigations of    4 × 4    0.5      0    0.001   0.001  0.001
B&B-DQ-L  and of the behavior of the heuristic algorithms.           1     0.02   -0.001  0.021  0.017
Branch-and-Bound Descending-Q Leaves                                0.1    0.002    0     0.001  0.001
                                                           6 × 6
B&B-DQ-L   out-performs B&B-N across all problem sets               0.5    -0.002   0     0.005  0.004
                                                                     1     0.027  0.001   0.041  0.009
even when it is not able to reach q = 0. As an indication of
the number of iterations, the mean minimum values q for each        0.1      0      0     -0.001 0.002
                                                          10 × 10
               4 × 4 : 0.007 6 × 6 : 0.56 10 × 10 : 1.00            0.5    0.004  0.004   0.006  0.002
problem size are:         ,          ,            ,                  1     0.015  0.016   0.017  0.009
20 × 20 : 0.9.
  For B&B-DQ-L, the deterministic durations deﬁned by the           0.1    0.009  0.010   0.011  0.015
                                                          20 × 20†  0.5    0.010  0.005   0.012  0.028
q value serve to guide and prune the search for each iteration       1     0.025  0.030   0.029  0.032
and, therefore, as with the heuristic algorithms (see below),
the search is heuristically guided to the extent that solutions Table 3: The difference between the mean normalized proba-
with low deterministic makespans also have low probabilis-
                                                      bilistic makespans for runs using q0 and using q2. The higher
tic makespans. However, the characteristics of the solutions
                                                      the value, the more the q2 runs out-performed the q0 runs.
found by the search are unclear. Ideally, we would like the
search with high q to ﬁnd solutions with very good probabilis-
tic makespans both because we wish to ﬁnd good solutions it outperforms Tabu-I-BS, it will also have found better de-
quickly and because the probabilistic makespan values are terministic solutions and/or be able to systematically search
used to prune subsequent search. Analysis indicates that the solutions up to a higher threshold. In contrast, for problem
ﬁrst solution found by B&B-DQ-L is consistently better than sets where Tabu-I-BS outperforms B&B-I-BS, it will be due
the ﬁrst solution found by B&B-N and for the larger problems to ﬁnding better deterministic solutions.
(10 × 10 and 20 × 20) the relative increase in solution quality Table 4 presents data using q = q2. The mean normalized
over subsequent iterations is greater for B&B-DQ-L.   deterministic makespan (MNDM) is the calculated as follows:
                                                      MNDM(a,  L) =   1            Dq (a,l)    . The nota-
Heuristic Algorithms                                                 |L| Pl∈L Dq,min(l,B&B−I−BS)
To investigate the performance of the heuristic algorithms, tion is as above with the addition of Dq,min(l, B&B-I-BS),
we look at the performance differences coming from using the lowest deterministic makespan found by the B&B-I-BS
the q values, and the extent to which the performance of the algorithm over all runs on problem l. MNDM, therefore, pro-
heuristic algorithms depends on two factors: their ability to vides a relative measure of the mean deterministic makespans
ﬁnd good deterministic solutions and the underlying correla- from the two algorithms: the higher the value, the worse is the
tion between deterministic and probabilistic makespans in the average makespan found relative to B&B-I-BS. The second
experimental problems.                                measure (Iters) is the mean number of iterations performed
                                                      by each algorithm.
The Effect of the q Values Using a non-zero q value almost
always results in better performance. This appears to be par- Problem Unc.  B&B-I-BS       Tabu-I-BS
ticularly true when either the uncertainty or the problem size Size Level MNDM     Iters MNDM     Iters
increases. Table 3 shows the difference between mean nor-           0.1    1.000   100    1.000   76
                                                           4 × 4
malized probabilistic makespan when using q and q . On a            0.5    1.000   100    1.000   78
                                      0     2                        1     1.000   100    1.007   83
few problem sets, negative values indicate that the runs with
q deliver a better mean solution. However, by far the ma-           0.1    1.000    10    1.000   24
 0                                                         6 × 6    0.5    1.000    10    1.001   31
jority of the values are greater than 0 and their magnitude          1     1.000    11    1.000   21
increases with both uncertainty and problem size, indicating
increasingly good relative performance on the q problems.           0.1    1.000    1     1.002    5
                                        2                 10 × 10   0.5    1.000    1     1.004    5
We show below that one explanation for this performance is           1     1.000    1     1.004    5
that problem instances with q > 0 have a greater correlation
                                                                    0.1    1.045    0     1.002    0
between deterministic and probabilistic makespans.        20 × 20   0.5    1.041    0     0.998    0
                                                                     1     1.037    0     1.002    0
Finding Good Deterministic Makespans We hypothesize
that the performance of the heuristic techniques (and B&B- Table 4: The mean normalized deterministic makespan
DQ-L) is partially dependent upon the ability to ﬁnd solu- (MNDM) and number of iterations (Iters) for B&B-I-BS and
tions with low deterministic makespans. We looked at two Tabu-I-BS.
measures of the performance of B&B-I-BS and Tabu-I-BS:
the quality of the best deterministic solutions found and the Table 4 is consistent with our hypotheses. For those prob-
number of iterations. Because B&B-I-BS performs system- lems sets with large performance differences (i.e., 10 × 10
atic search of all deterministic solutions with makespan below and 20×20) in probabilistic makespan, the better performing
a given threshold, we hypothesize that on problem sets where algorithm does ﬁnd better deterministic makespans.