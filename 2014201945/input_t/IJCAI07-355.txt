              Efﬁcient Planning of Informative Paths for Multiple Robots

    Amarjeet Singh      Andreas Krause       Carlos Guestrin       William Kaiser        Maxim Batalin
        UCLA                  CMU                  CMU                  UCLA                 UCLA

                    Abstract                          energy, that limit the distance they can travel, or the number
                                                      of measurements they can acquire.We thus seek to ﬁnd infor-
    In many sensing applications, including environmental mative paths for a collection of robots, placing a bound on
    monitoring, measurement systems must cover a large the cost incurred by each robot, e.g., on the battery capacity.
    space with only limited sensing resources. One approach To optimize the path of these robots, we must ﬁrst charac-
    to achieve required sensing coverage is to use robots to terize the notion of informativeness. Since we are addressing
    convey sensors within this space.Planning the motion of a spatial phenomena, a common approach in spatial statistics
    these robots – coordinating their paths in order to maxi- is to use a rich class of probabilistic models called Gaussian
    mize the amount of information collected while placing Processes (GPs) (c.f., Rasmussen and Williams 2006). Using
    bounds on their resources (e.g., path length or energy ca-
              NP                                      such models, informativeness can be viewed in terms of the
    pacity) – is a -hard problem. In this paper, we present uncertainty about our prediction of the phenomena, given the
    an efﬁcient path planning algorithm that coordinates mul- measurements made by the mobile robots. In particular, we
    tiple robots, each having a resource constraint, to maxi- use the mutual information (MI) criterion of Guestrin et al.
    mize the “informativeness” of their visited locations. In [2005] to quantify the reduction in uncertainty provided by
    particular, we use a Gaussian Process to model the un- the measurements made along the selected robot paths. Like
    derlying phenomenon, and use the mutual information many other notions of informativeness, mutual information
    between the visited locations and remainder of the space is a submodular function [Guestrin et al., 2005], i.e., it
    to characterize the amount of information collected. We satisﬁes an important diminishing returns property: More
    provide strong theoretical approximation guarantees for the locations that are already sensed, lesser will be the
    our algorithm by exploiting the submodularity property information gained by sensing a new location.
    of mutual information. In addition, we improve the efﬁ- In this paper, we present the ﬁrst efﬁcient path planning al-
    ciency of our approach by extending the algorithm using gorithm (eMIP) that coordinates multiple robots, each having
    branch and bound and a region-based decomposition of a resource constraint, in order to obtain highly informative
    the space. We provide an extensive empirical analysis paths, i.e., paths that maximize some given submodular
    of our algorithm, comparing with existing heuristics on function, such as mutual information. By exploiting the
    datasets from several real world sensing applications. submodularity, we provide strong theoretical approximation
                                                      guarantees for our algorithm.
1  Introduction                                         The problem of optimizing the path of a single robot to
Mobile robots carrying sensors can enable a large number maximize a submodular function of the visited locations has
of real-world, large-scale sensing applications. Consider, for been studied by Chekuri and Pal [2005], who provide an
example, the monitoring of algae biomass in a lake. High algorithm with strong guarantees. We ﬁrst provide an ap-
levels of pollutants, such as nitrates, can lead to the develop- proach, sequential-allocation, for extending any single robot
ment of algal blooms. These nuisance algal blooms impair algorithm, such as that of Chekuri et al., to the multi-robot
the beneﬁcial use of aquatic systems, by blocking sunlight setting, with minimal effect on the approximation guarantee.
to underwater vegetation, consuming oxygen in the water, Unfortunately, the running time of the approach of Chekuri
                                                                                                M      M
and producing surface scum and odors. Precise sensing of et al. is quasi-polynomial, i.e., exponential in log2 , for
quantities, such as pollutants, nutrients, and oxygen levels, possible sensing locations, and is thus impractical. Using a
can provide biologists with a fundamental characterization spatial decomposition and branch and bound techniques, we
of the state of such a lake. Unfortunately, such sensors are develop a practical approach for the single robot case, with
a high cost resource, and it is thus impractical to sufﬁciently theoretical guarantees. Using sequential-allocation, we then
cover the lake with these devices.In this setting, a set of extend our approach to the multi-robot case. Furthermore,
robotic boats have been used to move such sensors to various we provide extensive experimental analysis of our algorithm
locations in the lake [Dhariwal et al., 2006].        on several real world sensor network data sets, including data
  When monitoring algae biomass, or in many other real- collected by the robotic boats in a lake.
world sensing tasks, planning the motion of such robots – 2 Problem Statement
coordinating their paths in order to maximize the amount of Let us now deﬁne the Multi-robot Informative Path Plan-
information collected – is a fundamental task. Often however, ning (MIPP) problem: We assume that the domain of
such robots have resource constraints, such as storage battery the phenomenon is discretized into ﬁnitely many sensing

                                                IJCAI-07
                                                  2204locations V. We associate with each location v ∈Va      Thus, we deﬁne our MIPP problem as one of optimizing
sensing cost C(v) >  0.  When traveling between two   paths of length at most B for k robots, such that the selected
locations, u and v, a robot incurs a (not necessarily sym- sensing locations maximize a monotonic submodular func-
metric) traveling cost C(u, v) > 0. A robot will traverse tion I(·). Note that this deﬁnition of the MIPP problem al-
a path in this space: an s–t-path P is a sequence of l lows our approach to be applied to any monotonic submodu-
locations starting at node s, and ending at t. The cost lar objective function, not just mutual information. Guestrin
C(P) of path P =(s   =  v1,v2,...,vl = t) is the sum  et al. [2005] address the sensor placement problem, where
                                                              A⊆V
of sensing costs and traveling costs along the path, i.e., a subset of locations are selected in order to maxi-
C P       l  C  v      l  C v   ,v                    mize the mutual information, without considering path costs.
 (  )=    i=1  ( i)+   i=2  ( i−1 i). For a collection
of k paths P =   {P ,...,P }, one for each robot, let By exploiting the submodularity property of MI, they show
                   1      k                                                V
I(P)=I(P1  ∪···∪Pk)  be the sensing quality, which quan- that if the discretization is ﬁne enough and the GP satis-
tiﬁes the amount of information collected by the k paths. The ﬁes mild regularity conditions, greedily selecting locations
MIPP problem desires to ﬁnd a collection P of k paths, with based on this criterion is near optimal. More speciﬁcally, the
speciﬁed starting and ending nodes s and t , such that each greedy algorithm (which we call GreedySubset in the follow-
                               i     i                                        k         A
path has bounded cost C(P ) ≤ B for some speciﬁed budget ing), after selecting the ﬁrst locations k, picks the loca-
                       i                                  v               A  ∪{v}  −   A          A
B, and that the paths are the most informative, i.e., I(P) is as tion k+1 =argmaxv I( k ) I( k) and sets k+1 =
                                                      A  ∪{v    }
large as possible. Formally, the problem can be deﬁned as: k k+1 . GreedySubset hence iteratively adds locations
                                                      which increment mutual information the most. Guestrin et al.
       max I(P);  subject to C(Pi) ≤ B,∀ i ≤ k. (1)
       Pi⊆V                                           [2005] showed that GreedySubset selects sets which achieve
                                                                                 − /e      −ε
In our lake monitoring example, the single-robot problem mutual information of at least (1 1 )OPT , where OPT
instance is depicted in Fig. 1a, top. We try to ﬁnd the most is the optimal mutual information among all sets of the same
                                                      size, and ε is a small error incurred due to the discretization.
informative path P1 (in terms of predicting the algal content).
                  C v                                 This result however only holds true in the unconstrained set-
The experiment cost ( i) would correspond to the energy         k
required for making a biomass measurement, whereas the ting, where arbitrary locations can be picked, and does not
                                                      generalize to the MIPP problem. In this paper, we provide an
travel cost C(v − ,v ) would correspond to the energy
              i 1 i                                   efﬁcient algorithm with strong approximation guarantees for
consumption when traveling from location v − to v .
                                     i 1   i          the more difﬁcult MIPP problem.
Quantifying informativeness. How can we quantify the
sensing quality I? To model spatial phenomena, a common 3 Approximation Algorithm for MIPP
approach in spatial statistics is to use a rich class of prob- The problem of optimizing the path of a single robot (i.e., k =
abilistic models called Gaussian Processes (GPs, c.f., Ras- 1) to maximize a submodular function of the visited locations
mussen and Williams 2006). Such models associate a ran- has been studied by Chekuri and Pal [2005]. They proposed
                                                                                                      ∗
dom variable X with each location v ∈V. The joint dis- a recursive-greedy algorithm, which provides a O(log |P |)
             v                                                                      ∗
tribution P (XV ) can then be used to quantify uncertainty in approximation guarantee, where |P | is the number of nodes
                                                                               ∗
the prediction of unobserved locations, after acquiring some visited in the optimal path P , which is no larger than the
measurements. To quantify this uncertainty, we use the mu- number of possible locations |V|. That is, their algorithm will
tual information (MI) criterion of Guestrin et al. [2005]. For provide a path of length no more than B that visits locations
                                                                                                      ∗
a set of locations P, the MI criterion is deﬁned as:  yielding a submodular value of at least O(OPT / log |P |),
        MI(P)  ≡ H(XV\P)  − H(XV\P  |XP ),      (2)   where OPT  is the submodular value collected by the optimal
                                                      path.  Their algorithm provides the best approximation
where H(XV\P)  is the entropy of the unobserved locations guarantee known for the single robot MIPP problem.
V\P,andH(XV\P     |XP ) is the conditional entropy of lo- The recursive-greedy algorithm works by iterating over
cations V\Pafter sensing at locations P. Hence mutual the possible middle nodes of the path, splitting the path
information measures the reduction in uncertainty at the un- into a left subpath and a right subpath. For each possible
observed locations. Hence, in our lake monitoring example, middle point, the algorithm is applied recursively on the
we would like to select the locations that most reduce the un- left subpath. Then, their approach commits to the selected
certainty in the algal content prediction for the entire lake. locations on the left side, and recurses on the right subpath,
  Even if we do not consider the constraints in the length given these selected locations. This algorithm is ”greedy”
of the paths of the robots, the problem of selecting locations in that it commits to the nodes selected in the ﬁrst subpath
that maximize mutual information is NP-hard [Guestrin et al., when optimizing the second subpath.
2005]. Fortunately, mutual information satisﬁes the following In the case of multiple robots, to our knowledge, no
diminishing returns property of Guestrin et al. [2005]: The sub-exponential approximation algorithm has been proposed
more locations that are already sensed, lesser will be the in- previously. In this paper, we ﬁrst present an algorithm for the
formation gained by sensing a new location. This intuition multiple robot setting that exploits any approximation algo-
is formalized by the concept of submodularity: A function f rithm for the single robot case, such as the recursive-greedy
is submodular if ∀A⊆B⊆Vand    s ∈V\B,f(A∪s)      −    algorithm, and (almost) preserves the approximation guaran-
f(A) ≥ f(B∪s)   − f(B). Another intuitive requirement is tee. Our algorithm, sequential-allocation, works by succes-
that the function f is monotonic, which means that f(A) ≤ sively applying the single robot path planning algorithm k
f(B) for all A⊆B⊆V. Hence, more the sensing locations times to get the paths for k robots. At stage i, in order not to
that are selected, higher will be the collected information. double-count information from locations already visited in

                                                IJCAI-07
                                                  2205      (a) Spatial decomposition of the phenomenon (b) Cell paths and travel within cells (c) Cell paths and path smoothing
Figure 1: Illustration of eMIP. The sensing domain ((a), top) is decomposed into a grid of cells ((a), bottom). eMIP jointly optimizes over
cell-paths ((b), top) and allocations of experiments in the cells ((b), bottom). Within the cells, nodes are connected to cell center. eMIP
concatenates the between-cell and within cell paths ((c), top) and ﬁnally applies heuristics to smooth the path ((c), bottom).

earlier stages, we supply a modiﬁed sensing quality function 4.1 Spatial Decomposition
to the single robot procedure: Let Ai−1 be the nodes already Krause et al. [2006] empirically show, that in addition to
visited by paths P1,...,Pi−1. Then the residual information, submodularity, the mutual information criterion exhibits
                     P      A   ∪P   −  A                                                    A      B
IAi−1 is deﬁned as IAi−1 ( )=I( i−1 )  I( i−1). This  the following locality property: Two sets and    of
residual information effectively commits to the nodes already sensing locations which are sufﬁciently far apart are roughly
visited by the algorithm until stage i − 1, before deciding independent. Hence, in order to obtain a large amount of
the nodes to visit at that stage. The sequential allocation information, a robot will have to visit several locations that
procedure is implemented in Line a1 of Algorithm 1.   are far from each other, rather than staying in one small
  Surprisingly, this straight-forward sequential application area. We can thus think about planning informative paths
of the single robot path planning algorithm results in the as deciding which regions to explore, and then deciding
following approximation guarantee:                    which locations to sense in these regions. This motivates the
Theorem  1. Let η be the approximation guarantee for the decomposition of the sensing domain into cells, representing
single path instance of the informative path planning prob- clusters of the sensing locations, and then run the recursive
lem. Then our sequential-allocation algorithm achieves an greedy algorithm on these cells instead of actual sensing
approximation guarantee of (1 + η) for the MIPP prob- locations. Fig. 1 presents an illustration of our approach.
lem. In the special case, where all robots have the same Overview. Informally, our strategy will be the following:
                s     s , ∀i, j
starting locations ( i = j   ) and ﬁnishing locations   1. We decompose the sensing  region (c.f., Fig. 1a,
(t =  t , ∀i, j), the approximation guarantee improves to
 i     j                                                  top) into a collection of non-overlapping cells V =
1/(1 − exp (−1/η)) ≤ 1+η.
                                                          {C1, C2,...,CN } (c.f., Fig. 1a, bottom). The distance
All proofs can be found in the longer version of this paper between two cells is deﬁned as the distance between the
[Singh et al., 2006]. When using the recursive greedy     centroids of these cells. All nodes v ∈V, representing
algorithm from Chekuri and Pal [2005], the approximation                                       C
                    ∗                                     sensing locations, are assigned to the cell i in which
guarantee η is O(log |P |) as discussed above. This result they are contained.
extends the analysis of Blum et al. [2003], who considered 2. We deﬁne a new optimization problem, the spatially
additive functions, to our submodular setting.            decomposed MIPP problem, or SD-MIPP problem  on
4  Efﬁcient Algorithm for MIPP                            V. In SD-MIPP, we jointly optimize over cell-paths in V
Unfortunately, the running time of the recursive-greedy   (c.f., Fig. 1b, top), and over the allocation of measure-
algorithm is quasi-polynomial. More speciﬁcally, the run- ments to the cells visited by the paths. When allocating
ning time of the algorithm is O((MB)O(log M)), where B    measurements to a cell, we ignore the traveling cost
is the budget constraint and M = |V| is the total number  within the cell (c.f., Fig. 1b, bottom). Since the cells are
of nodes in the graph. So, even for a small problem with  not excessively large, this simpliﬁcation only leads to
M  =64nodes, the exponent will be 6, resulting in a very  a small additional cost when the SD-MIPP solution is
large computation time, making the algorithm impractical  transformed back to original MIPP problem.
for real world sensing applications. In this section, we 3. We transfer the (approximate) SD-MIPP solution, con-
propose an efﬁcient algorithm for MIPP, eMIP, which is    sisting of a cell-path and an allocation of measurements
based on and has similar approximation guarantees as the  to cells (c.f., Fig. 1c, top), back to the original MIPP
recursive-greedy algorithm, but is practical for real-world problem. We then smooth the path using tour-opt
sensing tasks. Exploiting submodularity and using several heuristics (c.f., Fig. 1c, bottom). The resulting solution
branch and bound heuristics, we reduce the computation    will have an approximation guarantee which depends
effort to within tractable limits. Our eMIP algorithm assumes on the diameter of the chosen cells.
that the traveling cost between arbitrary locations is given
                                                        More formally, the SD-MIPP problem is the following:
by their Euclidean distance. We discuss the algorithm only
                                                                        B                 B
for the single robot instance of the problem, since it can be Suppose, the budget is split into a budget t for traveling
                                                                                  B
easily extended for multiple robots using Theorem 1.  between the cells, and a budget e for making experiments

                                                IJCAI-07
                                                  2206at sensing locations within the visited cells. We want to ﬁnd Algorithm: eMIP
     P∗     C   C  ,...,C    C
a path  =(   s = i1      il = t) with a travel cost of at      B k                    s ,...,s t ,...,t
    B                                                    Input: , , starting / ﬁnishing nodes 1 k, 1 k
most  t. This travel budget is measured in terms of distances Output: A collection of informative paths P1,...,Pk.
between centers of visited cells, and the cost of traveling begin
within cells is deﬁned as 0. In addition, for each visited cell Perform spatial decomposition into cells;
C    P∗                                        A
 ij in  , we want to select a set of sensing locations j,   Find starting and ending cells Csi and Cti ;
                                                            X  ←∅
such that the total cost C(A1 ∪···∪Al) ≤ Be, and that             ;
                                                                i   to k
the information I(A1 ∪···∪Al) is as large as possible. The a1 for =1    do
                         ∗
                       P                               b1       for iter =0to log2 B do
optimal SD-MIPP solution  uses the optimal split of the                      iter
                                                                  Be ← B − 2  ;
budget B into Bt and Be. To simplify the presentation, we           
                                                                   Piter ←recursive-eMIP(Csi , Cti ,Be,X,iter);
rescale the costs such that the cells form a uniform grid of              
                                                                   Smooth Piter using tour-opt heuristics;
quadratic cells with width L, and assume that the sensing cost                   
                                                               Pi ← argmax    I(Piter);
C    is constant over all locations. These assumptions can                 iter
 exp                                                           X  ← X ∪Pi;
easily be relaxed, but they allow us to relate the path costs to return P1,...,Pk;
the number of cells traversed, to simplify the discussion. end
Algorithm for SD-MIPP.  We now present our algorithm    1: eMIP algorithm for informative multiple path planning,
                                   V                   realizing the sequential allocation described in Section 3 (c.f.,
for solving the optimization problem on . In Section 4.2, Line a1). The path for the i-th robot is found using the spatial
we will discuss several details of efﬁcient implemen-   decomposition approach described in Section 4, which calls
tation. The complete algorithm works as follows: An     the recursive procedure (c.f., Algorithm 2).
outer loop (c.f., Line b1 in Algorithm 1) iterates through
        0  1  2                                         ﬁnd a path P2 from Cm to Ct, with experimental bud-
Bt ∈{2   , 2 , 2 ,...,B}, where B is the budget given to            
                                                          get Be − B . This path will also visit at most Bt/2 cells.
the SD-MIPP problem, allocating budget Bt out of the total
      B                              B     B− B         We again greedily select the sensing locations at maxi-
budget  for traveling between the cells, and e =  t       mum recursion depth of 0, but now based on the residual
for making experiments within the visited cells. Stepping                                          P
                      B                                   information IX∪P1 , since we have committed to 1.
through the travel budget t in powers of 2 results in faster 4. Concatenate the nodes obtained in P and P to output
                B         B                                                            1      2
performance (log2 instead of iterations), and increases   the best path from the algorithm (c.f., Fig. 1c, top).
the required budget B by at most a factor of 2. The inner loop
                                                      The recursive-eMIP procedure is based on the recursive
is formed by a recursive procedure, shown in Algorithm 2,
                                                      greedy algorithm of Chekuri and Pal [2005], but exploits our
which selects cells to visit, and allocates experiments to cells.
                                                      spatial decomposition.
  More speciﬁcally, this recursive-eMIP procedure takes as
                 C                C
input a starting cell s, a ﬁnishing cell t, an experimental Linear vs. exponential budget splits. Step 1 considers dif-
budget B , a residual X indicating the locations visited thus            
        e                                             ferent budget splits B ∈ B to the left and right subpaths.
far (initially empty), and a maximum recursion depth, iter,                   e
                                                      Similar to the recursive greedy algorithm, one can choose
which is initialized to log Bt. We then:
                     2                                B = {0, 1, 2, 3,...,B −1,B } to be linearly spaced. Since
                                               C       e                 e      e
 1. Iterate through all possible choices of middle cells m, the branching factor is proportional to the number of consid-
                       
    and budget splits B ∈ Be to spend for making exper- ered splits, linear budget splits lead to a large amount of com-
    iments on the path from Cs to Cm (c.f., Fig. 1b). The putation. An alternative is to consider only exponential splits:
               B                                     
    budget splits e can either be linearly (more accurate) Be = {0, 1, 2, 4,...,Be}∪{Be,Be−1,Be−2,Be−4,...,0}.
    or exponentially (faster) spaced, as described below. Here the branching factor is only logarithmic in the experi-
 2. Recursively ﬁnd a path P1 from Cs to Cm, subtracting mental budget. Even though we are not guaranteed to ﬁnd
    1 from the maximum recursion depth, iter. This maxi- the same solutions as with linear budget splits, we can both
    mum recursion depth controls the maximum number of theoretically and empirically show that the performance only
    cells visited by P1. At the top level of the recursion, P1 gets slightly worse in this case, compared to a dramatic im-
    will visit a maximum of Bt/2 cells, in the next level, provement in running time. In addition to these two ways
    the limit will be Bt/4 cells, and so on. When reaching of splitting the budget, we also considered one-sided expo-
                                                                            
    a maximum recursion depth of 0, we use the Greedy- nential budget splits (i.e., Be = {0, 1, 2, 4,...,Be}), which
    Subset algorithm (c.f., Section 2) to select the sensing halves the branching factor compared to the exponential splits
    locations Ai based on the residual information function
                                                     deﬁned above. Although we do not provide theoretical guar-
    IX constrained by budget B . Hereby, the residual X antees for this third possibility, we experimentally found it to
    is a parameter of the recursion, and contains all nodes perform very well (c.f., Section 5).
    visited before considering the current cell. As an illus-
    tration, consider the black nodes selected in the middle Solving the MIPP problem. Now we need to transfer the
    cell Cm in Fig. 1b, bottom. These have been selected by approximately optimal solution obtained for SD-MIPP back
    the GreedySubset algorithm with budget B =4, since to MIPP. This is done by connecting all nodes selected in cell
    they provide the maximum improvement in mutual in- Ci to the cell’s center, (as indicated in Fig. 1b bottom), then
    formation measured against the path P1 of Fig. 1b, top. connecting all selected centers to a path (Fig. 1c top), and
 3. Commit to the nodes visited in P1, and recursively ﬁnally expanding the resulting tree into a tour by traversing

                                                IJCAI-07
                                                  2207                  Cs Ct , 
                 budget Be
                           iter = k
                  Max                                                                            Max
               C t                                                                                 1
                B 1     C
                       b s
              1 it     u
               l       d
             C m p      g C                            Max1
               s        et m
              t           j
            s e           s
            C g          p C
             d            li
            u             t t , 
            b              B
                           ’
                           j                                                             Sum
                        ~                                                                   3
               For all splits of B in B
                      e  e Sum
         Sum  and all possible middle cells
                               bu
       ,                  ,     C
                          j j
       1    b
        1    C             B                 Sum                   Sum
       m    u             m    d m              1                    3
        B                  t     j                     Sum
      C t    d m         C     g                          2
             g 1          e     e
       e                  g     t C                                                 Max        Max
     s g     e                                                                         6         7
     C d P1 P2 t C       s d P1 P2 B t
               B         C        , 
      u        t          u      e -
     b          ,        b
              e -                B
               B                 j
               1 iter = k-1
                                         Max   Max
    Max       Max       Max                 2     3             Max6  Max7
                                 Max                 Max4 Max5                 Sum4

              (a) sum-max tree                   (b) Pruning of sum nodes         (c) Tighter lower bounds
Figure 2: Illustration of our branch & bound approach. (a) shows the sum-max tree representing the search space. Each max node selects a
middle cell and a budget allocation, and each sum node combines two subpaths. (b) shows how upper bounds at sum nodes are used to prune
branches. (c) shows how lower bounds at max nodes are tightened to allow even more pruning.
                                                                     B  ∈ B                    P     P
   Algorithm: recursive-eMIP                          spaced) splits of e   e among the two paths 1 and 2
                                                                                                  N,B
   Input: Cs, Ct,Be,X,iter                            (Line c2). The recursion depth would be log2(min( )).
   Output: An informative path P from Cs to Ct.       The following proposition states the running time for eMIP.
   begin
                   iter                               Proposition 3. The worst case running time of eMIP
      if (d(Cs,Ct) > 2 L) then return Infeasible;
                                                      for linearly spaced splits of the experimental budget
a2    P←GreedySubsetBe   (vi : vi ∈Cs ∪Ct);                                   
                                                         O  T      B  NB  log2 N
      if (iter = 0) then return P;                    is     gs log2 (    )     ,  while for the exponen-
      reward ← IX (P);                                tially spaced splits of the experimental budget it is
             C  ∈C                                    O  T      B   N     B  log2 N
b2    foreach m    do                                     gs log2 (2  log2  )
                f
c2        for B ∈ Be do
                                                       Comparing this running time to that of the original
            P1 ← recursive-eMIP(Cs, Cm,B ,X,iter− 1);
                                                      Chekuri et al. algorithm (O((MB)O(log2 M))), we note
            P2 ← recursive-
                                                                   B        B
                 C , C ,B − B ,X ∪P  ,iter−           a reduction of   to log2  in the base, and log of the
            eMIP( m  t  e           1      1);                             M
            if (IX (P1.P2) >reward) then              number of nodes (log2  ) to log of the number of cells
                                                           N
               P←P1.P2;                               (log2  ) in the exponent. These two improvements turned
               reward ← IX (P);                       the impractical recursive-greedy approach into a much more
      return P;                                       viable algorithm.
   end                                                4.2  Branch and Bound
     2: recursive-eMIP procedure for path planning.   The spatial decomposition technique effectively enables a
                                                      trade-off between running time complexity and achieved
                                                      approximation guarantee. However, the eMIP algorithm
the tree twice. This traversal results in a tour which is at most still has to solve a super-polynomial, albeit sub-exponential,
twice as long as the shortest tour connecting the selected search problem.
vertices. (Of course, an even better solution can be obtained The problem structure can be represented by a sum-max
by applying an improved approximation algorithm for TSP, tree as shown in Fig. 2a. The sum nodes correspond to
such as Christoﬁde’s algorithm [1976].) The following combining the two paths P1 and P2 on either side of the
                                                                C
Theorem completes the analysis of our algorithm:      middle cell mi . The max nodes correspond to selecting the
                                                      best possible path for all possible experimental budget split
Theorem  2. Let P∗ be the optimal solution for the MIPP
                                                      in B and all possible middle cells C . Thus, each sum node
problem with a budget of B. Then, our eMIP algorithm      e                         mi
                 P                                   will have two children, each one a max node, representing the
will ﬁnd a solution achieving an information value of at best possible solution from paths P and P respectively. The
      P  ≥   1−1/e   P∗                                                           1     2
least I( )   1+log N I( ), whose cost is no more than root of the tree will be a max node selecting the best possible
   √             2 √                                                                                 iter
2(2 2B +4L)(1+L     2 ) in the case of linear budget splits solution at the highest level. The depth of the tree, ,
                  Cexp                  √                                        B  iter   
    B 
                        √                        3    depends on the traveling budget t, =  log2 t .Asan
   B                      B    L     L  2  N log2 2
(for e) and no more than 2(2 2 +4 )(1+ Cexp )         initial pruning step, we note that since the middle cells have
                                                     to lie on a path, we only need to consider those which are at
in the case of exponential budget splits (for Be).
                                                      most distance Bt/2 · L from the starting and ﬁnishing cell.
  Running time analysis of eMIP is straightforward. The In order to avoid exploring the entire sum-max tree and
                                        B
algorithm calls the routine recursive-eMIP log2 times. If waste computation considering possibly bad solutions, we
TI is the time to evaluate the mutual information I, then time follow a branch and bound approach. At each max node we
                         T              O  N 2 T
for computing greedy subset gs (Line a2)is ( C  I),   derive upper bounds for all the child sum nodes. We can then
where NC is the maximum number of nodes per cell. At each prune all the sum node children with upper bounds lower
recursion step we try all the cells that can be reached with than the current best solution. If any of the child sum nodes
the available traveling budget (Line b2). For the possible ex- provides a solution better than the current best solution, then
perimental budget split, we try all (linearly or exponentially the current best solution for the parent max node is updated

                                                IJCAI-07
                                                  2208