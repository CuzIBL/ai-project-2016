       PROLOG IN lO F I G U R E S 


                     Alain Colmerauer 


           Centre Mondial d' In-formatique 
           22 avenue Matignon, 75008 Paris 
                              and 
           Faculte des Sciences de Luminy 
           case 901, 13288 Marseille Cedex 9 


Abstract; Prolog is presented in a rigourous way, 
through 10 easily understandable figures. I t s 
theoretical model is completly rewrought. After 
introducing i n f i n i t e trees and inequalities, t h i s 
paper puts forth the minimal set of concepts 
necessary to give Prolog an autonomous existence, 
independent of lengthy considerations about f i r s t 
order logic and inference rules. Mystery is 
sacrificed in favor of c l a r i t y .  486 A. Colmerauer 


 Artificial Intelligence interacts with m a n y fields                               C O L M E R A U E R A. (1982). "Prolog I I , Reference Manual 
 including psychology, linguistics, history,                                         and Theoretical Model". 
geology, biology, medical science . . . These 
 sciences are complex, and special tools are needed                                  V A N C A N E G H E M M. (1982). "Prolog I I , User's 
 to represent and process the knowledge they deal                                    Manual". 
 with. Furthermore, these tools should not 
 introduce new problems, inherent to computer                                        K A N O U I H. (1982). "Prolog I I , Manual of Examples. 
 science. Traditionally, the science of knowledge 
 h a s b e e n mathematical l o g i c . Therefore it w a s 
reasonable to turn to logic for help in developing 
a tool for A r t i f i c i a l Intelligence: that w a s h o w                        1. T R E E S 
Prolog w a s born. 
                                                                                     From an abstract point of view, one m a y say that 
Prolog, developed in 1 9 7 2 by A.Colmerauer and                                     the knowledge of an intelligent being on a given 
P.Roussel, w a s at f i r s t a theorem prover, based on                             subject, is the set of facts that he or she can 
A.Robinson's resolution principle (1965) with                                        generate on the subject. Therefore, knowledge can 
strong restrictions to narrow the search space.                                      be viewed as a set of facts, specified by a set of 
Credit is given to R.Kowalski and M.van E m d e n for                                rules. E a c h of these facts can be represented by a 
having pointed out these restrictions as                                             declarative sentence. In our case we represent a 
equivalent to the use of clauses having at least                                     fact by a tree, drawn upside down, as the one 
one positive l i t e r a l (Horn clauses), and for                                   s h o w n in Fig la. E a c h leaf a n d each node is 
having proposed the f i r s t theoretical model of                                   labeled with an "atom" of information: this atom 
                                                                                     can be a word, a group of words, a number, or a 
what is computed by Prolog: a minimal Herbrand 
                                                                                     special character. Only the structure of the tree 
interpretation. 
                                                                                     is relevant. Therefore, Figs la a n d l a ' are 
                                                                                    equivalent. Trees in Figs l a , lb a n d lc are 
However, Prolog's close links with Logic proved 
                                                                                    examples of facts in three different fields: 
sometimes to be inhibiting vis-a-vis its 
                                                                                    arithmetic, ( s t y l i s t i c ) permutations, a n d m e a l 
implementation. It w a s necessary to reformulate 
                                                                                    planning. Facts are always trees, but not all 
the theory to take into account implementation 
                                                                                    trees are facts: obviously the trees in Figs Id 
constraints: this new theory is unencumbered by 
                                                                                    and le are not facts in arithmetic, even if tree 
distinctions necessary only in logic, and is 
                                                                                     in Fig Id is a sub-tree of the fact in Fig la. 
enriched by concepts indispensable for programming 
purposes (such as inequalities). We can say that, 
 after a careful implementation, a n e w theoretical                                Trees were purposely chosen as data structures: 
 model of Prolog emerged and it is this n e w model                                 they are capable of expressing complex information 
 that we present here in 10 c o m m e n t e d figures.                              and, at the s a m e time, simple e n o u g h to be handled 
                                                                                    algebraically, and by a computer. 
 The reader interested in further readings on this 
 subject is referred to the following: 

 On automatic theorem proving and logic: 
                                                                                   2. T E R M S 
 R O B IN S O N J.A. (1979). "Logic: Form and Function", 
 Edinburgh University Press and Elsevier North                                     Formulas are used to represent tree patterns. 
 Holland.                                                                          These formulas called "terms", consist of atoms of 
                                                                                   information, v a r i a b l e s , parentheses a n d c o m m a s . 
                                                                                   Recall that an atom of information is either a 
 On the links between logic and Prolog: 
                                                                                   group of words, a number, or a special character. 
                                                                                   In the left column of Fig 2a the syntactic 
 K O W A L S K I R.A. (1979). "Logic For Problem Solving", 
                                                                                   structure of a term is defined; this is a 
 Artificial Intelligence series, (Ed- Nilsson, 
                                                                                   recursive definition where complex terms are 
 N.J.), North Holland. 
                                                                                   defined from simpler terms; the simplest terms are 
                                                                                   variables or atoms of information. Examples of 
On the genesis of Prolog:                                                          terms can be found in the left part of Figs 2b and 
                                                                                   2c. 
C O L M E R A U E R A., KANOUI H., P A S E R O R. et R O U S S E L Ph. 
 (1973), "Un systeme de communication homme-machine 
en frangais", Research Report, Groupe Intelligence 
A r t i f i c i e l l e , Faculte des Sciences de Luminy, 
Marseille. 

R O U S S E L Ph. (1975). "Prolog, Manuel de Reference 
et d'Utilisation, Groupe Intelligence 
A r t i f i c i e l l e , Faculte des Sciences de Luminy, 
Marseille. 

A Prolog system, based on the ideas developed 
here, and implemented on several computers (Apple 
I I , Vax/Vms, etc.), is described in three Internal 
Reports of the Groupe Intelligence A r t i f i c i e l l e ,                         Je remercie Jacques C o h e n de m'avoir aide a 
Faculte des Sciences de Luminy, Marseilles                                           rediger cet article en anglais. A. Colmerauer 489 490 A. Colmerauer 


 Variables occurring in terms represent unknown                        Figs 2b and 2c depict two examples of 
 trees. Therefore, the tree expressed by a term                        tree-assignments. Example 2b shows that it is 
 w i l l depend upon the trees assigned to the                         possible to find in the assignment "X", variables 
 variables. Such an assignment "X", called a                           which do not occur in the term, but the contrary 
 "tree-assignment", is just a set of pairs                            is not possible. In example 2c, the term contains 
 " x i : = a i " , ''ai" being the tree assigned to the               no variable; t h i s means that the corresponding 
 variable "x1". The right column of Fig 2a gives                      tree does not depend on the assignment. The last 
 the tree "a" represented by the term " t " after the                 example shows a systematic way of coding a f i n i t e 
 application of tree-assignment "X". It is assumed                    tree by a term without variables. 
 that if " t " contains no variable, an empty 
 tree-assignment can be applied. 


                                                                      pair of terms " < S J , S J ' > " which w i l l represent 
3. CONSTRAINTS                                                        equal trees, or a pair of terms " <tk,t|<')" which 
                                                                      w i l l represent unequal trees. Fig 3a i l l u s t r a t e s 
Prolog is a language which "computes" on trees                        the general condition under which a 
" a j " represented by variables ' ' x i " . This                     tree-assignment "X" s a t i s f i e s a constraint "C". 
computation is done by accumulating constraints                       "X" is also said to be a solution of "C". Fig 3b 
that f i n a l trees must s a t i s f y . These constraints           shows an example of a constraint "CI" s a t i s f i a b l e 
l i m i t the values variables can take, that is the.                 by the tree-assignment " X I " . In Fig 3c there are 
tree-assignment of variables " x i " by trees " a i " .               three constraints which cannot be s a t i s f i e d by any 
As shown in Fig 3a, a constraint MC" consists of a                    tree-assi gnment. 
set of elementary constraints, each of them to be 
s a t i s f i e d . An elementary constraint is either a                                                                                                A. Colmerauer 491 


During the execution of a Prolog program, the               Another basic property allows us to split the 
basic operation consists of verifying whether a             initial problem into "n" independent and simpler 
constraint is "satisfiable" or not (by at least             sub-problems: a constraint of the form 
one tree-assignment). This is done by "reducing"            1 is satis-fiable if and only 
it, as seen in Fig 3d: the purpose of "reducing"            if each of the constraints 
is to simplify the constraint in order to make all          "Cu{tn*tn')" is also satisfiable. Again, this is 
its solutions explicit. This involves exhibiting            not true in the domain of natural integers 
variables distinct from each other as left members                        because it would be possible to show 
of equalities. To do so, we use a specific                  that the constraint has at 
property of trees: the unique decomposition of a            least one solution since the constraints 
tree into immediate subtrees. This property                 "(x+y=l,i:*0}", and 
permits us to replace                                       have at least one' In order to verify that the 
                                                            constraint is satisfiable (knowing 
                                                            that "C" already is) we must check that the 
                                                            constraints and are not 
                                                            equivalent. If the constraint "Cutt^tj'}" is not 
                                                            satisfiable, we can even remove the inequality 
Note that if this property would hold for numbers,          1 as in example 3d. 
we would wrongly conclude that the two constraints 
" {x+3=2+y)" and "(x+3=2+y)" are equivalent! If we          In the same way as we simplify equalities, it is 
succeed in producing equalities where left members          possible to simplify inequalities. This allows us 
are distinct variables and where there are no               to present any satisfiable constraint in a 
inequalities, thpn the constraint is satisfiable.           "reduced form": this reduced form shows that the 
Its solutions are directly obtained by assigning            constraint is satisfiable by making all its 
arbitrary trees to variables not appearing as left          solutions explicit. The general form of a reduced 
members.                                                    constraint containing inequalities is beyond the 
                                                            scope of this paper (see Colmerauer 1982). 
If inequalities are left, let "n" be their number. 