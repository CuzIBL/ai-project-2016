              Long-Distance Mutual Exclusion for Propositional Planning

                            Yixin Chen, Zhao Xing, and Weixiong Zhang
                                   Washington University in St.Louis
                           Department of Computer Science and Engineering
                                   {chen,zx2,zhang}@cse.wustl.edu


                    Abstract                          Gerevini, et al. [Gerevini et al., 2003] extended mutex to tem-
                                                      poral planning, and Kautz and Selman encoded mutex con-
    The use of mutual exclusion (mutex) has led to sig- straints in the BLACKBOX [Kautz and Selman, 1996] and
    niﬁcant advances in propositional planning. How-  SATPLAN04   [Kautz, 2004] planners. Note that almost all
    ever, previous mutex can only detect pairs of ac- existing fast planners for different applications are based on
    tions or facts that cannot be arranged at the same mutex. For example, the LPG temporal planner by Gerevini,
    time step. In this paper, we introduce a new class et al. [Gerevini et al., 2003] won the First Prize of the Sub-
    of constraints that signiﬁcantly generalizes mutex optimal Track of the 3rd International Planning Competition
    and can be efﬁciently computed. The proposed      (IPC), and SATPLAN04 won the First Prize of the Optimal
    long-distance mutual exclusion (londex) can cap-  Track of the 4th and 5th IPCs.
    ture constraints over actions and facts not only at
    the same time step but also across multiple steps.  Despite its success, mutex has a major limitation that it can
    Londex provides a powerful and general approach   only detect conﬂicts between a pair of actions or facts in the
    for improving planning efﬁciency. As an applica-  same time step, but it is unable to capture constraints relating
    tion, we have integrated londex into SATPLAN04,   actions and facts in different steps. On the other hand, long
    a leading optimal planner. Experimental results   distance constraints are ubiquitous in almost all planning do-
    show that londex can effectively prune the search mains. For example, in a transportation problem, two actions
    space and reduce the planning time. The resulting requiring to use the same truck but at different locations can-
    planner, MaxPlan, has won the First Place Award in not be arranged too close to each other in time since the truck
    the Optimal Track of the 5th International Planning has to be relocated after the ﬁrst action.
    Competition.                                        In this research, we have developed long-distance mutual
                                                      exclusion (londex), a novel class of constraints for propo-
                                                      sitional planning. Unlike mutex that is based on a Boolean
1  Introduction                                       fact representation, londex is derived from domain transi-
Propositional planning entails arranging a course of actions tion graphs (DTGs) on a multi-valued domain formulation
in order to achieve certain goals subject to logical conditions (MDF) [Jonsson and Backstrom, 1998] of a planning prob-
and effects of actions. Propositional planning has tradition- lem. Table 1 compares the key features of londex and mutex.
ally been formalized as deduction [Green, 1969]and is known As a superset of mutex, londex can capture constraints relat-
to be PSPACE-complete [Bylander, 1994]. Previous work on ing actions and facts not only in the same time step, but also
this deduction paradigm has achieved limited success and can across multiple steps. An important utility of londex is for
only handle small cases.                              measuring the minimum distance between a pair of actions
  Emerging as one of the most efﬁcient techniques for propo- to prune a search space and improve the planning efﬁciency.
                                                                                              [         ]
sitional planning, mutual exclusion (mutex) was introduced in For example, for the truck5 problem from IPC5 IPC, 2006 ,
Graphplan [Blum and Furst, 1997] to construct constraints for SATPLAN04 generates 199,219 mutex constraints, whereas
actions and facts. In Graphplan, two actions at the same level our method using londex produces 12,421,196 londex con-
are persistent mutex actions if one action deletes a precon- straints which result in a 4.3 speedup in time when incorpo-
dition or an add-effect of the other, or the two actions have ratedinSATPLAN04.
mutual exclusive preconditions. During the search, mutex The paper is organized as follows. In Section 2, we deﬁne
constraints are enforced to prune the search space.   the basic concepts and review the conventional mutex. We
  Since its invention, mutex has been extensively studied and then discuss the MDF representation and introduce londex in
led to the development of many efﬁcient planners. For ex- Section 3. We incorporate londex in the SATPLAN04 planner
ample, Gerevini and Schubert proposed new state constraints to develop our new planner, and evaluate its performance on
from forward propagation of mutex [Gerevini and Schubert, IPC5 benchmark problems in Section 4. We discuss related
1998], Smith and Weld [Penberthy and Weld, 1994] and  work in Section 5 and conclude in Section 6.

                                                 IJCAI07
                                                  1840    Property          Mutex             Londex        As a result, many fast planners only use persistent mutex con-
  representation    Boolean facts        MDF          straints. In the rest of the paper, when we mention mutex, we
  generation time    polynomial        polynomial     refer to persistent mutex.
  relevant level(s)  same level      multiple levels
  fact constraints  from actions    from DTG analysis
 action constraints from add/del/pre facts from fact distances 3 Long-Distance Mutual Exclusion (Londex)
     quantity        moderate            large        To develop londex, we ﬁrst consider the multi-valued formu-
     pruning         moderate           strong        lation of propositional planning.
   relationship        persistent mutex ⊂ londex
   Table 1: Comparison of persistent mutex and londex. 3.1 Domain Transition Graph
2  Propositional Planning and Mutex                   The multi-valued domain formulation (MDF) [Jonsson and
                                                      Backstrom, 1998] translates Boolean facts into a more com-
Propositional planning requires to generate a sequence of ac- pact representation using multi-valued variables, where each
tions in order to accomplish a set of goals. Propositional variable represents a group of Boolean facts in which only
planning can be described in the STRIPS formalism, which one of them can be true in any state.
is represented by a set of Boolean facts. Given a set of facts
F = {f ,f , ··· ,f }     s            F                 The MDF representation of a propositional planning do-
      1  2      n ,astate  is a subset of where every main is deﬁned over a set of multi-valued variables: X =
fact in s is True.
                                                      (x1,x2, ··· ,xm),wherexi has a ﬁnite discrete domain Di.
Example 1. A simple cargo planning problem concerns mov-
                  C                      L1,L2          For a planning problem, the value assignment of a multi-
ing a piece of cargo among three locations     and    valued variable in MDF corresponds to a Boolean fact. Given
L3 using a truck T . The fact set F includes all the facts
                                                      an MDF variable assignment x = v and a Boolean fact f,we
about possible locations of the truck and the cargo, such as
                                                      can denote this correspondence as f = MDF(x, v).
at(T,L1), at(C, L2),andin(C, T ). A state speciﬁes the cur-
                                                        An MDF state s is encoded as a complete assignment of all
rent status. For example, s = {at(T,L1),at(C, L3)}.
                                                      the variables in X: s =(x1 = v1,x2 = v2, ··· ,xm = vm),
Deﬁnition 1 An  action  o   is  a  triplet o     =    where xi is assigned a value vi ∈Di,fori =1, 2,...,m.
(pre(o),add(o),del(o)),wherepre(o) ⊆ F  is the set of Example 3. To formulate Example 1 in MDF, we use two
                    o     add(o) ⊆ F    del(o) ⊆ F
preconditions of action , and        and              MDF variables, LocationT and LocationC,to denote the lo-
are the sets of add facts and delete facts, respectively. cations of the truck and the cargo, respectively. LocationT
  The result of applying an action o to a state s is deﬁned as:          D   = {L1,L2,L3}      Location
               j                                      can take values from T               and         C
                  s ∪ add(o) \ del(o), pre(o) ⊆ s;         DC  =  {L1,L2,L3,T}                       s =
   Result(s, o)=                   if                 from                      .Anexamplestateis
                  undefined,       otherwise.         (LocationT = L1,LocationC  = T ).
                                                        For every multi-valued variable in MDF, there is a corre-
Consequently,  applying  a   sequence   of   actions
                                                      sponding domain transition graph deﬁned as follows.
P   =    o1,o2, ··· ,on results in Result(s, P )=
Result(···(Result(Result(s, o1),o2)) ···on). Alter-   Deﬁnition 5 (Domain transition graph (DTG)). Given an
natively, a set of actions can be performed in a parallel plan MDF variable x ∈ X with domain Dx, its DTG Gx is a
with a number of time steps, where multiple actions can be digraph with vertex set Dx and arc set Ax. There is an arc
                                                          
executed in a time step.                              (v, v ) ∈Ax iff there is an action o with del(o)=v and
                                    T  =(O, I, G)     add(o)=v,inwhichcasethearc(v, v) is labeled by o and
Deﬁnition 2 A planning task is a triplet          ,                                   
where O is a set of actions, I ⊆ F is the initial state, and we say there is a transition from v to v by action o.
G ⊆ F is the goal speciﬁcation.
                                                      Deﬁnition 6 (Fact distance in a DTG). Given a DTG Gx,
Deﬁnition 3 Persistent mutex of actions. Actions o1 and the distance from a fact f1 = MDF(x, v1) to another factor
                                                      f  =      (x, v )         Δ   (f ,f )
o2 are mutex when any of the following sets is not empty: 2 MDF     2 , written as Gx 1 2 , is deﬁned as the
pre(o1) ∩ del(o2),pre(o2) ∩ del(o1),del(o1) ∩ add(o2), and minimum distance from vertex v1 to vertex v2 in Gx.
del(o2)∩add(o1), or when there exist two facts f1 ∈ pre(o1)
                                                      Example 4.    In the cargo example, the cargo can be
and f2 ∈ pre(o2) that are mutex.
                                                      loaded into the truck or unloaded at a location, and the
Deﬁnition 4 Persistent mutex of facts.Twofactsf1 and f2 truck can move among different locations. The DTGs of
are mutex if there do not exist two non-mutex actions o1 and the cargo and truck are shown in Figure 1. In the ﬁg-
o2 such that f1 ∈ add(o1) and f2 ∈ add(o2).                ΔG        (    (C, L1),    (C, L2)) =   2
                                                      ure,    LocationC MDF       MDF               ,and
                                                      ΔG        (     (T,L3),     (T,L1)) = ∞
  The mutex constraints deﬁned above [Blum and Furst,    LocationT MDF       MDF              .
1997; Gerevini et al., 2003] are persistent in the sense that Following a method used in the Fast Downward plan-
they are always effective, regardless of the initial state or ner [Helmert, 2006], we have implemented our own prepro-
the level of a planning graph. Blum and Furst [Blum and cessing engine to generate DTGs. The main steps of the
Furst, 1997] also suggested to derive non-persistent mutex preprocessing include detecting invariant fact groups, ﬁnd-
dependent of initial states and levels. However, deriving ing MDF variables, and generating the value transitions for
non-persistent mutex usually requires to construct a planning each MDF variable. Details of the algorithm can be found in
graph, which is expensive and impractical for large problems. Helmert’s paper [Helmert, 2006].

                                                 IJCAI07
                                                  1841                AT location1    AT  location1             1. procedure Generate Londex (P )
                                          Truck1             (INPUT: A STRIPS planning problem P )
     Cargo1                          MOVE
                LOAD/UNLOAD                                  (OUTPUT: londex constraints for facts and actions)
              IN  truck1           AT  location2          2.   generate the DTGs for P ;
  LOAD/UNLOAD        LOAD/UNLOAD        MOVE              3.   generate fact londex based on the DTGs;
                                                          4.   for each fact f do
   AT  location2      AT  location3    AT   location3
                                                          5.      generate action londex in EA1(f);
                                                                               G
Figure 1: DTGs for MDF variables LocationC and LocationT in 6. for each DTG graph x do
                                                                                   f ,f  f ,f ∈ G
Example 4.                                                7.      for each pair of facts ( 1 2), 1 2 x do
                                                          8.         generate action londex in EA2(f1,f2);
                                                          9. end procedure
3.2  Generation of Londex Constraints
We now deﬁne londex based on the MDF representation. We       Table 2: Generation of londex constraints.
deﬁne t(f) as the time step at which the fact f is valid, and
t(o)                             o
    as the time step at which an action is chosen.    move(T,L3,L1)   adds at(T,L1).  In contrast, londex is
                                                f
Londex constraints for facts. Given two Boolean facts 1 stronger as it speciﬁes that two actions using the same truck,
   f     f     f                                G
and 2,if  1 and 2 correspond to two nodes in a DTG x  even if they happen at different time, may lead to a con-
   Δ    (f ,f )=r
and  GX   1  2     , then there is no valid plan in which ﬂict. For example, if L1 and L4 are 5 steps apart in a DTG,
0 ≤ t(f ) − t(f ) <r
      2      1    .                                   then the conﬂict of arranging move(T,L1,L2) at step 0 and
                                    at(C, L1)
Example 5. Continuing from Example 4, if     is true  move(T,L4,L3)  at step 3 is a londex but not a mutex.
at time step 0, then at(C, L2) cannot be true before step 2.
Londex constraints for actions. For simplicity, we say 3.3 Analysis of Londex Constraints
that an action o is associated with a fact f if f appears in
pre(o),add(o),ordel(o). Given two actions a and b,we  In this section, we study the completeness, computation com-
consider two classes of londex constraints between them. plexity, and pruning power of londex constraints.
Class A.Ifa and b are associated with a fact f, a and b are Proposition 1 For any planning problem P ,thesetofper-
mutually exclusive if one of the following holds.     sistent mutex is a subset of londex.
   1) f ∈ add(a),f∈ del(b),   t(a)=t(b);
                           and                          This is true by the deﬁnitions of mutex and londex. The
   2) f ∈ del(a),f∈ pre(b), and 0 ≤ t(b) − t(a) ≤ 1;
                                                      Class A action londex include all persistent action mutex.
  Note that A(1) and A(2) are stronger than the original mu-
tex due to the inequalities in A(2). If we replace the inequali- Proposition 2 Londex constraints can be generated in time
ties in A(2) by t(a)=t(b), A(1) - A(2) are equivalent to the polynomial in the number of facts.
original mutex.                                       Proof. Due to space limits, we only sketch the time results
Class B.Ifa is associated with fact f1, b is associated with here. We denote the number of facts as |F | and the plan length
fact f2, and it is invalid to have 0 ≤ t(f2) − t(f1) <rac- as T .WeuseS to denote the upper bound of the number
cording to fact londex, then a and b are mutually exclusive if of preconditions, add effects, or delete effects that any ac-
one of the following holds.                           tion may have in a planning domain. Usually S is a small
 1) f1 ∈ add(a),f2 ∈ add(b), and 0 ≤ t(b) − t(a) ≤ r − 1; constant for most planning domains. The time to generate
                                                                        2
 2) f1 ∈ add(a),f2 ∈ pre(b), and 0 ≤ t(b) − t(a) ≤ r; the DTGs is O(S|F | ). The time to generate Class A lon-
                                                                 2
 3) f1 ∈ pre(a),f2 ∈ add(b), and 0 ≤ t(b) − t(a) ≤ r − 2; dex is O(TS |F |), and the time to generate Class B londex
                                                             2   2
 4) f1 ∈ pre(a),f2 ∈ pre(b), and 0 ≤ t(b) − t(a) ≤ r − 1. is O(TS |F | ). Therefore, the total time complexity for the
                                                                 O(TS2|F |2)                    |F |
                        f     f                       algorithm is         , which is polynomial in .
  Intuitively, since two facts 1 and 2 in the same DTG can- Proposition 2 gives the worst case complexity guaran-
not appear too closely due to the structure of the DTG, two tee to generate all londex constraints. This is comparable
actions associated with these facts should also keep a mini-
                                     a                to the polynomial time complexity to generate mutex con-
mum distance. For example, in case B(2), if is executed at straints [Blum and Furst, 1997]. Empirically, our prepro-
time t(a),thenf1 is valid at time t(a)+1. Since the fact
            f    f             r f                    cessor takes less than 30 seconds to generate all londex con-
distance from 1 to 2 is larger than , 2 (the precondition straints for each of the problems in IPC5, which is negligible
of b) cannot be true until time t(a)+1+r, which means b
                     t(a)+1+r                         comparing to the planning time that londex can help reduce,
cannot be true until time        . Other cases can be often in thousands of seconds for large problems.
proved similarly.
                                                        Table 3 illustrates the use of londex in reducing planning
  The procedure to generate the londex constraints is in Ta-
                                                      time. We can compare the size of mutex constraints derived
ble 2, in which EA1(f) represents all Class-A action londex
                                                      by Blackbox and SATPLAN04 (two SAT-based planners us-
related to a fact f,andEA2(f1,f2) denotes all Class-B ac-
                                                      ing mutex) and the londex constraints. The amount of londex
tion londex related to a pair of facts f1 and f2 in a DTG.
                                                      constraints is 2 to 100 times larger than that of mutex, de-
Example 6.  In the cargo example, mutex can only de-
                                                      pending on planning domains. It is evident from Table 3 that
tect the constraints that the truck cannot arrive at and
                                                      incorporating londex in a SAT planner, although largely in-
leave the same location at the same time. For example,
                                                      creases the size of the SAT instance, can signiﬁcantly reduce
move(T,L1,L2)   and move(T,L3,L1)   are mutually ex-
                                                      the speed of SAT solving because of the much stronger con-
clusive because move(T,L1,L2) deletes at(T,L1) while
                                                      straint propagation and pruning.

                                                 IJCAI07
                                                  1842      method          size   U. P. decisions  time         Domains   N    londex+minisat£   minisat Siege
    SATPLAN04       2.90e5  3.51e7    83398  109.5         openstacks 30      ¢3 ¡        0       0
      Blackbox      2.87e5  4.06e7   496254  267.8         TPP       30       £21         21     22
 SATPLAN04+londex   1.96e7  3.13e7    22015   34.5
                                                           truck     30       £¢6 ¡       3       3
Table 3: Comparison of the number of constraints, unit prop- storage 30       ¢£16 ¡      14     12
agations (UP), decisions, and solution time of SATPLAN04,  pathways  30       ¢9 ¡        8       8
Blackbox, and SATPLAN04 with londex, for solving the       pipeworld 50       £ 7         7       9
truck3 problem from IPC5 at time step 15.                  rovers    40       ¢29 ¡       16     16
 1. procedure SATPLAN04+londex
                                     P
    (INPUT: A propositional planning problem )        Table 5: The number of instances each method can solve for the
                                         P
 2.   generate the DTGs and londex constraints for ;  IPC5 domains. N is the total number of problem instances in each
         k
 3.   set to be an lower bound of the optimal plan length; domain. We highlight in box the better one between londex+minisat
 4.   repeat                                          and minisat if there is a difference.
 5.      convert P to a planning graph with k time steps;
 6.      translate the planning graph into a SAT instance;
 7.      add the londex constraints to the SAT;       station with Intel Xeon 2.4 GHZ CPU and 2 GB memory.
 8.      solve the SAT instance by a generic SAT solver; To evaluate the effect of londex constraints, we compared
 9.      if (the SAT instance is satisﬁable)          SATPLAN04 with Minisat (denoted as minisat in Tables 5
 10.         convert the SAT solution to a propositional plan; and 6) and SATPLAN04+londex with Minisat (denoted as
                                  k ←− k +1
 11.     else increase plan length by one,  ;         londex+minisat in the tables). As a reference, we also ran
 12.   until a solution is found.                     the original SATPLAN04 with Siege (denoted as Siege in the
 13. end procedure
                                                      tables). All these algorithms have the same solution quality
    Table 4: The framework of SATPLAN04+londex.       (in terms of number of time steps) since they are optimal, so
                                                      we focused on comparing their running time.
                                                        Table 5 shows the performance of the three algorithms on
                                                                                        th
4  Experimental Results                               the seven planning domains used in the 5 IPC (IPC5) [IPC,
                                                      2006].   These domains were selected from  a variety
As an application of londex, we incorporated londex con- of real-world application domains, such as transportation
straints in SATPLAN04 [Kautz, 2004], a leading SAT-based scheduling (truck, TPP), production management (open-
optimal propositional planner which attempts to minimize stacks), crate storage (storage), molecular biology (path-
the number of time steps. SATPLAN04 converts a planning ways), petroleum transportation (pipeworld), and rover mo-
problem to a Boolean satisﬁability (SAT) problem and solves tion planning (rover). Each domain contains a number of
it using a SAT solver. SATPLAN04 uses an action-based problems, and the table includes the number of problems in
encoding that converts all fact variables to action variables. each domain which each algorithm can solve under a thirty-
Besides some goal constraints and action-precondition con- minute time limit.
straints, most of the constraints in the SAT are binary con- As shown Table 5, Minisat with londex can solve more
straints modeling the mutex between actions.          problem instances in all the domains than Minisat with mu-
  We replaced the mutex constraints with londex constraints, tex. For example, SATPLAN04 with Minisat can only solve
and kept other components of SATPLAN04 unchanged. Fol- 16 problems in rovers, whereas SATPLAN04+londex with
lowing the action-based encoding of SATPLAN04, we used a Minisat can solve 29 problems. Furthermore, although not
Boolean variable vi,j to represent the execution of an action directly comparable due to the use of different solvers, SAT-
o           j           o            j
 i in time step . If an action i1 in time step 1 and an action PLAN04+londex with Minisat outperforms SATPLAN04
o             j
 i2 in time step 2 were mutually exclusive due to a londex with Siege in 5 out of the 7 domains. The problems only
                  ¬v    ∨¬v
constraint, the clause i1 ,j1 i2,j2 was generated.    solvable by SATPLAN04+londex but not others are typically
  The resulting algorithm SATPLAN04+londex is shown in very large, with tens of millions of variables and clauses.
Table 4. Starting from a lower bound k of the optimal plan Since most methods can easily solve small problem in-
length, SATPLAN04+londex iteratively solves, for each tar- stances in IPC5 and the problem difﬁculty in each domain
geted plan length k, a converted SAT problem augmented by grows exponentially with problem size, we are particularly
londex constraints. The method increases k until the optimal interested in the performance of the three methods on large,
plan length is reached. We only need to generate all londex difﬁcult instances. Table 6 shows the solution times for the
constraints once and save them for use by all steps.  three largest problems that at least one of the three methods
  The current default SAT  solver in SATPLAN04   is   can solve in each domain. The result shows that except for the
Siege [Ryan, 2003]. In our experiments, we found that run- TPP and pipesworld domains, using londex constraints with
ning Siege in SATPLAN04+londex caused memory-related  Minisat can help SATPLAN04 solve more large, difﬁcult in-
errors.Since the source code of Siege is not available, it is stances in substantially less time. We note that most of DTGs
impossible for us to modify its parameters to accommodate generated from the TPP and pipesworld domains contain only
a large memory requirement. We thus chose to use a dif- few fact nodes. As londex reasoning can only generate con-
ferent SAT solver Minisat [Ee´n and Biere, 2005] in SAT- straints between facts (or associated actions) within the same
PLAN04+londex. We ran all our experiments on a PC work- DTG, fewer fact nodes in the same DTG usually means fewer

                                                 IJCAI07
                                                  1843     Problem     londex+minisat£   minisat Siege        Several previous works have exploited various kinds of
   openstacks1       £¢1303 ¡       -        -        mutex reasoning or constraint inference among state vari-
                                                      ables. For example, forward and backward reachability anal-
   openstacks3       £¢1526 ¡       -        -
                                                      ysis has been studied in order to generate more mutex than
   openstacks4       ¢£1120 ¡       -        -        Graphplan [Do et al., 1999; Brafman, 2001]. Fox and Long
     TPP20            ¢557 ¡      £934      464       used a ﬁnite state machine graph to enhance the mutex rea-
     TPP22            1085        ¢723 ¡    408       soning in the STAN planner [Fox and Long, 1998]. Bonet
     TPP24           £  -           -       779       and Geffner in HSP proposed another deﬁnition of persis-
                                                      tent mutex pairs by recursively ﬁnding the conﬂicts between
     truck4          ¢1410 ¡        -        -
                     £                                one action and the precondition of the other action [Bonet
     truck5          £¢1233 ¡       -        -        and Geffner, 2001]. However, all these previous mutexes
     truck7          ¢£1528  ¡      -        -        relate actions and facts at the same level, and do not pro-
    storage14        ¢£96.6  ¡     330                vide constraints for actions and facts across multiple leves
                                                      like londex does. Kautz and Selman [Kautz and Selman,
    storage15         108          1153     102
                     £¢   ¡                           1998] as well as McCluskey and Porteous [McCluskey and
    storage16        ¢£1533  ¡      -                 Porteous, 1997] studied hand-coded domain-dependent con-
    pathways7        ¢27.3 ¡       £83.6    39.4      straints. Other earlier works that explore constraint inference
                                                             [                    ]    [
   pathways10         £34.1        ¢5.2 ¡   4.9       include Kelleher and Cohn, 1992 and Morris and Feldman,
                                                      1989].
   pathways15         643           -        -
                      ¢   ¡       £                     Our londex constraints are derived from the fact (or ac-
   pipesworld8        393         ¢225 ¡    559       tion) distances. An earlier attempt along this line of research
  pipesworld11          -           -       724       (i.e., to derive constraints from distance) was made by Chen
  pipesworld41        £ -           -       210       and van Beek [van Beek and Chen, 1999] who have used
    rovers27          £¢505 ¡       -        -        hand-coded distance constraints in their CSP formulation for
    rovers28          £¢399 ¡       -        -        planning. Vidal and Geffner also used distance constraints
                                                      in their CPT planner [Vidal and Geffner, 2004].However,
    rovers29          494           -        -
                      ¢   ¡                           these distance constraints require either domain knowledge
                                                      or an expensive reachability analysis that depends on the ini-
Table 6: The solution time in seconds for some largest problem tial states. Comparing to them, londex constraints based on
instances from IPC5. For each domain, we show the three largest DTGs are not only domain-independent, but also much richer
problems that at least one method can solve. ”-” means timeout and stronger to capture constraints across different time steps,
after 1,800 seconds. We highlight in box the better one between as it provides a systematic representation of state-independent
londex+minisat and minisat if there is a difference.  distance constraints.
                                                        A  SAT-based planner falls into the broad category of
(and thus weaker) londex constraints. Therefore, the rela- transformation-based planning [Selman and Kautz, 1992;
tively unsatisfactory performance of SATPLAN04+londex in Kautz et al., 1996; Kautz and Walser, 2000; Wolfman and
the two domains is likely due to this special property of DTGs Weld, 2000; Wah and Chen, 2006; Chen et al., 2006],which
on these two domains.                                 transforms a planning problem into a different formulation
  We also notice that SATPLAN04+londex with Minisat is before solving it. However, no consensus has yet been
extremely efﬁcient on the openstacks, trucks, and rovers do- reached regarding which formulation is the best among all
mains. We are studying the underlying structures of these that have been considered. Furthermore, all transformation-
three domains to further understand the reasons for the supe- based planners used generic constraint solvers to solve en-
rior performance.                                     coded problems. However, by treating constraint solving in a
                                                      black-box manner, intrinsic structural properties of planning
5  Related Work and Discussion                        problems are largely ignored.
The notions of multi-value formulations and domain transi- 6 Conclusions and Future Work
tion graph can be traced back to the work of Jonsson and
Backstrom on planning complexity [Jonsson and Backstrom, We have proposed a new class of mutual exclusion constraints
1998], and even to some earlier work of Backstrom and that are capable of capturing long distance mutual exclusions
Nebel on SAS+ system [Backstrom and Nebel, 1995].The  across multiple steps of a planning problem. We abbreviated
use of such representations can result in more compact en- such long distance mutual exclusions as londex. Londex con-
codings than Boolean-fact representations. Example plan- straints are constructed by the MDF and DTG representations
ners employing these representations include Fast Down- of a propositional planning problem. Londex contains as a
ward [Helmert, 2006] and the IPP planner [Briel et al., 2005]. subset the persistent mutex which includes only constraints
Fast Downward is a best-ﬁrst search planner that utilizes the within a same time step, and provides a much stronger prun-
information from domain transition graph as the heuristic to ing power. We have incorporated londex in SATPLAN04 and
guide the search. IPP is a planner based on integer program- experimentally evaluated the impact of londex to planning
ming.                                                 efﬁciency on a large number of planning domains. Our ex-

                                                 IJCAI07
                                                  1844