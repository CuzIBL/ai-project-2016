          An Extension To Conformant Planning Using Logic Programming

                   A. Ricardo Morales                    Phan Huy Tu     and  Tran Cao Son
                   Texas Tech University                    New Mexico State University
              Computer Science Department                 Department of Computer Science
                    ricardo@cs.ttu.edu                       {tphan,tson}@cs.nmsu.edu


                    Abstract                          can operate on planning problems with a more complex de-
                                                      scription of the initial state of the domain; and (b) extending
    In this paper we extend the logic programming     the completeness result in [Son and Tu, 2006] to action theo-
    based conformant planner described in [Son et al., ries with static causal laws.
    2005a] to allow it to work on planning problems     This paper is organized as follows. In the next section, we
    with more complex descriptions of the initial states. review the basics of the action description language AL from
    We also compare the extended planner with other   [Baral and Gelfond, 2000] and the deﬁnition of an approxi-
    concurrent conformant planners.                   mation from [Son et al., 2005a]. In Section 3, we describe
                                                      an extended logic programming based conformant planner
                                                      called CPASPm. In Section 4 we state the soundness of the
1  Introduction                                       implementation and provide a sufﬁcient condition on action
Previous work [Gelfond and Morales, 2004; Son et al., theories for which the planner is complete. Finally, in Section
2005b; 2005a; Tu et al., 2006] have explored the usefulness 5, we compare the performance of CPASPm with some other
of approximations of AL actions theories to conformant plan- concurrent conformant planners.
ning. Among them, [Son et al., 2005a; Tu et al., 2006] de-
ﬁne different approximations in terms of logic programs and 2 Background
use these approximations to develop conformant planners in 2.1 AL Action Theories and Transition Diagrams
the logic programming paradigm. The choice of logic pro-
                                                      Dynamic systems can be modeled by transition diagrams
gramming in the implementation of planners in general and
                                                      whose nodes correspond to possible states of the domain and
conformant planners in particular offers several advantages.
                                                      whose arcs correspond to actions that take the domain from
First, the correctness of the planner can be formally proved.
                                                      one state to another. We limit our attention to transition dia-
Second, logic programming allows us to deal with domains
                                                      grams that can be deﬁned by AL action theories.
with static causal laws (also called constraints). And ﬁnally,
                                                        The signature Σ of an AL action theory consists of two
concurrent planning and domain control knowledge can be
                                                      disjoints sets of symbols: a set F of ﬂuents and a set A of el-
implemented in the planner without any difﬁculty.
                                                      ementary actions. An action is a non-empty set of elementary
               [                                 ]
  The planners in Son et al., 2005a; 2005b; Tu et al., 2006 , actions. A ﬂuent literal (or literal for short) is either a ﬂuent
however, suffer from two main drawbacks: (i) they work
                                                      F or its negation ¬F .AnAL action theory is a collection of
only on planning problems where the initial situation can be statements of the forms:
characterized by a single set of ﬂuent literals; and (ii)they
are in general incomplete, i.e., they might not be able to                e causes l if p             (1)
solve some problems which are solvable by other planners.                    l if p                   (2)
Since these planners are based on an approximation theory,
                                                                        impossible a if p             (3)
the latter problem is inevitable. It remained unclear, how-
ever, whether or not these planners can be extended to deal where e is an elementary action, a is an action, and p is a set
with other types of conformant planning problems, e.g. plan- of ﬂuent literals from the signature Σ. Statement (1), called
ning problems where the set of possible initial states is given a dynamic causal law, says that, if e is executed in a state
by a disjunction. Furthermore, it is important to character- satisfying p then l will hold in any resulting state. Statement
ize conditions for which they are complete. An interesting (2), called a static causal law, says that any state satisfying
work on this issue has recently been studied in [Son and Tu, p must satisfy l. Statement (3) is an impossibility condition,
2006]. Nevertheless, the proposed completeness condition is which says that action a cannot be performed in any state
restricted to action theories without static causal laws. satisfying p. Given an action theory D, a set of literals s is
  In this paper we address these limitations by (a) expanding closed under a static causal law (2) if l ∈ s whenever p ⊆ s.
the logic programming implementation of [Son et al., 2005a] For a set of literals s,byCn(s), we denote the smallest set
to build a new conformant planner, called CPASPm,which of literals that includes s and is closed under the set of static

                                                IJCAI-07
                                                  1991causal laws of D.Astate σ is a complete and consistent sets Deﬁnition 2 (Approximation [Son et al., 2005a]) T (D) is
of literals closed under the set of static causal laws of D.An an approximation of D if:
                                      D                             
action b is said to be prohibited in state σ if contains an 1. Nodes of (D) are partial states of (D).
                             ⊆         ⊆                          T                     T
impossibility condition (3) s.t. p σ and a b.Foran               ∈  (D)               ∈     ( )
action a and a state σ, E(a, σ) stands for the set of all literals 2. If s, a, s T then for every σ comp s ,
l s.t. D contains a law (1) with p ⊆ σ and e ∈ a.Elements  (a) a is executable in σ,and
of E(a, σ) are called direct effects of the execution of a in (b) s ⊆ σ for every σ s.t. σ, a, σ∈T (D).
σ. An action theory D describes a transition diagram T (D).
             (D)           D                            It is not difﬁcult to see that the following observation holds.
The nodes of T   are states of and arcs are labeled with                                   
actions. The transitions of T (D) are deﬁned as follows. Observation 1 ([Son et al., 2005a]) Let T (D) be an ap-
                                                      proximation of D. Then, for every chain of events α,if
Deﬁnition 1 ([McCain and Turner, 1997]) For an action a           
                                                    s, α, s ∈T (D) then for every σ ∈ comp(s),(a)α is
and two states σ and σ , a transition σ, a, σ ∈T (D) iff a is                                   
                                                      executable in σ; and (b) s ⊆ σ for every σ s.t. σ, α, σ ∈
not prohibited in σ and
                                                      T (D).
               =   ( (    ) ∪ ( ∩ ))
             σ   Cn  E a, σ    σ  σ             (4)   This observation states that reasoning using approximations
Given a state σ and an action a,suchσ is often referred to as is sound wrt reasoning using T (D).
a possible successor state of σ as the result of the execution One application of reasoning with partial states is confor-
of a.Whenσ and a are clear from the context, we simply say mant planning. In a conformant planning problem, the task
that σ is a possible successor state.                of the agent is to ﬁnd a chain of events that achieves some
  An action theory D is consistent if for any state σ and ac- given goal provided it may not have complete knowledge of
tion a which is not prohibited in σ there is at least one possible the initial state of the domain. More speciﬁcally,
successor state. In this paper, we consider consistent action Deﬁnition 3 A conformant planning problem P is a tuple
theories only.                                        D, Γ,G where Γ is a set of possible initial states and G
  We now  introduce some terminology used to describe is a set of literals.
properties of a transition diagram (D). By convention,
                              T                                                   =            
we use letters a and σ (possibly indexed) to denote actions Deﬁnition 4 A chain of events α a0,...,an−1 is a solu-
and states respectively. A model M of a chain of events tion or a conformant plan of a conformant planning problem
                                                      P =  D, Γ,G if, for every σ ∈ Γ, α is executable in σ and
α =  a0,...,an−1 is an alternate sequence of states and
                                                      for every model M of α with initial state σ, M |= G.
actions σ0,a0,σ1,...,an−1,σn s.t. σi,ai,σi+1∈T (D)
for 0 ≤ i<n. σ0 (resp. σn)isreferredtoastheinitial state The following relationship between conformant plans and
(resp. ﬁnal state)ofM. We say that M entails a set of literals paths of an approximation of D follows from Observation 1.
s, written as M |= s,ifs ⊆ σ . Furthermore, we sometimes                  
                         n                            Observation 2 Let T (D)  be  an  approximation.  If
write σ0,α,σ ∈T (D) to denote that there is a model of α                     
            n                                         s, α, s ∈T (D) and G ⊆  s then α is a solution of the
whose initial state and ﬁnal state are σ0 and σn, respectively.
                                                     conformant planning problem D,comp(s),G.
  An action a is executable in a state σ if there is a state σ
         
s.t. σ, a, σ ∈T (D). A chain of events α = a0,...,an−1 Observation 2 shows us a way to solve a conformant plan-
is executable in σ if either (i) n =0(i.e., α is an empty chain ning problem D, Γ,G: look for a path in an approximation
                                               
of events), or (ii) a0 is executable in σ and for every σ s.t. that leads to a goal partial state (i.e. a partial state satisfy-
                                          
σ, a, σ ∈T (D), a1,...,an−1 is executable in σ .  ing the goal). This approach is adopted in [Son et al., 2005b;
                                                      2005a],wherethesetΓ   of possible initial states of a con-
2.2  Approximations of  T (D) and Conformant          formant planning problem is modeled as the completions of
     Planning Problem                                 a single partial state s.Itisshownin[Son et al., 2005b;
In many of real world applications, an agent may not have 2005a] that many conformant planning problems in the lit-
complete knowledge of the current state of the domain. Un- erature can be successfully solved this way. However, the
der such circumstances it is not possible for the agent to di- following is an example of a conformant planning problem
rectly reason about the effects of actions using the transition that cannot be solved by this method.
diagram of the domain. Our approach to reasoning with in- Example 1 (Turkey and two guns) There are two guns and
complete information is based on using approximations of ac- a turkey. Initially only one of the guns is loaded and we do
tion theories [Son and Baral, 2001; Son et al., 2005b; 2005a; not know which one it is. The objective is to kill the turkey by
Tu et al., 2006]. In this section, we review the deﬁnition of shooting it. Let g1 and g2 be names for the guns and X be a
approximation from [Son et al., 2005a] and discuss how an variable for the guns. This planning problem can be modeled
approximation can be used to ﬁnd a solution of a conformant as P1 = D1, Γ1,G1 where
planning problem.
     D                                                                                            
  Let   be an action theory. A set s of literals is a partial          (  )                   (  )
                                                          D  =    shoot X  causes dead if loaded X
state if it is a subset of some state and it is closed under the set 1 (  )       ¬      (  )
of static causal laws of D. For a partial state s,acompletion     shoot X  causes  loaded X
of s is a state σ s.t. s ⊆ σ and by comp(s) we denote the                                        
                                                                   {¬           (  ) ¬      (  )}
set of all completions of s. For a set of partial states S by Γ =   dead, loaded g1 , loaded g2 ,
     ( )                         ( )                        1      {¬     ¬       ( )       (  )}
comp S  we denote the set s∈S comp s .                               dead,  loaded g1 ,loaded g2

                                                IJCAI-07
                                                  1992                                                      in particular, the planner can work on domains with disjunc-
                   G1 =  {dead}                       tive information in the initial state. In order to achieve this,
                                                      a distinct label is attached to every partial state considered.
It is easy  to  see that  by  Deﬁnition 4  α1    =             ˜(D)
{     ( )} {     (  )}             P                Atoms of π    are formed by the following (sorted) predi-
  shoot g1 , shoot g2   is a solution of 1.           cate symbols:
  Following the approach in [Son et al., 2005b],how-
                                                       • h(l, t, k) is true if literal l holds at time step t in a path
ever, the conformant planning is modeled as P1   =
                                                        starting from the initial partial state labeled with k;
D1, Γ1, {dead} where Γ1 = comp({¬dead}). Clearly
                                                       •  (   )
P1 does not have a conformant plan because the state      o e, t is true if e occurs at time step t;
σ   =   {¬dead, ¬loaded(g1), ¬loaded(g2)} belongs to    • dc(l, t, k) is true if literal l is a direct effect of an action
comp({¬dead}) and there exists no path in the transition di- that occurs at (t − 1,k); and
agram T (D) that leads to a goal state from σ.   2
                                                        • ph(l, t, k) is true if literal l possibly holds at time t in a
In order to address this issue, we have extended the deﬁni- path with the initial partial state labeled with k.
tion of a conformant plan from [Son et al., 2005a], and, with The program also contains auxiliary predicates: time,
a more careful examination of approximations, conclude the fluent, action,andlabel that are used for enumerating con-
following observation, which can be viewed as a generaliza- stants of sorts time step, ﬂuent, elementary action and label
tion of Observation 2.                                respectively. In our presentation, we also use some short-
                                                                                 (  )={    (  ):    ∈  }
Observation 3 Let P = D, Γ,G be a planning problem, hands: if a is an action then o a, t o e, t e   a .
 (D)                                                 If p is a set of literals, and F is either h, dc,orph,then
T     be an approximation, and α be a chain of events. Let F( )={F(       ):    ∈   }         F(     )=
S be a set of partial states s.t. comp(S)=Γ. If for every p, t, k     l, t, k l    p  and not   p, t, k
  ∈                                    ∈   (D)   { not F(l, t, k):l ∈ p}. For a literal l,byl we denote its
s   S, there exists a partial state s s.t. s, α, s T                 ¯
and G ⊆ s then α is a solution of P.                 complement, i.e. F = ¬F and ¬F = F . For a set of literal
                                                      p, p = {l : l ∈ p}. Finally, L, T and K (possibly with in-
This observation extends the applicability of approximations dices) are variables for literals, time steps, and labels respec-
to conformant planning problems with a more complex de- tively. For convenience, we often write π˜(D,n) to denote the
scription of the initial state of the domain. In particular, in- ˜(D)                    0
                                           Γ          restriction of π to time steps between and n.Thesetof
stead of viewing the set of possible initial states as (the rules2 of π˜(D) is listed below.
                                            [
completions of) a single initial partial state s as in Son et                           D
al., 2005a], we view it as a set of initial partial states S. 1. For each dynamic causal law (1) in ,therules
Then, to ﬁnd a conformant plan within an approximation, we        h(l, T+1,K)  ←   o(e, T ),h(p, T, K) (5)
look for a chain of events α s.t. every possible path of α      dc(l, T +1,K)  ←   o(e, T ),h(p, T, K) (6)
starting from a partial state in S always leads to a goal par-     ˜(D)                               +1
tial state. As an example, the set of possible initial states belong to π . The ﬁrst rule states that l holds at T
of the domain in Example 1 can be viewed as the set S1    on path K if e occurs at T and precondition p holds at T
                1 {¬           ( ) ¬      (  )}           on path K. The second rule states that l is a direct effect
of two partial states dead, loaded g1 , loaded g2 and              +1
{¬dead, ¬loaded(g1),loaded(g2)}, i.e., S1 =Γ1. It is easy of e at (T   ,K)ife occurs at T and precondition p
to verify that, within the approximation in [Son et al., 2005a], holds at (T,K).
the solution α1 = shoot(g1), shoot(g2) can be found by  Since the state of the domain at time step T might be
                                                                             ˜(D)
this method because every possible path of α1 in the approx- incomplete, we add to π the rule
imation that starts from a partial state in S1 always leads to a ph(l, T +1,K) ← o(e, T ),noth(p, T, K) (7)
goal partial state.
                                                          which says that l possibly holds at (T +1,K) if e occurs
                                                          at T and the precondition p possibly holds at (T,K).
3  A Logic Programming Implementation                     Furthermore, we add to π˜(D) the following rule
We now describe an answer set planning [Subrahmanian and      ph(L, T +1,K)   ←    not h(L, T, K),    (8)
Zaniolo, 1995] based method for constructing an approxima-
                                                                                         (    +1    )
tion to action theories of AL. In our method, we deﬁne a                           not dc L, T   ,K .
                ˜
transition diagram T (D) in terms of a logic program π˜(D) which says that a literal L possibly holds at T +1if it
called the cautious encoding of D.Theworkin[Son et al.,   possibly holds at T and its negation is not a direct effect
2005a] uses a similar construction but the resulting logic pro- of the action that occurs at T .
gram is only able to deal with a single initial partial state. 2. For each static causal law (2) in D, π˜(D) contains:
The work in [Tu et al., 2006] does provide a method for con-
                                                                       (     )  ←     (      )
structing conditional plans with several branches but operates        h l, T, K     h p, T, K         (9)
from a single initial partial state as well. Our work in this pa-    ph(l, T, K) ←  ph(p, T, K)      (10)
per can be viewed as a combination of the ideas presented in These rules state that if p holds (or possibly holds) at
these works in order to develop a conformant planner which (T,K) then so does l.
can deal with a more complex description of the initial state;
                                                         2In each rule, predicates deﬁning sorts of variables are omitted
  1Note that by deﬁnition a state is also a partial state. for brevity.

                                                IJCAI-07
                                                  1993 3. For each impossibility condition (3) in D,weaddto   3. Rules to generate actions: To generate action occur-
    π˜(D) the following rule:                             rences, we add to π˜(P,n) the following choice rule [Si-
                                                                         ] 4
                ←   o(a, T ),noth(p, T, K)     (11)       mons et al., 2002 :
    This rule states that a cannot occur at time step T if pre-   1{o(E,T):action(E)}←T<n             (17)
    condition p possibly holds at (T,K) for some path K.
                                                                        π˜(P,n)
 4. The inertial law is encoded as follows:           4   Properties of
       h(L, T, K)  ←    not ph(L, T, K),T
=0.  (12)   In this section, we investigate the soundness and complete-
                                                      ness of π˜(P,n).
    which says that L holds at time step T>0 if its negation
    cannot possibly hold at T .                       4.1  Soundness
 5. Auxiliary rule: π˜(D) also contains the following rule: Using Theorem 1 and Observation 3, we can prove the cor-
                                                                         ˜(P   )
                     ←   h(F, T, K),h(¬F, T, K) (13)  rectness of the planner π ,n .
          literal(F ) ←  fluent(F )            (14)   Theorem 2  Let A be an answer set of π˜(P,n).For0 ≤ i<
                                                      n let a = {e : o(e, i) ∈ A}. Then, α = a0, .., a −1 is a
        literal(¬F ) ←   fluent(F )            (15)         i                                    n
                                                      solution of P.                                   2
    The ﬁrst rule, as a constraint, states that h(f,t,k) and
    h(¬f,t,k) cannot hold at the same time 3 . The last two 4.2 A Sufﬁcient Condition for the Completeness
    rules are used to deﬁne literals.                 Although Theorem 2 tells us that π˜(P,n) is sound, the pro-
For an action a and a partial state s,letΠ(D,a,s)=    gram is not complete in the sense that there are planning prob-
π˜(D, 1) ∪ h(s, 0, 0) ∪ o(a, 0). Note that Π(a, s) is a stratiﬁed lems that have solutions for which π˜(P) returns no answer
program, so if it is consistent, then it has a unique answer set set. This is illustrated in the following example.
[Gelfond and Lifschitz, 1988]. We deﬁne an approximation Example 2 Consider the action description
T˜(D) based on Π(D,a,s) as follows.                                      
                                                                           a causes g if f
Deﬁnition 5 Let s be a partial state and a be an action. Let       D2 =
                                          ˜                                            ¬
T˜(D) be a transition diagram s.t. s, a, s ∈T (D) iff                    a causes g if f
                         
Π(D,a,s) is consistent and s = {l : h(l, 1, 0) ∈ A} where                  P  =  D  Γ  { }      Γ
                  Π(D     )                           and the planning problem 2   2, 2, g  where  2 is the
A is the answer set of ,a,s .                         set of all possible states. Obviously a is a solution of this
Theorem 1 If D is consistent then T˜(D) is an approximation problem because either f or ¬f is true in any state belonging
of D.                                            2    to Γ2 and thus either one of the above dynamic causal laws
The proof of this theorem is similar to the proofs of the sound- would take effect when a is executed.
                                     AL                 Let S1 = {∅}. Then, it is easy to see that comp(S1)=Γ2.
ness of the logic programming encoding of action theo-             ˜(P   1)               ˜(P  1)
ries in [Son et al., 2006; Turner, 1997].             If we construct π 2, based on S1 then π 2,  is incon-
  Let P =  D, Γ,G be a conformant planning problem. sistent, which means that no conformant plan of length one
                                                      can be found by π˜(P2, 1). In fact, it can be shown that for ev-
Since T˜(D) is an approximation of D, we can use the pro-
                                                      ery n, π˜(P2,n) is inconsistent. Thus, π˜(P2,n) cannot solve
gram π˜(D) to ﬁnd solutions of P. In the remaining part of
                                                      the planning problem P2.However,ifπ˜(P2, 1) is constructed
this section, we describe a logic program π˜(P,n),whereP
                                                      based on the set of initial partial states S2 = {{f}, {¬f}}
is the input planning problem and n is the length of a solution
                                                      then π˜(P2, 1) would return an answer set corresponding to
we wish to ﬁnd.                                       the solution a.                                2
  Let S =   {s0,s1, .., sm} be a set of partial states s.t.
Γ=comp(S)   (hereafter we refer to such S as a set of initial The above example shows that choosing a set of initial par-
partial states of P). Let the subindex of each element of S tial states S plays an important role in the completeness of
act as its label. We construct the program π˜(P,n) based on π˜(P,n). To characterize the situation in Example 2, we de-
S as follows. π˜(P,n) contains the rules of π˜(D,n) and the ﬁne a notion of dependencies among literals and between lit-
following rules.                                      erals and actions (adapted from [Son and Tu, 2006]).
                                              ∈
 1. Rules encoding the initial state: For every si S, Deﬁnition 6 A literal l depends on a literal g, written as lg,
    ˜(P   )
    π   ,n contains the rule                          whenever one of the following conditions holds.
                      (  0  )
                     h si, ,i .                (16)     1. l = g.
 2. Rules encoding the goal: To guarantee that the goal 2. D contains a law [a causes l if p] s.t. g ∈ p.
    is satisﬁed in the ﬁnal state of every path, we add to
                                                        3. D contains a law [l if p] s.t. g ∈ p.
    π˜(P,n) the following rules:
                                                        4. There exists a literal h s.t. lhand hg.
               {←  not h(l, n, K):l ∈ G}.
                                                        5. lg.
  3Some adjustment to this syntax would be needed if one wants
to use an existing answer set solvers. For instance, we may need to 4If we wish to ﬁnd a sequential plan, the only thing needed to do
replace ¬f with, say, neg(f).                         is to change the left side of the rule to 1{o(E,T):action(E)}1.

                                                IJCAI-07
                                                  1994                                                                               K
                                                               No. Guns PL  DLV    C-PLAN CPASPm
Deﬁnition 7 An action b depends on a literal l, written as bl,   2     2    0.03   0.036  0.129
if either                                                         4     3    0.11   0.044  0.233
                                                                  6     3    0.72   0.186  0.296
 1. D contains an impossibility condition (3) s.t. a ⊆ b and
    ¯                                                             8     3   11.58   2.172  0.388
    l ∈ ψ,or                                                     10     3   1039.96 50.201 0.503
                                                                 20     3     -      -     1.487
 2. there exists a literal g s.t. bgand gl.                    50     3     -      -     8.208
                                                                 100    3     -      -     32.623
For a set of literals w, we write lwto denote that lgfor
some g ∈ w,andl  w to denote that there exists no g ∈ w
s.t. lg.                                                       Table 1: Conformant Turkey domain
  Observe that according to Deﬁnition 6, for the domain D2
inExample2,wehavethatgfand     g¬f. This implies                                                     P
                   Γ                                  CPASPm  takes as input a logic program representation of
that for each state σ in 2, we can ﬁnd some literal l such that and produces concurrent conformant plans. We have com-
gl. In this case, we say that Γ2 is not reducible to ∅ wrt {g}.
                                                      pared CPASPm with other conformant planning systems. Due
The precise deﬁnition of reducibility is given below. to space limit we only consider planners capable of generat-
Deﬁnition 8 Let Δ be a set of states, s be a partial state, and ing concurrent plans. As aforementioned, only a small mod-
w be a set of literals. We say that Δ is reducible to s wrt w, iﬁcation to the logic program can make the planner act as a
denoted by Δ w s if                                  sequential planner.
                              Δ                         We compare CPASPm    with the concurrent conformant
 1. s is a subset of every state σ in ,                          K
                                                      planners DLV [Eiter et al., 2003] and C-PLAN [Castellini et
 2. for each l ∈ w, Δ contains a state σ s.t. l  (σ \ s), and
                                                      al., 2003]. C-PLAN is a SAT-based conformant planner where
 3. for each action a, Δ contains a state s s.t. a  (σ \ s). a planning problem is translated into a satisﬁability problem
We say that a set of states Δ is reducible to a set of par- and satisfying assignments of variables correspond to solu-
                                                      tions of the original planning problem. DLVK is somewhat
tial states S wrt a set of literals w, written as Δ w S
iff Δ=comp(S)    and comp(s)     s for every s ∈ S.  similar to CPASPm as both run on top of an answer set solver.
                               w                                            DLVK
Back to Example 2, according to this deﬁnition, we do not However, unlike CPASPm does not use approximations.
    Γ          =  {∅}               Γ          =    Its algorithm has two phases: looking for candidate plans ﬁrst
have  2   {g} S1       but we do have 2   {g} S2
{{f}, {¬f}}.                                          and then checking if they are conformant.
  We deﬁne a class of action theories as follows.       We prepared a test suite of problems which involves both
                                                      concurrency and complex initial situations. Some of this
Deﬁnition 9 A static causal law is simple if its precondition
                                       D              problems are simple modiﬁcations to conformant bench-
contains at most one literal. An action theory is simple if marks in the literature. The test suite consists of the problems
each of its static causal laws is simple.             Conformant Turkey and Lost Cleaner. Conformant Turkey is
We notice that if D is simple then Δ w S implies that rea- a modiﬁcation of the classic Yale shooting problem. In our
soning with T˜(D) from the set of partial states S would agree problem, there are n guns, but only one of which is loaded.
with reasoning about w with T (D) from the set of possible Guns can be shot concurrently, with the exception of gun #1
initial states Δ on the set of literals w. Base on this observa- and #2. The objective is to kill the turkey. Lost Cleaner is a
tion, we have the following result about the completeness of modiﬁcation of the ring [Cimatti et al., 2004]. The agent is
π˜(P,n).                                              in one of n rooms arranged in a ring fashion. Each room has
                                                      m  objects that must be cleaned by the agent. The agent can
Theorem 3 Let α =  a1,...,a −1 be a solution of P =
                           n                          move to the next room in a clockwise or counter-clockwise
D, Γ,G.IfD  is simple and π˜(P,n) is constructed based
                                                      fashion and at a time it can clean objects in a room concur-
on a set of initial partial states S s.t. Γ  S then π˜(P,n)
                                   G                  rently. Initially, the agent does not know its initial location
is consistent and has an answer set A s.t. a = {e : o(e, i) ∈
                                    i                 nor the current status (cleaned or dirty) of the objects.
A}.                                              2
                                                        Experiments were conducted in a 1.4GHz Pentium 4 ma-
                                      P
We can verify that for the planning problem 2 in Example chine running Linux, and each planner was given 30 minutes
               ˜(P   )          =  {∅}
2, if we construct π ,n based on S1   then we would   to complete each instance of each problem. The results are
               
miss the solution a . However, if we construct it based on the shown in Tables 1 and 2. In each table, times are in seconds,
                    = {{ } {¬  }}     ˜(P  1)
set of partial states S2 f ,  f   then π  ,  would    and PL  is the number of steps of a shortest solution of the
                                           
return an answer set corresponding to the solution a . corresponding problem.
                                                        As we can see from Table 1, CPASPm outperforms both
                                                         K
5  Experiments                                        DLV  and C-PLAN in the Conformant Turkey domain. Solu-
Theorem 2 suggests a simple algorithm for ﬁnding minimal tions for these domain all involve 3 steps, with one step con-
plans (wrt the number of steps) of a planning problem P:se- sisting of ﬁring multiple guns concurrently. In this domain,
quentially run program π˜(P,n) with n =1, 2,..., until it exploiting concurrency is key to obtaining a short plan.
returns an answer set (we assume that P does not have a triv- In the Lost Cleaner domain, shown in Table 2, only
ial solution ). We have implemented this algorithm in a CPASPm is able to solve all problem instances within the time
planning system called CPASPm and use CMODELS [Lier-  limit. In this domain, the length of a solution ranges from 3
ler and Maratea, 2004] as the underlying answer set solver. to 19 steps and it is determined by the number of rooms in

                                                IJCAI-07
                                                  1995