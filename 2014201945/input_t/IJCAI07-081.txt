 Automated Benchmark Model Generators for Model-Based Diagnostic Inference

                                   Gregory Provan∗    and Jun Wang
                                   Department of Computer Science,
                                 University College Cork, Cork, Ireland
                                        g.provan,jw8@cs.ucc.ie


                    Abstract                          generator can be applied to any domain, and can generate
                                                      models that accurately capture the properties of complex sys-
    The task of model-based diagnosis is NP-complete, tems, given as input a library of domain-dependent compo-
    but it is not known whether it is computationally nent models. In particular, we propose a real-world graph
    difﬁcult for the “average” real-world system. There model, that, given a model with n components, uses a small
    has been no systematic study of the complexity    set of domain-dependent parameters to specify the complex-
    of diagnosing real-world problems, and few good   ity of diagnostic inference for a device. We compare the
    benchmarks exist to test this. Real-world-graphs, predictions made by our model to results obtained from IS-
    a mathematical framework that has been proposed   CAS circuit benchmark models [Harlow, 2000]. By empir-
    as a model for complex systems, have empirically  ically comparing generated models with benchmark models
    been shown to capture several topological proper- we show the model-generation parameters best suited for IS-
    ties of real-world systems. We describe the ad-   CAS circuits. This approach circumvents the difﬁculty of
    equacy with which a real-world-graph can char-    assembling a large suite of test problems (benchmark mod-
    acterise the complexity of model-based diagnos-   els), given that most large diagnosis models tend to be pro-
    tic inference on real-world systems. We empiri-   prietary. It also enables us to control model parameters (and
    cally compare the inference complexity of diagnos- hence analyse speciﬁc parameters).
    ing models automatically generated using the real-  Second, we use this framework to show empirically that di-
    world-graph framework with comparable models      agnosing a suite of benchmark circuit models is computation-
    from well-known ISCAS circuit benchmarks. We      ally hard. This provides the ﬁrst clear experimental demon-
    identify parameters necessary for the real-world- stration of this computational intractability for a well-known
    graph framework to generate benchmark diagnosis   benchmark suite.
    circuit models with realistic properties.           We organize the remainder of the document as follows.
                                                      Section 2 examines the topological structure that all real-
1  Diagnostic Inference for Complex Systems           world complex systems possess. Section 3 summarises the
                                                      model-based diagnosis task that we solve. Section 4 describes
Model-based diagnosis (MBD) focuses on  determining   the process we adopt for generating diagnostic models using
whether an assignment of failure status to a set of mode- domain parameters, and Section 5 describes the optimisation
variables is consistent with a system description and an obser- technique for auto-generation. Section 6 presents the experi-
vation (e.g., of sensor values). This problem is known to be mental results, and Section 7 summarises our contributions.
NP-complete [Bylander et al., 1991; Friedrich et al., 1990].
However, this is a worst-case result, and some NP-complete 2 Topological Models for Complex Systems
problems, such as graph colouring [Cheeseman et al., 1991],
are known to be tractable for particular problem classes. Several recent theoretical studies and extensive data analyses
  We focus on the average-case complexity of MBD algo- have shown that a variety of complex systems, including bio-
rithms on real-world problem instances. At present, it is not logical [Newman, 2003], social [Newman, 2003], and techno-
known whether MBD is computationally difﬁcult for the “av- logical [Braha and Bar-Yam, 2004; i Cancho et al., 2001] sys-
erage” system. There has been no systematic study of the tems, share a common underlying structure, which is charac-
complexity of diagnosing real-world problems, and few good terised by a real-world graph. A real-world graph (RWG) is a
benchmarks exist to test such a conjecture.           complex network in which (a) the nodes form several loosely
  This article makes two main contributions. First, it de- connected clusters, (b) every node can be reached from every
scribes an algorithm for automatically generating diagnos- other by a small number of hops or steps, and (c) the degree
                                                                P  k
tic benchmark models that can be used to analyse the per- distribution ( ), which is the probability of ﬁnding a node
                                                          k
formance of diagnostic inference algorithms. This model with links, follows a power-law [Newman, 2003].
                                                        Several random-graph models have been proposed to cap-
  ∗Both authors are supported by SFI grant 04/IN3/I524. ture the real-world graph properties, such as the Watts-

                                                IJCAI-07
                                                   513Strogatz (or small-world graph) and the Barabasi-Albert   denoted SD  =(S,  B), where S denotes the system
models [Newman, 2003]. In this article we adopt the small- structure (connections between the components), and B
world graph (SWG) framework, whose key properties are     denotes the behaviour of the collection of components.2
                                           G  V,E
summarised below. We assume that we have a graph ( )    • OBS, the set of observations, denotes possible sensor
with a set V of vertices and set E of edges. We assume that
G                                                         measurements, which may be control inputs, outputs or
  is connected, i.e., there is a sequence of distinct edges (a intermediate variable-values.
path P ) joining any two nodes in G. A graph is directed, i.e.,
called a digraph, if all its edges are directed. The degree of a We adopt a propositional logic framework for our system
vertex is the number of edges incident on that vertex. behaviour models B. Component i has associated mode-
  The SWG   framework addresses two graph parameters: variable Ci; Ci can be functioning normally ([Ci = OK]),
mean distance L and clustering coefﬁcient Θ. The mean dis- or can take on a ﬁnite set of abnormal behaviours.
tance L is the average of all distances, i.e., shortest paths con- MBD inference assumes initially that all components are
necting two vertices, in G. Graph clustering characterises the functioning normally: [Ci = OK],i=1, ..., m. Diag-
degree of cliquishness of a typical neighbourhood (a node’s nosis is necessary when SD ∪ OBS ∪{[Ci = OK]|Ci ∈
immediately connected neighbours). The clustering coefﬁ- COMPS} is proved to be inconsistent. Hypothesizing that
                                                                i                            C    OK
cient Θi for a vertex vi is the proportion of links between the component is faulty means switching from [ i = ] to
vertices within its neighbourhood divided by the number of [Ci = OK]. Given some minimality criterion ω, a (minimal)
                                                      diagnosis is a (ω-minimal) subset C ⊆ COMPS such that:
links that could possibly exist between them. The graph clus-                                  
                                                      SD  ∪ OBS  ∪{[Ci = OK]|Ci  ∈ COMPS    \ C }∪{[Ci =
tering coefﬁcient is the average of the clustering coefﬁcients   
for each vertex [Newman, 2003].                       OK]|Ci  ∈ C } is consistent.
  Several empirical studies, summarised in, e.g., [Newman, In this article, we adopt a multi-valued propositional logic
2003], have shown that the SWG framework, with particu- using standard connectives (¬, ∨, ∧, ⇒). We denote variable
lar parameter settings, provides a good model for complex A taking on value α using [A = α]. An example equation for
systems. These parameter settings are described in terms of a buffer X is [In = t] ∧ [X = OK] ⇒ [Out = t].
random graph parameters as follows.
Deﬁnition 1 (SWG). A small-world-graph (SWG) is a graph 4 Benchmark Diagnostic Model Generation
G V,E
 (    ) that has small-world properties measurable in terms This section describes our algorithm for generating bench-
                  L
of its mean distance and clustering coefﬁcient Θ.Given mark diagnostic models. Figure 1 depicts the process of au-
              G n, p 1                 L
a random graph (   )  with mean distance r, clustering tomatically generating diagnostic models and using them for
coefﬁcient Θr, and the same number of nodes and edges as evaluating diagnosis inference algorithms. Our approach is
G V,E                         L  L       
 (    ), a SWG has the properties  r and Θ   Θr.      applicable to any domain, since (a) the underlying topolog-
  i Cancho et al. [2001] have applied real-world graphs to ical models can be tailored to virtually any complex system
electronic circuits [i Cancho et al., 2001], mapping the ver- [Newman, 2003], and (b) functionality is incorporated into
tices of the graph G to electronic components (gates, resis- the system model using a component-library, where compo-
tors, capacitors, diodes, etc.), and the edges of G to the wires nents can be developed for any domain in which the system
between the components. The circuits studied comprise both models are decomposable.
analog and ISCAS89/ITC89 benchmark circuits, and all dis- The topology-generation method we adopt was originally
play Θ and L parameters that are typical of SWG topologies. developed based on the theory of random graphs–see [New-
In an electronic circuit, a cluster of components corresponds man, 2003] for background in this area. However, this
to components that together serve a particular task, e.g., a method focuses solely on the system structure (as captured
sub-system; the relatively small number of connections be- by the graph), and ignores the system functionality. We ex-
tween clusters corresponds to the fact that sub-systems are tend this approach by adopting the system structure based on
typically loosely-coupled. In addition, the short paths be- the random-graph generators, and then encoding system func-
tween any pair of components (nodes) in a circuit are the nat- tionality using a component library.
ural result of wire-length minimisation typical of circuits. Model Generation Algorithm: We generate diagnostic
                                                      (benchmark) models in a three-step process.
3  Model-Based Diagnosis                                1. generate the (topology) graph G underlying each model;
We can characterise a MBD   problem using the triple    2. assign components to each node in G for system SD,to
COMPS,SD,OBS      [Reiter, 1987], where:                create an MBD-graph G;
  • COMPS     =   {C1, ..., Cm} describes the operating 3. generate the system description (and fault probabilities).
    modes of the set of m components into which the system Every domain requires domain-speciﬁc parameters for
    is decomposed.                                    generating realistic models. All real-world graph models re-
  • SD, or system description, describes the function of the quire speciﬁc parameters to be able to match particular prop-
    system. This model speciﬁes two types of knowledge, erties of a given domain [Costa et al., 2005]. For example,
                                                      the SWG model requires speciﬁc parameters for initial graph
  1The Erdos-Renyi G(n, p) model consists of n nodes, each pair
of which is randomly connected with probability p, and has param- 2S can be deﬁned in several ways, such as through propositional
    (L , Θ )=(ln(n) ,p)                                                         S                G(V,E)
eters r  r    ln(pn) .                                sentences; in this article we deﬁne in terms of a graph .

                                                IJCAI-07
                                                   514                            Inference
     Component              Algorithm
      Library                Library
                                       Inference
                Diagnosis              Algorithm
                 Model       Model
      Model                            Evaluator
                Generator    Suite
     Topology
     Generator
                              Test-
           Model Generator    Case
                              Suite
                                   Model Evaluator

   Figure 1: Automated model generation and analysis.

connectivity k and random connectivity probability p; simi-
larly, extended versions of the Barabasi-Albert model [Costa
et al., 2005] need various parameters to capture properties
such as inter-node distance and the cost of adding links. Anal-
ogous to these approaches, circuit auto-generation methods
use domain-speciﬁc parameters like the Rent parameter ξ, Figure 2: Partial component library for combinatorial digital
e.g., [Verplaetse et al., 2000].                      circuit domain. Each gate also has an associated truth-table
  As an alternative to empirically-derived domain parame- deﬁning the gate’s functionality.
ters that are known a priori, we can frame the generation task
in terms of an optimisation task where we compute the do-
                                                      component X  in the topology graph with a pair (CX ,OX ),
main parameters. The remainder of this section describes this which denotes the mode and output of component X, respec-
auto-generation process based on domain-dependent param- tively. We introduce the mode-variables for each component,
eters. We use an example, and then describe each step of the and deﬁne component behavioural equations in order to diag-
process. Section 5 describes the optimisation approach. nose the fault status of each component.
Example 1. To demonstrate this approach, we study a suite
                                                                              O       O      O
of auto-generated electronic combinational circuits, which                A    A  B    B  D   D
are constructed from simple gates. The inputs to the genera-           I1
tion process consist of: (a) a component library; (b) param- Circuit
                                                            Topology                         O
eters deﬁning the system properties, such as the number n                             O       E
                                                             (a)       I2        C     C  E
of components; and (c) domain-dependent parameters, such
as the well-known engineering parameter for determining in-
put/output variables for a circuit, the Rent parameter ξ [Ver-
                                                                             O        O        OD
plaetse et al., 2000]. As an example, Figure 2 shows several            A     A  B     B  D
                                                                     I
of the gates that we use in our component library, together Components 1 SA0       SA1      invert
                                                          Assigned     SA0: stuck-at-0 SA1: stuck-at-1 Invert: inverse of normal
with the gates’ functionality (in terms of truth-tables).                                     behaviour
                                                             (b)                      OC
                                                                     I2           C       E
  Diagnosis models differ from generic circuit models in that                                    OE
                                                                                            SA1
they explicitly encode failure modes and the functional effect                       SA1
of failure modes. As a consequence, the structure of a di-
agnostic model is slightly different than the structure of the Figure 3: Schematic of simple electronic circuit.
corresponding electronic circuit, since a diagnostic model ex-
plicitly encodes failure modes of components.           The topology graph G and MBD-graph G are as follows.
Example 2. Figure 3(a) shows the schematic of a simple cir- Deﬁnition 2 (Topology graph). A topology graph G(V,E)
cuit with arbitrary components A, B, C, D and E. The circuit for a system COMPS,SD,OBS is a directed graph
has two inputs, I1 and I2, with the output of component i de- G(V,E) corresponding to the system structure S. Hence in
noted by Oi. Figure 3(b) shows the circuit with instantiated G(V,E): (a) the nodes V consist of a collection of nodes
components. Figure 4 shows the process of transforming this corresponding to system components (χ), and system inputs
schematic into a MBD-graph, which is the basis for construct- (η), i.e., V = χ ∪ η; and (b) the edges correspond to connec-
ing a diagnostic model. We ﬁrst translate the schematic into tions between two component-nodes, or between an input-
a topology graph, which makes the graphical topology of the node and a component-node, i.e., E =(χi,χj) ∪ (ηi,χk),
circuit explicit by denoting each component as a node, the for χi,χj,χk ∈ χ, and ηi ∈ η.
inputs as nodes, and the input-component and component- Deﬁnition 3 (MBD-graph). An MBD-graph G(V ,E) is a
                              3
component wires as directed edges. Next we replace each topology graph G(V,E) in which each component node χi ∈
  3This is roughly the graphical framework used for the small- world analyses of electronic systems in [i Cancho et al., 2001].

                                                IJCAI-07
                                                   515V is replaced with a subgraph consisting of the node for the
corresponding component-output Oi, the node corresponding
to component-mode Ci, and the directed edge (Ci,Oi)—see
Figure 4. Hence in G(V ,E): (a) the nodes V  consist of
a collection of nodes corresponding to system component-                             0<p<
                                                                                         1          p
outputs (O), mode-variables (COMPS), and system inputs                                               =1
                                                        p=0          Increasing randomness
(η), i.e., V = O ∪ COMPS  ∪ η; and (b) the edges corre-
spond to connections between two component-output-nodes,   Large L          Small L            Small L
                                                                Θ               Θ                  Θ
or between an input-node and a component-node, i.e., E =   Large           Large               Small
(Oi,Oj) ∪ (ηi,Ok) ∪ (Ci,Oi)), for Oi,Oj,Ok ∈ O, ηi ∈ η,
and Ci ∈ COMPS.                                       Figure 5: Generating a small-world graph from a regular ring
                                                      lattice with rewiring probability p.

     I
     1                A                I1
                                  C
                                    A                 i inputs and o outputs, we assign a component, denoted
    A                                      I
         I2                            O   2          SD(i, o, τ, B,w) where τ denotes the type (e.g., AND-gate,
                                C       A
                                 B                             B                                    w
                                               CC     OR-gate),   deﬁnes the behavioural equations, and the
  B    C           CA
                                    OB   OC           weights assigned to the failure modes.
                                C
                       OA        D            C       Example 3. For our experiments, we use a set of digital com-
  D    E                                       E
                 (b) Translation to OD   OE           parator components, such as shown in Figure 2. Given a node
                                                      that has q possible components that are suitable, we randomly
 (a) Topology Graph MBD graph       (c) MBD Graph                            1
                                                      select one with probability q . For example, the single-input
Figure 4: Transforming the topology graph of a simple elec- nodes correspond to single-input gates (NOT, buffer), and the
tronic circuit into a model-based diagnosis graph.    dual-input nodes correspond to dual-input gates (AND, OR,
                                                      NAND, NOR, XOR), etc.
4.1  Generate Graph Structure for  G
We generate a small-world-graph (SWG) using a revised ver- 4.3 Generate the System Description
sion of the approach of Watts and Strogatz [Newman, 2003]. Given a selected component, we then generate its normal-
The SWG approach generates a graph G with a degree of ran- mode equations (and potentially failure-mode equations). We
domness that is controlled by a probability p ∈ [0, 1]. p  0 randomly select the mode type (of the s possible failure
                              p                                                                 1
corresponds to a regular graph, and 1 corresponds to an modes) for any component-model with probability s . We as-
Erdos-Renyi random graph; graphs with real-world structure sign weights to failure-mode values by assuming that normal
(SWGs) occur in between these extremes, as has been deter- behaviour is highly-likely, i.e., Pr{Ci = OK}0.99, and
mined by empirically comparing the Θ and L parameters of faulty behaviour is unlikely, i.e., Pr{Ci = OK}0.01.
generated graphs and actual networks [Newman, 2003].  Example 4. Figure 3(b) shows a randomly-generated circuit
  Figure 5 depicts the graph generation process, where we based on the schematic of Figure 3(a). Here, we instanti-
control the proportion of random edges using a rewiring prob- ate components A, D and E to NOT gates, component C
ability p. Standard SWG generation takes a regular graph (a to an AND gate, and component B to a buffer. This ﬁgure
ring lattice of n nodes), where each node is connected to its k also depicts the instantiated failure-mode for the components
nearest neighbors, and randomly “rewires” an edge by mov- in shaded boxes: Components B, C and E have SA1 fault-
ing one of its ends to a new position chosen at random (with modes, component A has a SA0 fault-mode, and component
probability p) from the rest of the lattice [Newman, 2003]. D has a INVERT fault-mode. Given this information, we
  We have modiﬁed the SWG framework to enable us to   can generate a system description with equations correspond-
                                                      ing to the component-types and fault-mode types as just de-
match the mean degree of the graph for the ISCAS circuit scribed. For example, the equations for gates A and C are:
with that of the generated graph, since the mean degree is
a critical parameter in this framework. The original SWG A :[I1 = t] ∧ [MA = OK]             ⇒ [OA = f]
model requires the mean degree k to be an even number; how- [I1 = f] ∧ [MA = OK]             ⇒  [OA = t]

ever, the mean degree in real circuits is typically not an inte- [MA = SA0]                  ⇒ [OA = f]
ger. Our enhanced SWG generator ﬁrst creates a ring lattice
with degree k, where k is any positive real number, by setting
    k                                     k           C :[I2 = t] ∧ [OA = t] ∧ [MC = OK]   ⇒  [OC = t]
k =  2 , and connecting every node to its nearest 2 neigh-
bors on both sides, just as in the classic SWG model. Next it ¬ ([I2 = t] ∧ [OA = t]) ∧ [MC = OK] ⇒ [OC = f]
                           
                          k                                 [MC = SA1]                       ⇒  [OC = t]
connects every node to its two 2 +1nearest nodes on both
                   (k−k)
sides, with probability 2 .                           5   Optimisation Model-Generation Approach
4.2  Assign Components to graph   G                   This section reviews the optimisation approach we have
Given a topology graph G, we associate to each component- adopted for generating the topology graph underlying real-
node in G a component, based on the number of incom-  istic diagnosis models. The standard SWG generation pro-
ing arcs for the node. Given a SWG component-node with cess has a wide range of parameter choices, e.g., parameters

                                                IJCAI-07
                                                   516(n, k, p), that produce models with very different properties. nostic SWG model SD with n nodes, by varying the graph-
Hence, one must generate a model using a parameter-setting generation parameters (k, p) in order to choose the best pa-
that best captures a desired property. This approach is gen- rameter setting such that SD and SD had the same diagnostic
eral, and can be used to create models for testing a variety performance.
of objectives, such as diagnostic inference complexity, model
size, etc. Since we are generating models that can be used to 20
test the relative efﬁciency of MBD inference algorithms, we 18

pose the auto-generation problem as an optimisation problem 16                   log10(max_clique_size)
whose objective function is deﬁned in terms of the computa- Complexity of C432
                                                         14
tional complexity of MBD inference.
  MBD   Auto-Generation Task: The objective of MBD       12
auto-generation is to create a model SD that minimises   10
                                                                                max_degree
|γA(SD,OBS)   − γA(SD,OBS)|, where   SD  is an MBD       8
          A
model , and is an MBD inference algorithm that has com-  6
plexity γA(SD,OBS)  when computing a ω-minimal diag-
                                                         4
nosis given model SD and observations OBS.4
  We have adopted the causal network approach [Darwiche, 2
1998] for our experiments. We used as our measure of in- 0
                                                          0   0.1 0.2  0.3 0.4  0.5 0.6 0.7  0.8 0.9  1
ference complexity the largest clique-table in the compiled                 rewiring probability
causal network model, which is a typical complexity measure
                                               ω
for this type of model. The diagnosis minimality criterion is Figure 6: The inference complexity and maximal degree dis-
a order-of-magnitude probability function [Darwiche, 1998]. tributions of a SWG corresponding to benchmark C432.
  From a theoretical perspective, the complexity of causal
network inference is expressed in terms of the graph topol- 6.1 Average-Case Diagnosis Complexity
ogy: it is exponential in the largest clique of the graph (or the Our ﬁrst set of experiments explored the complexity of auto-
graph width) [Darwiche, 1998]. This indicates that the inﬂu- generated models corresponding to all ISCAS85 circuits over
ence of behaviour B and observations OBS are outweighed the entire range of the rewiring parameter p. Figure 6 shows
by the graph structure.                               the maximal degree of the generated graph G (corresponding
  We have shown experimentally that system structure is the to C432) compared with the log10 of the inference complexity
primary determinant of diagnostic inference complexity for of G. The ﬁgure shows that both curves have the same trend,
causal network diagnostic inference, i.e., γA(SD,OBS)  rising from the relatively efﬁcient regular graph (p =0)to
γA(S). In particular, we showed that the diagnostic inference the range of small-world graphs (0 >p>1). This increase
complexity was invariant to variation in the behaviour equa- occurs because, given a graph with n nodes, a SWG will have
tions B and the observation set OBS. Using the structure of more and larger clique-tables than a regular graph,and hence
the ISCAS85 benchmark circuit C499, we examined 54 dif- will be computationally harder than a regular graph.
ferent combinations of component type and 6 sets of differ- Given that all circuits demonstrated properties similar to
ent observations. A two-way analysis of variance (ANOVA) those shown in Figure 6, i.e., complexity exponential in the
of data averaged over 300 runs indicated that neither varying largest clique (or intractability for non-trivial circuits), our
component types nor altering the number of observations had experiments have shown that the ISCAS85 circuits are com-
a statistically signiﬁcant effect on the inference complexity. putationally difﬁcult to diagnose, on average.
Hence we concluded that structure is the primary determinant
of diagnostic inference complexity.                   6.2  Parameter Optimisation
                                                      We then studied two approaches to choosing parameters that
6  Experimental Comparison of Generated               minimise the diagnosis-complexity difference between IS-
                                                      CAS and generated circuits: matching topological parame-
   and ISCAS-Benchmark Models                         ters governing (1) degree distribution, k, an easily-computed
This section summarises results of experiments comparing topological parameter; and (2) diagnostic complexity, γA,a
the structure and diagnostic inference complexity properties computationally intensive measure.
of auto-generated models with ISCAS benchmark models.   Degree Distribution: We ﬁrst tried to match the diagnostic
  The ISCAS circuits are an established benchmark for cir- complexity of corresponding models SD and SD by match-
cuit optimisation [Harlow, 2000]. The benchmark suites con- ing the degree distributions of SD and SD. Figure 7 shows
sist of multiple sets of circuits, of which we focus on the IS- the degree distributions of ISCAS85 circuits. For each real
CAS85 combinational circuits. Our experiments were con- circuit most nodes have low degree; however, each graph in
ducted on 3GHz Pentium-IV with 3GB of RAM. All data   Figure 7 also has a long tail containing some high-degree
presented is based on an average of 300 runs. Given an IS- nodes that signiﬁcantly affect the inference complexity, since
CAS circuit SD with n components, we generated a diag- the complexity is proportional to the node of highest degree.
                                                      A generated SWG has a unimodal degree distribution that
  4We assume that γ(·) returns a complexity parameter such as matches the most-likely degrees very well, but not the tail
CPU-time or number of nodes searched.                 of the curve. For example, consider the SWG for C432, with

                                                IJCAI-07
                                                   517