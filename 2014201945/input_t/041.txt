          Tractable Symmetry Breaking for CSPs with Interchangeable Values 

                   P. Van Hentenryck                                  P. Flener, J. Pearson, and M. Agren 
          Department of Computer Science                           Department of Information Technology 
              Brown University, Box 1910                                  Uppsala University, Box 337 
                  Providence, Rl 02912                                     S-751 05 Uppsala, Sweden 


                        Abstract                               encompass many practical applications. These CSPs fea•
                                                               ture various forms of value interchangeability and the paper 
      Symmetry breaking in CSPs has attracted consid­          shows that symmetry breaking can be performed in constant 
     erable attention in recent years. Various general         time and space during search using dedicated search proce-
     schemes have been proposed to eliminate sym­              dures. The paper also reports preliminary experimental re­
     metries during search. In general, these schemes          sults indicating that symmetry breaking on these CSPs brings 
     may take exponential space or time to eliminate           significant computational benefits. Finally, the paper intro­
     all symmetries. This paper studies classes of             duces the new notions of existential and abstract nogoods, 
     CSPs for which symmetry breaking is tractable.            which were used to derive the results for the various CSP 
     It identifies several CSP classes which feature var­      classes. We believe that these notions are helpful to derive 
     ious forms of value interchangeability and shows          many other classes of tractable symmetries. In particular, 
     that symmetry breaking can be performed in con­           they also allowed us to derive classes of tractable variable 
     stant time and space during search using dedicated        symmetries, which we cannot include here for space reasons. 
     search procedures. Experimental results also show         As such, this paper should be viewed only as a first step in 
     the benefits of symmetry breaking on these CSPs,          this fascinating area. 
     which encompass many practical applications. 
                                                                 It is also useful to contrast our approach with the research 
                                                               avenue pioneered by [Freuder, 1991] on value interchange-
1 Introduction                                                 ability. Freuder also introduced various forms of value inter­
                                                               changeability. However, his goal was to discover symmetries 
Symmetry breaking for constraint satisfaction problems has     inside CSPs and to reformulate them by preprocessing to re­
attracted considerable attention in recent years (See the last move symmetries. Unfortunately, discovering symmetries in 
CP proceedings, the CP'01 and CP'02 workshops on sym­          CSPs is not tractable for many interesting classes of CSPs. 
metries, and [Crawford et al., 1996; Freuder, 1991; Backofen   Our research, in contrast, assumes that modellers are aware 
and Will, 1999; Puget, 1993] for some less recent papers).     of the symmetries in their applications. It focuses on how to 
Indeed, many applications naturally exhibit symmetries and     exploit this knowledge during search to eliminate symmetries 
symmetry breaking may drastically improve performance          efficiently. Consider, for instance, the scene-shooting prob­
(e.g., [Barnier and Brisset, 2002; Meseguer and Torras, 2001;  lem featured in [Van Hentenryck, 2002]. This problem aims 
Puget, 2002]). An important contribution in this area has been at producing a movie (or a series) at minimal cost by decid­
the development of various general schemes for symmetry        ing when to shoot scenes. Each scene involves a number of 
breaking in CSPs (e.g., SBDS [Gent and Smith, 2000] and        actors and at most 5 scenes a day can be filmed. All actors of 
SBDD [Fahle et al, 2001; Focacci and Milano, 2001]). Un­       a scene must be present on the day the scene is shot. The ac­
fortunately, these schemes, in general, may require exponen­   tors have fees representing the amount to be paid per day they 
tial resources to break all symmetries. Indeed, some schemes   spend in the studio. The goal of the application is to minimize 
require exponential space to store all the nogoods generated   the production costs. An optimal solution to this problem can 
through symmetries, while others may take exponential time     be modelled as an assignment of scenes to days which min­
to discover whether a partial assignment is symmetric to one   imizes the production costs. It should be apparent that the 
of the existing nogoods. As a consequence, practical applica­  exact days assigned to the scenes have no importance in this 
tions often place limits on how many nogoods can be stored     application and are fully interchangeable. What is important 
and/or which symmetries to break.                              is how the scenes are clustered together. Our approach does 
                                                               not aim at discovering this fact; rather it focuses on how to 
   This paper approaches symmetry breaking from a differ­
                                                               exploit it to eliminate the symmetries it induces. 
ent, orthogonal, standpoint. Its goal is to identify classes of 
CSPs that are practically relevant and for which symmetry        The rest of the paper is organized as follows. After some 
breaking is tractable, i.e., symmetry breaking is polynomial   preliminaries, Sections 3,4, and 5 study three classes of CSPs 
in time and space. It identifies several such classes, which   for which symmetry breaking is tractable. For space reasons, 


CONSTRAINTS                                                                                                           277  only the first class is presented in full detail with proofs. Sec­
 tion 6 briefly reports some experimental results. Section 7 
 concludes the paper. 

 2 Preliminaries 
 This section defines the main concepts used in this paper. 
 The definitions, although they capture the informal meaning 
 of CSPs, are non-standard and simplify the definitions and 
 proofs considerably. The basic idea is that the set of con­
 straints is abstracted by a Boolean function which holds if all 3 Value-Interchangeable CSPs 
 the constraints are satisfied (since we are not interested in the 
                                                               There are many applications in resource allocation and 
 constraint structure). Solutions are also represented as func­
                                                               scheduling where the exact values taken by the variables are 
 tions (assignments) from variables to their sets of values. 
                                                               not important. What is significant is which variables take the 
                                                               same values or, in other terms, how the variables are clus­
                                                               tered. This notion of symmetry is what [Freuder, 1991] calls 
                                                               full interchangeability for all variables and all values. The 
                                                               prototypical example is graph-coloring. Another, more com­
                                                               plex, example is the scene allocation application mentioned 
                                                               in the introduction. This section shows that symmetry break­
                                                               ing for these problems is tractable and takes constant time and 
Algorithms to solve CSPs manipulate partial assignments. It    space. We first define value-interchangeable CSPs. 
is often important to reason about which variables are already 
assigned (the domain of the partial assignment) and the set of 
 values they are assigned to (the image of the assignment). 
Note that domains represent sets of variables in this paper    In the following, we use ICSP as an abbreviation for value-
(not values as is traditional), since we use functions to model interchangeable CSP. The following theorem is a fundamental 
(partial) assignments.                                         characterization of nogoods for ICSPs. 


                                                               We now show that the closure of a nogood can be charac­
                                                               terized compactly and that membership to the closure of a 
                                                               nogood can be tested in linear time for ICSPs. We first intro­
                                                               duce the concept of existential nogood, which simplifies the 
                                                               proofs and intuitions. 


278                                                                                                       CONSTRAINTS                                                                Lemmas 3.8 and 3.9 indicate that symmetry breaking is 
                                                               tractable for ICSPs. Lemma 3.9 indicates that abstract no-
                                                               goods are needed only for frontier nodes of the search tree 
                                                               (i.e., closed nodes whose parents are open). Once its children 
                                                               are explored, the abstract nogood of the parent subsumes the 
                                                               abstract nogoods of its children. Hence, maintaining the no-
                                                               good takes space 0(|F||F|) if F is the set of frontier nodes. 
                                                               We formalize this result using variable decomposition trees. 
 It is not obvious that membership to an existential nogood can 
 be tested efficiently, since it involves an existential quantifica­
 tion. However, due to the nature of the underlying constraints, 
 it is easy to eliminate the existential variables by selecting a 
 representative for each set a-1 (di). This is precisely the mo­
 tivation underlying the concept of abstract nogoods defined 
 below. Consider the existential formula 


                                                               The result above can be strengthened considerably in fact. 
                                                               We will show that search procedures exploring a variable de­
                                                               composition tree can remove all symmetries in constant time 
                                                               and space. Before presenting the theoretical results, we illus­
                                                               trate the intuition using depth-first search. The basic intuition 
                                                               comes from the structure of the abstract nogoods. Consider 
                                                               the partial assignment 


                                                               and assume that depth-first search tries to assign variable V6 
                                                               and that the set of possible values is 1...10. The failure of 
                                                               V6 — 1 produces an abstract nogood 9 which holds if 


                                                               Since V\,..., v5 remain instantiated when the next value is 
                                                               tried for V6, the abstract nogood for this part of this next 
                                                               branch holds if Φ(VQ) = 1 imposing that v6 be assigned a 
                                                               value different from 1. The assignments v6 — 2 and v6 = 3 
                                                               produce similar abstract nogoods. Now observe what hap­
                                                               pens for an assignment of a value i £ 4..10, say 6. The ab­
                                                               stract nogood 6 is now defined as 
 Lemma 3.8. Let V be an ICSP, a be a nogood for V, and 6 
 be a partial assignment. There exists a linear-time algorithm 
 that tests whether 0 violates any nogood in Closure(a,P). 
Proof. Direct consequence of lemmas 3.5 and 3.7 and the fact 
 that the abstract nogood is linear in IVI. □ 


 CONSTRAINTS                                                                                                          279                                                                Lemma 3.14. Let V be an ICSP and T be a compact vari•
                                                               able decomposition tree for V. The partial assignment a of 
                                                               a node in T never matches any nogood generated during the 
                                                               exploration of T (except the one it possibly generates). 

                                                               Proof By Lemma 3.9, it suffices to show that a partial assign­
                                                               ment 0 never matches a nogood generated by its siblings or 
                                                               the siblings of one of its ancestors in the tree. The proof is by 


 which cannot be satisfied by any assignment to v6. It fol­
 lows that V6 must only be assigned to the previously assigned 
 values 1,2,3 or to exactly one new value in 4..10. In other 
 words, in a variable decomposition tree, only some of the 
 children need to be explored: those which assign variable 

 Vik+i to a value in dorri(a) and exactly one other child. Note 
 that this result is independent from the set of constraints. It 
 is the essence of the labeling procedure for graph-coloring 
 in [Kubale and Jackowski, 1985] and in the scene allocation 


 To our knowledge, this paper provides the first formal proof 
 that these algorithms break all the symmetries in their respec­
 tive problems. To prove the correctness of ILABEL, and        The correctness of Procedure ILABEL follows from the two 
 other related search procedures, it is useful to introduce the lemmas above. Other search strategies, e.g., LDS, also re­
 concept of compact variable decomposition tree.               move all symmetries in constant time and space. 
                                                               Theorem 3.15. Procedure ILABEL breaks all the symme•
                                                               tries in constant time and constant space for an ICSP V, i.e., 
                                                               it never matches any member of the closure of any nogood 
                                                               generated during search. 

                                                               4 Piecewise-Interchangeable CSPs 
                                                               In many applications, e.g., in resource allocation and schedul­
                                                               ing, the values are taken from disjoint sets but they are in­
                                                               terchangeable in each set. For instance, in the scene alloca­
                                                               tion problem, we can easily imagine a version of the problem 
 The following lemma, which states that compact variable de­   where days are divided in morning and afternoon sessions. 
 composition trees are complete, follows directly from the ex­ Actors probably have strong preferences (and thus different 
 amination of the nogoods above.                               fees for the morning and afternoon sessions) but the day of the 
                                                               session may not matter. This paper captures this (more lim­
                                                               ited) form of interchangeability by piecewise interchangeable 
                                                               CSPs. We first define this class of CSPs formally and then de­
                                                               rive similar results as for lCSPs. We state the main definitions 
                                                               and theorems only, since the derivation is similar to the one 

Our next lemma states that a compact variable decomposition    for ICSPs. As traditional, we use D\ + D2 to denote the dis­
tree never matches any nogood generated during search.         joint union of D\ and D2. Our definitions and results only 


280                                                                                                       CONSTRAINTS  consider two distinct sets of values, for simplicity. It is easy 
 to generalize them to an arbitrary number of sets. 


 Figure 2 depicts a labeling procedure PILABEL for PICSPs, 
 which breaks all value symmetries in constant time and space. 
 Procedure PILABEL generalizes ILABEL by considering the 
 already assigned values in both sets D1 and D2, as well as one 
 new value (if any) from both sets. 
 Theorem 4.5. Procedure PILABEL breaks all the symme•
 tries in constant time and constant space for PICSPs. 

 5 Wreath-Value Interchangeable CSPs 
 We now consider another, more complex, class of CSPs, 
 which assigns a pair of values (d1,d2from a set D1 x D2 
 to each variable v. Values in D1 are fully interchangeable 
 and, for a fixed value in D1, the values in D2 are fully inter­
 changeable as well. These problems are called wreath value-
 interchangeable in this paper, because the symmetry group 
 corresponds to a wreath product of symmetry groups [Camer-
 son, 1999]. Such problems arise naturally in a variety of ap­
plications in resource allocation and scheduling. Consider, 
 for instance, the problem of scheduling a meeting where dif­
 ferent groups must meet some day of the week in some room 
 subject to constraints. The days are fully interchangeable and, 
 on a given day, the rooms are fully interchangeable. Sym­
 metry breaking for a wreath value-interchangeable CSP is 
tractable. 


CONSTRAINTS                                                                                                           281 