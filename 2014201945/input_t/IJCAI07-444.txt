ItemRank: A Random-Walk Based Scoring Algorithm for Recommender Engines

                                      Marco Gori, Augusto Pucci
                             Dipartimento di Ingegneria dell’Informazione
                                           University of Siena
                                       Via Roma, 56. Siena, Italy
                                     {marco,augusto}@dii.unisi.it

                    Abstract                          proﬁle is constructed using only features that are related to
                                                      the user under evaluation and to the products he/she has al-
    Recommender systems are an emerging technology    ready considered. In those cases, the proﬁle consists of a
    that helps consumers to ﬁnd interesting products. A parametric model that is adapted according to the customer’s
    recommender system makes personalized product     behavior. Key issues of collaborative ﬁltering approach are
    suggestions by extracting knowledge from the pre- scalability and quality of the results. In fact, real life large–
    vious users interactions. In this paper, we present scale E–commerce applications must efﬁciently cope with
    ”ItemRank”, a random–walk based scoring algo-     hundreds of thousands of users. Moreover, the accuracy of
    rithm, which can be used to rank products accord- the recommendation is crucial in order to offer a service
    ing to expected user preferences, in order to recom- that is appreciated and used by customers. In this paper,
    mend top–rank items to potentially interested users. we present ”ItemRank”, a random–walk based scoring al-
    We tested our algorithm on a standard database,   gorithm, which can be used to rank products according to
    the MovieLens data set, which contains data col-  expected user preferences, in order to recommend top–rank
    lected from a popular recommender system on       items to potentially interested users. We tested our algorithm
    movies, that has been widely exploited as a bench- on a popular database, the MovieLens dataset1 by the Grou-
    mark for evaluating recently proposed approaches  pLens Research group at University of Minnesota and we
                              [
    to recommender system (e.g. Fouss et al., 2005;   compared ItemRank with other state-of-the-art ranking tech-
                    ]
    Sarwar et al., 2002 ). We compared ItemRank with  niques (in particular the algorithms described in [Fouss et al.,
    other state-of-the-art ranking techniques (in par- 2005]). This database contains data collected from a popu-
                                   [
    ticular the algorithms described in Fouss et al., lar recommender system on movies that has been widely ex-
        ]
    2005 ). Our experiments show that ItemRank per-   ploited as a benchmark for evaluating recently proposed ap-
    forms better than the other algorithms we compared proaches to recommender system (e.g. [Fouss et al., 2005;
    to and, at the same time, it is less complex than Sarwar et al., 2002]). The schema of such archive resembles
    other proposed algorithms with respect to memory  the structure of the data of many other collaborative ﬁlter-
    usage and computational cost too.                 ing applications. Our experiments show that ItemRank per-
                                                      forms better than the other algorithms we compared to and,
1  Introduction                                       at the same time, it is less complex than other proposed algo-
A recommender system makes personalized product sugges- rithms with respect to memory usage and computational cost
tions by extracting knowledge from the previous user interac- too. The paper is organized as follows. In the next subsec-
tions with the system. Such services are particularly useful in tion (1.1) we review the related literature with a special focus
the modern electronic marketplace which offers an unprece- on other graph based similarity measure and scoring algo-
dented range of products. In fact a recommender system rep- rithms applied to recommender systems. Section 2 describes
resents an added value both for consumers, who can easily the MovieLens data set (in subsection 2.1) and illustrates the
ﬁnd products they really like, and for sellers, who can fo- data model we adopted (in subsection 2.2). Section 3 dis-
cus their offers and advertising efforts. Several recommender cusses ItemRank algorithm in details and we address Item-
systems have been developed that cope with different prod- Rank algorithm complexity issues in subsection 3.1. Section
ucts, e.g. MovieLens for movies (see [Sarwar et al., 2001]), 4 contains the details of the experimentation, while Section 5
GroupLens for usenet news [Miller et al., 2002], Ringo for draws some conclusions and addresses future aspects of this
music [Shardanand and Maes, 1995], Jester for jokes [Gold- research.
berg et al., 2001] and many other (see e.g. [Schafer et al.,
2001] for a review). A recommender system constructs a
user proﬁle on the basis of explicit or implicit interactions
of the user with the system. The proﬁle is used to ﬁnd prod-
ucts to recommend to the user. In the simplest approach, the 1http://www.movielens.umn.edu

                                                IJCAI-07
                                                  27661.1  Related Work                                     a similarity measure between nodes of a graph integrating in-
Many different recommending algorithms have been pro- direct paths, based on the matrix-forest theorem. Similarity
posed in literature, for example there are techniques based measures based on random-walk models have been consid-
on Bayesian networks [Breese et al., 1998], Support Vec- ered in [White and Smyth, 2003], where average ﬁrst-passage
tor Machines [Grcar et al., 2005] and factor analysis [Canny, time has been used as a similarity measure between nodes. In
2002]. The most successful and well–known approach to rec- collaborative recommendation ﬁeld is also interesting to con-
ommender system design is based on collaborative ﬁltering sider different metrics described in [Brand, 2005].
[Sarwar et al., 2001; Shardanand and Maes, 1995]. In collab-
orative ﬁltering, each user collaborates with others to estab- 2TheProblem
lish the quality of products by providing his/her opinion on
                                                      Formally, a recommender system deals with a set of users ui,
a set of products. Also, a similarity measure between users
                                                      i =1,...,Un and a set of products pj, j =1,...,Pn, and its
is deﬁned by comparing the proﬁles of different users. In or-
                                                      goal consists of computing, for each pair: ui,pj,ascorerˆi,j
der to suggest a product to an ”active user”, the recommender
                                                      that measures the expected interest of users ui for product pj
system selects the items among those scored by similar cus- on the basis of a knowledge base containing a set of prefer-
tomers. The similarity measure is often computed using the ences expressed by some users about products. So we need a
Pearson–r correlation coefﬁcient between users (e.g. in [Sar- scoring algorithm to rank products/items for every given user
             ]
war et al., 2001 ). Recently a graph based approach has been according to its expected preferences, then a recommender
           [               ]
proposed in Fouss et al., 2005 . Fouss et al. compared system will suggest to a user top-ranked items with respect
different scoring algorithm to compute a preference ranking to personalized ordering. In this section we present the data
of products (in that case movies) to suggest to a group of model we adopted and MovieLens data set, that is a widely
users. In this paper the problem has been modeled as a bipar- used benchmark to evaluate scoring algorithms applied to
tite graph, where nodes are users (people node) and movies recommender systems. Our choice with respect to the data
(movie node), and there is a link connecting a people node
u               m              u               m      model and the data set is not restrictive since it reﬂect a very
 i to a movie node j if and only if i watched movie j, common scenario while dealing with recommender systems.
in this case arcs are undirected and can be weighted accord- In the following we will indifferently make use of terms such
ing to user preferences expressed about watched movies. Au- as item, product and movie depending on the context, but ob-
thors tested many different algorithms using a wide range of viously the proposed algorithm is a general purpose scoring
similarity measures in order to rank movies according to user algorithm and it does not matter which kind of items we are
preferences, some of the most interesting methods are: ranking in a particular scenario, moreover we will also use
  Average Commute Time (CT). This is a distance measure          m                 p
                     i    j                           the notation j to refer a product j in the particular case of
between a pair of nodes and in a graph, we denote it as movies to be ranked.
n(i, j), it is deﬁned as the average number of steps that a
random walker2 going across a given graph, starting in the 2.1 MovieLens Data Set
state corresponding to node i, will take to enter state j for
                         i                            MovieLens site has over 50, 000 users who have expressed
the ﬁrst time and go back to . If we measure this distance                3, 000
between people and movie nodes in the given bipartite graph, opinions on more than different movies. The Movie-
we can use this score to perform the movie ranking.   Lens dataset is a standard dataset constructed from the
                                                      homonym site archive, by considering only users who rated
  Principal Component Analysis based on Euclidean     20
Commute Time Distance (PCA CT). From the eigenvector     or more movies, in order to achieve a greater reliability
                +                                                                          100, 000
decomposition of L , that is the pseudoinverse of the Lapla- for user proﬁling. The dataset contains over ratings
                                                      from 943 users for 1, 682 movies. Every opinion is repre-
cian matrix (L) corresponding to the graph, it is possible to            t  =(u  ,m  ,r  )       t
map nodes into a new Euclidean space that preserves the Eu- sented using a tuple: i,j i j i,j ,where i,j is the
                                                      considered tuple, ui ∈Uis an user, mj ∈Mis a movie,
clidean Commute Time Distance, it is also possible to project r                    1              5
to a m-dimensional subspace by performing a PCA and keep- and i,j is a integer score between (bad movie) and (good
ing a given number of principal components. Then distances movie). The database provides a set of features character-
computed between nodes in the reduced space can be used to izing users and movies which include: the category of the
rank the movies for each person.                      movie, the age, gender, and occupation of the user, and so
                                      +          +
  Pseudoinverse of the Laplacian Matrix (L ). Matrix L on. The dataset comes with ﬁve predeﬁned splitting, each
                                                      uses 80% of the ratings for the training set and 20% for the
is the matrix containing the inner products of the node vectors
                                                                            [                ]
in the Euclidean space where the nodes are exactly separated test set (as described in Sarwar et al., 2002 ). For every
                +                                                            L     T
by the ECTD, so l can be used as the similarity measure standard splitting we call and respectively the set of
                i,j                                   tuples used for training and for testing, moreover we refer
between node i and j, in order to rank movies according to
                                                      the set of movies in the training set rated by user ui as Lu
their similarity with the person.                                                                       i
                                                      and we write Tu for movies in the test set. More formally:
  In literature there are many other examples of algorithms         i
                                                      Lu  = {tk,j ∈L: k = i} and Tu = {tk,j ∈T : k = i}.
using graphical structures in order to discover relationships i                   i
between items. Chebotarev and Shamis proposed in [Cheb- 2.2 Data Model: Correlation Graph
otarev and Shamis, 1997] and [Chebotarev and Shamis, 1998]
                                                      Even from a superﬁcial analysis of the proposed problem, it
  2see [Norris, 1997] for more details                seems to be clear that there is a different correlation degree

                                                IJCAI-07
                                                  2767between movies, if we could exploit this information from attenuation properties we need, furthermore thanks to signif-
the training set then it would be quite easy to compute user icant research efforts we can compute PageRank in a very ef-
dependent preferences. We deﬁne Ui,j ⊆Uthe set of users ﬁcient way (see [Kamvar et al., 2003a]). Consider a generic
who watched (according to the training set) both movie mi graph G =(V, E),whereV is the set of nodes connected by
and mj,so:                                            directed links in E, the classic PageRank algorithm computes
                                                     an importance score PR(n) for every node n ∈Vaccord-
          {u  :(t  ∈L   ) ∧ (t  ∈L   )}    i = j
            k   k,i   uk     k,j   uk    if
 Ui,j =                                               ing to graph connectivity: a node will be important if it is
          ∅                              if i = j     connected to important nodes with a low out-degree. So the
                                                      PageRank score for node n is deﬁned as:
Now we compute the (|M|×|M|) matrix containing the num-
ber of users who watched each pair of movies:
                                                                              PR(q)             1
                    C˜  = |U  |                             PR(n)=α    ·              +(1−  α) ·      (1)
                     i,j    i,j                                                  ωq             |V|
                                                                        q:(q,n)∈E
                                              ˜
where |·|denotes the cardinality of a set, obviously ∀i, Ci,i =
                                                              ω                       q α              3
0 and C˜ is a symmetric matrix. We normalize matrix C˜ in or- where q is the out-degree of node , is a decay factor .
                                  ˜
                                  Ci,j                The equivalent matrix form of equation 1 is:
                           Ci,j =          ωj
der to obtain a stochastic matrix ωj where    is the
sum of entries in j − th column of C˜. C is the Correlation                              1
                                                               PR  = α · C · PR +(1− α) ·  · 1|V|     (2)
Matrix, every entry contains the correlation index between                              |V|
movie pairs. The Correlation Matrix can be also considered
                                                        where C is the normalized connectivity matrix for graph
as a weighted connectivity matrix for the Correlation Graph
                                                      G and 1|V| is a |V| long vector of ones. PageRank can also
GC. Nodes in graph GC correspond to movies in M and there
                                                      be computed iterating equation 2, for example by applying
will be an edge (mi,mj) if and only if Ci,j > 0. Moreover
                                                      the Jacobi method [Golub and Loan, 1996], even if iteration
the weight associated to link (mi,mj) will be Ci,j , note that
     ˜                                                should be run until PageRank values convergence, we can
while C is symmetrical, C is not, so the weight associated to               I
(m ,m  )              (m ,m )                         also use a ﬁxed number of iterations. Classic PageRank
  i   j can differ from j   i weight. The Correlation can be extended by generalizing equation 2:
Graph is a valuable graphical model useful to exploit corre-
lation between movies, weights associated to links provide            = α ·  ·   +(1−   α) ·
an approximate measure of movie/movie relative correlation,       PR       M  PR           d          (3)
according to information extracted from ratings expressed by where M is a stochastic matrix, its non-negative entries
users in the training set.                            has to sum up to 1 for every column, and vector d has non-
                                                      negative entries summing up to 1. Vector d can be tuned in
3  ItemRank Algorithm                                 order to bias the PageRank by boosting nodes corresponding
                                                      to high value entries and matrix M controls the propagation
The idea underlying the ItemRank algorithm is that we can and attenuation mode. Biased PageRank has been analysed
use the model expressed by the Correlation Graph to forecast in [Langville and Meyer, 2003] and custom static score distri-
user preferences. For every user in the training set we know bution vectors d have been applied to compute topic-sensitive
the ratings he assigned to a certain number of movies, that is [              ]
L                       G                             PageRank  Haveliwala, 2002 , reputation of a node in a peer-
 ui , so, thanks to the graph C we can ”spread” user prefer- to-peer network [Kamvar et al., 2003b] and for combating
ences through the Correlation Graph. Obviously we have to web spam [Gyongyi et al., 2004].WepresenttheItemRank
properly control the preference ﬂow in order to transfer high algorithm, that is a biased version of PageRank designed to be
score values to movies that are strongly related to movies with applied to a recommender system. ItemRank equation can be
good ratings. The spreading algorithm we apply has to pos-
                                                      easily derived from equation 3. We use graph GC to compute
sess two key properties: propagation and attenuation. These
                                                      a ItemRank value IRui for every movie node and for every
properties reﬂect two key assumptions. First of all if a movie user proﬁle. In this case the stochastic matrix M will be the
mk is related to one or more good movies, with respect to a
                                                      Correlation Matrix C and for every user ui we compute a dif-
given user ui,thenmoviemk will also be a good suggestion    IR
      u                                               ferent  ui by simply choosing a different dui static score
for user i , if we analyse the Correlation Graph we can easily distribution vector. The resulting equation is:
discover relationships between movies and also the strength

of these connections, that is the weight associated to every    IRui = α ·C·IRui +(1−   α) · dui      (4)
link connecting two movies. The second important factor
                                                                                          u
we have to take into account is attenuation. Good movies where dui has been built according to user i preferences as
                                                                                              ˜
have to transfer their positive inﬂuence through the Correla- recorded in training set Lui . The unnormalized dui , with re-
tion Graph, but this effect decrease its power if we move fur- spect to the j − th component, is deﬁned as:
ther and further away from good movies, moreover if a good     
      m                                                           0      ti,j ∈Lu
movie  i is connected to two or more nodes, these have to d˜j =        if       i
                                                           ui     r      t  ∈L    ∧ t  =(u  ,m ,r  )
share the boosting effect from mi according to the weights         i,j if i,j  ui   i,j    i  j  i,j
of their connections as computed in matrix C. PageRank al-
gorithm (see [Page et al., 1998]) has both propagation and 3A common choice for α is 0.85

                                                IJCAI-07
                                                  2768                                              ˜
                                           =  dui     easy happen while the number of users increase), some op-
So the normalized dui vector will simply be dui ˜ .
                                              |  |
                                              dui     timized methods to partially overcome these limitations has
ItemRank, as deﬁned in equation 4, can be computed also been proposed in [Brand, 2005].
iteratively in this way:
   
         (0) =  1  ·                                  4   Experimental Results
     IRui      |M|  1|M|
                                                (5)   To evaluate the performances of the ItemRank algorithm, we
     IRui (t +1)=α  ·C·IRui (t)+(1−  α) · dui
                                                      ran a set of experiments on the MovieLens data set, described
This dynamic system has to be run for every user, luckily it in subsection 2.1. The choice of this particular data set is not
only needs on average about 20 iterations to converge. The restrictive, since it is a widely used standard benchmark for

interpretation of IRui score vector for user ui is straightfor- recommender system techniques and its structure is typical of
ward, ItemRank scores induce a sorting of movies accord- the most common applicative scenarios. In fact we can apply
ing to their expected liking for a given user. The higher is ItemRank every time we have a set of users (U) rating a set
the ItemRank for a movie, the higher is the probability that a of items or products (I that is the generic notation for M),
given user will prefer it to a lower score movie.     if we can model our recommendation problem this way (or
                                                      in any equivalent form) it will be possible to use ItemRank
3.1  Complexity Issues                                to rank items according to user preferences. We chose an ex-
                                                      perimental setup and performance index that is the same as
ItemRank algorithm results to be very efﬁcient both from used in [Fouss et al., 2005], this way we can directly com-
computational and memory resource usage point of view.
                 |M|                                  pare our algorithm with some of the most promising scoring
We need to store a    nodes graph with a limited num- algorithms we found in related literature (CT, L+ and so on),
ber of edges. The interesting fact is that graph GC contains
     (m  ,m )     (m ,m  )             ∃u  : t   ∈    having many points of contact with ItemRank ”philosophy”.
edges   i  j  and   j   i if and only if k    k,i     We split MovieLens data set as described in [Sarwar et al.,
Lu  ∧ tk,j ∈ Lu , so no matter the number of users satisfy-
  k           k                                       2002], in order to obtain 5 different subsets, then we applied
ing the previous condition, ratings information will be com- ItemRank 5 times (5-fold cross validation). Each time, one of
pressed in just a couple of links anyway. It is interesting to the 5 subsets is used as the test set and the remaining 4 sub
note that the data structure we use scale very well with the sets have been merged to form a training set. At the end we
increase of the number of users, in fact GC node set cardi-
                      |U|                             computed the average result across all 5 trials. So we have
nality is independent from and also the number of edges 5 splittings, each uses 80% of the ratings for the training set
tend to increase very slowly after |U| has exceeded a cer-  80, 000          20%
            U¯                                        (that is     ratings) and  for the test set (the remaining
tain threshold . That is a very useful property, because 20, 000 ratings), that is exactly the same way tests have been
in a real applicative scenario the number of users for a cer- performed in [Fouss et al., 2005]. The performance index we
tain e-commerce service and the number of expressed pref- used is the degree of agreement (DOA), which is a variant
erences about products will rise much faster than the total of Somers’D (see [Siegel and Castellan, 1988] for further de-
amount of offered products. Moreover ItemRank computa- tails). DOA is a way of measuring how good is an item rank-
tion is very efﬁcient, thanks to its strong relationship with ing (movie ranking in MovieLens case) for any given user. To
PageRank algorithm, and we only need about 20 iterations of
                                                      compute DOA for a single user ui we need to deﬁne a set of
system 5 for every user in order to rank every movie accord-
                                                      movies NWu   ⊂Mthat is the set of movies that are not in
ing to every user taste, so if we have |U| users we have to       i
                                                      the training set, nor in the test set for user ui,so:
run the algorithm |U| different times. ItemRank is more efﬁ-

cient than similar Random-Walk based approach such as CT            NWui  =  M\(Lui   ∪Tui )
and L+ (already introduced in subsection 1.1, see [Fouss et
al., 2005] for details), in fact both CT and L+ require to han- Now we deﬁne the boolean function check order as:
                                                                                         m
dle a graph containing nodes representing users and products                               j      mk
                                                                                  1   if IRui ≥ IRu
                                                                     (m  ,m )=            m        i
and edges referred to user preferences. So in this graph there check orderui j k           j      mk
                                                                                  0   if IRui <IRu
are |U| + |M| nodes and two edges (ui,mj),(mj,ui) for ev-                                          i
                                                              m
ery opinion (ui,mj,ri,j ), while in the case of ItemRank you    j
                                                      where IRui is the score assigned to movie mj with respect
        |M|
have only    nodes and ratings information is compressed. to user ui preferences, by the algorithm we are testing. Then
CT is used to rank every movie with respect to every sys- we can compute individual DOA for user ui,thatis:
tem user, so the average commute time (CT) n(ui,mj) re-           
                                                                                              (m ,m  )
ferred to any user-movie couple ui,mj has to be computed,           (j∈T ,k∈N W  ) check orderui j  k
                                                               =        ui     ui
but n(ui,mj)=m(ui|mj)+m(mj|ui)      where m(ui|mj)       DOAui
                                                                              |Tui |·|NWui |
denotes the average ﬁrst-passage time from node ui to node

mj. So CT needs 2·|U|·|M|average ﬁrst-passage time com- So DOAui measures for user ui the percentage of movie pairs
putations, while ItemRank has to be applied only |U| times to ranked in the correct order with respect to the total number
rank every movie with respect to its similarity to every user. of pairs, in fact a good scoring algorithm should rank the
The situation is similar also if we consider L+ algorithm, in movies that have indeed been watched in higher positions
this case, as stated in [Fouss et al., 2005], the direct computa- than movies that have not been watched. A random ranking
tion of the pseudoinverse of the Laplacian matrix L becomes produces a degree of agreement of 50%, half of all the pairs
intractable if the number of nodes becomes large (that could are in correct order and the other half in bad order. An ideal

                                                IJCAI-07
                                                  2769ranking correspond to a 100% DOA. Two different global de- brieﬂy described some of these algorithms in subsection 1.1,
gree of agreement can be computed considering ranking for for further details see [Fouss et al., 2005]. For every tested
individual users: Macro-averaged DOA and micro-averaged algorithm we provide Macro DOA index, that has been com-
DOA. The Macro-averaged DOA (or shortly Macro DOA)    puted for every technique as the average result across all 5
will be the average of individual degree of agreement for ev- trials of 5-fold cross-validation. Moreover we provide the dif-
ery user, so:                                         ference (in %) with performance obtained by the trivial MaxF
                                                     algorithm and the standard deviation (STD) of this quantity.
                           u ∈U DOAui
            Macro DOA  =    i                         MaxF is our baseline for the task, it is a user independent
                              |U|                     scoring algorithm, it simply ranks the movies by the num-
The micro-averaged DOA (or shortly micro DOA) is the ra- ber of persons who watched them, movies are suggested to
tio between the number of movie pairs in the right order (for each person in order of decreasing popularity. So MaxF pro-
every user) and the total number of movie pairs checked (for duces the same ranking for all the users. ItemRank performs
every user), so it can be computed as:                better than any other considered technique obtaining +3.69
                                                    with respect to the baseline and a very good standard devia-
                                                                                                     +
                                 check orderu (mj ,mk )                                               L
             u ∈U   (j∈T ,k∈N W )      i              tion (0.31). In this test ItemRank also perform better than
             i         ui     ui
  micro DOA =                                      algorithm by obtaining a Macro DOA value of 87.76 versus
                           |T |·|NW  |
                            ui     ui                           +
                      ui∈U                            87.23 for L and also a better standard deviation. In addi-
Then micro DOA is something like a weighted averaging of tion it is worth to note that ItemRank is less complex than
individual DOA values. In fact the bigger is set Tu for a other proposed algorithms with respect to memory usage and
                                             i        computational cost too, as already argued in subsection 3.1.
given user ui, the more important is the individual DOAui
contribution to micro DOA global computation. Macro DOA
and micro DOA have been evaluated for every experiment we 5 Conclusions
ran. We summarize experimental results in table 1 and 2. In In this paper, we present a random–walk based scoring al-
table 1 we compare ItemRank performances to a simpliﬁed gorithm, which can be used to recommend products accord-
version of the same algorithm, in order to highlight the im- ing to user preferences. We compared our algorithm with
portance of the information hidden in the Correlation Matrix other state-of-the-art ranking techniques on MovieLens data
C. ItemRank with the binary graph is identical to classical set. ItemRank performs better than the other algorithms we
ItemRank (described in section 3) but there is a key differ- compared to and, at the same time, it is less complex than
ence in the way we build matrix C (we denote the simpliﬁed other proposed algorithms with respect to memory usage and
version as Cbin), in this case it is obtained by normalizing a computational cost too. Future research topics include the ex-
                                         C˜bin        perimentation of the algorithm on different applications. We
               C˜ C˜bin           Cbin =  i,j
binary version of (  ), so we have: i,j   ωj where    are now working on a extension of ItemRank. The version
˜bin                                                  presented so far is able to handle the recommendation task as
Ci,j can be computed as:
                                                     a item scoring/ranking problem. But we can face the problem
              ˜bin     1  if Ui,j > 0                 from the regression point of view too. So we expect Item-
              Ci,j =
                       0  if Ui,j =0                  Rank 2.0 will also be able to produce expected satisfaction
                                                      prediction for a given recommendation, other than product
In other words if we compute ItemRank with binary graph, ranking.
we are weighting every correlation edge connecting two items
in the same way, no matter the number of co-occurrences in Acknowledgments
                                   Cbin
user preference lists for these items, since i,j correspond to Many thanks to Giuliano Testa for running the experiments.
the weight of edge (mi,mj) in the Correlation Graph GC we
use for information propagation.                      References
  Table 1 clearly shows the usefulness of a properly weighted
                                                      [Brand, 2005] M. Brand. A random walks perspective on
                C            Cbin
Correlation Matrix compared to   . This table provides   maximizing satisfaction and proﬁt. In 2005 SIAM Interna-
both Macro and micro DOA for every split and for Item-   tional Conference on Data Mining, 2005.
Rank and its simpliﬁed version with binary graph: ItemRank
                                                      [               ]
clearly works much better when we use a proper Correlation Breese et al., 1998 J. S. Breese, D. Heckerman, and
Matrix. For example, if we look at Macro DOA mean values, C. Kadie. Empirical analysis of predictive algorithms for
ItemRank with Correlation Matrix C obtain +15.43 points (in collaborative ﬁltering. In 14th Conference on Uncertainty
                                                         in Artiﬁcial Intelligence (UAI-98), pages 43–52, July 1998.
%) with respect to Cbin version. These are interesting results
because they conﬁrm our main hypothesis: ItemRank algo- [Canny, 2002] J. Canny. Collaborative ﬁltering with privacy
rithm ranks items according to the information extracted from via factor analysis. In IEEE Conference on Security and
the Correlation Matrix (that is equivalent to the weighted Cor- Privacy, May 2002.
relation Graph) and the way we compute C entries is really [Chebotarev and Shamis, 1997] P. Chebotarev and
able to properly model relationships among evaluated items. E. Shamis. The matrix-forest theorem and measur-
Finally table 2 shows a performance comparison among dif- ing relations in small social groups. Automation and
ferent scoring algorithm applied to MovieLens data set. We Remote Control, 58(9):15051514, 1997.

                                                IJCAI-07
                                                  2770