                 Boosting a Complete Technique to Find MSS and MUS
                                thanks to a Local Search Oracle

                       Eric´ Gregoire´ and Bertrand Mazure     and  Cedric´ Piette
                             CRIL-CNRS & IRCICA – Universit´e d’Artois
                          rue Jean Souvraz SP18 F-62307 Lens Cedex France
                              {gregoire,mazure,piette}@cril.univ-artois.fr

                    Abstract                          [Eiter and Gottlob, 1992]. Fortunately, the number of MUS
                                                      remains often tractable in real-life applications. For example,
    In this paper, a new complete technique to com-   in model-based diagnosis [Hamscher et al., 1992],itisoften
    pute Maximal Satisﬁable Subsets (MSS) and Min-    assumed that single faults occur most often, which can entail
    imally Unsatisﬁable Subformulas (MUS) of sets of  small numbers of MUS.
    Boolean clauses is introduced. The approach im-     A dual concept is the notion of Maximal Satisﬁable Sub-
    proves the currently most efﬁcient complete tech- set (MSS) of a SAT instance, and the complement of a MSS
    nique in several ways. It makes use of the pow-   in a SAT instance is called a CoMSS. The complete sets of
    erful concept of critical clause and of a compu-  MUS and MSS are an implicit encoding of the other [Lifﬁ-
    tationally inexpensive local search oracle to boost ton and Sakallah, 2005]. Speciﬁcally, a CoMSS is a hitting
    an exhaustive algorithm proposed by Lifﬁton and   set of the set of MUS and represent minimal sets of clauses
    Sakallah. These features can allow exponential ef- that should be dropped in order to restore consistency. In this
    ﬁciency gains to be obtained. Accordingly, experi- paper, we are interested in exhaustive approaches to compute
    mental studies show that this new approach outper- these correlated concepts in the Boolean clausal framework.
    forms the best current existing exhaustive ones.
                                                        Recently, several approaches have been proposed to ap-
                                                      proximate or compute MUS and MSS, both in the Boolean
1  Introduction                                       framework and for other types of constraints. Some of them
                                                      concern speciﬁc classes of clauses or remain tractable for
This last decade, the SAT problem, namely the issue of check- small instances, only. Among them, let us mention the ap-
ing whether a set of Boolean clauses is satisﬁable or not, has proach in [Bruni, 2005], where it is shown how a MUS can
received much attention from the AI research community. In- be extracted in polynomial time through linear programming
deed, SAT appears to be a cornerstone in many domains, like techniques for clauses exhibiting a so-called integral prop-
e.g. nonmonotonic reasoning, automated reasoning, model- erty. However, only restrictive classes of clauses obey such a
based diagnosis, planning and knowledge bases veriﬁcation property (mainly Horn, renamable Horn, extended Horn, bal-
and validation. However, only knowing that a SAT instance anced and matched ones). Let us also mention [B¨uning, 2000;
is unsatisﬁable is often not satisfactory since we might prefer Davydov et al., 1998; Fleischner et al., 2002], which are other
knowing what goes wrong with the instance when this latter important studies in the complexity and the algorithmic as-
one is expected to be satisﬁable.                     pects of extracting MUS for speciﬁc classes of clauses. In
  In this respect, the MUS (Minimally Unsatisﬁable Subfor- [Bruni, 2003], an approach is proposed that approximates
mula) concept can be crucial since a MUS can be seen as an MUS by means of an adaptative search guided by clauses
irreducible cause for infeasibility. Indeed, a MUS is an un- hardness. In [Zhang and Malik, 2003] a technique is de-
satisﬁable set of clauses that is such that any of its subsets scribed, that extracts MUS by learning nogoods involved in
is satisﬁable. It thus provides one explanation for unsatisﬁa- the derivation of the empty clause by resolution. In [Lynce
bility that cannot be made shorter in terms of the number of and Marques-Silva, 2004], a complete and exhaustive tech-
involved clauses. Restoring the satisﬁability of an instance nique to extract smallest MUS is introduced. In [Oh et al.,
cannot be done without ﬁxing all its MUS.             2004], a DPLL-oriented approach has been presented that is
  Unfortunately, a same instance can exhibit several MUS. based on a marked clauses concept to allow one to approxi-
Actually, the number of these MUS can be exponential since mate MUS. In [Gr´egoire et al., 2006a], a heuristic-based in-
                                n/2
a n-clauses SAT instance can exhibit Cn MUS in the worst complete approach to compute MUS has been introduced,
case. Moreover, computing MUS is intractable in the gen- which outperforms competing ones from a computational
eral case. Indeed, checking whether a set of clauses is a point of view.
MUS or not is DP-complete [Papadimitriou and Wolfe, 1988] Interestingly, in [Gr´egoire et al., 2006b] the same authors
and checking whether a formula belongs to the set (clutter) have introduced a concept of inconsistent cover to circum-
                                                 p
of MUS of an unsatisﬁable SAT instance or not, is in Σ2 vent the possible intractable number of MUS, and presented

                                                IJCAI-07
                                                  2300a technique to compute such covers. Roughly, an inconsis- of Boolean variables, noted a, b, c,etc. The∧, ∨, ¬ and
tent cover of an unsatisﬁable SAT instance represents a set ⇒ symbols represent the standard conjunctive, disjunctive,
of MUS that covers enough independent causes of inconsis- negation and material implication connectives, respectively.
tency that would allow the instance to regain consistency if Formulas and clauses will be noted using upper-case let-
they were repaired. Although an inconsistent cover does not ters such as C. Sets of formulas will be represented using
provide us with the set of all MUS that may be present in a Greek letters like Γ or Σ. An interpretation is a truth assign-
formula, it does however provide us with a series of minimal ment function that assigns values from {true, false} to ev-
explanations of inconsistency that are sufﬁcient to explain and ery Boolean variable. A formula is satisﬁable when there is
potentially “ﬁx” enough causes of inconsistency in order for at least one interpretation (called model) that satisﬁes it, i.e.
the whole instance to regain consistency.             that makes it become true. An interpretation will be noted
  These latter techniques are incomplete ones in the sense by upper-case letters like I and will be represented by the set
that they do not necessarily deliver all MUS. However, in of literals that it satisﬁes. Actually, any formula in L can be
some application domains, it can be necessary to ﬁnd the represented (while preserving satisﬁability) using a set (inter-
set of all MUS, because diagnosing infeasibility is hard, if preted as a conjunction) of clauses, where a clause is a ﬁnite
not impossible, without a complete view of its causes [Lifﬁ- disjunction of literals, where a literal is a Boolean variable
ton and Sakallah, 2005]. Obviously enough, such techniques that is possibly negated. SAT is the NP-complete problem
can only remain tractable provided that the number of MUS that consists in checking whether a set of Boolean clauses is
remains itself tractable. Likewise, the number of MSS and satisﬁable or not, i.e. whether there exists an interpretation
CoMSS can be exponential in the worst case. It should be that satisﬁes all clauses in the set or not.
noted that many domains in Artiﬁcial Intelligence like belief When a SAT instance is unsatisﬁable, it exhibits at least
revision (e.g. [Bessant et al., 2001]) involve conceptual ap- one Minimally Unsatisﬁable Subformula, in short one MUS.
proaches to handle unsatisﬁability that can require the com- Deﬁnition 1. A MUS Γ of a SAT instance Σ is a set of clauses
plete sets of MUS, MSS, and CoMSS to be computed in the s.t. Γ ⊆ Σ, Γ is unsatisﬁable and ∀Δ ⊂ Γ, Δ is satisﬁable.
worst case, even when additional epistemological ingredients
like stratiﬁcation are introduced in the logical framework. Example 1. Let Σ = {a, ¬c, ¬b ∨¬a, b, ¬b ∨ c}. Σ exhibits
                                                                     {a  b ¬b ∨¬a}     {¬c b ¬b ∨ c}
  In this paper, the focus is on complete techniques. We in- two MUS, namely , ,   and    , ,       .
troduce a new complete technique to compute all MUS, MSS A dual concept is the notion of Maximal Satisﬁable Subset
and CoMSS of a SAT instance, provided obvious tractabil- (MSS) of a SAT instance.
ity limitations. It improves the currently most efﬁcient com-
                                                      Deﬁnition 2. A MSS Γ of a SAT instance Σ is a set of clauses
plete technique, namely Lifﬁton and Sakallah’one [Lifﬁton
                                                      s.t. Γ ⊆ Σ, Γ is satisﬁable and ∀Δ ⊆ (Σ \ Γ)s.t.Δ = ∅, Γ ∪
and Sakallah, 2005] (in short L&S), which in turn was shown
                                                      Δ is unsatisﬁable.
more competitive than previous approaches by Bailey and
Stuckey [Bailey and Stuckey, 2005], and by de la Banda, The set-theoretical complement of a MSS w.r.t. a SAT in-
Stuckey and Wazny [de la Banda et al., 2003],whichwere stance is called a CoMSS.
introduced in somewhat different contexts.            Deﬁnition 3. The CoMSS of a MSS Γ of a SAT instance Σ is
  Our approach exhibits two main features. First, it is a hy- given by Σ \ Γ.
bridization of the L&S complete approach with a local search
                                                                                        Σ
pretreatment. A local search technique is indeed used as an Example 2. Let us consider the formula from the previous
                                                              Σ                  {b} {¬c   } {¬c, ¬b∨¬a}
oracle to ﬁnd potential CoMSS of the SAT instance, which example. exhibits ﬁve CoMSS: ,  ,a ,           ,
                                                      {¬b ∨ c, ¬b ∨¬a}    {¬b ∨ c, a}
are themselves hitting sets of MUS. We show that such a hy-           and          .
bridization can yield exponential efﬁciency gains. Second, As shown by several authors [Lifﬁton and Sakallah, 2005],
the efﬁciency of the approach relies on the crucial concept of these concepts are correlated. Mainly, a CoMSS contains at
critical clause, which appears to be a powerful ingredient of least one clause from each MUS. Actually, a CoMSS is an
our technique to locate MUS.                          irreducible hitting set of the set of MUS. In a dual way, ev-
  The rest of the paper is organized as follows. First, the ery MUS of a SAT instance is an irreducible hitting set of
reader is provided with the necessary background about SAT, the CoMSS. Accordingly, as emphasized by [Lifﬁton and
MUS and the dual concepts of MSS and CoMSS. Then, Lif- Sakallah, 2005] although MINIMAL-HITTING-SET   is a
ﬁton and Sakallah’s exhaustive approach is brieﬂy presented. NP-hard problem, irreducibility is a less strict requirement
In Section 4, we show how this technique can be valuably hy- than minimal cardinality. Actually, a MUS can be generated
bridized with a local search pretreatment, making use of the in polynomial time from the set of CoMSS.
critical clause concept. It is shown how this pretreatment can
be theoretically valuable from a computational point of view. 3 Lifﬁton and Sakallah’s Exhaustive
In Section 5, we compare this new approach with L&S.      Approach
2  Background                                         Lifﬁton and Sakallah’s approach [Lifﬁton and Sakallah,
                                                      2005] to compute all MUS (in short L&S) is based on the
In this section, we provide the reader with the basic back- strong duality between MUS and MSS. To the best of our
ground about SAT, MUS, MSS and CoMSS.                 knowledge, it is currently the most efﬁcient one. First it
  Let L be the Boolean logical language built on a ﬁnite set computes all MSS before it extracts the corresponding set of

                                                IJCAI-07
                                                  2301MUS. Here, the focus is on L&S ﬁrst step since we shall im- Algorithm 1: Local Search approximation
prove it and adopt the second step as such.
                                                        Input:aCNFformulaΣ    Output: Set of candidate CoMSS
  L&S is integrated with a modern SAT solver and takes ad-
                         i        C    x ∨ ... ∨ x    1 begin
vantage of it. Roughly, every th clause i = 1    m    2    candidates ←− ∅ ;                 #fail ←− 0 ;
of the SAT instance is augmented with a negated clause se- 3 I ←− generate random interpretation() ;
                                                                #
lector variable yi to yield Ci = x1 ∨ ... ∨ xm ∨¬yi. While 4 while ( fail < PRESET #FAILURES AUTHORIZED) do
                                                                            ←−
solving these new clauses, assigning yi to false has the effect 5 newcandidates FALSE ;
                                                                   =1
of disabling or removing Ci from the instance. Accordingly, 6  for j  to #FLIPS do
                                                                     Δ
a MSS can be obtained by ﬁnding a satisfying assignment 7         Let  be the set of falsiﬁed clauses by I ;
                                                      8           if ∀C ∈ Δ, C is critical
with a minimal number of yi variables assigned false.The
                                                      9           and Δ is not implied in candidates then
algorithm makes use of a sliding objective approach allow-
                                                      10             removeAllSetImplied(Δ,candidates);
ing for an incremental search. A bound on the number of 11           candidates ←− Δ  ∪ candidates ;
y
 i thatmaybeassignedtofalse  is set. For each value of 12            newcandidates ←− TRUE ;
the bound, starting at 0 and incrementing by 1, an exhaustive
                                                      13          ﬂip(I);
search is performed for all satisﬁable assignments to the aug-
                                                     14       if not(newcandidates) then #fail ←− #fail +1;
mented formula Ci , which will ﬁnd all CoMSS having their
size equal to the bound. Whenever one solution is found, it is 15 return candidates ;
recorded, and a corresponding clause forcing out that solution 16 end
(and any supersets of it) is inserted. This blocking clause is a Algorithm 2: The HYCAM algorithm
               y
disjunction of the i variables for the clauses in that CoMSS. Input:aCNFformulaΣ      Output:AllMSSofΣ
  Before beginning the search with the next bound, the al- 1 begin
gorithm checks that the new instance augmented with all the 2 cand ←− LS approximation(Σ);      k ←−  0 ;
blocking clauses is still satisﬁable without any bound on the 3 Σy ←− addSelectorClauses(Σ); MSS  ←− ∅ ;
yi variables. If this formula is unsatisﬁable, the entire set of 4 while SAT(Σy) do
CoMSS has been found and the algorithm terminates.    5        removeAllSetImplied({Σ\C|C ∈ MSS},cand);
  The second part of the algorithm computes the complete set 6 Σy ←− addBlockingClausesOfSize(k,cand);
                                                      7        MSS  ←− MSS   ∪{Σ\C|C  ∈ cand and |C| = k} ;
of MUS from the set of CoMSS in a direct way. The approach          ←−      ∪                Σ
that we shall introduce will include this second step as such. 8 MSS   MSS    SAT with bound(k, y );
                                                      9        k ←− k +1;
4  Local Search and Critical Clauses                  10   return MSS ;
                                                      11 end
In this section, it is shown how the aforementioned exhaustive
search algorithm can be improved in a dramatic manner by possible, based on the intuitive heuristics that local search of-
hybridizing it with an initial local search step, which provides ten converges towards local minima, which could translate
valuable oracles for the subsequent exhaustive search process. possibly good approximations of MSS. A straightforward ap-
We shall call the new approach HYCAM (HYbridization for proach would consist in recording for each visited interpre-
Computing All Mus).                                   tation the set of unsatisﬁed clauses. Obviously enough, we
  First, let us motivate our approach in an intuitive manner. do not need to record supersets of already recorded candidate
Clearly, a (fast) initial local search run for satisﬁability on the CoMSS since they cannot be actual CoMSS as they are not
initial instance might encounter some actual MSS. Whenever minimal with respect to set-theoretic inclusion. More gen-
this phenomenon happens, it can prove valuable to record erally, we have adapted the technique proposed by Zhang in
the corresponding CoMSS in order to avoid computing them [Zhang, 2005] to sets of clauses in order to record the cur-
during the subsequent exhaustive search. Moreover, rather rently smaller candidate CoMSS among the already encoun-
than checking whether we are faced with an actual MSS or tered series of sets of unsatisﬁed clauses. Now, crucial in-
not, it can prove useful to record the corresponding candi- gredients in our approach are the concepts of once-satisﬁed
date CoMSS that will be checked later during the exhaustive and critical clauses. The latter concept has already proved
search. Obviously enough, we must study which interpreta- valuable for locating MUS and inconsistent covers using an
tions encountered during the local search process yield can- incomplete technique based on local search [Gr´egoire et al.,
didate MSS and criteria must be deﬁned in order to record 2006a; 2006b].
a limited number of potentially candidate CoMSS only. In                  C
this respect, a concept of critical clause will prove extremely Deﬁnition 4. A clause is once-satisﬁed by an interpreta-
                                                      tion I iff exactly one literal of C is satisﬁed by I. A clause
valuable in the sense that it allows us to state necessary condi- C                     I               I
tions for being a CoMSS that can be checked quickly. When that is falsiﬁed by the interpretation is critical w.r.t.
                                                      iff the opposite of each literal of C belongs to at least one
all the remaining candidate CoMSS are recorded, the incre-                I
mental approach by Lifﬁton and Sakallah allows us to exploit once-satisﬁed clause by .
this information in a very valuable and efﬁcient way. Let us Intuitively, a critical clause is thus a falsiﬁed clause that re-
describe this in a more detailed manner.              quires at least another one to be falsiﬁed in order to become
  A local search algorithm is thus run on the initial SAT in- satisﬁed, performing a ﬂip. Property 1 shows how this con-
stance. The goal is to record as many candidate CoMSS as cept allows us to eliminate wrong candidate CoMSS.

                                                IJCAI-07
                                                  2302                                                                                  ¬y
                C  (a ∨¬c)                                        augmented by the  i negated clause selector variables. As-
                 3:                                               sume also that the local search performed by HYCAM pro-
                C1:(b ∨ c)                                        vides 4 candidate CoMSS: {C5}, {C3,C2}, {C0,C1,C2}
              C  (a ∨¬b ∨ c)                 C   (¬a ∨ b ∨¬d)     and {C3,C8,C10}.
               11:             C  (¬a ∨¬b)     10:
             C  (¬a ∨ b ∨¬c)     5:                                 If the branching variables are chosen based on the lexical
               9:                            C12:(a ∨¬b ∨¬d)
                                                                  order, then a and b are assigned to true and C5 is falsiﬁed.
                                 C2:(a ∨ b)       C0:(d)          Thus, L&S tries to prove that this clause forms a CoMSS,
                                                                  which requires a NP-complete test (because it has to ﬁnd a
                                                                          Σ\{¬a ∨¬b}∪{a, b}
                               C4:(¬b ∨¬e)                        model of                   ). On the contrary, when HY-
                                                                                              y
                                 C  (a ∨ e)                       CAM is run, the blocking clause 5 is added before the ﬁrst
                                  6:                              iteration of the complete algorithm is performed, since the lo-
                               C7:(¬a ∨¬e)                        cal search has already delivered this CoMSS. In consequence,
                                                                       a     b           true
                                 C8:(b ∨ e)                       when   and  are assigned   , the DPLL-algorithm back-
                                                                  tracks immediately as the {y5, ¬y5} unsatisﬁable set has been
                                                                  obtained, without requiring any further NP-complete test.
                         Figure 1: MUS of Example 3                 Similarly, the introduction of additional clause selector
                                                                  variables by HYCAM   can reduce the number of CoNP-
                          Σ                        I
            Property 1. Let be a SAT instance and let be an inter- complete tests. For example, let us assume that e is the ﬁrst
                        Γ                     Σ
            pretation. Let be a non-empty subset of s.t. all clauses of branching variable, that e is assigned falseand that the next
            Γ                I                          Γ
              are all falsiﬁed by . When at least one clause of is not variables are selected according to the lexical order. When
                       I     Γ                Σ
            critical w.r.t. ,then is not a CoMSS of .             a and b are assigned true, L&S tries to prove that {C5} is a
            Proof. By deﬁnition, when a clause Cf of Γ is not critical CoMSS. Since ¬e is tautological consequence of Σ\{¬a ∨
            w.r.t. I, there exists at least one literal c ∈ Cf whose truth- ¬b}∪{a, b}, no model exists for Σ\{¬a ∨¬b}∪{a, b, ¬e}.
            value can be inversed (i.e. ﬂipped) without falsifying any Clearly, such a test is in CoNP. Thanks to the previously de-
            other clause of Σ. Accordingly, Γ is not minimal and can- livered candidate CoMSS, HYCAM avoids this part of the
            not be a CoMSS of Σ.                                  search space to be explored. Indeed, since we know that {C5}
              In practice, testing whether all falsiﬁed clauses are critical is a CoMSS, when a and b are assigned true,nofurtherCoNP
            or not can be performed quickly and prevents many sets of tests are performed with respect to this partial assignment.
            clauses to be recorded as candidate CoMSS. Using these fea- In fact, from a computational point of vue, the preliminary
            tures, the local search run on the initial SAT instance yields a non-expensive local search eliminates nodes in the search
            series of candidate CoMSS. This information proves valuable tree, avoiding both NP and CoNP tests.
            and allows us to boost L&S complete search.
              L&S is incremental in the sense that it computes CoMSS of 5 Experimental Evaluation
            increasing sizes, progressively. After n iterations have been
            performed, all CoMSS of cardinality lower or equal than n HYCAM has been implemented and compared to L&S from
            have been obtained. Accordingly, if we have recorded candi- a practical point of view. For both algorithms, the com-
            date CoMSS containing n +1clauses, and if they are not su- plete search step is based on the use of MiniSat [E´en and
            persets of already obtained CoMSS, we are sure that they are S¨orensson, 2004], which is currently one of the best modern
            actual CoMSS. In this respect, we do not need to search them, SAT solvers. As a case study, we used Walksat [Kautz and
            and their corresponding blocking clauses can be inserted di- Selman, 2004] for the local search pretreatment. The number
            rectly. Moreover, we do not need to perform the SAT test at of ﬂips and tries of Walksat is related to the number of candi-
            the end of the n-th iteration, since we are then aware of the date CoMSS already found. For each try, a small number of
            existence of larger CoMSS.                            ﬂips is performed. If no new candidate is found during a try
              It is also easy to show that the insertion of these block- then a counter is incremented. When this counter exceeds a
            ing clauses can allow both NP-complete and CoNP-complete threshold (experimentally set to 30), we consider that no new
            tests to be avoided. Let us illustrate this on an example. candidate could be found by the local search. This way to end
                                                                  the local search pretreatment offers a good trade-off between
            Example 3. Let Σ be the following unsatisﬁable SAT in-
                                                                 the number of candidates found and the time spent. Besides,
            stance and let Σ be the corresponding augmented SAT in-
                                                 y                for all experiments, the time consumed by the local search
            stance⎧ using L&S clauses selector variables i.       step was less than 5% of the global time. All our experimen-
                ⎪C0  :(d)          C1 :(b ∨ c)     C2:(a ∨ b)
                ⎪                                                 tal studies have been conducted on Intel Xeon 3GHz under
                ⎨C3  :(a ∨¬c)      C4 :(¬b ∨¬e)    C5:(¬a ∨¬b)    Linux CentOS 4.1. (kernel 2.6.9) with a RAM memory size
            Σ=    C6 :(a ∨ e)      C7 :(¬a ∨¬e)    C8:(b ∨ e)     of 2Go. In the following, a time-out limit has been set to 3
                ⎪
                ⎩⎪C9 :(¬a ∨ b ∨¬c) C10:(¬a ∨ b ∨¬d)               CPU hours.
                  C11:(a ∨¬b ∨ c)  C12:(a ∨¬b ∨¬d)                  First, in Table 1a, we report experimental results about the
              Σ is an unsatisﬁable SAT instance made of 13 clauses and computation of MSS on pigeon-hole and xor-chains bench-
            making use of 5 variables. It exhibits 3 MUS, which are il- marks, which are globally unsatisﬁable in the sense that re-
            lustrated in Figure 1, and admits 19 MSS. Assume that both moving any one of their clauses makes the instance become
            L&S and HYCAM    are run on this instance. Its clauses are satisﬁable. Obviously enough, such instances exhibit a num-

                                                            IJCAI-07
                                                              2303                     (a)                                                    (b)
                      #CoMSS   L&S   HYCAM                                        #CoMSS    L&S  HYCAM
 Inst.  (#v,#c) #MSS                              Instance         (#v,#c) #MSS
                     cand. act. (sec.) (sec.)                                    cand. act. (sec.) (sec.)
 hole6  (42,133) 133 133   133 0.040  0.051       rand net40-25-10 (2000,5921) 5123 4318 2729 893  197
 hole7  (56,204) 204 204   204  0.75   0.33       rand net40-25-5 (2000,5921) 4841 6950 598 650    174
 hole8  (72,297) 297 293   293  33     1.60       rand net40-30-10 (2400,7121) 5831 3458 2405 1748 386
 hole9  (90,415) 415 415   415  866     30        rand net40-30-1 (2400,7121) 7291 4380 662 1590   1325
 hole10 (110,561) 561 559  559 7159    255        rand net40-30-5 (2400,7121) 5673 2611 2507 2145  402
 x1 16  (46,122) 122 122   122 0.042  0.041       ca032          (558,1606) 1173 1159  1159  4      1
 x1 24  (70,186) 186 186   186  7.7    0.82       ca064          (1132,3264) 2412 2324 2263  59     3
 x1 32  (94,250) 250 241   241  195     28        ca128          (2282,6586) 4899 2878 2422 691     18
 x1 40 (118,314) 314 314   314 2722    486        ca256         (4584,13236) 9882 9553 9064 t.o.   277
                                                  2pipe          (892,6695) 3571 2094  1849 130     36
 • Inst., Instance: benchmark name                2pipe 1 ooo    (834,7026) 3679 1822  1587  52     30
 • (#v,#c): numbers of variables and clauses      2pipe 2 ooo    (925,8213) 5073 2286  1825 148     61
 • #MSS: number of MSS of the SAT instance        3pipe 1 ooo   (2223,26561) 17359 7327 3481 5153  2487
 • #CoMSS cand., act.: numbers of candidate and actual am 5 5    (1076,3677) 1959 3250  65   68     57
                   CoMSS exhibited by HYCAM local c432           (389,1115) 1023 1019  1019  4      1
                   search pretreatment respectively c880         (957,2590) 2408 2141  1866  28     3
 • L&S: time in seconds for Lifﬁton and Sakallah’s algorithm bf0432-007 (1040,3668) 10958 3332 2136 233 98
 • HYCAM: time in seconds for HYCAM               velev-sss-1.0-cl (1453,12531) 4398 2987 2154 1205 513
        Table 1: L&S vs. HYCAM on globally unsatisﬁable instances (a) and on various difﬁcult SAT instances (b)

ber of CoMSS equals to their number of clauses, and the size For instance, L&S was unable to compute all MSS of the
of any of their CoMSS is one. A signiﬁcant time gap can php-012-011 instance within 3 hours CPU time, and could
be observed in favor of HYCAM. The efﬁciency gain ratio is thus not discover its single MUS. HYCAM extracted it in
even more signiﬁcant when the size of the instance increased. 2597 seconds. On all instances exhibiting unique or a non-
For these instances, the local search run often succeeds in exponential number of MUS, HYCAM was clearly more efﬁ-
ﬁnding all CoMSS, and the complete step often reduces to cient than L&S. For example, on the dlx2 aa instance, L&S
an unsatisﬁability test. On the contrary, L&S explores many and HYCAM discovered the 32 MUS within 3.12 and 0.94
more nodes in the search space to deliver the CoMSS.  seconds, respectively. Let us note that the additional time
                                                      spent to compute all MUS from the set of MSS is often very
  In Table 1b, experimental results on more difﬁcult bench-
                                                      small unless of course the number of MUS is exponential.
marks from the annual SAT competition [SATLIB, 2000] are
described. Their number of MSS is often exponential, and
computing them often remains intractable. Accordingly, we 6 Conclusions and Future Research
have limited the search to CoMSS of restricted sizes, namely Computing all MSS, CoMSS and MUS are highly intractable
we have set a size limit to 5 clauses. As our experimental re- issues in the worst case. However, it can make sense to at-
sults illustrate, HYCAM outperforms L&S. For example, let
          rand  net40-30-10                           tempt to compute them for some real-life applications. In
us consider                   . This instance contains this paper, we have improved the currently most efﬁcient ex-
5831 MSS (with the size of their corresponding CoMSS less haustive technique, namely Lifﬁton and Sakallah’s method,
than 5). L&S and HYCAM   deliver this result in 1748 and
                            ca256                     in several ways. Our experimental results show dramatic efﬁ-
386 seconds, respectively. For the instance, HYCAM    ciency gains for MSS, CoMSS and MUS extracting. One in-
has extracted 9882 MSS in less than 5 minutes whereas L&S teresting feature of the approach lies in its anytime character
did not manage to produce this result within 3 hours. Let us for computing MSS. MSS of increasing sizes are computed
note that HYCAM also delivers CoMSS made of 5 clauses gradually. Accordingly, we can put a bound on the maximum
after its computation is ended since we know that all sets of size of the CoMSS to be extracted, limiting the computing
5 falsiﬁed clauses recorded by the local search run and that resources needed to extract them. To some extent, both L&S
are not supersets of the obtained smaller CoMSS are actually and HYCAM prove more adapted to extract complete sets of
also CoMSS.                                           MSS and CoMSS than complete sets of MUS. Indeed, the
  In Table 2, experimental results on hard instances to com- procedure involves computing MSS (and thus CoMSS) ﬁrst.
pute the complete set of MSS and MUS are reported. As In this respect, we agree with Lifﬁton and Sakallah that an
explained above, both L&S and HYCAM approaches require interesting path for future research concerns the study of how
all MSS to be obtained before MUS are computed. By allow- MUS could be computed progressively from the growing set
ing complete sets of MSS to be delivered in a shorter time, of extracted MSS.
HYCAM   allows the complete set of MUS to be computed   Many artiﬁcial intelligence research areas have studied var-
for more instances and in a faster manner than L&S does. ious problems involving the manipulation of MUS, MSS and
Obviously enough, when the number of MSS or MUS are   CoMSS, like model-based diagnosis, belief revision, incon-
exponential, computing and enumerating all of them remain sistency handling in knowledge and belief bases, etc. These
intractable.                                          studies are often conducted from a conceptual point of view,

                                                IJCAI-07
                                                  2304