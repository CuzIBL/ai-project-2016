                           Updating     Action   Domain     Descriptions∗

                     Thomas   Eiter, Esra  Erdem,   Michael  Fink,  and  Jan´ Senko
           Institute of Information Systems, Vienna University of Technology, Vienna, Austria
                           Email: (eiter | esra | michael | jan)@kr.tuwien.ac.at


                    Abstract                          Note that she does not know how a remote control works (e.g.,
                                                      she does not know the effect of pushing the power button on
    How  can an intelligent agent update her knowl-   the remote control). Suppose that later she obtains the fol-
    edge base about an action domain, relative to some lowing information, Q, about remote controls:
    conditions (possibly obtained from earlier observa- 1. If the power is on and the TV is off, pushing the power
    tions)? We study this question in a formal frame-     button on the remote control turns the TV on.
    work for reasoning about actions and change, in
    which the meaning of an action domain descrip-      2. If the TV is on, pushing the power button on the remote
    tion can be represented by a directed graph whose     control turns the TV off.
    nodes correspond to states and whose edges corre- A desired condition, C, for the effective use of this TV system
    spond to action occurrences. We deﬁne the update  is the following:
    of an action domain description in this framework,    Pushing the power button on the remote control is al-
    and show among other results that a solution to this  ways possible.
    problem can be obtained by a divide-and-conquer
    approach in some cases. We also introduce meth-   If Q is added to D, then condition C is not satisﬁed: when
    ods to compute a solution and an approximate solu- the power and the TV are on, pushing the power button on the
    tion to this problem, and analyze the computational remote control is not possible, since Item 2 of Q and Item 3
    complexity of these problems. Finally, we discuss of D above contradict. The question is then how the agent
    techniques to improve the quality of solutions.   can update D by Q relative to C.
                                                        We  describe domains of actions, like D above, in a frag-
                                                      ment of the action language C [Giunchiglia and Lifschitz,
1  Introduction                                       1998], by “causal laws.” For instance, the direct effect of
                                                      the action PushPBTV stated in Item 1 of D in the example
This paper discusses how an intelligent agent can modify her above is described by the causal law
knowledge of the world, subject to some given conditions,
                                                         caused PowerON  after PushPBTV  ∧ ¬PowerON  ,
in particular, when some new knowledge about the world is
added. The given conditions can be domain-dependent (e.g., which expresses that the action PushPBTV causes the value
assertions obtained from earlier observations), or domain- of the ﬂuent PowerON to change from false to true; the in-
independent (e.g., general properties of a knowledge base). direct effect of this action stated in Item 3 of D is described
The goal is to obtain a consistent knowledge base with mini- by the causal law
mal changes only to a variable part of the existing knowledge      caused TvON  if PowerON ,          (1)
base such that the given conditions are satisﬁed.
  We study the problem of knowledge base updates, brieﬂy which expresses that if the ﬂuent PowerON is caused to be
described above, in the context of reasoning about actions and true, then the ﬂuent TvON is caused to be true as well. An ac-
change, so the agent’s knowledge base is about domains of tion (domain) description is partitioned into two: Du (invari-
actions. For instance, consider an agent having the following able) and Dm (variable). The meaning of an action descrip-
knowledge, D, about a TV with remote control:         tion can be represented by a “transition diagram”—a directed
                                                      graph whose nodes correspond to states and whose edges cor-
 1. If the power is off, pushing the power button on the TV respond to action occurrences.
    turns the power on.                                 We  describe given conditions, like C above, in an action
 2. If the power is on, pushing the power button on the TV query language, similar to R [Gelfond and Lifschitz, 1998],
    turns the power off.                              by “queries”. For instance, condition C above can be de-
                                                      scribed by the query
 3. The TV is on whenever the power is on.
                                                                    executable {PushPBRC }.           (2)
 4. The TV is off whenever the power is off.
                                                        The main contributions of this paper brieﬂy are as follows:
  ∗
   Work supported by the Austrian Science Fund (FWF) grant • Given an action description D = (Du, Dm), a set Q of
P16536-N04 and the European Commission IST programme grants causal laws, and a set C of conditions, what is an update of
FET-2001-37004 WASP and IST-2001-33123 CologNeT.      D by Q relative to C? We answer this question in Section 3.   {P ushP BRC }                      {P ushP BRC }    caused PowerON  after PushPBTV     PowerON
                   {P ushP BT V }                                                      ∧ ¬
   {}                                         {}
              {P ushP BT V , P ushP BRC }              caused ¬PowerON   after PushPBTV ∧ PowerON
                                                       caused TvON  if PowerON
     P owerON                        ¬P owerON         caused ¬TvON  if ¬PowerON
     T vON                           ¬T vON            inertial PowerON , ¬PowerON
                                                       inertial TvON , ¬TvON

              {P ushP BT V , P ushP BRC }                         Figure 2: An action description.
                   {P ushP BT V }

            Figure 1: A transition diagram.           where L and G are as above, and U is a propositional com-
                                                      bination of ﬂuent names and action names. In (3) and (4) the
                                                      part if G can be dropped if G is True.
• Given an action description D = (Du, Dm), a set Q of  An action description is a set of causal laws. For instance,
causal laws, and a set C of conditions, consider the prob- the knowledge base about a TV system, D, of the agent in the
lem of computing an update of D by Q relative to C. We previous section, can be described by causal laws in Figure 2.
                                             P
show that this problem is difﬁcult in general (both Σ3 - and Thereby, an expression of the form:
 P                                              P
Π3 -hard), and that already checking a given solution is Π3 -            inertial P, ¬P ,
complete. We also show that, under some conditions, these
two problems are easier (Section 5).                  where P is a ﬂuent name stands for the dynamic laws
• We provide conditions under which computing a solution
to the problem above can be structurally decomposed. For in-        caused P if P after P ,
stance, if the inputs of the problem satisfy the disjointness       caused ¬P if ¬P after ¬P ,
property, a divide-and-conquer approach is feasible (Sec- describing that the value of the ﬂuent P stays the same unless
tion 4). We introduce methods to compute solutions and to some action changes it.
compute “near-solutions” approximating them (Section 6). The meaning of an action description can be represented by
  Variations of the problem of updating knowledge bases a transition diagram. Let D be an action description with a
have been studied in the AI literature, e.g., [Winslett, 1990; signature L = hF, Ai. Then the transition diagram hS, V, Ri
Katsuno and Mendelzon, 1991; Pereira et al., 1991; Li and described by D is deﬁned as follows:
Pereira, 1996; Liberatore, 2000; Eiter et al., 2002; Sakama                                F
and Inoue, 2003]. The problem addressed in this paper is (i) S is the set of all interpretations s of such that, for
more general (see Section 7 for a more detailed comparison). every static law (3) in D, s satisﬁes G ⊃ L,
                                                       (ii) V (P, s) = s(P ),
2  Preliminaries
                                                      (iii) R is the set of all triples hs, A, s0i such that s0 is the only
Transition diagrams. We start with a (propositional) ac-  interpretation of F which satisﬁes the heads L of all
                              F
tion signature that consists of a set of ﬂuent names, and a                             0
set A of action names. An action is a truth-valued function – static laws (3) in D for which s satisﬁes G, and
on A, denoted by the set of action names that are mapped to t. – dynamic laws (4) in D for which s0 satisﬁes G and
  A (propositional) transition diagram of an action signature s ∪ A satisﬁes U.
L =  hF, Ai consists of a set S of states, a function V :
                                 A                    The laws included in (iii) above are those that are applica-
F×S  →  {f, t}, and a subset R ⊆ S ×2 ×S of transitions. ble to the transition from s to s0 caused by executing A. For
We say that V (P, s) is the value of P in s. The states s0 such instance, the transition diagram described by the action de-
that hs, A, s0i ∈ R are the possible results of the execution of scription of Figure 2 is presented in Figure 1. We say that an
the action A in the state s. We say that A is executable in s, action description is consistent if it can be represented by a
if at least one such state s0 exists.                 transition diagram with nonempty state set.
  A transition diagram can be thought of as a labeled directed In the following we suppose that an action description D
graph. Every state s is represented by a vertex labeled with consists of two parts: Du (unmodiﬁable causal laws) and Dm
the function P 7→ V (P, s) from ﬂuent names to truth values. (modiﬁable causal laws). Therefore, we sometimes denote an
Every triple hs, A, s0i ∈ R is represented by an edge lead- action description D by the pair (Du, Dm).
ing from s to s0 and labeled A. An example of a transition
diagram is shown in Figure 1.                         Action query languages. To talk about observations of the
                                                      world, or assertions about the effects of the execution of ac-
Action description languages. We consider a subset of tions, we use an action query language similar to R [Gel-
the action description language C [Giunchiglia and Lifschitz, fond and Lifschitz, 1998]. We consider a language with static
1998] that consists of two kinds of expressions (called causal queries of one of the two forms:
laws): static laws of the form
                                                                             holds F ,                (5)
                   caused L if G,               (3)                          always F ,               (6)
where L is a literal (an expression of the form P or ¬P , where
P is a ﬂuent name) and G is a propositional combination of where F is a propositional combination of ﬂuent names, and
ﬂuent names, and dynamic laws of the form             dynamic queries of the form:

               caused L if G after U,           (4)               necessarily F after A0; . . . ; An, (7)where F is a propositional combination of ﬂuent names, and • Possible effects of actions: A sequence A0, . . . , An of ac-
each Ai (0 ≤ i ≤ n) is an action. A query is a propositional tions may have certain effects in a given context:
combination of both kinds of expressions.
  As for the semantics, let T = hS, V, Ri be the transition holds G ⊃ ¬necessarily ¬F after A0; . . . ; An,
diagram representing an action description D. A history of T like in (10). Here F describes the effects and G the context.
of length n is a sequence                             Queries of this form allow us to express, e.g., the observation
             s0, A1, s1, . . . , sn−1, An, sn   (8)   that executing hA0, . . . , Ani in some initial state described
                                                      by G leads to a state where F holds (e.g., as for (10), that the
where each hsi, Ai+1, si+ii (0 ≤ i < n) is a transition in R.
The satisfaction relation between a state s in S and a query q TV is on). Formula G may describe a collection of states.
relative to D (denoted D, s |= q) is deﬁned as follows:
 (i) if q is a static query (5), it is satisﬁed at s if the interpre- 3 Problem Description
    tation P 7→ V (P, s) satisﬁes F ;                 We deﬁne an Action Description Update (ADU) problem by
(ii) if q is a static query (6), it is satisﬁed at s if, for each state an action description D = (Du, Dm), a set Q of causal laws,
    s0 ∈ S, the interpretation P 7→ V (P, s0) satisﬁes F ; and a set C of queries, all with the same signature. We say
                                                      that an action description D0 accomplishes an (action de-
(iii) if q is a dynamic query (7), it is satisﬁed at s if, for every scription) update of D by Q relative to C, if
    history s = s0, A0, s1, . . . , s 1, A , s of T of length
                            n−    n  n                 (i) D0 is consistent,
    n + 1, the interpretation P 7→ V (P, sn) satisﬁes F ;
                                                                      0
(iv) for any other q, satisfaction is deﬁned by the truth tables (ii) Q ∪ Du ⊆ D ⊆ D ∪ Q,
    of propositional logic.                           (iii) D0 |= C,
We remark that holds F ≡ ¬holds ¬F , but not so for a static (iv) there is no consistent action description D00 such that
query of form (6), i.e., always F 6≡ ¬always ¬F .         D0 ⊂ D00 ⊆ D ∪ Q, and D00 |= C.
                                 D
  For a set C of queries, we denote by SC the set of all states 0
                                          D           Such a D is called a solution to the ADU problem (D, Q, C).
s ∈ S such that D, s |= q for every q ∈ C, and by S¬C the set Condition (i) expresses that an action description update
    D                                           D
S \SC . We say that D entails C (denoted D |= C) if S = SC . modeling a dynamic domain, such as the TV system in Sec-
For instance, a set of queries containing the query   tion 1, must have a state. According to Condition (ii), new
        necessarily ¬TvON after {PushPBRC }           knowledge about the world and the invariable part of the ex-
                                                      isting action description are kept, and causal laws in the vari-
is not entailed by the action description in Figure 2, because able part are considered to be either “correct” or “wrong”,
the query above is not satisﬁed at the state where both ﬂuents and in the latter case simply disposed.
TvON  and PowerON   are mapped to t. On the other hand, Condition (iii) imposes semantical constraints C on D0,
this action description entails the queries:          which comprise further knowledge about the action domain
            always P owerOn  ≡ TvON  ,          (9)   gained, e.g., from experience. It is important to note that C
   holds PowerON  ∧ TvON  ⊃                           can be modiﬁed later for another action description update.
                                               (10)
       ¬necessarily ¬TvON after {PushPBTV }.          If Q is a revision (containing more precise knowledge about
                                                      the domain), then reasonably C should contain all conditions
Queries allow us to express various pieces of knowledge corresponding to observations made about the domain, while
about the domain (possibly acquired from earlier observa- other conditions may be kept or dropped; on the other hand,
tions), like the following.                           if Q is a change of the world per se, then conditions corre-
• Existence of certain states: There exists a state of the sponding to observations might be dropped.
world where a formula F holds (assuming consistency of D): Finally, Condition (iv) applies Occam’s Razor to select so-
                   ¬always ¬F.                        lutions as simple as possible. Simplicity is measured by a
                                                      smallest set (in terms of inclusion) of causal laws which need
• Executability of actions: An action sequence A0, . . . , An to be dropped.
is executable at every state:                           We  call any D0 which satisﬁes (i)-(iii) a near-solution of
         ¬necessarily False after A0; . . . ; An.     the ADU problem (D, Q, C).
As in (2), this query can be abbreviated as           Example 1  For instance, take D the action description in
                                                      Figure 2, with D containing the ﬁrst four causal laws; con-
               executable A0; . . . ; A .                           m
                                 n                    sider Q to be the set containing the following two causal laws:
• Mandatory effects of actions: A sequence A0, . . . , An of
actions will always have certain effects in a given context: caused TvON after PushPBRC ∧ P owerOn ∧ ¬TvON ,
                                                       caused ¬TvON  after PushPBRC  ∧ TvON  ,
       holds G ⊃ necessarily F after A0; . . . ; An
Here F describes the effects and G the context. For instance, and let C be the set containing queries (2), (10), and
the query
                                                                    executable {PushPBTV }.
 holds TvON  ⊃ necessarily ¬TvON after {PushPBRC }
                                                      The transition diagram described by D ∪ Q is shown in Fig-
expresses that the result of executing {PushPBRC } at any ure 3. Here we can see that at the state where both PowerON
state where TvON is mapped to t is a state where TvON and TvON  are mapped to t, the action PushPBRC is not exe-
is mapped to f.  Note that queries of this form allow cutable. Therefore, D ∪Q is not a solution. In fact, a solution
us to express all possible executions of a conformant plan to the ADU problem (D, Q, C) is obtained by dropping the
hA0, . . . , Ani to reach a goal speciﬁed by F from an initial static law (1) from D ∪ Q.              2
state described by G.                                      {P ushP BRC }         0   1
                   {P ushP BT V }                     and {C , C } be partitionings of D, Q, and C, respectively,
   {}                                         {}
              {P ushP BT V , P ushP BRC }             such that (i) LD0 ∩ LD1 = ∅, (ii) LQ0 ⊆ LD0 ∧ LQ1 ⊆ LD1 ,
                                                      and (iii) LC0 ⊆ LD0 ∧ LC1 ⊆ LD1 .
     P owerON                        ¬P owerON         (i) Let Xi be a near-solution to (Di, Qi, Ci), for i = 0, 1.
     T vON                           ¬T vON               Suppose that, for i = 0, 1, Xi permits NOP if some dy-
                                                          namic query occurs negatively in C1−i. Then X0 ∪ X1
                                                          is a near-solution to (D, Q, C).
              {P ushP BT V , P ushP BRC }
                   {P ushP BT V }                     (ii) Let X  be a  near-solution to (D, Q, C), and let
                                                          {X0, X1}  be a partitioning of X such that X 0 ⊆ D0
                                                          and X1    D1. Suppose that, for i , , Xi permits
 Figure 3: Transition diagram described by D ∪ Q of Ex. 1.       ⊆                       = 0 1
                                                          NOP  if some dynamic query occurs positively in C 1−i.
                                                          Then, for i = 0, 1, Xi is a near-solution to (Di, Qi, Ci).
4  Properties  of Updates                               Informally, the permission of NOP in Theorem 1 is needed
We ﬁrst consider some basic properties of solutions to an to ensure that the transition diagrams of near-solutions to the
ADU  problem. To this end, we deﬁne the subsumption re- sub-problems can be “combined”. Here are two useful con-
lation between an action description D and a causal law, both sequences of Proposition 1:
                         F A
with the same signature L = h , i, as follows:        Corollary 4 Let (D, Q, C) be an ADU problem, and let
• A static law (3) is subsumed by D if, for every state s in {D0, D1}, {Q0, Q1}, {C0, C1} be partitionings of D, Q, C,
the transition diagram described by D, the interpretation of F respectively, satisfying Conditions (i)–(iii) of Theorem 1.
describing the state s satisﬁes G ⊃ L;                 (i) Suppose that no dynamic query occurs in C. If, for
• a dynamic law (4) is subsumed by D if, for every transi- i = 0, 1, Xi is a solution to (Di, Qi, Ci), then X0 ∪ X1
tion hs, A, s0i in the transition diagram described by D, the is a solution to (D, Q, C). Furthermore, every solution
following holds: if the interpretation of F ∪ A describing the to (D, Q, C) can be represented in this form.
state s and the action A satisﬁes U, then the interpretation                         1       1
of F describing s0 satisﬁes G ⊃ L.                    (ii) If no dynamic query occurs in C , and X is a solution
                                                          to (D1, Q1, C1) permitting NOP, then, for every solution
  A set Q of causal laws is subsumed by an action description X0 to (D0, Q0, C0), X0∪X1 is a solution to (D, Q, C).
D, if every law in Q is subsumed by D. A causal law is
tautological, if it is subsumed by every action description D. Example 2 Consider the ADU problem (D ∪ D0, Q, C),
                                                           D  Q      C                     D0
Proposition 1 (Subsumption) Let (D, Q, C) be an ADU   with  ,  , and   as in Example 1, and   consisting of
problem, such that D is consistent and D |= C. If D sub- the causal laws:
sumes Q then D ∪ Q is a solution to (D, Q, C).           inertial LightON , ¬LightON ,               (11)
  From this result, we obtain the following corollaries. caused LightON after SwitchLight ∧ ¬LightON , (12)
                                                         caused ¬LightON  after SwitchLight ∧ LightON . (13)
Corollary 1 (Void Update) Let (D, ∅, C) be an ADU prob-
lem. If D is consistent and D |= C, then D is the unique Since X0 = D ∪ Q \ {(1)} is a solution to (D, Q, C) (Ex-
solution to (D, ∅, C).                                ample 1), X1 = D0 is a solution to (D0, ∅, ∅), and D0 permits
Corollary 2 (Idempotence) Let (D, D, C) be an ADU prob- NOP, by Corollary 4 (ii) X0 ∪ X1 = (D ∪ D0 ∪ Q) \ {(1)}
lem, such that D is consistent and D |= C, then D is a solu- is a solution to (D ∪ D0, Q, C).          2
tion to (D, D, C).
Corollary 3 (Addition of Tautologies) Let (D, Q, C) be an 5 Computational  Complexity
ADU  problem, such that D is consistent and D |= C. If Q is An important subtask in solving ADU problems is checking
tautological, i.e., every causal law of Q is a tautology, then whether a set of queries is entailed by an action description.
D ∪ Q is a solution to (D, Q, C).
                                                      Theorem  2 Given an action description D and a set C of
                                                                                  P
Notice that a similar property fails for logic programming up- queries, deciding D |= C is (i) Π2 -complete in general, and
dates as in [Alferes et al., 2000; Eiter et al., 2002]. (ii) PNP-complete if C does not involve dynamic queries.
  We next consider a structural property of solutions and  k
near-solutions, which can be exploited for a syntactical de- Here PNP means polynomial-time with a single parallel eval-
composition of an ADU problem, in a divide-and-conquer      k
                                                      uation of calls to an NP oracle.
manner. Because of the involved semantics of transitions and Proof. (Sketch) W.l.o.g., C contains a single query c. As
causation, in general some prerequisites are needed. For any                                      D     a
                  F, A                                for the membership part of (ii), deciding whether |=
action signature L = h i, we denote by LX the part of it for a static query a of form (5) is polynomial and of form
which appears in X. We say that an action description D per-                                     c
                               s, , s0                (6) is in coNP. Hence, for a Boolean combination of such
mits NOP, if there is some transition h ∅ i in the transition queries a , . . . , a , deciding whether D, s c is feasible
diagram described by D. A query F occurs positively (resp.    1      n                     |=
                C            F                        in polynomial time with a single parallel evaluation of NP
negatively) in a set of queries if occurs in the scope of oracles. For (i), deciding whether D, s d for a given state
an even (resp. odd) number of negations, , in a query in C.                            6|=
                                  ¬                   s and a dynamic query d of form (7) is in NP. Thus D, s 6|= d
Theorem 1 (Disjointness) Let (D, Q, C) be an ADU prob- for a general query d is decidable in polynomial time with an
                                   0  1     0   1                                                NP    P
lem with signature L = hF, Ai. Let {D , D }, {Q , Q }, NP oracle, which means deciding D 6|= d is in NP = Σ2 .                            P       P
Hence, deciding D |= d is in Π2 = co-Σ2 . The hardness  1. Extend hF, Ai by a set H of k = |Dm| new ﬂuents
results follow from transformations from deciding whether (called update ﬂuents) H1, . . . , Hk;
(i) a Boolean combination of Quantiﬁed Boolean Formulas
                                                        2. label each static law (3) in Dm with a ﬂuent Hi ∈ H:
(QBFs) of the form ∃XEj , 1 ≤ j ≤ m, is true and (ii) a QBF
                                                 2
of the form ∀X∃Y E is true, respectively.                                caused L if G ∧ Hi,         (14)
  As for ﬁnding solutions, we note that deciding whether D∪ and each dynamic law (4) in D with a ﬂuent H ∈ H:
Q is a solution to an ADU problem (D, Q, C) has the same                            m              i
complexity as deciding D |= C in general. Deciding the               caused L if G after U ∧ Hi,     (15)
existence of an arbitrary solution is harder.
                                                          such that no two laws are labeled by the same ﬂuent Hi;
Theorem 3 Deciding if a given ADU problem (D, Q, C) has
                               P                        3. for each Hi labeling a law, add the dynamic law:
a solution (or a near-solution) is (i) Σ3 -complete in general,
     P
(ii) Σ2 -complete if C does not involve dynamic queries, and              inertial Hi, ¬Hi.          (16)
(iii) NP-complete if C = ∅.
                                                        Let D = (Du, Dm) be an action description and C be a set
Proof. (Sketch) Let D = Du ∪ Dm. We can guess a near-
         0                   0                        of queries with the same signature. Let E be the update de-
solution D such that Du ∪ Q ⊆ D ⊆ Du ∪ Q, along with a                                             E   E
          0                                           scription of D, with a set H of update ﬂuents. Let hS , V ,
state s for D (to witness consistency), and check D |= C for E
                                           P          R  i be the transition diagram described by E. An update
(i) and (ii) in polynomial time with the help of (i) a Σ2 -oracle                        M    H
and (ii) an NP-oracle respectively. This proves membership (ﬂuent) set for E relative to C is a subset of such that
      P      P                                            M                  E
in (i) Σ3 , (ii) Σ2 , and (iii) NP, respectively. The hardness (i) is a hitting set for S¬C (i.e., it contains for each state
results follow from transformations from deciding whether (i)  E
                                                          s ∈ S C some ﬂuent which is true at s);
a QBF of the form ∃XF is true, (ii) a QBF of form ∃Z∀XF        ¬
                                                          H   M                           E
is true, and (iii) a QBF of the form ∃Z∀X∃Y F is true. 2 (ii) \  is contained in some state in SC .
  Similarly, testing arbitrary solution candidates has higher With the notions above, we can ﬁnd a near-solution to an
complexity than testing D ∪ Q.                        ADU  problem (D, Q, C), where D = (Du, Dm), as follows:
Theorem 4 Given an ADU problem (D, Q, C) and an action  1. If D ∪ Q is consistent and D ∪ Q |= C, output D ∪ Q.
description D0, deciding whether D0 is a solution for it is 2. Otherwise, construct the update description E of D ∪ Q
    P                        P
(i) Π3 -complete in general, (ii) Π2 -complete if C does not = (Du ∪ Q, Dm).
involve dynamic queries, and (iii) coNP-complete if C = ∅. 3. Take a minimal update set M for E relative to C, if one
  Hence, even recognizing solutions is quite hard. However, exists; otherwise, take M = H.
                                P
recognizing near-solutions is easier (Π2 -complete in general, 4. Identify the set W of causal laws in Dm labeled by the
PNP-complete if C has no dynamic queries, and polynomial  elements of M.
if C = ∅). This follows easily from Theorem 2.
                                                        5. Output Du ∪ (Dm \ W ) ∪ Q.
6  Computing    Solutions                             Proposition 2 Let (D, Q, C) be an ADU problem, with D =
                                                      (D  , D ). If there is a nonempty update set for the update
With an oracle for near-solutions, we can incrementally com- u m
                                                      description of D ∪Q = (Du ∪Q, Dm) relative to C, then the
pute a solution to an ADU problem (D, Q, C) where D = method above generates a near-solution to (D, Q, C).
(Du, Dm), in polynomial time as follows:
                                                      Example 3  Consider the ADU problem (D, Q, C) presented
 1. If ((Du, Dm), Q, C) has a near-solution
            0                                         in Example 1. Note that D ∪ Q 6|= C (as explained in Ex-
      then D := ∅ else halt;                          ample 1). We obtain the following update description E of
 2. For each qi ∈ Dm = {q1, . . . , qm} do            (Du ∪ Q, Dm), which contains Du ∪ Q and the laws:
        i         0           i
      D  =  Du ∪ D ∪ {qi};  D   = {qi+1, . . . , qm};
        u                     m                        caused PowerON   after PushPBTV ∧ ¬PowerON  , H1,
      if ((Di , Di ), Q, C) has a near-solution then
           u   m                                       caused ¬PowerON   after PushPBTV ∧ PowerON  , H2,
        D0 := D0 ∪ {q };
                    i                                  caused TvON  if PowerON , H3,
                 0
 3. Output Du ∪ D .                              2     caused ¬TvON   if ¬PowerON , H4,
  By virtue of Theorems 3 and 4, no substantially better al- inertial Hi, ¬Hi (1 ≤ i ≤ 4).
gorithm of this type is likely to exist, since computing a solu-
           P       P                                  According to the transition diagram described by E,
tion is both Σ3 - and Π3 -hard, and thus needs the power of a
 P                                                              E                             H
Σ3 oracle. If a near-solution Dn for (D, Q, C) is known, we    S¬C = {PowerON  , TvON , H3} × 2 ,
                                                                E
may compute, starting from it, a solution in the manner above  S  = {{H1, H2, H4}, . . .}.
                               0                                C
(assuming Dn = {q1, . . . , qk}, set D = Dn and i = k + 1).
  Near-solutions to a given ADU problem may be nondeter- The only minimal update set for E relative to C is {H3}. We
ministically computed as in the membership part of Theo- thus remove from D ∪ Q the law labeled by H3, i.e., (1). The
rem 3, or obtained from a QBF encoding using a QBF solver. result is a near-solution and also a solution to the problem. 2
We present here a different computation method, using “up-           D
date descriptions” and “update ﬂuent sets.”           Example 4  Take   to be the action description of Exam-
                                                      ple 1, with the following causal laws added to Dm:
  Let D = (Du, Dm) be an action description with signature
 F A
h ,  i. The update description of D is the action description caused TvON after PushPBTV ∧ ¬PowerON ,
obtained from D as follows:                                caused ¬TvON  after PushPBTV  ∧ PowerON  .