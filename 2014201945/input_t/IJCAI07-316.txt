                               Handling Alternative Activities in
                   Resource-Constrained Project Scheduling Problems

                      Jurgen¨ Kuster,  Dietmar Jannach    and Gerhard Friedrich
                                    University of Klagenfurt, Austria
                     Department of Business Informatics and Application Systems
                              {jkuster, dietmar, gerhard}@iﬁt.uni-klu.ac.at

                    Abstract                            The Resource-Constrained Project Scheduling Problem
                                                      (RCPSP, see [Błazewicz et al., 1983; Brucker et al., 1999])
    In the context of operative disruption management, provides a generic and well-established framework for the
    decision support systems have to evaluate the typ- formal description of scheduling problems: Generalizing the
    ically manifold options of responding to distur-  production-speciﬁc job shop, ﬂow shop and open shop prob-
    bances: The temporal shift of activities and the al- lems, it imposes no restrictions on either the number of enti-
    location of alternative resources can be assessed by ties per resource type, the way activities are connected or the
    the application of generic scheduling frameworks  characteristics of resource requirements. Moreover, the ex-
    such as the Resource-Constrained Project Schedul- istence of various highly efﬁcient algorithms for its solution
    ing Problem (RCPSP). However, switches from one   (see [Kolisch and Hartmann, 2005]) proves that the RCPSP
    process variant to another one are usually not sup- has been and still is an area of intensive research.
    ported by the corresponding models, even though
                                                        The rescheduling part of DM problems can be solved
    they represent a common way of repairing broken
                                                      within the framework provided by the RCPSP. As regards po-
    schedules in many practical domains. In this paper,
                                                      tential process variations, however, there exist no possibilities
    we thus show how the RCPSP can be extended by
                                                      to describe alternative execution paths within the RCPSP: It
    the concept of alternative activities, making it pos-
                                                      is thus impossible to overcome a previously made decision on
    sible to model and search within alternative process
                                                      a certain process variant during optimization. To the best of
    execution paths. Beside a formal description of
                                                      our knowledge, the only approach to more ﬂexibility has been
    the conceptual extension, we show how such gen-
                                                      made in the Multi-Mode RCPSP (MRCPSP, see [Hartmann,
    eralized rescheduling problems can be solved by a
                                                      2001] for example): Through the deﬁnition of various execu-
    novel genetic algorithm and summarize the promis-
                                                      tion modes per activity, it is possible to consider changes in
    ing results of a detailed evaluation.
                                                      their durations and associated resource requirements. But it is
                                                      obvious that the concept of mode alternations is not sufﬁcient
1  Introduction                                       for the description of the entire range of potential variations.
Disruption management (DM, see [Yu and Qi, 2004; Clausen Research on DM in the context of the RCPSP has mainly
et al., 2001]) is the process of responding to an unforeseen focused on responding to disruptions by way of rescheduling:
disturbance occurring during the execution of planned and Artigues et al. [2003] propose an approach to insert an unex-
scheduled operations. It is aimed at the selection of appro- pected activity into a given schedule; Elkhyari et al. [2004]
priate repair actions which help to get back on track and to use explanations to cope with over-constrained networks in
minimize the negative impact typically associated with a dis- dynamic scheduling problems; Zhu et al. [2005] present a hy-
ruption. Two forms of interventions can be distinguished: brid mixed integer programming/constraint propagation ap-
                                                      proach to handling various classes of disruptions. In con-
  • Rescheduling corresponds to a shift of scheduled starting trast to these works, which all focus on mere rescheduling,
    times or a change in the allocation of resource entities to we herein extend the scope of available options by making
    activities. It is particularly relevant in domains where switches between different process variants possible.
    the set of operations is ﬁxed and no process variability For this purpose, we propose to extend the RCPSP by the
    is given: Production processes form a typical example. concept of alternative activities: In Section 2, the formal de-
  • A process variation corresponds to the switch from a scription of the conceptual extension and a modeling example
    previously chosen process variant to another one. This from the domain of air trafﬁc management are provided. In
    form of modiﬁcation is applied in many practical do- Section 3, we propose a novel genetic algorithm (GA) for the
    mains to insert or remove activities, to change execution solution of the problem: The speciﬁc crossover and mutation
    orders, etc.: For example project scheduling and supply- operators are discussed as well as the promising results of a
    chain management are typically characterized by the ex- detailed evaluation. Finally, Section 4 summarizes the contri-
    istence of various predeﬁned process variants.    butions of this paper.

                                                IJCAI-07
                                                  19602  A Conceptual Extension of the RCPSP                is to incorporate the concept of alternative activities into the
2.1  Alternative Activities                           framework of the RCPSP. Consequently, we propose a com-
                                                      pact and intuitive way of modeling process execution variants
We base our approach to deﬁning alternative execution paths which is independent from the underlying search procedure:
on the concept of alternative activities and activity dependen- In the Extended Resource-Constrained Project Scheduling
cies. The expressive power of these constructs is illustrated Problem (x-RCPSP), the concept of alternative activities is
by several modeling examples of typical process variations: implemented through the distinction between active and in-
  • A mode alternation corresponds to a change of the du- active activities: Only the former ones are actually consid-
    ration and the resource requirements associated with an ered in the resulting schedule. By activating and deactivating
    activity. Basically, each execution mode can be repre- activities it is possible to change the activation state of the
    sented by a separate alternative activity. If, for example, model. Note that each potential combination of active ele-
    in a sequence a, b and c three modes of b shall be dis- ments forms an individual instance of the classical RCPSP: It
    tinguished, the alternative activities b1, b2 and b3 can be is thus possible to apply well-established methods for activity
    considered instead of b.                          sequence optimization.
                                                        Formally, the x-RCPSP can be described as follows. A
  •
    For the dynamic insertion/removal of activities, the pos- process is composed of a set of potential activities A
    sibility to describe activity dependencies is required: An 0, 1, ..., a, a 1 where the ﬁrst and the last element repre-
    activity i is considered dependent on another activity j, sent abstract start and end activities: They have a duration of
    if j has to be executed whenever i is scheduled. If, for 0 and do not require any resources. Each remaining i A
    example, it shall be possible to dynamically insert an ac- has a non-negative duration di assigned. Active activities are
    tivity e into a sequence a, b and c, it is sufﬁcient to con- grouped in a subset AA, inactive activities are contained
    sider two alternatives of an arbitrary scheduled operation in the set difference AA. For the execution of activities, a
    (activity b, for example): One variant (b1) is dependent set of renewable resource types R 1, ..., r is available:
    on the execution of e whereas the other one (b2) is not. For each type k R, there exists a constant amount of ck
  • A potential order change can be described by alternative units. Various forms of activity dependency can be described
    versions of all involved process steps: One variant repre- by use of the following constructs:
    sents the original, the other one the optional position of • Precedence Constraints. The order of activities is de-
    the activity. If, for example, it shall be possible to swap scribed by use of precedence constraints: The existence
     and  in a sequence , , and , 1 and 1 correspond
    b    d            a b c    d b     d                  of pi,j states that activity i A has to be ﬁnished
    to the original, b2 and d2 to the alternative positions. at or before the start of j A . In accordance with
  • The serialization/parallelization of operations is based the distinction between active and inactive activities,
    on two alternative activities with different precedence P contains all potentially relevant constraints whereas
    relations associated: One variant is a predecessor of an- P pi,j  P    i, j   A  groups only relations in
    other activity whereas the other one is not. If, for ex- which predecessor and successor are currently active.
    ample, it shall be possible to parallelize b and c in a se- • Resource Requirements. Resource requirements de-
    quence a, b, c and d, it sufﬁces to consider two versions scribe the relation between activities and resources. Ac-
         1
    of b: b is a predecessor of c and represents the option of tivity i A requires a constant amount of qi,k units of
    serial execution, whereas b2 is not necessarily scheduled resource type k R throughout its execution. Again,
    before c and represents the option of parallel execution. two sets are distinguished: Q contains all potentially
  By applying the concept of alternative activities, both parts relevant dependencies whereas Q qi,k Q i A
of the DM problem – the selection and scheduling of oper- groups only the requirements of active activities.
ations – are combined in one single conceptual model. This Potential activation state modiﬁcations and associated de-
implies that (1) no detached process deﬁnitions need to be pendencies are described by use of the following constructs:
synchronized and that (2) particularly efﬁcient algorithms can
                                                        •
be applied for problem solving [Bart´ak, 1999].           Activity Substitutions. If xi,j is contained within the set
                                                          of potential activity substitutions X ,itrepresentsale-
2.2  The Extended Resource-Constrained Project            gal form of process variation to activate j AAfor
     Scheduling Problem                                   the deactivation of i A: j replaces i within A.
As regards the consideration of alternative activities in • Activity Dependencies/Constraints. Since the activation
scheduling problems, little research has been done so far. One or deactivation of an activity might have an impact on
of the most important approaches can be found in the area the state of other activities, M describes dependen-
                                                                                    A                M
of constraint-directed scheduling: Beck and Fox [2000] base cies between the elements of : mi,j (mi,j )
their work on the introduction of XOR-nodes as well as PEX indicates that activity j A has to be (de)activated
(Probability of Existence) variables into the constraint graph, upon the (de)activation of i A ; mi,j M indicates
and propose speciﬁc, PEX-based propagators and heuristics that j has to be deactivated upon the activation of i,and
for solving such extended problems.                       mi,j   M   indicates that j has to be activated upon the
  In contrast to their work, which aims at extending the  deactivation of i. Note that these constraints have to be
scope of constraint-directed scheduling approaches, our goal deﬁned carefully in order to avoid inconsistencies.

                                                IJCAI-07
                                                  1961  The  presented x-RCPSP  is a generalization of the
MRCPSP, which itself generalizes the classical RCPSP   Table 1: x-RCPSP Description of the Aircraft Turnaround
[Hartmann, 2001]: Any MRCPSP can be formulated as an    Set  Content
x-RCPSP. As regards the formulation of an x-RCPSP as an R    Bus, Firebrigade
MRCPSP, the limitations of MRCPSPs must be observed.    A    Start, Deb, DebB, Fue, FueP , Cat, Cle, CleR,
Such a formulation which preserves the activities, precedence Ins, Boa, End
constraints and resource constraints of the x-RCPSP is possi- P Start Deb, Start DebB, Deb   Fue,
ble if the following properties hold:                        Deb   FueP  , Deb   Cat, Deb    Cle,
                                                             Deb  CleR, DebB   Fue, DebB   FueP ,
                 x     X   x    X                               B           B           B      R
                  i,j       j,i                 (1)          Deb    Cat, Deb    Cle, Deb    Cle ,
                                                                          P
             xi,j ,xj,k X  xi,k  X              (2)          Fue Boa, Fue    End, Cat Boa, Cle
                                                                     R
        xi,j X  , pi,k P   pj,k  P                           Boa, Cle  Ins, Ins Boa, Boa End
                                                (3)     Q         1           B  2            P  1
        xi,j X  , pk,i P   pk,j  P                           Deb       Bus, Deb        Bus, Fue
                                                             Firebrigade
                      M                         (4)                  B          P        R
                                                        X    Deb Deb  , Fue Fue  , Cle Cle
  (1) It is not possible to describe one-directional mode sub- M CleR Ins, CleR Ins
stitutions in the MRCPSP. (2) Any activity execution mode
has always to be a direct substitute of all other ones. (3) Ac-
tivity replacements are only possible at exactly the same po- is inspected by the cabin crew prior to boarding. And third,
sition: No changes of the activity execution order can thus the process can be accelerated by parallelizing fueling and
be deﬁned. (4) No activity dependencies can be described boarding if the ﬁre brigade is present for supervision.
for different execution modes: It is therefore not possible to Table 1 summarizes the central elements of the correspond-
dynamically insert or remove activities.              ing x-RCPSP (particularly activity durations and resource ca-
  The result of solving the x-RCPSP is a combination of pacities are omitted) based on a simpliﬁed form of notation:
model activation state and sequence of all active activities: (1) ijstands for pi,j ,(2)inkfor qi,k n,(3)ij
A schedule S is represented as a vector of starting times for xi,j ,(4)ijfor xi,j xj,i,(5)ijfor mi,j ,
 β1,β2, ..., βn for the set of active activities A with A n. etc. Process steps are represented by the ﬁrst three letters
S is considered valid if the following criteria are fulﬁlled: of the associated activity names. Potential process variations
  • Activation State Validity. The activation state A associ- are expressed by use of alternative activities. The ﬁrst of the
                                                      available options corresponds to a mode alternation (as also
    ated with a schedule S is valid, if and only if it can be                   B
    derived from an original valid activation state through possible in an MRCPSP): Deb is characterized by reduced
    the application of the substitutions deﬁned in X , satis- time and additional resource requirements. The second op-
                              M                       tion corresponds to a combination of mode alternation and
    fying all constraints deﬁned in .                                    R
  •                        A                          activity insertion: Cle takes less time but is connected to
    Starting Times Validity. Let t be the set of activities the optional activity Ins (for cabin inspection). The third op-
    carried out at a time t. The staring times β1, ..., βn are tion corresponds to the parallelization of two process steps:
    valid if (1) βi 0 for any i A,(2)βi di βj for         P
              P                                 R     Fue   is not necessarily executed prior to boarding but has
    any pi,j    and (3) i A t qi,k ck for any k       additional resource requirements associated.
    at any t. Note that these criteria correspond to the ones
    deﬁning schedule validity in the context of the RCPSP. 3 Solving the x-RCPSP
2.3  Modeling an Exemplary Process                    The application of the x-RCPSP to DM is based on a compre-
In this section it is illustrated how the framework of the hensive model describing the baseline schedule and all valid
x-RCPSP can be applied for the formal description of realistic process variants. The following steps are performed upon the
processes. For this purpose, the aircraft turnaround –asthe occurrence of a disruption: (1) The schedule is updated ac-
process aircrafts typically go through at an airport between cordingly. (2) Based on a schedule evaluation function fS
touchdown and takeoff – is considered in a simpliﬁed ver- and the corresponding objective (minimization or maximiza-
sion (corresponding to the combination of core processes as tion), optimization is performed. Unlike in scheduling prob-
deﬁned by [Carr, 2004]): After the plane reaches its ﬁnal po- lems, where mainly the minimization of the total process ex-
sition, incoming passengers leave the aircraft (deboarding). ecution time (the so-called makespan) is of interest, common
It is then prepared for the next ﬂight during fueling, cleaning goals in DM are the minimization of costs for earliness, tardi-
and catering, which may be executed simultaneously. Outgo- ness, interventions and the deviation from the original sched-
ing passengers enter the aircraft (boarding) before the plane ule: Typically, several of these aspects are combined. (3) Fi-
ﬁnally leaves its position heading for the runway.    nally, the difference between the original and the optimized
  Apart from inherent options of rescheduling, three forms schedule is interpreted as the set of interventions to apply.
of variations are assumed to be available for the adaptation of Due to the central relevance of the second step, we will fo-
the process in response to disruptions: First, deboarding can cus on the optimization of the x-RCPSP in this section. As
be accelerated through the assignment of additional buses. regards the choice of an approach to the identiﬁcation of the
Second, cleaning can be shortened if in exchange the cabin optimal combination of activation state and activity starting

                                                IJCAI-07
                                                  1962times, the mentioned practical relevance of proximity to the Algorithm 2 Mutate (λ)
original schedule suggests the use of incremental local search 1: if a randomly generated value 0, 1 θ then
algorithms. Since, moreover, performance usually represents 2: rearrange λ by applying RCPSP-speciﬁc mutation
a crucial factor in the operative process of DM and since 3: else
particularly genetic algorithms perform well for the RCPSP 4: select an arbitrary xi,j X iλ
[Kolisch and Hartmann, 2005] we herein present and evaluate 5: replace i with j in λ
an evolutionary algorithm for the solution of the x-RCPSP. 6: end if
                                                       7: return λ
3.1  An Evolutionary Algorithm
Representation
                                                                                        A   A
Due to the complexity associated with the direct modiﬁcation Denoting the set of activities in λi as i ,itisﬁrst
                                                      checked whether an RCPSP-speciﬁc operator can be applied
of time values, it is a common approach to use some sort of                           A    A
abstract solution representation during optimization [Kolisch (line 1). If this is not possible due to a b,atransition
                                                      set TXis initialized for coping with different list con-
and Hartmann, 2005; Hindi et al., 2002]. We decided on the T
use of activity lists: λ is a precedence feasible list of all el- tents: describes which substitutions have to be applied for
         A                                            the conversion of λb to λa.LetXi X be the set of sub-
ements in , describing the order in which active activities                               A     A   T
shall be added to the schedule. In the associated serial sched- stitutions that has led from an original set 0 to i: can
ule generation scheme, each operation is scheduled at the ear- then be deﬁned as the combination of all substitutions exclu-
                                                      sive to a and the inversion of all substitutions exclusive to
liest possible time: This way, each valid λ can be converted λ
into a valid schedule unambiguously.                  λb (line 4). Since, however, substitutions are not necessar-
                                                      ily directly reversible, it might be the case that λb can not
Initialization                                        be (directly) transformed into λa: If the size of T is unequal
The original schedule can be converted into a corresponding to the size of the symmetric difference XaXb, the activity
activity list easily: λ0 is obtained by simply sorting all active lists are considered incompatible for crossover and a different
activities by their scheduled starting times. It represents the selection of parent lists has to be made (line 5). Otherwise,
legal option of performing no intervention at all and is there- the child activity list λ is initialized as a clone of λb before a
fore considered the ﬁrst element of the ﬁrst generation. All repetitive replacement procedure is started (line 7 to 13): As
other solutions of the initial population are generated by the long as λ contains replaceable elements in terms of T ,there-
application of the mutation operator (see below) on λ0. spective substitutions are applied: Note that dependencies in
                                                      M    have to be observed and that precedence feasibility has
Crossover                                             to be secured by shifting successors to the right-hand side of
If the elements contained in two parent activity lists λa and their predecessors. If the application of the substitutions in T
λb are equal, one of the well-elaborated RCPSP-speciﬁc results in an inconsistency (i.e. activities have to be activated
crossover operators can be applied (see [Hartmann, 1998; and deactivated at the same time due to contradicting depen-
Hindi et al., 2002] for examples or [Kolisch and Hartmann, dencies in M ), the replacement operator (called in line 10)
2005] for a comprehensive overview). If, however, the con- fails: λa and λb are considered incompatible for crossover
tents of λa and λb differ, list combination is more difﬁcult: and different parent activity lists have to be selected.
                                                                               B
Algorithm 1 summarizes a crossover operator, which is based If, for example, λa Deb , Fue, Cle, Cat, Boa and
                                                               B         R               P
on the idea that λa steers the selection of elements contained λb Deb , Cat, Cle , Ins, Boa, Fue for the process
                                                                                             R
in the child whereas λb determines the respective order, and modeled above, the transition set T Cle Cle,
                                                          P                                    B
which guarantees that only valid activity lists are generated. Fue Fue can be deduced from Xa DebDeb
                                                                       B         R         P
                                                      and Xb   Deb Deb  , Cle Cle , FueFue    .
                                                      Crossover thus results in λDebB, Cat, Cle, Fue, Boa .
Algorithm 1 Crossover (λa,λb)
 1: if Aa Ab then                                     Mutation
 2:  apply RCPSP-speciﬁc crossover operator           An x-RCPSP-speciﬁc version of the mutation operator is de-
 3: else                                              scribed in Algorithm 2: Apart from changes in the order of
 4:  TXa     Xb    xi,j  X    xj,i   Xb Xa            activities, also potential process variations are considered.
 5:  if  TXaXb             then return incompatible    With a certain probability θ, the activation state is left un-
 6:  λλb                                              modiﬁed and any RCPSP-speciﬁc mutation operator can be
 7:  do                                               applied for the random modiﬁcation of λ (see the references
 8:    changed false                                  mentioned above for crossover). Otherwise, an arbitrary re-
 9:    if iλ,  xi,j T  then                           placement is selected for an element contained in the activity
10:       replace i with j in λ                       list: As regards its application, again all associated dependen-
11:       changed true                                cies and precedence constraints have to be observed.
12:    end if                                         Fitness and Selection
13:  while changed                                    The quality of an activity list is evaluated by converting it
14: end if                                            into the corresponding schedule and analyzing the associated
15: return λ                                          costs by use of the predeﬁned schedule evaluation function.

                                                IJCAI-07
                                                  1963  Table 2: Portion of the identiﬁed optimization potential that could be tapped by the genetic algorithm within limited time
        Limit    Process Complexity  Resource Complexity      Left-Shifts     Baseline Schedule  Overall
                  low       high       low        high       yes      no       tight     wide
        5 sec   99.15%    100.00%    100.00%    99.15%     99.37%   99.78%    99.56%    99.59%   99.58%
Small
        15 sec  99.63%    100.00%    100.00%    99.63%     99.69%   99.93%    99.81%   99.81%    99.81%
        5 sec   55.63%     65.01%    82.38%     38.27%     53.27%   67.38%    60.06%    60.58%   60.32%
Large   15 sec  70.99%    76.48%     89.21%     58.26%     67.16%   80.31%    74.64%    72.83%   73.74%
        45 sec  81.80%    85.65%     92.58%     74.87%     77.99%   89.46%    84.01%    83.43%   83.72%

This way, activity lists are made comparable. In each step • Tight/Wide Baseline Schedule. The distribution of start-
of evolution, a new generation is derived from the previous ing times and the amount of incorporated slack time are
one by combining the best individuals (the survivors) with combined in this parameter: In a tight (wide) schedule,
new ones (their children) generated through the application activities (do not) start at the earliest possible point and
of crossover and mutation to the ﬁttest activity lists. In order many (only few) processes are executed simultaneously.
to avoid the convergence to a local optimum, we randomly
replace individual members of the generated population with Small and large problem instances were distinguished: The
                                                      former consist of one process containing 10, the latter of one
the initial activity list λ0: The probability for such replace-
ments is decreasing with the continuing progress of evolution. process containing 100 activities. For each problem class, 10
Due to the signiﬁcant role of randomness in the selection and instances of both sizes were generated by random; on aver-
mutation of solutions, it is made sure that the exact optimum age, one out of ten activities had one of the execution alter-
is identiﬁed by the GA at least within an inﬁnite time horizon. natives mentioned in Section 2.1 associated. In each case, a
                                                      disruption was injected immediately at the start of execution
3.2  Computational Experiments                        by doubling the durations of half the activities.
                                                        As there is currently no benchmark data available for DM
The above algorithm has been implemented in a Java-based problems, it was not possible to compare the proposed GA to
rescheduling engine: The realization of the RCPSP-speciﬁc existing approaches. Instead, the fast convergence of sched-
operators is based on the GA proposed by Hartmann [1998]. ule quality towards the optimal or at least a good solution is
As there are currently neither instances of nor testset genera- illustrated. Table 2 summarizes how much of the identiﬁed
tors for reactive scheduling problems available [Policella and optimization potential could be tapped within limited time1.
Rasconi, 2005], a framework for the parameterized genera- For each of the small instances, ﬁrst the exact optimum was
tion of DM problems has also been developed: Normalized identiﬁed based on a deterministic procedure: The difference
versions of network complexity, resource factor and resource between the costs associated with the disrupted schedule SΔ
strength (as proposed by Kolisch et al. [1995])aswellaspa- and the optimal schedule S deﬁnes the optimization poten-
rameters describing the characteristics of baseline schedules tial. For the evaluation of the GA, 10 runs were conducted
and disruptions can be used to deﬁne the problem structure. for each of the generated cases and each of the regarded time
  The generated instances consist of a baseline schedule and limits: Let S denote the schedule resulting from such limited
a disruption occurring during its execution. Based on the pos- optimization. The ﬁgures listed in Table 2 thus correspond to
sibility to assign a due date δi to an activity i A ,the                fSΔ   fS
                                                      the average value of Δ      : Basically, they reveal that
goal of optimization is to minimize the sum of the overall              fS    fS
                                                      in almost any case the optimum could be identiﬁed already
process tardiness i A max 0,βi di  δi and the number
of schedule modiﬁcations: Each modiﬁcation is assumed to within the ﬁrst 5 or 15 seconds of optimization.
cause three times the costs of one time unit of tardiness. As even by use of the most powerful exact methods (see
  As regards complexity aspects, the following conﬁgura- [Laborie, 2005] for a recent approach) hard scheduling prob-
tions have been used to generate 16 different problem classes: lems of the considered size are not tractable in reasonable
                                                      time [Hartmann, 1998; Alcaraz et al., 2003], an alternative
  • Low/High Process Complexity. Based on this parameter procedure has been chosen for the large instances. Instead of
    it can be speciﬁed whether the scheduled activities are identifying the actual optimum, the best solution that could be
    linked by few or by many precedence constraints.  found during (1) all GA runs and (2) an additional run lim-
  • Low/High Resource Complexity. The aspects of resource ited to 10 minutes was taken as a reference. This approach
    requirements and resource availability are combined in was motivated by the observation that large improvements
    this parameter: Low resource complexity corresponds to can mainly be made within the ﬁrst generations: The typi-
    the existence of few requirements and the availability of cal development of the costs associated with the best known
    many resource entities, high complexity to the opposite. schedule throughout 10 minutes is depicted in Figure 1. Cor-
                                                      respondingly, the ﬁgures listed in Table 2 show how close the
  • With/Without Left-Shifts. If an activity is scheduled to GA could get to the best known solution within 5, 15 and 45
    start earlier than it did in the original schedule, this is seconds. The following observations can be made:
    considered a left-shift. Whether such modiﬁcations are
    valid or not can be deﬁned by the assignment of appro- 1The used problem instances and more detailed evaluation results
    priate lower bounds to the activity starting times. can be obtained from http://rcpsp.serverside.at/ijcai-07.html

                                                IJCAI-07
                                                  1964