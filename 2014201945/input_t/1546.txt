                   BLOG: Probabilistic Models with Unknown Objects∗

Brian Milch, Bhaskara Marthi, Stuart Russell, David Sontag, Daniel L. Ong         and  Andrey Kolobov
                                       Computer Science Division
                                        University of California
                                       Berkeley, CA 94720-1776
                  {milch, bhaskara, russell, dsontag, dlong, karaya1}@cs.berkeley.edu

                    Abstract                          that explicitly represent objects and the relations between
                                                      them. However, most FOPLs only deal with ﬁxed sets of ob-
    This paper introduces and illustrates BLOG, a formal lan- jects, or deal with unknown objects in limited and ad hoc
    guage for deﬁning probability models over worlds with
                                                      ways. This paper introduces BLOG (Bayesian LOGic), a
    unknown objects and identity uncertainty. BLOG uniﬁes
    and extends several existing approaches. Subject to cer- compact and intuitive language for deﬁning probability dis-
    tain acyclicity constraints, every BLOG model speciﬁes tributions over outcomes with varying sets of objects.
    a unique probability distribution over ﬁrst-order model We begin in Sec. 2 with three example problems, each of
    structures that can contain varying and unbounded num- which involves possible worlds with varying object sets and
    bers of objects. Furthermore, complete inference algo- identity uncertainty. We describe generative processes that
    rithms exist for a large fragment of the language. We produce such worlds, and give the corresponding BLOG mod-
    also introduce a probabilistic form of Skolemization for els. Sec. 3 observes that these possible worlds are naturally
    handling evidence.                                viewed as model structures of ﬁrst-order logic. It then deﬁnes
                                                      precisely the set of possible worlds corresponding to a BLOG
                                                      model. The key idea is a generative process that constructs a
1  Introduction                                       world by adding objects whose existence and properties de-
Human beings and AI systems must convert sensory input pend on those of objects already created. In such a process,
into some understanding of what’s out there and what’s going the existence of objects may be governed by many random
on in the world. That is, they must make inferences about variables, not just a single population size variable. Sec. 4
the objects and events that underlie their observations. No discusses how a BLOG model speciﬁes a probability distribu-
pre-speciﬁed list of objects is given; the agent must infer the tion over possible worlds.
existence of objects that were not known initially to exist. Sec. 5 solves a previously unnoticed “probabilistic
  In many AI systems, this problem of unknown objects is Skolemization” problem: how to specify evidence about
engineered away or resolved in a preprocessing step. How- objects—such as radar blips—that one didn’t know existed.
ever, there are important applications where the problem is Finally, Sec. 6 brieﬂy discusses inference in unbounded out-
unavoidable. Population estimation, for example, involves come spaces, stating a sampling algorithm and a complete-
counting a population by sampling from it randomly and mea- ness theorem for a large class of BLOG models, and giving
suring how often the same object is resampled; this would experimental results on one particular model.
be pointless if the set of objects were known in advance.
Record linkage, a task undertaken by an industry of more 2 Examples
than 300 companies, involves matching entries across multi-
ple databases. These companies exist because of uncertainty In this section we examine three typical scenarios with un-
about the mapping from observations to underlying objects. known objects—simpliﬁed versions of the population estima-
Finally, multi-target tracking systems perform data associa- tion, record linkage, and multitarget tracking problems men-
tion, connecting, say, radar blips to hypothesized aircraft. tioned above. In each case, we provide a short BLOG model
  Probability models for such tasks are not new: Bayesian that, when combined with a suitable inference engine, consti-
models for data association have been used since the  tutes a working solution for the problem in question.
1960s [Sittler, 1964]. The models are written in English and Example 1. An urn contains an unknown number of balls—
mathematical notation and converted by hand into special- say, a number chosen from a Poisson distribution. Balls are
purpose code. In recent years, formal representation lan- equally likely to be blue or green. We draw some balls from
guages such as graphical models [Pearl, 1988] have led to the urn, observing the color of each and replacing it. We
general inference algorithms, more sophisticated models, and cannot tell two identically colored balls apart; furthermore,
automated model selection (structure learning). In Sec. 7, we observed colors are wrong with probability 0.2. How many
review several ﬁrst-order probabilistic languages (FOPLs) balls are in the urn? Was the same ball drawn twice?
  ∗This work was supported by DARPA under award 03-000219, The BLOG model for this problem, shown in Fig. 1, de-
and by an NSF Graduate Research Fellowship to B. Milch. scribes a stochastic process for generating worlds. The ﬁrst 41 type Color; type Ball; type Draw;                    1 guaranteed Citation Cite1, Cite2, Cite3, Cite4;
2 random Color TrueColor(Ball);                        2 #Researcher ∼ NumResearchersDistrib();
3 random Ball BallDrawn(Draw);                         3 #Publication: (Author) -> (r) ∼ NumPubsDistrib();
4 random Color ObsColor(Draw);
                                                       4 Title(p) ∼ TitlePrior();
5 guaranteed Color Blue, Green;                        5 Name(r) ∼ NamePrior();
6 guaranteed Draw Draw1, Draw2, Draw3, Draw4;
                                                       6 PubCited(c) ∼ Uniform(Publication p);
7 #Ball ∼ Poisson[6]();
                                                       7 TitleString(c) ∼ TitleObs(Title(PubCited(c)));
8 TrueColor(b) ∼ TabularCPD[[0.5, 0.5]]();             8 AuthorString(c) ∼ AuthorObs(Name(Author(PubCited(c))));
9 BallDrawn(d) ∼ Uniform({Ball b});                    9 CitString(c) ∼ CitDistrib(TitleString(c),AuthorString(c));
10 ObsColor(d)
11   if (BallDrawn(d) != null) then
12       ∼ TabularCPD[[0.8, 0.2], [0.2, 0.8]]         Figure 2: BLOG model for Ex. 2 with four observed citations
13          (TrueColor(BallDrawn(d)));                (type and function declarations are omitted).

Figure 1: BLOG model for the urn-and-balls scenario of Ex. 1
with four draws.                                      area. Then, for each time step t (starting at t = 0), choose the
                                                      state (position and velocity) of each aircraft given its state at
                                                      time t − 1. Also, for each aircraft a and time step t, possibly
lines introduce the types of objects in these worlds—colors, generate a radar blip r with Source(r) = a and Time(r) = t.
balls, and draws—and the functions that can be applied to Whether a blip is generated or not depends on the state of the
these objects. Lines 5–7 specify what objects may exist in aircraft—thus the number of objects in the world depends on
each world. In every world, the colors are blue and green and certain objects’ attributes. Also, at each step, generate some
there are four draws; these are the guaranteed objects. On the false alarm blips r′ with Source(r′) = null. Finally, sample
other hand, different worlds have different numbers of balls, the position for each blip given the true state of its source
so the number of balls that exist is chosen from a prior—a aircraft (or using a default distribution for a false-alarm blip).
Poisson with mean 6. Each ball is then given a color, as spec-
iﬁed on line 8. Properties of the four draws are ﬁlled in by 3 Syntax and Semantics: Possible Worlds
choosing a ball (line 9) and an observed color for that ball
(lines 10–13). The probability of the generated world is the 3.1 Outcomes as ﬁrst-order model structures
product of the probabilities of all the choices made. The possible outcomes for Ex. 1 through Ex. 3 are structures
Example 2. We have a collection of citations that refer to containing many related objects, which we will treat formally
publications in a certain ﬁeld. What publications and re- as model structures of ﬁrst-order logic. A model structure
searchers exist, with what titles and names? Who wrote which provides interpretations for the symbols of a ﬁrst-order lan-
publication, and which publication does each citation refer guage. (Usually, ﬁrst-order languages are described as having
to? For simplicity, we just consider the title and author-name predicate, function, and constant symbols. For conciseness,
strings in these citations, which are subject to errors of vari- we view all symbols as function symbols; predicates are just
ous kinds, and we assume only single-author publications. functions that return a Boolean value, and constants are just
                                                      zero-ary functions.)
  Fig. 2 shows a BLOG model for this example, based on
                                                        For Ex. 1, the language has function symbols such as
the model in [Pasula et al., 2003]. The BLOG model de-
                                                      TrueColor   for the true color of ball ; BallDrawn for the
ﬁnes the following generative process. First, sample the to-   (b)                   b          (d)
                                                      ball drawn on draw d; and Draw1 for the ﬁrst draw. (Statisti-
tal number of researchers from some distribution; then, for
                                                      cians might use indexed families of random variables such as
each researcher r, sample the number of publications by that
                                                      {TrueColor }, but this is mainly a matter of taste.)
researcher. Sample the publications’ titles and researchers’    b
names from appropriate prior distributions. Then, for each ci-
tation, sample the publication cited by choosing uniformly at 1 type Aircraft; type Blip;
random from the set of publications. Sample the title and au- 2 random R6Vector State(Aircraft, NaturalNum);
thor strings used in each citation from string corruption mod- 3 random R3Vector ApparentPos(Blip);
els conditioned on the true attributes of the cited publication; 4 nonrandom NaturalNum Pred(NaturalNum) = Predecessor;
ﬁnally, generate the full citation string according to a format- 5 generating Aircraft Source(Blip);
ting model.                                            6 generating NaturalNum Time(Blip);
Example 3. An unknown number of aircraft exist in some 7 #Aircraft ∼ NumAircraftDistrib();
volume of airspace. An aircraft’s state (position and veloc- 8 State(a, t)
                                                       9  if t = 0 then ∼ InitState()
ity) at each time step depends on its state at the previous time 10 else ∼ StateTransition(State(a, Pred(t)));
step. We observe the area with radar: aircraft may appear as 11 #Blip: (Source, Time) -> (a, t)
identical blips on a radar screen. Each blip gives the approxi- 12 ∼ DetectionDistrib(State(a, t));
mate position of the aircraft that generated it. However, some 13 #Blip: (BlipTime) -> (t)
blips may be false detections, and some aircraft may not be 14 ∼ NumFalseAlarmsDistrib();
detected. What aircraft exist, and what are their trajectories? 15 ApparentPos(r)
                                                      16  if (BlipSource(r) = null) then ∼ FalseAlarmDistrib()
Are there any aircraft that are not observed?         17  else ∼ ObsDistrib(State(Source(r), Time(r)));
  The BLOG  model for this scenario (Fig. 3) describes the
following process: ﬁrst, sample the number of aircraft in the     Figure 3: BLOG model for Ex. 3.  To eliminate meaningless random variables, we use a such processes, we ﬁrst introduce generating function decla-
typed, free logical language, in which every object has a type rations, such as lines 5–6 of Fig. 3. Unlike other functions,
and in which functions may be partial. Each function sym- generating functions such as Source or Time have their val-
bol f has a type signature (τ0, . . . , τk), where τ0 is the return ues set when an object is added. A generating function must
type of f and τ1, . . . , τk are the argument types. A partial take a single argument of some type τ (namely Blip in the
function applied to arguments outside its domain returns the example); it is then called a τ-generating function.
special value null, which is not of any type.           Generative steps that add objects to the world are described
  The truth of any ﬁrst-order sentence is determined by a by number statements. For instance, line 11 of Fig. 3 says
model structure for the corresponding language. A model that for each aircraft a and time step t, the process adds some
structure speciﬁes the extension of each type and the inter- number of blips r such that Source(r) = a and Time(r) = t.
pretation for each function symbol:                   In general, the beginning of a number statement has the
Deﬁnition 1. A model structure ω of a typed, free, ﬁrst-order form: #τ: (g1, . . . , gk) –> (x1, . . . , xk) where τ is a
language consists of an extension [τ]ω for each type τ, which type, g1, . . . , gk are τ-generating functions, and x1, . . . , xk
may be an arbitrary set, and an interpretation [f]ω for each are logical variables. (For types that are generated ab initio
                                                      with no generating functions, the () -> () is omitted, as
function symbol f. If f has return type τ0 and argument types
                ω                  ω           ω      in Fig. 1.) The inclusion of a number statement means that
τ1, . . . , τk, then [f] is a function from [τ1] × · · · × [τk] to
   ω                                                  for each appropriately typed tuple of objects o , . . . , ok (the
[τ0] ∪ {null}.                                                                               1
                                                      appropriate types are the return types of g1, . . . , gk), the gen-
  A BLOG  model deﬁnes a probability distribution over a erative process adds some number (possibly zero) of objects
particular set of model structures. In Ex. 1, identity uncer-             ω
                            ω                         q of type τ such that [gi] (q) = oi for i = 1, . . . , k.
tainty arises because [BallDrawn] (Draw1) might be equal Object generation can even be recursive: for instance, in
to [BallDrawn]ω (Draw2) in one structure but not another.
                  ω                                   a model for phylogenetic trees, we could have a generating
The set of balls, [Ball] , can also vary between structures. function Parent that takes a species and returns a species;
3.2  Outcomes with ﬁxed object sets                   then we could model speciation events with a number state-
                                                      ment that begins: #Species: (Parent) ->  (p).
BLOG  models for ﬁxed object sets have ﬁve kinds of state- We can also view number statements more declaratively:
ments. A type declaration, such as the two statements on line
1 of Fig. 3, introduces a type. Certain types, namely Boolean, Deﬁnition 2. Let ω be a model structure of LM , and con-
                                                      sider a number statement for type τ with generating functions
NaturalNum, Integer, String, Real, and RkVector (for each                     ω
                                                      g1, . . . , gk. An object q ∈ [τ] satisﬁes this number statement
k ≥ 2) are already provided. A random function declaration,                       ω
                                                      applied to o1, . . . , ok in ω if [gi] (q) = oi for i = 1, . . . , k,
such as line 2 of Fig. 3, speciﬁes the type signature for a func- ω
tion symbol whose values will be chosen randomly in the gen- and [g] (q) = null for all other τ-generating functions g.
erative process. A nonrandom function deﬁnition, such as the Note that if a number statement for type τ omits one of the
one on line 4 of Fig. 3, introduces a function whose interpreta- τ-generating functions, then this function takes on the value
tion is ﬁxed in all possible worlds. In our implementation, the null for all objects satisfying that number statement. For in-
interpretation is given by a Java class (Predecessor in this stance, Source is null for objects satisfying the false-detection
example). A guaranteed object statement, such as line 5 in number statement on line 13 of Fig. 3. Also, a BLOG model
Fig. 1, introduces and names some distinct objects that exist cannot contain two number statements with the same set of
in all possible worlds. For the built-in types, the obvious sets generating functions. This ensures that each object o has ex-
of guaranteed objects and constant symbols are predeﬁned. actly one generation history, which can be found by tracing
The set of guaranteed objects of type τ in BLOG model M is back the generating functions on o.
denoted GM (τ). Finally, for each random function symbol, The set of possible worlds ΩM is the set of model struc-
a BLOG model includes a dependency statement specifying tures that can be constructed by M’s generative process. To
how values are chosen for that function. We postpone further complete the picture, we must explain not only how many
discussion of dependency statements to Sec. 4.        objects are added on each step, but also what these ob-
  The ﬁrst four kinds of statements listed above deﬁne a par- jects are. It turns out to be convenient to deﬁne the gen-
ticular typed ﬁrst-order language LM for a model M. The erated objects as follows: when a number statement with
set of possible worlds of M, denoted ΩM , consists of those type τ and generating functions g1, . . . , gk is applied to
model structures of LM where the extension of each type τ generating objects o1, . . . , ok, the generated objects are tu-
is GM (τ), and all nonrandom function symbols (including ples {(τ, (g1, o1), . . . , (gk, ok), n) : n = 1, . . . , N}, where
guaranteed constants) have their given interpretations. N is the number of objects generated. Thus in Ex. 3,
  For each random function f and tuple of appropriately the aircraft are pairs (Aircraft, 1), (Aircraft, 2), etc., and
typed guaranteed objects o1, . . . , ok, we can deﬁne a random the blips generated by aircraft are nested tuples such as
                                  ω
variable (RV) Vf [o1, . . . , ok] (ω) , [f] (o1, . . . , ok). The (Blip, (Source, (Aircraft, 2)), (Time, 8), 1). The tuple en-
possible worlds are in one-to-one correspondence with full codes the object’s generation history; of course, it is purely
instantiations of these basic RVs. Thus, a joint distribution internal to the semantics and remains invisible to the user.
for the basic RVs deﬁnes a distribution over possible worlds. The set of all objects (nested tuples) of type τ that can be
                                                      generated from the guaranteed objects via ﬁnitely many re-
3.3  Unknown objects                                  cursive applications of number statements is called the uni-
In general, a BLOG model deﬁnes a generative process in verse of τ, and denoted UM (τ). In each possible world, the
which objects are added iteratively to a world. To describe extension of τ is some subset of UM (τ).Deﬁnition 3. For a BLOG model M, the set of possible  4   Syntax and Semantics: Probabilities
worlds ΩM is the set of model structures ω of LM such that:
                             ω                        4.1  Dependency statements
 1. for each type τ, GM (τ) ⊆ [τ] ⊆ UM (τ);
 2. nonrandom functions have the speciﬁed interpretations; Dependency and number statements specify exactly how the
 3. for each number statement in M  with type τ and   steps are carried out in our generative process. Consider
    generating functions g1, . . . , gk, and each appropri- the dependency statement for State(a, t) beginning on line
    ately typed tuple of generating objects (o1, . . . , ok) in 8 of Fig. 3. This statement is applied for every basic RV of
                             ω                                                                         N
    ω, the set of objects in [τ] that satisfy this num- the form VState [a, t] where a ∈ UM (Aircraft) and t ∈ .
    ber statement applied to these generating objects is If t = 0, the conditional distribution for State(a, t) is given
                                                                           InitState
    {(τ, (g1, o1), . . . , (gk, ok), n) : n = 1, . . . , N} for some by the elementary CPD ; otherwise it is given
    natural number N;                                 by the elementary CPD StateTransition, which takes
 4. for every type τ, each element of [τ]ω satisﬁes some State(a, Pred(t)) as an argument. These elementary CPDs
    number statement applied to some objects in ω.    deﬁne distributions over objects of type R6Vector (the return
  Note that by part 3 of this deﬁnition, the number of objects type of State). In our implementation, elementary CPDs are
generated by any given application of a number statement in Java classes with a method getProb that returns the proba-
world ω is a ﬁnite number N. However, a world can still con- bility of a particular value given a list of CPD arguments.
tain inﬁnitely many non-guaranteed objects if some number A dependency statement begins with a function symbol f
statements are applied recursively, or are triggered for every and a tuple of logical variables x1, . . . , xk representing the ar-
natural number (like the ones generating radar blips in Ex. 3). guments to this function. In a number statement, the variables
  With a ﬁxed set of objects, it was easy to deﬁne a set of ba- x1, . . . , xk represent the generating objects. In either case,
sic RVs such that a full instantiation of the basic RVs uniquely the rest of the statement consists of a sequence of clauses.
                                                      When the statement is not abbreviated, the syntax for the
identiﬁed a possible world. To achieve the same effect with                                          . . .
unknown objects, we need two kinds of basic RVs:      ﬁrst clause is if cond then ∼  elem-cpd(arg1,     ,
                                                      argN). The cond portion is a formula of LM (in which only
Deﬁnition 4. For a BLOG model M, the set VM of basic
                                                      x1, . . . , xk can occur as free variables) specifying the con-
random variables consists of:                         dition under which this clause should be used to sample a
   • for each random  function f with type signature  value for a basic RV. More precisely, if the possible world
    (τ0, . . . , τk) and each tuple of objects (o1, . . . , ok) ∈ constructed so far is ω, then the applicable clause is the ﬁrst
    UM  (τ1) × · · · × UM (τk), a function application RV
                                     ω                one whose condition is satisﬁed in ω (assuming for the mo-
    Vf [o1, . . . , ok] (ω) that is equal to [f] (o1, . . . , ok) if ment that ω is complete enough to determine the truth val-
    o1, . . . , ok all exist in ω, and null (or false for Boolean ues of the conditions). If no clause’s condition is satisﬁed,
    RVs) otherwise;                                   or if the basic RV refers to objects that do not exist in ω,
   • for each number statement with type τ and generating then the value is set by default to false for Boolean functions,
    functions g1, . . . , gk that have return types τ1, . . . , τk, null for other functions, and zero for number variables. If the
    and each tuple of objects (o1, . . . , ok) ∈ UM (τ1)×· · ·× condition in a clause is just “true”, then the whole string
           , a number RV
    UM  (τk)               N(τ,g1,...,gk) [o1, . . . , ok] (ω) “if true then” may be omitted.
    equal to the number of objects that satisfy this number In the applicable clause, each CPD argument is evaluated
    statement applied to o1, . . . , ok in ω.         in ω. The resulting values are then passed to the elementary
  Intuitively, each step in the generative world-construction CPD. In the simplest case, the arguments are terms or formu-
process determines the value of a basic variable. The crucial las of LM , such as State(a, Pred(t)). An argument can also
result about basic RVs is the following:              be a set expression of the form {τ y : ϕ}, where τ is a type, y
Proposition 1. For any BLOG model M and any complete  is a logical variable, and ϕ is a formula. The value of such an
                                                                                      ω
instantiation of VM , there is at most one model structure in expression is the set of objects o ∈ [τ] such that ω satisﬁes
ΩM  consistent with this instantiation.               ϕ with y bound to o. If the formula ϕ is just true it can be
  Equating objects with tuples might seem  unneces-   omitted: this is the case on line 9 of Fig. 1.
sarily complicated, but it becomes very helpful when    We require that the elementary CPDs obey two rules re-
we  deﬁne  a Bayes net over the   basic RVs (which    lated to non-guaranteed objects. First, a CPD should never
we do  in Sec. 4.2).   For instance, the sole parent  assign positive probability to objects that do not exist in the
of VApparentPos [(Blip, (Source, (Aircraft, 2)), (Time, 8), 1)] is partially completed world ω. Thus, we allow an elementary
VState [(Aircraft, 2), 8]. It might seem more elegant to assign CPD to assign positive probability to a non-guaranteed object
numbers to objects as they are generated, so that the exten- only if the object was passed in as a CPD argument. Second,
sion of each type in each possible world would be simply a an elementary CPD cannot “peek” at the tuple representations
preﬁx of the natural numbers. Speciﬁcally, we could num- of objects that are passed in: it must be invariant to permuta-
ber the aircraft arbitrarily, and then number the radar blips tions of the non-guaranteed objects.
lexicographically by aircraft and time step. Then we would
                                                      4.2  Declarative semantics
have basic RVs such as VApparentPos [23], representing the ap-
parent aircraft position for blip 23. But blip 23 could be gen- So far we have explained BLOG semantics procedurally, in
erated by any aircraft at any time step. In fact, the parents terms of a generative process. To facilitate both knowledge
of VApparentPos [23] would have to include all the #Blip and engineering and the development of learning algorithms, we
State variables in the model. So, deﬁning objects as tuples would like to have declarative semantics. The standard ap-
yields a much simpler Bayes net.                      proach — which is used in most existing FOPLs — is to saythat a BLOG model deﬁnes a certain Bayesian network (BN) Deﬁnition 7. A distribution P over ΩM satisﬁes a BLOG
over the basic RVs. In this section we discuss how that ap- model M if for every ﬁnite, self-supporting instantiation σ
proach needs to be modiﬁed for BLOG.                  with vars(σ) ⊆ VM :
  We will write to denote an instantiation of a set of RVs
              σ                                                         N
vars(σ), and σX to denote the value that σ assigns to X. If  P (Ωσ) = Qn=1pXn  (σXn | σ{X1,...,Xn−1})
a BN is ﬁnite, then the probability it assigns to each com-
                                                      where Ωσ is the set of possible worlds consistent with σ and
plete instantiation σ is P (σ) = QX∈vars(σ) pX (σX |σPa(X)),
                                                      X1, . . . , XN is a numbering of σ as in Def. 6.
where pX is the CPD for X and σPa(X) is σ restricted to the
parents of X. In an inﬁnite BN, we can write a similar expres- A BLOG model is well-deﬁned if there is exactly one prob-
sion for each ﬁnite instantiation σ that is closed under the par- ability distribution that satisﬁes it. Recall that a BN is well-
ent relation (that is, X ∈ vars(σ) implies Pa(X) ⊆ vars(σ)). deﬁned if it is acyclic and each variable has a ﬁnite set of an-
If the BN is acyclic and each variable has ﬁnitely many an- cestors. Another way of saying this is that each variable can
cestors, then these probability assignments deﬁne a unique be “reached” by enumerating its ancestors in a ﬁnite, topolog-
distribution [Kersting and De Raedt, 2001].           ically ordered list. The well-deﬁnedness criterion for BLOG
  The difﬁculty is that in the BN corresponding to a BLOG is similar, but deals with ﬁnite, self-supporting instantiations
model, variables often have inﬁnite parent sets. For instance, rather than ﬁnite, topologically ordered lists of variables.
the BN for Ex. 1 has an inﬁnite number of basic RVs of the Theorem 1. Let M be a BLOG model. Suppose that VM
                                                                               1
form VTrueColor [b]: if it had only a ﬁnite number N of these is at most countably inﬁnite, and for each V ∈ VM and
RVs, it could not represent outcomes with more than N balls. ω ∈ ΩM , there is a self-supporting instantiation that agrees
Furthermore, each of these VTrueColor [b] RVs is a parent of with ω and includes V . Then M is well-deﬁned.
each           RV, since if BallDrawn happens to be
    VObsColor [d]                  (d)                  The theorem follows from a result in [Milch et al., 2005]
 , then the observed color on draw depends directly on the
b                            d                        that deals with distributions over full instantiations of a set
color of ball . So the      nodes have inﬁnitely many
          b       VObsColor [d]                       of RVs. Prop. 1 makes the connection between full instantia-
parents. In such a model, assigning probabilities to ﬁnite in-
                                                      tions of V and possible worlds.
stantiations that are closed under the parent relation does not M
                                                        To check that the criterion of Thm. 1 holds for a partic-
deﬁne a unique distribution: in particular, it tells us nothing
                                                      ular example, we need to consider each basic RV. In Ex. 1,
about the         variables.
        VObsColor [d]                                 the number RV for balls is supported by the empty instan-
  We required instantiations to be closed under the par- tiation, so in every world it is part of a self-supporting in-
ent relation so that the factors          would be
                            pX (σX |σPa(X))           stantiation of size one. Each TrueColor(b) RV depends only
well-deﬁned. But we may not need the values of all of X’s on whether its argument exists, so these variables participate
parents in order to determine the conditional distribution in self-supporting instantiations of size two. Similarly, each
for X.  For instance, knowing VBallDrawn [d] = (Ball, 13) BallDrawn variable depends only on what balls exist. To sam-
and          Ball       Blue is sufﬁcient to determine
    VTrueColor [( , 13)] =                            ple an ObsColor(d) variable, we need to know BallDrawn(d)
the distribution for       : the colors of all the other
                 VObsColor [d]                        and TrueColor(BallDrawn(d)), so these variables are in self-
balls are irrelevant in this context. We can read off this supporting instantiations of size four. Similar arguments can
context-speciﬁc independence from the dependency state- be made for Examples 2 and 3. Of course, we would like
ment for ObsColor in Fig. 1 by noting that the instantiation
                                                      to have an algorithm for checking whether a BLOG model is
(VBallDrawn [d] = (Ball, 13), VTrueColor [(Ball, 13)] = Blue) well-deﬁned; the criteria given in Thm. 2 in Sec. 6.2 are a ﬁrst
determines the  value of  the  sole CPD    argument   step in this direction.
TrueColor(BallDrawn(d)).  We   say this instantiation
supports the variable V  [d] (see [Milch et al., 2005]).
                   ObsColor                           5   Evidence and Queries
Deﬁnition 5. An instantiation σ supports a basic RV V of
                                                      Because a well-deﬁned BLOG model M deﬁnes a distribution
the form Vf [o1, . . . , ok] or Np [o1, . . . , ok] if all possible
worlds consistent with σ agree on (1) whether all the objects over model structures, we can use arbitrary sentences of LM
                                                      as evidence and queries. But sometimes such sentences are
o1, . . . , ok exist, and, if so, on (2) the applicable clause in the
dependency or number statement for V and the values for the not enough. In Ex. 3, the user observes radar blips, which are
CPD arguments in that clause.                         not referred to by any terms in the language. The user could
                                                      assert evidence about the blips using existential quantiﬁers,
  Note that some RVs, such as NBall [] in Ex. 1, are supported but then how could he make a query of the form, “Did this
by the empty instantiation. We can now generalize the notion blip come from the same aircraft as that blip?”
of being closed under the parent relation.              A natural solution is to allow the user to extend the lan-
                                                      guage when evidence arrives, adding constant symbols to re-
Deﬁnition 6. A ﬁnite instantiation σ is self-supporting if its fer to observed objects. In many cases, the user observes
instantiated variables can be numbered X1, . . . , XN such some new objects, introduces some new symbols, and assigns
that for each n ≤ N, the restriction of σ to {X1, . . . , Xn−1} the symbols to the objects in an uninformative order. To han-
supports Xn.                                          dle such cases, BLOG includes a special macro. For instance,
  This deﬁnition lets us give semantics to BLOG models in given 4 radar blips at time 8, one can assert:
a way that is meaningful even when the corresponding BNs {Blip r: Time(r) = 8} = {Blip1, Blip2, Blip3, Blip4};
contain inﬁnite parent sets. We will write pV (v | σ) for the
probability that V ’s dependency or number statement assigns 1This is satisﬁed if the Real and RkVector types are not argu-
to the value v, given an instantiation σ that supports V . ments to random functions or return types of generating functions.