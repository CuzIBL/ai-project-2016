                      Efficient Symmetry Breaking for Boolean Satisfiability 

            Fadi A. Aloul Karem A. Sakallah Igor L. Markov 
                          Department of Electrical Engineering and Computer Science 
                                               University of Michigan 
                                             Ann Arbor, MI 48109-2122 
                                    {faloul, karem, imarkov}@eecs.umich.edu 

                           Abstract                            On the other hand, knowledge of the symmetries can be used 
                                                               to significantly prune the search space. Symmetries are stud•
   Identifying and breaking the symmetries of CNF for•
                                                               ied in abstract algebra in terms of groups. We assume the 
   mulae has been shown to lead to significant reductions 
                                                               reader to be familiar with the basics of group theory; in par•
   in search times. In this paper we describe a more sys•
                                                               ticular, we assume familiarity with permutation groups and 
   tematic and efficient construction of symmetry-break•
                                                               their representation in terms of irredundant sets of genera•
   ing predicates (SBPs). In particular, we use the cycle 
                                                               tors. A good reference on the subject is [Fraleigh, 2000]. 
   structure of symmetry generators, which typically 
                                                                  The rest of the paper is organized in five sections. 
   involve very few variables, to drastically reduce the 
                                                               Section 2 provides a brief review of permutations and per•
   size of SBPs. Furthermore, our new SBP construction 
                                                               mutation groups. Section 3 describes pervious work on sym•
   grows linearly with the number of relevant variables as 
                                                               metry breaking for SAT Our main contribution on efficient 
   opposed to the previous quadratic constructions. Our 
                                                               constructions of symmetry-breaking predicates is detailed in 
   empirical data suggest that these improvements reduce 
                                                               Section 4. These constructions are evaluated empirically in 
   search run times by one to two orders of magnitude on 
                                                               Section 5, and we end with conclusions in Section 6. 
   a wide variety of benchmarks with symmetries. 
                                                               2 Notation and Preliminaries 
1 Introduction 

Modern Boolean satisfiability (SAT) solvers, based on back•
track search, are now capable of attacking instances with 
thousands of variables and millions of clauses [Velev and 
Bryant, 2001] and are being routinely deployed in a wide 
range of industrial applications [Biere et al., 1999], [Nam et 
al, 2001], [Stephan et a/., 1996]. Their success can be cred•
ited to a combinational of recent algorithmic advances and 
carefully-tuned implementations [Silva and Sakallah, 1999], 
[Moskewicz et al. , 2001], [Goldberg and Novikov, 2002]. 
Still, there are problem instances that remain beyond the 
reach of most SAT solvers. 
   One aspect of intractability is the presence of symmetry 
in the conjunctive normal form (CNF) of a SAT instance. 
Intuitively, a symmetry of a discrete object is a transforma•
tion, e.g., a permutation, of its components that leaves the 
object intact. The symmetries of a CNF formula are permu•
tations of its literals (variables and their negations) that result 
in a re-ordering of its clauses (and the literals within clauses) 
without changing the formula itself. Such symmetries induce 
an equivalence relation on the set of variable assignments 
such that two assignments are equivalent if and only if the 
formula assumes the same truth value (either 0 or 1) at each 
of these assignments. A search algorithm that is oblivious to 
the existence of these symmetries may end up, wastefully          Permutations will be expressed either in tabular form or 
exploring a set of equivalent unsatisfying assignments before  in cyclic notation. For example, 
moving on to a more promising region of the search space. 


CONSTRAINTS                                                                                                           271                                                                was laid out in [Crawford et al., 1996]. This framework was 
                                                        (2)    extended later, in [Aloul et a/., 2002], to account for phase-
                                                               shift symmetries, take advantage of the cycle structure of 
 denotes a permutation that maps etc. The same per­            permutations, and consider only generators of the group of 
 mutation can be expressed as a set of disjoint cycles such as symmetries. In outline, the procedure consists of the follow­
                                                               ing steps: 
                                                        (3)     1. Convert a CNF formula to a colored graph whose sym­
 Here a cycle (a ,b,..., z) is a shortcut for "a maps to b, b     metries are isomorphic to the symmetries of the formula. 
 maps to c, . .. and z maps to a." The length of a cycle is    2. Find the symmetries of the graph in terms of a set of irre­
 equal to the number of literals in it; we will refer to a cycle  dundant generators using a suitable graph 
 whose length is k as a k-cycle. We define the support of a       automorphism program [McKay, 1981], [Spitznagel, 
 permutation , supp , to be the set of indices appearing          1994]. 
 in its cyclic representation, i.e.,                           3. Map the graph symmetries back to symmetries of the 
                                                                  formula. 
                                                        (4)    4. Construct an appropriate symmetry-breaking predicate 
 The number of cycles in a permutation Π will be denoted by       (SBP) p and conjoint it to the formula. 
 cycles(π). We also define phase-shift(7r) to be the index of  5. Solve using a suitable SAT solver [Moskewicz et 
 the smallest variable (according to the assumed total order­     a/., 2001]. 
 ing) that is mapped to its complement by TT :                    Our concern in this paper is step 4. Noting that the group 
                                                               of symmetries induces an equivalence relation on the set of 
    phasc-shift (π) = min {i e In\xπ - x',}             (5)    assignments in the n-dimensional Boolean space, the basic 
                                                               idea is to construct a "filter" that picks out a single represen­
 We should note that a phase-shift permutation must have one 
                                                               tative from each equivalence class. In particular, choosing 
 or more phase-shift cycles, i.e., length-2 cycles that have the 
                                                               the lexicographically smallest representative—according to 
 form . Finally, we define ends as follows: 
                                                               the assumed total ordering on the variables—leads to the fol­
    ends / is largest index of a variable in a (6)             lowing Lex-Leader SBP [Crawford et al., 1996]: 
                      non-phase-shift cycle of 
                                                                                                                       (8) 
   A permutation group G is a group whose elements are 
permutations of some finite set and whose binary operation 
 is function composition, also referred to as permutation mul­                                                         (9) 
tiplication. The order of a group is the number of its ele­
ments. A subgroup H of a group G, denoted H < G is a 
subset of G that is closed under the group's binary operation.                                                       (10) 
The cyclic subgroup of denoted by, is the sub­
group consisting of and its integer powers:                    where the index set / in (9) and (10) is equal to ln. In these 
                                                               equations, the Lex-Leader SBP is expressed as a conjunction 
                                                        (7)    of permutation predicates (PPs) each of which is a conjunc­
                                                               tion of bit predicates (BPs) . Introducing n auxiliary "equal­
and is said to generate . A set of permutations                                          1
                                                               ity" variables e  = (x  = xπ) makes it possible to express the 
        , ... , generates G if the subgroup resulting                         i    t
                                                               ith BP as an (i + l)-literal CNF clause. This leads to a CNF 
from taking all possible products of the integer powers of 
                                                               representation of the PP in (9) that has n clauses with a total 
these permutations is equal to G. The permutations 
                                                               literal count of 0.5 (n  + 3n). Additionally, each of the intro­
               are called generators of G. A set of genera­                        2
                                                               duced equality constraints yields 4 3-literal clauses bringing 
tors is irredundant if it is not possible to express any of its 
                                                               the total CNF size of (9) to: 
permutations as a product of powers of its other permuta­
tions. A set of irredundant generators serves as an implicit      clauses(PP(7r)) = 5n 
representation of the group it generates and, in general, guar­                                                      (11) 
                                                                  literals(PP(7r)) = 0.5(n  + 27n) 
antees exponential compression in the size of the representa­                            2
tion. Note that a set of irredundant generators is not a group    In its present form, the lex-leader SBP in (8)-( 10) can lead 
since it is not closed under multiplication and taking inverse. to an exponentially large CNF formula because the order of 
In the sequel, a set of permutations G that is not necessarily the symmetry group can be exponential in the number of 
closed will be indicated by placing a "hat" on the variable    variables. Thus, its value in pruning the search space is 
denoting the set, i.e., G. Additionally, and with a slight     negated by the need of the SAT solver to process a much 
abuse of notation, we will indicate that G is the group gener­ larger CNF formula. To remedy this problem [Crawford et 
ated by G by writing                                           al., 1996] suggested the construction of a symmetry tree to 
                                                               eliminate some redundant permutations. However, in the 
3 Previous Work                                                worst case the number of symmetries in the tree remains 
                                                               exponential. Empirical evidence in [Aloul et al., 2002] 
The basic framework for utilizing the symmetries in a CNF 
instance to prune the search space explored by a SAT solver    1 Note that x < y in the bit predicate means "X implies y". 


272                                                                                                      CONSTRAINTS        (c) Bit predicates according to (10). BPs enclosed in boxes with square corners arc tautologous because π maps the corre­
       sponding bits to themselves. BPs enclosed in boxes with rounded corners are tautologous because they correspond to cycle 
       "ends." The BPs for bits 6 to 10 are tautologous because n maps bit 5 to its complement. 


showed that full symmetry breaking, i.e., insuring that the    whose size is linear, rather than quadratic, in m. Figure 1 
SBP selects only the lex-leader from each equivalence class,   provides an example illustrating these refinements. 
is not necessary to obtain significant pruning of the search 
                                                               Elimination of redundant BPs. Careful analysis of (10) 
space. An SBP that breaks some, but not necessarily all, the 
                                                               reveals three cases in which a BP is tautologous, and hence 
symmetries of the formula can, in fact, provide a much better 
                                                               redundant. The first corresponds to bits that are mapped to 
space/time trade-off during the search. This is accomplished 
                                                               themselves by the permutation, i.e., X  — x . This makes the 
by replacing the group of symmetries in (8) by a suitable,                                         Π     i
                                                               consequent of the implication in (10), and hence the whole 
and much smaller, set of permutations 
                                                               bit predicate, unconditionally true. Removal of such BPs is 
                                                       (12)    easily accomplished by setting the index set / in (9) and (10) 
                                                               to supp(7r) rather than In . For sparse permutations, i.e., per­
In particular, [Aloul et ai, 2002] advocated the use of the set mutations for which |supp(7r)| << n, this change alone can 
of generators G returned by the graph automorphism pro­        account for most of the reduction in the CNF size of the PP. 
gram in step 2.                                                   The second case corresponds to the BP of the last bit in 
                                                               each cycle of Π. "Last" here refers to the assumed total 
4 Efficient Formulation of Permutation                         ordering on the variables. Assume a cycle involving the vari­
      Predicate                                                ables {xjIj € ./} for some index set J and let i = max (J). 
                                                               Then 
Even when only a small number of permutations is used in 
constructing an SBP as in (12), the corresponding CNF for­
mula may still be too large because each PP requires a CNF                                                           (13) 
formula whose size is quadratic in the number of variables n. 
In this section we introduce two refinements that lead to 
much smaller PPs. The first refinement utilizes the cycle      causing the corresponding bit predicate BP(π, i) to be tau­
structure of a permutation to eliminate redundant bit predi­   tologous. Elimination of these BPs is accomplished by 
cates and can be viewed as replacing n in (11) by a much       restricting the index set / in (9) and (10) further to just 
smaller number m and represents a more comprehensive and       supp(7r) \ ends(7r) and corresponds to a reduction in the 
systematic treatment of cycles than that in [Aloul et al,      number of BPs from n to m = |supp(7r)| - cycles(7r). 
2002]. The second refinement takes advantage of the recur­        The third and last case corresponds to the BPs of those 
sive bit-by-bit structure in (10) to yield a CNF formula       bits that occur after the first "phase-shifted variable." Let i 
                                                               be the index of the first variable for which xi = xi'. Thus, 


CONSTRAINTS                                                                                                          273          and all have the form 5 Experimental Evaluation 
 making them unconditionally true. 
                                                               We conducted a number of experiments to evaluate the effec­
    Taken together, the redundant BPs corresponding to these 
 three cases can be easily eliminated by setting the index set tiveness of the symmetry breaking constructions described 
 in (9) and (10) to:                                           above in reducing search times. We ran the experiments on 
                                                               representative CNF instances from the following seven 
                                                               benchmark families: 
                                                                1. Hole-n: Unsatisfiable pigeon-hole instances [DIMACS] 
 In the sequel we will refer to the bits in the above index set 2. Urq: Unsatisfiable randomized instances based on 
 as "irredundant bits." Note that the presence of a phase-        expander graphs [Urquhart, 1987] 
 shifted variable early in the total order can lead to a drastic 3. GRoute: Difficult satisfiable instances that model global 
 reduction in the number of irredundant bits. For example, if     wire routing in integrated circuits [Aloul et al, 2002] 
  π= (X1, , x1)... then PP(7r) is simply (x1 ) regardless of   4. FPGARoute and ChnlRoute: Large satisfiable and unsat­
 how many other variables are moved by π .                        isfiable, instances that model the routing of wires in the 
 Linear construction of PPs through chaining. The PP in           channels of field-programmable integrated circuits [Nam 
 (9) and (10) has a recursive structure that can be utilized to   et aL, 2001] 
 produce a CNF formula whose size is linear, rather than qua­  5. XOR: Various exclusive-or chains [SAT 2002] 
 dratic, in the cardinality of the index set /. Specifically, we 6. 2pipe: Difficult unsatisfiable instances that model the 
 introduce the "ordering" predicates /i-= (xi, <xπ) and           functional correctness requirements of modern out-of-
                                                                  order microprocessor CPUs [Velev and Bryant, 2001] 
 gi, = (xi > xi) and, after algebraic manipulation, write the 
 following equivalent expressions for the permutation predi­   Each of the benchmarks was converted to a colored graph as 
 cate:                                                         described in [Aloul et al, 2002] and processed by the graph 
                                                               automorphism program Nauty (version 2) [McKay, 1981] 
                                                               using the GAP package (version 4, release 3) [Spitznagel, 
                                                               1994]. The symmetries returned by Nauty were then mapped 
                                                       (15)    back to symmetries of the benchmark and appropriate SBPs 
                                                               constructed and added. The mChaff SAT solver [Moskcwiez 
                                                               et aL, 2001] was then run on the original and SBP-aug-
                                                               mented versions of each benchmark. All experiments were 
 where g0 = 1 , k = next(0 , /) and K = succ(k , I) . Noting   run on a Linux workstation with a 1.2Ghz AMD Athlon pro­
 that, except for the index set used, the parenthesized expres­ cessor and 1GB of RAM. A time-out limit of 1000 seconds 
 sion on the second line of the above equation is identical to was set for all runs, and run time results represent averages 
 the expression on the first line, we introduce a sequence of  over 10 to 200 independent runs. 
 chaining predicates {pi\i € /} defined according to:             Table 1 lists, for each benchmark family, the number of 
                                                               instances tested (col. 2), their total CNF sizes (cols. 3 and 4), 
                                                       (16)    the order of their symmetry groups (col. 5), the total number 
                                                               of generators returned by Nauty (col. 6), and the number of 
                                                               those that include phase shifts (col. 7). Columns 8 and 9 list 
 where K= {i} U succ(i, /) = {k E k > i}. The recursive 
                                                               the cardinality of the generators' support and the degree of 
 structure of (15), now, makes it possible to express each 
                                                               sparsity present in these generators. The remaining columns 
 chaining predicate in terms of the one that follows it 
                                                               in the table list the CNF sizes of three SBP constructions 
                                                               based on generators: 
                                                               • The quadratic construction (using extra equality variables) 
 and yields the following alternative representation of the per­  based on all bits; this represents the previous state-of-the-
 mutation predicate:                                              art 
                                                               • The quadratic construction based only on irredundant bits 
                                                               • The linear construction (using extra chanining variables) 
                                                                  based only on irredundant bits 
                                                                  Several observations can be made about the data in 
 which can be simplified further by replacing the equalities   Table 1. The number of symmetries in these benchmarks is 
 by one-way implications leading, finally, to:                 large, but all symmetries, including phase shifts in bench­
                                                               mark families Urq, XOR and 2pipe, can be represented by 
                                                               fairly small sets of generators. The generators returned by 
                                                               Nauty appear very sparse on average, i.e., a typical generator 
 The CNF representation of each conjunct in (18) is obtained   affects only a small number of variables.2 This explains the 
 by substituting the definitions of the / and g variables and  reduction, by 1-2 orders-of-magnitude, in the size of symme­
 using the distributive law. Thus, using this construction the try-breaking predicates in column 13 (our first construction) 
 permutation predicate requires | additional variables (the    versus column 11 ([Crawford et aL, 1996]). Both the number 
 chaining predicates) and consists of , , -literal and 2|/| 4- of variables and the number of literals are reduced. While 
 literal clauses for a total of 14|/| literals.                our construction in column 13 only slightly extends the qua-


274                                                                                                      CONSTRAINTS dratic-size construction in [Aloul et al., 2002], our more     most cases it takes much less time to find symmetries of a 
advanced linear-size construction (column 15) offers an        CNF instance than to solve it. The 2pipe instances are an 
additional reduction by up to an order of magnitude. Note,     exception, but we believe that further advances in symmetry-
however, that the number of variables is unchanged—the         finding can rectify this exception. Second, the all-bits qua•
extra variables added by the two constructions have different  dratic construction due to [Crawford et al„ 1996] is dramati•
function, but can be mapped to each other one-to-one.          cally slower than our variants based on the cycle structure. 
   Table 2 empirically compares the effectiveness of the       Our linear-sized construction provides a further speed-up. 
symmetry-breaking predicates described in Table 1. First, in   Exceptions are the Hole-n benchmarks, where the difference 
                                                               between our two constructions is small, and the 2pipe bench•
                                                               marks where the quadratic-sized SBPs led to shorter run 
2 While our experiments clearly confirm that such generators exist, 
  finding them is a function of the graph automorphism program. times despite being almost thirteen times larger. Further 
  Since we used Nauty as a black box, we do not have a clear expla• investigation showed that this was a side-effect of mChaff's 
  nation of what causes Nauty to find such sparse generators,  VSIDS decision heuristic which tended to choose the auxil•
  whether even sparser generators can be found and whether Nauty iary variables first because they occur in many more clauses 
  will in some cases return less sparse generators.            than the original instance variables. Using BerkMin [Gold-


CONSTRAINTS                                                                                                          275 