                              Dual Lookups in Pattern Databases
            Ariel Felner                      Uzi Zahavi        Jonathan Schaeffer    and  Robert C. Holte
     Department of Information          Computer Science Dept.        Computing Science Department
        Systems Engineering                Bar-Ilan University             University of Alberta
       Ben-Gurion University            Ramat-Gan, Israel 92500        Edmonton, T6G 2E8, Canada
      Beer-Sheva, Israel 85104         Email:zahavi@cs.biu.ac.il      Email:jonathan,@cs.ualberta.ca
      Email: felner@bgu.ac.il                                           Email:holte,@cs.ualberta.ca

                    Abstract
    A pattern database (PDB) is a heuristic function stored
    as a lookup table. Symmetries of a state space are of-
    ten used to enable multiple values to be looked up in a
    PDB for a given state. This paper introduces an addi-
    tional PDB lookup, called the dual PDB lookup. A dual
    PDB lookup is always admissible but can return inconsis-
    tent values. The paper also presents an extension of the
    well-known pathmax method so that inconsistencies in
    heuristic values are propagated in both directions (child-
    to-parent, and parent-to-child) in the search tree. Exper-
    iments show that the addition of dual lookups and bidi-
    rectional pathmax propagation can reduce the number of
    nodes generated by IDA* by over one order of magnitude  Figure 1: Example of regular and dual lookups
    in the TopSpin puzzle and Rubik’s Cube, and by about a
    factor of two for the sliding tile puzzles.
                                                        This paper is concerned with the ﬁrst step, the mapping of
                                                      a state S to a pattern that can be looked up in a given PDB.
1  Introduction                                       The standard mapping, called the regular PDB lookup in this
Heuristic search algorithms such as A* and IDA* are guided paper, is illustrated in Figure 1(a) and (b) for the 15-puzzle.
by the cost function f(n) = g(n) + h(n), where g(n) is the Patterns are created by ignoring all the tiles except for 2, 3,
actual distance from the initial state to state n and h(n) is a 6 and 7. Each pattern contains tiles 2, 3, 6 and 7 in a unique
heuristic function estimating the cost from n to a goal state. combination of positions. The resulting {2-3-6-7}-PDB con-
If h(s) is “admissible” (i.e. is always a lower bound) these tains a unique entry for each pattern with the distance from
algorithms are guaranteed to ﬁnd optimal paths.       that pattern to the goal pattern (shown in the lower part of
  Pattern databases are heuristics in the form of lookup ta- Figure 1(b)). Figure 1(b) depicts the regular lookup in this
bles. They have proven very useful for deﬁning heuristics PDB for estimating a distance from a given state S to the goal
for combinatorial puzzles and other problems [Culberson and (Figure 1(a)). State S is mapped to a 2-3-6-7 pattern by ig-
Schaeffer, 1994; Edelkamp, 2001; Korf and Felner, 2002]. noring all the tiles other than 2, 3, 6 and 7. Then this pat-
  The domain of a search space is the set of constants used tern’s distance to the goal pattern is looked up in the PDB.
in representing states. A subproblem is an abstraction of the To be speciﬁc, if the PDB is represented as a 4-dimensional
original problem deﬁned by replacing some of these constants array, P DB, with the array indexes being the locations of
by a “don’t care” symbol. A pattern is a state of the subprob- tiles 2, 3, 6, and 7 respectively, the regular lookup for state S
lem. The pattern space for a given subproblem is a state space is P DB[8][12][13][14], because tile 2 is in location 8, tile 3
containing all the different patterns connected to one another is in location 12, etc. The value retrieved by a regular PDB
using the same operators that connect states in the original lookup for state S is a lower bound (and thus serves as an ad-
problem. A pattern database (PDB) stores the distance of missible heuristic) for the distance from S to the goal state in
each pattern to the goal pattern. Typically, a PDB is built by the original space.
searching backwards, breadth-ﬁrst, from the goal pattern un- It is common practice to exploit special properties of a
til the whole pattern space is spanned. Given a state S in the state space to enable additional lookups to be done in a
original space, a heuristic value for S, h(S), is computed us- PDB. [Cullberson and Schaeffer, 1998] describe several al-
ing a PDB in two steps. First, S is mapped to a pattern. Then, ternative lookups that can be made in the same PDB based
this pattern is looked up in the PDB and the corresponding on the physical symmetries of the 15-puzzle. For exam-
distance is returned as the value for h(S).           ple, because of the symmetry about the main diagonal, thePDB built for the goal pattern in Figure 1(b) can also be PDB based on tiles 5, 9, 12 and 15 is not available. However,
used to estimate the number of moves required to get tiles because costs in the 15-puzzle are symmetric and indepen-
8, 12, 9 and 13 from their current positions in state S to dent of the exact tiles involved, the dual question can be an-
their goal locations. We simply reﬂect the tiles and their swered using the {2-3-6-7}-PDB. As shown in Figure 1(d), if
positions about the main diagonal and use the {2-3-6-7}- we replaces the names of tiles 5, 9, 12 and 15 with the name
PDB  for retrieving the symmetric values. The idea of re- of the tile whose goal location they each currently occupy,
ﬂecting the domain about the main diagonal for having an- the 5-9-12-15 goal pattern at the bottom of Figure 1(c) turns
other set of PDBs was also used by [Korf and Felner, 2002; into a 2-3-6-7 pattern that can be looked up in the 2-3-6-7
Felner et al., 2004] when solving the 15 and 24 tile puzzles PDB. In particular, the dual lookup would retrieve the value
with additive PDBs (see Figure 4 below).              P DB[9][5][15][12], because in state S tile 9 is in tile 2’s goal
  Because all valid, alternative PDB lookups provide lower location, tile 5 is in tile 3’s goal location, etc.
bounds on the distance from state S to goal, their maximum Another example for dual looukups is the (N,K)-TopSpin
can be taken as the value for h(S). Of course, there is a trade- puzzle which has N tokens arranged in a ring. Any set of
off for doing this—each PDB lookup increases the time it K consecutive tokens can be reversed (rotated 180 degrees in
takes to compute h(S). Because additional lookups provide the physical puzzle). Our encoding of this puzzle has N op-
diminishing returns in terms of the reduction in the number erators for each possible reversal/rotation. Figure 2(a) shows
of nodes generated, it is not always best to use all possible the goal state of the (9,4)-TopSpin puzzle. Figure 2(b) shows
PDB lookups [Cullberson and Schaeffer, 1998]. A number of the result of reversing the tokens at locations 6-9, and Figure
methods exist for reducing the time needed to compute h(S) 2(c) shows the result of reversing the tokens in locations 4-7
by making inferences about some of the values without actu- of Figure 2(b).
ally looking them up in a PDB [Holte et al., 2004].
  The main contribution of this paper is a new, alternative 1   2    3    4    5    6    7    8    9 1   2    3    4    5     *    *     *    *
PDB lookup that is based on properties other than physical (a) The goal state of Top Spin (d) The goal pattern 
symmetries. We call it the dual PDB lookup. The dual lookup
is always admissible but, unlike previously considered PDB 1    2    3    4    5    9    8    7    6 1   2    3    *     *    5    4     *    *
lookups, it can return values in the search that are inconsis- (b) locations 6−9 of (a) reversed (e) The regular lookup for state (c)
tent. Our second contribution is a simple but useful extension
of the well-known pathmax method so that inconsistencies 1    2    3    8    9    5    4    7    6 1    2    3    *    *    *    *    4    5    
in heuristic values are propagated in both directions (child- (c) locations 4−7 of (b)  reversed (f) The dual lookup for state (c)
to-parent, and parent-to-child) in the search tree. Our ﬁnal
contribution is that dual lookups, with bidirectional pathmax      Figure 2: (9,4)-TopSpin states
propagation, produce state-of-the-art performance for three
standard test applications.                             Suppose patterns for TopSpin are deﬁned by ignoring to-
                                                      kens 6-9. The resulting PDB provides distances to the goal
                                                      pattern (shown in Figure 2(d)) from all reachable patterns.
2  Dual Lookups in Pattern Databases                  Consider Figure 2(c). The regular PDB lookup for this state
The states of many problems, such as the sliding tile puzzles, is based on the pattern in Figure 2(e), obtained from (c) by
Rubik’s cube, Towers of Hanoi, etc., are deﬁned by assigning mapping tokens 6-9 to “*”. Since tokens 1-5 are in locations
objects (e.g. tiles, cubies, disks) to locations.     1, 2, 3, 7 and 6, respectively, the regular lookup would be
  To explain the dual PDB lookup, consider again the {2-3- P DB[1][2][3][7][6]. For the dual lookup, we note that the
6-7}-PDB for the 15-puzzle deﬁned above. The regular PDB goal locations of tiles 1-5 (as in state (c)) are occupied by to-
lookup asks the question of what is the cost of getting tiles 2, kens 1, 2, 3, 8, 9. The dual lookup, P DB[1][2][3][8][9], gives
3, 6 and 7 from their current locations to their goal locations? the cost of moving these tiles to their goal locations. This
In general, the regular lookup focuses on a ﬁxed set of objects lookup corresponds to the pattern shown in Figure 2(f).
(the ones that deﬁne the patterns), and bases its lookup on Dual PDB lookups are possible where there is symmetry
their current locations, which vary from state to state. between objects and locations of the domain in the sense that
  In the dual PDB lookup the roles of locations and objects each object is located in one location and each location occu-
are switched. The dual PDB lookup focuses on a ﬁxed set pies only one object. Example domains where this is true are
of locations – the goal locations of the objects in the pattern the TopSpin puzzle (Section 4) and Rubik’s cube (Section 5).
– and bases its lookup on the objects that occupy those posi- A counter example is the towers of Hanoi where there is no
tions, which vary from state to state. In particular, the dual symmetry between locations and objects. The 15 puzzle do-
PDB lookup of Figure 1 asks this question: what is the cost main is more difﬁcult because the blank has to be handled
of moving the tiles that are currently in the goal location of differently from the other tiles. Nevertheless, even in this
tiles 2, 3, 6 and 7 to their home locations? For the state S seemingly asymmetric domain, the PDBs can be constructed
in Figure 1(a), for example, the dual PDB lookup asks, what in such a way as to enable the dual symmetry (see Section 6).
is the cost of getting tiles 9, 5, 15 and 12 from their current
locations (the goal locations of tiles 2, 3, 6 and 7) to their goal 3 Bidirectional Pathmax (bpmx)
locations? See Figure 1(c).                           Regular PDB lookups produce consistent heuristic values
  The dual question cannot be answered directly because a during search [Holte et al., 1996]. Dual lookups are admissi-ble, but not necessarily consistent. For our TopSpin example, Heuristic     Nodes         Time    bpmx
let hd be the result of a dual lookup on this PDB. In Fig- 1r+0d   40,019,429 / 1.0 67.76 / 1.0       0
ure 2(b), tokens 1-5 are in their goal locations and therefore 0r+1d 7,618,805 / 5.3 15.72 / 4.3      0
hd(b) = 0. Figure 2(c) is obtained from (b) by a single move. 0r+1d+c 1,397,614 / 28.6 2.93 / 23.1 194,135
However, the dual lookup for this state uses the pattern in 2r+0d   6,981,027 / 1.0 21.90 / 1.0       0
Figure 2(f), which is two moves away from the goal pattern. 1r+1d+c  492,686 / 14.2  1.47 / 14.9 34,725
Therefore, hd(c) = 2, which is inconsistent with hd(b) = 0 0r+2d+c   372,414 / 18.7  1.46 / 15.0 29,302
since (c) is only one move from (b).                    4r+0d         651,080 / 1.0   4.05 / 1.0      0
  [Mero, 1984] described two methods of propagating     0r+4d+c       143,177 / 4.6   1.09 / 3.7  4,638
heuristic values between a state and its children to take advan- 8r+0d 116,208 / 1.0  1.48 / 1.0      0
tage of inconsistencies. Let P be any state, {Ci} the children 4r+4d+c 82,606 / 1.4   0.94 / 1.6  1,155
of P , and dist(P, Ci) the cost of reaching Ci from P . Mero’s 0r+8d+c 74,610 / 1.6  1.12 / 1.3     915
ﬁrst propagation method, now known as pathmax, propagates 17r+17d+c    27,575         1.34           29
heuristic values from P to its children: h(P ) − dist(P, Ci) is
a lower bound on dist(C , Goal) and therefore can be used
                     i                                      Table 1: Solutions to the (17,4) TopSpin puzzle
instead of h(Ci) if it is larger. Mero’s second method prop-
agates heuristic values upwards, from the children of P to
P . The path from P to the goal must pass through a child of position. Thus, for implementation, both numbers above can
  1
P  . Thus, min(h(Ci) + dist(P, Ci)) is a lower bound on be divided by 17. Since all the values in the PDB were smaller
dist(P, Goal) and can be used instead of h(P ) if it is larger. than 16, each entry needs 4 bits and the PDB needs 259MB.
  Previous work failed to notice that when operators are in- A PDB of 9 tokens has actually 17 different ways of choos-
vertible (and costs symmetric), pathmax allows values to be ing which tokens are included. A PDB of tokens [1 . . . 9] can
propagated in both directions and is also applicable in undi- also be used as a PDB of [2 . . . 10], [3 . . . 11], etc, with the
rected graphs. This might produce a more useful children-to- appropriate mapping of tokens. Thus, a single PDB gives us
parent propagation than Mero’s second method.         17 regular heuristics and 17 dual heuristics. The search was
                                                      done using IDA*. Many duplicate states can be avoided by
                 2              4                     forcing two unrelated operators to be applied successively in
                                                      only one order. For example, the operator that reverses lo-
              5      1       5     3                  cations (1, 2, 3, 4) is not related to the operator that reverses
                                                      locations (11, 12, 13, 14). This operator ordering decreased
Figure 3: Propagation of values with inconsistent heuristics the number of generated nodes by an order of magnitude.
                                                        Table 1 presents data for different heuristics and combi-
                                                      nations. Each value in the table is an average over a set of
  The bidirectional pathmax method (bpmx) is illustrated in
                                                      1,000 random permutations. The average solution length for
Figure 3. The left side of the ﬁgure shows the (inconsistent)
                                                      this test set is 14.8. All the experiments reported in this paper
heuristic values for a node and its two children. When the
                                                      were run on a 1.7GHz Pentium 4 PC with 1GB of memory.
left child is generated, its heuristic (h = 5) can propagate
                                                        The table columns give the number of regular (‘r’) and
up to the parent and then down again to the right child. To
                                                      dual (‘d’) lookups used, the presence of bpmx cutoff (‘c’),
preserve admissibility, each propagation reduces h by the cost
                                                      the number of generated nodes (nodes and ratio to the same
of traversing that path (1 in this example). This results in
                                                      number of lookups with only-r result), the time (seconds and
h =  4 for the root and h = 3 for the right child. When
                                                      ratio), and the number of times that the bpmx cutoff occurred.
using IDA*, this bidirectional propagation can cause many
                                                        The results show that a single dual lookup outperforms a
nodes to be pruned that would otherwise be expanded. For
                                                      regular lookup by a factor of 5.3 in generated nodes (4.3 in
example, suppose the current IDA* threshold is 2. Without
                                                      running time). This is because the dual lookup frequently
the propagation of h from the left child, both the root node
                                                      “jumps” to different areas of the PDB and has a larger diver-
(f = g + h = 0 + 2 = 2) and the right child (f = g + h =
                                                      sity of different heuristic values as will be further explained in
1 + 1 = 2) would be expanded. Using the propagation just
                                                      Section 7. The bpmx cutoff further improves this to a factor
described, the left child will improve the parent’s h value to
                                                      of 28.6 in nodes (23.1 in time). The bpmx cutoff was appli-
4, resulting in a cutoff without even generating the right child.
                                                      cable 194,135 times, pruning 6,221,191 nodes, and averaging
                                                      32 nodes per instance of cutoff. These performance gains are
4  TopSpin                                            achieved using no additional storage, just by looking at one
We have implemented the above ideas on the (17,4)-TopSpin PDB in different ways.
puzzle. This domain has 17! = 3.55 × 1014 states. We gen- The table also shows the results of using two lookups
erated a PDB of the leftmost 9 tokens, a pattern space of and taking their maximum. Compared to two regular PDB
17 × 16 . . . × 9 = 8.82 × 109. Since this puzzle is cyclic, lookups, two dual lookups (with bpmx) give an 18.7-fold re-
we can assume that token number 1 is always in the leftmost duction in nodes. This result is better than combining one
                                                      regular and one dual lookup. When four lookups are used,
  1This is only true in a directed graph. In an undirected graph the again the dual-only lookup solution is better than the regular-
shortest path from P to the goal might pass through the parent of P . only lookup solution. We see diminishing returns when more       Heuristic           Nodes       Time             [Korf, 1997]’s original 1997 Rubik’s cube experiments
       1r+0d      90,930,662 / 1.0 28.18 / 1.0        were repeated, this time with dual PDB lookups. Korf used
       0r+1d      19,653,386 / 4.6  7.38 / 3.8        three PDBs for this domain: one PDB for the 8 corner cubies
       0r+1d+c     8,315,116 / 10.9 3.24 / 8.7        and two PDBs for two sets of 6 edge cubies. Since a legal
       2r+0d      12,649,720 / 1.0  4.68 / 1.0        move in this domain moves 8 cubies, the only way to com-
       1r+1d+c     2,997,539 / 4.2  1.34 / 3.5        bine these 3 PDBs is by taking their maximum. Note that
       0r+2d+c     5,290,272 / 2.4  2.32 / 2.0        there are 8 corner cubies and all 8 are used by the 8-corner
       4r+0d       1,053,522 / 1.0  0.64 / 1.0        PDB. Thus, performing a dual lookup for this particular PDB
       2r+2d+c     1,667,320 / 0.6  0.90 / 0.7        is irrelevant. Here, the entire space of corner cubies is in the
       0r+4d+c     1,053,759 / 1.0  0.67 / 0.9        database and both lookups give the same result.
       4r+4d+c      615, 563        0.51                Results for the same set of 10 random instances used in
       24r+24d+c     362,927        0.90              [Korf, 1997] were obtained. The results for Korf’s set of 8 +
                                                      6+6  PDBs were improved by a modest amount by adding the
                                                      dual lookups for both 6-edge PDBs (from 353 billion nodes to
 Table 2: Solutions to Rubik’s cube from one 7-edges PDB 253 billion). Increasing the edges PDB from 6 to 7 cubies and
                                                      using a 8+7r +7r +7d+7d  setting reduced the search to 54
and more lookups are done. Many lookups provide a diver- billion nodes – an improvement of a factor of 6.4 over Korf’s
sity of heuristic values anyway. Therefore, the improvement initial setting. The improvements of adding dual lookups for
factor of any additional lookup (dual or regular) decreases. the 6- and 7-edges PDBs are modest since most of the time
  Note that our fastest implementation uses 4 regular and 4 the 8-corner PDB has the maximum value; this PDB is larger
dual lookups took 0.94 seconds – 72 times faster than a sin- and contains more cubies than the 6- and 7-edge PDBs. We
gle regular lookup. Using 17 regular and 17 dual lookups measured these rates over 10 million random instances. For
produces the smallest search tree of only 27,575 generated the 8 + 6r + 6r + 6d + 6d setting, the 8-corner PDB had
nodes – a factor of 1,451 over a single regular lookup. the maximum value in 73.5% of these cases while one of the
  We used our fastest implementation (4r+4d+c) to solve lookups in the 6-edges cubies was the maximum in only 7.3%
larger versions of TopSpin. TopSpin (19, 4) is 18 × 17 times of the cases (the rest of the cases are a tie). These numbers
larger than the (17, 4) variant. We solved 20 instances for were changed to 40.8% and 21.3% respectively for the 8 +
TopSpin (19, 4). The average solution length is 17.3, 73 mil- 7r + 7r + 7d + 7d setting.
lion nodes are generated and the search takes 172 seconds.
For TopSpin (20, 4) (19 times larger), we tested on ﬁve prob- 6 Sliding-tile Puzzles


lems with an average solution length of 20. These problems


                                                          ¢ ¢       ¤ ¤       ¦ ¦            


                                                          £ £       ¥ ¥       § §         ¡ ¡


                                                          ¢ ¢       ¤ ¤       ¦ ¦            


                                                          £ £       ¥ ¥       § §         ¡ ¡


                                                          ¢ ¢       ¤ ¤       ¦ ¦            


                                                          £ £       ¥ ¥       § §         ¡ ¡


                                                          ¢ ¢       ¤ ¤       ¦ ¦            


                                                          £ £       ¥ ¥       § §           ¡


averaged 2.9 billion nodes and took 7,716 seconds.                                        ¡


                                                          ¢ ¢       ¤ ¤       ¦ ¦            


                                                          £ £       ¥ ¥       § §         ¡ ¡
                                                              7                   6   6     6    6
                                                                     7   8
5  Rubik’s Cube
                                                              8                6
[Korf, 1997] solved the 3 × 3 × 3 Rubik’s cube, contain-                             6      6     6
ing roughly 4 × 1019 different reachable states. There are
20 movable sub-cubes, or cubies. They can be divided into Figure 4: Partitionings and reﬂections of the tile puzzles
eight corner cubies, with three faces each, and twelve edge
cubies, with two faces each. As a ﬁrst experiment, we built a We have also implemented the new ideas for the sliding-tile
7-edge-cubies PDB, the largest that can be stored in 1GB of puzzles. For the 15-puzzle, we used the same 7 − 8 partition-
memory. There are 510,935,040 possible permutations of the ing from [Korf and Felner, 2002] (Figure 4). These PDBs are
7 edge cubies. At 4 bits per entry, 255MB are needed for this constructed so that their heuristic values can be added [Felner
PDB. As with TopSpin, symmetries in the domain mean that et al., 2004] together and preserve admissibility. The PDBs
there are multiple possible regular and dual lookups. can be reﬂected across the diagonal, obtaining another set of
  Table 2 presents results for a number of possible combina- 7 − 8 heuristics (also shown in Figure 4).
tions of this setting (the table headings have the same mean- Dual lookups for this domain are not obvious. While there
ing as in Table 1). The start states used were “easy”—100 are 16 similar locations, the 16 tiles are not similar as there are
different states obtained by 14 random moves from the goal 15 real tiles and one blank. Given the location of the blank,
conﬁguration (average solution length of 10.66).      then a horizontal line (or a symmetric vertical line) across the
  The results are similar to the TopSpin experience, albeit middle of the puzzle divides it into two regions of 8 locations.
slightly lower. Again, the dual lookup and bpmx cutoffs re- One region (call it A) has 8 locations which are occupied by
sult in large reductions in the search effort. However, for this 8 real tiles, and another region of 8 locations (B) which are
puzzle by the time you hit four lookups, diminishing returns occupied by 7 real tiles and the blank. Performing a dual
has taken over and the advantage of the dual has dissipated. lookup for region A in the 8-tile PDB is identical to what was
Our best implementations reduced the number of nodes gen- done in TopSpin and Rubik’s cube.
erated (24r+24d+c) by a factor of 250, and the time (4r+4d+c) A dual lookup in B is complicated by the blank. Figure 5
by a factor of 55. All this was possible with just one 7-edge- shows four possible blank locations in B for a horizontal par-
cubies PDB stored in memory.                          titioning. Other locations of the blank (as well as a vertical                                                        Heuristic        Av. H        Nodes       Time
          b    b              B         B               1r               44.75  136,289 / 1.0 0.081 / 1.0
        a   c    c  a
                              A         A               1r+1r*           45.63   36,710 / 3.7 0.034 / 2.4
       c          c                                     1d               44.39  278,820 / 0.5 0.157 / 0.5
         b  d   d   b
                            (a)        (b)              1d+c             44.39  247,299 / 0.6 0.139 / 0.6
       c          c
         b  d   d   b                                   1d+1d*+c         44.40   65,349 / 2.1 0.076 / 1.1
          b   b               B         B               1r+r*+1d+1d*+c   46.12   18,601 / 7.3 0.022 / 3.7
        ac      c   a
                              A         A
          General                                                Table 3: Results for the 15 puzzle
                             (c)      (d)
                                                       PDBs                      Nodes    Time   Memory
   Figure 5: Four different (dual) 7-tile pattern databases 1r+1r*       16,413,254,279  32,826  244,140
                                                       1r+1r*+1d+1d*+c    6,877,105,604  22,955  976,562
partitioning into two regions) can be easily transformed into
one of these 4 conﬁgurations (e.g., by reﬂection). Consider          Table 4: 24 puzzle results
the regular 7-tile PDB of tiles (1 . . . 7) (which corresponds
to the 7 real tiles of region B of Figure 5(a)). This PDB an- The average solution for these instances is 52.55. The ﬁrst
swers the question of how to move these real tiles from any column indicates the heuristic used, with ‘r*’ and ‘d*’ repre-
possible conﬁguration to their goal conﬁguration. The dual senting the reﬂected regular and dual PDB lookups. The ﬁrst
lookup should answer the question of how many moves it row presents the results when only the regular PDB is used,
takes to distribute the tiles that are currently located in lo- while the second row took the maximum of the regular and
cations (1 . . . 7) to their goal conﬁguration. If these tiles are reﬂected PDBs. Note that these two rows are the same re-
all real tiles (and the blank is in the corner) then getting this sults obtained by [Korf and Felner, 2002] but on our current
data from the regular PDB is as before. However, when the machine. The next three rows present results for different ver-
blank is not in the corner, (the other cases of Figure 5) one of sions of the dual lookup. Note that for this domain the bpmx
the tiles occupying locations (1 . . . 7) is the blank. Therefore, cutoff yielded a reduction in nodes of only 10% for a single
the answer from a dual lookup of the regular 7-tile PDB will dual lookup. Finally, the last row presents the maximum over
also count moves of the blank while the real tile in the corner the four PDB combinations. Using dual lookups reduces the
will be ignored. This might lose admissibility.       number of generated nodes by more than a factor of 2 and
  There are two possible ways to solve this problem. The eliminated one third of the execution time compared to the
ﬁrst is to artiﬁcially move the blank tile to the nearest corner. best results of [Korf and Felner, 2002] (line 2 of Table 3). To
In effect, this means reducing the PDB value by one or two (to our knowledge using the four regular/dual normal/reﬂected
account for the extra blank moves) to preserve admissibility. PDB lookups gives the best existing heuristic for this puzzle.
Now we can use the regular 7-tile PDB for a dual lookup, at Of historical note is that the number of generated nodes is
the cost of a weaker heuristic (and, hence, additional search). now nearly 30,000 times smaller than when IDA* ﬁrst solved
  A better idea is to add three more 7-tile PDBs for a to- the 15-puzzle using only Manhattan distance [Korf, 1985].
tal of four—one for each of the cases in Figure 5. For each Similar experiments were performed using the 24-puzzle.
blank scenario we build a regular 7-tile PDB assuming that The original 6-6-6-6 partitioning from [Korf and Felner,
the blank is located in the relevant location. For example, 2002] (Figure 4) needed storage for only two 6-tile PDBs
for region B of Figure 5(b) we build a PDB for the tiles since all the 3 × 2 rectangles are symmetric. As before, we
{0, 2, 3, 4, 5, 6, 7} and assume that tile 1 is the blank tile. This need additional PDBs to handle the blank. We use 8 6-tile
PDB cannot be consulted as a regular PDB since we assume PDBs: one for all the 3 × 2 rectangles and their duals, but
that tile 1 is the blank. However, for any partitioning where we need 7 6-tile PDBs for the irregular shape in the top left
region B corresponds to this case, we can perform a dual corner (see Figure 4). Each 6-tile PDB needs 122MB and our
lookup in this PDB and retrieve the correct value for the tiles new system needs 8 times as much memory.
that are currently located in locations {0, 2, 3, 4, 5, 6, 7} (or In [Korf and Felner, 2002] 50 random instances of the 24-
their reﬂections). Similarly for the other blank locations. puzzle were solved. Table 4 presents the average results over
  The frame on the left of Figure 5 indicates the relevant PDB the 25 easiest problems of that set (the 25 with the fewest
for the dual lookup of each possible blank location. In those nodes generated). The average solution length for this set is
locations where two PDBs are given, then the right label in- 96.2 moves. Using both regular and dual lookups and their
dicates the PDB to use for a horizontal partition while the left reﬂections reduces the number of generated nodes by a factor
corresponds to a vertical partition. The amount of memory of 2.38 and the time by a factor of 1.43 when compared to the
needed is 519KB for the 8-tile PDB and 57.5KB for a 7-tile results of [Korf and Felner, 2002] (ﬁrst line of Table 4).
PDB. Thus the total memory needs (the 8-tile and 4 7-tile
PDBs) is 749KB. The three extra PDBs needed to handle all
the dual cases correctly represent a small increase of memory. 7 Discussion
  Table 3 presents results of the different heuristics averaged Dual PDB lookups double the number of possible PDB
over the same 1000 instances used in [Korf and Felner, 2002]. lookups. They are effective for all the domains studied but