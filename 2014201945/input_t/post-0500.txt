                             Heuristics for Hard ASP Programs             ∗

                      Wolfgang Faber†    and  Nicola Leone   and  Francesco Ricca
             Department of Mathematics, University of Calabria, I-87030   Rende (CS), Italy
                                Email: {faber,leone,ricca}@mat.unical.it


                    Abstract                            Most of the optimization work on ASP systems has fo-
                                                      cused on the efﬁcient evaluation of non-disjunctive programs
    We deﬁne a new heuristic h for ASP, and imple-
                           DS                         (whose power is limited to NP/co-NP), whereas the opti-
    ment it in the (disjunctive) ASP system DLV. The
                                                      mization of full (disjunctive) ASP programs has been treated
    new heuristic improves the evaluation of ΣP /ΠP -
                                         2  2         in fewer works (e.g., in [Janhunen et al., 2000; Koch et al.,
    hard ASP programs while maintaining the benign
                                                      2003]). In particular, we are not aware of any work concern-
    behaviour of the well-assessed heuristic of DLV
                                                      ing heuristics for ΣP /ΠP -hard ASP programs.
    on NP  problems. We experiment with the new                       2   2
                                                        In this paper, we address the following two questions:
    heuristic on QBFs. h signiﬁcantly outperforms
                      DS                              ◮ Can the heuristics of ASP systems be reﬁned to deal more
    the heuristic of DLV on hard 2QBF problems.
                                                      efﬁciently with ΣP /ΠP -hard ASP programs?
    We compare also the DLV system (with the new                     2  2
                                                      ◮ On hard ΣP /ΠP problems, can ASP systems compete with
    heuristic h ) to three prominent QBF solvers.                2  2
             DS                                       other AI systems, like QBF solvers?
    The results of the comparison, performed on in-
                                                        We deﬁne a new heuristic hDS for the (disjunctive) ASP
    stances used in the last QBF competition, indicate                                            ΣP ΠP
    that ASP systems can be faster than QBF systems   system DLV, aiming at improving the evaluation of 2 / 2 -
    on ΣP /ΠP -hard problems.                         hard ASP programs, but maintaining the benign behaviour
        2   2                                         of the heuristic of DLV on NP problems. We experimen-
                                                      tally compare hDS against the DLV heuristic on hard 2QBF
1  Introduction                                       instances, showing a clear beneﬁt. We also experiment the
Answer set programming (ASP) is a novel programming   competitiveness of ASP w.r.t. QBF solvers on hard problems,
paradigm, which has been recently proposed in the area of indicating that ASP systems are very competitive with QBF
                                                                ΣP ΠP
nonmonotonic reasoning and logic programming. The idea systems on 2 / 2 -hard problems.
of answer set programming is to represent a given computa-
tional problem by a logic program whose answer sets corre- 2 Answer Set Computation and Heuristics
spond to solutions, and then use an answer set solver to ﬁnd
such a solution [Lifschitz, 1999]. The knowledge represen- We ﬁrst recall the main steps of the computational process
tation language of ASP is very expressive in a precise math- performed by ASP systems, in particular the DLV system,
ematical sense; in its general form, allowing for disjunction which will be used for the experiments.
in rule heads and nonmonotonic negation in rule bodies, ASP An answer set program P in general contains variables.
                                            ΣP        The ﬁrst step of a computation of an ASP system eliminates
can represent every problem in the complexity class 2 and
ΠP                                                    these variables, then the following algorithm is invoked:
 2 (under brave and cautious reasoning, respectively) [Eiter
et al., 1997]. Thus, ASP is strictly more powerful than SAT- Function ModelGenerator(I: Interpretation): Boolean;
based programming, as it allows us to solve even problems begin
which cannot be translated to SAT in polynomial time. The    I := DetCons(I);
high expressive power of ASP can be proﬁtably exploited in   if I = L then return False; (* inconsistency *)
AI, which often has to deal with problems of high complex-   if no atom is undeﬁned in I then return IsAnswerSet(I);
ity. For instance, problems in diagnosis and planning under  Select an undeﬁned ground atom A according to a heuristic;
incomplete knowledge are complete for the the complexity     if ModelGenerator(I ∪ {A}) then return True;
    ΣP    ΠP                                                 else return ModelGenerator(I ∪ {not A});
class 2 or 2 , and can be naturally encoded in ASP [Baral,
2002; Leone et al., 2001].                            end;
  ∗This work was partially supported by the European Commission Roughly, the Model Generator produces some “candidate”
under projects IST-2002-33570 (INFOMIX) and IST-2001-37004 answer sets. The stability of each of them is subsequently ver-
(WASP), and by FWF (Austrian Science Funds) under projects iﬁed by the function IsAnswerSet(I), which veriﬁes whether
P16536-N04 and P17212-N04.                            the given “candidate” I is a minimal model of the GL-
  †Funded by APART of the Austrian Academy of Sciences. transformed program and outputs the model, if so. IsAnswer-Set(I) returns True if the computation should be stopped and 4 ASP vs QBF Solvers
False otherwise.                                      The main goal of this paper is to improve the performance
                                             I
  The function DetCons() computes an extension of with of ASP systems for problems located at the second level of
the literals that can be deterministically inferred (or the set the polynomial hierarchy. One may wonder whether, on such
of all literals L upon inconsistency). If DetCons does not ΣP /ΠP -hard problems, ASP systems are competitive with
                             A                          2  2
detect any inconsistency, an atom is selected according to other AI systems, like the QBF solvers. In order to give a
                                            I   A
a heuristic criterion and ModelGenerator is called on ∪ { } ﬁrst answer to this question, we have also performed a com-
      I  not A           A
and on ∪{      }. The atom plays the role of a branching parison with QBF solvers Quantor [Biere, 2004], Semprop
variable of a SAT solver.                             [Letz, 2002], and yQuafﬂe [Zhang and Malik, 2002] on the
  The heuristic hUT , proposed in [Faber et al., 2001] is cur- ΣP      ΠP
                                                      set of all 2 - and 2 -complete QBF formulas of the last
rently employed in DLV. It is mostly based on the number of QBF competition. The results below report the number of in-
UnsupportedTrue (UT) atoms (called MBTs in [Faber et al., stances solved within 660s and show that DLV (with heuristic
2001]), i.e., atoms which are true in the current interpretation h ) generally outperformed the QBF solvers.
but miss a supporting rule, trying to minimize UT atoms and DS
hence more likely arrive at supported models.                     DLV (hDS ) Quantor Semprop   yQuaffle
                                                         Robot      27 (84%) 10 (31%) 13 (41%)  17 (53%)
  For hard ASP programs (i.e., non-HCF programs [Ben-    Random    108 (100%) 14 (12%) 90 (83%) 53 (49%)
                                       ΣP                T ree       2 (100%) 2 (100%) 2 (100%)  2 (100%)
Eliyahu and Dechter, 1994] – they express 2 -complete
                                                         KP H        1 (100%) 1 (100%) 1 (100%)  1 (100%)
problems under brave reasoning), supported models are often T otal  137 (96%) 26 (18%) 105 (73%) 72 (50%)
not answer sets. Moreover, answer-set checking is computa-
tionally expensive (co-NP), and may consume a large portion References
of the resources needed for computing an answer set.
                                                      [Baral, 2002] C. Baral. Knowledge Representation, Reason-
  We therefore propose the new heuristic hDS, which tries
in addition to maximize the degree of supportedness, the av- ing and Declarative Problem Solving. CUP, 2002.
erage number of supporting rules for non-HCF true atoms. [Ben-Eliyahu and Dechter, 1994] R. Ben-Eliyahu and
Intuitively, if all true atoms have many supporting rules in a R. Dechter. Propositional Semantics for Disjunctive Logic
model M, then the elimination of an atom from the model  Programs. AMAI, 12:53–87, 1994.
would violate many rules, and it becomes less likely to ﬁnd a [Biere, 2004] A. Biere. Resolve and Expand. 2004. SAT’04.
subset of M which is a model of the reduct PM , disproving [Eiter et al., 1997] T. Eiter, G. Gottlob, and H. Mannila. Dis-
that M is an answer set. We deﬁne hDS as a reﬁnement of  junctive Datalog. ACM TODS, 22(3):364–418, 1997.

the heuristic hUT (i.e., A <hUT B ⇒ A <hDS B). In this [Faber et al., 2001] W. Faber, N. Leone, and G. Pfeifer. Ex-
way, hDS keeps the behaviour of the well-assessed hUT on perimenting with Heuristics for Answer Set Programming.
NP problems while, as we will see in Section 3, it sensibly In IJCAI 2001, pp. 635–640.
            h                         ΣP
improves over UT on hard 2QBF problems ( 2 -complete). [Gent and Walsh, 1999] I. Gent and T. Walsh. The QSAT
                                                         Phase Transition. In AAAI, 1999.
3  Comparing    hUT  vs hDS: Experiments              [Janhunen et al., 2000] T. Janhunen, I. Niemela,¨ P. Simons,
We generated randomly a data set of 100 2QBF formulas, fol- and J.-H. You. Partiality and Disjunctions in Stable Model
lowing [Gent and Walsh, 1999], and used the ASP encoding Semantics. In KR 2000, 12-15, pp. 411–419.
described in [Leone et al., 2005].                    [Koch et al., 2003] C. Koch, N. Leone, and G. Pfeifer. En-
  Experiments were performed on a PentiumIV 1500 MHz     hancing Disjunctive Logic Programming Systems by SAT
machine with 256MB RAM running SuSe Linux 9.0. For ev-   Checkers. Artiﬁcial Intelligence, 15(1–2):177–212, 2003.
ery instance, we allowed a maximum running time of 7200 [Leone et al., 2001] N. Leone, R. Rosati, and F. Scarcello.
seconds (two hours). The results of our experiments are dis- Enhancing Answer Set Planning. In IJCAI-01 Workshop
played in the following graphs, in which a line stops when- on Planning under Uncertainty and Incomplete Informa-
ever some instance was not solved within the time limit. tion, pp. 33–42, 2001.

         h                                            [Leone et al., 2005] N. Leone, G. Pfeifer, W. Faber, T. Eiter,
         UT                        h
         h                         UT
         DS                        hDS
  1000                     1000                          G. Gottlob, S. Perri, and F. Scarcello. The DLV System for
                                                         Knowledge Representation and Reasoning. ACM TOCL,
   100
                            100                          2005. To appear.
   10                       10                        [Letz, 2002] R. Letz. Lemma and Model Caching in De-

    1                        1                           cision Procedures for Quantiﬁed Boolean Formulas. In
                                                         TABLEAUX 2002, pp. 160–175, Denmark, 2002.
 Average  Execution Time [s]
   0.1                    Maximum  Execution Time [s] 0.1 [Lifschitz, 1999] V. Lifschitz. Answer Set Planning. In

  0.01                      0.01                         ICLP’99, pp. 23–37.
    0   20  40  60 80  100    0  20  40  60  80 100
       Number of propositional variables Number of propositional variables [Zhang and Malik, 2002] L. Zhang and S. Malik. Towards
                                                         a Symmetric Treatment of Satisfaction and Conﬂicts in
  It is clear that the new heuristic h outperforms the
                                 DS                      Quantiﬁed Boolean Formula Evaluation. In CP 2002, pp.
heuristic h in these experiments, advancing the “maximum
        UT                                               200–215, NY, USA, 2002.
solvable-size” from 56 up to size 92, and reducing the average
execution times of the smaller instances.