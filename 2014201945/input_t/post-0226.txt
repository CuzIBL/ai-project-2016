             Incorporating     a  folding  rule  into  inductive   logic  programming
                                         David  A. Rosenblueth
                  Instituto de Investigaciones en Matematicas´ Aplicadas y en Sistemas
                              Universidad  Nacional  Autonoma´  de Mexico´
                                   Apdo.  20-726, 01000  Mexico´ D. F.
                                                Mexico


                                      drosenbl@servidor.unam.mx


                                                                       ¦    
                    Abstract                          expressions ¦¨ and , and “ ” denotes equality up to vari-
                                                      able renaming.


    Many inductive logic programming systems have
                                                                                                        
                                                        When  used to fold two clauses, the folding rule infers ¥ F


    operators reorganizing the program so far inferred,


                                                           ¥   ¥   ¥      ¥  


                                                                  ¨           


                                                      from D ¨ , E  , D  , and E :


                                                                ¢                          ¢
                                                                                           £


    such as the intra-construction operator of CIGOL.          £


                                                                 ¨    ¥ ¨          ¡       ¥ 


    At the same time, there is a similar reorganizing    ¡¨         D                          D


                                                               ¢    ¢                     ¢     ¢




                                                          
                                                                                      


                                                              £                           £


                                                                    ¤                          ¤




                                                                     ¥                           ¥
                                                                        ¨               
  


    operator, called the “folding rule,” developed in           ¨©¨
 E                         E


                                                                                 ¢
                                                                          


    program transformation. We argue that there are                             ¤


                                                                                   ¥
                                                                                     
    advantages in using an extended folding rule as a                      ¡
    F


    reorganizing operator for inductive-inference sys- where ¡ ¡¨!©¨"¡ . In addition, there are some syn-
    tems. Such an extended folding rule allows an     tactic restrictions for soundness, for which we refer the reader


    inductive-inference system not only to recognize  to [Pettorossi and Proietti, 1998]. An application of folding


                                                                ¨#  ¥   ¥ 
    already-learned concepts, but also to increase the replaces ¥ E and E by F .


    efﬁciently of execution of inferred programs.       Observe that this rule has the limitation of requiring both


                                                                                                        


                                                                       ¥      ¥  
                                                                                 


                                                      clauses to be folded E ¨ and E , to have the same head


                                                                                ¢
                                                                                ¤


1  Introduction                                       and the same part of the body which is not an instance of


                                                                               ¨   ¥ 
                                                      the bodies of the deﬁnition ¥ D and D .
At ﬁrst glance, it might seem that inductive logic program- On the other hand, folding has the advantage of allowing


ming (ILP) and logic program transformation (LPT) have


                                                                ¥      ¥  
                                                                           
                                                      the clauses D ¨ and D  to be drawn from a previous pro-
opposite objectives. While ILP is interested in generalizing gram [Pettorossi et al., 1996].
from examples, LPT is careful to preserve correctness. Nev- To be able to perform a comparison with intra-
ertheless, there are ILP operators, like the intra-construction construction, we will assume that intra-construction consists
operator of CIGOL, that do not generalize, and instead reor- of two parts: ﬁrst the “invention” of a predicate, and then the
ganize the program so far inferred. This suggests looking at clause-reorganization proper. The second part would then be:


logic program transformation rules to obtain better nongener-


                                                                      ¥ ¨          ¡    ¥ 


                                                             ¡$¨     D                       D
                                                                                           ¢


alizing operators for ILP.                                         ¢




                                                                                      
                                                              




                                                                                           ¤
                                                                   ¤






                                                                                              ¥
                                                                      ¥                        
                                                                




                                                                                            
                                                                    ¨   ¨                      


  One LPT  rule, called “folding,” [Pettorossi and Proietti,   ¨       E                       E


                                                                                 ¢
                                                                          


1998] is reminiscent of intra-construction, with some impor-                    ¤


                                                                                   ¥
                                                                           ¡

                                                                                    F 
tant differences. For example whereas intra-construction pro-


                                                      where






                                                                             ¢
                                                                                           ¢
                                                                                                    ¢





                                                                                        

duces the deﬁnition of a new predicate (i.e. “concept”), fold-                                   






                                                                             ¤
                                                                                           ¤
                                                                                                   ¤






                                                                          ¥ 
 %     ¥&¥
                                                                                          
  
¥
                                                                                                  
   &


                                                                                         ¨  ¨
                                                                                                     
ing receives as input such a deﬁnition, so that there is a sepa-                  msg            




rate, dedicated rule for creating a deﬁnition. The reason there              ¡')(*¥,+-¨
.#..#
&+0/1
                                                                                           2


is such a separate rule in LPT is that the derivation of efﬁ-                        2


                                                                             ¡23)(*¥,4 
#.#..#
4 


                                                                                     ¨     /
                                                                                       ¢


ciently executable programs is closely related to being able to ¢


                                                                                    


                                                           ¤                          ¤


                                                                   2         2


                                                        ¥ 
 !5+-¨#64 
#..#.#
+0/764 :¥ 2
 2;
                                                                             /98
fold using an already-existing deﬁnition.                          ¨


  Researchers have developed several reorganizing operators An application of the second part of intra-construction also


                                                                ¨#   ¥   ¥ 
for ILP. Such operators can be found, for instance in the sys- replaces ¥ E and E by F . Compared with folding, not
tems devised by Muggleton, Banerji, Ling, and Rouveirol and only must the deﬁnition clauses be unit clauses, but their ar-


Puget. We have selected Muggleton’s intra-construction as a gument places must be terms that undo the generalization


                                                                          ¥  ¨#   ¥ 
representative of these operators for performing a comparison when resolving ¥ F with D and D . If we are introduc-
with folding. The main ideas of our comparison, however, ing a new deﬁnition, such constraints might not be relevant.


should carry over to other similar operators.
                                           ¢


                                     ¢                If, however, we wish to recognize an already-inferred concept


              


                                     £
                                           ¤


  Throughout,  and ¡ denote atoms, and and   denote   or we are interested in increasing the efﬁciency of execution
tuples of atoms (we will assume deﬁnite logic programs). of our inferred program, it might be important to be able to


Also, msg ¥§¦©¨
¦ denotes the most speciﬁc generalization of relax such limitations.2  A  common    extension of folding and              both folding and intra-construction are unable to derive the


   intra-construction                                 desired concept from (4) and (5):


                                                                         
    
&+       ¥§+ 
As an illustration showing the need for increasing the efﬁ-      arch ¥&¥,+ beam      column          (6)
ciency of an inferred program, consider the string-matching Being able to derive the concise version of arch (6) might
problem. This problem consists in ﬁnding all occurrences (or be important if we have already the same concept under a


only one occurrence, if any) of a string called the pattern different name:


                                                                          
     
&+ &     ¥,+ 


within another string called the text. Suppose that our pat-    gateway ¥&¥§+ beam     column
                ¢

tern is the string  ¡  . If we give the following two examples, We have recently extended the ordinary folding rule so as


both of which are a text having an occurrence of this pattern: to overcome these limitations of folding [Rosenblueth, 2005].
                          ¢¦§



                   £                                  Our extension can be viewed as a common generalization of


                    ¥¤  9
¦  
  
                    ¥                           (1)




                            ¢¦§                       ordinary folding and intra-construction:


                   £


                                                              ¢                            ¢


                                                             £                             £


                    ¥¥¤  9
¦  
¨  
  


                                                               ¨      ¥ ¨          ¡        ¥  


                                                        ¡$¨          D                            D




                                                                                           ¢     ¢
                                                              ¢    ¢




                                                                                      
                                                         




                                                                                           £
                                                             £
                                                                                                ¤


we can apply absorption, deriving:                                 ¤




                                                                                             
    ¥
                                                                
   ¥                              




                                                                                               
                                                               ¨ ¨  ¨   ¨                            


                                                         ¨             E                            E


                        §




                                                                                                ¢
                                                                   ¢


                  £          £




                                                                                      
                                                         




                                                                                                ¤
                                                                   ¤


                    ¥¤  
© +   ¥§+ 


                    ¥                           (2)




                                                                                        ¡   
    ¥
                                                           ¡   
   ¥                              




                                                                                              
                                                               ¨ ¨  ¨   ¨                            


                                                         ¨             F                            F


                                                                                 ¢
                                                                          


A third example:                                                                ¤


                                                                                   ¥ 


                                                                           ¡
    F


                      ¢     ¢§


                   £


                    ¨¤ 
¨  
¨  
  


                    ¥                                 where


                                                                    ¢             ¢        ¢


                                                                                        


                                                                    ¤             ¤       ¤


                                                                   
       ¥&¥ ¨
 ¨!
¥ ©
 &


allows us to apply absorption again, inferring:                  ¥       msg




                                                                             ¥§¡   
 ¡   
                                                                    ¡  


                                                                               ¨ ¨¨  #
                        §


                     ¢                                                   msg


                   £         £


                                                                                                ¢


                                                                                                £


                    ¥¤ © +   ¥§+ 


                    ¥                           (3)


                                                            2                                         2
                                                                                                 2
                                                      Here,   only acts on the variables occurring in , and 




Clauses (1), (2), and (3) can be regarded as representing a only acts on the variables occurring in ¡2 and not occurring


                                                         ¢


                                            ¢    ¢


                                                        £


                                       ¥   ¡ 




                                                                                         
                                                                                      ¥
                                                                                        2
ﬁnite-state automaton accepting the language      .   in  2 (i.e. the head-only variables in D ). In addition, we


However, these clauses are a nondeterministic program, re- preserve the syntactic conditions on ©2 developed for ordinary
quiring a quadratic time in the worst case to ﬁnd an oc- (multiple-clause) folding [Pettorossi and Proietti, 1998].


currence of the pattern. Note that this program cannot be The main point of our folding rule is the computation
                                                                         2
converted to a deterministic version with intra-construction. of the substitutions  in such a way that soundness is
A reason is that we would need to be able to apply intra- preserved. We distinguish two kinds of head-only vari-


construction without inventing a new predicate at every ap- able instantiation: (a) coverage, taking a function sym-


                                                                                                      ¢
                                                                                                    


plication. (Such already-existing predicates represent edges                                          ¤


                                                                                         2        ¥ 2
 2 


                                                      bol or variable from the substitutions  , where


                                                                  ¢       ¢


                                                                       
                                                                          ¤


going backwards in the corresponding automaton.) Allow-          ¤


                                                            ¥¥ ¨
 ¨#!
¥  
  2 %©

                                                        msg                    (       ), and (b) matching,
ing the use of already-existing deﬁnitions is accompanied by taking the function symbol from the corresponding position


a possible violation of the conditions for intra-construction in the clause of the other single-clause folding.
       ¡
(i.e. the 2 ’s may not have the required form).         The contributions of this poster over [Rosenblueth, 2005]
                                              [
  This limitation suggests using the ordinary folding Pet- are (1) the comparison of folding with intra-construction and
                     ]
torossi and Proietti, 1998 rule as part of the operator reper- (2) the development of inductively inferred example pro-
                          [                  ]
toire of an ILP system. In fact, Pettorossi et al., 1996 show grams. We are currently investigating the possibility of em-
how to determinize a program similar to the one we just in-
                                                      bedding our folding rule in CIGOL.
ferred with absorption (given as speciﬁcation by the user),
where the folding rule plays a central role.          References
  The ordinary folding rule [Pettorossi and Proietti, 1998],
however, is not adequate for inductive logic programming: [Pettorossi and Proietti, 1998] Alberto Pettorossi and Maur-


We observed that this rule requires the set of atoms that do izio Proietti. Transformation of logic programs. In Dov M.


                                           ¢
                                     
not match the bodies of the deﬁnition (i.e. and ¤ ) be the Gabbay, C. J. Hogger, and J. A. Robinson, editors, Hand-


                                                         book of Logic in Artiﬁcial Intelligence and Logic Program-


                                 ¨   ¥ 
same in each clause to be folded (i.e. ¥ E and E ).
  Now  we give another illustration. Suppose an inductive- ming, volume 5, pages 697–787. Oxford University Press,


inference system has inferred the following description of an 1998.
                                  §


                          §                           [                  ]


                        ¨¤ 
    
¤ 
arch, where the example arch ¥&¥ beam is not given until Pettorossi et al., 1996 Alberto Pettorossi, Maurizio Proi-


later:                                                   etti, and Sophie Renault. Enhancing partial deduction
                          §


              §                                          via unfold/fold rules. In Proc. 6th Int. Workshop on


        ¥¤ +©  
  
¤ +©           ¥§+ !



    arch ¥&¥    beam           brick or block            Logic Program Synthesis and Transformation, pages 146–


                                      
                               column ¥         (4)      168, Stockholm, Sweden, 1996. Springer-Verlag. Lecture


            §                                            Notes in Computer Science No. 1207.


          ¥¤  
    column ¥


                §                                     [Rosenblueth, 2005] David A. Rosenblueth. A multiple-


          ¥¥¤ +©               ¥,+ !
    ¥ 
                  
    column         brick or block   column
                                                         clause folding rule using instantiation and generalization.


If we now add the example:                               submitted to Fundamenta Informaticae (Special Issue on
                               §


                       §                                 Program Transformation), 2005.


                    ¨¤ 
     
¤  
                arch ¥&¥ beam                   (5)