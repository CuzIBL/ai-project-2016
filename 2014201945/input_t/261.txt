                                 Parallelizing State Space Plans Online 

                             Romeo Sanchez Nigenda & Subbarao Kambhampati 
                                Department of Computer Science and Engineering 
                                 Arizona State University, Tempe AZ 85287-5406 
                                          Email: {rsanchez,rao}@asu.edu 

                        Abstract                               2 AltAlt Background 

                                                               The AltAlt planning system is based on a combination of 
     Searching for parallel solutions in state space plan•     Graphplan [Blum and Furst, 1997] and heuristic state space 
     ners is a challenging problem, because it would re•       search [Haslum and Geffner, 2000] technology. The prob•
     quire the planners to branch on all possible sub•         lem specification and the action template description arc first 
     sets of parallel actions, exponentially increasing        fed to a Graphplan-style planner, which constructs a planning 
     their branching factor. We introduce a variant of         graph for that problem in polynomial time. This planning 
     our heuristic state search planner AltAlt, which          graph structure is then fed to a heuristic extractor module 
     generates parallel plans by using greedy online           that is capable of extracting a variety of effective heuristics 
     parallelization of partial plans. Empirical results       [Nguyen et al., 2000]. These heuristics, along with the prob•
     show that our online approach outperforms post•           lem specification, and the set of ground actions in the final 
     processing (offline) techniques in terms of the qual•     action level of the planning graph are then fed to a regression 
     ity of the solutions returned.                            state-search planner. 

                                                               3 Plan Compression Algorithm 
1 Introduction 
                                                               A/tA/tpconsiders at each step during search only those (pair-
                                                               wise parallel) actions that individually regress to states with 
Parallel plans allow concurrent execution of multiple actions  lower heuristic estimates than their parent node to parallelize 
at each time step. While disjunctive planners such as Graph-   (fatten) a search branch. This greedy nature of the fatten•
plan [Blum and Furst, 1997], SATPLAN [Kautz and Sel-           ing procedure while useful in avoiding the addition of irrele•
man, 1996] and GP-CSP [Do and Kambhampati, 2000] seem          vant actions to the plan, may also sometimes preclude actions 
to have no trouble generating such parallel plans, planners    that are ultimately relevant. When this happens, the parallel 
that search in the space of states are overwhelmed by this     length of the solution plan is likely to be worsened, as more 
task [Haslum and Geffner, 2000]. The problem for state         steps may be needed to support the preconditions of such ac•
space planners is the exponential branching factor of the      tions. In order to offset this negative effect of greediness, 
search space. One approach to solve this problem is to post-   AltAlf re-arranges the partial plan to promote such actions 
process the sequential plans generated by the state space plan• higher up the search branch using a plan-compression algo•
ners. This could easily be done-using approaches such as       rithm (See Figure 1). Specifically, before expanding a given 
those explored by Backstrom [Backstrom, 1998], but they 
                                                               node S, AltAlf checks to see if any of the actions in As lead•
are limited to transforming the sequential plan given as in•   ing to S from its parent node, can be pushed up to higher lev•
put. An alternative that we introduce in this article, in•     els in the search branch. The push-up procedure is called each 
volves incremental online parallelization. Specifically, our   time before a node gets expanded, and it will try to compress 
planner AltAlf [Sanchez and Kambhampati, 2003], which 
                                                               the current partial plan. For each of the actions a e As we 
is a variant of the AltAlt planner [Sanchez et al., 2000; 
                                                               find the highest ancestor node Sx of S in the search branch to 
Nguyen et al., 2000], attempts to parallelize a heuristically  which the action can be applied (i.e., it gives some literal in 
selected search branch with other independent actions, and 
                                                               Sx without deleting any other literals in SXi and it is pairwise 
then tries to rearrange the evolving parallel plan using a plan-
                                                               independent of all the actions currently leading out of Sx). 
compression algorithm. 
                                                               Once Sx is found, a is then removed from the set of actions 
  We will provide a brief background on AltAlt planning        leading to S and introduced into the set of actions leading 
system on Section 2. Section 3 describes the generation of     out of Sx (to its child in the current search branch). Next, 
parallel plans in AltAlf. Section 4 presents some empiri•      the states in the search branch below Sx are adjusted to re•
cal evaluation of AltAlf. Finally, Section 5 summarizes our    flect this change. The adjustment involves recomputing the 
contributions.                                                 regressions of all the search nodes below Sx. At first glance, 


1522                                                                                                   POSTER PAPERS                                                                     Figure 2: AltAh and Post-Processing vs AltAltv 


                                                                In future, we plan to adapt the AltAltv approach to met•
               Figure 1: Push Up Procedure                    ric temporal domains, where the need of concurrency is more 
                                                              pressing. It is in these scenarios where more powerful heuris•
                                                              tics based on resource usage can be further investigated to 
this might seem like a transformation of questionable utility improve the parallelism of state space planners. 
since the preconditions of a (and their regressions) just be•
come part of the descendants of Sx, and this does not nec•    References 
essarily reduce the length of the plan. We however expect a 
length reduction because actions supporting the preconditions [Blum and Furst, 1997] A. Blum and M.L. Furst. Fast plan•
of a will get "pushed up" eventually during later expansions.    ning through planning graph analysis. In Artificial Intelli•
                                                                 gence. 90(1 -2). 1997. 
4 Empirical Evaluation                                        [Backstrom, 1998] C. Backstrom. Computational Aspects of 
We compare our online parallelization approach to post•          Reordering Plans In Journal of Artificial Intelligence Re•
processing, we have implemented Backstrom's ' Minimal De-        search, 1998. 
ordering Algorithm" from [Backstrom, 1998], and used it to    [Long and Fox, 2002] D. Long and M. Fox. Results of the 
post-process the sequential plans produced by AltAh. We          A1PS 2002 Planning Competition. 
can see on Figure 2 some empirical results on the Zeno do•       URL: http://www. dur.ac. uk/d.p. long/competition, html. 
main [Long and Fox, 2002].                                    [Kautz and Selman, 1996] H. Kautz and B. Selman. Pushing 
  As expected, the original AltAh has the longest plans since    the envelope: Planning propositional logic and stochastic 
it allows only one action per time step. The plot shows that     search. In Proc. AAAI1996. Portland, OR. 
post-processing techniques do help in reducing the makespan 
of the plans generated by Alt Alt However, we also no•        [Do and Kambhampati, 2000] Minh B. Do, and S. Kamb•
tice that AltAlf outputs plans with better makespan than         hampati. Solving Planning Graph by Compiling it into 
either AltAlt or AltAlt followed by post-processing. This        a CSP. In Proc. AIPS 2000 
shows that online parallelization is a better approach than   [Haslum and Geffner, 2000] P. Haslum and H. Geffner. Ad•
post-processing sequential plans. AltAltp also does not result   missible Heuristics for Optimal Planning. In Proc. AIPS 
in any additional run-time overhead with respect to AltAlt.      2000. 
Further experiments reported in [Sanchez and Kambhampati,     [Sanchez et al., 2000] R. Sanchez, X. Nguyen and S. Kamb•
2003] show that our approach is competitive or outperforms       hampati. AltAlt: Combining the advantages of Graphplan 
other state of the art approaches in generating parallel plans.  and Heuristics State Search. InProc. KBCS2000. Bombay, 
                                                                 India. 
5 Conclusions 
                                                              [Sanchez and Kambhampati, 2003] R. Sanchez and 
We have introduced an approach to generate parallel plans        S. Kambhampati. AltAltp: Online Parallelization of 
in the context of state space search. Our approach tries to      Plans with Heuristic State Search. To appear in JAIR. 
avoid the branching factor blow up by greedy and online par•  [Nguyen et al., 2000] X. Nguyen, S. Kambhampati, and R. 
allelization of the evolving partial plans. A plan compression   Sanchez Nigenda. Planning Graph as the Basis for deriv•
procedure is used to offset the ill effects of the greedy search. ing Heuristics for Plan Synthesis by State Space and CSP 
Our empirical results show that our approach seems to return     Search. In Journal oj Artificial Intelligence, 2002. 
better quality plans than post-processing the sequential plans. 


POSTER PAPERS                                                                                                      1523 