                       Computational Complexity of Planning and 
              Approximate Planning in Presence of Incompleteness 

                          Chitta Baral, Vladik Kreinovich, and Raul Trejo 
                                        Department of Computer Science 
                                          University of Texas at El Paso 
                                             El Paso, TX 79968, USA 
                                   emails {chitta,vladik,rtrejo}@cs.utep.edu 

                       Abstract                               1.1 Language A: brief reminder 
                                                              In the language we start with a finite list of proper•
     In the last several years the computational com•         ties (fluents) which describe possible proper•
     plexity of classical planning and HTN planning           ties of a state. A state is then defined as a finite set of 
     have been studied. But in both cases it is as•           fluents, e.g., {} or We are assuming that we 
     sumed that the planner has complete knowl•               have a complete knowledge about the initial state: e.g., 
     edge about the initial state. Recently, there has                means that in the initial state, properties and 
     been proposal to use 'sensing' actions to plan              are true, while all the other properties are 
     in presence of incompleteness. In this paper we          false. The properties of the initial state are described by 
     study the complexity of planning in such cases.          formulas of the type 
     In our study we use the action description lan•
                                                                                     initially  
     guage proposed in 1993 by M. Gelfond and 
     V. Lifschitz and its extensions.                         where is a fluent literal, i.e., either a fluent or its 
     The language allows planning in the situa•               negation  
     tions with complete information. It is known               To describe possible changes of states, we need a finite 
     that, if we consider only plans of feasible              set of actions. In the language the effect of each action 
     (polynomial) length, the planning problem for            a can be described by formulas of the type 
     such situations is NP-complete: even checking                              causes if  
     whether a given objective is attainable from a           where are fluent literals. A reason•
     given initial state is NP-complete. In this pa•          ably straightforward semantics describes how the state 
     per, we show that the planning problem in pres•
                                                              changes after an action: 
     ence of incompleteness is indeed harder: it be•
     longs to the next level of complexity hierarchy            • if before the action the literals were 
     (in precise terms, it is complete). To over•                 true, and the domain description contains a rule ac•
     come the complexity of this problem, C. Baral                 cording to which causes if then this 
     and T. Son have proposed several approxima•                  rule is activated, and after the action becomes 
     tions. We show that under certain conditions,                true; thus, for some fluents we will conclude 
     one of these approximations - O-approximation                 and for some other, that holds in the next state; 
     - makes the problem NP-complete (thus in•                  • if for some fluent no activated rule enables us to 
     deed reducing its complexity).                                conclude that is true or false, this means that the 
                                                                   action a does not change the truth of this fluent; 
                                                                   therefore, is true in a new state if and only if it 
 1 Introduction                                                    is true in the old state. 
                                                              Formally, a domain description D is a finite set of value 
The action description language proposed in 1993 by           propositions of the type initially (which describe the 
M. Gelfond and V. Lifschitz [Gelfond and Lifschitz, 1993]     initial state), and a finite set of effect propositions of the 
mid its successors have made it easier to understand the      type "a causes F if (which describe results 
fundamentals (such as inertia, ramification, qualifica•       of actions). A state s is a finite set of fluents. The 
tion, concurrency, sensing, etc.) involved in formalizing     initial state SO consists of all the fluents for which the 
actions and their effects on a world, without getting into    corresponding value proposition initially is contained 
the details of particular logics. In this paper, we will      in the domain description. We say that a fluent holds 
be analyzing the complexity of planning based on this         in s if otherwise, we say that holds in The 
language and its extensions; let us, therefore, start with    transition function which describes the effect 
a brief description of this language.                         of an action a on a state s is defined as follows: 


948 PLANNING AND SCHEDULING    ♦ we say that an effect proposition "a causes F if         where s is the actual state, and is the set of all possible 
                  is activated in a state s if all m fluent   states which are consistent with our current knowledge. 
     literals hold in s;                                      Initially, the set consists of all the states s for which: 
   # we define as the set of all fluents fi for                 • a fluent is true if the domain description 
     which a rule "a causes if is activated                        D contains the proposition "initially  
     in s;                                                      • a fluent fi is false if the domain description 
   • similarly, we define as the set of all fluents                D contains the proposition "initially  
        for which a rule "a causes if is If neither the proposition "initially nor the proposi­
     activated in s;                                          tion "initially are in the domain description, then 
   ♦ if we say that the result of                                contains states with true and with false. The 
     the action a is undefined;                               actual initial state can be any state from the set 
                                                              The transition function is defined as follows: 
   • if the result of the action a is not undefined in a 
                                                we define       • for proper (non-sensing) actions, is mapped 
                                                                  into 
                                                                                             where: 
 A plan p is defined as a sequence of actions  
                                                                     - Reso(a, s) is defined as in the case of complete 
 The result Resr (p, s) of applying a plan p to the initial 
                D                                                      information, and 
 state so is defined as 

                                                                •for a sensing action which senses fluents 
 The planning problem is: given a domain D and a de­                                  for which sensing propositions 
sired fluent literal F, to find a plan which leads to the          "a determines belong to the domain D ~ the 
 state in which F is true. (More complicated goals can            actual state s remains unchanged while is down 
 be reformulated in these terms.)                                 to only those states which have the same values of 

 1.2 An extension of language which 
       describes sensing actions: brief 
       reminder                                               In the presence of sensing, an action plan is no longer 
                                                              a pre-determined sequence of actions: if one of these 
The language A describes planning in the situations with 
                                                              actions is sensing, then the next action may depend on 
 complete information, when we know exactly which flu­
                                                              the result of that sensing. In general, the choice of a next 
ents hold in the initial state and which don't. In real life, 
                                                              action may depend on the results of all previous sensing 
we often have only partial information about the initial 
                                                              actions. Such an action plan is called conditional. 
state: about some fluents, we know that they are true 
                                                                Examples have shown that adding sensing actions in-
in the initial state, about some other fluents, we know 
                                                              creases the computational complexity of the problem. 
that they are false in the initial state; and it is also pos­
                                                              In this paper, we show that the corresponding planning 
sible that about some fluents, we do not know whether 
                                                              problem is indeed harder: it belongs to the next level 
they are initially true or false. In such situations, the 
                                                             of complexity hierarchy (in precise terms, it is 
required action depends on the state: e.g., if we want 
                                                              complete). 
the door closed, the required action depends on whether 
the door was initially open (then we close it), or it was     1.3 The notion of a O-approximation 
already closed (then we do nothing). Therefore, for these 
                                                              To overcome the complexity of this problem, C. Baral 
situations, we must include sensing actions - e.g., an ac­
                                                              and T. Son have proposed several approximations, whose 
tion checki which checks whether the fluent /, holds in a 
                                                              plans are always correct but which can miss a plan. The 
given state - to our list of actions, and allow conditional 
                                                              first approximation - called O-approximation - is as fol­
plans, i.e., plans in which the next action depends on the 
                                                              lows: An a-state (approximate state) s is a finite set 
result of the previous sensing action. 
                                                             of fluent literals (i.e., fluents and their negations). The 
   Some fluents may be difficult to detect, so we may         initial a-state so consists of all the fluent literals F for 
have sensing actions only for some fluents; some real-        which the corresponding value proposition "initially F" 
life sensing actions may sense several fluents at a time.     is contained in the domain description. We say that: 
In view of these possibilities, the precise formulation of 
                                                                • a fluent fi if true in s is  
this language is as follows1. In the domain description 
D, in addition to value propositions and effect proposi­        • a fluent fi if false in s is  
tions, we can also have sensing propositions, of the type       • a fluent fi if unknown in s is neither not 
"a determines A k-state is defined as pair  
                                                             The transition function Resi)(a,s) which describes the 
   1The formulation given here is based on earlier work 
of formalizing sensing actions in [Moore, 1985; Scherl and   effect of a proper action a on an a-state is defined as 
Levesqne, 1993].                                             follows: 


                                                                          BARAL, KREINOVICH, AND TREJO 949     • we say that an effect proposition "a causes if also worry about the time that it takes to actually im-
                   is activated in an a-state s if all m fluent plement the plan. If an action plan consists of a sequence 
      literals hold in                                         of actions, then this plan is not feasible. It is there-
                                                               fore reasonable to restrict ourselves to feasible plans, i.e., 
    • we say that an effect proposition "a causes F if 
                                                               by plans whose length (= number of actions in it) 
                   is possibly activated in an a-state s if 
                                                               is bounded by a polynomial of the input With 
      all m fluent literals possibly hold in s 
                                                               this feasibility in mind, we can now formulate the above 
      (i.e., are either true, or unknown in s); 
                                                              planning problem in precise terms: 
    • we define as the set of all fluent literals F 
                                                                 • given: a polynomial a domain descrip­
      for which a rule "a causes F if is acti­
                                                                   tion D (i.e., the description of the initial state and 
      vated in S, and no rule causes F if 
                                                                   of possible consequences of different actions) and a 
      is possibly activated in s; 
                                                                   goal / (i.e., a fluent which we want to be true), 
   • we then define ResrD(a,s) as 
                                                                 • determine whether it is possible to feasibly achieve 
                                                                   this goal, i.e., whether there exists a feasible plan u 
                                                                                       which achieves this goal. 
 For sensing actions, the result of applying a to an a-state 
 s simply means adding, to the a-state, the fluent literals   We are interested in analyzing the computational com-
 which turned out to be true as a result of this sensing      plexity of this planning problem. 
 action. 
                                                              2.2 Complexity of the planning problem 
 2 Results                                                           for situations with complete 
                                                                     information 
 2.1 What kind of planning problems we 
                                                              For situations with complete information, the above 
        are interested in 
                                                              planning problem is  
 Informally speaking, we are interested in the following 
 problem:                                                     Theorem 1. For situations with complete information, 
                                                              the planning problem is -complete. 
   • given a domain description (i.e., the description of 
     the initial state and of possible consequences of dif­   Comments. 
     ferent actions) and a goal (i.e., a fluent which we 
                                                                • This result is similar to the result of Liberatore [Lib-
     want to be true), 
                                                                   eratore, 1997]. The main difference is that Libera­
   • determine whether it is possible to achieve this goal         tore considers arbitrary queries from the language 
     (i.e., whether there exists a plan which achieves this        A, while we only consider queries about the exis­
     goal).                                                        tence of a feasible action plan. 
We are interested in analyzing the computational com-           • The result of Liberatore is preceded by the results of 
plexity of the planning problem, i.e., analyzing the com­          Erol et al [Erol et al., 1995] where they study com­
putation time which is necessary to solve this problem.            plexity of STRIPS. Here we use and its extensions 
   Ideally, we want to find cases in which the planning            instead of STRIPS as to the best of our knowledge 
problem can be solved by a, feasible algorithm, i.e., by an        there has not been any formal treatment of exten­
algorithm whose computational time on each in­                     sions of STRIPS dealing with sensing actions. 
put is bounded by a polynomial of the length 
                                                                • For lack of space we are not able to present all the 
     of the input (this length can 
                                                                   proofs in this paper. 
be measured bit-wise or symbol-wise. Problems which 
 can be solved by such polynomial-time algorithms are           • The problem remains NP-complete even if we con­
called problems from the class (where stands for                   sider the planning problems with a fixed finite num­
polynomial-time). If we cannot find a polynomial-time              ber of actions: even with two actions. If we only 
 algorithm, then at least we would like to have an algo­           allow a single action, then there is no planning any 
rithm which is as close to the class of feasible algorithms        more: the only possible plan is, in any state, to ap­
 as possible.                                                      ply this only possible action and check whether we 
   In short, we are interested in restricting the time which       have achieved our goal yet; the corresponding "plan­
it takes to check whether the planning problem is solv­            ning" problem is, of course, solvable in polynomial 
able. This interest is justified because in planning appli­        time. 
cations we often want the resulting plan to be produced 
in real time, and if it is not possible to produce such       2.3 Useful complexity notions 
a plan, we would like to know about this impossibility        For situations with incomplete information, the planning 
as early as possible, so that we will be able to add new      problem is more complicated - actually, belongs to the 
actions (or simply give up). Since we are operating in        next levels of polynomial hierarchy; see the exact results 
a time-bounded environment, we should worry not only          below. For precise definitions of the polynomial hierar­
about the time for computing the plan, but we should          chy, see, e.g., [Papadimitriou, 1994]. Crudely speaking, 


950 PLANNING AND SCHEDULING a decision problem is a problem of deciding whether a          A problem is called complete in a certain class if. 
given input satisfies a certain property (i.e., in set-      crudely speaking, this, is the toughest problem in this 
theoretic terms, whether it belongs to the corresponding     class (so that any other general problem from this class 
set                                                          can be reduced to it by a feasible-time reduction). It is 
  • A decision problem belongs to the class if there         still not known (1998) whether we can solve any prob•
    is a feasible (polynomial-time) algorithm for solving    lem from the class in polynomial time (i.e., in precise 
    this problem.                                            terms, whether However, it is widely believed 
                                                             that we cannot, i.e., that It is also believed that 
  • A problem belongs to the class if the checked            to solve a complete or acomplete problem, 
    formula (equivalently,can be rep•                        we need exponential time and that solving a com•
    resented as where is a feasible                          plete problem from one of the second-level classes or 
    property, and the quantifier runs over words of fea•          requires more computation time than solving NP-
    sible length (i.e., of length limited by some given      complete problems (and solving complete problems from 
    polynomial of the length of the input). The class        the class takes even longer). 
         is also denoted by to indicate that formu•
    las from this class can be defined by adding 1 exis•     2.4 Complexity of the planning problem 
    tential quantifier (hence and 1) to a polynomial                for situations with incomplete 
    predicate                                                       information: situations with no 
                                                                    sensing actions 
  • A problem belongs to the class if the checked 
                                                             Let us start our analysis with the case of no sensing. 
    formula S (equivalently, can be rep•
    resented as where is a feasible                          Theorem 2. For situations with incomplete informa•
    property, and the quantifier runs over words of fea•     tion and without sensing, the planning problem is 
    sible length (i.e., of length limited by some given      complete. 
    polynomial of the length of the input). The class        Proof. The problem is to check the existence of a 
            is also denoted by to indicate that for•         feasible-length action plan for which, for every set 
    mulas from this class can be defined by adding 1         of values of the unknown fluents, is successful, 
    universal quantifier (hence and 1) to a polyno•          i.e., we check whether Once we 
    mial predicate (hence                                    know and (i.e., once we know the initial state and 
  • For every positive integer a problem be•                 the actions), we can determine, step-by-step, all follow•
    longs to the class ifthe checked for•                    ing states, and thus check, in polynomial time, whether 
    mula (equivalently, can be rep•                          in the final state, the desired predicate is true. So, 
    resented as where 
                      is a feasible property, and all           To show that is complete, we reduce, to 
    quantifiers run over words of feasible length (i.e.,     a known complete propositional problem of checking 
    of length limited by some given polynomial of the                                          are propositional vari•
    length of the input).                                    ables, is a propositional formula). To reduce it to 
                                                                 we first parse F, i.e., we represent computing F as 
  • Similarly, for every positiveinteger a prob•             a sequence of elementary steps, on each of which we 
    lem belongs to the class if the checked for•             apply &, V, or to compute the intermediate results 
    mula (equivalently, can be rep•                                              to compute we 
    resented as where compute etc. In our planning problem, 
                      is a feasible property, and all        we take two actions a and and fluents  
    quantifiers run over words of feasible length (i.e.,                   (meaning: is true iff time = i). Initially, 
    of length limited by some given polynomial of the           is true, all other s, are false; is false, all other 
    length of the input).                                    are unknown; goal: In the first moments 
                                                             of time, we select variables a selects  
  • All these classes and are subclasses of a 
                                                             selects "a causes if(same foralso, ev• 
    larger class formed by problems which 
                                                             ery action increases time by one: e.g., a causes if 
    can be solved by a polynomial-space algorithm. It 
                                                             and causes In moments  
    is known (see, e.g., [Papadimitriou, 1994]) that 
                                                             we "compute" then causes  
    this class can be equivalently reformulated as a 
                                                             if causes and causes  
    class of problems for which the checked formula 
                                                             if (+ rules which increase time by 1). A plan 
            (equivalently, can be represented as 
                                                             exists iff there exist values for which, for all 
                                     where the number 
                                                                              is true. The reduction proves that is 
    of quantifiers is bounded by a polynomial of the 
                                                             complete. 
    length of the input, J) is a feasible 
    property, and all quantifiers run over words of          The problem remains even if we consider 
    feasible length (i.e., of length limited by some given   the planning problems with a fixed finite number of ac•
    polynomial of the length of the input).                  tions: even with two actions. 


                                                                          BARAL, KREINOVICH, AND TREJO SSI Theorem 3. For situations with incomplete informa•             problems with a fixed finite number of actions: even with 
tion and without sensing, the 0-approximation to the           two proper actions and a single sensing action which re•
planning problem is NP-complete.                               veals the truth value of only one fluent - but we are al•
                                                               lowed to repeat this sensing action at different moments 
In other words, the use of O-approximation cuts off one        of time. 
level from the complexity. So, for this problem, 0-              In many real life control and planning situations, it is 
approximation is indeed computationally very efficient.        desirable to monitor the environment continuously, and 
   This reduction is in good accordance with our intuitive     to make sensing actions all the time. However, this ne-
understanding of this problem and its O-approximation:         cessity is caused by the fact that in many real-life sit-
   • In the case oi complete information, to represent         uations, the consequences of each action are only sta•
      a state, we must know which fluents are true and          tistically known, so we need to constantly monitor the 
       which are false. Therefore, a state can be uniquely      situation to find out the actual state. In this paper, we 
       described by a subset of the set of all the fluents -    consider the situations in which the result of each action 
       namely, the subset consisting of those fluents which     is uniquely determined by this action and by the initial 
       are true in this state. The total number of states is    state. In such idealized situations, there is no such need 
       therefore equal to the total number of such subsets,     for a constant monitoring. It therefore makes sense to 
       i.e., to 2F (where F is the total number of fluents).    allow only a limited repetition of sensing actions in an 
     • In the case of incomplete information, we, in gen•        action plan. With such a limitation, the complexity of 
       eral, do not know which states the system is. So, a      planning drops back, and O-approximation starts helping 
       state of our knowledge (called a k-state in [Son and      again: 
       Baral, 1998]) can be represented by a set of possible     Definition 1. Let k be a positive integer. 
       complete-information states. Therefore, the num•
                                                                   • We say that a sensing action is k-limited if it reveals 
       ber of all possible k-states is equal to the number           the values of no more than k fluents. 
       of all possible subsets of the set of all complete-
       information states, i.e., to                                • We say that an action plan is k-bounded if it has no 
                                                                     more than k sensing actions. 
     • In O-approximation, an a-state is represented by 
                                                                Theorem 6. For any given k, for situations with incom•
       stating which fluents are true, which are false, and 
                                                                plete information and with k-limited sensing actions, the 
       which are unknown. For each of F fluents, there 
                                                                problem of checking the existence of a k-bounded action 
       are three different possibilities, so totally, in this 
                                                                plan is  
       approximation, we have possible a-states. 
   So, going from a full problem to its O-approximation         Theorem 7. For any given k, for situations with in•
   decreases the number of possible "states" from doubly         complete information and with k-limited sensing actions, 
                                                                 the problem of checking the existence of a k-bounded 0-
   exponential to singly exponential Since plan•
                                                                 approximation action plan is NP-complete. 
   ning involves analyzing different possible states, it is no 
   wonder that for O-approximation, the computation time         Comments. 
   should also be smaller. Again, this argument is not a           • The same result holds if instead of assuming that k 
   proof of Theorem 3, but this argument makes the result            is a constant, we allow to grow as 
   of Theorem 3 intuitively reasonable.                              as a square root of the logarithm of the length of 
   2.5 Complexity of the planning problem                            the input). 
          for situations with incomplete                           • A difficulty with the general situation with incom•
          information: situations with sensing                       plete information comes from the fact that we do 
                                                                     not know the exact states, i.e., we do not know 
   Let us now consider what will happen if we allow sens•            the values of all the fluents. It is therefore reason•
   ing actions. If we allow unlimited sensing, then the situ•
                                                                     able to analyze the situations with full sensing, i.e., 
   ation changes radically-, the planning problem becomes 
                                                                     situations In which, for every fluent fi, we have a 
    so much more complicated that O-approximation is not 
                                                                      sensing action check  which reveals the value of this 
    helping anymore:                                                                       i
                                                                      fluent. Full sensing does make the planning prob-
    Theorem 4. For situations with incomplete in•                     lem simpler, although not that simpler so that 0-
    formation and with sensing, the planning problem is               approximation will help: 
    PSPACE-complete. 
                                                                  Theorem 8. For situations with incomplete informa•
    Theorem 5. For situations with incomplete informa-            tion and with full sensing, the planning problem is 
    tion and with sensing, the O-approximation to the plan•       complete. 
    ning problem is PSPACE-complete. 
                                                                  Theorem 9. For situations with incomplete informa•
    The proofs are similar to [Littman, 1997]. Both the           tion and with full sensing, the O-approximation to the 
    planning problem itself and its O-approximation remain        planning problem is  
    PSPACE-complete even if we consider the planning 
                                                                  These results can be represented by the following table: 


    952 PLANNING AND SCHEDULING 