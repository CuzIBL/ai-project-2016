                   An    Architecture        for  Proof    Planning      Systems

                                          Louise  A.  Dennis
                      School of Computer    Science and  Information  Technology,
                         University  of Nottingham,   Nottingham,    NG8  1BB
                                           lad@cs.nott.ac.uk


                    Abstract                          proof representations are formed using the proof meth-
                                                      ods as plan operators within a framework inspired by
    This paper presents a generic architecture for    STRIPS  [Fikes and Nilsson, 1971]. The edges in a proof
    proof planning systems in terms of an interac-    representation can be expanded to a proof at the level
    tion between a customisable proof module and      of logical inference rules using planning operators based
    search module. These refer to both global and     on LCF-style tactics. These tactics are associated with
    local information contained in reasoning states.  the method that justiﬁes the parent node.
                                                        Methods  are generally represented as a frame struc-
                                                      ture with slots for preconditions which must be satisﬁed
1   Introduction                                      before the method can apply. A proof strategy is either
Proof planning systems attempt to automate the process represented by some form of method hierarchy which re-
of mathematical proof by searching for a high-level repre- stricts consideration of particular methods to particular
sentation of a proof rather than one at the level of logical points in a proof or by control rules [Siekmann et al.,
inference rules. This makes the resulting proofs more 2003] which analyse the current state of the plan rep-
human-like; aiding comprehension, cognitive modeling  resentation and the history of the planning attempt to
and higher-level reasoning about failed proof attempts. decide on the methods to be considered at any point.
Proof planning represents an important methodology    The proof strategy is an important technique for limit-
in automated reasoning and  has been proposed as a    ing search and has been represented in a variety of ways.
generic framework for understanding reasoning in gen-   The proof planning methodology also includes failure-
eral [Bundy, 1991]. Unfortunately over 15 years of re- triggered plan operators (eg. [Ireland and Bundy, 1996])
search and exploration of the concept has so altered the which propose major changes to the current proof repre-
initial descriptions that it is no longer trivial to describe sentation (as opposed to methods which simply extend
exactly what proof planning is. This paper presents a the graph). Selection and application of these operators
generic architecture for proof planning systems as a ﬁrst is determined by preconditions and the proof strategy.
step towards a uniﬁed description.                      At  present there is no general description of proof
                                                      planning which which addresses the varied ideas of proof
                                                      strategy implemented in the proof planning systems of
2   Proof   Planning                                  the last decade. This paper seeks to answer the question
Proof planning was ﬁrst introduced in [Bundy, 1988]   of what proof planning is by presenting a generic archi-
where the term proof plan was used to describe both a tecture that can encompass existing implementations.
way of going about a particular sort of proof and a high-
level representation of the proof itself. In order to avoid 3 A General Architecture    for  Proof
confusion, this papers refers to these two concepts as the Planning   Systems
proof strategy and the proof representation respectively.
A common  example of a proof strategy is mathematical Figure 1 shows a general architecture for proof planning
induction. Here the strategy is to split the problem into systems as a data/control ﬂow diagram. In this diagram
a base case and a step case and the step case can be  circles indicate functions or operations and rectangles
further broken down into a sequence of rewrites followed stores of data. Solid arrows into operators represent in-
by appeal to the induction hypothesis.                formation used by the operator and arrows from it show
  The proof representation is a graph/tree structure. outputs or side-eﬀects of its operation. Dashed arrows
The nodes are labelled by proof goals and a justiﬁcation show the ﬂow of control between operations.
associated with a proof method. The intended semantics  Most descriptions of proof planning have described the
is that a goal formula can be derived from its children proof planner as operating on proof representations how-
and that this derivation is justiﬁed by the method. These ever an important insight in [Dixon and Fleuriot, 2003]                    Global Reasoning State            to update the reasoning state set.
          Global Proof Search Information               A  key idea is that the proof module should be cus-
     Global Proof Representation Global Global        tomisable by the user via the proof strategy. In this way
                       Proof        Seach
                       Strategy     Strategy          a proof planner can be adapted for individual proof fam-
                       General                        ilies without the user needing a ﬁrm grip on the internal
                       Information                    code of the system. User support for expressing a proof
                                                      strategy varies widely and appears to be an area ripe for
                   Reasoning State Set                further research.
     update          reasoning_state
                        reasoning_state
                       reasoning_state                4   Conclusion     and  Further   Work
                    reasoning_state                   I have presented here a general architecture for proof
                  add new
                  reasoning                           planning as an interaction between a proof module and
                  states                              a search module operating on two reasoning states (one
        Proof Module              Search Module       global and one local) and a reasoning state set.
                                                        Dixon  et al. [2004] have recently started work on a

                                       new current    comparison of the major proof planning systems. We
                                       reasoning state are in the process of combining our work and hope this
                   Current Reasoning State            will generate further insights into the deﬁnition of proof
           local proof search information             planning and the construction of proof planning systems.
           local proof
           representation Local Local
                     Proof      Search                Acknowledgements
                     Strategy   Strategy              This work  was supported by EPSRC   Platform Grant
                     General                          GR/S01771/01.   Thanks  are due to Lucas Dixon and
                     Information
                                                      Martin Pollet for valuable discussions.
                                                      References
Figure 1: A General Architecture for Proof Planning
                                                      [           ]
Systems                                                Bundy, 1988  Alan Bundy. The use of explicit plans to
                                                        guide inductive proofs. In R. Lusk and R. Overbeek,
                                                        editors, CADE 9, volume 310 of LNCS, pages 111–120.
is to notice that proof planners operate on reasoning   Springer, 1988.
states. Reasoning states contain a search strategy (such [Bundy, 1991] A. Bundy. A science of reasoning. In J.-L.
as depth-ﬁrst search) and proof search information which Lassez and G. Plotkin, editors, Computational Logic:
includes general information (such as constraints) as well Essays in Honor of Alan Robinson, pages 178–198.
as a proof representation and a proof strategy.         MIT  Press, 1991.
  There are two reasoning states consulted by the sys-
                                                      [Dixon and Fleuriot, 2003] L. Dixon and J. D. Fleuriot.
tem: a global reasoning state which is in existence for the
                                                        IsaPlanner: A prototype proof planner in Isabelle. In
lifetime of the program’s execution and which can be dy-
                                                        F. Baader, editor, CADE 19, volume 2741 of LNCS,
namically updated and a current reasoning state which
                                                        pages 279–283. Springer, 2003.
is generated by the proof module at one point in time,
placed in a global set and later selected by the search [Dixon et al., 2004] L. Dixon, M. Jamnik, and M. Pollet.
module to become current after which it is deleted. This Proof planning: Comparing Ωmega, λClam  and Isa-
reasoning state is not altered once it is generated.    Planner.   In B. Bennett, editor, ARW 11, pages 50–
  Global information is used in all systems for pragmatic 52. University of Leeds, School of Computing, 2004.
reasons. However there is also a need to store a history Held in Association with the AISB’04 Convention.
(eg. [Siekmann et al., 2003]) of the planning attempt, [Fikes and Nilsson, 1971] R. E. Fikes and N. J. Nilsson.
including abandoned branches of the search space. This  STRIPS:  A  new approach to the application of the-
needs to be global and dynamically updatable.           orem  proving to problem solving. AI, (2):189–208,
  At the start of a proof attempt a user presents a global 1971.
reasoning state and a set (usually a singleton) of local [Ireland and Bundy, 1996] A. Ireland and A. Bundy.
reasoning states to the system. The search module then  Productive use of failure in inductive proof. JAR,
selects one of the local reasoning states to become cur- 16(1–2):79–111, 1996.
rent and hands control to the proof module.
                                                      [         et al.    ]
  Control passes back and forth between the proof mod- Siekmann      , 2003 J. Siekmann,  C.  Benzmuller,¨
                                                        A. Fiedler, A. Meier, I. Normann, and M. Pollet. Proof
ule and the search module. The proof module uses proof
                                                        development in OMEGA:   The  irrationality of square
search information to generate new reasoning states and
                                                                                              Thirty Five
to update the global reasoning state. Control is then   root of 2. In F. Kamareddine,  editor,
                                                        Years of Automating  Mathematics, Kluwer  Applied
handed  to the search module which  uses the search
                                                        Logic series. Kluwer Academic Publishers, 2003.
strategies to propose a new current reasoning state and