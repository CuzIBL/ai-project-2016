                  Learning    Complex      Event   Descriptions    by  Abstraction
                Ugo  Galassi1, Attilio Giordana1,  Lorenza  Saitta1  and  Marco  Botta2
                      1Universita´ Amedeo  Avogadro,  Dipartimento  di Informatica
                               Via Bellini 25/G, 15100  Alessandria, Italy
                           2Universita´ di Torino, Dipartimento di Informatica
                                 C.so Svizzera 185, 10149  Torino, Italy
                       {galassi, attilio, saitta}@mfn.unipmn.it, botta@di.unito.it

                    Abstract                          the logs of its activity. The selected task consists in learn-
                                                      ing to identify a user from his/her typing style on a keyboard.
    The presence of long gaps dramatically increases  The basic assumption is that every user has a different way
    the difﬁculty of detecting and characterizing com- of typing, which becomes particularly evident when he/she
    plex events hidden in long sequences. In order to types speciﬁc words, or sequences of characters. The goal is
    cope with this problem, a learning algorithm based not challenging the results previously obtained [Bleha et al.,
    on an abstraction mechanism is proposed: it can in- 1990; Brown and Rogers, 1993], but investigating the possi-
    fer a Hierarchical Hidden Markov Model, from a    bility of synthesizing automatically proﬁles from the activity
    learning set of sequences. The induction algorithm logs. The speciﬁc application has been selected because the
    proceeds bottom-up, progressively coarsening the  data are easy to acquire. In other words, if the methodology
    sequence granularity, and letting correlations be- described so far succeeds in building up a HHMM for this
    tween subsequences, separated by long gaps, natu- kind of user proﬁling, it is likely that it will succeed in other
    rally emerge. As a case study, the method is evalu- cases as well. Two experiments, described in the following
    ated on an application of user proﬁling. The results subsections, have been performed.
    show that the proposed algorithm is suitable for de-
    veloping real applications in network security and 3  Key  Phrase  Typing  Model
    monitoring.
                                                      In the ﬁrst experiment, the goal was to construct a model for
                                                      a user typing a key phrase, discriminant enough to recognize
1  Introduction                                       the user among others. A selected sentence of 22 syllables
                                                      has been typed many times on the same keyboard, while a
This paper addresses the task of discovering complex events transparent program recorded the duration of each stroke, and
(CEs) occurring sparsely in long sequences. It is assumed the delay between two consecutive strokes. Then, every rep-
that a CE is a partially ordered set of short chains (episodes) etition of the sentence generated a temporal sequence. Four
of atomic events (AEs), interleaved with gaps, where irrele- volunteers provided 140 sequences each, and, for every one
vant facts may occur. Moreover, the presence of noise can of them, a model has been built up using 100 traces (for each
make episodes hard to recognize. Episodes are represented user) as learning set. The four learned models have been
as strings of symbols, being a symbol the label assigned tested against the remaining 160 traces. For each model λ
to an atomic event. In a recent paper [Botta et al., 2004], and for each trace s, the probability of λ generating s has
a method for automatically inferring a Hierarchical Hidden been computed using the forward-backward algorithm [Ra-
Markov Model (HHMM)  [Fine et al., 1998] from a database biner, 1989]. Then, s has been assigned to the model with the
of sequences has been proposed. Here, an improved version highest probability. The results reported only one commis-
of the algorithm is applied to a non trivial application of user sion error and two rejection errors (no decision taken), when
proﬁling in computer security.                        a trace was not recognized by any one of the models.

2  User  Proﬁling                                     4   Text Typing  Model
User proﬁling is widely used to detect intrusions in computer The second experiment addressed the more general problem
networks or in telephony networks. The possibility of auto- of modeling a user during a text editing activity. A corpus
matically building a proﬁle for users or for network services of several paragraphs, selected from newspapers and books,
reﬂecting their temporal behavior would offer a signiﬁcant has been collected. The total number of words was 2280, and
help to the deployment of adaptive Intrusion Detection Sys- the number of typed keys 14273. Again, four users typed the
tems (IDSs) [Lee et al., 2002].                       entire corpus in several different sessions, without any con-
  The experiments described in the following investigate the straint, in order not to modify their natural typing style. In this
possibility of automatically constructing a user proﬁle from kind of application, a user model should be centered not on         20
                                         Pos          rized in Figure 1, where the distribution of the scoring rate on
                                         Neg
         15                                           the test sequences is reported for every model. The scoring
                                                                               1
         10                                           rated is measured in log odds . The continuous line, labelled

       Frequency                                      ”Pos”, represents the distribution of the scores assigned to the
         5
                                                      correct model (user), whereas the other one, labelled ”Neg”,
         0
         -50 -40  -30 -20  -10   0   10   20   30     represents the distribution of the scores assigned to all other
   (a)                    Log odds
                                                      models (users), considered together . The sequences on the
        20
                                         Pos
                                         Neg          extreme left have been rejected. It is evident from the ﬁg-
        15                                            ure that sequences belonging to the model are well separated
        10                                            from the other ones. Referring to the data in the test set, a
      Frequency
         5                                            monitoring system using the simple rule that, in a set of three

         0                                            consecutive sequences generated by a user at least two must
        -50  -40  -30 -20  -10   0   10   20  30
   (b)                    Log odds                    have a score higher than ’0’, would give a perfect discrimina-
         20                                           tion of the legal user without rising false alarms.
                                         Pos
                                         Neg
         15                                             It is worth noting that the results have been obtained as a
                                                      ﬁrst shot, without requiring any tuning of the algorithm. This
         10                                           means that the method is robust and easy to apply to this kind
       Frequency
         5                                            of problems.

         0
         -50 -40  -30 -20  -10   0   10   20   30
   (c)                    Log odds                    5   Conclusion
         30
                                         Pos
                                         Neg          An improved version of the algorithm [Botta et al., 2004] for
         25                                           inferring complex HHMM from sequences has been applied

         20                                           to a non trivial user proﬁling problem. Even if this case study
                                                      is just a preliminary investigation, the results are promising.
         15                                           In fact, the considered case is highly representative of many
       Frequency

         10                                           other similar problems found in intrusion detection systems,
                                                      and the results show that HHMM is a suitable tool for build-
         5                                            ing proﬁles. The methodology is effective, robust and easy to

         0                                            apply.
         -50 -40  -30 -20  -10   0   10   20   30
   (d)                    Log odds
                                                      References
Figure 1: User proﬁling statistics. Graphs (a), (b), (c) and
                                                      [Bleha et al., 1990] S. Bleha, C. Slivinsky, and B. Hussein.
(d) refer each one to a different user proﬁle. The continuous
                                                         Computer-access security systems using keystroke dynam-
line ”Pos” reports the scoring, measured in log odds, for the
                                                         ics. IEEE Transactions on Pattern Analysis and Machine
the sequences belonging to the proﬁle. The dotted line ”Neg”
                                                         Intelligence, PAMI-12(12):1217–1222, 1990.
refers to the sequences not belonging to the proﬁle.
                                                      [Botta et al., 2004] M. Botta, U. Galassi, and A.Giordana.
                                                         Learning complex and sparse events in long sequences. In
the speciﬁc words he/she types, but on the user typing style, Proceedings of the European Conference on Artiﬁcial In-
which, in turns, depends on the position of the keys on the telligence, ECAI-04, Valencia, Spain, August 2004.
keyboard. Therefore, a standard keyboard subdivision into [Brown and Rogers, 1993] M. Brown and S.J. Rogers. User
regions, used in dactylography, has been considered. On this identiﬁcation via keystroke characteristics of typed names
basis, keys have been grouped into 10 classes. In this way, using neural networks. International Journal of Man-
transition from one region of the keyboard to another should Machine Studies, 39:999–1014, 1993.
be emphasized. Afterwards, the sequences generated during a
                                                      [             ]
typing session have been rewritten by replacing every charac- Fine et al., 1998 S. Fine, Y Singer, and N. Tishby. The hi-
ter with the name of the class it has been assigned to. Finally, erarchical hidden markov model: Analysis and applica-
long sequences deriving from an editing session have been tions. Machine Learning, 32:41–62, 1998.
segmented into shorter sequences, setting the breakpoint in [Lee et al., 2002] W. Lee, w. Fan, M. Miller, S.J. Stolfo, and
correspondence of long gaps. The idea is that typical de- E. Zadok. Toward cost-sensitive modeling for intrusion de-
lays due to the user typing style cannot go beyond a given tection and response. Journal of Computer Security, 10:5
limit. Longer delays are imputable to different reasons, such – 22, 2002.
as thinking or changing of the focus of attention. In this way [Rabiner, 1989] L.R. Rabiner. A tutorial on hidden markov
a set of about 1350 subsequences has been obtained. For ev- models and selected applications in speech recognition.
ery user, a subset of 220 subsequences has been extracted in Proceedings of IEEE, 77(2):257–286, 1989.
order to learn the corresponding model. The remaining ones
have been used for testing. As in the previous case, the prob- 1The logarithm of the ratio between the probability that the ob-
ability of generating each one of the sequences in the test set served sequence is generated by the model and the probability that
has been computed for every model. The results are summa- it is generated by a random process.