                       A New Approach to Multiobjective A* Search

                                L. Mandow and J.L. Perez¬¥    de la Cruz
                             Dpto. Lenguajes y Ciencias de la Computacion¬¥
                             Universidad de Malaga¬¥ 29071 - Malaga¬¥  (Spain)
                                     {lawrence, perez}@lcc.uma.es


                    Abstract                          analogous to those of A*, that are not shared by MOA*. Ad-
                                                      ditionally, empirical tests show that the new algorithm offers
    The paper presents a new algorithm for multiob-   substantial savings in memory over MOA*.
    jective heuristic graph search problems. The algo-  The paper is organized as follows. Section 2 reviews pre-
    rithm presents some nice properties that are easily vious relevant work in scalar search and points out analogies
    proven. Additionally, empirical tests show that sub- and differences with the multiobjective search problem. Sec-
    stantial savings in memory can be achieved over   tion 3 presents a new algorithm and illustrates its behaviour
    previous proposals.                               with a simple example. Relevant differences with MOA* are
                                                      identiÔ¨Åed. Section 4 proves the admissibility of the new al-
1  Introduction                                       gorithm and a discusses on its efÔ¨Åciency. The performance
The multiobjective search problem is an extension of the results of multiobjective search over a set of randomly gener-
shortest path problem where arc costs become vectors. This is ated grid search problems is presented in section 5. Finally,
a genuinely different problem since vector costs induce only conclusions and future research are brieÔ¨Çy summarized.
a partial order relation.
  Loui [1983] studied the extension of Dijkstra‚Äôs algorithm 2 Scalar and multiobjective search
to the multiobjective case, and showed that some stochastic 2.1 Previous results in scalar graph search
search problems can be reduced to multiobjective ones. Stew-
art and White [1991] outlined MOA*, a multiobjective exten- The shortest path problem can be stated as follows: given
sion of A*, and presented proofs on admissibility, node ex- a locally Ô¨Ånite labelled directed graph G = (N, A, c), of
pansion, and comparison of heuristics. Dasgupta et al. [1999] |N| nodes, and |A| arcs (n, n0) labelled with positive costs
extended this work in several ways, including a version for c(n, n0) ‚àà R, a start node s ‚àà N, and a set of goal nodes
non-monotone heuristics (MOA**), with applications in the Œì ‚äÜ N, Ô¨Ånd the minimum cost path in G from s to a node in
area of VLSI design and the log cutting problem. Perny and Œì.
Spanjaard [2002] presented a generalization of MOA* with The A* algorithm [Hart et al., 1968] is an efÔ¨Åcient solution
application to a Web access problem. Mandow and Perez¬¥ de to this problem. It is a best-Ô¨Årst search algorithm that uses a
la Cruz [2003] presented a systematic extension of the heuris- search tree to store the set of known interesting partial solu-
tic search paradigm to the multicriteria case, and admissibility tion paths, a list of open nodes that can be further expanded,
conditions for algorithms with different multicriteria prefer- and a characteristic evaluation function f(n) = g(n) + h(n)
ence relations (multiobjective, multiattribute, lexicographic, to select the next open node to be expanded. While function
and goal-based).                                      g(n) denotes the known cost of the path stored in the tree
  This paper reconsiders the extension of A* to the multi- from s to n, the heuristic function h(n) estimates of the cost
objective case and presents a new algorithm. The basic op- of a solution from node n to a goal node. Heuristic functions
erations in A* are selection and expansion of open nodes at can be devised for particular problems depending on their se-
each iteration. In A* each open node stands for a single par- mantics.
tial solution path that can be further expanded. However, as Beautiful results have been presented to analyse the rela-
explained in the paper, this is no longer the case in multi- tion between the accuracy of h(n) and the properties of A*.
objective problems, where many interesting paths may reach Admissibility: Let h‚àó(n) be the real optimal cost of a path
the same node. The MOA* algorithm [Stewart and White, from n to a goal node. When the heuristic is an optimistic
1991], and subsequent extensions, were devised preserving estimate (h(n) ‚â§ h‚àó(n) ‚àÄn), the search is admissible, i.e. if
node selection and expansion as the algorithm‚Äôs basic oper- a solution exists it is guaranteed to Ô¨Ånd an optimal one. With
ations. This paper presents an extension of A* to the mul- additional constraints (h(n) ‚â• 0 ‚àÄn, and c(n, n0) ‚â•  >
tiobjective case that preserves path selection and expansion 0 ‚àÄ(n, n0) ‚àà A) A* is admissible even on inÔ¨Ånite graphs.
as the basic operations. Admissibility can be proven very EfÔ¨Åciency: When ‚àÄn h(n) = 0, A* behaves like Dijkstra‚Äôs
easily. The new algorithm also shows important properties, algorithm. When h(n) is consistent or satisÔ¨Åes the equivalentmonotone property,                                      3. Finally, each time a new path is generated to a known
                    0      0        0                     node, its cost may need to be tested for dominance with
        h(n) + c(n, n ) ‚â§ h(n ) ‚àÄ(n, n ) ‚àà A    (1)       the set of all known costs reaching the node.
A* solves the problem in O(|N|) iterations, storing O(|N|) In general, heuristic estimates will involve a set of vectors
nodes in memory, in the worst case. Particularly, if c‚àó denotes H(n) for each node n, estimating cost vectors of paths from
the optimal solution cost, A* will always expand all nodes n to each goal node. Therefore, for each path Psn from s
            ‚àó                           ‚àó
with f(n) < c , but at most those with f(n) ‚â§ c . Therefore, to n with cost ~gP , there will be a set of heuristic evaluation
given an optimistic estimate, big values of h(n) can push the vectors, F (Psn). This function is the multiobjective analogue
evaluation of more and more nodes beyond the f(n) = c‚àó to f(n) in A*,
frontier, reducing search effort.                                                    ~  ~        ~   ~
                                                        F (Psn) = F (n,~gP ) = nondom{f | f = ~gP + h ‚àß h ‚àà
Optimality: When the heuristic is monotone A* can also be H(n)}
proven optimal among the class of admissible best-Ô¨Årst algo- where nondom(X) denotes the set of non-dominated vectors
rithms that are guided by path-dependent evaluation functions in set X.
[Dechter and Pearl, 1985].                              Finally, note that at each iteration, A* selects and expands
                                                      an open node, i.e. considers all the possible extensions of
2.2  Extension to the multiobjective case             the path stored in the search tree to that node. In A* each
The multiobjective search problem can be stated as follows: open node stands for a single partial solution path that can
given a locally Ô¨Ånite labelled directed graph G = (N, A,~c), be further expanded. However, in the multiobjective case,
of |N| nodes, and |A| arcs (n, n0) labelled with positive vec- if an acyclic graph is used instead of a tree to record partial
tors ~c(n, n0) ‚àà Rq, a start node s ‚àà N, and a set of goal nodes solutions, this will no longer be the case. The MOA* algo-
Œì ‚äÜ N, Ô¨Ånd the set of non-dominated cost paths in G from s rithm [Stewart and White, 1991] was devised preserving node
to nodes in Œì.                                        selection and expansion as the algorithm‚Äôs basic operations.
  In multiobjective problems cost vectors ~c(n, n0) induce The next section introduces an extension of A* to the multi-
only a partial order preference relation ‚â∫ called dominance, objective case that preserves path selection and expansion as
                                                      the basic operations.
   ~ ~0  Rq   ~   ~0                0    ~   ~0
 ‚àÄf, f ‚àà      f ‚â∫ f   ‚áî    ‚àÄi  fi ‚â§ fi ‚àß f 6= f (2)
                                    ~                 3   A new algorithm for multiobjective A*
where fi denotes the i-th element of vector f.
  Therefore, given two q-dimensional vectors f~ and f~0, it search
is not always possible to rank one as better than the other. 3.1 Brief description
For example, in a two dimensional cost space, vector (2, 3) The pseudocode of a new multiobjective A* search algorithm
dominates (2, 4), but no dominance relation exists between is shown in table 1.
vectors (2, 3) and (3, 2).                              In accordance to the considerations in sec 2.2, we will de-
  The essence of the multiobjective search problem is to Ô¨Ånd vise our extension of A* to the multiobjective case in the fol-
the set of all non-dominated solution paths. Therefore, an lowing way:
analogy could be traced to a version of A* that aims at Ô¨Ånding
all optimal paths. However, some important differences with ‚Ä¢ The algorithm uses an acyclic search graph SG to record
the scalar search problem can be pointed out.             interesting partial solution paths. For each node n in SG
  First of all, given the dominance preference relation, two two sets, Gcl(n) and Gop(n), denote the sets of non-
(or more) uncomparable (non-dominated) paths may reach    dominated cost vectors of paths reaching n that have or
any given node from the same or different parents. Several have not been explored yet respectively (i.e. closed or
important consequences can be identiÔ¨Åed:                  open). Each cost vector in this sets labels one or more
                                                          pointers emanating from n to its parents with that cost.
 1. The search tree used by A* to record the best known path Initially, s is the only node in SG.
    to generated nodes is no longer sufÔ¨Åcient. A directed
    acyclic graph can be used instead, to record the set of ‚Ä¢ The algorithm keeps a list OP EN, of partial solution
    non-dominated known paths to generated nodes.         paths that can be further expanded. For each node n in
                                                          SG  and each nondominated cost vector ~g ‚àà Gop(n),
 2. The number of generated nodes may no longer be a      there will be a corresponding triple (n,~g, F (n,~g)) in
    realistic estimate of the memory needed by the algo-
                                                          OP EN. Initially, (s,~gs, F (s,~gs)) is the only triple in
    rithm. All arcs and non-dominated cost vectors reach- OP EN.
    ing each node need to be recorded as well. Let M be
    an upper bound on the size of the largest set of non- ‚Ä¢ At each iteration, the algorithm will consider the exten-
    dominated vectors in a node, and O(M) a bound on the  sion of an open triple (n,~g, F ) that stands for a partial
    size of the approximations to these sets. In the worst solution path from s to n with cost ~g.
    case O(MN)   cost vectors need to be stored. Bent-  ‚Ä¢ Two sets, GOALN  and COST S, record all goal nodes
    ley et al. [1978] prove that the average number of non- reached and all non-dominated cost vectors to goal
    dominated q-dimensional vectors in a set of size L is nodes respectively. Once a solution is known its cost
    O((log|L|)q‚àí1), provided all (n!)q relative orderings are vector can be used to discard (Ô¨Ålter) dominated open
    equally probable.                                     triples.                                                      Table 1: A new path expansion algorithm for multiobjective
                                                      A* search.
                                                        1. CREATE:
                                                            ‚Ä¢ An acyclic search graph SG rooted in s.
                                                            ‚Ä¢ List of alternatives, OP EN = {(s,~gs, F (s,~gs)) }.
                                                            ‚Ä¢ Two empty sets, GOALN,  COST S.
      Figure 1: Sample graph and heuristic function.
                                                        2. CHECK  TERMINATION. If   OP EN   is empty, then
                                                          backtrack in SG from the nodes in GOALN and return
                                                          the set of solution paths with costs in COST S.

                                                        3. PATH SELECTION. Select an alternative (n,~gn, F )
                                                          from OPEN with f~ ‚àà F non-dominated in OP EN, i.e.
                                                               0      0             ~0    0    ~0   ~
                                                            ‚àÄ(n ,~gn0 , F ) ‚àà OP EN @f ‚àà F  |  f ‚â∫  f (3)
                                                          Delete (n,~g , F ) from OP EN, and move ~g from
          Figure 2: Search graph (iteration 2).                      n                             n
                                                          Gop(n) to Gcl(n).
                                                        4. SOLUTION RECORDING. If   n ‚àà Œì, then

  ‚Ä¢ Search terminates only when the OP EN list is empty,    ‚Ä¢ Include n in GOALN  and ~gn in COST S.
    i.e. when all open triples have been selected or Ô¨Åltered.
                                                            ‚Ä¢ Eliminate from OP EN all alternatives (x, gx, Fx)
                                                              such that all vectors in Fx are dominated by ~gn
                                                              (FILTERING).
3.2  Example
                                                            ‚Ä¢ Go back to step 2
We will illustrate the workings of the previous algorithm on 5. PATH EXPANSION: If n 6‚àà Œì, then
the sample graph in Ô¨Ågure 1. A heuristic evaluation function For all successors nodes m of n that do not produce cy-
H(n) is also presented. A single heuristic vector is given for cles in SG do:
each node for the sake of simplicity. A trace of the search
                                                           (a) Calculate the cost of the new path found to m:
graph is shown in Ô¨Ågures 2-6. Values of Gop and Gcl are
shown at each iteration. Values that do not change from the   ~gm = ~gn + ~c(n, m).
previous iteration are omitted for brevity. Table 2 shows a (b) If m is a new node
trace of OP EN.                                               i. Calculate Fm = F (m,~gm) Ô¨Åltering estimates
  At iteration 1, SG has only node s at its root, Gop(s) =       dominated by COST S.
{(0, 0)}, and Gcl(s) = ‚àÖ. The only path in OP EN is se-       ii. If Fm is not empty, put (m,~gm, Fm) in OP EN,
lected, and its three extensions to nodes n1, n2, and n3 added   and put ~gm in Gop(m) labelling a pointer to n.
to SG and OP EN. At iteration 2 two alternatives have non-   iii. Go to step 2.
dominated estimates in OP EN (n1 with estimate (9, 3), and    else (m is not a new node), in case
n2 with estimate (3, 9)). Let‚Äôs assume ties between non-
                                                              ‚Ä¢ ~gm ‚àà Gop(m) or ~gm ‚àà Gcl(m): label with ~gm a
dominated estimates are always broken choosing the smaller       pointer to n, and go to step 2.
Ô¨Årst component in estimated cost vectors. The path leading
                                                              ‚Ä¢  If ~gm is non-dominated by any cost vectors in
to n2 would be selected, and its extension to n3 generated.
                                                                 Gop(m) ‚à™ Gcl(m) (a path to m with new cost
At iteration 3 two non-dominated paths lead to node n3 (each     has been found), then :
cost vector in G (n ) would label a different pointer). One
             op  3                                             i. Eliminate from G (m) and G  (m)  vectors
of them is non-dominated in OP EN and selected. At itera-                        op          cl
                                                                  dominated by ~g
tion 4 a path leading to the goal node Œ≥ has a non-dominated                  m
estimate in OP EN. It is selected, added to GOALN, and its     ii. Calculate Fm = F (m,~gm) Ô¨Åltering estimates
cost vector included in COST S. At iteration 5 the path lead-     dominated by COST S.
                                                              iii. If F  is not empty, put (m,~g , F ) in
ing to node n4 has been Ô¨Åltered (its estimate is dominated by         m                        m   m
the vector in COST S). The only non-dominated alternatives        OP EN, and put  ~gm in Gop(m) labelling a
are selected at iterations 5 and 6. At iteration 6 a new solu-    pointer to n.
tion path leading to Œ≥ is selected. Therefore, the set COST S  iv. Go to step 2.
is updated to {(4, 10)(9, 3)}. At iteration 7 all remaining al- ‚Ä¢ Otherwise: go to step 2.
ternatives are Ô¨Åltered and OP EN is empty. The algorithm
would backtrack from Œ≥ returning the two paths found with
costs (4, 8) and (9, 3).                                                      3.3  Selection and expansion: paths versus nodes
                                                      MOA* has been for more than a decade the reference mul-
                                                      tiobjective heuristic search algorithm. Unlike the algorithm
                                                      presented in section 3.1, MOA* is built around the idea of
                                                      node selection and expansion. Particularly, it makes no dis-
                                                      tinction in SG between the sets Gop(n) and Gcl(n), and a
                                                      single set G(n) = Gop(n) ‚à™ Gcl(n) is kept for each node. A
          Figure 3: Search graph (iteration 3).       heuristic evaluation function F (n) is deÔ¨Åned for each node,
                                                        F (n) = nondom{f~ | f~ = ~g +~h ‚àß~g ‚àà G(n)‚àß~h ‚àà H(n)}
                                                      The OP EN   list can be considered a list of pairs (n, F (n))
                                                      where nodes with non-dominated f~ ‚àà F (n) are selected. The
                                                      distinction between individual paths reaching each node n is
                                                      lost and, accordingly, all known paths reaching each node n
                                                      are either simultaneously open or closed. Essentially MOA*
                                                      presents two distinguishing features when compared to the
                                                      algorithm in section 3.1:
          Figure 4: Search graph (iteration 4).
                                                        1. Each time a new non-dominated path is found to a closed
                                                          node, the whole node is put back into OP EN.
                                                        2. Each time a node is selected for expansion, all known
                                                          non-dominated paths reaching that node are extended.
                                                        The Ô¨Årst difference may result in unnecesary reexpansion
                                                      of nodes. The second may result in unnecessary extension of
                                                      paths in SG and storage of uninteresting cost vectors. Ad-
          Figure 5: Search graph (iteration 5).       ditionally, when a goal node Œ≥ is selected, all cost vectors
                                                      in G(Œ≥) may enter in COST S. In general, it is not possi-
                                                      ble to know which of these cost vectors belong to truly non-
                                                      dominated solutions until all of them have been found.
                                                        These differences can be illustrated with the example pre-
                                                      sented in section 3.2. Provided ties in the selection of
                                                      OPEN   paths were broken in the same way, search with
                                                      MOA* would produce the same results in the Ô¨Årst two iter-
                                                      ations. In iteration 3, the selection of node n3 for expansion
                                                      would produce in MOA* the extension of both known non-
                                                      dominated paths to that node. Accordingly, all cost vectors
          Figure 6: Search graph (iteration 6).
                                                      in G(n3) =  {(8, 4)(2, 8)} would be extended resulting in
                                                      G(n4) = {(14, 8)(8, 12)} and G(Œ≥) = {(10, 6)(4, 10)}, and
                                                      node n3 would be marked as closed. Note that the new algo-
Table 2: OP EN alternatives at each iteration (dom = domi- rithm did not need to store cost vectors (14, 8) in node n4, or
nated; ‚Üê = selected).                                 (10, 6) in Œ≥.
 It. OP EN                                              At iteration 4 node Œ≥ would be selected, and two different
 1   (s, (0, 0), ((3, 3))) ‚Üê                          cost vectors {(10, 6)(4, 10)} would be included in COST S.
                                                      One of them does not belong to a truly non-dominated solu-
 2   (n1, (7, 1), ((9, 3)))
                                                      tion, but MOA* will not be able to tell until termination.
     (n2, (1, 7), ((3, 9))) ‚Üê
                                                        Finally, note that at iteration 5, the expansion of node n
     (n3, (8, 4), ((9, 5))) dom                                                                         1
                                                      results in a new non-dominated path to n3. MOA* would
 3   (n1, (7, 1), ((9, 3)))
     (n , (8, 4), ((9, 5))) dom                       place accordingly n3 back in OP EN with all its heuristic
       3                                              evaluation cost vectors. This implies that prior to termination,
     (n3, (2, 8), ((3, 9))) ‚Üê
                                                      MOA* will need to reexpand n3. This was unnecessary in
 4   (n1, (7, 1), ((9, 3)))
     (n , (8, 4), ((9, 5))) dom                       the new algorithm since the newly found path to n3 can never
       3                                              lead to a non-dominated solution.
     (n4, (8, 12), ((8, 12))) dom
     (Œ≥, (4, 10), ((4, 10))) ‚Üê
                                                      4   Properties
 5   (n1, (7, 1), ((9, 3))) ‚Üê
     (n3, (8, 4), ((9, 5))) dom                       This section presents proofs on the admissibility of the new
 6   (n3, (8, 4), ((9, 5))) dom                       algorithm presented in section 3, and bounds on the number
     (Œ≥, (9, 3), ((9, 3))) ‚Üê                          of paths selected and stored in memory.
     (n3, (9, 2), ((10, 3))) dom                        A scalar algorithm is said to be admissible if it is guaran-
                                                      teed to return an optimal solution whenever a solution exists.We extend the deÔ¨Ånition as follows: a multiobjective search Theorem 3 The algorithm is N-admissible.
algorithm is N-admissible if it terminates with the set of all
                                                      Proof. From theorems 1 and 2 follows that the algorithm will
non-dominated solutions whenever this set is Ô¨Ånite and non-
                                                      always terminate with all non-dominated solutions. It sufÔ¨Åces
empty, or if it does not terminate whenever this set is inÔ¨Ånite.
                                                      to show that a dominated solution can never be selected. Let‚Äôs
  Let C‚àó be the set of non-dominated solution costs, ~g(P )
                                                      assume, for the purpose of contradiction, that a dominated
the cost vector of path P , and  the relation ‚Äúdominates or
                                                      solution P with cost ~g is selected, i.e. exists ~c‚àó ‚àà C‚àó with
equals‚Äù. Let ~m‚àó = (m‚àó, m‚àó, . . . m‚àó) denote the ideal op-               P
                    1   2      q                      ~c‚àó ‚â∫ ~g , and F (P ) = {~g }. It must be ~c‚àó 6‚àà COST S, for
timal cost vector, i.e. a vector that would attain the optimal P            P
                                                      otherwise P would have been Ô¨Åltered. Now, from theorem 1,
cost for each individual dimension. Note that problems where ‚àó    ‚àó
                                                      for all ~c ‚àà C not found yet there is at least one path Pi =
ideal optimal solutions are reachable are highly unusual.                     ~               ~    ‚àó
  The proofs presented in this section rely on a set of reason- (s, . . . , ni) such that exists f ‚àà F (Pi)) with f  ~c , and
able assumptions, analogous to those presented in [Stewart (ni,~g(Pi), F (Pi)) is in OP EN. Now, from the transitivity
                                                                                       ~    ‚àó
and White, 1991] to prove the admissibility of MOA*:  of the dominance relation follows that f  ~c ‚â∫ ~gP and P
 1. The graph G = (N, A) to be searched is locally Ô¨Ånite. cannot be selected for expansion.
                                                                                        ‚àó
 2. The   heuristic function H(n)    is  admissible,  Corolary 1 At any time COST S ‚äÜ C  . Therefore, the al-
    i.e.     for all  non-dominated  solution paths   gorithm may terminate at any time returning the set of non-
      ‚àó
    P    =   (s, n1, . . . , ni, ni+1 . . . Œ≥k), Œ≥k ‚àà Œì and dominated solutions found so far.
                 ‚àó                   ‚àó
    each subpath Pi = (s, n1, . . . , ni) of P ,      Corolary 2 All paths P in SG with f~ ‚àà F (P ) such that
     ~             ‚àó   ~       ‚àó
    ‚àÉh ‚àà H(ni) | ~g(Pi ) + h  ~g(P )                 ‚àÄ~c‚àó ‚àà C‚àó,~c‚àó ‚äÄ f~ will either be pruned at later iterations, or
 3. For inÔ¨Ånite graphs,                               selected for expansion.
                         ~                                                                    ‚àó    ‚àó  ‚àó
     (a) hk ‚â• 0   ‚àÄk ‚àÄn ‚àÄh ‚àà H(n)                     Corolary 3 No path P such that ‚àÄf~ ‚àà F (P ) ‚àÉ~c ‚àà C ,~c ‚â∫
              0                    0
     (b) ~ck(n, n ) ‚â•  > 0 ‚àÄk ‚àÄ(n, n ) ‚àà A           f~ will ever be selected for expansion.
Theorem 1 : For each non-dominated solution path P ‚àó =
                                 ‚àó     ‚àó              Corolary 4 For each path P recorded in SG such that ‚àÄf~ ‚àà
(s, n1, . . . , ni, ni+1 . . . Œ≥) with cost ~g(P ) = ~c , there is al-
                                ‚àó                     F (P ) ‚àÉ~c‚àó ‚àà C‚àó,~c‚àó ‚â∫ f~, its extensions will never be
ways before its discovery a subpath Pi = (s, n1, . . . , ni) of
 ‚àó             ‚àó                      ‚àó               recorded in SG.
P  such that: a)Pi is recorded in SG; b) ~g(Pi ) ‚àà Gop(ni);
   ~       ‚àó   ~   ‚àó
c) ‚àÉf ‚àà F (Pi ) | f  ~c .                              Proofs of corolaries 1, 3 and 4 are trivial from the proof
Proof. We Ô¨Årst consider parts (a), and (b). The proposition of theorem 3. Corolary 2 is also trivial since otherwise the
is true at iteration 1, when s is in OP EN and at the root of algorithm would not terminate.
SG. It is also true in subsequent iterations, since subpaths Note that a version of A* that found all optimal paths
of non-dominated solutions can never be pruned from SG. would also satisfy corolary 1. Corolaries 2 and 3 give lower
     ‚àó                                                and upper bounds on the paths selected for expansion. These
Let Pi make the proposition true for some non-dominated
         ‚àó                 ‚àó                          are analogous to the efÔ¨Åciency bounds of A* (see section 2.1).
solution P . By deÔ¨Ånition, Pi is non-dominated to ni,
           ‚àó                                            The example presented in section 3.2 shows that corolaries
therefore ~g(Pi ) will never be removed from Gop(ni) unless
       ‚àó      ‚àó                                       1, 3, and 4 do not apply to MOA*. Particularly, for MOA*,
(ni,~g(Pi ), F (Pi )) is selected for expansion. Upon selec-
                  ‚àó     ‚àó                             no upper bound can be given for the cost of paths whose ex-
tion, if ni = Œ≥, then Pi = P is discovered. If ni 6= Œ≥, a new                                  ‚àó
                           ‚àó                          tensions will be recorded in SG depending on C .
non-dominated path to ni+1, Pi+1 = (s, n1, . . . , ni, ni+1)
                   ‚àó                            ‚àó
will be generated, ~g(Pi+1) included in Gop(ni+1) and Pi+1
will satisfy the proposition. Part (c) follows then trivially 5 Experimental test
from the deÔ¨Ånition of F and admissible heuristic. This, in 5.1 Search space and practical issues
turn, prevents P ‚àó or any of its subpaths from Ô¨Åltering.
                                                      Search in square grids of nodes was used to test the algo-
Theorem 2 If there is a solution, the algorithm terminates rithms. These experiments provide further insight into the
even on inÔ¨Ånite graphs.                               workings of both algorithms, as well as a preliminary evalua-
Proof. All best Ô¨Årst search algorithms that prune cycles ter- tion of the memory savings that can be achieved with the new
minate on Ô¨Ånite graphs [Pearl, 1984]. Given the assumptions algorithm. In two dimensional grids, each node (identiÔ¨Åed by
for inÔ¨Ånite graphs, all paths P with length longer than its coordinates) has its four neighbours as successors. Note
                            ‚àó                         that, for this problem, storing each node takes less space than
                    maxi{m   }
                            i                         storing each cost vector for q > 2.
                         
                                                        Vector costs were generated randomly with integer compo-
                                ‚àó   ~       ‚àó    ‚àó
  will trivially attain ~g(P ) such that ~c ‚â∫ f for all ~c ‚àà C nents in the range [1, 10]. A single goal node was generated
and all f~ ‚àà F (P ). Since the graph G is locally Ô¨Ånite, for each problem instance, at a random distance between 2
there can only be a Ô¨Ånite number of partial solution paths and 30 arcs from the start node. Manhattan distance to the
non-dominated by C‚àó. Therefore, from theorem 1, all non- goal can be used as an optimistic cost estimate for each com-
dominated solutions will eventually be found, and all inÔ¨Ånite ponent of the cost vectors.
paths will be pruned or Ô¨Åltered from OP EN in a Ô¨Ånite num- A lexicographic order was used to sort alternatives in
ber of steps.                                         the OP EN  set, as sugested in [Loui, 1983]. Particularly,