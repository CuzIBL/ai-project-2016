                       Describing Additive Fluents in Action Language C+ 

                                      Joohyung Lee and Vladimir Lifschitz 
                                         Department of Computer Sciences, 
                                      University of Texas, Austin, TX 78712 
                                      {appsmurf,vl}@cs.utexas.edu 


                        Abstract                               of the individual actions. For example, the gross receipts of 
                                                               a store are represented by an additive fluent: when several 
     An additive fluent is a fluent with numerical values      customers pay to different cashiers simultaneously, the gross 
     such that the effect of several concurrently executed     receipts will increase by the sum of the "contributions" of the 
     actions on it can be computed by adding the effects       individual customers. The voltage of a battery is an addi•
     of the individual actions. We propose a method for        tive fluent: the increase in voltage obtained by adding several 
     describing effects of actions on additive fluents in      cells to a battery can be computed by addition. In mechan•
     the declarative language An implementation of             ics, the velocity of a particle is an additive fluent, because the 
     this language, called the Causal Calculator, can be       net effect of several forces on this fluent over a time interval 
     used for the automation of examples of common-            equals the sum of the effects of the individual forces. Addi•
     sense reasoning involving additive fluents.               tive fluents are ubiquitous; this may be the reason why adding 
                                                               numbers is such a useful operation. 
1 Introduction                                                   Unfortunately, the causes construct of and similar lan•
                                                               guages is not directly applicable to describing the effects of 
Action languages [Gelfond and Lifschitz, 1998] serve to de•    actions on additive fluents. Consider, for instance, the effect 
scribe effects of actions on the states of the world. For in•  of the action Buy (customerbuys books) on the 
stance, the expression                                         number of books available at the bookstore. The causal law 

             Walk causes Location(x) = /                (1)                                                           (2) 

is a proposition, or "causal law," of action language          is applicable in the case when no customer other than is 
[Giunchiglia et al, 2003] that describes an effect of ac•      buying books at the same time: books are available 
tion Walk : this action causes the location of to be•          after the event if there were books in the store before the 
come /. The semantics of action languages is defined in        event. But (2) is not acceptable if we are interested in the 
terms of "transition systems"—directed graphs whose ver•       concurrent execution of such actions. 
tices correspond to the states of the world, and whose edges     We introduce here a syntactic construct, increments, that 
correspond to the execution of actions. The execution of a     allows us to describe the effects of actions on additive fluents. 
sequence of actions can be represented by a path in such a     Semantically this construct is treated as "syntactic sugar" 
graph.                                                         on top of the propositions involving that construct are 
   Some action languages, including _ , allow us to            viewed as abbreviations for causal laws of The interpre•
talk about the effects of the concurrent execution of ac•      tation of increments described below has been used to ex•
tions. Causal law (1) is understood in to imply that           tend the implementation of called the Causal Calculator 
Location holds after any event that involves the exe•          (CCALC), to cover additive fluents. 
cution of Walk , even if other actions are executed con•         After a review of transition systems and of the syntax of 
currently. To distinguish the events involving the concurrent  in the next two sections, we describe the syntax of increment 
execution of actions a1 and < from the events that involve     laws (Section 4), define their semantics by showing how to 
but not we can write                                           treat them as abbreviations (Section 5), and illustrate the use 
                                                               of additive fluents in the language of CCALC by formalizing 
                                                               an example that involves buying and selling (Section 6). Two 
                                                               other examples of commonsense reasoning related to addi•
  In this paper we investigate the possibility of using i to   tive fluents are discussed in Sections 7 and 8. A proposition 
represent the effects of actions on fluents of a special kind, stated in Section 9 confirms that additive fluents behave as 
called "additive." An additive fluent is a fluent with numer•  one would expect on the basis of the informal discussion of 
ical values such that the effect of several concurrently exe•  additivity above, and thus provide a justification for the ap•
cuted actions on it can be computed by adding the effects      proach to formalizing additive fluents proposed in this paper. 


REASONING ABOUT ACTIONS AND CHANGE                                                                                  1079                                                                diagonal edges correspond to Alice and Bob buying books 
                                                               concurrently. 

                                                               3 Syntax of C+ 
                                                               The review of the syntax of C+ in this section follows 
                                                               [Giunchigiia et al., 2003, Section 4.2]. An atom is an expres•
                                                               sion of the form where c is a constant and Dom(c). 
                                                               For instance, the equalities in Figure 1 are atoms. A formula 
                                                               is a propositional combination of atoms. By a fluent formula 
                                                               we mean a formula such that all constants occurring in it are 
                                                               fluent constants. An action formula is a formula that contains 
                                                               at least one action constant and no fluent constants. 
                                                                 A static law is an expression of the form 
                                                                                    caused F if G (3) 
               Figure 1: A transition system.                  where F and G are fluent formulas. An action dynamic law is 
                                                               an expression of the form (3) in which F is an action formula 
 2 Transition Systems                                          and G is a formula. A fluent dynamic law is an expression of 
                                                               the form 
 Consider a set of symbols, called constants, along with a non•                 caused F if G after H (4) 
 empty finite set of symbols Dom(c) assigned to each con•      where F and G are fluent formulas and H is a formula, pro•
 stant c. We call Dom(c) the domain of                         vided that F does not contain statically determined constants. 
   The constants are divided into two groups—fluent con•       A causal law is a static law, or an action dynamic law, or a flu•
 stants and action constants. Intuitively, a fluent constant rep• ent dynamic law. 
 resents a fluent, and the elements of its domain are the possi• Here are two examples. The expression 
 ble values of that fluent. A state of the world is characterized 
 by a function that maps each fluent constant to an element of                                             , , k (5) 
 its domain. In [Giunchiglia et al., 2003, Section 4.2], fluent where is an abbreviation 
 constants are further subdivided into simple and statically de• for the fluent dynamic law 
 termined; in the examples below, only fluent constants of the 
 first kind will be used. 
   A function that maps each action constant to an element 
 of its domain characterizes an event occurring over a time 
 interval between two successive states. In many examples of 
 the use of the domain of every action constant is the set     is an abbreviation for the fluent dynamic law 
of truth values constants with this domain are called 
 Boolean. Intuitively, a Boolean action constant represents an 
 action; the value of such a constant is t if the action is one of is the 0-place connective "false"). 
 those that are executed as part of the event.                   Causal laws (5) and (6) describe an effect of action Buy 
   A transition system is a directed graph whose vertices are  and a restriction on its executability. To get a complete de•
functions that map every fluent constant to an element of its  scription of Figure 1 in language we need two more pos•
domain, and whose edges are labeled by functions that map      tulates. First, we should specify that the edge labels of the 
every action constant to an element of its domain. The ver•    transition system may assign truth values to the action con•
tices of a transition system are called its states. The functions stants Buy arbitrarily. This is expressed by 
 labeling the edges of a transition system are called events.                    exogenous Buy (7) 
As an example, consider a transition system representing the 
effect of buying a book on the number of books that the per•   which stands for the pair of action dynamic laws 
son owns (Figure 1). It uses two fluent constants—Has(A) 
(the number of books that Alice has) and Has(B) (the num•
ber of books that Bob has)—with the domain {0,..., N}, 
where N is a fixed nonnegative integer, and two Boolean        Action Buy is exogenous in the sense that the action de•
action constants—Buy(A) (Alice buys a book) and Buy(B)         scription does not determine whether that action is executed. 
(Bob buys a book). Every state is represented by two equa•     If it is not executed then there is a cause for this; if it is ex•
tions showing the values of the fluent constants. Every event ecuted then there is a cause for that too. Second, we need 
is represented by the set of action constants that are mapped  to say that the fluent constant Has satisfies the "common-
to t. The loops are labeled by the trivial event 0 (no actions sense law of inertia": in the absence of evidence to the con•
are executed). The horizontal edges are labeled by the event   trary, its value after an event is assumed to be the same as its 
in which Alice buys a book and Bob doesn't; along each of      value before the event. This is expressed by 
the vertical edges, Bob buys a book and Alice doesn't. The                         inertial Has (8) 


1080                                                                       REASONING ABOUT ACTIONS AND CHANGE which stands for fluent dynamic laws                          Notation: x ranges over {A, B}. 
    caused Has 
                                                              Action constants: Domains: 
                 If the value of Has after an event is the     Buy Boolean 
same as the value before the event then there is a cause for 
this. Intuitively, inertia is the cause.                      Additive fluent constant: Domain: 
   An action description is a set of causal laws. The semantics InStore 
of described in [Giunchiglia et al, 2003, Section 4.4], 
specifies the transition system represented by any given ac•  Causal laws: 
tion description. For instance, action description (5)-(8) rep• Buy increments InStore by —1 
resents the transition system shown in Figure 1.              exogenous Buy 
   This action description does not say explicitly that the triv•
ial event has no effect on the values of Has(A) and Has(B),         Figure 2: An action description in extended C+. 
or that event does not affect the value of Has(B). 
Nevertheless, every edge of the transition system labeled is 
a loop, and every edge labeled is horizontal, be•
cause of the postulates (8) that express, under the semantics 
of the persistence property of Has(x). 
   Similarly, causal laws (5)-(8) do not say anything about the 
concurrent execution of actions Buy(A) and Buy(B). But the 
edges labeled in Figure 1 are directed di•
agonally, in accordance with our commonsense expectations. 
This fact illustrates the convenience of the approach to con•
currency incorporated in the semantics of 
   However, as discussed in the introduction, this built-in 
mechanism is not directly applicable to the effects of actions 
on additive fluents. We are now ready to turn to the main sub•
ject of this paper—extending with the additional notation 
that resolves this difficulty.                                   Figure 3: The transition system described by Figure 2. 

4 Increment Laws                                              We will drop 'if G' in (9) if G is T. In extended an action 
                                                              description is a set of causal laws that contains finitely many 
In our proposed extension of some of the simple fluent        increment laws. 
constants can be designated as additive. The domain of every    In the next section we define the semantics of extended 
additive fluent constant is assumed to be a finite set of num• by describing a translation that eliminates increment laws in 
bers. We understand "numbers" as (symbols for) elements of    favor of additional action constants. 
any set with an associative and commutative binary operation    As an example, consider the effects of actions Buy (A), 
   that has a neutral element 0.' Effects of actions on additive Buy(B) on the number of books available in the bookstore 
fluents are described in extended by causal laws of a new     where Alice and Bob are buying books. A description of 
kind—"increment laws." Accordingly, we modify the defi•       these effects in extended is shown in Figure 2 (as before, 
nition of a causal law reproduced in Section 3 in two ways.   TV is a fixed nonnegative integer). The transition system rep•
First, in causal laws (3) and (4) formula F is not allowed to resented by the translation of Figure 2 into the non-extended 
contain additive fluent constants. Second, we extend the class language is depicted in Figure 3 (with the auxiliary action 
of causal laws by including increment laws—expressions of     constants dropped from the edge labels). The causal laws in 
the form                                                      Figure 2 do not say explicitly that the trivial event has no 
                a increments c by if G (9) effect on the value of InStore, or that the concurrent execution 
                                                              of actions Buy(A) and Buy(B) decrements the value of this 
where                                                         fluent by 2. Nevertheless, every edge of the corresponding 
       is a Boolean action constant,                          transition system labeled is a loop, and every edge labeled 
                                                                                 goes up 2 levels, in accordance with our 
       is an additive fluent constant,                        commonsense expectations. This happens because Figure 2 
       is a number, and                                       classifies InStore as an additive fluent constant. 
                                                                The causal laws in this action description do not say explic•
       is a formula that contains no Boolean action constants. 
                                                              itly that actions Buy are not executable when InStore = 0, 
                                                              and that actions Buy(A), Buy(B) cannot be executed concur•
   [Thc additive group of integers is the main example we are inter•
ested in, and this is the case that has been implemented. The max rently when InStore = 1. This is taken care of by our seman•
operation on an ordered set with the smallest element is another in• tics of increment laws, in view of the fact that the domain 
teresting case.                                               of InStore does not contain negative numbers. 


REASONING ABOUT ACTIONS AND CHANGE                                                                                 1081 5 Translating Increment Laws                                 Notation: ranges over {A, B}. 
Let D be an action description in extended i . In connection 
with the increment laws (9) in /), the following terminology Action constants: 
will be used: about the Boolean action constant the additive  Buy 
fluent constant c and the number in (9) we will say that      Contr(Buy\ InStore) 
is a c-contributing constant, and that is a contribution of 
to c.                                                        Additive fluent constant: 
  The auxiliary action constants introduced in the translation InStore 
are expressions of the form Contr where c is an additive 
fluent constant, and a is a c-contributing action constant. The 
domain of Contr consists of all contributions of to c 
and number 0. 
  To translate the increment laws from D, we 
 (i) replace each increment law (9) in D with the action dy•
     namic law 

                                                     (10) 

 (ii) for every auxiliary constant Contr(a,c), add the action Figure 4: The result of translating increment laws from Fig•
     dynamic law 
                                                             ure 2. 
         caused ConU (11) 
                                                            in Figure 3 represent the following event E: 
(iii) add the fluent dynamic laws 

        caused 
                                                    (12) 
                                                               The Causal Calculator, which implements with incre•
     for every additive fluent constant                     ment laws, can be downloaded from 
    and every function that maps each                           http : //www.cs.utexas.edu/users/tag/ccalc/ . 
    contributing constant a to an element of the domain of 
     Contr so that~~ is in the domain of c.                 6 Reasoning about Money 
The sum and the multiple conjunction in (12) range over all As an application of these ideas to automated commonsense 
c-contributing constants                                    reasoning, consider the following example: 
  Causal law (10) interprets increment law (9) as the as•        I have $6 in my pocket. A newspaper costs $ 1, and 
sertion that executing (possibly along with other actions)       a magazine costs $3. Can 1 buy 2 newspapers and a 
causes constant Contr to get the value under some                magazine? A newspaper and 2 magazines? 
conditions characterized by formula G. Causal laws (11) say 
that the value of this constant is 0 by default, that is to say, These questions are about the executability of some concur•
when another value is not required by any increment law.    rently executed actions, and the answers are determined by 
Causal laws (12) say that the value of an additive fluent con• the effect of these actions on an additive fluent—the amount 
stant after an event can be computed as the sum of the value of money that 1 have. 
of this constant prior to the event and the contributions of all Figure 5 describes the relevant properties of buying and 
actions to this constant.                                   selling in the input language of CCALC. There arc objects 
  The result of translating increment laws from Figure 2    of four sorts in this domain: agents, resources, items (to be 
is shown in Figure 4. In this case, the translation de•     purchased) and (nonnegative) integers; items are a subset of 
scribed above introduces two auxiliary action constants:    resources. The buyer and the seller are agents; money is a 
Contr{Buy{A), InStore) and Contr{Buy{B), InStore). The      resource; 0,... ,maxlnt are integers. The price of an item is 
domain of each of them has 2 elements: the contribution -1  an integer. The number of units of a resource that an agent 
of #MV(X) to InStore and number 0.                          has is an integer-valued additive fluent. Buying is an exoge•
                                                            nous action. The four causal laws that follow these declara•
  The edges of the transition system described by Figure 4, 
                                                            tions are self-explanatory; decrements is an abbreviation 
and the corresponding events, can be computed using the 
                                                            defined in terms of increments. The last causal law ex•
methods presented in [Giunchiglia et al.  2003, Sections 4.2, 
                                     n                      presses that the number of units that are being purchased is 
2.6]. (This calculation involves turning the action descrip•
                                                            uniquely defined. 
tion into a definite causal theory and computing the mod•
els of the completion of this theory.) Every event assigns     Figure 6 expresses the first of the two questions stated at 
values to each action constant, including the auxiliary con• the beginning of this section. The line maxstep : : 1 
stants Contr(Buy InStore). For instance, the label          tells CCALC that the query is about paths of length 1 in the 
                                                            transition system. The question is whether the transition sys•
                                                            tem contains an edge that begins in a state in which the buyer 


1082                                                                    REASONING ABOUT ACTIONS AND CHANGE   - sorts                                                      and planets, the Integer is not affected by any external forces. 
   agent; resource >> item; nnlnteger.                         As its proud name suggests, the mass of the spacecraft is an 
                                                               integer. For every integer the coordinates and all three com•
    variables                                                  ponents of the Integer's velocity vector at time are integers; 
   Ag :: agent;         Res : : resource;                      the forces applied to the spacecraft by its jet engines over 
   It :: item;          M,N : : nnlnteger.                     the interval for any integer are constant vectors 
                                                               whose components are integers as well. If the crew of the In•
    objects 
   buyer,seller                : agent;                        teger attempts to violate any of these conditions, the jets fail 
   money                       : resource;                     to operate! 
   0..maxlnt                   : nnlnteger.                      Our formalization of the motion of the Integer uses the flu•
                                                               ents Pos where a ranges over {X, Y, Z}, to represent the 
 : - constants                                                 current position of the Integer along the a axis. The additive 
   price(item) :: nnlnteger;                                   fluents Vel are the components of its velocity. According 
   has(agent,resource)                                         to Newton's Second Law, the acceleration created by firing a 
                :: additiveFluent(nnlnteger);                  jet can be computed by dividing the force by the mass of the 
   buy(item,nnlnteger) :: exogenousAction.                     spacecraft. This relationship can be expressed without men•
                                                               tioning the acceleration explicitly—in terms of the change in 
buy(It,N) increments has(buyer,It) by N. 
buy(It,N) decrements has(seller,It) by N.                      the velocity over a unit time interval: 
buy(It,N) increments has(seller,money)                         Fire(j) increments Vel by /Mass {{Force 
    by M*N if price(It)=M 
                           where M*N =< maxlnt.                  To test our representation, we instructed CCALC to answer 
buy(It,N) decrements has(buyer,money)                          the following question: 
    by M*N if price(It)=M 
                           where M*N =< maxlnt.                     The mass of the Integer is 1. The Integer has two 
nonexecutable buy(It,M) & buy(It,N)                                 jets, and the force that can be applied by each jet 
                           where M\=N.                              along each axis is at most 2. The current position 
                                                                    of the Integer is (-1,0,1), and its current velocity 
                Figure 5: Buying and selling                        is (0,1,1). How can it get to (0,3,1) within 1 time 
                                                                    unit? 
 :- objects                                                      One of the solutions found by CCALC is to apply the forces 
   newspaper,magazine :: item.                                 (2,2,0) and (0,2,-2). 

price(newspaper)=1. price(magazine)=3.                         8 Missionaries and Cannibals with Two Boats 
 :- query                                                      In the Missionaries and Cannibals Problem (MCP), three mis•
maxstep :: 1;                                                  sionaries and three cannibals come to a river and find a boat 
0: has(buyer,money)=6,                                         that can hold two people. If the cannibals ever outnumber the 
    buy(newspaper,2), buy(magazine,1).                         missionaries on either bank, the missionaries will be eaten. 
                                                               How shall they cross? The shortest solution involves 11 steps. 
             Figure 6: Do I have enough cash?                    Lifschitz [2000] showed how to express this puzzle and 
                                                               some of its elaborations due to McCarthy [1999] in the lan•
                                                               guage of CCALC. Some simple elaborations of MCP in the 
has $6, and whose label includes buying 2 newspapers and 1 
                                                               spirit of this work require that the number of members of 
magazine. CCALC responds to this query by finding such an 
                                                               a group (missionaries or cannibals) at a given location be 
edge.2 Its reply to a similar question about 1 newspaper and   treated as an additive fluent. This is the case, for instance, 
2 magazines is negative.                                       when several boats are available and are allowed to operate 
                                                               concurrently. 
7 Reasoning about Motion                                         Using the ideas of this paper, we formalized the modifica•
Some additive fluents mentioned in the introduction—for in•    tion of MCP in which the travelers find two boats: a small 
stance, the velocity of a particle—are real-valued, rather than boat that holds one, and a bigger boat that holds two. Using 
integer-valued. CCALC cannot deal with real numbers yet,       our formalization, CCALC has determined that the modified 
and its input language does not allow us to express properties problem can be solved in 7 steps. 
of such fluents. 
   But let's imagine a movable object that is immune to this   9 Properties of Additive Constants 
complication—the spacecraft Integer. Far away from stars 
                                                               By examining Figure 3 in isolation from its symbolic descrip•
                                                               tion in Figure 2 we can see that the constant In Store exhibits 
   2This example involves the concurrent execution of two actions, 
but in general the CCALC implementation of additive fluents does some features typical for additive fluent constants. 
not impose any specific restriction on the number of actions that can Consider, for instance, the edges that start at the vertex 
be executed concurrently.                                      InStore = 2 and are labeled by the events {Buy(A)} and 


REASONING ABOUT ACTIONS AND CHANGE                                                                                  1083 