                     Automated Verification: Graphs, Logic, and Automata 

                                                   Moshe Y. Vardi* 
                                                    Rice University 
                                                  Houston, TX, USA 
                                              vardi@cs.rice.edu 
                                    http://www.cs.rice/edu/~vardi 


                        Abstract                               formal-verification tools, based on model-checking technol•
                                                               ogy [Clarke et al, 1986; Lichtenstein and Pnueli, 1985; 
     Automated verification is one of the most success­        Queille and Sifakis, 1981; Vardi and Wolper, 1986] have en­
     ful applications of automated reasoning in com­           joyed a substantial and growing use over the last few years, 
     puter science. In automated verification one uses         showing an ability to discover subtle flaws that result from ex­
     algorithmic techniques to establish the correctness       tremely improbable events [Clarke et al, 1999]. While until 
     of the design with respect to a given property. Au­       recently these tools were viewed as of academic interest only, 
     tomated verification is based on a small number of        they are now routinely used in industrial applications, result­
     key algorithmic ideas, tying together graph theory,       ing in decreased time to market and increased product in­
     automata theory, and logic. In this self-contained        tegrity [Kurshan, 1997]. It is fair to say that automated verifi­
     talk I will describe how this "holy trinity" gave rise    cation is one of the most successful applications of automated 
     to automated-verification tools, and mention some         reasoning in computer science [Clarke and Wing, 1996]. 
     applications to planning. 
                                                               2 Basic Theory 
1 Introduction                                                 The first step in formal verification is to come up with a for•
                                                               mal specification of the design, consisting of a description of 
The recent growth in computer power and connectivity has 
                                                               the desired behavior. One of the more widely used specifica­
changed the face of science and engineering, and is chang­
                                                               tion languages for designs is temporal logic LPnucli, 1977]. 
ing the way business is being conducted. This revolution is 
                                                               In linear temporal logics, time is treated as if each moment 
driven by the unrelenting advances in semiconductor man­
                                                               in time has a unique possible future. Thus, linear temporal 
ufacturing technology. Nevertheless, the U.S. semiconductor 
                                                               formulas are interpreted over linear sequences, and we regard 
community faces a serious challenge: chip designers arc find­
                                                               them as describing the behavior of a single computation of a 
ing it increasingly difficult to keep up with the advances in 
                                                               system. (An alternative approach is to use branching time. 
semiconductor manufacturing. As a result, they are unable to 
                                                               For a discussion of linear vs. branching time, see [Vardi, 
exploit the enormous capacity that this technology provides. 
                                                               2001].) 
The International Technology Roadmap for Semiconductors 
                                                                 In the linear temporal logic LTL, formulas are constructed 
suggests that the semiconductor industry will require produc­
                                                               from a set Prop of atomic propositions using the usual 
tivity gains greater than the historical 20% per-year to keep 
                                                               Boolean connectives as well as the unary temporal connec­
up with the increasing complexity of semiconductor designs. 
                                                               tive A" ("next"), F ("eventually"), G ("always"), and the bi­
This is referred to as the "design productivity crisis". As 
                                                               nary temporal connective U ("until"). For example, the LTL 
designs grow more complex, it becomes easier to introduce 
                                                               formula G(request F grant), which refers to the atomic 
flaws into the design. Thus, designers use various validation 
                                                               propositions request and grunt, is true in a computation pre­
techniques to verify the correctness of the design. Unfortu­
                                                               cisely when every state in the computation in which request 
nately, these techniques themselves grow more expensive and 
                                                               holds is followed by some state in the future in which grant 
difficult with design complexity. As the validation process 
                                                               holds. The LTL formula G(request —► (request U grant)) is 
has begun to consume more than half the project design re­
                                                               true in a computation precisely if, whenever request holds in 
sources, the semiconductor industry has begun to refer to this 
                                                               a state of the computation, it holds until a state in which grant 
problem as the "validation crisis". 
                                                               holds is reached. 
   Formal verification is a process in which mathematical        LTL is interpreted over computations, which can be viewed 
techniques are used to guarantee the correctness of a de­      as infinite sequences of truth assignments to the atomic 
sign with respect to some specified behavior. Automated        propositions; i.e., a computation is a function 
   * Supported in part by NSF grants CCR-9988322, CCR-0124077, 2Prop that assigns truth values to the elements of Prop at 
IIS-9908435, IIS-9978135, and EIA-0086264, by BSF grant        each time instant (natural number). For a computation TT and 
9800096, and by a grant from the Intel Corporation.            a point i the notation indicates that a formula 


INVITED SPEAKERS                                                                                                     1603                                                                an automata-theoretic problem as follows [Vardi and Wolpcr, 
                                                                1986]. Suppose that we are given a system A/ and an LTL 
                                                               formula We check whethermodels as fol•
                                                               lows: (1) construct the automaton that corresponds to 
                                                               the negation of the formula (2) take the cross product of 
                                                               the system M and the automaton to obtain an automaton 
                                                                                                             and (3) check 
   Designs can be described in a variety of formal description whether the language is nonempty, i.e., whether 
 formalisms. Regardless of the formalism used, a finite-state        accepts some input. 
 design can be abstractly viewed as a labeled transition sys•  Theorem 2 Let M be a labeled transition system and be 
 tem, i.e., as a structure of the form M = (W, W0, R, V),      an LTL formula. Then M satisfies 
 where W is the finite set of states that the system can be in, 
       W is the set of initial states of the system, is If is empty, then the design is correct. Otherwise, 
 a transition relation that indicates the allowable state transi• the design is incorrect and the word accepted by 
 tions of the system, and assigns truth values                 is an incorrect computation. Model-checking tools use algo•
 to the atomic propositions in each state of the system. (A la• rithms for checking emptiness of Buchi automata [Emerson 
beled transition system is essentially a Kripke structure.) A  and Lei, 1985; Courcoubetis et al., 1992] to check emptiness 
path in M that starts at u is a possible infinite behavior of the of In case of nonemptiness, the incorrect computa•
system starting at a, i.e., it is an infinite sequence of tion is presented to the user as a finite trace, possibly followed 
states in W such that UQ = u, and for all The by a cycle. Thus, once the automaton is constructed, the 
sequence is a computation of M that starts                     verification task is reduced to automata-theoretic problems, 
at u. It is the sequence of truth assignments visited by the   namely, intersecting automata and testing emptiness of au•
path, The language of M, denoted L(Af) consists of all com•    tomata, which have highly efficient solutions [Vardi, 1996]. 
putations of M that start at a state in WQ. Note that L{M) can Furthermore, using data structures that enable compact repre•
be viewed as a language of infinite words over the alphabet    sentation of very large state space makes it possible to verify 
                                                               designs of significant complexity [Burch et al, 1992]. 
2Prop. L(M) can be viewed as an abstract description of a 
system, describing all possible "traces". We say that M satis•   The linear-time framework is not limited to using LTL as 
fies an LTL formula if all computations in L(M) satisfy        a specification language. ForSpee is a recent extension of 
that is, if models When M satisfies we also                    LTL, designed to address the need of the semiconductor in•
say that M is a model of which explain why the technique       dustry [Armoni et aL, 2002]. There are those who prefer 
                                                               to use automata on infinite words as a specification formal•
is known as model checking [Clarke et al.% 1999]. 
                                                               ism [Vardi and Wolper, 1994]; in fact, this is the approach of 
   One of the major approaches to automated verification 
                                                               COSPAN [Kurshan, 1994], In this approach, we are given a 
is the automata-theoretic approach, which underlies many 
                                                               design represented as a finite transition system M and a prop•
model checkers, e.g., SPIN [Holzmann, 1997]. The key idea 
                                                               erty represented by a Buchi (or a related variant) automaton 
underlying the automata-theoretic approach is that, given an 
                                                               P. The design is correct if all computations in L(M) are ac•
LTL formula it is possible to construct a finite-state au•
                                                               cepted by This approach is called the 
tomaton on infinite words that accepts precisely all com•
                                                               language-containment approach. To verify M with respect to 
putations that satisfy The type of finite automata on infinite 
                                                               P, we: (1) construct the automaton P  that complements P, 
words we consider is the one defined by Buchi 1962. A Biichi                                        c
                                                               (2) take the product of the system M and the automaton P
automaton is a tuplewhere is a finite                                                                                   c 
                                                               to obtain an automaton AM,P, and (3) check that the automa•
alphabet, S is a finite set of states, S is a set of initial 
                                                               ton AM,P is nonempty. As before, the design is correct iff 
states,       is a nondeterministic transition func•
       f                                                       AM,P is empty. Thus, the verification task is again reduced to 
tion, and is a set of accepting states. A run of A over 
                                                               automata-theoretic problems, namely intersecting and com•
an infinite wordis a sequence where 
                                                               plementing automata and testing emptiness of automata. 
         and for all A run 
is accepting if there is some accepting state that repeats in•
finitely often, i.e., for some there are infinitely many       3 Concluding Remarks 
i's such that The infinite word w is accepted by A             Over the last few years, automated formal verification tools, 
if there is an accepting run of A over w. The language of      such as model checkers, have shown their ability to provide 
infinite words accepted by A is denoted L(A). The following    a thorough analysis of reasonably complex designs [Goer-
fact establishes the correspondence between LTL and Buchi      ing, 1997]. Companies such as AT&T, Cadence, Fujitsu, HP, 
automata [Vardi and Wolper, 1994] (for a tutorial introduction IBM, Intel, Motorola, NEC, SGI, Siemens, and Sun are using 
for this correspondence, see [Vardi, 1996]):                   model checkers increasingly on their own designs to reduce 
Theorem 1 Given an LTL formula one can build a Biichi          time to market and ensure product quality, cf. [Beer et al, 
automaton where and 1994]. 
                                                                 There has recently also been an fruitful interaction between 
              such that is exactly the set of computa•
                                                               model checking and planning in AI. On one hand, the usage 
tions satisfying the formula 
                                                               of satisfiability technology to solve planning problems [Kautz 
  This correspondence reduces the verification problem to      and Selman, 1992] has been adopted into model checking 


1604                                                                                                 INVITED SPEAKERS [Biere et al., 1999; Copty et al., 2001]. At the same time, Transactions on Programming Languages and Systems, 
symbolic techniques from model checking have been adopted 8(2):244-263, January 1986. 
into AI planning [Cimatti and Roveri, 2000]. Finally, tempo­
                                                       [Clarke et al., 1999] E.M. Clarke, O. Grumberg, and 
ral logic and the automata-theoretic perspective has shown to 
be useful for planning with temporally extended goals [Bac­ D. Peled. Model Checking. MIT Press, 1999. 
chus and Kabanza, 1998; 2000; Giacomo and Vardi, 1999; [Copty etai, 2001] F. Copty, L. Fix, R. Fraer, 
Calvanese et a/., 2002].                                 E. Giunchiglia, G. Kamhi, A. Tacchella, and M.Y 
                                                         Vardi. Benefits of bounded model checking at an indus­
References                                               trial setting. In Computer Aided Verification, Proc. 13th 
[Armoni et al., 2002] R. Armoni, L. Fix, R. Gerth, B. Gins- International Conference, volume 2102 of Lecture Notes 
  burg, T. Kanza, A. Landver, S. Mador-Haim, A. Tiemeyer, in Computer Science, pages 436-453. Springer-Verlag, 
  E. Singerman, M.Y. Vardi, and Y. Zbar. The ForSpec     2001. 
  temporal language: A new temporal property-specification LCourcoubetis etai, 1992] C. Courcoubetis, M.Y. Vardi, 
  language. In Proc. 8th Int'l Conf. on Tools and Algorithms P. Wolper, and M. Yannakakis. Memory efficient algo­
  for the Construction and Analysis of Systems (TACAS'02), rithms for the verification of temporal properties. Formal 
  Lecture Notes in Computer Science 2280, pages 296-311. Methods in System Design, 1:275-288, 1992. 
  Springer-Verlag, 2002. 
                                                       [Emerson and Lei, 1985] E.A. Emerson and C.-L. Lei. Tem­
[Bacchus and Kabanza, 1998] F. Bacchus and F. Kabanza.   poral model checking under generalized fairness con­
  Planning for temporally extended goals. Ann. of Mathe• straints. In Proc. 18th Hawaii International Conference 
  matics and Artificial Intelligence, 22:5-27, 1998.     on System Sciences, North Holy wood, 1985. Western Pe­
[Bacchus and Kabanza, 2000] F. Bacchus and F. Kabanza.   riodicals Company. 
  Using temporal logics to express search control knowledge 
                                                       [Giacomo and Vardi, 1999] G. De Giacomo and M.Y. Vardi. 
  for planning. Al J., 116(1-2): 123-191, 2000. 
                                                         Automata-theoretic approach to planning for temporally 
[Beer et al, 1994] I. Beer, S. Ben-David, D. Geist,      extended goals. In Proc. European Conf on Planning, 
  R. Gcwirtzman, and M. Yoeli. Methodology and           volume 1809 of Lecture Notes in AI, pages 226-238. 
  system for practical formal verification of reactive   Springer-Verlag, 1999. 
  hardware. In Proc. 6th Conference on Computer Aided 
   Verification, volume 818 of Lecture Notes in Computer [Goering, 1997] R. Goering. Model checking expands veri­
  Science, pages 182-193, Stanford, June 1994.           fication's scope. Electronic Engineering Today, February 
                                                         1997. 
[Biere et al, 1999] A. Biere, A. Cimatti, E.M. Clarke, 
  M. Fujita, and Y Zhu. Symbolic model checking using  LHolzmann, 1997] G.J. Holzmann. The model checker 
  SAT procedures instead of BDDs. In Proc. 36th Design   SPIN. IEEE Trans, on Software Engineering, 23(5):279-
  Automation Conference, pages 317-320. IEEE Computer    295, May 1997. Special issue on Formal Methods in Soft­
  Society, 1999.                                         ware Practice. 
[Buchi, 1962] J.R. Buchi. On a decision method in restricted [Kautz and Selman, 1992] H. Kautz and B. Selman. Plan­
  second order arithmetic. In Proc. Internat. Congr. Logic, ning as satisfiability. In Proc. European Conference on 
  Method, and Philos. Sci. I960, pages 1-12, Stanford,   Artificial Intelligence, pages 359-379, 1992. 
   1962. Stanford University Press. 
                                                       [Kurshan, 1994] R.P Kurshan. Computer Aided Verification 
[Burch et al., 1992] J.R. Burch, E.M. Clarke, K.L. McMil­ of Coordinating Processes. Princeton Univ. Press, 1994. 
  lan, D.L. Dill, and L.J. Hwang. Symbolic model checking: 
                                                       [Kurshan, 1997] R.P. Kurshan. Formal verification in a com­
  1020) states and beyond. Information and Computation, 
  98(2): 142-170, June 1992.                             mercial setting. In Proc. Conf on Design Automation 
                                                         (DAC'97), volume 34, pages 258-262, 1997. 
[Calvanese et al., 2002] D. Calvanese, G. De Giacomo, and 
  M.Y. Vardi. Reasoning about actions and planning in LTL [Lichtenstein and Pnueli, 1985] O. Lichtenstein and 
  action theories. In Proc. 8th Int 'L Conf on the Principles A. Pnueli. Checking that finite state concurrent pro­
  of Knowledge Representation and Reasoning, pages 593-  grams satisfy their linear specification. In Proc. 12th ACM 
  602. Morgan Kaufmann, 2002.                            Symp. on Principles of Programming Languages, pages 
[Cimatti and Roveri, 2000] A. Cimatti and M. Roveri. Con­ 97-107, New Orleans, January 1985. 
  formant planning via symbolic model checking. J. of AI [Pnueli, 1977] A. Pnueli. The temporal logic of programs. 
  Research, 13:305-338, 2000.                            In Proc. 18th IEEE Symp. on Foundation of Computer Sci•
[Clarke and Wing, 1996] E.M. Clarke and J.M. Wing. For­  ence, pages 46-57, 1977. 
  mal methods: State of the art and future directions. ACM [Queille and Sifakis, 1981] J.R Queille and J. Sifakis. Speci­
  Computing Surveys, 28:626-643, 1996.                   fication and verification of concurrent systems in Cesar. In 
[Clarke et al., 1986] E.M. Clarke, E.A. Emerson, and A.P. Proc. 5th International Symp. on Programming, volume 
  Sistla. Automatic verification of finite-state concur­ 137 of Lecture Notes in Computer Science, pages 337— 
  rent systems using temporal logic specifications. ACM  351. Springer-Verlag, 1981. 


INVITED SPEAKERS                                                                                      1605 [Vardi and Wolper, 1986] M.Y. Vardi and P. Wolper. An 
   automata-theoretic approach to automatic program verifi­
   cation. In Proc. 1st Symp. on Logic in Computer Science, 
   pages 332-344, Cambridge, June 1986. 
[Vardi and Wolper, 1994] M.Y. Vardi and P. Wolper. Reason­
   ing about infinite computations. Information and Compu•
   tation, 115(1): 1-37, November 1994. 
[Vardi, 1996] M.Y. Vardi. An automata-theoretic approach to 
   linear temporal logic. In F. Moller and G. Birtwistle, edi­
   tors, Logics for Concurrency: Structure versus Automata, 
   volume 1043 of Lecture Notes in Computer Science, pages 
   238-266. Springer-Verlag, Berlin, 1996. 
[Vardi, 2001] M.Y. Vardi. Branching vs. linear time: Fi­
  nal showdown. In Proc. Tools and Algorithms for the 
   Construction and Analysis of Systems (TACAS), volume 
  2031 of Lecture Notes in Computer Science, pages 1-22. 
   Springer-Verlag, 2001. 


1606                                                                                    INVITED SPEAKERS 