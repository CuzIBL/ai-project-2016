                Conservative Extensions in Expressive Description Logics

                            Carsten Lutz1, Dirk Walther2, Frank Wolter2
                      1Institut fur¬® Theoretische Informatik, TU Dresden, Germany
                    2Department of Computer Science, University of Liverpool, UK


                    Abstract                          T1 w.r.t. Œì if adding T2 to T1 does not change the ontology
                                                      T1 as far as concepts built only from concept and role names
    The notion of a conservative extension plays a    in Œì are concerned. We give three examples of ontology re-
    central role in ontology design and integration:  lated tasks that can be understood in terms of conservative
    it can be used to formalize ontology reÔ¨Ånements,  extensions.
    safe mergings of two ontologies, and independent
    modules inside an ontology. Regarding reasoning   ‚Äì Ontology reÔ¨Ånement. During ontology design, a frequent
    support, the most basic task is to decide whether task is to add more details to a part of the ontology that has
    one ontology is a conservative extension of an-   not yet been sufÔ¨Åciently described. Intuitively, such a reÔ¨Åne-
    other. It has recently been proved that this prob- ment should have no impact on other, unrelated parts of the
    lem is decidable and 2ExpTime-complete if on-     ontology. This requirement can be formalized by demand-
    tologies are formulated in the basic description  ing that the reÔ¨Åned ontology is a conservative extension of
    logic ALC. We consider more expressive descrip-   the original one w.r.t. the concept and role names that do not
    tion logics and begin to map out the boundary     belong to the reÔ¨Åned part [4; 1].
    between logics for which conservativity is decid- ‚Äì Ontology merging. The most straightforward way to inte-
    able and those for which it is not. We prove that grate two ontologies is to simply take their union. Such a
    conservative extensions are 2ExpTime-complete in  merging should not compromise the original ontologies. One
    ALCQI, but undecidable in ALCQIO. We also         possible formalization of this requirement is to demand that
    show that if conservative extensions are deÔ¨Åned   the united ontology is a conservative extension of the com-
    model-theoretically rather than in terms of the con- ponent ontologies w.r.t. the set of all concept and role names
    sequence relation, they are undecidable already in used in the respective components. Weaker formalizations are
    ALC.                                              obtained by excluding from the signature concept and role
                                                      names for which an interaction between the component on-
1  Introduction                                       tologies is expected (and intended) [4].
                                                                                                   T
The design and integration of ontologies formulated in mod- ‚Äì DeÔ¨Åning Modules. A module inside an ontology that
                                                      describes an independent part of the application domain can
ern ontology languages such as OWL is a serious challenge.               T   T          T
Experience shows that principled methodologies as well as be deÔ¨Åned as a subset of such that is a conservative
                                                      extension of T  w.r.t. the concept names and role names that
automated reasoning support are required to ensure that the   T 
resulting ontologies are well-structured [6]. In the recent pa- belong to [5].
pers [4; 5; 3; 1], conservative extensions have been identiÔ¨Åed The most basic reasoning task regarding conservative exten-
as a crucial notion for formalizing central tasks in ontology sions is as follows: given ontologies T1 and T2 and a signature
design and integration. Consequently, conservative exten- Œì, decide whether T1 ‚à™T2 is a conservative extension of T1
sions can play a key role in design and integration method- w.r.t. Œì. In the following, we refer to this task as deciding con-
ologies [3], and reasoning about conservative extensions can servative extensions.In[4], this decision problem is investi-
provide valuable support for the ontology designer.   gated for the basic DL ALC and proved to be 2EXPTIME-
  Formally, an ontology T1 ‚à™T2 is a conservative extension complete. The aim of the current paper is to investigate con-
of an ontology T1 w.r.t. a signature Œì iff every consequence of servative extensions in more expressive DLs such as the ones
T1 ‚à™T2 formulated in Œì is already a consequence of T1.For underlying the ontology language OWL-DL and to map out
example, assume that ontologies are formalized in a descrip- the boundary between decidable and undecidable. Our main
tion logic (DL) such as OWL-DL and its fragments [2]. Then results are as follows: (i) in ALCQI, the extension of ALC
a signature is a set of concept and role names, an ontology with inverse roles and qualifying number restrictions, decid-
is a DL TBox, and a consequence of a TBox is a subsump- ing conservative extensions is 2-EXPTIME complete and thus
tion relationship between two concepts which follows from not more difÔ¨Åcult than in ALC; and (ii) if we further extend
the TBox. Intuitively, T1 ‚à™T2 is a conservative extension of ALCQI with nominals, conservative extensions in the result-

                                                IJCAI-07
                                                   453   Name            Syntax         Semantics           empty set of individuals and the interpretation function ¬∑I
                     ‚àí              I ‚àí1                                                     I     I
   inverse role     r              (r )               maps each concept name A ‚àà NC to a subset A of Œî , each
                                                                                         I     I
                    {a}             {aI }             role name r ‚àà NR to a binary relation r on Œî , and each
   nominal                                                          a ‚àà                  aI ‚àà ŒîI
                    ¬¨C            ŒîI \ CI             individual name   NI to an individual      . The ex-
   negation                                                    ¬∑I
                   C  D          CI ‚à© DI             tension of to inverse roles and arbitrary concepts is deÔ¨Åned
   conjunction                                        inductively as shown in the third column of Figure 1.
   at-most number           {d | #{e |(d, e) ‚àà rI ‚àß
                 ( nrC)                 I              An interpretation I satisÔ¨Åes an implication C  D if
   restriction                      e ‚àà C }‚â§n}
                                                      CI  ‚äÜ DI , and I is a model of a TBox T if it satisÔ¨Åes all
                                                      implications in T . A concept C is satisÔ¨Åable relative to a
      Figure 1: Syntax and semantics of ALCQIO.                                                  I
                                                      TBox T if there exists a model I of T such that C = ‚àÖ.A
                                                      concept C is subsumed by a concept D relative to a TBox T
                                                      (written T|= C   D) if every model I of T satisÔ¨Åes the
ing DL ALCQIO    are undecidable. This shows that con-
                                                      implication C  D.
servative extensions in OWL-DL, of which ALCQIO is a
fragment, is also undecidable. It also identiÔ¨Åes ALCQI as Despite the fact that individual names are closer to con-
a signiÔ¨Åcant fragment of OWL-DL in which conservative ex- stants than to predicates, we henceforth use the term predi-
                                                                                 ‚à™    ‚à™
tensions are still decidable.                         cates to refer to elements of NC NR NI.Asignature is a
                                                                                        (T )         T
  In mathematical logic, there exist (at least) two versions of Ô¨Ånite set of predicates. The signature sig of a TBox is
                                                                                     T
conservative extensions. One is based on the consequence re- the set of all predicates that occur in . Given a description
                                                           L              Œì        L(Œì)
lation as sketched above. An alternative, stronger version is logic and a signature , we use to denote the set of
                                                      L                                  Œì
deÔ¨Åned in a model-theoretic way. We also consider deciding -concepts that use only predicates from .
the latter kind of conservative extensions and show that, al-
ready in ALC, this problem is highly undecidable. Details of DeÔ¨Ånition 1 (Conservative Extension) Let T1 and T2 be
all proofs can be found in the technical report [8].  TBoxes formulated in a DL L, and let Œì ‚äÜ sig(T1) be a sig-
                                                      nature. Then T1 ‚à™T2 is a Œì-conservative extension of T1 if
2  Preliminaries                                      for all C1,C2 ‚ààL(Œì), we have T1 |= C1  C2 iff T1 ‚à™T2 |=
                                                      C1  C2.
In DLs, concepts are inductively deÔ¨Åned with the help of a set
                                                        Deciding conservative extensions means to decide, given
of constructors, starting with a set NC of concept names, a set
                                                      two TBoxes T1 and T2 and a signature Œì ‚äÜ sig(T1), whether
NR of role names, and (possibly) a set NI of individual names.
                                                      T1 ‚à™T2 is a Œì-conservative extension of T1.
In this paper, we consider the DL ALCQIO and its frag-
ments. The constructors available in ALCQIO are shown If Œì=sig(T1), we simply drop Œì and only talk about conser-
in Figure 1. There, the inverse constructor is the only role vative extensions. It is not difÔ¨Åcult to see that an alternative
constructor, whereas the remaining constructors are concept deÔ¨Ånition of conservative extensions is as follows: T1 ‚à™T2 is
constructors. In Figure 1 and the remainder of this paper, we a Œì-conservative extension of T1 iff each concept C ‚ààL(Œì)
use #S to denote the cardinality of a set S, a and b to denote that is satisÔ¨Åable relative to T1 is satisÔ¨Åable relative to T1 ‚à™T2.
individual names, r and s to denote roles (i.e., role names and Therefore, a concept C ‚ààL(Œì) that is satisÔ¨Åable relative to
inverses thereof), A, B to denote concept names, and C, D T1, but not relative to T1 ‚à™T2 witnesses that T1 ‚à™T2 is not a
to denote (possibly complex) concepts. For an inverse role conservative extension of T1. We call such a concept a wit-
s = r‚àí we set s‚àí := r. As usual, we use  as abbreviation ness concept.
for an arbitrary (but Ô¨Åxed) propositional tautology, ‚ä• for ¬¨, Let us give an example for conservative extensions in the
 ‚Üí      ‚Üî                                ( nrC)
 ,  , and  for the usual Boolean abbreviations,       description logic ALCQI. Assume that T1 is a TBox formal-
(at-least restriction) for ¬¨( n ‚àí 1 rC) if n>0 and for izing knowledge about universities:
 if n =0, (= nrC)   for ( nrC)   ( nrC),  ‚àÉr.C
(existential restriction) for ( 1 rC),and‚àÄr.C (universal Lecture ‚àÉhas   subject.Subject ‚àÉgiven by.Lecturer
restriction)for( 0 r ¬¨C). We assume that the numbers  Intro TCS     Lecture
inside number restrictions are coded in binary.
  The DL that allows only for negation, conjunction, disjunc- Lecturer  Professor  TeachingAssistant
tion, and universal and existential restrictions is called ALC. Lecturer ‚àÉemployed by.University
                                                                                  ‚àí
The availability of additional constructors is indicated by con- University ‚àÄemployed by .(Academic  Admin)
catenation of a corresponding letter: Q stands for number
restrictions; I stands for inverse roles, and O for nominals. The upper part of T1 describes university lectures, saying,
This explains the name ALCQIO, and also allows us to re- e.g., that every introductory lecture on theoretical computer
fer to its sublanguages in a simple way.              science (TCS) is a lecture. The lower part of T1 describes
  The formulation of ontologies in description logics is based universities and their employees. Suppose now that we want
on TBoxes, and we will from now on use these two terms to reÔ¨Åne the part of the ontology that is concerned with lec-
interchangeably. Formally, a TBox is a Ô¨Ånite set of concept tures. We extend the signature by adding the concept names
implications C  D.                                   AutomataTheory and ComplexityTheory and state in T2 that
  The semantics of ALCQIO-concepts is deÔ¨Åned in terms these subjects are discussed in every introductory TCS lec-
of an interpretation I =(ŒîI , ¬∑I ). The domain ŒîI is a non- ture. We also say that automata theory and complexity theory

                                                IJCAI-07
                                                   454are different things:                                 witness concepts, but it is not a model conservative extension.
                                                      The stronger notion of model conservative extensions is of
 Intro TCS  ‚àÉhas    subject.AutomataTheory
            ‚àÉ             .                          interest for query answering modulo ontologies. In this case,
 Intro TCS       has subject ComplexityTheory         one might want to ensure that under the addition of any ABox
         ‚ä•AutomataTheory       ComplexityTheory
                                                      A (over the signature of T1) the answers to queries (over the
Intuitively, this addition should have an impact on the up- signature of T1)toT1 ‚à™T2 ‚à™Acoincide with those to T1 ‚à™A.
                                                                             T  ‚à™T
per part of T1 since it adds information about lectures, but it This immedialy follows if 1 2 is a model conservative
should not affect the lower part which is not concerned with extension of T1, but it does not follow if T1 ‚à™T2 is just a
lectures. This intuition can be formally captured by conserva- deductive conservative extension of T1.
tive extensions: if we choose Œì to be the set of all predicates However, from an algorithmic viewpoint model conserva-
used in the lower part of T1, then T1 ‚à™T2 is a Œì-conservative tive extensions are a problematic choice: we show that they
extension of T1. Thus, the lower part of T1 is not affected are highly undecidable even in the basic description logic
by the addition of T2. If we choose Œì to be the predicates ALC (and therefore also in all its extensions). The proof of
in the upper part of T1, then T1 ‚à™T2 is not a Œì-conservative the following result is by a reduction from the semantic con-
extension, a witness concept being                    sequence problem in modal logic and can be found in [8].
                    ( 1           ).                                1
           IntroTCS       has subject                 Theorem 3  It is Œ†1-hard to decide whether for two given
                                                      ALC  TBoxes T1 and T2, the TBox T1 ‚à™T2 is a model con-
By considering these two cases of conservative extensions,               T
the ontology designer can thus verify that his modiÔ¨Åcation servative extension of 1.
changes the TBox (only) in the intended way.
  This example also shows that conservative extensions de- 3 Decidability in ALCQI
pend on the descripion logic L: the TBoxes T1 and T2 are
actually formulated in ALCI and we have seen that if Œì is We give a tight complexity bound for deciding conservative
the set of predicates in the upper part of T1, then T1 ‚à™T2 extensions in ALCQI. We use |C| to denote the length of a
is not a Œì-conservative extension of T1. However, this only concept C, and |T | to denote the size CD‚ààT (|C| + |D|)
holds since we assumed ALCQI to be the underlying DL  of a TBox T .
and thus allowed number restrictions in the witness concept.
If we switch the underlying DL to ALCI, then T1 ‚à™T2 is a Theorem 4 It is 2-EXPTIME-complete to decide conserva-
Œì-conservative extension of T1, for the same Œì. In the next tive extensions in ALCQI. In the case that T1 ‚à™T2 is not
section, we investigate a purely model-theoretic version of a conservative extension of T1, there exists a witness concept
convervative extension, which does not depend on the lan- C of length at most 3-exponential in |T1 ‚à™T2| that can be
guage.                                                computed in time polynomial in |C|.
                                                      The lower bound can be proved exactly in the same way as
2.1  Model Conservative Extensions
                                                      the 2-EXPTIME lower bound for conservative extensions in
In mathematical logic and software speciÔ¨Åcation [9], there ALC [4]. However, the lower bounds from ALC do not sim-
are two different kinds of conservative extensions: one that ply transfer to ALCQI and it is necessary to walk through
is based on the consequence relation ‚Äú|=‚Äù as in DeÔ¨Ånition 1 the proof in [4] and check that it also works for the case of
and one that is based on models only . For simplicity, we ALCQI. In the following, we concentrate on proving the
formulate this second notion only for the case where Œì= upper bound. It is established by devising a 2-EXPTIME al-
sig(T1).                                              gorithm that, for convenience, decides non-conservative ex-
                                                      tensions.
DeÔ¨Ånition 2 (Model Conservative Extension) Let T1 and
                                                                                ALCQI
T2 be TBoxes. We say that T1 ‚à™T2 is a model conserva-   We start by reminding that       has the tree model
tive extension of T1 iff for every model I of T1, there exists a property. More precisely, a tree interpretation is an inter-
                                                              I =(ŒîI  , ¬∑I ,<I )
model of T1 ‚à™T2 which can be obtained from I by modifying pretation           equipped with an additional re-
                                                            <I  ‚äÜ  ŒîI √ó  ŒîI             (ŒîI ,<I )
the interpretation of the predicates in sig(T2) \ sig(T1) while lation     such that (i)        is a tree,
                                                                I    ‚àíI          ‚àí1           I     I
leaving the predicates in sig(T1) Ô¨Åxed.               (ii) r‚ààN r  ‚à™ r    =  < ‚à™ <   , and (iii) s and r are
                                                              R               s    r    ALCQI
To distinguish the two versions of conservative extensions, in disjoint for all distinct roles and .In , every con-
                                                          C                               T
this section we call the one based on ‚Äú|=‚Äùadeductive conser- cept that is satisÔ¨Åable relative to a TBox is satisÔ¨Åable in
                                                                   T               T
vative extension.                                     a tree model of , i.e., a model of that is a tree interpreta-
  The notion of a model conservative extension is more strict tion [7]. In this section, when talking of an interpretation or
than the deductive one: if T1 ‚à™T2 is a model conservative model of a TBox we always mean a tree interpretation.
extension of T1, then it is clearly also a deductive conservative To develop the algorithm for deciding non-conservative ex-
                                                                ALCQI
extension of T1, but the converse does not hold. To see the tensions in , we introduce a new kind of witness for
latter, consider the TBoxes                           non-conservativity. The new witnesses are very similar to Ô¨Å-
                                                      nite tree interpretations and easier to work with than witness
 T  = {‚àÉr.‚àÉs.  = },  T  = {‚àÉr.A ‚àÉs.¬¨A  = }.
  1                       2                           concepts. For a signature Œì, let a literal type S for Œì be a
                                                                (Œì) := {A, ¬¨A | A ‚àà Œì ‚à© C}
It is not hard to see that T1 ‚à™T2 is a deductive conservative subset of lit           N   such that for each
                                                      A ‚àà  Œì ‚à©  C A ‚àà  S   ¬¨A/‚àà  S    Œì            r
extension of T1 if ALC (or even ALCQI) is the language for    N  ,       iff      .A   -role is a role such
                                                      that r or r‚àí is in Œì.

                                                IJCAI-07
                                                   455DeÔ¨Ånition 5 (Œì-tree) A Œì-tree T =(W, <, L, O) is a Ô¨Ånite Given an interpretation I and u ‚àà ŒîI , the set
              (W, <)                  w  ‚àà W
intransitive tree   such that each node       is la-              tT (u)={C  ‚àà  (T ) | u ‚àà CI }
beled by a literal type L(w) for Œì, each edge (w, w) is la-       I           cl
                     
beled by a Œì-role L(w, w ), and O ‚äÜ W is a set of leafs of is a T -type. In what follows, we will not always distinguish
(W, <).                                               between the type t and the conjunction of all members of t.
                                                      We now introduce a witness for the existence of a Œì-tree that
            Œì
Essentially, a -tree is a Ô¨Ånite tree interpretation equipped is Œì-embeddable into a model of T1, but not into any model
                             O
with an additional unary predicate denoting a subset of the of T1 ‚à™T2. To avoid writing sub- and superscripts, from now
                                                Œì
leafs. The following deÔ¨Ånition provides a way to relate - on we assume the input T1, T2, and Œì to be Ô¨Åxed.
trees and actual interpretations.
                                                      DeÔ¨Ånition 9 (Root pair, Internal pair) A root pair (t, U)
DeÔ¨Ånition 6 (Œì-embedding) Let T =(W, <, L, O) be a Œì- consists of a T1-type t and a set U of T1 ‚à™T2-types. An inter-
                                                                                                   
tree with root w ‚àà W , and I an interpretation with root d ‚àà nal pair (t ‚Üír t, U) consists of a Œì-role r, T1-types t and
 I
Œî  .AŒì-embedding  f : T ‚ÜíIis an injection from W to   t, and a function U mapping each T1 ‚à™T2-type to a set of
 I
Œî  such that                                          T1 ‚à™T2-types.
  ‚Ä¢ f(w)=d,                                           Intuitively, each (root or internal) pair encodes relevant infor-
                                                      mation about possible embeddings of a Œì-tree into models of
                      I             
  ‚Ä¢ L(v,v )=r  iff f(v)r f(v ), for all v,v ‚àà W and Œì- T1 and T1 ‚à™T2. This is made precise by the notion of realiz-
    roles r,                                          ability.
                       I
  ‚Ä¢ C ‚àà L(v) iff f(v) ‚àà C , for all v ‚àà W and C ‚àà lit(Œì), DeÔ¨Ånition 10 (Realizable root pair) Let T =(W, <, L, O)
                                                          Œì               (t, U)           T
  ‚Ä¢ if v ‚àà O, then every d ‚àà ŒîI with f(v)rI d for some be a -tree. A root pair is realized by iff
                                                                                               I
    Œì-role r is in the range of f.                      1. there exist a model I of T1 with root d ‚àà t and a Œì-
                                                          embedding f : T ‚ÜíI;
T is called Œì-embeddable into I if there is a Œì-embedding
f : T ‚ÜíI                                                2. for every T1 ‚à™T2-type s, we have s ‚àà U iff there exist a
         .                                                                             I
                                                          model I of T1 ‚à™T2 with root d ‚àà s and a Œì-embedding
The deÔ¨Ånition illustrates that Œì-trees represent a (Ô¨Ånite) initial
                                                          f : T ‚ÜíI.
part of (potentially inÔ¨Ånite) tree interpretations. This explains
the predicate O of Œì-trees: O marks those leafs in the Œì-tree While root pairs encode information about possible embed-
that are not necessarily leafs in the tree interpretation I that dings of a Œì-tree into models of T1 and T1 ‚à™T2, internal pairs
we embed into. We can now establish Œì-trees as witnesses encode information about possible embeddings of a Œì-tree
for non-conservativity.                               into rooted submodels of models of T1 and T1 ‚à™T2. In the
                                                      following, if I is a (tree) interpretation and d ‚àà ŒîI , we write
         T  ‚à™T                              T
Lemma 7   1   2 is not a conservative extension of 1 w.r.t. Id to denote the sub-tree interpretation of I rooted at d.
Œì iff there exists a Œì-tree T =(W, <, L, O) which is Œì-
                                                                                                T      =
embeddable into a model of T1 but not into any model of DeÔ¨Ånition 11 (Realizable internal pair) Let
                                                      (W, <, L, O)    Œì                     (t ‚Üí  t, U)
T1 ‚à™T2.                                                           be a  -tree. An internal pair  r     is
                                                      realized by T iff
The general idea behind the algorithm is as follows: by
                                                        ‚Ä¢                  I    T     d,d ‚àà ŒîI
Lemma 7, to decide whether T1 ‚à™T2 is not a conservative   there exist a model of 1 and           such that
                                                          d ‚àà (t)I drI d d ‚àà tI            Œì
extension of T1, it sufÔ¨Åces to decide whether there exists a Œì-    ,     ,      , and there is a -embedding
                                                          f : T ‚ÜíI
tree that is Œì-embeddable into a model of T1, but not into any     d;
                                                                                         
model of T1 ‚à™T2. This is what our algorithm will do. Alas, we ‚Ä¢ for all T1 ‚à™T2-types s, s , we have s ‚àà U(s) iff there
                                                                                              I
conjecture that there are cases in which the smallest such tree exist a model I of T1 ‚à™T2 and d ,d ‚àà Œî such that
                                                                 I  I       I
is 3-exponential in |T1 ‚à™T2|, and therefore a 2-exponential d ‚àà (s ) , d r d, d ‚àà s , and there is a Œì-embedding
algorithm cannot simply try to construct such a tree. Instead, f : T ‚ÜíId.
                         Œì
we check the existence of the -tree by searching for certain A (root or internal) pair is realizable if there exists a Œì-tree T
witnesses for the existence of such a tree. Before we can in- which realizes it.
troduce these witnesses (which should not be confused with
Œì                                                     Observe that internal pairs store information not only about
 -trees as witnesses for non-conservativity), we need to in-    d ‚àà ŒîI                 T
troduce the notion of a type.                         the element      to which the root of is mapped, but also
                                                      comprise the type t of the predecessor d of d in I and the
                                                                                   
DeÔ¨Ånition 8 (Type) Let T be a TBox. We use cl(T ) to de- (unique!) role r which connects d and d. This is necessary
note the smallest set that contains all concepts in T and is due to the presence of inverse roles and number restrictions
closed under single negations and under subconcepts. A T - and bears some similarity to the double blocking technique in
type t is a subset of cl(T ) such that                tableau algorithms; see [7]. Also note that the U-component
                                                      of internal pairs is a function rather than a set because, intu-
  ‚Ä¢¬¨C  ‚àà t iff C ‚àà t, for all ¬¨C ‚àà cl(T );
                                                      itively, the possible types of d in models of T1 ‚à™T2 depend
                                                                                 
  ‚Ä¢ C1  C2 ‚àà t iff C1 ‚àà t and C2 ‚àà t, for all C1  C2 ‚àà on the type of the predecessor d in such models.
    cl(T ).                                             Let us now describe the algorithm. By Lemma 7 and deÔ¨Å-
                                                      nition of realizability, there exists a realizable root pair of the

                                                IJCAI-07
                                                   456form (t, ‚àÖ) iff T1 ‚à™T2 is not a conservative extension of T1          T     T                Œì ‚äÜ    (T )
    Œì                                                  Suppose TBoxes  1 and 2, and a signature   sig 1
w.r.t. . The algorithm for deciding non-conservative exten- are given.
sions searches for such a root pair. The easiest case is that a
                                                                          Rr
root pair (t, ‚àÖ) is realized by a singleton Œì-tree, i.e., a Œì-tree 1. Determine the set 0 of root pairs realized by single-
                                                              Œì         Rr = ‚àÖ
that consists of only a single node. This special case is tested ton -trees. If 0 , then reject the input (because
                                                           T                             Rr
Ô¨Årst. If the test is not successful, we must check whether  1 is not satisÔ¨Åed in any model). If 0 contains a root
                                                               (t, U)       U =  ‚àÖ
there is a root pair (t, ‚àÖ) that is realized by a non-singleton pair such that    , then accept. Else,
tree T =(W, <, L, O). Assume that this is the case and that 2. Determine the set R0 of internal pairs realizable by
the root of T is w. Then each subtree of T rooted at a succe- singleton Œì-trees. If R0 = ‚àÖ, then reject the input.
                                   ÀÜ    ÀÜ ÀÜ
sor node w of w realizes an internal pair (t ‚ÜírÀÜ t, U) with Else,
tÀÜ = t  rÀÜ = L(w, w)
     and             . Intuitively, this means that we can 3. Generate the sequence R1, R2,... of sets of internal
                            (t, ‚àÖ) T
check realization of the root pair in based on the re-     pairs such that
alization of internal pairs in trees of strictly smaller height.
                                                                                        
Similarly, we can check the realizability of internal pairs in a          Ri+1 = Ri ‚à™Ri,
Œì                                         Œì
 -tree based on the realizability of internal pairs in -trees of R
strictly smaller height. Based on these observations, our algo- where i is the set internal pairs which can be ob-
                                                           tained from some non-empty subset of Ri of cardinal-
rithm repeatedly generates internal pairs that are realized by            m
Œì                                                          ity not exceeding T1,T2 in one step. This is done until
 -trees of larger and larger height until all such pairs are gen- R = R ‚à™R
                                              (t, ‚àÖ)         i    i    i. Then accept the input if there exists
erated. It then checks whether there exists a root pair             (t, U)    U  = ‚àÖ
that is realizable based on the generated internal pairs. The a root pair with       which can be obtained
                                                           in one step from some subset of Ri of cardinality not
following deÔ¨Ånition formalizes one step of the algorithm in         m
which root pairs or new internal pairs are generated from an exceeding T1,T2 . If no such root pair exists, reject
existing set of internal pairs.                            the input.
                  T    Œì        w  ‚àà W          T
  In the following, if is a -tree and  , we write w                                                 Œì
to denote the sub-tree of T rooted at w.                 Figure 2: Algorithm for non-conservativeness w.r.t. .

DeÔ¨Ånition 12 (One step) Let R be a set of internal pairs. The number of internal pairs is bounded double exponentially
          (t, U)                (t ‚Üí  t, U)
A root pair     (resp. internal pair r     ) can be   in the size of |T1 ‚à™T2|. Therefore, the third step of the al-
obtained in one step from R if there exists a Œì-tree T = gorithm stabilizes after at most double exponentially many
(W, <, L, O) with root w such that                    rounds. Together with Lemma 14, it follows that our algo-
                                                     rithm is a 2-ExpTime one.
  ‚Ä¢ T realizes (t, U) (resp. (t ‚Üír t, U));
                                                                                                   T  T
  ‚Ä¢       w ‚àà W      w<w                            Theorem 15  The algorithm in Figure 2 accepts input 1, 2,
    for all       with        , there exists an internal Œì T ‚à™T                               T      Œì
              ÀÜ    ÀÜ ÀÜ                ÀÜ               iff 1   2 is not a conservative extension of 1 w.r.t. .It
    pair p =(t  ‚ÜírÀÜ t, U) ‚ààRsuch that  t  =  t, rÀÜ =
                                                     runs in 2-exponential time.
    L(w, w ), and p is realized by Tw .
                                                      To show the upper bound on the size of witness concepts
The details of our algorithm are given in Figure 2, where stated in Theorem 4, we proceed as follows: Ô¨Årst, we ob-
                                                      serve that if the algorithm Ô¨Ånds a realizable root pair (t, ‚àÖ),
                                 3√ó|T1‚à™T2|                                     Œì
         mT ,T := 2 √ó|T1 ‚à™T2|√ó2          .            then this pair is realized by a -tree of at most double expo-
            1 2                                       nential depth and single exponential outdegree. Second, we
                                                                              Œì
Intuitively, considering only a subset of Ri of cardinality show how to convert such a -tree into a witness concept of
m                                     Œì
  T1,T2 means that we limit our attention to -trees of out- three-exponential size.
      m
degree  T1,T2 . This is justiÔ¨Åed by the following lemma.
                                                      4   Undecidability in  ALCQIO
            T  ‚à™T                               T
Lemma 13  If 1    2 is not a conservative extension of 1 We show that conservative extensions are undecidable in
w.r.t. Œì, then there exists a root pair (t, ‚àÖ) realized by a Œì-tree ALCQIO
T                  m                                           . The proof is by a reduction of the following un-
  of outdegree at most T1,T2 .                        decidable tiling problem.
It remains to be shown that each step of the algorithm can
                                                      DeÔ¨Ånition 16 A domino system D =(T,H,V,R,L,T,B)
be carried out effectively and that the algorihm yields the 2-
                                                      consists of a Ô¨Ånite set T of tiles, horizontal and vertical
EXPTIME  upper bound stated in Theorem 4. We start with
                                                      matching relations H, V ‚äÜ T √ó T , and sets R, L, T, B ‚äÜ T
the former. The proof of the following lemma relies on the
                                                      of right tiles, left tiles, top tiles, and bottom tiles. A so-
fact that satisÔ¨Åability in ALCQI relative to TBoxes can be
                                                      lution to D is a triple (n, m, œÑ) where n, m ‚àà  and
decided in EXPTIME [10].
                                                      œÑ : {0,...,n ‚àí 1}√ó{0,...,m   ‚àí 1}‚ÜíT     such that the
                                                      following hold:
Lemma 14  It can be checked in 2-exponential time (in the
                                                          (œÑ(i, j),œÑ(i +1,j)) ‚àà H     i<n      j ‚â§ m
size of T1, T2) whether a (root or internal) pair can be ob- 1.                 , for all  and       ;
tained in one step from a set R of realizable internal pairs 2. (œÑ(i, j),œÑ(i, j +1))‚àà V , for all i ‚â§ n and j<m;
with |R| ‚â§ mT ,T .
            1  2                                        3. œÑ(0,j) ‚àà L and œÑ(n, j) ‚àà R, for all j ‚â§ m;

                                                IJCAI-07
                                                   457