A Tractability Result for Reasoning with Incomplete First-Order Knowledge Bases 

                                      Yongmei Liu and Hector J. Levesque 
                                          Department of Computer Science 
                                                University of Toronto 
                                          Toronto, ON, Canada M5S 3G4 
                                            {yliu, hector} @cs.toronto.edu 


                        Abstract                                 The rest of the paper is organized as follows. In the next 
                                                               section, we review proper KBs and V, prove a new property 
     In previous work, Levesque proposed an extension 
                                                               of V, i.e. locality, and define answers to open queries. In 
     to classical databases that would allow for a certain 
                                                               Section 3, we review the complexity of database query evalu­
     form of incomplete first-order knowledge. Since 
                                                               ation, and present a polynomial time algorithm for evaluating 
     this extension was sufficient to make full logical de­
                                                               K-guarded formulas. In Section 4, we show how to use this al­
     duction undecidable, he also proposed an alterna­
                                                               gorithm to evaluate queries wrt proper KBs and hence obtain 
     tive reasoning scheme with desirable logical prop­
                                                               a tractability result. In Section 5, we illustrate this query eval­
     erties. He also claimed (without proof) that this 
                                                               uation method for proper KBs with some example queries. 
     reasoning could be implemented efficiently using 
                                                               Finally in Section 6, we describe some future work. 
     database techniques such as projections and joins. 
     In this paper, we substantiate this claim and show 
     how to adapt a bottom-up database query evalu­
     ation algorithm for this purpose, thus obtaining a 
     tractability result comparable to those that exist for 
     databases. 

1 Introduction 
As argued in [Levesque, 1998], there is only one deductive 
technique efficient enough to be feasible on knowledge bases 
(KBs) of the size seemingly required for common-sense rea­
soning: the deduction underlying classical database query 
evaluation. And yet, databases by themselves are too re­
stricted to serve as the representational scheme for common-
sense reasoning, since they require, among other things, com­
plete knowledge of the domain. Levesque proposed a gener­
alization of databases called proper knowledge bases, which 
allow for a limited form of incomplete knowledge. Despite 
the limitations, however, the deduction problem for proper 
KBs is no longer even decidablc. Levesque proposed an al­
ternative reasoning procedure V for proper KBs that was logi­
cally sound and, when the query was in a certain normal form,    To illustrate the idea of a proper KB, imagine a scenario in­
logically complete. Moreover, he argued that it should be      volving a robot security guard keeping track of the occupants 
possible to implement V for very large KBs using database      of the rooms of a building. The robot can find out that some­
techniques. However, no proof was given.                       one has entered or left a room, and by going into a room, find 
  In this paper, we examine proper KBs and the V procedure     out who the occupants are. We can express what the robot 
more closely, and we prove a tractability result for this type might know using a proper KB:1 
of logical reasoning that are comparable to those that exist for 
classical database query evaluation. In particular, we adapt a 
bottom-up database retrieval algorithm to the case of proper 
KBs. Thus, what we show here is that in some cases it is 

indeed possible to reason efficiently with incomplete knowl­      1We think of these as beliefs about some initial state of the world. 
edge in a logically sound and complete way, or at least as     It should be possible to generalize the notion of proper KB to deal 
efficiently as we can with a database.                         with state change. See Section 6 for discussion. 


AUTOMATED REASONING                                                                                                    83 Note that this information cannot be expressed in a traditional 
database where, e.g. we cannot leave open the occupants of 
Room 2. On the other hand, facts requiring disjunction or ex­
istential quantification cannot be expressed as part of a proper 
KB, e.g. every room having at most three occupants. 
   It is not hard to see that the problem of determining 
whether a sentence is logically entailed by a proper KB is 
undecidable, since when the KB is empty, this reduces to 
classical validity.2 Levesque [1998] proposed the reasoning 
procedure V instead. Given a proper KB and a query, V re­
turns one of three values 0 (known false), 1 (known true), or 
 1/2 (unknown) as follows: 

                                                              Proof: Follows from the theorem by taking * as the bijection 
                                                              that swaps c and d and leaves the rest constants unchanged. ■ 

                                                              2.3 Locality 


2.2 Invariance under renaming 
The first difficulty that arises when attempting to reason with 
proper KBs is the fact that unlike with databases, we cannot 
fix the domain in advance, or even put an upper bound on its 
                                                              2.4 Answers to open queries 


other than a behave the same. This will allow us to define 
finite versions of answers to open queries, as shown below. 
Notation Let a be a formula and S a set of formulas. Let * 
be a bijection from C to C. We use a* to denote a with each 


   2The classical validity problem is undecidable even when there 
are no function symbols. 


84                                                                                           AUTOMATED REASONING                                                                 Naturally, many research efforts have gone into finding 
                                                              classes of queries that can be proven tractable, even in the 
                                                              worst cases. The earliest result of this form, due to Yan­
                                                              nakakis [1981], showed that acyclic conjunctive queries can 
                                                              be evaluated in polynomial time. This result has been ex­
                                                              tended in several ways. The first extension, due to Chekuri 
                                                              and Rajaraman [1997], showed that conjunctive queries 
                                                              with bounded tree width are tractable. Later, Gottlob et al. 
                                                              [1999] introduced the notion of hypertree width and showed 
                                                              that conjunctive queries with bounded hypertree width are 
                                                              tractable; bounded hypertree width generalizes the notions 
                                                              of acyclicity and bounded treewidth. Recently, Flum et al 
                                                              [2001] generalized the notions of acyclicity and bounded 
                                                              treewidth from conjunctive queries to nonrecursive stratified 
                                                              Datalog (NRSD), which is known to have the same expres­
                                                              sive power as all of first-order logic, and showed that acyclic 
3 The complexity of database queries                          and bounded treewidth NRSD are tractable. Inspired by their 
                                                              work, Gottlob et al [2001] extended the notion of hypertree 
3.1 An overview                                               width to NRSD, and obtained a nice logical characterization 
The complexity of query evaluation has been one of the main   of hypertree width: they showed that the K-guarded fragment 
pursuits of database theory. Traditionally, there are two com­ of first-order logic has the same expressive power as NRSD 
plexity measures: combined complexity and data complexity     of hypertree width at most k. Thus K-guardcd first-order logic 
[Vardi, 1982]. Combined complexity is measured in terms       turns out to be the largest tractable class of queries so far. 
of the combined size of the database and the query. Chan­
dra and Merlin [1977] proved that the combined complexity     3.2 An evaluation algorithm 
of conjunctive queries (queries expressed by first-order for­
mulas that are of the form where a, are 
atoms) is NP-complete; Vardi L1982] proved that the com­
bined complexity of first-order queries is PSPACE-complete. 
However, the main factor responsible for this high complexity 
is the size of the query and not the size of the database. This is 
contrary to the situation in practice where we normally eval­
uate small queries against large databases. Data complexity 
measures the complexity of query evaluation solely in terms 
of the size of the database and treats the size of the query as a In this section, we introduce the K-guarded fragment of £, 
constant. A folk result is that first-order queries can be evalu­ and explicitly present a polynomial algorithm for evaluating 
ated in time no(1) where n is the size of the database and / is K-guarded formulas against databases and analyze its com­
the size of the query. Thus the data complexity of first-order plexity. We will use this algorithm to evaluate K-guarded for­
queries is in PT1ME. However, such a complexity can hardly    mulas with respect to proper KBs. 
qualify as tractable even if the exponent is small, say 5. 
  Yannakakis [19951 was the first to suggest that parameter­
ized complexity [Downey and Fellows, 1995] might be an 
appropriate complexity measure for database query evalua­
tion. Query evaluation is fixed-parameter tractable if there is 
a computable function / : N —► N and a constant c such that 
the problem can be solved in time /(/) • nc, where / and n are 
the size of the query and the database, respectively. However, 
Papadimitriou and Yannakakis [1999] proved that the param­
eterized complexity of conjunctive queries is W[l]-complete 
and thus most likely not fixed-parameter tractable. We re­
fer the reader to [Grohe, 2002] for a survey on parameterized 
complexity in database theory. 
  Therefore database query evaluation in general is hard with Note that any /c-guarded sentence is strictly K-guarded. 
respect to both combined and parameterized complexity. And      The evaluation algorithm below will take a strictly K-
yet, database queries do work quite well in practice, even    guarded formula as the query. It turns out that any formula 
for very large databases. A careful examination of the hard­
ness results show that they often depend on queries that are 
somewhat atypical in applications, e.g. databases represent­
ing graphs and queries asking for the existence of cliques. 


AUTOMATED REASONING                                                                                                  85    The evaluation algorithm will have worst-case time com­     4 The complexity of V 
 plexity that is exponential only in the k. For fixed k, the algo­ In this section, we consider how hard it is to compute V. Not 
 rithm is polynomial, but perhaps impractical when k is large. surprisingly, V is no easier than database query evaluation. 
                                                               What is more significant is that under reasonable assump­
                                                               tions, it is not much harder either. 
   Before presenting the evaluation algorithm, we first recall 
some basic notions of relational database theory. A database   4.1 Intractability results 
 instance is simply a logical structure (or interpretation) with Theorem 4.1 The combined complexity of V is NP-hard 
a finite domain. Let A be such a structure with domain A.     for conjunctive queries, and PS PACE-hard for first-order 
Let X and Y be sets of variables. An X-relation R over A, is   queries. The parameterized complexity of V is W [1]-hard for 
                                                               conjunctive queries. 
                                                               Proof: The proof is essentially the same as that for database 
                                                               query evaluation. For conjunctive queries, the reduction is 
                                                               from the clique problem. For first-order queries, the reduction 
                                                               is from QBF (Quantified Boolean Formula). ■ 

                                                               4.2 A tractability result 


Here is the algorithm for computing answers: 


relation that is a subset of R. Moreover, the R is obtained 
from joins of at most A: guards, and so has size at most nk.     We present examples of this transformation in the next sec­
Assuming all relations start in sorted form, the results of all tion. Here we note the following correctness result: 
operations can be kept in sorted form, and computed in time 
0(n ). Thus, the time overall is 0(ln ). ■ 3 A positive (resp. negative) occurrence of P in a is one within 
   k                               k                           the scope of an even (resp. odd) number of negations. 


86                                                                                            AUTOMATED REASONING    This theorem says that the (finite version of) answers to 
open queries in C correspond exactly to the answers we get 
for the database constructed as above. This is a consequence 
of locality and the following lemma: 


                                                              Proof: Follows from previous corollary and the fact that V is 
                                                              logically sound and complete for queries in NF. ■ 
                                                                Note that these bounds are identical to their database coun­
                                                              terparts modulo the w factor. In most cases of interest, the 
                                                              w will be small since even in a large KB, we only expect to 
                                                              see a large ep or e- p in database-like cases, where the e is 
                                                              relational or co-relational. In the case where none of the e are 
                                                              relational or co-relational, we get the following: 


                                                              5 An example 
                                                              To illustrate how query evaluation would work with proper 
                                                              KBs, we return to the example robotic scenario mentioned 
                                                              in the first section, involving the predicate ln (person, room). 
                                                              We can see from the example that e/n is given in relational 
                                                              form, while e-,In, is given in unrestricted form. To make 
                                                              things interesting, we assume two more predicates: One is 
                                                              Mgr (person1,person2) saying that the first person is a man­
                                                              ager and that the second is one of his or her employees; we 
                                                              assume that Mgr is given as a closed database predicate. The 
                                                              other is Cmp(person1,person2) saying that the two persons 
                                                              are compatible. We assume that the robot knows that any two 
   To obtain a tractability result for open queries over proper 
                                                              people are compatible except 77/(> 2) pairs; among these m 
KBs, we need only ensure that the database queries we con­
                                                              pairs, the robot only knows that two pairs are not compatible. 
struct are k-guarded then use the Eval procedure. 


                                                                Here are some example queries,with the guards underlined. 


  Now we get our main complexity result: 


AUTOMATED REASONING                                                                                                  87 