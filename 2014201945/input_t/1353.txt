                 A  Uniform     Integration    of Higher-Order       Reasoning     and
                    External   Evaluations     in Answer-Set      Programming∗

            Thomas   Eiter, Giovambattista   Ianni, Roman   Schindlauer,  and Hans  Tompits
                     Institut fur¨ Informationssysteme, Technische Universitat¨ Wien,
                             Favoritenstraße 9–11, A-1040   Vienna, Austria
                             {eiter, ianni, roman, tompits}@kr.tuwien.ac.at

                    Abstract                            However, for important issues such as meta-reasoning in
                                                      the context of the Semantic Web, no adequate support is avail-
    We introduce HEX programs, which are nonmono-     able in ASP to date. Motivated by this fact and the observa-
    tonic logic programs admitting higher-order atoms tion that interoperability with other software is (not only in
    as well as external atoms, and we extend the well- this context) an important issue, we extend in this paper the
    known answer-set semantics to this class of pro-  answer-set semantics to HEX programs, that is, higher-order
    grams. Higher-order features are widely acknowl-  logic programs (which accommodate meta-reasoning through
    edged as useful for performing meta-reasoning,    higher-order atoms) with external atoms for software interop-
    among other tasks. Furthermore, the possibility   erability. Intuitively, a higher-order atom allows to quantify
    to exchange knowledge with external sources in    values over predicate names, and to freely exchange predicate
    a fully declarative framework such as Answer-Set  symbols with constant symbols, like in the rule
    Programming (ASP) is nowadays important, in par-
                                                                C(X) ←  subClassOf (D, C), D(X).
    ticular in view of applications in the Semantic Web
    area. Through external atoms, HEX programs can    An external atom facilitates to determine the truth value of
    model some important extensions to ASP, and are a an atom through an external source of computation. For in-
    useful KR tool for expressing various applications. stance, the rule
    Finally, complexity and implementation issues for
                                                                reached(X) ←  #reach[edge, a](X)
    a preliminary prototype are discussed.
                                                      computes the predicate reached taking values from the pred-
                                                      icate #reach, which computes via #reach[edge, a] all the
1  Introduction                                       reachable nodes in the graph edge from node a, delegating
                                                      this task to an external computational source (e.g., an exter-
Answer-Set Programming (ASP)  [Gelfond and Lifschitz, nal deduction system, an execution library, etc.).
1991] has recently attracted increasing interest as a declar-
ative problem solving paradigm. In this approach, a prob- Our main contributions are summarized as follows.
lem is encoded in terms of a nonmonotonic logic program (1) We deﬁne  the syntax and answer-set semantics of
such that the solutions of the former can be extracted from HEX programs, extending ASP with higher-order features
the answer sets of the latter. Due to the availability of efﬁ- and powerful interfacing of external computation sources.
cient answer-set solvers, like Smodels [Simons et al., 2002] While answer-set semantics for higher-order logic programs
or DLV [Leone et al., 2005], and various extensions of the has been proposed earlier by Ross [1994], further extension
basic language with features such as classical negation, weak of that proposal to accommodate external atoms is technically
constraints, or aggregates, ASP has become an important KR difﬁcult since the approach of Ross is based on the notion of
formalism for declaratively solving AI problems in areas in- unfounded set, which cannot be easily generalized to this set-
cluding planning, diagnosis, information integration, and rea- ting. Our approach, instead, is based on a recent notion of
soning about inheritance. For the challenging area of Seman- program reduct, due to Faber et al. [2004], which admits a
tic Web reasoning, extensions of ASP have been proposed, natural deﬁnition of answer-set semantics.
facilitating interoperability with Description Logic reasoners
[Rosati, 1999; Eiter et al., 2004] or aiming at handling inﬁ- (2) External atoms are a useful abstraction of several exten-
nite, tree-structured models [Heymans and Vermeir, 2003]. sions to ASP including, among others, aggregates, descrip-
                                                      tion logic atoms, or agent programs. External atoms thus fa-
  ∗
   This work was partially supported by the Austrian Science cilitate investigating common properties of such extensions,
Fund (FWF) under grant P17212-N04, and by the European Com- and can serve as a uniform framework for deﬁning seman-
mission through the IST Networks of Excellence REWERSE (IST- tics of further similar extensions of ASP. Moreover, HEX pro-
2003-506779) and CologNeT (IST-2001-33123), and the IST Work- grams are a basis for the efﬁcient design of generic evaluation
ing Group in Answer Set Programming (IST-2001-37004 WASP). algorithms for such extensions in this framework.  (3) By means of HEX programs, powerful meta-reasoning A rule r is of the form
becomes available in a decidable context, e.g., for Seman-
tic Web applications, for meta-interpretation in ASP itself, α1 ∨ · · · ∨ αk ← β1, . . . , βn, notβn+1, . . . , notβm, (2)

or for deﬁning policy languages. For example, advanced where m, k ≥ 0, α1, . . . , αk are atoms, and β1, . . . , βm are
closed world reasoning or the deﬁnition of constructs for an either atoms or external atoms. We deﬁne H(r) = {α1, . . . ,
                                                                      +       −           +
extended ontology language (e.g., of RDF-Schema) is well- αk} and B(r) = B (r) ∪B (r), where B (r) = {β1, . . . ,
                                                               −
supported. Due to the higher-order features, the representa- βn} and B (r) = {βn+1, . . . , βm}. If H(r) = ∅ and B(r) 6=
tion is succinct.                                     ∅, then r is a constraint, and if B(r) = ∅ and H(r) 6= ∅, then
  (4) A simple prototype implementation of the language is r is a fact; r is ordinary, if it contains only ordinary atoms.
available, based on a reduction to ordinary ASP.        A HEX  program is a ﬁnite set P of rules. It is ordinary, if
                                                      all rules are ordinary.
  Note that other logic-based formalisms, like TRIPLE [Sin-
tek and Decker, 2002] or F-Logic [Kifer et al., 1995], feature 2.2 Semantics
also higher-order predicates for meta-reasoning in Semantic
                                                      We deﬁne the semantics of HEX programs by generalizing the
Web applications. However, TRIPLE is low-level oriented
                                                      answer-set semantics [Gelfond and Lifschitz, 1991]. To this
and lack precise semantics, while F-Logic in its implemen-
                                                      end, we use the recent notion of a reduct as deﬁned by Faber
tations (Flora, Florid, Ontoweb) restricts its expressiveness
                                                      et al. [2004] (referred to as FLP-reduct henceforth) instead
to well-founded semantics for negation, in order to gain efﬁ-
                                                      of to the traditional reduct by Gelfond and Lifschitz [1991].
ciency. Our formalism, instead, is fully declarative and offers
                                                      The FLP-reduct admits an elegant and natural deﬁnition of
the possibility of nondeterministic predicate deﬁnition with
                                                      answer sets for programs with aggregate atoms, since it en-
higher complexity. This proved already useful and reason-
                                                      sures answer-set minimality, while the deﬁnition based on the
ably efﬁcient for a range of applications with inherent non-
                                                      traditional reduct lacks this important feature.
determinism, such as diagnosis, planning, or conﬁguration,
                                                        In the sequel, let P be a HEX program. The Herbrand base
and thus provides a rich basis for integrating these areas with
                                                      of P , denoted HB , is the set of all possible ground versions
meta-reasoning.                                                      P
                                                      of atoms and external atoms occurring in P obtained by re-
                                                      placing variables with constants from C. The grounding of a
2   HEX  Programs                                     rule r, grnd(r), is deﬁned accordingly, and the grounding of
                                                      program P is given by grnd(P ) = Sr∈P grnd(r). Unless
2.1  Syntax                                           speciﬁed otherwise, C, X , and G are implicitly given by P .
Let C, X , and G be mutually disjoint sets whose elements are
called constant names, variable names, and external pred- Example 2 Given C = {edge, arc, a, b}, ground instances of
icate names, respectively. Unless explicitly speciﬁed, ele- E(X, b) are edge(a, b), arc(a, b), and arc(arc, b); ground in-
ments from X (resp., C) are denoted with ﬁrst letter in upper stances of #reach[edge, N](X) are #reach[edge, edge](a),
case (resp., lower case), while elements from G are preﬁxed #reach[edge, arc](b), and #reach[edge, edge](edge), etc.2
with “ # ”. We note that constant names serve both as individ-
ual and predicate names.                                An  interpretation relative to P is any subset I ⊆ HB P
  Elements from C ∪ X are called terms. A higher-order containing only atoms. We say that I is a model of atom
atom (or atom) is a tuple (Y0, Y1, . . . , Yn), where Y0, . . . , Yn a ∈ HB P , denoted I |= a, if a ∈ I.
are terms; n ≥ 0 is the arity of the atom. Intuitively, Y0 is With every external predicate name #g ∈ G, we associate
the predicate name, and we thus also use the more familiar an (n+m+1)-ary Boolean function f#g assigning each tuple
notation Y0(Y1, . . . , Yn). The atom is ordinary, if Y0 is a (I, y1 . . . , yn, x1, . . . , xm) either 0 or 1, where n = in(#g),
constant.                                             m  = out(#g), I ⊆ HB P , and xi, yj ∈ C.
  For example, (x, rdf :type, c), node(X), and D(a, b), are We say that I ⊆ HB P is a model of a ground external atom
atoms; the ﬁrst two are ordinary atoms.               a = #g[y1, . . . , yn](x1, . . . , xm), denoted I |= a, if and only
  An external atom is of the form                     if f#g(I, y1 . . ., yn, x1, . . . , xm) = 1.

            #g[Y1, . . . , Yn](X1, . . . , Xm), (1)
                                                      Example 3  Let us associate with #reach a function f#reach
      Y , . . . , Y X , . . . , X
where  1      n and  1       m are two lists of terms such that f#reach (I, E, A, B) = 1 iff B is reachable in the
(called input and output lists, respectively), and #g ∈ G is graph E from A. Let I = {e(b, c), e(c, d)}. Then, I is a
                                         g
an external predicate name. We assume that # has ﬁxed model of #reach[e, b](d) since f#reach (I, e, b, d) = 1. 2
lengths in(#g) = n and out(#g) = m for input and out-
put lists, respectively. Intuitively, an external atom provides a Let r be a ground rule. We deﬁne (i) I |= H(r) iff
way for deciding the truth value of an output tuple depending there is some a ∈ H(r) such that I |= a, (ii) I |= B(r) iff
on the extension of a set of input predicates.        I |= a for all a ∈ B+(r) and I 6|= a for all a ∈ B−(r), and
                                                      (iii) I |= r iff I |=H(r) whenever I |= B(r). We say that I
Example 1 The external atom #reach[edge, a](X) may be is a model of a HEX program P , denoted I |= P , iff I |= r for
devised for computing the nodes which are reachable in all r ∈ grnd(P ). We call P satisﬁable, if it has some model.
the graph edge from the node a.  Here, we have that     Given a HEX program P , the FLP-reduct of P with respect
                                                                           I
in(#reach) = 2 and out(#reach) = 1.              2    to I ⊆ HB P , denoted fP , is the set of all r ∈ grnd(P ) suchthat I |= B(r). I ⊆ HB P is an answer set of P iff I is a 3 Modeling ASP  Extensions  by External
                  I
minimal model of fP .                                     Atoms
  We next give an illustrative example.
                                                      By means of external atoms, different important extensions
Example 4 Consider the following HEX program P :      of ASP can be expressed in terms of HEX programs.
  subRelation(brotherOf , relativeOf ) ← ;            3.1  Programs  with aggregates
                brotherOf (john, al) ← ;              Extending ASP with special aggregate atoms, through which
               relativeOf (john, joe) ← ;             the sum, maximum, etc. of a set of numbers can be refer-
                                                      enced, is an important issue which has been considered in
               brotherOf al, mick
                        (       ) ← ;                 several recent works (cf., e.g., [Faber et al., 2004]). A non-
  invites(john, X) ∨ skip(X) ← X <> john,             trivial and challenging problem in this context is giving a nat-
                      #reach[relativeOf , john](X);   ural semantics for aggregates involving recursion. The recent
  R(X , Y ) ← subRelation(P, R), P (X, Y );           proposal of a semantics by Faber et al. [2004] is an elegant
                                                      solution of this problem. We show here how it can be easily
     ← #degs[invites](Min, Max), Min < 1;
                                                      captured by HEX programs.
     ← #degs[invites](Min, Max), Max > 2.               An  aggregate atom a(Y, T ) has the form f{S} ≺ T ,
  Informally, this program randomly selects a certain num- where f is an aggregate function (sum, count, max, etc.),
ber of John’s relatives for invitation. The ﬁrst line states that ≺ ∈ {=, <, ≤, >, ≥}, T is a term, and S is an expression
brotherOf is a subrelation of relativeOf , and the next two X:E~ (X~ , Y~ , Z~), where X~ and Y~ are lists of local variables,
lines give concrete facts. The disjunctive rule chooses rela- Z~ is a list of global variables, and E~ is a list of atoms whose
tives, employing the external predicate #reach from Exam- variables are among X~ , Y~ , Z~.
ple 3. The next rule declares a generic subrelation inclusion For example, #count{X : r(X, Z), s(Z, Y )} ≥ T is an
exploiting higher-order atoms.                        aggregate atom which is intuitively true if, for given Y and T ,
  The constraints ensure that the number of invitees is be- at least T different values for X are such that the conjunction
tween 1 and 2, using (for illustration) an external predicate r(X, Z), s(Z, Y ) holds.
#degs from a graph library, where f#degs (I, E, Min, Max) Given a(Y, T ) = f{S} ≺ T as above, an interpretation
is 1 iff Min and Max is the minimum and maximum ver-  I, and values y for Y and t for T , f is applied to the set
tex degree of the graph induced by the edges E, respec- S(I, y) of all values x for X such that I |= E(x, y, z) for
tively. As John’s relatives are determined to be Al, Joe, and some value z for Z. We then have I |= a(y, t) (i.e., I |=
Mick, P has six answer sets, each of which contains one f{X:E(X, y, Z)} ≺ t) iff f(S(I, y)) ≺ t.
or two of the facts invites(john, al), invites(john, joe), and Using the above notion of truthhood for a(y, t), Faber et
                                                 2
invites(john, mick).                                  al. [2004] deﬁne answer sets of an ordinary program plus
                                                                                I
  We now state some basic properties of the semantics. aggregates using the reduct fP .
                                                        We  can model an aggregate atom a(Y, T ) by an external
Theorem 1 The answer-set semantics of HEX programs ex- atom #a[Y ](T ) such that for any interpretation I and ground
tends the answer-set semantics of ordinary programs as de- version #a[y](t) of it, f#a(I, y, t) = 1 iff I |= a(y, t). Note
ﬁned by Gelfond and Lifschitz [1991], as well as the answer- that writing code for evaluating f#a(I, y, t) is easy.
set semantics of HiLog programs as deﬁned by Ross [1994]. For any ordinary program P with aggregates, let #agg(P )
                                                      be the HEX program which results from P by replacing each
  The next property, which is easily proved, expresses that aggregate atom a(Y, T ) with the respective external atom
answer sets adhere to the principle of minimality.    #a[Y ](T ). The following result can then be shown:

Theorem 2 Every answer set of a HEX program P is a min- Theorem 4 For any ordinary program P with aggregates,
imal model of P .                                     the answer sets of P and #agg(P ) coincide.
  A ground external atom a is called monotonic relative to P
       0                       0                      3.2  Description logic programs
iff I ⊆ I ⊆ HB P and I |= a imply I |= a. For instance, the
ground versions of #reach[edge, a](X) are all monotonic. The aim of description logic programs (or dl-programs), due
                                                      to Eiter et al. [2004], is to combine a rule language under
Theorem 3 Let P be a HEX  program without “not” and   the answer-set semantics with description logics. Informally,
constraints. If all external atoms in grnd(P ) are monotonic a dl-program consists of a description logic (DL) knowledge
relative to P , then P has some answer set. Moreover, if P is base L and a generalized normal program P which may con-
disjunction-free, it has a single answer set.         tain queries to L, realized by means of special atoms, called
                                                      dl-atoms, appearing in the body of rules. A dl-atom allows
  Notice that this property fails if external atoms can be non- for specifying an input from P to L, and thus for a bidirec-
monotonic. Indeed, we can easily model default negation tional ﬂow of information between P to L, and for querying
not p(a) by an external atom #not[p](a); the HEX program whether a certain DL axiom or its negation logically follows
p(a) ← #not[p](a) amounts then to the ordinary program from L. The DL knowledge bases in dl-programs are theo-
p(a) ← not p(a), which has no answer set.             ries in the description logics SHIF(D) and SHOIN (D),which represent the logical underpinnings of the Web ontol- are derivable models of an extended reduct P I (in the sense
ogy languages OWL Lite and OWL DL, respectively [Bech- of Gelfond and Lifschitz [1991]), which treats negated mc-
hofer et al., 2004].                                  atoms like negated ordinary atoms. Informally, a model of
  Formally, a dl-atom is an expression dl(X) of form  P I is derivable, if it can be created from the empty set by
                                                      iterative rule applications in which the heads of ﬁring rules
   DL[S1 op1 p1, . . . , Sm opm pm; Q](X) , m ≥ 0,    are nondeterministically satisﬁed.
                                                        We  can embed any mca-program P into a HEX program
where each Si is a DL concept or role name, opi a change
                                                      #mc(P  ) as follows. Each mc-atom k X is modeled by an
operator, pi a unary resp. binary predicate symbol, Q a unary
resp. binary predicate, and X a list of terms matching the arity external atom e(k X) = #k X[ ](), where f#k X (I) = 1 iff
                                                      k ≥ |X ∩ I|. In each rule of form (3), we replace H with a
of Q. For space reasons, we conﬁne here to opi = ] and Q
being a possibly negated unary predicate name, for which X new atom tH and all Bi with e(Bi), and add the following
                                                      rules (for H = k {A1, . . . , Am}):
is a single term. Intuitively, Si ] pi increases Si in L by the
extension of pi. For example, the dl-atom                    Ai ∨ n Ai ← tH ,           1 ≤ i ≤ m,
                                                                         not e H , t ,
         DL[hasColor ] color; whiteWine](W )                          ←      (  ) H
                                                      where, globally, n A is a new atom for each atom A. Infor-
queries a wine ontology if W is known to be a white wine, mally, these rules simulate the occurrence of the mc-atom in
after augmenting the ontology about wine color (hasColor) the head. Then, the following correspondence holds.
with facts about color from a program P .
                 I   P
  An interpretation of is a model of a ground instance Theorem 6 For any ﬁnite mca-program P over atoms At,
dl(c) of dl-atom dl(X) with respect to DL knowledge base L,
                         m                            the answer sets of P and #mc(P ) projected to At coincide.
denoted I |=L dl(c), if L ∪ Si=1{Si(b) | pi(b) ∈ I} |= Q(c),
where |= is the entailment operator of the given description As shown by Marek et al. [2004], ASP extensions similar
logic. That is, I |=L dl(c) iff c belongs to concept Q after to mca-programs can be modeled as mca-programs. Hence,
augmenting L.                                         these extensions can be similarly embedded into HEX pro-
  Eiter et al. [2004] deﬁne answer sets of an ordinary non- grams.
disjunctive program P relative to a DL knowledge base L
                I
through a reduct sPL, which extends the traditional reduct of 3.4 Agent programs
Gelfond and Lifschitz [1991]. Assuming that each ground dl- Eiter et al. [1999] describe logic-based agent programs, con-
                                          0
atom dl(c) is monotonic (i.e., I |= dl(c) implies I |= dl(c), sisting of rules of the form
for I ⊆  I0; this is the predominant setting), sP I treats
                                            L                 Op α  ←  χ, [¬] Op α , . . . , [¬] Op α ,
negated dl-atoms like negated ordinary atoms. The resulting      0 0           1 1          m  m
                I                        I
ground program sPL has a least model, LM(sPL). Then, I governing an agent’s behavior. The Opi are deontic modali-
                                        I
is a strong answer set of (L, P ) iff I = LM(sPL) holds. ties, the αi are action atoms, and χ is a code-call condition.
  We can simulate dl-atoms by external atoms in several The latter is a conjunction of (i) code-call atoms of the form
ways. A simple one is to use external atoms #dl[ ](X) where in(X, f(Y )) resp. notin(X, f(Y )), which access the data
f#dl(I, c) = 1 iff I |= Ldl(c). Let #dl L(P ) be the HEX pro- structures of the internal agent state through API functions
gram obtained from a dl-program (L, P ) by replacing each f(Y ) and test whether X is in the result, and (ii) constraint
dl-atom dl(X) with #dl[ ](X). We can then show:       atoms. For example, the rule
                                                             Do dial(N) ← in(N, phone(P )), O call(P )
Theorem 5 Let (L, P ) be any dl-program for which all
ground dl-atoms are monotonic. Then, the strong answer sets intuitively says that the agent should dial phone number N if
of (L, P ) and #dl L(P ) coincide.                    she is obliged to call P .
                                                        A semantics of agent programs in terms of “reasonable sta-
  Note that we can extend the strong answer-set semantics to tus sets”, which are certain sets of ground formulas Op α, is
disjunctive dl-programs by simply extending the embedding deﬁned by Eiter et al. [1999]. They show that the answer sets
#dl L(P ) to disjunctive programs. This illustrates the use of of a disjunction-free logic program P correspond naturally to
HEX programs as a framework for deﬁning semantics.    the reasonable status sets of a straightforward agent program
                                                      AG(P  ). Conversely, code-call atoms as above can be mod-
3.3  Programs  with monotone  cardinality atoms       eled by external atoms #inf [Y ](X) resp. #notinf [Y ](X),
Marek et al. [2004] present an extension of ASP by monotone and deontic modalities by different propositions and suitable
cardinality atoms (mc-atoms) k X, where X is a ﬁnite set of rules. In this way, a class of agent programs can be embedded
ground atoms and k ≥ 0. Such an atom is true in an interpre- into HEX programs as a host for evaluation.
tation I, if k ≥ |X ∩ I| holds. Note that an ordinary atom A
amounts to 1{A}. An mca-program is a set of rules     4   Applications
                                                      In this section, we show the usage of HEX programs for dif-
       H  ← B1, . . . , Bm, not Bm+1, . . . , not Bn (3)
                                                      ferent purposes, in which the joint availability of higher-order
where H and the Bi’s are mc-atoms. Answer sets (stable and external atoms is beneﬁcial. For space reasons, the expo-
models) for an mca-program P are interpretations I which sition is necessarily superﬁcial and details will be omitted.4.1  Semantic Web  applications                       Filtering propositions. This way, it is possible to customize
HEX programs are well-suited as a convenient tool for a   criteria for selecting which propositions can be dropped
variety of tasks related to ontology languages and for Se- and which cannot. For instance, a proposition cannot be
                                                                                             2
mantic-Web applications in general, since, in contrast to dropped if it is an RDFS axiomatic triple:
other approaches, they keep decidability but do not lack the          pick(P ) ← axiomatic(P ).
possibility of exploiting nondeterminism, performing meta-
reasoning, or encoding aggregates and sophisticated con- Deﬁning ontology semantics. The operator |= can be de-
structs through external atoms.                           ﬁned in terms of entailment rules and constraints ex-
  An interesting application scenario where several features pressed in the language itself, like in:
of HEX programs come  into play is ontology alignment.
Merging knowledge from different sources in the context of   D(X)  ← (C, rdf :subClassOf , D), C(X);
the Semantic Web is a very important task [Calvanese et al.,       ← owl:maxCardinality(C, R, N), C(X),
2001]. To avoid inconsistencies which arise in merging, it is        #countr[R, X](M), M  > N,
important to diagnose the source of such inconsistencies and
to propose a “repaired” version of the merged ontology. In where the external atom #countr[R, X](M) expresses
general, given an entailment operator |= and two theories T1 the aggregate atom #count{Y : R(X, Y )} = M. Also,
and T2, we want to ﬁnd some theory rep(T1 ∪ T2) which,    semantics can be deﬁned by means of external reasoners,
if possible, is consistent (with respect to |= ). Usually, rep using constraints like
is deﬁned according to some customized criterion, so that to
                                                                       ←  #inconsistent[pick],
save as much knowledge as possible from T1 and T2. Also,
rep can be nondeterministic and admit more than one possi- where the external predicate #inconsistent takes for in-
ble solution.                                             put a set of assertions and establishes through an external
  HEX programs allow to deﬁne |= according to a range of  reasoner whether the underlying theory is inconsistent.
possibilities; in the same way, HEX programs are a useful tool
for modeling and customizing the rep operator. In order to 4.2 Closed world and default reasoning
perform ontology alignment, HEX programs must be able to Reiter’s well-known closed-world assumption (CWA)3 is ac-
express tasks such as the following ones:             knowledged as an important reasoning principle for inferring
Importing external theories. This can be achieved, e.g., in negative information from a logical knowledge base KB: For
    the following way:                                a ground atom p(c), conclude ¬p(c) if KB 6|= p(c). Descrip-
                                                      tion logic knowledge bases lack this possibility.
         triple(X, Y, Z) ← #RDF [uri](X, Y, Z);
                                                        Using HEX programs, the CWA may be easily expressed on
         triple(X, Y, Z) ← #RDF [uri2 ](X, Y, Z);     top of an external KB which can be queried through suitable
        proposition(P ) ← triple(P, rdf :type,        external atoms. We show this here for a description logic
                               rdf :Statement).       knowledge base L. Assuming that a generic external atom
                                                      #dl 0[C](X) for modeling a dl-atom DL[C](X) is available,
    We assume here to deal with RDF theories.1 We take the CWA principle can be stated as follows:
    advantage of an external predicate #RDF intended to         0
                                                              C (X) ←  not #dl 0[C](X), concept(C),
    extract knowledge from a given URI (Uniform Resource                       0
    Identiﬁer), in form of a set of “reiﬁed” ternary assertions.       cwa(C, C ), o(X),
Searching in the space of assertions. This task is required where concept(C) is a predicate which holds for all concepts,
    in order to choose nondeterministically which proposi- cwa(C, C0) states that C0 is the complement of C under the
    tions have to be included in the merged theory and which CWA, and o(X) is a predicate that holds for all individuals
    not, with statements like                         occurring in L. For example, given that
          pick(P ) ∨ drop(P ) ← proposition(P ).                L = { man v person, person(lee) }

Translating and manipulating reiﬁed assertions. E.g., for for concepts man and person, the CWA infers ¬man(lee).
    choosing how to put RDF triples (possibly including As well known, the CWA can become inconsistent. If in
    OWL  assertions) in an easier manipulatable and read- the above example, L contains a further axiom
    able format, and for making selected propositions true,
                                                                    person = man  t woman,
    the following rules can be employed:
                                                                     woman                     ¬man(lee)
      (X, Y, Z) ← pick(P ), triple(P, rdf :subject, X), with the concept    , then the CWA infers
                                                          ¬woman(lee)                      L
                         triple(P, rdf :predicate, Y ), and           ; this is inconsistent with .
                         triple(P, rdf :object, Z);      2In a language enriched with weak constraints, we could max-
         C(X)  ← (X, rdf :type, C).                   imize the set of selected propositions using a constraint of form
                                                      :∼drop(P ).
  1See http://www.w3.org/tr/rdf-mt/    for information   3Throughout this section, we refer to Łukaszewicz [1990] for
about RDF.                                            references to closed-world reasoning and circumscription.