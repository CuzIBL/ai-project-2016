                      Property Persistence in the Situation Calculus∗
                                 Ryan F. Kelly and Adrian R. Pearce
                                      NICTA Victoria Laboratory
                      Department of Computer Science and Software Engineering
                                      The University of Melbourne
                                        Victoria, 3010, Australia
                                   {rfk,adrian}@csse.unimelb.edu.au

                    Abstract                            Unfortunately there are many reasoning tasks that require
                                                      universal quantiﬁcation over situations. For example, it is of-
    We develop an algorithm for reducing universally  ten desirable to show that no situation can satisfy a particu-
    quantiﬁed situation calculus queries to a form    lar goal. In this paper we are interested in a subset of such
    more amenable to automated reasoning. Universal   queries which we refer to as persistence queries: under a par-
    quantiﬁcation in the situation calculus requires a ticular situation calculus theory D, and given some property
    second-order induction axiom, making automated    φ and situation s, determine whether φ will hold in all situa-
    reasoning difﬁcult for such queries. We show how  tions in the future of s:
    to reduce queries about property persistence, a                                    
    common family of universally-quantiﬁed query, to                 D|= ∀s .s  s →  φ[s ]
    an equivalent form that does not quantify over sit- The need for second-order logic has traditionally limited au-
    uations. The algorithm for doing so utilizes only tomated reasoning about such queries. We introduce a new
    ﬁrst-order reasoning. We give several examples    approach that is similar in spirit to the regression operator of
    of important reasoning tasks that are facilitated by [Reiter, 1991]: deﬁne an operator that transforms a formula φ
    our approach, including checking for goal impos-  into a formula PD[φ], such that φ persists in s if and only if
    sibility and reasoning about knowledge with par-  PD[φ] holds in s. We term this the persistence condition of φ,
    tial observability of actions.                    and show how to calculate it in a form suitable for effective
                                                      automated reasoning.
                                                                                                  1
                                                        To determine PD[φ], we ﬁrst deﬁne an operator PD[φ] that
1  Introduction                                       holds in s whenever φ holds in s and all its immediate succes-
The situation calculus [Pirri and Reiter, 1999] has long been sors. The persistence condition is shown to be a ﬁxed-point
one of the most popular formalisms for reasoning about dy- of this operator, which can be sought using a straightforward
namic worlds. It has more recently become a popular choice iterative algorithm. Since this requires only ﬁrst-order rea-
for implementing systems situated in a dynamic world, as it soning with a limited number of axioms, the result is an ef-
offers, among other advantages: a formalism based in ﬁrst- fective procedure with which to answer a family of queries
order logic; an elegant monotonic solution to the frame prob- that universally quantify over situations.
lem; and an effective reasoning procedure for the projection The paper is organized as follows: Section 2 gives a brief
problem [Reiter, 1991]. Coupled with logic programming introduction to the situation calculus, formally deﬁnes the
languages such as Prolog, it has facilitated the implementa- persistence problem, discusses related work and gives several
tion of a wide range of systems.                      examples of important persistence queries; Section 3 formally
  The foundational axioms of the situation calculus include deﬁnes the persistence condition, presents an algorithm that
a second-order induction axiom deﬁning the set of all situa- calculates it, shows that the algorithm is correct and discusses
tions [Reiter, 1993]. Sentences that contain only existential the conditions necessary for completeness; and Section 4 con-
quantiﬁcation over situation terms can be proven without the cludes with a summary of our results.
induction axiom and so are more amenable to automated rea-
soning [Pirri and Reiter, 1999]. It is therefore important for 2 Background
systems built on a situation calculus theory of action to limit
                                                      The situation calculus is a many-sorted language of ﬁrst-order
queries to existential form. Much of the work on implement-
                                                      logic augmented with a second-order induction axiom. It has
ing systems with the situation calculus has been on reducing
                                                      the following sorts: Action terms are functions denoting in-
the number of axioms required to answer a given query, to
                                                      dividual instantaneous events that can cause the state of the
allow more efﬁcient reasoning.
                                                      world to change; Situation terms are histories of the actions
  ∗This research was supported by a grant from the Australian Re- that have occurred in the world, with the initial situation rep-
search Councils (ARCs) Centre for Perceptive and Intelligent Ma- resented by S0 and successive situations built up using the
chines in Complex Environments (PIMCE).               function do : Action × Situation → Situation; Object

                                                IJCAI-07
                                                  1948terms represent any other object in the domain. It further 2.1 Ordering over Situations
distinguishes Fluents as predicates or functions representing Situations form a tree with S0 at the root and do construct-
properties of the world that may change from one situation to ing child situations from parents. There is a basic ordering
another, and so take a situation term as their ﬁnal argument. relation  deﬁned by the following foundational axioms:
For a detailed description consult [Pirri and Reiter, 1999].
                                                                         ∀   ¬ (    )
  A basic action theory is a set D of situation calculus sen-             s.   s   S0
                                                                                          
tences (with a speciﬁc syntactic form as speciﬁed in [Pirri       ∀s, s ,a.s do(a, s ) ≡ s  s
and Reiter, 1999]) that describes a particular dynamic world.                                 ∨ =   
Queries about the behavior or evolution of the world are Where s s is the standard abbreviation of s s s s .
posed as logical entailment queries relative to this theory. It It is frequently useful to restrict the situations under consid-
consists of the following disjoint sets: the foundational ax- eration to those possible in the real world, by deﬁning an or-
ioms of the situation calculus (Σ); successor state axioms de- dering relation < over only these “executable” situations:
scribing how ﬂuents change between situations (Dss); pre-                ∀s.¬ (s<S0)
condition axioms indicating when actions can be performed
                                                            ∀            (  ) ≡  ≤   ∧     (   )
(Dap); unique names axioms ensuring that action terms are    s, s ,a.s<do a, s    s  s   Poss  a, s
distinct (Duna); and axioms describing the value of ﬂuents in Many results of the situation calculus are derived relative to

the initial situation (DS0 ):                         the executable situations - for example, [Reiter, 1993] devel-
                                                      ops an induction principle for all situations where S0 ≤ s.
          D =Σ∪D      ∪D    ∪D     ∪D
                    ss   ap    una    S0              This notation is so useful that we propose a parametrization
                                                      of it: let α be an action description predicate specifying the
  The foundational axiom of most import for this paper is actions of interest, then deﬁne the “α-ordering” over situa-
the induction axiom, which deﬁnes the set of all situations as tions as follows:
                    0
the least set containing S and closed under application of the           ∀s.¬ (s<α S0)
do function, as follows:                                                                      
                                                            ∀s, s ,a.s<α do(a, s ) ≡ s ≤α s ∧ α(a, s )
 ∀P.[P (S0) ∧∀s, a . (P (s) → P (do(a, s))) →∀s.P(s)] The standard ordering over executable situations is clearly
                                                      <Poss.Ifs   is thought of as the “current situation”, then
The fundamental importance of this axiom is described in               
                                                      s<α  s means that s is one potential future, and all actions
[          ]
Reiter, 1993 . Much research has focused on identifying that will occur in that future satisfy α.
sentences of the situation calculus that can be proven with-
out this axiom, and thus require only ﬁrst-order logic. Our 2.2 Effective Reasoning
work continues this tradition.
                                  (   )               Answering an arbitrary situation calculus query ψ involves, in
  There is a distinguished predicate Poss a, s that indicates general, an entailment problem in second-order logic (SOL):
when it is possible to perform an action in a given situation.
The set of action precondition axioms Dap contains one ax-                 D|=SOL  ψ
iom for each type of action A, of the general form:   This can be problematic for efﬁcient automated reasoning.
            −→          −→          −→
         ∀s, x.[Poss(A( x ),s) ≡ ΠA( x,s)]            Fortunately, there exist particular syntactic forms for which
                                                      some of the axioms in D are not required. In [Pirri and Re-
Here ΠA represents a uniform formula (see below) deﬁning iter, 1999] the “∃s sentences” are deﬁned as those in which
action possibility on a per-action basis.             every situation variable is in the scope of a positive existen-
  It is often useful to introduce analogous predicates to de- tial quantiﬁer. They show that such sentences can always be
scribe different aspects of action performance. For example, proven without the induction axiom (I) and hence are answer-
a predicate CantObs(agt, a, s) could indicate when an agent able by ﬁrst-order logical entailment (FOL):
will be unable to observe the occurrence of an action. Such
                                                              D|=SOL  ∃sψ  iﬀ  D−{I}|=FOL    ∃sψ
predicates are easily incorporated into a basic action theory
by axiomatizing them in Dap in the same manner as Poss. Such queries can be approached with standard ﬁrst-order rea-
We refer to these predicates in general as action description soning systems. To increase the efﬁciency of reasoning it is
predicates, and use the meta-variable α to represent an arbi- desirable to eliminate further axioms from D,which[Pirri
trary such predicate.                                 and Reiter, 1999] show possible for several syntactic forms.
  The uniform formulae as deﬁned in [Pirri and Reiter, 1999] Axiom reduction is also the key idea behind the regression
can be thought of as properties of the state of the world. operator, the principal tool for effective reasoning in the situ-
They are basically logical combinations of ﬂuents referring ation calculus [Reiter, 1991]. The regression operator RD is a
to a common situation term, which cannot mention action de- syntactic manipulation whose behavior can be summarized1
scription predicates nor compare situation terms. We will use 1          R
the meta-variable to refer to an arbitrary uniform formula. The full behavior of D is beyond the scope of this paper. Ex-
               φ                                      perienced readers please note that we use the single-step version of
  It is often useful to determine the truth of a property at the regression operator, as in [Lin and Reiter, 1994]. Since any for-
a given situation. The formula φ[s] represents the uniform mula uniform in do(a, s) is by deﬁnition single-step regressable, the
formula φ with all occurrences of its unique situation term development below omits the traditional qualiﬁcation that formulae
replaced by the situation s.                          must be regressable.

                                                IJCAI-07
                                                  1949for our purposes as follows: given a formula φ uniform in Need for Cooperation: To establish that it is absolutely
do(a, s), regression transforms it into a formula RD[φ] that necessary to cooperate with another agent, an agent must de-
is uniform in s and is equivalent to φ under the theory of ac- termine persistence under actions performed by itself:
   D                                                                                        
tion :                                                          D|= ∀s .s≤OwnAction  s →¬G[s   ]
                  D|=  φ ≡RD[φ]
                                                      Assuming that the action description predicate OwnAction
Regression also replaces instances of the Posspredicate with has been deﬁned to identify actions performed by the agent
appropriate instantiations of the corresponding uniform for- in question, this states that no situation in the future of s in
                      D
mula from the axioms in ap, and other action description which all actions were performed by that agent can satisfy G.
predicates can easily be treated in the same way. In order to If this is the case, it will need to cooperate with another agent
regress such a predicate over an action variable one must as- in order to achieve its goal.
sume that there are only a ﬁnite number of action types, so Knowledge under Partial Observability: In recent un-
that it can be replaced with the disjunctive closure of its deﬁ- published work we develop a new account of knowledge in
nitional axioms. We assume this restriction throughout. the situation calculus when not all actions are observable by
  If φ refers to a situation that is rooted at S0, repeated appli- all agents. To facilitate reasoning in this formalism, agents
                                      R∗
cations of the regression operator (denoted by D) can trans- must be able to reason about what cannot be changed by ac-
form it into an equivalent formula uniform in the initial sit- tions that they cannot observe, a form of persistence query.
uation. The successor state and action precondition axioms Due to the universal quantiﬁcation over situations, the
are “compiled into” the regressed formula, and so are not re- techniques for effective automated reasoning in Section 2.2
quired for the reasoning task:                        cannot be applied to persistence queries. This paper is de-
                                  ∗                   voted to developing of a complementary technique for han-
         D|= φ  iﬀ Duna ∪DS0  |= RD[φ][S0]
                                                      dling such queries.
                               ∗
The trade-off is that the length of RD[φ] may be exponen-
tial in the length of φ. In practice this is typically more than 2.4 Related Work
compensated for by the reduction in the number of axioms re- While there is a rich and diverse literature base for the sit-
quired, and regression has proven a very effective technique. uation calculus, there appears to have been little work deal-
                                                      ing with universally quantiﬁed queries. The work of [Reiter,
2.3  Property Persistence                             1993] shows how to handle such queries by hand using an ap-
One important form of situation calculus query is to ask propriate instantiation of the induction axiom, but makes no
whether a given property φ will hold in all future situations mention of automating this reasoning.
of a given situation s,aswellasats itself:              Other work considering persistence focuses exclusively on
                                                      verifying state constraints. These are uniform formulae that
                                
              D|=  ∀s .s  s → φ(s )                  must hold in every possible situation, a highly specialized
                                                      form of persistence query. The work of [Lin and Reiter, 1994]
More generally, one may wish to limit the futures considered “compiles away” the induction axiom when verifying a state
to those brought about by a certain class of actions α: constraint, by means of the following equivalence:
                                 
              D|=  ∀s .s≤α s  → φ[s ]                     Σ ∪Duna  ∪Dss  |= φ[S0] → (∀s.S0 ≤ s → φ[s])
                                                                              iﬀ
In words this states “given that all subsequent actions satisfy
α, φ will remain true” or, more succinctly, “φ persists un- Duna |= ∀s, a . φ[s] ∧RD[Poss(a, s)] →RD[φ[do(a, s)]]
der α”. We term queries of this form property persistence Veriﬁcation of a state constraint can thus be reduced to rea-
queries, and they are involved in many useful reasoning tasks. soning about a universally quantiﬁed uniform formula using
The following are a small selection:                  only the unique names axioms, a comparatively straightfor-
  Goal Impossibility: Given a goal G, establish that there is ward reasoning task. This problem is also approached by
no possible situation in which that goal is satisﬁed: [Bertossi et al., 1996], who develop a system for automati-
                                                      cally verifying state constraints based on an induction theo-
              D|= ∀s.S0 ≤  s →¬G(s)
                                                      rem prover.
  Goal Futility: Given a goal G and situation s, establish However, there are many issues related to persistence that
that the goal cannot be satisﬁed in any possible situation in are not addressed by such work, including: persistence at sit-
the future of s:                                      uations other than S0; action description predicates other than
                                                      Poss; how to combine notions of persistence and regression;
             D|=  ∀    ≤   →¬   ( )
                   s .s   s     G s                   and determining what additional conditions may be necessary
Note how this is different from goal impossibility: while the to guarantee the persistence of φ. As our treatment of persis-
agent may have initially been able to achieve its goal, the ac- tence can provide a concrete basis for these considerations, it
tions that have subsequently been performed have rendered is signiﬁcantly more general than existing work.
the goal unachievable. Agents would be well advised to avoid
such situations.                                      3   The Persistence Condition
  Checking State Constraints: This is a variant of goal im- For implementing persistence queries in practical systems,
possibility - show that the constraint can never be violated. we clearly need to transform the query into a form suitable

                                                IJCAI-07
                                                  1950for effective reasoning. Speciﬁcally, we will transform a per- Proposition 2. For any basic action theory D, uniform for-
sistence query based at s into the evaluation of a uniform for- mula φ and action description predicate α:
mula at s, which can be done effectively using the regres- D−D      |= ∀   [ ] → (∀  ≤     →  [ ])
sion operator. We need some transformation of a property         S0    s.φs       s .s  α s    φ s
φ and action description predicate α into a uniform formula                   iﬀ
P  [   ]
 D φ, α that is true at precisely the situations in which φ per- Duna |= ∀s, a . φ[s] ∧RD[α(a, s)] →RD[φ[do(a, s)]]
sists under α, given a particular action theory D. We call PD
the persistence condition of φ under α.               Proof. A straightforward generalization of Lemma 5 in [Lin
                                                      and Reiter, 1994], utilizing Proposition 1.
Deﬁnition 1. The persistence condition PD[φ, α] is a uni-
form formula that is the weakest precondition for the persis-
tence of φ under α, given a basic action theory D without the Proposition 2 will be key in our algorithm for calculating
initial situation axioms. That is:                    the persistence condition. It allows one to establish the result
                                                   “if φ holds in s,thenφ persists in s” by checking entailment
  D−DS0   |= ∀s. (PD[φ, α][s] ≡∀s .s≤α s →  φ[s ])
                                                      of a uniform formula by the unique names axioms, a straight-
  Deﬁning PD  to be independent of the initial world state forward ﬁrst-order reasoning task.
allows an agent to calculate it regardless of what (if anything) Next we must formalize some basic relationships between
                                                               n
is known about the actual state of the world. To see how PD PD and PD, as follows:
may be calculated, consider the weaker notion of a formula Lemma 1. Given a basic action theory D, uniform formula
persisting to depth n in a situation:                 φ and action description predicate α, then for any n:
Deﬁnition 2. A uniform formula φ persists to depth 1 under
                                1                       D−D      |= ∀  [ ∀  ( ≤    →  [ ])
α in situation s when the formula PD[φ, α] holds in s,as      S0    s.   s . s  α s    φ s
deﬁned by:                                                                                n      
                                                                         ≡∀s   . (s ≤α s →PD[φ, α][s ]) ]
   P1 [   ][ ] =def [ ] ∧∀ R [ (  ) →  [ (   )]]                                 n
    D φ, α s   φ s    a.  D α  a, s   φ do a, s       That is, φ persists under α iff PD[φ, α] persists under α.
More generally, for any n ≥ 0, a uniform formula φ persists                  Pn      
                                            n         Proof. By the deﬁnition of D,anys that falsiﬁes the right-
to depth n under α in situation s when the formula PD[φ, α] hand side of this equivalence will also falsify the left-hand
holds in s, as deﬁned by:                             side, and vice-versa.
                     0     def
                    PD[φ, α] = φ
                                                      Lemma 2.  Given a basic action theory D, uniform formula
              n     def 1  n−1
            PD[φ, α] = PD[PD  [φ, α],α]               φ and action description predicate α, then for any n:
  Note that P1 is a literal encoding of the requirement “                                 n
            D                                    φ          D−DS0   |= ∀s. (PD[φ, α][s] →PD[φ, α][s])
holds in s and in all its direct successors”. Since α is an action
description predicate and φ is a uniform formula, the expres- Proof. PD[φ, α] implies the persistence of φ by deﬁnition,
                                                                    n
sion α(a, s) → φ[do(a, s)] can always be regressed and the which implies PD[φ, α] by Lemma 1.
result will always be uniform in s. Successive applications of
P1 assert persistence to greater depths.
 D                                                      We are now equipped to prove the major theorem of this
  Intuitively, one would expect PD[φ, α] to be a ﬁxed-point        n              n+1            n
    1                                                 paper: that if PD[φ, α] implies PD [φ, α],thenPD[φ, α] is
of PD[φ, α],sincePD[φ, α] implies persistence up to any
depth. Such a ﬁxed-point can then be calculated using stan- equivalent to the persistence condition for φ under α.
dard iterative approximation techniques. To show that this is Theorem 1. Given a basic action theory D, uniform formula
in fact the case we require a number of theoretical results, φ and action description predicate α, then for any n:
presented below.                                                          n            n+1
                                                              Duna |= ∀s.PD[φ, α][s] →PD  [φ, α][s]   (1)
3.1  Formal Development                                                       iﬀ
                                                                             n
We begin by adapting two existing results involving induction D−Ds0   |= ∀s.PD[φ, α][s] ≡PD[φ, α][s]  (2)
to operate with our generalized ≤α notation, and be based at
situations other than S0:                             Proof. For the if direction, we ﬁrst see by the deﬁnition of
                                                      P1  that equation (1) is equivalent to:
Proposition 1. For any action description predicate α,the D
foundational axioms of the situation calculus entail the fol-          n
                                                        Duna |= ∀s, a . PD[φ, α][s] ∧RD[α(a, s)]
lowing induction principle:                                                             n
                                                                                →RD[PD[φ, α][do(a, s)]]
                                   
  ∀W, s . W (s) ∧ [∀a, s .α(a, s ) ∧ s ≤α s                                                        n
                                                      which by Proposition 2 implies the persistence of PD[φ, α]
                                           
    ∧W  (s ) → W (do(a, s ))] →∀s .s≤α s → W (s )     under α. By Lemma 1 this implies the persistence of φ under
                                                      α, which in turn implies PD[φ, α], giving:
Proof. A trivial adaptation of theorem 1 in [Reiter, 1993].
                                                                             n
                                                             D−Ds0   |= ∀s.PD[φ, α][s] →PD[φ, α][s]

                                                IJCAI-07
                                                  1951By Lemma 2 this implication is in fact an equivalence, yield- The former is of more direct consequence to our work, and
ing equation (2) as required.                         raises two questions: is the persistence condition guaranteed
  The only if direction is a straightforward reversal of this to exist, and is it guaranteed to be reachable in a ﬁnite num-
                                                                             1
reasoning: PD[φ, α] implies the persistence of φ,whichim- ber of iterations? Since PD is clearly monotone, the con-
                    n
plies the persistence of PD[φ, α], which implies (1) by Propo- structive proof of Tarski’s ﬁxed-point theorem [Cousot and
sition 2.                                             Cousot, 1979] guarantees the existence of a ﬁxed-point that
                                                      can be calculated via transﬁnite iteration, as performed by our
                                                      algorithm. Moreover, this will be the least ﬁxed-point greater
       Pn+1[    ] →Pn  [   ]
  Since  D   φ, α     D φ, α by deﬁnition, equation (1) than φ, a satisfying conﬁrmation of correctness since the per-
         n                          1
identiﬁes PD[φ, α] as a ﬁxed-point of the PD operator, as our sistence condition must be the weakest precondition for the
initial intuition suggested.                          persistence of φ.
                                                        Unfortunately, there is no guarantee that this ﬁxed-point
3.2  Algorithm for the Persistence Condition          can be reached via ﬁnite iteration, which is required for ter-
                          n
Since we can easily calculate PD[φ, α] for any n,wehavea mination. Indeed, it is straightforward to construct a ﬂuent
straightforward algorithm for determining PD[φ, α]: search for which the algorithm never terminates: consider a ﬂuent
for an n such that                                    Fp(x, s) taking integers x, that is affected by a single action
                                                    that makes it false whenever Fp(x +1,s) is false. Letting α
      D    |= ∀   Pn [   ][ ] →Pn+1[    ][ ]
        una    s.   D φ, α s     D   φ, α s           be vacuously true, the sequence of iterations produced by our
                                       n+1            algorithm would be:
Since we expect Pn [φ, α] to be simpler than P [φ, α],we
               D                       D                      P1 [  (   )] ≡   (   ) ∧   ( +1   )
should look for the smallest such n. Algorithm 1 presents an    D Fp x, s   Fp  x, s  Fp x    ,s
                                                         2
iterative procedure for doing just that.               PD[Fp(x, s)] ≡ Fp(x, s) ∧ Fp(x +1,s) ∧ Fp(x +2,s)
                                                                               .
Algorithm 1 Calculate PD[φ, α]                                                 .
  pn ⇐ φ                                                                        i=n
          1                                                        n
  pn1 ⇐PD[pn,α]                                                  PD[Fp(x, s)] ≡    Fp(x + i, s)
  while Duna |= ∀s.pn[s] → pn1[s] do                                           i=0
    pn ⇐ pn1                                                                              P  [   (  )] ≡
    pn1 ⇐P1  [pn  ]                                   The persistence condition in this case is D Fp x, s
            D   ,α                                    ∀y.x≤   y → Fp(y,s), and while this is the limit of the iter-
  end while                                           ation it is clearly unachievable in any ﬁnite number of steps.
  return pn                                               1
                                                        PD  operates over the set of equivalence classes of formulae
                                                      uniform in s, and the theory of ﬁxed-points requires that this
                           1
  Note that the calculation of PD[φ, α] is a straightforward set be a well-founded partial order to guarantee termination
syntactic transformation and so requires no further treatment. of an iterative approximation algorithm. There are certain
                                                      classes of basic action theory for which this well-foundedness
Correctness                                           can be guaranteed. The most obvious is theories with ﬁnite
If algorithm 1 terminates, it terminates returning a value of action and object domains, in which the set of equivalence
pn for which equation (1) holds. By Theorem 1 this value of classes is ﬁnite. Another is the case where successor-state
pn is equivalent to the persistence condition for φ under α. axioms refer only to the direct arguments of their ﬂuents, in
                                                                                      1
The algorithm therefore correctly calculates the persistence which case repeated applications of PD will pick out a subset
condition.                                            of the equivalence classes that refers to a ﬁnite number of
                              Pn [   ]
  Note that equation (1) holds when D φ, α is unsatisﬁable objects, giving the same guarantee.
for any situation, as it appears in the antecedent of the impli- In general, termination requires that repeated applications
cation. The algorithm thus correctly returns an unsatisﬁable of the successor-state axioms (via the regression operator) do
condition (equivalent to false)whenφ can never persist un- not construct inﬁnite chains. We are currently investigating
der α.                                                syntactic restrictions on successor state axioms that can en-
Completeness                                          force this requirement, and have found it to be easily met
                                                      in practice. We are also investigating more advanced ﬁxed-
As Theorem 1 is an equivalence, the only source of incom-
                                                      point algorithms that may give better efﬁciency and termina-
pleteness will be failure to terminate. Algorithm 1 may fail to
                                                      tion guarantees.
terminate for two reasons: the loop condition may never be
satisﬁed, or the ﬁrst-order logical inference in the loop condi- Effectiveness
tion may be undecidable and fail to terminate.        Our algorithm replaces a single reasoning task based on the
  The later indicates that the basic action theory D is unde- full action theory D with a series of reasoning tasks based on
cidable. While this is a concern, it affects more than just our the unique names axioms Duna. Is this a worthwhile trade-
algorithm - any system implemented around such an action off in practice? The following points weigh strongly in favor
theory will be incomplete. Thus, with respect to this source of our approach:
of incompleteness, our algorithm is no more incomplete than First and foremost, we avoid the need for the second-order
any larger system it would form a part of.            induction axiom. All the reasoning tasks can be performed

                                                IJCAI-07
                                                  1952