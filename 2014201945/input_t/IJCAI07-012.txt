     Conditional Constraint Satisfaction: Logical Foundations and Complexity

             Georg Gottlob                 Gianluigi Greco                  Toni Mancini
         Computing Laboratory            Dip. di Matematica       Dip. di Informatica e Sistemistica
           Oxford University           Universit`a della Calabria Universit`a di Roma “La Sapienza”
         OX1 3QD Oxford, UK              I-87030 Rende, Italy            I-00198 Roma, Italy
    georg.gottlob@comlab.ox.ac.uk       ggreco@mat.unical.it          tmancini@dis.uniroma1.it

                    Abstract                            Indeed, CCSPs (proposed with the name of Dynamic CSPs
                                                      in [Mittal and Falkenhainer, 2000]) are CSPs tailored to sup-
    Conditional Constraint Satisfaction Problems (CC- port conditional activation of variables and constraints, which
    SPs) are generalizations of classical CSPs that sup- have been used in model diagnosis, structural design, and
    port conditional activation of variables and con- conﬁguration problems. As an example application, one may
    straints. Despite the interest emerged for CCSPs  think of an automated personal computer (PC) conﬁgurator
    in the context of modelling the intrinsic dynamism devoted to assemble several PC components. Conditional
    of diagnosis, structural design, and product conﬁg- constraints may require other components to be added to the
    uration applications, a complete characterization of current conﬁguration, depending on the choices made for the
    their computational properties and of their expres- others. E.g., if the motherboard does not embed a video-card,
    siveness is still missing. In fact, the aim of the pa- then a compatible one should be added.
    per is precisely to face these open research issues. Despite the interest emerged for the CCSPs framework
    First, CCSPs are formally characterized in terms of and the efforts spent in the design of specialized algo-
    a suitable fragment of ﬁrst-order logic. Second, the rithms for their efﬁcient solution (e.g., [Soininen et al., 1999;
    complexity of some basic reasoning tasks for CC-  Bowen and Bahler, 1991; Sabin et al., 2003; Gelle and Falt-
    SPs is studied, by establishing completeness results ings, 2003; Keppens and Shen, 2004]), many aspects have
    for the ﬁrst and the second level of the polynomial not yet been investigated and several research questions are,
    hierarchy. Finally, motivated by the hardness re- in fact, still open. For instance, both the expressiveness and
    sults, an island of tractability for CCSPs is identi- the complexity issues arising in this setting have only par-
    ﬁed, by extending structural decomposition meth-  tially been studied in the literature [Soininen et al., 1999;
    ods originally proposed for CSPs.                 Bowen and Bahler, 1991; Mittal and Falkenhainer, 2000].
                                                      And, more importantly, differently from the case of classical
1  Introduction                                       CSPs where several classes of instances that are efﬁciently
                                                      solvable have been singled out (e.g., [Pearson and Jeavons,
Constraint satisfaction is a static framework in its original 1997; Gottlob et al., 2000]), no island of tractability is known
formulation that cannot be used to model and solve deci- for CCSPs, whose identiﬁcation is instead crucial for appli-
sion problems in scenarios where uncertainty and dynamism cations in real world scenarios.
come into play. Indeed, a Constraint Satisfaction Problem The aim of this paper is precisely to shed lights on these
(CSP) instance (e.g., [Dechter, 2003]) is basically a triple
(Var   C)       Var                                   aspects and to face the above research questions. To make
    ,U,  ,where     is a ﬁnite set of variables, U is a ﬁ- our analysis formal, we shall exploit the logic-based charac-
                       C = {             }
nite domain of values, and  C1,C2,...,Cq   is a ﬁnite                             [                    ]
                                    (    )            terization of a CSP instance (cf. Kolaitis and Vardi, 1998 )
set of constraints, where each Ci is a pair Si,ri ,inwhich as a pair (φ, D),whereD is the constraint database, i.e.,
   ⊆ Var                                 ⊆    |Si|
Si       is called the constraint scope,andri U  is   the set of all the constraint relations ri, for each constraint
called the constraint relation. Then, by solving a CSP in- Ci =(Si,ri),andφ is a ∃FO∧,+ sentence, i.e., an ex-
stance, we simply mean determining whether there is a sub- istentially quantiﬁed ﬁrst-order formula with no negations
stitution θ : Var → U that satisﬁes all constraints. or disjunctions, over the relational vocabulary consisting of
  To remove the assumption that all the variables, the do- the atoms ri(Si). Within this framework, we investigate the
mains of values, and the constraints are known beforehand class of those constraint satisfaction problems build over the
and do not change over time, several generalized CSP frame- ∃FO→,∧,+ fragment of the ﬁrst-order logic, which consists
works have been already proposed in the literature (see, e.g., of all the formulas obtained extending ∃FO∧,+ with the im-
[Verfaillie and Jussien, 2005] and the references therein). In plication connective “→”. The rationale of this approach is
this paper, we focus on the core of these extensions, by con- that enhancing ∃FO∧,+ with the implication connective is a
sidering the framework for Conditional Constraint Satisfac- mathematically well-founded approach to model conditional
tion Problems (CCSPs).                                activation of variables, as for it is next exempliﬁed.


                                                IJCAI-07
                                                   88Example 1. Consider again the PC conﬁguration scenario. -Ifφ(X ) and ψ(Z) are in FO→,∧,+,thenφ(X ) ∧ ψ(Z) is
Then, the ∃FO→,∧,+ formula:                             in FO→,∧,+;
                                                            (  )               (   )
 ∃M  motherboard(M) ∧ (hasNoVideo(M)  →               -Ifφ  X   is in FO∧,+ and ψ X,Y  is in FO→,∧,+,then
                       ∃V,C  ﬁt(M,V ) ∧ cost (V,C))     φ(X ) →∃Yψ (X, Y ) is in FO→,∧,+.
states, intuitively, that a motherboard M is needed to assem- The set of all the variables in ψ is denoted by V(ψ).
ble a PC; moreover, if M has no embedded video, then a Example 2. The following formula ψ0 ∈∃FO→,∧,+ adds
video-card V ﬁtting the requirements of M has to be chosen some further requirements to the conﬁguration constraints in
(and, C is the additional cost).                     Example 1 (names have been shortened, for simplicity):
                    ∃
  In fact, we show that FO→,∧,+ formulas characterize (in ∃Mm(M)    ∧ (h(M) →∃V,C f(M,V    ) ∧ c(V,C))
a precise, logical sense) the class of CCSPs. Based on this          ∧ (e(M) →  (b(M) →∃Hg(M,H)))
result, we then embark on a systematic study of ∃FO→,∧,+.
In summary:                                           Here, we have V(ψ0)={M,V,C,H}.                    
                                                                                D       ∃
£ We investigate the expressive power of CCSPs by depict- Given a constraint database and an FO→,∧,+ formula
                                                                     (  D)
 ing, in Section 3, a clear picture of its relationships with ψ, we denote by ψ, the constraint satisfaction problem
 other logic-based CSP formalisms. The results of this com- instance of deciding an assignment for variables in ψ that sat-
                                                                              D
 parison are graphically summarized in Figure 1.      isﬁes all the constraints over .
£                                                       Note that because of the presence of the implication con-
  In Section 4, we study the computational complexity of nective, differently from the standard CSPs, a formula ψ ∈
 some basic reasoning tasks for CCSPs. We considered both
                                                      ∃FO→,∧,+  can be satisﬁed by partial assignments over V(ψ).
 the case where one is interested in ﬁnding a generic solu- Formally, a partial assignment θ for (ψ, D) is a mapping from
 tion and the case where solutions are reﬁned by means of a subset of V(ψ) to values in D. Then, the θ-reduct of ψ is
 some pro-orders. From our analysis, summarized in Fig- the formula θ(ψ) resulting from ψ by (1) applying all the sub-
 ure 2, it emerges that reasoning with CCSPs is intractable, stitutions in θ to the variables in ψ, and (2) by replacing all
 with hardness and membership results being established for the atoms in which a variable in V(ψ) \V(θ) occurs with
 various classes at the ﬁrst and the second level of the poly- “false”, where V(θ) denotes the variables in the domain of θ.
 nomial hierarchy.                                    A solution for (ψ, D) is a partial assignment θ such that θ(ψ)
£ Motivated by the above complexity results, in Section 5, evaluates to true over D, denoted by D|= θ(ψ).
 we turn to identify tractable classes of ∃FO→,∧,+ formulas,
                                                      Example 3. Consider the database D0 containing the rela-
 by issuing restrictions on the constraints interactions. As
                                                      tions: m = {(m1), (m2)}, h = {(m2)}, f = {(m2,v2)},
 a bad news, we show that decomposition methods for tra-
                                                      c =  {(v2,c4), (v1,c3)}, e = {(m1)}, b = {(m1)} and
 ditional CSPs do not guarantee the tractability of CCSPs.
                                                      g = {(m1,h4)}. Then, the followings assignments are par-
 Indeed, the NP-hardness of the SATISFIABILITY problem
                                                      tial:         θ1 = {M/m2,V/v2,C/c3}
 also holds for the class of CCSPs whose constraints inter-           = {            }
 actions can be modelled with an acyclic primal graph (see,         θ2   M/m1,H/h4
 e.g., [Dechter, 2003]).                                Note that θ1 is not a solution for (ψ0, D0). On the other
                                                      hand, the θ2-reduct of ψ0 evaluates true over D0. 
£ The major reason for the failure of traditional decompo-
 sition methods is that the primal graph obscures the real                   ∃FO
 nature of the interactions occurring in CCSPs due to the 3 Expressiveness of     →,∧,+ Formulas
 variables activation. Hence, in Section 5.2, we introduce The ﬁrst crucial questions for CCSPs are how they relate with
 a special graphical representation for CCSPs, called impli- other approaches to deal with conditional activation of vari-
 cation graph,andshowthatSATISFIABILITY   is feasible ables and constraints, and whether they are more expressive
 in LOGCFL and hence in polynomial time, over instances (in a precise logical sense) than classical CSPs. Both the
 whose implications graphs are acyclic or have, more gener- questions are answered in this section.
 ally, bounded treewidth [Robertson and Seymour, 1986]. Let F be a CSP formalism, i.e., a formalism for modelling
                                                      constraint satisfaction problems (e.g., a subset of FO), and let
                                                      D                                    ∈      S(  D)
2  ∃FO→,∧,+    Formulas: Syntax and Semantics           be a constraint database. For a formula φ F ,let φ,
                                                      denote the set of all the solutions, and for a set of variables
In this section, we propose a framework for modelling condi-
                                                      V,letS(φ, D)[V] denote the set obtained from S(φ, D) by re-
tional activation of variables and constraints in CSPs, which stricting each solution over the variables in V.
is based on an extension of the fragment ∃FO∧,+ with the
                                                        Let F1 and F2 be two CSP formalisms.  We say that
logical implication, as formalized next.
                                                      F1 weakly simulates F2 if for each φ2 ∈ F2 there exists
  An ∃FO→,∧,+  sentence (over a vocabulary R of constraint
                                                      φ1 ∈ F1 such that for each constraint database D, S(φ2, D)=
relations) is a formula ∃  (  ),where (  ) belongs to the S( D)
                    XφX          φ  X                   φ1,   [V(φ2)]. We say that F1 is more expressive than F2 iff
fragment FO→,∧,+ of ﬁrst-order logic, deﬁned as follows: F1 simulates F2 but F2 does not simulate F1.IfF1 simulates
- “true” and “false” are in FO→,∧,+;                  F2 and viceversa, F1 and F2 are equivalent.IfF1 does not
                                                               2      2                1            1
- Any atom of the form r(X ) (r ∈R)isinFO→,∧,+;      simulate F ,andF does not simulate F , we say that F and
                                                      F2 are incomparable.


                                                IJCAI-07
                                                   89                                                        It is possible to show (details omitted for lack of space)
                                                      that, for every constraint c of π, a legal assignment θ satisﬁes
                                                      c iff the corresponding partial assignment θ of ψπ satisﬁes the
                                                      subformula φc. Hence, ∀D,itis:S(π, D)=S(ψπ, D).

                                ∃                       Not surprisingly, CCSPs have been previously simulated
        Figure 1: Expressiveness of FO→,∧,+.          by means of different logic-based frameworks. For instance,
                                                      [                      ]
  Armed with the notions above, we compared the expres- Bowen and Bahler, 1991 expressed CCSPs by means of
                                                      the FOF logic; and, [Bacchus and Walsh, 2005] discussed a
siveness of ∃FO→,∧,+ with conditional CSPs (CCSP)s, with
                                                      rich formalism where implications can be simulated by nega-
∃FO∧,+  and with the positive existential disjunctive frag-
                                                      tions and disjunctions, by introducing a speciﬁc propagation
ment ∃FO∨,∧,+ of FO. Results are summarized in Figure 1.
                                                      method and characterizing when this method enforces gener-
3.1  Comparison with Conditional CSPs                 alized arc-consistency. Yet, the precise logical characteriza-
                                                      tion of CCSPs was unknown, which is made clear below.
A CCSP speciﬁcation π  is a tuple Var , Var I , CC, CA ,
where Var is a set of variables, Var I ⊆ Var is a set of Theorem 2. CCSP simulates ∃FO→,∧,+.
initial variables (intuitively, of the variables that are initially            ∃
“active”), and where the set of constraints is partitioned into Proof (Sketch). Let ψ be an FO→,∧,+ formula. We build
                                                      a CCSP  πψ as follows. First, all the atoms are converted
compatibility (CC)andactivity (CA) constraints.
                                                      into compatibility constraints. Then, for each subformula
  Compatibility constraints are constraint atoms (as in tra-                  
ditional CSPs), while activity constraints are of the follow- φ (X ) →∃Yφ (X, Y ) where φ = c1(X )∧···∧ck(X ),and
                                          RV                                                            j
ing kinds: require variable (RV): c(V1,...,Vk)→ V ; al- where Y = {Y1,...Ym}, we create m × k fresh variables Yi
ways require variable (ARV): {V1,...,Vk}ARV→ V ; require (1 ≤ i ≤ m, 1 ≤ j ≤ k), m × k activation constraints of the
                                                                   j
          (         )→RN                                        RV           RV  j
not (RN): c V1,...,Vk  V ; always require not (ARN):  form cj(X )→Y1 ,...cj(X )→Ym (1 ≤ j ≤ k), and m ARV
           ARN
{         } →       {            }⊆Var                                       1      k ARV
 V1,...,Vk    V , with V1,...,Vk,V      .             constraints of the form {Y ,...,Y } → Yi. It can be shown
                          (  D)                                             i      i
  A CCSP instance is a pair π, ,whereπ  is a speciﬁ-  that for each database D, S(ψ, D)=S(πψ, D)[V(ψ)].
         D
cation and is a constraint database. A legal assignment for Interestingly, if ψ is such that the left-hand side of any im-
(  D)                                 Var
 π,   is a partial mapping θ from variables in to domain plicative formula is a constraint atom only, the encoding can
        D
values in .Asolution is a legal assignment such that: (1) be adjusted not to use fresh variables. Hence, we can show a
Var  ⊆V(   )
   I      θ ; (2) θ satisﬁes every active compatibility con- stronger kind of simulation: ∀D, S(ψ, D)=S(πψ, D).
straints, i.e., those compatibility constraints whose variables
are in V(θ);and(3) θ satisﬁes every activity constraint: Corollary 1. CCSP and ∃FO→,∧,+ are equivalent.
  •WARV→ V is satisﬁed if W⊆V(θ) implies V ∈V(θ);       Before leaving the section, note that in [Mittal and Falken-
                RV                                    hainer, 2000] solutions to CCSPs are also required to be
  • c(V1,...,Vk)→V  is satisﬁed if {V1,...,Vk}⊆V(θ)
                                                      subset-minimal. In fact, the simulation techniques of The-
    and (θ(V1),...θ(Vk)) ∈ c (in D) implies V ∈V(θ);
                                                      orem 1 and 2 (in the case left sides of implications are con-
  •WARN               W⊆V(    )         
∈V( )
      → V  is satisﬁed if    θ implies V    θ ;       straint atoms) established a one-to-one correspondence be-
                RN
  • c(V1,...,Vk)→V  is satisﬁed if {V1,...,Vk}⊆V(θ)   tween solutions of CCSPs and assignments for ∃FO→,∧,+
    and (θ(V1),...θ(Vk)) ∈ c (in D) implies V 
∈V(θ); formulas. Hence, further properties on the solutions are pre-
As usual, the set of all the solutions is denoted by S(π, D). served as well, but formal results are omitted.
                  ∃
  We next show that FO→,∧,+ formulas are, in fact, an el- 3.2 Comparison with Other Logics for CSPs
egant, mathematically-founded characterization of CCSPs.
                                                      A comparison between CSPs and CCSPs has been proposed
Theorem 1. ∃FO→,∧,+  simulates CCSP.                  in [Soininen et al., 1999], by focusing on a knowledge repre-
                     Var Var   C  C                  sentation perspective. Indeed, it is shown that CCSPs are not
Proof (Sketch). Let π be  ,   I , CV, A . We build an modular representable by standard CSPs, i.e., intuitively, that
∃FO→,∧,+  formula ψπ = ∃Var , Var I       φc,where
                                   c∈CC ∪CA           small changes in a CCSP may result in signiﬁcant changes in
φc is obtained as follows:                            any corresponding CSP, which is an encoding for it.
 • if c is the compatibility constraint c(V1,...,Vk),then Based on the logical equivalence between CCSPs and
   c =                      ( ) →  ( 1      k)        ∃
  φ     V ∈{V1,...,Vk}\Var I dom V c V ,...,V ;        FO→,∧,+, we can now    formally compare CCSPs with
 • if c is the activity constraint c(V1,...,Vk)→RV V , φc is given CSPs, and in fact prove that there are CCSPs (formulas in
                                                      ∃                                   ∃
  by c(V1,...,Vk) → dom(V ).                           FO→,∧,+) that cannot be “simulated” in FO∧,+.Thear-
                                                      gument is that there is no way to encode the “→” connective
Note that other activity constraints can be, in fact, simulated
                                                      by means of conjunctions. In turn, “→” cannot encode dis-
by RV and compatibility constraints (cf. [Mittal and Falken-
                                                      junction of atoms. Thus, the following relationships hold1.
hainer, 2000]). Moreover, w.l.o.g., we have assumed the ex-
istence of a monadic relation dom listing all possible values Theorem 3. ∃FO→,∧,+ is such that: (1) it is more expressive
for the variables — without this relation, the simulation is than ∃FO∧,+; and, (2) it is incomparable with ∃FO∨,∧,+.
also possible, but would have required a much intricate con-
                                                         1Proofs are reported in an extended version of the paper available
struction for π.
          ψ                                           at www.unical.it/∼ggreco.

                                                IJCAI-07
                                                   904  The Complexity of Reasoning with CCSPs                            —       “⊆”        “≤”        “”
   (  D)                                                CHECKING    in P   co-NP-c    co-NP-c    co-NP-c
Let ψ,   be a CCSP instance. The intrinsic complexity of                    ΣP      NP[O(log n)]  NP
                           (  D)                       RELEVANCE   NP-c      2 -c  P         -c  P   -c
some basic reasoning tasks for ψ, has been studied in                               NP[O(log n)]  NP
[Soininen et al., 1999; Mittal and Falkenhainer, 2000].Inpar- NECESSITY co-NP-c co-NP-c P    -c  P   -c
ticular, it is known that the SATISFIABILITY problem (does Figure 2: Complexity of CCSPs (‘c’ stands for complete).
there exists a partial assignment θ such that θ is a solution for
(ψ, D)?) is NP-complete.                              X1,...,Xn  is not satisﬁable, i.e., deciding whether there ex-
  However, there are other important reasoning tasks that of- ist no truth assignments to the variables making each clause
ten come into play with CSPs, and whose complexity has not cj true, is a well-known co-NP-complete problem.
been investigated for CCSPs. In this section, we explore these We build a CCSP instance (ψ(Φ), D(Φ)) as follows.

issues, by focusing on the following problems:        For each clause cj, which is w.l.o.g. of the form tj1 ∨
                                                         ∨                                          ¬
  •                                                   tj2  tj3 ,wheretj1 is a variable Xi or its negation Xi,
    CHECKING: Given a partial assignment θ,isθ a solution D(Φ)                     =  {(        ) |    ∈
    for (ψ, D)?                                             contains the relation rcj   T1,T2,T3    Ti
                                                      {“true”, “false”} s.t. cj is not satisﬁed when tji = Ti, ∀i}.
  • RELEVANCE: Given a variable X,isX   contained in
                                                      Then, for each variable Xi in Φ, D(Φ) contains the rela-
    V(θ) for some solution θ for (ψ, D)?
                                                      tion rvi = {(“true”), (“false”)}. Finally, unsat = {(1)}
  • NECESSITY: Given a variable X,isX   contained in
                                                      is in D(Φ), and no other relation is inD(Φ).Thefor-
    V(θ) for every solution θ for (ψ, D)?                   (Φ)            ∃                     (  ) ∧
                                                      mula ψ   is of the form X1, ..., Xn,Z 1≤i≤n rvi Xi
                                                              (  (         ) →       ( ))          ∈
  When moving to CCSPs, these problems can be specialized 1≤j≤m rcj Xj1 ,Xj2 ,Xj3  unsat Z  ,whereXji
to take care of those solutions that are partial assignments.  
                                                      {X1, ..., Xn} is a variable such that Xji occurs in cj.
Indeed, knowing whether there are solutions in which some Let x be a truth value assignment for the variables in Φ.Let
                                                       x                                              
variable is not “active” may be quite relevant. For instance, θ denote the assignment for (ψ(Φ), D(Φ)) such that: Xi is
in product conﬁguration, one may be interested in ﬁnding the mapped to “true” (resp., “false”) in θ(x) iff Xi is true (resp.,
conﬁguration with the minimum number of (additional) com- false) x, and such that Z/1 is in θx iff x is not satisfying.
ponents that, yet, meets the users’ requirements.     Then, any solution θ for (ψ(Φ), D(Φ)) is such that V(θ) ⊇
                                                                                               
  In order to model scenarios as above, it is convenient to re- {X1, ..., Xn}; moreover, Z may not occur in V(θ ) if and
                                                                                                     
ﬁne the notion of solutions by means of some pre-order on only if there is a satisfying assignment x for Φ such that θ =
the set of all the possible partial assignments. Accordingly, a θx. To conclude the proof, we can hence take an assignment
           (  D)                                                                         x
solution θ for ψ, is said -minimal if for each solution θ , xu that does not satisfy Φ and notice that θ u is ⊆-minimal
                                       
it holds: θ θ . In particular, we next consider -minimal ⇔ there is no satisfying assignment for Φ.
                                           2
solutions, where is one of the following pre-orders : CHECKING≤   and CHECKING   are co-NP-complete: Mem-
subset minimality “⊆”: θ1 ⊆v θ2 iff V(θ1) ⊆V(θ2).     berships can be shown with similar arguments as above. The
                    ≤      ≤      |V(  )|≤|V(   )|    hardness of CHECKING≤  can be shown by observing that,
minimum cardinality “ ”: θ1  θ2 iff  θ1       θ2 .                         x                        x
                                                     in the above reduction, θ u is in fact ≤-minimal ⇔ θ u ⊆-
weighted cardinality “ ”: A weight w is attached to each      ⇔                                 Φ
    variable, and                                     minimal   there is no satisfying assignment for . Finally,
                                                    the hardness of CHECKING⊆ follows by assigning unitary
      θ1  θ2 iff        w(X)  ≤          w(X).
                  X∈V(θ1)          X∈V(θ2)            weights to all the variables of ψ(Φ).
  Next, we depict a complete picture of the complexity ﬁg-
ures arising in the CCSP setting.
                                                      5   Restricted Classes of CCSPs
Theorem  4. The complexity of CHECKING, RELEVANCE,    In the light of the intractability results of the previous section,
and NECESSITY  and of their variants for -minimal solu-
     ∈ {  ⊆    ≤     }                              it is relevant to single out classes of CCSPs that can be efﬁ-
tions (   “ ”, “ ”, “ ” ) is as shown in Figure 2.    ciently solved. To this aim, we next investigate how to adapt
Proof (Sketch). When no pre-order is considered, results eas- the approaches used in traditional CSPs, where tractable
ily derive from standard results on CSPs. Due to space limi- classes are identiﬁed by structural decomposition methods
tations, we next only report the proof sketches for the variants (e.g., [Pearson and Jeavons, 1997; Gottlob et al., 2000]).
of CHECKING.
                                                      5.1  The Hardness of Acyclic Structures
CHECKING⊆   is co-NP-complete: (Membership) Let (ψ, D)
be a CCSP instance, and let θ be a partial assignment such that Let ψ be a FO formula. The structure of constraints interac-
θ |= ψ. Consider the complementary problem of deciding tions in ψ can be represented by the primal graph G(ψ)=
whether there is an assignment θ such that (i) θ is a solution (V(ψ),E), where two variables occur in some edge of E if
for (ψ, D) and (ii) V(θ) ⊆V(θ) does not hold. Clearly, θ they appear together in a constraint atom in ψ. We next focus
can be guessed in NP, while (i) and (ii) can be checked in P. on classes of primal graphs having bounded treewidth.
  (Hardness) Deciding whether a Boolean formula in con- A  tree decomposition of a graph G =(V,E) is a pair
                                                                    =(     )
junctive normal form Φ=c1 ∧ ...∧ cm over the variables T,χ ,whereT      N,F   is a tree, and χ is a function as-
                                                      signing to each vertex p ∈ N a set of vertices χ(p) ⊆ V ,
  2In fact, these pre-orders have been widely used for reﬁning so- such that the following conditions are satisﬁed: (1) ∀b ∈ V ,
lution concepts in other AI frameworks.               ∃p ∈ N  such that b ∈ χ(p);(2)∀{b, d}∈E, ∃p ∈ N such


                                                IJCAI-07
                                                   91                                                      to sj,thenrSji(Xi) evaluates false over the database, and
                                                      the implication is trivially satisﬁed. Otherwise, i.e., if Xi is
                                                      mapped to sj, we must have that Xi with Ii ∈ Sj is mapped
                                                                                                  C
                                                      to sj as well, which in fact holds by construction of θ .
                                                        (⇐)  Assume there is a solution θ for (φ(I, S), D(I, S)).
                                                      We ﬁrst notice that the following properties hold on θ:(P1)
                                                      V(θ)={X1, ..., Xn};and(P2)ifXi   is mapped to sj in θ,
                                                      then Xi is mapped to sj, for each Ii ∈ Sj. Then, we can
                                                                  θ
                                                      build the set C = {Sj |∃Xi that is mapped to sj in θ},and
                                                      notice that it is an exact cover.
                                                      5.2  Tractable Classes
                                                      Since classical approaches fail in isolating classes of tractable
    Figure 3: An EXACT-COVER-BY-3-SETS instance.      CCSPs, we next propose and study a decomposition strategy
                                                      speciﬁc for ∃FO→,∧,+ formulas. We shall focus on plain
   {   }⊆    ( )   ∀  ∈          {  ∈    | ∈   ( )}
that b, d  χ p ;(3)  b  N,theset  p   N   b  χ p      formulas, where nesting of the implication connective is not
                                               
induces a connected subtree of T .Thewidth of T,χ is  allowed. Formally, a plain ∃FO→,∧,+ formula is of the form:
maxp∈N  |χ(p) − 1|,andthetreewidth of G (short: tw(G))is                 
the minimum width over all its tree decompositions.          ∃Xφ (X ) ∧    (bi(X ) →∃Yihi(X, Yi))
  Let L be a subset of FO. We denote by CSPbtw(L) the                   1≤i≤n
class of all the CSP instances (φ, D),whereφ is in L and      ≥ 0
        (G( ))                                        where n    ,andφ, bi, hi are in FO∧,+.
where tw   φ   is bounded by a ﬁxed constant. It is well- In fact, arbitrary formulas can be made plain by iteratively
              [                ]                                                              
known (see, e.g., Gottlob et al., 2000 )thatSATISFIABILITY substituting each subformula (φ → ((φ → φ ) ∧ φ )) with
can be solved in polynomial time on CSPbtw(∃FO∧,+).We (  ∧   →  ) ∧ ( →   )
                                CSP    (∃        )     φ   φ    φ      φ    φ  ; this transformation preserves
next show that this is not the case for btw FO→,∧,+ , the set of all the solutions, and is feasible in quadratic time.
even when further restricted on the class CSPac(∃FO→,∧,+)
                                                        Let ψ be a plain ∃FO→,∧,+. Constraint interactions in
of acyclic instances (i.e., those having treewidth 1). ψ can be represented with the implication graph IG(ψ)=
Theorem  5. SATISFIABILITY is NP-hard, even when re-  (V,E),whereV   =  V(ψ) ∪{b1, ..., bn}∪{h1, ..., hn} and
stricted on the class CSPac(∃FO→,∧,+).                edges have the form: (X, Y ) between pairs of variables oc-
                                                      curring in the same atom; (X, bi) if X occurs in some atom of
Proof. Let I = {I1, ..., In} be a set of elements, and let S = ( )                             (    )
{        }                                            bi; X, hi if X occurs in some atom of hi;and bi,hi ,for
 S1, ..., Sm be a number of sets each one containing exactly         ( (  ) →∃    (   ))
three elements in I. Recall that the EXACT-COVER-BY-3- each subformula bi X     Yihi X,Yi  . E.g., a portion
                                                      of the implication graph for the EXACT-COVER-BY-3-SETS
SETS problem of deciding whether there exists a set C⊆
                                                      instance in the proof of Theorem 5, which reveals the “hid-
{S1, ..., Sm} such that S ∈C Si = {I1, ..., In} and Si∩Sj =
                     i                                den” intricacy of the problem, is reported in Figure 3 (bj,i,i
∅, for each Si,Sj ∈Cwith i 
= j, is NP-complete.
                                                      and hj,i,i refer to the implication rSji(Xi) → rSji (Xi )).
  As an example instance, Figure 3 shows (on the left)
                                                        Then, the class CSP[i]btw(∃FO→,∧,+) is deﬁned as the set
the sets S1 = {I1,I2,I3}, S2 = {I4,I5,I6},andS3  =
                                                      of all the CCSPs instances (ψ, D),whereψ is a plain for-
{I3,I4,I5}. A solution consists of the set {S1,S3}.
                                                      mula in ∃   →,∧,+ such that  (IG( )) is bounded by a
  We build a CCSP instance (ψ(I, S), D(I, S)) as fol-          FO                tw    ψ
                                                      ﬁxed constant. An algorithm, called DecideSolutionk, decid-
lows.  For each item Ii, D(I, S) contains the relation
                                                      ing whether an instance in CSP[i]btw(∃FO∧,+) has a solution
rIi =   {(sj) |  Sj  ∈Sand   Ii  ∈  Sj}.   For each
                                                      is reported in Figure 4.
set Sj and item Ii  ∈  Sj,  D(I, S) contains the re-
                                                        The algorithm works on an tree decomposition of IG(φ) of
lation rSji =  {(sj)}.  And, no other relation is in
                                                      width k, whose shape is T =(N,F). Roughly, it is based
D(I, S). Moreover, the formula ψ(I, S) is of the form:
                                                    on a recursive procedure ﬁndSolution that receives in input
∃X1, ..., Xn, i rIi(Xi) ∧ i,i,j|{I ,I }⊆S (rSji(Xi) →
                               i i  j                avertexv  ∈ N. Each vertex is equipped with some nodes
    (  ))
rSji Xi  . Importantly, given that constraint relations in associated with variables of , denoted by V( ),aswellas
 (I S)          G((  (I S) D(I  S)))                                          φ              v
ψ  ,   are unary,   ψ  ,  ,    ,    does not contain  with nodes from {b1, ..., bn} and {h1, ..., hn}. The sets of
any edge and, hence, it is trivially acyclic.         these nodes are denoted by B( ) and H( ), respectively.
                                             I                                 v        v
  We now claim that: there exists an exact cover of with Basically, ﬁndSolution guesses for each child of (in
        S⇔(    (I S) D(I  S))                                                                    c   v
sets from    ψ   ,  ,    ,   admits a solution.         ), a partial assignment c for V( ) (conforming with the
  (⇒)    C                                       C    F                     θ       c
      Let  be an exact cover. Consider the assignment θ assignment for v), and two “states” bc and hc.Thestatebc
                   V( (I S)) =  V( C )                             θ
build as follows: (1) ψ ,         θ  ;and(2)Xi   is   (resp., hc) is a mapping from B(c) (resp., Hc)tothevalues
          j             i ∈  j      j ∈C
mapped to s if and only if I S and S    . Note that  {T, F, willF, wasF}. The mapping bc(bi)=T states that the
                  (   )             C
the conjunction i rIi Xi is satisﬁed by θ , by construction conjunct bi of φ must be true. In fact, when bc(bi)=T,
                 D(I  S)
of the relation rIi in , . Hence, it remains to show that it must be the case that the atoms in bi restricted over the
                        (  ji( i) →   ji ( i ))
each implication of the form rS X  rS   X     is sat- assignment for v are satisﬁed in D (short: D|= πbi (v) in B1).
isﬁed as well. We distinguish two cases. If Xi is not mapped Note that the information that bc(bi)=T is propagated to all


                                                IJCAI-07
                                                   92