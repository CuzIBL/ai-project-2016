                      Towards an Integration of Golog and Planning

      Jens Claßen+    and  Patrick Eyerich∗   and  Gerhard Lakemeyer+      and  Bernhard Nebel∗
             + Department of Computer Science,    RWTH Aachen, 52056 Aachen, Germany
                                 classen|gerhard@cs.rwth-aachen.de
         ∗ Department of Computer Science, University of Freiburg, 79110 Freiburg, Germany
                              eyerich|nebel@informatik.uni-freiburg.de

                    Abstract                            While there are passengers to be served do the following:
                                                      choose a passenger, plan a route to her location, follow that
    The action language Golog has been applied suc-   route, pick up the passenger, plan a route to her destination,
    cessfully to the control of robots, among other   follow that route and drop her off.
    things. Perhaps its greatest advantage is that a    Planning can easily be speciﬁed in Golog as trying out
    user can write programs which constrain the search actions nondeterministically in a forward-search manner un-
    for an executable plan in a ﬂexible manner. How-  til a given goal is satisﬁed [Reiter, 2001]. While possi-
    ever, when general planning is needed, Golog sup- ble in principle, this quickly becomes infeasible, in our ex-
    ports this only in principle, but does not measure ample even for small grid worlds. Modern planners like
    up with state-of-the-art planners. In this paper we FF [Hoffmann and Nebel, 2001] or HSP2 [Bonet and Geffner,
    propose an integration of Golog and planning in the 2001], on the other hand, are capable of handling much larger
    sense that planning problems, formulated as part of planning problems. So it seems natural to try to combine
    a Golog program, are solved by a modern planner   Golog with a modern planner. Here we focus on planners
    during the execution of the program. Here we fo-  for the ADL [Pednault, 1989] subset of the plan language
    cus on the ADL subset of the plan language PDDL.  PDDL  [Fox and Long, 2003].
    First we show that the semantics of ADL can be      For the integration, at least two issues arise: differences in
    understood as progression in the situation calculus, expressiveness and the correctness of the embedding. While
    which underlies Golog, thus providing us with a   BATs in the situation calculus can use the full power of ﬁrst-
    correct embedding of ADL within Golog. We then    order logic, ADL descriptions are more restricted. For exam-
    show how Golog can be integrated with an existing ple, they assume a ﬁnite domain and the initial state consists
    ADL planner for closed-world initial databases and of literals only. As we will see, it is not very difﬁcult to map
    compare the performance of the resulting system   ADL into BATs. For the purposes of this paper, it will sufﬁce
    with the original Golog.                          to simply use a BAT that is the result of such a mapping; a
                                                      companion paper [Eyerich et al., 2006] discusses the expres-
1  Introduction                                       siveness issue in more detail.
The action language Golog [Levesque et al., 1997] has been As for correctness, we need to make sure that a plan re-
applied successfully to the control of robots [Burgard et al., turned by an ADL planner for a given goal and state descrip-
1999], among other things. It is based on Reiter’s version of tion is also a legal plan in the situation calculus for the cor-
the situation calculus [Reiter, 2001], where so-called basic ac- responding situation. The semantics of PDDL’s ADL sub-
                                                         [                ]
tion theories (BATs), which deﬁne action preconditions and set Fox and Long, 2003 is given in terms of state transitions
                                                                                                [
effects together with an initial situation, are combined with as an adaptation of Lifschitz’ semantics of STRIPS Lifschitz,
                                                          ]
a programming language, which offers imperative program- 1986 . Roughly, a state consists of a set of literals, and a tran-
ming constructs as well as non-deterministic action choices. sition for a plan operator is obtained by adding and deleting
                                                                                                   [    ]
Perhaps the greatest advantage of Golog is that a user can literals. By extending earlier work by Lin and Reiter 1997 ,
write programs which constrain the search for an executable we are able to show that the ADL semantics is captured pre-
plan in a ﬂexible manner. However, when general planning is cisely by progression in the situation calculus, which refers
needed, Golog supports this only in principle through the use to updating the description of an initial situation so that con-
of non-deterministic actions, but does not measure up with clusions about the future that can be drawn using the updated
state-of-the-art planners.                            theory are the same as those drawn from the theory before the
                                                      update. As a nice side-effect, we obtain a purely declarative
  As a running example, consider a taxi-driver agent in a grid                                1
world, whose task it is to deliver passengers to their destina- semantics of ADL within the situation calculus.
tions. Its actions are pickup, dropoff, and moving up, down, 1Pednault’s [1989; 1994] original semantics for ADL deﬁned op-
left or right one square in the grid. In Golog, the agent’s high- erators similarly by additions and deletions, however of tuples in
level control program can then be speciﬁed like this: relations and functions of ﬁrst-order structures. He also derived sit-

                                                 IJCAI07
                                                  1846  To obtain our results, we use a variant of the situation where σ ∈ R∗ is considered a sequence of ground actions,
calculus called ES recently proposed by Lakemeyer and and ρ =  F (r1,...,rk) is a k-ary ground ﬂuent atom. A
Levesque [2004]. Compared to Reiter’s situation calculus, world then is a mapping from P to {0, 1}.
this has at least two advantages: for one, the translation of First-order variables are interpreted substitutionally over
ADL into the new situation calculus is simpler as there are no the rigid terms R,i.e.R is treated as being isomorphic to a
situation terms to worry about (in ES , situations occur only in ﬁxed universe of discourse. This is similar to L [Levesque
the semantics); for another, semantic deﬁnitions like progres- and Lakemeyer, 2001], where standard names are used as
sion become simpler as it is no longer necessary to consider the domain. Given a world w, for any sentence α,wede-
arbitrary ﬁrst-order structures but only certain ones over a ﬁne w |= α as w, |= α where
ﬁxed universe of discourse. These simpliﬁcations do not lead w, σ |= F (r1,...,rk) iff w[σ:F (r1,...,rk)] = 1;
to a loss of expressiveness. In fact, Lakemeyer and Levesque w, σ |=(r1 = r2) iff r1 and r2 are identical;
[2005] showed that ES captures precisely the non-epistemic w, σ |=(α ∧ β) iff w, σ |= α and w, σ |= β;
fragment of the situation calculus and Golog.          w, σ |= ¬α iff w, σ |= α;
                                                                               x
  After establishing that ADL plans are correct for the cor- w, σ |= ∀x. α iff w, σ |= αr ,foreveryr ∈ R;
responding BAT, we turn to the embedding of an ADL plan- w, σ |=[r]α iff w, σ · r |= α;
ner into Golog. In particular, we use the latest version of w, σ |= 2α iff w, σ · σ |= α,foreveryσ ∈ R∗.
   [                      ]                                       x
FF Hoffmann and Nebel, 2001 together with an implemen- The notation α means the result of simultaneously replacing
                [                ]                                t
tation of IndiGolog Sardina et al., 2004 , which incorporates all free occurrences of the variable x by the term t.
on-line execution, Reiter’s forward-search planner and pro- When Σ is a set of sentences and α is a sentence, we write
gression. We present ﬁrst experimental results showing the Σ |= α (read: Σ logically entails α) to mean that for every w,
pay-off of using Golog with FF versus pure Golog.       w |= α        α ∈ Σ     w |= α.       |= α
                                            ES        if       for every     ,then       Further    (read:
  The paper proceeds as follows. We ﬁrst introduce and α is valid) abbreviates {} |= α.
show how BATs are formulated in this logic. Next, we deﬁne
ADL problem descriptions and provide a formal semantics Basic Action Theories: Basic action theories can be de-
by mapping them into basic action theories. In Section 4, we ﬁned similar to Reiter’s: A set of sentences Σ is a basic ac-
deﬁne progression and establish the correctness of updating tion theory iff it only mentions the ﬂuents in a given set F
                                                                     Σ=Σ     ∪ Σ  ∪ Σ
an ADL state with respect to progression. In Section 5, we and is of the form 0 pre  post,where
discuss the integration of Golog and FF. Then we conclude. • Σ0 is a ﬁnite set of ﬂuent sentences,
                                                        • Σ                        3 2    (a) ≡ π      π
2  The logic  ES                                            pre is a singleton of the form Poss  ,where
                                                          is ﬂuent with a being the only free variable;
The language is a ﬁrst-order modal dialect with equality,
                                                        • Σ   is a ﬁnite set of successor state axioms of the form4
predicate and function symbols. For simplicity we assume    post
                                                          2[a]F ( x) ≡ γF , one for each ﬂuent F ∈F\{Poss},
that all predicates are ﬂuent and that all function symbols are
                                                          where γF is a ﬂuent formula whose free variables are
rigid, i.e. predicates may be changed by actions while func-
                                                          among  x and a.
tions may not. The logical connectives are ∧, ¬, ∀, together
                                                                      Σ                            Σ
with the modal operators 2 and [r] where r may be any term, The idea is that 0 represents the initial database, pre is
                 2                                                                  Σ
including a variable. Other connectives like ∨, ⊃, ≡,and∃ one large precondition axiom and post the set of successor
are used as the usual abbreviations.                  state axioms for all ﬂuents in F (incorporating Reiter’s
  Terms and formulas are built from these primitives in the solution [Reiter, 2001] to the frame problem).
usual way. We let R denote the set of all ground terms.
For simplicity, instead of having variables of the action 3 ADL
sort distinct from those of the object sort as in the situation PDDL’s ADL subset goes beyond STRIPS by supporting
calculus, we lump both of these together and allow to use any equality, conditional effects and typing. Also, preconditions
                                    [r]α    α
term as an action or as an object. We read as “ holds may contain negation, disjunction and quantiﬁers.
after action r”and2α as “α holds after any sequence of
actions”. We call a formula without free variables a sentence ADL Problems: These are deﬁned by
and a formula ﬂuent, when it does not contain 2 and [r] 1. a ﬁnite list of types τ1,...,τl and Object; along with
operators and does not mention the special predicate Poss this a ﬁnite list of statements of the form
(which is used to denote executable actions). In addition, we
                                                                         τi:(either τi ···τi )        (1)
introduce the following special notation: A type τ is a unary                     1     ki
predicate; we write ∀x:τ.φ instead of ∀x. τ(x) ⊃ φ.
                                                          deﬁning τi as the union of the τij ;aprimitive type is
The semantics: Intuitively, a world w will determine which one that does not appear on the left-hand side of such a
ﬂuents are true, but not just initially, also after any sequence deﬁnition and is distinct from Object;
of actions. Formally, let P denote the set of all pairs σ:ρ
                                                         3Free variables are understood as universally quantiﬁed from the
uation calculus formulas from ADL operators, but did not show the outside; 2 has lower syntactic precedence than the logical connec-
semantic correspondence between the two.              tives, i.e. 2Poss(a) ≡ π stands for ∀a.2(Poss(a) ≡ π).
  2The original ES also considers epistemic operators which we do 4The [t] construct has higher precedence than the logical connec-
not need here and are left out.                       tives. So 2[a]F (x) ≡ γF abbreviates ∀a.2([a]F (x) ≡ γF ).

                                                 IJCAI07
                                                  1847                                                           ∃z        . ∃z       .  (y ,z ,z ) ∧ (y ,z ,z )
 2. a ﬁnite list of ﬂuent predicates F1,...,Fn;              1:Xcoord   2:Ycoord At  1  1 2   At  2  1  2
                                                             ∧¬∃z            .  (y ,z ),
                     Fj             τj ,...,τj                     3:Passenger In 1 3
    associated with each a list of types 1   kj
                                                           In(y1,y2))
    (one for each argument of Fj , abbreviated as τ Fj )
                                                          Picking someone up is only possible when the taxi is at
 3. a ﬁnite list of objects with associated primitive types
    o  τ ,...,o τ                                         the same location as the passenger and there is noone
     1: o1     k: ok (object symbols are constants);      already in the taxi (we assume it can only hold one
 4. a ﬁnite list of ADL operators A1,...,Am (see below);  person at a time).
 5. an initial state I (see below) and                    drop passenger =(y1:Taxi, TRUE,
                                                           ∀x      . ∀x         .
 6. a goal description G in form of a precondition formula.   1:Taxi  2:Passenger
                                                             (x1 = y1 ∧ In(x1,x2)) ⇒¬In(x1,x2))
I and G may only contain the symbols from items 1 to 3. We
                                                          Finally, it is always possible to drop the taxi’s occupant
further require that all the symbols are distinct. In particular,
                                                          (if any) at its current location.
this forbids using a type also as an Fj and using an object also
as an Ai. All objects are implicitly of type Object,whichisa 2. Initial State (in a closed world):
supertype of all other types. In the case of closed-world plan- I = {At(taxi1, 5, 7), At(passenger1, 3, 1),
ning, the initial state I is simply given by a ﬁnite set of ground Destination(passenger1, 1, 1),
ﬂuent atoms F ( r), otherwise it is a set of ground literals.    Connects(1, 1, east, 2, 1),...
  An ADL operator A is a triple ( y: τ,πA,A),where y: τ is      Connects(10, 10, north, 10, 9)}
                                  5
a list of variables with associated types, πA is a precondi- 3. Goal description:
tion formula and A an effect formula, both with free vari- G = ∀p         . ∀x      . ∀y      .
            y     π                                              :Passenger   :Xcoord   :Ycoord
ables among .Both  A and A have to be constructed using           Destination(p, x, y) ⊃ At(p, x, y)
only the  y and the symbols from items 1 to 3 of the problem
description. The name of the operator A has to be a p-ary In [Fox and Long, 2003] a state-transition semantics is
function symbol, where p is the number of parameters of A. deﬁned for applying ADL operators in the closed-world
                                                                                                       I
  Precondition formulas are the following: Every atomic for- case. The idea is roughly this: given any closed state ,
                                                      represented as a set of ground atoms, and an operator A(p )
mula F (t) and every equality atom (t1 = t2), where each of
                                                      whose precondition is satisﬁed in I, then the application of
the ti is either a variable or a constant, is a precondition for-
                                                      A(p ) results in a new state I which is obtained from I by
mula. If φ1 and φ2 are precondition formulas, then so are                          −
                                                      deleting all those Fj ( o) where γ ( o,p  ) holds in I and
φ1 ∧ φ2, ¬φ1 and ∀x:τ.φ1. Without loss of generality, we as-                       Fj ,A
                                                                         γ+   ( o,p  )
sume that an effect formula is a conjunction of effects of the adding all those where Fj ,A holds.
following forms, at most one of each kind for each ﬂuent Fj:
                                                      4   Mapping ADL to     ES
                    +
          ∀x j :τ F . (γ (x j , y) ⇒ Fj (x j)) ,
                j   Fj ,A                             In this section, we generalize the approach of [Lin and Reiter,
          ∀x  τ  . (γ−  (x  , y) ⇒¬F (x  ))     (2)
             j : Fj Fj ,A j        j  j               1997] and show that applying ADL operators corresponds
                                                      to a certain form of ﬁrst-order progression in ES .Webegin
           γ ⇒   ψ
The notation       stands for a conditional effect: if the by constructing, given an ADL problem description, a
                  γ
precondition formula holds before performing the action, corresponding basic action theory Σ.
then ψ will become true afterwards.
                                                      The Successor State Axioms Σpost: It is not a coincidence
An Example:   Let us consider the taxi domain. For reasons that the normal form (2) resembles the effect axioms used by
of space we only consider the operators, initial state, and goal Reiter to construct his successor state axioms as a solution to
description:                                          the frame problem. Generalizing his approach (also applied
 1. Operators:                                        in [Pednault, 1994]), we transform a set of operator descrip-
                                                      tions to a set of successor state axioms as follows. Let
    move =(y1:Taxi,y2:Direction, TRUE,                               
                                                             + def                             +
     ∀x       . ∀x        . ∀x       .                      γ   =              ∃y i.a = Ai(y i) ∧ γ
       1:Object   2:Xcoord   3:Ycoord                        Fj                                Fj ,Ai (3)
       ((∃z       . ∃z       .                                     +
           1:Xcoord   2:Ycoord                                    γ    ∈NF(Ai)
           (y ,z ,z ) ∧       (z ,z ,y ,x ,x )∧                    Fj ,Ai
         At  1  1 2   Connects  1  2  2  2  3              +
                                                          γ     ∈ NF(Ai)
           (x1 = y1 ∨ In(y1,x1))) ⇒ At(x1,x2,x3)) ∧   By “ Fj ,Ai        ” we mean that there only is a disjunct
                                                                                        +
     ∀x1:Object. ∀x2:Xcoord. ∀x3:Ycoord.                      A          6            γ
                                                      for those i for which there is some Fj ,Ai in the effect of
       ((∃z1:Xcoord. ∃z2:Ycoord.                                                    −
                                                      Ai. Using a similar deﬁnition for γF , we get the successor
         At(y1,z1,z2) ∧ Connects(x2,x3,y2,z1,z2)∧                                    j
                                                      state axiom for Fj:
           (x1 = y1 ∨ In(y1,x1))) ⇒¬At(x1,x2,x3)))
                                                                         +                        −
                                                            2[a]Fj (x j) ≡ γ ∧ τ F (x j) ∨ Fj (x j ) ∧¬γ
    It is always possible to move a taxi into one of the four            Fj    j                 Fj   (4)
    main cardinal directions; a move that would lead out of               7
                                                      The additional conjunct τ Fj (x j ) ensures that Fj can only
    the grid has no effect. After moving, the location of the become true for instantiations of the x j that are consistent
    taxi and every passenger in it has changed accordingly. with the type deﬁnitions for Fj ’s arguments.
    pickup =(y1:Taxi,y2:Passenger,
                                                         6
                                                         Recall that (2) does not require a conjunct for each Fj and Ai.
  5                                                      7 
   y:τ is to be understood as a list of pairs yi:τi.   τ(t) abbreviates τ1(t1) ∧···∧τk(tk).

                                                 IJCAI07
                                                  1848  Since our semantics deﬁnes predicates to be ﬂuent and in the initial situation (there are no 2 operators here), the spe-
types have to be situation-independent, we additionally in- cial form of Σpost deﬁned earlier ensures that these facts will
clude for each type τi a successor state axiom        remain true in successor situations.
                                                        To encode the actual initial state, we include for each Fj9
                 2[a]τi(x) ≡ τi(x).             (5)
                                                                Fj(x j ) ≡ (x j = o 1 ∨···∨x j = o k ) (11)
Applying all of the above to the example, we get                                              o
  +
 γ  = ∃y .∃y .a=      (y ,y ) ∧                                                         Fj(o 1),...,Fj(o k )
  At    1   2     move  1  2                          in case of a closed world, assuming that         o
        (∃z1:Xcoord. ∃z2:Ycoord.                      are all atoms in I mentioning Fj. In an open-world problem,
          At(y1,z1,z2) ∧ Connects(z1,z2,y2,x2,x3)∧    we instead include
            (x1 = y1 ∨ In(y1,x1))),                            (x  = o  ∨···∨x  = o  ) ⊃ F (x  ) ∧
  −                                                              j   1        j    ko     j  j
 γ  = ∃y1.∃y2.a=  move(y1,y2) ∧                                                                      (12)
  At                                                           Fj(x j ) ⊃¬(x j = p 1 ∨···∨x j = p kp )
        (∃z1:Xcoord. ∃z2:Ycoord.
          At(y1,z1,z2) ∧ Connects(x2,x3,y2,z1,z2)∧    if the o i are all the objects in positive literals Fj (o i) and the
            (x1 = y1 ∨ In(y1,x1))),                   p i are all the objects in negative literals ¬Fj (p i) in I.In
 γ+ = ∃y .∃y .a=       (y ,y ),                                                            Σ
  In    1   2     pickup 1  2                         our closed-world example, we end up with a 0 consisting of:
 γ− = ∃y .a=               (y ) ∧
  In    1     drop passenger 1                         At(x1,x2,x3) ⊃ (Object(x1) ∧ Xcoord(x2) ∧ Ycoord(x3)),
        ∀x      . ∀x         . (x = y ∧   (x ,x ))
           1:Taxi  2:Passenger  1    1  In  1  2       In(x1,x2)   ⊃  (Taxi(x1) ∧ Passenger(x2)),
Notice that, as stated above, not all operators are mentioned Taxi(x) ≡ (x = taxi1),
  γ+
in At , but only those that possibly cause a positive truth Passenger(x) ≡ (x = passenger1),
value for At. Therefore, the construction presented here still Object(x) ≡ (Taxi(x) ∨···∨Passenger(x)),
                                           Σ
incorporates a solution to the frame problem. Our post now At(x1,x2,x3) ≡ ((x1 = taxi1 ∧ x2 =5∧ x3 =7)∨
consists of the following sentences (among others8):                  (x1 = passenger1 ∧ x2 =3∧ x3 =1)),
 2[a] (x ,x ,x ) ≡  γ+ ∧       (x ) ∧      (x )        In(x1)      ≡  FALSE
     At 1  2   3     At  Object  1   Xcoord  2
     ∧       (x ) ∨   (x ,x ,x ) ∧¬γ−,
       Ycoord  3    At  1  2  3     At                Correctness: First we note some simple consequences of
 2[a]In(x1,x2) ≡
    +                                         −       the above construction:
   γ  ∧ Taxi(x1) ∧ Passenger(x2) ∨ In(x1,x2) ∧¬γ ,
    In                                        In      Lemma 1   Let A(p ) be an action (i.e. an operator and object
 2[a]Taxi(x1) ≡ Taxi(x1),
                                                      symbols as instantiations for A’s parameters) and  o be object
 2[a]Passenger(x1) ≡ Passenger(x1)
                                                      parameters (i.e. constants) for the ﬂuent Fj.Then
The Precondition Axiom Σpre: A precondition axiom can
                                                        1. Σ0 ∧τ F ( o) is satisﬁable iff the  o are of the correct types
be obtained by a similar case distinction; in the example:       j
                                                          (according to the ADL problem description).

π =  ∃y1:Taxi.∃y2:Direction.a= move(y1,y2) ∨                     ∗ xj a    ∗
                                                        2. Σ0 |= γF      iff γF ,A( o,p  ) is satisﬁed in the origi-
     ∃y1:Taxi.∃y2:Passenger.a= pickup(y1,y2)                      j oA(p)  j
       ∧∃z1:Xcoord.∃z2:Ycoord. At(y1,z1,z2)               nal ADL state I,where∗∈{+, −}.
         ∧   (y ,z ,z ) ∧¬∃z          .  (y ,z ) ∨
           At  2  1 2       3:Passenger In 1  3         3. Σ0 |= Poss(A(p )) iff πA(p ) is satisﬁed in the original
     ∃y     .a=               (y )
       1:Taxi    drop passenger 1                         ADL state I and the p  are of the correct types.
                                                (6)
                                                      We are now  ready to show the correspondence between
The Initial Description Σ0: We ﬁnally not only have to ADL’s state-transition semantics of adding and deleting lit-
encode the information about the initial world state, but also erals and ﬁrst-order progression in ES . The deﬁnition below
about the typing of objects:                          is derived from Lin and Reiter’s original proposal of progres-
                                                      sion, but it is simpler due to the fact that we need not consider
            τi(x) ≡ (τi (x) ∨···∨τi (x))        (7)
                     1           ki                   arbitrary ﬁrst-order structures.
    Fj (xj ,...,xj ) ⊃ (τj (xj ) ∧···∧τj (xj ))
         1      kj      1   1         kj   kj   (8)     A set of sentences Σr is a progression of Σ0 through a
                                                                 r    Σ       Σ
          τi(x) ≡ (x = oj ∨···∨x  = oj )              ground term (wrt  pre and post)iff:
                        1            ki         (9)
                                                                       Σr            r
           Object(x) ≡ (τ1(x) ∨···∨τl(x))      (10)     1. all sentences in are ﬂuent in
                                                          (i.e. equivalent to [r]φ for some ﬂuent formula φ);
Σ0 contains one sentence (7) for each “either” statement (1).
                                                        2. Σ0 ∪ Σ  ∪ Σ   |=Σr;
We further have one sentence of the form (8) for each type       pre  post
                                                                        w      w  |=Σ  ∪ Σ  ∪ Σ
declaration of predicate arguments. For each primitive type 3. for every world r with r r pre   post,thereis
τi        oj ,...,oj                                      aworldw  with w |=Σ0 ∪ Σ  ∪ Σ   such that:
  such that 1      ki are all objects declared to be of that                      pre   post
                                                                                           
type, we include a sentence of the form (9). (10) ﬁnally de- wr,r· σ |= F (t) iff w, r · σ |= F (t)
clares Object to be the union of all other types. Although the
                                                                σ ∈ R∗                       F ( t)
above sentences in themselves only establish type consistency for all  and all primitive formulas such that
                                                          F ∈F(including  Poss).
  8Here and in the following we omit axioms concerning the non-
                                                         9                      
changing predicates Connects and Destination as well as the types If r abbreviates r1,...,rk and t stands for t1,...,tk,then(r =
                                                      
Xcoord, Ycoord and Direction which encode the grid structure. t) means (r1 = t1) ∧···∧(rk = tk).

                                                 IJCAI07
                                                  1849Intuitively, for an observer in the situation after r was per- [m](At(x1,x2,x3)≡((x1 = taxi1 ∧ x2 =5∧ x3 =8)
formed (and only looking “forward” in time), it is impossible     ∨ (x1 = passenger1 ∧ x2 =3∧ x3 = 1))),
to distinguish between a world satisfying the original theory [m](In(x1)≡FALSE)
Σ                   Σ ∪ Σ   ∪ Σ
  and one that satisﬁes r pre  post.                  Theorem  2 tells us that, for a closed initial state, the
  For a basic action theory that is the translation from an application of an ADL operator under the state-transition
ADL problem, it is quite easy to obtain such a progression semantics is the same as progressing the initial situation of
given an action A(p ) and an ADL state description I.Pro- the corresponding BAT. In the open-world case, it prescribes
        Σ  ∪Σ   |=    (A(p ))
vided that 0  pre Poss      , we do the following for all what the result of applying the ADL operator should be. It is
(ﬁnitely many)  o and Fj such that Fj ( o) is type-consistent:10 easy to show that the theorem extends to arbitrary sequences
            + xj a                                   of actions and hence that legal plans under ADL are also
 1. If Σ0 |= γ      :addFj( o).                                          11
            Fj oA(p)                                legal plans in the BAT.

            − xj a
      Σ0 |= γ             Fj( o)
 2. If      Fj oA(p): delete .                      5   Golog with FF

For open worlds, additionally delete ¬Fj ( o) in the ﬁrst case Golog is a programming language completely deﬁned within
                                                                                          [
and add ¬Fj ( o) in the second case. If we then denote the set the situation calculus. As shown in Lakemeyer and
                     Adds                             Levesque, 2005], it can be as well deﬁned directly within
of literals to be added by and the ones to be deleted by ES
Dels, the new state description is                      . At its core, Golog uses a basic action theory to de-
 I =(I \ Dels) ∪ Adds.                               ﬁne the meaning of its (primitive) actions and the initial sit-
                                                      uation. Based on these primitives, complex actions can be
                     I
In the closed-world case, corresponds precisely to the ADL formed using constructs from imperative programming such
                               A(p )  I
state which results from applying the to according to as sequence (;), if-then-else, while-loops and procedures.
the state-transition semantics of [Fox and Long, 2003]. In addition, non-deterministic action choices and the non-
                                                                                   πx
Theorem 2 Let I be obtained as described above, given an deterministic choice of arguments ( ) offer some ﬂexibility
ADL problem and a ground action r = A(p ). Further let when executing a program, including full planning over the
                                   
Σr =  {[r]ψ | ψ ∈ Σ0(I )}, where Σ0(I ) is the result of primitive actions.
applying the constructions in (7)-(12) to I instead of I.For For our experimental results, we are using an Eclipse
                                    +     −  a
all Fj, let the consistency condition |= ¬(γF ∧ γF )r hold. Prolog implementation of IndiGolog, courtesy of Hector
                                     j     j          Levesque; see [Sardina et al., 2004] for details of the seman-
Then Σr is a progression of Σ0 through r in the closed-world
case.                                                 tics. IndiGolog features on-line execution, where a program
  In the open-world case, this holds under the additional is executed step-by-step, and progression in the sense of the
condition that whenever for some γ∗ (with ∗∈{+, −})itis previous section, that is, the initial state is updated after each
                             Fj                       execution of a primitive action. IndiGolog also includes an
                 ∗ xj a                     ∗ xj a
          Σ0∪{γ       }               Σ0 |= γ     .
the case that   Fj or is satisﬁable, then   Fj or   implementation of Reiter’s forward-search planner (speciﬁed
                                                      as a Golog procedure), which can be called as achieve(G)
Let us consider progression in our closed-world example.
                                                      for a given goal formula G, and which returns as a plan a se-
Suppose we want to progress through move(taxi1, south)
                                                      quence of actions P , if one is found. P then takes the place of
(m, for short). First note that Σ0 ∪ Σ |= Poss(m).The
                                 pre                  achieve(G) in the program, and step-wise execution resumes,
reader may verify (assuming an appropriate axiomatization
                                                      starting with the execution of P .
of Connects)that
        +ax1  x2  x3         −ax1   x2 x3               The underlying BAT is the translation of the ADL problem
 Σ0 |= γ           ,  Σ0 |= γ
        At m taxi1 58        At m taxi1 57            description for the taxi domain. The following program is
and that these are all type-consistent instantiations for used throughout our tests:
x ,x ,x          γ+a             γ−a
 1  2  3 such that At m respectively At m are entailed by while ∃p:Passenger. ¬atDest(p) do
Σ                                           γ+
 0.  Because there are no disjuncts for move in In and   (πp:Passenger)
γ−  γ+a     γ−a                                            ¬      (p)?;       (         (    ,p));
 In , In m and In m are not entailed for any instantiation of atDest   achieve atSamePos taxi1
x1,x2. The new state description then is                   pickup(taxi1,p); achieve(atDest(p));
 I = {At(taxi1, 5, 8), At(passenger1, 3, 1),              drop passenger(taxi1)
       Destination(passenger1, 1, 1),                  endWhile
       Connects(1, 1, east, 2, 1),...                 Here, atDest(p) stands for
               (10, 10,   , 10, 9)}
       Connects       north                            ∃x:Xcoord. ∃y:Ycoord. At(p, x, y) ∧ Destination(p, x, y)
We obtain the progression Σm consisting of            and atSamePos(t, p) abbreviates
 [m]( (x ,x ,x ) ⊃ (     (x ) ∧      (x )
     At 1  2  3     Object 1   Xcoord  2               ∃x:Xcoord. ∃y:Ycoord. At(p, x, y) ∧ At(t, x, y).
                                ∧       (x ))),
                                  Ycoord  3           The following table summarizes, for varying grid sizes and
 [m]( (x ,x )⊃(    (x ) ∧         (x ))),
     In 1  2   Taxi  1   Passenger 2                  number of passengers, the run-time behavior (in seconds)
 [m](   (x)≡(x =     )),
     Taxi        taxi1                                of the original IndiGolog versus IndiGolog where achieve
 [m](        (x)≡(x =           )),
     Passenger        passenger1                      is replaced by a call to the ADL planner FF [Hoffmann and
 [m](Object(x)≡(Taxi(x) ∨···∨Passenger(x))),
                                                        11Legal means that all actions are executable and that the goal is
  10
   i.e. those Fj (o) such that Σ0 ∧ τFj (o) is satisﬁable satisﬁed in the ﬁnal state or progressed situation.

                                                 IJCAI07
                                                  1850