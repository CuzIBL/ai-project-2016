      Sequential-Simultaneous         Information      Elicitation   in Multi-Agent     Systems

                                  Gal Bahar  and  Moshe   Tennenholtz
                           Faculty of Industrial Engineering and Management
                                Technion–Israel  Institute of Technology
                                           Haifa 32000, Israel


                    Abstract                          setting ﬁts into the context of mechanism design (see [Mas-
                                                      Colell et al., 1995], Vol. 23), a subject of great interest to the
    We introduce a general setting for information elic- synergy between AI and game theory (see [Monderer et al.,
    itation in multi-agent systems, where agents may be 2000]).
    approached both sequentially and simultaneously     The particular (although general) setting we study is the
    in order to compute a function that depends on their following. Each agent has a secret which is accessible only
    private secrets. We consider oblivious mechanisms to him. However, access to that secret is costly and agents
    for sequential-simultaneous information elicitation. may choose to access it or not. Thus accessing one’s own
    In such mechanisms the ordering of agents to be   private information becomes a strategic question. This ap-
    approached is ﬁxed in advance. Surprisingly, we   proach generates a natural tension between the socially (and
    show that these mechanisms, which are easy to rep- even privately) optimal action, which is to compute the joint
    resent and implement are sufﬁcient for very general function correctly, and agents’ incentive to free ride. In order
    settings, such as for the classical uniform model, to overcome this tension one may need to design a mecha-
    where agents’ secret bits are uniformly distributed, nism to prevent (some or all) agents from free-riding, elicit
    and for the computation of the majority function  agents’ secrets and execute the desired computation.
    and other classical threshold functions. Moreover,  As in previous work in this regard (e.g. [Smorodinsky
    we provide efﬁcient algorithms for the veriﬁcation and Tennenholtz, 2004]) the class of functions we consider is
    of the existence of the desired elicitation mecha- that of anonymous functions. An anonymous function is one
    nisms, and for synthesizing such mechanisms.      where the function’s value does not depend on the identity of
                                                      the agents but on the secrets only. In other words, a permu-
                                                      tation of the agents’ secrets will not change the value of the
1  Introduction                                       function. This class of functions is quite elementary and often
Information elicitation in multi-agent systems deals with the used in models. Among the anonymous functions are major-
aggregation of information from agents in order to compute a ity, consensus, average, variance, order statistic, percentile
desired function [Conen and Sandholm, 2001; Sunderam and and more.
Parkes, 2003; Parkes, 1999; Boutilier et al., 2003; Smorodin- Previous work has shown the power of sequential informa-
sky and Tennenholtz, 2004; Shoham and Tennenholtz, 2002; tion elicitation. By approaching the agents sequentially, we
McGrew  et al., 2003; Halpern and Teague, 2004]. In the can in some cases incent agents to access their secrets, where
general setting we consider in this paper there are n agents they would not do so if approached simultaneously. The ba-
(players) who hold some private information (secrets). The sic intuition behind this approach is that some agents may be
agents would like to compute, jointly, a function which in- willing to access their secrets since this is not too costly for
put is the vector of n secrets.1 In addition, there exist a dis- them, while others will not agree to access their secrets un-
tinguished reliable agent (aka the center), who may be used less they are pivotal (given that their costs for accessing their
for extracting information from the agents. The center’s aim secrets is high). Sequential mechanisms take advantage of
is to devise a mechanism that will yield to the desired com- this structure, by carefully selecting the identity of the agent
putation. In this paper we consider a strategic setting. We to be approached at each point, given the available informa-
assume that the agents are selﬁsh and are driven by utility tion. In this paper we consider a more general approach:
maximization considerations. On one hand, they would like agents can be approached both simultaneously and sequen-
to receive the value of the multi-party computation, but on the tially. That is, we consider sequential mechanisms where at
other hand they may not want to contribute to this computa- each point a set of agents is approached. The decision on the
tion, but rather free-ride on other agents’ efforts. Hence, our set of agents to be approached is based on the available in-
                                                      formation. As it can be shown (and is illustrated in Section
  1This setting is fundamental not only to AI, but to computer sci- 2) this kind of mechanisms, which we refer to as sequential-
ence in general; see the discussion in [Linial, 1994]. simultaneous mechanisms, allows more effective informationelicitation than either sequential or simultaneous information istence of a desired elicitation process implies that it can be
elicitation. The major aim of this paper is to identify condi- done by a corresponding oblivious mechanism, which we can
tions for the existence of successful sequential-simultaneous efﬁciently compute. The uniform model is discussed in Sec-
elicitation mechanisms, and devising algorithms which out- tion 4, and the majority function, as well as extensions to
put the desired mechanism when exist.                 other threshold functions are discussed in Section 5. In all
  As the reader would notice, our objective is quite ambi- cases efﬁcient algorithms are provided.
tious. In particular, a sequential-simultaneous mechanism The proofs of many of our results are non-trivial, and are
may be a complex decision tree, which maps any possible based on a series of propositions that are omitted from this
history observed to the set of agents to be approached given version of the paper due to lack of space.
that history. This gives rise to the idea of considering a partic-
ular kind of such mechanisms, which we refer to as Oblivious 2 The General Model
Mechanisms. In an oblivious mechanism the ordering of the
agents is ﬁxed in advance and does not depend on previous Let N={1,....,n}, n ≥ 2, be a ﬁnite set of agents. Each agent
history. Naturally, if successful elicitation can be established j has a private secret sj ∈ {0, 1} that he may compute (i.e.
by such a mechanism, then it is also easy to represent and im- access in order to learn its value). Let 0.5 ≤ q < 1 be the
                                                                             2
plement. This leads to two types of fundamental questions: prior probability of sj = 1 and assume these events are in-
                                                      dependent. Agents may compute their own secrets. How-
 1. Can  one provide an efﬁcient algorithm for check-
                                                      ever, computation is costly and agent j pays cj ≥ 0 for
    ing whether, given an information elicitation setting, computing s . Without loss of generality we shall assume
    a desired oblivious sequential-simultaneous elicitation      j
                                                      c1 ≤ c2 ≤ . . . ≤ cn (in words, agents are ordered by their
    mechanism exist? If one exists, can we provide an ef- costs). We will also refer to the agents’ costs, ordered from
    ﬁcient procedure which will output the desired mecha-
                                                      the lowest one to the highest one, as c(0), c(1), . . . , c(n−1).
    nism?                                               Agents are interested in computing some joint binary pa-
 2. Are there natural and general settings where the restric- rameter (e.g., the majority vote or whether they have a con-
    tion to oblivious mechanisms does not prevent us from sensus) that depends on the vector of private inputs. Let
    the desired elicitation?                          G : {0, 1}n → {0, 1} denote the desired computation. Each
  The surprising message of this paper is that we can pro- agent j has a utility of vj from learning the value of G. We
vide highly positive and encouraging answers to both ques- assume vj ≥ cj , otherwise the agent face no dilemma.
tions! We ﬁrst prove that if there is an appropriate oblivious It is also possible to use the convention that vj = 1. This
mechanism then there is also one which uses a semi-natural is done without loss of generality, as the more general case
                                                      where vj > cj > 0, is equivalent to the case where the value
ordering, i.e. the mechanism will never approach an agent                      cj
                                             0        of agent j is 1 but the cost is .
with cost c before it approaches an agent with cost c < c                      vj
(although it may approach them simultaneously). Then we A central designer, termed the center, elicits the agents’ se-
show an efﬁcient algorithm for verifying whether a desired crets, computes G and reports the computed value of G back
(oblivious) semi-natural ordering mechanism exists; if such to each agent. In this setup each agent faces a dilemma of
mechanism exists, then the desired ordering is obtained as whether to compute his private secret sj, at a cost of cj , or
our algorithm’s output. Then, we show that the restriction to perhaps to submit a guess to the central designer. The de-
(oblivious) semi-natural ordering mechanism does not restrict sired property of a mechanism is the correct computation of
the power of elicitation in some of the most popular contexts. G, which is done through the elicitation of secrets from sufﬁ-
In particular, we show that this holds for the uniform setting ciently many agents.
(where each agent’s secret bit is taken to be 0 or 1 with prob- One should note that the cost of each agent’s computation,
ability 0.5 each), as well as for the classical majority function cj , is lower than the gain from computing G, and therefore
and for more general threshold functions. Together, this pro- the socially optimal outcome is to compute. However, free
vides a most powerful and general approach to information riding of agents may undermine the ability to reach the social
elicitation in multi-agent systems, backed up with efﬁcient optimum.
and effective algorithms.
  In Section 2 we introduce the general model, and general 2.1 Sequential-Simultaneous mechanisms
sequential-simultaneous mechanisms. We also brieﬂy illus- We now model mechanisms that approach players sequen-
trate the power that these mechanisms buy us when compar- tially, with the possibility to approach simultaneously more
ing to previous studies where purely sequential or purely si- than one player each time. We will assume that the commu-
multaneous mechanisms have been considered. In Section 3 nication between the center and the agents is fully revealed
we introduce oblivious mechanisms. We then show an efﬁ- to all agents. This can be associated with having broadcast
cient algorithm for verifying the existence of an appropriate communication.
oblivious elicitation mechanism, and show that a semi-natural A sequential-simultaneous mechanism determines the set
ordering mechanism can be computed as the desired result, if of agents to be approached at each stage, as a function
such oblivious mechanism exists. We also remark (by means of the information provided so far. Formally, let Hi =
of example) that there are cases where the restriction to obliv-
ious mechanisms may prevent us from obtaining the desired 2This is done wlog and for purposes of exposition. The case
computation; this leads to the study of settings where the ex- where q < 0.5 is treated similarly.{(a1, b1), (a2, b2), . . . , (ai, bi)|ai ≤ n, ∀1 ≤ k < i : ak < Intuitively, this graph describes the possible states of infor-
ak+1, ∀1 ≤ k < i : bk ≤ bk+1, ∀1 ≤ k < i : ak+1 − ak ≥ mation, when approaching agents while computing the value
bk+1 − bk} where v = (j, l) stands for the event where j of an anonymous function, and the possible state transitions.
agents have been approached and l 1’s (and j − l 0’s) have Every state describes how many agents have been approached
been reported. Hi is the set of histories of length i, for and how many 1’s have been heard so far. Let G¯ = (V¯ , E¯)
                                                                                     0
1 ≤  i ≤ n.  Let H0 =  Λ, where Λ is the empty (null) be the graph induced by reducing G to include only nodes
                   n
history. Let H = Si=0 Hi be the set of all possible his- where the value of the function G can not be determined yet.
tories . A sequential-simultaneous mechanism is a triplet When referring to a node v, we will abuse notation and refer
(u,g,f) where u : H → {1, 2, . . . , n} determines how many also to v as an event. Namely, the event v = (j, l) stands for
agents to approach simultaneously, g : H → 2N deter-  the case that j agents have been approached and l 1’s (and
mines the agents to be approached, and f : H → {0, 1, ∗} j − l 0’s) have been reported.
is a function that expresses a decision about whether to halt For every node v in G¯ we deﬁne the following. Let
and output either 0 or 1, or continue the elicitation process piv(v, G) = P rob(Zi|v), where Zi is the event that agent
(denoted by *). Note that each agent has 6 actions: Don’t i is pivotal for the function G. Notice that since G is an
compute and report 0, Don’t compute and report 1, Com- anonymous function P rob(Zi|v) is the same for each agent
pute and report 0, Compute and report 1, Compute and re- i and therefore piv(v, G) is uniquely deﬁned. When G is
port the true computed value, and Compute and report a clear from the context then denote it piv(v). Note that if
false value. Let us denote by Γ the set of actions. A strat- v ∈/ V¯ , i.e. it is already possible to compute the value of
egy for player j, xj : H → Γ, assigns an action to each G, then piv(v) = 0. Let Cmax(v) ≡ Max{c | 1 − c ≥
possible history. Let h(k)(x1, . . . , xk−1, xk+1, . . . , xn, S) be piv(v) · q + (1 − piv(v)) · 1}. The left side of the above
the history that agent k sees when approached, given that inequality is the utility for an agent with cost c from ap-
(x1, . . . , xk−1, xk+1, . . . , xn) is the vector of strategies of the proaching his secret assuming all other agents approach their
other agents and S is the vector of secrets. Let xk(h(k)) be the secrets. The right side is the utility for the agent when he
strategy of agent k according to the history h(k) he sees when doesn’t approach the secret (assuming all other agents ap-
                1
approached. Let xk(h(k)) = 1 if and only if the action of proach their secrets) and guess ”1”, which is the best choice
agent k according to the history h(k) is to compute the secret, for him in this case (since q ≥ 0.5). This inequality implies
          1                 0                         that: c ≤ 1 − (1 − piv(v)) − q · piv(v). This implies that c ≤
otherwise xk(h(k)) = 0, and let xk(h(k)) = 1 if and only if
                           0                          (1 − q) · piv(v). Hence we get: Cmax(v) = (1 − q) · piv(v).
agent k reports ”1”, otherwise xk(h(k)) = 0. We get that the
utility for agent k according to the strategies and the secrets Notice that Cmax(v) is the maximal cost for which it is still
is: u (x , . . . , x ) = [P rob(G(x0(h ), . . . , x0 (h )) = rational to access the secret given the information v (assum-
    k  1      n              1  (1)      n  (n)       ing the others access their secrets).
G(S)] − [P rob(x1 (h )) = 1] · c 3. An equilibrium for
               k  (k)         k                         The following example illustrates why is it useful to use
the mechanism A, is a vector of n strategies, (x1, . . . , xn), sequential-simultaneous mechanisms. Consider the follow-
such that each agent’s strategy is the best response against ing setup. Let G be the majority function, n = 3, q = 0.7,
the other agents’ strategies. That is, for each agent k and
                0                                     and c(0) = 0.12, c(1) = 0.12, c(2) = 0.29. We can show:
for each strategy xk of agent k: ui(x1, . . . , xk, . . . , xn) ≥
          0                                           given the above setup there exists a sequential-simultaneous
ui(x1, . . . , xk, . . . , xn). We seek mechanisms which can mechanism which is appropriate. On the other hand, given
compute the true value of G in equilibrium. In fact, it the above setup there does not exist a sequential mechanism
is required that a mechanism computes G with certainty. which is appropriate. It is also the case that approaching all
Therefore we seek mechanisms that induce sufﬁciently many agents simultaneously is not appropriate.
agents to access and reveal their secrets, in order for G to be
computed. Note that in many cases G may be computed with
partial information. For example, in the case of a consensus 3 Oblivious mechanisms
function it is sufﬁcient to elicit information sequentially until An oblivious mechanism is a mechanism that partition the
we get two different replies, which are truthful.     agents to groups and each time approach the agents from
  Given a particular q and c1, . . . , cn, a mechanism A is ap- one group simultaneously without dependency on the his-
propriate for G, if there exists an equilibrium where G can tory. Both the groups and the ordering between the groups
surely be computed for all vector of agents’ secrets. Such are determined in advance. That is, the agents are partitioned
an equilibrium is referred to as a computing equilibrium. An                           t
                                                      into groups: A1, A2, ...At. such that: S Ai = {1, 2, .., n}
algorithm is appropriate if it induces an appropriate mecha-                           i=1
                                                      ,  ∀  1 ≤  i 6= j ≤ t : Ai T Aj =  ∅ where the group
nism.
                                                      A1 of agents is approached ﬁrst, and afterwards the group
  Let G be an anonymous function. Consider the directed A2 of agents is approached, and so on until the group At of
graph G0 = (V 0, E0) where the set of nodes is V 0 = {(i, k) : agents is approached. However, if after a group of agents is
                                                0
i, k ∈ Z+, 0 ≤ k ≤ i ≤ n − 1}, and the set of edges is, E = approached and reveal their secrets, the event is such that it is
{((i, k), (i + 1, k)) : 0 ≤ i ≤ n − 2, k ≤ i} S{((i, k), (i + already possible to determine the value of the function, then
1, k + 1)) : 0 ≤ i ≤ n − 2, k ≤ i}.                   the mechanism stops.
                                                        Given a function G, agents’ costs c(0) ≤ c(1) ≤ . . . ≤
  3
   The probability distribution is induced by the distribution over c(n−1), and q, a semi-natural ordering mechanism is an obliv-
S, and q.                                             ious mechanism, where the agents are also sorted accord-ing to their cost for accessing their secrets. That is, A1 = then there exists a semi-natural ordering mechanism which is

{c(0), c(1), . . . , c(|A1|−1)},                      appropriate.

,A2 = {c(|A1|), c(|A1|+1), . . . , c(|A1|+|A2|−1)}, . . . , Note that given an anonymous function function G, agents’
. . . ,                                               costs c(0) ≤ c(1) ≤ . . . ≤ c(n−1), and q, if there exists a semi-
                                                      natural ordering mechanism which is appropriate then there
At−1 = {c(|A1|+···+|At−2|), c(|A1|+···+|At−2|+1), . . . ,
                                                      exists an oblivious mechanism which is appropriate. There-
c(|A |+···+|A − |+|A − |−1)},
   1      t 2   t 1                                   fore, combining the above theorems and observations we get:
At = {c(|A1|+···+|At−1|), c(|A1|+···+|At−1|+1), . . . , c(n−1)}
  This section deals with the following: First we prove that Theorem 3.3: Consider an anonymous function G, agents
whenever there exists an oblivious mechanism which is ap- costs c(0) ≤ c(1) ≤ . . . ≤ c(n−1), and q. The three following
propriate, there exists a semi-natural ordering mechanism claims are equivalent: (1) There exists an oblivious mecha-
which is appropriate. We then address the problem of exis- nism which is appropriate. (2) Cond1 is satisﬁed. (3) There
tence: We provide an efﬁcient algorithm, that given an anony- exists a semi-natural ordering mechanism which is appropri-
                                                      ate.
mous function G, the ci’s, and q, will decide if there ex-
ist an oblivious mechanism which is appropriate. Moreover, Now we can provide a complete efﬁcient procedure that
we provide an efﬁcient algorithm that induces an appropriate given a function G, agents’ costs c(0) ≤ c(1) ≤ . . . ≤ c(n−1),
oblivious mechanism whenever such a mechanism exist.  and q, will check if there exists an oblivious mechanism
  Given a function G, agents’ costs c ≤ c  ≤ . . . ≤  which is appropriate. Moreover, if there exist an oblivious
                                 (0)   (1)            mechanism which is appropriate, this procedure will induce
c(n−1), and q, consider the following algorithm.
  The Oblivious Mechanism Algorithm: (OMA)            an appropriate semi-natural ordering mechanism. In order to
                   0     0  0                         do so we repeat steps (A) - (G) of the OMA. Then, as in
 (A) Build the graph G = (V , E ) of the function G   step (H) of of OMA we check whether Cond1 is satisﬁed;
                                                      if Cond1 is not satisﬁed then the procedure will return ”there
 (B) Compute for every node v ∈ V 0 : piv(v) and Cmax(v). isn’t any oblivious algorithm which is appropriate” and ﬁnish;
 (C) Induce the graph G¯ = (V¯ , E¯) by reducing G0 to include otherwise, if Cond1 is satisﬁed then the mechanism will ap-
    only nodes where the value of the function G can not be proach the agents sequentially, in the following order, where
    determined yet.                                   at each phase we approach simultaneously a set of agents as
                                                      described below (the agents are referred to by their costs):
 (D) ∀ 0 ≤ k ≤ n − 1 : let Lk = Min{Cmax(k, j)|(k, j) ∈
                                                        • c  , c , ..., c  .
    V¯ } i.e. Lk is the minimum Cmax among all the nodes   (0) (1)    (g1−1)
                         ¯
    with the same depth k in G.                         • c(g1), c(g1+1), . . . , c(g1+g2−1).

 (E) Let i1 = 0.                                        • c(g1+g2), c(g1+g2+1), . . . , c(g1+g2+g3−1).
    i2 = Min{j|i1 < j ≤ n − 1, Lj > Li1 }.              • · · ·
    i = Min{j|i  <  j ≤ n − 1, L > L }.
     3          2             j    i2                   • c           , c           , . . . ,
    ...                                                    (g1+···+gk−2) (g1+···+gk−2+1)
                                                          c(g1+···+gk−2+gk−1−1)
    ir = Min{j|ir−1 < j ≤ n − 1, Lj > Lir−1 }.
    ...                                                 • c(g1+···+gk−1), c(g1+···+gk−1+1), . . . ,
                                                          c(g1+···+gk−1) = c(n−1).
    ik = Min{j|ik−1 < j ≤ n − 1, Lj > Lik−1 } where ik

    satisﬁes ∀j : ik < j ≤ n − 1 : Lj ≤ Lik             To sum up, given a function G, agents’ costs c(0) ≤ c(1) ≤
                                                      . . . ≤ c   , and q, the OMA algorithm veriﬁes the exis-
 (F) Let g =  i −  i , g = i  − i , . . . , gr = ir −        (n−1)
         1     2   1  2     3    2      −1            tence of an appropriate oblivious mechanism. Such a mecha-
    ir  , . . . , gk = ik − ik , gk = n − ik.
     −1       −1         −1                           nism, if exists, is induced by the above procedure.
 (G) Sort the agents according to their costs of getting to their Oblivious mechanisms are natural and can be easily imple-
    secrets and get: c(0) ≤ c(1) ≤ ... ≤ c(n−1)       mented. It can be shown (by means of an example; details
 (H) Check if the following set of conditions, marked as omitted due to lack of space) that the existence of an appro-

    Cond1, is satisﬁed: c(0), c(1), ..., c(g1−1) ≤ Li1 priate mechanism does not necessary imply the existence of

    c(g1), c(g1+1), ..., c(g1+g2−1) ≤ Li2             an oblivious mechanism which is appropriate. However, sur-

    c(g1+g2), c(g1+g2+1), ..., c(g1+g2+g3−1) ≤ Li3    prisingly, in the next sections we show that there are some
    · · ·                                             important and central setups where oblivious mechanisms are

    c(g1+g2+...+gk−2), . . . , c(g1+g2+···+gk−1−1) ≤ Lik−1 sufﬁcient for efﬁcient and effective information elicitation.

    c(g1+g2+···+gk−2+gk−1), . . . , c(g1+g2+···+gk−1+gk −1) ≤ Given the convenient and tractable structure of these mech-

    Lik                                               anisms, this provides powerful tools for information elicita-
  Consider the set of conditions Cond1 in step (H) of the tion. Namely, this turned out to be the case for the classical
OMA  above. We can now prove the following general results: uniform model discussed in Section 4, and for the majority
  Theorem 3.1: Consider an anonymous function G, agents’ function, and moreover in the context of threshold functions,
                                                      as discussed in Section 5.
costs c(0) ≤ c(1) ≤ . . . ≤ c(n−1), and q. If there exists
an oblivious mechanism which is appropriate then Cond1 is
satisﬁed.                                             4   The  Uniform  Model
  Theorem 3.2: Consider an anonymous function G, agents’ Consider the case where q = 0.5 and G is any anonymous
costs c(0) ≤ c(1) ≤ . . . ≤ c(n−1), and q, if Cond1 is satisﬁed function. The assumption that the distribution is uniform ismost standard in many basic studies in this context. Consider will efﬁciently compute whether there exists any appropriate
the following algorithm:                              mechanism. If such a mechanism exists, the USNO will out-
  The  Uniform   Semi-Natural  Ordering  Algorithm    put an appropriate semi-natural ordering mechanism.
(USNO):
 (A) Build the graph G0 = (V 0, E0) of the function G. 5  Computing    the majority function
 (B) Compute ∀ v ∈ V 0 : piv(v) and Cmax(v).          The majority function is central to voting theory, and as a re-
                                                      sult to the related multi-agent systems and distributed com-
                   ¯    ¯  ¯             0
 (C) Induce the graph G = (V , E) by reducing G to include puting literature. Consider the case where n is odd, and
    only nodes where the value of the function G can not be q > 0.5 and the function we would like to compute is the
    determined.                                                       5       n−1
                                                      majority function, i.e. if d 2 e + 1 or more of the agents’
                                   ¯           0
 (D) Denote as Υ the following path in G: (0, 0) = v0 → secrets are 1’s then the value of the function will be 1, else
     0     0            0             0
    v1 →  v2 →  . . . → vj = (j, l) → vj+1 → . . . →  the value will be 0.
     0                  0    0     0           0        We will now present an efﬁcient algorithm that induces an
    vn−1 where (0, 0) = v0 → v1 → v2 →  . . . → vj =
    (j, l) satisﬁes that v0 = (j, l) has only one son in G¯, appropriate mechanism if such a mechanism exists. The out-
                     j                                put mechanism will be an oblivious, semi-natural ordering
    and ∀ 0  ≤ i ≤  j − 1 : piv(v0) ≥ piv(v0 ). Let
                                i         i+1         mechanism. Denote by Γ the following path in the graph as-
     0           0            0  be the sufﬁx from 0
    vj = (j, l) → vj+1 → . . . → vn−1           vj    sociated with the majority function:
                   ¯               0
    to the only leaf in G reachable from vj . The existence of ∗                             n−1  n−1
                                                      v0 =  (0, 0) → (1, 1) → (2, 2) → . . . → ( 2 , 2 ) →
    such a path is induced by a series of propositions omitted n−1 n−1 n−1     n−1                n−1
                                                      ( 2  +1,  2 ) → ( 2  +2,  2 ) → . . . → (n−1, 2 ) =
    from the paper due to lack of space.               ∗
                                                      vn−1
 (E) Along Υ,  ∀ 0 ≤ i ≤ n −  1 : We will mark Ψi ≡     The Semi-Natural Ordering Algorithm (SNO):
           0
    Cmax(vi)                                                                             ∗            ∗
                                                       (A) Compute: ∀ 0 ≤ i ≤ n − 1: piv(vi ) and Cmax(vi ),
 (F) Check which is the ﬁrst node on Υ that satisﬁes Ψt > Ψ0 along Γ. ∀ 0 ≤ i ≤ n − 1 : We will mark Ψi ≡
    4                                                             ∗
     . That is, t = Min{k| 1 ≤ k ≤ n − 1, Ψk > Ψ0}.       Cmax(vi  )
    (the fact that t > j is implied by the above mentioned
                                                       (B) Check which is the ﬁrst node on Γ that satisﬁes Ψj >
    propositions).                                                                                     6
                                                          Ψ0. That is, j = min{k| 1 ≤ k ≤ n − 1, Ψk > Ψ0}. .
 (G) Sort the agents according to their costs of getting to their (C) Sort the agents according to their costs of getting to their
    secrets and get: c(0) ≤ c(1) ≤ ... ≤ c(n−1)
                                                          secrets and get: c(0) ≤ c(1) ≤ ... ≤ c(n−1)
 (H) Check if the following is satisﬁed: c(0) ≤ Ψ0, c(1) ≤
                                                       (D) Check if the following is satisﬁed: c(0) ≤ Ψ0, c(1) ≤
    Ψ0, . . ., c(t−1) ≤ Ψ0, c(t) ≤ Ψt, c(t+1) ≤ Ψt+1, . . .,
                                                          Ψ0,. . . , c(j−1) ≤ Ψ0, c(j) ≤ Ψj , c(j+1) ≤ Ψj+1, . . . ,,
    c(n−1) ≤ Ψn−1. If the above is not satisﬁed then ﬁnish
                                                          c(n−1) ≤ Ψn−1. If the above is not satisﬁed then ﬁnish
    and return ”there is no appropriate mechanism for the and output ”there is no appropriate mechanism for the
    problem”, else continue to phase (I).                 problem”, else continue to phase (E).
 (I) First approach simultaneously the t agents with the low- (E) First approach simultaneously the j agents with the low-
    est costs, i.e. c(0), c(1), . . . , c(t−1). Afterwards approach
                                                          est costs, i.e. c(0), c(1), . . . , c(j−1). Afterwards approach
    each time one agent with the lowest cost among those  each time one agent with the lowest cost among those
    left, i.e. ﬁrst approach c(t),then approach c(t+1), etc,
                                                          left, i.e. ﬁrst approach c(j),then approach c(j+1), etc,
    when c(n−1) is approached last.
                                                          when c(n−1) is approached last.
  We can now prove:                                     We can now show:
  Theorem 4.1: Consider an anonymous function G, agents’ Theorem 5.1: Consider the majority function G, agents’
costs c  ≤  c   ≤  . . . ≤ c  , and q = 0.5, and let
      (0)    (1)          (n−1)                       costs c  ≤  c    ≤ . . . ≤ c n , and q, and let Ψi ≡
             0                                              (0)    (1)           ( −1)
Ψi ≡ Cmax(v  ) for every 0 ≤ i ≤ n − 1 along the path Υ.      ∗
             i                                        Cmax(vi  ) for every 0 ≤ i ≤ n − 1 along the path Γ. Let
Let t = min{k| 1 ≤ k ≤ n − 1, Ψk  > Ψ  }. Then there
                                      0               j =  min{k| 1  ≤ k  ≤ n −  1, Ψk >  Ψ0}.  Then there
exists an appropriate algorithm, if and only if: c ≤ Ψ0,
                                          (0)         exists an appropriate algorithm, if and only if: c(0) ≤ Ψ0,
c  ≤  Ψ0,. . . , c t ≤ Ψ0, c t ≤ Ψt,
 (1)         ( −1)       ( )                          c(1) ≤ Ψ0, . . . , c(j−1) ≤ Ψ0, c(j) ≤ Ψj , c(j+1) ≤ Ψj+1, . . .,
c t  ≤  Ψt+1,. . . ,c n ≤ Ψn−1.
 ( +1)          ( −1)                                 c(n−1) ≤ Ψn−1.
  Theorem 4.2: Consider an anonymous function G, agents’ Theorem 5.2: Consider the majority function G, agents’
costs c ≤ c   ≤ . . . ≤ c n , and q = 0.5, if there exists
     (0)   (1)         ( −1)                          costs c(0) ≤ c(1) ≤ . . . ≤ c(n−1), and q, if there exists an
an appropriate mechanism then the USNO algorithm induces appropriate mechanism then the SNO algorithm induces an
an appropriate oblivious mechanism.                   appropriate oblivious mechanism.
  Corollary 4.1: Consider an anonymous  function G,
                                                         5
agents’ costs c(0) ≤ c(1) ≤ . . . ≤ c(n−1), and q = 0.5. Our results in this section can be extended in a straightforward
The USNO  handles the problem of existence, i.e the USNO manner to the case where q ≤ 0.5 but not hold to the case where n
                                                      is even; the case where n is even will be discussed later, when we
  4It is guaranteed that there exists such a node if G is not the par- extend the discussion to general threshold functions.
ity or the ¬ parity function. These functions are treated separately, 6As before, the fact that such a j exists is implied by a series of
leading to similar results.                           propositions characterizing the properties of Γ