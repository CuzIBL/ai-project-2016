           SISP/l AN INTERACTIVE SYSTEM ABLE TO                                    has four important drawbacks: 
             SYNTHESIZE FUNCTIONS FROM EXAMPLES                                     1.- The constructed expression <p is necessarily 
                                                                                   recursive: for instance the identity function will 
        Jean-Pierre JOUANNAUD FRANCE be infered by V (x) » if X * NIL then NIL 
        Mai tre-Assistant a 1'Institut de Programinati on                                                            else CONS (CAR(x), ^(CDR(x))) 
        Universite Paris VI                                                        2.- THESYS needs well chosen examples, which in 
        A, Place Jussieu                                                           particular must contain the stop condition of the 
        75005 PARIS                                                                recursive function V. For instance, the construc­
                                                                                   tion of the function REVERSE requires the following 
        Gerard GU1HO FRANCE set of examples: 
        Maitre de Conference - Laboratoire de Recherche                            {(NIL + NIL), ((A) - (A)), ((A B) - (B A)), 
        en Informatique                                                              ((A B C) + (C B A))} 
        Universite Paris Sud                                                       3.- The function to be constructed has to present 

        91405 ORSAY                                                                only one "iterative level11. For instance, THESIS 
                                                                                   fails to construct a correct function corresponding 
        Jean-Pierre TREUIL FRANCE to the example: (P Q R S) -> (P P Q P Q R P Q R S) . 
        Chercheur - Laboratoire de Recherche en                                    4.- When THESYS has to solve a difficult problem, 
        Informatique                                                               it does not try to generate a partial, simpler 
        Universite Paris Sud                                                       problem for which it could either find a correct 
        91405 ORSAY                                                                solution or perhaps use a knowledge previously 
The research presented in this paper is supported                                  stored in a data base by the system itself. Thus, 
by IklA-CESORl under contract number 76.                                           THESYS cannot be efficiently used in a L.Q.A.S. 
                                                                                   without important modifications. 
                               ABSTRACT                                                    The method we propose in this paper is very 
        SISP/i is an interactive system whose goal is                              different in particular, it has the built capacity 
the automatic inference of LISP functions from a                                   to use a Professor in interactive mode. It does 
finite set of examples {(x., f(x.))) where x. is a                                 not lie yet on any theorical groundwork, but allows 
list belonging to the domain of the function f we                                  us to overcome some of the previous drawbacks, al­
want to infer. SISP/I is able to infer the recur­                                  though new ones appear: 
sive form of many linear recursive functions and                                   - recursion is not automatically infered by the 
its stop-condition. SISP/l tries to work with one                                  synthesis algorithm; for instance, using the exam­
example only. When it fails, it asks for new ones:                                 ple ((A B C) -* (A B C)), STSP/1 infers the function 
using then a method of generating new partial sub-                                 <p v*p (x) = x for any x. 
problems, SISP/l is able to perfect its generated                                  - for some "simple" functions, S'ISP/1 needs only 
recursive function until it gets a correct one.                                    one example (x, f(x)). 
                                                                                   In the case where a recursive expression is infered, 
                          I. INTRODUCTION                                          the stop condition is then found by SISP/l itself. 
        In this paper we describe the system SISP/l                                However the. list x must be long enough to be re­
whose goal is the automatic inference of LISP func­                                presentative of the function f. For instance, 
tions from a finite set of examples {(x., l(x.))},                                 REVERSE is obtained using the only example 
                                                                                   ((A B C D) + (U C B A)), but is not obtained with 
where x. is a list belonging to the domain of the                                  ((A B C) > (C B A)). 
function f we want to infer.                                                       - when the function f is "more complicated" SISP/l 
        The problem originates from a more general                                 fails to construct a correct function with only one 
one: how to build a "Learning-Quest ion-Answering-                                 example and it then tries to work with two examples. 
System" (L.Q.A.S.) using a functional method to                                    - when the function f is "much more complicated", 
provide an answer to any given question. The me­                                   SISP/l generates a new partial simpler problem 
thod we propose in SISP/l is naturally well adap­                                  (y> &(y)) where y is defined in terms of x and 
ted to the L.Q.A.S. we are. developping (6.1, 17 1.                                g(y) is defined in terms of f(x). To solve this 
        In the field of "Automatic Programming from                                new problem, SISP/l sometimes needs a new example 

Examples", an important piece of recent work is                                    (x1, f(x')) which is used to deduce an example 
THESYS by SUMMERS L5J. The major result of this                                    (y'» g(y'))« The interaction is only used in the 
work, is the following: using a small number of                                    sense of asking for new examples, when necessary. 
well chosen examples                                                               SISP/l is thus extensible and has the potentiality 
((NIL, f(NIL)), ((A), f((A)))...} THESYS is able                                   to use a self constructed knowledge data base. 
to infer a recursive expression $ equivalent to f                                          Some objections can be raised to our interac­
for every x belonging to the domain of f.                                          tive method: 
        Only a small class of functions can however                                - when a function f needs several examples to be 
be obtained by Summers's method, which works by loo­                               infered, the professor sometimes has to give an 
king for a recurence relation between representati­                                appropriate sequence of examples. 
ve predicates p. of the given input structure and                                  - we do not exactly know the class of functions 
for a recurence relation between the map functions                                 which SISP/l is able to infer. However, it seems 
                                                                                   to be much larger than THESYS one. For instance 
m. providing the given outputs from the given in­
                                                                                   ((PQRS)-»(PPQPQRPQRS)) is infered by 
puts. Then, using a fixed point theorem, V is cons­
                                                                                   SISP/l using only one example whereas the HALF 
tructed .                                                                          function ((P Q R S T U) + (P Q R)), which is infered 
       Although Summers's method is very powerful it                               by THESYS, requires two examples by SISP/l. In fact, 
                                                          Auto. Prop:.-3 : JouannauH 
                                                                            412  we hope that SISP will be able to infer a larger                                   nodes are joined together. For instance, if 
 class of linear recursive functions.                                               x and y are the same, the pattern is reduced to one 
                                                                                    node; if x and y have no common part, the pattern 
         II. GENERAL DESCRIPTION OF THE METHOD                                      is reduced to only two nodes. 
         1. - L§ngu§ge                                                                      4*"" §Y.£lt}£sis fron}_on£_exam£le 
         SISP/I infers functions defined on character                                      The synthesis consists of three steps: 
 strings "ABCD..." which will be represented by the                                 a) SISP/1 generates a network (called a "Segmenta­
 list (A B C D...).                                                                 tion Structure") by the following process: 
         SISP/1 synthetizes LISP-functions built with                                       (1) Generate the segmentation pattern of 
 the following basic functions, described here by                                   (x,y).The generation gives the two sets of pairs: 
 ex amp1 e s:                                                                       {(px» py), (c,py), (sx, py)} Kpx,sy), (c,sy), (sx, sy) } 
 LCAR: (A B C D) -* (A) CDR: (A B C D) -> (B C D)                                           (2) As long as py and sy are not empty, choose 
 LRAC: (A B C D) -+ (D) RDC: (ABC D) -> (A B C)                                     one pair in each set by a heuristic way; for each 
 CONC: (A B), (C D) ■> (ABCD)                                                       of these pairs, rename it as (x,y) and go to step 1. 
 CONCT: (A B), (C D), (E F) + (A B C D E F)                                         b) SISP/1 looks at the segmentation structure for 
 PREF: (BC), (ABC D) •> (A) L Prefix of (B C) in                                    a lattice in which the minimal and final nodes are 
                                               (ABC D) ]                            respectively X and Y (that is x and y types). This 
 SUFF: (B C), (A B C D) ■+ (D) I Suffix of (B C) in                                 lattice is stepwise constructed using Algorithm 1, 
                                               (A B C D)j                           defined as follows: 
 and a control structure using COND and NULL.                                       Def initi ons: 
         2*~ Notion_of_tYp_e                                                                - LAT is the constructed part of the lattice 
        A type is a set of lists which can be defined                               at any step (except in the final step, LAT is not 
 by rules which are summarised as follows [6 1:                                     a lattice). 
 a) the set of known inputs "x" and the set of out­                                         - an incomplete node of LAT i s a node such 

 puts "f(x)M of the function f to be synthetized are                                that the relation ending at this node (in LAT) 
 types.                                                                             owns some entries which are not connected to X. 
 b) if X is a type and f a LISP function, then the                                  These nodes are called unsatisfied entries. 
 set of outputs of f restricted to X as input is a                                          - BEG (Z) is the set of nodes in LAT which 
 type.                                                                              are less than Z and which are not unsatisfied 
 c) if Y is a type and g a LISP function then the                                   entri es. 
 set X of x such as g(x) C- Y i s a type.                                                   - P is a "path" from BEG (U) to V, where U 
        3«~ Segment^].i_on_pattern                                                  and V are nodes of LAT, if P is an oriented path 
        Let f be a function to be synthetized and                                   starting from one node belonging to BEG (U) and 
 (x, f(x)) an example of "input-output" of this                                     ending at V. This path may contain incomplete 
 function.                                                                          nodes together with their unsatisfied entries* 
         SISP/1 uses a general heuristic to create an                               Example of LAT: 
 expression of the function: 
 a) segmentation of strings x and y = f(x) into 
 three consecutive segments such that: 
        CONCT (px, c , sx) ■+ X 

        CONCT (py, c, Sy) -► y 
 where c denotes the larger string common to x and 
 y, px and py denote the prefixs of c in x and y, 
 sx and sy denote the suffixs of c in x and y. 
 b) building of relations between these segments. 
        A "Segmentation Pattern" of (x,y), for all x 
 and y, is defined as the network shown in figure I. 
        We can see on this network: 
 - seven nodes representing types respectively as­
 sociated to the strings x,y,c,px,py,sx,sy. 
 - twelve relations between nodes. Each relation 
 consists of a function and a scheme (I,» I«, •••> 
 I -> J) which indicates the input nodes I , I ,..., 
                                                                                           Nodes 6, 7, 11 are incomplete nodes 
 I in this order and the output node J. This order 
  n r                                                                                       Nodes 12, 13, 14, 15 are unsatisfied entries 
 is represented on the network by a double arrow.                                          All others nodes are complete nodes. 
        Note that functions FX, FY, GPX, GPY, GSX,                                          BEG (9) - {X, 1, 2, 7, 8} 
GSY are built by SISP/1 using the basic functions 
                                                                                    Algorithm 1: 
 LCAR, CDR, LRAC, RDC, and the composition rule. 
                                                                                            1 . LAT «- X 
They are choosen of the less possible complexity 
                                                                                            2. Look for a path P between X and Y. 
 (the smallest number of basic functions). 
                                                                                            3. Add path P to LAT. 
        In some cases, the segmentation pattern is 
                                                                                           4. Lf there is no incomplete node in LAT then 
 simpler: 
                                                                                                stop 
        - when one or several strings are empty (NIL), 
                                                                                                else select the minimal one and call it N. 
 .. the associated nodes are suppressed from the 
                                                                                                (It can be demonstrated that Algorithm 1 
pattern. 
                                                                                                generates a set of incomplete nodes which 
        - when two strings are equal, the associated 
                                                                                                is totaly ordered on LAT). 

                                                           Auto. Pror.-V JonannauH Auto. Prog.-3: Jouannaud 