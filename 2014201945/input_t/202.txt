                       Efficient Representation of Adhoc Constraints * 

         Kenil C.K. Cheng and Jimmy H.M. Lee Peter J. Stuckey 
                 Dept of Comp. Sci. & Eng. Dept. of Comp. Sci. & Soft. Eng. 
     The Chinese University of Hong Kong, Hong Kong University of Melbourne, Australia 
        {ckcheng,jlee}@cse.cuhk.edu.hk pj s@cs.mu.oz.au 


1 Introduction                                           In an abuse of notation, we define a valuation to be an 
                                                       element of a (non-false) domain D, written D, if   
Constraint programming is a promising technique for solving 
                                                             for all  
many difficult combinatorial problems. Since real-life con•
                                                         We are also interested in the notion of an initial domain, 
straints can be difficult to describe in symbolic expressions, denoted by The initial domain gives the initial values 
or provide very weak propagation from their symbolic repre• possible for each variable. 
sentation, they are sometimes represented in the form of the A constraint c over variables written as 
sets of solutions or sets of nogoods. This adhoc represen•          restricts the values that each variable x,- can 
tation provides strong propagation through domain (general• take simultaneously. An adhoc constraint is 
ized arc) consistency techniques. However, the adhoc repre• defined extensionally as a set of valuations over the vari•
sentation is expensive in terms of memory and computation, ables We say is a solution of c. For any 
when the adhoc constraint is large.                    valuation on variables withwe calla 
  So there is interest in determining less expensive meth• nogood ofc. 
ods for building propagators for adhoc constraints [Friihwirth, Often we define constraints intensionally using some well 
1998; Apt and Monfroy, 1999; Abdennadher and Rigotti,  understood mathematical syntax. For an intensionally defined 
2000; Bartak, 2001; Dao et al., 2002]. 
  In this paper, we propose a new language-independent rep•
resentation for adhoc constraints, the box constraint collec-
tion. The idea is to break up an adhoc constraint into pieces 
and cover these pieces using box constraints as tiles. This can A constraint satisfaction problem (CSP) [Tsang, 1993], 
be done automatically with a greedy algorithm. With the aid consists of a set of constraints over a set of vari•
of constructive disjunction and a suitable choice of constraint 
                                                       ables where each variable Xi can only take values 
templates in the collection, our new representation achieves from its domain a set of integers. Solving a CSP 
domain consistency.                                    requires finding a value for each variable from its domain so 
                                                       that no constraint is violated, i.e. all constraints are satisfied. 
2 Propagation Based Constraint Solving                   A propagator f is a monotonically decreasing function 
                                                       from domains to domains. The generalized arc consistent 
In this section we give our terminology for constraint satis• propagator for a constraint c is defined as  
faction problems, and propagation based constraint solving.                    where x otherwise 
  An integer valuation is a mapping of variables to integer dom A propagation solver for propa•
values, written , We extend the                        gators F repeatedly applies propagators to a domain 
valuation to map expressions and constraints involving the D until no further change in D results. 
variables in the natural way. We sometimes treat a valuation 
                           as the constraint           3 Box Constraint Collections 
              Let vars be the ftmction that returns the set 
of (free) variables appearing in a constraint or valuation. Adhoc constraints are usually implemented as tabled con•
  A domain D is a complete mapping from a fixed (count• straints by listing all the solutions or nogoods, incurring space 
able) set of variables to finite sets of integers. A domain and time overhead. Often we represent a constraint in an ad•
D\ is stronger than a domain written if hoc manner because it is difficult (or unwieldy) to describe 
              for all variables x.                     it using a symbolic expression. However, it may be easier 
                                                       to find symbolic expressions if we examine part of the so•
  *We thank the anonymous referees for their constructive com• lution space. Therefore, we propose representing an adhoc 
ments. The work described in this paper was substantially supported constraint cadhoc with a set of simple constraints in DNF. 
by a grant from the Research Grants Council of the Hong Kong Spe• A box is an n-dimensional hyper-cube, 
cial Administrative Region (Project no.                where is a (closed) interval of integers ai and bi. If 


1368                                                                                      POSTER PAPERS                                                                  Table 1 summarizes some results. N is the number of 
                                                              solutions. B and T are the number of boxes and triangles. 
                                                              tri-box generates no boxes (B = 0) in all 3 instances, gen 
                                                              is the generation time, rel and prop (for box and tri-box) 
                                                              are the time they spend on the propagation test M = 5000 
                                                              and W — 30. tri-box is the fastest because it compactly rep•
                                                              resents the non-linear constraints with 1 or 2 triangles, box, 
                                                              although is faster than re/, it takes a long time to generate be•
                                                              cause every box covers only a few solutions, and many boxes 
                                                              are needed. 

                                                                  N      rel            box               tri-box 
                                                                                B gen prop T gen prop 
Lemma 1 Let 
                                                                5601    33.78   87 19.17 14.07        2 2.25 6.04 
                                                                7187    23.58   57 20.97 10.92        1 3.05 3.95 
                                                                2050    11.59   40 3.43 5.11 2 0.95 4.70 

and suppose each constraint c,- is implemented by a gener-     Table 1: Performance comparisons on non-linear constraints 
alized arc consistent propagator, then using constructive dis•
junction on this representation achieves generalized arc con•
sistency for cadhoc. 
                                                              5 Conclusion 
                                                              We have proposed a new language-independent representa•
                                                              tion, box constraint collection, for adhoc constraints. With 
                                                              constructive disjunction, our new representation achieves 
                                                              generalized arc consistency, if all constraints inside the col•
                                                              lection do. 
                                                                 Future work includes improving the current greedy BCC 
                                                              generation algorithm, and optimizing the indexicals of a box 
                                                              constraint collection. 

                                                              References 
                                                              [Abdennadher and Rigotti, 2000] S. Abdennadher and 
                                                                 C. Rigotti. Automatic generation of propagation rules for 
  Figure 1: An adhoc constraint ctri made of two triangles 
                                                                 finite domains. In CP00, pages 18-34,2000. 

Example 1 A box constraint collection representation of the   [Apt and Monfroy, 1999] K.R. Apt and E. Monfroy. Auto•
                                                                 matic generation of constraint propagation algorithms for 
constraint ctri shown in Figure 1 is 
                                                                 small finite domains. In CP99, pages 58-72, 1999. 
                                                              [Bartak, 2001] R. Bartak. Filtering algorithms for tabular 
                                                                 constraints. In C1CLOPS2001, pages 168-182, 2001. 
   Due to space limitation, we cannot show how box con•       [Dao et al.,2002] T.B.H. Dao, A. Lallouet, A. Legtchenko, 
straint collections can be compiled into indexicals directly     and L. Martin. Indexical-based solver learning. In CP02, 
and efficiently.                                                 pages 541-555, September 2002. 
                                                              [Fruhwirth, 1998] T. Fruhwirth. Theory and practice of con•
4 Experiments                                                    straint handling rules. Journal of Logic Programming, 
We compare the propagation efficiency among box (indexi-         37(l-3):95-138, October 1998. 
cal BCCs for boxes only), tri - box (indexical BCCs for trian• [Tsang, 1993] E. Tsang. Foundations of Constraint Satisfac•
gles and boxes) and rel (the built-in relation/3 for binary      tion. Academic Press, 1993. 
adhoc constraints) on randomly generated cubic inequalities 

domly chosen between [—9..9]. The domain size is 100. For 
each variable X and Y, we repeat M times picking a subset 
      Dinit(x) where = W, and adding the constraints 
       for each These constraint additions are then re•
moved and the next set S picked. We do our implementation 
with SICStus Prolog 3.9.1 on a Sun Blade 1000 workstation. 


POSTER PAPERS                                                                                                      1369 