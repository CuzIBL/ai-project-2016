              A  Greedy    Approach      to Establish    Singleton   Arc   Consistency

                             Christophe  Lecoutre   and  Stephane´ Cardon
                                        CRIL-CNRS     FRE  2499,
                                           Universite´ d’Artois
                                              Lens, France
                                 {lecoutre, cardon}@cril.univ-artois.fr

                    Abstract                          the practical interest of utilizing such consistencies, instead
                                                      of arc consistency, before or during search.
    In this paper, we propose a new approach to estab-  There is a recent focus about singleton consistencies, and
    lish Singleton Arc Consistency (SAC) on constraint more particularly about SAC (Singleton Arc Consistency), as
    networks. While the principle of existing SAC al- illustrated by recent works of [Debruyne and Bessiere,` 1997b;
    gorithms involves performing a breadth-ﬁrst search Prosser et al., 2000; Bartak, 2004; Bessiere` and Debruyne,
                        1
    up to a depth equal to , the principle of the two 2004; 2005]. A constraint network is singleton arc consistent
    algorithms introduced in this paper involves per- iff any singleton check does not show unsatisﬁability, i.e., iff
    forming several runs of a greedy search (where at after performing any variable assignment, enforcing arc con-
    each step, arc consistency is maintained). It is then sistency on the resulting network does not entail a domain
    an original illustration of applying inference (i.e. wipe-out.
    establishing singleton arc consistency) by search.  In this paper, we propose two new algorithms, denoted
    Using a greedy search allows beneﬁting from the   SAC-3  and SAC-3+, to establish singleton arc consistency.
    incrementality of arc consistency, learning relevant While SAC algorithms introduced so far perform a breadth-
    information from conﬂicts and, potentially ﬁnding ﬁrst search up to a depth equal to 1, these two new algorithms
    solution(s) during the inference process. Further- perform several runs of a greedy search (where at each step,
    more, both space and time complexities are quite  arc consistency is maintained). However, unlike SAC-3+,
    competitive.                                      SAC-3 does not record the context of performed runs.
                                                        We  have identiﬁed several advantages to adopt this ap-
1  Introduction                                       proach:
Inference and search are two categories of techniques for pro- • extra space requirement is limited,
                [            ]
cessing constraints Dechter, 2003 . On the one hand, infer- • both algorithms beneﬁt from the incrementality of arc
ence is used to transform a problem into an equivalent form consistency,
which is either directly used to show the satisﬁability or un-
satisﬁability of the problem, or simpler to be handled by a • using a greedy search enables learning relevant informa-
search algorithm. Inference aims at modifying a constraint tion from conﬂicts,
network by employing structural methods such as variable • it is possible to ﬁnd solution(s) while establishing the
elimination and tree clustering, or ﬁltering methods based on consistency,
properties such as arc consistency and path consistency. On
the other hand, search is used to traverse the space delim- • time complexity of both algorithms is quite competitive.
ited by the domains of all variables of the problem. Search More precisely, the good space complexity of both algo-
can be systematic and complete by relying on breadth-ﬁrst or rithms allows to use them on large constraint networks. In
depth-ﬁrst exploration with backtracking, or stochastic and particular, SAC-3 admits the space complexity of the under-
incomplete by relying on greedy exploration and randomized lying arc consistency algorithm. Next, when a greedy search
heuristics.                                           maintaining arc consistency is used, we naturally beneﬁt from
  One of the most popular systematic search algorithms to the incrementality of arc consistency, i.e., the fact that itera-
solve instances of the Constraint Satisfaction Problem (CSP) tively establishing arc consistency on a more and more re-
is called MAC [Sabin and Freuder, 1994]. MAC interleaves duced search space is less penalizing than repeatedly estab-
inference and search since at each step of a depth-ﬁrst ex- lishing it on the original search space. Besides, when a dead-
ploration with backtracking, a local consistency called arc end is encountered during a greedy search, a no-good can be
consistency is maintained. However, since the introduction recorded and/or the origin of the failure taken into account.
of stronger consistencies such as max-restricted path consis- Also, some solutions may be found by the algorithm. Finally,
tency [Debruyne and Bessiere,` 1997a] and singleton arc con- if the instance contains a large under-constrained part, a very
sistency [Debruyne and Bessiere,` 1997b], one issue has been efﬁcient time complexity can be expected.2  Preliminaries                                      O(md)  and O(mn2d4) where n denotes the number of vari-
                                                      ables, d the size of the largest domain and m the number of
A constraint network consists of a ﬁnite set of variables such
                                                      constraints.
that each variable X has an associated domain dom(X) de-
noting the set of values allowed for X, and a ﬁnite set of A second algorithm, denoted SAC-2, has been proposed
                                                         [          ]
constraints such that each constraint C has an associated rela- by Bartak, 2004 . The idea is to check (again) the singleton
tion rel(C) denoting the set of tuples allowed for the variables arc consistency of a value (Y ,b) after the removal of a value
vars(C) involved in C. A solution to a constraint network is (X,a) only if (X,a) does not support (Y ,b), i.e., does not be-
an assignment of values to all the variables such that all the long to AC(P |Y =b). Hence, this algorithm allows avoiding
constraints are satisﬁed. A constraint network is said to be usefulness singleton checks by recording, for each value, the
satisﬁable if it admits at least a solution.          set of values supported by it. As expected and supported by
                                                                         [           ]
  The Constraint Satisfaction Problem (CSP), whose task is the experimentation of Bartak, 2004 , SAC-2 offers a signif-
to determine whether or not a given constraint network is sat- icant improvement of practical time efﬁciency with respect
                                                      to SAC-1. Worst-case space and time complexities of SAC-2
isﬁable, is NP-complete. A constraint network is also called           2 2          2 4
CSP instance. To solve a CSP instance, a depth-ﬁrst search al- are respectively O(n d ) and O(mn d ).
gorithm with backtracking can be applied, where at each step [Bessiere` and Debruyne, 2004] have remarked that SAC-2
of the search, a variable assignment is performed followed does not present any improvement in terms of worst-case time
by a ﬁltering process called constraint propagation. Usually, complexity because whenever the singleton arc consistency
constraint propagation algorithms, which are based on some of a value (X,a) must be checked again, one has to perform
constraint network properties such as arc consistency, remove the arc consistency enforcement on P |X=a from scratch. In
some values which can not occur in any solution.      other words, SAC-2 does not exploit the incrementality of arc
                                                      consistency. An arc consistency algorithm is said incremen-
Deﬁnition 1 Let P = (X , C ) be a constraint network, C ∈ tal if its worst-case time complexity is the same when it is ap-
C , X ∈ vars(C) and a ∈ dom(X).   (X, a) is said to be plied one time on a given network P and when it is applied up
arc consistent wrt C iff there exists a support of (X, a) in C, to nd times on P where, between two consecutive executions,
i.e., a tuple t ∈ rel(C) such that t[X] = a. P is said to at least one value has been deleted. All current arc consis-
be arc consistent iff ∀X ∈ X , dom(X) 6= ∅ and ∀C ∈ C , tency algorithms are incremental. To beneﬁt from the incre-
∀X ∈  vars(C), ∀a ∈ dom(X), (X, a) is arc consistent wrt mentality of arc consistency, [Bessiere` and Debruyne, 2004;
C.                                                    2005] have proposed a new algorithm, SAC-OPT, that dupli-
                                                                                         nd
  AC(P ) will denote the constraint network obtained after cates the original constraint network into dedicated con-
                                                                                       X a
enforcing Arc Consistency (AC) on a given constraint net- straint networks, one for each value ( , ) of the instance.
                                                                                                     X a
work P . AC(P ) is such that all values of P that are not arc Simply, whenever the singleton consistency of a value ( , )
consistent have been removed. Note that a value will usu- must be checked, the dedicated constraint network is used.
ally refer to a pair (X,a) with X ∈ X and a ∈ dom(X). Worst-case space and time complexities of SAC-OPT are re-
                                                                  mnd2        mnd3
If there is a variable with an empty domain in AC(P ), de- spectively O( ) and O(  ) which is the best time
noted AC(P ) = ⊥, then P is clearly unsatisﬁable. P | with complexity that can be expected from an algorithm enforc-
                                             S                                 [    `                   ]
S ⊂  {X  = a|X  ∈ X  ∧ a ∈  dom(X)}  is the constraint ing singleton arc consistency Bessiere and Debruyne, 2004 .
       1                                                Finally, from the observation that a space complexity in
network obtained from P by restricting the domain of X to   2
the singleton {a} for any variable assignment X = a ∈ S. O(mnd ) prevents the use of SAC-OPT on large constraint
                                                      networks, [Bessiere` and Debruyne, 2005] have proposed an-
Deﬁnition 2 Let P = (X , C ) be a constraint network, X ∈ other algorithm called SAC-SDS which represents a trade-off
X  and a ∈  dom(X).  (X, a) is said to be singleton arc between time and space. With respect to each value, only
consistent iff AC(P |X=a) 6= ⊥. P is said to be singleton arc the domain (called SAC-support) is recorded as well as a
consistent iff ∀X ∈ X , dom(X) 6= ∅ and ∀a ∈ dom(X),  propagation list used for arc consistency. In return, the data
(X, a) is singleton arc consistent.                   structures required to establish arc consistency are no more
                                                      dedicated but shared. An experimental study on random in-
  X  will be called the domain of P = (X , C ). We will
                                                      stances have highlighted the good performance of this algo-
note (X, a) ∈ P (respectively, (X, a) ∈/ P ) iff X ∈ X and
                                                      rithm. Worst-case space and time complexities of SAC-SDS
a ∈ dom(X) (respectively, a 6∈ dom(X)).
                                                      are respectively O(n2d2) and O(mnd4).
3  Overview   of SAC  algorithms
                                                      4   SAC-3
The ﬁrst algorithm that has been proposed to establish single-
ton arc consistency is called SAC-1 [Debruyne and Bessiere,` All algorithms previously mentioned involve performing a
1997b]. The principle of this algorithm is to check the sin- breadth-ﬁrst search up to a depth equal to 1. Each branch
gleton arc consistency of all variables whenever a value is (of size 1) of this search corresponds to check the singleton
detected singleton arc inconsistent and then removed. Worst- arc consistency of a value, and allows removing this value if
case space and time complexities of SAC-1 are respectively an inconsistency is found (after establishing arc consistency).
                                                      One alternative is to check the singleton arc consistency of a
  1It will be assumed that X = a ∈ S ∧ Y = b ∈ S ⇒ X 6= Y value in the continuity of previous checks. In other words, we
and, for convenience, P |{X=a} will be simply denoted by P |X=a. can try to build less branches of greater sizes using a greedysearch (where at each step, arc consistency is maintained). Algorithm 1 buildBranch()
As long as, for a current branch, no inconsistency is found, 1: br ← ∅
we try to extend it. When an inconsistency if found, either 2: Pbefore ← P
the branch is of size 0 and a value is detected inconsistent, or 3: consistent ← true
all but last variable assignments correspond to singleton arc 4: repeat
consistent values. This last statement relies on Proposition 1. 5: pick and delete (X,a) ∈ Qsac s.t. X 6∈ vars(br)
                                                       6:  P ←  AC(P |X=a,{X})
Proposition 1 Let P = (X , C ) be a constraint network and 7: if P 6= ⊥ then
let S ⊂ {X = a|X ∈ X  ∧ a ∈ dom(X)}. If AC(P |S) 6= ⊥  8:    add (X,a) to br
then any pair (X,a) such that X ∈ X and dom(X) = {a} in 9: else
AC(P |S) is singleton arc consistent.                 10:    consistent ← false
                                                      11:    if br 6= ∅ then
  Proof. If AC(P |S) 6= ⊥ then, clearly any element X = 12:    add (X,a) to Qsac
a ∈ S is singleton arc consistent. It is a consequence of the 13: end if
monotony of arc consistency. One should observe that we can 14: until not consistent ∨ vars(Qsac) − vars(br) = ∅
also ﬁnd some values (Y ,b) such that Y ∈ X and dom(Y ) 15: P ← Pbefore
                                                           br  ∅
= {b} in AC(P |S) with Y = b 6∈ S. These values are also 16: if = then
clearly singleton arc consistent.                    17:  remove a from dom(X)
                                                      18:  P ←  AC(P,{X})
  As mentioned in the proof above, some values can be de-
                                                      19:  Qsac ← Qsac −{(Y, b)|(Y, b) ∈ dom(Pbefore)−dom(P )}
tected singleton arc consistent while checking the singleton 20: end if
arc consistency of another one(s). Proposition 1 can then be
seen as a generalization of Property 2 in [Chmeiss and Sais,
2000], and is also related to the exploitation of singleton- Algorithm 2 SAC-3(P = (X , C ) : CSP)
valued variables in [Sabin and Freuder, 1997].         1: P ← AC(P ,X )
  Although the primary goal of our approach was to exploit 2: repeat
incrementality of arc consistency, other nice features have 3: Pbefore ← P
                                                                              X
been observed. Indeed, using a greedy search, one may ﬁnd 4: Qsac ← {(X, a) | X ∈ ∧ a ∈ dom(X)}
solutions and one can learn from conﬂicts by recording no- 5: while Qsac 6= ∅ do
                                                       6:    buildBranch()
goods or weighting failure culprits.
                                                       7: until P = Pbefore
  Below, we give the description of a ﬁrst algorithm that uses
a greedy search in order to establish singleton arc consistency.
The description is given in the context of using an underlying no inconsistency is detected when a solution is found or when
coarse-grained arc consistency algorithm (e.g. AC3 [Mack- there is no way of extending the current branch. Finally, in or-
worth, 1977] or AC3.2/3.3 [Lecoutre et al., 2003]) with a der to maximally beneﬁt from the incrementality of arc con-
variable-oriented propagation scheme.
                                        X  C          sistency, we have to build branches as long as possible. Hence
  First, let us introduce some notations. If P = ( , ), then (although not indicated in the algorithm), it is important to se-
AC(P ,Q) with Q ⊆ X means enforcing arc consistency on
                                                      lect ﬁrst values (X,a) ∈ Qsac such that a ∈ dom(X).
P from the given propagation set Q. For a description of
AC, see, for instance, the function propagateAC in [Bessiere` Proposition 2 SAC-3 is a correct algorithm with a worst-
and Debruyne, 2005]. Q  is the set of values whose sin- case space complexity in O(md) and a time complexity in
                     sac                                    2
gleton arc consistency must be checked. A branch corre- O(bmd ) where b denotes the number of branches built by
sponds to a set of values that have been assigned. For any SAC-3.
                               X
set of values S ⊆ {(X, a) | X ∈    ∧ a ∈ dom(X)},       Proof. Correctness results from Proposition 1. If SAC-
vars(S) = {X|(X, a) ∈ S}. Finally, an instruction of the 3 uses an optimal coarse-grained arc consistency algorithm
form Pbefore ← P should not be systematically considered such as AC3.2, then the overall space complexity is O(md)
as a duplication of the problem. Most of the time, it corre- since space complexity of AC3.2 is O(md), the data struc-
spond to store or restore the domain of a network (and the
                                                      ture Qsac is O(nd) and each branch built is O(n). The over-
structures of the underlying arc consistency algorithm). all time complexity is O(bmd2) since, due to incrementality,
  Algorithm 2 starts by enforcing arc consistency on the each branch built by the algorithm is O(md2). 
given network. Then, all values are put in the structure Qsac Remark that b must include the “empty” branches that cor-
and in order to check their singleton arc consistency, succes- respond to the detection of inconsistent SAC values. With
sive branches are built. The process continues until a ﬁx-point respect to already singleton arc consistent constraint net-
is reached. Algorithm 1 allows building a branch by per- works, Corollary 1 indicates that SAC-3 can outperform
forming successive variable assignments while maintaining SAC-OPT and SAC-SDS (admitting then a time complexity
arc consistency (line 6). When an inconsistency is detected in O(mnd3)). More interestingly, it suggests that SAC-3 can
for a non empty branch, one has to put back the last value in outperform SAC-OPT and SAC-SDS on structured (not nec-
Qsac (line 12) since we have no information about the sin- essarily singleton arc consistent) instances that contain large
gleton arc consistency or inconsistency of this value. If the under-constrained parts as can be expected in real-world ap-
branch is empty, we have to manage the removal of a value plications.
and to reestablish arc consistency (lines 16 to 19). Note thatCorollary 1 SAC-3 admits a worst-case time complexity in
     2 4
O(mn  d ) but, when applied to an already singleton arc con- Algorithm 3 update(set : Set of Values)
                                             2
sistent constraint network, SAC-3 admits a best-case time Q     Q     set
                 3                                     1:  sac ←  sac −
complexity in O(md ) and a worst-case time complexity in 2: each br ∈ brs
      3                                                  for           do
O(mnd  ).                                              3:  for each (X,a) ∈ set do
                            n2d2+nd                    4:   if (X,a) ∈ P [br] then
  Proof. In the worst-case, b = 2  , hence, we obtain  5:     remove (X,a) from P [br]
O(mn2d4). When applied to an already singleton arc consis- 6: add X to Q[br]
tent constraint network, the best and worst cases correspond 7: endif
to branches of maximum size and of size 1 (1 consistent as-
signment followed by an inconsistent one), respectively. We
have then respectively b = d (all branches delivering a solu-
tion) and b = nd branches.                           Algorithm 4 buildBranch+()
                                                       1: br ← ∅
5  SAC-3+                                              2: Pbefore ← P
                                                       3: consistent ← true
  It is possible to improve the behaviour of the algorithm 4: repeat
SAC-3 by recording the domain of the constraint networks 5: pick and delete (X,a) ∈ Qsac s.t. X 6∈ vars(br)
obtained after each greedy run, that is to say, for each branch. 6: P ← AC(P |X=a,{X})
When  a value is removed, it is then possible to determine 7: if P 6= ⊥ then
which previously built branches must be reconsidered. In- 8: add (X,a) to br
deed, if a removed value does not support a branch, i.e. does 9: Pstore ← P
not belong to the domain associated with the branch, all val- 10: else
ues of the branch remain singleton arc consistent. On the 11: consistent ← false
other hand, if it supports a branch, we have to verify that the 12: if br 6= ∅ then
                                                                  X  a   Q
branch still remains valid by re-establishing arc consistency 13: add ( , ) to sac
                                                      14:  end if
from the recorded domain. When a branch is no more valid,
                                                      15: until not consistent ∨ vars(Qsac) − vars(br) = ∅
we have to delete it. In summary, SAC-3+ exploits incremen- 16: P ← Pbefore
tality as SAC-SDS does.                               17: if br = ∅ then
  In order to manage domain and propagation of constraint 18: remove a from dom(X)
networks corresponding to branches, we consider two arrays 19: P ← AC(P,{X})
denoted P [] and Q[]. For a given branch br, P [br] corre- 20: update({(Y, b)|(Y, b) ∈ dom(Pbefore) − dom(P )})
sponds to the constraint network associated with the branch 21: else
br (in fact, we only need to record the domain of the con- 22: P [br] ← Pstore
straint network) whereas Q[br] contains the variables that 23: add br to brs
                                                      24:
have lost some value(s) and that should be considered when end if
re-establishing arc consistency.
  After enforcing arc consistency on the given network, Al-
gorithm 6 builds successive branches by calling the function
buildBranch+.  Once the singleton arc consistency of all Algorithm 5 checkBranches()
values of Qsac have been tested, we have to check the valid- 1: for each branch br ∈ brs do
ity of the branches that have been built and recorded in brs 2: P [br] ← AC(P [br], Q[br])
by a call to the function checkBranches since some values 3: if P [br] = ⊥ then
may have been deleted after a branch has been built. For each 4: Qsac ← Qsac∪ br
                                                       5:    remove br from brs
branch br, we re-establish arc consistency on P [br] (line 2 of
                                                       6:  end if
Algorithm 5) and in case of a domain wipe-out, we delete this 7: end for
branch and update Qsac (lines 4 and 5).
  Algorithm 4 differs from Algorithm 1 on two aspects. First,
we need to record the domain of the constraint network cor-
responding to the branch that is built (line 22) and add this                  X  C
branch to brs (line 23). Note that if the last variable assign- Algorithm 6 SAC-3+(P = ( , ) : CSP)
                                                                   X
ment entails a domain wipe-out, Pstore is not updated (line 1: P ← AC(P , )
9                       P [br]                         2: brs ← ∅
 ). For the implementation,  can be directly set (back-                     X
tracking one step if necessary) without any duplication of do- 3: Qsac ← {(X, a) | X ∈ ∧ a ∈ dom(X)}
                                                              Qsac 6= ∅
main. Second, after re-establishing arc consistency (line 19), 4: while do
                                                       5:  while Qsac 6= ∅ do
all values that have been removed including the singleton arc 6: buildBranch+()
inconsistent one (line 18) must be taken into account in order 7: checkBranches()
                                                       8: end while
  2Even if the worst-case time complexity of the underlying arc
consistency algorithm is considered.                                                                    10.0
to update the state of all branches (line 20). For each branch
(line 2 of Algorithm 3), we have to remove these values (line
5) and update the propagation list (line 6).
Proposition 3 SAC-3+ is a correct algorithm with a space
complexity in O(bmaxnd + md)  and a  time complexity
        2
in O(bmd ) where bmax denotes the maximum number of
branches recorded by SAC-3+ and b denotes the number of               1.0
times a branch is built or checked by SAC-3+.
  Proof. Correctness comes from Proposition 1 and the fact
that once, the singleton arc consistency of all values have
been checked and some branches recorded, one verify that the
property still holds by calling checkBranches. In addition                   8.0
to the space requirement in O(md) of the underlying optimal           0.1
                                                                             7.0
coarse-grained arc consistency algorithm, it is necessary to

record the domain of the constraint networks corresponding                   6.0
to the valid branches that have been built. As recording a CPU  time (in seconds)
domain is in O(nd), we obtain O(bmaxnd + md).                               5.0
  Remark that Corollary 1 also holds for SAC-3+. However,
one should be optimistic about the average time complexity                   4.0
                                                                      0.0
of this algorithm since it avoids building new branches when                 3.0
unnecessary.
                                                                             2.0


6  Experiments                                                               1.0
To prove the practical interest of the algorithms introduced
                                                                             0.0
in this paper, we have implemented them as well as the al-                 0.66  0.68  0.7  0.72  0.74
gorithms SAC-1 and SAC-SDS, the latter being considered               0.0
as the most current efﬁcient SAC algorithm [Bessiere` and          0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9
                                                                                 tightness (t)
Debruyne, 2005]. We have used AC3.2 [Lecoutre et al., Figure 1: mean cpu time on 50 random instances of class
2003] as an underlying arc consistency algorithms. We have (100,20,0.05,t) at each value of t
conducted an experimentation on a PC Pentium IV 2,4GHz
512Mo under Linux with respect to different classes of ran- Next, we have dealt with the following academic instances:
dom, academic and real-world instances. Performances have
been measured in terms of the number of singleton arc con- • two chessboard coloration instances, denoted cc-20-2
sistency checks (#scks) and the cpu time in seconds (cpu). and cc-20-3, involving quaternary constraints,
For information, is also given, for each instance, the number • two Golomb ruler instances, denoted gr-34-8 and gr-34-
(#×) of values removed by any SAC algorithm (when #×=0,   9, involving binary and ternary instances,
it means that the instance is initially singleton arc consistent).
                                                        • two prime queen attacking instances, denoted qa-5 and
  First, we have experimented the two classes of random bi-
                                                          qa-6, involving only binary constraints.
nary CSP instances introduced in [Bessiere` and Debruyne,
2005]. However, due to lack of space, we only present the Table 1 shows that SAC-3, and especially SAC-3+, have
ﬁgure depicting results about the class (100,20,0.05,t) corre- on some instances a much better behaviour than SAC-1 and
sponding to sparse constraint networks with 100 variables, 20 SAC-SDS. Roughly speaking, it can explained by the fact that
values per domain and a density of 0.05 (i.e., 248 constraints). such instances have some regular structure.
t denotes the constraint tightness, i.e., the proportion of unal- Next, we have tested real-world instances, taken from the
lowed tuples in the relations associated with the constraints. FullRLFAP archive, which contains instances of radio link
  In Figure 1, we can observe that when t < 0.6 (the be- frequency assignment problems. Table 2 shows the results
ginning of a phase transition), SAC-3 and SAC-3+ have the obtained on some representative instances. As expected, on
same behaviour and outperform SAC-1 and SAC-SDS. In the already singleton arc consistent instances (scen02, graph14),
phase transition, SAC-3 and SAC-SDS respectively become a signiﬁcant improvement is obtained. But it is also true for
the worst and the best approaches. For complete networks the other instances as they contain large under-constrained
of the class (100,20,1,t), similar results (not depicted here) parts. It clearly appears that, on such structured instances,
are obtained, and at the pic of difﬁculty, SAC-SDS (181 s) is using SAC-3 and SAC-3+ is the best approach, especially as
about three times more efﬁcient than SAC-1 (478 s) and SAC- SAC-SDS has been out of memory on some instances.
3 (553 s) and two times more efﬁcient than SAC-3+ (307 s). It is interesting to note that SAC-3 and SAC-3+ can be
It is not really a surprise since the generated instances have much faster than SAC-1 and SAC-SDS even if the number
no structure, which corresponds to the worst-case for SAC-3 of singleton checks (see for example, cc-20-2 and scen02) is
and SAC-3+ as the average size of the branches that are built similar. It results from the exploitation of the incrementality
(at the critical point) is quite small (≈ 3).         of arc consistency (when building branches). Another point