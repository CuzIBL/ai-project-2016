             The Fringe-Saving A* Search Algorithm - A Feasibility Study

                       Xiaoxun Sun                                  Sven Koenig
              Computer Science Department                  Computer Science Department
             University of Southern California            University of Southern California
               Los Angeles, CA 90089-0781                   Los Angeles, CA 90089-0781
                    xiaoxuns@usc.edu                              skoenig@usc.edu

                    Abstract                          list of A* at the point in time when an A* search for the
                                                      current search problem could possibly deviate from the A*
    In this paper, we develop Fringe-Saving A*        search for the immediately preceeding search problem be-
    (FSA*), an incremental version of A* that repeat- cause the A* search for the current search problem has en-
    edly ﬁnds shortest paths in a known gridworld from countered a changed edge cost. FSA* then restarts the A*
    a given start cell to a given goal cell while the search at that point. In the following sections, we ﬁrst de-
    traversability costs of cells increase or decrease. scribe which search problems FSA* solves. Second, we ex-
    The ﬁrst search of FSA* is the same as that of A*. plain in detail how FSA* reuses information from the im-
    However, FSA* is able to ﬁnd shortest paths dur-  mediately preceeding search to speed up the current search.
    ing the subsequent searches faster than A* because Finally, we present ﬁrst experimental results that demonstrate
    it reuses the beginning of the immediately preceed- that FSA* can have a runtime advantage over A* and LPA*
    ing A* search tree that is identical to the current A* [Koenig et al., 2004a], an alternative incremental version of
    search tree. FSA* does this by restoring the content A*.
    of the OPEN list of A* at the point in time when an
    A* search for the current search problem could de-
    viate from the A* search for the immediately pre- 2   Search Problems and Notation
    ceeding search problem. We present ﬁrst experi-   Fringe-Saving A* (FSA*) solves path-planning problems in
    mental results that demonstrate that FSA* can have known ﬁnite gridworlds whose vertices correspond to the
    a runtime advantage over A* and Lifelong Planning cells and whose edge costs increase or decrease over time. In
    A* (LPA*), an alternative incremental version of  this paper, we describe a version of FSA* that works on grid-
    A*.                                               worlds of square cells that are either blocked or unblocked,
                                                      where one can always move from an unblocked cell to one of
1  Introduction                                       the four adjacent cells with cost one, provided that the adja-
                                                      cent cell is unblocked. We use the following notation to be
Most research on heuristic search has studied how to solve able to state the search problems formally: S denotes the ﬁ-
one-shot search problems. However, search is often a repet- nite set of unblocked cells. Succ(s) ⊆ S denotes the set of un-
itive process where one needs to ﬁnd shortest paths to series blocked cells that border unblocked cell s ∈ S. FSA* repeat-
of similar search problems because the world changes over edly determines a shortest (unblocked) path from a given un-
time. For example, the trafﬁc conditions can change when
                                                      blocked cell sstart ∈ S to a given unblocked goal cell sgoal ∈ S
one drives to the airport and one might have to change the
                                                      with sstart = sgoal as the traversability of cells changes, al-
current route if the radio reports additional congestion. In ways knowing which cells are currently unblocked.
this case, one has to replan for the new situation. Incremen-
tal search algorithms are often able to ﬁnd shortest paths to
series of similar search problems faster than is possible by 3A*
solving each search problem independently, by re-using infor- A* [Hart et al., 1968] is the most popular heuristic search al-
mation from the preceeding searches [Koenig et al., 2004b]. gorithm. It maintains three values for every cell: First, the
In this paper, we develop Fringe-Saving A* (FSA*), an in- h-value h(s) of a cell s is the user-given approximation of
cremental version of A* [Hart et al., 1968] that repeatedly the distance from the cell to the goal cell (= heuristic), which
ﬁnds shortest paths in a known gridworld from a given start we assume to be consistent, that is, it satisﬁes the triangle in-
cell to a given goal cell while the traversability costs of cells equality [Pearl, 1985]. It is not changed during an A* search.
increase or decrease. However, FSA* is often able to ﬁnd Second, the g-value g(s) of a cell s is an approximation of
shortest paths during the subsequent searches faster than A* the distance from the start cell to the cell. It is changed dur-
because it reuses the beginning of the immediately preceed- ing the A* search. Finally, the parent pointer Parent(s) of
ing A* search tree that is identical to the current A* search a cell s points to its parent cell in the A* search tree. It is
tree. FSA* does this by restoring the content of the OPEN also changed during the A* search. A* maintains two data

                                                IJCAI-07
                                                  2391structures: First, the CLOSED list contains all cells that have
been expanded during the A* search. Initially, it is empty.
Second, the OPEN list contains all cells that have been gen-
erated but not yet expanded during the A* search. Initially,
it contains only the start cell with g-value zero. A* repeats
the following procedure: A* removes a cell with the smallest
sum of g-value and h-value from the OPEN list, inserts it into
the CLOSED list and expands it by performing the following
procedure for each unblocked adjacent cell. If the adjacent
cell is neither in the OPEN nor CLOSED list, then A* gen-
erates the adjacent cell by setting the g-value of the adjacent
cell to the g-value of the expanded cell plus one, setting the
parent pointer of the adjacent cell to the expanded cell, and       Figure 1: Search Problem 1
then inserting the adjacent cell into the OPEN list. If the ad-
jacent cell is in the OPEN list and the g-value of the expanded
                                                      simple. The ﬁrst search of FSA* to determine a shortest path
cell plus one is smaller than the g-value of the adjacent cell,
                                                      from the start cell to the goal cell is the same as an A* search.
then A* sets the g-value of the adjacent cell to the g-value
                                                      Now assume that the traversability of some cells changes and
of the expanded cell plus one and sets the parent pointer of
                                                      consider another A* search to determine a shortest path from
the adjacent cell to the expanded cell. A* terminates imme-
                                                      the start cell to the goal cell. The second A* search ini-
diately when its OPEN list is empty or when it is about to
                                                      tially expands the same cells in the same order as the ﬁrst A*
expand the goal cell. (For simplicity, we count the goal cell
                                                      search. FSA* restores the overall state of the ﬁrst A* search
as expanded.) Figure 1 shows the state of an A* search with
                                                      at the point in time when the second A* search could possibly
start cell D2 (marked S) and goal cell F6 (marked G) after
termination. We use the consistent Manhattan distance (the deviate from it, that is, when the second A* search encoun-
                                                      ters a cell whose traversability changed between the two A*
sum of the absolute x and y distances between a cell and the
                                                      searches. FSA* then restarts the ﬁrst A* search at that point
goal cell) as an approximation of the distance from a cell to
the goal cell. Every cell has its h-value in the lower left cor- in time rather than performing the second A* search from
                                                      scratch. The state of an A* search is given by the content
ner. Every generated cell also has its g-value in the upper left
                                                      of its OPEN and CLOSED lists and the g-values and parent
corner, the sum of g-value and h-value in the upper right cor-
ner, and its parent pointer pointing to its parent cell in the A* pointers of the cells contained in them. FSA* executes the
                                                      following steps.
search tree. Every expanded cell also has its sequence number
                                                        Step 1 (Restoration of the CLOSED list): Assume that
in the lower right corner that indicates when it was expanded.                                      ( )
FSA* makes use of the following four properties of A*: First, there are two complete A* searches and that ExpandedId s is
A* terminates. Second, the sum of g-value and h-value of the
                                                      indicate that the g-value of the cell is current. 3) Rather than
sequence of expanded cells is monotonically nondecreasing                     s
over time. Third, the g-value and parent pointer of any cell identifying the reusable cells repeatedly by checking whether
                                                      ExpandedId(s) < BlockId(ExpandedIteration(s)), lines {55-56}
are correct when it is expanded and then do not change any set GeneratedIteration(s)=Iteration for the reusable cells s that
longer, that is, the g-value of an expanded cell is equal to the could otherwise get re-generated by the A* search. This way, the
distance from the start cell to the cell (= the start distance of A* search knows that the g-values of these cells are current and,
the cell) and a shortest path from the start cell to the cell can since it cannot decrease their g-values, will not re-generate the cells.
be identiﬁed in reverse by following the parent pointers from Lines {55-56} can be implemented very efﬁciently as part of iden-
the cell to the start cell. This property implies that A* ﬁnds tifying and traversing the relevant part of the fringe. 4) Lines {43-
a shortest path from the start cell to the goal cell if it termi- 45} can be efﬁciently implemented with a linked list to skip those
nates because it is about to expand the goal cell. Fourth, no elements BlockId(i) for which no cell s with ExpandedId(s) <
                                                            (              (s))
path exists from the start cell to the goal cell if A* terminates BlockId ExpandedIteration exists. 5) To be more efﬁcient, our
because its OPEN list is empty.                       implementation of FSA* traverses only the immediate outside of
                                                      the continuous area of reusable cells between the borders of the
                                                      gridworld in case the continuous area of reusable cells touches the
4FSA*                                                 border. To this end, FSA* traverses the immediate outside of the
                                                      continuous area of reusable cells in the clockwise direction, start-
Fringe-Saving A* (FSA*) is an incremental version of A*. ing with the anchor cell, until it is about to leave the anchor cell
                           1
Figure 6 gives its pseudo code. The idea behind FSA* is a second time in the same direction or reaches some cell of the
                                                      border. In the second case, it then traverses the immediate outside
  1The function OPEN.Insert(s) inserts a cell s into the OPEN of the continuous area in the counter-clockwise direction, starting
list; and OPEN.P op(s) removes and returns a cell with the small- again with the anchor cell, until it reaches some (potentially dif-
est sum of g-value and h-value from the OPEN list. The fol- ferent) cell of the border. The fourth gridworld in Figure 2 illus-
lowing comments are meant to help the reader understand the trates this process for the search problem from Figure 1. 6) To
pseudo code better: 1) The initializations on lines {02-05} will be more efﬁcient, our implementation of FSA* collapses the two
not actually be executed since memory cells are typically initial- variables GeneratedIteration(s) and ExpandedIteration(s) into one
ized with zero. 2) When a cell s is generated during the A* variable Iteration(s) although this requires code changes that make
search then line {24} sets GeneratedIteration(s)=Iteration to the pseudo code harder to understand.

                                                IJCAI-07
                                                  2392                                   Figure 2: Search Problem 1 (continued)

the sequence number of cell s after the ﬁrst A* search, that is, lem by maintaining the following global variables: Iteration
that cell s was expanded ExpandedId(s)th during the ﬁrst A* is the number of the current search, that is, Iteration =
search. (The start cell was expanded ﬁrst. If cell s was not ex- i during the ith search. FSA* also maintains a value
panded during the ﬁrst A* search, then ExpandedId(s)=∞.) BlockId(i) for the ith search and the values ExpandedId(s)
Assume further that only one cell s changed its traversabil- and ExpandedIteration(s) for every cell s, initialized as fol-
ity between the two A* searches. We now determine a value lows: BlockId(0) = 0 and, for all cells s, ExpandedId(s)=0
for m so that the second A* search expands at least every and ExpandedIteration(s)=0{01,04-05}.FSA*thenmain-
cell s with ExpandedId(s) <min the same order as the ﬁrst tains the following invariant directly before the ith search: If
A* search. If cell s became blocked, then the second A* ExpandedId(s) < BlockId(ExpandedIteration(s)) then cell s
search expands at least every cell s with ExpandedId(s) < would have been expanded as ExpandedId(s)th cell during
ExpandedId(s) in the same order as the ﬁrst A* search, that the immediately preceeding search if it had been a complete
is, every cell up to but not including cell s. Thus, we set search {28-30}. If FSA* determines that every cell s with
m  := m(s):=ExpandedId(s). If cell  s became un-   ExpandedId(s) <mis reusable for the Iterationth search,
blocked, then the second A* search expands at least every cell then it proceeds as follows: First, it invalidates all cells with
               ( )   1+min                     ( )                                                ( ):=
s with ExpandedId s <      s∈Succ(s) ExpandedId s  sequence numbers no smaller than m by setting BlockId i
in the same order as the ﬁrst A* search, that is, every cell min(m, BlockId(i)) for all 1 ≤ i ≤ Iteration, which is much
up to and including the neighbor of cell s that was ex- faster than visiting all cells with invalid sequence numbers
panded ﬁrst in the ﬁrst A* search. Thus, we set m :=  {43-45}. Second, whenever it expands a cell s during the
  ( ):=1+min                        ( )            Iterationth search it sets ExpandedIteration(s):=Iteration,
m s              s∈Succ(s) ExpandedId s . If several
      ∈                                             ExpandedId(s):=m     and m  :=  m +1{15-17}.Fi-
cells s  S  changed their traversability between the two               (       ):=∞{     }             :=
A* searches, then the second A* search expands at least ev- nally, it sets BlockId Iteration 12 and Iteration
                                                     Iteration +1{48}.
ery cell s with ExpandedId(s) <m:=   mins∈S m(s )
in the same order as the ﬁrst A* search {32-42} (numbers Step 2 (Early Termination): If the goal cell is reusable,
in curly braces refer to line numbers in the pseudo code). then FSA* does not need to replan because the shortest path
Thus, these cells (which are guaranteed to be unblocked) from the start cell to the goal cell from the immediately pre-
                                                      ceeding search is also a shortest path for the current search
are in the new CLOSED list. We refer to them as reusable { }
cells. The ﬁrst gridworld in Figure 2 illustrates this process 75 . If the start cell is not reusable and blocked, then FSA*
for the search problem from Figure 1 after cell C5 with se- terminates without replanning because there is no path from
quence number 11 became blocked. All cells with sequence the start cell to the goal cell. If the start cell is not reusable
numbers less than 11 are then reusable, as indicated in grey. and unblocked, then FSA* performs a complete A* search
It turns out that maintaining the sequence numbers is more from scratch.
complicated than discussed so far in case there are several Step 3 (Restoration of the OPEN list): The unblocked
searches in a row because FSA* might have to reuse cells and non-reusable cells that border one or more reusable cells
from different searches. We would like a sequence num- are in the new OPEN list. First, FSA* identiﬁes the anchor
ber ExpandedId(s) to mean that cell s would have been ex- cell, a non-reusable cell that borders one or more reusable
panded ExpandedId(s)th during the immediately preceeding cells, by following the parent pointers from the goal cell to
A* search if the immediately preceeding search had been a the start cell until it transitions from a non-reusable cell to
                                                                   {     } 2
complete A* search. Now consider the case where some  a reusable cell 50-53 . This non-reusable cell then is the
cell s was expanded during the ﬁrst search, but the cell anchor cell. The second gridworld in Figure 2 illustrates this

was not reusable in the second search. Then, some other  2
cell might have received the same sequence number as cell FSA* cannot follow the parent pointers from the goal cell to the
s during the second search, and FSA* might have to de- start cell if no path from the start cell to the goal cell existed in the
                                                      immediately preceeding search. Whether a path exists or not, it can
termine during the third search that the sequence number always simply follow a path from the goal cell to the start cell that
of cell s has become invalid. FSA* addresses this prob- ﬁrst greedily decreases the x and then the y distance to the start cell.

                                                IJCAI-07
                                                  2393 Figure 3: Search Problem 2 Figure 4: Search Problem 3              Figure 5: Search Problem 4

                                                      and parent pointer of an unblocked cell changed during the
process for the search problem from Figure 1, resulting in an-
                                                      A* search because the A* search ﬁrst found a path from the
chor cell C5. Second, FSA* identiﬁes the cells that belong
                                                      start cell to the cell in question and then found a shorter path
to the relevant part of the new OPEN list (= fringe). The
                                                      from the start cell to the cell in question. If the state of this
reusable cells form a continuous area since they are all reach-
                                                      A* search needs to be restored at a point in time after the ﬁrst
able from the start cell. FSA* can traverse the immediate out-
                                                      path was found but before the second path was found, then
side of this continuous area (say, in the clockwise direction),
                                                      the g-value and parent pointer of the cell in question need to
starting with the anchor cell, and insert all unblocked cells
                                                      be corrected. Figure 5 (left and right) show for a search prob-
that border one or more reusable cells into the relevant part
                                                      lem different from our main one that it is important to update
of the new OPEN list {54-66}. FSA* does not stop when it
                                                      the g-values and parent pointers of the cells in the new OPEN
reaches the anchor cell a second time but only when it is about
                                                      list. The start cell is C2 and the goal cell is E6. Figure 5 (left)
to leave the anchor cell a second time in the same direction.
                                                      shows the ﬁrst A* search. Figure 5 (right) shows the situa-
The third gridworld in Figure 2 illustrates this process for the
                                                      tion after cell C3 became blocked. The g-value and parent
search problem from Figure 1. The cells C2, C3 and B4 form
                                                      pointer of cell D4 are incorrect and need to be corrected from
the relevant part of the new OPEN list, as indicated in the ﬁg-
                                                      3 and C4, respectively, to 5 and E4. For Case 1 and 2, FSA*
ure. Figure 3 shows for a search problem different from our
                                                      ﬁnds any reusable cell adjacent to the cell in question, sets the
main one that the termination condition is indeed important.
                                                      g-value of the cell in question to the g-value of the reusable
The start cell is E3 and the goal cell is B5. After cell C4 be-
                                                      cell plus one, and the parent pointer of the cell in question to
came blocked, FSA* visits cells C4, D4 and C4 again when
                                                      the reusable cell {58-63}. It is correct for Case 1 since a cell
it traverses the immediate outside of the continuous area of
                                                      in the new OPEN list that just became unblocked has exactly
reusable cells, at which point it does not stop since the an-
                                                      one adjacent reusable cell. We prove the correctness for Case
chor cell C4 was ﬁrst left towards the south but is now left
                                                      2 in the next section.
towards the east. If it did stop, then it would not identify all
cells that belong to the relevant part of the new OPEN list. Step 5 (Sorting the new OPEN list): This step is impor-
Figure 4 shows for a search problem different from our main tant if the OPEN list is implemented as a binary heap because
one that not all cells in the new OPEN list are relevant. The transforming a set in one step into a binary heap is more efﬁ-
start cell is D2 and the goal cell is F6. After cell F5 became cient than inserting the elements of the set one after the other
                                                                            [                 ]
blocked, cells E2, E3 and F3 are irrelevant, and thus not in- into an empty binary heap Corman et al., 1990 .
                                                        Step 6 (Restarting A*): Finally, FSA* restarts A* with
cluded in the relevant part of the new OPEN list since the goal                    {   }
cell is not in the region of unblocked cells that they are part the new OPEN and CLOSED lists 69 . A* is implemented
of and a shortest path from the start cell to a goal cell thus by the function ComputeShortestPath.
cannot pass through them. From now on, we just refer to the
OPEN list when we mean the relevant part of the OPEN list. 5 Theoretical Results
  Step 4 (Restoration of the G-Values and Parent Point- The correctness of the restoration of the g-values and parent
ers): The g-values and parent pointers of all reusable cells pointers of cells in the new OPEN list is not easy to see for
are guaranteed to be correct. However, the g-values and par- Case 2. We thus prove it in the following, making use of the
ent pointers of cells in the new OPEN list are not necessarily following theorem that is speciﬁc to the kinds of gridworlds
correct in the following two cases: First, if a cell in the new used in this paper. The result also implies that the g-value and
OPEN list just became unblocked, then it was blocked before, parent pointer of a cell in the new OPEN list are correct if the
and its g-value and parent pointer thus have not been updated parent pointer already points to a cell that is reusable.
in the preceeding searches and need to be corrected (Case 1).
Second, if the parent pointer of a cell in the new OPEN list Theorem 1 The parent pointer of any cell s ∈ S can change
points to a cell that is not reusable, then the g-value and par- at most once during an A* search from one cell to another.
ent pointer need to be corrected (Case 2). To understand Case All expanded cells adjacent to a cell have the same g-value
2, consider a complete A* search and assume that the g-value before the parent pointer of the cell changes.

                                                IJCAI-07
                                                  2394procedure Initialize()
{ }     (0) := 0;                                       Proof: Consider any unblocked cell s ∈ S and any two
 01 BlockId                                                                                        
{02} Forall cells s                                   unblocked cells s ,s ∈ S adjacent to cell s. h(s ) − h(s )
{03} GeneratedIteration(s):=0;
{04} ExpandedIteration(s):=0;                         is -2, 0 or 2 since the h-values are the Manhattan distances.
{05} ExpandedId(s):=0;                                This means that all cells adjacent to cell s together have at
{06} m := 0;                                                                                        
{07} OPEN := ∅;                                       most two different h-values. Now assume that cell s was
{08} g(sstart):=0;                                    expanded during an A* search and that cell s was generated
{09} OPEN.Insert(sstart);
{ }           (    ):=1;                              during the expansion. Thus, the parent pointer of cell s was
 10 GeneratedIteration sstart                                                         
{11} Iteration := 1;                                  set to cell s . Assume further that cell s was expanded later
function ComputeShortestPath()                        during the same A* search and that the parent pointer of cell s
{12} BlockId(Iteration):=∞;
{ }    (    = ∅)                                     changed during the expansion. Thus, the parent pointer of cell
 13 While OPEN                                                                              
{14} s := OPEN.Pop();                                 s was set to cell s . Then, g(s )+h(s ) ≤ g(s )+h(s ) since
{15} ExpandedIteration(s):=Iteration;
{16} ExpandedId(s):=m;                                the sum of g-value and h-value of the sequence of expanded
{17} m := m +1;                                       cells is monotonically nondecreasing over time. Furthermore,
{ }   ( =    )                                                 
 18  If s sgoal                                       g(s ) <g(s  ) since otherwise the parent pointer of cell s
{19}   Return True;                                                               ( )+  =   ( )
{20} Else                                             would not have changed. Thus, g s  c   g s for some
                                                                                                
{21}   Forall s ∈ Succ(s)                             c>0. Put together, g(s )+c + h(s )=g(s  )+h(s  ) ≤
{22}     If (GeneratedIteration(s) = Iteration Or g(s)+1<g(s’)) ( )+ ( )      ( ) − ( ) ≤−     0
{23}      g(s’):=g(s)+1;                              g s     h s  or, alternatively, h s h s      c<   .
                                                                    
{24}      GeneratedIteration(s ):=Iteration;                 ( ) −  (  )
                                                     Since h s    h s  is -2, 0 or 2, it must be the case that
{25}      Parent(s ):=s;                                                                 
                                                      (  ) −  (  )=−2             (  )=    ( )+2
{26}      OPEN.Insert(s );                            h s    h s          and thus h s     h s     .This
{27} Return False;                                    implies that −2 ≤−c<0. Since the start distances and thus
                                                                              
function CellReusable(s)                              the g-values of cells s and s cannot differ by one, it must
{28} If (ExpandedId(s) < BlockId(ExpandedIteration(s)))              ( ) − ( )=    =2
{29} Return True;                                     be the case that g s  g s     c    . Thismeansthat
{30} Return False;                                    the parent pointer of cell s can change at most once during
procedure UpdateMazeTraversability()                  an A* search because c increases with every change. Now
{31} TmpBlockId := ∞;                                                           
{32} Forall cells s whose traversability has changed  consider any unblocked cell s adjacent to cell s that was
{33} If (s is blocked)                                expanded before the parent pointer of cell s changed. Then,
{34}   If (CellReusable(s))                            ( )+ ( ) ≤ ( )+ ( ) ≤ ( )+ ( )
{35}     If (ExpandedId(s) < TmpBlockId)              g s   h s    g s    h s     g s   h s   since the sum
{36}      TmpBlockId := ExpandedId(s);                of g-value and h-value of the sequence of expanded cells is
{37} Else                                             monotonically nondecreasing over time. It holds that ( )+
{38}   Parent(s):=NULL;                                                                           g s
                                                                                        
{39}   Forall s ∈ Succ(s)                             h(s )=g(s   )+2+h(s     ) − 2=g(s   )+h(s  ). Thus,
                    
{40}     If (CellReusable(s ))                                                        
                                                     g(s )+h(s  )=g(s   )+h(s    )=g(s   )+h(s   ).Since
{41}      If (ExpandedId(s )+1< TmpBlockId)
                              
{42}        TmpBlockId := ExpandedId(s )+1;           all cells adjacent to cell s together have only two different h-
{43} Forall i =1...Iteration                          values, h(s) must equal either h(s) or h(s). Thus, g(s)
{44} If (TmpBlockId < BlockId(i))                                                                
{45}   BlockId(i):=TmpBlockId;                        must equal either g(s ) or g(s ). g(s ) cannot equal g(s )
{46} m := BlockId(Iteration);                         since otherwise the parent pointer of cell s ﬁrst had changed
procedure RetrieveFringe()                            to cell s and later could no longer have changed to cell s.
{47} OPEN := ∅;                                                           
{48} Iteration := Iteration +1;                       Thus, g(s ) must equal g(s ), which means that all expanded
{ }  :=   ;
 49 s  sgoal                                          cells adjacent to cell s have the same g-value before the parent
{50} While (Not CellReusable(Parent(s)))
{51} s := Parent(s);                                  pointer of the cell changes.
{52} If (s = sstart)
{53}   Exit; /* there is no path */
                                                
{54} Move s around the area that contains exactly the cells s with CellReusable(s ) We use this theorem as follows: During the course of an
                             
{55} Forall s ∈ Succ(s) with CellReusable(s )
                                                     A* search, the g-value of a cell cannot increase. Thus, when
{56}   GeneratedIteration(s ):=Iteration;
{57} If (s is unblocked)                              restoring the (earlier) state of an A* search, the g-value of a
{58}   If (Parent(s)=NULL Or (Not CellReusable(Parent(s))))
                                                     cell cannot decrease. Assume that the parent pointer of a cell
{59}     Forall s ∈ Succ(s)
                     
{60}      If (CellReusable(s ))                       in the new OPEN list points to a cell that is reusable. The
                     
{61}        Parent(s):=s ;
                                                     g-values of reusable cells are correct. Thus, the g-value of
{62}        g(s):=g(s )+1;
{63}        break;                                    the cell in question does not need to increase. It remains the
{64}   GeneratedIteration(s):=Iteration;              g-value of the reusable cell plus one. Thus, the g-value and
{65}   OPEN.Insert(s);
{66} Until the initial cell is about to be left in the same direction again; parent pointer of the cell in question remain correct. Now
procedure Main()                                      assume that the parent pointer of a cell in the new OPEN list
{67} Initialize();                                    points to a cell that is not reusable. Clearly, the parent pointer
{68} Repeat
{69} If (Not ComputeShortestPath())                   needs to get corrected. Directly before it was set to the non-
{70}   Exit; /* there is no path */                   reusable cell during the immediately preceeding A* search, it
{71} Repeat
{72}   Identify the path using the parent pointers and use it; pointed to some other cell with a larger g-value. At that point
{73}   Wait for traversability changes;               in time, all expanded cells adjacent to the cell in question had
{74}   UpdateMazeTraversability();
{ }          (     ) ≤       (   )                    the same g-value according to Theorem 1, and the reusable
 75  Until (BlockId Iteration ExpandedId sgoal );
{76} RetrieveFringe();                                cells adjacent to the cell in question are a subset of them since
{77} Until False;                                     their sequence numbers are smaller than the sequence number
                                                      of the non-reusable cell. FSA* can therefore ﬁnd any reusable
          Figure 6: Fringe Saving A* (FSA*)

                                                IJCAI-07
                                                  2395