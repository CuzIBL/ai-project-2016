            In the quest of the best form of local consistency for Weighted CSP 

                          Javier Larrosa                                     Thomas Schiex 
                     Department of Software                  Dept. de Biometrie et Intelligence Artificielle 
              Universitat Politecnica de Catalunya           Institut National de Recherche Agronomique 
                         Barcelona, Spain                                    Toulouse, France 
                       larrosa@lsi.upc.es                         Thomas.Schiex@toulouse.inra.fr 


                        Abstract                               ai, 1999], combinatorial auctions [Sandholm, 1999], bioin-
                                                              formatics and probabilistic reasoning [Pearl, 1988]. [Larrosa, 
     The weighted CSP (WCSP) framework is a soft               2002] introduced AC*, a refinement of the AC definition for 
     constraint framework with a wide range of appli•          WCSP. This definition provides a stronger yet simple and el•
     cations. In this paper, we consider the problem           egant property to be maintained during search. 
     of maintaining local consistency during search for          In this paper, we take the definitions of DAC and FDAC, 
     solving WCSP. We first refine the notions of direc•       strengthen and extend them to binary WCSP, defining the 
     tional arc consistency (DAC) and full directional         DAC* and FDAC* properties. We then define correspond•
     arc consistency (FDAC) introduced in [Cooper,             ing enforcing algorithms. As in the classical CSP case, we 
     2003] for binary WCSP, define algorithms that en•         then consider the problem of maintaining AC*, DAC* and 
     force these properties and study their complexities.      FDAC* during search and empirically compare these algo•
     We then consider algorithms that maintain either          rithms. These algorithms have a wide range of applications 
     arc consistency (AC), DAC or FDAC during search.          and allow a nice integration of hard and soft constraints in a 
     The efficiency of these algorithms is empirically         common algorithmic framework. 
     studied. It appears that despite its high theoreti•
     cal cost, the strongest FDAC property is the best 
                                                               2 Preliminaries 
     choice. 
                                                               2.1 CSP 
                                                               A binary constraint satisfaction problem (CSP) is a triple 
 1 Introduction 
                                                                                                is a set of variables. Each 
It is well known that arc consistency (AC) plays a preemi•     variable has a finite domainof values that 
nent role in efficient constraint solving. In the last few years, can be assigned to it. (i,a) denotes the assignment of value 
the CSP framework has been augmented with so-called soft               to variable i. A tuple t is an assignment to a set of 
constraints with which it is possible to express preferences   variables. Actually, t is an ordered set of values assigned to 
among solutions [Schiex et ai, 1995; Bistarelli et ai, 1997].  the ordered set of variables (namely, the k-th ele•
Soft constraint frameworks associate costs to tuples and the   ment off is the value assigned to the k-th element of i For 
goal is to find a complete assignment with minimum com•        a subset the projection of t over B is notedis 
bined cost. Costs from different constraints are combined      a set of unary and binary constraints. A unary constraint is 
with a domain dependent operator Extending the notion          a subset of containing the permitted assignments to vari•
of AC to soft constraint frameworks has been a challenge in    able i. A binary constraint is a set of pairs from x 
the last few years. ,From previous works we can conclude       containing the permitted simultaneous assignments to i and 
that the extension is direct as long as the operator is idem-  j. The set of variables affected by a constraint is called its 
potent. Then, [Schiex, 2000] proposed an extension of AC       scope. A tuple t is consistent if it satisfies all constraints 
which can deal with non-idempotent This definition has         whose scope is included in ^. A solution is a consistent 
three nice properties: (i) it can be enforced in polynomial    complete assignment. Finding a solution in a CSP is an NP-
time, (ii) the process of enforcing AC reveals infeasible val• complete problem. The task of searching for a solution can 
ues that can be pruned and (iii) it reduces to existing defini• be simplified by enforcing arc consistency, which may prune 
tions in the idempotent operator case. [Cooper, 2003] further  values that cannot participate to a solution. 
introduced directional arc consistency (DAC) and full direc-
tional arc consistency for strictly monotonic                  2.2 Weighted CSPs 
   Weighted constraint satisfaction problems (WCSP) is a       Valued CSP (as well as semi-ring CSP) extend the CSP 
well known soft-constraint framework with a non-idempotent     framework by associating costs to tuples [Schiex et al, 1995; 
operator It provides a very general model with several ap•     Bistarelli et ai, 1997]. In general, costs are specified by 
plications in domains such as resource allocation [Cabon et    means of a so-called valuation structure defined as a triple 


CONSTRAINTS                                                                                                          239                                                                        Figure 1: Six equivalent WCSPs (for A: = 4). 

                                                               strictly monotonic valuation structure where finite costs can•
                                                               not lead to deletion. In practice, most branch and bound-
                                                               based solvers maintain an upper bound ub, the maximum ac•
                                                               ceptable cost so-far, and a lower bound lb on the optimal ex•
                                                               tension of the current assignment. Value pruning occurs as 
                                                               soon as The WCSP framework makes these two ele•
                                                               ments explicit: a solver uses the valuation structure S(ub) at 
                                                               every subproblem and provides the lower bound. 

                                                               3 Some local consistencies in WCSP 
                                                               In this Section we define node, arc, directed arc and full di•
                                                               rected arc consistencies. For node and arc consistencies, our 
                                                               definitions arc equivalent to the NC* and AC* definitions 
                                                               in [Larrosa, 2002]. For DAC, and FDAC, the starred (*) def•
                                                               initions refine the definitions in [Cooper, 2003] to the WCSP 
                                                               case, using node consistency and C0. In the sequel, we as•
   Tuple / is consistent if The usual task of inter•           sume that the set of variables ,V is totally ordered by >. 
 est is to find a complete consistent assignment with minimum 
 cost, which is NP-hard. Observe that WCSP with k = 1 
 reduces to classical CSP. In addition, S(k) is idempotent iff 
 k = 1 and strictly monotonic iff Two WCSP defined 
 over the same variables are said to be equivalent if they define 
 the same cost distribution on complete assignments. 
   For simplicity in our exposition, we assume that every con•
 straint has a different scope. For the moment, we also assume 
 that constraints are implemented as tables and that it is pos•
 sible to consult and modify entries. This is done without loss 
 of generality (see the proof of Theorem 3). 
 Example 1 Figure La shows a WCSP with valuation struc•
 ture S(4) (the set of costs is [0,..., 4], with and 
 T = 4). It has three variables with values a, b. 
 There are 2 binary constraints Cxz, Cyz and two non trivial 
 unary constraints Cx and Cz. Unary costs are depicted in-
side their domain value. Binary costs are depicted as labelled 
 edges connecting the corresponding pair of values (default 
 cost of J). Zero costs are not shown. One optimal solution is 
 eg. x = y = z = b, with cost 2. 
   Our definition of WCSP is the same as in [Larrosa, 2002]. 
 It differs from usual definitions [Schiex etal., 1995; Bistarelli 
et al., 1997] which restrict WCSP to the case, a 


240                                                                                                      CONSTRAINTS    There is a strong relation between directional arc consis­
tency and mini-buckets [Dechter, 1997J. It can easily be 
shown that given a WCSP defined over the valuation struc­
ture 5(oo) and a variable ordering, the lower bound induced 
by mini-buckets involving at most 2 variables is the same as 
the lower bound induced by CΦ after the problem is made 
directional arc consistent. However, the mini-bucket com­
putation provides only a lower bound while DAC enforcing 
provides both a lower bound and a directional arc consistent 
equivalent problem. All the work done to compute the lower 
bound is captured in this problem which offers the opportu­
nity to perform incremental updates of the lower bound. 

4 Enforcing Arc Consistencies 
The previous node and arc consistency properties can be en­
forced by applying basic operations until the correspond­
ing property is satisfied: pruning node-inconsistent values, 
forcing supports to variables (NC*), forcing (full) support to 
node-consistent values (AC). As pointed out in [Schiex, 2000; 
Larrosa, 2002], value (resp. variable) supports can be forced 
by sending costs from binary (resp. unary) constraints to 
unary constraints (resp. CΦ). Full support can be forced by 

first sending costs from a unary constraint Cj to CiJ and then 
sending the cost from . Let us review 
these concepts before introducing basic algorithms. 
                       be two costs such that is 
the subtraction of b from a, defined as, 


The projection of a cost units from Ci,j E C over value (i, a) 
is a flow of a cost units from the binary constraint to the unary 
cost Ci(a). It is embodied in the Procedure 

   1The stronger local property that would require a full support 
on both sides suffers from the fact that most WCSP don't have an 
equivalent WCSP that satisfies this property. 


CONSTRAINTS                                                                                                          241                                                                Procedure DAC*() has been designed to be used alone to en•
                                                               force DAC* or in conjunction with AC*() to enforce FDAC*. 
                                                               Therefore, whenever a value is pruned, DAC*() inserts its vari•
                                                               able in Q to inform AC*() of the deletion. DAC* further uses 
                                                               a priority queue R that contains those variables such that a 
                                                               unary cost has been increased from _L: in this case, some 
                                                               values in lower variables may have lost full support and new 
                                                               supports need to be found. The main loop iterates while R is 
                                                               not empty. At each iteration, the highest variable j is fetched 
   The new basic operation needed to enforce {F}DAC* con•
                                                               from R. Node inconsistent values (due to unary cost and 
sists in forcing full supports for the values of a variable i on 
                                                               lower bound increments) are removed using PruneVar() and 
one side of a constraint C . As shown in the example, this 
                          ij                                   pruned variables are inserted in Q. Then new full supports 
can be done by extending unary costs from C     to C  and 
                                              j      ij        are sought for every lower variable connected to j. Finally, 
then projecting C  onto variable C . However, extending all 
                  ij              i                            all variables are processed to enforce NC* which can be lost 
unary costs may destroy supports for j on C . Consider the 
                                            ij                 during the process, due to lower bound increments. Pruned 
AC* Problem l.d. If we extend 2 cost units from (z,a) to 
                                                               variables are inserted in Q. FDAC*() simply enforces AC* 
C   instead of 1 as in the example and then project on C  , 
  yz                                                     y     and DAC* simultaneously: the enforcement of AC* empties 
we get Problem l.f where (2,a) has lost all supports on y. 
                                                               Q but may add variables to R, and the enforcement of DAC* 
In order to smoothly integrate DAC* and AC* enforcing to 
                                                               empties R but may add variables to Q. FDAC* is achieved 
obtain FDAC* enforcing, we must obtain full supports for 
                                                               when both R. and Q are simultaneously empty. Correction of 
variable i on Cij while preserving supports for all values of  both algorithms follows from theorem 2. 
j on Cij. This is obtained by extending the minimum cost of 
Cj required for the subsequent projection onto Ci. The cor•
rectness of our algorithms is based on the following theorem, 


242                                                                                                      CONSTRAINTS                                                               5 Experimental results 
                                                              In this Section we perform an empirical evaluation of the ef•
                                                              fect of maintaining various forms of arc consistency during 
                                                              search. We consider a depth-first search maintaining either 
                                                              NC*, AC*, DAC* or FDAC* which yields the algorithms 
                                                              MNC*, MAC*, MDAC* and MFDAC*. For comparison, 
                                                              we include results obtained with PFC-RDAC [Larrosa et al., 
                                                               1999], which is normally considered as a reference algorithm. 
                                                                 For variable selection we use the dom/deg heuristic which 
                                                              for each variable computes the ratio of the domain-size di•
                                                              vided by the future degree (i.e., degree considering future 
                                                              variables only) and selects the variable with the smallest 
                                                              value. For value selection we consider values in increasing 
                                                              order of unary cost Ci. The variable ordering used for direc•
                                                              tional arc consistencies is lexicographic. 
                                                                 We consider the Max-CSP problem, where the goal is 
                                                              to find a complete assignment with a maximum number 
                                                              of satisfied constraints in an overconstrained CSR It can 
priority queue, when a variable j is extracted from R, all the easily be formulated as a WCSR We experiment with bi•
variables before j in R have already been processed. Since    nary random problems using the well-known four-parameters 
FindFullSupportAC*() can only increase non zero unary costs   model [Smith, 1994]. A random CSP class is defined by 
of variables strictly lower than j, j will never be reintroduced (n,d,e, t) where n is the number of variables, d is the do•
in R and therefore each variable j is added to the queue R at main size, e is the number of binary constraints (i.e, graph 
most once. The queue is implemented as an array of booleans   connectivity), and t the number of forbidden tuples in each 
and a pointer to the highest true element. Adding new el•     constraint (i.e, tightness). Pairs of constrained variables and 
ements to R means updating the pointer, the pop operation     their forbidden tuples are randomly selected using a uniform 
consists on returning the value of the pointer and searching  distribution. Samples have 50 instances and we report aver•
                                                              age values. The experiments were performed on a 800 MHz 
                                                              Pentium III computer. 
                                                                 For fixed values of n, d and c and increasing tightness t, 
                                                              most problems are solved almost instantly until the cross-over 
                                                              point is reached. Then, problems become overconstrained 
                                                              and much harder to solve. We denote t° the lowest tightness 
                                                              where every instance in our sample is overconstrained. Based 
                                                              on this, we define different categories of problems: 


                                                              Combining the different types, we obtain 4 different classes, 
                                                              each being denoted by a pair of characters (SL,ST,DL and 
                                                              DT). In each class, the domain size is set to 10 and the num•
Proof: Regarding space, there is no difference with DAC*()    ber of variables n is used as a varying parameter. Figure 2 
and the same proof applies. Regarding time, a variable j      shows the average cpu time used with SL, ST, DL and DT 
enters Q only if a value has been deleted. Therefore, each    from left to right. In each plot, the five algorithms are listed 
variable j is added to Q at most d + 1 times (once at initial• in increasing order of efficiency, from top to bottom. In all 
ization and then upon value deletion at lines 5, 6 or 4). There- cases, the search effort seems to grow exponentially with n. 


CONSTRAINTS                                                                                                         243 