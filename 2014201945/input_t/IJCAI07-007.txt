         A General Framework for Scheduling in a Stochastic Environment∗

       Julien Bidot              Thierry Vidal            Philippe Laborie          J. Christopher Beck
     Universit¨at Ulm               ENIT                     ILOG S.A.              University of Toronto
      Ulm, Germany               Tarbes, France            Gentilly, France           Toronto, Canada
  julien.bidot@uni-ulm.de        thierry@enit.fr           plaborie@ilog.fr         jcb@mie.utoronto.ca


                    Abstract                          augmented by rescheduling capabilities in case a failure oc-
                                                      curs; or schedule generation and execution can be interleaved
    There are many systems and techniques that ad-    so as to only predict in a short range, where uncertainty re-
    dress stochastic scheduling problems, based on dis- mains low enough. Such approaches are very different from
    tinct and sometimes opposite approaches, espe-    one another, and it is still unclear which one is the best an-
    cially in terms of how scheduling and schedule    swer in a given application context: in this paper, we will pro-
    execution are combined, and if and when knowl-    pose (in Section 3) a thorough classiﬁcation of techniques for
    edge about the uncertainties are taken into ac-   scheduling under uncertainty, exhibiting their strengths and
    count. In many real-life problems, it appears that weaknesses. Our conclusion is that in real-life applications,
    all these approaches are needed and should be com- mixing those techniques within a single system appears to be
    bined, which to our knowledge has never been      highly desirable. For that purpose we will propose (in Sec-
    done. Hence it it ﬁrst desirable to deﬁne a thor- tion 4) a conceptual theoretical model encompassing both the
    ough classiﬁcation of the techniques and systems, generation and the execution of the schedule and in which a
    exhibiting relevant features: in this paper, we pro- large number of techniques for dealing with uncertainty can
    pose a tree-dimension typology that distinguishes be concurrently implemented. Section 5 will present experi-
    between proactive, progressive, and revision tech- mental prototypes that partially validate our model.
    niques. Then a theoretical representation model
    integrating those three distinct approaches is de- 2  Background
    ﬁned. This model serves as a general template
    within which parameters can be tuned to implement A standard scheduling problem comprises a set of activities
    a system that will ﬁt speciﬁc application needs: we and resources. Each activity has a duration, and each re-
    brieﬂy introduce in this paper our ﬁrst experimental source has a limited capacity. The objective is to assign re-
    prototypes which validate our model.              sources and times to activities given temporal and resource
                                                      constraints. In general, scheduling problems are optimization
                                                      problems: typical optimization criteria are makespan, number
1  Introduction                                       of tardy activities, tardiness or allocation cost. If we assume
                                                      an execution environment without uncertainty, we generate a
Many approaches to scheduling assume an execution envi- predictive schedule ofﬂine that is then executed online with-
ronment without uncertainty. The problem there is to allo- out any problem. There are however many possible sources
cate resources and assign start times to a set of given activ- of uncertainty in scheduling; e.g., some activity durations or
ities, so that temporal and resource constraints are satisﬁed. some resource capacities are imprecise (as e.g. resources may
The resulting predictive schedule is then sent to the execu- break down).
tion controller. However, in practical applications, we have to We now give some deﬁnitions to avoid ambiguity of terms
schedule with incomplete, imprecise, and/or uncertain data: commonly used by different communities.
simply executing a strictly and completely determined pre-
dictive schedule is not a right answer anymore, as there is Deﬁnition 2.1 (ﬂexibility) A ﬂexible schedule is a schedule
high chance that such a schedule will not ﬁt the real situation that is not fully set: decisions have still to be made.
that will arise. Scheduling and schedule execution can then Decisions to make or to change can be of heterogeneous
be reconsidered in many ways: for instance, setting activity types; e.g., allocation or sequencing decisions.
start times of a sequence of activities can be postponed until
execution, adding some ﬂexibility to a schedule that will bet- Deﬁnition 2.2 (conditional schedule) A conditional sched-
ter adapt to observed events; the execution controller can be ule is a special kind of ﬂexible schedule in which distinct al-
                                                      ternative subsets of partially ordered activities can be mod-
  ∗Partially supported by Convention Industrielle de Formation par eled: the remaining decisions here are to choose between
la REcherche 274/2001.                                such alternatives at execution time.

                                                IJCAI-07
                                                   56Deﬁnition 2.3 (executable schedule) An executable sched- react and indicate when it is relevant to change decisions of
ule is a schedule that does not violate any constraint. the current predictive schedule; e.g., Sadeh et al. [1993] de-
                                                      veloped both simple rules to adapt a current schedule through
Deﬁnition 2.4 (adaptive scheduling system) An adaptive
                                                      e.g. activities shifting, and more elaborated local reschedul-
scheduling system is a system that is able to generate a new
                                                      ing techniques when the problem is more acute.
executable schedule whenever the current executing schedule
is no longer executable.                              3.3  Progressive Techniques
Deﬁnition 2.5 (robustness) A robust schedule is a schedule The idea behind progressive techniques is to interleave
whose quality (according to the optimization criterion) does scheduling and execution, by solving the whole problem
not deviate too much during execution with respect to known piece by piece, where each piece corresponds to a time hori-
online perturbations: the less deviation, the more robustness. zon slice. Reasoning is done as a background task online; i.e.,
Deﬁnition 2.6 (stability) A stable schedule is a schedule in we can afford more time to search, we incrementally commit
which no decision will be changed during execution.   to scheduling decisions periodically or when new information
                                                      arrives, and no decisions are changed.
3  Classiﬁcation                                        One way of proceeding when using a progressive approach
                                                      is to select and schedule new subsets of activities to extend
In this section, we concisely describe a taxonomy of schedul- the current executing schedule on a gliding time horizon; e.g.,
ing systems or techniques that is independent of any speciﬁc Vidal et al. [1996] allocate container transfer activities in a
representation model or reasoning technique. Such classiﬁ- harbor to robots only as long as temporal uncertainty remains
cations have already been done, especially in the Operations low enough to be reasonably sure that the chosen robot will
Research community (as in Herroelen et al. [2004]), but none actually be the ﬁrst available. A decision is made when un-
is totally satisfactory to our need since they only distinguish certainty level of the used information is not too high, and/or
between ofﬂine and online techniques. We go beyond this when the anticipation horizon, the interval between the cur-
distinction and consider more issues such as how and when rent time and the expected end time of the last scheduled ac-
decisions are made, optimality requirements, etc.     tivity, has become too small. One thus needs an execution-
                                                      monitoring system able to react and indicate when, what, and
3.1  Proactive Techniques                             what type of new decisions to make.1
A proactive technique takes into account uncertainty to pro-
duce schedules that are less sensitive to online perturbations. 3.4 Discussion
  A ﬁrst naive method for making a schedule insensitive to We can compare the three families of techniques with respect
online perturbations is to produce ofﬂine a unique predictive, to the following criteria: online memory need, online CPU
robust schedule by taking into account the worst scenario. need, schedule quality/robustness, and stability.
  Another approach consists in introducing some ﬂexibility Revision techniques do not consume a lot of memory on-
in the schedule: only a subset of decisions are made ofﬂine line since we only have to store one schedule. They may re-
with a search and the rest online without search; this is a quire a lot of CPU online, depending on the time spent on
kind of least commitment approach with respect to decision- rescheduling. We can expect a very high schedule quality if
making since we only make decisions when information is we are able to reoptimize very often and globally revise the
more precise, and/or more certain. Morris et al. [2001] for current schedule, but robustness is not guaranteed. Stability
instance maintain a plan with uncertain activity durations in may be very bad if we change a lot of decisions.
which start times are not set: they provide algorithms to guar- Online memory may vary for proactive techniques depend-
antee the executability of such schedules whatever the actual ing on whether we have to store one or more schedules: con-
durations will be. Here we have an incomplete ﬂexible sched- ditional schedules may require a lot of memory. In general,
ule. Another way is to build an undecided ﬂexible schedule: online computational power keeps low since we do not have
everything is set but with alternative branches, leading to a to search for solutions with backtracking. We can expect a
conditional schedule.                                 high schedule robustness or stability since we take into ac-
  Different uncertainty models (probability distributions, count what may occur online to make decisions.
possibility theory, etc.) can be used in proactive techniques Progressive techniques permit to limit our online memory
for the representation of the problem, and for solving it (e.g., need to the minimum since we only store a piece of schedule.
ﬁnd the schedule that will have the highest probability that The requirement in CPU online is limited since we only solve
the makespan will not exceed a given value).          sub-problems. It is difﬁcult to guarantee a very high schedule
3.2  Revision Techniques                              quality/robustness since decisions are made without taking
                                                      into account knowledge about uncertainty to make schedul-
Revision techniques consist in changing decisions during e- ing decisions and with a more or less short-term/aggregated
xecution when it is necessary; e.g., we change decisions when view. This family of techniques generates stable schedules.
the current predictive schedule becomes inconsistent, when These features can help a decider to choose a technique in
estimated quality deviates too much from the predicted one, a speciﬁc application domain: if memory usage is limited,
or in a more opportunistic way when a positive event occurs
(for example, an activity ﬁnishes earlier than expected). In 1Alternatively, new subsets of activities can simply be integrated
other words, we need an execution-monitoring system able to periodically, and so no complex conditions are monitored.

                                                IJCAI-07
                                                   57then conditional schedules are probably not the right answer. Moreover, a set of (probabilistic/possibilistic/etc.) distri-
Moreover, one can easily see that mixed techniques are nec- butions of possible values may be attached to each contingent
essary: for instance, in a highly stochastic world, the time variable. Such distributions are updated during execution.
spent on rescheduling can be reduced when a proactive or We can now deﬁne the basic objects of a scheduling prob-
a progressive approach is used, but on the contrary a pure lem, namely resources and activities.
proactive technique is not realistic since there will always be Deﬁnition 4.5 (resource) A resource r is associated with
unpredicted or unmodeled deviations that can only be dealt one or more variables, that represent its capacity, efﬁciency,
with by a revision technique. The combinatorial explosion and/or state. Its capacity is the maximal amount that it can
of conditional schedules also suggests to develop only some contain or accommodate at the same time. Its efﬁciency de-
of the branches and add more piece by piece in a progres- scribes how fast or how much it can do with respect to its
sive way. As a matter of conclusion, a decider should also available capacity. Its state describes its physical condition.
be given a global system encompassing all of the three kinds A resource capacity, efﬁciency, and state can all vary over
of approaches, allowing her to tune the levels of proactivity, time. These variables are either controllable or contingent.
progression, and revision that will best ﬁt her needs. A few
                                                      r states a global resource constraint ctr on all its variables
mixed techniques have been proposed for making scheduling and the variables of the activities that require it. The schedul-
decisions in a stochastic environment, but as far as we know, ing problem comprises a ﬁnite set of resources noted R.
no one has proposed a system or an approach that combines
the three ways of scheduling.                           We can model the state of the execution environment as a
                                                      set of state resources; e.g., the outside temperature is modeled
                                                      by a resource that can be in only one of three states depending
4  Representation Model                               on time: hot, mild, and cool.
This section describes a generic representation model for Deﬁnition 4.6 (activity) An activity
scheduling in a stochastic execution environment. This model ay = startay,day,enday, [CT ay] is deﬁned by three vari-
integrates the three families of approaches presented in the ables: a start time variable startay, a duration variable day,
previous section.                                     and an end time variable enday. These variables are either
                                                      controllable or contingent. ay may be associated with an op-
4.1  Schedule
                                                      tional set of resource constraints CT ay that involve the vari-
We are interested in extended scheduling problems with mu- ables of the resources it requires.
tually exclusive subsets of activities, in a way similar to what In a constraint-based model, to propagate the bounds of the
was done in Tsamardinos et al. [2003]. At the roots of our variable domains, we usually post the following constraint for
model, we need variables and constraints inspired by the con-
                                                      each activity: enday − startay ≥ day. Of course, constraints
straint paradigm.                                     of any type between variables can be posted on our schedul-
Deﬁnition 4.1 (variable) A variable is associated with a do- ing problem.
main of values or symbols, and it is instantiated with one and Our scheduling problem is composed of resources, activ-
only one of the values or symbols in this domain.     ities, and constraints relating them, with possibly additional
                                                      variables describing the state of execution environment.
Deﬁnition 4.2 (constraint) A constraint is a function relat- To ﬁt the classiﬁcation described in Section 3, additional
ing one (unary constraint), two (binary constraint) or more constraints may have to be posted by the schedule generation
(k-ary constraint) variables that restrict the values that these algorithm to (more or less) set resource allocations, make se-
variables can take.                                   quencing decisions, and set precise activity start times. Hence
  The domain of a variable is reduced when a decision is we do not need to add anything to our model to achieve this.
made or when a decision is propagated via constraints.  Central to our model is the notion of conditions that are
  We distinguish two types of variables in the problem: the subsets of variables related by logical and/or mathematical
controllable variables and the contingent variables.2 relations: such conditions guide the branching within condi-
                                                      tional schedules, the selection of new subsets of activities in
Deﬁnition 4.3 (controllable variable) A controllable vari- a progressive technique, etc.
able is a variable instantiated by a decision agent.  Deﬁnition 4.7 (condition) A condition
  Decisions may inﬂuence the state of the environment. One cond = func,[atw] is a logical and/or mathematical rela-
of the issues that depends on application domains is to decide tion funcin which at least one variable is involved. It may be
when to instantiate controllable variables. For example, it is associated with an optional active temporal window that is an
difﬁcult to set activity start times in advance when activity interval atw =[st, et] between two time-points st and et in
durations are imprecise because of temporal constraints. the current schedule. If st = et, then it means the condition
                                                      must be checked at a precise time-point in the schedule.
Deﬁnition 4.4 (contingent variable) A contingent variable
is a variable instantiated by Nature.                   A condition can involve characteristics of the distributions
                                                      of contingent variables. A condition can be expressed with
  2Controllable variables correspond to decision variables, and conjunctions and disjunctions of conditions.
contingent variables to state variables in the Mixed Constraint- A typical example of a condition is what we will call a
Satisfaction Problem framework [Fargier et al., 1996]. branching condition; i.e., a branching condition is a condition

                                                IJCAI-07
                                                   58that will be attached to one of mutually exclusive subsets of to use revision and progressive techniques, we need to con-
activities (see below). Such a condition will be checked at a sider now a dynamic problem in which a solution is executed
speciﬁc time-point that we will call a branching node. in a stochastic environment, thus requiring more scheduling
  We propose the following recursive deﬁnition of a schedule decisions to be made while executing. Hence we need to de-
to describe our model with respect to these particular mutu- sign a model interleaving schedule generation and execution:
ally exclusive subsets of activities.3                the resulting system must be able to react, to know what to do
                                                      (e.g., reschedule, schedule next subset, make new scheduling
                                S
Deﬁnition 4.8 (schedule) A schedule is either         decisions, etc.), and to know how to do it.
•    S =  ∅
 void      ,or                                          Two types of algorithms will be needed: execution algo-
•S = ay  , {CT }∗, S          ay
        S     S       is an activity S partially ordered rithms will be in charge of dealing with the current ﬂexible
               {CT  }∗
via constraints in S   with respect to the activities of a schedule (as deﬁned in previous section) and both making the
        S
schedule  ,or                                         scheduling decisions that remain and actually executing activ-
•S  =  bnd ,nb  , {rcp }∗,cnd          nb
           S   S     S       S  is a set of S mutu-   ities; generation algorithms will be in charge of changing the
                   rcp
ally exclusive recipes S ; i.e., mutually exclusive recipes current schedule, either because some part is not valid any-
represent different ways of attaining the same goal, as de- more and must be modiﬁed (revision approach), or because
                                          bnd
ﬁned below; such recipes follow a branching node S and new activities must be added (progressive approach).
                      cnd
lead to a converging node S . A node is a dummy activity The dynamic evolution of our model will be monitored via
aydum
      of null duration that does not require any resource: condition meeting: if such a condition is met, then we know
aydum = startdum, 0,enddum    startdum = enddum
             ay        ay  , with    ay       ay .    we have to make or change decisions. The branching con-
                                                      dition deﬁned in the previous section is actually used by the
Deﬁnition 4.9 (recipe) A recipe rcp = S, [Pyrcp],bcrcp is
a schedule S associated with an optional probability, possi- execution algorithms, guiding them into the adequate alterna-
                                                      tive. We need to introduce here two new types of condition:
bility, or plausibility of being executed Pyrcp and a branch-
                                                      an activation condition, when met, activates a new generation
ing condition bcrcp: it will be executed if and only if bcrcp is
met.                                                  step through the generation algorithm; then a ﬁre condition
                                                      will actually enforce the global monitoring system to turn to
  A recipe can describe one of several possibilities for per- this newly generated schedule. Such activation and ﬁre condi-
forming an action; e.g., a product can be made in different tions are needed both in revision and progressive approaches.
ways that are mutually exclusive. At execution, for each set Typical examples of activation and ﬁre conditions are vio-
of mutually exclusive recipes, only one will be executed. lations of some constraints in the current schedule, arrivals of
  The ﬁrst two ways of deﬁning a schedule are just two al- new activities to execute, critical resources no longer avail-
ternatives to deﬁne recursively a classical partially ordered able (implying a revision mechanism), or more simply a con-
schedule without alternatives. The third introduces parts of dition stating that the anticipation horizon becomes too small
a schedule that divide, at some given time-point, into mutu- and so we need to schedule a new subset of activities to an-
ally exclusive recipes: each recipe rcpi will be executed if a ticipate execution (implying a progressive mechanism).
branching condition is met at that point.               The generation and execution model can be represented by
  It should be noted that conditions must be designed such an automaton whose states are called execution contexts.
that they are actually mutually exclusive and cover all cases. Deﬁnition 4.10 (execution context) An execution context
  The previous recursive deﬁnitions are actually constructive ect = Sect,αect is composed of a schedule Sect and an
deﬁnitions that permit to build a schedule piece by piece, execution algorithm αect.
building subsets of partially ordered activities that are then
composed into a set of mutually exclusive recipes, this set be- An execution context is a schedule that is a solution of the
ing in turn integrated into a subset of partially ordered activ- whole scheduling problem or a part of it. In addition, an ex-
ities that is in turn one of several mutually exclusive recipes, ecution context may not contain all recipes starting from a
                                                                                                     Py
and so on: alternatives may be nested within alternatives. branching node, but only those with the highest values ;
                                                      another example of activation condition is hence that when
  For tractability reasons, we assume there is no temporal    Py
constraint between two activities that do not belong to the the value of a remaining recipe becomes high enough, that
same recipe. However, some precedence constraints can be recipe should be developed and included in the current sched-
added to constrain branching conditions to be checked before ule: we hence generate in a progressive way a new schedule
their related recipes would be executed.              which is the current one augmented with an additional recipe.
                                                        αect makes decisions (start time setting, resource alloca-
4.2  Generation and Execution                         tions, branching on one recipe among several candidates, etc.)
                                                      on the run, greedily: it cannot change decisions that are al-
We only deﬁned a model that a proactive method could use to ready made. In case of pure execution approach, such as dis-
generate a more or less ﬂexible schedule that would then be patching, αect makes all decisions.
entirely sent to the execution controller. To make it possible Our automaton also includes transitions for generating ex-

  3                                                   ecution contexts and going from one execution context to an-
   One should notice that what we call a schedule would be better other one.
referred to as a solution to a scheduling problem, which is possibly
not fully set but only deﬁnes a partial order, a schedule implying in Deﬁnition 4.11 (transition) A transition
                                                                src   tat    act    ﬁr
the Operations Research community that all start times are set. tr = ecttr ,ecttr ,condtr ,condtr ,βtr is composed of

                                                IJCAI-07
                                                   59                          src
a source execution context ecttr , a target execution con- best schedules among a set of executable schedules, whereas
      tat                         act
text ecttr , an activation condition condtr , a ﬁre condition the latter are greedy and return the ﬁrst executable they ﬁnd.
    ﬁr
condtr , and a generation algorithm βtr.                As a matter of conclusion, one can see any ‘pure’ technique
                                                      can be easily instantiated with our model: a pure proactive
  The default situation for the temporal windows of the acti- technique will barely need a single context, generation being
vation and ﬁre conditions of transition tr is the whole source
                  src                                 made once for all ofﬂine, the remaining decisions being taken
execution context ecttr ; i.e., their temporal windows equal
                                             ectsrc   by the sole execution algorithm; in a pure revision (resp. pro-
the interval between the start point and the end point of tr . gressive) approach, contexts contain non-ﬂexible predictive
           tr
  Transition is activated when its activation condition is schedules with basic execution algorithms, and activation/ﬁre
         tr                            β
met. When   is activated, generation algorithm tr generates conditions associated with failures or quality deviations in
                    ecttat
target execution context tr from source execution context the current context (resp. to the horizon getting too small or
ectsrc
  tr  and the data of the problem model. Execution algo- the uncertainty level decreasing), and generation algorithms
rithm αecttat is set by βtr from a library of template execution
        tr                                            change the current schedule to ﬁt the new situation (resp. add
algorithms. βtr may be run ofﬂine or online; it can decide or a new subset of activities). But the great strength of the model
change a part of or all decisions, in particular it can select is that now all three kinds of approaches can be integrated and
                               ecttat
a subset of activities to include into tr (progressive ap- parameters can be tuned to put more or less ﬂexibility, more
proach). Transition tr is ﬁred when its ﬁre condition is met. or less revision capabilities, etc., upon needs that are driven
When tr is ﬁred, we change contexts: we go from source exe-
               src                         tat        by the application.
cution context ecttr to target execution context ecttr . Acti-
                  act
vation condition condtr must be more general than or equal
                  ﬁr         act                      5   Experimental System
to ﬁre condition condtr since condtr must be met before or
         ﬁr
when condtr is met.                                   In this section, we simply recall a few software prototypes
  Template transitions are deﬁned ofﬂine and each of them is that we implemented, and we show how they are actually
an implicit description of many transitions that may be ﬁred special cases of our global model and hence partly validate
in an automaton model; e.g., a template transition associated it. Experimental results appear in the cited papers.
with a resource constraint rct1 may be ﬁred each time one of
the activities involved in rct1 is executing and allocated to the 5.1 Scheduling Problem
                 rct
resource involved in 1.                               The ﬂexible job-shop scheduling problem (ﬂexible JSP) is a
                                 ect
  The generation algorithm generating trl and the execu- scheduling problem where the set of activities AY is parti-
                         ect
tion algorithm associated with trl are complementary: the tioned into jobs, and with each job is associated a total or-
former makes some decisions for a subset of activities, and dering over a subset of AY . Each activity speciﬁes a set of
the latter makes the remaining decisions for these activities; alternative resources on which it must execute without inter-
e.g., the former makes allocation and sequencing decisions, ruption. No activities that require the same resource can over-
and the latter sets activity start times.             lap their executions. We represent this formally by a partition
  It should also be noted that all conditions are checked by of the set of AY into resource sets.Asolution corresponds
execution algorithms. When a branching condition is met, we to allocating one resource to each activity and a total ordering
do not change contexts. When an activation condition is met, on each resource set such that the union of the resource and
a new execution context is generated. When a ﬁre condition job orderings is an acyclic relation on AY .
is met, we change execution contexts.                   For our experimental investigations, we focused on prob-
  Our ﬁrst assumption is that uncertainty level decreases abilistic ﬂexible job-shop problems. Random variables are
when executing a context. Ergo, we leave some decisions fully independent and associated with probability distribu-
to the execution algorithm to limit the computational effort tions. We conducted experiments with two criteria to mini-
that would be used to revise decisions, and the perturbations mize: makespan, and sum of tardiness and allocation costs.
and instability due to such revision. Decisions that can be
made in advance because they concern variables with low un- 5.2 Architecture
certainty are taken by generation algorithms, while remaining Our experimental system is composed of the following mod-
decisions will be taken later either by generation or execution ules: a solver, a controller, and a world.4 The solver module is
algorithms when their uncertainty will be lower.      in charge of making decisions with a backtrack search, con-
  Our second assumption is that dynamics of the underly- straint propagation, and Monte-Carlo simulation. The deci-
ing controlled physical system are low enough with respect to sions made by the solver module are sent to the controller
the time allotted to the reasoning system to search for sched- module. The latter is responsible for choosing activity start
ules online. Therefore one has enough time to ﬁnd at least times given decisions made by the solver module and what
one schedule, if not the optimal one. Generation algorithms happens during execution (observations sent by the world
should be anytime; i.e., generation algorithms should be able module). The controller module monitors progression and
to produce a schedule whose quality, robustness, or stability revision conditions to start either a selection of new activi-
increases with search time. In principle, the decisions made ties or a re-optimization, when it is relevant. The controller is
by generation algorithms are better with respect to an opti-
mization criterion than the decisions made by execution algo- 4The world module is not a real execution environment but a
rithms. The former have more time to reason and choose the simulator of it, it instantiates random variables.

                                                IJCAI-07
                                                   60