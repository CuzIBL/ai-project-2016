         Lambda Depth-ﬁrst Proof Number Search and its Application to Go

          Kazuki Yoshizoe                 Akihiro Kishimoto                   Martin Muller¨
      Dept. of Electrical, Electronic, Department of Media Architecture,  Dept. of Computing Science,
     and Communication Engineering,   Future University-Hakodate, Japan   University of Alberta, Canada
         Chuo University, Japan               kishi@fun.ac.jp               mmueller@cs.ualberta.ca
       yoshizoe@is.s.u-tokyo.ac.jp

                    Abstract                          of proof-number based algorithms, overestimation of proof
              λ                                       and disproof numbers delays the search of nodes that look
    Thomsen’s  search and Nagai’s depth-ﬁrst proof-   unpromising but can be easily solved.
    number (DFPN) search are two powerful but very      This paper studies a combined approach, which utilizes
    different AND/OR tree search algorithms. Lambda   proof numbers to control the effort put into search based on
    Depth-First Proof Number search (LDFPN) is a      different threats. In this manner, the most promising threat
    novel algorithm that combines ideas from both
               λ                                      types to use in different parts of a search tree can be selected
    algorithms.  search can dramatically reduce a     at runtime. The contributions include:
    search space by ﬁnding different levels of threat
    sequences. DFPN employs the notion of proof         • The lambda depth-ﬁrst proof-number (LDFPN) search
    and disproof numbers to expand nodes expected         algorithm synthesizing depth-ﬁrst proof-number search
    to be easiest to prove or disprove. The method        [Nagai, 2002] and λ search [Thomsen, 2000].
    was shown to be effective for many games. Inte-     •
           λ                                              Experimental results for capturing problems in the game
    grating  order with proof and disproof numbers        of Go demonstrating that LDFPN outperforms DFPN
    enables LDFPN to select moves more effectively,       with state of the art enhancements and is more robust
    while preserving the efﬁciency of DFPN. LDFPN         than classical λ search.
    has been implemented for capturing problems in
    Go and is shown to be more efﬁcient than DFPN       The rest of this paper is organized as follows: Section 2
    and more robust than an algorithm based on classi- summarizes the rules of Go. Section 3 describes related work.
    cal λ search.                                     Section 4 introduces the LDFPN algorithm. Section 5 dis-
                                                      cusses experimental results, and Section 6 concludes and out-
1  Introduction                                       lines further research directions.
Many search methods have been developed to solve com- 2   The Game of Go
plex AND/OR trees, as occur in games. The direction of
search can be controlled in an ad hoc manner by domain- The game of Go is a two person zero sum perfect informa-
speciﬁc knowledge. Domain-independent best-ﬁrst, nonuni- tion game. It originated in China and is most popular in East
form tree expansion techniques are a more principled ap- Asia. Players take turns to place stones on the intersections
proach. Research in this area has produced two families of of a grid. The ﬁrst player uses black stones and the second
algorithms: in the ﬁrst family of algorithms based on proof player uses white stones. A stone placed on the board stays
and disproof numbers [Allis, 1994; Nagai, 2002; Kishimoto in its position unless the opponent captures and removes it.
and M¨uller, 2005], search is controlled through the combined The aim of the game is to surround more territory than the
estimated difﬁculty of solving sets of frontier nodes that must opponent. An example of a terminal position in Go on a 9×9
be (dis-)proven in order to (dis-)prove the root. The second board is shown in the left of Figure 1.
family of algorithms utilizes null (pass) moves [Donninger, One of the few rules of Go is about capturing stones. A
1993] for ﬁnding threats to achieve a goal [Thomsen, 2000; set of directly connected stones of the same color is called a
Cazenave, 2002]. Search proceeds in a statically determined block. Stones connect vertically and horizontally, not diag-
fashion from simpler to more complex threats. Both fam- onally. Empty intersections directly adjacent to a block are
ilies of algorithms can be viewed as simplest-ﬁrst search called liberties. A player can capture an opponent block by
paradigms, for different deﬁnitions of what constitutes a sim- playing on its last liberty.
ple search. However, neither notion of simplicity matches the A capturing problem in Go is the following decision prob-
ideal one, which is to ﬁnd a (dis-)proof as quickly as pos- lem: Given a block b in a Go position p and a player to play
sible. For example, in the case of threat-based algorithms, ﬁrst, can b be captured assuming best play by both? The
a proof containing long series of simple threats is inferior to player owning b is called the defender, the opponent is the
one with a small number of more complex threats. In the case attacker.

                                                IJCAI-07
                                                  2404                                                                                     n
  A block with only one liberty is said to be in atari.A Deﬁnition 2 [Thomsen, 2000] A λd -move is a defender
ladder is a special capturing problem where the attacker uses move such that after the move, there is no subsequent λi-tree
a sequence of ataris. A successful ladder is shown in the right with λi =1(0≤ i ≤ n − 1). The defender move averts all
of Figure 1. For more information about Go, please refer to lower order attacker threats.
http://www.usgo.org/                                                                         0
                                                        For example, in the capturing problem, a λ -move occu-
                                                      pies the last liberty of the target block and captures it. At-
                                                             λ1
                              15141617                tacker’s a moves are moves for capturing the target stones
                                                                                        λ1
                              1312  9                 in a ladder or directly, while defender’s d moves are moves
                                                      preventing a direct capture. Attacker’s λ2 moves threaten to
                              1110  8 5                                                 a
                                                      capture the target in a ladder or directly.
                                 7  6 4 1               The underlying concept of λ search is that λn moves are
                                    3 2               deﬁned by λn−1 searches, and the size of a λn−1 tree is ex-
                                                      pected to be far smaller than a λn tree. Therefore λ search
                                                      can prune moves according to the λ order with little effort.
                                                        λ search is especially efﬁcient for problems for which λ
                                                      order is meaningful. Capturing problems in Go are an ideal
                                                      case, because lower bounds on the λ order can be derived
                                                      from game speciﬁc knowledge, the number of liberties of a
Figure 1: Example of a terminal position in Go, and a ladder block [Thomsen, 2000].
                                                        Two simple dominance relations hold for the value of λ
                                                      trees.
3  Related Work                                                 if λn =1   then  λi =1   (n ≤ i)      (1)
                                                                n             j
3.1  Threats, Threat-based Search and  λ Search             if λ  =0   then  λ =0    (0≤ j ≤ n)       (2)
Threats can be used to direct and focusing search. A position                      n
                                                        A positive result of a λ search, λ =1, is correct provided
with many threats is usually good for the attacker, while an
                                                      that pass is allowed or zugzwang is not a motive in a game. A
absence of threats indicates that no quick success can be ex-              n
                                                      negative search result, λ =0, means that either there is no
pected. If a player has a threat to win, it is worth investigating                                  
                                                      solution, or a solution will be found at a higher order n >n.
it with high priority. Threats severely restrict the opponent’s
choice of replies to moves that can avert the threat, and often 3.2 Proof-Number Search Variants
lead to further follow-up threats.
  Threats can be found by using null moves. Intuitively, a In an AND/OR tree, let a proof be a win for the ﬁrst player
threat is a move that, if ignored, leads to a quick win. In the (corresponding to an OR node) and a disproof awinforthe
                                                                                         [              ]
ladder example in Figure 1, each black move is a threat to opponent (represented by an AND node). Allis et al., 1994
capture, and white has only one possible move to avert that introduced proof and disproof numbers as an estimate of the
                                                      difﬁculty to ﬁnd proofs and disproofs in a partially expanded
threat.                                                                                  n pn(n)
  The threat-based approach of [Allis et al., 1996] was gener- AND/OR tree. The proof number of node , ,isdeﬁned
       λ                                              as the minimum number of leaf nodes that must be proven in
alized to search [Thomsen, 2000] and further by Cazenave                  n                       dn(n)
[2002]. While this paper concentrates on a comparison with order to ﬁnd a proof for , while the disproof number is
λ                                                     the minimum number of leaf nodes to disprove for a disproof
  search, its ideas should apply to threat-based methods in n pn(n)=0   dn(n)=∞
general.                                              for .          and           for a proven terminal node
                    λ           λ                     n,andpn(n)=∞      and dn(n)=0for a disproven termi-
  The basic concept of search is the order, a measure of       pn(n)=dn(n)=1
how fast a player can achieve a goal, or in other words, the nal node.           is assigned to any unproven
                  λ             λn                    leaf. Let n1, ···,nk be children of interior node n. Proof and
directness of a threat. search creates -trees consisting of                       n
λn-moves, which are recursively deﬁned as follows: A suc- disproof numbers of an OR node are:
       0                              0
cessful λ -tree for the attacker, denoted by λ =1, consists                                k
of a single attacker move that achieves the goal directly. A pn(n)= min pn(ni),dn(n)=         dn(ni).
 0                                                                i=1,···,k
λ -move is such a winning attacker move.                                                   i=1
                         n                  λn =1
  An attacker win by an order threat is denoted by ,                  n
while λn =0indicates that the attacker cannot achieve the For an AND node proof and disproof numbers are:
                         n
goal by order n threats. A λ -tree is a search tree which         k
           n                      n
consists of λ -moves. If there is no λ -move for a node,  pn(n)=     pn(ni),dn(n)=       min  dn(ni).
                                                                                        i=1,···,k
that node is terminal and a loss for the player to move. The      i=1
deﬁnition of λn-movesisasfollows.
                               n                      Figure 2 shows the calculation.
Deﬁnition 1 [Thomsen, 2000] A λa -move is an attacker   Proof-number search (PNS) is a best-ﬁrst search algorithm
move such that if the defender passes in reply, there exists a
 i         i                                          that maintains proof and disproof numbers for each node.
λ -tree with λ =1(0≤ i ≤ n − 1). The attacker threatens PNS ﬁnds a leaf node from the root by selecting a child with
to win within a λ order of less than n.               smallest proof number at each OR node and one with smallest

                                                IJCAI-07
                                                  2405     Figure 2: Calculation of proof/disproof numbers

disproof number at each AND node. It then expands that leaf
and updates all affected proof and disproof numbers along
the path back to the root. This process continues until it ﬁnds
either a proof or disproof for the root.
  Depth-ﬁrst proof-number (DFPN) search [Nagai, 2002] is
a depth-ﬁrst reformulation of PNS which re-expands fewer
interior nodes and can run in space limited by the size of the
transposition table. Thresholds for proof and disproof num-
bers are gradually incremented and used to limit a depth-ﬁrst
search, similar to Recursive Best-First Search [Korf, 1993].
  DFPN has been a very successful search method, and is
used in the best tsume-shogi solver [Nagai, 2002], the best
tsume-Go solver [Kishimoto and M¨uller, 2005], and a back-
end prover for solving checkers [Schaeffer et al., 2005].
Yoshizoe [2005] presented a DFPN-based solver for the cap-  Figure 3: Attacker’s node and Defender’s node
turing problem in Go to ﬁnd an inversion, a set of points
on which a move possibly changes the outcome of a search.           n                       λ
                             [              ]         for the proof of . The proof of the highest order subtree
The dual lambda search algorithm Soeda et al., 2005 tracks                          λl−1
threats by both players in the mutual king attack typical of is the only valid proof. However, a subtree is searched
shogi endgames. [Soeda, 2006] develops a family of algo- for the exceptional case of a pass move. In the bottom of this
                                                      Figure, if the attacker cannot win by λ order 2 after a defender
rithms closely related to our work and applies them to the                                         λ
Japanese game of shogi.                               pass, then the attacker was not threatening to win by order
                                                      2 and according to the deﬁnition cannot win by λ order 3.
                                                      From the attacker’s point of view, the purpose for searching
4  The LDFPN Search Algorithm                         this pseudo node cl−1 is to check if the attacker’s previous
                                                                                         l
4.1  Details of LDFPN                                 move m, which lead to node n,wasaλa  move or not. If
                                                      λl−1 =0
LDFPN is a proof number based λ search. Proof/disproof         is proven, the search can immediately return to the
                                                      parent of n.Sinceaλl−1 subtree is typically smaller than a
numbers for AND/OR nodes are initialized and propagated λl                 c
as in DFPN. However, each attacker node is split into several subtree, the search for l−1 will often ﬁnish quickly.
                                   λ        0, ···,l    The defender, looking for a disproof at AND node n, can
pseudo nodes corresponding to different orders    ,                                           λl
and search dynamically selects the most promising λ order choose between the most promising move in the tree and a
                                                      pass move that searches a λl−1-tree. Therefore, the proof and
to pursue at each node.                                                              n
  An attacker node n is shown at the top of Figure 3. It is disproof numbers of a defender node are calculated by:
divided into pseudo nodes of different λ orders up to a limit pn(n)=pn(cl),dn(n)=min(dn(cl−1),dn(cl)).
of l =3in the example. Each pseudo node corresponds to
a subtree with different λ order. Let n be part of a λl tree, Like DFPN, LDFPN uses two thresholds for proof and dis-
and c0, ···,cl the pseudo nodes of n. The attacker wants to proof numbers. LDFPN selects the leaf node with the small-
          l                                                                                λ
prove that λ =1. By the dominance relation of equation est proof/disproof number, regardless of the order.
                                                                                                λ
(1), the attacker need only prove any one of the pseudo nodes. The main advantage of LDFPN over classical search is
However, disproving any lower order λ tree is no help for dis- the ability of LDFPN to seamlessly switch between different
           l                                          λ
proving the λ tree as in equation (2). Therefore, the disproof order child nodes. There is no need to wait for a proof or
                                                                         λ
number of attacker’s node n is the same as for cl.    disproof of all lower order subtrees. Since disproofs are
  Formally the proof and disproof numbers of attacker’s node often more difﬁcult than proofs, this ability to skip a difﬁcult
                                                                  λn−1                          λn
n are calculated as follows:                          disproof of a    subtree and start search of a subtree
                                                      improves the search behavior.
      pn(n)=   min  pn(ci),dn(n)=dn(cl).
              i=0,···,l                               4.2  Search Enhancements
  A defender node n is shown in the bottom of Figure 3. De- Heuristic Initialization of Proof and Disproof Numbers
fender’s aim is to disprove this node by showing λl =0.By The basic DFPN algorithm initializes proof and disproof
equation (2), proofs of lower order λ subtrees are irrelevant numbers of an unproven leaf node to 1. As in [Allis, 1994;

                                                IJCAI-07
                                                  2406                                                        The following three algorithms were tested:
                                                        • LDFPN: The LDFPN algorithm described in Section 4
                                                          with the highest λ order of 5. Several methods for ini-
                                                          tializing proof and disproof numbers were tested to tune
                                                          Hpn  and Hdn. As a result, Hpn and Hdn for a node n
                                                          with λ order λ are deﬁned as follows:

                                                                                      λ−1
                                                            Hpn(n)=Hdn(n)=max(1,     2   )(0≤    λ ≤ 5).

                                                        • DFPN+: The DFPN algorithm with heuristic initializa-
                                                          tion. Hpn and Hdn use Go-speciﬁc knowledge, the dis-
      Figure 4: Sample test problem (Black to play)       tance to a target block. To allow a fair comparison, state
                                                          of the art enhancements are incorporated into the imple-
                                                          mentation of the DFPN+ algorithm, such as techniques
Nagai, 2002], one way to enhance performance of LDFPN     from [Kishimoto and M¨uller, 2003; 2005] and Kawano’s
                                        H   (n)
is to heuristically initialize these numbers. Let pn and  simulation [Kawano, 1996].
H  (n)
 dn    be evaluation functions to initialize the proof and dis- • λ                          λ
proof number of leaf n. In LDFPN, Hpn(n) and Hdn(n) are   Pseudo    search: Thomsen’s original search uses
deﬁned as functions of the λ order of n, to reﬂect the prop- an alpha-beta framework. For better comparison with
                      λ                                   LDFPN,  pseudo λ search uses LDFPN with special pa-
erty that a node with lower order should be searched with a                                             λ
higher priority (see Section 5.1 for details). DFPN with this rameter settings that mimic the search strategy of
enhancement is called DFPN+ in [Nagai, 2002].             search, which expands trees strictly in increasing order
                                                          of λ. A similar effect is achieved in LDFPN by letting
Ladder Search                                             the heuristic initialization grow very quickly with λ:
  λ1
A    search for capturing problems of Go is the same as a                              λ−1
ladder search, shown in Figure 1. This search is exceptionally Hpn(n)=Hdn(n)=max(1, 256   )(0≤    λ ≤ 5).
easy, since the number of move candidates is very small (1
or 2 in most cases). In the implementation reported here, a Since the capturing problems tested are in open-ended ar-
special purpose ladder search is 10 times faster in terms of eas, it is hard to restrict move generation and achieve prov-
nodes per second than LDFPN. It can be used as a subroutine ably correct results. In practice, most computer Go programs
by LDFPN.                                             heuristically limit moves for their capture search engines and
                                                      regard a block with a large enough number of liberties as es-
Simulation                                            caped. Three types of move generators were tested: not only
Kawano’s simulation [Kawano, 1996] saves search time by to generate all legal moves and also to accurately assess the
reusing the proof tree of similar board positions. If a board life and death status.
position A was (dis-)proven, a similar board position B is
                                                        • Heuristic generator: generates moves on the liberties of
likely to be (dis-)proven by the same (dis-)proof tree.
                                                                         [             ]
  LDFPN  uses simulation only for pass moves at AND       surround blocks Thomsen, 2000 , and of blocks near
                                                          the target block. It also generates some more moves in-
nodes. A pass move is searched at AND nodes, and if it re-
                                                          cluding the 2nd liberties of the target block.
sults in a loss, its sibling nodes are checked using the disproof
tree of the pass move. In this way, irrelevant moves which do • Heuristic+ generator: generates moves by the heuristic
not help the player can be disproven quickly.             generator plus on all their adjacent points.
                                                        • Full board generator: All legal moves are generated.
5  Experimental Results
                                                        For DFPN+, a liberty threshold to regard the block as es-
5.1  Setup of Experiments                             caped is passed as a parameter. LDFPN uses the failure of
The test suite consists of 217 capturing problems, including a search with the preset maximum λ order 5 to determine
110 from [Mas, 2002] and 107 modiﬁed ones. While the  whether a target block has escaped. For DFPN+, the num-
original problems all have a winning solution, the modiﬁed ber of liberties of the target block was used as the threshold.
problems test the case where the ﬁrst player loses. A typi- LDFPN with maximum λ order of l evaluates a block with
cal example is shown in Figure 4. The attacker Black must l +2or more liberties as escaped. A liberty threshold of l +2
capture the crucial white stones marked by triangles to save for DFPN+ is roughly comparable to a LDFPN search with
the black stones marked by squares. The correct answer is maximum order l.
marked with a cross.                                    The parameters given to LDFPN are the target blocks to
  Each problem was searched in two ways: First to capture capture/defend, and the λ order.
the stones marked with triangles, and second to defend the A test case was considered solved, if the move returned
stones marked with squares. Some problems contained 2 was the solution given in [Mas, 2002].
blocks to be defended, and in some others, there were 2 blocks Experiments were performed on an Opteron 870 at 2.0
to be captured. Counting these as separate problems yields a GHz with a node limit of 1 million nodes per test position
total of 440 test problems.                           and a 200 MB transposition table.

                                                IJCAI-07
                                                  2407           —            LDFPN   DFPN+   pseudo λ
   Heuristic: num solved 294     272      288
   Heuristic+: num solved 283    267      282
   Full board: num solved 207    149      201


Table 1: Number of problems solved by each move generator.      100

                                                                 10
5.2  LDFPN versus DFPN+
                                                                  1
Table 1 summarizes the number of problems solved by
                                                                 0.1
LDFPN and DFPN+ with the three move generators. LDFPN
solved more problems than DFPN+ in each case. The differ-       0.01
ence is largest for the full board move generator. This is not normal  DFPN with sim,H [sec]
surprising, because threats based on the λ orders can drive    0.001
LDFPN to focus on searching moves near the target block of
                                                                                           y=x
the defender.                                                 0.0001
                                                                  0.0001  0.001  0.01  0.1  1  10  100
  Figure 5 compares the performance of LDFPN and DFPN+                       LDFPN with sim,H,ladder [sec]
for each problem solved by both algorithms with the three              (a) Heuristic generator
move generators. In this Figure, the execution time of
LDFPN was plotted on the horizontal axis against DFPN+ on       100
the vertical axis on logarithmic scales. A point above y = x
indicates that LDFPN performed better. LDFPN outperforms         10

DFPN+ for all three generators, with the largest difference for   1
the full board move generator, showing the clear advantage of
LDFPN on pruning irrelevant moves.                               0.1
  The example shown on the left in Figure 6 is solved faster
                                                                0.01


by LDFPN. With the “heuristic” move generator, LDFPN       normal  DFPN with sim,H [sec]
searched 895 nodes to solve this problem in 0.007 seconds,
while DFPN+ searched 3,143 nodes in 0.022 seconds. In this     0.001
problem, black has to sacriﬁce 2 stones to win. If stones are                              y=x
                                                              0.0001
captured, there are more empty points in a position (i.e. the     0.0001  0.001  0.01  0.1  1  10  100
points where the stones used to be placed), resulting in an                  LDFPN with sim,H,ladder [sec]
increase in the number of legal moves. This increases the             (b) Heuristic+ generator
proof number of a node in DFPN+, which should have been
                                                                100
easily proven. DFPN+ delays searching such a node with an
apparently large proof number. LDFPN tends to search with        10
a smaller set of moves based on the λ order, and this effect
occurs less frequently and is less severe than with DFPN+.        1
  One disadvantage of LDFPN is that it occasionally has to
visit the same nodes in different λ orders. If the additional in-  0.1
formation of λ order is not effective, the advantage of LDFPN
                                                                0.01

disappears. In particular, if the number of possible moves is normal  DFPN with sim,H [sec]

small, DFPN+ works well.                                       0.001
  The right position in Figure 6 shows an example that                                     y=x
DFPN+ solved more quickly than LDFPN. The answer is           0.0001
marked with a cross in this Figure. With the “heuristic” move     0.0001  0.001  0.01  0.1  1  10  100
generator, LDFPN searched 63,201 nodes to solve the prob-                    LDFPN with sim,H,ladder [sec]
lem in 0.44 seconds, and DFPN+ searched 10,871 nodes in               (c) Full Board generator
0.08 seconds. This is a typical problem, in which λ order has
a negative effect. Both players have several suicidal moves   Figure 5: LDFPN with ladder vs DFPN+
with low λ orders. LDFPN therefore tends to search to dis-
prove all suicidal moves before trying to prove the correct
move. In DFPN+, the suicidal moves result in captures of
non-target blocks, leading to larger proof numbers for these
moves. DFPN+ therefore delays searching these suicidal
moves and expands the correct move earlier.

                                                IJCAI-07
                                                  2408