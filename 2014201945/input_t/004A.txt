                                          DIAGNOSTIC REASONING IN SOFTWARE FAULT LOCALIZATION 

                                                                Robert L. Sedlmeyer* 
                                                               William B. Thompson 
                                                                   Paul E. Johnson 


                                                              University       of Minnesota 

                                ABSTRACT                                            faults rather than of fault localization. 

        We present a diagnostic model of software                                          Our model partitions diagnostic knowledge for 
fault localization. A diagnoatic. approach to                                       the software fault localization task into knowledge 
fault localization has proven effective In the                                      uspd to locate known and novel faults. For diag•
domains of medicine and digital hardware. Apply•                                    nosing known faults the knowledge base contains a 
ing this approach to the software domain requires                                   hierarchy of faults which are known to occur in 
two extensions: a heuristic abstraction mechanism                                   programs from a particular applications domain, and 
which infers program function from structure using                                  a set of empirical associations which relate fault 
recognition and transformation tactics; and a                                       manifestations to possible causes. For diagnosing 
search mechanism which integrates both prototypic                                   novel faults the knowledge base contains models of 
and causal reasoning about faults.                                                  implementation alternatives and execution behavior 
                                                                                    of functions indigenous to the domain. Both know•
                         I. INTRODUCTION                                            ledge sources are utilized by a set of localization 
                                                                                    tactics to generate, select and test fault hypo•
        In this paper we present a model of fault                                   theses. 
localization for program debugging based on a 
trouble-shooting paradigm [J], Within a diagnostic                                    II. KNOWLEDGE OF PROGRAM STRUCTURE AND FUNCTION 
framework we define the. software fault localization 
task as follows: A fault exists In a program when•                                          Knowledge of program structure and function 
ever its output differs from that expected by the                                   is necessary for diagnosis of both known and novel 
user. These descrepancies are called fault mani•                                    faults. In the former case it is used to confirm 
 festations. The task is to identify the cause of                                   expectations associated with a given fault hypo•
each manifestation which is specific enough to                                      thesis; in the latter case it is used to trace 
effect program repair.                                                              violations of expected behavior to their source. 
                                                                                    In our model this knowledge is captured in 
        Application of the trouble-shooting strategy                                functional phototypes. 
has proven effective in constructing intelligent 
systems for hardware [2,3,4] and medical [5,6,7]                                           A functional. phototype, consists of four com•
diagnosis. In contrast to ve rification-based                                       ponents: a set of recognition triggers, a list of 
approaches (cf. [8,9,10,11] this strategy concen•                                   pre- and post-conditions describing the execution 
trates computational resources on suspect compo•                                    behavior, a description of prototype components 
nents. Applying the diagnostic approach to the                                      and their topology, and a List of constraints among 
software domain requires two extensions: a                                          components that must hold for recognition. Proto•
heuristic abstraction mechanism that infers func•                                   types are defined at three levels of abstraction: 
tion from structure using recognition and transfor•                                 the language, programming, and applications levels; 
mation tactics; and a search mechanism that inte•                                   and are hierarchically organized. A portion of the 
grates both prototypic and causal reasoning to                                      functional prototype hierarchy describing the com•
localize faults.                                                                    ponent topology of the "master file priming read" 
                                                                                    (MFPR) function is given in Figure 1. 
        Several program debugging systems evidence 
trouble-shooting tactics [12,13,14], but none are 
based on a comprehensive diagnostic theory. 
Sussman [1] was primarily interested in developing 
a theory of skill acquisition and examined the role 
of debugging in that context. While Miller and 
Goldstein [13] addressed the debugging task direct•
ly, the faults which MYCROFT analyzed were tightly 
constrained by the simplicity of the programs 
Involved. Shapiro [14] addresses more realistic 
debugging environments, but formulates a theory of 

*Current address: Department of Computer Tech., 
Purdue University at Fort Wayne, Indiana 46805  30 R. Sedlmeyer et al. 


 The figure shows that the MFPR consists of a single                                  the abstraction mechanism to test it. If the 
 component, the file priming read. A file_priming                                     hypothesis fails then a related hypothesis can be 
 read is only recognized as a MFPR if two con•                                        proposed, a different fault model can be applied, 
 straints are met: the input record is used as a                                      or the tactic can be abandoned. 
 master record and the input file is used as a 
master file. Recognition triggers include the                                                 Function-driven localization uses output dis•
 file priming_read and file input stmt prototypes                                     crepancies to suggest that a particular functional 
 as well as the language keyword "read".                                              prototype is improperly implemented. The abstrac•
                                                                                      tion mechanism is then invoked to identify the 
                  III. KNOWLEDGE OF FAULTS                                            code which implements the prototype. Tf the pro•
                                                                                      totype cannot be found then the source code pro•
        While functional prototypes describe expected                                 ducing the most feasible match is considered as 
program structure and function; fault modals des•                                     the intended implementation. The fault is identi•
cribe expected defects in program structure and                                       fied by the statement causing failure in the match•
function. A fault model embodies knowledge of a                                       ing process. This tactic can also be directed to 
particular implementation error or class of errors.                                   examine a particular abstraction level for a fault. 
This knowledge consists of conditions under which                                     All prototypes defined at the chosen level are con•
the model is applicable, a set of fault hypotheses,                                   sidered suspect. This application of the function-
and a set of related fault models. A fault hypo•                                      driven tactic is less directed and usually less 
thesis is an expected defect in a functional pro•                                     desirable. Only when the output discrepancies 
totype. Defects are defined as missing prototype                                      offer no basis for prototype selection does this 
components or violated constraints. Like function•                                    alternative become attractive. 
al prototypes fault models are hierarchically 
organized. Figure 2 details a fault model for a                                               Computation-driven localization traces the 
master file input error.                                                              computation of a particular set of program vari•
                                                                                      ables. The computation is analyzed by extracting 
                                                                                      from the program those statements that directly 
                                                                                      affect the values of variables in the set. This 
                                                                                      extraction process is known as slicing [15]. The 
                                                                                      computation can be followed in either a forward 
                                                                                      or reverse order of execution flow. Faults are 
                                                                                      found by using the abstraction mechanism to inter•
                                                                                      pret statements in the slice as members of more 
                                                                                      abstract functional prototypes and comparing the 
                                                                                      expected computational results to those derived. 

                                                                                                          V. PROGRAM ABSTRACTION 

                    IV. LOCALIZATION TACTICS                                                  Program abstraction is performed by matching 
                                                                                      functional prototypes to the source code. Ab•
        Localization is performed using three tactics:                                straction may either be expectation-driven or 
fault-driven, function-driven and computation-                                        data-driven depending upon the localization tactic 
dntvan. Vault-driven.n localization directs search                                    selected. Expectation-driven abstraction matches 
at finding a particular kind of fault, such as an                                     prototypes to code in a top-down manner, recursive•
unexpected end_of file. Function-driven locali•                                       ly matching components until a direct match can be 
zatA.on analyzes a particular functional prototype                                    made against the source code or previously recog•
for an error. Computation-driven localization                                         nized prototypes. Data-driven abstraction employs 
concentrates search on the computation of a set of                                    language-level triggers to select prototypes for 
program variables. Each makes use of an abstrac•                                      matching. Prototypes matched at lower levels of 
tion mechanism (Section 5) to generate and test                                       abstraction serve as triggers for matching at 
fault hypotheses.                                                                     higher levels. Once a functional prototype is 
                                                                                      identified the corresponding code is bound to it. 
       Multiple localization tactics are desirable 
for three reasons. First, they enhance the pro•                                               Recognition-based abstraction is an efficient 
bability of finding faults since different tactics                                    technique, but it has limitations. Recognition of 
analyze the source code from different perspectives.                                  a functional prototype may fail for one of three 
Secondly, tactics which best fit the available in•                                    reasons: a defect exists in the source code 
formation can be chosen. Thirdly, each tactic is                                      implementing the prototype, the wrong prototype is 
optimal, in the sense of minimizing computational                                     selected, or the source code represents an un•
resources, for a particular localization task.                                        familiar but correct implementation. The effec•
                                                                                      tiveness of the recognition mechanism depends on 
       Fault-driven localization uses the fault model                                 the exactness of the triggering process and the 
hierarchy to generate fault hypotheses. Output                                        richness of the alternative implementation set. 
discrepancies serve as triggers for selecting a                                       Purely structural matching is augmented by func•
particular fault model. The more salient the                                          tional matching. The behavior of a program segment 
trigger set the more specific the fault model and                                     which is inferred from language semantics, can 
the associated fault hypotheses. Given a fault                                        also be compared to the functional descriptions 
model, localization continues by first choosing                                       in the prototype hierarchy. 
one of these fault hypotheses and then invoking                                                                                                                                   R. Sedlmeyer et al. 31 


                           VI. AN EXAMPLE                                           24. Hole f_i_s, which is bound to g 00014, does not 
                                                                                           precede role update loop, which is bound to 
       We have implemented an initial version of the                                       g0005 
model in a program named FALOSY (FAult Localization                                 25. Match for f p r fails 
SYstem). FALOSY addresses faults in master file                                     26. Matching m f pr to (s52 read transfile transbuf) 
update programs [16]. In this section we illus•                                     2 7. Checking constraint (before f_i_s update loop) 
trate FALOSY1s reasoning for the master file                                        28. Role f i s, which is bound to gOOO18, does not 
priming read error.                                                                        precede role update loop which is bound to 
                                                                                          g()0005 
       FALOSY is presented with a discrepancy list                                  29. Match for f_p_r fails 
and a list representation of the program's source                                   30. Recognition of m f pr fails 
code. The discrepancy list formally describes                                       31. Fault hypothesis verified 
differences between expected and observed output.                                   32. Fault is: (m f pr missing) 
An abridged trace of FALOSY's reasoning is given 
in the Appendix. Numbers in parentheses refer to                                                                  BIBLIOGRAPHY 
line numbers in the Appendix. 
                                                                                     [11 J. DeKleer, "Local methods for localization of 
       A production system, whose antecedents are                                          faults in electonic circuits," M1T-A! Memo 394, 
sets of discrepancies, is used to select the                                               1976. 
initial localization tactic. In this case l.he-                                      [2] M.Genesereth, "Diagnosis using hierarchic 
fault-driven tactic is chosen and the master file                                          design models," Proceeding* of the Second AAA] 
priming read fault model is triggered (1). FALOSY                                          Conference-, August, 1982. 
hypothesizes that the priming, read for the master                                   [3] R. Davis, H. Shrobe, w. Hamscher, K. Wieckert, 
file is missing (2). The abstraction mechanism is                                          M. Shirley, and S. Pol it, "Diagnosis based on 
invoked to identify the corresponding prototype                                            description of structure and function," 
(4). A check is first made to determine if it has                                          proceeding of the Second AAA! Coference, 
been previously identified. Since it has not, the                                          August, 1982. 
recognition mechanism is invoked recursively to                                      [4] R. Hartlev, "How expert should an expert system 
find the components oi the master file priming                                             be?", Proceeding* IJCAI-81, August 1981. 
read prototype.                                                                      [5] R. Patil, P. Szolovits, W. Schwartz, "Causal 
                                                                                           understanding of patient illness in medical 
        Eventually search is carried out at the source                                     diagnosis," Proceedings of 1JCA1-81, August, 
level, and three read statements (6, 26) are                                               1981. 
selected for further matching. Constraints are                                       [6] E. Short life, Computer Based Medical Consulta•
now checked starting with those at the lowest level                                        tions' MYCIN, American Elsevier, New York, 
in the abstraction hierarchy. The first candidate                                          New York, 1976. 
is rejected since the file identifier is not used                                    [71 B. Chandrasekaran and S. Mittal, "Deep versus 
as the master file (20). The second and third                                              compiled knowledge approaches to diagnostic 
candidates are rejectee1 because they do not pre•                                          problem-solving," Proceeding* of the Second 
cede the update loop (24,28). No candidate satis•                                         AAAI Conference, August, 1982. 
fies all constraints and recognition fails. The                                      [81 H. Wertz, "Understanding and improving LISP 
original hypothesis is thus verified.                                                      programs," 7 TCAI-77 Proceeding*. 
                                                                                     [91 R. Ruth, "Intelligent program analysis," 
                                                                                          artifical Intelligence, Vol. 7, No. l, 1976 
                                                                                     [101 C. Adam and M. "LAURA, a system to debug 
                                                                                          student programs," Artificial Intelligence, 
                                                                                           November, 1980. 
                                                                                     [11] F. "Understanding and debugging computer 
                                                                                          programs," International Journal of Man-Machine. 
                                                                                          Studies, Vol. 12, 19S0, pp. 189-202. 
                                                                                     [12] G Sussman, A Computational Model of Skill 
                                                                                          Acquisition, American Elsevier, New York, 1975. 
                                                                                     [13]Miller, "A structured planning and debugging 
                                                                                          environment," International Journal of Man-
                                                                                          Machine Studies, Vol. 11. 1978. 
                                                                                     [14] D. Shapiro, "Sniffer: a system that understands 
                                                                                           bug," MIT-AI Memo 638, June, 1981 
                                                                                     [151M. Weiser, "Program slices: formal, psychologi•
                                                                                          cal, and practical investigations of an 
                                                                                          automatic program abstraction method," 
                                                                                          University of Michigan Ph.D. Thesis, 1979. 
                                                                                     [16]B. Dwyer, "One more time - How to update a 
                                                                                          master file," Communications of the ACM, 
                                                                                          Vol. 24, No. 1, January 1981. 