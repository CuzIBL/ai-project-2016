                              Non-Standard Reasoning Services for the 
                           Debugging of Description Logic Terminologies 

                         Stefan Schlobach                                      Ronald Cornet 
           Language and Inference Technology, ILLC                       Academic Medical Center 
            Universiteit van Amsterdam, Netherlands             Universiteit van Amsterdam, Netherlands 
                     schlobac@science.uva.nl                               R.Cornet@amc.uva.nl 


                        Abstract                               such as RACER [Haarslev and Moller, 2001] or FaCT [Ilor-
                                                               rocks, 1998], can detect this type of inconsistency and the 
     Current Description Logic reasoning systems pro•          knowledge engineer can identify the cause of the problem. 
     vide only limited support for debugging logically         Unfortunately, many other concepts are defined based on the 
     erroneous knowledge bases. In this paper we pro•          erroneous definition of "brain" forcing each of them to be 
     pose new non-standard reasoning services which            erroneous as well. In practice, DL reasoners provide lists of 
     we designed and implemented to pinpoint logical           hundreds of unsatisfiable concepts for the DICE TBox and the 
     contradictions when developing the medical ter•           debugging remains a jigsaw to be solved by human experts, 
     minology DICE. We provide complete algorithms             with little additional explanation to support this process. 
     for unfoldable ACC-TBoxes based on minimisa•
                                                                 By debugging we understand the identification and elimi•
     tion of axioms using Boolean methods for min•
                                                               nation of modelling errors when detecting logical contradic•
     imal unsatisfiability-presening sub-TBoxes, and 
                                                               tions in a knowledge base. Debugging requires an explana•
     an incomplete bottom-up method for generalised 
                                                               tion for the logical incorrectness and, as a second step, its 
     incoherence-preserving terminologies. 
                                                               correction. In this paper we will focus on the former as the 
                                                               latter requires an understanding of the meaning of represented 
1 Introduction                                                 concepts. We define a number of new non-standard reasoning 
                                                               services to explain incoherences through pinpointing. 

Our work was motivated by the development of the DICE1           Our experience with debugging DICE provides some 
terminology. DICE implements frame-based definitions of        hands-on examples for the problem at hand: take the con•
diagnostic information for the unambiguous and unified clas•   tradictory definition of brains in the DICE anatomy specifica•
sification of patients in Intensive Care medicine. The repre•  tion. What information is useful for correcting the knowledge 
sentation of DICE is currently being migrated to an expres•    base? First, we have to identify the precise position of errors 
sive Description Logic (henceforth DL) to facilitate logical   within a TBox; that is, we need a procedure to single out the 
inferences. Figure 1 shows an extract of the DICE terminol•    axioms causing the contradiction. The axioms for Brain and 
ogy. In [Cornet and Abu-Hanna, 2002] the authors describe      CentralNenvusSystem form such a minimal incoherent sub•
the migration process in more detail. The resulting DL ter•    set of the DICE terminology. Formally, we introduce minimal 
minology (usually called a "TBox") contains axioms such as     unsatisfiability-presening sub-TBoxes (abbreviated MUPS) 
the following, where classes (like BODYPART) are translated    and minimal incoherence-presening sub-TBoxes (MIPS) as 
as concepts, and slots (like REGION) as roles:                 the smallest subsets of axioms of an incoherent terminology 
                                                               preserving unsatisfiability of a particular, respectively of at 
                                                               least one unsatisfiable concept. Secondly, we highlight the el•
                                                               ements of these definitions containing the faulty specification. 
                                                               An axiom, e.g., NervousSystem points to 
   Developing a coherent terminology is a time-consuming 
                                                               the core of the erroneously modelled knowledge. For this 
and error-prone process. DICE defines more than 2400 con•
                                                               purpose we define generalised incoherence-preserving termi•
cepts and uses 45 relations. To illustrate some of the prob•
                                                               nologies (GIT) as sets of incoherent axioms, which are syn-
lems, take the definition of a "brain" which is incorrectly 
                                                               tacticly related to the original axioms, more general and have 
specified, among others, as a "central nervous-system" and 
                                                               minimal structural complexity. 
"body-part" located in the head. This definition is contradic•
tory as nervous-systems and body-parts are declared disjoint     The remainder of this paper is organised as follows: Sec•
in DICE. Fortunately, current Description Logic reasoners,     tion 2 introduces the relevant DL concepts to make the paper 
                                                               self-contained. In Section 3 we introduce the new reasoning 
   'DICE stands for "Diagnoses for Intensive Care Evaluation". services and provide algorithms in Section 4. The paper fin•
The development of the DICE terminology has been supported by  ishes with a discussion of the results we obtained with our 
the NICE foundation.                                           new methods on the terminology DICE. 


DESCRIPTION LOGICS                                                                                                    355                               Figure 1: An extract from the DICE terminology (frame-based). 

 2 Description Logics                                          Consider the following (incoherent) TBox 71, where A,B 
                                                               and C are primitive and A\,..., A7 defined concept names: 
 We shall not give a formal introduction into Description Log•
 ics here, but point to the new handbook [Baader et at., 2003]. 
 Briefly, DLs are set description languages with concepts (usu•
 ally denoted by capital letters), interpreted as subsets of a do•
 main, and roles which are binary relations, which we denote 
 by small letters. In a terminological component T (called     The set of unsatisfiable concept names as returned by a DL 
TBox) the interpretations of concepts can be restricted to the reasoner is {A1,A3,A6,A7}. Although this is still of man•
models of T by defining axioms of the form _ Based ageable size, it hides crucial information, e.g., that unsatisfia-
on this formal model-theoretic semantics, a TBox can be        bility of A1 depends on unsatisfiability of A3, which is inco•
checked for incoherence, i.e., whether there are unsatisfiable herent because of the contradictions between A4 and A5. We 
concepts: concepts which are necessarily interpreted as the    will use this example to explain our debugging methods. 
empty set in all models of the TBox. Other standard reason•    Minimal unsatisfiability-preserv ing sub-TBoxes (MUPS) 
ing services include subsumption of two concepts C and D 
                                                               Unsatisfiability-prcserving sub-TBoxes of a TBox T and an 
(a subset relation w.r.t. all models of T). Subsumption with•
                                                               unsatisfiable concept A are subsets of T in which A is unsat•
out reference to a TBox is called concept subsumption and 
                                                               isfiable. In general there are several of these sub-TBoxes and 
we write . Recently, a number of non-standard rea•
                                                               we select the minimal ones, i.e., those containing only axioms 
soning services have been defined, such as the least common 
                                                               that are necessary to preserve unsatisfiability. 
subsumer of concepts or the minimal rewriting of concepts 
                                                               Definition 3.1 Let A be a concept which is unsatisfiable in 
(see [Kiisters, 2001] for an overview). 
                                                               a TBox T. A set T' T is a minimal unsatisfiability-
   ACC is a simple yet relatively expressive DL with conjunc•
                                                               preserving sub-TBox (MUPS) of T if A is unsatisfiable in 
tiondisjunctionnegation and uni•
versal and existential quantification . A TBox                 7~\ and A is satisfiable in every sub-TBox T" V• 
is called unfoldable if the left-hand sides of the axioms (the We will abbreviate the set of MUPS of T and A by 
defined concepts) are atomic, and if the right-hand sides (the mups(T, A). MUPS for our example TBox T1 and its un•
definitions) contain no direct or indirect reference to the de• satisfiable concepts are: 
fined concept [Nebel, 1990]. 

3 Explaining Logical Incoherences 
In this section we study ways of explaining incoherences in 
DL terminologies. We propose to simplify a terminology T       MUPS arc useful for relating unsatisfiability to sets of axioms 
in order to reduce the available information to the root of the 
                                                               but we will also use them in Section 4 to calculate MIPS. 
incoherence. More concretely we first exclude axioms which 
are irrelevant to the incoherence and then provide simplified  Minimal incoherence-preserving sub-TBoxes (MIPS) 
definitions highlighting the exact position of a contradiction MIPS are the smallest subsets of an original TBox preserving 
within the axioms of this reduced TBox. We will call the       unsatisfiability of at least one atomic concept. 
former axiom pinpointing, the latter concept pinpointing.      Definition 3.2 Let T be an incoherent TBox. 
   In this section we will formally introduce axiom and con•   T is a minimal incoherence-preserving sub-TBox (MIPS) of 
cept pinpointing for a general TBox without restrictions on    T if T' is incoherent, and every sub-TBox is co•
the underlying representation language. In Section 4 we will   herent. 
give algorithms for the case of unfoldable ACC-TBoxes.         We will abbreviate the set of MIPS of T by mips{T). For 71 
                                                               we get three MIPS: 
3.1 Axiom Pinpointing 
Axiom pinpointing means identifying debugging-relevant ax•     It can easily be checked that each of the three incoherent 
ioms, where an axiom is relevant if a contradictory TBox be•   TBoxes in mips(Ti) is indeed a MIPS as taking away a sin•
comes coherent once the axiom is removed or if, at least, a    gle axiom renders each of the three coherent. The first one 
particular, previously unsatisfiable concept turns satisfiable. signifies, for example, that the first two axioms are already 
                                                               contradictory without reference to any other axiom, which 
    We will not consider assertional components in this paper. suggests a modelling error already in these two axioms. 


356                                                                                               DESCRIPTION LOGICS Cores                                                            • every TBox T" = with a syn­

Minimal incoherence-preserving sub-TBoxes identify small­           tactic generalisation D" of Dt where Di Di and 
est sets of TBox axioms causing the original TBox to be                                            is coherent. 
incoherent. In terminologies such as DICE, which are cre­
                                                               We abbreviate the set of generalised incoherence-preserving 
ated through migration from other representation formalisms, 
                                                               terminologies of a TBox T by git(T). Note that the set of 
there are several such sub-TBoxes, each corresponding to a     GITs of a TBox T is equivalent to the union of GITs for the 
particular contradictory terminology. Cores are now sets of    MIPS of T. Take a simple syntactic relation relating a con­
axioms occurring in several of these incoherent TBoxes. The    cept with the syntactic sub-concepts of its unfolded version 
more MIPS such a core belongs to, the more likely its axioms 
                                                               with the same polarity and quantifier depth.4 As this particu­
will be the cause of contradictions.                           lar definition of a syntactic relation depends on unfolding the 
Definition 3.3 Let T be a TBox. A non-empty intersection       related concepts, all but one axiom per GIT can be trivially 
of n different MIPS in rnips(T) (with n 1) is called a         generalised to . Of all possible GITs we conjecture 
MlPS-core ofarity n (or simply n-ary core) for T.              that the simplest ones, e.g., those with syntactically minimal 
                                                               generalisations, are most likely to be useful for the identifica­
livery set containing precisely one MIPS is, at least, a 1-ary 
                                                               tion of errors. In our experiments we use two alternative for-
core. The most interesting cores of a TBox, T, are those with 
                                                               malisations, the first with respect to minimal size of axioms, 
axioms that are present in as many MIPS of T as possible, 
                                                               the second with respect to the number of concept names oc­
i.e., having maximal arity. On the other hand, the size of a 
                                                               curring in the GIT. Three minimal sized GITs exist for our 
core is also significant, as a bigger size points to clusters of 
                                                               example TBox 71, where we only show the non-trivial ax­
axioms causing contradictions in combination only. 
                                                               ioms: 
   In our running example, axiom ax4 occurs both in 
                                , which makes a core 

of arity 2 for T1, which is the core of maximal arity in this 
example. 
                                                               4 Debugging Unfoldable ALC-TBoxes 
3.2 Concept Pinpointing 
The next step in the debugging process is to simplify the def­ Practical experience has shown that applying our methods on 
initions in order to obtain more concise descriptions of errors a simplified version of DICE can already provide valuable 
within an incoherent TBox.                                     debugging information. We will therefore only provide al­
                                                               gorithms for unfoldable ,ALC-TBoxes [Nebel, 1990] as this 
Generalised Terminologies                                      significantly improves both the computational properties and 
Incoherence of a TBox can be regarded as an over-              the readability of the algorithm. 
specification of one or more concepts in the relevant defi­
nitions. Generalised terminologies are terminologies where     4.1 Algorithms for Axiom Pointing 
some of the definitions have been generalised.3 Furthermore,   The calculation of MIPS depends on the MUPS only, and 
we require generalised definitions to be syntactically related we will provide an algorithm to calculate these minimal 
to the original axioms. For different representation languages unsatisfiability-preserving sub-TBoxes based on Boolean 
and types of knowledge bases we will have to formally spec­    minimisation of terminological axioms needed to close a 
ify what we consider to be syntactically related concepts. For standard tableau ([Baader et al., 2003] Chapter 2). 
the time being let us keep the definition abstract and assume    Usually, unsatisfiability of a concept is detected with a 
that there is such a relation rel (C, C') denoting that two con­ fully saturated tableau (expanded with rules similar to those 
cepts C and C' are related. Formally, a concept C" is then     in Figure 2) where all branches contain a contradiction (or 
a syntactic generalisation of a concept C if rel{C, C) and     close, as we say). The information which axioms are rele­
         (independent of T). Note that we have to take care    vant for the closure is contained in a simple label which is 
of the case when C is unsatisfiable w.r.t. T. Then C is equiv­ added to each formula in a branch. A labelled formula has 
alent to and everything is more general. Therefore we 
                                                               the form (a : C)x where a is an individual name, C a con­
generalise C without referencing to the original terminology   cept and x a set of axioms, which we will refer to as label. A 
T, i.e., we check for simple concept subsumption, only.        labelled branch is a set of labelled formulas and a tableau is a 
   Now, generalised incoherence-preserving terminologies       set of labelled branches. A formula can occur with different 
(GITs) are TBoxes where the defining concepts of the axioms    labels on the same branch. A branch is closed if it contains 
are maximally generalised without losing incoherence.          a clash, i.e. if there is at least one pair of formulas with con­
Definition 3.4 Letbe an in­                                    tradictory atoms on the same individual. The notions of open 
                                                               branch and closed and open tableau are defined as usual and 
coherent TBox. An incoherent TBox 
                                                               do not depend on the labels. We will always assume that any 
          is a generalised incoherence-preserving terminol-
          ofT if, and only if, 
                                                                  4Thc polarity of a concept name A specifies whether A occurs 
   • each D1 is a syntactic generalisation of                  within odd or even numbers of negations, the quantifier depth is 
                                                               the sequence of roles over which the concept is quantified. Such 
   3To simplify matters we generalise the right-hand side of axioms a relation will formally be defined for unfoldable ACC-TBoxes in 
only as we are currently working with unfoldable TBoxes anyway. Definition 4.3. 


DESCRIPTION LOGICS                                                                                                    357 formula is in negation normal form (nnf) and newly created     Theorem 4.1 Let A be a concept name, which is unsatisfi•
formulas are immediately transformed. We usually omit the      able w.r.t. an unfoldable ACC-TBox T. The set of prime im•
prefix "labelled".                                             plicants of the minimisation function minJunction(a,{(a : 
   To calculate a minimal unsatisfiability-preserving TBox for       , T) is the set mups(T, A) of minimal unsatisfiability-
a concept name A w.r.t. an unfoldable TBox T we construct      preserving sub-TBoxes of A and T. 
a tableau from a branch B initially containing only 
                                                               Proof: We first prove the claim that the propositional formula 
(for a new individual name a) by applying the rules in Figure 
                                                                 := min function T) is indeed a minimisa­
2 as long as possible. The rules are standard ALC-tableau 
                                                               tion function for the MUPS problem w.r.t. an unsatisfiablc 
rules with lazy unfolding, and have to be read as follows: 
                                                               concept A and a TBox T. We show that a tableau starting on 
assume that there is a tableau T = {B, B     ,..., B ) with 
                                            1       n          a single branch closes on all branches by 
n+1 branches. Application of one of the rules on B yields the 
                                                               unfolding axioms only, that are evaluated as true in an assign­
tableaufor the and {Ax)-
                                                               ment making true. This saturated tableau Tab* is a particu­
rule, in case of the-rule. 
                                                               lar sub-tableau of the original saturated tableau Tab which we 
   Once no more rules can be applied, we know which atoms      used to calculate min-function , T), and it is 
are needed to close a saturated branch and can construct a     this connection that we make use of to prove our first claim. 
minimisation function for A and T according to the rules in    Every branch in the new tableau is a subset of a branch oc­
Figure 3. A propositional formula is called a minimisa•        curring in the original one and we define visible formulas as 
tion function for A and T if A is unsatisfiable in every subset those labelled formulas occurring in both tableaux. By induc­
of T containing the axioms which are true in an assignment     tion over the rules applied to saturate Tab we can then show 
making true. In our case axioms are used as propositional      that each branch in the original tableau closes on at least one 
variables in . As we can identify unsatisfiability of A w.r.t. a pair of visible formulas. If A is unsatisfiable w.r.t. T, the 
set S of axioms with a closed tableau using only the axioms in tableau starting with the branch closes w.r.t. T. 
S for unfolding, branching on a disjunctive rule implies that 
                                                               As we have shown that this tableau closes w.r.t. T on visi­
we need to join the functions of the appropriate sub-branches 
                                                               ble formulas, it follows that Tab* is closed on all branches, 
conjunctively. If an existential rule has been applied, the new 
                                                               which proves the first claim. By another induction over the 
branch B' might not necessarily be closed on formulas for 
                                                               application of the rules in Figure 3 we can prove that is a 
both individuals. Assume that B' closes on the individual a 
                                                               maximal minimisation function, which means that for 
but not on b. In this case min-function(a, B,T) = which 
                                                               every minimisation function This proves the first part of 
means that the related disjunct does not influence the calcula­
                                                               the proof; the first claim (and the argument from above) im­
tion of the minimal incoherent TBox. 
                                                               plies that every implicant of a minimisation function identi­
   Based on the minimisation function minfunction(a, {(a :     fies an unsatisfiability-preserving TBox, and maximality im­
          (let us call it which we calculated using the rules  plies that prime implicants identify the minimal ones. 
in Figure 3 we can now calculate the MUPS for A w.r.t. T.      To show that the conjunction of every MUPS 
The idea is to use prime implicants of A prime impli-          is a prime implicant of is 
cant is the smallest conjunction of literals5                  trivial as is a minimisation function by defini­
implying [Quine, 1952]. As is a minimisation function          tion. But as we know that minjunction(a, is 
every implicant of must be a minimisation function as well     maximal we know that 
and therefore also the prime implicant. But this implies that            which implies that must be prime 
the concept A must be unsatisfiable w.r.t. the set of axioms   as otherwise would not be minimal. ■ 
                                   is the smallest implicant 
we also know that must be minimal, i.e. a 
                                                               Satisfiability in ACC is PSPACE-complete, and calculating 
MUPS. Theorem 4.1 captures this result formally. 
                                                               MUPS does not increase the complexity as we can construct 
                                                               the minimisation function in a depth-first way, allowing us to 

   5Note that in our case all literals are non-negated axioms. keep only one single branch in memory at a time. However, 


358                                                                                               DESCRIPTION LOGICS we calculate prime implicants of a minimisation function the 
size of which can be exponential in the number of axioms                For all MIPS M mips{T) (with |rmp*(T)| = m) 
in the TBox. Therefore, approximation methods have to be 
                                                                           1. Let T' be the TBox where all axioms in T 
considered in practice avoiding the construction of fully satu•
                                                                              have been replaced by 
rated tableaux in order to reduce the size of the minimisation 
functions.                                                                2. Calculate different TBoxes T" where an arbitrary num•
   From MUPS we can easily calculate MIPS, but we need                        ber of axioms , ,_ have been replaced in T' by 
an additional operation on sets of TBoxes, called subset-                     generalised axioms , i.e., where 

reduction. Let M = {T1,..., Tm) be a set of TBoxes. The                       and for some 
subset-reduction of M is the smallest subset sr(M) M                      3. Return those incoherent TBoxes T" with minimal syn•
such that for all T M there is a set V sr(M) such that 
                                                                              tactic generalisations according to the subsumption rela•
'V T. A simple algorithm for the calculation of MIPS for 
                                                                              tion, and the size or number of concept names. 
T now simply follows from Theorem 4.2, which is a direct 
consequence of the definitions of MIPS and MUPS.                           The algorithm described above is a naive algorithm which 
Theorem 4.2 Let T be an incoherent TBox with unsatisfiable              might not terminate in reasonable time on large terminolo•
concepts                                                                gies with complex definitions as the number of syntactically 
                                                                        related concepts for a given concept C is exponential in the 
   Checking elements of mips(T) for cores of maximal arity 
                                                                        size of C. A more efficient algorithm to calculate GITs is 
requires exponentially many checks in the size of mips(T). 
                                                                        based on the fact that the syntactically related concepts can 
In practice, we therefore apply a bottom-up method searching 
                                                                        be created ordered by size starting with atomic concepts. To 
for maximal cores of increasing size stopping once the arity 
                                                                        find GITs of minimal size we therefore apply a bottom-up 
of the cores is smaller than 2. 
                                                                        strategy checking more and more complex terminologies for 
4.2 Algorithms for Concept Pinpointing                                  coherence in Step 2 stopping once we find an incoherent one. 
Calculating GITs depends on the definition of rel(C, C). In 
our case we will define this syntactic relation described in            5 Evaluation 
Footnote 4 including quantifier depth and polarity.                     The algorithms for axiom pinpointing have been imple•
Definition 4.3 Let T be an unfoldable „AlC-T13ox. A con•                mented in JAVA using RACER, which provides the set of un•
cept C" is syntactically related to a concept C (notation:              satisfiable concepts. We evaluated the methods on both the 
rcl(C, C')) if C" ' -(C), where the set of qualified sub-               anatomy fragment of DICE and the full DICE terminology. 
concepts, qsr{C), is defined inductively:                               The fragment defines 529 concept names, 76 of which were 
                                                                        unsatisfiable at first.*' There arc 5 MIPS containing 2 axioms 
                                                                        each, but no axiom occurs in all MIPS. However, there is a 
                                                                        core of arity 3 and size 1: the axiom defining "central ner•
                                                                        vous system" as a "nervous system". Note that the defini•
                                                                        tion of "nervous system" is not contradictory but that its use 
                                                                        is erroneous, e.g., the concept brain should be defined as a 
                                                                        "part of" and not as a subconcept of the concept nervous sys•
Moreover, also containsand for all concepts C.                          tem. For each of the 5 MIPS minimal size GITs have been 
Note that we include terminological information from un•                calculated, and they point to the exact position of the logi•
folded TBox axioms in the definition of syntactic relatedness.          cal incorrectness. For the MIPS related to the error described 
This choice allows us to create smaller and more concise 
                                                                             Thc high number of unsatisfiable concepts is due to the fact that 
GITs but is non-essential. As the TBox is finite and cycle-                 6
                                                                        the DL terminology for DICE has been created by migration from a 
free, and as the concept size decreases in every recursion step,        frame-based terminological system. In order to make the semantics 
          is finite. Therefore there is only a finite set of con•       as explicit as possible a very restrictive translation has been chosen 
cepts related to any axiom . A simple algorithm to cal•                 to highlight as many ambiguities as possible. Moreover, many con•
culate GITs for an incoherent unfoldable ALC-TBox T is                  cepts were defined as sub-concepts of unsatisfiable concepts. See 
therefore:                                                              [Cornet and Abu-Hanna, 2002] for details. 


DESCRIPTION LOGICS                                                                                                                     359 