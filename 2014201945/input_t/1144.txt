                 Scalability Study of Peer-to-Peer Consequence Finding

         P. Adjiman    and P. Chatalic  and  F. Goasdoue´  and  M.-C. Rousset    and L. Simon
                      PCRI: CNRS & Universit´e Paris-Sud (LRI) – INRIA (Futurs)
                      Bˆat. 490, 91405, Universit´e Paris-Sud, Orsay Cedex, France
                                {adjiman,chatalic,fg,mcr,simon}@lri.fr


                    Abstract                          must be computed from input that is provided at query time,
                                                      and cannot be reduced to satisﬁability checking.
    In peer-to-peer inference systems, each peer can    The problem of distributed reasoning considered in this pa-
    reason locally but also solicit some of its acquain- per is quite different from the problem of reasoning over par-
    tances, sharing part of its vocabulary. This pa-  titions obtained by decomposition of a theory ([Dechter and
    per studies both theoretically and experimentally Rish, 1994; Amir and McIlraith, 2000]). In that problem, a
    the problem of computing proper prime implicates  centralized large theory is given and its structure is exploited
    for propositional peer-to-peer systems, the global to compute its best partitioning, in order to optimize the use
    theory (union of all peer theories) of which is not of a partition-based reasoning algorithm. In our problem, the
    known (as opposed to partition-based reasoning).  whole theory (i.e., the union of all the local theories) is not
                                                      known and the partition is imposed by the P2P architecture.
1  Introduction                                       Therefore, existing algorithms ([Amir and McIlraith, 2000;
                                                                                       ]
Recently peer-to-peer (P2P) systems have received con- Dechter and Rish, 1994; del Val, 1999 ) are not appropriate
siderable attention because their underlying infrastructure for our consequence ﬁnding problem.
is appropriate to scalable and ﬂexible distributed appli- Section 2 deﬁnes formally the P2P inference problem ad-
cations over Internet. In a full P2P system, there is dressed in this paper. Section 3 describes the distributed
no centralized control or hierarchical organization: each consequence ﬁnding algorithm that we propose and states its
peer is equivalent in functionality and cooperates with properties. Section 4 accounts for a signiﬁcant experimental
other peers in order to solve a collective task. First study of the scalability of this approach. Section 5 describes
P2P systems were simple keyword-based ﬁle sharing sys- related work and we conclude in Section 6.
tems like Napster (http://www.napster.com) and Gnutella 2 Peer-to-peer inference: problem deﬁnition
(http://gnutella.wego.com), for which efﬁcient lookup ser- A peer-to-peer inference system (P2PIS) is a network of peer
vices (e.g., CHORD [Stoica et al., 2001]) have been invented. theories. Each peer P is a ﬁnite set of formulas of a lan-
Recently, schema-based peer data management systems like guage LP . We consider the case where LP is the language of
Edutella [Nedjl et al., 2002] or Piazza [Halevy et al., 2003b] clauses that can be built from a ﬁnite set of propositional vari-
have been proposed. In those systems, query answering com- ables VP , called the vocabulary of P . Peers can be seman-
plexity is directly related to the expressivity of the formalism tically related by having common shared variables in their
used to state the semantic mappings between peers schemas respective vocabularies. Each peer only knows its own lo-
[Halevy et al., 2003a]. The scalability of Piazza so far goes cal theory and that it shares some variables with some other
up to about 80 peers and relies on a wide range of optimiza- peers of the P2PIS (its acquaintances). It does not necessar-
tions (mappings composition, paths pruning [Tatarinov and ily know all the peers with which it shares variables. When
Halevy, 2004]), made possible by the centralized storage of a new peer joins a P2PIS it simply declares its acquaintances
all the schemas and mappings in a global server.      in the network, i.e., the peers it knows to be sharing variables
  In this paper, we make the choice of being fully distributed: with. A P2PIS can be formalized as an acquaintance graph.
there are neither super-peers (as in Edutella) nor a central
server (as in Piazza). In addition, we aim at scaling up to Deﬁnition 1 Let P = {Pi}i=1..n be a collection of clausal
                                                      theories on their respective vocabularies , let
thousands of peers. We consider P2P inference systems in                                    VPi     V  =
                                                               .  An acquaintance graph over   is a graph
which the local theory of each peer is a set of clauses deﬁned ∪i=1..nVPi                    V
upon a set of propositional variables. Each peer may share Γ = (P, ACQ) where P is the set of vertices and ACQ ⊆
part of its vocabulary with some other peers. We investigate V × P × P is a set of labelled edges such that for every
                                                                 ACQ,      and             .
the reasoning task of ﬁnding consequences of a certain form (v, Pi, Pj ) ∈ i 6= j v ∈ VPi ∩ VPj
for a given input formula expressed using the local vocabu- A labelled edge (v, Pi, Pj ) expresses that peers Pi and Pj
lary of a peer. This reasoning task is important in many appli- know each other to be sharing the variable v. For a peer P and
cations (diagnosis, information integration), in which output a literal l, ACQ(l, P ) denotes the set of peers sharing with P                    ¬F ∨ E  ¬F ∨ I
                 P1 :                                 query. Those in         are immediately returned. Then,
                    ¬F ∨ C ∨ K                                      T arget(P )
                                                      those made of shared literals are splitted. For each shared
               I      K           K,C                 literal, a subquery is propagated to the neighbor peers shar-
                                     ¬K ∨ L
                     ¬K ∨ Y                           ing the corresponding variable. When returned, consequents
      P2 : ¬I ∨ P P3 :            P4 : ¬C ∨ H
                     ¬L ∨ ¬K ∨ PL
                                     ¬PL ∨ AM         of the subqueries are respectively queued for future recom-
                              L,PL                    bination. As soon as one answer has been returned for each
                                                      subquery, they are recombined and transmitted back as new
Figure 1: Acquaintance graph for the tour operator example consequents to the querying peer. This process continues in-
                                                      crementally, as further consequents for the subqueries are re-
the variable of l. For each theory P , we consider a subset turned.
of target variables T VP ⊆ VP , supposed to represent the For instance, suppose that F is transmitted to peer P1 by the
variables of interest for the application. The goal is, given user. The consequents that are locally computed are E, I and
a clause provided as an input to a given peer, to ﬁnd all the C ∨ K. Since E∈T arget(P1), it is immediately returned as a
possible consequences of the input clause and the union of local consequent. Since I is shared with P2, it is transmitted
the peer theories, that belong to some target language. Given to P2, which produces the clause P. Since P ∈ T arget(P2),
a set SP of peers, the target language T arget(SP ) is the it is transmitted back to P1 and returned as a remote conse-
language of clauses (including the empty clause) involving quent of the initial query. The clause C ∨ K, being made of
only target variables of peers of SP. A shared variable must shared variables, is splitted and C and K are transmitted sep-
have the same target status in all the peers sharing it. arately to the concerned neighbors. C is transmitted to P4,
Deﬁnition 2 Let P be a clausal theory and q be a clause. A which returns (only) H to P1, where it is queued for combi-
clause m is called a prime implicate of q w.r.t. P iff P ∪ nation. Similarly, K is transmitted (independently) to P4 and
{q} |= m and for any other clause m′, if P ∪ {q} |= m′ and P3 (both share K with P1). On P4, L is produced locally.
m′ |= m then m′ ≡ m. m is called a proper prime implicate Since L∈T arget(P4) it is returned as a ﬁrst consequent of K
of q w.r.t. P iff it is a prime implicate of q w.r.t. P but P 6|= m. to P1, where it is queued. On P1, after recombination, H ∨ L
                                                      is then returned as a ﬁrst combined consequents of the initial
Deﬁnition 3 Let Γ = (P, ACQ) be an acquaintance graph query. Since L is also shared between P4 and P3, it is prop-
modeling a P 2P IS, where P = {Pi}i=1..n is a collection agated on P3, where the clause ¬K ∨ PL is produced and, in
of clausal theories with respective target variables. The con- turn, splitted. P4 is then asked for PL and returns AM as its
sequence ﬁnding problem is, given a peer P and a clause only consequent. P1 is asked for ¬K. This happens while
q ∈ LP to ﬁnd the set of proper prime implicates of q w.r.t. the complementary query K is still under process. We will
Si=1..n Pi which belong to T arget(P).                see in Section 3 that when a same reasoning branch contains
  Since none of the peers of a P2PIS knows the union of two complementary literals (which is detected using a history
the theories of the system, the consequence ﬁnding problem mechanism), it is closed and 2 is returned as a consequent.
in a P2PIS is new and signiﬁcantly different from the conse- P3 now combines AM (returned by P4 for PL), and 2 (re-
quence ﬁnding problem in a single global theory (even par- turned by P1 for ¬K) as a new consequent of ¬K ∨ PL, and
titioned). In a full P2P setting, each peer must run the same thus, transmits AM back to P4 as a new consequent of L. For
reasoning algorithm locally and independently, while being lack of space, we do not detail all reasoning branches. The
able to distribute part of the reasoning task that it controls to set of consequents of the initial query eventually produced
some of its acquaintances.                            is: {E, I, H ∨ L, H ∨ AM, H ∨ Y, H ∨ PL}. Among those an-
Example : Let us consider 4 peers (Figure 1). P1, describ- swers, let us note that some of them (e.g., H ∨ Y) involve
ing a tour operator, expresses that its current far destinations target variables from different peers. Such implicates can-
(F ) are either Kenya (K) or Chile (C). These far destinations not be obtained by partition-based algorithms like in [Amir
are international destinations (I) and expensive (E). P2, only and McIlraith, 2000] which only compute consequents that
concerned with police regulations, expresses that a passport belong to the target language of a single peer.
is required (P ) for international destinations. P3 focuses on
sanitary conditions for travelers. It expresses that, in Kenya, 3 Distributed consequence ﬁnding algorithm
yellow fever vaccination (Y ) is strongly recommended and
that a strong protection against paludism should be taken Our distributed and anytime consequence ﬁnding algorithm
(P L) when accomodation occurs in Lodges (L). P4 describes is has been presented in [Adjiman et al., 2004b]. For this pa-
accommodation conditions : Lodges for Kenya and Hotels per to be self-contained, we describe the three main message
(H) for Chile. It also expresses that when anti-paludism pro- passing procedures, which are implemented locally at each
tection is required, accommodations are equipped with appro- peer. They are triggered by the reception of a query (resp.
priate anti-mosquito protections (AM). Shared variables are answer, final) message, sent by a Sender peer to a receiver
indicated on the edges of the acquaintance graph (Figure 1) peer, denoted by Self, which executes the procedure.

and target variables are deﬁned by : T VP1 = {E}, T VP2 = Those procedures handle an history which is initialized to

{P }, T VP3 = {L, Y, P L} and T VP4 = {L, H, P L, AM}. the empty sequence. An history hist is a sequence of triples
  We now illustrate the behavior of the distributed conse- (l, P, c) (where l is a literal, P a peer, and c a clause). An
quence ﬁnding algorithm detailed in Section 3. When a peer history [(ln, Pn, cn), . . . , (l1, P1, c1), (l0, P0, c0)] represents
receives a query, it ﬁrst computes all local consequents of the a branch of reasoning initiated by the propagation of the lit-eral l0 within the peer P0, and the splitting of the clause c0: Algorithm 1: Procedure handling queries. It takes care of the
                                                      propagation of the literal by .
for every i ∈ [0..n − 1], ci is a consequence of li and Pi, and            q   Self
                                                        ECEIVE UERY  ESSAGE
li+1 is a literal of ci, which is propagated in Pi+1. R      Q     M       (m(Sender,Self, query, hist, q))
                                                      (1) if (¯q, , ) ∈ hist
  The reasoning is initiated by the user (denoted by a                                     2       2
particular peer User) sending to a given peer P a mes- (2) send m(Self, Sender, answer, [(q, Self, )|hist], )
                                                      (3) send m Self, Sender, final, q, Self, true hist , true
sage                     , which triggers the procedure         (                 [(         )|   ]    )
    m(User, P, query, ∅, q)                           (4)else if q ∈ Self or (q, Self, ) ∈ hist
RECEIVEQUERYMESSAGE(m(User, P, query,   ∅, q)) that is (5) send m(Self, Sender, final, [(q, Self, true)|hist], true)
locally executed by P . In the description of the procedures, (6)else
we will use the notations:                            (7) LOCAL(Self) ← {q} ∪ Resolvent(q, Self)
  • for a literal q, q¯ denotes its complementary literal and (8) if 2 ∈ LOCAL(Self)
Resolvent(q, P ) denotes the set of clauses obtained by reso- (9) send m(Self, Sender, answer, [(q, Self, 2)|hist], 2)
lution between q and a clause of P ,                  (10)  send m(Self, Sender, final, [(q, Self, true)|hist], true)
  • for a clause c of a peer P , S(c) (resp. L(c)) denotes the (11) else
disjonction of literals of c whose variables are shared (resp. (12) LOCAL(Self) ← {c ∈ LOCAL(Self)| L(c) ∈
                                                            T arget(Self)}
not shared) with any acquaintance of P . S(c) = 2 thus ex-
                                                      (13)  if for every c ∈ LOCAL(Self), S(c) = 2
presses that c does not contain any shared variable,  (14)    foreach c ∈ LOCAL(Self)
  • > is the distribution operator on sets of clauses: S1 > (15) send m(Self, Sender, answer, [(q, Self, c)|hist], c)
· · · > Sn = {c1 ∨ · · · ∨ cn |c1 ∈ S1, . . . , cn ∈ Sn}. If L = (16) send m(Self, Sender, final, [(q, Self, true)|hist], true)
                 >                 >    >
{l1, . . . , lp}, we use l∈LSl to denote Sl1 · · · Slp . (17) else
  The main properties of the resulting distributed message (18) foreach c ∈ LOCAL(Self)
passing algorithm, stated in [Adjiman et al., 2004a], can be (19) if S(c) = 2
summarized as follows:                                (20)       send m(Self, Sender, answer, [(q, Self, c)|hist], c)
  1) The algorithm is sound: the answers that are returned (21) else
                                                      (22)       foreach literal l ∈ S(c)
are all implicates of the literal having triggered the reasoning. (23) if l ∈ T arget(Self)
  2) The algorithm terminates and the user is notiﬁed of the (24)    ANSWER(l, [(q, Self, c)|hist]) ← {l}
termination, which is crucial for an anytime algorithm. (25)       else
  3) The completeness of the algorithm is guaranteed if each (26)    ANSWER(l, [(q, Self, c)|hist]) ← ∅
local theory is saturated by resolution and if the acquaintance (27) FINAL(l, [(q, Self, c)|hist]) ← false
graph is such that if two local theories have a common vari- (28)  foreach RP ∈ ACQ(l, Self)
able, there exists in the acquaintance graph a path between (29)     send m(Self, RP, query, [(q, Self, c)|hist], l)
those two theories, all the edges of which are labeled with Algorithm 2: Procedure handling answers. r is returned as a
that variable. If that property is not satisﬁed, the algorithm consequent of the last literal added to the history hist.
still applies but does not guarantee to return all the proper RECEIVEANSWERMESSAGE(m(Sender,Self, answer, hist, r))
prime implicates when it terminates.                  (1)hist is of the form [(l′, Sender, c′), (q, Self, c)|hist′]
  Note that 2 can be returned by our algorithm (lines 1 to 3 (2) ANSWER(l′, hist) ← ANSWER (l′, hist) ∪ {r}
and 8 to 10 in RECEIVEQUERYMESSAGE). Therefore, our   (3) RESULT← >l∈S(c)\{l′}ANSWER(l, hist) > {L(c) ∨ r}
algorithm can be exploited for checking the satisﬁability of (4)if hist′ = ∅, U←User else U← the ﬁrst peer P ′ of hist′
the global theory at each join of a new peer. For the sake of (5)foreach cs ∈ RESULT
                                                                                            ′
simplicity, our algorithm is presented as applying to literals. (6) send m(Self, U, answer, [(q, Self, c)|hist ], cs)
However any clause can be handled by splitting it into literals Algorithm 3: Procedure handling notiﬁcations: answer com-
and recombining the results obtained for each literal using the putation for the last literal added to hist is completed.
>
  operator.                                           RECEIVEFINALMESSAGE(m(Sender,Self, final, hist, true))
                                                      (1)hist is of the form [(l′, Sender, true), (q, Self, c)|hist′]
4  Experimental analysis                              (2) FINAL(l′, hist) ← true
                                                      (3)if for every l ∈ S(c), FINAL(l, hist) = true
In order to study scalability issues of our P2P algorithm we (4) if hist′ = ∅ U←User else U← the ﬁrst peer P ′ of hist′
have conducted a signiﬁcant experimentation on networks (5) send m(Self, U, final, [(q, Self, true)|hist′], true)
composed of 1000 peers. To the best of our knowledge, this (6) foreach l ∈ S(c)
is the ﬁrst experimental study on such large P2PIS. Our mo- (7) ANSWER(l, [(l, Sender, ), (q, Self, c)|hist′]) ← ∅
tivation was twofold. First, to study how deep and how wide
reasoning spreads on the network. Second, to evaluate the per node, and rewire each node with a given probability pr.
time needed to obtain answers and to check to what extent It has been shown that between regular graphs (pr = 0) and
the P2PIS is able to support the trafﬁc load.         uniform random graphs (pr = 1), the graphs generated with
  Since we want to use our infrastructure in real Web ap- pr = 0.1 have ”small world” properties.
plications, we have chosen to generate acquaintance graphs In the following experiments, the number q of shared vari-
having the so-called small world property, which is admitted ables labelling each edge varies, and each of the 1000 local
[Newman, 2000] as being a general property of social net- theories is a 2+p clausal theory composed of clauses of length
works (including the Web). Following [Watts and Strogatz, 2 and a varying ratio p of clauses of length 3. Each local the-
1998], we start from a regular ring of 1000 nodes, 10 edges ory is generated in two steps. First, 70 clauses of length 2 areuniformly generated over 70 variables that are proper to the            CDF of queries’s depth
local theory, among which 40 are chosen as target variables. 1
Then, we add clauses, involving shared variables, of length 2
or 3. We denote %3cnf the percentage of clauses of length 3 0.9
to generate in the whole set of mapping clauses. Each map-

ping clause is randomly generated by picking a variable in 0.8
each of the two peers and by negating it with probabilty 0.5
(if the clause is of length 3, the third variable is chosen at
random between the variables of the two peers).            0.7
  The experiments have been conducted on two different
                                                                                              q=2, %3cnf=0
platforms. For the measurements concerning the behavior of 0.6                                q=2, %3cnf=20
                                                                                              q=3, %3cnf=0
                                                                                              q=3, %3cnf=5
query processing (number of messages, depth and width of                                      q=3, %3cnf=10
                                                                                              q=3, %3cnf=15
each query processing) we have used a single computer run- 0.5                                q=3, %3cnf=20

ning 1000 peers. Such measurements, consisting in building y  = Ratio of queries depth smaller than x
reports on all peer traces are easier to perform when all data
                                                           0.4
are available on a single computer. In contrast, when time  0     20    40   60    80    100   120  140
was part of the measurement, we deployed our algorithm on                  x = Depth of queries
a cluster of 75 heterogenous computers (Athlons with 1GB Figure 2: Cumulative Distribution Function of queries depth.
of RAM: 26 at 1.4GHZ, 9 at 1.8Ghz and 40 at 2 GHZ). In The Y scale is re-centered on [0.4 − 1].
these last experiments, each computer was running around 14
peers, randomly selected.                             ing is easy, but the little remaining is very hard. The slow
  As we will see, results often exhibit an exponential distri- growth observed is due to the timeout, a side-effect of which
bution: some queries may need a very long time to complete. is to bound the query depth. Without such a timeout, previous
It was thus not always possible to perform our experimental experiments suggest that there would exist some queries re-
analysis without introducing a timeout parameter. Each query quiring very long reasoning branches. This point is outlined
is labeled with its remaining time to live, which is decreased on the curve corresponding to the hardest cases (q = 3 and
each time a query needs to traverse a peer to be processed. %3cnf = 20) where there is no query of depth between 20
When necessary, the timeout has been set to 30 seconds. and 60. This suggests that when hard processing appears, it is
  We ﬁrst report on the distributed behavior of query pro- very hard. In experiments that are not reported here, we have
cessing by measuring the number of peers that are involved seen that such an exponential distribution of values was not
in query processing. Then, we report on the time of query observed when the acquaintance graphs have a regular ring
processing and on the number of answers.              structure, but was observed on random graphs. We have also
                                                      measured the integration degree of queries, which is the num-
4.1  Distributed behavior of query processing         ber of distinct peers involved in the query processing. We
                                                      have observed the same kind of exponential distribution of
We have measured the distribution of the depth of query pro-
                                                      values than for the depth, but with 20% smaller values: 1/5
cessing as well as the potential width of a query. The depth of of the peers are repeated in the histories. That phenomenon
a query is the maximum length of the reasoning branches de- was not observed on random acquaintance graphs and seems
veloped by the distributed algorithm for returning an answer. closely related to the small-world topology.
The width of the query estimates the number of neighbors
                                                        Figure 3 shows the cumulative distribution function for the
that are solicited, on average, for processing a query.
                                                      width of the queries. Each curve summarizes 20000 runs.
  Figure 2 shows the cumulative distribution function of the
                                                      With q = 2 and %3cnf = 0, more than 75% of the queries
depth of 1000 queries, when we make vary the number of
                                               q      are solved locally and 15% other are solved by asking just one
shared variables per edge and the ratio %3cnf of mapping
                                                      neighbor. With q = 5 and %3cnf = 100, 25% of the queries
clauses of length 3. Each point on the ﬁgure reports a run, for
                                                      solicit 10 neighbors on average, each of them soliciting 10
a distinct query.
                                                      peers, with 25% chance and so on. Such result explains the
  The four top curves show a relatively small query depth.
                                                      combinatorial explosion observed on hard instances.
For instance, with q = 2 and %3cnf = 0 no query depth
is greater than 7, and none of those four curves have a query Our experiments have pointed out a direct impact of the
                                                             value on query processing, which is not surprising
depth greater than 36, which suggests that our algorithm be- %3cnf
                                                      considering the hardness of clauses of length 3 for prime im-
haves well on such networks.
                                                      plicate computation. Those experiments also suggest an ex-
  As soon as the value of %3cnf increases queries have
                                                      ponential distribution of query depths, due to the short path
longer depths: with q = 3 and %3cnf = 20, 22% of the
                                                      length between two peers in the acquaintance graphs, and
queries have a depth greater than 100 (the maximum being
                                                      with an important repetition of solicited peers, due to the large
134). If we focus on the last three curves on the right, a sharp
                                                      clustering coefﬁcient of small world acquaintance graphs.
threshold clearly appears, showing three phases: a sharp
growth, representing query processing with small depth, fol-
lowed by a plateau, and then a slower growth. The small 4.2 Time and number of answers
depth query processing and the ’plateau’ are characteristics We now report a time performance study of our algorithm
of an exponential distribution of values: most of the process- when it is deployed on a real cluster of 75 heterogeneous                   CDF of queries’s width             is that there are on average 5 answers, and they are produced
      1                                               very quickly.
     0.95                                               Even on hard and very hard instances, our algorithm pro-

     0.9                                              duces a lot of answers coming from a number of different
                                                      peers. For instance, we measured on average 1006 answers
     0.85                                             for Hard, and 1004 answers for Very Hard problems, which

     0.8                                              already represents a large amount of data. In addition, on
                                                      those Very Hard instances, 90% of runs produced at least one
     0.75                                             answer. It is noticeable that such hard instance may also be
     0.7                                              hard for checking the satisﬁability of an equivalent, central-

     0.65                                             ized, theory. The formula corresponding to the centralized
                                                      version of all the distributed theories has n=70 000 variables
     0.6                                              and m=120 000 clauses 50 000 of which are of length 3. It
                                       q=2, %3cnf=0
    Ratio  of queries width smaller than x
     0.55                              q=3, %3cnf=20  has been shown in [Monasson et al., 1999] that, for such 2+p
                                       q=3, %3cnf=100
                                       q=5, %3cnf=100 formulas, if one does not restrict the locality of variables,
     0.5
      0       5       10      15      20      25      the SAT/UNSAT transition is continuous for  0, where
                      Width of queries                                                      p < p
                                                      p0 = 0.41, and discontinuous for p > p0, like in 3-SAT in-
                                                      stances. Intuitively, for p > p0, the random 2+p-SAT prob-
Figure 3: Cumulative Distribution Function of queries width
                                                      lem shares the characteristics of the random 3-SAT problems.
The Y scale is re-centered on  , the X axis on    .
                        [0.5−1]            [0−25]     Let us emphasize here that, with the characteristics of our
                                                      Very Hard network, we have p = 0.416 for which the tran-
computers. Based on the previous observations, we have cho- sition phase between SAT and UNSAT instance [Monasson
sen to focus on 4 differents kinds of acquaintance graphs, de- et al., 1999] occurs at m/n=1.69. Here, we have m/n=1.71,
noted Easy, Medium, Hard and Very Hard (see Table 1). which is near the transition phase to conﬁrm that this is where
                                                      the hard instances would be in practice. Of course, such a
                           Network                    comparison is only indicative, because there is no variable
             Easy     Medium     Hard     Very Hard   locality restriction in the standard 2+p model.
             q = 2     q = 3     q = 3      q = 5
           %3cnf = 0 %3cnf = 20 %3cnf = 100 %3cnf = 100 To summarize, when deployed on a real cluster of hetero-
  1stans. 0.04s (100%) 1.26s (99.6%) 1.58s (95.6%) 1.39s (89.3%) geneous computers, our algorithm scales very well. Even on
  10thans. 0.06s (14.3%) 1.37s (25.6%) 0.99s (33.3%) 1.13s (12.0%)
    th                                                very hard instances that shares characteristics of a very large
 100 ans.     –     2.11s (12.7%) 0.84s (27.0%) 4.09s (10.7%)
 1000thans.   –     4.17s (6.80%) 4.59s (21.2%) 11.35s (7.15%) 2+p formula at the crossover between the 2-SAT/3-SAT and
    all      0.07s     5.56s     14.6s     21.23s     the SAT/UNSAT transitions, our algorithm was able to gen-
  % timeout   0        13.96     37.5       66.9      erate a large number of answers in a reasonable time, for a
  #answers   5.17      364       1006       1004      majority of runs.
  %unsat     4.4       3.64      3.76       1.84
Table 1: Characteristics of the query processing on easy to
very hard networks.                                   5   Related work
                                                      The distributed message passing algorithm that we have de-
  The values reported in the Table 1 are mean values over scribed in Section 3 can be viewed as a distributed version
more than 300 different queries. For each column, we show of an Ordered Linear deduction [Chang and Lee, 1973] to
the time needed to produce the 1st, 10th, 100th and 1000th produce new target clauses, which was extended by [Siegel,
answers of a query. Each mean time is followed by the per- 1987] in order to produce all implicates of a given clause be-
centage of initial queries that are taken into account in the longing to some target language, and further extended to the
averaging. For instance, for the Medium case, 12.7% of the ﬁrst order case in [Inoue, 1992]. The problem of comput-
queries have produced more than 100 answers, and the 100th ing new derived clauses (a.k.a. hL, Φi-prime implicates) cor-
answer was given on average after 2.11 seconds (the aver- responds exactly to the problem of computing proper prime
age does not take into account queries that did not produce at implicates w.r.t. a theory. It has been extensively studied in
least 100 answers). The all row is the mean time needed to the centralized case (see [Marquis, 2000] for a survey).
produce all answers, including queries that lead to timeout, We have already pointed out the differences between our
the percentage of which is reported in the %timeout row. The work and [Amir and McIlraith, 2000]. First, in a full peer-
last two rows report the mean number of answers and the ratio to-peer setting, tree decomposition of the acquaintance graph
of proven unsatisﬁable queries w.r.t. the network.    is not possible. Second, in contrast with partition-based algo-
  It is not surprising to ﬁnd that there is no timeout for the rithms as in [Amir and McIlraith, 2000], our algorithm is able
Easy case. It is known [Marquis, 2000] that satisﬁability to combine answers from different peers in order to compute
checking and prime implicates computation are tractable for implicates involving target variables of different peers.
sets of clauses of length 2. Moreover, the high partitioning of The model-based diagnosis algorithm for distributed em-
the global theory induced by the low value of q (number of bedded systems [Provan, 2002] exploits the knowledge on
shared variables) is often a witness of “easy” cases for reason- the distribution of the system to diagnose for optimization
ing for centralized theories. The point to outline for this case purpose. In distributed ATMS [Mason and Johnson, 1989],