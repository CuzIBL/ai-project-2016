                                                     LADDER: 
    A Language to Describe Drawing, Display, and Editing in Sketch Recognition 

                                       Tracy Hammond and Randall Davis 
                                       Massachusetts Institute of Technology 
                                           200 Technology Square, NE43 
                                                Cambridge, MA 02139 
                                           {hammond, davis}@ai.mit.edu 

                        Abstract                               the recognition process, such as stroke order or stroke direc•
                                                               tion. The specification of editing behavior allows the system 
     We have created LADDER, the first language to             to determine when a pen gesture is intended to indicate edit•
     describe how sketched diagrams in a domain are            ing rather than a stroke. Display information indicates what 
     drawn, displayed, and edited. The difficulty in cre•      to display after strokes are recognized. 
     ating such a language is choosing a set of prede•
                                                                 The language consists of predefined shapes, constraints, 
     fined entities that is broad enough to support a wide 
                                                               editing behaviors, and display methods, as well as a syntax 
     range of domains, while remaining narrow enough 
                                                               for specifying a domain description and extending the lan•
     to be comprehensible. The language consists of 
                                                               guage. The difficulty in creating such a language is ensur•
     predefined shapes, constraints, editing behaviors, 
                                                               ing that domain descriptions are easy to specify, and that 
     and display methods, as well as a syntax for spec•
                                                               the descriptions provide enough detail for accurate sketch 
     ifying a domain description sketch grammar and 
                                                               recognition. To simplify the task of creating a domain de•
     extending the language, ensuring that shapes and 
                                                               scription, shapes can be built hierarchically, reusing low-
     shape groups from many domains can be described. 
                                                               level shapes. Shapes can extend abstract shapes, which de•
     The language allows shapes to be built hierarchi•
                                                               scribe shared shape properties, preventing the application de•
     cally (e.g., an arrow is built out of three lines), and 
                                                               signer from having to redefine these properties several times. 
     includes the concept of "abstract shapes", analo•
                                                               The language has proven powerful enough to describe shapes 
     gous to abstract classes in an object oriented lan•
                                                               from several domains. The language enables more accurate 
     guage. Shape groups describe how multiple do•
                                                               sketch recognition by supporting both top-down and bottom-
     main shapes interact and can provide the sketch 
                                                               up recognition. Descriptions of how shapes may combine 
     recognition system with information to be used 
                                                               can aid in top-down recognition and can be used to describe 
     in top-down recognition. Shape groups can also 
                                                               "chain-reaction" editing commands. 
     be used to describe "chain-reaction" editing com•
     mands that effect multiple shapes at once. To               Our contribution is in creating LADDER, the first sketch•
     test that recognition is feasible using this language,    ing language to incorporate editing, display, and shape group 
     we have built a simple domain-independent sketch          information. To test our language, we have built a simple 
     recognition system that parses the domain descrip•        domain-independent sketch recognition system that parses 
     tions and generates the code necessary to recognize       the domain description and successfully recognizes shapes 
     the shapes.                                               based on these descriptions. 
                                                                 Section 2 describes the components of the language, in•
1 Introduction                                                 cluding the predefined shapes, constraints, editing behaviors, 
To date, sketch recognition systems have been domain-          and display methods available. Section 3 describes the syn•
specific, with the recognition details of the domain hard-     tax and content of a sketch grammar designed in the language. 
coded into the system. Developing such a sketch interface is a Section 4 describes a system we have implemented to test the 
substantial effort. We propose instead that recognition be per• language and ensure that shapes in a domain can be recog•
formed by a single domain-independent recognition system       nized based on their descriptions. Section 5 describes related 
that uses a domain specific sketch grammar (an approach used   work done in the development in sketch languages. 
with some success in speech recognition [Zue et al, 1990; 
Hunt and McGlashan, 2002]). Programmers could then cre•        2 Language Contents 
ate new sketch interfaces simply by writing a sketch grammar   The language consists of predefined shapes, constraints, edit•
describing the domain-specific information.                    ing behaviors, and display methods. Figure 2 shows an ex•
   We have created LADDER, a sketch description language       ample description for OpenArrow drawn in (Figure 1). The 
that can be used to describe how shapes and shape groups are   description of a shape contains a list of components (the el•
drawn, edited, and displayed. These descriptions primarily     ements from which the shape is built), geometric constraints 
concern shape, but may include other information helpful to    on those components, a set of aliases (names that can be used 


KNOWLEDGE REPRESENTATION                                                                                              461                                                                2.2 Predefined Constraints 
                                                               New shapes are defined in terms of previously defined shapes 
                                                               and constraints between them. For instance, the OpenArrow 
                                                               in Figure 2 contains the constraint (acute-meet headl shaft), 
                                                               which indicates that headl and shaft meet at a point and form 
                                                               an acute angle in a counter-clockwise direction from headl 
                                                               to shaft. (Angles are measured in a counter-clockwise direc•
                                                               tion.) 
                                                                 A number of predefined constraints are included in the lan•
                                                               guage, including: perpendicular, parallel, collinear, same-
                                                               side, opposite-side, coincident, connected, meet, intersect, 
                                                               tangent, contains, concentric, larger, near, draw-order, equal-
                                                               length, angle, angle-dir, acute, obtuse, acute-
                                                               meet, and obtuse-meet. If a sketch grammar consists of only 
                                                               the constraints above, the shape is rotationally invariant. 
                                                                 There are also predefined constraints that are valid only 
                                                               in a particular orientation, including horizontal, verti•
                                                               cal, pos-slope, neg-slope, left-of, right-of above, below, 
                                                               same-H-pos, same-V-pos, above-left, above-right, below-left, 
                                                               below-right, centered-below, centered-above, centered-left, 
                                                               centered-right, and angleL, where (angleL line l degrees) 
                                                               specifics that the angle between a horizontal line pointing 
                                                               right and linel is degrees. 
                                                                 There is an additional constraint: is-rotatable, which im•
                                                               plies the shape can be found in any orientation. If is-rotatable 
                                                               is specified along with an orientation-dependent constraint, 
                                                               there must be an angleL, horizontal, or vertical constraint 
                                                               specified, which serves to define the orientation and set a rel•
                                                               ative coordinate system. For example, the two angle-meet 
                                                               constraints could have been replaced with: 


                                                               in which case the shaft is the reference line. 

                                                               2.3 Predefined Editing Behaviors, Actions, and 
                                                                     Triggers 
                                                               Describing editing gestures permits the recognition system 
                                                               to discriminate between sketching (pen gestures intended to 
                                                               leave a trail of ink) and editing gestures (pen gestures in•
2.1 Predefined Shapes 
                                                               tended to change existing ink), and permits us to describe the 
The language includes a number of predefined primitive and     desired behavior in response to a gesture. 
non-primitive shapes, usable as building blocks in describing    In order to encourage interface consistency, the language 
other shapes. The primitive shapes are Shape, Point, Path,     includes a number of predefined editing behaviors described 
Line, BezierCurve, and Spiral. Circle, Arc, and Ellipse are    using the actions and triggers above. One such example is 
examples of non-primitive shapes included in the language      Draglnside, defines that if you click-hold-drag the pen start•
library; all three are more specific versions of the primitive ing inside of the bounding box of a shape, the entire shape 
shape Spiral. The OpenArrow in Figure 2 is a non-primitive     automatically moves with it. 
shape built out of three primitive shapes.                       When defining a new editing behavior particular to a do•
   The language uses an inheritance hierarchy; Shape is an     main, there are two things to specify: the trigger - what sig•
abstract shape which all other shapes extend. Shape provides   nals an editing command- and the action - what should hap•
a number of components and properties for all shapes, includ•  pen when the trigger occurs. The language has a number of 
ing boundingbox, centerpoint, width, and height. Each prede•   predefined triggers and actions to aid in describing editing 
fined shape may have additional components and properties; a   behaviors. 
Line, for example, also has Pl. p2 (the endpoints), midpoint,    For instance, in Figure 2, the OpenArrow contains three 
length, angle, and slope. Components and properties for a      editing behaviors. The first editing behavior says that if you 
shape can be used hierarchically in shape descriptions. When   click and hold the pen over the shaft of the OpenArrow, 
defining a new shape the components and properties are those   when you drag the pen, the entire OpenArrow will translate 
defined by Shape, and those defined by the components and      along with the movement of the arrow. The second editing be•
aliases section.                                               havior states that if you click and hold the pen over the head 


462                                                                                    KNOWLEDGE REPRESENTATION of the arrow, the head of the arrow will follow the motion of  3.1 Indicating Domain Definitions 
the pen, but the tail of the arrow will remain fixed and the   The compiler uses a list of domain shapes and shape groups 
entire OpenArrow will stretch like a rubber band (translat•    to confirm that each shape is properly defined and to speed 
ing, scaling, and rotating) to satisfy these two constraints and recognition by creating recognizers only for sub-shapes 
keep the OpenArrow as one whole shape. All of the edit•        needed by the domain. 
ing behaviors also change the pen's cursor as displayed to the 
sketcher, and display moving handles to the sketcher to let the 3.2 Defining Shapes 
sketcher know that she performing an editing command.          A domain shape is a shape that is meaningful in the do•
   The possible editing actions include wait, select, deselect, main. Geometric shapes usually occur in several domains and 
color, delete, translate, rotate, scale, resize, rubber-band,  are the building blocks of the domain shapes. For instance, 
show-handle, and set-cursor. To give an example:               in the domain of UML class diagrams, the domain shapes 
 (rubber-band shape-or-selection fixed-point move-point        (followed by their geometric shape component) are: general 
 [new-point])                                                  classes (represented by rectangles), interface classes (circles), 
translates, scales, and rotates the shape-or-selection so      interface associations (lines), dependency associations (open-
that the fixed-point remains in the same spot, but that the    headed arrows), aggregation associations (diamond-headed 
move-point translates to the new-point. If new-point is not    arrows), inheritance associations (triangle-headed arrows), 
specified, move-point translates according to the movement     information associations (dotted lines or dotted open arrows). 
of the pen.                                                      A shape definition includes primarily geometric informa•
   The possible triggers include: click, double-click, click-  tion, but can include other drawing information that may be 
hold, click-hold-drag, draw, draw-over, scribble-over, and     helpful to the recognition process, such as stroke order or 
encircle. Possible triggers also include any action listed     stroke direction. A shape definition is composed of seven 
above, to allow for "chain-reaction" editing.                  sections. All sections are optional except the components sec•
   Shape groups allow designers to define "chain-reaction"     tion. 
editing behaviors. For instance, the designer may want to 
                                                                 1. The description contains a textual description of the 
specify that when we move a rectangle, if there is an arrow 
                                                                    shape, e.g., "an arrow with a triangle-shaped head " 
head inside of this rectangle, the arrow should move with the 
rectangle.                                                       2. The is-a section specifies any class of abstract shapes 
                                                                    (Section 3.3) that the shape may be a part of. This is 
2.4 Predefined Display Methods                                      similar to the extends property in Java. All shapes extend 
                                                                    the abstract shape Shape. 
An important part of a sketching interface is controlling what 
the user sees after shapes are recognized. The designer can      3. The components section lists the components of the 
specify that the original strokes should remain, or instead that    shape. For example, the TriangleArrow in Figure 3 is 
a cleaned version of the strokes should be displayed. In the        built out of the OpenArrow from Figure 2 and a Line. 
cleaned version, the original strokes are fit to straight lines,    Components can be accessed hierarchically. 
clean curves, clean arcs, or a combination.                      4. The constraints section specifics relationships between 
   Another option is to display the ideal version of the strokes.   the components. For example, in the TriangleArrow in 
In this case, lines that are supposed to connect at their end       Figure 3, (coincident head3.pl headl.pl) specifies that 
points actually connect and lines that are supposed to be par•      an endpoint of head3 and an endpoint of head I are lo•
allel are actually shown as parallel. In the ideal version of the   cated at the same point. 
strokes, all of the noise from sketching is removed.                The constraints section can specify both hard con•
   It may be that we don't want to show any version of the          straints, such as the one listed above, and soft con•
strokes at all, but some other picture. In this case, we can ei•    straints, which are specified by the keyword soft. Hard 
ther place an image at a specified location, size, and rotation,    constraints are always satisfied in the shape, but soft con•
or we can create a picture built out of predefined shapes, such     straints may not be. Soft constraints can aid recognition 
as circles, lines, and rectangles.                                  by specifying relationships that usually occur. For in•
   The pre-defined display methods include: original-strokes,       stance, in Figure 3 the shaft of the arrow is commonly 
cleaned-strokes, ideal-strokes, circle, line, point, rectangle,     drawn before the head of the arrow, but the arrow should 
text, color, and image. Each method includes color as an op•        still be recognized even if this constraint is not satisfied. 
tional argument.                                                 5. The aliases section allows us to compute certain prop•
                                                                    erties and name them for use later. For instance, in Fig•
3 Specifying a Domain Description                                   ure 3, headl is defined and used in a constraint for sim•
A domain description contains a list of the domain shapes           plicity. Components specified in the aliases section can 
and shape groups, as well as definitions for each of them. De•      be accessed hierarchically. For instance, TriangleAr-
scriptions can be hierarchical and can refer to other shapes        row uses head and tail from the OpenArrow in Fig•
in the language. This section provides examples from the            ure 2. 
domain description sketch grammar of UML (Unified Mod•           6. An editing section specifies how the shape can be 
elling Language) class diagrams [Booch et al, 1998].                edited. Common editing commands involve movement 


KNOWLEDGE REPRESENTATION                                                                                              463      and deletion of the shape. Each editing behavior must    editing behaviors in each shape, we could create an abstract 
     specify a trigger and an action listed in Section 2.3.   shape which specifies these editing behaviors. 
     Shapes can be defined to be moved as a whole rather         An abstract shape is defined similarly to a regular shape, 
     than having to move individual lines. For instance, in   except it has a required section instead of a components sec•
     Figure 3, one editing behavior for the TriangleArrow     tion. Each shape that extends the abstract shape must define 
     indicates that if the user presses and holds the pen on  each variable listed in the required section, in its components 
     the shaft for a brief period, the pen will drag the entire or aliases section. 
     TriangleArrow when moved.                                   Figure 5 presents a diagram of the inheritance hierarchy for 
                                                              the abstract and non-abstract shapes in the UML class dia•
  7. A display section specifies what should be displayed on 
                                                              grams domain. In UML, UMLDependency Association, the 
     the screen when the shape is recognized. This section is 
                                                              UMLInheritanceAssociation, the UMLAggregationAsso-
     generally included only for domain shapes, not for ge•
                                                              ciation, the UMLInformationAssociation, and the Inter-
     ometric shapes. In the UMLInheritanceAssociation in 
                                                              faceAssociation are all links represented by arrows or lines 
     Figure 4, the arrow will be displayed using straight lines 
                                                              and all have the same editing behavior. Thus, we can create 
     for the arrow head and the original stroke for the shaft. 
                                                              the abstract shape UMLAssociation, which lists the editing 
                                                              behavior of these shapes. Figure 6 shows the abstract shape 
 (define shape TriangleArrow                                  description of the UMLAssociation. Notice that the required 
   (description "An arrow with a triangle-shaped head")       variables are used when defining editing behaviors. 
   (components 
    (OpenArrow oa) 
    (Line head3))                                              (define abstract-shape UMLAssociation 
  (aliases                                                       (is-a Shape) 
    (Line shaft oa.shaft)                                        (required 
    (Line headl oa.headl)                                          (Point head) 
    (Line head2 oa.head2)                                          (Point tail) 
    (Point head oa.head)                                           (Line shaft)) 
    (Point tail oa.tail))                                        (editing 
  (constraints                                                    ( (trigger (clickholddrag shaft)) 
    (coincident head3.pl headl.p2)                                  (action 
    (coincident head3.p2 head2.p2)                                    (translate this) 
    (soft draw-order shaft headl)                                    (set-cursor DRAG) 
    (soft draw-order shaft head2))                                   (show-handle MOVE tail head)))...)) 
  (editing 
   ( (trigger (clickholddrag shaft))                          Figure 6: The description for the abstract class UMLAssoci•
     (action                                                  ation. 
       (translate this) 
       (set-cursor DRAG) 
       (show-handle MOVE tail head)))...))                    3.4 Defining Shape Groups 
Figure 3: The description for an arrow with a triangle-shaped A shape group is a collection of domain shapes that are 
head.                                                         commonly found together in the domain. Defining shape 
                                                              groups provides two significant benefits. Shape groups can be 
(define shape UMLInheritanceAssociation                       used by the recognition system to provide top-down recogni•
  (is-a UMLGeneralAssociation)                                tion, and "chain-reaction" editing behaviors can be applied to 
  (components                                                 shape groups, allowing the movement of one shape to cause 
    (TriangleArrow arrow)) 
  (aliases                                                    the movement of another. 
    (Point head arrow.head)                                     In the domain of UML class diagrams, there are six le•
    (Point tail arrow.tail) 
    (Line shaft arrow.shaft))                                 gal shape groups that describe the visual relationship between 
  (display                                                    UML associations and UML classes. For example, one shape 
    (original_strokes arrow.shaft)                            group consists of an association combined with a general 
    (cleanedstrokes arrow.headl arrow.head2 arrow.head3)) 
                                                              class, such that the tail of the association is inside or near the 
Figure 4: The domain shape UML Inheritance Association is     general class shown in Figure 7 and described in Figure 8. A 
defined by the geometrical shape TriangleArrow from Fig•      shape group definition is similar to that of a shape definition. 
ure 3. 

3.3 Defining Abstract Shapes 
In the UMLInheritanceAssociation defined in Figure 4, the 
is-a section specifics that the UMLInheritanceAssociation                      i )—* 
is an extension of the abstract shape UMLGeneralAssocia-          Figure 7: An association attached to a class at its tail. 
tion. Abstract shapes have no concrete shape associated with    If a single shape in a sketch can be part of many instances 
them; they represent a class of shapes that have similar at•  of a shape group, then we place the key word multiple before 
tributes or editing behaviors. These attributes can be defined the component shape of the shape group. In UML Class Dia•
once in the abstract shape description rather than for each do• grams, for example, a single UMLAssociation can be part of 
main shape. For instance, in Figure 2 and Figure 3, notice that only one instance of a shape group, while a single UMLClass 
the OpenArrow and the TriangleArrow have identical edit•      can be part of many instances of UMLGenCIassGen Associ•
ing behaviors defined. Rather than repeatedly listing these   ation Tail. 


464                                                                                   KNOWLEDGE REPRESENTATION                              Figure 5: The inheritance diagram of UML Class Diagram shapes. 


 (define shape-group                                           (define constraint centered-in 
   UMLGenClassGenAssociationTail                                 (description "Tests if shapel is centered inside shape2") 
   (description "A general class attached to                     (components 
    the tail of a general association")                            (Shape si) 
   (is-a UMLAssociationAttachedTail)                               (Shape s2)) 
   (components                                                   (constraints 
     (multiple (GeneralClass ct))                                  (contains s2 si) 
     (GeneralAssociation r)))                                      (coincident s1.center s2.center))) 
   Figure 8: Description of the shape group from Figure 7.         Figure 10: Definition for the constraint centered-in. 

3.5 Defining Abstract Shape Groups                             from the domains of UML class diagrams, mechanical engi•
Abstract shape groups definitions allow the reuse of shared    neering diagrams, course of action diagrams, and letters of 
properties across multiple shape groups. The definition of a   the alphabet. Illustrative examples are given below. 
UMLAssociationAttachedTail in Figure 9 indicates that the      Polygon 
tail, but not the head, of the association is inside the class, 
                                                               A PolyLine (shown in Figure 11a), may contain a variable 
preventing us from having to redefine the constraints many 
                                                               number of line segments. A variable number of components 
times, and allows us to define one general editing behavior 
                                                               is specified by the key word vector and must specify the min•
for many shapes. An editing behavior for the UMLAssocia•
                                                               imum and maximum number of components. If the maxi•
tionAttachedTail indicates that whenever you move a UML-
                                                               mum number can be infinite, the variable n is listed. For in•
Class that is attached to the tail of a UMLAssociation, the 
                                                               stance the PolyLine must contain at least two lines, and each 
head of the UMLAssociation remains fixed in its original lo•
                                                               line must be connected with the previous. The definition of a 
cation, but the tail of the UMLAssociation remains attached 
                                                               Polygon easily follows from the definition of the PolyLine 
to the UMLCIass as it moves; the UMLAssociation acts like 
a rubber band (translating, scaling, and rotating) to satisfy 
these constraints. 

 (define abstract-shape-group 
   UMLAssociationAttachedTail 
   (required 
     (Association r) 
     (Class ct)) 
   (constraints 
     (contains ct r.tail)                                      Figure 11: (a)Poly Line (b) Dashed Open Arrow (c) Stick 
     (iconlains ct r.head)) 
   (editing                                                    Figure 
     (trigger (translate ct)) 
     (action (rubber-band r r.head r.tail)))) 
      Figure 9: Definition for an abstract shape group. 

3.6 Defining Constraints 
We believe the language contains sufficient constraints to de•
fine a broad range of domains. When an additional con•                 Figure 12: Shape Description of a Polygon. 
straint is needed, it can be defined using a macro facility. The Dashed Open Arrow 
sections of a sketch-constraint definition include description, A DashedOpenArrow (Figure lib) is made from a Ope-
components, and constraints.                                   nArrow, and a Dashedline, which in turn contains at least 
4 Testing                                                     two line segments. When given a third argument specifying 
4.1 Examples of Shapes Described in the                        a length, the constraint near states that two points are near to 
                                                              each other relative to a given length. 
      Language 
We have evaluated the language by showing that it can de•      Stick Figure 
scribe a wide variety of symbols from a number of different   The definition of a stick figure (Figure lie) shows how we 
domains. We have used it to describe over a hundred shapes    can create new components to help describe shapes. It creates 


KNOWLEDGE REPRESENTATION                                                                                             465 