 Session 18 Automatic Programming 
                                                HEURISTIC METHODS FOR 
                                 MECHANICALLY DERIVING INDUCTIVE ASSERTIONS 
                                                     Ben Hegbreitt 
                                          Bolt Beranek and Newman Inc. 
                                             Cambridge, Massachusetts 

                        ABSTRACT 

      Current methods for mechanical program                        Elspas, Green, Levitt, and Waldinger5 have 
verification require a complete predicate                      independently worked on this problem using 
specification on each loop. Because this is                    difference equations as an aid to specifying 
tedious and error-prone, producing a program                   assertions. Cooper6 has previously studied 
with complete, correct predicates is reasonably                the problem and observed that an inductive 
difficult and would be facilitated by machine                  assertion can be obtained by hand by construct­
assistance. This paper discusses heuristic                     ing the first few terms in the loop expansion, 
methods for mechanically deriving loop predi­                  which generally shows what the infinite union 
cates from their boundary conditions and for                   must be. 
mechanically completing partially specified 
loop predicates.                                                     Our method uses a different approach. To 
                                                               generate loop predicates where none are 
                      Introduction                             supplied, the output predicate is dragged 
                                                               backward through the program and modified when 
      Mechanical verification of program                       passing through program units, to produce 
                                                               trial loop predicates. Trial loop predicates 
correctness is desirable and possible.1 Given 
a program, a first-order axiotnatization of its                which are loop inconsistent are modified 
semantics, and predicates on the input, output,                according to various heuristics, to generate 
and each loop, verification of the output                      better trial predicates. Hence, it is also 
predicate is a mechanical process, (c.f. [2]                   possible to accept a programmer-supplied 
and [3] for recent surveys).                                   inductive assertion which gives the "essential" 
                                                               idea of some loop and mechanically fill in the 
      Input and output predicates are necessary                details to arrive at a complete, correct loop 
and natural for a programmer to supply.                        predicate. Many of the heuristics are domain 
However, completely specifying the predicates                  specific, this paper uses integers and integer 
on loops is tedious, error-prone, and redundant. arrays as the subject domain. 
It is tedious due to the large amount of 
stereotyped detail required. It is error-prone*                      The paper is divided into five sections. 
partly because of the tedium and partly because                Section 2 illustrates our approach with two 
the notation is less natural than that for                     simple examples. Section 3 discusses the 
procedural steps. It is redundant since the                    general method, domain-independent heuristics, 
predicates repeat information which is manifest                and heuristics specific to the integers. 
in the program. The purpose of this paper is                   Section 4 treats a number of complex examples 
to show that loop predicates can be derived                    to show how the heuristics are used and 
mechanically** and that partially specified                    exhibit their coupling. Section 5 discusses 
loop predicates can be completed mechanically.                 implementation and application of this method. 
                                                               Notation. Throughout, a simple flowchart 
*An example may lend some weight of experience.                language is used. The input predicate is 
                                                               denoted by o; the output predicate by w. 
In his thesis4, King presents nine programs 
submitted to the verifier; the most complex of                 Unprimed (primed) variables and predicates 
these (Example 9) has an incorrect loop predi­                 denote values and predicates on these values 
cate, i.e. the inductive assertion is too weak                 before (after) control flows through a set of 
to be consistent or to imply the desired output                flowchart boxes. The transformation due to a 
predicate. (Since the theorem prover rejected                  flowchart path A^i A£2-'*Ain is denoted by 
                                                               6{ii,i,,...£ ) . 
the loop predicate due to an inability to                         'l'2 
handle multiple quantification, the predicate 
error was overlooked.)                                                            Simple Examples 

**In one sense, this is trivial. All well-                           The flowchart of Figure 1 (taken from [1]) 
formed predicate expressions for each loop can                 computes the quotient Q and remainder R of 
be enumerated and proofs of correctness                        integer X divided by integer Y. $={X>0 A Y>0), 
dovetailed until one succeeds. If every valid                  *={X-QY+R A 0<R A R<Y>. * at the entrance 
theorem of the subject domain is provable, this                implies that at arc A0 the predicate 
will eventually verify the program; otherwise,                 P«-{X>0 A Y>0 A Q«0 A R-X} holds. To verify 
mechanical verification is not possible in                     the flowchart, it suffices to find a loop 
general. Such a procedure is, however,                         predicate P^ at arc A^ such that 
computationally intractible. 
                                                                          (El) 
                                                                                        A 6(1,2,3,1) - P 
tAlso at Harvard University, Cambridge, Mass.                             (E2)                                 1 
                                                                          (E3)      P2 A 6(1,4) 
                                                                     The standard means for generating a loop 
                                                               predicate is to use E3 and start with trial 
                                                               choice of Pt»{6(l,4) ■* *'}. Here, this gives 
                                                               P1-{R<Y •+ (X-QY+R A 0sR A R<Y) }. Converting 525 527                                                                           assertions mechanically and, therefore, should 
                                                                          expedite the task of proving programs correct. 
                          Conclusion 
                                                                                                ACKNOWLEDGEMENTS 
        Having shown that it is possible in some 
 number of cases to derive the inductive                                  The author would like to thank L. Peter 
 assertions by heuristics, we turn to the                                 Deutsch, carl Hewitt, Ralph London and Jay 
 application of this in a mechanical verifica­                            Spitzen for discussions concerning various 
 tion system.                                                             aspects of mechanical program verification. 
                                                                          Ralph London is the source for the observation 
 Implementation 
                                                                          of predicate incompleteness in the example 
                                                                          discussed in Section 1. 
        We have not yet implemented this technique 
 and the above examples are the result of hand 
                                                                          This research was supported by the Advanced 
 simulations. It appears that programming this 
                                                                          Research Projects Agency of the Department of 
 is reasonable, although by no means trivial. 
                                                                          Defense under Contract No. DAHC-71-C-0088. 
        Modifying the trial loop predicates and 
 searching the space of possible modifications                                                     REFERENCES 
 is the heart of this method. A problem-solving 
 language (e.g. [7], [8] or [9]) with facilities                          1. R.w. Floyd, "Assigning Meanings to 
 for pattern-matching, backtracking, and                                        Programs," in Proc. of a Symposium in 
 multiple environments is the preferred                                         Applied Mathematics, Vol. 19, ed. by J.T. 
 implementation tool. The need for pattern-                                     Schwartz, AMS, pp. 19-32 (1967) . 
 matching to invoke heuristics, and backtracking 
 to make retractible trials should be clear.                              2. B. Elspas, K.N. Levitt, R.J. Waldinger and 
 Experience with hand simulation suggests that                                  A. Waksman, "An Assessment of Techniques 
 additionally a breadth-first search capability                                 for Proving Programs Correct," Computing 
 (i.e. multiple environments) is required,                                      Surveys, Vol. 4, No. 2, pp. 97-147 (June 
 since an incorrect choice of heuristic often                                   1972). 
 leads not to a recognizable failure but rather                           3. R.L. London, "The Current State of Proving 
 to a non-convergent series of loop predicates                                  Programs Correct," Proc. ACM 25th Annual 
 - each inconsistent.                                                           Conference, pp. 39-46 (1972). 
        The theorem-proving required is within                            4. J. King, A Program Verifier, Doctoral 
 the range of contemporary domain-specific                                      Dissertation, Computer Science Dept., 
 theorem provers (e.g. [10]). This can also be                                  Carnegie-Mellon university, Pittsburgh, 
 programmed in the problem-solving language.                                    Pennsylvania (1969) . 
        The interface between heuristic predicate                         5. B. Elspas, M.W. Green, K.N. Levitt and 
 generation and theorem proving can be                                          R.J. Waldinger, "Research in Interactive 
 organized in two ways. A disjoint organization                                 Program-Proving Techniques," SRI, 
would separate the two and use the theorem                                      Menlo Park, California (May 1972) . 
 prover as an oracle returning one of four 
                                                                          6. D.C. Cooper, "Programs for Mechanical 
 replies for any formula submitted to it: 
                                                                                Program Verification," Machine Intelligence 
 valid, unsatisfiable, invalid-but-satisfiable,                                 £, American Elsevier, pp. 43-59 (1971). 
 or can't-tell (escape clause for undecidable 
 domains). A better organization is based on                              7. J.F. Bulifson, J.A. Derksen and R.J. 
 the observation that the heuristics used in                                    Waldinger, "QA4: A Procedural Calculus 
 trial predicate generation and in theorem                                      for Intuitive Reasoning," SRI, Technical 
 proving are often the same and that this can                                   Note 73 (November 1972). 
 be exploited by combining the two more 
 closely. Further, in seeking to validate an                              8. D.V. McDermott and G.J. Sussman, "The 
 E2 implication with some trial predicate, the                                  CONNIVER Reference Manual," MIT, A.I. Lab., 
 theorem prover may generate a number of                                        Memo No. 259 (May 1972). 
 clauses which are invalid but satisfiable; it                            9. C. Hewitt, "PLANNER: A Language for 
 is often useful to take these as new goals                                     Proving Theorems and Manipulating Models 
 and try them as additional conjuncts in the                                    in a Robot," Ph.D. Thesis, MIT, Department 
 next trial predicate (i.e. a variation on G2) .                                of Mathematics (January 1971). 
 Application                                                             10. L.P. Deutsch, "An Interactive Program 
                                                                                Verifier," Ph.D. Thesis, Department of 
        We do not believe that the proposed                                     Computer Science, University of California 
 techniques will be capable of generating all                                   Berkeley (forthcoming, June 1973) . 
 inductive assertions on a large, complex 
 program in a reasonable time scale. Rather, 
 we assume that a program submitted to a 
 verifier will have its loops tagged with 
 assertions of varying degrees of completeness: 
 some complete, some partial, and some untagged. 
 In general, interaction will be required in 
 developing correct assertions and proving 
 very difficult lemmas. It is desirable, 
 however, to do mechanically as much as 
 practical. The proposed technique allows 
 completing certain loop predicates and 
 generating certain inner predicates from outer 
 ones. This should suffice to fill in a 
 significant portion of the inductive 

                                                                    526 