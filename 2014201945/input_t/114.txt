                                   Probabilistically Survivable MASs * 

                            Sarit Kraus                         V.S. Subrahmanian and N. Cihan Tas 
                   Dept. of Computer Science                           Dept. of Computer Science 
                        Bar-Ilan University                              University of Maryland 
                     Ramat-Gan, 52900 Israel                            College Park, MD 20742 
                         sarit@cs.biu.ac.il                               (vs, etas }@cs. umd.edu 


                        Abstract                               theory describing the probability that a given deployment will 
                                                               survive. This probability reflects the best guarantee we have 
     Muhiagent systems (MAS) can "go down" for a               of the MAS surviving. Our model does not assume that node 
     large number of reasons, ranging from system mal•         failures are independent, though independence information 
     functions and power failures to malicious attacks.        can be easily added if so desired. The technical problem we 
     The placement of agents on nodes is called a de•          need to grapple with is that of finding a MAS-deployment of 
     ployment of the MAS. We develop a probabilis•             the agents having the highest probability of survival. As we 
     tic model of survivability of a deployed MAS and          do not make unrealistic independence assumptions, this prob•
     provide two algorithms to compute the probability         lem turns out to be intractable. As a consequence, heuristics 
     of survival of a deployed MAS. Our probabilistic          are required to find a deployment (even if it is sub-optimal). 
     model docs not make independence assumptions              We develop algorithms for the following tasks: 
     though such assumptions can be added if so de•
     sired. An optimal deployment of a MAS is one that           1. Given a MAS-deployment, how do we compute its prob•
     maximizes its survival probability. We provide a               ability of survival? 
     mathematical answerto this question, an algorithm           2. Find a MAS-deployment with the highest probability of 
     that computes an exact solution to this problem,               survival - this algorithm is infeasible to implement in 
     as well as several algorithms that quickly compute             practice due to the above mentioned complexity results. 
     approximate solutions to the problem. We have 
                                                                 3. We develop a suite of heuristic algorithms to find (sub-
     implemented our algorithms - our implementation 
                                                                    optimal) MAS-deployments. 
     demonstrates that computing deployments can be 
     done scalably.                                              We have conducted detailed experiments with our algo•
                                                               rithms - for space reasons, only some of them are described 
                                                               here. The experiments show that our heuristic algorithms can 
 1   Introduction                                              find deployments very fast. 
 As muhiagent systems (MASs) are increasing used for crit•
 ical applications, the ability of these MASs to survive intact 2  Preliminaries 
 when various external events occur (e.g. power failures, OS   Agents. The only assumptions we make about agents is that 
 crashes, etc.) becomes increasingly important. However, one   they provide one or more services. We further assume that 
 never knows when and if a system will crash or be compro•     all host computers on which agents are located have a fi•
mised, and hence, any model of MAS survivability must take     nite amount of memory resources, and that each (copy of 
this uncertainty into account.                                 an) agent a requires some amount of memory, denoted by 
   We provide for the first time, a formal model for reasoning mem(a). A multiagent application MAS is a finite set of 
about survivability of MASs which includes both a declar•      agents - we make the assumption that all agents in a multi-
ative theory of survivability, as well as implemented algo•    agent application are needed for it to function. 
rithms to compute optimal ways of deploying MASs across        Networks. A network is a triple (N, edges, mem) where 
a network.                                                     is a set of called nodes, edges specifies which 
   A MAS-deployment specifies a placement of agents on         nodes can communicate with which other nodes, and mem : 

 various network nodes. Based on probabilistic information              specifies the total memory1 available at node n for 
about the survivability of a given node, we develop a formal   use by agents situated at n. A network is fully connected iff 
                                                               edges =  
   "The first tuthor is also affiliated with UMIACS. This work was 
supported in part by the Army Research Lab under contract DAAL     Note that the symbol mem is used to both denote the memory 
0197K0135, the CTA on Advanced Decision Architectures, by ARO  requirements of an agent, as well as the memory available at a node. 

contract DAAD190010484, by NS1J grant 11S0222914 and an NSF    It is easy to determine the intended meaning of this expression from 
ITR award 0205 489.                                            context. 


MULTIAGENT SYSTEMS                                                                                                 789  Definition 2.1 Suppose MAS is a multiagent application and               increased by developing several versions of special modules 
            , edges, mem) is a network. A deployment for MAS             and incorporating them into a fault-tolerant system [Gutjahr, 
 on Ne is a mapping , : specifying which agents                           1998]. However, these works (i) make unnecessary or unwar•
 are located at a given node. (As usual if X is a set, is the             ranted independence assumptions, (ii) provide only a measure 
 power set ofX). u must satisfy the following condition:                 of expected survivability rather than guaranteed survivability, 
                                               This condition says       (iii) do not consider replication. 
       that every agent must be deployed somewhere. 
                   mem mem(a). This condition                            4    A Probabilistic Model of Survivability 
       says that the agents deployed at a node cannot use more 
                                                                         Multiagent applications can "go down            because nodes on 
       memory than that node makes available.                                                                         11
                                                                         which agents are located can crash. Alternatively, agents are 
 Intuitively, says that agents ai.a2 are de-                             on a mobile node (e.g. a vehicle) may wander beyond com•
 ployed at node n1.                                                      munications range, thus dropping out of the network. 

 Example2.1 Supposed/ = {n1,n2,n3,n4 }and MAS =                          Definition 4.1 A disconnect probability function for a net•
 {a.b.Cyd}. An example deployment is given by: — work edges, mem) is a mapping dp : where 
                                                     and ' v ~           C[0,1] is the set of all closed subintervals of'[0,1]. 
 {d}. This example will be used throughout this paper. 
                                                                         Intuitively, if dp = [0.2,0.3], then this says that there is 
 3    Related Work                                                       a 20 - 30% probability that node N will get disconnected 
                                                                         from the network. Note that this model supports the situa•
 To our knowledge, there are no probabilistic models of sur•             tion where we do not know the probability of node n get•

 vivability of a MAS. However, there are many works that are             ting disconnected - in this case, we can set dp(Ar) = [0.1]. 
 in related areas.                                                       Likewise, if we know that a node will get disconnected with 
    [Shehory et a/., 1998] use agent-cloning and agent-                  80% probability with margin of error, then we can set 
 merging techniques to mitigate agent over-loading and pro•              dp(n) = [0.77,0.83]. One possibility to compute dp in a spe•
 mote system load balancing. Fan [Fan, 2001] proposes a BDI              cific setting is by collecting statistical data on the past failures 
 mechanism to formally model agent cloning to balance agent              of each node. This would give us both a mean probability of 
 workload.                                                               failure for a given node as well as a standard deviation which 
    [Fedoruk and Deters, 2002] propose transparent agent                 would jointly result in a probability interval. In other applica•
 replication technique - though an agentis represented by mul•           tions (e.g. where statistics are not available) expert opinions 
 tiple copies, this is an internal detail hidden from other agents.      can be used. 
 Several other frameworks also support this kind of agent fault             Given a network (A/*, edges, mem) and a disconnect prob•
 tolerance [Mishra,2001].                                                ability function dp, there is a space of possible networks that 
    [Marin et ex/., 2001 ] develop adaptive fault tolerance tech•        may arise in the future. 
 niques for MASs. They use simulations to assess migration 
                                                                         Definition 4.2 Suppose [J\f, edges, mem) is a network and 
 and replication costs. However, [Marin et ai          2001] con•
                                                     %                                Then , edges', mem) is a possible future net•
 cludes by saying that they do not address the questions of 
                                                                         work where edges' = edges and 
 which of the agents to replicate, how many replicas should be 
 made, where those replicas should be allocated. These ques•
 tions are addressed in the currentpaper, but we do not propose          We use edges, mem) to denote the set of 
 a mechanism to synchronize agent replications.                          all possible future networks associated with a network 
    [Kumar £/ a/., 2000] focus on the problem of broker agents           (N, edges, mem) and a disconnect probability function dp. 
 that are inaccessible due to system failures. They use the the•         Note that we can infer probabilities of possible future net•
 ory of teamwork to specify robust brokered architectures that           works from such disconnect probabilities on nodes. Even 
 can recover from broker failure. We, on the other hand, con•            though many future networks are possible at a given time 
 sider the possible failure of any agent in the multi-agent sys•         t only one of them will in fact occur at time t So at 
 tems.                                                                   time , edges, mem) represents the space of pos•
    The problem of network reliability has been studied exten•           sible network configurations. Given a network . ~ 
 sively— [Gartner* 1999] provide an excellent survey. In this                 ) edges', mem) we write '. Fur•
 paper we build on top of these studies and assume, as dis•              thermore, since in this paper we do not discuss the failure 
 cussed below, that there is a disconnect probability function           of edges, for space reasons, we will omit them from the net•
 for a network specifying the reliability of each node of the            works in the rest of the paper. 
 network.                                                                   Suppose prob denotes the probability of a possible 
   The problem of fault-tolerant software systems has some               future network Ne. For any we can write the con•
 similarities to our agent survivability problem. An exten•              straint: 
 sive study was performed to solve this problem using the X-
 Version Problem (N VP) approach. The N VP is denned as the 
 "independent generation of functionally equivalent                      This constraint says that the sum of the probabilities of all 
 programs from the same initial specification** [Lyu and He,             future networks in which node N survives must be between 
 1993]. In this approach, the reliability of a software system is                                              We take all such constraints 


790                                                                                                           MULTIAGENT SYSTEMS   (one for each node) and add a constraint which says that the            The above result says that when trying to find an optimal mul•
  only possible future networks are those in mem). tiagent deployment /x, we must ensure that no agent is located 
  Last, but not least, w e know that the probability of each future       in a set of nodes that is a strict subset of the set of nodes that 
  network is at least 0. This gives us:                                   another agent is located in. As we shall see, this property al•
                                                                          lows us to prune our search a fair amount. Before describing 

  For any Nef mem), prob                                                  our algorithm, we need to introduce some notation, 
     If mem), then CONS(dp,Ne) denotes the set 
                                                                                An agent a is relevant w.r.t. and if there is no 
  of all such constraints.2 We can use CON S{dp. Ne) to de•                     other agent which is deployed at a strict subset of nodes 
  termine Lhe survival probability of a given deployment.                       at which a is deployed, ra denotes the set of 
  Definition 4.3 Givena network Ne, a disconnect probability                    relevant agents w.r.t. . Ne. 
 function dp, and a deployment fi, we say that the probability                  The necessary nodes of Ne w.r.t is — 
  ofsurvival of // is given by the following linear program:                                                                      . Nodes in 

  minimize is a deployment Prob  which no relevant agents are deployed are not important. 
  subject to                                                              The following theorem says that survivability is unaffected if 
                                                                          we get rid of unnecessary nodes. 
  The solutions of CONS(dp.Ne) are possible probabilities 
  of possible future networks arising. Clearly, any of these              Theorem 5.1 Suppose MAS is a multiagent application, 
  probability assignments is possible. The objective function                            mem) is a network, dp is a disconnect proba•
  above adds the probabilities of all possible future networks            bility function and ft is a feasible multiagent application de•
  where at least one copy of each agent in MAS survives. This             ployment for MAS on Ne. mem) where 
  expression must be minimized because different solutions of                                          is the restriction of to . then 
  CONS(dp.Ne) assign different values to this sum - as any                surv(/i) — surv(/i'). 
  of these solutions is possible, the only guarantee we can give 
                                                                          Proof Sketch. It is easy to see that it is enough to show the 
  about survivability of // is that it exceeds the minimal such 
                                                                          claim for the case that only one node is removed from , 
  value. 
                                                                          when constructing Ne'. Without loss of generality, let us as•
  Computing Optimal Deployment (COD) Problem. Given 
                                                                          sume that, . We make the following observa•
  a network AY, and a disconnect probability function dp, 
                                                                          tions: 
  find a deployment whose probability of survival is maxi•
  mal.                                                                          It can be shown that, is feasible w.r.t iff 
     This is the key problem that we will solve.                                              is also feasible w.r.t  
                                                                                Let consists of n equations, 
  5    Computing the Survival Probability of a                                  one for each node. C()NS(dp.Ne') docs not include 
       Deployment                                                               an equation for N\ and thus includes n - 1 equations. 
                                                                                We use prob (resp. prob ) to denote the probability 
  A naive way to find the probability of survival of a given /i is 
                                                                                function in CONS(dp,Ne) (resp. CONS(dp,Ne')). 
  to solve the linear program of Definition 4.3 using classical 
                                                                                Consider the equations w.r.t. For 
  linear programming algorithms [Hillerand Licberman, 1974; 
                                                                                both Afeand iW, both equations have the same left side, 
  Karmarkar, 1984]. However, the size of the linear program 
                                                                                viz. . The right side of the relevant equa•
  involved in enormous. Our Compute Deployment Probability 
                                                                                tion in consists of elements of 
  (CDP) algorithm will avoid this problem. CDP uses a func•
                                                                                the form prob In 
  tion called hoc which takes an agent a, a network (A^, mem), 
                                                                                CONS(dp,Ne') the corresponding equation consists 
  and a deployment /i as input, and returns the set of all nodes 
                                                                                of elements of the form prob'  
           such that as output. One way of pruning 
                                                                                                      . Thus for each element in an equa•
  the search is to use the following results. 
                                                                                tion of CONS{dp: Ne') of the form prob' there 
  Proposition 5.1 Suppose MAS is a multiagent application                       are exactly two terms in the corresponding equation in 
  and Ne is a network and suppose there is at least one multi-                  CONS{dp:Ne): one of the form prob(N'') and the 
  agent application deployment for MAS on Ne. Further sup•                      other of the form prob  
 pose that for all agents a, mem . Then there exists an                         Similarly, if the minimization expression with respect to 
  optimal multiagent deployment (i.e. /i has maximal prob•
                                                                                Ner is of length (i.e. number of terms) k, then the min•
  ability of survival) such that for all agents aj ,32, the set of              imization expression with respect to Ne is 2A;. In par•
  locations of agent ai according to is not a strict subset of                  ticular, for each prob^Af") there are two terms in the 
  the set of locations of agent a   according to  
                                  2                                             minimization expression of the form probXA/7') and 
                                                                                prob'  

     2It is important to note that if, for example, we know that the dis•
                                                                          We are now ready to prove our claim. Suppose the min•
  connect probabilities of ni and n2 are independent, then we can ex•
  pand CONS(dpyNc) to include the constraint prob                         imization problem is solved with respect to Ne, We set 
                        , For space reasons, we do not go into this in    prob' = prob + prob . It is easy 
  further detail.                                                         to see that based on our observations that CONS(dp<Nef) 


MULTIAGENT SYSTEMS                                                                                                                    791    will be satisfied and the values will minimize the relevant ex•         be a deployment w.r.t. a possible future network. This intu•
   pression.                                                               ition leads to the following algorithm CDP. 
     Suppose the minimization problem is solved with re•                   Algorithm 5.1 (CDP(ATe,dp,MAS, ) 
   spect to Ne'. In this case, we add the following equa•
                                                                              lnput:(l)A network Nc = (,V, mem) 
   tions to CONS(dp,Ne): (i) prob'i = prob + 
                                                                                    (2) a disconnect probability function dp 
   prob (ii) We replace each expression in 
                                                                                    (3) a multiagent application MAS 
   the minimization expression of the form prob(A/*") -f                            (4) a feasible deployment ; and 
   prob(A^;/ U {Ni}) by prob' It is easy to see that                          Output; the survivability of  
   the minimization expression is identical to the one associated 
   with Ne' and all the constraints of CONS{dp,Nt) except                    1. 

  the first one are identical to those of CONS(dp,Nef) and                   2. 
  are satisfied. Hence, it is left to show that the constraint asso•         3. 
  ciated with N\ is satisfied. 
     This constraint is of the form: 1 - dp(JVi) = 


                                                                             4. Return the result of the following linear program. 
                                                                                minimize 
                                                                                subject to Cons(dp,Nc     ). 
     The net impact of this theorem is that only necessary nodes                                          f
  need to be considered. We demonstrate this using Exam-                   CDP works by first focusing on the necessary nodes. Then, 
  pie 2.1.                                                                 for each agent a MAS', all nodes where that agent is lo•
                                                                           cated are identified. It then computes all hitting sets of these 
  Example5.1 Consider the deployment of Example 2.1. 
                                                                           nodes. For any possible future network it checks whether one 
  Agent d is deployed at nodes {ri2, n3, n4} and c is deployed 
                                                                           of the hitting sets is a subset of the nodes of the network. It is 
  at nodes {ri2) n3}. Clearly, c is deployed at a strict subset of 
                                                                           easy to see that CDP is exponential in the number of the nec•
  nodes at which d is deployed. In order for the deployment to 
                                                                           essary nodes. The following example illustrates the working 
  survive in a given possible future networkone of the nodes on 
                                                                           of this algorithm. 
  which c is located, n<i or n$ must stay connected. But then 

  d will also be deployed in the new network. However, if n4 

  stays connected in a future network, but neither ri2 nor n3 
  stay connected, the deployment will not survive. Thus, based 
  on theorem 5.1 when computing the survivability of the de-
  ployment, there is no need to consider d and n^. 

  We are now ready to use the above theorem to formulate our 
  algorithm CDP to compute probability of survival of a de•
  ployment. Our CDP algorithm will use the well known no•
  tion of a hitting set. 

  Definition 5.1 Suppose is a set of sets. A 
  hitting set for S is any set such that: (1) for 
  all there is no strict subset 
         h satisfying condition (1) above. HitSet(S) denotes the 
  set of all hitting sets ofS. 
  HitSet can be implemented in any number of standard ways 
  prevalent in the literature. We will focus on the following 
  hitting sets with respect to a given network. 

  Definition 5.2 Suppose MAS is a multiagent application, 
  Ne = (ff, mem) is a network and, is a feasible multiagent 
  application deployment for MAS on Nt. The set of hitting 
  sets with respect to MAS, Ne and is hs = 
  HltSet(  

  Intuitively, the hitting sets above describe minimal sets of 
  nodes that must be present in a possible future network in              Example 5.3 In example 5.2, there were no constraints on 
  order for the multiagent application to survive. We will use             the dependencies of the disconnect probabilities of the nodes. 
  hitting sets to determine whether a deployment w.r.t. Ne can            Suppose we know, in addition, that the probability that both 


792                                                                                                           MULTIAGENT SYSTEMS  nodes n\, n^ get disconnected is 0.05, i.e. dp =                                  (3) a multiagent application, MAS 
 0.05. In this case we should consider all possible future net-                    (4) a deployment,  
 works whose set of nodes is not a superset of Those                               (5) best deployment found so far, 
                                                                                       best (global variable) 
 sets are M2 and N8 of example 5.2. Thus, the new constraint 
                                                                                   (6) best survivability value found thus far, 
 isp2 +P8 =0.05. 
                                                                                       best   (global variable) 
   If we run the linear program ofexample 5.2 again with the                               val
                                                                             Output.  The procedure changes the global variables 
 additional constraint, the results are as follows: />    = 0.05, 
                                                        4                              best and best  
 PQ = 0.05, ;>7 = 0.65, pi = 0,2,p<i = 0.05, p5 = pa = P& = 
 0 which yields the minimum value of 0.75 for the objective 
function. 

 6    Computing Optimal Deployments 
 We are now ready to develop algorithms to find an optimal 
 multiagent deployment. We first present the COD algorithm 
 to compute optimal deployments. We also prcsenttwo heuris•
 tic algorithms, HADl and HAD2, which may find subopti-
 mal deployments (but do so very fast). 

 6.1    The COD Algorithm 
 One may wonder if COD can be solved via a classical prob•
 lem such as facility location problem (FLP)IShmoys et ai, 
                                                                          We are now ready to present the COD algorithm. 
 1997]. In FLP, there are a set of facility locations and a set of 
 consumers. The task is to determine which facilities should              Algorithm 6.2 COD(7Ve,dp,MASj 
 be used and which customers should be served from which                     Input:  (I) A network Ne = (A/\ mem) 
 facility so as to minimize some objective function (e.g. sum                        (2) a disconnect probability function dp, 
 of travel times for customers to their assigned facility). One                      (3) a multiagent application MAS 
 may think that we can directly use FLP algorithms to solve                  Output: an optimal deployment 
 COD - unfortunately, this is not true. 
                                                                            J. 
 Theorem 6.1 The problem of checking if a MAD-deployment                    2. 
 p is optimal is NP        -hard. 
                         NP                                                 3. 
 This theorem says that even if we have a polynomial or•                    A. 
 acle to solve NP-complete problems, checking if a MAD-
 deployment is optimal is still NP-hard I In fact, it is easy             The correctness of COD depends on the correctness of 
 to reduce the facility location problem to that of finding an            bounding the search in step 2 of algorithm 6.1. We present 
 optimal deployment. Even if we have an oracle for facility               the correctness result below. 

 location, the MAD-deployment problem is still NTP-hard.                  Theorem 6.2 Suppose MAS is a multiagent application, 
   Computing an optimal MAD-deployment involves two                       Ne = (A/\ mem) is a network and dp is a disconnect proba•
 sources of complexity. The first is the exponential space of             bility function. Then COD(7Ve, dp. MAS) returns an opti•
 possible deployments. The second is that even if we have a               mal deployment of M AS on Ne. 
 given deployment, finding its probability of survival is expo•
                                                                             The astute reader may notice that CDP is computed for 
nential. 
                                                                          every placement. Many of these placements are very similar 
   Thus, to solve COD exactly, we do a state space search 
                                                                          to each other. Hence, one may wonder whether it is possible 
 where the initial state places all agents in a multiagent appli•
                                                                          to use the results of computing CDP applied to a previous 
 cation MAS on all nodes of the network Ne. If this placement 
                                                                          placement to a placement that is very similar to the previous 
 is a deployment, then we are done. Otherwise, there are many 
                                                                          placement. The two propositions below show that this can be 
 ways of removing agents from nodes and each such way leads 
                                                                          done. 
 to a possible deployment. The value of a state is the surviv•
 ability of the state, which can be computed using the CDP                Proposition 6.1 Suppose MAS is a multiagent application, 
 algorithm. As soon as a deployment is found, we can bound                Ne = (JV/*, mem) is a network and dp is a disconnect proba•
 the search using the value of that deployment. The reason                bility function. Suppose the placement was obtained from 
 is that given any state in the search, all states obtained from          the placement fi in step2(b)iA of algorithm 6.1 and suppose 
that state by removing one or more agent has a lower surviv•              Ne' = [JsP, mem), such that N* = nn(7Ve, . Then the 
 ability than the original state. Before presenting the COD               set of hitting sets with respect to and Ne' is a subset of 
 algorithm, we first present the SEARCH routine used by it.               the set of hitting sets with respect to and Ne. That is, 
                                                                          hs  
 Algorithm 6.1 SEARCH  
   lnput:(I)A network Ne == (, , mem)                                     The following example demonstrate a situation where 
          (2) a disconnect probability function, dp                       hs  


 MULTIAGENT SYSTEMS                                                                                                                    793 