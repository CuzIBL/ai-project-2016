              Relational Knowledge with Predictive State Representations

                    David Wingate, Vishal Soni, Britton Wolfe and Satinder Singh
                                   Computer Science and Engineering
                             University of Michigan, Ann Arbor, MI 48109
                             {wingated,soniv,bdwolfe,baveja}@umich.edu


                    Abstract                          by relational representations. Our extensions allow PSRs to
                                                      deal with structured relational domains, and entail three natu-
    Most work on Predictive Representations of State  ral beneﬁts. First, we are able to express policies for a family
    (PSRs) has focused on learning and planning in un- of domains in a way that is independent of the size of the state
    structured domains (for example, those represented space (for example, in a blocks world domain the description
    by ﬂat POMDPs). This paper extends PSRs to rep-   of a policy would be independent of the number of blocks).
    resent relational knowledge about domains, so that Second, we can express abstract knowledge by ignoring irrel-
    they can use policies that generalize across differ- evant properties of observations (in a blocks world, the color
    ent tasks, capture knowledge that ignores irrele- of a block may not impact how it can be manipulated), which
    vant attributes of objects, and represent policies in allows us to generalize across objects. Third, we can param-
    a way that is independent of the size of the state eterize policies so that they generalize over multiple tasks (in
    space. Using a blocks world domain, we show how   a blocks world, the policy for stacking block a on block b
    generalized predictions about the future can com- should be similar to stacking block c on block d).
    pactly capture relations between objects, which in  To accomplish this, we broaden the language that PSRs
    turn can be used to naturally specify relational-style use to represent knowledge. PSRs represent knowledge as
    options and policies. Because our representation is action-conditional predictions about the future, which is for-
    expressed solely in terms of actions and observa- mally captured by the notion of a test. We generalize these
    tions, it has extensive semantics which are statistics tests to include multi-attribute observations, and deﬁne two
    about observable quantities.                      new types of tests, called “set tests” and “indexical tests.” We
                                                      show how policies and options [Precup et al., 1998] can be
1  Introduction                                       speciﬁed in terms of mappings from these generalized tests
Models of dynamical systems that use predictive representa- to actions, which allows the policies and options to general-
tions of state replace the traditional notion of state (which is ize over whatever the tests generalize over. Finally, we show
usually a latent, unobservable quantity) by a set of statistics how a nonlinear PSR can be naturally speciﬁed with these
about the future. A number of results have been obtained generalized tests. Our extensions to PSRs maintain a key fea-
about these predictive state representations (or PSRs). In the ture of PSRs, which is that all knowledge, including relational
case of discrete observations, for example, PSRs [Littman knowledge, has extensive semantics based on statistics about
et al., 2002] have been shown to be just as accurate, expres- observable quantities. Furthermore, as we will show below,
sive and compact as unstructured partially observable Markov the form of our extensions will allow relational knowledge
decision processes (POMDPs). In the case of continuous ob- to be maintained and computed efﬁciently. In summary, this
servations and linear dynamics, the Predictive Linear Gaus- paper is about advancing the expressiveness of PSRs and ex-
sian model [Rudary et al., 2005] is just as expressive and tending them to capture relational knowledge. We do not ad-
more compact than the celebrated Kalman ﬁlter. Predictive dress relational learning or planning.
representations have shown to be good bases for generaliza- 2 Background and Motivation
tion [Rafols et al., 2005], and can be learned directly from
an agent’s experience trajectories by a number of different The key idea of a PSR is to represent state as a set of tests,
algorithms [Wiewiora, 2005; McCracken & Bowling, 2006; which represent possible future observations given possible
James & Singh, 2004]. To date, most work on PSRs has fo- future actions. A PSR maintains a set of core tests, the pre-
cused on state tracking and parameter estimation in ﬂat, un- dictions of which are state in any history, and which allow
structured worlds such as general POMDPs and linear dy- it to make correct predictions about any sequence of future
namical systems.                                      events.
  We extend PSRs in a different direction. Our main contri- In a controlled, discrete, dynamical system (for example,
butions are several extensions to the current state-of-the-art a POMDP), at each time step i, the agent executes an action
of PSRs that allow the sort of generalization that is captured ai ∈Aand receives an observation oi ∈O(we occasionally

                                                IJCAI-07
                                                  2035use multi-attribute observations, which are tuples denoted by 2.2 Structured Questions
angle brackets).                                      In order to exploit relational structure in domains such as the
  A history is a sequence of alternating actions and obser- blocks world, we must be able to ask questions about the fu-
      a o a o  ···a o
vations 1 1 2 2   m  m describing an agent’s experience ture that s-tests cannot pose. These questions will motivate
               m
through timestep .Ans-test  (or “sequence test,” which our extensions to PSRs, and will allow us to accomplish our
                                  a1o1a2o2 ···anon
we will also just call a “test”), denoted         ,   goals of generalization across domains, generalization across
describes a possible sequence of future actions and obser- tasks, and generalization across objects. Here are some ex-
vations (note the distinction between superscripts and sub- amples:
scripts). A test succeeds if the observations of the test are
                                                      • “What is the probability that if I move my eye down, I
obtained, given that the test’s actions are taken. A predic-
                 1 1 2 2    n n                         will not see block b?” This negative question cannot be
tion for a test t = a o a o ···a o starting in history h is
                                                        answered with an s-test because they are deﬁned in terms
the probability that t will succeed when its actions are exe-
                                                        of things that we do see, not things that we do not see.
cuted immediately following h. Formally, we deﬁne the pre-
                                                        However, we can represent “not block b” with the set of
diction for a test from history h of length m to be p(t|h)=
            1           2              n                all observations except b. This motivates “set tests,” which
Pr(om+1  = o ,om+2  =  o , ···,om+n = o |h, am+1 =
 1              n                                       aggregate multiple observations.
a , ···,am+n = a ). For ease of notation, we will use the
following shorthand: for a set of tests T = {t1,t2, ···tn}, • “What is the probability of seeing a red block on top of a
                                 T
p(T |h)=[p(t1|h),p(t2|h), ···p(tn|h)] is a column vector blue block?” This type of question motivates an ability to
of predictions for the tests in T from a history h.     ignore irrelevant attributes of observations, which allows
  In a PSR, state is represented by a set of predictions about us to deal with objects in terms of their attributes, and not
core tests. The predictions of these core tests comprise a suf- their identities. Again, this motivates set tests.
ﬁcient statistic for history, which can be used in two ways. • “What is the probability of seeing one block, moving up,
First, they can be used to compute the prediction of an arbi- and seeing a block that has the same (but unspeciﬁed)
trary test [Littman et al., 2002]. Second, they can be used to color?” In this case, color is acting as a variable, which
maintain state, as follows. Given a set of core tests Q, their must have the same value for both blocks. This question
predictions p(Q|h) (which constitute state), an action a and motivates an ability to refer to previous observations, and
an observation o, the updated prediction for a core test qi ∈ Q is the inspiration for “indexical tests.”
is given by
                                                      Asking (and answering) these sorts of questions helps us to
                          p(aoqi|h)
               p(qi|hao)=          .                  capture knowledge of structure in a domain, but requires gen-
                           p(ao|h)                    eralizing the language of s-tests. One possibility is to allow
This means that to maintain state, we only need to compute tests to contain arbitrary questions, represented by arbitrary
the predictions of the one step tests (ao) and the one-step ex- functions of observations and action. However, the answers
                                                      (or predictions) of such arbitrary tests may not be efﬁciently
tensions (aoqi) to the core tests as a function of p(Q|h).
                                                      computable. We seek a simpler way: we will show that our
                                                      generalized tests provide the needed capability for capturing
2.1  An Example: Blocks World                         relational knowledge, and are computationally efﬁcient.
Blocks world is a structured domain typical of relational set-
tings. Even in this simple world, there are many types of 3 Generalizing the Language of Tests
structure that s-test PSRs cannot leverage because the tests
they use are not expressive enough.                   This section discusses two generalizations of standard s-tests.
  We deﬁne a partially observable blocks world, in which the We will ﬁrst deﬁne set tests, in which we replace a single pos-
agent has an eye that can focus on different places (viewing sible observation with a set of acceptable observations, and
the world from the side). The domain is like a grid world, will then discuss indexical and complemented indexical tests.
with discrete positions; for a given position, the observation 3.1 Set Tests
is either a block, the Table, or nothing (represented by φ).
For most of the paper, we will assume that each block has Standard s-tests can only ask about one observation at each
a unique observation (a number), but we will occasionally timestep, but to ask negative tests and to ignore irrelevant at-
consider versions where each block yields a multi-attribute tributes we want to ask about arbitrary sets of observations.
observation. In these cases, the blocks will have a color, a We accomplish this with set tests.
number, and a “marked” bit (explained in Section 5.3).  Suppose we have two tests t1 and t2, both of length m, that
  Actions are U (move the eye up), D (move the eye down), differ in a only a single observation. We could ask, “What
                                                                       t    t
aφ (stay still) and find(a) (saccade to block a). The is the probability of 1 or 2?” Because only one of the tests
move curr(b) action moves whatever block the eye is look- could succeed from a given history, the answer is p(t1|h)+
ing at onto block b (both must be clear; b may be the Table), p(t2|h). Set tests generalize this idea by replacing a single
and the eye stays where it was. Since we do not specify pre- observation with an arbitrary set of observations. Deﬁne a set
                                                                   Ok ⊆O         σk ∈ Ok      j
and postconditions for actions, we assume that if the agent of observations , and let j  be the -th member
executes an invalid action, it fails and the state is unchanged. of Ok. Deﬁne a test t which replaces the k-th observation ok
The eye can be at most one space above any given stack. with the set Ok: t = a1o1 ···akOk ···anon. This test can be

                                                IJCAI-07
                                                  2036                 k
viewed as a set of |O | tests (individually denoted tj), where special efﬁciencies for our generalized tests in the case of lin-
                                    k
           k      k                |O |               ear PSRs, which allow the predictions of the generalized tests
tj replaces O with σ . Then p(t|h)=    p(tj|h).
                  j                j=1                to be computed in time that is independent of the “complex-
  There is considerable ﬂexibility in deﬁning these sets of
                                                      ity” of the test. Before explaining further, we will ﬁrst review
observations. To ask about red objects, we construct a set
                                                      linear PSRs.
of all observations with the attribute “red.” We are also not
                                                        In a linear PSR, for every s-test t, there is a weight vector
limited to replacing a single observation with a set; any (or |Q|
                                                      mt ∈ R    independent of history h such that the prediction
all) observations could be replaced. If we replace multiple p(t|h)=mT p(Q|h)  h
observations, the resulting test includes all combinations of   t       for all . This means that updating the
                                       1     1  1     prediction of a single core test qi ∈ Q can be done efﬁciently
the elements of those sets. For example, if O = {σ1,σ2}
     2     2  2             1  1 2 2                  in closed-form. From history h, after taking action a and see-
and O =  {σ1,σ2}, the test t = a O a O “expands” to in-
                       1 1  2 2  1 1 2 2   1 1 2 2    ing observation o:
clude four primitive tests: a σ1a σ1, a σ1a σ2, a σ2a σ1,
    1  1 2 2                                                                           T
and a σ2a σ2, and the prediction of t is the sum of their pre-            p(aoq |h)  m    p(Q|h)
                                                              p(q |hao)=       i   =   aoqi
dictions.                                                        i                      T
                                                                          p(ao|h)     maop(Q|h)
  Because the systems we consider have a ﬁnite set of obser-
vations, the complement of an observation is well deﬁned. To We only need to know mao, which are the weights for the
                       k        k                                         m
ask negative tests, we let ¬o = O\{o }, which is the set of one-step tests, and the aoqi , which are the weights for the
all observations except ok.                           one-step extensions.
                                                        An important computational aspect of set tests is the
3.2  Indexical Tests                                  fact that their predictions can also be computed with lin-
                                                      ear operations. In particular, for any set test t, there is
With a set test we can ask, “What is the probability of seeing                              T
                                                      a weight vector mt such that p(t|h)=mt  p(Q|h). Let
a red block on top of another red block?”, but a different kind 1 1 k k    n n         k
                                                      t = a o  ···a O  ···a o , where O is a set of observa-
of test is needed to ask “What is the probability of seeing
                                                      tions. Then it is easy to show that
two blocks on top of each other which have the same (but                                    
                                                         T     T
unspeciﬁed) color?”                                    mt  = manon Man−1on−1 ···   σk∈Ok Makσk ···Ma1o1
  We call these tests indexical tests. In an indexical test, we                  |Q|×|Q|   T
                         k               k            where the i-th row of Mao ∈ R    is m   . In the case
replace a single observation o with a variable X , and then                                aoqi
                             of                       that multiple observations are replaced with sets, we compute
we replace some later observation with the same variable,                                        M
as in t = a1o1 ···akXk ···af Xk ···anon. Of course, multi- the weight vector by replacing the corresponding ao with
ple observations can be replaced, and indexical variables can the appropriate sum.
                                                        The prediction for an indexical test is also linear. Let t =
be reused many times.                                 a1o1 ···akXk ···af Xk ···anon
  By default, the variable Xk will “match” any observa-                          . Then:
                                                         T               T
tion from O, but we can restrict it to match a subset of mt =          manon ···Makσk ···Maf σk ···Ma1o1 .
                                          k
observations. In either case, we deﬁne dom(X ) ⊆O            σk∈dom(Xk)
to be the set of acceptable observations for Xk.For
multi-attribute observations, Xk is a vector of variables In the case of multiple, reused or complemented indexicals,
  k       k T                                         the weight vector equation generalizes in the obvious way:
[X1 ,...,Xm] , any of which we can restrict. This allows
us to test whether observations match on some attributes of the outer sum is over all valid joint settings of the indexical
interest, while ignoring the other attributes. For example, variables.
     1  1   1   1  2  1   2  2                          Because the weight vectors for set and indexical tests are
t = a X1 ,X2 ,X3 a X1 ,Y2 ,Y3 , with no restriction on
the domains, will succeed if the ﬁrst attribute is the same in independent of history, they can be computed once and reused
both time steps. We do not allow indexical variables to bind over and over again. Thus, after a one-time cost of computing
across tests.                                         the weights, the complexity of using both set and indexical
  Let us contrast indexical tests and set tests. Earlier, we tests is independent of the length of the test as well as the
                     1  1 2 2                         number of observations being aggregated (equivalently, the
showed a set test tO = a O a O that expanded to include
four tests. Suppose we let dom(X1)=O1. Then, the index- number of s-tests being aggregated). The complexity does,
              1 1 2  1                                however, depend on the number of core tests.
ical test tX = a X a X only includes two primitive tests
  1 1 2 1     1  1 2 1
(a σ1a σ1 and a σ2a σ2), and the prediction of tX is the
sum of their predictions.                             4   Specifying Options and Policies with
  It is natural to deﬁne the indexical analog of a comple- Generalized Tests
mented set test. A complemented indexical test asks the fol- We will now show how generalized tests can be used to spec-
lowing kind of question: “What is the probability that if I take ify policies and options. Two of the three criteria for success
some action, see some observation, and take another action, I outlined in the introduction involve the use of compact, de-
                                              ¬Xk
will see a different observation?” To do this, we allow scriptive policies: ﬁrst, the complexity of a policy should be
                   Xk
in a test, in addition to .                           independent of the size of our domain, and second, it should
                                                      generalize over multiple (but similar) tasks. We show that
3.3  Linear PSRs and Efﬁcient Tests                   by specifying options and policies in terms of generalized
One of the primary motivations for restricting the class of tests, both automatically generalize in the same way their
generalized tests we consider is computational. There are constituent tests do.

                                                IJCAI-07
                                                  20374.1  Specifying Policies with Tests                     Predicate  Test              Predicate  Test
                                                          on(a, b)=find(a),a,D,b     eye on(a)=aφ,a
Formally, a policy is a mapping from states to actions. States clear(a)=find(a),a,U,φ eye above(a)=D,a
in a PSR are represented as the predictions of core tests ¬on(a, b)=find(a),a,D, ¬b eye below(a)=U,a
p(Q|h). This state will always be a vector in R|Q|, so a policy ¬clear(a)=find(a),a,U, ¬φ
must map R|Q| to A.
  Instead of mapping p(Q|h) directly to actions, we ﬁrst use Figure 1: Table of predictive predicates used.
the state, p(Q|h), to compute the predictions of a set of addi-
tional generalized tests, and then map the predictions of those
additional tests to actions. There are many possible ways to 5.1 Predictive Predicates and Core Tests
do this. One way is to create a list of expressions involving A traditional relational representation of the blocks world
tests, associate an action with each expression, and execute deﬁnes several predicates such as clear(a) and on(a, b).
the ﬁrst action whose expression is true. For example: Equivalent constructs, which we will call predictive predi-
          p(U,φ|h)=1  →   move curr(Table)            cates, can be deﬁned predictively with generalized tests. Pre-
         p(aφ,φ|h)=1  →   D                           dictive predicates form building blocks for deﬁning policies
              default →   U                     (1)   and options whose semantics are entirely based on statistics
                                                      about future observations.
This policy moves the eye to the top of the stack, and then                 t      ≡  a1 =  find(a),o1 =
pops blocks off the stack until it is empty. It operates inde- For example, the test on(a,b)
                                                      a, a2 = D,o2 = b
pendently of the number of blocks in the domain, as well as           , can be used to deﬁne a predictive pred-
                                                           on(a, b)                      p(t    |h)=1
the number of blocks in the stack. To avoid notational clutter icate that is is true whenever on(a,b)   .
                                                                        a
in deterministic domains, we will usually omit the p(·|h)=1 This test ﬁnds block , moves the eye down and checks to
                                                                       b                  t      ≡  a1 =
associated with each test.                            see if it sees block . Similarly, the test clear(a)
                                                      find(a),o1 = a, a2 = U,o2 = φ can be used to deﬁne a pre-
4.2  Specifying Options with Tests                    dictive predicate clear(a) that is true in a history h whenever
Options are temporally extended actions. They could rep- p(tclear(a)|h)=1. For ease of exposition, we will omit the
resent, for example, “walk to the doorway,” or “wait until implied tests associated with each of these predictive predi-
the light turns green.” Formally, an option is speciﬁed by a cates, and just write on(a, b) instead of p(ton(a,b)|h); we will
set of initiation states (in which the option is available), by a also omit the implied action and observation labels, writing
termination function (which speciﬁes the probability that the on(a, b)=find(a),a,D,b. To track the position of the eye,
option will terminate at each timestep, and which may be a we deﬁne three predictive predicates: eye on(a)=aφ,a,
function of state), and by a policy over states.      eye above(a)=D,a, and     eye below(a)=U,a.We
  We specify the initiation states, the termination function, can also discuss the complement of a predictive predicate in
and the option policy in terms of tests. An option policy is terms of a complemented set test. For example, ¬on(a, b)=
speciﬁed in the same way as a global policy. The initiation find(a),a,D, ¬b.
states and termination function are also speciﬁed in the same To emphasize that these predictive predicates are actually
way, but each expression has an associated value in {0, 1}
or [0, 1], respectively, rather than an associated action. For tests, Fig. 1 summarizes the predicates and their correspond-
example, using the policy in Eq. (1), allowing initiation in ing tests.
any state, and using
             1  2  3                                  5.2  Options and Policies
      p(aφ, O ,O ,O |h) ∧ p(U,φ|h)=1 →  1.0
                             default  →   0.0         Given those predictive predicates, we can now begin to deﬁne
                                                      options and policies that accomplish abstract actions in our
 as our termination condition, then we have an option that domain. For instance, the following option, pop curr, moves
pops blocks off the stack until the top block matches the cri- to the table the block at the top of the current stack. This
                  1  2   3
teria speciﬁed by O ,O ,O . Here we deﬁne p(t1|h) ∧ option works independently of the number of blocks in the
p(t2|h) ≡ p(t1|h)p(t2|h).                             stack, which is important to deal with stacks independently
                                                      of the size of the state space:
5  Connecting to Relational Knowledge
   Representations                                           Option:   pop curr
We have completed the development of our generalized tests, Available: ¬eye on(φ)
and will next demonstrate how they can be applied with a de-
tailed example. First, we will deﬁne predictive equivalents Termination: eye on(φ)
to traditional relational predicates and will illustrate their use      eye below(φ) →   move curr(Table)
in several options and policies. The ﬁrst goal we consider    Policy:  ¬eye below(φ) →   U
is on(a, b), but we will also develop a policy for the more
complicated goal of on(X, ∗, ∗, X, ∗, ∗), which is satis- Given the pop curr option and the rest of our predictive
ﬁed when two blocks of the same color are stacked (regard- predicates, we can deﬁne an option to satisfy on(a, b). The
less of what color they are). Finally, we will show how pre- idea of this policy is to ﬁnd block a, clear all of the blocks off
dictive predicates can create a nonlinear PSR to track the state the top of it, then ﬁnd block b and clear it, then move block a
of the world.                                         onto block b:

                                                IJCAI-07
                                                  2038           Option:   on(a, b)                                Option:   pop until same as marked
          Available: (all)                                  Available: (all)
       Termination:  on(a, b)                            Termination:  same as marked ∧ eye below(φ)
                                                                       eye below(φ) →   move curr(Table)
            Policy:
                                                              Policy:     eye on(φ) →   D
     eye on(a) ∧ clear(a) ∧ clear(b) → move curr(b)
                                                                           default  →   U
    ¬eye on(a) ∧ clear(a) ∧ clear(b) → find(a)
    eye on(b) ∧ clear(a) ∧¬clear(b) → pop curr          We deﬁne another option,  pop until(O1,O2,O3),
   ¬eye on(b) ∧ clear(a) ∧¬clear(b) → find(b)         which is deﬁned by Eq. (1) and the termination condition
              eye on(a) ∧¬clear(a) →  pop curr        in Section 4.2. Together, these two options help us create a
                                                               on(X, ∗, ∗, X, ∗, ∗)
            ¬eye on(a) ∧¬clear(a) →   find(a)         policy for                  . The idea is to ﬁnd a block,
                                                      mark it, and then clear all blocks off the top of it. Then, ﬁnd
                                                      another block with the same color, clear it, then put them on
  There are a few points worth noting about this policy. The top of each other:
policy is compact and independent of the size of the state
space (that is, it works for any number of blocks). The ex-       Option:  on(X, ∗, ∗, X, ∗, ∗)
istence of such a policy is not a surprise. Indeed, the policy is
                                                                Available: (all)
a straightforward implementation of a standard relational pol-
icy in PSR terms. What is interesting is that PSRs allow one  Termination: on(X, ∗, ∗, X, ∗, ∗)
to write such a policy in purely observable quantities. Note
that the policy is only good for stacking a on b; later, we will   Policy:
parameterize this policy to generalize across similar tasks. clear(∗, ∗, mark)∧
                                                            same as marked∧
5.3  More Sophisticated Goal States                            eye below(φ) →   move curr(∗, ∗, mark)
                                                         clear(∗, ∗, mark)∧
So far, we have only used set tests. To showcase the power   same as marked →   pop until same as marked
of indexical tests, we will now develop policies for more so-
phisticated goal states. The ﬁrst is on(X, ∗, ∗, X, ∗, ∗), clear(∗, ∗, mark) → find(∗, ∗, ¬mark)
which is satisﬁed when any two blocks of the same color are eye on(∗, ∗, mark) → pop until(∗, ∗, mark)
stacked. We now have a multi-attribute observations, which eye on(Table ∪ φ) →  find(∗, ∗, ∗)
are color, number, and a “marked” bit. The agent is allowed        default  →   mark
to mark blocks as a form of visual memory; only one block
can be marked at a time.
                                                        We could easily extend this policy to solve for a goal like
  We also need to make a few intuitive redeﬁnitions and clar- on(red, ∗, ∗, red, ∗, ∗) by replacing the find action with
iﬁcations to actions and predicates. Basically, we allow ev- an option that ﬁnds a red block.
erything to take an observation set as an argument. For exam-
ple, find(Oi) now moves the eye randomly to a block that 5.4 Parameterized Policies and Options
       Oi
satisﬁes  (each satisfactory block has a nonzero probabil- So far, our policies and options generalize across domains
ity of being reached). Predictive predicates are similar: we and across objects, but do not generalize across tasks. For ex-
     eye  on(Oi)=a   ,Oi eye above(Oi)=D,Oi
deﬁne               φ                         , and   ample, the policy for achieving on(a, b) does not generalize
eye below(Oi)=U,Oi. The  on predictive predicate is a lit-
                                        i   i     j   to stacking other blocks on each other. However, since all of
tle different because the generalized test find(O ),O , D,O our tests and predicates are propositional in nature, we could
is no longer deterministic. We deﬁne on to be true when
        i   i     j                                   parameterize the tests and actions and options in the obvi-
p(find(O ),O , D,O |h) > 0.0. In other words, it is an ex- ous way: simply replace constant observations with variables.
istential relational query that has nonzero probability when on(a, b)        on(A, B)=find(A),A,D,B
                             i                        So,       might become                          for
there is some object satisfying O on top of some object variables A and B. As long as actions can be similarly param-
satisfying Oj. The clear predictive predicate is similar:
        i           i   i                             eterized, the agent can bind these variables to speciﬁc blocks
clear(O )=(find(O   ),O , U,φ) > 0.0.                 and obtain predictions and policies on-demand.
  To start constructing our policy, we will deﬁne an indexical
test which is true whenever the marked block has the same 5.5 A Nonlinear, Relational PSR
color as the block the eye is looking at:             So far, we have tacitly assumed the existence of an underlying
   same as marked =                                   PSR capable of predicting any test. We will now show how
      a , X, ∗, ¬mark, find(∗, ∗, mark), X, ∗, mark such a PSR can be constructed using predictive predicates.
       φ                                              Two things are needed for a PSR: a set of core tests and a
  This lets us deﬁne pop until same as marked, which is state update mechanism.
an option to pop blocks off the current stack until the top We represent our core tests as predictive predicates. If there
block has the same color as the marked block:         are k blocks, one set of core tests is k2 predicates, represent-

                                                IJCAI-07
                                                  2039