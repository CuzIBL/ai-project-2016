                 Using Available Memory to Transform Graphplan's Search 
                               Terry Zimmerman & Subbarao Kambhampati 
                                Department of Computer Science and Engineering 
                                 Arizona State University, Tempe AZ 85287-5406 
                                                  {zim,rao| @asu.cdu 


                        Abstract                               these changes as the kth level planning graph provides a 
   We present a major variant of the Graphplan algo•          compact way of representing the search space traversed 
   rithm that employs available memory to transform           by the corresponding IDA* search in its kth iteration. 
   the depth-first nature of Graphplan's search into an       The state space view provided by the search trace allows 
   iterative state space view in which heuristics can          us to transform Graphplan's search from its depth-first 
   be used to traverse the search space. When the             default to a more informed traversal of the space. 
   planner, PEGG, is set to conduct exhaustive 
   search, it produces guaranteed optimal parallel            2 Design and Experiments 
   plans 2 to 90 times faster than a version of Graph-          As would be expected for IDA* search there is great 
   plan enhanced with CSP speedup methods. By                 similarity (redundancy) in the search space for successive 
   heuristically pruning this search space PEGG pro•          search episodes as the plan graph is extended. In fact, the 
   duces plans comparable to Graphplan's in make-             search conducted at any level k+1 of the graph is essen•
   span, at speeds approaching state-of-the-art heuris•       tially a replay of the search conducted at the previous 
   tic serial planners.                                       level k with certain well-defined extensions. Specifi•
                                                              cally, every set of subgoals reached in the backward 
1 Motivation and Approach                                     search of episode n, starting at level k, will be generated 
                                                              again by Graphplan in episode n+1 starting at level k+1. 
Despite the recent dominance of heuristic state-search 
planners over Graphplan-style planners, the Graphplan 
approach [Blum and Furst 1997] is still one of the most 
effective ways to generate so-called "optimal parallel 
plans". While state-space planners are drowned by the 
exponential branching factors of the search space of par•
allel plans, Graphplan excels due to the way it combines 
an IDA* style iterative search [Bonet and Geffner, 1999] 
with a highly efficient CSP-based, incremental generation 
of valid action subsets. We present here a system called 
PEGG, that addresses weaknesses in Graphplan's ap•
proach by employing available memory to: 1) reduce the 
redundant search Graphplan conducts in consecutive it•
erations, and 2) more importantly, to transform Graph-
plan's IDA* search into iterative expansion of a select set 
of states that can be traversed any order. 
  A shortfall of the IDA*'s approach to search is the fact 
that it regenerates many of the same nodes in each of its 
iterations. This can be traced to using too little memory 
in many cases; the only information carried over from         Figure J. State space view of Graphplan's search space: 
one iteration to the next is the upper bound on the f-                  3 consecutive search episodes leading to a solution 
value. Given that consecutive iterations of search over•
lap significantly, we investigated using additional mem•      Figure 1 depicts the state space tree structure correspond•
ory to store a trace of the explored search tree to avoid     ing to Graphplan's search over three consecutive search 
repeated re-generation of search nodes. With a represen•      iterations on a hypothetical problem. The dark shaded 
tation of the explored search space, we can transform the     states are first produced during Graphplan's attempt to 
way this space is extended during the next iteration. In      satisfy the XYZ goal at level 7. They are generated again 
particular, we can (a) expand search trace nodes in the       in the next episode, each at one level higher, along with 
order of their heuristic merit and (b) we may also con•       some new states (shown in lighter shade). Finally, in the 
sider iteratively expanding a select set of states. This      third episode Graphplan regenerates the dark and lighter 
strategy is too costly for normal IDA* search, but Graph-     shaded states, attempting to satisfy XYZ at level 9, and 
plan's type of IDA* search is particularly well-suited to     finds a solution. 


1526                                                                                                   POSTER PAPERS   EGBG [Zimmerman, Kambhampati, 1999]                                              Graphplan           5oPEGG         PEGG        Speedup I 
                                                              Problem                                  cpu sec       cpu sec 
used memory to aggressively record the experi-                                 cpu sec (steps/acts)                               (PEGG vs. 
ence in each search episode, essentially avoid•                                                      (steps/acts)   (steps/acts) 
                                                                               Stnd. GP-e                                           GP-e) 
ing all redundant effort. That approach con•
fronted memory constraints on larger problems,                bw-large-B      194.8    13.4(18/18)     12.2        3.1 (18/18)     4.3x 
but it suggests a more powerful use for a pared-              bw-large-D        ~      ~ (36/36)          ~        340 (38 / 38)   >5x 
down search trace: exploiting the snapshot view               att-log-b         -           ~             ~        120 (11/79)    >15x 
of the entire search space of a Graphplan itera•
                                                              gripper-15        -      - (36/45) 47.5              16.7 (36/45)   >107x 
tion to focus on the most promising areas. This 
                                                              gripper-20        ~       ~ (40/59)         ~        44.8 (40/59)   >40x 
transformation frees us from the depth-first na•                                ~ 
ture of Graphplan's search, permitting move•                  tower-9                 ~ (511/511)     118         23.6(511/511)   >76x 
ment about the search space to focus on its most              TSP-12            ~      ~ (12/12)     7.2          6.5 (12/12)     >277x 
promising sections first -or even exclusively.                AIPS '98, '00, '02 Competition Problems \ 
 A summary of PEGG (for details; [Zimmer•                     gripper-x-4       ~     190 (19/29)    73.9         30.9 (19/29)     6.1x 
man and Kambhampati, 2003]) relies on these                   gripper-x-5       ~           -        512          110 (23/35)     >16x 
definitions: Search segment: a state generated                log-y-4           -     470 (11/60)    366          330 (11/58)      1.4x 
during Graphplan's regression search from the                 blocks-10-1       -     95.4 (34/34)   18.7         11.0 (34/34)     8.7x 
goal state, indexed to a specific plan graph                  blocks-16-2       ~       - (54/54)         ~       58.7 (54/54)    >31x 
level. It holds the state's goal list, a pointer to 
the parent search segment, and the actions as•                logistics-10-0    -     30.0 (15/56)   21           8.9 (15/55)      3.4x 
signed in satisfying the parent's goals. Search               logistics-12-1    -           -        1101 (15/75) 119 (15/75)     >15.1x 
trace (ST): the linked set of search segments                 freecell-2-1            98.0 (6/10)    80.1         62.9             1.5x 
(states) representing the search space visited in 
                                                              depot-6512       239    5.1            5.0          2.1              2.4x 
a Graphplan backward search episode. The sets                                   ~                         ~ 
of states in each of the three shadings of Figure             depot-1212                - (22/55)                 127 (22/56)     >14x 
1 can be seen as the ST after each of the three               driverlog-2-3-6   -     27.5 (7/20)        1.9      1.9 (7/20)       14.5x 
episodes. Transposition: The extant trace of                  driverlog-4-4-8   ~           ~             ~       589 (10/24)      >3x 
search segments (states) after search episode n               ztravel-3-7a      -           ~        1434 (10/23) 222 (10/21)      >8x 
is transposed up one planning graph level for 
                                                              ztravel-3-8a      -      972 (7/25)    11.2         2.3 (7/25)       423x 
episode n+1 as follows: For each ST search 
segment associated with graph level j associate it              Table J. PEGG vs. Graphplan and enhanced Graphplan (GP-e) 
with level j+1 for episode n+1. Visiting a search 
                                                                 GP-e: enhanced Graphplan (sec text) so-PEGG step-optimal, search via 
segment: the goals of segment S                are memo 
                                             p                   the ST. PEGG: beam search on best 20% of search segments in ST 
checked at their associated level and if valid, 
                                                                 - indicates failure in 30 min limit, cpu time 
PEGG initiates Graphplan's CSP-style search to 
satisfy them. The process is enhanced by a cadre of               Parentheses next to cpu time give # of steps/ # of actions in solution. 
efficiency techniques such as a bi-level plan graph,             Allegro Lisp, runtimes (cxcl. gc time) on Pentium 900 mhz, 384 MB RAM 
domain preprocessing, explanation based learning 
(EBL), dependency directed backtracking (DDB), and 
                                                                        search on only the heuristically 'best' fraction. The first 
goal & action ordering. Whenever the goals of S           are val•
                                                         p              approach maintains Graphplan's guarantee of step opti-
idly assigned, a child segment is created containing S            's 
                                                                 p      mality while the latter sacrifices the guarantee of optimal•
goals regressed over the assigned actions, and linked to 
                                                                        ly in favor of pruning search in all search episodes and 
S  (thus extending the ST). 
  P                                                                     bounds the size of the search trace that is maintained in 
 The PEGG algorithm: the graph is built until the prob•                 memory. Empirically we find that optimal make-span 
lem goals appear non-mutex, and the first regression                    plans are generally found by PEGG regardless, (one ex•
search episode is conducted ala Graphplan fashion. Dur•                 ception shown in bold) and speedups as high as two or•
ing this search, the initial trace is constructed, concisely            ders of magnitude over enhanced Graphplan are 
capturing all 'states' generated during the search process.             achieved. 
If no solution is found, the ST directs the search process 
for future iterations. This search is 2-phased: select a                References 
promising ST state, then Graphplan's depth-first, CSP-
type search on the state's subgoals is conducted. Another               Blum A. and Furst M.1997. Fast planning through planning 
ST search segment is heuristically selected if search fails.            graph analysis. Artificial Intelligence 90(1-2). 1997. 
Since the ST provides a state space view, PEGG can use                  Bonet, B. and Geffner, H. 1999. Planning as heuristic search: 
'distance based' heuristics (c.f. HSP-R [Bonet and Geff-                New results. In Proceedings of ECP-99, 1999. 
ner, 1999] and AltAlt [Nguyen and Kambhampati,                          Nguyen, X. and Kambhampati, S. 2000. Extracting effective 
2000]). For results reported here, the 'adjusted sum'                   and admissible state space heuristics from the planning graph. 
heuristic from the latter is used.                                      In Proceedings of. AAAI-2000. 
 Table 1 compares PEGG against standard Graphplan                       Zimmerman, T. and Kambhampati, S. 1999. Exploiting Sym•
and a highly enhanced version (GP-e), which has been                    metry in the Planning-graph via Explanation-Guided Search. 
augmented with the efficiency methods mentioned above.                  In Proceedings of AAAJ-99, 1999. 
Two PEGG modes of operation are reported; 1) so-PEGG:                   Zimmerman, T. and Kambhampati, S. 2003. Using memory to 
make-span optimal, ST search segments ordered accord•                   transform search on the planning graph. ASU Technical Re•
ing to a state space heuristic, all segments visited, 2)                port (available at http://rakaposhi.eas.asu.edu/pegg-tr.pdO 
PEGG: Ordering the ST search segments as for 1, beam 


POSTER PAPERS                                                                                                                         1527 