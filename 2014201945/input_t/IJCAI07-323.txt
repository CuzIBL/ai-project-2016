              Graph Decomposition for Efﬁcient Multi-robot Path Planning
                                            Malcolm Ryan
                                    Centre for Autonomous Systems
                                     University of New South Wales
                                             Australia 2052
                                      malcolmr@cse.unsw.edu.au

                    Abstract                          then we can ﬁrst of all plan for the movement of the robots
                                                      between the subgraphs and then resolve these abstract plans
    In my previous paper (Ryan, 2006) I introduced the
                                                      into sequences of more concrete steps. If the subgraphs we
    concept of subgraph decomposition as a means of
                                                      use have well-chosen structure then this abstraction will sig-
    reducing the search space in multi-robot planning
                                                      niﬁcantly reduce the size of the search space, and the resolu-
    problems. I showed how partitioning a roadmap
                                                      tion process can be done deterministically without the need
    into subgraphs of known structure allows us to ﬁrst
                                                      for further search.
    plan at a level of abstraction and then resolve these
                                                        The subgraphs that I have previously described, stacks and
    plans into concrete paths without the need for fur-
                                                      cliques, work well for illustrating this idea but are seldom
    ther search so we can solve signiﬁcantly harder
                                                      found in real planning problems. In this paper I introduce a
    planning tasks with the same resources. However
                                                      more complex kind of subgraph called a hall which is much
    the subgraph types I introduced in that paper, stacks
                                                      more common in real planning problems. I explain its struc-
    and cliques, are not likely to occur often in realistic
                                                      ture and its formal properties below and I shall demonstrate
    planning problems and so are of limited usefulness.
                                                      its value by using it to do multi-robot planning on a real
    In this paper I describe a new kind of subgraph   problem: moving cargo-handler robots around a map of the
    called a hall, which can also be used for planning Patrick container yard at Port Brisbane.
    and which occurs much more commonly in real
    problems. I explain its formal properties as a plan-
    ning component and demonstrate its use on a map   2   Problem Formulation
    of the Patrick’s container yard at the Port of Bris- We assume for this work that we are provided with a road-
    bane in Queensland Australia.                     map in the form of a graph G =(V,E) representing the con-
                                                      nectivity of free space for a single robot moving around the
1  Introduction                                       world. We consider our robots to be homogeneous so a single
                                                      map sufﬁces for them all.
Coordinated path planning for multiple robots is difﬁcult be- We make some further simplifying assumptions about the
cause the search space grows combinatorially with the num- map:
ber of robots (LaValle, 2006). We need to plan not only for
                                                        •
the paths of individual robots but also for the ordering of their The map is constructed such that two robots will only
movements to prevent them from colliding with one another. collide if they try to simultaneously occupy the same
Often it is necessary for robots to detour away from their vertex in the graph. That is, the vertices must be spaced
shortest paths in order to let other robots pass. As a result sufﬁciently far apart that two robots can occupy any pair
centralised planning methods (eg Barraquand & Latombe,    of distinct vertices without colliding.
1991), which plan for all robots at once, have traditionally • A robot at vertex vi can move to neighbouring vertex vj
been abandoned in favour of prioritised planners which plan provided vj is unoccupied and no other robot is simulta-
for only one robot at a time in priority order (Erdmann & neously entering or leaving vj. Robots occupying other
Lozano-P´erez, 1986; LaValle & Hutchinson, 1998; Berg &   vertices in the graph do not affect this movement.
Overmars, 2005). Collisions are avoided by requiring lower •
priority robots to plan to avoid those of higher priority. This is The initial and goal locations of all robots lie on the
much faster since the search space is kept relatively small but roadmap.
can be incomplete. It is not difﬁcult to construct a problem With appropriate levels of underlying control these assump-
for which there is no prioritised solution.           tions should not be too difﬁcult to achieve or approximate for
  In my previous paper (Ryan, 2006) I proposed a way to most problems.
perform centralised planning in a much more efﬁcient man- We also have a set of robots R = {r1,...,rk},andtwo
                                                                   +
ner by dealing with the problem at a higher level of abstrac- mappings S0,S : R → V representing the initial and goal
tion. If we partition the map into a set of connected subgraphs positions of the robots respectively, with S[ri] = S[rj]iﬀi =

                                                IJCAI-07
                                                  2003Algorithm 1 Planning on the reduced graph             currently occupies to one of its neighbours in X. This is more
                         +
  function PLAN(G, X, R, S0, S )                      complex than in the naive planner. When we attempt to move
   Pr ←∅, ∀r ∈ R                                      a robot from one subgraph to another we must ﬁrst check that
   ≺←  ∅                                              it is possible to do this without forcing any of the other robots
   for r ∈ R do                                       within the subgraph to exit. Similarly, we must check that the
     G0[r] ← G ∈G, s.t.S0[r] ∈ G                      robot can validly enter the neighbouring subgraph. Rearrang-
   end for
                           +                          ing robots within the subgraph is permissible but movement
   P←PLAN(G,   X, R, P, G0, S )                       between subgraphs must only occur as a deliberate plan step.
   for G ∈Gdo
                                                        Once a robot has reached the target subgraph in which its
     P←G.RESOLVE(P)
   end for                                            goal vertex lies it must also check that is is possible for it to
   return P                                           terminate there. It may be that other robots within the sub-
  end function                                        graph prevent it from reaching its goal location without any
                                                      robots exiting the subgraph.
                           +
  function PLAN(G, X, R, P, G, S )                      Thus for each subgraph structure we use, we need to im-
     ∀r : S+[r] ∈ G[r]
   if               then                              plement three test methods used in the search progress:
     for r ∈ R do
                               +
       P←G[r].TERMINATE(P,  r, S [r])                   • ENTER(P,r,v)  Test if robot r can enter a vertex v in the
     end for                                              subgraph.
     return P
   end if                                               • EXIT(P,r,v) Test if robot r can exit the subgraph via
   choose r ∈ R                                           vertex v.
   Gf  ← G[r]
                        
   choose Gt ∈{G  | (Gf ,G ) ∈ X}                       • TERMINATE(P,r,v)  Test is robot r in the subgraph can
   choose (vf ,vt) ∈{(x, y) ∈G|x ∈ Gf ,y ∈ Gt}            move to its goal vertex v.
   P←Gf   .EXIT(P, r, vf )
   P←Gt.ENTER(P,   r, vt)                               The key to efﬁcient subgraph planning is to carefully con-
   add (vf ,vt) to Pr                                 strain the allowed structure of the subgraphs in our partition,
   G[r] ←Gt
                            +                         so that the ENTER,EXIT and TERMINATE methods are sim-
   return PLAN(G, X, R, P, G, S )                     ple to implement, and do not require expensive search. The
  end function                                        advantage of this approach is that each of these functions can
                                                      always be computed based only on the arrangement of other
                                                      robots within that particular subgraph and do not rely on the
j. Given this information we wish to construct a set of plans
                                                      positions of robots elsewhere.
P = {Pr  | r ∈ R} for each robot to reach its goal. We also
construct a partial-ordering ≺ between plan steps so that two If these three methods are correctly implemented then once
robots can never occupy the same the vertex of the map. a subgraph-based plan has been found, we can guarantee that
                                                      there is a concrete resolution of this plan into edge transitions
2.1  Subgraph Planning                                in G which ﬁts this abstraction. Furthermore, if no subgraph
                                                      plan can be found then no concrete plan exists either, as every
At this stage a naive centralised planner would proceed as fol- concrete plan has an abstract representation1 and our search
lows: First, initialise every robot at its starting position, then algorithm is complete.
select a robot and move it to a neighbouring vertex, check-
                                                        When subgraph planning is complete, we need an addi-
ing ﬁrst that no other robot is currently occupying that ver-
                                                      tional method:
tex. Continue in this fashion selecting and moving one of
the robots at each step until all robots are at their goals. Of • RESOLVE(P) To resolve an abstract plan of en-
course, each choice presents multiple possibilities and all al- ter/exit/terminate events into a concrete sequence of
ternatives have to be searched in some systematic fashion, movements between vertices.
usually by breadth-ﬁrst or A∗ search.
  Subgraph planning proceeds in a similar fashion, as illus- Under our assumptions stated earlier, we can resolve the
trated in Algorithm 1. Before we begin the map G is parti- movements of robots within one subgraph without reference
tioned into a collection of subgraphs G = {G0,G1,...,Gm} to robots elsewhere. So we can implement a RESOLVE
and then a minor X of G is constructed by contracting each method for each subgraph type which performs this opera-
subgraph to a single vertex;                          tion. Once again, the key is to choose our subgraph structure
                                                      so that this method can be implemented efﬁciently without
 V (X)=G                                              the need for additional search.
 E(X)={(Gi,Gj)       |∃x ∈ Gi,y ∈ Gj :(x, y) ∈ E(G)}
                                                         1The proof of this statement is rather long and will be published
  Given this partitioning the planning algorithm proceeds as in a forthcoming journal paper. The fundamental idea is that a con-
before. We initialise the robots in their starting positions and crete plan can be divided into sections of subgraph rearrangement
then search through a sequence of steps. Each step consists interleaved with transition actions whenever a robot moves from one
of selecting and moving one of the robots, but in this case we subgraph to another. Each transition becomes an step in the abstract
consider how the robot might be moved from the subgraph it plan.

                                                IJCAI-07
                                                  2004                                                             j = 0
                                                            v1v2          v3    v4    v5     v6
                                                                                   A     B      C
              v1    v2     v3       vk

                                                                            D
                                                             j = 1
      Figure 1: A graph containing a hall subgraph.         v1v2          v3    v4    v5     v6
                                                                      A            B     C
3  Subgraph structures
What, then, are these ‘subgraph structures’ that allow efﬁ-                 D
cient subgraph planning? Previously I have described the use j = 2
of stacks and cliques as subgraphs. A stack is a chain of ver- v1v2       v3    v4    v5     v6
tices with only a single exit at one end. Robots can only en-
ter and leave a stack in a last-in-ﬁrst-out order. Cliques are A      B            C
fully-connected subgraphs and may have many exits to other
subgraphs from different vertices. Because every vertex in a
clique is connected to every other, robots can move in and                  D
out of a clique in arbitrary order as long as the clique never
becomes full.                                         Figure 2: Example of entering a hall subgraph, with n =
                                                      3  k =6      i =3
  The ENTER  and EXIT methods for these types of sub-  ,       and      . Robot D can enter at three possible
graphs are so simple because they place very strong con- sequence positions j = 0, 1 or 2 but not at j =3
straints on the structure of the subgraph and its connections
to other subgraphs. Unfortunately, for this reason, these
kinds of subgraphs rarely occur in realistic planning prob- for any j satisfying:
lems. We therefore need to ﬁnd other structures that are            j  ≥   max(0,n−  k + i)
complex enough to represent real problems, yet still simple         j  ≤   min(n, i − 1)
enough to implement efﬁciently. The hall is such a structure.
                                                      If several different values of j are possible then the planner
3.1  The Hall Subgraph                                must consider all of these alternatives sequences in the ongo-
A hall (Figure 1) is a generalisation of a stack to include mul- ing plan, as they may lead to different outcomes. An example
tiple entrance and exit points along its length. Formally it is isshowninFigure2.
an induced subgraph H ⊆ G consisting of a chain of ver-
                                                        XIT
tices V (H)={v1,...,vk} each linked to its two neighbours E ()
without any ‘shortcuts’, ie:                          Similarly, the position that a robot occupies in the sequence
                                                      S determines which edges it can use when exiting the hall. If
    (v ,v ) ∈ E(H), iﬀ |i − j| =1, ∀v ,v ∈ V (H)
      i  j                        i  j                robot r(j) wants to exit from a hall of length k, then it can do
                                                      so only via edges which connect to a vertex vi with:
As its name suggests, we may imagine a hall as a long narrow
passageway with multiple exits along its length. The passage            i  ≥  j
is too narrow for robots to pass one another, so the sequence           i  ≤  k − n + j
of robots within the hall will constrain which exits can be
used by a given occupant at a particular time.        This constraint limits which of the neighbouring subgraphs
  To implement the four planning methods ENTER,EXIT   can be entered by this robot at a particular time.
and TERMINATE,RESOLVE   for halls, we need to keep track
                                                      TERMINATE()
of the sequence of robots within the hall at any given mo-
ment, including not just their names but also their order (but We can terminate the robots in the hall provided that the se-
                                                      quence S matches the sequence termination positions. That
not, importantly, their actual vertices). I shall denote this se-
        S =  r   ,r  ,...,r                           is, if r(i),r(j) ∈ S with i<jterminate at va and vb respec-
quence as     (1) (2)     (n) . For each method, I shall                   a<b
now describe how it depends on and affects S.         tively then we must have  .
                                                        ESOLVE
ENTER()                                               R        ()
When a robot r enters the hall, we can compute the possible To resolve a subgraph plan which uses a particular hall we
                                                      need to know three pieces of information:
sequences this creates. If the robot enters at vertex vi of a hall
of length k which already contains n<krobots in sequence 1. The list of robots which entered and exited the hall,
S
 , then the resulting sequence can be of the form:      2. The edges by which they entered and exited,
                                             
   insert(S, r, j)= r(1),...,r(j),r,r(j+1),...,r(n)     3. The sequence positions at which they entered.

                                                IJCAI-07
                                                  2005Given this information we can construct a concrete plan by
moving the robots on an as-needs basis. When a robot enters
we shufﬂe the existing occupants left or right as necessary to
open up a gap at the appropriate sequence position and we
move the newcomer into this gap. When a robot leaves we
shufﬂe the robots appropriately so that it will be at the right
vertex from which to depart. None of this requires any kind
of search and we are guaranteed that it will succeed because
of the checks already done in the ENTER and EXIT methods.
  Finally, when we have processed all the entrances and ex-
its the remaining robots should be in the correct sequence to
terminate. We can now just move each one to its terminal
position, shufﬂing any that are in the way further up the hall
(close to their own terminating positions).
3.2  Complexity
The ENTER  and EXIT methods for a hall are both O(m)
where m is the number of different sequence positions per-
mitted by the formulae above, which is guaranteed to be less
than or equal to the size of the hall |H|.TERMINATE is O(1),
amortised over all robots in the hall and the RESOLVE method
adds a further O(h) term, where h is the number of visits to
the hall. Since each subgraph must be resolved in this fash-
ion, this post-processing takes extra time equal to the sum of
the lengths of the robots’ plans.
                                                      Figure 4: The reduced map. Each vertex represents a single
                                                      subgraph.
4  Experiments
To evaluate the advantage of planning with the hall subgraph
                                                        The experiment was repeated 200 times each for values of
structure, I applied it to a large realistic planning task. A N                                        2
map of the Patrick port facility at Port Brisbane in Queens- from 2 to 10 and the median running time was calculated .
land was provided by the company (Figure 3). This map is These values are plotted in Figure 5. Medians are shown
used by their computer system to plan the movements of auto- rather than means, as in some cases the planners failed due
mated straddle carriers - large vehicles which transport ship- to lack of memory. Such instances are treated as having an
ping containers around their yards. Efﬁcient planning of co- inﬁnite running time. Figure 6 shows the percentage of cases
ordinated paths for these vehicles is important for the smooth which ran out of memory for each planner, exceeding the 1Gb
running of the facility.                              limit placed on the heap.
  The map is an undirected graph of 1808 vertices and 3029 As can be seen from these two graphs, the naive planner
edges. The vertices are naturally connected in long straight works more efﬁciently on small problems (due to the extra
chains representing the roads around the facility. These roads overhead of subgraph planning) but quickly blows up as the
mean that the vertices can be partitioned into 40 hall sub- number of robots is increased, taking much more time and
graphs, with only 2 vertices left over, which must be treated memory. Subgraph planning is able to handle signiﬁcantly
as singletons (Figure 4). The reduced graph has 187 edges larger problems with many more robots before its search
connecting neighbouring subgraphs.                    space also becomes too large.
  This reduced graph was constructed by hand with the aid With regard to plan length, the use of best-ﬁrst search
of a simple interactive tool. Choosing the partition was not meant neither planner was designed to achieve optimality and
difﬁcult; the roads around the port are obvious in the map and outcomes were mixed. In some cases by keeping to the halls
provide a natural set of halls. No effort was made to optimise the subgraph planner produced much shorter plans. In other
this partition in any fashion to suit the algorithm.  cases poorly chosen sequencing decisions meant that these
  Using this map, I ran the following experiment: N robots plans were much longer. Work is in progress to construct sen-
were placed in the graph at randomly selected vertices. To sible measures of the length of an abstract plan and heuristics
force some amount of interaction, each robot was then re- to estimate the cost to completion so that A* search can be ap-
quired to move to the starting location of the next robot in plied to the abstract planning problem, to optimise the lengths
the list, with the ﬁnal robot moving to the location of the of plans. Nevertheless we feel that it is better to be producing
ﬁrst. Two plans were constructed, one using a naive cen- a sub-optimal plan quickly than to search for an optimal plan
tralised planner and one using the subgraph planner. Both and fail.
planners performed a best-ﬁrst search of the plan space using
a distance heuristic based on the all-shortest-paths matrix for 2Running times were measured on a 3.20GHz Intel(R)
a single robot in the map.                            Xeon(TM) CPU running Sun JDK 5.0 with 1Gb of heap.

                                                IJCAI-07
                                                  2006                           Figure 3: A map of the Patrick port facility at Port Brisbane.

5  Related Work                                       an abstraction. Halls can be found in many different kinds of
Hierarchical planning has been applied to path-planning be- graphs and are especially common in maps of man-made do-
fore with abstractions such as approximate cell decompo- mains such as corridors and roads. In domains such as these,
sition (Barbehenn & Hutchinson, 1995), (Conte & Zulli, it is relatively easy to identify halls by hand but the structure
1995), generalised Voronoi graphs (Choset & Burdick, 1995), is also simple enough that automatic partitioning should not
and general ad-hoc hierarchical maps (Zivkovic, Bakker, & difﬁcult to implement.
Kr¨ose, 2006), but the structures identiﬁed in these examples I have shown how this structure allows us to do planning in
do not carry over well to the multi-robot scenario.   a large real world domain with many robots, where a naive
  In the domain of task-planning the discovery and use centralised planner without abstraction rapidly runs out of
of well-deﬁned subproblems has shown recently popularity memory. The key to this improvement is the efﬁcient imple-
(Long & Fox, 2002; McCluskey & Simpson, 2004). The sub- mentation of the ENTER,EXIT,TERMINATE and RESOLVE
graphs I describe here may be considered ‘generic types’ for methods. This improvement is available without having to
the multi-robot planning domain.                      sacriﬁce completeness, unlike other solutions such as priori-
                                                      tisation.
6  Conclusion and Further work                          That said, there is no reason why this abstraction should
Abstraction has always been a valuable tool in improving the be incompatible with prioritised planning. A prioritised sub-
efﬁciency of planning, but the difﬁculty is in ﬁnding a good graph planner would have the advantage that plans could re-
abstraction that is (i) commonly occurring, (ii) easy to recog- main abstract until plans were constructed for all robots. By
nise and represent and (iii) easy to reason about. In the do- delaying some of the conﬂict resolution to the resolution step,
main of multi-agent path planning the hall subgraph is such the could allow the planner to produce a wider range of plans

                                                IJCAI-07
                                                  2007