     Improved      Knowledge      Acquisition    for High-Performance         Heuristic   Search

                             J.P. Bekmann(1,2)   and  Achim  Hoffmann(1)
                           (1) School of Computer   Science and Engineering,
                         University of New  South Wales, NSW    2052, Australia.
                   (2) National ICT Australia (NICTA),  A.T.P, NSW   1430,  Australia.
                                  {jbekmann,achim}@cse.unsw.edu.au

                    Abstract                          strategies as this allows one to stop the knowledge acquisi-
                                                      tion process at any time. A smaller knowledge base (KB)
    We present a new incremental knowledge acquisi-
                                                      results in a less effective search process, but may still ﬁnd a
    tion approach that incrementally improves the per-
                                                      satisfactory or near satisfactory solution for less challenging
    formance of a probabilistic search algorithm. The
                                                      problem instances. Incremental additions to the KB improve
    approach addresses the known difﬁculty of tuning
                                                      the effectiveness of the search.
    probabilistic search algorithms, such as genetic al-
                                                        As part of our discussion, we present a novel technique
    gorithms or simulated annealing, for a given search
                                                      of varying GA mutation strategy based on execution history,
    problem by the introduction of domain knowledge.
                                                      having implications beyond our work for GAs in general.
    We show that our approach is effective for develop-
                                                        For the knowledge acquisition process we build on the idea
    ing heuristic algorithms for difﬁcult combinatorial
                                                      of Ripple Down Rules [3], which allows us to incrementally
    problems by solving benchmarks from the industri-
                                                      reﬁne the given (initially empty) knowledge base. Ripple
    ally relevant domain of VLSI detailed routing.
                                                      Down  Rules (RDR) ensure that a knowledge base is only
    In this paper we present advanced techniques for  amended in a way that does not deteriorate its accuracy on
    improving our knowledge acquisition approach.     previously seen instances.
    We also present a novel method that uses domain     Our variant of RDR is a signiﬁcant extension of the RDR
    knowledge for the prioritisation of mutation opera- approach. We also introduce an expanded knowledge acqui-
    tors, increasing the GA’s efﬁciency noticeably.   sition process in which we help the expert ﬁnd examples in
                                                      past search history where the quality of the KB needs atten-
1  Introduction                                       tion. This work is based on [1].
Searching for good or even optimal solutions for complex In section 2 we provide a short overview of genetic algo-
combinatorial problems has been a challenge in Artiﬁcial In- rithms and RDR. This is followed by section 3 where we de-
telligence research ever since AI’s earliest days.    scribe our framework HeurEAKA!. Section 4 introduces a
  While it has been long recognized that the effectiveness case study of how HeurEAKA! was applied to detailed rout-
of a particular search approach depends on the chosen rep- ing, an industrially relevant problem in VLSI design. We dis-
resentation as well as certain characteristics of the problem cuss our experiments and results to these in section 5, demon-
to be solved, to date there is no systematic approach avail- strating that our approach is successful. The conclusions fol-
able that allows one to efﬁciently engineer a special-purpose low in section 6.
search strategy for a given search problem.
  In this paper we present an approach that allows humans 2 Background
to articulate their intuition about how to search effectively for Before we discuss our approach to combining GAs and
a given search problem. This appears to be a promising ap- Knowledge Acquisition, we start with a brief summary of
proach as humans often have good intuitions about how to these two areas:
ﬁnd acceptable or good solutions to search problems, if they
had to search manually.                               2.1  Probabilistic Search with Genetic Algorithms
  We  embedded our approach in the probabilistic search A number of evolutionary algorithms exist; we base our ap-
framework of Genetic Algorithms (GA). While GAs have a proach on genetic algorithms which is one such algorithm.
reputation as being general purpose, in practice it requires Basic GAs are relatively easy to implement. A solution candi-
usually substantial adaptation effort to the search problem date for the given problem instance is encoded into a genome.
at hand. For complex problems this process may well take A set of genomes makes up a population of potential solu-
months in order to allow the GA to ﬁnd an acceptable solu- tions. The GA performs a search through the solution space
tion within reasonable time.                          by modifying a population of genomes, guided by an evolu-
  We chose a probabilistic search algorithm in which to em- tionary heuristic. When a suitable solution has been identi-
bed the problem speciﬁc knowledge about effective search ﬁed, the search terminates.  GAs usually start with a randomly initialized population able is maintained and initialised with the default conclusion.
of individuals, and guide their search by a ﬁtness function of If a node’s rule condition is satisﬁed, then its conclusion over-
the individuals. In a probabilistic fashion, using operators for writes the current conclusion and the except-link, if it exists,
selection, mutation and crossover, the GA attempts to direct is followed and the corresponding child node is evaluated.
the search to promising areas. I.e. the GA maintains a certain Otherwise, the if-not link is followed, if it exists, and the cor-
population size by replacing less ﬁt individuals by newly gen- responding child node is evaluated. Once a node is reached
erated ones. The new individuals are generated by mutation such that there is no link to follow the current conclusion is
or cross-over based on parent individuals of high ﬁtness. returned as a result.
  Due to their generality and ﬂexibility, GAs have been ap-
plied in many domains, demonstrating their effectiveness on If <true> then ...
hard problems [4; 6]. In very complex domains there are sig-      except
niﬁcant challenges where generic GA techniques do not scale    If a then V   If d then W   If g then Y
                                                                                       except
well. This includes high sensitivity to problem encoding and             except
                                                                                  false         false
operator formulation, selection strategies, as well as selection
                                                                             If ef then X  If hij then Z
of operator weightings, population size and running time[7;
13; 6]. Thus in practice substantial tuning of the GA is nec-
                                                          Figure 1: A simple RDR structure. The dashed line
essary to augment the generic algorithms.
                                                                                           V     ade
  In our approach, we do not use an encoding of our prob- indicates the path taken & rule executed ( ) for ,
                                                          the bold box indicates how action Z would be added for
lem into a binary code as is often seen with conventional GAs. adghij.
Instead, our encoding is a direct representation of a solution
(see below for a better description). Our crossover operator
is designed for this representation and thus is very effective Figure 2.2 shows a simple RDR tree structure. In bold is
in maintaining sub-solution coherence in the genome, and a rule that a user might have added for the case where con-
also identifying which areas of the genome appear ﬁtter than ditions adghij hold, causing action Z to be executed, instead
others. We have a simple yet effective crossover operator, of W.
and chose to concentrate our work on the mutation operator For the purpose of integrating with the Genetic Algorithm,
- mainly because it was better suited to our the knowledge in our approach each case is a genome and conclusions are ac-
acquisition approach.                                 tually a sequence of actions that can be applied to the genome.
  Our approach integrates with the GA a knowledge base  In typical RDR implementations, any KB modiﬁcation
where humans can codify their intuition about useful search would be by adding exception rules, using conditions which
steps and strategies for the given type of problem.   only apply to the current case for which the current knowl-
  In addition, we present a novel method that uses domain edge base is inappropriate. By doing this, it is ensured that
knowledge for the prioritisation of mutation operators, in- proper performance of the KB on previous cases is main-
creasing the GA’s efﬁciency noticeably. Because we have tained.
sufﬁcient domain knowledge in our ﬁtness function, we can Nesting RDRs allows the user to deﬁne multiple RDRs in
identify parts of the genome that are desirable or undesirable a knowledge base, where one RDR rule may use another,
and use that knowledge to inﬂuence mutation strategy. We nested RDR tree in its condition, (and in HeurEAKA! as part
also show how using the mutation history of these identiﬁed of an action, see section 3). I.e. the nested RDR tree is eval-
characteristics to change mutation selection strategy. uated in order to determine whether the condition is satisﬁed.
                                                      A strict hierarchy of rules is required to avoid circular deﬁni-
2.2  Knowledge  Acquisition using Ripple Down         tions.
     Rules
RDR  [3] allows one to add rules to a knowledge base in- 3 HeurEAKA!    - Our  Framework    for
crementally without compromising the previously shown sat-
isfactory performance of the KB. An extension of RDR      Improving   Search  with Domain   Knowledge
allows hierarchical structuring of RDRs - “nested RDR” The HeurEAKA!  (Heuristic Evolutionary Algorithm with
(NRDR) [2]. NRDR allows the re-use of deﬁnitions in a KB, Knowledge Acquisition) framework is composed of a general
as well as the abstraction of concepts, which allows for more GA scheme and a knowledge acquisition (KA) component.
compact KBs.                                            Each genome in the GA population represents a potential
  Single Classiﬁcation Ripple Down Rules (SCRDR) use a solution to the problem to be solved. While searching, the
binary tree where the root node is also called the default node. GA needs to perform a ﬁtness evaluation and the mutation
To each node in the tree a rule is associated, with a condition of a genome. For this it uses the two knowledge bases, the
part and a conclusion which is usually a class - in our case Mutation KB and Fitness KB. The GA presents a genome to
it is an operator application though. A node can have up to the relevant KB, which responds by suggesting a mutation or
two children, one is attached to an except link and the other ﬁtness score. (The crossover function is handled differently,
one is attached to the so-called if-not link. The condition of more details below).
the default rule in the default node is always true and the con- The KA module handles maintenance of the KBs, which
clusion is the default conclusion. When evaluating a tree on contain collections of NRDRs. The NRDRs are incremen-
a case (the object to be classiﬁed), a current conclusion vari- tally developed by the expert through the addition of rules(the next section contains a detailed description of this pro- execution history and also recreating conditions for repeated
cess).                                                testing.
  The Fitness KB contains rules based on past examples  The expert can review actions applied to the genome and
given by the expert about desirable and undesirable traits of make modiﬁcations to the KB if he/she feels they are needed.
genomes. The GA requires a ﬁtness value, so the rules con- The modiﬁcations are typically done by adding exceptions to
tain various calculations the expert adds to reﬂect these traits. the NRDR (in accordance with RDR methodology described
  The Mutation KB similarly contains rules accumulated above), but may also be an edit of an existing rule or the ad-
from expert recommendations. Each rule contains an action dition of a new NRDR.
to be executed under certain conditions. Each action is one In the traditional Ripple Down Rules approach it is as-
or more commands which can modify the genome. The KB  sumed every rule entered is correct and has its reason to be
contains a set of NRDRs which contain these rules. When there, modiﬁcation of a rule may have undesirable side ef-
a genome is presented to the Mutation KB, it is evaluated fects which are often difﬁcult to control. While these are valid
against these NRDRs. In accordance to the RDR algorithm, reasons for not modifying rules, our experiments suggest that
actions which satisfy the relevant conditions are selected for it is sensible to modify rules at the beginning of building a
execution. A non-deterministic element is introduced by let- knowledge base. In particular, for the deﬁnition of mutation
ting the expert attach probabilistic weights to selected NR- operators it proved useful to have this option to modify rules.
DRs and letting a random procedure pick which one to exe-
cute. This allows the expert leeway to speculate about what
the best actions might be, effectively letting the GAs heuris-
tics “decide” the most appropriate action.
  As opposed to other methods related to case-based reason-
ing and GAs (e.g. [12] or [11]), the expert uses past cases
to formulate rules to explain improvements, rather than using
past examples or similar solutions injected into the evolution-
ary process, or trying to extract the rules automatically.
  The overall architecture of HeurEAKA! is domain neutral.
The implementation contains KB management modules, GA,
a graphical user interface as well as range of utilities support-
ing the expert evaluate past searches. This is complemented
with a smaller component that needs to be implemented for
each problem domain containing a relevant solution repre-
sentation. The user interface also requires a small addition to
translate this representation for visualisation.
  A general purpose language is extended with primitives to
make it suitable for describing the domain speciﬁc represen- Figure 2: The interactive screen allows the user to inspect the
tation. Rules entered by the expert are speciﬁed using this individual genome, step through rule application, and amend
simple language, which is loosely based on “C” syntax. The the KB as needed.
rule conditions use logical expressions while actions include
a range of commands, including variables, loops and refer-
ences to other NRDRs which are evaluated analogously to 3.2 Advanced features for supporting Knowledge
function calls. Section 5 gives examples of rule speciﬁcation. Acquisition
3.1  The Knowledge   Acquisition process in           Once a sufﬁciently large KB has been created based on small-
     HeurEAKA!                                        scale evaluation, more automated methods are needed to sup-
                                                      port a user’s interaction:
The overall approach allows the user to run the Genetic Al-
gorithm with the current KBs and monitor or inspect after- Genome Visualisation: One of the strengths of using RDR
wards whether the ﬁtness function computed for an individ- is that the approach is successful in eliciting tacit knowl-
ual as well as the applied mutation operator where appropri- edge [3], since rules are formulated while the system is in
ate/promising steps to do.                            use and with the justiﬁcation of an example. With complex
  To do that, the genetic algorithm can be started, stopped problems (such as is described in section 4), the visualisation
and reset via a graphical user interface. A snapshot of the GA of a solution is very important in allowing the user to form
population is presented visually, from which the user can pick an intuitive understanding. In the evaluation module, there is
an individual for closer inspection.                  immidiate visual feedback when rules are applied.
  Figure 2 shows an individual genome being inspected. A Trigger functions: During the execution of the GA, thou-
user can step through the process of mutation and evaluation sands or even hundreds of thousands of rule applications to all
of that genome as if the solution was part of the GA popu- manner of genomes are made. It is not possible for the expert
lation. Given non-deterministic elements of operator selec- to supervise each case. The user can deﬁne a trigger func-
tion, the interactive debugger maintains complete state de- tion which is applied to each genome during the execution
scriptions, allowing the user to step forward and backwards in of the GA. If the function’s condition is met, an exception isthrown, halting the GA’s execution, providing a pointer to the these we created weightings giving preference to the relevant
individual along with an execution trace of recently applied NRDRs. This was in the ﬁnal stages of reﬁning our KB,
rules.                                                where we allowed 1/4 of all modiﬁcations to be decided ran-
                                                      domly, and 3/4 based on the probabilistic weightings based
                                                      on problem classiﬁcations. With this we saw a measurable
                                Comparing different KBs improvement in our search results.
                               (avg. run for: layout: 30 pin, 25 tracks, density 20)
                           100                          In the experiments conducted in our test domain, we saw a
                                             Minimal KB


                           s 80
                           t                 Small KB measurable improvement in our search.
                           c

                           i 60
                           l


                           f                 Large KB
                           n 40                         Identifying genome modiﬁcations of interest: Some-
                           o
                           C 20                       times a genome mutation plays a role in the long term success
                            0
                             0   200 400 600 800 1000 of that genome, but the immediate result of the mutation is a
                              Total Mutations / Population Size reduction or no change in its ﬁtness. In general, GAs cope
                              (note: this axis is abridged for compactness;
                                only the Large KB reaches 0 conflicts) with this by having a large enough population pool and pre-
                                                      venting premature ﬁtness convergence, so as not to throw out
Figure 3:  NRDR  usage in Figure 4: The “minimal” KB  such genomes too soon. In traditional GAs it is hard to oth-
genome. The legend shows the and “small” KB are unable to erwise account for these cases. Given that we have an expert
number of conﬂicts (less is bet- solve problem. The more mature who can make judgment on individual examples using intu-
ter). Arrow: an NRDR which KB can solve it effectively. ition and hindsight, the ﬁtness function can be augmented to
is much less useful after an er-                      bridge the interval needed to see a promising mutation come
ror was introduced by the expert
(the top graph is before the error,                   to fruition.
the lower one after).                                   The problem comes with identifying these candidate muta-
                                                      tions in order to present them to the expert. We identiﬁed
                                                      all the mutations falling into a window size of 10 actions
  NRDR  usage proﬁle: Execution statistics are kept for each prior to a ﬁtness improvement exceeding a given threshold.
NRDR  execution, recording the frequency of use over many These were collected for review for the expert’s considera-
GA  runs. Comparing the proﬁle of aggregate use of NR- tion. In practice we found there was too much data to effec-
DRs by successful vs less successful genomes (judging by tively judge the cases by hand.
their ﬁtness function and how soon they were eliminated from We then tried using a discounted reward scheme, and some
the GA population), provides some impression of an NRDRs other methods to help reduce the candidate space, but have
“usefulness” and role in GAs lifetime. Figure 3 shows the not yet been able to improve matters. This aspect of the
frequency of a few selected NRDRs relative to the genome’s project are currently being worked on.
age (the examples are from the VLSI case study discussed in
the next section).                                    3.3  Advanced  features for use in Knowledge
  In the less ﬁt genomes, some operators have a high count Acquisition
compared to the ﬁtter genomes. These operators turn out to
be “high churn” operators - they can affect large sections of a Preferences in choosing parts of the genome to mutate:
genome. In the earlier stages of a GA these NRDRs support As hinted at in the genetic algorithms section (2.1), we have
high entropy and thus allow the search to cover more search introduced a novel method of choosing parts of a genome for
space. When the genome is closer to the ideal solution, i.e. mutation. In our ﬁtness function we are able to identify parts
has more desirable characteristics in place, these NRDRs dis- of the genome that are undesirable.
rupt established “good” conﬁgurations. Their relative usage We keep track of the modiﬁcation of those parts over time,
frequency in ﬁtter populations is thus lower.         and give a higher preference weighting to newly arising prob-
  The characterisation of NRDR utility can only provide the lem areas. This is done by keeping a list of existing problem
expert with a rough idea of its “usefulness”. In that context areas and discounting their preference weighting after each
it did contribute somewhat to the intuition the expert devel- ﬁtness evaluation. When it comes to choosing a part of the
oped when doing KA. Where it was found to be quite useful genome to mutate, we normalise these weights and make a
though, was when the expert introduced some modiﬁcation probabilistic choice of the identiﬁed problems. This results in
to the NRDR which inhibited it from functioning as well as newer problem areas having a higher chance of being picked.
previously - meaning that it was much less used in arriving With this scheme we allow some continuity in search direc-
at ﬁt genomes. This helped catch at least a few of errors. In tion, potentially overcoming local minima in the search space.
ﬁgure 3 the arrow indicates such an NRDR.               In the context of our experimental domain, we empirically
                                                      found a 65% discount factor gave the best results. Compared
  Tuning probabilistic weighting of NRDRs: In section 3
we mentioned the notion of using probabilistic weightings to with no discount scheme (giving all identiﬁed problem areas
affect the GA’s selection of NRDRs. This allows the expert equal chance) the number of successful GA trials was 85%
to “tune” the KB when he/she has a good intuition as to what higher, and the successful trials took on average half the time
action might be useful, but is not entirely sure.     to complete.
  In our experiments we identiﬁed a set of NRDRs which  Mutation look-ahead: We added a feature that allows the
would probably be useful for various types of problems. For expert to make use of a “mutation look-ahead” function inthe rule speciﬁcation. This function allows for the compari- layout problems groups wires into mutually exclusive sets,
son of a genome before and after a mutation has been made. one of those sets is exchanged between parents (i.e. the cor-
This effectively allows a local search in the mutation NRDR responding wires are exchanged). The crossover operator is
(similar to a Lamarckian learning mechanism in evolutionary thus highly sensitive to the structure of the problem, as well
algorithms).                                          as interaction between its elements. The formulation of the
  Our knowledge base incorporated local search by com- crossover operator is domain speciﬁc, and we plan to make it
paring the ﬁtness of a genome before and after a candidate part of the knowledge acquisition cycle in future versions.
mutation. This can be used in an RDR at any point, but  Evaluation is done using the evaluation KB. Typically the
was most successfully used for a generalised mutation look- user uses as a ﬁtness criteria the number of layers and con-
ahead. Here, for each mutation a series of 10 steps, each rec- ﬂicts in a layout. The length of wires, number of vias and
ommended  by the mutation KB was used, while the ﬁtness possible cross-talk (electronic interference occurring in par-
values were recorded. The point of highest ﬁtness value in allel wires) are also useful ﬁtness criteria.
the sequence was picked as the ﬁnal mutation.           The mutation KB contains rules designed to manipulate the
  When  using the look-ahead mechanism, GA trials had a layout, typically they would describe the resolution of a con-
signiﬁcantly higher success rate. Each successful trial was ﬂict identiﬁed using the .ﬁndconﬂict command (a primitive
also faster to converge on a solution (as measured in overall function returning a conﬂict found in the layout).
execution time).
                                                        Example  of rules applied to the Switchbox Routing
                                                      problem: Initially, a KB is built up deﬁning operators us-
4  Case  Study  - Detailed VLSI  Routing              ing primitives based on node and wire manipulation. These
In order to demonstrate that genetic algorithms enhanced with form the foundation for more high-level concepts which can
knowledge acquisition can be used to develop algorithms for be used intuitively by an expert.
solving complex combinatorial problems, detailed channel Assuming we start with a KB with relatively high-level
routing as well as switchbox routing, both industrially rele- actions deﬁned, e.g. MoveVerticalSegmentRight, and Move-
vant problems within the realm of VLSI design, were chosen HorizontalSegmentUp. When applied to the example in ﬁg-
to demonstrate the approach.                          ure 5, it seems that the action MoveVerticalSegmentRight is
                                                      unlikely to lead to a promising solution. The expert can
4.1  Domain  Speciﬁcs                                 amend the KB to suggest an alternative action. (see nodes
A channel routing problem (CRP) is given by a channel of a labeled N1 and N2 in ﬁgure 5). In this case, the user will ﬁnd
certain width. On both sides of the channel are connection that MoveVerticalSegmentRight is undesirable, and formulate
points. Each connection point belongs to a certain electrical a rule with condition is Vertical(N1) && is Horizontal(N2)
net and all connection points of the same net need to be phys- && right of(N2.next,N1), and action MoveHorizontalSeg-
ically connected with each other by routing a wire through mentUp(N1.prev). This rule would be added as an exception
the channel and, of course, without two nets crossing. The in the KB. The operators referenced here are deﬁned as RDRs
width of the channel determines how many wires can run in elsewhere in the KB. is Vertical(N1) returns true if the seg-
parallel through the channel. The length of the channel de- ment between N1 and its succeeding node is vertical (change
termines how many connection points on both sides of the in row), is Horizontal(N2) returns true if the segment be-
channel there may be. Furthermore, the layout is done on tween N2 and its successor is horizontal (change in column).
a small number of different layers (e.g. 2 to 4 layers), to right of(N2.next,N1) will return true if the node succeeding
make a connection of all nets without crossing possible at all. N2 lies to the right of N1.
Two adjacent layers can be connected at any point using a
so-called via.
  The switchbox routing problem (SRP) is similar to the CRP
but usually more difﬁcult, as it deals with connections on all
four sides rather than only two. A solution to the CRP and
SRP will be referred to as a layout.
  Genome  Encoding: A genome describes the layout of a
CRP or SRP solution. This takes the form of a list of straight Figure 5: An exception is created by the expert, replacing the ac-
wire segments.                                        tion MoveVerticalSegmentRight suggested by the KB, with the ac-
  Initially, a genome will usually not represent a valid solu- tion MoveHorizontalSegmentUp(N1.prev). (The tags N1 and N2 are
tion as some wires are usually crossing. Only when all those referenced in the text).
crossings have been eliminated and not more than the pre-
scribed number of layers are used would the ﬁtness value of
a genome reach a satisfactory level.                  5   Experiments   and  Results
  Genome  Operations: Individuals in the GA are initialised
with a random wire layout without regard to conﬂicts. The Experiments: In order to test our approach and the imple-
GA operates on a genome by crossover, mutation and eval- mented tool, a KB was created. Initial tests were done with a
uation. However, the GA’s crossover operation is currently KB containing 2 RDRs and 10 rules, later tests were run with
not controlled by a knowledge base. The crossover for our 50 RDRs and 167 rules and 53 RDRs and 182 rules.