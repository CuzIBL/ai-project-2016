                       Minimal and Absent Information in Contexts

                               Floris Roelofsen1   and Luciano Seraﬁni2
                     1 Institute for Logic, Language, and Computation, Amsterdam
                       2 Instituto per la Ricerca Scientiﬁca e Tecnologica, Trento


                    Abstract                            Our second contribution is based on the observation that in
                                                      multi-context systems, new information is derived based on
    Multi-context systems (MCS) represent contextual  the presence of other information only. However, in many
    information ﬂow. We show that the semantics of    natural situations (concrete examples will be given below),
    an MCS is completely determined by the informa-   new information is obtained due to a lack of other informa-
    tion that is obtained when simulating the MCS, in tion. We propose a generalized framework so as to account
    such a way that a minimal amount of information is for such situations. Non-monotonic reasoning techniques are
    deduced at each step of the simulation.           applied to formulate a suitable semantics for this framework.
    In MCS, the acquisition of new information is       We proceed, in section 2, with a brief review of multi-
    based on the presence of other information only.  context system syntax and local model semantics. Minimal-
    We give a generalized account to model situations ity is discussed in section 3, and the generalized framework
    in which information can be obtained as a result of is presented in section 4. We conclude, in section 5, with a
    the absence of other information as well.         concise recapitulation of our main observations and results.1

                                                      2   Preliminaries
1  Introduction
Based on motivational papers by McCarthy [1987] and
Giunchiglia [1993] several formalizations of contextual in-
formation and inter-contextual information ﬂow have been
                                                                                        Mr. 2
proposed. Most notable are the propositional logic of context     Mr.1
developed by McCarthy, Buvacˇ and Mason [1993; 1998], and
the multi-context systems devised by Giunchiglia and Ser-             Figure 1: a magic box.
aﬁni [1994], which later have been associated with the lo-
cal model semantics introduced by Giunchiglia and Ghidini A simple illustration of the main intuitions underlying the
[    ]                  [    ]
2001 . Seraﬁni and Bouquet 2004 have argued from a tech- multi-context system framework is provided by the situation
nical point of view that multi-context systems constitute the depicted in ﬁgure 1. Two agents, Mr.1 and Mr.2, are looking
most general formal framework. This conclusion is supported at a box from different angles. The box is called magic, be-
                                           [    ]
by a more conceptual argument of Benerecetti et.al. 2000 . cause neither Mr.1 nor Mr.2 can make out its depth. As some
  A multi-context system describes the information available sections of the box are out of sight, both agents have partial
in a number of contexts (i.e., to a number of people / agents information about the box. To express this information, Mr.1
/ databases, etc.) and speciﬁes the information ﬂow between only uses proposition letters l (there is a ball on the left) and
those contexts. The local model semantics deﬁnes a system r (there is a ball on the right), while Mr.2 also uses a third
to entail a piece of information, if and only if that piece of in- proposition letter c (there is a ball in the center).
formation is acquired, independently of how the information In general, we consider a set of contexts I, and a language
ﬂow described by the system is accomplished.
                                                      Li for each context i ∈ I. We assume I and {Li}i∈I to be
  Our ﬁrst contribution is based on the observation that the ﬁxed, unless speciﬁed otherwise. Moreover, for the purpose
local model semantics of a multi-context system is com-
                                                      of this paper we assume each Li to be built over a ﬁnite set of
pletely determined by the information that is obtained when proposition letters, using standard propositional connectives.
simulating the information ﬂow speciﬁed by the system, in To state that the information expressed by a formula ϕ ∈
such a way that a minimal amount of information is deduced
                                                      Li is established in context i we use so-called labeled formu-
at each step of the simulation. We deﬁne an operator which las of the form i : ϕ (if no ambiguity arises, we simply refer
suitably implements such a simulation, and thus determines
the information entailed by the system. This operator consti- 1See http://home.student.uva.nl/f.roelofsen/
tutes a ﬁrst constructive account of the local model semantics. for all proofs that are omitted or merely sketched here.to labeled formulas as formulas, and we even use capital let- containing no local models at all (notice that c> satisﬁes any
ters F , G, and H to denote labeled formulas, if the context expression). If C is a set of chains, then the component-wise
label is irrelevant). A rule r is an expression of the form: union of C is the chain, whose ith component consists of all
                                                      local models that are in the ith component of some chain in
                F  ← G  ∧ . . . ∧ G             (1)
                       1         n                    C. If c and c0 are chains, then c \ c0 denotes the chain, whose
                                                       th
where F and all G’s are labeled formulas; F is called the con- i component consists of all local models that are in ci but
                                                             0
sequence of r and is denoted by cons(r); all G’s are called not in ci. Finally, we sometimes say that a local model m
premises of r and together make up the set prem(r). Rules is (not) in c, when we actually mean that m is (not) in some
without premises are called facts. Rules with at least one pre- (any) component ci of c.
miss are called bridge rules. A multi-context system (system
hereafter) is a ﬁnite set of rules. A fact describes informa- 3 Minimality
tion that is established in a certain context, independently of
which information is obtained in other contexts. A bridge We order chains according to the amount of information they
rule speciﬁes which information is obtained in one context, if convey. Intuitively, the more local models a chain component
other pieces of information are acquired in different contexts. contains, the more possibilities it permits, so the less infor-
                                                      mative it is. Formally, we say that c is less informative than
Thus a system can be thought of as a speciﬁcation of contex- 0 0                       0
                                                      c (c  c ), if for every i we have ci ⊇ ci. If, moreover, for at
tual information and an inter-contextual information ﬂow.                   0
                                                      least one i we have ci ⊃ ci, then we say that c is strictly less
Example 1 The situation in ﬁgure 1 can be modeled by the informative than c0 (c ≺ c0).
following system:
                                                      Lemma 1   Let c and c0 be two chains, such that c  c0. Then
            1 : ¬r      ←                             any formula that is satisﬁed by c is also satisﬁed by c0.
            2 : l       ←
                                                        We call c minimal among a set of chains C, iff c is in C
            1 : l ∨ r   ←   2 : l ∨ c ∨ r                              0
            2 : l ∨ c ∨ r ← 1 : l ∨ r                 and no other chain c in C is strictly less informative than c.
                                                      In particular, we call c a minimal solution chain of a system
Mr.1 knows that there is no ball on the right, Mr.2 knows that S, if it is minimal among the set of all solution chains of S.
there is a ball on the left, and if any agent gets to know that
there is a ball in the box, then he will inform the other agent. Theorem 1 Every system S has a unique minimal solution
                                                      chain cS.
A classical interpretation m of language Li is called a local
model of context i. A set of local models is called a local
                                                      Proof.  Let CS be the set of all solution chains of S. CS 6= ∅
information state. Intuitively, every local model in a local >
information state represents a “possible state of affairs”. If a as c ∈ CS for any S. Let cS be the component-wise union
                                                      of all chains in CS. Then cS ∈ CS and cS  c for any
local information state contains exactly one local model, then                                         
it represents complete information. If it contains more than c ∈ CS. So cS is the unique minimal solution chain of S.
one local model, then it represents partial information: more
than one state of affairs is considered possible. A distributed Theorem 2 The semantics of a system S is completely deter-
information state is a set of local information states, one for mined by its unique minimal solution chain cS:
each context. In conformity with the literature, we will refer
to distributed information states as chains.                         S |= F   ⇔    cS |= F
Example 2 The situation in ﬁgure 1, in which Mr.1 knows
that there is no ball on the right but does not know whether Proof. F is true in S iff F is satisﬁed by all solution chains
there is a ball on the left, is represented by a chain whose ﬁrst of S iff F is satisﬁed by the component-wise union cS of all
component [ {l, ¬r} , {¬l, ¬r} ] contains two local models. solution chains of S.                      
As such, the chain reﬂects Mr.1’s uncertainty about the left
section of the box.                                     Theorem (1) and (2) are extremely useful, because they
  A chain c satisﬁes a labeled formula i : ϕ (denoted c |= establish that, to answer queries about a system S, it is no
i : ϕ) iff all local models in its ith component classically longer necessary to compute all solution chains of S; we only
satisfy ϕ. A rule r is applicable with respect to a chain c iff need to consider the system’s minimal solution chain cS.
c satisﬁes every premiss of r. Notice that facts are applicable 3.1 Computing the Minimal Solution Chain
with respect to any chain. A chain c complies with a rule r,
iff, whenever r is applicable with respect to c, then c satisﬁes The minimal solution chain of S can be characterized as the
r’s consequence. We call c a solution chain of a system S iff -least ﬁxpoint of an operator TS, which, intuitively, simu-
                                                                                               ∗
it complies with every rule in S. A formula F is true in S lates the information ﬂow speciﬁed by S. Let S (c) denote
(denoted S |= F ) iff every solution chain of S satisﬁes F . the set of rules in S, which are applicable w.r.t. c. Then we
                                                      deﬁne:
  Let C denote the set of all chains. Notice that, as each Li is
assumed to be built over a ﬁnite set of proposition letters, C is T (c) = c \ {m | ∃r ∈ S∗(c) : m 2 cons(r)} (2)
assumed to be ﬁnite. Let c⊥ denote the chain containing ev-   S
                                      ⊥
ery local model of every context (notice that c does not sat- For every rule r in S that is applicable w.r.t. c, TS re-
isfy any non-tautological expression); let c> denote the chain moves from c all local models that do not satisfy cons(r).Intuitively, this corresponds to augmenting c with the infor- Example 5 (Integration) Let d1 and d2 be as in example 4
mation expressed by cons(r). In this sense, TS simulates the and let d3 be a third database, which integrates the informa-
information ﬂow described by S. As TS(c) is obtained from c tion obtained in d1 and d2, respectively. Any piece of infor-
only by removing local models from it, TS(c) is always more mation that is established by d1 and not refuted by d2 (or vice
informative than c.                                   versa) is included in d3:
  As (C, ) forms a complete lattice, and TS is monotone
and continuous w.r.t. , [Tarski, 1955] yields:                    3 : ϕ ←   1 : ϕ ∧ not 2 : ¬ϕ
                                                                   3 : ϕ ←   2 : ϕ ∧ not 1 : ¬ϕ
Theorem 3 TS has a -least ﬁxpoint, which is obtained af-
                                               ⊥
ter a ﬁnite number of consecutive applications of TS to c . Example 6 (Trust) Let d1, d2, and d3 be as in example 5.
                                                      It would be natural for d to regard d as more trustworthy
Lemma 2  Let c be a chain and let S be a system. Then c is a               3          1
                                                      than d2 (or vice versa). In this case any piece of information
ﬁxpoint of TS if and only if c is a solution chain of S.
                                                      that is established in d1 is automatically included in d3, but
Theorem 4 Let S be a system. Then the minimal solution information obtained in d2 is only included in d3 if it is not
chain cS of S coincides with the -least ﬁxpoint of TS. refuted by d1:
  From theorems 3 and 4 we conclude that the minimal solu-         3 : ϕ ←   1 : ϕ
tion chain cS of a system S is obtained after a ﬁnite number
                                            ⊥                      3 : ϕ ←   2 : ϕ ∧ not 1 : ¬ϕ
of applications of TS to the least informative chain c . But
we can even prove a slightly stronger result:         To model these situations we need rules r of the form:
Theorem 5 Let S be a system and let |S| denote the number
                                                            F ←  G1 ∧ . . . ∧ Gm ∧ not H1 ∧ . . . ∧ not Hn (3)
of bridge rules in S. Then the minimal solution chain cS of S
                                              ⊥
is obtained after at most |S| + 1 applications of TS to c . where F , all G’s, and all H’s are labeled formulas. As before,
                                                      F is called the consequence of r (cons(r)). G , . . . , G are
  In fact, a slightly more involved, but essentially equiva-                                 1      m
                                                      called positive premises of r and together constitute the set
lent procedure was introduced for rather different reasons by
                                                      prem+(r). H  , . . . , H are called negative premises of r and
Roelofsen et.al. [2004]. This procedure was shown to have         1      n
                                                      make up the set prem−(r). A rule does not necessarily have
worst-case time complexity O(|S|2 × 2M ), where M is the
                                                      any premises (m, n ≥ 0). In analogy with commonplace ter-
maximum number of propositional variables in either one of
                                                      minology in deductive database and logic programming the-
the contexts involved in S.
                                                      ory, we call such rules normal rules, and ﬁnite sets of them
Example 3 Consider the system from example 1. Applying normal multi-context systems (normal systems for short). If a
      ⊥
TS to c establishes the facts given by the ﬁrst two rules of rule only has positive premises, we call it a positive rule. Note
the system. But then Mr.2 knows that there is a ball in the box, that a system, which consists of positive rules only conforms
so the next application of TS simulates the information ﬂow with the original deﬁnition of multi-context systems. From
speciﬁed by the third rule of the system: Mr.2 informs Mr.1 of now on we call such systems positive systems.
the presence of the ball. The resulting chain is left unaltered Our aim is to generalize the result obtained section 3, i.e. to
by any further application of TS, and therefore constitutes the deﬁne the semantics of a normal system S in terms of a single
minimal solution chain of S. The fact that this chain satisﬁes canonical chain cS of S, such that, whenever S is a positive
the formula 1 : l reﬂects, as desired, that Mr.1 has come to system, cS coincides with the minimal solution chain of S.
know that there is a ball in the left section of the box. A ﬁrst naive attempt would be to say that a chain c complies
                                                      with a normal rule r iff it satisﬁes r’s consequence, whenever
4  Absent Information                                 it satisﬁes every positive premise of r and does not satisfy
                                                      any negative premise of r. The (minimal) solution chains
Rules of the form (1) only allow us to model a rather restricted of a normal system can then be deﬁned as for positive sys-
kind of information ﬂow, namely one in which new informa- tems. However, as the following example shows, a normal
tion is established based on the presence of other information system does not generally have a unique minimal solution
only. There are many natural situations in which information chain, and worse, its minimal solution chains do not gener-
is obtained as a result of the absence of other information. ally correspond with its intended meaning.
Such situations cannot be modeled by the present formalism.
                                                      Example 7  Let a system S be given by the following rule:
Example 4 (Coordination) Let d1, d2 be two meteorologi-
cal databases that collect their respective data from sensors          1 : p ←   not 2 : q
located in different parts of the country. At the end of the
                                                      Then S has two minimal solution chains:
day each database produces a weather forecast based on its
own data but also on the information obtained by the other               {p}       {q}   
                                                               cp  =
database. For example, d1 predicts rain, if that follows from                          {¬q}
                                                                                 1           2
its own data and if, moreover, d2 does not maintain that it
                                                                         {p}       {q}   
won’t rain:                                                    cq  =
                                                                          {¬p}
              1 : r ← 1 : r ∧ not 2 : ¬r                                         1           2Intuitively, S provides no ground for deriving q in context 2. the information ﬂow speciﬁed by S reproduces exactly c.
Thus, p should be derived in context 1, and every “proper” Namely, if c is assumed to contain valid information, then any
canonical chain of S should satisfy 1 : p. As cq fails to do rule in S, one of whose negative premises is satisﬁed by c, is
so, it should be rejected as such. But how, then, should the certainly not applicable w.r.t. c. Negative premises which are
canonical chain of a normal system be characterized?  not satisﬁed by c can be removed from the remaining rules,
  Extensive research efforts have been involved with an anal- because they do certainly not inhibit those rules from being
ogous question in the setting of logic programming, when, in applicable w.r.t. c. Thus, c is stable iff it corresponds exactly
the late 80’s / early 90’s, a proper semantics for normal logic to the meaning of S00(c), i.e., by Theorem 2, to its minimal
programs was sought. In motivating our characterization of solution chain.
canonical chains for normal multi-context systems, we will
                                                      Example 9  In example 8, as desired, cp is a stable solution
recall some important intuitions and adapt some crucial deﬁ-
                                                      chain of S0, while cq is not.
nitions that have resulted from these efforts.
  A ﬁrst desired property of canonical chains, introduced in For many systems, stability suitably characterizes a unique
the setting of logic programming by Apt et.al. [1988] and canonical chain. There are still some special cases, however,
Bidoit and Froidevaux [1991], is termed supportedness. In- in which it fails to do so. We give some typical examples.
tuitively, a chain c is a supported solution chain of a normal Example 10 Both cp and cq from example 7 are stable solu-
system S iff, whenever c satisﬁes a formula F , then S pro- tion chains of the system given by the following rules:
vides an explanation for why this is so.
Deﬁnition 1 We call a chain c a supported solution chain of            1 : p ←   not 2 : q
a normal system S iff, whenever c satisﬁes a formula F , then          2 : q ←   not 1 : p
S contains a set R of rules, such that:
                                                      Example 11  The following system does not have any stable
              ∀G ∈ prem+(r) : c |= G
  • ∀r ∈ R :                                          solution chains.
               ∀H ∈ prem−(r) : c 2 H
    S                                                                  1 : p ←   not 1 : p
  •   r∈R cons(r) |= F
                                 p                    In both cases we think it is most reasonable to conclude that
Example 8 In example 7, as desired, c is a supported so-                                    ⊥
lution chain of S, while cq is not. But both cp and cq are no information is derived at all, i.e. to regard c as the proper
supported solution chains of the following extension S0 of S: canonical chain.
                1 : p ←   not 2 : q                   Example 12  The following system does not have any stable
                                                      solution chains either.
                 2 : q ←  2 : q
                                                                       1 : p ←   not 1 : p
Intuitively, cp should be accepted as a canonical chain of S0,
but cq should be rejected as such, because the explanation             1 : t ←   not 2 : q
provided by S0 for the fact that cq satisﬁes 2 : q is circular,        2 : r ←   1 : t
i.e., it relies on the very fact that cq satisﬁes 2 : q. So, in
general, the concept of supportedness does not satisfactorily
characterize the canonical chain of a normal system.  Example 12 illustrates that, even if the rest of the system is
  The notion of well-supportedness, ﬁrst introduced for logic unproblematic, one single rule (in this case the ﬁrst one) can
programs by Fages [1991], reﬁnes the notion of supported- cause the system not to have any stable solution chain at all.
ness to avoid the counter-intuitive result obtained in example In this case, t and r should be derived in context 1 and 2, resp.
8. Intuitively, a chain c is a well-supported solution chain of The well-founded semantics, ﬁrst proposed for logic pro-
a normal system S iff, whenever c satisﬁes a formula F , then grams by van Gelder et.al. [1991] avoids the problems en-
S provides a non-circular explanation for why this is so. countered in the above examples. The well-founded model
  Fages also proved this notion to be equivalent to the notion of a program is deﬁned as the least ﬁxpoint of an operator,
of stability, which had been deﬁned somewhat earlier by Gel- which, given an interpretation, determines the atoms that are
fond and Lifschitz [1988]. The results obtained in section 3 necessarily true and those that are necessarily not true with
pave the way for a straightforward adaptation of the notion of respect to the program and the interpretation. It assigns true
stability to our present setting.                     to the former set of atoms, and false to the latter. As a result,
Deﬁnition 2 Let c be a chain and S a normal system. Deﬁne: more atoms may become necessarily true or necessarily not
                                                      true. Corresponding truth values are assigned until a ﬁxpoint
     S0(c)  =  {r ∈ S | ∀H ∈ prem−(r) : c 2 H}        is reached. All atoms that have not been assigned a deﬁnite
     S00(c) =  pos(S0(c))                             truth value, are interpreted as unknown.
          0                   0                         Our approach shares an important intuition with the well-
where pos(S (c)) is obtained from S (c) by removing all neg- founded semantics for logic programs, namely, that while
ative premises from its rules. Then, c is a stable solution chain
                                          00          constructing the canonical chain of a system, it is not only
of S, iff it is the unique minimal solution chain of S (c). important to accumulate the information that can certainly be
  Intuitively, a solution chain c of a system S is stable iff, derived from the system, but also to keep track of information
whenever the information represented by c is assumed, then that can certainly not be derived from the system.  But the two approaches are also fundamentally different. of r are satisﬁed by c and all negative premises of r are not
The well-founded semantics constructs a 3-valued interpre- satisﬁed by a, then r will be applicable with respect to cS:
tation I, which is minimal with respect to a truth order v
         0                                                                             +            
(i.e. I v I iff I makes less atoms true and more atoms false                 ∀G  ∈ prem  (r) : c |= G 
than I0), whereas we seek a chain which is minimal with re- S+(c, a) = r ∈ S            and
spect to an information order  (i.e. c  c0 iff c makes less                ∀H  ∈ prem−(r) : a 2 H 
expressions either true or false than c0). This particularly re-
sults in a different treatment of expressions that are found not If r has a positive premise G, which is not satisﬁed by a,
to be true. To regard these expressions as false, as the well- then G will not be satisﬁed by cS either. If r has a negative
founded semantics does, would be to introduce redundant in- premise H, which is satisﬁed by c, then H will be satisﬁed
formation. Instead, in our setting, such expressions should by cS as well. In both cases r will certainly not be applicable
simply be recorded as not being derivable.            with respect to cS:
                                                                                        +      2    
4.1  Constructing the Canonical Chain                                         ∃G ∈ prem  (r) : a G  
                                                        S−(c, a) =     r ∈ S            or
The canonical chain of a normal system S, henceforward de-
                                                                             ∃H  ∈ prem−(r) : c |= H 
noted by cS, is constructed by an iterative transformation of
a datastructure hc, ai, where:                        For convenience, we write:

  • c is the “canonical chain under construction”. Initially,         ∼             −
    c = c⊥. Every transformation of c removes from it those          S  (c, a) = S \ S (c, a)
    local models that are found not to be in cS. So at any Think of S∼(c, a) as the set of rules that are possibly applica-
    phase of the construction of cS, c contains those local                             +         ∼
                                                      ble with respect to cS, and notice that S (c, a) ⊆ S (c, a),
    models that are possibly in cS, and as such represents whenever c  a, and that S+(c, a) = S∼(c, a), if c = a.
    the information that is necessarily conveyed by cS.
                                                      Lemma 3   If S is a normal system and hc, ai and hc0, a0i are
  • a is the “anti-chain”. Initially, c = c>. Every transfor-
                                                      two chain-anti-chain pairs s.t. hc, ai ≤ hc0, a0i, then we have:
    mation of a adds to it those local models that are found
                                                            +         +  0 0
    to be in cS. So at any phase of the construction of cS, 1. S (c, a) ⊆ S (c , a )
    a contains those local models that are necessarily in c ,
                                                 S      2. S−(c, a) ⊆ S−(c0, a0)
    and as such represents the information that is possibly
                                                            ∼         ∼  0 0
    conveyed by cS.                                     3. S (c, a) ⊇ S (c , a )

Observation 1 By construction, we have c  cS   a.
Therefore, by lemma 1, for any formula F :            Proof.  Suppose that hc, ai ≤ hc0, a0i. Then, by deﬁnition,
                                                      c  c0 and a0  a. Let r be a rule in S. For the ﬁrst statement,
                c |= F ⇒    c |= F
                            S                         suppose that r ∈ S+(c, a). Then c satisﬁes all of r’s positive
                  2           2
                a   F  ⇒    cS  F                     premises, and a does not satisfy any of r’s negative premises.
                                                                                 0     0
                                                     By lemma 1, the same goes for c and a , respectively, which
                                                      implies that r ∈ S+(c0, a0). The second statement is proven
                                                      analogously; the third follows directly from the second. 
  We call a chain-anti-chain pair hc, ai less evolved than an-
other such pair hc0, a0i (denoted as hc, ai ≤ hc0, a0i) iff c is
                                                                                                   +
less informative than c0 and a is more informative than a0. If, Next, we specify how ΨS reﬁnes hc, ai, based on S (c, a)
                                                           ∼
moreover, c is strictly less informative than c0 or a is strictly and S (c, a). Every local model m ∈ ci that does not satisfy
                                                                               +
more informative than a0, then we say that hc, ai is strictly the consequence of a rule in S (c, a) should certainly not be
less evolved than hc0, a0i. We call hc, ai minimal among a set in cS and is therefore removed from c. On the other hand,
CA of chain-anti-chain pairs, iff hc, ai ∈ CA and no other every local model m ∈ ci that satisﬁes the consequences of
                                                                   ∼
chain-anti-chain pair hc0, a0i in CA is strictly less evolved every rule in S (c, a) should certainly be in cS (S provides
than hc, ai. Notice that, if hc, ai is minimal among CA, then no ground for removing it) and is therefore added to a.
c is minimal among {c | hc, ai ∈ CA}.
                                                             Ψ   (hc, ai) = hΨc (hc, ai), Ψa (hc, ai)i
  Given a certain chain-anti-chain pair hc, ai, the intended   S               S         S
transformation ΨS ﬁrst determines which rules in S will (not) where:
be applicable w.r.t. cS, and then reﬁnes hc, ai accordingly.
                                                         c                        +         2         
The canonical chain cS of S will be characterized as the ﬁrst ΨS(hc, ai) = c \ m | ∃r ∈ S (c, a) : m cons(r)
component of the ≤-least ﬁxpoint of ΨS.                  a                          ∼
                                                       ΨS(hc, ai) =   a ∪ {m | ∀r ∈ S (c, a) : m |= cons(r)}
  We ﬁrst specify how ΨS determines which rules will (not)
be applicable w.r.t. cS. Let hc, ai and a rule r in S be given. As (C × C, ≤) forms a complete lattice, and ΨS is mono-
If r has a positive premise G, which is satisﬁed by c, then tone and continuous w.r.t. ≤, [Tarski, 1955] yields:
G will also be satisﬁed by cS. On the other hand, if r has
a negative premiss H, which is not satisﬁed by a, then H Theorem 6 ΨS has a ≤-least ﬁxpoint, which is obtained af-
                                                                                                ⊥  >
will not be satisﬁed by cS either. So if all positive premises ter ﬁnitely many iterations of ΨS, starting with hc , c i.