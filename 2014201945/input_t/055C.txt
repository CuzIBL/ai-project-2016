                                                                                                   Session 18 Automatic Programming 
                                      AUTOMATIC PROGRAM SYNTHESIS IK SECOND-ORDER LOGIC 

                                                          Jared L. Darlington 

                                      Gesellschaft fur Mathematik und Datenverarbeitung 

                                                              Bonn, Germany 


                            Abetract 

       A resolution-based theorem prover, incorpo•
rating a restricted higher-order unification algo•
rithm, has been applied to the automatic synthesis 
of SN0B0L-4 programs. The set of premisses in•
cludes second-order assignment and iteration axi•
oms derived from those of Hoare. Two examples are 
given of the synthesis of programs that compute 
elementary functions. 

                      Descriptive Terms 

Higher-order logic 
Program generation 
Program synthesis 
Resolution 
Theorem proving 
Unification algorithms 

       The automatic synthesis of computer programs, 
like their automatic verification, requires a set 
of rules or axioms to account for such typical 
program features as assignment, iteration and 
branching, and a program capable of making appro•
priate deductions on the basis of these rules or 
axioms. .Following current work of Luckham and 
Buchanan and Manna and Vuillemin we have chosen 
a set of axioms based on those of Hoare5, and we 
are employing a resolution-based theorem prover 
incorporating a reetricted higher-order unifica•
tion algorithm to generate SNOBOL-4 programs from 
this set. 

       To aid the formulation of statements about 
programs, Hoare invented the notation 


whose interpretation 1st "If the assertion P is 
true before initiation of a [piece of)program Q, 
then the assertion R will be true on its comple-
tion'"*. ThUs, his "axiom of assignment" 

DO           Pn {x,- f] P 

says that if P is true before f is assigned to x 
then P will be true after this assignment, where 
"x la a variable identifier", "f is an expression" 
and "P is obtained from P by substituting f for 
all occurrances of x"j and his "rule of iteration" 


Bays that if P is "an assertion which is always 
true on completion of S, provided that it is also 
true on initiation", then "P will still be true 
after any number of iterations of the statement S 
(even no iterations)". The controlling condition 
B or the "while loop" may be assumed to be true 
before exeoution of S, and will be false upon 
termination of the loop. 

       The above notation is, for all its elegance, 
not the most convenient for use by a predicate 
calculus theorem prover. Accordingly, we have 

                                                                   53? In the application of second-order logic to pro­              times for examples of this general type are three 
gram synthesis we have so far found no need for an            to five minutes on the IBM 360/50 at the GMD in 
equivalent of the elimination rule, nor do we need            Bonn. The theorem-proving program, like the pro­
an iteration rule since by definition this applies            grams generated, is coded in SH0B0L-4* Apart from 
only to languages of order higher than two (see                line divisions, the output is an exact transcrip­
Pietrzykowski and Jensen8 for the formal defini­               tion of the computer printouts. 
tions of these rules). Huet9 also dispenses with 
these latter two rules, but in a way that pre­                                      References 
serves deductive completenees. Our algorithm is 
actually an incomplete one for w-order, rather                 1. Luckham, D. C. and Buchanan, J. R. Automatic 
than just second-order, logic, the essential re­                   Generation of Simple Programs; a Logical 
striction being that, since the unification of                     Basis and Implementation. Artificial Intelli­
fj(x.,x„,..,,x) and B proceeds by trying to match                  gence Projeot Report, Stanford University, 
the xi with well-formed pieces of B, B must ac­                    1973. 
tually contain well-formed pieces of the same type 
as the xi. Our program has in fact proved some                2. Manna, Z. and Vuillemin, J. Fixpoint approach 
theorems of order higher than two, such as the                     to the theory of computation. Comm. ACM 15. 
example in section 5 of Pietrzykowski's and Jen­                   526-536, 1972. 
sen's paper1 . 
                                                               3. Hoare, C. A. R. An axiomatio basis for com­
     The generation of resolvents, like the uni­                   puter programming. Comm. ACM 12, 576-580, 
fication algorithm, is based on the first-order                    583, 1969. 
prooedure, in that the substitutions generated in 
the course of unifying two literals are applied to            4. Reference 3, p. 577-
the disjunctively connected "remainders" (that is, 
literals not being resolved on) of the two clauses             5. Pietrzykowski, T. and Jensen, D. A Complete 
being resolved, the one important difference being                 Mechanization of w-order Logic. Report 
that lambda-normalisation is applied during the                    CSRR-2060, University of Waterloo, 1972. 
substitution prooess in order to eliminate lambda-
funations from the resolvent wherever possible.               6. Huet, G. P. A Unification Algorithm for 
The order of generating resolvente is based on the                 Type Theory. IRIA Laboria, 1973. 
"S-L resolution" method for first-order logic of 
Kowalski and Kuehner11, and is essentially a                  7. Robinson, J. A. A machine-oriented logic 
"depth-first" search strategy with resolution only                 based on the resolution principle. Jour. 
on first literals of clauses, but with the aid of                  ACM 12, 23-41, 1965. 
a set of reductive rules that perform algebraic 
simplifications or transformations on the clauses             6. Reference 5. 
generated. Among the problems solved by our pro­
gram are the construction of SNOBOL programs for              9. Huet, G. P. Constrained Resolutioni A Com•
computing the faotorlal function and for iterative                 plete Method for Higher Order Logic. Report 
division! the computer printouts are given fol­                    1117, Case WeBtern Reserve University, 1972. 
lowing the text. By way of explanation, axioms 
CL1 - CL3 are equivalent to those given in the                10. Reference 5* PP. 30-32. 
text, but with the order of literals changed and 
with some implications expressed in terms of con-             11. Kowalski, R. and Kuehner, D. Linear resolu•
Junction and negation, for more effective appli­                   tion with selection function. Artificial 
cation of "first-literal resolution" and for en­                   Intelligence 2. 227-260, 1971 -
suring that the resulting proofs will be linear. 
CL4 in each of the examples formulates the prob­              12. Robinson, J. A. A note on mechanizing higher-
lem) H and N are input variables, and J and K                      order logic Machine Intelligence 5. ed. 
are output variables. In example 1, CL4 says that                  Meltzer, B. and Michle, D., Edinburgh Univer•
if there is a state S1 in whioh K has the same                     sity Press, 123-153, 1969. 
value as J I where J has the same value as N (in 
other words, if K has the same value as Nt), then              13. Manna, Z. and Waldinger, R. J. Toward auto•
s1 is an answer. In example 2, CL4 says that if                    matic program synthesis. Comm. ACM 14« 
K has the same value as H - (Jn N) where the value 
of K is less than that of N (in order wordB, if                    151-165, 1971. 
H ■ J .N + K, K< N) in s1, then s1 is an answer. 
Both of these examples were taken from Manna and 
Waldinger13. Of the reductive rules exhibited by 
the examples, Rule 2 transforms (x+1)! into 
(x!).(x+1); Rule 3 transforms x - ((y+1).z)xinto 
{x - y.z) - z; Rule04 reduces 0.x, x.O or 0 to 
0| Rule 5 reduces x or 01 to 1t Rule 6 reduces 
0+x, x+0 or x-0 to x, and Rule 8 is a "frame" rule 
that reduces IN(lDERT(x.,x2), e.(s2)) to 
IN(IDENT(X1,X2), s1), provided that s2 "does not 
affeot" x. or x2. Host of these rules are purely 
ad hoo and are chosen with the particular examples 
in view; for serious program synthesis one would 
need a more systematically organised algebraic 
aimplifier. Finally, there is a routine called 
"ANSPRIST" that polishes up the answer and prints 
it out in the correct SHOBOL line-by-line format, 
though it may be noted that the sample programs 
are not as "simple" as they could be. Running 

                                                          540 541 