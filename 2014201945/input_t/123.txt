      On Tight Logic Programs and Yet Another Translation from Normal Logic 
                                     Programs to Propositional Logic 

                                        FangzhenLin and JichengZhao* 
                                          Department of Computer Science 
                                Hong Kong University of Science and Technology 
                                      Clear Water Bay, Kowloon, Hong Kong 
                                               {flinjczhao} @cs.ust.hk 

                        Abstract                               1999] is not tight on its completion models. This leads nat•
                                                               urally to the question: is there a normal logic program en•
     Fages showed that if a program is tight, then ev•         coding of the HC problem that is tight on every model of its 
     ery propositional model of its completion is also its     completion? At first glance, a positive answer seems eas•
     stable model. Recently, Babovich, Erdem, and Lif-         ily followed from some known results. For instance, us•
     schitz generalized Fages' result, and showed that         ing any of the known transformation from logic programs to 
     this is also true if the program is tight on the given    propositional theories (e.g. [Ben-Eliyahu and Dechter, 1996; 
     model of the completion. As it turned out, this           Lin and Zhao, 2002]), one can translate a program to a set 
     is quite a general result. Among the commonly             of clauses, and then back to a logic program that is tight (on 
     known benchmark domains, only Niemelii's nor•             every model of the program's completion). While this is cer•
     mal logic program encoding of the Hamiltonian             tainly true, it is not really what we wanted. Given a graph, 
     Circuit (HC) problem does not have this property.         a logic program for solving the HC problem for the graph 
     In this paper, we propose a new normal logic pro•         normally should have two parts - a set of facts that defines 
     gram for solving the HC problem, and show that the        the graph in terms of vertices and edges, and a set of general 
     program is tight on every model of its completion.        rules. While the above reasoning shows that it follows from 
     Experimental results showed that for many graphs,         the known results that for any given graph, a tight logic pro•
     this new encoding improves the performance of             gram can be found for solving the HC problem on the graph, 
     both SMODELS and ASSAT(Chaff2), especially                it does not follow, although it is true as we shall show in this 
     of the latter system which is based on the SAT            paper, that there is a set of general rules such that for any 
     solver Chaff2. We also propose a notion of inher•         given graph, the logic program consisting of the set of gen•
     ently tight logic programs and show that for any          eral rules and the set of facts encoding the graph is always 
     program, it is inherently tight iff all its completion    tight. 
     models are stable models. We then propose a poly•
                                                                 By modifying Niemela's encoding, we propose a new nor•
     nomial transformation from a logic programs to one 
                                                               mal logic program for solving the HC problem, and show 
     that is inherently tight, thus providing a reduction 
                                                               that the program is tight on every model of its completion. 
     of stable model semantics to program completion 
                                                               Compared with Niemelii's encoding, our new encoding yields 
     semantics and SAT. 
                                                               much larger programs - about twice more atoms and rules. 
                                                               Surprisingly, despite its larger size, for both SMODELS (Si•
1 Introduction                                                 mons, 2003] and ASSAT [Lin and Zhao, 2002], the new en•
                                                               coding performs better1 on many randomly generated graphs. 
It is well-known that a stable model of a logic program is     For ASSAT, it also performs better on complete graphs, 
also a logical model of the completion of the logic program,   which are hard for SMODELS and ASSAT partly because 
but the converse is not true in general. However, Fages        of the sizes of the programs corresponding to these graphs. 
[ 1994]. showed that if the program is tight (i.e. it has no   However, our new encoding is slower than Niemelii's on some 
positive loops), then the converse is also true. Recently,     of the hand-coded hard graphs in [Lin and Zhao, 2002], which 
Babovich, Erdem, and Lifschitz 12000] generalized Fages'       are constructed by taking a few copies of a graph and con•
result, and showed that the converse is also true if the pro•  necting these copies by some arcs. While these experimental 
gram is tight on the given model of the completion. As it      results are mixed, they do suggest that it is worthwhile to try 
turned out, this is quite a general result as many interest•   to encode a problem as a logic program whose stable models 
ing logic programs are indeed tight on every model of their    are the same as its completion models. 
completions. In fact, among the commonly known bench•
                                                                 This motivated us to investigate a sufficient and necessary 
mark domains, only Niemelii's normal logic program en•
coding of the Hamiltonian Circuit (HC) problem [Niemela, 
                                                                   All performances in this paper are about computing one stable 
   Corresponding author                                        model of a program. 


NONMONOTONIC REASONING                                                                                                853  condition for a completion model to be a stable model. To          body of a rule and a disjunct in a formula. Its intended 
 this end, we generalize the notion of tight on a set of atoms      meaning is that when we write a body G in a formula, 
 into that of inherently tight on a set of atoms. Specifically,     it stands for true if G is empty, it is the conjunction of 
 we call a program P inherently tight on a set S of atoms if        literals in G with not replaced by otherwise. Notice 
 there is a subprogram such that S is a stable model                here that when n — 0, the equivalence for a becomes 
 of Q and Q is tight on S. We show that for any program, a          a = false; 
 completion model of this program is also its stable model iff   • If G is a constraint in P, then G is in Comp(P). 
 the program is inherently tight on the model. 
   We then propose a polynomial transformation from any          The stable model semantics Given a logic program P 
 logic program to one that is inherently tight on all its com­ without constraints, and a set S of atoms, the Gelfond-
pletion models. This provides a reduction of stable model se­  Lifschitz transformation of P on 5, written as Ps is obtained 
 mantics to completion semantics and SAT. Compared to the      from P as follows: 

one in [Ben-Eliyahu and Dechter, 19961 which needs ri2 ex­       • For each atom q and any rule r in P, if q Necj(r) and 
tra atoms and n3 new rules, and the one in [Lin and Zhao,           q S, then delete the literal not q from the body of 
2002] which docs not introduce any new atom but in the worst        rule r. 
case may add an exponential number of new rules (clauses),       • In the resulted set of rules, delete all those rules that still 
our transformation introduces extra atoms and                       contain a negative literal in their bodies, i.e., for any rule 
           extra rules in the worst case, where n is the num­              if there is a such that then 
ber of atoms in the original program and m the number of            delete this rule r. 
rules. We have observed that in all of the benchmark logic 
programs, the number of rules in a program is smaller than       It is clear that for any set of atoms 5, P$ is a set of rules 
                                                               without any negative literals. Thus Ps has a unique mini­
n2. One useful feature of our transformation is that it is mod­
ular w.r.t adding new facts.                                   mal model, which is the same as the set of atoms that can be 
   This paper is organized as follows. Section 2 introduces    derived from the program by resolution when rules are inter­
some logical preliminaries. Section 3 studies an encoding      preted as implications. We denote this set as Cons{P$). A 
of the HC problem that is tight on every completion model      set S is a stable model iGelfond and Lifschitz, 1988] of P if 
of the program, and reports some experimental results using    and only if s = Cons(Ps). 
SMODELS and ASSAT(Chaff2). Section 4 proposes a notion           Now let P be a program that may have constraints, and P' 
of inherent tightness and a translation from a logic program   the result of deleting all constraints in P. Then a set of atoms 
to one that is inherently tight. Section 5 concludes this paper. is a stable model of P iff it is a stable model of P' and satis­
Due to space limitations, proofs, if given, are only sketched. fies all the constraints in P. 
                                                               Dependency graph The predicate dependency graph [Apt et 
2 Logical Preliminaries                                        ai, 1 of a logic program P is a directed graph with signed 
                                                               edges. The vertices are atoms mentioned in P. There is a 
Logic programs A normal logic program is a set of rules of     directed positive (resp. negative) edge from vertex to q if 
the following form:                                            there is a rule r in P such that Hcad(r) — q and p Pos(r) 
                                                               (resp. Head(r) — q and p Neg(r)). Informally, a posi­
                                                               tive (resp. negative) edge from ;; to q means that q depends 
where a is either an atom or empty, 6's, and c's are atoms.    positively (resp. negatively) on p. 
When a is empty, then the rule is a constraint, and when in =    For any two atoms and in P, there is a positive path 
u = 0 and a is an atom, then the rule is a fact, asserting     from to if and only if there is a path from vertex to 
that a is true. Given a rule r, in the following, we denote by vertex in the dependence graph Gp and the path has no 
Hrad(r) its head atom, and Pos{r) and Ncg(r) the set of        negative edges. 
positive body literals and the set of atoms that occur under 
not in the body of rule r, respectively. For any set X of      3 Tight logic programs and Hamiltonian 
atoms, we denote the setby not(X). So a                            Circuit problem 
rule r can be represented as 
                                                               A program P is tight LLifschitz, 1996] if there exists a level 
                                                               mapping such that, for every rule 
Given a program P, in the following, we let Atorn(P) be the                                                           (3) 
set of atoms in P. 
                                                               inP, 
Program completion Given a logic program P, its comple­                                                               (4) 
tion, Cornp(P) is the union of the constraints in P and the 
                                                               Here a level mapping is a function from literals to ordinals. 
Clark completion [Clark, ] of P with constraints deleted. In 
                                                                 It is not hard to see that a program is tight iff its dependency 
other words, it consists of the following sentences: 
                                                              graph has no positive cycles. For these programs, the program 
  • For any atom a, if are all the rules                      completion semantics under classical logic coincides with the 
     about a in P, then is in Cornp(P).                       stable model semantics. That is, if a program is tight, then a 
     Here we abuse the notation and write G{ both as the      set of atoms is its stable model iff it is a classical propositional 


854                                                                                      NONMONOTONIC REASONING model of its completion [Fages, 1994]. Recently, Babovich,     rest of the rules then make sure, especially by asserting that 
Erdcm, & Lifschitz [2000] generalized this result to "tight on reached(X) must be true for every vertex X, that these paths 
a set of literals" by modifying the mapping to a partial level are in fact a single simple cycle that covers the whole graph. 
mapping with respect to a set of literals. Formally, a program When grounded, this program is not tight because rule (9) 
P is tight on a set S of atoms if there exists a partial level would create cycles among reached(X) atoms. 
mapping with the domain S such that, for every rule (3) in       Another way of solving the problem is to first guess some 
P, if a and b\, • • •, then                                    paths that must go through every vertex exactly once, and 
                                                               then make sure that when we do not count the outgoing arc 
                                                        (5) 
                                                               from the starting vertex, these paths are in fact a single path 
They showed that if a normal logic program is tight on a       that does not contain any cycles. This is the idea behind our 
model of its completion, then this model is also a stable      program in Figure 1 for solving the HC problem: 
model. As a result, if the logic program is tight or tight on 
all models of its completion, to find stable models of this 
logic program, we can reduce it to SAT by computing its 
completion. As it turned out, this is quite a general result as 
many interesting logic programs, including all constraint sat­
isfaction problems and planning problems are indeed tight 
on every model of their completions. In fact, among the 
commonly known benchmark domains, only Niemela's nor­
mal logic program encoding of the Hamiltonian Circuit (HC) 
problem [Niemela, 1999] is not always tight on its completion 
models. 
   As the experimental results reported in [Babovich et ah, 
2000; Huang et al, 2002; Lin and Zhao, 2002] showed, 
for problems like graph coloring and blocks world planning 
whose encodings in logic programs are either tight or tight on 
their completion models, computing a stable model of these 
programs using the state of art SAT solvers on their com­
pletions is a lot faster than SMODELS, which is currently 
the state of art specialized stable model generator for normal 
logic programs. For HC problems, while ASS AT still outper­    Figure 1: An encoding of the HC problem that is always tight 
forms SMODELS, the improvements are not as great as in         on every model of its completion 
other problems. One of the reasons is that when a completion 
model may not be a stable model, ASSAT needs to repeatedly 
                                                                 Notice that rules (16) - (18) are the same as (6) - (8); rules 
call a SAT solver, and the total computation time is directly 
                                                               (12) - (15) are needed to make sure that the chosen path must 
proportional to the number of times a SAT solver is called. 
                                                               go through each vertex exactly once for the cases when a ver­
So to see if this was due to the inherent difficulty of the HC 
                                                               tex has no outgoing (incoming) arcs in the graph; rules (19) 
problem or because of the particularity of Niemela's encod­
                                                               - (21) use the binary predicate rcached(X, Y) to make sure 
ing [Niemela, 1999], we came up with an encoding of the HC 
                                                               that when we delete the chosen outgoing arc from the starting 
problem that is always tight on the completion models. 
                                                               vertex, the chosen path has no cycles, thus must be a single 
   To motivate our new encoding, let's first look at Niemela's 
                                                               path. Formally, it can be shown that the program correctly 
given below: 
                                                               solves the HC problem and is always tight on every comple­
                                                               tion model. 
                                                               Proposition 1 Let be a graph. Let P be the 
                                                               union of the rules in Figure I and facts represented by the 
                                                               graph in terms of vertex(X) and are(X, Y). If M is a stable 
                                                               model of P, then atoms of the form in M correspond 
                                                               to an HC ofG. Furthermore, P is tight on every model of its 
                                                               completion. 
                                                                 Given a graph, compared with Niemela's encoding, ours 
                                                               yields a larger program because reached in our program 
                                                               is a binary predicate. To evaluate the performance of 
                                                               this program, we tried SMODELS (version 2.27) and AS-
As one can see, rules (6) - (8) guess some paths with the      SAT(Chaff2) (version 1.3 with its simplification feature ac­
property that for every vertex X, if X has at least one out­   tivated) on the same set of graphs2 used in [Lin and Zhao, 
going arcs, then exactly one of these arcs is chosen to be 
in the paths, and similarly if X has at least one incoming        2These graphs can be downloaded from ASSAT's web site 
arcs, then exactly one is chosen to be in the paths. The       http://www.cs.ust.hk/assat. 


NONMONOTONIC REASONING                                                                                                855 2002], which divided it into three categories: randomly 
generated graphs, hand-coded hard instances, and complete 
graphs. Our experiments were done on Sun Ultra 5 machines 
with 256M memory running Solaris. The times given be•
low are in CPU seconds as reported by Unix "time" com•
mand, and include the times for running Iparse for grounding 
the input programs. For randomly generated graphs (see Ta•
ble 1), ASS AT clearly performs much better using our new 
encoding; SMODELS also seemed to behave better using the 
new encoding as the run times are more uniform now. How•
ever, for hand-coded graphs (see Table 2), which are formed 
by first taking several copies of a small graph and then se•
lectively adding some arcs to connect these components, the 
old encoding was clearly better for SMODELS. For ASSAT, 
some of the graphs became easier with the new encoding, but 
many became harder. Finally, for complete graphs, which are 
hard partly because they yield huge programs both for the 
new and old encodings, the new encoding turned out to be 
better for ASSAT but a little worse for SMODELS. For in•
stance, for the complete graph with 80 vertices, using the old 
encoding, ASSAT returned with a solution in 3297 seconds, 
and SMODELS in 5072 seconds, but with the new encoding, 
ASSAT took only 170 seconds, but SMODELS needed 12485 
seconds. 
  From these mixed results, it seems that both encodings 
have merits, especially if one uses SMODELS. But the ex•
periments do suggest that the new encoding, being tight on 
every completion model, is better for SAT-based stable model 
generators such as ASSAT and Cmodels3. We would not be 
surprised that with better and faster SAT solvers, the new en•
coding would outperform in all cases. 

4 Inherently tight programs 
Given the potential benefit of tight logic programs for SAT-
based stable model generators, we now investigate a more 
general translation from an arbitrary logic program to one 
whose completion models are always stable models. To this 
end, we first define a notion of inherently tight on a set of 
atoms, and show that it is a sufficient and necessary condition 
for a program's completion model to be a stable model.        Table 1: Randomly generated graphs: nvXaY is a graph with 
Definition 1 A program P is inherently tight on a set of      X vertices and Y arcs. 
atoms S if there is a program Q such that is a 
stable model ofQ and Q is tight on S. 
Proposition 2 A normal logic program is inherently tight on 
all of its stable models. 
Proof: Suppose S is a stable model of P. Notice first that 
each rule in Ps has a corresponding one in P under Gelfond-
Lifschitz transformation. Now define W, a set of rules, as 
follows: 
  1. W is initially empty, and T initially Ps; 

   We also ran experiments for Cmodels 
(http://www.cs.utexas.edu/users/tag/cmodels.html). The results 
were very similar to the ones for ASSAT. We did not include its data Table 2: Hand-coded hard graphs: NxG.M is a graph with N 
here because it is not guaranteed to work when the input program is copies of graph G and some arcs connecting the copies. 
not tight, like Niemela's encoding of the HC problem here. 


856                                                                                      NONMONOTONIC REASONING   2. Choose a fact in T. Suppose r is the corresponding        Example 1 Consider the program  
     rule in P. Now let W be W r, and remove all rules                               . It has two completion models {a, 6} 
     about a from T, and delete a in the bodies of all other   and , but only the first one is a stable model. For this 
     rules in T\                                               program, there are two SCCs: . Algorithm J 
  3. Go back to Step 2 until T is empty.                       transforms it into the following program Q: 
 It is clear that W is tight and S is one of its stable models. 
 Thus P is inherently tight on S.  

 Theorem 1 Let P be a normal logic program, and S a set of 
 atoms. Then S is a stable model of P if and only if S is a 
 model of the completion of P and P is inherently tight on S. 
 Proof: : By Proposition 2 and the fact that a stable model 
 is also a model of a program. 
   : Since S be a model of the completion of P, so S is 
 closed under P. Since P is inherently tight on 5, there 
 is a Q P such that S is a stable model of Q and Q is 
tight on S. Thus S is supported by Q, hence also supported 
by P. Now S is supported by and closed under p thus a 
 stable model of P (by a theorem in [Babovich et al, 2000]). ■ 

   We say that a program is inherently tight if it is inherently 
tight on all models of its completion. Clearly, a program that 
 is tight on all its completion models is inherently tight. By 
Theorem 1, if all models of its completion are also its stable 
model, then the program is inherently tight, and vice versa. 
                                                               The completion of the program contains the following equiv•
   We now give a translation from an arbitrary logic progiam 
                                                               alences  
 to one that is inherently tight. In the following, a set S of 
                                                               Thus it entails So there is only one 
 atoms in a program P is called a strongly connected com•
                                                               model of the completion where a and b are true and c is false, 
ponent (SCC) if there is a path in Gp from u to v for any 
                                                               which is also the only stable model of Q. Notice that in the 
         , and S is not a subset of any other such set, where 
                                                               stable model of P, a is established by the second rule about 
                                                               it. Correspondingly, in the stable model of Q, a  is true while 
 G  is the dependency graph of P.                                                                           2
  p                                                            a\ is not, andright(a, b) is true while right(b, a) is not (a is 
Algorithm 1 Let P be a normal logic program, the following 
                                                               established first, and then b is derived from a). 
algorithm transforms it to an inherently tight program Q. 
Let Q be empty initially.                                      Theorem 2 For any normal logic program P, the program 
  1. For any rule of the form                                  Q output by Algorithm 1 is inherently tight. Furthermore P 
                                                               and Q are equivalent on Atom(P), that is, for any subset S 
                                                               of Atoui(P), S is a stable model of P iff there is exactly one 

                                                               stable model Sf ofQ such that such that Atom(P). 
                                                               Proof: We show only that Q is inherently tight. The second 
                                                               part of the theorem is easier. 
                                                                 We only need to prove that all models of Comp(Q) are its 
                                                               stable models. Let TV be a model of the completion of Q. We 
                                                               show that TV satisfies every loop formula of Q, thus it must 
                                                               be a stable model of Q (Theorem 1 in [Lin and Zhao, 2002]) 
                                                               Suppose L is a positive loop in Q. According to Algorithm 1, 
                                                               either Lisa loop that does not contain any atom of the form 
     In these rules, and variable X will be instan•            right or L is a set of atoms of the form right(u, v). 
     tiated to all atoms a if a and a are in the same SCC;       If L is a loop that does not contain any atom of the form 
                                                               right , suppose v\, • • •, va are all atoms in L. L has 
  2. If is a constraint, add rule r it into Q.                 even number of atoms. Atoms in Atom(P) and newly added 
Intuitively, if a set M is a stable model of Q, then           atoms occur along the loop alternatively. Suppose the loop is: 
iff and the rule r in P Contributes' to the calculation                                  where are newly added atoms 
of COIIS(QM)* meaning that rule r is actually used to derive   and X{ are atoms in Atom(P) If all  
a. right(u, v) is used to record that atom u is used to prove  s) are in N, it is known that right are in N by rule 
v and this is needed to prevent loops. The following example   25. Further considering rule 26, we have right 
illustrates the idea.                                          N for some /, thus rule 23 can not be satisfied for some x[ 


 NONMONOTONIC REASONING                                                                                               857 