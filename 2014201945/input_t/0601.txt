              Discovering Classes of Strongly Equivalent Logic Programs∗

                       Fangzhen Lin                                   Yin Chen
             Department of Computer Science                       Software Institute
     Hong Kong University of Science and Technology            Sun Yat-Sen University
          Clear Water Bay, Kowloon, Hong Kong                    Guangzhou, China


                    Abstract                            Using computers to discover theorems is an old aspira-
                                                      tion. There have been many success stories. For instance,
    We report on a successful experiment of computer- AM  [Lenat, 1979] was reported to be able to come up with
    aided theorem discovery in the area of logic pro- some interesting concepts and theorems in number theory,
    gramming with answer set semantics. Speciﬁcally,  and the remarkable system described in [Petkovsek et al.,
    with the help of computers, we discovered exact   1996] automates the discovery and proofs of identities, espe-
    conditions that capture the strong equivalence be- cially hypergeometric identities involving sums of binomial
    tween a set of a rule and the empty set, a set of a coefﬁcients that are important for the analyses of algorithms.
    rule and another set of a rule, a set S of two rules Yet another example where “interesting” theorems can be dis-
    and a subset of S with one rule, a set of two rules covered almost fully automatically is a recent work by Lin
    and a set of another rule, and a set S of three rules [2004] on discovering state invariants in planning domains.
    and a subset of S with two rules. We prove some   Lin showed that there are ways to classify potentially inter-
    general theorems that can help us verify the correct- esting constraints according to their syntactic properties, and
    ness of these conditions, and discuss the usefulness these constraints can be easily enumerated for most domains.
    of our results in program simpliﬁcation.          Furthermore, for many of these constraints whether they are
                                                      invariants can be checked automatically. As a result, the sys-
1  Introduction                                       tem described in [Lin, 2004] could discover many common
                                                      invariants in planning domains, and for the logistics domain,
This paper makes two contributions. First, it reports on a it could even discover a set of “complete” state invariants.
successful experiment of computer-aided theorem discovery In this paper, we consider the problem of discovering theo-
in logic programming with answer set semantics. Second, it rems about strongly equivalent logic programs under answer
contributes to the theory and practice of logic programming set semantics.
in that the discovered theorems that capture certain classes of The notion of strongly equivalent logic programs is inter-
strongly equivalent logic programs are new, non-trivial, and esting for a variety of reasons. For instance, as Lifschitz et
lead to new program simpliﬁcation rules that preserve strong al. [2001] noted, if two sets of rules are strongly equivalent,
equivalence.                                          then one can be replaced by the other in any logic program re-
  Theorem discovery is a highly creative human process. gardless of the context. Thus identifying strongly equivalent
Generally speaking, we can divide it into two steps: (i) con- sets of rules is a useful exercise that may have applications
jecture formulation, and (ii) conjecture veriﬁcation, and com- in program simpliﬁcation, and the purpose of this paper is
puters can help in both of these two steps. For instance, ma- to discover conditions under which a set of rules is strongly
chine learning tools can be used in the ﬁrst step, i.e. in com- equivalent to another. It is important that these conditions
ing up with reasonable conjectures, and automated deduction need to be computationally effective as in general checking
tools can be used in the second step, i.e. in verifying the cor- if two sets of rules are strongly equivalent is coNP-complete
rectness of these conjectures.                        (c.f.[Lin, 2002]).
  While theorem discovery may make use of learning, these
                                                        To discover these conditions, we follow the methodology
two tasks are fundamentally different. Theorem discovery
                                                      of [Lin, 2004] by looking at domains of small sizes ﬁrst. For
starts with a theory, and aims at ﬁnding interesting con-
                                                      instance, to discover for what kinds of rules r and r we
sequences of the theory, while learning is mostly about                                       1      2
                                                      have that {r } is strongly equivalent to {r }, we consider
induction, i.e. it starts with examples/consequences, and        1                         2
                                                      a language with, say three atoms, and enumerate all possible
aims at ﬁnding a theory that would explain the given exam-
                                                      pairs of rules in this language that are strongly equivalent. We
ples/consequences.
                                                      then conjecture a condition that would capture exactly this set
  ∗Our thanks to Yan Zhang for his comments on an earlier version of pairs of rules, and then try to verify if this conjecture is
of this paper. This work was supported in part by HK RGC CERG true in the general case. In [Lin, 2004], a general theorem
HKUST6170/04E.                                        is proved to automate the veriﬁcation part. We try to do thesame here by proving some general theorems that will make Notice that if m = n = 0, then the left sides of the implica-
the veriﬁcation part easier, almost semi-automatic.   tions in (3) and (4) are considered to be true, and if k = 0,
  This paper is organized as follows. In the next section, we then the right sides of the implications in (3) and (4) are con-
brieﬂy review the basic concepts of logic programming under sidered to be false.
answer set semantics. Then in section 3 we state in more pre-
cise terms the type of theorems that we want to discover. In 3 The problem
section 4 we prove some general theorems that will help us
prove these theorems, and in section 5, we describe some of As we mentioned above, one possible use of the notion of
the theorems that we discovered. We then discuss an applica- strongly equivalent logic programs is in program simpliﬁca-
tion to logic program simpliﬁcation in section 6, and ﬁnally tion. For instance, given a logic program, for each rule r
we conclude this paper in section 7.                  in it, we may ask whether it can be deleted without know-
                                                      ing what other rules are in P , i.e. whether {r} is strongly
2  Logic programming with answer set                  equivalent to the empty set. Or we may ask whether a
   semantics                                          rule r in P can be deleted if one knows that another rule
                                                      r0 is already in P , i.e. whether {r, r0} is strongly equiva-
Let L be a propositional language, i.e. a set of atoms. In lent to {r0}. In general, we may ask the following k-m-n
this paper we shall consider logic programs with rules of the question: Is {r1, ..., rk, u1, ..., um} strongly equivalent to
following form:                                       {r1, ..., rk, v1, ..., vn}? Thus our theorem discovery task is
     h1; · · · ; hk ← p1, · · · , pm, not pm+1, · · · , not pn (1) to come up, for a given k-m-n problem, a computationally
                                                      effective condition that holds if and only if the answer to the
where hi’s and pi’s are atoms in L. So a logic program here
can have default negation (not ), constraints (when k = 0), k-m-n question is positive.
and disjunctions in the head of its rules. In the following, Now suppose we have such a condition C, and suppose
                                                      that when {r , ..., r , u , ..., u } is strongly equivalent to
if r is a rule of the above form, we write Hdr to denote          1    k  1     m
                                                      {r , ..., r , v , ..., v }, it is better to replace {u , ..., u } by
the set {h1, ..., hk}, Psr the set {p1, ..., pm}, and Ngr the 1 k 1   n                       1    m
                                                      {v , ..., v } in the presence of r , ..., r for the purpose of,
set {pm+1, ..., pn}. Thus a rule r can also be written as 1   n                   1    k
                                                      say computing the answer sets of a program. One way to use
Hdr ←  Psr, not Ngr. The semantics of these programs are
given by answer sets as deﬁned in [Gelfond and Lifschitz, this result to simplify a given program P is to ﬁrst choose k
1991]. To save space, we do not give the deﬁnition here. rules in P , and for any other m rules in it, try to ﬁnd n rules
                                                      so that the condition C holds, and then replace the m rules in
  Two such logic programs P1 and P2 are said to be equiva-
lent if they have the same answer sets, and strongly equivalent P by the simpler n rules.
[Lifschitz et al., 2001] (under the language L) if for any logic However, even if checking whether C holds would take
                                                      a negligible constant time, using the above procedure to
program P in L, P ∪ P1 and P ∪ P2 are equivalent. For ex-
ample, {a ← b} and {a ← c} are equivalent, but not strongly simplify a given logic program will be practical only when
equivalent. It can be shown that {a ← not a} and {← not a} k, m, n are all very small or when k is almost the same as the
are strongly equivalent.                              number of the rules in the given program, and m and n are
  Lifschitz et al. [2001] showed that checking for strong very small. Thus it seems to us that it is worthwhile to solve
equivalence between two logic programs can be done in the the k-m-n problem only when k, m, n are small. In particu-
logic of here-and-there, a three-valued non-classical logic lar, in this paper, we shall concentrate on the 0-1-0 problem
somewhere between classical logic and intuitionistic logic. (whether a rule can always be deleted), the 0-1-1 problem
Lin [2002] provided a mapping from logic programs to  (whether a rule can always be replaced by another one), the
propositional theories and showed that two logic programs 1-1-0 problem (in the presence of a rule, whether another rule
are strongly equivalent iff their corresponding theories in can be deleted), the 2-1-0 problem (in the presence of two
propositional logic are equivalent. This result will be used rules, whether a rule can always be deleted), and the 0-2-1
here both for generating example pairs of strongly equivalent problem (if a pair of rules can be replaced by a single rule).
logic programs, and for verifying a conjecture. We repeat it An example of theorems that we want to discover about
here.                                                 these problems is as follows:
  Let P1 and P2 be two ﬁnite logic programs, and L the set For any rule r, {r} is strongly equivalent to the
of atoms in them.                                         empty set ∅ iff (Hdr ∪ Ngr) ∩ Psr 6= ∅. (∗)
Theorem 1 [Lin, 2002] P1 and P2 are strongly equivalent iff
in propositional logic, the following sentence is valid: 4 Some General Theorems
          ^       0    ^          ^
        (    p ⊃ p ) ⊃ [  δ(r) ≡     δ(r)],     (2)   In this section, we prove some general theorems that will help
         p∈L          r∈P1       r∈P2                 us verify whether an assertion like (∗) above is true.
where for each p ∈ L, p0 is a new atom, and for each rule r Let L be a propositional language, i.e. a set of atoms.
of the form (1), δ(r) is the conjunction of the following two From L, construct a ﬁrst-order language FL with equality,
sentences:                                            two unary predicates H1 and H2, three unary predicates Hdr,
                 0            0                       Ps , and Ng for each logic program rule r in L (we assume
 p1 ∧ · · · ∧ pm ∧ ¬p ∧ · · · ∧ ¬p ⊃ h1 ∨ · · · ∨ hk, (3) r     r
                 m+1          n                       that each rule in L has a unique name), and three unary pred-
 p0 ∧ · · · ∧ p0 ∧ ¬p0 ∧ · · · ∧ ¬p0 ⊃ h0 ∨ · · · ∨ h0 . (4)
  1        m     m+1          n    1        k         icates Xi, Yi, and Zi for each positive number i.  Notice that we have used Hdr, Psr, and Ngr to denote sets (a) For any sequence of k+m+n  rules, P    =
of atoms previously, but now we overload them as unary pred- [r1, ..., rk, u1, ..., um, v1, ..., vn], if Φ is true on P ,
icates. Naturally, the intended interpretations of these unary then {r1, ..., rk, u1, ..., um} is strongly equivalent to
predicates are their respective sets.                     {r1, ..., rk, v1, ..., vn}.
Deﬁnition 1 Given a set L of atoms, an intended model of (b)(b.1) If n > 0, then for any sequence  P   =
FL is one whose domain is L, and for each rule r in L, the    [r1, ..., rk, u1, ..., um, v1, ..., vn] of rules with at
unary predicates Psr, Hdr, and Ngr are interpreted by their   most w  + 2(k + m)  atoms, if Φ is true on P ,
corresponding sets of atoms, Psr, Hdr, and Ngr, respectively. then {r1, ..., rk, u1, ..., um} is strongly equivalent
                                                              to {r , ..., r , v , ..., v }.
  Conditions on rules in L, such as Psr ∩ Ngr 6= ∅, will be        1    k  1    n
expressed by special sentences called properties in FL.  (b.2) If n    =     0,  then  for  any  sequence
                                                              P    =    [r1, ..., rk, u1, ..., um] of rules with
Deﬁnition 2 A sentence of FL is a property about n rules
                                                              at most  K  atoms, if Φ is true on P , then
if it is constructed from equality and predicates Xi, Yi, and
                                                              {r1, ..., rk, u1, ..., um} is strongly equivalent to
Zi, 1 ≤ i ≤ n. A property Φ about n rules is true (holds)
                                                              {r1, ..., rk}, where K is w + 2k if w + 2k > 0, and
on a sequence P = [r1, ..., rn] of n rules if Φ[P ] is true in
                                                              K  = 1 otherwise.
an intended model of FL, where Φ[P ] is obtained from Φ by

replacing each Xi by Hdri , Yi by Psri , and Zi by Ngri . The “only if” part of (5) can often be proved with the help
Notice that since Φ[P ] does not mention predicates Xi, Yi, of the following theorem.
Zi, H1, and H2, if it is true in one intended model, then it is Theorem 4 Let L1 and L2 be two languages, and f a func-
true in all intended models.                          tion from L1 to L2. If P1 and P2 are two programs in L1
  As we have mentioned above, we are interested in captur- that are strongly equivalent, then f(P1) and f(P2) are two
ing the strong equivalence between two programs by a com- programs in L2 that are also strongly equivalent. Here f(P )
putationally effective condition. More speciﬁcally, for some is obtained from P by replacing each atom p in it by f(p).
small k, m, and n, we are interested in ﬁnding a property Φ
about k+m+n  rules such that for any sequence of k+m+n Proof: By Theorem 1 and the fact that in propositional logic,
                                                        ϕ                f              L    L       f(ϕ)
rules, P = [r , ..., r , u , ..., u , v , ..., v ],   if  is a tautology, and a function from 1 to 2, then
           1    k  1     m  1     n                   is also a tautology, where f(ϕ) is the formula obtained from
    {r1, ..., rk, u1, ..., um} and {r1, ..., rk, v1, ..., vn} ϕ by replacing each atom p in it by f(p).
    are strongly equivalent if and only if Φ is true on P . (5)
We shall now prove some general theorems that can help us For an example of using the theorems in this section for
verify the above assertion for a class of formulas Φ. proving assertions of the form (5), see Section 5.1.
  First of all, Theorem 1 can be reformulated in FL as fol-
                                           0
lows by reading H1(p) as “p holds”, and H2(p) as “p holds”: 5 Computer aided theorem discovery

Theorem 2 P1 and P2 are strongly equivalent in L iff the Given a k-m-n problem, our strategy for discovering theo-
following sentence                                    rems about it is as follows:
                           ^         ^                  1. Choose a small language L;
     ∀x(H1(x) ⊃ H2(x)) ⊃ [    γ(r) ≡     γ(r)]  (6)

                          r∈P1       r∈P2               2. Generate all possible triples

is true in all intended models of FL, where γ(r) is the con-     ({r1, ..., rk}, {u1, ..., um}, {v1, ..., vn}) (9)
junction of the following two sentences:
                                                          of sets of rules in L such that {r1, ..., rk, u1, ..., um} is
    [∀x(Psr(x) ⊃ H1(x)) ∧ ∀x(Ngr(x) ⊃ ¬H2(x))] ⊃
                                                          strongly equivalent to {r1, ..., rk, v1, ..., vn} in L;
        ∃x(Hd (x) ∧ H (x)),                     (7)
             r       1                                  3. Formulate a conjecture on the k-m-n problem that holds
    [∀x(Psr(x) ⊃ H2(x)) ∧ ∀x(Ngr(x) ⊃ ¬H2(x))] ⊃          in the language L, i.e. a condition that is true for a triple
        ∃x(Hdr(x) ∧ H2(x)).                     (8)       of the form (9) iff it is generated in Step 2;
  In ﬁrst order logic, if a prenex formula of the form ∃~x∀~yB 4. Verify the correctness of this conjecture in the general
is satisﬁable, then it is satisﬁable in a structure with n ele- case.
ments, where n is the length of ~x if it is non-empty, and 1 This process may have to be iterated. For instance, a conjec-
when ~x is empty. We can prove a similar result for our ﬁrst- ture came up at Step 3 may fail to generalize in Step 4, so
order languages and their intended models here.       the whole process has to be repeated. Or we may start with
  From this and Theorem 2, we can show the following the- a language L with, say three atoms but have to increase it to
orem which will enable us to automate the veriﬁcation of the ﬁve or six atoms later on.
“if” part of (5) when the property Φ is in the prenex format. Ideally, we would like this process to be automatic. How-
Theorem 3 Without loss of generality, suppose m ≥ n. If Φ ever, it is difﬁcult to automate Steps 3 and 4 - the number of
is a property about k+m+n rules of the form ∃~x∀~yQ, where possible patterns that we need to examine in order to come
~x is a tuple of w variables, and Q a formula that does not up with a good conjecture in Step 3 is huge, and we do not
have any quantiﬁers, then the following two assertions are have a general theorem that enables us to automate the veriﬁ-
equivalent:                                           cation part in Step 4: while Theorem 3 enables us to automatethe proof of the sufﬁcient part of the assertion (5) for a class Lemma 3 For any two rules r1 and r2 that mentions at most
of formulas Φ, we do not have a similar result for the neces- three atoms, {r1, r2} and {r1} are strongly equivalent iff one
sary part. Theorem 4 helps, but it is not fully automatic yet. of the following two conditions is true:
Nonetheless, computers play a crucial role in all steps, and
                                                        1. {r2} is strongly equivalent to ∅.
in the following we report some of the theorems discovered
                                                          Ps   ⊆ Ps   Ng   ⊆ Ng       Hd   ⊆ Hd   ∪ Ng
using the above procedure.                              2.   r1    r2 , r1     r2 , and r1      r2    r2 .
                                                      Lemma 4   If there are two rules r and r such that {r , r }
5.1  The 0-1-0 problem                                                            1     2           1  2
                                                      and {r2} are strongly equivalent, but none of the two con-
This problem asks if a given rule is strongly equivalent to the ditions in Lemma 3 hold, then there are two such rules that
empty set, thus can always be deleted from any program. We mention at most three atoms.
have the following experimental result:
                                                      Theorem 6 (The 1-1-0 problem) Lemma 3 holds in the gen-
Lemma 1  If a rule r mentions at most three distinct atoms, eral case, without any restriction on the number of atoms in
then {r} is strongly equivalent to ∅ iff (Hdr ∪Ngr)∩Psr 6= ∅. r1 and r2.
Using Theorem 4, we can show the following result:    Proof: The condition in Lemma 3 is equivalent to the follow-
Lemma 2  If there is a rule r of the form (1) such that {r} ing property
is strongly equivalent to ∅ and (Hdr ∪ Ngr) ∩ Psr 6= ∅ is   [∃x.(X (x) ∨ Z (x)) ∧ Y (x)] ∨
not true, then there is such a rule that mentions at most three   2       2       2
atoms.                                                      {[∀x.Y1(x) ⊃ Y2(x)] ∧ [∀x.Z1(x) ⊃ Z2(x)] ∧
                                                                [∀x.X1(x) ⊃ (X2(x) ∨ Z2(x))]}
Proof: Suppose {r} is strongly equivalent to ∅, Hdr ∩ Psr =
∅, and Psr ∩ Ngr = ∅. Suppose L is the set of atoms in r, being true on [r1, r2]. Thus the “if” part follows from
and a, b, c are three new atoms. Let                  Theorem 3 and Lemma 3, by noticing that the above property
                                                                      ∃x∀~y.Q
                   (  a    p ∈ Hdr                    can be written as      as required by Theorem 3. The
             f(p) =   b    p ∈ Psr                    “only if” part follows from Lemma 3 and Lemma 4.
                      c    otherwise
                                                        Thus if a rule r2 cannot be deleted on its own but can be
By Theorem 4, {f(r)} is also strongly equivalent to ∅. By deleted in the presence of another rule r1, then it must be
the construction of f, we also have Hdf(r) ∩ Psf(r) = ∅, and the case that r2 is redundant given r1: if the body of r2 is
Psf(r) ∩ Ngf(r) = ∅, and that f(r) mentions at most three satisﬁed, then the body of r1 is satisﬁed as well; furthermore,
distinct atoms.
                                                      r2 can entail no more than what can be entailed by r1 (Hdr1 ⊆

                                                      Hdr2 ∪ Ngr2 ).
Theorem 5 (The 0-1-0 problem) Lemma 1 holds in the gen- Osorio et al. [2001] proved that {r1, r2} and {r1} are
eral case, i.e. without any restriction on the number of atoms strongly equivalent if either Psr1 ∪ Ngr1 = ∅ and Hdr1 ⊆
in r.                                                 Ngr2 or Psr1 ⊆ Psr2 , Ngr1 ⊆ Ngr2 , and Hdr1 ⊆ Hdr2 .
                                                      More recently, Eiter et al. [2004] showed that {r1, r2} and
Proof: We notice that the condition in Lemma 1, (Hdr ∪
                                                      {r1} are strongly equivalent if r1 s-implies r2 [Wang and
Ngr) ∩ Psr 6= ∅, is equivalent to the following property
                                                      Zhou, 2005], i.e. if there exists a set A ⊆ Ngr2 such that

             ∃x.(X1(x) ∨ Z1(x)) ∧ Y1(x)               Hdr1 ⊆ Hdr2 ∪ A, Ngr1 ⊆ Ngr2 \ A, and Psr1 ⊆ Psr2 .
                                                        As one can see, these are all special cases of the “if” part of
           [r]
being true on . Thus the “if” part follows from Theorem 3 Theorem 6. Our result is actually more general. For instance,
and Lemma 1. The “only if” part follows from Lemma 1 and these special cases do not apply to {(c ← b, not c), (←
Lemma 2.                                              b, not c)} and {c ← b, not c}, but one can easily show that
                                                      these two sets are strongly equivalent using our theorem.
  The “if” part of the theorem is already well-known, ﬁrst From our solution to the 1-1-0 problem, we can derive a
                      [   ]
proved by Osorio et. al. 2001 . To the best of our knowl- solution to the 0-1-1 problem.
edge, the “only if” part is new.
  We notice here that there is no need to consider the 0-n-0 Theorem 7 (The 0-1-1 problem) For any two rules r1 and
problem for n > 1, because for any n, {r1, ..., rn} is strongly r2, {r1} and {r2} are strongly equivalent iff one of the fol-
equivalent to ∅ iff for each 1 ≤ i ≤ n, {ri} is strongly equiv- lowing two conditions is true:
alent to ∅.                                             1. {r1} and {r2} are both strongly equivalent to ∅.

5.2  The 1-1-0 and the 0-1-1 problems                   2. Psr1 = Psr2 , Ngr1 = Ngr2 , and Hdr1 ∪Ngr1 = Hdr2 ∪
                                                          Ng  .
The 1-1-0 problem asks if a rule can always be deleted in    r2
the presence of another rule, and the 0-1-1 problem asks if a Proof: By Theorem 1, it is easy to see that {r1} and {r2}
rule can always be replaced by another one. We ﬁrst solve are strongly equivalent iff {r1, r2} and {r1} are strongly
the 1-1-0 problem, and the solution to the 0-1-1 problem will equivalent and {r1, r2} and {r2} are strongly equivalent.
come as a corollary.
  We have the following experimental result for the 1-1-0 Thus two rules r1 and r2 can always be interchanged if ei-
problem:                                              ther both of them can be deleted (strongly equivalent to theempty set) or they have the same body, and the same conse- Lemma 6 If there are three rules r1,r2 and r3 such that
quences when the body is true. For instance, {a ← B, not a} {r1, r2, r3} and {r1, r2} are strongly equivalent, but none of
and {← B, not a} are strongly equivalent no matter what B the four conditions in Lemma 5 hold, then there are three such
is, because the two rules have the same body, and when the rules that mention at most six atoms.
body is true, the same consequence - a contradiction. As an-
                                                      Theorem 8 (The 2-1-0 problem) Lemma 5 holds in the gen-
other example, {a; b ← not a} and {b ← not a} are strongly
                                                      eral case, without any restriction on the number of atoms in
equivalent because the two rules have the same body, and,
                                                      r , r , r .
when the body is true, the same consequence, b.        1  2  3
                                                        The conditions in Lemma 5 (Theorem 8) are rather com-
5.3  The 2-1-0, 0-2-1, and 0-2-2 problems             plex, and the reason why it is difﬁcult to automate Step 3 of
                                                      the procedure at the beginning of the section. These condi-
The 2-1-0 problem asks if a rule can be deleted in the presence
                                                      tions capture all possible cases when r is “subsumed” by r
of another two rules, the 0-2-1 problem asks if two rules can                         3                 1
                                                      and r , and are difﬁcult to describe concisely by words. We
be replaced by a single rule, and the 0-2-2 problem asks if 2
                                                      give some examples.
two rules can be replaced by another two rules. Similar to
                                                                                       r   (a  ←  a ) r
the previous subsection, the solution to the 0-2-1 and 0-2-2 Consider the following three rules: 1: 2 1 , 2:
                                                      (a  ←   not a )    r   (a  ←   not a )
problems will follow from a solution to the 2-1-0 problem. 3      1 , and 3:   3         2 . We have that
                                                      {r , r , r } and {r , r } are strongly equivalent because the
  We have the following experimental result for the 2-1-0 1 2 3       1  2
                                                      condition (4) in Lemma 5 holds.
problem:                                                                            0
                                                        However, if we change r3 into r3 : a2 ← not a3, then
                                                                   0
Lemma 5  For any three rules r1, r2 and r3 that mentions at P1 = {r1, r2, r3} and P2 = {r1, r2} are not strongly equiv-
most six atoms, {r1, r2, r3} and {r1, r2} are strongly equiva- alent: one could check that condition (4.3) in Lemma 5 does
lent iff one of the following four conditions is true: not hold, and indeed, while P2 ∪ {a1 ← a2} has a unique
                                                      answer set {a3}, P1 ∪ {a1 ← a2} has two answer sets {a3}
 1. {r } is strongly equivalent to ∅.
      3                                               and {a1, a2}.
 2. {r1, r3} is strongly equivalent to {r1}.            It is also easy to show by Theorem 8 that a3 ← not a2
                                                      is “subsumed” by {(a1; a2; a3 ←), (a2; a3 ← a1)}, and
 3. {r2, r3} is strongly equivalent to {r2}.
                                                      a2; a3 ← is “subsumed” by {(a2 ← a1), (a3 ← not a1)}.
 4. There is an atom p such that:                       With the results that we have, the following theorem will
                                                      yield a solution to the 0-2-1 problem.
    4.1 p ∈ (Psr1 ∪ Psr2 ) ∩ (Hdr1 ∪ Hdr2 ∪ Ngr1 ∪ Ngr2 )
                                                      Theorem 9 (the 0-2-1 problem) For any three rules r1, r2
    4.2 Hdri \ {p} ⊆ Hdr3 ∪ Ngr3 and Psri \ {p} ⊆ Psr3
        and Ng  \ {p} ⊆ Ng  , where i = 1, 2          and r3, {r1, r2} and {r3} are strongly equivalent iff the fol-
              ri          r3                          lowing three conditions are true:
    4.3 If p ∈ Psr1 ∩ Ngr2 , then Hdr1 ∩ Hdr3 = ∅
                                                        1. {r1, r2, r3} and {r1, r2} are strongly equivalent.
    4.4 If p ∈ Psr2 ∩ Ngr1 , then Hdr2 ∩ Hdr3 = ∅
                                                        2. {r1, r3} and {r3} are strongly equivalent.
  Notice that in principle, given a language L, every subset
of L can be the Hd, Ps, or Ng of a rule. Thus when the size of 3. {r2, r3} and {r3} are strongly equivalent.
L is six, there are in principle (26)3 − 1 = 262, 143 possible
                                                        For example, {(a2 ←  a1, not a3), (a1; a2 ← not a3)}
rules, and 262, 1433 triples of them. Thus at ﬁrst glance, it
                                                      is strongly equivalent to {a2 ← not a3}. While {(←
seems that verifying Lemma 5 experimentally using the cur-
                                                      a2, a3), (← a3, not a2)} is strongly equivalent to {← a3},
rently available computers would be impossible. However,
                                                      {(a1 ←  a2, a3), (a1 ← a3, not a2)} is not strongly equiva-
we can cut the numbers down signiﬁcantly with the results
                                                      lent to {a1 ← a3}. Similarly, we have the following theorem
that we already have proved. First, we only have to consider
rules that do not have common elements in Hd, Ps, and Ng: if Theorem 10 (the 0-2-2 problem) For any four rules r1, r2,
either Hd and Ps or Ps and Ng have a common element, then r3, r4, {r1, r2} and {r3, r4} are strongly equivalent iff the
by Theorem 5, this rule can be deleted; if Hd and Ng have following four conditions are true:
common elements, then according to Theorem 7, we obtain 1. {r1, r2, r3} and {r1, r2} are strongly equivalent.
a strongly equivalent rule by deleting the common elements
                                                        2. {r , r , r } and {r , r } are strongly equivalent.
in Hd. Second, we do not have to consider isomorphic rules: 1  2  4       1  2
if there is a one-to-one onto function from L to L that maps 3. {r3, r4, r1} and {r3, r4} are strongly equivalent.
              0  0  0
{r1, r2, r3} to {r1, r2, r3}, then these two sets of rules are 4. {r , r , r } and {r , r } are strongly equivalent.
essentially the same except for the names of atoms in them. 3  4  2       3  4
By using a certain normal form for triples of rules that avoids
these redundant cases, we ended up with roughly 120 mil- 6 Program simpliﬁcation
lion triples of rules to consider for testing Lemma 5, which We have mentioned that one possible use of the notion of
took about 10 hours on a Solaris server consisting of 8 Sun strongly equivalent logic programs is in simplifying logic
Ultra-SPARC III 900Mhz CPUs with 8GB RAM.             programs: if P and Q are strongly equivalent, and that Q
  The following lemma is the reason why we need to con- is “simpler” than P , we can then replace P in any program
sider a language with six atoms for this problem.     that contains it by Q.