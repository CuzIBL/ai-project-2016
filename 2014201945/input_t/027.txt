                                    Propagate the Right Thing: 
                    How Preferences Can Speed-Up Constraint Solving 
          Christian Bessiere Anais Fabre*                           Ulrich Junker 
                LIRMM-CNRS (UMR 5506)                                 ILOG S.A. 
                        161, rue Ada                            1681, route des Dolines 
                F-34392 Montpellier Cedex 5                       F-06560 Valbonne 
                 (bessiere,fabre}@lirmm.fr                         ujunker@ilog.fr 

                     Abstract                          we argue that preferences are one possible way for achiev•
                                                       ing this. As stated by Jon Doyle [Doyle, 2002], preferences 
    We present an algorithm Pref-AC that limits arc 
                                                       can play different roles and need not only represent desider•
    consistency (AC) to the preferred choices of a tree 
                                                       ata or user preferences. Preferences can also control reason•
    search procedure and that makes constraint solv•
                                                       ing meaning that only preferred inferences and domain reduc•
    ing more efficient without changing the pruning 
                                                       tions are made. Non-interesting deductions are left apart, but 
    and shape of the search tree. Arc consistency thus 
                                                       may become preferred if additional information is added. 
    becomes more scalable and usable for many real-
                                                         We can easily apply this idea to typical backtrack tree 
    world constraint satisfaction problems such as con•
                                                       search algorithms that maintain arc consistency when solv•
    figuration and scheduling. Moreover, Pref-AC di•
                                                       ing a constraint satisfaction problem. The crucial question is 
    rectly computes a preferred solution for tree-like 
                                                       whether such an algorithm needs to achieve full arc consis•
    constraint satisfaction problems. 
                                                       tency and to remove all values that are not in the maximal 
                                                       arc-consistent domains. In [Schiex el al, 1996], it has been 
1 Introduction                                         shown that the fails of the algorithm can be preserved if it 
In the last two decades, considerable research effort in Al simply constructs some arc-consistent domains, thus reduc•
has been spent on studying the complexity of reasoning and ing the computation effort in average. In this paper, we show 
problem solving, and the identification of tractable cases has that the search algorithm can preserve its search strategy and 
become an important goal of this research. However, even the overall pruning if 1. the search algorithm uses a vari•
if a problem can be solved by a polynomial algorithm, or if able and value ordering heuristics that can be described by 
search effort can be reduced by polynomial algorithms, this (static) preference ordering between variables and values and 
might not be sufficient for real-world AI systems that face 2. we construct some arc-consistent domains that contain the 
challenges such as interactivity and real-time. We give some preferred values. The first condition is, for example, met by 
examples from constraint satisfaction, where achieving arc configuration problems [Junker and Mailharro, 2003]. The 
consistency might be too costly, although it is tractable: second condition needs some careful adaption of the defini•
                                                       tion of arc consistency, which will be elaborated in this paper. 
  1. Web-based configuration systems must provide a re•
    sponse in a few seconds while serving multiple users. We can thus cut down the propagation effort in each search 
    Although arc consistency (AC) is an appropriate tech• node without changing the search tree, which leads to an over•
    nique to handle compatibility constraints, it will be too all gain if the search tree will not be explored completely. 
    expensive in presence of large product catalogs.   This happens if we are interested in one solution, the best so•
                                                       lution in a given time frame, or preferred solutions as defined 
  2. Constraint-based approaches to problems such as   in [Junker, 2002]. Arc consistency thus becomes more scal•
    scheduling, vehicle routing, and personnel planning of• able and less dependent on the size of domains, which opens 
    ten only maintain bound consistency in constraints in• exciting perspectives for large-scale constraint programming. 
    volving time or other variables with large domains. As We first introduce preferences (Section 2), use them to de•
    a consequence, complex rules on breaks, rest-times, and fine a directed constraint graph (Section 3), and discuss arc 
    days-off provide only a poor propagation, which could consistency for preferred values (Sections 4 and 5). After 
    be improved by arc consistency.                    introducing preferred supports (Section 6), we present the al•
These examples illustrate that domain reduction does not de• gorithm Pref-AC (Section 7). 
velop its full power in many real-world applications of con•
straint programming. Pruning power and, indirectly, solution 2 Preferred Solutions 
quality are traded against short response times. In certain cir•
                                                       In this paper, we consider constraint satisfaction problems of 
cumstances, such a trade-off can be avoided if the system fo•
                                                       the following form. Let X be a set of variables and V be a set 
cuses on the right deductions and computations. In this paper, 
                                                       of values. A constraint c of arity kc has a sequence of vari•
   * A. Fabre's work has been carried out during a stay at ILOG. ables X(c) = {x1 (r),..., Xkt (c)} from X and a relation Rc 


CONSTRAINTS                                                                                            191 that is a set of tuples from . Let C be a set of constraints. 
The triple (X',D, C) is then called a constraint network. 
   A solution of a constraint network is a mapping v of the 
variables X to the values in V such that each constraint is sat•
isfied, i.e., for all constraints 
c. The constraint satisfaction problem (CSP) involves finding 
a solution of a constraint network. 
   Alternatively, we can represent the tuples by sets of assign•
ments of the form x = v between a variable :/: and a value v: 
if t is a tuple of the form then let f be the 
set of assignments . Furthermore,                                                    Figure 1: Directed constraint graphs. 

let Rc be the set of all /. such that t is in Rc. This represen•
tation will facilitate definitions and permits a straightforward        3 Preference-based Constraint Graph 
logical characterization of a constraint c: 

                                                                (1)     In order to find a preferred solution, the search procedure 
                                                                        chooses values for more important variables first. We will 
                                                                        see later that, in some cases, we can anticipate a preferred so•
   We further suppose that the following kinds of preferences           lution and construct it by a constraint propagation procedure 
are given. For each variable x, we introduce a strict partial or•       if this procedure does not only follow the constraints, but also 
der among the possible values for x. This order                         the order among the variables used by the search procedure. 
can represent user preferences as occurring in configuration 
                                                                           In order to illustrate this, consider the bipartite constraint 
problems (cf. [Junker and Mailharro, 2003]). For example, 
                                                                        graph that connects the constraints with their variables. Sup•
the user might prefer a red car to a white car. Projecting pref•
                                                                        pose that a variable x is connected via a constraint c to a less 
erences on criteria to decision variables [Junker, 2002] also 
                                                                        important variable y. Search will then assign a value to x 
produces such an order (e.g. if price is minimized then try 
                                                                        and cause a domain reduction of y. We can thus say that the 
cheaper choices first). Furthermore, we consider a strict par•
                                                                        preferences ■<# among variables impose an order on the con•
tial order between variables. For example, we 
                                                                        straint graph. For example, we will say that the arc between 
may state that choosing a color is more important than choos•
                                                                        x and c leads from x to c and the arc between y and c leads 
ing a seat material and should therefore be done first. In the          from c to y. 
sequel, we suppose that the search procedure follows these 
preferences as described in [Junker and Mailharro, 2003] and              We generalize this idea for arbitrary constraints and par•
always chooses a variable and value for                                 tial orders. For each constraint r, we consider the -<.v-best 
x. These preferences are given statically and thus correspond           variables in X(c) and call them input variables. The other 
to a static variable and value ordering heuristics, which are           variables are called output variables. Arcs lead from input 
usually sufficient for configuration problems.                          variables to a constraint and from there to the output vari•
                                                                        ables. 
  We now use the preferences to define a preferred solu•
tion. First of all we choose a linearization of the orders              Definition 2 Let (X,D,C) be a constraint network and 
and in form of total orders that are super•                             be a strict partial order between the variables X. A variable 
sets of the strict partial orders. Then we consider a ranking           x of a constraint c is called input variable of c iff there is 
                of the variables in that corresponds to the             no other variable y of c s.t. x. A variable x of c is 
order We then consider two                                              called output variable of c iff it is not an input variable of c. 
solutions v1 and v2 and compare them lexicographically                  The directed constraint graph of the CSP is a bipartite graph 
                                                                        having the nodes and the set of arcs (x, c) s.t. x is an 
                                                                        input variable of c and (c, y) s.t. y is an output variable of c. 
                                                                 > 
                                                                           Each constraint can have several input and several output 
                                                                        variables (cf. figure 1). If its variables are not comparable at 
                                                                (2) 
                                                                        all, then the constraint has no output variable, and it is a sink 
Definition 1 A solution v of a constraint network P :=                  of the directed graph. However, each constraint has at least 
(X,D,C) is a preferred solution ofV iff there exist lineariza­          one input variable. As a consequence, no constraint can be a 
tions is the                                                            source of the directed graph. In general, the graph is not guar•
best solution of P w.r.t. the lexicographical order defined by          anteed to be acyclic, but it satisfies the following properties 
                                                                        which are needed for our proofs: 1. All variables of 
   These preferred solutions correspond to the extreme solu•            the set X are sources of the constraint graph since they cannot 
tions in [Junker, 20021 that are obtained if all variables are          be an output variable of any constraint. However there can be 
criteria. If the search procedure follows the preferences then          sources that are not variables. 2. If x is a ranking of 
its first solution is a preferred solution. Hence, the notion of        the variables X that is a linearization of then each output 
a preferred solution helps us to forecast the first solution in         variable of each constraint is preceded by at least one input 
certain cases.                                                          variable of the same constraint in the ranking. 


192                                                                                                                      CONSTRAINTS 4 Arc Consistency 

A typical systematic search procedure for solving CSPs pro•
ceeds as follows. In each search node, it picks an assignment 
x — v for such a variable and creates two successor nodes, 
one for x = v and one for Throughout the paper, 
we assume that a variable x is eliminated from the CSP of a 
successor node by a preprocessing step iff it has only a single 
possible value. Usually, the search procedure will not select 
an arbitrary assignment from the set A of all assignments, 
but tries to anticipate certain cases where the sub-tree of an 
assignment does not contain a solution. If such an assign•                    Figure 2: Activating best values and their supports. 
ment is detected it is eliminated from A. Hence, the search 
procedure maintains a set of possible assignments and 
considers only elements of A. Each solution can be charac•               5 Arc Consistency for Preferred Values 
terized by a subset of A that assigns exactly one value to each          Maintaining arc consistency prunes the search tree as follows: 
variable and that satisfies all constraints. As a consequence, 
if a variable x has no assignment in A then no solution exists            PI if the current CSP is not arc-consistent then a fail occurs. 

and the search will backtrack. In the sequel, we write Ax for             P2 if a value v is not arc-consistent for a variable x then the 
the set of possible values for x in A.                                        search procedure will not assign v to x inside the current 
   Assignments can be eliminated from A if they lack a sup•                   subtree. 
port on a constraint: 
                                                                         In general, it is desirable to eliminate as many values as pos•
Definition 3 A set of assignments S is a support for x — v in            sible and to determine A* by applying an algorithm of the 
c iff 1. is an element of and 2.                                         AC-family. The worst-case complexity is for 
                                                                         binary constraints, if domains contain thousands or more el•
Let be the set of supports for x = v in c. In this pa•                   ements as is the case for typical scheduling problems and for 
per, we are interested in search procedures that maintain arc            configuration problems with large catalogs, then maintaining 
consistency, i.e. that work with a set A where all assignments           arc consistency is no longer feasible in practice. 
have supports S that are subsets of A and this on all relevant 
                                                                            Interestingly, it is not necessary to eliminate all assign•
constraints: 
                                                                         ments of A - A*. [Schiex et al., 1996] try to construct a 
Definition 4 Let A be a set of assignments. A subset A of A              small arc-consistent set A. If this succeeds then prunning rule 

is an arc-consistent set of A iff I. Ad is non empty for any             PI cannot be triggered. This can lead to saving time in search 
                                          and all constraints c of       nodes that are arc-consistent. We now want to extend this 
x, there exists a support S for (x = v) in c such that S is a            policy to pruning rule P2 in the case that the original search 
subset of A.                                                             procedure uses the given preferences between variables and 
                                                                         values in order to select an assignment. In each search state, 
If an arc-consistent set A contains a single assignment for              the search procedure will pick variable and try out 
each variable then A corresponds to a single solution. If no             its possible values starting with the best value 
arc-consistent set exists then the CSP has no solution. Other•
                                                                         is not in the maximal arc-consistent set A* then we must en•
wise, there is a unique maximal arc-consistent set, which is a 
                                                                         sure that it will be eliminated when constructing the subset A. 
superset of all arc-consistent sets, including the solutions. 
                                                                         However, if then we must ensure that it will 
   Alternatively, we can consider a set of some assignments              be in the subset A. 
for which we know that they do not belong to any solution:                 Instead of doing a pure elimination process, we interleave 
                                                                         construction and elimination steps and determine a set F of 
                                                                 (3)     activated assignments, called focus, and a set of eliminated 
                                                                         assignments. Both sets will grow during the process and our 
This can easily be translated to a reflexive and monotonic op•           purpose is to obtain as arc-consistent set. This set 
erator that eliminates additional assignments:                           is sufficient for our search procedure if some properties are 
                                                                         satisfied: 1. If x is a variable and 
                                                                         among the non-eliminated values of x then the search proce•
                                                                         dure might pick x — v as next assignment. Hence, we have to 
Fixed-point theory then tells us that the transitive closure of          activate it. 2. If an activated assignment does not have a sup•
this operator is the unique minimal set satisfying equation              port on a constraint c then it has to be eliminated. 3. The sup•
3. As a consequence, the set A* of all assignments that are              ports for the activated, but non-eliminated assignments must 
not eliminated (i.e., is the unique maximal set                          only contain activated and non-eliminated elements. 4. We 
satisfying item 2 of def. 4. If each variable has an assignment          need to guarantee that contains at least one value per 
in A* then A* is the maximal arc-consistent assignment. If               variable if an arc-consistent set exists. Since all variables can 
some variable has no assignment in A* no arc-consistent as•              be reached from the sources via constraints, we activate best 
signment exists. In this case, no solution exists.                       values for all sources of the directed constraint graph. 


CONSTRAINTS                                                                                                                             193 194                                                                                                       CONSTRAINTS                                                                build an arc-consistent set of assignments that is not neces•
                                                               sarily maximal. We base Pref-AC on AC-6 [Bessiere, 1994] 
                                                               for keeping the discussion simple, although we could exploit 
                                                               the bi-directionality of supports [Bessiere et al., 1999]. 
                                                                 AC-6 assigns an ordering of the values in the domain of 

                                                               every variable x1, checks one support (the first one or small•
                                                               est one with respect to the ordering) for each assignment 

                                                               (xi = a) on each constraint to prove that (x1 = a) 
                                                               is currently viable. When (xj = b) is found as the small•
     Figure 4: A preferred solution as stable activation.      est support of (xi — a) on c{xiXj), (xi = a) is added to 
                                                                          the list of assignments currently having (xj = b) 
                                                               as smallest support. If b is removed from the domain of Xj 
   Given a preferred solution, we cannot guarantee that each 
                                                               then AC-6 looks for the next support in the domain of xj for 
assignment has a preferred support in all constraints. How•    each assignment 
ever, if certain assignments in a solution S have preferred 
                                                                 Pref-AC uses the domain order , a chosen linearization 
supports then S is preferred solution: 
                                                               of when looking for supports in the domain of a variable 

Proposition 5 Let S be a solution of V. Suppose that           xi. Furthermore, Pref-AC seeks supports only for elements 
and all are strict total orders. If each assignment x — v      of A, the current set of activated and non-eliminated values 
to a source x of the direct constraint graph is a best assign• (i.e., uses following data structure: 
ment for x in the unique maximal arc-consistent set A* and 
                                                                 • Each variable x, has a fixed initial domain D , ordered 
all activated assignments to input variables of a constraint                                                   x
                                                                    by containing all values from V except those 
c have a preferred support on c in S then S is a preferred 
                                                                    that violate unary constraints on x . The set 
solution of P.                                                                                       i
                                                                                contains the values of that have not yet 
   When constructing a stable activation, we choose preferred       been removed by arc consistency. 
supports since this may result in a preferred solution: 
                                                                 • A is the arc-consistent set built by the algorithm. 
Proposition 6 Suppose that and all are strict total 
                                                                 • For each contains the 
orders. Let S1,..., Sm be an activation sequence and let 
                                                                    assignments that are currently supported by (x  = a). 
         be defined as in def 6. If J. each S1, is a preferred                                                   i
support for some x = v on some constraint c s.t. x is an input 
                                                                 • The set Pending contains all the 4-tuples (xia,Xj,b) 
variable of c or x = v is unsupported on c in 
                                                                    such that a support for (xt = a) has to be sought on 
and 2. 
                                                                    r(xi,xj). this means that all values of Xj 
preferred solution of P.                                            better than b have already been removed. 
   The first condition in proposition 6 can be satisfied by al•  Pref-AC uses two subprocedures (Algorithm 1). Procedure 
ways activating preferred supports. The second condition can 
                                                               Activate(xia) adds an assignment (xi = a) to A, the 
be met by CSPs of a special structure. For example, consider   set of current activated values. It initializes its data structure 
a binary constraint network such that its directed constraint  CS, and puts in Pending all the information needed to look 
graph forms a tree (cf. figure 4). In this case, we only acti•
                                                               for supports for (x, = a) on the constraints involving xt. 
vate supports for assignments to input variables, but not for 
                                                               Function BestSup(x,, a, xj , b, B) looks for the best support 
assignments to output variables, since each variable can only 
                                                               for (xi = a) in D which is less preferred than b (we know 
be an output variable of a single constraint. This result is, 
                                                               there is no support in B better than or equal to b). B is 
for example, interesting for certain car configuration prob•
                                                               or A   depending on the status of x  (input variable or not). 
lems and permits us to efficiently take into account certain       Xj                            i
user preferences.                                                Pref-AC works as follows. We start by initializing to 
   Preferred solutions are also obtained in trivial cases:     DX, for each x1 (line 1 of Algorithm 2). We activate the best 
                                                               value of the best variable (line 2). Then, 4-tuples (x1, a, xj, b) 
Proposition 7 Suppose that and all are strict total 
                                                               are taken from the Pending set (line 4), and if (x1 = a) is still 
orders. If there is a preferred solution containing all best 
                                                               active (line 5), we must seek a (new) support c for it. If x1 is 
values of all variables in A then it is equal to all activations an input variable of we seek the support in because 
produced by preferred supports.                                we have to ensure that it will be a preferred support (lines 6 to 
                                                               7). Otherwise, we first seek a support c among the activated, 
7 Algorithm Pref-AC                                            but non-eliminated elements (line 8). If none exists, we seek 
In this Section, we present Pref-AC, an algorithm for comput•  a new best support c (line 10) following def. 6. If c exists, we 
ing an arc-consistent set A from a binary constraint network   activate it if not yet done, and store the fact that it supports 
[X,D,C). This algorithm activates supports for unsupported     (x1 = a) (lines 11 to 13). If no support exists for (xt — a), 
elements and meets the requirements of definitions 5 and 6,    we remove it from and A (line 14). If is empty, a 
and proposition 6. An algorithm for non-binary constraints     wipe out stops the procedure (line 15). If xi is a source of the 
can be derived from this one. Pref-AC follows the princi•      directed constraint graph and the best value of is not in 

ples of lazy arc consistency [Schiex et al, 1996] in order to                was the best of AX, and , the best value 


CONSTRAINTS                                                                                                           195 