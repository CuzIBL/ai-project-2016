                          Reasoning with Inconsistent Ontologies             ∗

                    Zhisheng Huang, Frank van Harmelen, and Annette ten Teije
           Department of Computer Science, Vrije Universiteit Amsterdam, The Netherlands
                            {huang, Frank.van.Harmelen,    annette}@cs.vu.nl


                    Abstract                          allows the interpretation of a language in which a truth as-
                                                      signment may map both a letter and its negation to true. Ex-
    In this paper we present a framework of reasoning tending the idea of Levesque’s limited inference, [Schaerf and
    with inconsistent ontologies, in which pre-deﬁned Cadoli, 1995] proposes S-3-entailment and S-1-entailment
    selection functions are used to deal with concept for approximate reasoning with tractable results. Based on
    relevance. We examine how the notion of ”concept  Schaerf and Cadoli’s S-3-entailment, [Marquis and Porquet,
    relevance” can be used for reasoning with inconsis- 2003] presents a framework for reasoning with inconsistency
    tent ontologies. We have implemented a prototype  by introducing a family of resource-bounded paraconsistent
    called PION (Processing Inconsistent ONtologies), inference relations. Several policies, e.g., the linear order pol-
    which is based on a syntactic relevance-based se- icy, are proposed. [Chopra et al., 2000] incorporates the local
    lection function. In this paper, we also report the change of belief revision and relevance sensitivity by means
    experiments with PION.                            of Schaerf and Cadoli’s approximate reasoning method, and
                                                      shows how relevance can be introduced for approximate rea-
1  Introduction                                       soning in belief revision. Both approaches, Marquis’, and
There are two main ways to deal with inconsistency in on- Chopra’s, depend on syntactic selection procedures for ex-
tologies. One is to diagnose and repair it when we en- tending the approximation set.
counter inconsistency[Schlobach and Cornet, 2003]. Another Our approach borrows some ideas from Schaerf and
approach is to simply avoid the inconsistency and to apply Cadoli’s approximation approach, Marquis and Porquet’s
a non-standard reasoning method to obtain meaningful an- paraconsistent reasoning approach, and Chopra, Parikh, and
swers. In this paper, we will focus on the latter, which is Wassermann’s relevance approach. However, our main idea is
more suitable for the setting in the web area. For example, relatively simple: given a selection function, which can be de-
in a typical Semantic Web setting, one would be importing ﬁned on the syntactic or semantic relevance, we select some
ontologies from other sources, making it impossible to repair consistent sub-theory from an inconsistent ontology. Then
them, and the scale of the combined ontologies may be too we apply standard reasoning on the selected sub-theory to
large to make repair effective.                       ﬁnd meaningful answers. If a satisfying answer cannot be
  The classical entailment in logics is explosive: any formula found, the relevance degree of the selection function is made
is a logical consequence of a contradiction. Therefore, con- less restrictive thereby extending the consistent subtheory for
clusions drawn from an inconsistent knowledge base by clas- further reasoning.
sical inference may be completely meaningless. The general
task of an inconsistency reasoner is: given an inconsistent on- The main contributions of this paper are:(1) a set of formal
tology, return meaningful answers to queries.         deﬁnitions to capture reasoning with inconsistent ontologies;
  Reasoning with inconsistency is a well-known topic in log- (2) a general framework for reasoning with inconsistent on-
ics and AI. Many approaches have been proposed to deal with tologies based on selection functions, and (3) some prelimi-
inconsistency [Benferhat and Garcia, 2002; Beziau, 2000; nary experiments with an implementation of this framework
Lang and Marquis, 2001; Marquis and Porquet, 2003]. The using a rather simple selection function.
development of paraconsistent logics was initiated to chal-
                                                        This paper is organised as follows: Section 2 overviews in-
lenge the ‘explosive’ problem of the standard logics. Para-
                                                      consistency in the Semantic Web by examining several typi-
consistent logics [Beziau, 2000] allow theories that are in-
                                                      cal examples and scenarios. Section 3 presents the framework
consistent but non-trivial. There are many different para-
                                                      of reasoning with inconsistent ontologies. Section 4 discusses
consistent logics. Most of them are deﬁned on a semantics
                                                      the selection functions Section 5 presents the algorithms of
which allows both a letter and its negation to hold for an in-
                                                      PION. Section 6 examines how the syntactic-relevance-based
terpretation. Levesque’s limited inference [Levesque, 1989]
                                                      selection function can be developed. Section 7 describes a
  ∗The work reported in this paper was partially supported by the prototype of PION and its evaluation. Section 8 discusses
EU-funded SEKT project (IST-506826).                  further work and concludes the paper.2  Inconsistency in the Semantic Web                  Σ  |= φ. There are only two answers to that query: either
Here are several typical scenarios which may cause inconsis- ‘yes’ (Σ |= φ), or ‘no’ (Σ 6|= φ). A ‘yes’ answer means
tencies in the Semantic Web.                          that φ is a logical consequence of Σ. A ‘no’ answer, how-
                                                      ever, means that φ cannot be deduced from Σ, because we
  • Inconsistency Caused by mis-presentation of de-   usually don’t adopt the closed world assumption when using
    faults. A notorious example is the bird ontology in an ontology. Hence, a ‘no’ answer does not imply that the
    which penguins are speciﬁed as the birds which cannot negation of φ holds given an ontology Σ. For reasoning with
    ﬂy, however, it contradicts the default statement ’birds inconsistent ontologies, it is more suitable to use Belnap’s
    are ﬂying animals’. Another typical example is the Mad-          [           ]
                1                                     four valued logic Belnap, 1977 to distinguish the following
    Cows ontology in which MadCow is speciﬁed as a Cow four epistemic states of the answers:
    which eats brains of sheep, whereas a Cow is considered
    as a vegetarian by default.                       Deﬁnition 1
  • Inconsistency Caused by Polysemy Polysemy refers to (a) Over-determined: Σ |≈ φ and Σ |≈ ¬φ.
    the concept of words with multiple meanings. An ex- (b) Accepted: Σ |≈ φ and Σ 6|≈ ¬φ.
    ample of an inconsistent ontology which is caused by (c) Rejected: Σ 6|≈ φ and Σ |≈ ¬φ.
    polysemy is the MarriedWoman Example[Huang et al., (d) Undetermined: Σ 6|≈ φ and Σ 6|≈ ¬φ.
    2004], in which the concept ’married woman’ is used For an inconsistency reasoner it is expected that is able to
    to refer both to a woman who has a husband and to a return meaningful answers to queries, given an inconsistent
    woman who  had a husband but may no longer have one. ontology. In the case of a consistent ontology Σ, classical
  • Inconsistency through Migration from Another For- reasoning is sound, i.e., a formula φ deduced from Σ holds
    malism When an ontology speciﬁcation is migrated  in every model of Σ. This deﬁnition is not preferable for an
    from other data sources, inconsistencies may occur. As inconsistent ontology Σ as every formula follows from it us-
    has been found in [Schlobach and Cornet, 2003], the ing classical entailment. However, often only a small part of
    DICE terminology (a DL terminology in the Intensive Σ has been incorrectly constructed or modelled, while the re-
    Care domain) suffered from a high number of unsatis- mainder of Σ is correct. Therefore, we propose the following
    ﬁable concepts due to its migration from a frame-based deﬁnition of soundness.
    system. In order to make the semantics as explicit as Deﬁnition 2 (Soundness) An inconsistency reasoner |≈ is
    possible, a very restrictive translation has been chosen sound if the formulas that follow from an inconsistent the-
                                         [
    to highlight as many ambiguities as possible. Schlobach ory Σ follow from a consistent subtheory of Σ using classical
                  ]
    and Cornet, 2003 shows the inconsistent ontology spec- reasoning, namely, the following condition holds:
    iﬁcation in the Brain Example, in which a brain is con-
    sidered to be both a body part and a central nervous sys- Σ |≈ φ ⇒ (∃Σ0 ⊆ Σ)(Σ0 6|= ⊥ and Σ0 |= φ).
    tem, whereas body parts and nervous systems are con-
    sidered to be disjoint.                             In other words, the |≈-consequences must be justiﬁable on
  • Inconsistency Caused by Multiple Sources. When a  the basis of a consistent subset of the theory. Note however,
    large ontology speciﬁcation is generated from multiple that in the previous deﬁnition the implication should not hold
    sources, in particular when these sources are created by in the opposite direction. If the implication would also hold
    several authors, inconsistencies easily occur. There are in the opposite direction it would lead to an inconsistency
    three possibilities for ontology reconciliation: merging, reasoner, which returns inconsistent answers. For example
    aligning, or integrating. No matter whether a new on- if {a, ¬a} ⊆ Σ, then the inconsistency reasoner would re-
    tology is generated by merging or integrating multiple turn that both a and ¬a hold given Σ, which is something
    sources, in both cases general consistency objectives are we would like to prevent. Hence, the inconsistency reasoner
    rather difﬁcult to achieve.                       should not return answers that follow from any consistent
                                                      subset of Σ, but from speciﬁcally chosen subsets of Σ. In
                                                      other words, the selection of speciﬁc subsets on which |≈ will
3  Formal Deﬁnitions                                  be based is an integral part of the deﬁnition of an inconsis-
We do not restrict ontology speciﬁcations to a particular lan- tency reasoner, and will be discussed in more detail in the
guage (although OWL and its underlying description logic next section.
are the languages we have in mind). In general, an ontology
language can be considered to be a set that is generated by Deﬁnition 3 (Meaningfulness) An answer given by an in-
a set of syntactic rules. Thus, we can consider an ontology consistency reasoner is meaningful iff it is consistent and
speciﬁcation as a formula set. We use a non-classical entail- sound. Namely, it requires not only the soundness condition,
ment for inconsistency reasoning. In the following, we use |= but also the following condition:
to denote the classical entailment, and use |≈ to denote some          Σ |≈ φ ⇒ Σ 6|≈ ¬φ.
non-standard inference relation, which may be parameterized
to remove ambiguities.                                An inconsistency reasoner is said to be meaningful iff all of
  With classical reasoning, a query φ given an ontology Σ the answers are meaningful.
can be expressed as an evaluation of the consequence relation
                                                      Because of inconsistencies, classical completeness is impos-
  1http://www.daml.org/ontologies/399                 sible. We suggest the notion of local completeness:Deﬁnition 4 (Local Completeness) An inconsistency rea-
soner is locally complete with respect to a consistent subthe-
ory Σ0 iff for any formula φ, the following condition holds:
                 Σ0 |= φ ⇒ Σ |≈ φ.
Since the condition can be represented as:
                 Σ 6|≈ φ ⇒ Σ0 6|= φ,
local completeness can be considered as a complement to the
soundness property. An answer to a query φi on Σ is said to
be locally complete with respect to a consistent set Σ0 iff the
following condition holds:
                  0
                Σ  |= φi ⇒ Σ |≈ φi.
Deﬁnition 5 (Maximality) An inconsistency reasoner is
maximal iff there is a maximal consistent subtheory such that
its consequence set is the same as the consequence set of the
inconsistency reasoner:
∃(Σ0 ⊆ Σ)((Σ0 6|= ⊥) ∧ (∀Σ00 ⊃ Σ0 ∧ Σ00 ⊆ Σ)(Σ00 |= ⊥)∧
               ∀φ(Σ0 |= φ ⇔ Σ |≈ φ)).
We use the same condition to deﬁne the maximality for an
answer, like we do for local completeness.
                                                                Figure 1: Linear Extension Strategy.
Deﬁnition 6 (Local Soundness) An answer to a query Σ |≈
φ is said to be locally sound with respect to a consistent set
Σ0 ⊆ Σ, iff the following condition holds:            Deﬁnition 7 (Selection Functions) A selection function s is
                            0                         a mapping s : P(L)×L×N   → P(L) such that s(Σ, φ, k) ⊆
                 Σ |≈ φ ⇒ Σ  |= φ.                    Σ.
Namely, for any positive answer, it should be implied by the Deﬁnition 8 A selection function s is called monotonic if
                        0
given consistent subtheory Σ under the standard entailment. the subsets it selects monotonically increase or decrease, i.e.,
Proposition 3.1                                       s(Σ, φ, k) ⊆ s(Σ, φ, k + 1), or vice verse.
(a) Local Soundness implies Soundness and Meaningfulness. For monotonically increasing selection functions, the initial
(b) Maximal completeness implies Local Completeness.  set is either an emptyset, i.e., s(Σ, φ, 0) = ∅, or a ﬁxed set
Given a query, there might exist more than one maximal con- Σ0 when the locality is required. For monotonically decreas-
sistent subset and more than one locally-complete consistent ing selection functions, usually the initial set s(Σ, φ, 0) = Σ.
subset. Such different maximally consistent subsets may give The decreasing selection functions will reduce some formulas
different |≈-consequences for a given query φ. Therefore, ar- from the inconsistent set step by step until they ﬁnd a maxi-
bitrary (maximal) consistent subsets may not be very useful mally consistent set.
for the evaluation of a query by some inconsistency reasoner. Monotonically increasing selection functions have the ad-
The consistent subsets should be chosen on structural or se- vantage that they do not have to return all subsets for consid-
mantic grounds indicating the relevance of the chosen subset eration at the same time. If a query Σ |≈ φ can be answered
with respect to some query.                           after considering some consistent subset of the ontology Σ
                                                      for some value of k, then other subsets (for higher values of
4  Selection Functions                                k) don’t have to be considered any more, because they will
                                                      not change the answer of the inconsistency reasoner.
An inconsistency reasoner uses a selection function to de-
termine which consistent subsets of an inconsistent ontology
should be considered in its reasoning process. The general 5 Strategies
framework is independent of the particular choice of selec- An inconsistency reasoner that uses a monotonically increas-
tion function. The selection function can either be based on ing/decreasing selection function will be called an inconsis-
a syntactic approach, like Chopra, Parikh, and Wassermann’s tency reasoner that uses a linear extension strategy and a lin-
syntactic relevance [Chopra et al., 2000], or based on seman- ear reduction strategy respectively.
tic relevance like for example in computational linguistics as A linear extension strategy is carried out as shown in Fig-
in Wordnet [Budanitsky and Hirst, 2001].              ure 1. Given a query Σ |≈ φ, the initial consistent subset Σ0
  Given an ontology (i.e., a formula set) Σ and a query φ, is set. Then the selection function is called to return a consis-
a selection function s is one which returns a subset of Σ at tent subset Σ00, which extends Σ0, i.e., Σ0 ⊂ Σ00 ⊆ Σ for the
the step k > 0. Let L be the ontology language, which is linear extension strategy. If the selection function cannot ﬁnd
denoted as a formula set. We have the general deﬁnition about a consistent superset of Σ0, the inconsistency reasoner returns
selection functions as follows:                       the answer ‘undetermined’ (i.e., unknown) to the query. If theset Σ00 exists, a classical reasoner is used to check if Σ00 |= φ 6 Syntactic Relevance-based Selection
holds. If the answer is ‘yes’, the inconsistency reasoner re- Functions
turns the ’accepted’ answer Σ |≈ φ. If the answer is ‘no’,
                                                      [                ]
the inconsistency reasoner further checks the negation of the Chopra et al., 2000 proposes syntactic relevance to measure
query Σ00 |= ¬φ. If the answer is ‘yes’, the inconsistency the relationship between two formulas in belief sets, so that
reasoner returns the ’rejected’ answer Σ |≈ ¬φ, otherwise the the relevance can be used to guide the belief revision based
current result is undetermined (def.1), and the whole process on Schaerf and Cadoli’s method of approximate reasoning.
is repeated by calling the selection function for the next con- Given a formula set Σ, two atoms p, q are directly relevant,
sistent subset of Σ which extends Σ00.                denoted by R(p, q, Σ) iff there is a formula α ∈ Σ such that
                                                      p, q appear in α. A pair of atoms p and q are k-relevant with
  It is clear that the linear extension strategy may result in too
                                                      respect to Σ iff there exist p1, p2, . . . , pk ∈ L such that: (a)
many ‘undetermined’ answers to queries when the selection p, p are directly relevant; (b) p , p are directly relevant,
function picks the wrong sequence of monotonically increas- 1                    i  i+1
                                                      i = 1, . . . , k − 1; and (c) pk, q are directly relevant (i.e., di-
ing subsets. It would therefore be useful to measure the suc- rectly relevant is k-relevant for k = 0).
cesfulness of (linear) extension strategies. Notice, that this The notions of relevance above are based on propositional
depends on the choice of the monotonic selection function. logics. However, ontology languages are usually written in
  In general, one should use an extension strategy that is not some fragment of ﬁrst order logic. We extend the ideas of rel-
over-determined and not undetermined. For the linear exten- evance to those ﬁrst-order logic-based languages by restrict-
sion strategy, we can prove that the following properties hold: ing relevance to the co-occurrence of only the predicate let-
                                                      ters or constant symbols. The following deﬁnition specialises
Proposition 5.1 (Linear Extension) An inconsistency rea- the general deﬁnition of relevance for the case where φ is a
soner using a linear extension strategy satisﬁes the following formula in an ontology.
properties:                                             Given a formula φ, we use I(φ), C(φ), R(φ) to denote the
(a) never over-determined,                            sets of individual names, concept names, and relation names
(b) may be undetermined,                              that appear in the formula φ respectively.
(c) always sound,                                     Deﬁnition 9 (Direct relevance) Two formula φ, ψ are di-
(d) always meaningful,                                rectly relevant iff there is a common name which appears both
(e) always locally complete,                          in formula φ and formula ψ, i.e., I(φ) ∩ I(ψ) 6= ∅ ∨ C(φ) ∩
(f) may not be maximal,                               C(ψ) 6= ∅ ∨ R(φ) ∩ R(ψ) 6= ∅.
(g) always locally sound.
                                                      Deﬁnition 10 (Direct relevance to a set) A formula φ is rel-
  Therefore, an inconsistency reasoner using a linear exten- evant to a formula set Σ iff there exists a formula ψ ∈ Σ such
sion strategy is useful to create meaningful and sound an- that φ and ψ are directly relevant.
swers to queries. It is always locally sound and locally We can similarly specialise the notion of k-relevance.
complete with respect to a consistent set Σ0 if the selec-                                      0
tion function always starts with the consistent set Σ (i.e., Deﬁnition 11 (k-relevance) Two formulas φ, φ are k-
                                             0        relevant with respect to a formula set Σ iff there exist for-
s(Σ, φ, 0) = Σ0). Unfortunately it may not be maximal.
                                                      mulas ψ0, . . . ψk ∈ Σ such that φ and ψ0, ψ0 and ψ1, . . .,
  We call this strategy a linear one, because the selection and ψ and φ0 are directly relevant.
function only follows one possible ‘extension chain’ for cre- k
ating consistent subsets. The advantages of the linear strategy Deﬁnition 12 (k-relevance to a set) A formula φ is k-
is that the reasoner can always focus on the current working relevant to a formula set Σ iff there exists a formula ψ ∈ Σ
set Σ0. The reasoner doesn’t need to keep track of the exten- such that φ and ψ are k-relevant with respect to Σ.
sion chain. The disadvantage of the linear strategy is that it In inconsistency reasoning we can use syntactic relevance to
may lead to an inconsistency reasoner that is undetermined. deﬁne a selection function s to extend the query ‘Σ |≈ φ?’ as
There exists other strategies which can improve the linear ex- follows: We start with the query formula φ as a starting point
tension approach, for example, by backtracking and heuristics for the selection based on syntactic relevance. Namely, we
evaluation. We are going to discuss a backtracking strategy in deﬁne:
Section 6. The second reason why we call the strategy linear             s(Σ, φ, 0) = ∅.
is that the computational complexity of the strategy is linear Then the selection function selects the formulas ψ ∈ Σ which
with respect to the complexity of the ontology reasoning. Let are directly relevant to φ as a working set (i.e. k = 1) to see
n               |Σ|             Σ
 be the cardinality of an ontology and let the complex- whether or not they are sufﬁcient to give an answer to the
     |=   E
ity of be  .                                          query. Namely, we deﬁne:
Proposition 5.2 (Complexity of Linear Extension) The     s(Σ, φ, 1) = {ψ ∈ Σ | φ and ψ are directly relevant}.
complexity of |≈ in the linear extension strategy is n · E. If the reasoning process can obtain an answer to the query,
                                                      it stops. Otherwise the selection function increases the rel-
In other words, the linear extension strategy does not signiﬁ-
                                                      evance degree by 1, thereby adding more formulas that are
cantly increase the complexity of the ontology reasoning, be-
                                                      relevant to the current working set. Namely, we have:
cause typically E is already PSPACE-complete for standard
concept languages [Donini, 2003].                     s(Σ, φ, k) = {ψ ∈ Σ | ψ is directly relevant to s(Σ, φ, k−1)},for k > 1. This leads to a ”fan out” behavior of the selection 2. We compare PION’s answers with their intuitive answers
function: the ﬁrst selection is the set of all formulae that are which is supposed by a human to see to what extend PION
directly relevant to the query; then all formulae are selected can provide intended answers.
that are directly relevant to that set, etc. This intuition is for- For a query, there might exist the following difference be-
malized in the following:                             tween an answer by PION and its intuitive answer.
Proposition 6.1 The syntactic relevance-based selection • Intended Answer: PION’s answer is the same as the
function s is monotonically increasing.                   intuitive answer;
Proposition 6.2 If k ≥ 1, then                          • Counter-intuitive Answer: PION’s answer is opposite
                                                          to the intuitive answer. Namely, the intuitive answer is
        s(Σ, φ, k) = {φ|φ is (k-1)-relevant to Σ}
                                                          ’accepted’ whereas PION’s answer is ’rejected’, or vice
The syntactic relevance-based selection functions deﬁned  versa.
above usually grows up to an inconsistent set rapidly. That • Cautious Answer: The intuitive answer is ’accepted’ or
may lead to too many undetermined answers. In order to im- ’rejected’, but PION’s answer is ’undetermined’.
prove it, we can require that the selection function returns a
consistent subset Σ00 at the step k when s(Σ, φ, k) is inconsis- • Reckless Answer: PION’s answer is ’accepted’ or ’re-
tent such that s(Σ, φ, k −1) ⊂ Σ00 ⊂ s(Σ, φ, k). It is actually jected’ whereas the intuitive answer is ’undetermined’.
a kind of backtracking strategies which are used to reduce the We call it a reckless answer, because under this situa-
number of undetermined answers to improve the linear exten- tion PION returns just one of the possible answers with-
sion strategy. We call the procedure an over-determined pro- out seeking other possibly opposite answers, which may
cessing(ODP) of the selection function. Note that the over- lead to ’undetermined’.
determined processing need no to exhaust the powerset of the For each concept C in those ontologies, we create an instance
set s(Σ, φ, k)−s(Σ, φ, k−1), because of the fact that if a con- ’the C’ on them. We make both a positive instance query and
sistent set S cannot prove or disprove a query, then nor can a negative instance query of the instance ’the C’ for some
any subset of S. Therefore, one approach of ODP is to re- concepts C0 in the ontologies, like a query ’is the C a C0?’.
turn just a maximally consistent subset. Let n be |Σ| and k be PION test results are shown in Figure 2. Of the four test ex-
n − |S|, i.e., the cardinality difference between the ontology amples, PION can return at least 85.7% intended answers. Of
Σ and its maximal consistent subset S (note that k is usually the 396 queries, PION returns 24 cautious answers or reck-
very small), and let C be the complexity of the consistency less answers, and 2 counter-intuitive answers. However, we
checking. The complexity of the over-determined processing would like to point out that the high rate of the intended
is polynomial to the complexity of the consistency checking: answers includes many ’undetermined’ answers. One inter-
Proposition 6.3 (Complexity of ODP) The complexity of esting (and we believe realistic) property of the Mad Cows
the over-determined processing is nk · C.             Ontology is that many concepts which are intuitively disjoint
                                                      (such as cows and sheep) are not actually declared as being
Note that ODP introduces a degree of non-determinism: se-
                                                      disjoint (keep in mind that OWL has an open world seman-
lecting different maximal consistent subsets of s(Σ, φ, k)
                                                      tics, and does not make the unique name assumption). As a
may yield different answers to the query Σ |≈ φ. The simplest
                                                      result, many queries such as ”is the cow a sheep” are indeed
example of this is Σ = {φ, ¬φ}.
                                                      undetermined on the basis of the ontology, and PION cor-
                                                      rectly reports them as undetermined. The average time cost
7  Prototype of PION                                  of the tested queries is about 5 seconds even on a low-end PC
7.1  Implementation                                   (with 550 mhz CPU, 256 MB memory under Windows 2000).
We are implementing the prototype of PION by using SWI- The counter-intuitive results occurs in the MadCows Ex-
Prolog.2 PION implements an inconsistency reasoner based ample. PION returns the ’accepted’ answer to the query ’is
on an linear extension strategy and the syntactic relevance- the mad cow a vegetarian?’. This counter-intuitive answer
based selection function as discussed in Sections 5 and 6. results from the weakness of the syntactic relevance-based se-
The selection function returns the ﬁrst maximal consistent lection function, because it always prefers a shorter relevance
subset for its over-determined processing. PION is powered path when a conﬂict occurs. In the mad cow example, the path
by XDIG, an extended DIG Description Logic interface for ’mad cow - cow - vegetarian’ is shorter than the path ’mad
Prolog [Huang and Visser, 2004]. PION supports the TELL cow - eat brain - eat bodypart - sheep are animals - eat animal
requests in DIG data format and in OWL, and the ASK re- - NOT vegetarian’. Therefore, the syntactic relevance-based
quests in DIG data format. A prototype of PION is available selection function ﬁnds a consistent sub-theory by simply ig-
for download at the website: http://wasp.cs.vu.nl/sekt/pion. noring the fact ’sheep are animals’. The problem results from
                                                      the unbalanced speciﬁcation between Cow and MadCow, in
7.2  Experiments and Evaluation                       which Cow is directly speciﬁed as a vegetarian whereas there
We have tested the prototype of PION by applying it on sev- is no direct statement ’a MadCow is not a vegetarian’.
eral example ontologies. These example ontologies are the There are several alternative approaches to solve this kind
bird example, the brain example, the MarriedWoman exam- of problems. One is to introduce the locality requirement.
ple, and the MadCow Ontolog, which are discussed in Section Namely, the selection function starts with a certain sub-theory
                                                      which must always be selected. For example, the statement
  2http://www.swi-prolog.org                          ’sheep are animals’ can be considered to be a knowledge