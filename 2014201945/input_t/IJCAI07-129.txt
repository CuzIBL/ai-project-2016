                      On Mining Closed Sets in Multi-Relational Data

        Gemma C. Garriga∗                   Roni Khardon†                     Luc De Raedt‡
     Dept. of Computer Science         Dept. of Computer Science           Machine Learning Lab
Uni. Polit`ecnica de Catalunya, Spain    Tufts University, USA        University of Freiburg, Germany
    garriga@lsi.upc.edu                 roni@cs.tufts.edu          luc.deraedt@cs.kuleuven.be

                    Abstract                          there exist various possible settings. Some approaches em-
                                                      ploy θ-subsumption (subgraph homomorphism in the graph
    We investigate the problem of mining closed sets  setting) to deﬁne the frequency of patterns, e.g. [Dehaspe
    in multi-relational databases. Previous work in-  and Toivonen, 2000] but others employ object identity sub-
    troduced different semantics and associated algo- sumption (subgraph isomorphism) [Malerba and Lisi, 2001;
    rithms for mining closed sets in multi-relational Nijssen and Kok, 2003]. Another variation exist between
    databases. However, insight into the implications mining in a single interpretation (graph), or across multiple
    of semantic choices and the relationships among   interpretations. Finally, some authors (e.g. [De Raedt and
    them was still lacking. Our investigation shows that Ramon, 2004; De Raedt and Dehaspe, 1997]) restrict the im-
    the semantic choices are important because they   plication relation used in deﬁning closures to range-restricted
    imply different properties, which in turn affect the clauses only. In addition to these differences, the notion of a
    range of algorithms that can mine for such sets. Of closed set can be coupled with a closure operator that takes a
    particular interest is the question whether the sem- set and calculates its closure and there is more than one way
    inal LCM algorithm by Uno et al. can be upgraded  to deﬁne such closures. The literature gives the impression
    towards multi-relational problems. LCM is attrac- that these different choices are unimportant and that algorith-
    tive since its run time is linear in the number of mic issues can be studied independently of the semantics. Our
    closed sets and it does not need to store outputs investigation shows that this impression is false and that se-
    in order to avoid duplicates. We provide a posi-  mantics do matter.
    tive answer to this question for some of the seman- Our investigation follows a seminal paper by Uno et al.
    tic choices, and report on experiments that evaluate [2004] who utilized semantic properties in the itemset case
    the scalability and applicability of the upgraded al- to provide a very effective enumeration algorithm for closed
    gorithm on benchmark problems.                    sets, named LCM (Linear time Closed pattern Miner). In this
                                                      paper, we systematically explore the different semantics for
1  Introduction                                       mining closed sets in multi-relational databases, and study
                                                      their effect on the applicability of LCM. Our results identify
The problem of mining frequent itemsets has been a topic of three types of behaviors that can arise as follows.
intensive research (see e.g. [Agrawal et al., 1996; Goethals First, some deﬁnitions specify when a set is closed but
and Zaki, 2004; Han et al., 2000]). Since the number of make it hard to specify a closure operator. This is the case
such sets is huge, it is common and more efﬁcient to re- for the deﬁnitions used in CloseGraph [Yan and Han, 2003]
strict the search to closed item-sets [Bastide et al., 2000; and Farmer [Nijssen and Kok, 2003]. As a result this setting
Zaki, 2004], where a set is closed if all its supersets have is limited to methods that search by applying reﬁnements (in
strictly lower frequency in the database. The collection of fre- BFS or DFS mode) until a closed set is found.
quent closed sets contains the same information as the overall Secondly, stronger deﬁnitions can specify a closure op-
collection of frequent item-sets, but is much smaller. There erator yielding unique closures. In this case one can enu-
is also a growing interest in mining structured data, such as merate closed sets by iteratively extending other closed sets
graphs, and more generally multi-relational databases, and (their “parent”), so that the search is more focused. This
the notion of closed sets has also been imported to this can be done in the setting of Warmr [De Raedt and Ramon,
richer setup [De Raedt and Ramon, 2004; Yan and Han,  2004; Dehaspe and Toivonen, 2000] and Jimi [Maloberti and
2003]. However, there is no general agreement on an ap- Suzuki, 2003], which follow normal ﬁrst order logic seman-
propriate semantics for closed multi-relational patterns as tics. For this setting, we contribute such an enumeration algo-
  ∗Partly supported by MECD, Spanish goverment, through grant rithm generalizing LCM. However, just like the simple algo-
AP2000-4016, and by an EU IHP Marie Curie Fellowship. rithms, this algorithm must store previously discovered sets
  †Partly supported by NSF Grant IIS-0099446, and by a Research to avoid duplicates in the output inducing a serious memory
Semester Fellowship Award from Tufts University.      requirement.
  ‡Partly supported by the EU IST FET project IQ. Now at the Finally, some deﬁnitions provide unique closures such that
Katholieke Universiteit Leuven.                       each closed pattern has a unique “parent” closed pattern. This

                                                IJCAI-07
                                                   804is the case for the Claudien [De Raedt and Dehaspe, 1997] where each interpretation contributes one element to the
setting, whose semantics is speciﬁed using substitutions to cover set.
variables in a clause. For this case, we provide a full general- In the single interpretation (SI) setting, the database is a
ization of the LCM algorithm of Uno et al. [2004] that does single conjunction and the natural notion of coverage is
not need to store previous sets.
  Due to space constraints most proofs and some details are
omitted from the paper.                                  coversSI(C, DB)={θ|C    DB  via substitution θ}
                                                        Notice that here the cover set includes substitutions and
2  Problem Deﬁnition and Basic Insights               not interpretations. In both deﬁnitions  can be either of the
The problems we consider assume that we have a given  notions of subsumption given above.
database DB, a language of patterns L and a notion of   We now have four different semantics. The LI-θ setting
“frequency” measuring how often a pattern occurs in the learns from interpretations using θ-subsumption. This closely
database. Our databases and pattern are expressed in logi- corresponds to the setting employed by Warmr [Dehaspe and
cal notation. We assume some familiarity with basic notions Toivonen, 2000] and Jimi [Maloberti and Suzuki, 2003].The
of logic [Lloyd, 1987] but the following introduces some no- LI-OI employs OI-subsumption instead and is employed by
tation and terminology.                               CloseGraph [Yan and Han, 2003] and Farmer [Nijssen and
  An atom is an expression of the form p(t1,...,tn) where Kok, 2003]. Finally, the SI-θ and SI-OI settings learn from a
p is a relation of arity n and each ti is a term, i.e. a constant single interpretation only. As we shall see, SI-θ closely corre-
or a variable. This paper employs conjunctions a1 ∧···∧an sponds to Claudien’s setting [De Raedt and Dehaspe, 1997].
as data (where terms in the atoms are concrete objects) which The problem of ﬁnding frequent queries is that of ﬁnding
we will refer to as interpretations. Conjunctions also serve as all queries C ∈Lwhose frequency freq(C, DB) ≥ t for
patterns (where terms can be variables) which are sometimes some ﬁxed threshold t. The natural notion for frequency is
referred to as queries. Notice that when all relations are of freq(C, DB)=|covers(C, DB)|. It is easy to see that fre-
arity 0, conjunctions correspond to item-sets. Notice also that quency is anti-monotonic for the LI setting, i.e. adding an
if we only have one binary predicate, we can consider it as atom to a conjunction can only decrease the frequency. This
capturing the edge relation of a graph, so graphs and graph important property is used by all frequent set miners.
patterns form another special case of relational patterns.          (      )
  We shall represent conjunctions in list notation, i.e. as Remark 1 freq C, DB is not anti-monotonic for the
                                                      SI setting.  To  see this, consider the query [q(X)]
[a1,...,an]. For a conjunction C and atom p,by[C, p] we
                                                      which  subsumes  [q(X),p(X, Z)].   For interpretation
refer to the conjunction that results from adding p after the [ ( ) ( ) ( )] [ ( )]
last element of C. For a conjunction C and index i, C[i] q a ,p a, b ,p a, c , q X has one substitution but
                                                      [q(X),p(X, Z)] has two substitutions.
is the preﬁx of C,i.e. [a1,...,ai].Asubstitution θ =
{V1/t1,...,Vn/tn} maps variables to terms. The result of Therefore, for the SI setting, we use the notion of relative fre-
applying a substitution θ to an expression C is the expression quency deﬁned as relfreq(C, DB)=freq(C, DB)/|D|v,
Cθ where all variables Vi have been simultaneously replaced where D is the domain (i.e. the set of constants) and v the
by their corresponding term ti in θ.                  number of variables appearing in C. Relative frequency is in-
                                                      tuitively appealing and it is anti-monotonic for the SI setting.
2.1  Semantics and Frequent Sets
To relate the data to a query, we employ subsumption. Within Remark 2 Note that if we have data from the LI set-
inductive logic programming, two notions are popular: ting we can modify it slightly and interpret it in the SI
                                                      setting. This is a standard transformation in Inductive
θ-subsumption ([Plotkin, 1970]): C1 θ-subsumes C2 if and Logic Programming. For example consider a dataset with
                                           ⊆
    only if there exists a substitution such that C1θ C2. two interpretations I1 =[p(a),q(a, b),q(a, c)] and I2 =
                                                      [ ( ) (   )]
OI-subsumption  ([Malerba and Lisi, 2001]): C1 OI-     p d ,q e, f . We add an identiﬁer argument to each pred-
                                                                                                       =
    subsumes C2 if and only if there exists a substitution icate and collapse the data into one interpretation: DB
                                                      [ (   )  (     )  (     )  (   )  (      )]
    θ = {V1/c1,...,Vn/cn} such that C1θ ⊆ C2 and the ci p i1,a ,q i1,a,b ,q i1,a,c ,p i2,d ,q i2,e,f . It is easy
                                                                      (      )=|          (      )|
    are different terms not occurring in C1.          to see that freqLI C, DB    coversLI C, DB   is anti-
                                                      monotonic in this case. Therefore in this case we have a
  We will refer to both cases as subsumption, denoted as choice of frequency criterion to use.
C1  C2. When we want to identify the substitution witness-
ing the subsumption we say that C1  C2 via substitution θ. 2.2 Closures
Applied to graphs, the former notion corresponds to subgraph
homomorphism; the latter one to subgraph isomorphism. Finding frequent item-sets is a special case of frequent pat-
  Two forms of databases will be considered. In the learning tern mining in the LI case. When mining frequent item-
from (multiple) interpretations (LI) setting, the database con- sets many patterns are redundant, and therefore one is typi-
tains a set of interpretations. In this case the natural notion of cally interested in closed patterns. Indeed, consider the item-
                                                          [    ] [    ] [  ]    [  ]          ([ ]    )=
coverage is                                           sets a, d, e , a, c, d , b, c and b, d .Thenfreq a ,DB
                                                      freq([a, d],DB)=2. The item  a is said to imply d (w.r.t.
        coversLI (C, DB)={D  ∈ DB|C    D}            the database). Therefore, we deﬁne:

                                                IJCAI-07
                                                   805Deﬁnition 3 A conjunction C implies an atom p in the  on the semantics, the properties of ICP may vary. In partic-
database DB, denoted DB  |= C →  [C, p], if and only if ular, the result may or may not be unique, or the algorithm
covers(C, DB)=covers([C, p],DB).                      may not always terminate, in which case the result would not
The rules of the form C → [C, p] denote relational associa- be well deﬁned.
tion rules that hold with 100 per cent conﬁdence. They are to Example 5 Consider using θ-subsumption and the dataset
be understood as implications that are satisﬁed by all conjunc- [R1(1, 2),R1(2, 1)]. Then the pattern R1(x1,x2) implies
tions in the database. These expressions correspond to the re- [R1(x1,x2),R1(x2,x3)] as well as [R1(x1,x2),R1(x2,x3),
lational association rules, also called query extensions, intro- R1(x3,x4)] and so on. So we can add a chain of any size,
duced in Warmr [Dehaspe and Toivonen, 2000]. In case the the closure is not ﬁnite in size, and the procedure may not
database consists of a single interpretation only, it does not terminate.
make sense to allow for atoms p that contain variables that do
not appear in C. The reason is that the resulting substitutions Therefore, under θ-subsumption, it is necessary to restrict the
are not comparable, cf. also Remark 1. Therefore, in this case atoms that can be added to the initial conjunction. Section 3
one imposes the range-restriction requirement [De Raedt and gives a solution that gets around this problem by abstracting
Ramon, 2004], which states that p only contains variables and the properties of the item-set case from a different perspec-
constants appearing in C. The resulting expression can then tive. Section 4 gives a different solution for the SI setting.
be simpliﬁed to a (range-restricted) clause C → p and cor- Before presenting these, we brieﬂy consider the LI-OI set-
responds to the pattern type induced by Claudien [De Raedt ting used in CloseGraph [Yan and Han, 2003] and Farmer
and Dehaspe, 1997].                                   [Nijssen and Kok, 2003]. Here the closure procedure is guar-
  In the itemset case the closure of a set of items I is deﬁned anteed to terminate but the results need not be unique:
as the set of items whose existence in a tuple is implied by Example 6 Consider the two conjunctions:
the existence of I. Continuing our illustration, one can ver-
ify that the closure of [a] w.r.t. the speciﬁed tuples is [a, d]. [e(1, 2,a),e(2, 3,b),e(3, 4,d),e(4, 5,a),e(5, 6,c)]
An alternative characterization of closed item-sets states that [e(11, 12,a),e(12, 13,b),e(12, 14,c)]
the closure of an item-set I corresponds to the intersection of
all tuples in the database subsumed by the item-set I [Zaki, This database represents two edge-labeled graphs, and we
2004]. Note that intersecting item-sets corresponds to com- consider calculating the closure of C = e(N1,N2,a).Then
puting the minimally general generalizations of two patterns. ICP may add e(N2,N3,b) to get the closed set [e(N1,N2,a),
This will also play an important role in our work.    e(N2,N3,b)]. On the other hand it can add e(N2,N3,c) to
  The item-set case motivates the iterative closure proce- get the closed set [e(N1,N2,a),e(N2,N3,c)].
dure (ICP) deﬁned below. Note that this procedure em-
ploys a reﬁnement operator ρ which computes atoms p to 2.3 Normal Form
be added to the conjunction. Notice also that the condition
                                                     Most relational frequent pattern mining algorithms employ a
DB  |= C →  p can be interpreted according to the four dif-
                                                      normal-form based on an ordering of patterns to avoid investi-
ferent semantics.
                                                      gating the same pattern more than once. We use the following
                                                                                  [    ]
closure(input: pattern C = q1,...,qn;ρ: ref. operator) order similar to Nijssen and Kok 2003 . We assume that the
                                                      predicates and constants are ordered (e.g. alphabetically). In
1  C ← C
                                                      addition, we employ a special set of variables z1,z2,z3,...,
2  repeat                                             ordered according to their index, and impose that all constants
3         Findanatomp  ∈ ρ(C) s.t. DB |= C → p
            ← [   ]                                 are smaller than these variables. An order over atoms is then
4         C     C ,p                                  induced by the order over lists composed by the predicate
5    until no such atom is found
                                                     name as ﬁrst element and its list of arguments following that.
6  output C                                           An order over conjunctions is induced by the order over lists
  We ﬁrst consider a general reﬁnement operator ρG that im- where the atoms in the conjunction are listed in order.
                                    ∈  
poses no restrictions on p other than that p C . Some of our Deﬁnition 7 (Normal form) The normal form nf(C) of a
theorems below using the normal form require the following conjunction C over variables x1,...,xu is Cθ where θ is (1)
syntactic version for the input and output of the reﬁnement
                                                     a one to one substitution from x1,...,xu to new variables
                                          1      m
operator. We will assume that C uses variables x ,...,x z1,...,zu and (2) Cθ is minimal in the order of conjunctions
for some m and that new variables introduced form a contigu- for substitutions of type (1).
ous sequences starting with xm+1. This does not change the
semantics and does not restrict the form of reﬁnements so we Clearly the normal form of every conjunction is unique. The
still refer to this case as ρG. Until Section 4 we assume that normal form also satisﬁes the following useful properties.
ICP uses ρG. The following notion is natural:
                                                      Lemma 8   Let C =[q1,q2,...,qn] be a conjunction in nor-
Deﬁnition 4 (Closed conjunctions of atoms) A conjunc- mal form. (i) For any i ≤ n, [q1,...,qi] is in normal form.
               closure( )=
tion C is closed if   C    C.                         (ii) For any i<nand any subset of indices i<j1 <j2 <
                                                               ≤   [        ]
The ICP algorithm deﬁnes closure in a non-deterministic way ... < jk n, q1,...,qi is a preﬁx of the normal form of
                                                      [                  ]
that may depend on the order of atom additions. Depending q1,...,qi,qj1 ,...,qjk .

                                                IJCAI-07
                                                   8063LI-θ:thelgg      Closure                             RELLCM1(input: closed pattern C)
One way to deﬁne closures in the item-set case is by inter- 1 if C is not frequent then return
secting the covered tuples. The equivalent in the LI-θ set- 2 if C is already in closed pattern table then return
ting is to apply the well-known lgg operator introduced by 3storeC in closed pattern table
                                                       4  output C
Plotkin [1970].Thelgg of s1,s2 is a conjunction of atoms
                                                     5  for all reﬁnements p ∈ ρG(C)
s that θ-subsumes both s1 and s2 i.e. s s1,ands s2,                        ([   ]) = ∅
and in addition for any other conjunction s that θ-subsumes 6   if coversLI C, p
                                                      7orcoversLI          ([C, p]) = coversLI (C)
both s1,s2 it holds that s  s. Plotkin [1970] proved that
                                                       8           then skip reﬁnement
the lgg is well deﬁned and provided an efﬁcient algorithm                        
                                                       9           else Calculate C =nf(closureLGG([C, p]))
for calculating the lgg of two conjunctions. Note that we do                       
not reduce the lgg. For sets of more than two conjunctions we 10       RELLCM1(C    )
simply calculate the lgg by iteratively adding one conjunction 11 return
at a time. The result of this process is unique up to variable RelLCM1 stores all previously discovered closed sets in a
renaming regardless of the order of adding the conjunctions. table and in this way avoids calling the procedure twice on
The downside here is that, since the size of the lgg may grow the same set. It uses depth ﬁrst search. Each closed conjunc-
as the product of the sizes of the input conjunctions, the total tion is reﬁned in all possible ways and closed. The algorithm
size may grow exponentially in the number of conjunctions. checks whether the resulting closed set was already discov-
                                                      ered, and if not it is output and further reﬁned to identify
Deﬁnition 9 (lgg closure) Let C be a conjunction and DB a more closed conjunctions. The algorithm is started by call-
            closure   (  )=    (        (     ))
database, then    LGG  C    lgg coversLI C, DB  .     ing RELLCM1(closure(∅)). Clearly every conjunction out-
                                                      put by the algorithm is closed. The following theorem guar-
We note that a generalization of LCM using the idea of lgg is
                                                      antees completeness, that is, that every closed conjunction is
reported in [Arimura and Uno, 2005]. Their setting however
                                                      output by the algorithm.
is specialized to ordered tree patterns with a matching rela-
tion that corresponds to OI subsumption. Interestingly in this Theorem 13 If C  = ∅ is a closed conjunction in normal
                                                                                            
setting the size of the lgg is always small.          form, then there is a closed conjunction C and a literal
                                                                                            
  We now employ Formal Concept Analysis (FCA) [Ganter p ∈ ρG(C ) such that C =nf(closureLGG([C ,p])).
and Wille, 1998] to show that the lgg closure produces a Ga-
                                            DB          Clearly, in any run of the algorithm the number of calls to
lois connection. We consider the formal context (2 , L) RelLCM1 is exactly the number of closed sets. While the
where L is the set of possible conjunctions, with the par-
                DB                                    number of calls is linear we do discover some patterns more
tial orders ⊆ on 2 ,and   on L.Wedeﬁneψ(C)=          than once. The maximum number of patterns discovered is
coversLI (C, DB) and φ(S)=lgg(S)  where C  ∈Land      bounded by the branching factor of the reﬁnement operator
S ⊆ DB.                                               times the number of closed sets.
Theorem 10 The mappings (φ, ⊆) and (ψ, ) form a Galois
                                                    4   SI: Range Restricted Closures
connection. More speciﬁcally, (1) S ⊆ S ⇒ φ(S )  φ(S);
(2) S ⊆ ψ(φ(S));(3)C   C ⇒  ψ(C) ⊆ ψ(C); and (4)   We now consider the SI setting (both under θ- and OI sub-
C  φ(ψ(C)).                                          sumption). As argued in Section 2.2 we need to impose
                                                      range-restriction when deﬁning the closures. Thus the ICP
Theorem 11 The compositions Δ= ψ · φ and Δ=φ   · ψ   algorithm employs the operator ρRR(C) that can only gener-
are closure operators. That is, they satisfy monotonicity ate atoms containing terms already occurring in C.
                      
(C  C  ⇒  Δ(C)   Δ(C  ), extensivity (C  Δ(C)), and Deﬁnition 14 (Range restricted closure) closureRR(C)=
idempotency (Δ(Δ(C)) = Δ(C)).                         closure(C, ρRR).
                                                                             closure  (  )
  Using this result, closed conjunctions can be formalized as The next lemma shows that RR C is well behaved:
those coinciding with their closure, that is, Δ(C)=C.The Lemma 15 For any conjunction C and atoms p, q,ifDB |=
result also establishes that for any set of interpretations S of C → p then DB |=[C, q] → p.
the database, there is a unique conjunction (up to subsump- To get a complete generalization of LCM we need to ensure
tion equivalence) that is the most speciﬁc conjunction satis- that each conjunction has a unique parent. Then the algo-
ﬁed in S. Moreover, the number of closed queries is ﬁnite, as rithm does not need to store the enumerated conjunctions in
is the number of interpretations in our database DB.  order to avoid duplicates as in RelLCM1. Therefore, we need
  We now develop an algorithm RelLCM1 that upgrades the a more reﬁned notion of closure extension. The following
ﬁrst algorithm in Uno et al. [2004] to the LI-θ case. We need a generalizes the corresponding ideas from [Uno et al., 2004].
notion of closure extension that allows us to go directly from
one closed conjunction to another.                    Deﬁnition 16 (Core preﬁx) Let C be a conjunction in nor-
                                                      mal form. The core preﬁx core(C) of C is the least preﬁx pr
Deﬁnition 12 (Closure extension) A conjunction C is an of nf(C) such that covers(pr, DB)=covers(nf(C),DB).
                            
extension of a conjunction C if C =closureLGG([C, p]) for Notice that since we are working in the SI setting, if the cov-
 ∈    ( )
p  ρG  C .                                            ers are the same then pr and C must have the same variables.

                                                IJCAI-07
                                                   807                                                        min         RelLCM2                RelLCM2-OI
Deﬁnition 17 (Preﬁx preserving closure extension) Let  freq.  # closed  # freq CF%   # closed # freq  CF%
C =[q1,...,qn] be a closed conjunction in normal form. A 0.9 142 (490 s) 743 (391 s) 80.8 96 (5 s) 483 (302 s) 80.1
conjunction C is a ppc-extension of C if:              0.7  248 (493 s) 1297 (499 s) 80.8 159 (8 s) 747 (392 s) 78.7
                                                      0.5  561 (658 s) 3247 (723 s) 82.7 358 (18 s) 1761 (605 s) 79.6
P1: C  =nf(closureRR([C, p])) with p ∈ ρG(C),i.e. C     0.3 1206 (992 s) 9743 (1023 s) 87.6 756 (29 s) 3647 (726 s) 79.2
                                                        0.1 2243 (1008 s) -     -   1601 (57 s) 7456 (827 s) 78.5
is obtained by adding the atom p to C, taking the closure of 0.0 3443 (1025 s) - -  2808 (97 s) 19224 (922 s) 85.3
[C, p] and normalizing.
P2: The atom p satisﬁes p>q,forallq ∈ core(C).Note    Table 1: Effect of decreasing the minimum frequency thresh-
that because C is in normal form this only requires to check old for NCTRER (with up to 4 variables in patterns and a
that p is larger than the last atom q in core(C).     maximum depth bound of 7).
P3: The normal form operation deﬁning C does not change
any of the variables in C and p. That is, the normal form may
                                                      nally we note that the results of this section hold for both the
reorder atoms but may not rename atoms in [C, p].
                                                      SI-OI and SI-θ settings.
P4: Let C[j]=q1,...,qj be the preﬁx of C up to qj,where
qj is the largest atom in C s.t. qj <p. Then, [C[j],p] is a
preﬁx of C. This means that the core preﬁx is preserved and 5 Experimental Evaluation
that no new atom can appear between p and qj.         We now present an empirical evaluation of the RelLCM2 al-
The following statements show that closures and cores are gorithm on two datasets.1 All experiments were run in a PC
well-behaved, and that ppc-extensions deﬁne unique parents. Pentium IV EM64T 3.2MHz under Linux 10.0.
Lemma 18  Consider any conjunction C in normal form,    The ﬁrst dataset is the NCTR Estrogen Receptor Binding
any subset C  ⊆  C  \ core(C), and any atom  p/∈     Database (NCTRER), containing 232 molecules, including
                                                      bond structures.2 Since each molecule is a separate structure
closureRR(C).(1)closureRR(C)    ⊆  closureRR([C, p]).
                                                      this is natural for the LI setting so the data can be viewed as
(2) closureRR([C, p]) =   closureRR([core(C),p]) =
                                                     DB  =  {d1, ..., dn}. However as discussed in Remark 2 we
closureRR([core(C),C ,p]).
                                                      can embed it as data for the SI setting suitable for RelLCM2.
  It is worth noting that part (2) of the lemma above is vio- When doing this we can use |coversLI (C, DB)| as our no-
                                          ([   ])  =
lated by the lgg closure: in some cases coversLI C, p tion of frequency but still use the proper coversSI(C, ∪idi)
        ([core( ) ])
coversLI      C ,p  and the closures are different.   for implication and closure calculation.
Theorem 19 (1) Let C be a closed conjunction and C a ppc- We ﬁrst investigate the effect of increasing the frequency
extension of C obtained as in condition (P1) in Deﬁnition 17. threshold for the NCTRER dataset where patterns may con-
Then core(C)=[C[j],p] where C[j] is given by condition tain at most 4 variables and depth bound of 7. Table 1 sum-
(P4) in Deﬁnition 17 . (2) Let C be a closed conjunction in marizes the results for RelLCM2 and RelCLM2 under ob-
normal form. Let T =core(C)=[L, p] (that is, L is a con- ject identity (RelLCM2-OI). The table reports the number of
junction and p is the last atom in T ). Let C1 =closureRR(L) patterns in each case and the associated run time in paren-
                        
and let C =nf(C1).ThenC  is a ppc-extension of C and C theses. The table also gives results for enumerating all fre-
is the only conjunction for which this holds.         quent queries (this was done using a level-wise style algo-
  There is one further caveat to consider: the set of closed rithm). The ﬁrst observation is that the OI restriction alone
patterns can be inﬁnite since adding a variable changes the substantially decreases the number of frequent and closed
                                                      sets. This partly explains the speed of systems using this re-
semantics of the conjunction. Therefore one should employ
a “depth bound” on the patterns searched for. The algorithm striction reported in the literature. To see the effect of us-
                                                      ing closures we calculate the compression factor as CF%=
below is started by calling RELLCM2(closure(∅)).          #closed
                                                      (1− #freq )×100. One can see that in both semantic settings
RELLCM2(input: closed pattern C = q1,...,qn)          closures further decrease the number of patterns and runtime.
 1  if C violates depth bound then return               We next investigate the effect of increasing the number
 2  if C is not frequent then return                  of variables for the NCTRER dataset for a ﬁxed threshold
 3  output C                                          of 0.3 and a maximum  depth bound of 7.  Results are
 4  for all reﬁnements [C, p] with p ∈ ρG(C)          summarized in Table 2. One can see that RelLCM2-OI
 5ands.t.p         is greater than all atoms in core(C) scales much better than RelLCM2 when increasing the
 6         if coversSI([C, p]) = ∅                    number of variables and that the use of closures signiﬁ-
 7          then skip reﬁnement                       cantly reduces the number of patterns and runtime. We
                           
 8          else Calculate C =nf(closureRR([C, p]))   also observe that the CF%  increases when more vari-
 9LetC[j]=[q1,...,qj],where                           ables are considered. As an example, one of the closed
10                 [qj is largest atom in C with qj <p] structures enumerated which captures active molecules is:
11               if [C[j],p] is a preﬁx of C         [dsstox ids(x),active(x),atom(x, y, ‘C‘),atom(x, z, ‘O‘),
                                   
12                 then RELLCM2(C   )                 bond(x, z, y, single),bond(x, w, y, double)]
13  return
                                                         1A direct comparison with a previous system c-armr [De Raedt
  As in the previous section the number of calls to RelLCM2 and Ramon, 2004] was not possible since it forces the use of syntac-
is exactly the number of closed sets. Notice that the ppc- tic constraints which RelLCM2 forbids so the outputs are different.
extension restriction reduces the branching factor as well. Fi- 2http://www.epa.gov/ncct/dsstox/sdf nctrer.html

                                                IJCAI-07
                                                   808