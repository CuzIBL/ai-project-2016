            GUNSAT: a Greedy Local Search Algorithm for Unsatisﬁability

                    Gilles Audemard∗                               Laurent Simon
         Univ d’Artois, CRIL - CNRS, FRE2499,         Univ Paris-Sud, LRI - CNRS, UMR8623,
                      Lens, F-62307                        INRIA-Futurs, Orsay, F-91405
               audemard@cril.univ-artois.fr                         simon@lri.fr


                    Abstract                          formalism into resolution proofs search space. Because state-
                                                      of-the-art complete SAT solvers are terribly efﬁcient in prac-
    Local search algorithms for satisﬁability testing are tice, we only call efﬁcient a solver, based on resolution, that
    still the best methods for a large number of prob- can defeat state-of-the-art resolution-based solvers. For doing
    lems, despite tremendous progresses observed on   this, we propose to make a greedy walk among the resolution
    complete search algorithms over the last few years. search space in which, at each step of the local search algo-
    However, their intrinsic limit does not allow them rithm, we try to compute a ”better” neighbour proof, i.e. a
    to address UNSAT problems. Ten years ago, this    proof which differs from the previous ones by at most two
    question challenged the community without any     clauses, one added by resolution, and one that may have been
    answer: was it possible to use local search algo- removed. To ﬁnd such a neighbour, we approximate the num-
    rithm for UNSAT formulae? We propose here a ﬁrst  ber of ﬁltered models by the proof. This is achieved by a
    approach addressing this issue, that can beat the score given to all pairs of literals depending on their frequen-
    best resolution-based complete methods. We deﬁne  cies in the formula. As we will show it in our experimental
    the landscape of the search by approximating the  investigation, the use of higher reasoning mechanism, based
    number of ﬁltered clauses by resolution proof. Fur- on Extended Resolution [Robinson, 1965] and Unit Propaga-
    thermore, we add high-level reasoning mechanism,  tion Look-Ahead [LeBerre, 2001] is a key to make this new
    based on Extended Resolution and Unit Propaga-    and challenging approach possible. Because resolution-based
    tion Look-Ahead to make this new and challenging  methods seems to be an efﬁcient way for solving quantiﬁed
    approach possible. Our new algorithm also tends   boolean formulae (QBF), we believe that our algorithm may
    to be the ﬁrst step on two other challenging prob- be the ﬁrst step on two other challenging problems: build a
    lems: obtaining short proofs for UNSAT problems   real local-search algorithm for QBF and obtain short proofs
    and build a real local-search algorithm for QBF.  for UNSAT problems and QBF ones.
                                                        The paper is organised as follows. We start by introducing
1  Introduction                                       some deﬁnitions and notations, then, in section 3, we discuss
                                                      previous works done on local search for unsat problems, and
Over the last ten years, a lot of impressive progresses have we present our new approach. Before conclude, we provide
been made in the practical solving of the satisﬁability testing some experiments.
(SAT). All the methods that address this typical NP-Complete
problem may be divided in two categories: Complete ones, 2 Preliminaries and deﬁnitions
usually based on the Davis, Logemann and Loveland pro-
                                                         V  = {x ,...,x }
cedure [Davis et al., 1962; Moskewicz et al., 2001], can Let    1      n be a set of boolean variables,aliteral
                                                      l           x             ¬x
prove that a formula is satisﬁable or not. Incomplete solvers i is a variable i or its negation i.Aclause is a disjunction
                                                              c  = l ∨ l ... ∨ l
(also called one-sided solvers) only give an answer if the of literals i 1 2 ni .Aunit clause (or mono-literal)
                                                                                               Σ
instance has a given property (generally if it is satisﬁable). is a clause restricted to a single literal. A formula is in con-
                                                                                Σ
Most of them, which are based on local search, perform a junctive normal form (CNF) if is a conjunction of clauses
                                                      Σ=c    ∧ c ... ∧ c
stochastic walk over the search space [Selman et al., 1994; 1  2     m.TheSAT   decision problem is deﬁned as
                                                                           Σ
Hoos and Stutzle, 2004]. Those methods give very good re- follows: given a formula in CNF, is there an assignment of
                                                                 V  Σ         Σ
sults on certain classes of problems, like random 3SAT prob- the variables such that is satisﬁed, i.e. all the clauses
                                                        Σ
lems [LeBerre and Simon, 2006].                       of  are satisﬁed?
  In 1997, [Selman et al., 1997] challenged the local search
                                                      2.1  Local Search for SAT problems
community with a quest for an efﬁcient local search algorithm
                                                      Local search algorithms for SAT problems use a stochastic
for unsatisﬁable formulae. We propose here the ﬁrst success-                      Σ
ful approach, called GUNSAT, that pushes the local search walk over total interpretations of (i.e. all variables are as-
                                                      signed). At each step (or ﬂip), they try to reduce the number
  ∗supported by ANR “Planevo” project noJC05 41940.   of unsatisﬁable clauses (under certain conditions). The next

                                                IJCAI-07
                                                  2256 Algorithm 1: General scheme of a local search SAT solver Val, 2001] has shown how a simple generalisation of the res-
  Data   : Σ a CNF formula                            olution rule, called multi-resolution, allowed to scale-up most
  Result : SAT if a model is found, UNKNOWN otherwise of the resolution based solvers, essentially for compilation
                                                      purpose. This two resolution-based solvers will help us mea-
  begin
                                                      sure the performances of GUNSAT. We call efﬁcient asolver,
     for i=1 to MaxTries do
                                                      based on the resolution rule, that can beat both of them.
        Choose a random interpretation I;
        for j=1 to MaxFlips do                        Extended Resolution
           if I is a model of Σ then return SAT ;     It is well known that the number of necessary clauses could
           I = neighbour(I);                          be exponential to prove refutation by general resolution proof
        end                                           (even if no restrictions are imposed in the order of resolu-
     end                                              tions steps). This is the case for the well known pigeon hole
     return UNKNOWN ;                                 problem [Haken, 1985], the Urquhart problems [Urquhart,
  end
                                                      1987] and even the random problems [Chv´atal and Sze-
                                                      mer´edi, 1988]. We have here to notice that all those prob-
                                                      lems need large clauses (i.e. unbounded size) in the resolu-
total interpretation is chosen among the neighbours of the cur-              ⊥
rent one (they differ only on one literal value). After a given tion proof before producing . On a lot of instances, allowing
number of steps, a restart is done to jump into an other part large clauses to be generated is essential.
of the landscape (escape phase). We recall, algorithm 1, the However, it is striking to notice that as soon as one al-
                                                      lows the introduction of new variables during the proof (like
general scheme of local search algorithms for SAT.
  A lot of improvements have been proposed in the literature, lemmas in theorem proving), then short proofs for the above
                                                                    [           ]
like tabu search or the use of different heuristics to ﬁnd the problems exist. Tseitin, 1970 introduced this principle as
                                                      the extended resolution rule. If Σ is a formula, one applica-
next interpretations. The interested reader may refer to [Hoos                      Σ∧(e  ⇔  l ∨l )
and Stutzle, 2004] for a detailed coverage of all methods. tion of this rule allows us to consider 1 2 instead,
                                                      where e is a fresh variable (not appearing in Σ)andl1 and l2
                                                                    Σ
2.2  Resolution Proofs                                are literals from . Even if this rule looks very simple, there
                                                      is no proof system known to be stronger than extended reso-
The resolution rule allows to deduce a new clause (called re- lution. Despite its simplicity and its theoretical interests, no
solvent) with the help of two clauses. It plays a central role practical applications of extended resolution are used in mod-
in many works based on clausal representations of boolean ern SAT solvers. Some works implicitly use a restriction of it,
formulae, like preprocessing steps [E´en and Biere, 2005]. like symmetry breaking algorithm based on the introduction
                                                      of new variables. The work of [Simon and del Val, 2001] can
Deﬁnition 1 ([Robinson, 1965]) Let c1 =(x ∨ a1 ∨ a2 ∨ also be viewed as a restriction of this rule, where nodes of the
...an) and c2 =(¬x  ∨ b1 ∨ b2 ∨ ...bm) be two clauses. graph representation of the formula may be viewed as new
The clause c =(a1 ∨ a2 ∨ ...an ∨ b1 ∨ ...bm) is called the propositional variables. However, at the end, the whole prob-
resolvent of the clauses c1 and c2 by performing a resolution lem remains: even if this rule looks simple, how to choose the
on the variable x. We note c = c1 ⊗ c2 this rule.     pair of literals to extend?
  One may apply the resolution rule many times including on
resolvent clauses to derive new clause. The obtained clause 3 Local search for UNSAT problems
is proved by resolution:                              After a discussion of previous works, we present GUNSAT,
                                                      our new local search algorithm for unsat checking.
Deﬁnition 2 (Resolution proof [Robinson, 1965]) Let Σ be
a CNF formula. A resolution proof of a clause c is a succes- 3.1 Previous Work
sion of clause P = c1,c2,...,ck such that c = ck and for all Among the ten challenges proposed ten years ago [Selman et
i ≤ k one of the following conditions holds :         al., 1997], not so much work has been done to address the
  • c ∈ Σ                                             ﬁfth challenge: ”design a practical stochastic local search
     i                                                procedure for proving unsatisﬁability”.
  •∃cm,cn  ∈ P (m<iand   n<i) such that ci = cm ⊗ cn
                                                      Hybrid solvers
  If the empty clause (⊥) may be proved by resolution then Almost all previous works on incomplete algorithms for un-
the formula Σ is unsatisﬁable: The resolution proof system is satisﬁability has been done on hybrid solvers only. Some
complete for refutation. Restrictions on general resolution ex- methods use a classical local search solver but record no-
ist and may still answer both SAT and UNSAT questions (like goods, based on resolvent. However, in the general case,
Ordered Resolution). However, in practice, resolution-based those methods improve performance on satisﬁable problems
solvers are more suitable to knowledge compilation problem- only [Fang and Ruml, 2004; Shen and Zhang, 2005].
atics (preprocessing, prime implicates computation, ...) than With the new interest in QBF solving and the relative fail-
to SAT checking. Directional Resolution [Dechter and Rish, ure of direct DPLL extensions on them, some effort have been
1994] is one of the most famous restriction, based on the well done on ﬁnding new methods, based on resolution or local
known work of [Davis and Putnam, 1960]. [Simon and del search. The solver WalkQSAT [Gent et al., 2003] has two

                                                IJCAI-07
                                                  2257 Algorithm 2: GUNSAT                                    Let ci = l1 ∨ l2... ∨ lni be a clause in the formula Σ.For
                                                          c    n ≥ 1                             2n−ni
  Data   : Σ a CNF formula                            any i s.t. i  , it is clear that the clause ﬁlter out of
  Result : UNSAT if a derivation of ⊥ is found, UN-   potential models.
          KNOWN  otherwise                              Our ﬁrst measure (depth 0 of the approximation) estimates
  begin                                               the number of ﬁltered models considering clauses indepen-
                                                                       c         n        w  (n )=2n−ni
     for i=1 to MaxTries do                           dently. Each clause i of length i weights 0 i     .
                                                      The whole weight of the proof may then be measured as
        for j=1 to MaxFlips do                          n
                                                      Σ   w0(ni)
           if 2-Saturation(Σ)  returns UNSAT then       i=1     . It is however clear that ﬁltered models are not
              return UNSAT ;                          independent and this measure gives a very inaccurate indica-
           if |Σ| > MaxSize then                      tion of the quality of the current proof. It remains at trying to
              Remove-One-Clause(Σ)                    produce as many short clauses as possible.
           Add-One-Clause(Σ);                           At depth 1 of the approximation, we ﬁx the granularity to
           Add-Extended-Variables(Σ)                  literals, by maintaining the estimation of the number of ﬁl-
                                        ;                                                   l
           Simplify-Look-Ahead(Σ);                    tered models for each literal. For each literal ,wemaysum
        end                                           its weight in all clauses where it occurs by considering that
                                                              c         n  ≥  1        2n−ni
        Replace Σ by all its vital clauses;           aclause  i of length i   ﬁlter out     of the models
                                                                 ¬l        2n−1
     end                                              that contain (over its    potential models). If we sup-
     return UNKNOWN;                                  pose that all these ﬁltered models are separately and equally
  end                                                 distributed over all literals in the clause, which is a strong as-
                                                      sumption on which our estimation is based, then the clause
                                                                                        2n−ni
                                                      ci            l          w1(ni)=
                                                        allows literal to ﬁlter out      ni  of the models
distinct phases: the ﬁrst one is a complete algorithm based on containing ¬l. Even through this is a reﬁnement of depth 0,it
DPLL for QBF; the second one use local search to quickly is clear that if l occurs in the two clauses l ∧ q and l ∧¬q then
ﬁnd models. This incomplete solver can prove either the va- this scoring scheme is particularly inappropriate. In some
lidity and the invalidity of a QBF formula, but may never way, it is important to take the locality of common variables
prove it.                                             into account.
RANGER                                                  This is what approximation of depth 2 does. The gran-
                                                      ularity is here pairs of literals. For a clause ci of length
Ranger [Prestwich and Lynce, 2006] is also a local search     n−n
                                                      ni     2   i
algorithm for UNSAT problems that may looks very similar ,the      ﬁltered models are supposed as equally dis-
                                                      tributed over the ni.(ni − 1)/2 pairs of literals occurring in
to GUNSAT. In this recent work, arbitrary resolution is per- c    (l ,l )          c
formed in order to generate a large number of the shortest i. Each pair 1 2 appearing in i is credited a weight of
                                                                 2n−1−ni
                                                      w2(ni)=                                      (l1,l2)
possible clauses, as fast as possible. To avoid combinatorial   ni.(ni−1) . The score of a pair of literal
explosion, they may remove clauses. As we will see after, is deﬁned as the sum of its weights in all clauses and noted
GUNSAT  has a more powerful reasoning mechanism and a S(l1,l2). The score S(c) of a clause c is the sum of the scores
ﬁnest heuristic to guide moves whereas Ranger is simpler but of all the pairs of literals it contains. In the remaining sec-
performs many more moves per second.                  tions, w and S may be used without indices for depth 2.
                                                        The deeper the approximation is, higher the cost to main-
3.2  Skeleton of our local search algorithm           tain it. We may reﬁne our measurement by considering
The solver GUNSAT has, for a large part, the same skeleton triplet of literals, but any explicit representation of all pos-
than classical local search algorithms. Intuitively, our algo- sible triplets of literals may be quickly unpracticable on real-
rithm will remove and add new clauses to the set of clauses istic UNSAT benchmarks.
Σ,tryingtoderive⊥ by the resolution rule. The whole prob-
lem is to ensure that our algorithm may be able to perform Remark 1 (Clauses scoring) If a given clause ci has a score
greedy moves in the search space. It is also fundamental to S(ci)  ni.(ni − 1).w2(ni)/2 then ci is nearly the only one
add a higher level reasoning mechanism to ensure good prac- that ﬁlter the models composed by the negation of its literals.
tical results. The GUNSAT algorithm, detailed in the later, is Even if such a clause is long, it should be kept in the proof.
given in algorithm 2.                                 At the opposite, if S(ci)  ni.(ni − 1).w2(ni)/2 then there
                                                      is a little hope that this clause is from great importance in the
3.3  Inside GUNSAT                                    current proof.
Estimation of the number of ﬁltered clauses
Given a set of clauses Σ built on n variables, we want to ap- What are Greedy Moves?
proximate the total number of its potential models that are We now have a scoring scheme for pairs and clauses. If we
directly ﬁltered out (over the 2n potential ones). The mea- try to improve the total sum of clauses scores over Σ, then our
sure must be based on explicit information only, and the com- algorithm will look for large clauses in which a lot of frequent
putational effort to obtain it must be polynomially bounded. pairs occur. This is the completely opposite goal.
Otherwise, one may need to exactly count the number of its Instead of trying to improve a measurement over the whole
models, which is clearly harder than the coNP-hard problem proof, we’ll focus on quadruplets of pairs only. In order to
we are initially facing.                              derive ⊥, we need a step in our proof where l and ¬l are in

                                                IJCAI-07
                                                  2258Σ. Because we perform 2-Saturation with Unit-Clause prop- c may be subsumed by some clause of Σ or may simply be a
agation at each step of our moves (see in the later), such a tautology). If one pair score cannot be improved, then the
case never occurs. So, we have to ﬁnd two literals l1 and l2 other pairs of the same quadruplet are iteratively tried. If
such that clauses l1 ∨ l2, ¬l1 ∨ l2, l1 ∨¬l2 and ¬l1 ∨¬l2 GUNSAT fails on all pairs of the best quadruplet, then the sec-
can be derived from Σ. In other words, we’ll try to im- ond quadruplet is tried and so on. This is what the call to
prove the scores of the four pairs built on the same vari- Add-One-Clause does.
ables, called quadruplets and noted [x1,x2]. Because we
                                                      Removing  useless clauses
want to localise quadruplets where all pairs have a high score,
                                                      As we have seen, clause scoring will be preferred to a sim-
we deﬁne the score Sq([x1,x2]) over a quadruplet as the
                                                      ple measurement of clause length to localise useless ones.
sum of the squares of the scores of its pairs Sq([x1,x2]) =
       2           2           2            2         This mechanism allows us to keep large clauses in Σ,es-
S(l1,l2) + S(¬l1,l2) + S(l1, ¬l2) + S(¬l1, ¬l2) .Any
                                                      pecially if it is the only one to ﬁlter out a large number of
move that enhance the score of one of the best scored quadru-
                                                      pairs. However, it is essential to keep vital clauses in Σ.
plets is thus a greedy move.
                                                      They ensure that we are preserving its unsatisﬁability. Vi-
Neighbourhood                                         tal clauses are initial clauses, or any clause that previously
Adding any clause c ∈/ Σ to Σ such that Σ  c may deﬁne subsumed another vital clauses. We also forced the algorithm
the neighbourhood. However, the deduction mechanism must to keep binary clauses. This step is performed by the call to
be restricted to a correct but polynomially bounded and un- Remove-One-Clause.
complete method. Otherwise, one may reduce GUNSAT to a Finding a random start
single call to any complete SAT solver to check if Σ ⊥and
                                                      As described in GUNSAT skeleton, random start and general
then add it to Σ.
                                                1     iteration of the algorithm only differ in the removing or not of
  We chose to use the 1-Resolution mechanism, noted  ,
                       1                        Res   clauses at each step. During the random start initialisation, no
which is deﬁned as Σ      c iff c = c1 ⊗ c2 where
                       Res                            clauses are removed (except any subsumed clause) in order to
c1 and c2 occur in Σ. Even if this rule is very simple,
                                                      ﬁll the proof up to MaxSize clauses.
we are already facing a huge neighbourhood. To illustrate
this, let’s take a random k-SAT formula at a given ratio r, 3.4 Other reﬁnements
    n             r × n
with  variables and     clauses. Before the ﬁrst move, It has been essential to add three powerful mechanisms to
each literal occurs on average k.r.n/2 times, and k2.r2.n2/4
                                                      GUNSAT  in order to make it competitive to other resolution-
clauses may be derived from 1-Resolution on it, which give
                    n3.k2.r2/4                        based reasoning systems. The ﬁrst but essential reﬁnement
for the whole formula         potential clauses. For a concerns subsumptions. Before adding a new clause, we
700 variables 3SAT formula at threshold (r =4.25), we
                1010                                  perform forward/backward subsumption detection [Zhang,
already have over    potential moves to rank. Random  2005].
moves in this huge neighbourhood may only lead to blind
search for unsatisﬁability, without any hope to beat ordered Binary clause saturation
resolution-based algorithms like [Dechter and Rish, 1994; The power of binary clause saturation has been exploited
Simon and del Val, 2001].                             with success in [Bacchus, 2002] for preprocessing purposes.
                                                      At each step of the walk, binary clauses, related to our
Finding the bests Greedy Moves
                                                      pairs of literals, have a special treatment in the call to
Any explicit exploration of the neighbourhood is impossible 2-Saturation. Each time a new binary clause is found
in practice. However, if we know in advance that we have to in Σ, all resolutions between the set of binary clauses are per-
increase the score of one of the bests quadruplets, we may try formed to saturate Σ with it. In order to exploit their full
to increase the score of any of one of its pairs.     power, an equivalency literal search is performed: if clauses
  Let [x1,x2] be the best scored quadruplet in Σ. Increasing
                                                      l1 ∨¬l2 and ¬l1 ∨l2 are found in Σ, then all occurrences of l1
the score of any of its pairs (l1,l2) amounts to adding any
                                                      are replaced by l2 and l1 is tagged as a new potential extended
new clause containing both l1 and l2. Short clauses will grant
(l ,l )                                               variable to be used in the latter search.
 1  2 a higher score, and should be preferred. However, the While performing the binary clause saturation, the algo-
score of the new clause itself has to be taken into account. If
                                                      rithm may ﬁnd new unary clauses l1. The literal l1 is then
we add a short clause with a high score, then this clause will propagated in the whole formula by unit propagation (all
probably be considered as useless in the next iteration of the
                                                      clauses containing l1 are deleted, all clauses containing ¬l1
algorithm. Thus, we are looking for a short clause with the are shortened). An inconsistency may be found at this step
lowest possible score to ﬁlter out new potential models. and then returned to the main algorithm.
  When looking for this new clause with l1 and l2,weﬁrst
try to localise the pivot variable on which we’ll perform the Extended Resolution
resolution rule. If such a pivot p exists, then S(l1,p) > 0 and When the algorithm has tried to increase the score of a given
S(¬p, l2) > 0. We thus have to choose a clause cp containing pair of literals too many-times without any success, we chose
l1 and p, and a clause c¬p containing ¬p and l2.Toprevent to adopt a tricky solution that really pays: use extended res-
the new clause from having a high score, we only try to gen- olution (ER) to artiﬁcially increase the score of this pair of
erate the new clause c from the two clauses having the lowest literals.
scores. Because of this restrictions, it is not always possible The extended rule e ⇔ l1 ∨ l2 is encoded by the three
to produce a new clause c containing l1 and l2 (for instance, clauses (¬e∨l1 ∨l2), (e∨¬l1) and (e∨¬l2). If necessary, the

                                                IJCAI-07
                                                  2259Add-Extended-Variable                                              basic      LH         ER       LH + ER
                          step may add a fresh variable         %S   T(F)  %S   T(F)  %S   T(F)  %S   T(F)
by adding all those three clauses to Σ. Of course, we ensured aim-50 (8) 12 2.14 100 1.41 60 15.14 100 1.58
                                                                      (26)      (146)     (1749)      (142)
that a pair of literals can only appear in at most one extended aim-100 (8) 10 36.83 55 11.93 27 139.74 97 49.37
rule. As we’ll see section 4, this very simple rule gives very       (3954)     (923)     (4998)     (1726)
                                                       aim-200 (8) 0    -   60  63.62  5  739.00 85  201.29
good results in practice.                                                      (1098)     (9099)     (2009)
                                                       jnh (33)   6   0.95  57   8.48 18   68.15 62   4.21
Look Ahead techniques                                                  (0)      (276)      (986)      (687)
                                                       xor (39)   0     -         -   1.5 308.83 11   31.91
The patented St˚almarck method [St˚almarck, 1994],which                                   (6932)     (5197)
gives good results in practice on some structured benchmarks,
uses a powerful Look Ahead technique to detect equivalen- Table 1: Results on structured instances. %S gives the per-
cies between literals until an inconsistency is found. It uses a centage of solved instances (5 launches per instance). T
reformulation of the initial formula, based on a set of triplets means Time (in seconds, averaged of all successful runs), and
(p ⇔ q ⇔ r and p ⇔ q ⇒ r only). When formulae are ini- F gives the averaged total number of ﬂips.
tially written in CNF, the power of this method may be par-
tially captured by unit-propogation lookahead (LH) [LeBerre,                     LH + ER
    ]                                                                 V   R    %S     T(F)
2001 .                                                                50  4.25 58   60 (3880)
  To enhance the power of GUNSAT, we added LH tech-                   50  5.0  86   18 (1520)
niques on pairs of literals. The four possible values of pairs        50  6.0  97    5 (545)
                                                                      60  4.25 35  126 (5785)
are iteratively propagated in Σ, searching for more, implied,         60  5.0  68   67 (3346)
unit propagations. If any literal l of Σ is set to ⊥ in all the       60  6.0  92   16 (1094)
                          Σ ¬l                                       70  4.25 23  189 (6626)
four tries, then LH proved that , and the unary clause                70  5.0  51  187 (6193)
¬l is added to Σ.                                                     70  6.0  87   59 (2389)

Restarting                                            Table 2: 3-SAT Random instances - Each category contains
When  GUNSAT fails to derive ⊥ from Σ after MaxFlips  100 instances, each instance is solved 50 times
steps, a restart is performed. All clauses, except binary ones
and the set of vital clauses, are removed. To ensure that GUN-
SAT will explore another part of the search space, we added [Dubois and Dequen, 2001] for random instances outperform
random number to cut ties of quadruplets having the same GUNSAT. We rather want to compare it with resolution-based
scores up to a given . Each restart is followed by a new ran- solvers.
dom generation of quadruplets random numbers. All clauses We compared 4 versions of our solver: the basic one, the
containing at least one extended variables are deleted after one with lookahead (LH) only, with extended resolution only
each restart, including binary ones.                  (ER) and the one with both of them (LH+ER).
  A particularity of our local search algorithm may be em-
phasised here: because of unit propagation, binary clause sat- 4.1 Structured instances
                             Σ
uration and subsumption deletion, may evolve from starts Table 1 reports the results obtained by GUNSAT on structured
to restarts. Hopefully, Σ will only evolve to a simpler and problems. We do not report the original DR performances
simpler formula.                                      [Dechter and Rish, 1994]: over the 187 runs, only 47 ﬁn-
                                                      ished without a memory allocation error and only 9 instances
4  Experimental evaluation                            were solved (all aim-50 and 1 xor). ZRes [Simon and del
                                                      Val, 2001] was able to solve all aim-50,halfaim-100,but
Our results were obtained with a Xeon 3.4Ghz with 2GB
                                                      failedtosolveaim-200  and jnh. It was able to solve all
memory. GUNSAT  is a prototype written in java and a lot of
                                                      xor  instances, because of its ability to handle large set of
optimisations are still planned (Java API LinkedList data
                                                      highly structured clauses.
structure are for instance used and may be greatly improved).
In addition, our current implementation use an explicit repre- It is clear that proposed reﬁnements (LookAhead and Ex-
sentation of all pairs, which is a very costly operation. We are tended Resolution) and especially their combination provide
planning to manipulate only the Top-M best pairs of literals a realistic local search solver for UNSAT problems.
in our next versions.
  Because of these two weak points, we selected instances 4.2 Random instances
with only a very restricted number of clauses and variables Table 2 reports results on random instances with different
(aim, xor and jnh). Furthermore, like other local search algo- number of variables (from 50 to 70) and different ratio (4.25,
rithms, GUNSAT has a lot of parameters to tune and some of 5 and 6). We only report results for ER+LH because all other
them may be improved in the near future. We chose to per- versions of GUNSAT were only able to solve at most 1% of the
form 50 restarts and to ﬁx the number of ﬂips to 6 times the instances. The solver DR cannot solve either these instances.
initial number of clauses.                            ZRes solves only instances with 50 variables at the threshold
  As we have previously said, our purpose is not here to in 250 seconds on average. [Prestwich and Lynce, 2006] also
compare GUNSAT to state-of-the-art SAT solvers. It is clear reports bad results on random instances with RANGER.
that conﬂict learning solvers like ZCHAFF [Moskewicz et Even on hard examples for resolution based algorithms,
al., 2001] for structured instances and solvers like KCNFS GUNSAT LH+ER showed promising results, in comparison

                                                IJCAI-07
                                                  2260