               A General Framework for Reasoning about Inconsistency

                   V. S. Subrahmanian                              Leila Amgoud
          Computer Science Dept. and UMIACS                         IRIT - CNRS
                  University of Maryland                       118, route de Narbonne,
              College Park, Maryland 20742                31062 Toulouse Cedex 9, France
                      vs@cs.umd.edu                                amgoud@irit.fr

                    Abstract                            The aims of the paper are:
    Numerous logics have been developed for reason-     1. to propose a uniﬁed framework for reasoning about in-
    ing about inconsistency which differ in (i) the logic consistency, which captures existing approaches as a
    to which they apply, and (ii) the criteria used to    special case and provides an easy basis for comparison.
    draw inferences. In this paper, we propose a gen-   2. to apply the framework using any logic (monotonic or
    eral framework for reasoning about inconsistency      nonmonotonic), including ones for which inconsistency
    in a wide variety of logics including ones for which  management has not been studied before (e.g. temporal,
    inconsistency resolution methods have not yet been    probabilistic logics).
    studied (e.g. various temporal and epistemic log-
    ics). We start with Tarski and Scott’s axiomatiza-  3. to allow end-users to bring their domain knowledge to
    tion of logics, but drop their monotonicity require-  bear, allowing them to voice an opinion on what works
    ments that we believe are too strong for AI. For      for them, not what a system manager decided was right
    such a logic L, we deﬁne the concept of an option.    for them., in other words, to take into account the pref-
    Options are sets of formulas in L that are closed and erences of the end-user.
    consistent according to the notion of consequence   4. to propose efﬁcient algorithms for computing the pre-
    and consistency in L. We show that by deﬁning an      ferred options.
    appropriate preference relation on options, we can
                                                        We do this by building upon Dana Scott’s celebrated no-
    capture several existing works such as Brewka’s
                                                      tions of an abstract logic. We start with a simple example
    subtheories. We also provide algorithms to com-
                                                      to illustrate why conﬂicts can often end up being resolved in
    pute most preferred options.
                                                      different ways by human beings, and why it is important to al-
                                                      low end-users to bring their knowledge to bear when a system
1  Introduction                                       resolves conﬂicts.
Inconsistency management has been intensely studied in vari- Example 1 (Salary example) Suppose a university payroll
ous parts of AI, often in slightly disguised form [Poole, 1985; system says that John’s salary is 50K, while the university
G. Pinkas, 1992; Rescher and Manor, 1970; Gardenfors, personnel database says it is 60K. In addition, there may be
1988]. For example, default logics [Reiter, 1980] use syn- an axiom that says that everyone has exactly one salary. One
                                                                                                     base
tax to distinguish between strict facts and default rules, and simple way to model this is via the theory, denoted sal ,
identify different extensions of the default logic as poten- below.
tial ways of “making sense” of seemingly conﬂicting infor-
mation. Likewise, inheritance networks [Touretzkey, 1984] salary(John, 50K) ←                         (1)
deﬁne extensions based on analyzing paths in the network salary(John, 60K) ←                          (2)
and using notions of speciﬁcity to resolve conﬂicts. Argu-        S = S  ←   salary(X, S) ∧ salary(X, S).
mentation frameworks [Dung, 1995] study different ways in                                             (3)
which an argument for or against a proposition can be made, base
                                                      sal    is obviously inconsistent. Suppose ( 3) is deﬁnitely
and then determine which arguments defeat which other ar-
                                                      known to be true. Then a bank manager considering John for
guments in an effort to decide what can be reasonably con-
                                                      a loan may choose the 50K number to determine a maximal
cluded. All these excellent works provide an a priori con-
                                                      loan amount that John qualiﬁes for. But a national tax agency
ﬂict resolution mechanism. A user who uses a system based
                                                      may use the 60K ﬁgure to send John a letter asking him why
on these papers is more or less committed to the semantics
                                                      he underpaid his taxes.
implemented in the system, and has little say in the matter
(besides which most users querying KBs are unlikely to be Neither the bank manager nor the tax ofﬁcer is making any
experts in even classical logic, let alone default logics and attempt to ﬁnd out the truth (thus far) - however, both of them
argumentation methods).                               are making different decisions based on the same facts.

                                                IJCAI-07
                                                   599  The rest of this paper proceeds as follows. In Section 2, we 3. Applying classical entailment on a choice of the pre-
recall Scott’s notion of what a logic is [Scott, 1982]. Then, ferred subbases.
in Section 3, we deﬁne our general framework for reasoning Throughout the rest of this paper, we assume that we have
about inconsistency for any Scott logic. Section 4 shows how an arbitrary, but ﬁxed (monotonic or non-monotonic) logic
to adapt the general framework to the particular case of in- (L, CN).
consistent bases. In section 5, we show how existing works The basic idea behind our framework is to construct what
can be retrieved in our general framework. Section 6 presents we call options, and then to deﬁne a preference relation on
some examples of how the general framework can be applied these options. The preferred options are intended to support
in other logics such as temporal and probabilistic logics. In the conclusions to be drawn from the inconsistent knowledge
Section 7, we develop algorithms to compute optimal options base. Intuitively, an option is a set of formulas that is both
based on various types of monotonicity assumptions about the consistent and closed w.r.t. the consequence in logic (L, CN).
objective function. Note that due to lack of space, we only in-
                                                                                           O
clude a few proofs - the full version of this paper will contain Deﬁnition 2 (Options) An option is any set of elements of
                                                      L
all proofs.                                             such that:
                                                        •Ois consistent.
2  Scott’s Abstract Consequence Operation               •Ois closed, i.e. O = CN(O).
Dana Scott [Scott, 1982] deﬁnes an abstract logic to consist Let Opt(L) be the set of all options that can be built from
of a set L (whose members are called well-formed formulas) (L, CN).
and a consequence operator CN. CN is any function from 2L
                    L                                 Les us illustrate the above concept.
(the powerset of L)to2 (intuitively, CN(X) returns the set
of formulas that are logical consequences of X according to Example 2 Let L be a propositional language, and let K⊆
the logic in question) that satisﬁes the following axioms: L be the knowledge base K = {a, a → b, ¬b}. The following
                                                      options, for instance, can be built from K: O1 = CN({a}), O2
Expansion X  ⊆ CN(X).
                                                      = CN({¬b}), O3 = CN({a  →  b}), O4 = CN({a, a → b}),
Idempotence CN(CN(X)) =   CN(X).                      O5 = CN({a, ¬b}), O6 = CN({a, b}).
Monotonicity X ⊆ Y  ⇒ CN(X)  ⊆ CN(Y  ).               The framework for reasoning about inconsistency has three
Coherence CN(∅) = L.                                 components: a set of all options that can be built from the
                                                      considered logic, a preference relation between the options,
It is easy to see that most well known monotonic logics (such and an entailment mechanism.
as propositional logic [Shoenﬁeld, 1967], ﬁrst order logic
                                                                                        (L, CN)
[Shoenﬁeld, 1967], modal logic, temporal logic, fuzzy logic, Deﬁnition 3 (General framework) Let be a ﬁxed
probabilistic logic [Bacchus, 1990], etc.) can be viewed as a logic. A general framework for reasoning about inconsistency
                                                                (L, CN)          Opt(L), 
, |∼ 
special case of Scott’s notion of an abstract logic. The non- in the logic is a triple        such that:
monotonic logics introduced in AI do not satisfy the mono- • Opt(L) is the set of options built from (L, CN)
                                 [                ]
tonicity axiom, though Marek et. al. Marek et al., 1990 •
⊆Opt(L)×Opt(L).     
 is a partial (or total) preorder,
have deﬁned the notion of non-monotone rule systems that  that is, it is reﬂexive and transitive.
extend Scott’s ideas to non-monotonic logics by dropping the    Opt(L)
Monotonicity Axiom above. In the remainder of this paper, •|∼:2      →  Opt(L) is an entailment mechanism.
we drop monotonicity axiom. Once (L, CN) are ﬁxed, we can The second important concept of the above general frame-
deﬁne a notion of consistency as follows:             work is the preference relation 
 between options. Indeed,
                                                      O  
O                       O
Deﬁnition 1 (Consistency) Let X ⊆L. X is consistent in  1    2 means that the option 1 is at least as preferred
                                                         O
logic (L, CN) iff CN(X) = L.                         as  2. This relation captures the idea that some options
                                                      are better than others because, for instance, the user has
           X
This says that is consistent iff its set of consequences is not decided that, or because those preferred options satisfy
the set of all well formed formulas. Note that the coherence the requirements imposed by the developer of a conﬂict
                       CN       ∅
requirement characterizing forces to always be consis- management system. For instance, in Example 1, the user
tent - this is reasonable for pretty much any reasonable logic chooses certain options (e.g. the options where the salary is
as saying nothing should intuitively be consistent.   minimal or where the salary is maximal based on his needs).
                                                      In most approaches for handling inconsistency, maximal
3  A general framework for handling                   consistent subsets of the inconsistent knowledge base have
   inconsistency                                      an important role. However, if we consider a KB such as
                                                      K =  {(a ∧ b); a → c; b →¬c}, there are three maximal con-
This section proposes a general framework for handling in-
                                                      sistent subsets. One of these is MCS1 = {a → c; b →¬c}.
consistency under any logic. Reasoning with inconsistent If we represent this KB as the default theory Δ=(W, D)
knowledge bases is a process which follows three steps:                      :(a ∧ b) :a→c :b→¬c
                                                      where W  = ∅ and D =  { (a ∧ b) ; a→c ; b→¬c }, we would
 1. Constructing consistent subbases,                 get three extensions corresponding to the three maximal
 2. Selecting among all the subbases the preferred ones, consistent subsets. However, one could argue that MCS1
    called preferred subbases,                        (and the extension corresponding to it) are too weak - we

                                                IJCAI-07
                                                   600could have included either a or b by weakening the formula knowledge base K. This section shows how to associate a set
(a ∧ b) instead of dropping it altogether.            of preferred options with an inconsistent knowledge base K.
                                                      Deﬁnition 5 We say an option O handles K iff there is a sub-
The third component of the framework is a mechanism                               
                                                      set K ⊆Ksuch that  O = CN(K  ). Let Base be a function
for selecting the inferences to be drawn from the knowledge                               
                                                      that returns for any option O, the subbase K . Thus, Base(O)
base. In our framework, the set of inferences is itself an 
                                                      = K .
option. Thus, it should be consistent. This requirement is of
great importance, since it ensures that the framework delivers Intuitively, an option handles K iff it is the closure of some
                                                                                       
safe conclusions.                                     subset of K. Clearly, such a subset K must be consistent
  The set of inferences is generally computed from the dif- because O is consistent (by virtue of being an option) and as
                                                                
ferent preferred options. Let O be the set of all preferred O = CN(K ).
            
options, i.e. O = {Oi ∈ Opt(L) | Oj ∈ Opt(L) with Oj

O}                                                   Example 4 (Handling inconsistent default logic theories)
    i . Different entailment mechanisms can be deﬁned for Let us consider default logic as our base logic, and suppose
selecting the inferences to be drawn. Here are some examples we consider the default theory Δ=(W, D) where W = {p}
                                                                 :p
of such mechanisms.                                   and D  =  {  }. Most researchers in default logic would
               Opt(L), 
, |∼                  O                ¬p
Deﬁnition 4 Let              be a framework, and      consider this theory to be inconsistent as it has no exten-
                             ψ               L
the set of its preferred options. Let be an element of . sion. However, it has two valid options: Δ1 =(∅, ∅) and
                                            
Universal criterion: L|∼ψ iff ψ ∈Oi, ∀Oi ∈O  . ψ is   Δ2 =({p}, ∅). A user may specify a preference relation that
    called a universal consequence of L.              prefers Δ2. This shows how our framework can be applied
                                                     to default logic.
Argumentative criterion: L|∼ψ iff ∃Oi ∈O   such that
                       
    ψ ∈Oi, and Oj ∈O    such that ¬ψ ∈Oj. ψ is called Deﬁnition 6 Suppose (Opt(L), 
, |∼ ) is a general frame-
    an argumentative consequence of L.                work for reasoning about inconsistency in logic (L, CN) and
We can show that the set of inferences made using the uni- suppose K is an inconsistent knowledge base. An optimal
versal criterion is itself an option of the language L, thus it is option for K is any member O∈Opt(L) such that:
an entailment mechanism. Moreover, it is included in every •Ohandles K and
preferred option.                                       •                      O  ∈ Opt(L)            K
                 Opt(L), 
, |∼                           there is no other option          that handles
Proposition 1 Let              be a framework built       such that O 
O.
from a monotonic logic (L, CN).
  •        {ψ| ψ                           L}         What this deﬁnition says is that when reasoning about an in-
    The set      is a universal consequence of is an                         K
            Opt(L)                                    consistent knowledge base , we always look at the set of
    option of     .                                                          K
                                                     optimal options that handle .
  •∀Oi  ∈O   , {ψ| ψ is a universal conseq. of L} ⊆ Oi.
                                                      Example 5  Let us return to Example 1. Suppose we use
                 C   {ψ| ψ
Proof (Sketch) Let =      is a universal consequence of O1 = {(1), (2)}, O2 = {(1), (3)}, O3 = {(2), (3)}}.Of
L}                          C
  . By deﬁnition, any element in belongs to all the options course, we assume all of these options are also closed under
  O              C⊆O     ∀O  ∈O
in   . Consequently,    i,  i      .                  usual ﬁrst order consequence. First, let us say that these three
         O  ∈O              O                   C
  As each  i      is an option, i is consistent. Thus, options are preferred to all other options in the language.
(which is a subset of Oi) is also consistent. Similarly, since C
                                                       •                 sc(O )        O
⊆Oi, thus CN(C) ⊆Oi  as well, ∀Oi ∈O . Consequently,      Suppose the score   i of option i is the sum of the
CN(C) ⊆C(according to the above deﬁnition of universal    multiset {S |sal(John,S) ∈Oi}. In this case, the score
consequences). Thus, C is closed, and consequently it is an of O1 is 50K, that of O2 is 110K, and that of O3 =
option.                                                   60K. We could now say that Oi 
Oj   if sc(Oi) ≤
                                                          sc(Oj). In this case, the only option that handles K is
Similarly, we can show that the set of argumentative conse-
                                                          O1 which corresponds to the bank manager’s viewpoint.
quences is an option. Thus, it is a valid entailment mecha-
nism.                                                   • On the other hand, suppose we say that Oi 
Oj iff
                                                          sc(Oi) ≥ sc(Oj). In this case, the only optimal option
Proposition 2 Let  Opt(L), 
, |∼  be a framework built
                                                          that handles K is O2 — this corresponds to the view that
from a monotonic logic (L, CN). The set {ψ| ψ is an argu-
                                                          the rule saying everyone has only one salary is wrong
mentative consequence of L} is an option of Opt(L).
                                                          (perhaps the database has John being paid out of two
However, the following criterion is not a valid entailment projects simultaneously and 50K of his salary is charged
mechanism since the set of consequences returned by it may to one project and 60K to another).
be inconsistent, thus it is not an option.
                                                        • Now consider the case where we change our scoring
          L|∼ψ     ∃O  ∈O           ψ ∈O
Example 3        iff  i      such that     i.             method and say that sc(Oi)=min{S | sal(John,S) ∈
                                                          Oi}.   In this case, sc(O1)=50K, sc(O2)=
4  Optimal Options that Handle Inconsistency              60K, sc(O3)=50K. Let us suppose that the prefer-
In the preceding section, we have developed the concepts of ence relation says that Oi 
Oj iff sc(Oi) ≥ sc(Oj).
an option and a preferred option for any logic (L, CN).How- Then the only optimal option is O2 which corresponds
ever, this has been deﬁned in a way that is independent of a exactly to the tax agency’s viewpoint.

                                                IJCAI-07
                                                   601                                                                                  
Thus, we see that our general framework for optimally han- •∀Si ∈ INCL(K), ∃O∈O    , such that O = CN(Si).
dling inconsistency is very powerful - it can be used to handle   
                                                        •∀Oi  ∈O   , ∃ S ∈ INCL(K)  such that Oi = CN(S).
inconsistencies in different ways based upon how the prefer-
ence relation between options is deﬁned.              6   New applications of the framework
5  Link with existing approaches                      In this section we show through the two following examples
                                                      that the above abstract framework can be used for reasoning
Two kinds of approaches have been proposed in the literature
                                                      about inconsistency using temporal logic and even probabilis-
for solving the problem of inconsistency. The ﬁrst one con-
                                                      tic logic.
sists of revising the knowledge base and restoring its consis-
tency. The second approach accepts inconsistency and copes Example 6 Consider the temporal logic theory T . The 
with it. The ﬁrst approach initiated in [Rescher and Manor, operator denotes the “next time instant” operator. Thus, the
1970] proposes to give up some formulas of the knowledge ﬁrst rule says that if a is true at time t, b is true at time (t+1).
base in order to get one or several consistent subbases of the Under standard temporal logic model theory, T is inconsis-
original base. Then plausible conclusions may be obtained tent.
by applying classical entailment on these subbases. In what
follows, we consider the case of propositional bases. When
                                                                            a  →b.                   (4)
the knowledge base is ﬂat, i.e. its formulas are not weighted,
                                                                            a
maximal consistent subbases are built.                                                                (5)
  Let K be a knowledge base that may be inconsistent, and S             ¬b                           (6)
= {S1, ..., Sn} its set of maximal (for set inclusion) consis-
                                                        We may choose to consider just three options: O1 =
tent subbases. We can show that these subbases correspond to CN({ 4, 5}), O = CN({ 4, 6}), O = CN({ 5, 6})
the preferred options of the above framework when the pref-        2                 3              . Sup-
erence relation 
 between options is monotonic. Let us ﬁrst pose now that we can associate a numeric score with each
deﬁne that notion of monotonicity.                    formula, describing the weight of the source that provided
                                          
           the formula. Let us say these scores are 3,1,2 respectively,
Deﬁnition 7 (Monotonic relation) The relation is said and the weight of an option Oi is the sum of the scores of the
monotonic iff for any X, Y ⊆L,ifX ⊆ Y , then Y 
 X.             T  ∩O    O  
O                O

                        X  ⊆ Y      X 
 Y            formulas in      i. i     j iff the score of i is greater
  is said anti-monotonic iff, if , then    .          than or equal to the score of Oj. In this case, the best option
Proposition 3 Let  Opt(L), 
, |∼  be a framework such is O2.
that 
 is monotonic. Let K be an inconsistent knowledge
                                                     Example 7  Consider the probabilistic logic [Bacchus, 1990]
base, and O be the set of preferred/optimal options for K.  T                           p  :[0.3, 0.4] p :
                                                     theory   consisting of three formulas         ,
  •∀Si, ∃O∈O     , such that O = CN(Si).              [0.44, 0.6], p :[0.41, 0.43]. Suppose we only consider op-
            
  •∀Oi  ∈O    ∃ S         Oi  CN(S)                   tions that assign a single non-empty probability interval to
             ,    such that =       .                                                                 
                                                      p. For two atoms A1 = p :[L, U] and A2 = p :[L ,U ],
In the case of prioritized knowledge bases, Brewka has pro-
                                                      let diff(A1,A2)=abs(L1   −  L2)+abs(U1   − U2). Let
posed in [Brewka, 1989] a deﬁnition of the preferred sub-
                                                      us say that the score of an option O = {A} is given by
bases. The basic idea behind those bases is to take as many          
                                                      KA∈T diff(A, A ). Suppose we say that option Oi 
Oj iff
important information into account as possible. In this con-
                                                      score(Oi) ≤ score(Oj). Intuitively, this means that we are
text, a knowledge base K is supposed to be stratiﬁed into K1,
                                                      preferring options that change the lower and upper bounds
..., Kn (K = K1 ∪...∪Kn) such that the formulas in the same
                                                      in T as little as possible. In this case, [0.3, 0.6] is a preferred
strata are equally preferred, whereas formulas in a strata Ki
                                                      option.
are preferred to formulas in Kj with i<j.
                                                                                                   K
Deﬁnition 8 Let K = K1 ∪ ...∪Kn be a knowledge base.    The reader may be tempted to think that given a that
S   S ∪ ...∪ S                       K                is inconsistent, an optimal option may always exist because
  =  1        n is a preferred subbase of if and only if              CN(∅)
∀j =1,...,n, S1 ∪ ...∪ Sj is a maximal (for set-inclusion) in the worst case, seems to be an option. However,
                  K  ∪ ...∪K                          this is not correct because we do not require that CN(∅) be in
consistent subbase of 1      j.                       Opt(L)
INCL(K)   denotes the set of preferred subbases of K.       .
We show that in order to capture the results of the above ap-
proach, one needs to deﬁne the appropriate preference rela- 7 Algorithms to Compute Optimal Options
tion between options.                                     that Handle Inconsistency
Deﬁnition 9 Let K be an inconsistent knowledge base, and In this section, we develop procedures to ﬁnd optimal options
OK  be the set of all options that handle K. Let O1, O2 ∈ for any logic (L, CN) under a varying set of assumptions. We
OK. O1 
O2   iff Base(O1) ∈ INCL(K), and Base(O2) ∈/  ﬁrst deﬁne what it means for a formula to be compatible with
INCL(K).                                              a given set of formulas.
Proposition 4 Let  Opt(L), 
, |∼  be a framework such Deﬁnition 10 Given a consistent set X ⊆Land a formula
that 
 is deﬁned as in Deﬁnition 9. Let K be an inconsis- F ∈L, we say that F is compatible with X iff X ∪{F } is
tent knowledge base, and O be the set of preferred/optimal consistent. We use the notation Comp(X) to denote the set
options for K.                                        of all formulas that are compatible with X.

                                                IJCAI-07
                                                   602  We now develop an iterative ﬁxpoint computational proce- procedure COO-Anti(L, CN, Opt(call), , K)
dure to ﬁnd an optimal option.                            1.    TODO   = {CN(∅)}
                                                                SOL  = {}
                    (L, CN)          K                    2.             ;
Deﬁnition 11 Suppose       is a logic, is a subset of     3.    while TODO = ∅ do
L, and 
 is a preference relation on options. We deﬁne an 4.        Pick X ∈ TODO  s.t.  ∃Y ∈ TODO s.t.
operator ΓK associated with K that maps sets of options to CN(Y )  CN(X).
sets of options as follows.                               5.        TODO  = TODO−{X}
                                                                     X  ∈ Opt(L)
Γ (X)=X       ∪{CN(Y    ∪{F  }) | F ∈ Comp(Y ) ∩K∧        6.        if          then
 K                                                        7.            SOL  =(SOL  −{Y  ∈ SOL  | X 
            Y ∈ X}.                                       Y }) ∪{X};
                                                          8.        else TODO = TODO   ∪{
  In other words, ΓK(X) works as follows:                 9.           CN(X    ∪{F   })  |  F      ∈
                                                                      Comp(X)  ∩K)}
  • First, it picks a set Y in X to expand.                                         ;
                                                          10.   end-while
  • It then ﬁnds an F ∈ Comp(Y ) ∩K.                      11. return any -preferred member of SOL.
  • It then closes Y ∪{F } and adds this to the answer, i.e.
    into ΓK(X).                                         Intuitively procedure COO-Anti generates ⊆-inclusion
                                                                                               Opt(L)
  Clearly, the operator ΓK is monotone under inclusion — minimal closed and consistent subsets that are in us-
moreover, the repeated application of ΓK yields a ﬁxpoint. ing a bottom up procedure and then chooses the best ones.
                                                                          CN(∅)     Opt(L)
This is deﬁned as follows.                            It starts by checking if  is in      - if so, it can be
                                                      returned because of the anti-monotonicity of 
. Otherwise,
                                                      it ﬁnds all formulas compatible with it and for each such for-
                0
               ΓK   =  {∅}.                           mula, it ﬁnds the logical consequences. Whenever it ﬁnds
              Γi+1  =Γi    ∪ Γ  (Γi ).                an option that handles K, it adds it to SOL and deletes any
               K       K     K   K                           SOL                                

                ω          i                          option in     that is worse than it (according to ). This
               ΓK   =     ΓK.                         procedure is continued.
                        i                               Pruning occurs in step (8) of the algorithm where the anti-
                                                                    

Proposition 5 Suppose (L, CN) is a logic and K is a subset monotonicity of is exploited. Moreover, the algorithm pro-
of L. Then:                                           ceeds in a greedy fashion, always choosing the best (or one
                                                      of the best) sets from TODO to expand in step (4).
    Γ
 1.  K is monotonic.                                    The reader may think that the ﬁrst solution found by this
     ω
 2. ΓK is a ﬁxpoint of γK.                            bottom up procedure is optimal. Unfortunately, this may
                ω                                     not be the case because anti-monotonicity merely states that
 3. Every set in ΓK is consistent.
                                                      O1 ⊆O2   →O1   
O2. It is possible for O1 
O2 to hold
  Note that the least ﬁxpoint of Γk is the empty set and not O1 ⊆O2
 ω                                                    even if        and hence, in the anti-monotonic case, one
ΓK because the latter starts its iteration not with the empty has to generate all ⊆-minimal options before deciding which
set, but with the set containing the empty set! Fortunately, we
                                    ω                 one is the best.
can make some concrete statements about ΓK.
                                                      Proposition 7 Suppose (L, CN) is a logic, (Opt(L), 
, |∼ )
Proposition 6 Suppose (L, CN) is a logic, (Opt(L), 
, |∼ )
                                               K      is a general framework for reasoning about inconsistency,
is a general framework for handling inconsistency, and is and K is a set of wffs. Further, suppose 
 is anti-monotonic.
a set of wffs. O is an optimal option that handles K iff:
                                                                                            K       COO-
    O∈Opt(L)   ∩ Γω                                     1. If there is an optimal option to handle , then
 1.                K and                                  Anti(L, CN, Opt(L), 
, K)
                            ω                                                   will return one.
 2. there is no O ∈ Opt(L) ∩ ΓK such that O 
O.
                                                        2. If COO-Anti(L, CN, Opt(L), 
, K) returns O, then O is
The above result suggests an immediate algorithm to ﬁnd an an optimal option that handles K.
optimal option for S regardless of whether the preference re-
lation is monotonic or not.                             Just as in the case of anti-monotonic 
 preference rela-
                                                      tions, we can also improve on the COO-Naive algorithm
    procedure COO-Naive(L, CN, F, K, Opt(L), )            

         X =Γω                                        when    is monotonic. The COO-Mon  algorithm assumes
    1.         K;                                                    

    2.   X = X  ∩ Opt(L);                             monotonicity of  and works in a similar manner as for
    3.   Return any O∈X such that there is no O ∈ X  COO-Anti  but starts top down and eliminates members of
    such that O O.                                  CN(K)  instead of starting the iteration from the empty set.
                                                      The Coo-Mon  algorithm uses the notion of a deletion candi-
  One reason for the inefﬁciency of COO-Naive is that date.
it makes no assumptions about the preference relation.
However, if the preference relation is known, for example, Deﬁnition 12 Suppose (L, CN) is a logic and K is a set of
to be monotone or anti-monotone, then we can do better. wffs. A set Y ⊆Kis a deletion candidate for K iff
COO-Anti  below shows that when 
  is assumed to be
                                                        1. CN(K−Y   ) ⊂Kand
anti-monotone, we can do better than COO-Naive.
                                                        2. CN(K−Y   ) is consistent

                                                IJCAI-07
                                                   603