                        On the Compilation of Stratiﬁed Belief Bases
                        under Linear and Possibilistic Logic Policies
          Salem Benferhat                      Safa Yahi                       Habiba Drias
  CRIL-CNRS, Universit´e d’Artois          Universit´e USTHB          Institut National d’Informatique
          rue Jean Souvraz            BP 32 El-Alia Bab Ezzouar             BP 68M Oued Smar
     62307 Lens Cedex. France.          16111 Algiers. Algeria.           16309 Algiers. Algeria.
    benferhat@cril.univ-artois.fr        yahi.safa@gmail.com                   h drias@ini.dz

                    Abstract                          proach [Williams, 1995], and linear order approach [Nebel,
                                                      1994]. Examples of approaches which use several consis-
    Developing efﬁcient approaches for reasoning un-  tent subbases are Rescher’s notion of acceptable subbases
    der inconsistency is an important issue in many ap- [Rescher, 1976], Brewka’s preferred sub-theories [Brewka,
    plications. Several methods have been proposed to 1989] and the lexicographical system [Benferhat et al., 1993;
    compile, possibly inconsistent, weighted or strat- Lehmann, 1995].
    iﬁed bases. This paper focuses on the well-known
                                                        In this paper, we mainly focus on the linear order and
    linear order and possibilistic logic strategies. It pro-
                                                      on possibilistic logic policies. Given a stratiﬁed belief base
    vides a way for compiling a stratiﬁed belief base
                                                      Σ=(S1,...,Sk)   (S1 contains the most prioritized formulas,
    in order to be able to process inference from it in
                                                      while the stratum Sk contains the least prioritized formulas),
    polynomial time. The resulting extra compilation
                                                      possibilistic logic only takes into account the ﬁrst i consistent
    cost is very low. In particular, the number of addi-
                                                      strata, and stops when inconsistency is met. Nebel [Nebel,
    tional variables, that are added to original stratiﬁed
                                                      1994] has elaborated a less liberal way to select one consis-
    bases, corresponds exactly to the number of priority
                                                      tent subbase. When inconsistency occurs at some strata k,we
    levels existing in the base. Moreover, our compi-
                                                      give up the whole stratum (concerned by inconsistency), but
    lation approach allows an efﬁcient computation of
                                                      we continue to add strata with lower certainty if consistency
    weighted possibilistic conclusions and possibilistic
                                                      is preserved.
    conditioning.
                                                        From a practical point of view, reasoning under inconsis-
                                                      tency is a hard problem [Nebel, 1998]. Indeed, deciding the
1  Introduction                                       inference from a stratiﬁed belief base with respect to the pos-
                                                                        Δp[  (    )]
Integrating pieces of information coming from different, pos- sibilistic policy is a 2 O log n -complete problem while
sibly conﬂicting sources may lead to reason with inconsis- deciding the inference from it with respect to the linear order
                                                              Δp
tent formulae. In this case, classical inference can not be policy is 2-complete.
used to exploit the given belief base, since from an incon- To address this problem, one can use knowledge com-
sistent base every formula can be inferred (ex falso quodlibet pilation. Knowledge compilation is a key direction of re-
sequitur principle).                                  search in Artiﬁcial Intelligence [Selman and H.Kautz, 1996;
  Many approaches have been proposed in order to reason Cadoli and Donini, 1997; Darwiche and Marquis, 2002].It
under inconsistency without trivialization. While some of consists in preprocessing off-line the knowledge base in or-
them consist in weakening the inference relation such as der to make the inference from it easier on-line.
paraconsistant logics, others weaken the available beliefs like A key issue, in possibilistic logic, is how to determine
the well-known coherence based-approaches [Rescher and the level of uncertainty associated with formulas that can be
Manor, 1970].                                         derived from an inconsistent knowledge base. Another im-
  Coherence-based approaches can be characterized by the portant issue is how to compute ”possibilistic conditioning”.
two following steps: i) give up some formulas of the incon- Namely, like in possibilistic networks, given some evidence,
sistent belief base Σ in order to restore its consistency; this often provided in the form of a conjunction of literals (a term),
operation results into one or several consistent subbases of Σ; we need to evaluate the impact of this evidence on the cer-
and ii) use classical entailment on these consistent subbases tainty degrees of variables or more generally of formulas of
to deﬁne plausible conclusions from the knowledge base Σ. knowledge bases.
When priorities attached to pieces of knowledge are available, In this paper, we propose an efﬁcient way to compile strat-
the task of coping with inconsistency is simpliﬁed, because iﬁed belief bases with respect to the linear order and possi-
priorities give information about how to solve conﬂicts. bilistic logic policies. In order to support possibilistic con-
  Examples of prioritized coherence approaches which se- ditioning and the computation of weights associated with
lect one consistent subbase are the possibilistic logic ap- concluded formulas, we need to keep track and encode the
proach  [Dubois et al., 1994], Williams’ adjustment ap- weights associated with formulas. This is obtained by adding

                                                IJCAI-07
                                                  2425new variables, as it has been previously done in some exist- ignored. Formally:
ing works [Darwiche and Marquis, 2004; Coste-Marquis and
                                   ]
Marquis, 2004; Benferhat and Prade, 2005 .            Deﬁnition 2 Let Σ = (S1,...,Sk) be a SBB. The set ΣPO
  The main advantage of our approach is the resulting ex-                       Σ
                                                      of all the preferred subbases of w.r.t the possibilistic policy
tra compilation cost which is very low. Indeed, the number            s−1
                                                      is the singleton { i=1 Si}, where s is the smallest index s.t.
of additional variables needed for compiling stratiﬁed knowl- s
                                                           Si is inconsistent. If Σ is consistent, then ΣPO =Σ.
edge bases under linear order and possibilistic policy, is only i=1
equal to the number of strata in the belief base. In [Benferhat As to the linear order policy which keeps more information,
and Prade, 2006] a compilation method has been proposed it does not stop at the ﬁrst level where it meets inconsistency:
to compile possibilistic bases (and not linear order policy). when an inconsistency is encountered, the current stratum is
However, this approach needs to add binary clauses and is dropped, and the process moves to the next stratum and so on.
based on the idea of forgetting variables which limits the tar- Formally:
get compilation languages that can be exploited. Moreover, it Deﬁnition 3 Let Σ = (S1,...,Sk) be a SBB. The set ΣLO of
does not support possibilistic conditioning.                                   Σ
                                                      all the preferred subbases of w.r.t the linear order policy
  The remainder of the paper is organized as follows. Sec-         {  k    }                    
                                                      is the singleton i=1 Si ,whereSi is deﬁned by Si = Si if
tion 2 introduces stratiﬁed belief bases and the correspond- ∪ i−1          ∅
ing inference relations w.r.t the linear order and possibilistic Si j=1 Sj is consistent, otherwise.
logic policies. We also deﬁne how to associate weights to the Example 1 Let Σ=(S1,S2,S3,S4) be such that:
inferred conclusions and the notion of possibilistic condition- S1 = {a ∨ b}
ing. After a brief background on knowledge compilation in S2 = {¬a, c}
Section 3, we describe our compilation method in the case of S3 = {¬b, d ∨ e}
linear order policy in Section 4. In Section 5, we adapt this S4 = {b ∨ d, e}.
method to compile possibilistic knowledge bases. We also, •  ∪                       ∪  ∪
show how to handle weighted possibilistic inference relation S1 S2 is consistent whereas S1 S2 S3 is not. Accord-
                                                          ing to the possibilistic policy, we stop at the ﬁrst stratum
and possibilistic conditioning. Section 6 provides some com-                            Σ    =    ∪    =
parative studies and concludes the paper.                 where we meet inconsistency thus PO  S1   S2
                                                          {a ∨ b, ¬a, c}.
                                                        •
2  Stratiﬁed Belief Bases                                 As for the linear order policy, we delete S3 and continue
                                                          the treatment with the other strata. S1 ∪ S2 ∪ S4 is con-
We consider a ﬁnite propositional language denoted by L. |= sistent so ΣLO = S1 ∪S2 ∪S4 = {a∨b, ¬a, c, b∨d, e}.
denotes classical consequence relation. Greek letters Φ, Ψ,
                                                      Deﬁnition 4 Let Σ=(S1,...,Sk)  be a SBB and Ψ afor-
...representformulas.  and ⊥ denote the constants true and
                                                      mula.
false respectively.
  A stratiﬁed belief base is a set of formulae equipped with a • Ψ is a consequence of Σ w.r.t the possibilistic policy,
total pre-order. Formally:                                denoted by Σ |=PO Ψ,iffΣPO |=Ψ.
                                                        • Ψ                   Σ
Deﬁnition 1 A stratiﬁed belief base (SBB for short)Σ is a    is a consequence of w.r.t the linear order policy,
                                                          denoted by Σ |=LO Ψ,iffΣLO |=Ψ.
ﬁnite sequence (S1, ..., Sk)whereSi (i =1,...,k)isa
stratum containing propositional formulas having the same Example 2 Let us consider again the stratiﬁed belief base Σ
priority level i and which are more reliable than formulas of given in Example 1. For the ﬁrst inference relation, we have
the stratum Sj for j>i.                               for instance, Σ |=PO b. As to the second one, we have for
                                                              Σ |=
According to coherence-based approaches, the inference example   LO e.
from a stratiﬁed belief base is considered as a two step pro- It is easy to see that |=LO goes beyond |=PO, namely for
cess consisting ﬁrst in generating some preferred consistent each propositional formula Ψ,ifΣ |=PO Ψ then Σ |=LO Ψ.
subbases of Σ and then using classical inference from some
of them depending on the entailment principle used.     A key issue in possibilistic logic is how to compute the
                                                      certainty degree associated with inferred formulas:
  Many policies for the selection of subbases can be con- Deﬁnition 5 Let Σ=(S1,...,Sk) be a stratiﬁed belief base
sidered, especially the possibilistic policy [Dubois et al., and Ψ be a formula. Ψ is a weighted consequence of Σ to a
1994], the linear order policy [Nebel, 1994], the inclusion degree i, denoted by Σ |=we (Ψ,i),iff:
preference policy [Brewka, 1989] and the lexicographical a) S1 ∪ ...∪ Si is consistent;
policy [Benferhat et al., 1993]. Among them, we focus on b) S1 ∪ ...∪ Si |=Ψ;
the possibilistic and the linear order policies.        c) j<i:  S1 ∪ ...∪ Sj |=Ψ.
  The idea of the possibilistic logic policy is to start with Lastly, in possibilistic logic we are also interested in com-
formulas having the highest priority level and to propagate puting possibilistic conditioning. Namely,
as many prioritized formulas as possible while maintaining Deﬁnition 6 Let e be a consistent term. Then Ψ is a conclu-
consistency. We stop at the ﬁrst priority level where we meet sion of conditioning Σ by e to a rank i iff Σ ∪ S0 = {e}|=we
inconsistency and the formulas at this level and below are (Ψ,i),whereS0 is a new and high important stratum.

                                                IJCAI-07
                                                  2426  Possibilistic conditioning inference is an important concept 4 Compiling Stratiﬁed Belief Bases under the
in possibilistic theory. It is, to some extent, the logical coun- Linear Order Policy
terpart of possibilistic propagation algorithms in possibilistic
networks.                                             A classical way to compile a SBB under the linear order (resp.
                                                      possibilistic logic) policy consists ﬁrst in generating the pre-
  Following [Nebel, 1998; Lang, 2000], deciding the possi-
                  p                                   ferred consistent subbase with respect to this policy. This step
bilistic inference is Δ2[O(log n)]-complete : it needs at most              P                 p
                                                      comes down to solve a Δ2 -complete (resp. Δ2[O(log n)]-
log2 n calls to SAT solver. As for the linear order one, it is
                                                      complete) problem. Then we compile the resulting (classical)
more expensive from a computational point of view. Indeed,
               p                                      base into a target compilation language. We stress here that
deciding it is a Δ -complete which means that it can be de-
               2                                      such an effort can not be exploited for handling the possibilis-
cided in polynomial time using NP oracles [Nebel, 1994].
                                                      tic logic policy. Namely, such approach is not appropriate to
We refer the reader to [Papadimitriou, 1994] for more details
                                                      compute weighted possibilistic conclusions and possibilistic
about computational complexity.
                                                      conditioning.
                                                        Our method relies on a propositional encoding of the SBB
3  Knowledge Compilation                              by adding new variables which the number is equal to the
                                                      number of its strata. Then we proceed to compiling this
The key motivation of Knowledge compilation is that a propositional encoding into a target compilation language and
knowledge base is not modiﬁed very often, and the same then generating in polynomial time the base that corresponds
base is used to answer many queries (see [Cadoli and Donini, to the linear order policy or even to the possibilistic one. The
1997] for a survey). So, the idea of knowledge compilation is additional variables will be deleted from the ﬁnal result.
to split query answering into two phases:
                                                      4.1  Propositional Encoding of a Stratiﬁed Belief
  • ﬁrst, the knowledge base is preprocessed to obtain an  Base
    appropriate data structure. Such a phase is called off-line
                                                      Let Σ=(S1,...,Sn)   be a SBB. The ﬁrst step in our com-
    reasoning.                                        pilation method consists in encoding the given base into a
  • the second phase which is called on-line reasoning, con- classical propositional base denoted by KΣ. This encoding
    sists in answering queries using the data structure gener- takes advantage of the one recently proposed in [Benferhat
    ated during the ﬁrst phase.                       and Prade, 2005] for handling an extension of possibilistic
                                                      logic.
A target compilation language is a class of formulas which is In fact, for each stratum Si, we will introduce a new propo-
tractable for clause deduction at least. Stated otherwise, it is sitional variable Ai. Intuitively, Ai means something like
a language which permits at least achieving clausal deduction “the situation is Ai- abnormal“. Hence, for each formula Φij
in polynomial time.                                   from the stratum Si will correspond the propositional formula
  Initially, the well-known prime implicates language (PI for Φij ∨ Ai which can be read as “Φij is true or the situation is
short) was the target compilation language on which most Ai-abnormal”.
of the compilation methods focus. Recently, Darwiche and In this paper, (Φij ∨ Ai) will be used as an encoding of
Marquis have considered in [Darwiche and Marquis, 2002] the fact that the certainty degree or the priority rank of Φij is
other target compilation languages. These languages are Ai. The use of abnormal predicates have been used in several
special cases of the NNF ( Normal Negation Form) language non-monotonic formalisms, e.g., [McCarthy, 1980].
obtained by imposing some properties. A NNF formula is a Deﬁnition 7 Let Σ = (S1,...,Sk) be a SBB. The proposi-
formula constructed with literals using only the conjunction tional encoding associated with Σ, denoted by KΣ,isthe
and disjunction operators. As to the properties, one can list propositional knowledge base deﬁned by:
decomposability, determinism, smoothness, decision, order,      k    
                                                            Σ =      {       {Φij ∨  i}}
etc.                                                      K       i=1  Φij ∈Si     A
                                                        We note that generally, the number of strata in a SBB is
  The resulting target compilation languages are DNF, very low. Hence, the cost of the propositional encoding we
DNNF, d-DNNF, sd-DNNF, FBDD, OBDD, OBDD<,             propose here is very low too.
MODS, PI and IP. Additionally, they are compared in terms of
                                                                                          Σ
their spacial efﬁciency via the succinctness criteria and also Example 3 Let us consider again the SBB given in Exam-
in terms of the set of logical queries and transformations they ple 1. Let A1,A2,A3 and A4 be four propositional variables
support in polynomial time.                           associated with strata S1,S2,S3 and S4 respectively. Using
                                                      the above deﬁnition, the propositional knowledge base asso-
  With the exception of PI, DNNF is the most succinct           Σ
among all target compilation languages. In fact, it is known ciated with is:
that PI is not more succinct than DNNF, but it is unknown KΣ  = {a ∨ b ∨ A1, ¬a ∨ A2,c∨ A2, ¬b ∨ A3,
whether DNNF is more succinct than PI. A sentence in DNNF d ∨ e ∨ A3,b∨ d ∨ A4,e∨ A4}.
(for Decomposable NNF) is a NNF sentence satisfying the
decomposability property: for each conjunction C in the sen- 4.2 Conditioning
tence, the conjuncts of C do not share variables [Darwiche, We review in this section, the operation of conditioning which
2001].                                                will be useful for our approach.

                                                IJCAI-07
                                                  2427Deﬁnition 8 The conditioning of a propositional formula Ψ case, the Φij are retained since Ai∨Φij is replaced by ⊥∨Φij
on a consistent term (a conjunction of literals)γ, denoted by which is equivalent to Φij .
CD(Ψ, γ), is the formula obtained from Ψ by substituting ev- Let us illustrate the above algorithm with the following ex-
ery literal of γ in Ψ by  if it is consistent with γ,by⊥ ample:
otherwise.                                            Example 5  Let Σ=(S1,S2,S3)  be such that
Example 4 For instance we have:                       S1 = {¬a ∨ b, a}
                                                         = {¬   }       = {¬  ∨¬  }
  •                            Ψ=(¬   ∧¬  )∨(  ∧ )    S2      b, c and S3    b   d  .
    The conditioning of the formula  a   b    b  c    It is easy to check that:
    on the term γ = ¬a ∧ c, CD(Ψ,γ), gives (∧¬b) ∨
                                                          Σ    = {¬  ∨     ¬ ∨¬   }
    (b ∧).                                                 LO      a  b, a, b   d .
  • Conditioning the same formula on the term  a ∧    Let A1,A2 and A3 be three propositional variables associ-
    ¬b, CD(Ψ,a∧¬b) gives  (⊥∧)  ∨ (⊥∧c).             ated with S1,S2 and S3 respectively.
                                                      KΣ  = {¬a ∨b ∨A1,a∨A1,  ¬b ∨A2,c∨A2,  ¬b ∨¬d ∨A3 }.
                                                                                        DNNF
Following [Darwiche and Marquis, 2002], for any target Let C = DNNF so let us compute CompΣ   ,weget:
                                 [                               DNNF
compilation language C considered in Darwiche and Mar- K =  CompΣ       =  DNNF(KΣ)=(¬b       ∧ A1 ∧ (c ∨
quis, 2002], C satisﬁes conditioning. This means that given A2)) ∨ (b ∧ A2 ∧ (a ∨ A1) ∧ (¬d ∨ A3)).
aformulaΨ  from C and any consistent term γ, we can con-
                                                        • At the ﬁrst iteration, we have K  A1 so
struct in polytime a formula which belongs to C and is equiv- ←    (  ¬   )=   ∧    ∧  ∧ (¬  ∨   )
alent to CD(Ψ,γ).                                         K    CD   K,  A1    b  A2   a    d   A3
                                                        • At the second iteration, K |= A2 implies that
Remark 1  In the following, in CD(Ψ, γ), γ is always a lit-
                                                             ←     (     )=   ∧  ∧ (¬  ∨   )
eral (an atom or a negated atom).                         K    CD   K, A2   b   a    d   A3
                                                        • At the third iteration, we have K  A3 thus
4.3  Compiling Linear Based Knowledge Bases               K  ← CD(K,  ¬A3)=b   ∧ a ∧¬d.
                          Σ
Given a stratiﬁed belief base , we deﬁne its compilation One can easily check that K is equivalent to ΣLO.
with respect to a given target compilation language C as
                                                      Proposition 2 Algorithm 1 is achieved in polynomial time
shown by the following deﬁnition:                                      C
                                                      in the size of CompΣ . Moreover, the propositional base re-
Deﬁnition 9 Let Σ = (S1,...,Sk) be a stratiﬁed belief base turned by Algorithm 1 belongs to the target compilation lan-
and KΣ be its propositional encoding using Deﬁnition 7. Let guage C.
C be any target compilation language. The compilation of Σ
                       C                                The corresponding proof is as follows. For all target
w.r.t. C, denoted by Comp , is the compilation of KΣ into
                       Σ                              compilation language C, C satisﬁes conditioning [Dar-
C, i.e., C(KΣ).
                                                      wiche and Marquis, 2002]. This means that CD(K, Ai) (or
  We propose now the following algorithm which provides   (  ¬  i)) can be achieved in polynomial time and still
                                       C              CD  K,  A                                    K
an efﬁcient way to generate ΣLO using CompΣ and condi- belongs to C. In addition, since Ai is a clause, the deduction
tioning:                                              test K |= Ai can be achieved in polynomial time. 
                                                        Since ΣLO belongs to a target compilation language, the
  Algorithm 1: Computing ΣLO                          inference from a stratiﬁed belief base Σ interpreted under the
             C                                                                  p
  Data: CompΣ                                         linear order policy falls from Δ2 down to P when queries are
  Result: The compilation of ΣLO                      in a CNF form.
  Begin                                                 It is important to note that the cost induced here is only the
    ←       C                                                                    C
  K    CompΣ  ;                                       one of the computation of CompΣ , i.e., the cost of the compi-
  for i ← 1 to k do                                   lation of the propositional base KΣ into the language C.The
     if K |= Ai then K ← CD(K, Ai);                   choice of the target compilation language is determined only
       else K ← CD(K,  ¬Ai);                          via its concision. Hence, DNNF may be more interesting than
     end                                              the other languages in this case.
  return K;
  end                                                 5   Computing Possibilistic Conclusions and
                                                          Possibilistic Conditioning
Proposition 1 The propositional knowledge base returned 5.1 Computing Possibilistic Inference
by Algorithm 1 is equivalent to ΣLO given by Deﬁnition 3.
                                                      Compiling possibilistic knowledge bases has been recently
  Proposition 1 shows the equivalence of the knowledge base achieved in [Benferhat and Prade, 2006]. In this section,
returned by the Algorithm 1 and ΣLO. Let us brieﬂy explain we propose an alternative approach which offers several ad-
the algorithm. It proceeds stratum per stratum and generates vantages with respect to the existing ones (see related works
progressively the compiled base w.r.t. the linear order policy. section). Contrary to the approach proposed in [Benferhat
The test in step 3 checks whether the stratum Si is inconsis- and Prade, 2006], our approach does not add binary clauses.
tent (with previously accepted beliefs). If it is the case, then Moreover, our approach is ﬂexible since it supports all tar-
all formulas of such stratum are ignored by replacing Ai ∨Φij get compilation languages. Lastly, our approach allows the
by ∨Φij , which is equivalent to a tautology. If it is not the computation of possibilistic conditioning.

                                                IJCAI-07
                                                  2428  In fact, we suggest deriving another algorithm from   One can check that Σ |=we (Ψ,i) using Deﬁnition 5 if and
Algorithm 1 where once we meet an inconsistency for the only if Ψ is a consequence of Σ to a degree i using Algorithm
ﬁrst time, we suppress the current stratum responsible of the 3.
inconsistency but also all the remaining strata.      Example 7  Let Σ=(S1,S2,S3)  be such that:
                                                        S1 = {¬a ∨ b}, S2 = {a, c} and S3 = {¬b}.
  Algorithm 2 : Computing ΣPO                                                                    Σ
             C                                          Let us check if b is a possibilistic consequence of and to
  Data: CompΣ                                         what degree. We can check that Σ |=we (b, 2).LetA1, A2 and
                         ΣPO
  Result: The compilation of                          A3 be three propositional variables associated respectively
  Begin                                               with the three strata in the knowledge base. Σ = {(¬ ∨
    ←       C                                                                              K        a   b
  K    CompΣ  ;                                       ∨   1), ( ∨ 2), ( ∨  2), (¬ ∨  3)}.Let  = 1 and  =
   ←                                                    A    a   A    c  A      b  A        i        C
  i   1;                                              DNNF.
                  ≤
  while K  Ai and i   k do                                          DNNF    (  ∧ ( ∨ (¬ ∧   )) ∧ (( ∧
        ←      (  ¬                                       K  = CompΣ      =  a   c     c  A2      b
      K    CD  K,  Ai);                                      ) ∨ ( ∧  ))) ∨ (¬ ∧    ∧ (¬ ∨ ( ∧   )))
      i ← i +1;                                           A3     b  A1       a   A2     b   b  A3   .
      end                                               • At the ﬁrst iteration, K  A1. So, K ← CD(K, ¬A1) ≡
  while i ≤ k do                                          (a∧b∧A3  ∧(c∨(¬c∧A2  )))∨(¬a∧A2 ∧(¬b∨(b∧A3))).
      K ←  CD(K, Ai);                                     K   b so i ← i + 1.
      i ← i +1;
                                                        • At the second iteration, K  A2. So, K ← CD(K, ¬A2)
      end
                                                          ≡ a∧b∧A3  ∧c. K |= b so is consequence ← true which
  return K;                                               stops the loop. We deduce then that b is a possibilistic
  end                                                     consequence of Σ to degree 2.
                                                        Given a stratiﬁed belief base Σ that have been compiled
Proposition 3 The propositional knowledge returned by the     C
                        Σ                             in CompΣ . We show how we can exploit such a compila-
Algorithm 2 is equivalent to PO given by Deﬁnition 2 and tion effort in order to support the corresponding possibilistic
belongs to C. Also, Algorithm 2 runs in polynomial time. conditioning by a given observation e in polynomial time.
Example 6 Let us consider again the SBB Σ given in Exam- It is enough to substitute in Algorithm 3 the line
ple 5. We can easily check that: ΣPO = {¬a ∨ b, a}.     ”while K  Ai and i ≤ k and is consequence = false”
     DNNF
CompΣ       =(¬b ∧ A1 ∧ (c ∨ A2)) ∨ (b ∧ A2 ∧ (a ∨ A1) ∧ by :
(¬d ∨ A3)). Until the second iteration, namely until meeting ”while K  ¬e ∨ Ai and i ≤ k and is consequence =
an inconsistency, the process is the same as the linear order false”.
policy so K = b∧a∧(¬d∨A3 ). From here, all the remaining Clearly, this adapted algorithm runs in polynomial time
strata are ignored thus K ← CD(K, A3)=b∧a. Again one  since K belongs to a target compilation language and since
can easily check that K is equivalent to ΣPO.         ¬a ∨ Ai is a clause. We can also check that it captures possi-
                                                      bilistic conditioning.
5.2  Compiling Weighted Consequences and
     Possibilistic Conditioning                       6   Related Works and Conclusions
                                               C
With a simple adaptation, one can still exploit CompΣ in In this paper, we have proposed a method for compiling strat-
order to decide the weighted possibilistic inference relation iﬁed belief bases with respect to the possibilistic and linear
in polynomial time as shown by the following algorithm: order policies. The cost of the proposed method is very low
                                                      since the number of new variables that we introduce is equal
  Algorithm 3 : Computing weighted conclusions        to the number of the strata which is generally negligible com-
             C
  Data: CompΣ ,aCNFformulaΨ                           pared to the number of formulas for instance. Furthermore,
  Result: a degree associated with Ψ                  this method is qualiﬁed to be ﬂexible since it permits to ex-
  Begin                                               ploit efﬁciently all the existing propositional compilers. In
            C
  K ←  CompΣ  ;                                       addition, re-partitioning the stratiﬁed belief base by permut-
  is consequence ← false;                             ing some strata priority levels can be done efﬁciently without
  i ← 1;                                              a re-compilation cost. However, we can not change the ranks
  while K  Ai and i ≤ k and is consequence = false   of individual formulas unless we attach one variable per for-
      do                                              mula.
      K ←  CD(K,  ¬Ai);                                 We have proposed a compilation of possibilistic logic
      if (K |=Ψ)then is consequence ← true;           knowledge bases that support weighted conclusions and pos-
        else i ← i +1;                                sibilistic conditioning.
      end                                               Our method can be favorably compared with other work
  if is consequence = true                            concerned with compiling stratiﬁed belief bases. Note ﬁrst
   thenΨ is a consequence of Σ with a degree i        that contrary to existing approaches, our method allows to
   else Ψ is not a consequence of Σ                   compute weighted conclusion and possibilistic conditioning
  end                                                 from an already compiled stratiﬁed belief base without a re-
                                                      compilation cost. Let us mention the method proposed by

                                                IJCAI-07
                                                  2429