                        A Multiobjective Frontier Search Algorithm

                                L. Mandow and J.L. Perez´    de la Cruz
                             Dpto. Lenguajes y Ciencias de la Computaci´on
                             Universidad de M´alaga 29071 - M´alaga (Spain)
                                     {lawrence, perez}@lcc.uma.es


                    Abstract                            This paper analyzes the extension of frontier search to the
                                                      multiobjective framework. Scalar frontier search exploits
    The paper analyzes the extension of frontier search the monotone property of heuristics to discard unnecessary
    to the multiobjective framework. A frontier multi- nodes, achieving important memory savings. However, as ex-
    objective A* search algorithm is developed, some  plained in the paper, the same node deletion criteria cannot be
    formal properties are presented, and its perfor-  applied in a multiobjective context. This paper presents new
    mance is compared to those of other multiobjective deletion criteria that can be applied in broader contexts while
    search algorithms. The new algorithm is adequate  preserving the properties of conventional algorithms.
    for both monotone and non-monotone heuristics.
                                                        The paper is organized as follows. Section 2 describes
                                                      scalar frontier search. Section 3 examines the fundamental
1  Introduction                                       issues in multiobjective search and introduces a frontier mul-
Systematic graph search procedures are usually classiﬁed into tiobjective A* search algorithm. Formal properties and exper-
best-ﬁrst search and depth-ﬁrst search strategies. The former imental results are presented in sections 4 and 5 respectively.
can take advantage of the so-called principle of optimality Finally, some conclusions and future work are outlined.
to prune paths that could never lead to solutions better than
those already recorded. Dijkstra’s algorithm and A* [Hart
et al., 1968] are members of this class. Pruning may dras- 2 Scalar frontier search
tically reduce the number of paths explored in the graph but
                                                      The shortest path problem can be stated as follows: Let G
memory requirements are usually exponential with solution                                   =(       )
depth. Depth-ﬁrst search presents the advantage of mem- be a locally ﬁnite labeled directed graph G N,A,c ,of
                                                      |N| nodes, and |A| arcs (n, n) labeled with positive costs
ory requirements linear with the depth of the solution. How- ( ) ∈ R                ∈
ever in certain cases these algorithms may involve the con- c n, n . Given a start node s N, and a set of goal
                                                      nodes Γ ⊆ N, ﬁnd the minimum cost path in G from s to a
sideration of an exponentially larger set of paths when com- Γ
pared to best-ﬁrst algorithms. Algorithms like IDA* [Korf, node in .
1985], and RBFS [Korf, 1993] are members of this class. Scalar best-ﬁrst algorithms like A* build a search tree T
Several attempts have been carried out to retain the beneﬁts rooted at the start node with the best paths found to each gen-
of path pruning while keeping reasonable memory require- erated node. Nodes already expanded are kept in a list of
ments. Frontier search [Korf et al., 2005] has been recently CLOSED nodes, and those that are waiting for expansion
reported as a successful approach in this sense.      are kept in a list of OPEN nodes. Keeping the CLOSED
  Multiobjective search is known to be much more compu- list makes memory requirements exponential with solution
tationally demanding than its scalar counterpart. Particularly, depth. However, these nodes serve two important purposes.
memory requirements are one of the practical limiting factors Firstly, whenever a new path is found to a known node, its
of multiobjective best-ﬁrst search in AI applications. Appli- cost is compared to that of the path in the search tree. The
cations in route planning [Alechina and Logan, 2001] and do- best path is kept and the other is pruned. This can drastically
main independent planning [Refanidis and Vlahavas, 2003] reduce the number of paths in G that need to be explicitly ex-
have reported queue size as a limiting factor and resorted to plored. The second important use of closed nodes is to return
various schemes to limit the number of generated alternatives. the solution path. When a goal node is reached, the solution
  Multiobjective best-ﬁrst search algorithms include two dif- path can be quickly recovered from the search tree.
ferent extensions of A* to the multiobjective case, MOA* A* uses a characteristic evaluation function f(n)=g(n)+
[Stewart and White, 1991],andNAMOA*[Mandow and        h(n) to rank open nodes and always selects for expansion
P´erez de la Cruz, 2005]. Multiobjective depth-ﬁrst algo- nodes with minimum f(n). Function g(n) denotes the cost of
rithms include IDMOA* [Harikumar and Kumar, 1996],and the path stored in the search tree from s to n, while the heuris-
MOMA*0   [Dasgupta et al., 1999], the multiobjective exten- tic function h(n) estimates the cost of a solution from node n
sions of IDA* and RBFS respectively.                  to a goal node. When h(n) satisﬁes the so-called monotone

                                                IJCAI-07
                                                  2340property, i.e.                                        where fi denotes the i-th element of vector f.
                                                                                    
        h(n)+c(n, n  ) ≤ h(n ) ∀(n, n ) ∈ A     (1)     Therefore, given two vectors f and f , it is not always pos-
                                                      sible to rank one as better than the other. For example given
then for all node n selected for expansion an optimal path to vectors x =(1, 1), y =(3, 2),andz =(1, 3), x dominates
n has already been found in T . The use of monotone heuris- both y and z, but no dominance relation exists between vec-
tics optimizes and simpliﬁes path pruning: new paths found tors y and z.
to closed nodes can be pruned straightaway, since no closed Given a set of vectors X, we shall deﬁne nondom(X) the
node will ever be put back into OPEN.                 set of non-dominated vectors in set X in the following way,
  In the following discussion on frontier search we shall
make the following assumptions:                              nondom(X)={x    ∈ X | y ∈ Xy ≺ x}   (3)
 1. We are only interested in the cost of the optimal solution,
                                                                             [
    or in which goal node is reached by an optimal solution, We shall use NAMOA* Mandow and P´erez de la Cruz,
                                                          ]
    but not in the optimal solution path itself.      2005  as reference in the development of a frontier multiob-
                                                      jective A* algorithm. It is a reﬁnement of MOA* [Stew-
 2. The graph G to be searched is undirected, i.e. for each art and White, 1991] that offers better memory behaviour.
       (   )                     (   )
    arc n, n in G, there is also an arc n ,n .        NAMOA* builds an acyclic search graph SG rooted at s to
 3. Heuristic functions are monotone.                 store all nondominated paths found to each node. Whenever
  Under these assumptions frontier search keeps the beneﬁts a new path is found to a known node n, its cost is compared
of path pruning while drastically reducing memory require- to those already reaching n. Nondominated paths are kept,
ments. The key idea is to store in memory only the OPEN and dominated ones are pruned. NAMOA* keeps two differ-
                                                                                      ( )
list, but not the CLOSED list of expanded nodes.      ent sets associated to each node. Gop n denotes the set of
  Frontier search keeps a vector of used operators with each cost vectors of paths reaching n that can be further explored,
                                                              ( )
node n. Each vector element indicates whether the neighbor- while Gcl n denotes the set of those that have already been
ing node n reached via that operator is still accessible or not expanded. The set of OPEN paths in SG that can be further
                                                                                  (   )       ∈     ( )
through node n. Initially, all vector elements are set to ’un- explored is made up of all tuples n,g where g Gop n .
                                                                                         (  )
used’. Each time a node is expanded, only successors reach- NAMOA* uses a heuristic function H n that estimates
able by unused operators are generated. Recall that whenever the set of nondominated cost vectors of paths from n to each
a node n is selected for expansion, an optimal path to that goal node. Therefore, each path Psn from s to n with cost
                                                       (   )                                       (   )
node has been found. This means no new interesting paths g Psn , has a set of heuristic evaluation vectors, F Psn .
                                                                                               ( )
to n will ever be generated and n will never again need to be This function is the multiobjective analogue to f n in A*,
put back into OPEN. Therefore, for each generated neigh- F (Psn)=nondom{f  | f = g(Psn)+h ∧ h ∈ H(n)}
bouring node n, the operator that reaches n form n can be NAMOA* always selects for expansion an open path P
marked as used. This amounts to pruning all new paths that with at least an heuristic evaluation vector f nondominated
might reach n from n even before they are actually gener- in OPEN.Twosets,GOALN  and COSTS, keep track of
ated. Since n will never again be reached by new paths, it can goal nodes and costs of nodominated solutions found so far.
be safely removed from memory.                        Each time a new solution is found, dominated alternatives are
  Assumptions 1 and 2 presented for this basic frontier ﬁltered from OPEN and search proceeds until OPEN is
search algorithm can be relaxed to make it a more general empty.
search strategy [Korf et al., 2005]. However, assumption 3 In multiobjective search many different nondominated
cannot be relaxed without compromising the admissibility of paths may reach a given node. Therefore, it is the number
frontier search. With a monotone heuristic, and the same of cost vectors stored in Gop(n) and Gcl(n) that dominates
tie-breaking rule, the basic frontier search algorithm can be memory requirements, while the number of nodes plays only
shown to mimic the sequence of node expansions performed a minor role. Regrettably, the expansion of a nondominated
by standard best-ﬁrst search. Therefore, it is admissible under path to node n does not prevent other nondominated paths to
the same assumptions.                                 enter Gop(n) at later stages of the search, even when mono-
                                                      tone heuristics are used [Stewart and White, 1991](lemma
3  Multiobjective frontier search                     20). Note that even vector costs of expanded paths cannot
3.1  Multiobjective A* search                         be discarded after expansion without further consideration.
                                                      They need to be kept in the Gcl(n) sets to prune new domi-
The multiobjective search problem can be stated as fol- nated paths reaching already expanded nodes. This prevents a
                                                 =
lows: Let G be a locally ﬁnite labeled directed graph G trivial extension of scalar frontier search to the multiobjective
(      )   | |         | |    (   )
 N,A,c ,of N nodes, and A arcs n, n labeled with pos- case. Determining whether all nondominated paths to a given
            (   ) ∈ Rq                   ∈
itive vectors c n, n  . Given a start node s N,and   node have already been found becomes then the central issue.
a set of goal nodes Γ ⊆ N, ﬁnd the set of all non-dominated
cost paths in G from s to nodes in Γ.                 3.2  Frontier search NAMOA*
  The main distinguishing feature of multiobjective prob-
lems is the fact that cost vectors c(n, n) induce only a partial The extension of frontier search to multiobjective search is
order preference relation ≺ called dominance,         presented under the same assumptions presented in section 2
                                                      for its scalar counterpart. The key is to ﬁnd an adequate crite-
          q                                
 ∀f, f ∈ R  f ≺ f ⇔∀ifi      ≤ fi ∧ f  = f (2)  rion to allow nodes and cost vectors of expanded paths to be

                                                IJCAI-07
                                                  2341safely deleted from memory. As previously explained, this is
not completely straightforward, since monotonicity does not
provide the same properties as in scalar search. The algorithm
presented in table 1 is based in the following proposals.
  Let us denote by G(n)=Gop(n)     ∪ Gcl(n) the set
of all nondominated cost vectors known to n, and by
FRONTIERthe set of known nodes that cannot be deleted   1. INITIALIZATION.    Create  a   set  of   nodes
                                                                         =   { }             ( )={0}
from memory yet. Each node in             will store      FRONTIER            s ,andsetGop    s         .
                             FRONTIER                                                      (   )
a vector of ’used operators’, a deletion ﬂag, and an ’at least Let OPEN be the list of all pairs n,g such that
                                                            ∈                   ∈     ( )
once expanded’ ﬂag.                                       n   FRONTIERand      g Gop  n . Create two empty
  Candidates for deletion A node n is a candidate for dele- sets, GOALN, COSTS.
tion when no more nondominated paths can be found to    2. TERMINATION. If  OPEN   is empty, then return the
n. We can be certain of this condition whenever ∀n ∈     set of goal nodes GOALN   and nondominated costs
                                           
FRONTIER∧∀g      ∈ Gop(n )  ∃g ∈ G(n) g  g .         COSTS.
  Marking used operators If node n is candidate for dele- 3. PATH SELECTION.
tion and at least one path leading to n was expanded, then
                                                                                 (    )
the operators of its successors leading to n can be marked as (a) Select an alternative n,gn from OPEN with
’used’. This amounts to pruning any new paths leading to n    heuristic evaluation f ∈ F (n,gn) non-dominated
even before they are actually generated.                      in OPEN   and not dominated by COSTS.
  Node deletion If node n is candidate for deletion and    (b) If n is marked for deletion, then remove gn from
   ( )=∅
Gop n     ,thenn can be actually deleted from memory.         Gop(n), else move gn from Gop(n) to Gcl(n).
  These conditions are checked at each iteration at step 6.
                                                        4. SOLUTION RECORDING. If    n  ∈ Γ, then put n in
Note that new nodes generated by the algorithm must be put
                                                          GOALN,    gn in COSTS, and eliminate from OPEN
in the FRONTIER   even if they are not reached by an in-
                                                          all dominated alternatives.
teresting alternative, i.e. the newly found path is dominated
by COSTS  (step 5(b)i). These nodes would be typically dis- 5. PATH EXPANSION: If n  ∈ Γ,then
carded in MOA* or NAMOA* until a really interesting path  For all successors nodes m of n with cost gm = gn +
was found to them, but need to be kept in frontier search in c(n, m) do:
case some of their operators have to be marked as ’used’.
                                                           (a) Calculate Fm the set of estimates for the new path
  These conditions are rather severe. However, the most im-
                                                              F (m,gm) not dominated by COSTS.
portant condition in multiobjective frontier search involves
cost vector deletion, since it is the number of cost vectors (b) If m is a new node, then,
stored in memory that dominates memory consumption.           i. Put m in FRONTIER.
  Cost vector deletion When a node n is marked for dele-      ii. If Fm  = ∅ then place gm in Gop(m).
tion, then the set Gcl(n) can be immediately removed from     else, If gm is new and nondominated in G(m), then:
memory (step 6(a)i). Additionally, each time a new path to n  i. Prune from G(m) vectors dominated by gm.
is selected for expansion, its cost vector can be removed from ii. If Fm  = ∅ then place gm in Gop(m).
Gop(n) and discarded (step 3b).
  The rationale behind this condition is that costs in Gcl(n) 6. UPDATE FRONTIER: For all node n in FRONTIER
are kept to prune new dominated paths found to n.However, do,
once a node n is marked for deletion, neighbouring nodes   (a) If n was at least once expanded, and n is not
will mark their operators and no new path will ever reach n.  marked for deletion, and n is a candidate for dele-
Notice that, by virtue of this condition, a node marked for   tion, then
deletion can get rid of some its cost vectors well before the i. Mark n for deletion and delete Gcl(n).
node itself is actually deleted.                              ii. For all successor n of n in FRONTIER,mark
                                                                             →
3.3  Example                                                     the operator n n as ’used’.
                                                           (b) If n is marked for deletion and Gop(n)=∅,then
Figure 1(a) shows a sample graph with multiobjective costs.   remove n from FRONTIER.
Let us assume s is the start node, Γ={γ1,γ2}, and, with-
out loss of generality, that no heuristic function is used, i.e. 7. Go back to step 2
H(n)={0}∀n, and the heuristic evaluation vector of each
path P is F (P )={g(P )}. In this example we focus our Table 1: FS-NAMOA*, a frontier multiobjective search algo-
attention in the criteria for path and node deletion, and these rithm.
involve only real cost vectors g(P ). Heuristic evaluation vec-
tors are involved in the selection of open paths for expansion
and, in this sense, FS-NAMOA* does not perform differently
from NAMOA*.
  Initially, s is the only node in OPEN and FRONTIER with
Gop(s)={(0,  0)}. It is selected for expansion and paths

                                                IJCAI-07
                                                  2342to n1 and n3 are generated, setting Gop(n1)={(1, 2)} and
Gop(n3)={(2,  1)}.Since(0, 0) dominates both open vec-
tors, s is candidate for deletion and Gcl(s) deleted. Since
Gop(s)=∅,  s is in fact deleted from memory, and the corre-
sponding operators in n1 and n3 marked as ’used’. Figure 1
(b) shows a trace of FS-NAMOA* on this example, including
nodes in FRONTIER, and a graph showing the state of known
paths at each iteration. Each path (g,n) is represented by its
cost in cost space (×≡deleted; ◦≡open; •≡closed) and
labeled by its destination node n. This way the state of paths
and the values of the Gop and Gcl sets can be easily told.    (a) Sample problem for FS-NAMOA*.
  Assuming ties between nondominated paths are broken ar-
bitrarily, at iteration 2 path (n1, (1, 2)) is selected for expan- It. Frontier         Paths
sion. New paths to n2 and n4 are generated. However, n1
is not a candidate for deletion, since a new nondominated
path might still reach n1 from n3 or some of its descen-
dants. Therefore, the closed path must remain in memory, i.e.
Gcl(n1)={(1,  2)}. At iteration 3 the only nondominated
path to n3 is selected, n3 is candidate for deletion and, in
fact, deleted, marking the corresponding operators as ’used’ 2
in n4 and n6. Notice that no new nondominated path can ever
reach n1 since the cost of the closed path to n1 now dom-
inates the cost of all other open paths. Node n1 becomes
candidate for deletion and is deleted. The two cost vectors
of paths leading to n4 dominate all other open paths. There-
fore, n4 is candidate for deletion. However it has never been
expanded and must remain in memory. At iteration 4 a path
                                                           3
to n4 is selected for expansion and deleted from memory. At
iteration 5 the other path to n4 is selected and deleted, and
the whole node can be deleted as well. At iteration 6 only
the paths to γ1 are nondominated. Path (γ1, (4, 5)) could be
selected. Since it is a solution path, it would be recorded in
COSTS   and GOALN. All open paths dominated by (4, 5)
would be ﬁltered, i.e. removed from OPEN. At iteration 7
(γ1, (5, 4)) would be the only remaining open path, selected, 4
and recorded as solution. The algorithm would then terminate
with the guarantee that node γ1 is reached by nondominated
solutions with costs in ((4, 5), (5, 4)).

4  Properties
This section proves that each run of FS-NAMOA* mimics the
workings of NAMOA*. Therefore, the algorithm terminates    5
with the same sets of nondominated costs and goal nodes.
Result 1 If costs are positive and n is marked for deletion,
then all nondominated paths to n have been generated.
Proof. The proof is trivial from the deﬁnition of ’candidate
for deletion’. Let’s assume n is marked at iteration k.Ifanew
node reaches n at future iterations, it must be some extension 6
of an alternative (n,g) open at iteration k.Letg > 0 be
the cost of such extension. However, if n is marked, then    (b) Frontier nodes and paths in cost space
∃g ∈ G(n) g  g ⇒ g ≺ g + g.
                                                               g =(g1,g2). Symbol  denotes ’used
  Result 1 replaces the monotonicity requirement of heuris-     operator’, dashed nodes are deleted.
tics in scalar frontier search with a monotonicity requirement
for the real cost function g(P ). The following results are
analogous to those presented in [Korf et al., 2005].
                                                               Figure 1: Sample problem and solution.
Result 2 FS-NAMOA* never regenerates a node that has
been deleted.

                                                IJCAI-07
                                                  2343Proof. Let us assume, for the purpose of contradiction, that
n is the ﬁrst such node to be regenerated after a new path is     Table 2: Summary of test results.
found from some other node n to n.Ifn was deleted, then: a) Algorithm   average        σ   min     max
n was candidate for deletion, b) n was at least once expanded, FS-NAMOA*
                                        
c) Gop(n)=∅.Ifn  was deleted before n,thenn must have  Cost vectors     12201.41  12610.67   38   66075
been regenerated in order to be expanded again regenerating Time (s)      582.65   1085.22    0    7669
n. However, this contradicts the assumption that n was the FS-NAMOA*40
ﬁrst node to be regenerated. Then, it must be that n was Cost vectors  12213.29  12610.91   46   66086
never deleted. Since n was at least once expanded, n must Time (s)        17.99     31.61    0     212
have been in FRONTIER   (recall the graph is undirected) FS-NAMOA200
when n was marked for deletion, and the operator from n Cost vectors   12259.34  12625.39   46   66212
to n marked as ’used’. Therefore, no path leading to n and Time (s)        6.48     10.17    0      76
selected for expansion will ever regenerate n, contradicting FS-NAMO1600
the assumption that n is regenerated.                 Cost vectors     12363.28  12670.43   46   66217
                                                       Time (s)             3.76      5.12    0      32
Result 3 With the same tie-breaking rule, FS-NAMOA* ex- NAMOA*
pands the same nodes in the same order as NAMOA*.      Cost vectors     15098.69  15514.82   47   79622
                                                       Time (s)             2.45      3.14    0      20
Proof. We shall prove by induction the stronger result that, MOA*
after each iteration, the set of open alternatives is the same for Cost vectors 17161.78 16830.14 56 84830
both algorithms. The proposition is true at iteration 0,when Time (s)       2.15      2.82    0      27
(s,0) is the only open alternative. Let us assume that both
algorithms selected the same paths up to iteration k,andthat 5 Experimental tests
both have exactly the same set of open alternatives. Since
both algorithms share the tie-breaking rule, they will select A set of 500 experimental tests were carried out in different
the same open alternative (n,g) for expansion.       square grids of nodes of size 101 × 101 with random costs in
                                                      [1 10]
  The following scenarios are possible for NAMOA* for   ,   and two objectives. Grid distance was used as heuris-
                                                      tic for all objectives. The tests reported in this section com-
each succesor m reached by cost vector gm = c(n, m)+g,
                                                      pare the performance of FS-NAMOA* against other standard
 1. m ∈ Γ. All open alternatives dominated by gm are elim- multiobjective search algorithms and are intentionally of rel-
    inated.                                           atively small size.
                                                        Figures 5 (a) and (b) show the performance of MOA*,
 2. m  ∈ Γ.ThesetFm  of estimates of new paths to m not NAMOA*, and FS-NAMOA* in memory and time (the latter
    dominated by COSTS  is calculated. In case: a) m is a including IDMOA*) against problem difﬁculty. The number
    new node. If Fm  = ∅,thenm is put in the search graph of iterations (i.e. paths considered) by NAMOA* was taken
    and gm in Gop(m);b)m   is known and gm ∈ G(m).   as a measure of problem difﬁculty. Note that the x-axis in
    No changes are made to Gop(m) nor Gcl(m);c)m is   ﬁgure 5 (b) is in logarithmic scale to allow comparison to ID-
    known and gm  ∈ G(m). Dominated vectors are elimi- MOA*. Statistics are summarized in table 2.
    nated from G(m).IfFm  = ∅,thengm is put in Gop(m).  MOA* and NAMOA* require storage for 140% and 124%
                                                      of the cost vectors needed by FS-NAMOA* respectively.
  FS-NAMOA* would behave the same in situations 1 and MOA* was the fastest on average, though the speed of MOA*
2c. In situation 2a the new node will be unconditionally and NAMOA* is barely distinguishable at this scale. The ex-
placed in FRONTIER, but the new open alternative would tra ’update frontier’ step in FS-NAMOA* places a heavy time
be added under the same condition. Finally, situation 2b is overhead. However, the time required by the algorithm is well
ignored by FS-NAMOA*, but results in no change in the set below the exponential time requirements of the linear space
of open alternatives. In summary, both algorithms will per- algorithm IDMOA*. In fact, this algorithm could solve only
form the same changes in the set of open alternatives. Since the simplest problems in less than 20 minutes. This overhead
both algorithms terminate when the set of open alternatives is can be signiﬁcantly reduced delaying frontier updates. If up-
empty, they will perform the same sequence of path selections dates were performed evey k iterations, the overhead could
and expansions.                                      be reduced by 1/k. If the maximum branching factor of the
  Results 2 and 3 do not require the heuristic function to problem is b, this will increment the memory requirements by
be monotone. This means FS-NAMOA* mimics NAMOA*       at most kb cost vectors, which is normally a tiny fraction of
even when non-monotone heuristics are used. Note that a the maximum memory usage. Figure 5(c) and table 2 show
single-objective version of FS-NAMOA* amounts to a ver- the time requirements for k =40, 200 and 1600 with only
sion of frontier search A* that ﬁnds all optimal solutions with a 1.3% increase in average memory requirements over plain
general heuristics. Nodes selected for expansion would be FS-NAMOA (labeled FS-NAMOA-40, 200 and 1600 respec-
deleted only when they achieve the minimum value of g(n) tively). This suggests that only a few updates are responsible
among open nodes. This ensures the optimal path to deleted for most of the memory savings, with additional updates be-
nodes has been found.                                 coming increasingly less cost-effective.

                                                IJCAI-07
                                                  2344