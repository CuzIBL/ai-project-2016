                                   Existential   arc  consistency:
                 Getting   closer   to full arc  consistency    in weighted    CSPs∗
                     Simon   de Givry                              Federico Heras
            degivry@toulouse.inra.fr                         fheras@lsi.upc.edu
                    Matthias  Zytnicki                             Javier Larrosa
           zytnicki@toulouse.inra.fr                         larrosa@lsi.upc.edu
                           INRA                                       LSI, UPC
                     Toulouse,  France                            Barcelona,  Spain
                    Abstract                          2   Preliminaries
    The weighted CSP framework is a soft constraint   Valuation structures are algebraic objects to specify costs in
    framework with a wide range of applications. Most valued constraint satisfaction problems [Schiex et al., 1995].
    current state-of-the-art complete solvers can be de- They are deﬁned by a triple S = (E,⊕,), where E is the set
    scribed as a basic depth-ﬁrst branch and bound    of costs totally ordered by . The maximum and a minimum
    search that maintain some form of arc consistency costs are noted > and ⊥, respectively. ⊕ is an operation on E
    during the search. In this paper we introduce a new used to combine costs.
    stronger form of arc consistency, that we call exis- Following [Larrosa and Schiex, 2004], the valuation struc-
    tential directional arc consistency and we provide ture of Weighted CSP (WCSP) is, S(k) = ([0..k],⊕,≥) where
    an algorithm to enforce it. The efﬁciency of the al- k > 0 is a natural number; ⊕ is deﬁned as a ⊕ b = min{k,a +
    gorithm is empirically demonstrated in a variety of b}; ≥ is the standard order among naturals. Observe that in
    domains.                                          S(k), we have 0 = ⊥ and k = >. It is useful to deﬁne the
                                                      subtraction   of costs. Let a,b ∈ [0..k] be two costs such that
                                                      a ≥ b,
1  Introduction                                                              a − b :  a 6= k
                                                                   a   b =
Weighted constraint satisfaction problems (WCSP) is a well-                    k  :  a = k
known optimization version of the CSP framework with
many practical applications. Recently, the celebrated arc A binary weighted constraint satisfaction problem (WCSP)
consistency property has been generalized from the classi- is a tuple P = (S(k),X ,D,C). S(k) is the valuation structure.
cal CSP framework to WCSP  [Cooper and Schiex, 2004;  X = {x1,...,xn} is a set of variables that we will often call
Larrosa and Schiex, 2004]. There are three known gener- by just their index. Each variable xi ∈ X has a ﬁnite domain
alizations: AC*, FDAC* and FAC*, all of them collapsing Di ∈ D of values that can be assigned to it. (i,a) denotes the
to classical arc consistency in the CSP case. In [Larrosa and assignment of value a ∈ Di to variable xi. C is a set of unary
Schiex, 2003] it was shown that maintaining FDAC* during and binary weighted constraints (namely, cost functions) over
search was usually the best option.                   the valuation structure S(k). A unary weighted constraint Ci
  In this paper we introduce a new form of local consis- is a cost function Ci(xi) → [0..k]. A binary constraint Ci j is
tency called existential directional arc consistency (EDAC*). a cost function Ci j(xi,x j) → [0..k] We assume the existence
We show that EDAC*  is stronger than FDAC* and we in- of a unary constraint Ci for every variable, and a zero-arity
troduce an algorithm to enforce EDAC* that runs in time constraint (i.e. a constant), noted C∅ (if no such constraint
O(ed2 × max{nd,>}), where e, n and d are the number of is deﬁned, we can always deﬁne dummy ones: Ci(xi) = ⊥,
constraints, variables and domain values, respectively; > is C∅ = ⊥).
the upper bound of the WCSP instance (to be deﬁned later). When a constraint C assigns cost >, it means that C forbids
The main use of EDAC*  and its associated ﬁltering algo- the corresponding assignment, otherwise it is permitted by
rithm is to embed it into a complete depth-ﬁrst branch and C with the corresponding cost. The cost of an assignment
bound solver that maintains EDAC* at every visited node. X = (x1,...,xn), noted V (X), is the sum over all the problem
We have experimentally evaluated this idea on random Max- cost functions,
SAT, Max-CSP, and uncapacitated warehouse location prob-
lems. We observe that maintaining EDAC* is never worse       V (X) =  ∑  Ci j(xi,x j) ⊕ ∑ Ci(xi) ⊕C∅
than maintaining FDAC* and, in many instances, it is orders          Ci j∈C         Ci∈C
of magnitude better.
                                                        An assignment X is consistent if V (X) < >. The usual
  ∗This research is partially supported by the French-Spanish col- task of interest is to ﬁnd a consistent assignment with mini-
laboration PICASSO 05158SM - Integrated Action HF02-69 and the mum cost, which is NP-hard. Observe that WCSP with k = 1
REPLI project TIC-2002-04470-C03.                     reduces to classical CSP.    Co=0                    Co=0                        Any WCSP   can be easily transformed into an equivalent
      i            j          i            j          NC*  instance by projecting every unary constraints towards
  a         1             a
      0            0   a      1            0   a      C∅ and subsequently pruning every unfeasible value. Func-
                                    1                 tions ProjectUnary and PruneVar (Algorithm1) perform the
  b   0            1   b  b   0            0   b
                                                      projection of a unary constraint towards C∅ and prune unfea-
           a)                       b)                sible values, respectively.
                                                        Arc consistency properties are based on the notion of sim-
                                                      ple and full support. Given a binary constraint C , we say
    Figure 1: Two equivalent WCSP instances (> = 2).                                            i j
                                                      that b ∈ D j is a simple support for a ∈ Di if Ci j(a,b) = ⊥.
                                                      Similarly, we say that b ∈ D j is a full support for a ∈ Di if
Algorithm 1: Algorithms to propagate costs.           Ci j(a,b) ⊕Cj(b) = ⊥.
Function PruneVar(i) : boolean
                                                      Deﬁnition 2 Variable xi is arc consistent if every value a ∈
  f lag := false ;
                                                      Di has a simple support in every constraint Ci j. A WCSP is
  foreach a ∈ Di do                                   arc consistent (AC*) if every variable is node and arc consis-
    if (C∅ ⊕C (a) ≥ >) then
            i                                         tent.
      Di := Di − {a} ;
      f lag := true ;                                 Deﬁnition 3 Variable xi is full arc consistent if every value
                                                      a ∈ D has a full support in every constraint C . A WCSP is
  return f lag ;                                           i                                 i j
                                                      full arc consistent (FAC*) if every variable is node and full
                                                      arc consistent.
Procedure ProjectUnary(i)
  α := mina∈D {Ci(a)} ;                               Simple supports for a ∈ Di in D j can be enforced by pro-
           iα
  C∅ := C∅ ⊕ ;                                        jecting binary costs Ci j(a,·) towards Ci(a), as performed by
                             α
  foreach a ∈ Di do Ci(a) := Ci(a)   ;                procedure Project (Algorithm 1). Procedure FindSupports
                                                      (Algorithm 2) enforces simple supports in D j for every value
                   α
Procedure Project(i,a, j, )                           in Di.
  Ci(a) := Ci(a) ⊕ α ;
  foreach b ∈ D j do Ci j(a,b) := Ci j(a,b)   α ;     Example 2  The WCSP depicted in Figure2.a is not AC* be-
                                                      cause value a ∈ Di does not have a simple support in variable
Procedure Extend(i,a, j,α)                            j. AC* is enforced by executing FindSupports(i, j) (produc-
  foreach b ∈ D j do Ci j(a,b) := Ci j(a,b) ⊕ α ;     ing the problem in 2.b) and then ProjectUnary(i) (producing
  Ci(a) := Ci(a)   α ;                                the problem in 2.c).
                                                        To enforce full supports for Di values in D j (Procedure
                                                      FindFullSupports in Algorithm 2) we need to extend unary
Example 1 Consider the problem depicted in Figure1.a. It costs from Cj(·) towards Ci j(·,·) (procedure Extend in Algo-
has two variables i, j with two values (a,b) in their domains. rithm 1). Then, binary costs are projected towards Ci(a).
Unary costs are depicted within small circles. Binary costs In the CSP case (i.e, k = 1), being a simple support for (i,a)
are represented by edges connecting the corresponding val- is equivalent to being a full support for it and both notions re-
ues. The label of each edge is the corresponding cost. If two duce to the classical notion of support. Therefore, AC* and
values are not connected, the binary cost between them is 0. FAC* reduce to classical arc consistency. In the WCSP case,
In this problem the optimal cost is 0 and it is attained with the however, being a full support is stronger than being a sim-
assignment (b,a).                                     ple support. In [Larrosa and Schiex, 2004] it was shown that
                                                      every WCSP  can be transformed into an equivalent arc con-
                                                      sistent one in time O(ed3). Unfortunately, not every WCSP
3  Some   local consistencies in WCSP                 can be transformed into an equivalent full arc consistent one.
Two WCSPs  deﬁned over the same variables are said to be Example 3 The problem in Figure1.a is AC*, but it is not
equivalent if they deﬁne the same cost distribution on com- FAC* because value a ∈ Di is not fully supported. We can en-
plete assignments. Local consistency properties are widely force the full support by calling FindFullSupports(i, j). The
used to transform problems into equivalent simpler ones. In resulting problem, depicted in Figure1.b is not FAC* because
general, constraints can be given explicitly as tables of costs, value b ∈ D j is not fully supported. If we enforce the full
or implicitly as mathematical expressions or algorithmic pro- support by calling FindFullSupports( j,i), we return to the
cedures. For simplicity in our exposition, we will assume the problem in Figure1.a. It can be easily proved that this prob-
explicit form. This is done without loss of generality as dis- lem does not have an equivalent FAC* one.
cussed in [Cooper and Schiex, 2004]. The simplest form of Therefore, FAC* is not a practical property. To circumvent
local consistency is Node consistency (NC*).          this problem, a weaker property has been proposed. In the
Deﬁnition 1 Variable x is node consistent if: for all values sequel, we assume that the set of variables X is totally ordered
                    i                                 by >.
a ∈ Di, C∅ ⊕Ci(a) < > , and there exists a value a ∈ Di such
that Ci(a) = ⊥. A WCSP is node consistent (NC*) if every Deﬁnition 4 Variable xi is directional arc consistent if every
variable is node consistent.                          value a ∈ Di has a full support in every constraint Ci j such  Algorithm 2: Algorithms to enforce supports.                      j                       j
                                                                 a                       a
  Function FindSupports(i, j) : boolean                      Co=0   0               Co=0    0
                                                                 b                       b
    f lag := false ;                                                2                       2
                                                                2        1              1        1
    foreach a ∈ Di do                                         i   1                   i
                                                                            k                       k
      α := minb∈D {Ci j(a,b)} ;
               j                                           a                       a 1
                                                             0                  a                       a
      if (α > ⊥ ∧Ci(a) = ⊥) then f lag := true ;                            0                       0
                                                           b 1                     b 1
      Project(i,a, j,α) ;                                            1      0   b            1      0   b
    ProjectUnary(i) ;                                               a)                      b)
    return f lag ;                                                  j                       j
                                                                 a                       a
                                                             Co=1   0               Co=1    0
  Function FindFullSupports(i, j) : boolean                      b  2                    b  1
                                                                1        1
    f lag := false ;                                                                     1       1
                                                              i                       i
    foreach a ∈ Di do                                                       k                       k
                                                           a                       a
                                                             0                        1
      P[a] := minb∈D j {Ci j(a,b) ⊕Cj(b)} ;                                 0   a                   0   a
                                                           b 0                     b 0
      if (P[a] > ⊥ ∧Ci(a) = ⊥) then f lag := true ;                  1      0   b            1      0   b

    foreach b ∈ D j do                                              c)                      d)

      E[b] := maxa∈Di {P[a]  Ci j(a,b)} ;                           j                       j

                                                                 a                       a
    foreach b ∈ D j do Extend( j,b,i,E[b]) ;                Co=1    0               Co=2    0
    foreach a ∈ Di do Project(i,a, j,P[a]) ;                     b  0                    b  0
    ProjectUnary(i) ;
                                                                                         1      1
                                                              i  1      1             i
    return f lag ;                                                          k                       k
                                                           a                       a
                                                             0       1               0      1
                                                                            1   a                   0   a
  Function FindExistentialSupport(i) : boolean             b 0                     b 0
                                                                            1   b                   0   b
    f lag := false ;
                                                                    e)                      f)
1   α                                    ,
     := mina∈Di {Ci(a)LCi j∈C s.t. j<i minb∈D j {Ci j(a b)⊕Cj(b)}};
    if (α > ⊥) then
2     foreach Ci j ∈ C s.t. j < i do                    Figure 2: Six equivalent WCSP problems (> = 4): (a) origi-
        f lag := f lag ∨ FindFullSupports(i, j) ;       nal problem (c) made AC*, (d) made FDAC* with i < j < k
    return f lag ;                                      and (f) made EDAC*.

                                                        As a consequence, the unary cost of both values in Dk can
  that j > i. It is full directional arc consistent (FDAC) if, in be increased by enforcing full supports (Figure 2.e). Since all
  addition, every value a ∈ Di has a simple support in every unary costs of Di values are larger than zero, node consistency
  constraint Ci j such that j < i. A WCSP is full directional arc is lost and the lower bound can be increased (Figure 2. f ). In
  consistent (FDAC*) if every variable is node and full direc- general, full supports can be safely enforced in both direc-
  tional arc consistent.                                tions if their enforcement produces an increment in the lower
  Example 4 The problem in 2.c is AC* but not FDAC*, be- bound. Next, we show that there is a natural local consistency
  cause value a ∈ i does not have a full support in variable property behind this observation, that we call existential arc
  j. FDAC*  is enforced by executing FindFullSupports(i, j) consistency (EAC*).
  (producing the problem in Figure 2.d).
                                                        Deﬁnition 5 Variable xi is existential arc consistent if there
    Every WCSP   can be  transformed into an equivalent is at least one value a ∈ Di such that Ci(a) = ⊥ and it has a
                                       3  [
  FDAC*  WCSP  with time complexity O(end ) Larrosa and full support in every constraint Ci j. A WCSP is existential arc
  Schiex, 2003]. In the CSP case, FDAC* also reduces to consistent (EAC*) if every variable is node and existential arc
  classical arc-consistency. In the general case FAC* implies consistent.
  FDAC*  and FDAC* implies AC* (namely, the satisfaction of
  one property implies the satisfaction of the other). An im- All the previous forms of arc consistency required the same
  portant question is whether it is possible to strengthen the condition for every domain value. However, EAC* requires
  FDAC*  property to make it closer to FAC*, but still having the existence for every variable of a special value. The impor-
  the guarantee of existence for an arbitrary WCSP instance. In tant fact to note is: if a variable xi is not EAC*, then for all
  the next Section we address this issue.               domain value a with Ci(a) = ⊥ there is a variable x j such that
                                                        ∀b ∈ D j,Ci j(a,b) ⊕Cj(b) > ⊥. Thus enforcing full supports
  4  Existential arc consistency:  a stronger  new      in xi will break the NC* property and it will be possible to in-
                                                        crease the lower bound. It is possible to integrate EAC* with
     property                                           FDAC*  in order to exploit the beneﬁts of each. It is achieved
  Consider the FDAC* problem in Figure2.d. Observe that by the existential directional arc consistency (EDAC*) prop-
  value a ∈ Dk has a simple support in x j (required by the erty.
  FDAC*  property) but does not have any full support. We
  have the same situation with value b ∈ Dk and variable xi. Deﬁnition 6 A WCSP is EDAC* if it is FDAC* and EAC*.  In words, EDAC* requires that every value is fully sup- Algorithm 3: Enforcing EDAC*, initially, Q = R = S = X .
ported in one direction and simply supported in the other di- Procedure EDAC*
rection (to satisfy FDAC*). Additionally, at least one value 3 while (Q 6= ∅ ∨ R 6= ∅ ∨ S 6= ∅) do
per variable must be fully supported in both directions (to 4 P := {l | i ∈ S,l > i,Cil ∈ C} ∪ S ;
satisfy EAC*). The special value is called the fully supported S := ∅ ;
value. Observe that in the CSP case EDAC* instantiates to 5 while (P 6= ∅) do
classical arc consistency. Besides, EDAC* is weaker than    i := popMin(P) ;
FAC*, but stronger than FDAC*.                              if FindExistentialSupport(i) then
                                                    6         R := R ∪ {i} ;
                                                    7         foreach C ∈ C s.t. j > i do P := P ∪ { j} ;
5  Algorithm                                                         i j
                                                                   ∅
We present an algorithm for the enforcement of EDAC* in 8 while (R 6= ) do
the case of binary WCSPs. EDAC*  (Algorithm 3) trans-       j := popMax(R) ;
                                                    9       foreach Ci j ∈ C s.t. i < j do
forms an arbitrary problem into an equivalent one verifying   if FindFullSupports(i, j) then
the EDAC* local property. It uses three propagation queues,     R := R ∪ {i} ;
Q, R and P, that are implemented as priority queues so that     S := S ∪ {i} ;
the lowest or the highest variable in the queue can be popped
in constant time. If j ∈ Q, it means that some value in D j 10 while (Q 6= ∅) do
has been pruned (neighbors of j higher than j may have lost j := popMin(Q) ;
their simple support and must be revised). If j ∈ R, it means foreach Ci j ∈ C s.t. i > j do
that some value in D j has increased its unary cost from ⊥    if FindSupports(i, j) then
(neighbors of j lower than j may have lost their full support   R := R ∪ {i} ;
and must be revised). If i ∈ P, it means that some value in     S := S ∪ {i} ;
D j ( j < i neighbor of i) has increased its unary cost from ⊥ (i
may have lost the full support of its fully supported value and 11 foreach i ∈ X do
must be revised). Besides, there is an auxiliary queue S that if PruneVar(i) then Q := Q ∪ {i} ;
is used to efﬁciently build P.
  The algorithm is formed by a main loop, with four inner
loops. The while loops at lines 5, 8 and 10 respectively en-
force EAC*, DAC* and AC*; the line 11 enforces NC*. Each proof 1 Regarding space, we use the structure suggested by
time some costs are projected by the enforcement of a local [Cooper and Schiex, 2004] to bring the space complexity to
property, another property may be broken. The variables for O(ed). [Larrosa and Schiex, 2003] proved that ProjectU-
which the local property may be broken are stored in a queue nary, Project, Extend and PruneVar are time O(d); Find-
for revision. The enforcement of NC*, AC* and DAC* is Supports and FindFullSupports are time O(d2). Let us now
achieved as proposed in [Larrosa and Schiex, 2003]. Thus, focus on the while loop complexities in EDAC*. The loop at
we focus on the enforcement of EAC*.                  line 8 enforces DAC*. As described in previous papers, it is
  EAC*  enforcement is mainly encoded by Function Find- time O(ed2) because each variable is pushed in R at most
ExistentialSupport(i), which enforces the existential sup- once and thus each constraint Ci j is checked once (line 9).
port in xi by ﬁnding full supports wrt. every lower neighbor Similarly, the loop at line 10 which enforces AC*, directed
                                                                                                      2
x j (it does not have to worry for higher neighbors because from the lowest variables to the highest ones, is also O(ed ).
DAC*  enforcement takes care of them). While enforcing the The loop at line 5 enforces EAC* directed to the highest
existential support in xi, the cost function Cj decreases or re- variables. In a single run of this loop, a variable will never
mains the same. As a consequence, we do not need to revise be pushed twice in P because the popped variable xi is always
the existential consistency of x j nor the directional arc con- the lowest one, and the pushed variables are higher than xi.
sistencies of the lowest neighbors of x j. Furthermore, as the It implies that the while loop iterates at most n times, leading
existential consistency is stronger than the arc one, enforc- to a O(e) time complexity for line 7. The amortized complex-
                                                                                            2
ing AC* between xi and x j is useless. However, the direc- ity time of FindExistentialSupport is O(ed ) because this
tional arc consistency of variable xi should be checked, be- function may be called with each variable, so every binary
cause some unary cost of xi could have been increased (line constraint at line 1 and 2 is observed once. Thus, the time
6). Similarly, the existential consistency of higher neighbors complexity of EAC* is also O(ed2).
of xi should also be veriﬁed (line 7).                  The line 4 is time O(n). The for at line 11 is time O(nd)
  PruneVar() enforces node consistency after unary cost and (which is less than O(ed), as the graph is supposed to be
lower bound increments (line 11). This function can be exe- connected). Compiling the different results, the complexity
cuted more often in order to avoid unnecessary value exami- inside the while at line 3 is O(ed2). It loops when:
nations during the while loops. It does not change the worst- • either Q is not empty: the for at line 11 has pruned a
case time complexity. For simplicity reasons, the case of in- value and this is done at most nd times;
consistent problems where C∅ reaches > is not described.
                                                        • either R is not empty: AC* has enqueued a variable in R
Theorem 1 The   complexity  of   EDAC*    is   time       and by the preceding remark this cannot be done more
    2
O(ed max{nd,>})  and space O(ed).                         than O(nd) times;  • or S is not empty: an element has been enqueued   and solved the problem instances cap71-134 from the stan-
    while enforcing AC* or DAC*. The ﬁrst case cannot dard OR Library benchmarks for UWLP, as well as the MO*-
    happen more than O(nd). The second case happens   MP*  instances by courtesy of J. Kratica [Kratica et al., 2001].
    O(max{nd,>})  times because the condition at line 8 is The M* instances are very challenging for mathematical pro-
    true when AC* has added an element in R (O(nd) times) gramming approaches because they have a large number of
    or EAC* has added an element (O(>) times because  suboptimal solutions.
    each time EAC* is violated, C∅ increases).

                                     2                            CNF2, 80 vars             CNF3, 40 vars
Consequently, the overall complexity is O(ed max{nd,>}).  200                      160
                                                          MFDAC*                     MFDAC*
                                                          MEDAC*                     MEDAC*
                                                         180                       140
                                                         160
                                                                                   120
6  Experimental    results                               140
                                                         120                       100
In this Section, we perform an empirical comparison of   100                        80
                                                       cpu  time                 cpu  time
                                                         80                         60
EDAC*  with FDAC* for the task of proving optimality. The  60
                                                                                    40
main use of the EDAC* and FDAC* properties is to use them  40
                                                         20                         20
inside a depth-ﬁrst branch and bound solver. The idea is to  0                      0
                                                          100  200  300  400  500  600  700  200  400  600  800  1000  1200  1400
maintain EDAC* and FDAC*  during the search (algorithms           n. of clauses              n. of clauses
called MEDAC* and MFDAC*,  respectively). We have im- Figure 3: Time in seconds to solve random Max-2SAT and
plemented (C code) this idea in an efﬁcient incremental ver- Max-3SAT problems.
sion that uses tables of supports a` la AC2001 [Bessiere and
Regin, 2001]. In non-binary problems, we delay the propaga-
tion of non-binary constraints until they become binary. For
                                                                  Sparse Loose               Sparse Tight
                                                         40                        50
variable selection we use the dom/deg heuristics which selects MFDAC*               MFDAC*
                                                          MEDAC*                    MEDAC*
                                                         35
the variable with the smallest ratio of domain size divided by                     40
future degree. For value selection we consider values in in-  30
                                                         25                        30
creasing order of unary cost Ci. The variable ordering for  20
                                                       cpu  time                 cpu  time
directional arc consistency is given by their index. The opti-  15                 20
                                                         10
mum  of each problem instance (except for MAX-SAT where                            10
                                                         5

only a good upper bound is provided) is given to the branch  0                      0
                                                              30   35   40   45     20   25  30   35  40
and bound as a ﬁrst upper bound. We experimented with             n. of variables           n. of variables
                                                                  Dense Loose                Dense Tight
three domains easily modeled as WCSP. Given a CNF for-   50                        100
                                                          MFDAC*                     MFDAC*
mula, Max-SAT is the problem of ﬁnding a complete assign- MEDAC*                     MEDAC*
ment with a maximum number of satisﬁed clauses. We have  40                         80
generated and solved 80-variable 2-SAT and 40-variable 3-  30                       60

SAT instances with varying the number of clauses using Cn- cpu  time  20         cpu  time  40
   1
fgen , a random k-SAT generator. Note that this generator  10                       20
prevents duplicate or opposite literals in clauses but not du-
                                                         0                          0
                                                          20  22  24  26  28  30  32  34  36  16  18  20  22  24  26  28  30
plicate clauses. Given an overconstrained CSP, Max-CSP is         n. of variables            n. of variables
the problem of ﬁnding a complete assignment with a maxi-          Complete Loose            Complete Tight
                                                         100                       140
                                                          MFDAC*                     MFDAC*
                                                          MEDAC*                     MEDAC*
mum  number of satisﬁed constraints. We have generated 6                           120
                                                         80
classes of binary random problems with domain size set to                          100

                                                         60
10 (Sparse-Loose (constraint graph connectivity of 12% for                          80


                                                       cpu  time                 cpu  time  60
40 variables), Sparse-Tight, Dense-Loose (constraint graph  40
                                                                                    40
connectivity of 25%), Dense-Tight, Complete-Loose, and   20
Complete-Tight) as proposed in [Larrosa and Schiex, 2003].                          20
                                                          0                         0
In Max-SAT (resp. Max-CSP), samples have 10 (resp. 50)    10  12  14  16  18  20  22  6  8   10  12   14  16
                                                                  n. of variables            n. of variables
instances and we report mean values. In the uncapacitated
warehouse location problem (UWLP) a company considers Figure 4: Time in seconds to prove optimality for binary ran-
opening warehouses at some candidate locations in order to dom Max-CSPs.
supply its existing stores. The objective is to determine which
warehouses to open, and which of these warehouses should The experiments were all performed on a 2.0 GHz Pen-
supply the various stores, such that the sum of the mainte- tium 4 computer with 512 MB2. Time results in seconds are
nance and supply costs is minimized. Each store must be given in Figures 3 and 4, and Table 5. In all Max-SAT (resp.
supplied by exactly one open warehouse. We simply model Max-CSP classes), the search effort seems to grow exponen-
the problem by l boolean variables for the candidate loca- tially with the number of clauses (resp. number of variables).
tions, s integer variables for the stores with domain size set to We summed the computation times for all the samples that
l, l + s soft unary constraints for the costs, and l × s hard bi- were completely solved by both algorithms and computed
nary constraints connecting stores and warehouses. We took
                                                         2The program named TOOLBAR and the benchmarks are avail-
  1A. van Gelder ftp://dimacs.rutgers.edu/pub/challenge/ able at http://carlit.toulouse.inra.fr/cgi-bin/
satisﬁability/contributed/UCSC/instances              awki.cgi/SoftCSP.