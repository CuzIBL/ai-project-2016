                   Leaf-Value Tables for Pruning Non-Zero-Sum Games

                                          Nathan Sturtevant
                        University of Alberta Department of Computing Science
                                    Edmonton, AB Canada T6G 2E8
                                        nathanst@cs.ualberta.ca


                    Abstract                          playersʼ  scores,  and  secondly  test  to  see  if,  given  those 
                                                      bounds, it is provably correct to prune some branch of the 
       Algorithms  for  pruning  game  trees  generally game tree. This work focuses on the second part of this pro-
    rely on a game being zero-sum, in the case of al- cess. Alpha-beta and other pruning methods use very simple 
    pha-beta pruning, or constant-sum, in the case of linear tests as a decision rule to determine whether or not they 
    multi-player pruning algorithms such as specula-  can prune. For zero-sum games these decisions are optimal. 
    tive pruning. While existing algorithms can prune That is, they will make perfect decisions about whether prun-
    non-zero-sum games, pruning is much less effec-   ing is possible. For non-zero-sum games, however, current 
    tive than in constant-sum games. We introduce the techniques will not catch every possibility for pruning.
    idea of leaf-value tables, which store an enumer-     In order to prune optimally in a non-zero-sum game we 
    ation  of  the  possible  leaf  values  in  a  game  tree. must have some knowledge about the space of possible val-
    Using these tables we are can make perfect deci-  ues that can occur within the game tree. Carmel and Markov-
    sions about whether or not it is possible to prune a itch assume a bound on the difference of player scores. We 
    given node in a tree. Leaf-value tables also make it instead assume that we can enumerate the possible outcomes 
    easier to incorporate monotonic heuristics for in- of the game. This is particularly easy in card games, where 
    creased pruning. In the 3-player perfect-informa- there  are  relatively  few  possible  outcomes  to  each  hand. 
    tion variant of Spades we are able to reduce node Given that we can enumerate possible game outcomes, we 
    expansions by two orders of magnitude over the    can  then  make  optimal  pruning  decisions  in  non-zero-sum 
    previous best zero-sum and non-zero-sum pruning   games. In addition, these techniques can be enhanced by in-
    techniques.                                       corporating information from monotonic heuristics to further 
                                                      increase pruning.
                                                          In section 2 we illustrate the mechanics of a few pruning 
                                                      algorithms, before moving to a concrete example from the 
1  Introduction                                       game of Spades in section 3. In section 4 we examine the 
In two-player games, a substantial amount of work has gone computational  complexity  and  the  leaf-value  table  method 
into algorithms and techniques for increasing search depths. that is used to implement different decision rules for pruning, 
In fact, all but a small fraction of computer programs written followed by experimental results and conclusions.
to play two-player games at an expert level do so using the 
minimax algorithm and alpha-beta pruning. But, the pruning 2  Pruning Algorithms
gains provided by alpha-beta rely on the fact that the game is To prune a node in a game tree, it must be proven that no val-
zero-sum. Two-player games most commonly become non-  ue at that node can ever become the root value of the tree. We 
zero-sum  when  opponent  modeling  is  taken  into  consider- demonstrate how this decision is made in a few algorithms.
ation. Carmel and Markovitch [1996] describe one method 
for pruning a two-player non-constant-sum game.       2.1  Alpha-beta
    A multi-player game is one with three or more players We assume that readers are familiar with the alpha-beta prun-
or  teams  of  players. Work  on  effective  pruning  techniques 
                                                                        α, β
in  multi-player  games  began  with  shallow  pruning  [Korf,   maxValue(state, )
1991], and continued most recently with speculative pruning,   IF cutoffTest(state) return eval(state)
[Sturtevant, 2003]. While a game does not need to be con-     FOR EACH s in successor(state)
                                                              α ← max(α, minValue(s, α, β))
stant-sum for pruning to be applied, the amount of pruning 
                                                              IF (β - α ≤ 0)† RETURN β
possible is greatly reduced if a game is not constant-sum.
                                                              RETURN α
    Both  two-player  and  multi-player  pruning  algorithms 
consist of at least two stages. They ﬁrst collect bounds on      Figure 1: Alpha-beta pseudo-code.           β − α                                       maxsum = 10            (a)
                                                                    (≥5, ≤5, (a)≤5) 1
                         0
        Figure 2: Alpha-beta pruning decision space.
                                                                                 (c)
                                                             (b)
                                                                 2             2 (≤4, ≥6, ≤4)
ing  algorithm.  In  Figure  1  we  show  pseudo-code  for  the (5, 4, 1)
maximizing player, modiﬁed slightly from [Russell and Nor-                                 (e)
vig, 1995]. The statement marked † is where alpha-beta de-   (d) 3
                                                                                         (?, ?, ?)
termines  whether  a  prune  is  possible. This  is  illustrated  in (0, 6, 4)
Figure 2. The x-axis is the value β − α, and we plot points  Figure 4: Shallow pruning in a 3-player maxn tree.
as they are tested. If a point, such as the solid one, falls to 
the left of 0, we can prune, and if it falls to the right, like the 
                                                      2.3.1 Shallow Pruning
hollow point, we canʼt. It is useful to think of this as a linear 
                                                      Shallow pruning [Korf, 1991] is one of the simplest pruning 
classiﬁer, because it makes a single comparison with a linear 
                                                      algorithms for multi-player games. An example of shallow 
function to determine if a prune is possible.
                                                      pruning is shown in Figure 4. The sum of playersʼ scores in 
2.2  Maxn                                             each maxn value is always 10, so maxsum is 10. In this tree 
The maxn algorithm [Luckhardt and Irani, 1986] is a general- fragment Player 1 is guaranteed at least a score of 5 at node 
ization of minimax for any number of players. In a maxn tree (a) by moving towards (b). Similarly, Player 2 is guaranteed 6 
with n players, the leaves of the tree are n-tuples, where the points at (c) by moving towards (d). Regardless what the un-
ith element in the tuple is the ith playerʼs score or utility for seen value is at (e), Player 2 will not select that move unless it 
that position. At the interior nodes in the tree, the maxn value gives him more than 6 points. Thus, before exploring (e), we 
of a node where player i is to move is the maxn value of the can already guarantee that Player 1 will never get more than 
child of that node for which the ith component is maximum. maxsum - 6 = 4 points at (c). Because Player 1 is guaranteed 
At  the  leaves  of  a  game  tree  an  exact  or  heuristic  evalua- at least 5 points at (a), the value of (e) is irrelevant and can 
tion function can be applied to calculate the n-tuples that are be pruned.
backed up in the game tree.                               In this example we used consecutive bounds on Player 1 
    We demonstrate this in Figure 3. In this tree there are and Player 2ʼs scores to prune. As stated previously, the gen-
                                                      eral idea is to prove that unseen leaf nodes cannot become the 
three players. The player to move is labeled inside each node. n
At node (a), Player 2 is to move. Player 2 can get a score of 3 max  value of the game tree. In Figure 4, for instance, we can 
                                                      consider all possible values which might occur at node (e). If 
by moving to the left, and a score of 1 by moving to the right.                      n
So, Player 2 will choose the left branch, and the maxn value of any of these can ever become the max  value at the root of the 
node (a) is (1, 3, 5). Player 2 acts similarly at node (b) select- tree, we cannot prune.
ing the right branch, and at node (c) breaks the tie to the left,   To formalize this pruning process slightly, we construct a 
                                                                          n
selecting the left branch. At node (d), Player 1 chooses the n-tuple similar to a max  value called the bound vector. This 
move at node (c), because 6 is greater than the 1 or 3 avail- is a vector containing the lower bounds on playersʼ scores in 
                                                                                                 n
able at nodes (a) and (b).                            a game tree given the current search. While the max  value is 
                                                      constrained to sum to maxsum, the bound vector can sum to 
2.3  Maxn Pruning Algorithms                          as much as n·maxsum. In Figure 4, after exploring every node 
Given  no  information  regarding  the  bounds  on  playersʼ except node (e) our bound vector is (5, 6, 0). This is because 
scores, generalized pruning is not possible. But, if we assume Player 1 is guaranteed 5 points at the root, and Player 2 is 
that each playerʼs score has a lower bound of 0, and that there guaranteed 6 points at node (c). Existing pruning algorithms 
is an upper bound on the sum of all players scores, maxsum, prune whenever the sum of the components in the bound vec-
we can prune. These bounds do not guarantee that a game tor is at least as large as maxsum.
is constant-sum, and existing pruning algorithms may miss 
pruning opportunities if a game is not constant-sum.           maxsum    possible bound vectors
                       (6, 4, 0)
                      (d) 1                                                                  x+y = maxsum
                                                           Player 2
       (a)            (b)          (c)
           2             2              2
   (1, 3, 5)      (3, 5, 2)     (6, 4, 0)                                possible maxn 
                                                                            scores
                                                                    0
       3      3       3      3      3      3                                            maxsum
    (1, 3, 5)(6, 1, 3) (6, 4, 0) (3, 5, 2) (6, 4, 0) (1, 4, 5)         0      Player 1
            Figure 3: A 3-player maxn game tree                 Figure 5: Shallow pruning decision space.     maxsum = 10      (a)
                   (≥5, , ) 1
                                                                           bound vector space
                                                                    y
                      (b)                                   maxsum
            2      (, ≥3, ) 2
         (5, 4, 1)                                                              z

                      (c)                                                               maxn values,
            3      (, , ≥3) 3                                                         x+y+z = maxsum
         (3, 3, 4)
                                                                  0
            1                      (?, ?, ?)
                                                                                    x
         (3, 4, 3)                                                           maxsum
              Figure 6: Speculative Pruning                   Figure 7: Speculative pruning decision space.

                                                      to at least maxsum we can guarantee that there will never be 
    We show a visualization of the shallow pruning space                                                n
in Figure 5. The x- and y-coordinates are scores or bounds a value at the right child of (c) which can become the max  
for Player 1 and Player 2 respectively. The shaded area is the value  of  the  tree.  When  pruning  over  more  than  2-ply  in 
                     n                                multi-player games there is the potential that while a value at 
space where possible max  values for Player 1 and 2 will fall.               n
       n                                              (c) cannot become the max  value of the tree, it can affect the 
All max  values in the game must be in this space, because n
their sum is bounded by maxsum. Because shallow pruning max  value of the tree. Other details of the speculative prun-
ignores Player 3, Player 1 and Player 2ʼs combined scores ing algorithm prevent that from happening, but we are only 
are not constant-sum, so they can fall anywhere to the left of concerned with the initial pruning decision here.
the diagonal line. Bound vectors, however, can fall anywhere   We  illustrate  the  pruning  decision  rule  for  speculative 
in the larger square. If a bound vector is on or above the di- pruning in Figure 7. In this case, because we are comparing 
agonal line deﬁned by x+y = maxsum, we can prune, because three playerʼs scores, the decision for whether we can prune 
there cannot be a maxn value better than those bound vectors. depends on a 2-d plane in 3-d space, where each axis cor-
                                                      responds to the score bound for each of the 3 players in the 
Like alpha-beta, shallow pruning is using a linear classiﬁer to         n
decide when to prune.                                 game. Thus each max  value and bound vector can be repre-
                                                      sented as a point in 3-d space. For a three-player constant-
    Ignoring Player 3ʼs values, we plot the leaf values (5, 4, -)             n
and (0, 6, -) from Figure 4 as open points, and the bound vec- sum  game,  all  possible  max   values  must  fall  exactly  onto 
tor (5, 6, -) used to prune in Figure 4 as a solid point. In this the plane deﬁned by x+y+z = maxsum, which is also perfect 
instance, there is no gap between the gray region and the di- classiﬁer for determining when we can prune. As in shallow 
agonal line, so the line deﬁned by x+y = maxsum is a perfect pruning, bound vectors can fall anywhere in the 3-d cube.
classiﬁer to determine whether we can prune.          2.4  Generalized Pruning Decisions
2.3.2 Alpha-Beta Branch-and-Bound Pruning             In all the pruning algorithms discussed so far, a linear classi-
Although  shallow  pruning  was  developed  for  multi-player ﬁer is used to make pruning decisions. This works well when 
games,  the  basic  technique  only  compares  the  scores  from a game is zero-sum or constant-sum, but in non-constant-sum 
two players at a time. Alpha-beta branch-and-bound pruning games a linear classiﬁer is inadequate1.
[Sturtevant and Korf, 2000] is similar to shallow pruning, ex-   When a game is non-constant-sum, the boundary of the 
cept that it uses a monotonic heuristic to provide bounds for space  of  maxn  values  is  not  deﬁned  by  a  straight  line. We 
all players in the game. The bound vector in Figure 4 was (5, demonstrate this in the next section using examples from the 
6, 0). Player 3ʼs bound was 0, because we had no information game of Spades. To be able to prune optimally, we need to 
about his scores. But, supposing we had a monotonic heuris- know the exact boundary of feasible maxn values, so that we 
tic that guaranteed Player 3 a score of at least 2 points. Then can always prune when given a bound vector outside this re-
the bound vector would be (5, 6, 2). This additional bound gion. We explain methods to do this in Section 4.
makes it easier to prune, since we can still prune as soon as 
the values in the bound vector sum to maxsum.         3  Sample Domain: Spades
2.3.3 Speculative Pruning                             Spades is a card game for 2 or more players. In the 4-player 
Speculative  pruning  [Sturtevant,  2003],  like  alpha-beta version players play in teams, while in the 3-player version 
branch-and-bound pruning, takes into account all of the play- each player is on their own, which is what we focus on. There 
ers in the game. It does this by considering multiple levels in are many games similar to Spades which have similar proper-
the game tree at one time. We demonstrate this in Figure 6. 
In this ﬁgure, the important bounds are Player 1ʼs bound at 1Further details on the relationship between constant-sum and 
(a), Player 2ʼs bound at (b) and Player 3ʼs bound at (c). These non-constant-sum games are found in Appendix A, but they are not 
together form the bound vector (5, 3, 3). If these values sum necessary for understanding the contributions of this paper.     # Tricks    Utility/Evaluation (bid) Ranked 
     Taken                             maxn vals
                P1 (1)  P2 (1)  P3 (2)                               4
     (0, 0, 3)    0       0     19+6     (0, 0, 2)                         x+
                                                                            y 
                                                                             = 4 (
     (0, 1, 2)†   0     10+3    20+3     (0, 2, 1)
                                                                                maxsum
     (0, 2, 1)†   0      9+6      0      (0, 4, 0)
     (0, 3, 0)†   0      8+6      0      (0, 3, 0)                                  )
                                                                   Player 2’s score Player  2’s
     (1, 0, 2)  10+3      0     20+3     (2, 0, 1)
                                                                    0
     (1, 1, 1)† 10+3    10+3      0      (2, 2, 0)
                                                                       0               4
     (1, 2, 0)† 10+3     9+3      0      (2, 1, 0)                       Player 1’s score
     (2, 0, 1)   9+6      0       0      (4, 0, 0)             Figure 8: Pruning decision space for Table 1.
     (2, 1, 0)†  9+3    10+3      0      (1, 2, 0)
     (3, 0, 0)   8+6      0       0      (3, 0, 0)    value of each state, not the absolute value. So, in the last col-
                                                      umn we have replaced each playerʼs utility with a rank, and 
   Table 1: Outcomes for a 3-player, 3-trick game of Spades.
                                                      combined all playerʼs ranks into the ﬁnal maxn value.
                                                          As an example, the ﬁrst possible outcome is that Players 
ties. We will only cover a subset of the rules here. A game of 1 and 2 take no tricks, while Player 3 takes 3 tricks. Since 
Spades is split into many hands. Within each hand the basic Players  1  and  2  both  missed  their  bids,  they  get  0  points. 
unit of play is a trick. At the beginning of a hand, players Player 3 made his bid of 2 tricks, and took 1 overtrick. Since 
must bid how many tricks they think they can take. At the end we want to avoid too many overtricks, we evaluate this as 20-
of each hand they receive a score based on how many tricks 1 = 19 points. But, since both Player 1 and 2 miss their bids in 
they  actually  took. The  goal  of  the  game  is  to  be  the  ﬁrst this scenario, Player 3 has a bonus of 6 points. This is the best 
player to reach a pre-determined score, usually 300 points. possible outcome for Player 3, so it gets his highest ranking. 
    If a player makes their bid exactly, they receive a score For Player 1 and 2 it is their worst possible outcome, so they 
of 10×bid. Any tricks taken over your bid are called over- rank it as 0.
tricks. If a player takes any overtricks they count for 1 point   We graph the shallow pruning decision space for the ﬁrst 
each, but each time you accumulate 10 overtricks, you lose two players of this game in Figure 8. In this game maxsum is 
100 points. Finally, if you miss your bid, you lose 10×bid. So, 4. The 10 possible leaf values for the ﬁrst two players are all 
if a player bids 3 and takes 3, they get 30 points. If they bid plotted as hollow points in the graph. If we use maxsum as a 
3 and take 5, they get 32 points. If they bid 3 and take 2, they discriminator to decide if we can prune, it will indicate that 
get -30 points. Thus, the goal of the game is to make your bid we can only prune if a bound vector falls on or above the bold 
without taking too many overtricks.                   diagonal  line.  But,  we  can  actually  prune  as  long  a  bound 
    If all players just try to maximize the number of tricks vector is on or above the border of the gray region. So, we 
they take, the game is constant-sum, since every trick is taken can actually prune given any bound vector for player 1 and 2 
by exactly one player, and the number of tricks available is except (0, 0), (0, 1), (1, 0) and (1, 1).
constant. But, maximizing the tricks we  take in  each hand   As a ﬁnal point, we note that in card games like Spades 
will  not  necessarily  maximize  our  chances  of  winning  the the number of tricks you have taken can only increase mono-
game, which is what we are interested in. Instead, we should tonically, which can be used as a heuristic to help pruning. 
try to avoid overtricks, or employ other strategies depending This  observation  is  the  key  behind  the  alpha-beta  branch-
on the current situation in the game.                 and-bound pruning technique. But, if we are using a utility 
    In a game with 3 players and t tricks, there are (t+1)(t+2)/2 function  like  in Table  1,  it  is  difﬁcult  to  describe  how  the 
possible ways that the tricks can be taken. We demonstrate monotonic heuristic relates to the evaluation function. Leaf-
this in Table 1, for 3 players and 3 tricks.          value tables, however, make the task easy.
   Table 1 is an example of a leaf-value table. It contains all   Assume, for instance, that Player 2 has already taken 1 
possible leaf values and their associated utility in the game. trick. Then, we can ignore all outcomes in which he does not 
In Spades, we build such a table after each player had made take one trick. This gives us a reduced set of values, which 
their bid, but before game play begins. The ﬁrst column enu- are  marked  with  a  †  in Table  1.  Looking  at  the  associated 
merates all possible ways that the tricks can be taken by each maxn values, we then see that Player 1 will get no more than 
player. The second through fourth columns evaluate the score 2 and Player 3 will get no more than 1. We show how this is 
for each player, that is their utility for each particular out- used in the next section.
come. In this example, Player 1 and Player 2 have bid 1 trick 
each,  and  Player  3  bid  2  tricks.  If  a  player  does  not  make 4  Leaf-Value Tables
their bid they have a score of 0, otherwise we use a heuristic The formal deﬁnition of a leaf-value table is a table which 
estimate for their score, 10×bid - overtricks + 3×(how many holds all possible outcomes that could occur at a leaf node in 
opponents miss their bid). As has been shown for minimax a game. Looking back to the pruning algorithms in Section 2, 
[Russell and Norvig, 1995], we only care about the relative     GLOBAL leaf-value table[] { outcome[], rank[] }   results in a hash table.
                                                          Pseudo-code for using a leaf-value table is in Figure 9. 
1   canLeafValueTablePrune(bounds[], heuristicUB[])   This  procedure  is  called  by  a  pruning  algorithm  to  decide 
2      IF (inHashTable(bounds, heuristicUB))          whether or not to prune given current bounds. A leaf-value 
3          return hashLookUp(bounds, heuristicUB)     table  is  pre-computed  with  each  possible  outcome  of  the 
4      FOR each entry in leaf-value table             game and the associated rank of that outcome for each player. 
5      FOR i in players 1..n                          We pass in the current bound vector, as well as any heuristic 
6              if entry.outcome[i] > heuristicUB[i]   upper bounds on playersʼ scores. If an entry in the leaf-value 
7                  skip to next entry;                table is inconsistent with the heuristic (line 6), we can ignore 
8      FOR i in players 1..n                          that entry, because that outcome cannot occur in the current 
9              if entry.rank[i] ≤ bounds[i]           sub-tree. If there is an entry in the table for which every play-
10                 skip to next entry;                er does better than their value in the bound vector, tested on 
11         addToHashTable(false, bounds, heuristicUB) lines 8-9, we reach lines 11-12, indicating we cannot prune.
12         RETURN false;                                  Every  time  we  attempt  to  prune,  we  will  pay  at  most 
13     addToHashTable(true, bounds, heuristicUB)      O(table size), but this cost is quickly amortized over the look-
14  RETURN true;                                      ups, and doesnʼt add signiﬁcant overhead. In a game with a 
                                                      large number of outcomes there are a variety of other methods 
     Figure 9: Leaf-Value Table Pruning pseudo-code.  that could be used to reduce the lookup cost. Additionally, we 
                                                      can always use the standard linear maxsum check, as it will 
we want to replace the linear classiﬁers with more accurate always be correct if it indicates we can prune. The heuristic 
classiﬁers, given a leaf-value table. Thus, we need an efﬁ- does not speed up the check for whether we can prune, but it 
cient way to both ﬁnd and compute regions like in Figure 8 to can reduce the effective size of the leaf-value table, making it 
determine when we can prune.                          more likely that we do prune.
Theorem: The information stored in a leaf-value table is suf-
ﬁcient to make optimal pruning decisions.             5  Experimental Results
Proof: We ﬁrst assume that we have a bound vector b = (b , 
                                                 1    5.1 Nodes Expanded in Three-Player Spades
b2, …, bn), where each bound in the vector originates on the 
path  from  the  root  of  the  tree  to  the  current  node. We  are We use the game of Spades as a test-bed for the techniques 

guaranteed that a player i with bound bi will not change his introduced in this paper. Our ﬁrst experiment will illustrate 
move unless he can get some value vi where vi > bi. Thus, if that leaf-value tables are quite effective for pruning, and will 
                                           
there exists a value v = (v1, v2, …, vn) where ∀i vi > bi then also help demonstrate when they will be most effective. To 
we  cannot  prune,  because v  is  better  than  every  bound  in do  this,  we  compare  the  number  of  nodes  expanded  using 
the search so far. Given a leaf-value table, we know every (1) previous pruning techniques and (2) a variety of evalua-
possible value in the game, and so we can explicitly check tion functions in the 3-player version of Spades. One of these 
whether some v exists that meets the above conditions, and evaluation  functions  is  actually  from  a  different  bidding 
thus we can use a leaf-value table to make optimal pruning game, called “Oh Hell!”
decisions. ☐                                              For each method, we counted the total number of node 
    Because  a  leaf-value  table  gives  us  an  exact  descrip- expansions needed to compute the ﬁrst move from 100 hands 
tion of the boundary of the spaces where we can and cannot of Spades, where each player started with 9 cards and searched 
prune, the only question is how we can use this information the entire game tree (27-ply). Our search used a transposition 
efﬁciently. Given a bound vector, we need to quickly deter- table, but no other search enhancements besides the pruning 
mine whether or not we can prune, because we expect to ask methods explicitly discussed. Bids for each player are pre-de-
this question once for every node in the game tree.   termined by a simple heuristic. For these trees, the leaf-value 
    For small games, we can build a lookup table enumer- tables contain 55 entries. We present the results in Table 2.
                                                          The ﬁrst column in the table is the average size of the 
ating all possible bound vectors and whether or not we can 
                                                      game trees without pruning, 2.7 million nodes. This is deter-
prune. This will provide constant time lookup, but for a table 
                                                      mined by the cards players hold, not the evaluation function 
with t entries and n players, this table will be size O(tn) and 
                                                      used, so we will compare the other tree sizes to this value.
take time O(tn+1) to compute. Including heuristic information 
                                                          The next two columns are the results using speculative 
makes these tables even larger. But, most of these entries will pruning  with  a  linear  classiﬁer,  the  previous  best  pruning 
never be accessed in any given game. Instead, we can dy- technique.  If  we  use  a  non-constant-sum  (NCS)  evaluation 
namically  compute  entries  as  we  need  them,  and  store  the 

                      Full Tree   NCS       MT       MoMB       mOT      smOT       WL        OH
       nodes expanded   2.7M     1.9M       1.1M      400k      37.2k     8.6k      788      40.7k
       reduction factor  -        1.36      2.37       6.6       71       308      3362       65

                              Table 2: Overall reduction and average tree sizes in Spades.