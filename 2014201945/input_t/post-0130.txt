      Path-Planning for Autonomous Training on Robot Manipulators in Space 
                                                                                 

          Froduald Kabanza              Roger Nkambou                   Khaled Belghith 
        Université de Sherbrooke    U. du Québec à Montréal         Université de Sherbrooke 
        kabanza@usherbrooke.ca      nkambou.roger@uqam.ca       khaled.belghith@usherbrooke.ca 
                                                                                 
                                                                                 
                   Abstract                                The  MSS consists of a   Space Station Remote 
                                                        Manipulator System (SSRMS), a Mobile Base System 
    This paper describes the integration of robot 
                                                        (MBS), a Mobile Transporter (MT), and a Special 
    path-planning and spatial task modeling into a      Purpose Dexterous Manipulator (SPDM).  The SSRMS is 
    software system that teaches the operation of a 
                                                        a 17-meter long articulated robot manipulator with seven 
    robot manipulator deployed on International 
                                                        rotational joints and two latching end-effectors which can 
    Space Station (ISS). The system addresses the       grapple special fixtures, giving it the capability to “walk” 
    complexity of the manipulator, the limited direct 
                                                        from one grappling fixture to next on the exterior of the 
    view of the ISS exterior and the unpredictability 
                                                        ISS. The SPDM is a dexterous manipulator with two 
    of lighting conditions in the workspace. Robot      symmetrical six-joint arms and can be operated from the 
    path planning is used not for controlling the 
                                                        end of the SSRMS. The MT is a platform that serves to 
    manipulator, but for automatically checking 
                                                        move SSRMS along the main truss of ISS.   
    errors of a student learning to operate the            The MSS is operated from a robotic workstation 
    manipulator and for automatically producing 
                                                        located inside one of the ISS modules and is equipped 
    illustrations of good and bad motions in training.    
                                                        with three video monitors, each displaying a view from 
                                                        one of the 14 cameras mounted on the ISS exterior and 
1  Introduction                                         the SSRMS. Crewmembers operating the MSS have no 
Designing software that teaches requires, in advanced   direct view of the ISS exterior other than the three 
cases, the implementation of “intelligence” capabilities. monitors. In fact, choosing the right camera views to 
After all, the best human teachers are those mastering the display is one of the tasks for operating the SSRMS.   
subject they teach, having communication skills and        RomanTutor is a system still under development; here 
understanding the student’s problem solving process in  we describe the integration of robot path-planning and 
order to help him. With the aim of furthering intelligent spatial task modeling in an MSS simulator to provide 
software-based education systems, we have been          useful feedback to a student operating the SSRMS. To 
developing a software simulator, called RomanTutor, that illustrate, when a student is learning to move a payload, 
can be used to train astronauts to operate a robotic    RomanTutor invokes the path-planner periodically to 
manipulation system (the Mobile Servicing System,       check whether there is a path from the current 
MSS), on the International Space Station (ISS, Figure 1).   configuration to the target and provides feedback 
                                                        accordingly. The path-planner not only computes 
                                                        collision free paths but is also capable of taking into 
                                                        account the limited direct view of the ISS, the lighting 
                                                        conditions and other safety constraints about operating the 
                                                        SSRMS.  

                                                        2   Architecture and Basic Functionalities 
                                                        RomanTutor works with any robot manipulator provided 
                                                        a 3D model of the robot and its workspace are specified. 
                                                        The system includes the following components among 
                                                        others (Figure 2): a graphic user interface, a feedback 
                                                        generator, a path planner, a movie generator, and third-
                                                        party libraries (PQP [Larsen et al., 2000], Open Inventor  
                                                        from Silicon Graphics and MPK [Sanchez and Latombe, 
              Figure 1. ISS with the SSRMS              2001]).     A snapshot of the user interface is shown on Figure 3. configuration under the student’s actions. In any given 
It emulates the Robot workstation using three screens (for state of the task automaton the feedback generator is 
the three monitors). The keyboard is used to operate the monitoring the student’s actions, focusing on one subgoal, 
robot. In command mode, one controls the joints directly; and using a set of feedback rules to help the student. A 
in automatic mode, one moves the end-effector, small    transition to a new state (e.g., the payload has reached a 
increments at a time, relying on inverse kinematics to  predefined milestone) switches the subgoal and the 
calculate the joint rotations.                          feedback rules to those of the new state. 
                                                           Feedback rules are production rules preconditioned on 
                                                        the state variables and the state goal; the consequents are 
                                                        normally multimedia content to be displayed to the 
                                                        student, but rules can also update user-defined variables 
                                                        (e.g., to keep a record of previous state variables or to 
                                                        update a performance score for the student).  
    
    
    
    
    
    
    
    
    
    
    
           Figure 2. RomanTutor Architecture 
 
   The robot free workspace is segmented into zones 
with each zone having an associated degree of 
desirability, that is, a real number in the interval [0 1], 
depending on the task, visual cue positions, camera               Figure 3.  RomanTutor User Interface 
positions, and lighting conditions. The closer the dd is to                       
1, the more the zone is desired. Safe corridors are zones  Feedback rules can invoke automated movie 
with dd near to 1, whereas unsafe corridors are those with generation using templates of the form “illustrate correct 
dd in the neighborhood of 0. We extend the definition of move from <current-configuration> to <goal-
dd to robot configurations and paths in a straightforward configuration>”. Such a template uses safe corridor 
way.                                                    specifications and the path-planner to generate a path with 
   Students carry out robot operation tasks that involve a high degree of desirability (i.e., in a safe corridor); then, 
moving the manipulator (avoiding collision and          it determines the best sequence of camera views for the 
singularities, using the appropriate speed, switching   different parts of the zone, and uses them as virtual 
cameras as appropriate, and using the right operation   cameras to generate a movie showing the path.  
mode at each stage), berthing, or mating. These tasks 
require the student to be able to identify a corridor in a 3 The Path Planner 
free workspace for a safe operation of the robot and 
                                                        For efficient path planning, we pre-process the robot 
follow it. The student must do this based on the task, the workspace into a roadmap of collision-free robot motions 
location of cameras and visual cues, and the current 
                                                        in regions with highest desirability degree.  More 
lighting conditions. Therefore localization and navigation 
                                                        precisely, the roadmap is a graph such that every node n 
are important in robot operations.                      in the graph is labeled with its corresponding robot 
   The  feedback generator periodically checks the 
                                                        configuration n.q and its degree of desirability n.dd, 
current state to trigger feedback to the student, using rules 
                                                        which is the average of dd of zones overlapping with n.q. 
that are preconditioned on the current state information An edge (n,n') connecting two nodes is also assigned a dd 
and the current goal. These are “teaching” expert rules 
                                                        equal to the average of dd of configurations in the path-
and can be as efficient as the available teaching expertise 
                                                        segment (n.q,n'.q). The dd of a path (i.e., a sequence of 
allows. The feedback generator also changes the lighting nodes) is an average of dd of its edges.  
conditions based upon specification rules in the current 
                                                           Following probabilistic roadmap methods (PRM) 
state. Feedback rules, lighting rules and goals are 
                                                        [Sanchez and Latombe, 2001], we build the roadmap by 
structured into a task automaton.                       picking robot configurations probabilistically, with a 
   A task automaton is a state transition system that 
                                                        probability that is biased by the density of obstacles. A 
abstracts the evolution of the simulated system 
                                                        path is then a sequence of collision free edges in the roadmap, connecting the initial and goal configuration.       which is the heuristic used in traditional PRM 
Following the Anytime Dynamic A* (AD*) approach               approaches to guaranty the diffusion of nodes and 
[Likhachev et al, 2005], to get new paths when the            to accelerate the search for a path [Sanchez and 
conditions defining safe zones have dynamically changed,      Latombe, 2001]. As ß approaches 1, the choice of 
we can quickly re-plan by exploiting the previous             a node to be expanded from OPEN will rather 
roadmap. On the other hand, paths are computed through        depend on its estimated distance to the goal. In this 
incremental improvements so the planner can be stopped        case we are seeking optimality rather than speed. 
at anytime to provide a collision-free path and the more   ·  To increase the resolution of the roadmap, a new 
time it is given, the better the path optimizes moves         predecessor is randomly generated within a small 
through desirable zones. Therefore, our planner is a          neighborhood radius (that is, the radius is fixed 
combination of the traditional PRM approach [Sanchez          empirically based on the density of obstacles in the 
and Latombe, 2001] and AD* [Likhachev et al, 2005] and        workspace) and added to the list of successors in 
it is flexible in that it can into account zones with degrees the roadmap generated so far. The entire list 
of desirability. We call it Flexible Anytime Dynamic          predecessors is returned. 
PRM (FADPRM).  
                                                           ·  Collision is delayed: detection of collisions on the 
   More precisely, FADPRM works as follows. The 
                                                              edges between the current node and its 
input is: an initial configuration, a goal configuration, a 
3D model of obstacles in the workspace, a 3D                  predecessors is delayed until a candidate solution 
                                                              is found; if there is a collision, we backtrack. 
specification of zones with corresponding dd, and a 3D 
                                                              Collisions that have already been detected are 
model of the robot. Given this input: 
                                                              stored in the roadmap to avoid doing them again. 
   ·  To find a path connecting the input and goal 
                                                           ·  The robot may start executing the first path found. 
      configuration, we search backward from the goal 
      towards the initial (current) robot configuration.   ·  Concurrently, the path continues being improved 
      Backward instead of forward search is done              by re-planning with an increased value of ß.   
      because the robot moves, hence its current           ·  Changes in the environment (moving obstacles or 
      configuration, is not necessarily the initial           changes in dd for zones) cause updates of the 
      configuration; we want to re-compute a path to the      roadmap and re-planning. 
      same goal when the environment changes before 
      the goal is reached.                              4   Conclusion  
   ·  A probabilistic queue OPEN contains nodes of the 
                                                        RomanTutor's potential benefits to future training 
      frontier of the current roadmap (i.e., nodes are 
                                                        strategies are (1) the simulation of complex tasks at a low 
      expanded because they are new or because they     cost (e.g., using inexpensive simulation equipment and 
      have previously been expanded but are no longer 
                                                        with no risk of injuries or equipment damage) and (2) the 
      up to date w.r.t. to the desired path) and a list 
                                                        installation anywhere and anytime to provide “just in 
      CLOSED contains non frontier nodes (i.e., nodes   time” training. Crewmembers would be able to use it 
      already expanded) 
                                                        onboard of the ISS, for example, to study complex 
   ·  Search consists of repeatedly picking a node from maintenance or repair operations. For very long missions, 
      OPEN,generating its predecessors and putting the  they would be able to use it to train regularly in order to 
      new ones or out of date ones in OPEN.             maintain their skills.  
   ·  The density of a node is the number of nodes in the 
      roadmap with configurations that are a short      References 
      distance away (proximity being an empirically set 
                                                        [Sanchez and Latombe, 2001] G. Sanchez and J-C. 
      parameter, taking into account the obstacles in an 
                                                           Latombe. A single-query bi-directional probabilistic 
      application domain). The distance estimate to the 
      goal takes into account the node's dd and the        roadmap planner with lazy collision checking, In Proc. 
                                                           of 9th International Symposium on Robotics Research, 
      Euclidean distance to the goal.  
                                                           pages 403-417, 2001.  
      A node n in OPEN is selected for expansion with   [Larsen et al., 2000] E. Larsen, S. Gottschalk, M. Lin, and 
      probability proportional to                          D. Manocha. Fast Distance Queries using Rectangular 
      (1-ß) / density(n) + ß * goal-distance-estimate(n)   Swept Sphere Volumes. In      Proc. of IEEE 
       with 0 £ ß £ 1.                                     International Conference on Robotics and 
                                                           Automation, 4:24-28, 2000.  
      This equation implements a balance between fast-   [Likhachev et al, 2005] M. Likhachev, D. Ferguson, A. 
      solution search and best-solution search by          Stentz, and S. Thrun. Anytime Dynamic A* : An 
      choosing different values for ß. With ß near to 0,   Anytime Replanning Algorithme. In    Proc. of 
      the choice of a node to be expanded from OPEN        International Conference on Automated Planning and 
      depends only on the density around it. That is,      Scheduling, June 2005. 
      nodes with lower density will be chosen first,     