             Automatic Veriﬁcation of Knowledge and Time with NuSMV

         Alessio Lomuscio∗                 Charles Pecheur†                 Franco Raimondi‡
        Dept. of Computing                    Dept. INGI                Dept. of Computer Science
    Imperial College London, UK     Univ. cath. de Louvain, Belgium      Univ. College London, UK
    A.Lomuscio@imperial.ac.uk        charles.pecheur@uclouvain.be         f.raimondi@cs.ucl.ac.uk


                    Abstract                          2002; Gammie and van der Meyden, 2004; Raimondi and Lo-
                                                      muscio, 2005; Penczek and Lomuscio, 2003]. These efforts
    We show that the problem of model checking multi- are strictly related to the recent shift of attention from theo-
    dimensional modal logics can be reduced to the    rem proving to model checking as suggested, among others,
    problem of model checking ARCTL, an extension     in [Halpern and Vardi, 1991].
    of the temporal logic CTL with action labels and    This article intends to make a contribution in this line by
    operators to reason about actions. In particular, proposing an efﬁcient model checking technique for verifying
    we introduce a methodology for model checking a   CTLK (an epistemic logic on branching time [Penczek and
    temporal-epistemic logic by building upon an ex-  Lomuscio, 2003]) based on NuSMV [Cimatti et al., 2002],a
    tension of the model checker NuSMV that enables   mainstream model checker for temporal logic. Speciﬁcally
    the veriﬁcation of ARCTL. We brieﬂy present the   the present article makes the following points. First, it is
    implementation and report experimental results for shown that the model checking of CTLK can be (automat-
    the veriﬁcation of a typical security protocol in- ically) rephrased as the one of model checking the action-
    volving temporal-epistemic properties: the proto- based temporal logic ARCTL [Pecheur and Raimondi, 2006].
    col of the dining cryptographers.                 Second, we present an automatic translator from an SMV-like
                                                      language for a semantics of MAS for the extension above.
1  Introduction                                       The main beneﬁts of this proposal against the current state-
                                                      of-the-art lies in the efﬁciency of the approach which we try
Epistemic logic [Fagin et al., 1995; Meyer and Hoek, 1995] to demonstrate by discussing experimental results.
has traditionally played an important role in Artiﬁcial Intel-
ligence (AI). Not only does epistemic logic provide a formal 2 Preliminaries
basis for reasoning about states of knowledge in automatic We summarise the formalism of interpreted systems in Sec-
reasoners but it can also be seen as a formal speciﬁcation tion 2.1, a formalism to reason about time and knowledge in
language to reason about artiﬁcial agents. Indeed, epistemic a system of agents. In Section 2.2 we discuss the problem of
concepts are particularly appropriate in multi-agent systems model checking using NuSMV.
(MAS) as knowledge constitutes the basis for rational ac-
tion. In this line of work typically one considers the epis- 2.1 Interpreted systems and CTLK
temic modal logic S5n combined with a temporal logic for The formalism of interpreted systems, introduced in [Fagin et
branching time or linear time interpreted on computationally al., 1995], provides a formal framework to reason about time
grounded semantics [Wooldridge, 2000] such as the one of in- and knowledge in a system of agents. Let Σ be a set of n
                                                             Σ={1         }
terpreted systems [Fagin et al., 1995], or a suitable variation agents: ,...,n . A set of local states Li and a set
of it [Wooldridge and Lomuscio, 2000].                of actions Acti is associated to each agent i, together with a
                                                                :   →  2Acti
  While much attention in the 80s and 90s focused on prov- protocol Pi Li  assigning a list of enabled actions to
ing meta-logical results (notably completeness and computa- each local state. The local states of an agent change according
                                                                                  :   ×     ×      →
tional complexity) for various temporal and epistemic combi- to a local evolution function ti Li LE Act Li,
                                                                                                       Σ
nations [Halpern and Moses, 1992; Meyden, 1994; Meyden where LE is the set of local states of a special agent in
                                                                              =      ×    ×
and Wong, 2003], considerable attention has been given in (the environment), and Act Act1 ... Actn.Theset
                                                        =    ×    ×
the past few years to the problem of devising model check- S L1 ... Ln is called the set of global states. Given a
ing techniques for these formalisms [Hoek and Wooldridge, set of initial global states I ⊆ S,thesetG ⊆ S representing
                                                      the set of reachable states is generated by the evolution of
  ∗
   The  author acknowledges support from EPSRC grant  I and in accordance with the protocol and the agents’ local
GR/S49353.                                            evolution functions1. Given a set of atomic propositions AP
  †With RIACS at NASA Ames while performing this work.
  ‡With MCT at NASA Ames while performing this work. The 1The system evolves synchronously, i.e, at each time step all the
author acknowledges support from EPSRC grant CNA/04/04. agents perform a move.

                                                IJCAI-07
                                                  1384and an interpretation V ⊆ S × AP ,aninterpreted system is logics, with the aim of verifying knowledge-based and agent-
a tuple                                             based systems. Two main streams can be identiﬁed in the
              =  (            )
           IS     Li,Acti,Pi,ti i∈Σ ,I,V              recent literature:
  The logic CTLK combines the traditional AI epistemic  1. Dedicated tools.  Works along this line include
logic S5n with the temporal logic CTL. Speciﬁcally, the syn- the model checker MCK (Model Checking Knowl-
tax of CTLK is deﬁned as follows:                         edge, [Gammie and van der Meyden, 2004]), imple-
   ::=  |¬   |  ∨  |      |     |  [    ] |               menting the veriﬁcation of certain classes of interpreted
 ϕ     p   ϕ  ϕ   ϕ  EXϕ   EGϕ    E ϕUϕ    Kiϕ  (1)       systems.  Verics [Nabialek et al., 2004] is a model
                                                          checker for MAS described using networks of timed au-
where Kiϕ is read as “agent i knows ϕ” and the CTL opera-
tors have the standard meaning — for example, EGϕ is read tomata. MCMAS  [Raimondi and Lomuscio, 2005] is an
as “there exists a path where ϕ holds forever”. Other derived OBDD-based model checker for MAS described in in-
operators are deﬁned in a standard way (see e.g. [Clarke et terpreted systems.
al., 1999; Fagin et al., 1995]). To evaluate CTLK formulae, 2. Extensions (and translations) to existing tools. [Hoek
                  =(         ∼      ∼    )
a Kripke model MIS   W, I, Rt, 1,..., n,V  is associ-     and Wooldridge, 2002] propose the use of local propo-
ated to a given interpreted system IS, as follows: W is the sitions to reduce the problem of model checking
set G of reachable states, I ⊆ W is the set of initial states, knowledge and time to the veriﬁcation of a temporal-
                      ⊆    ×
the temporal relation Rt W   W   is obtained using the    only model.   [Wooldridge et al., 2002] deﬁne the
protocols Pi and the evolutions functions ti, the epistemic re- MABLE language, and they show how the veriﬁca-
      ∼  ⊆    ×          ∈ Σ
lations i  W     W ,fori     , are deﬁned by checking     tion of this language can be reduced to the veriﬁcation
the equality of the i-th local component of two global states of PROMELA code (the input language of the model
    (        ) ∼  (       )    =   
(i.e., l1,...,ln i l1,...,ln iff li li), and V is the     checker SPIN [Holzmann, 1997]). Similarly, [Bordini
evaluation relation appearing in IS2.                     et al., 2003] introduce the language AgentSpeak(F), and
  The formulae deﬁned by (1) are interpreted in MIS in a  they present a translation into PROMELA code.
standard way: we refer to [Clarke et al., 1999; Fagin et al.,
1995; Penczek and Lomuscio, 2003] for the formal deﬁnition Experimental results from the papers cited above show
of M |= ϕ,where|= is the standard satisfaction relation. that, on average, purpose-built tools can handle larger exam-
                                                      ples, and that trying to use existing tools often requires man-
2.2  Model checking using NuSMV                       ual intervention. We show below this is not necessarily the
                                                      case. In the remainder of this paper our aim is to introduce
Given a Kripke model M and a formula ϕ, model checking is
                                                 |=   a fully automated methodology that builds upon an existing
deﬁned as the problem of establishing whether or not M tool (NuSMV) and show that it performs comparably or bet-
ϕ. In this approach M represents the system to be checked ter than similar approaches.
and ϕ the speciﬁcation of the system. In the last ﬁfteen years
techniques and tools have been developed to perform the veri-
ﬁcation task in an automatic way, mainly for temporal models 4 Model checking CTLK in NuSMV
and temporal speciﬁcations. NuSMV [Cimatti et al., 2002] is This section introduces the logic ARCTL (Action-Restricted
a mature model checker for temporal logics and it has been CTL) and a proposed extension to NuSMV thereby enabling
employed in the veriﬁcation of a number of examples. Other the veriﬁcation of ARCTL operators. In Section 4.2 we show
very successful model checkers exist, notably Spin [Holz- how the problem of model checking for CTLK can be re-
mann, 1997],Verics[Nabialek et al., 2004],etc.        duced to the problem of model checking for ARCTL, thereby
  NuSMV has a dedicated modelling language (the SMV   permitting the veriﬁcation of CTLK by using NuSMV. In ad-
language), which permits the deﬁnition of the temporal model dition, in Section 4.3 we present an SMV-like language for
in an expressive, compact and modular way. NuSMV avoids interpreted systems and its translation into SMV code.
building or exploring the state space corresponding to its
models explicitly; instead, NuSMV applies symbolic tech- 4.1 The logic ARCTL
niques based on ordered binary decision diagrams (OBDDs) ThelogicARCTL[Pecheur and Raimondi, 2006] extends
or propositional satisﬁability (SAT) solvers to efﬁciently per- the logic CTL by allowing quantiﬁcation over action labelled
form veriﬁcation over large state spaces.             paths. More in detail, given a set of atomic propositions AP
  NuSMV is a command line tool available for most operat- and a set of atomic actions AA, the syntax of ARCTL is de-
ing systems, and its source code is available under the terms ﬁned as:
of the GNU General Public License (GPL).
                                                             ϕ  ::=  p |¬ϕ | ϕ ∨ ϕ | EαXϕ | AαXϕ |

3  Model checking MAS: state of the art                              Eα[ϕUϕ]  | Aα[ϕUϕ]               (2)
Recently, different approaches have been proposed to extend  α  ::=  b |¬α | α ∨ α                    (3)
model checking techniques from temporal logics to richer
                                                      where ϕ and α are state and action formulae and p ∈ AP, b ∈
  2Note that W is, by deﬁnition, the reachable state space, i.e. AA are atomic propositions over states and actions, respec-
it only contains states that are reachable from I through Rt.This tively. Similarly to CTL, other temporal operators can be de-
condition is crucial for the proper interpretation of ∼i and Kiϕ. rived in a standard way.

                                                IJCAI-07
                                                  1385  A  model for ARCTL   is a tuple of the form M  =                     Agentmodel(xtd.NuSMV)
(S, S0,A,T,VP ,VA),whereS is a set of states, S0 ⊆ S is a                  CTLKspecs
set of initial states, A is a set of actions, T ⊆ S × A × S
is a transition relation (notice the dependence on actions),
           AP                                                              M4translator
VP : S →  2   is an interpretation for atomic propositions,
               AA
and VA : A →  2   is an interpretation for atomic actions.
Given a model M =(S, S0,T,VP ,VA),theα-restriction of                      NuSMVmodel
M, denoted by Mα, is a model Mα =(S, S0,Tα,VP ,VA),                        ARCTLspecs
                                         
where Tα is a transition relation such that (s, a, s ) ∈ Tα iff
(    ) ∈        |=         |=
 s, a, s  T and a   α (where   is the natural extension                     NuSMV
of VA to propositional formulae α). We refer to [Pecheur and             (w/ARCTLsupport)
Raimondi, 2006] for further details.
  For model checking purposes, we have extended NuSMV
to support the veriﬁcation of ARCTL formulae. We used                  TRUE        FALSE
                                                                                 counterex.
NuSMV existing “input” variables to model ARCTL actions.
In particular, we have modiﬁed the syntax of the formulae
accepted by NuSMV as follows:                           Figure 1: Veriﬁcation work ﬂow for interpreted systems
 ctlexpr  ::= ...  (existing CTL forms)
                                                        The translation of a temporal-epistemic formula into an
              EAX(simpleexpr)ctlexpr
                                                      ARCTL formula is inductively deﬁned as follows:
              EAG(simpleexpr)ctlexpr
                                                        • F (p)=p,ifp  is a propositional formula.
              EA(simpleexpr)[ctlexpr   U ctlexpr]
                                                        • F (EXϕ)=ERunXϕ;       F (E[ϕUψ]) =  ERun[ϕUψ];
                                                            (    )=             (   )=
where simpleexpr is a conditional expression, further re- F  EGϕ     ERunGϕ;  F Kiϕ     AAgti Xϕ.
stricted to contain only input variables. For example,
                                        [    ]        In other words we use the labels Run (Agti, respectively)
EA(a)[p U q]   is the concrete syntax for Ea pUq .Ad- to denote a temporal relation (the epistemic relation for
ditionally, we have implemented extensions to the NuSMV agent i, respectively). This translation allows us to model
code base to enable the veriﬁcation of these operators (the check CTLK formulas by model checking their translations
details of these modiﬁcations are beyond the scope of this in ARCTL. Clearly a similar approach can be used for more
paper, we refer to [Pecheur and Raimondi, 2006] for further complex modal logics.
details).                                               The translation from an interpreted system IS to the
                                                      ARCTL model   F (MIS) is performed automatically by a
4.2  Reducing CTLK to ARCTL                           translator we have implemented (see next section).
The problem of model checking CTLK (see Section 2.1)
can be reduced to the problem of model checking ARCTL. 4.3 An SMV-like language for interpreted systems
Speciﬁcally, given a CTLK model MK and a CTLK for-    We have designed extensions of the SMV language for the de-
                                         =   (    )
mula ϕK , we can deﬁne an ARCTL model M     F MK      scription of interpreted systems and CTLK formulae. These
                        (   )               |=
andanARCTLformulaF       ϕK   such that MK     ϕK     extensions can be translated to into a standard SMV model
     (   )  |=   (   )       Σ={1           }
iff F MK       F  ϕK  .Let            ,...,n  be a    and ARCTL formulae. Concretely, the extensions are deﬁned
                         =(          {∼ }      )
set of agents, and let MK    W, I, Rt, i i∈Σ,V  be    as a library of M4 macros4. The work ﬂow needed to per-
a model associated to some interpreted system IS =  form veriﬁcation of an interpreted system is summarised in
 (            )                        (    )
  Li,Acti,Pi,ti i∈Σ ,I,V . The model  F MK    is an   Figure 1. Notice that the only manual intervention is the pro-
ARCTL model  M  =(S, S0,A,T,VP ,VA) such that         vision of the input ﬁle describing the problem to be veriﬁed.
  • S = W  and S0 = I;                                  In  this language,  an  agent  <name>    is asso-
                                                      ciated  with  the  SMV    variables <v1>,..,<vn>
  •             =   {                  }
    the set AA       Run, Agt1,...,Agtn  contains a   that deﬁne   its local state, through a   declaration
    proposition Run to label temporal transitions (deﬁned AGENT(<name>,<v1>,..,<vn>).      The actions of
    by Rt)andn  propositions Agti (one for each agent) to each agent are represented as input variables (IVAR). The
                                           ∼
    label epistemic equivalence steps (deﬁned by i), and protocol of each agent is described as a relation between
                   2AA
    the action set A is ;                             its local state and action variables (within an SMV TRANS
  • the transition relation T combines the temporal transi- statement). The transition function is encoded using a
    tion Rt and the epistemic relations {∼i}i∈Σ in the fol- new TTRANS statement, and initial conditions using a new
    lowing way: for states s, s ∈ W ,(i)(s, {Run},s) ∈ T TINIT statement. Figure 2 shows the structure of a typical
                                           
    iff sRts ; (ii) (s, {Agti},s) ∈ T iff s ∼i s ; (iii) deﬁnition of a class of agents as an SMV module (note that
                                   
    (s, {a1,...,ak},s) ∈ T iff (s, {ai},s) for all 1 ≤ i ≤ “--” starts comments in SMV, see [Cimatti et al., 2002] for
    k. 3                                              details).
  3Case (iii) is necessary for interpreting distributed knowledge 4M4 [Kernighan and Ritchie, 1977] is a general-purpose macro
operators, but this discussion is beyond the scope of this paper. processor available on most UNIX platforms.

                                                IJCAI-07
                                                  1386MODULE anAgent(args,ENV) -- an agent module
  VAR local : {...};  -- the local state              bill to be paid anonymously. One of the cryptographers might
  AGENT(me,local)     -- declare the local state      be paying for dinner, or it might have been NSA (U.S. Na-
  IVAR action : {...}; -- actions of the agent        tional Security Agency). The three cryptographers respect
  TINIT( ... );       -- initial conditions
  TRANS( action =                                     each other’s right to make an anonymous payment, but they
         case ... )   -- the agent’s protocol         wonder if NSA is paying. They resolve their uncertainty fairly
  TTRANS( NEXT(local) =
          case ... )  -- the agent’s evolution function by carrying out the following protocol:
                                                        Each cryptographer ﬂips an unbiased coin behind his
MODULE main           -- main module                  menu, between him and the cryptographer on his right, so
VAR_ENV               -- declare ENV variables
VAR alice : anAgent(args1,ENV) ; -- an agent          that only the two of them can see the outcome. Each cryptog-
   bob  : anAgent(args2,ENV) ; -- another agent       rapher then states aloud whether the two coins he can see–the
                                                      one he ﬂipped and the one his left-hand neighbour ﬂipped–fell
  Figure 2: Example of agent deﬁnition in extended SMV on the same side or on different sides. If one of the cryptogra-
                                                      phers is the payer, he states the opposite of what he sees. An
                                                      odd number of differences uttered at the table indicates that a
  Internally, the translation generates additional Boolean cryptographer is paying; an even number indicates that NSA
variables IVARS corresponding to the Run and Agti propo- is paying (assuming that dinner was paid for only once). Yet
sitions of the ARCTL model (e.g. RUN,  bob.me  and    if a cryptographer is paying, neither of the other two learns
alice.me  in the model of Fig. 2), and TTRANS statements anything from the utterances about which cryptographer it
expand to standard TRANS statements conditioned on RUN. is”
  Note that the state space of the NuSMV model is not a pri- This protocol can be extended to any number n of cryptog-
ori restricted to the (temporally) reachable states; this has to raphers greater than three. We encode the scenario by using
be imposed by the translation scheme. A state is reachable
                                                      an interpreted system by introducing n agents C1,...,Cn,
iff it can be reached from the initial states through a series of and one agent E to represent the environment (which selects
temporal steps (or, equivalently, iff there exists a reverse path the payer and the result of coin tosses at the beginning of each
from that state back to the initial set). Assuming we have ac- run, non-deterministically) [Raimondi and Lomuscio, 2005].
cess to reverse temporal transitions through some action con-
                                                        The local state of cryptographer Ci is modelled using
dition Back in our ARCTL model, and a state condition Init three variables equali, paidi, eveni, representing respec-
for initial states, the set of the (temporally) reachable states is
                                                      tively whether the coins that Ci can see are equal or different,
captured by the following ARCTL formula:
                                                      whether Ci is the payer, and whether the number of different
                                                      utterances reported is even.5 The list of actions for each cryp-
             Reachable ≡ EBackFInit
                                                      tographer includes the actions do nothing, say equal,
Since this is a temporal formula, it has to be folded into and say different, performed in compliance with the
NuSMV properties; it cannot be used in the NuSMV model description provided above. In the initial state the variables
itself. For example, the CTLK formula Kiϕ expands to the for each cryptographer are initialised to a null value, and
                     (          →   )
ARCTL formula AAgti X Reachable   ϕ  .                they are updated in the ﬁrst time step, to reﬂect the environ-
  Our library implements this scheme. In particular, the ment’s conﬁguration. At this point, each cryptographer utters
TTRANS  construct implements an encoding scheme allowing the appropriate phrase (represented by say equal or say
temporal transitions to be traversed both forwards and back- different) and the variable storing the value of “differ-
wards. On the speciﬁcation side, new operators TAX, TAG, ent” utterances (either even or odd) is appropriately updated.
etc. provide the equivalent of SMV’s built-in AX, AG,etc.,re- The key properties of this scenario [van der Meyden and
stricted to temporal transitions, and a new operator KK imple- Su, 2004] are easy to express using CTLK. For instance:
ments Kiϕ. For instance, the CTLK formula AG(Ka(p ∨q))
expressing that agent a always knows either p or q, is written
                                                          (odd ∧¬paid1)  → AX(K    1(paid2 ∨ paid3)
as TAG(KK(a,p|q)).                                                               C                    (4)
                                                                ∧¬KC1(paid2)  ∧¬KC1(paid3))
5  Example application
                                                               even → AX(KC1(¬paid2   ∧¬paid3))       (5)
In this section we model the protocol of the dining cryp-
tographers using the formalism presented in Section 2.1, in Formula (4) expresses the property that, if the ﬁrst cryptog-
order to enable its veriﬁcation using the methodology pre- rapher did not pay for the dinner and there is an odd number
sented in Section 4.2. The protocol was introduced by Chaum of utterances, then, upon update of his local state, the ﬁrst
in [Chaum, 1988], and was modelled using agents by various cryptographer knows that someone of the remaining cryptog-
authors [van der Meyden and Su, 2004; Raimondi and Lo- raphers paid for the dinner, but the ﬁrst cryptographer does
muscio, 2005; Kacprzak et al., 2006]. The aim of this proto- not know who the payer is. Formula (5) expresses the prop-
col is to allow the anonymous broadcasting of messages, and erty that if the number of utterances is even, the ﬁrst cryptog-
it is usually introduced using the following scenario (wording raphers knows that nobody paid for the dinner.
from [Chaum, 1988]):                                     5We refer to [Kacprzak et al., 2006] for other possible encodings
  “Three cryptographers are sitting down to dinner at their of the same protocol. Our choice here is motivated by the need of
favorite three-star restaurant. Their waiter informs them that comparing our experimental results with the ones in [Raimondi and
arrangements have been made with the maitre d’hotel for the Lomuscio, 2005; Kacprzak et al., 2006].

                                                IJCAI-07
                                                  1387    N. crypt Bool vars NUSMV    MCMAS   VERICS        performance is due to the optimisation techniques imple-
      3        61       0.34s    0.67s    84s         mented in NuSMV (such as on-the-ﬂy model checking and
      4        78       0.46s    2.09s   730s         caching). Obviously, experimental results depend on the ex-
      5        99       0.86s    8.91s   1h5m         amples tested and it is not appropriate to draw ﬁnal conclu-
      6        116      2.95s    19.5s   8h32m
      7        137     1m15s    2m29s     N/A         sions on one example only. Additionally, we would expect
      8        156     6m34s    2h59m     N/A         VERICS to outperform the approach presented here when try-
      9        175     49m5s     N/A      N/A         ing to falsify formulas on very large state spaces. Neverthe-
                                                      less, we think the discussion above shows that the technique
                                                      presented here can signiﬁcantly complement the other model
         Table 1: Average experimental results.       checkers in many instances.


                                                          100000
  We have encoded this scenario using the language pre-

sented in Section 4.3 and we have been able to verify the  10000
example for up to nine cryptographers6. Experimental results
are reported in the next section.                          1000

                                                                                                   NuSMV
                                                            100                                    mcmas
                                                                                                   Verics
6  Experimental results                                   Time  (s)
Table 1 reports the time results obtained in the veriﬁcation of 10
the example presented in the previous section, as a function
                                                             1
of the number of cryptographers (ﬁrst column). The third

column reports the time required for the veriﬁcation of the 0.1
                                                             012345678910
formulae 4 and 5 (appropriately translated into ARCTL for-                   N. Crypt
mulae). The second column reports the number of Boolean
                                                           Figure 3: Comparison of the experimental results.
variables required to encode the example (see [Clarke et al.,
1999] for more details on this technique), and provides an es-
timate for the size of the model; for instance, 137 Boolean We could not compare our methodology to other existing
variables are required to encode an example with 7 cryp- approaches based on existing model checkers (see Section 3).
tographers, corresponding to a maximal state space of size Indeed, such approaches often require a manual intervention
2137 ≈ 1041.                                          in the translation from their speciﬁc programming language
  The fourth and ﬁfth columns report the time results ob- into the programming language of the temporal model check-
tained in the veriﬁcation of the protocol of the dining cryp- ers, and this is not feasible for large examples such as the one
tographers using the model checkers MCMAS and Verics, as considered here.
reported in [Raimondi and Lomuscio, 2005; Kacprzak et al.,
2006], for the veriﬁcation of the same formulae mentioned 7Conclusion
above, as a function of the number of cryptographers. No-
                                                      In this paper we have presented a novel technique for model
tice that, in the case of MCMAS, the veriﬁcation time does
                                                      checking CTLK that relies on the translation of this logic into
not depend on the formula being veriﬁed and it is usually a
                                                      action-based temporal logic and model checking of this logic
fraction of the time spent in reading and parsing the model
                                                      with NuSMV. The approach is sound and complete and our
(the opposite is true for NuSMV, because of different imple-
                                                      implementation shows experimental results that are in line
mentation choices). The last column reports the time results
                                                      with or better than existing specialised tools.
for Verics. Differently from the previous two cases, Verics’s
                                                        The use of macros for extending the NuSMV language has
results are based on an implementation of Bounded Model
                                                      allowed for easy prototyping but limits the syntactic ﬂexibil-
Checking for CTLK. [Penczek and Lomuscio, 2003].Dueto
                                                      ity. A more natural syntax could be supported with more in-
this, Verics’s performance for this two formulae is worse than
                                                      volved translation facilities. Further planned work includes
the other two model checkers, but Verics is normally capa-
                                                      investigating optimisation of the veriﬁcation scheme, both
ble of ﬁnding counterexamples for false formulae effectively:
                                                      at the level of the translation from CTLK to ARCTL and
in [Kacprzak et al., 2006] it is shown that certain false formu-
                                                      through additional extensions or optimizations of NuSMV it-
lae can be veriﬁed in scenarios with up to 100 cryptographers.
                                                      self. Moreover, we limited our analysis to dining cryptogra-
Neither MCMAS nor the technique of this article can handle
                                                      phers because this is the only scenario for which experimental
this magnitude of state spaces.
                                                      results are available in the literature. In future work we cer-
6.1  Discussion                                       tainly plan to use the technique and tool presented here to
                                                      investigate more realistic scenarios.
A comparison of the results obtained with the three model
                                                        Another important issue to be addressed is the handling of
checkers is reported in Figure 3. Clearly for the formu-
                                                      witness traces generated by NuSMV, which need to be formu-
lae considered here the approach presented here performs
                                                      lated back in terms of the original CTLK model. We would
moderately better than MCMAS and VERICS. The better
                                                      also like to investigate using NuSMV’s SAT-based bounded
  6The source code for these examples is available from model checking capabilities rather than the current OBDD-
http://www.cs.ucl.ac.uk/staff/f.raimondi/dincrypt-code.zip. based approach. Given the limitation of NuSMV, this requires

                                                IJCAI-07
                                                  1388