                  Hypertree-decomposition           via Branch-decomposition∗

                                             Marko   Samer
           Institute of Information Systems (DBAI), Vienna  University of Technology,  Austria
                                   samer@dbai.tuwien.ac.at

                                                              r   r                   r        r
                                                                 ¢  r                          ¢  r
                    Abstract                                  S   ¨                   S  v      ¨
                                                             r SH¢¨r       =⇒       r  Sprp p1p p p p p p p ¢r¨H
                                                               B Hr                       v2B Hr
    Hypertree-decomposition is the most general ap-           r Br                   r       Br
    proach in the literature for identifying tractable
    computation problems encoded as hypergraphs.
    We show how  the heuristic branch-decomposition                 Figure 1: Splitting a vertex
    approach for ordinary graphs of [Cook and Sey-
             ]
    mour, 2003 can be used for the heuristic construc- 2002] for the formal deﬁnition of a hypertree-decomposition.
    tion of hypertree-decompositions.                 The width of a hypertree-decomposition (T, χ, λ) is given
                                                      by maxp∈vertices(T) |λ(p)|, and the hypertree-width of a
1  Introduction                                       hypergraph is the minimum width over all its hypertree-
                                                      decompositions.
Many NP-complete problems (e.g., the constraint satisfac- A branch-decomposition of a hypergraph H is a tuple
tion problem CSP, the homomorphism problem HOM, the   (T, τ), where T = (V, E) is a tree having |edges(H)| leaves
Boolean conjunctive query problem BCQ, etc.) can be de- and in which every non-leaf vertex has degree three, and τ is
scribed by hypergraphs in a natural way. It was shown by a bijection from the set of leaves of T to edges(H). The order
[Gottlob et al., 2002] that in analogy to tree-width of graphs, of an edge e ∈ E is the number of vertices v ∈ var(H) such
hypertree-width of hypergraphs is an appropriate measure for
                                                      that there are leaves l1 and l2 of T in different components
the cyclicity and therefore the tractability of the correspond-
                                                      of T when removing e with v ∈ τ(l1) ∩ τ(l2). The width
ing computation problems. In particular, they have shown of a branch-decomposition (T, τ) is the maximum order of
that NP-complete problems become polynomially solvable the edges of T, and the branch-width of a hypergraph is the
and even highly parallelizable when restricted to instances minimum width over all its branch-decompositions.
with bounded hypertree-width. Moreover, it was shown
by [Gottlob et al., 2000] that hypertree-decomposition and
the corresponding measure of hypertree-width generalizes all 3 The Branch-decomposition Heuristic
other tractability measures for hypergraphs in the literature. In this section, we summarize the basic steps of the heuris-
  Recent research focuses on heuristic approaches for fast tic branch-decomposition approach of [Cook and Seymour,
hypertree-decomposition with small width. In this presenta- 2003]. Note that this approach was developed for ordinary
tion, we show how the heuristic approach of [Cook and Sey- graphs. Its starting point is the construction of the initial data
mour, 2003] for branch-decomposition (of ordinary graphs) structure which is a star as shown in Fig. 1. This is done in
can be used for heuristic hypertree-decomposition.    such a way that for each edge in the graph there exists exactly
                                                      one edge in the star. This edge is then labeled with the set
2  Preliminaries                                      of vertices of the corresponding edge in the graph (i.e., each
                                                      edge is labeled with exactly two vertices). Afterwards, the
A hypergraph H is a tuple (V, E), where V is a set of vertices
                                                      vertices of the star are successively split (cf. Fig. 1) accord-
(variables) and E ⊆ ℘(V)\{∅} is a set of hyperedges. We
                                                      ing to the decomposition rules below. In each step, the two
deﬁne var(H) = V and edges(H) = E. A  hypertree for a
                                                      vertices v and v resulting from the splitting are connected
hypergraph H is a triple (T, χ, λ), where T = (V, E) is a tree 1    2
                                                      by a new edge which is labeled by the intersection of the set of
and χ : V → var(H) and λ : V →  edges(H) are labeling
                                                      vertices labeling the edges incident with and the set of ver-
functions.                                                                              v1
                                                      tices labeling the edges incident with v . This process stops
  A hypertree-decomposition of a hypergraph H is a hyper-                              2
                                                      when all non-leaf vertices have degree three; the resulting tree
tree (T, χ, λ) for H satisfying four conditions. Due to space
                                                      is then a branch-decomposition of the underlying graph.
restrictions, we refer the interested reader to [Gottlob et al.,
                                                        The decomposition rules can be divided into two classes:
  ∗This work was supported by the Austrian Science Fund (FWF) (i) the application of “safe splits” and (ii) the application of
project P17222-N04.                                   the Eigenvector heuristic [Alon, 1986]. Safe splits divide the                                                        Another approach we investigate is dual to the above one
      A     1    B                              1
                                A          B          in the sense that we obtain a hypertree where the λ-labels are
                               2             3        given and appropriate χ-labels have to be set. To this aim,
       2         3      =⇒
  C         4                         C               let us ﬁrst introduce the dual hypergraph of a hypergraph
                                D          E    4     as exempliﬁed in Fig. 2. The dual hypergraph is simply ob-
    D              E                                  tained by swapping the roles of hyperedges and vertices. Our
       5         6              5           6
  F                                   F               procedure is then to (i) construct a branch-decomposition of
                                                      the dual hypergraph by using the above heuristic, (ii) trans-
                                                      form this branch-decomposition into a tree-decomposition,
     Figure 2: A hypergraph and its dual hypergraph   and (iii) interpret the labels of this tree-decomposition as λ-
                                                      labels of a hypertree and set the χ-labels appropriately in
graph in such a way that it remains extendible, i.e., there is a straight-forward way. The resulting hypertree is then a
some way to (repeatedly) divide the subgraphs to obtain a hypertree-decomposition of the original hypergraph.
branch-decomposition of width equal to the branch-width of The attentive reader may have noticed that there are two
the original graph. In other words, nothing bad can happen problems with the latter approach: First, the branch-width
when applying safe splits. There are three kinds of safe splits and therefore also the hypertree-width is at least the cardinal-
presented by [Cook and Seymour, 2003]: (i) pushing, (ii) 2- ity of the largest edge in the dual hypergraph which is equal to
separations, and (iii) 3-separations. At each stage, these safe the maximum number of hyperedges having a common vertex
splits are applied as long as possible. If none of them is ap- in the original hypergraph. Second, since the λ-labels satisfy
plicable, the Eigenvector heuristic is used.          the conditions of a tree-decomposition by construction, the
                                                      hypertree-width may be larger than necessary. However, by
                                                      introducing heuristic pre- and post-processing steps, we are
4  Application  to Hypertree-decomposition            able to overcome both problems.
We will now show how  the branch-decomposition heuris-
tic described in Section 3 can be used for hypertree- 5   Conclusion
decomposition. Recall that this heuristic was developed for We have tested our approach on hypergraphs represent-
ordinary graphs and not for hypergraphs. Thus, our ﬁrst ing adder and bridge circuits connected in a line. For all
step is to show that the safe splits as well as the Eigenvec- instances of such adder and bridge hypergraphs, we ob-
tor heuristic are also applicable to hypergraphs.     tained a hypertree-decomposition of almost optimal width
  To this aim, recall that the new edge introduced at each within a few seconds. Natural future work will be a full
vertex splitting (cf. Fig. 1) is labeled with the intersection of implementation of our approach, the investigation of fur-
two sets of vertices as described above. In general, however, ther improvements, and a systematic comparison with other
this intersection may contain more than two vertices. Thus, hypertree-decomposition heuristics. Moreover, an implemen-
such newly introduced edges represent hyperedges, i.e., the tation of our second approach in such a way that the tree-
data structure underlying the original branch-decomposition decomposition of the dual hypergraph is directly constructed
approach starts as an ordinary graph and evolves to a hyper- (e.g., by bucket elimination) without the intermediate-step of
graph during the decomposition process. This can be seen as a branch-decomposition seems to be promising.
an intuitive justiﬁcation for the applicability of the branch-
decomposition heuristic to hypergraphs. It is easy to verify References
that this intuition holds indeed true.
                                       1              [Alon, 1986] N. Alon. Eigenvalues and expanders. Combi-
  Now, note that given a tree-decomposition of a hyper-  natorica, 6(2):83–96, 1986.
graph of width k, it is possible to construct a branch-
decomposition of width at most k + 1, and given a branch- [Cook and Seymour, 2003] W. Cook and P. Seymour. Tour
decomposition of a hypergraph of width k, it is possible merging via branch-decomposition. INFORMS Journal on
to construct a tree-decomposition of width at most 3k/2  Computing, 15(3):233–248, 2003.
[Robertson and Seymour, 1991]. Thus, having small tree- [Gottlob et al., 2000] G. Gottlob, N. Leone, and F. Scarcello.
width is equivalent to having small branch-width.        A comparison of structural CSP decomposition methods.
  Hence,  a simple  approach to obtain a  hypertree-     Artiﬁcial Intelligence, 124(2):243–282, 2000.
decomposition via branch-decomposition is to (i) construct [Gottlob et al., 2002] G. Gottlob, N. Leone, and F. Scarcello.
a branch-decomposition of the given hypergraph by using  Hypertree decompositions and tractable queries. Journal
the above heuristic, (ii) transform this branch-decomposition of Computer and System Sciences, 64(3):579–627, 2002.
into a tree-decomposition, and, in analogy to [McMahan,
                                                      [McMahan, 2004] B. McMahan.   Bucket eliminiation and
2004], (iii) apply set covering heuristics in order to obtain
                                                         hypertree decompositions. Implementation report, Insti-
a hypertree-decomposition. In particular, set covering is used
                                                         tute of Information Systems (DBAI), TU Vienna, 2004.
to obtain appropriate λ-labels based on the χ-labels given by
the tree-decomposition.                               [Robertson and Seymour, 1991] N. Robertson and P. Sey-
                                                         mour.    Graph  minors. X.  Obstructions to tree-
  1Intuitively, a tree-decomposition is a hypertree-decomposition decomposition. Journal of Combinatorial Theory, Se-
without the labeling function λ.                         ries B, 52:153–190, 1991.