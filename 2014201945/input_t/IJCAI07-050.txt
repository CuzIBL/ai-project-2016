                              Chronicle Recognition Improvement
                        Using Temporal Focusing and Hierarchization
                              Christophe Dousson and Pierre Le Maigat
                                         France Telecom R&D,
                                        2 avenue Pierre Marzin,
                                     22307 Lannion cedex, France.
                  {christophe.dousson,pierre.lemaigat}@orange-ftgroup.com

                    Abstract                          (like the Event Manager of ILOG/JRules based on a modi-
                                                      ﬁed RETE algorithm for processing time constraints [Berstel,
    This article falls under the problem of the sym-  2002]) or separate the processing of temporal data from the
    bolic monitoring of real-time complex systems or  others like in [Dousson, 2002]. This article mainly deals with
    of video interpretation systems. Among the vari-  this second approach where temporal constraints are managed
    ous techniques used for the on-line monitoring, we by a constraint graph between relevant time points of the sce-
    are interested here in the temporal scenario recog- narios. There are two approaches for dealing with tempo-
    nition. In order to reduce the complexity of the  ral constraints: STRS recognizes scenarios by an analysis of
    recognition and, consequently, to improve its per- the past [Rota and Thonnat, 2000] and SPRS which performs
    formance, we explore two methods: the ﬁrst one is an analysis of scenarios that can be recognized in the future
    the focus on particular events (in practice, uncom- [Ghallab, 1996]. Two main problems in the SPRS approach
    mon ones) and the second one is the factorization of are the fact that scenarios have to be bounded in time in order
    common temporal scenarios in order to do a hierar- to avoid never expected ending scenario (in practice, when
    chical recognition. In this article, we present both working on real-time systems, it is difﬁcult to exhibit sce-
    concepts and merge them to propose a focused hi-  nario which cannot be bounded in time); and, second, that
    erarchical recognition. This approach merges and  SPRS engine has to maintain all partially scenarios which
    generalizes the two main approaches in symbolic   possibly leads to use a large amount of memory space. To
    recognition of temporal scenarios: the Store To-  partially avoid those drawbacks, the implementation of SPRS
    tally Recognized Scenarios (STRS) approach and    algorithms in [Dousson, 2002] introduces a clock and dead-
    the Store Partially Recognized Scenarios (SPRS)   lines which are used to garbage collect the pending scenarios.
    approach.                                         On the other hand, the main problem with STRS algorithms
                                                      is to maintain all previously recognized scenarios. To our
                                                      knowledge, no work has been published on how long such
1  Introduction                                       scenarios should be maintained. In addition, STRS does not
Symbolic scenario recognition arises in monitoring of dy- provide any kind of “prediction” as SPRS does.
namic systems in many areas such as telecommunications  A ﬁrst attempt to take the beneﬁts of both approaches was
networks supervision, gas turbine control, healthcare moni- made in [Vu et al., 2003]. It consists of a hierarchization of
toring or automatic video interpretation (for an overview, re- the constraint graph of the scenario. It deals only with graphs
fer to [Cordier and Dousson, 2000]).                  where all information about time constraints can be retrieved
  Such scenarios could be obtained among other things by from a path where temporal instants can be totally ordered.
experts, by automatic learning [Fessant et al., 2004; Vautier The hierarchy constructs an imbricated sequence of scenar-
et al., 2005] or by deriving a behavioral model of the system ios containing only two events at a time. The principle of the
[Guerraz and Dousson, 2004]. Due to the symbolic nature recognition is, at any instant, to instantiate elementary scenar-
of those scenarios, the engine performing the recognition is ios and when an event is integrated in a high-level scenario,
rarely directly connected to sensors. There is often (at least) looking for previously recognized elementary scenarios. The
one dedicated calculus module which transforms the “raw” purpose of this article is to generalize this method; the start-
data sent by the system into symbolic events. Typically this ing point will be an SPRS approach and the generalization
module can compute a numerical quantity and sends sym- mixes reasoning on past and future. As a byproduct, STRS
bolic events when the computed value reaches given thresh- and SPRS methods appear as two extreme kinds of the pro-
olds. In cognitive vision, this module is usually a video- pose focused hierarchical recognition.
processing which transforms images into symbolic data.  The next section presents the used SPRS approach and de-
  Often those scenarios are a combination of logical and tem- tails some aspects which are relevant to this paper. The sec-
poral constraints. In those cases, symbolic scenario recogni- tion 3 is dedicated to the temporal focusing which enables the
tion can process the scenarios uniformly as a set of constraints system to focus on uncommon events prior to others. Events

                                                IJCAI-07
                                                   324could be not only basic events coming directly from the su- Figure 2 shows the mechanism of the recognition algorithm
pervised system but aggregated indicators. So the temporal on a small example: when CRS receives f at 1, it creates the
focusing could be used in order to control the computation of new instance I1 and updates the forthcoming window of the
such indicators on particular temporal windows and to avoid node e. When a new f occurs at 3, instance I2 is created (the
useless computation. As such indicators could be themselves forthcoming windows of I1 is updated “using” a clock tick
scenarios, section 4 presents how the hierarchical recognition set at 3). When e occurs, I3 is created (from I2) and I1 is
deals with common subscenarios. Finally, we show that both destroyed as no more event e could from now be integrated
concepts could be merged and experimentally lead to good into (instance I2 is not destroyed, waiting for another poten-
improvement of performances. This will be the object of the tial e between 5 and 6). As all events of I3 are instantiated
section 5.                                            the chronicle I3 is recognized.
  We conclude in section 6 by experimentation on detect-
ing naive servers in a Reﬂected Distributed Denial of Service             f   [1,3] e    Chronicle model
(RDDoS) attack.
                                                          (f,1)          (f,3)              (e,5)   time

2  Chronicle Recognition System                        (f,1)   e,[2,4]  (f,1)   e,[3,4]    - Discarded -
Our approach is based on the chronicle recognition as pro- I1
posed in [Dousson, 2002] which falls in the ﬁeld of SPRS           I2   (f,3)   e,[4,6]    (f,3)   e,[5,6]
methods. A chronicle is given by a time constraint graph la-
                                                                                           (f,3)   (e,5)
beled by predicates.                                                Chronicle instances I3
  An instance of event is a pair (e, t) where t is the date of
the event and e is its type. When no ambiguity results, we Figure 2: Created instances of a chronicle by the incoming
sometimes do not distinguish between an event and its type. event stream (f,1)(f,3)(e, 5).
Figure 1 shows a chronicle which contains four events: the
event e (if instantiated) must occur between 1 and 3 units of
                                                                           AssertNoMore
time after an instantiation of f, the event g must occur be- 2.2 From Clock to “        ” Event.
tween 0 and 3 units of time after e and between −1 and 4 In ﬁrst implementations of chronicle recognition, a clock was
units of time after e.                               introduced in order to discard “impossible” instances when
                                                      the clock goes past one of their forthcoming windows (see
              f  [1,3]  e                             behavior of I1 in ﬁgure 2).
                             [0,3]
                                    g                   In order to take into account some jitter in data transmis-
                            [-1,4]
                        e'                            sion a possible delay δ can be taken into account. This de-
                                                      lay bounds the maximum difference observed at reception be-
                Figure 1: A chronicle.                tween two events sending at the same time by the (possibly
                                                      distributed) system. Basically, the event integration algorithm
                                                      could be written as following:
  Note that the complete formalism is based on a reiﬁed logic
(a chronicle is a conjunctive formula) and introduces also           integrate((e, t));
predicates on persistency or event absence. In this article we       setGarbageClock(t − δ)
choose to present in details the focusing from the time con-
straint graph point of view, other predicates are also taken into The main drawback is that it implies that events arrive
account but not discussed here.                       roughly in a FIFO manner (the allowed jitter is bounded by
                                                      δ): so, when the FIFO hypothesis should be relaxed (and it
2.1  Recognition Algorithms                           is often the case when the monitored system is distributed), δ
                                                      should be increased and the garbage efﬁciency decreases 3.
Let CRS (Chronicle Recognition System) denote the algo- In order to avoid this, instead of a clock, we deﬁne a new
rithm of recognition. Basically the mechanism of CRS is, input message: “AssertNoMore(e, I)”, where e is an event
at each incoming event, to try to integrate it in all the pend- type and I an extended interval. It speciﬁes to CRS that, from
ing (and partial) instances of the chronicle model and/or cre- now on, it will not receive more events of type e with an oc-
ated a new instance and calculating (using constraint propa- curence date in I. This mechanism is implemented in CRS by
gation [Dechter et al., 1991]) new forthcoming windows for managing one forthcoming window for each event type which
all the forthcoming events of each instance. An instance of is updated when receiving an “AssertNoMore” message.
a chronicle model is then a partial instantiation of this model We do not describe here how CRS deals with this asser-
and forthcoming windows fc(e) of a non-instantiated event e tion as it is very close to the previous CRS. Intuitively, all the
is the (extended1) interval where the occurrence of an event                                \
                      2                               forthcoming windows of e are reduced (fc(e) I), these win-
could lead to a recognition .                         dows are propagated according to the constraint graph of the
  1An extended interval is a disjoint union of intervals. incremental and some STRS mechanism where integration is made
  2This does not imply that, for all non instantiated events e,if by block in a backward manner.
(e, t) occurs with t ∈ fc(e) then the instance is recognized. This a 3In case of focusing, an other side effect of using clock is the
difference between SPRS mechanism where integration of events is creation of “false” instances. This will be explained in section 6.

                                                IJCAI-07
                                                   325chronicle and, if a forthcoming window becomes empty, the In addition to the recognition engine, we developed some
instance is discarded. The previous garbage collect of CRS modules (see ﬁgure 3): an Event Router which routes the
could be emulated by the following:                   events coming from the supervised system to either the en-
     integrate((e, t));                               gine or the collector; a module named Finished Level De-
     ∀ event type e, AssertNoMore(e, ] −∞,t− δ])    tector which detects when a particular instance of chronicle
                                                      has ﬁnished to integrate all events of level lesser than n, then
It illustrates that the previous clock management forces all looks at the forthcoming windows of events of level n+1and
the event types to be synchronized: in other words, if one sends them (through a “Focus” message) to the collector as a
kind of event could be widely jittered, then all event types request for events. At last, a module called No Need Window
are supposed to be the same. Notice that, as we allow Calculator, which computes for all current instances the win-
the use of extended intervals, more complex garbage man- dows where they do not need events of greater level and sends
agement could be easily implemented: it could be different this information to the collector via a “Discard” message. In
from ] −∞, clock] and non chronological: we could process, order to make the buffer management easier, the collector it-
for instance, “AssertNoMore(e, [10, 20] ∪ [30, 40])” and, then, self is split into Buffered Streams: one for each event type.
“AssertNoMore(e, [0, 10])”.
  This point of view changes slightly the manner the engine
works: the progress of time is no more driven by the observa- Incoming             Recognition
tions coming from the supervised system but by an “internal” Events                  Engine
                                                                  Event              (CRS)
control, this control could be given by the knowledge of the (e,d)(f,t)… Router
temporal behavior of the system. We will see in the next sec-
tion how this new feature is essential for an efﬁcient temporal          Finished Level     No Need Window 
                                                                           Detector           Calculator
focusing.
                                                                   (f,t)                 Discard(f,]-,x][y,z])
                                                                         Focus(f,[a,b])
3  The Temporal Focusing                                                              (f,t)
                                                                                       +
3.1  General Description                                                        AssertNoMore(f,[a,b])
In some cases, not all events have the same status: in exam-
ple on ﬁgure 2, event f could be very frequent and event e                                         nm(f)
                                                                                Buffered Stream f:  ﬁl(f)
extremely uncommon. Due to this difference of frequency,                          (f,t),(f,t')(f,t'')… foc(f)
the recognition of the chronicle could be intractable in prac-
                                                                                Buffered Stream g: nm(g)
tice, indeed each event f potentially creates a new instance                                        ﬁl(g)
                                                                                   (g,d),(g,d')…
of the chronicle waiting for other events: if a thousand f ar-  Collector                           foc
rive between 0 and 1, a thousand instances will be created.
As event e is extremely uncommon most of those instances   Figure 3: Architecture of the focused recognition.
would be ﬁnally destroyed. In CRS, the number of creation
of instances has a great impact on performance of the recog- At this stage, we have deﬁned two messages for a feedback
nition. In order to reduce this number, we focus on event e in control on the production of event of high level: CRS is able
the following manner: when events f arrive, we store them in to focus on speciﬁed time windows (by sending a “Focus”
a collector and we created new instances only when events e message) but also could discard events in irrelevant time win-
occur, then we will search in the collector which f could be dows (by sending a “Discard” message).
integrated in the instances. Potentially the number of created
instances will be the number of e and not the number of f. 3.2 The Buffered Streams
In order to be not limited to uncommon events, we order the The collector is composed of many buffered streams, each of
recognition process by introducing a level for each event type. them is dedicated to one event type. This section presents
The principle of the temporal focusing is then the following: how it works: each buffered stream manages three particular
Temporal focusing: Begin the integration of events of level temporal windows (see ﬁgure 4) :
n +1only when there exists an instance such that all events i) the assert no more window (nm) which contains all the
      of level between 1 and n had been integrated.       occurrence dates for that no more event will be received
So, if level(e) ≤ level(f), the engine will integrate e at t =5 from now,
then it will search in the collector all events f between t =2
and t =4. The collector ﬁnds (f,3) and sends it to the en-
                                                             no more window  ﬁltered
gine, this leads to the creation of the instance I3. Technically             window
we made the choice of sending f not only to instances wait-                         focused window
ing for events of same level but to all the pending instances.
As the number of f sending from the collector to the engine                                     time
is small, only a small number instances are created. This also
ensures that the collector sends an event one and only one                  buffered events
time. So, in our example, (f,3) leads to the creation of in-
stance I2 with fc(e)=[5, 6].                           Figure 4: The 3 control windows used to manage the buffer.

                                                IJCAI-07
                                                   326 ii) the ﬁltered window (ﬁl) which contains all the occur-       AssertNoMore(f,w)         Control Message
    rence event dates for which the pending instances don’t
    care, and

iii) the focus window (foc) which contains all the occurrence                               Buffer previous
    dates for which incoming events are required and should                                    state
    be integrated immediately by CRS without be stored.
  The ﬁgure 5 illustrates the different cases of processing an

event according to its position against the temporal windows                                Buffer next state
of the buffered stream.

  ff                                                                           AssertNoMore  Buffer reply
          Fordidden                   The event f is                            sent to CRS
        (should not happen)             discarded
                                                             Focus(f,w)                Discard(f,w)


             ffThe event f is
                                          The event f
                   sent to CRS
                                          is buffered


Figure 5: The different cases of processing an event occur-
                                                                      Events sent                   Events
rence into a buffered stream (according to the event date).             to CRS                     deleted
                                                                         +                           +
                                                                     AssertNoMore               AssertNoMore
                                                                      sent to CRS                sent to CRS
Reception of control messages (“AssertNoMore”, “Discard”
or “Focus”) updates also the buffered stream:
                                                      Figure 6: Behavior of a buffer when it receives one control
  AssertNoMore(f,w)
 “                 ” : it updates the windows (see ﬁg. 6) message (“AssertNoMore”, “Discard”or“Focus”).
    nm ←  nm ∪ w, ﬁl ← ﬁl\w and foc ← foc\w and sends
    to CRS “AssertNoMore(f,w ∩ foc)”.
                                                      other part where f is after e, in this case f should be directly
 “Discard(f,w)” : it destroys all events in w, then updates
                                                      sent to the recognition engine which is done by the use of the
    the windows : ﬁl ← ﬁl ∪ (w\nm), foc ← foc\w and
                     AssertNoMore(f,w) 4              maintained focus window. An other case where focusing is
    sends back to CRS “               ” .                            [a,b]
                                                                     −→             ≥
 “Focus(f,w)” : it sends all events in w, then updates the useful is when f e, with a, b 0, with e FIFO but f
    focused window: foc ← foc ∪ (w\(nm ∪ ﬁl) and sends having a jitter delay greater than b. To sum up, setting a level
    back to CRS “AssertNoMore(f,w ∩ (nm ∪ ﬁl))”.      to an event is based on an a priori knowledge of its incoming
                                                      frequency and on its position in the constraint graph.
So, during the recognition process, the following properties The focusing must be combined with hierarchization in the
are always true : i) The windows nm, ﬁl and foc are mutually case where one can identify uncommon sub-patterns or when
exclusive. ii) There is no buffered event in the ﬁltered and more than one occurrence of a frequent event is required for
the focused windows. Whatever the levels in a chronicle, this the recognition (see section 5 and 6 for an example).
mechanism performs exactly same recognitions as CRS with
no focusing; only the performances are affected.      4   Hierarchical Chronicles
3.3  Partial order and relative event frequencies     A hierarchical chronicle is a pair (C, {h1,...,hn}) where
In ﬁgure 2, if e is much more frequent than f, there is no need C is the base chronicle and hi are the sub-chronicles;we
to deﬁne level, as, if no f was arrived, no e initiates new in- assume that events involved in C can take value in the set
                                                      of sub-chronicle labels {h1,...,hn}. We treat only deter-
stances, thus the number of partial instances equals number                      5
of f. So relatively to an other event e, event f (very fre- ministic hierarchical chronicles , i.e. we do not allow two
quent) should be leveled only if e ≤ f (in the partial order sub-chronicles having the same label, so, in the following,
induced by the constraints), in particular when e and f are we make no distinction between the chronicle and its label.
                          [−1,2]                      Moreover we suppose that each hi has a distinguished event
                          −→
not ordered, for example if e  f. We can decompose    bi. The hierarchical chronicle C will be recognized if it is
instances into two categories: the instances where f is before
e for which the focusing will be particular efﬁcient and the 5There is no technical difﬁculty to consider non-deterministic hi-
                                                      erarchical chronicles. The main difference is that expansion (see be-
  4This message is a kind of acknowledgment used to synchronize low) leads to more than one chronicle. This is a possible way to
the event buffer state and the CRS state.             introduce disjunction in chronicle formalism.

                                                IJCAI-07
                                                   327(classically) recognized with integrated events labeled by a Proposition 4.1 Let G be a minimal constraint graph and
sub-chronicle hi have the date of an integrated event bi in U ⊆ G a subgraph. Let b ∈ U be a (distinguished) node and
                                                                                          
a recognized instance of hi. In other words, when a sub- H the hierarchical chronicle deﬁned by G =(G\U) ∪{h}
                                                                            
chronicle hi is recognized, it “sends” to all chronicles the and h = U, where h ∈ G has the same constraints as node
event (hi, date of bi).                               b. Then H and G recognize the same events iff
  In ﬁgure 7, the hierarchical chronicle H =(C, {h, k})
                                                             ∀  ∈   ∀  ∈   \    ac    ab    bc        (1)
possesses two sub-chronicles h and k, the chronicle k is com- a   U,  c  G  U, D  = D   + D
posed of two types of events: a basic one, f (which comes where Dxy is the time constraint between nodes x and y in
from the supervised system) and one from the sub-chronicle the graph G.
h. The distinguished events are respectively e and h.
                                                      5   Focused Hierarchical Recognition
                         h
                                       g              In this section, we present how focusing and the hierarchiza-
                               [1,1]                  tion could be mixed. We need to add a module which trans-
                          e                           forms the windows of high level events representing sub-
                               [2,3]   e
   h   [0,1]   g                                      chronicles into those of the different buffered streams rep-
                                                      resenting the events in the sub-chronicles.
         C      [-1,2]          k                       We only present the formula for updating the ﬁltered win-
                                   h   [1,2] f        dow: when the collector receives a “Discard” message for
        k   [2,3]   h                                 f, it transforms it into a “Discard” message for all events of
                                                      the sub-chronicle f, but needs also to take into account other
     Figure 7: The hierarchical chronicle (C, {h, k}). high-level events. In order to do that, we also introduce a
                                                      ﬁltered window for all high level events representing a sub-
                                                      chronicle.
  Let C be a chronicle with constraint graph G and with an                   Discard
event h, where h is a subchronicle with distinguished ele- So, the window of the “ ” message receives by the
ment b and with constraint graph V . Expanding the chronicle buffered stream of event type e (included in f) is given by:
                                                            ﬁl(fi)/De,b where De,b is the time constraint from e
C (or its graph) is replacing the node h ∈ G by the graph e∈fi       i          i
V , specifying that the constraints between b and G\V are the to the distinguished node bi of fi and where:
              ∈                     →                                  
constraints of h G. Let the relation hi hj be deﬁned                      [u − a, v − b]ifu − a ≤ v − b
if hj contains the event type hi. The hierarchical chronicle is [u, v]/[a, b]=
                              ∗                                           ∅             otherwise
structurally consistent if ∀i, hi → hi. In this case the ex-
pansion of a hierarchical chronicle is well deﬁned (the graph with natural extension to the set of extended intervals.
of the ﬁgure 8 is the expansion of (C, {h, k})). A hierarchical
chronicle C is consistent if there exists a set of events s.t. C
                                                      Remark:   An example of gain of focusing vs. techniques
is recognized. It is straightforward that a (structurally consis-
                                                      presented in [Vu et al., 2003] is that for subgraphs with [0, 0]
tent) hierarchical chronicle is consistent iff when expanding
                                                      constraints (co-occurrence), we don’t have to explore combi-
sub-chronicles the obtained constraint graph is consistent.
                                                      nation of partial instantiation but only store events and wait
                                                      for an event in the future in order to extract from the collector
   e     [2,3]    e    [0,1]   g    [-1,2]    e       events with the “good” parameters; thus all the combinatorial
      [1,1]                                           explosion of elementary scenarios is avoided.
                                 [2,3]  [2,3]
            g
                         e           e
                  [2,3]                 [1,1]         6   Experimentation
              e             [1,2]
                  [1,1]                       g       This experiment was done on real data coming from the real
                         g        f                   case application which motivates this work: the detection of
                                                      RDDoS (Reﬂected Distributed Denial of Service) attacks in
  Figure 8: The expansion of the hierarchical chronicle C. IP networks.
                                                        In such attack, machines with the spoofed IP address of
  Hierarchical chronicles can come from two ways: the ﬁrst the victim send SYN messages to naives servers. Then, those
one is that the chronicle is initially speciﬁed in a hierarchical servers will reply by sending to the victim SYN/ACK mes-
manner, for example if the architecture of the system is itself sages generating a massive ﬂooding. Characteristic of the
hierarchical; the second one is, starting from a ﬂat chronicle, attack is that SYN trafﬁc to naive server is low, persistent
we identify identical patterns inside this chronicle. The next and, taken alone, do not trigger an alarm. We want to iden-
proposition is a necessary and sufﬁcient condition to the hier- tify the naive servers. In our experiment, information on the
archization of a (temporal) pattern and shows we have to take global trafﬁc are sent way up by dozens of core routers. Pre-
care in pattern factorization: two subgraphs could be identi- processing is done by a particular numerical algorithm which
cal (with same constraints) but one of them can satisfy the computes throughput between pairs of IP addresses and sends
condition and the other not.                          alarms when this throughput is greater than two thresholds: a
                                                      low one (L events) and a high one (H events).

                                                IJCAI-07
                                                   328