                           A Maximal Tractable Class of Soft Constraints 

       David Cohen Martin Cooper Peter Jeavons Andrei Krokhin 

 Computer Science Department IRIT OUCL Computer Science Department 
         RHUL, UK University of Toulouse III, France University of Oxford, UK University of Warwick, UK 
   d.cohen@rhul.ac.uk cooper@irit.fr p.jeavons@comlab.ox.ac.uk ak@dcs.warwick.ac.uk 


                        Abstract                                 • Each variable v1 should be assigned a value that is as 
                                                                    close as possible to i/2. 
     Many optimization problems can be expressed us­
     ing some form of soft constraints, where different          • Each pair of variables v1 v2, should be assigned a pair 
     measures of desirability arc associated with differ­           of values that are as similar as possible. 
     ent combinations of domain values for specified           To model this situation we might impose the following soft 
     subsets of variables. In this paper we identify a         constraints: 
     class of soft binary constraints for which the prob­
                                                                 • A unary constraint on each v1 specified by a function 
     lem of finding the optimal solution is tractable. In 
                                                                    where 
     other words, we show that for any given set of 
     such constraints, there exists a polynomial time al­        • A binary constraint on each pair v1,v2i specified by a 
     gorithm to determine the assignment having the                 function 
     best overall combined measure of desirability. This       We would then seek an assignment to all of the variables 
     tractable class includes many commonly-occurring          which minimizes the sum of these constraint functions, 
     soft constraints, such as "as near as possible" or "as 
     soon as possible after", as well as crisp constraints 

     such as "greater than'1. 

                                                                                                                        LJ 
1 Introduction 
                                                               The cost of allowing additional flexibility in the specification 
The constraint satisfaction framework is widely acknowl­
                                                               of constraints, in order to model requirements of this kind, is 
edged as a convenient and efficient way to model and solve a 
                                                               generally an increase in computational difficulty. In the case 
wide variety of problems arising in Artificial Intelligence, in­
                                                               of crisp constraints there has been considerable progress in 
cluding planning and scheduling, image processing and natu­
                                                               identifying classes of constraints which are tractable, in the 
ral language understanding. 
                                                               sense that there exists a polynomial time algorithm to deter­
   In the standard framework a constraint is usually taken to 
                                                               mine whether or not any collection of constraints from such a 
be a predicate, or relation, specifying the allowed combina­
                                                               class can be simultaneously satisfied [Feder and Vardi, 1998; 
tions of values for some fixed collection of variables: we will 
                                                               Jeavons et ail 1997]. In the case of soft constraints there 
refer to such constraints here as crisp constraints. A num­
                                                               has been a detailed investigation of the tractable cases for 
ber of authors have suggested that the usefulness of the con­
                                                               Boolean problems (where each variable has just 2 possible 
straint satisfaction framework could be greatly enhanced by 
                                                               values) [Creignou et al, 2001], but very little investigation of 
extending the definition of a constraint to include also soft 
                                                               the tractable cases over larger domains , even though there 
constraints, which allow different measures of desirability to                                       1
                                                               are many significant results in the literature on combina­
be associated with different combinations of values [Bistarelli 
                                                               torial optimization which are clearly relevant to this ques­
et al., 1999]. In this extended framework a constraint can 
                                                               tion [Nemhauser and Wolsey, 1988]. 
be seen as a function, mapping each possible combination of 
                                                                 In this paper we make use of the idea of a submodular func•
values to a measure of desirability or undesirability. Finding 
                                                               tion [Nemhauser and Wolsey, 1988; Topkis, 1978] to iden­
a solution to a set of constraints then means finding an as­
                                                               tify a general class of soft constraints for which there exists 
signment of values to all of the variables which has the best 
                                                               a polynomial time solution algorithm. Submodular functions 
overall combined desirability measure. 
                                                               are usually defined as real-valued functions on Boolean tu­
                                                               ples (=sets) [Nemhauser and Wolsey, 1988], but we consider 
Example 1,1 For example, consider an optimization prob­
lem where we have 2n variables, v1,v2,. .-,V2n, and we            'The only previous work we have been able to find on non-
wish to assign each variable an integer value in the range     Boolean tractable soft constraints is [Khatib et ai, 2001], which 
1,2,..., n, subject to the following restrictions:             describes a family of tractable soft temporal constraints. 


CONSTRAINTS                                                                                                           209 the more general case of functions on tuples over an arbitrary For our purposes in this paper we require the same proper­
finite domain. We also allow our functions to take infinite    ties as the valued CSP approach, with the additional require­
values. By establishing a new decomposition result for this    ment that the aggregation operator has a partial inverse (so 
general class of binary submodular functions (Theorem 4.4),    that any evaluation can be "subtracted" from any larger eval­
we obtain a cubic time algorithm to find the optimal assign­   uation). For concreteness, we shall simply assume through­
ment for any set of soft constraints defined by such functions. out this paper that the set of evaluations E is either the set of 
   We give a number of examples to illustrate the many dif­    non-negative integers together with infinity, or else the set of 
ferent forms of soft constraint that can be defined using bi­  non-negative real numbers together with infinity. Hence, for 
nary submodular functions, and we also show that this class is any two evaluations the aggregation of p1 and p2 
maximal, in the sense that no other form of binary constraint  is given by we also have 
can be added without sacrificing tractability.                              (Note that we set 
                                                                 The elements of the set E will be used to represent dif­
2 Definitions                                                  ferent measure of undesirability, or penalties, associated with 
                                                               different combinations of values. This allows us to complete 
To identify a tractable class of soft constraints we will need to the definition of a soft constraint satisfaction problem with 
restrict the set of functions that are used to specify constraints. the following simple definition of a solution to an instance. 
Such a restricted set of possible functions will be called a soft 
constraint language. 
                                                               Definition 2.3 For any soft constraint satisfaction problem 
                                                               instance V — (V, D, C), an assignment for V is a mapping 
Definition 2.1 Let D and E be fixed sets. A soft constraint    t from V to D. The evaluation of an assignment t, denoted 
language over D with evaluations in E is defined to be a set          is given by the sum (i.e., aggregation) of the evalua­
of functions, T, such that each is a function from Dk          tions for the restrictions of t onto each constraint scope, that 
to E, for some where k is called the arity of                  is, 
For any given choice of soft constraint language, T we define 
an associated soft constraint satisfaction problem, which we 
will call sCSP(r), as follows. 
                                                               A solution to V is an assignment with the smallest possible 
Definition 2.2 Let T be a soft constraint language over D      evaluation, and the question is to find a solution. 
with evaluations in E. An instance V of sCSP(r) is a triple 
(V,D,C), where:                                                Example 2.4 For any standard constraint satisfaction prob­
   • V is a finite set of variables, which must be assigned    lem instance V with crisp constraints, we can define a cor­
     values from the set D.                                    responding soft constraint satisfaction problem instance V in 
                                                               which the range of the evaluation functions of all the con­
   • C is a set of soft constraints. Each is a pair (a, d>)    straints is the set . For each crisp constraint c of P, we 
     where: is a list of variables, called the scope of c and 
                                                               define a corresponding soft constraint cofV with the same 
       is an element of T of arity , called the evaluation 
                                                               scope; the evaluation function of c maps each tuple allowed 
    function of c. 
                                                               by c to 0, and each tuple disallowed by c to oo. 
Note that, for any constraint the arity of the con­              In this case the evaluation of an assignment t for equals 
straint is given by the length of the constraint scope. The    the minimal possible evaluation, 0, if and only ift , satisfies all 
evaluation function will be used to specify some measure       of the crisp constraints in V. D 
of desirability or undesirability associated with each possible 
tuple of values over                                           Note that the problem of finding a solution to a soft con­
  To complete the definition of a soft constraint satisfac­    straint satisfaction problem is an NP optimization problem, 
tion problem we need to define how the evaluations obtained   that is, it lies in the complexity class NPO (see [Creignou 
from each evaluation function are combined and compared,       et al, 2001] for a formal definition of this class). If there 
in order to define what constitutes an optimal overall solu­   exists a polynomial-time algorithm which finds a solution to 
tion. Several alternative mathematical approaches to this is­  all instances of sCSP(T), then we shall say that sCSP(T) is 
sue have been suggested in the literature:                     tractable. On the other hand, if there is a polynomial-time re­
                                                               duction from some NP-complete problem to sCSP(T), then 
  • In the semiring based approach [Bistarelli et al, 1999],   we shall say that sCSP(r) is NP-hard. 
     the set of possible evaluations, E, is assumed to be an 
     algebraic structure equipped with two binary operations, 
                                                               Example 2.5 Let Y be a soft constraint language over D, 
     satisfying the axioms of a semiring. 
                                                              where = 2. In this case sCSP(r) is a class of Boolean 
  • In the valued CSP approach [Bistarelli et al, 1999], the   soft constraint satisfaction problems. 
     set of possible evaluations E is assumed to be a totally    If we restrict T even further, by only allowing functions 
     ordered algebraic structure with a top and bottom ele­    with range as in Example 2.4, then sCSP(r) corre­
     ment and a single monotonic binary operation known as     sponds precisely to a standard Boolean crisp constraint sat­
     aggregation.                                              isfaction problem. Such problems are sometimes known as 


210                                                                                                      CONSTRAINTS GENERALIZED SATISFIABILITY problems [Schaefer, 1978]. 
The complexity of sCSP(F) for such restricted sets T has 
been completely characterised, and the six tractable cases 
have been identified [Schaefer, 1978; Creignou et al, 2001].   We can explain the choice of name for these functions by con­
   Alternatively, if we restrict Y by only allowing functions  sidering the unary function . This function returns 
with range {0,1), then sCSP(r) corresponds precisely to a      the value p if and only if its argument lies in the interval [a, b]; 
standard Boolean maximum satisfiability problem, in which      outside of this interval it returns the value 0. 
the aim is to satisfy the maximum number of crisp constraints.   We shall write TGI to denote the set of all generalized in­
Such problems are sometimes known as MAX-SAT prob­             terval functions on D, where D = {1,2,..., M} with the 
lems [Creignou et al, 2001]. The complexity of sCSP(r)         usual ordering. 
for such restricted sets F has been completely characterised,    The main result of this section is Corollary 3.6, which 
and the three tractable cases have been identified (sec Theo­  states that SCSP(TGI) is tractable. To establish this result we 
rem 7.6 of [Creignou et al., 2001]).                           first define a weighted directed graph2 associated with each 
   We note, in particular, that when T contains just the single instance of sCSP(Ff;/). 
binary function defined by 
                                                               Definition 3.2 Let V = (V, {1,..., M}, C) be an instance 
                                                               of sCSP(Tgi). We define the weighted directed graph G-p 
                                                               as follows. 
then sCSP(r) corresponds to the MAX-SAT problem for the 
exclusive-or predicate, which is known to be NP-hard (see        • The vertices of G-p are as follows: 
Lemma 7.4 of LCreignou et al., 2001]). □ 

Example 2.6 Let T be a soft constraint language over D,          • The edges of Gp are defined as follows: 
where and assume that T contains just the set of 
all unary functions, together with the single binary function         - For each there is an edge from S to with 
     defined by                                                         weight 
                                                                      - For each , there is an edge from with 
                                                                        weight 

Even in this very simple case it can be shown that sCSP(T) 
is NP-hard [Cohen et al, 2002], by reduction from the                   there is an edge from vci to Vd+\ with weight 
MINIMUM MULTITHRMINAL CUT problem [Dahlhausc/a/.,                     - For each constraint there is an 
 1994]. u edge from with weight p. These edges 
                                                                        are called "constraint edges". 
The examples above indicate that generalizing the constraint 
satisfaction framework to include soft constraints docs indeed Example3.3 Let V = ({x,y, z}, {1,2,3,4},C) be an in­
increase the computational complexity, in general. For exam­   stance of sCSP(TGI) with the following four constraints: 
ple, the standard 2-SATISFIABILITY problem is tractable, but 
the soft constraint satisfaction problem involving only the sin­
gle binary Boolean function, defined at the end of Ex­
ample 2.5, is NP-hard. Similarly, the standard constraint sat­
isfaction problem involving only crisp unary constraints and   The corresponding weighted directed graph Gp, is shown in 
equality constraints is clearly trivial, but the soft constraint Figure 1. U 
satisfaction problem involving only soft unary constraints and 
a soft version of the equality constraint, specified by the func­
tion ΦEQ defined at the end of Example 2.6, is NP-hard. 
   However, in the next two sections we will show that it 
is possible to identify a large class of functions for which 
the corresponding soft constraint satisfaction problem is 
tractable. 

3 Generalized interval functions 
We begin with a rather restricted class of binary functions, 
with a very special structure. 
                                                               Figure 1: The graph Gp associated with the instance V de­
Definition 3.1 Let D be a totally ordered set. A binary func­
                                                               fined in Example 3.3. 
tion, Φ : D2 —> E will be called a generalized interval func­
tion on D if it has the following form: 

                                                                  2This construction was inspired by a similar construction for cer­
                                                               tain Boolean constraints described in [Khanna et al., 2000]. 


CONSTRAINTS                                                                                                          211  Any set of edges C in the graph Gp whose removal leaves           corresponding to a constraint from K and so the edges 
 the vertices S and T disconnected will be called a cut. If        corresponding to the set K form a cut in Gp. Further­
 every edge in C is a constraint edge, then C will be called a     more, by the choice of K the weight of this cut is equal 
proper cut. The weight of a cut C is defined to be the sum of      to the evaluation of/. 
 the weights of all the edges in C. 
                                                                                                                       D 
                                                              Hence, by using a standard efficient algorithm for the MIN-
 Example 3.4 Consider the graph Gp shown in Figure 1.         IMUM WEIGHTED CUT problem [Goldberg and Tarjan, 
 The set {(y3,20)} is a proper cut in Gp with weight           1988], we can find an optimal assignment in cubic time. 
 7, which is minimal with respect to inclusion. The set 
 {(x4,y2), (z3,y3)} is a proper cut in Gp with weight 5,      Corollary 3.6 The time complexity of sCSP(TGI) is 
 which is again minimal with respect to inclusion. D                     , where n is the number of variables. 

Proposition 3.5 Let V be any instance of sCSP{Tgi)> and       4 Submodular functions 
let Gp be the corresponding weighted directed graph. 
                                                              In this section we will consider a rather more general class of 
  1. For each minimal proper cut in Gp with weight there 
                                                              functions, as described in [Topkis, 1978]. 
     is an assignment for V with evaluation 
  2. For each assignment t for V with evaluation , there is 
     a proper cut in Gp with weight 

Proof: 
  1. Let C be any minimal proper cut of the graph Gp, and 
     let Cs be the component of Gp \ C connected to S. 
     Define the assignment tc as follows: 
                                                              It is easy to check that all unary functions and all generalized 
                                                              interval functions are submodular. For binary functions, the 
     (Note that tc is well-defined because Cs always con­     definition of submodularity can be simplified, as follows. 

     tains vM, and never contains V0, by construction.) 
     By the construction of Gp, it follows that: 

     Now consider any constraint of P, 
     and its associated edge e in Gp. By the definition 
     of generalized interval constraint and the choice of tc, 
                              if and only if and 

        I-J 
               and hence if and only if e joins a vertex in Cs 
     to a vertex not in Cs- Since C is minimal, this happens 
     if and only if Hence, the total weight of the cut 
     C is equal to the evaluation of tc-
  2. Conversely, let t be an assignment to P, and let A' be the 
     set of constraints in V with a non-zero evaluation on t. 
     Now consider any path from S to T in Gp. If we ex­
     amine, in order, the constraint edges of tnis path, and 
     assume that each of the corresponding constraints eval­  It follows from Definition 4.1 that the sum of any two sub-
                                                              modular functions is submodular. This suggests that in some 
     uates to 0, then we obtain a sequence of assertions of the 
                                                              cases it may be possible to express a submodular function as 
     following form: 
                                                              a sum of simpler submodular functions. For example, for any 
                                                              unary function : D —► E we have 


                                                              The main result of this section is Theorem 4.4, which states 
                                                              that any binary submodular function can also be expressed as 
     Since the second disjunct of each assertion contradicts  a sum of generalized interval functions. 
     the first disjunct of the next, these assertions cannot all 
     hold simultaneously, so one of the corresponding con­    Theorem 4.4 Let D be a totally ordered finite set. A binary 

     straints must in fact give a non-zero evaluation on t.  function, : D2 —► E is submodular if and only if it can be 
     Hence, every path from S to T includes at least one edge expressed as a sum of generalized interval functions on D. 


212                                                                                                     CONSTRAINTS Proof: By the observations already made, any function         Proof: The proof is by reduction from 
which is equal to a sum of generalized interval functions     to whereis the binary function 
clearly submodular.                                           defined in Example 2.5. It was pointed out in Example 2.5 
                                                              that corresponds to the MAX-SAT problem 
                                                              for the exclusive-or predicate, which is known to be NP-
                                                              hard [Creignou et al., 2001]. Hence is also 
                                                              NP-hard. Details of the reduction are given in [Cohen et al., 
                                                              2002]. D 

                                                              5 Applications 
                                                              In this section we give a number of examples to illustrate 
                                                              the wide range of soft constraints which can be shown to be 
                                                              tractable using the results obtained in the previous sections. 

                                                              Definition 5.1 For any k-ary relation R on a set D, we define 
                                                              an associated function, as follows: 


                                                              By Corollary 4.6, any collection of crisp constraints, where 
                                                              each constraint is specified by a relation It for which ΦR 
                                                              is unary or binary submodular, can be solved in polynomial 
                                                              time, even when combined with other soft constraints that are 
                                                              also unary or binary submodular. 

                                                              Example 5.2 The constraint programming language CHIP 
                                                              incorporates a number of constraint solving techniques for 
                                                              arithmetic and other constraints. In particular, it provides a 
                                                              constraint solver for a restricted class of crisp constraints over 
                                                              natural numbers, referred to as basic constraints [van Henten-
                                                              ryck et al, 1992]. These basic constraints are of two kinds, 
                                                              which are referred to as "domain constraints" and "arithmetic 
                                                              constraints". The domain constraints described in [van Hen-
                                                              tenryck et al, 1992] are unary constraints which restrict the 
                                                              value of a variable to some specified finite subset of the nat­
                                                              ural numbers. The arithmetic constraints described in [van 
We remark that this decomposition is not unique - other de­   Hentenryck et ai, 1992] have one of the following forms: 
compositions exist, including the symmetric decomposition 

                                                              where variables are represented by upper-case letters, and 
                                                              constants by lower case letters, all constants are non-negative 
                                                              real numbers and a is non-zero. 
                                                                 For each of these crisp constraints the associated func­
                                                              tion given by Definition 5.1 is unary or binary submodular, 
Combining Theorem 4.4 with Corollary 3.6, gives:              hence, by Corollary 3.6, any problem involving constraints of 
                                                              this form can be solved in cubic time. Moreover, any other 
                                                              soft constraints with unary or binary submodular evaluation 
                                                              functions can be added to such problems without sacrificing 
                                                              tractability (including the examples below). D 

                                                              Now assume, for simplicity, that D — {1, 2,..., M}. 
The next result shows that the tractable class identified in 
Corollary 4.6 is maximal.                                     Example 5.3 Consider the binary linear function defined 

                                                                 This function is submodular and hence, by Corollary 3.6, 
                                                              any collection of such binary linear soft constraints over the 
                                                              discrete set D can be solved in polynomial time. 


CONSTRAINTS                                                                                                          213 