                                Structural Symmetry Breaking

                            Meinolf Sellmann and Pascal Van Hentenryck
                          Brown University, Department of Computer Science
                             P.O. Box 1910, Providence, RI 02912, U.S.A.
                                        sello,pvh@cs.brown.edu


                    Abstract                          some classes of pure value symmetry was investigated and
    Symmetry breaking has been shown to be an im-     proven to be computationally tractable. The approach taken
    portant method to speed up the search in con-     was generalized in [Roney-Dougal et al., 2004], where the
    straint satisfaction problems that contain symme- notion of symmetry-free search trees, so-called GE-trees, was
    try. When breaking symmetry by dominance detec-   introduced. In combination with GAP, GE-trees were shown
    tion, a computationally efﬁcient symmetry break-  to break arbitrary value symmetries in polynomial time.
    ing scheme can be achieved if we can solve the      In this paper, we continue this successful line of research
    dominance detection problem in polynomial time.   by studying combinations of value and variable symmetry in
    We study the complexity of dominance detection    constraint satisfaction problems (CSPs) and CSPs with set
    when value and variable symmetry appear simulta-  variables (set-CSPs). We offer three main contributions: The
    neously in constraint satisfaction problems (CSPs) ﬁrst regards a combination of variable and value symmetry
    with single-valued variables and set-CSPs. We     for CSPs with single-valued variables. For the ﬁrst time, in
    devise an efﬁcient dominance detection algorithm  Section 3, we show that the corresponding dominance detec-
    for CSPs with single-valued variables that yields tion problem is computationally tractable. In Section 4, we
    symmetry-free search trees and that is based on   build up on this result and show an efﬁcient way of using the
    the abstraction to the actual, intuitive structure of dominance detection algorithm for ﬁltering rather than just
    a symmetric CSP.                                  pruning. The third main contribution regards set variables: in
                                                      Section 5 we show that the general dominance detection prob-
1  Introduction                                       lem becomes NP-hard for set-CSPs that contain symmetric
During the past ﬁve years, symmetry breaking has been a set variables and value symmetry. Finally, as a minor side-
topic of increasing interest in the constraint programming note, in Section 6 we show that higher forms of symmetry
community. It was shown that symmetry breaking can play where sets of set variables are symmetric to other sets of set
a decisive role in the solution of numerous constraint prob- variables in combination with value symmetry can be reduced
lems, and sophisticated symmetry breaking methods have to the partial set variable symmetry case.
been developed, such as the addition of symmetry breaking
constraints (see for example [Crawford et al., 1996]), sym- 2 Preliminaries
metry breaking by adapting the search strategy [Brown et
al., 1988], symmetry breaking during search (SBDS) [Gent Let us start out by introducing some notation that we will use
and Smith, 2000], or symmetry breaking by dominance de- throughout the paper. In the reminder of this paper, let us
tection (SBDD) [Fahle et al., 2001; Focacci and Milano, assume that n, m, p ∈ IN.
2001]. Especially the latter has attracted a lot of interest:
improvements were suggested in [Barnier and Brisset, 2002; Deﬁnition 1
Puget, 2002] for example. SBDD works by checking whether • A Constraint Satisfaction Problem (CSP) is a tuple
the current choice point under investigation represents a sym- (Z, V, D, C) where Z = {X1, . . . , Xn} is a ﬁnite set
metric variant of a part of the search space that has been in- of variables, V = {v1, . . . , vm} is a set of values,
vestigated completely before.                             D  = {D1, . . . , Dn} is a set of ﬁnite domains where each
  The core of an SBDD symmetry breaking code is domi-     Di ∈  D is the set of possible instantiations to variable
nance detection which was automated in [Gent et al., 2003] Xi, and C = {c1, . . . , cp} is a ﬁnite set of constraints
by using the generic computational group theory tool, yield- where each ci ∈ C is deﬁned on a subset of the vari-
ing a method named GAP-SBDD. While using a generic tool   ables in Z and specifying their valid combinations. We
is appealing from the perspective of the ease-of-use for the say that the CSP has single-valued variables iff for all
constraint programmer, the generality comes with no guaran- Di ∈ D it holds that Di ⊆ V . If for all Di ∈ D it holds
                                                                    V        V
tee of efﬁciency. Therefore, in [Van Hentenryck et al., 2003], that Di ⊆ 2 (where 2 denotes the set of all subsets of
the special case of dominance detection in the presence of V ), we say that the CSP is a set-CSP.  • Given a CSP with single-valued variables, an assign- variable and each value as a member of a symmetry class. In
    ment A is a set of pairs (X, v) ∈ Z × V such that the beginning, these classes correspond directly to the sets Pk
    (X, v), (X, w) ∈ A implies v = w. Given a set-CSP, and Ql. When assignments are committed, though, some of
    a set-assignment A is a set of pairs (X, S) ∈ Z × 2V those initial symmetries are broken. Then, in order to check
    such that (X, S1), (X, S2) ∈ A implies S1 = S2.   which CSP objects are still indistinguishable, we need to in-
                                                      troduce subclasses of the original symmetry classes. We will
Deﬁnition 2                                           see that we can detect the remaining symmetries by label-
  • Given a set S and a set of sets P = {P1, . . . , Pr} such ing each of those subclasses with a certain signature that is
    that Si Pi = S and the Pi are pairwise non-overlapping, deﬁned by the set of initial symmetries and the given assign-
    we say that P is a partition of S, and we write S = ments. We will see also that it is really these signatures that
    Pi Pi.                                            capture our intuitive wish to abstract from the CSP model at
                                                      hand to the actual structure of the problem.
  • Given a set S and a partition S = Pi Pi, a bijection
    π : S  7→ S such that π(P ) = P (where π(P ) =
                            i      i          i       3.1  Signatures
    {π(s) | s ∈ Pi}) is called a partial permutation over
    S = Pi Pi.                                        Consider the following example:   We  have variables
                                                      X1, . . . , X8 over domains D(X1) = · · · = D(X8) =
Deﬁnition 3                                           {v1, . . . , v6}. Now assume that the ﬁrst four and the last
  • Given a CSP   (Z, V, D, C), and partitions Z =    four variables are indistinguishable, i.e. P1 = {X1 . . . , X4}
    Pk≤r  Pk, V = Pl≤s Ql, we say that the CSP has par- and P2 =  {X5, . . . , X8}. Furthermore, assume that
    tial variable and value symmetry iff all variables within Q1 = {v1, . . . , v3}, Q2 = {v4, . . . , v6}, and that
    each Pk and all values within each Ql are considered as we are given the following two assignments: A1 =
    symmetric.                                        {(X1, v1), (X2, v1), (X3, v2), (X6, v5), (X7, v1), (X8, v2)}
                                                          A      X  , v , X , v , X , v , X , v , X , v ,
  • Given two assignments A and B on a partially sym- and  2 = {(  1  6) ( 2  1) ( 3  2) ( 4  2) ( 5  1) -
    metric CSP with single-valued variables, we say that A (X6, v6), (X7, v2), (X8, v2)}. See Figure 1(a) for an
    dominates B iff there exist partial permutations π over illustration. When looking at the ﬁrst assignment, we see
                                                                               v    Q
    Z =  P    P  and α over V = P    Q  such that for that: 1. There is one value ( 1) in 1 that is taken by two
           k≤r  k                 l≤s  l              variables in P and one variable in P . 2. There is one
    all (X, v) ∈ A it holds that (π(X), α(v)) ∈ B.                1                     2
                                                      value (v2) in Q1 that is taken by one variable in P1 and one
  • Given  a  partially symmetric set-CSP and  set-   variable in P2. 3. There is one value (v5) in Q2 that is taken
    assignments A and B, we say that A dominates B iff by one variable in P2. On the other hand, in the second
    there exist partial permutations π over Z = Pk≤r Pk assignment: I. There is one value (v2) in Q1 that is taken by
                                                      two variables in P and two variables in P . II. There is one
    and α over V =  Pl≤s  Ql such that A(π, α) ⊆ B,                  1                    2
    where A(π, α) := {(π(X), α(S))|(X, S) ∈ A}.       value (v1) in Q1 that is taken by one variable in P1 and one
                                                      variable in P2. III. There is one value (v6) in Q2 that is taken
  • Given two arbitrary (set-)assignments A and B for a par- by one variable in P and one variable in P . Lining up 1-I
    tially symmetric (set-)CSP, we call the problem of de-             1                   2
                                                      (v1 7→ v2, {X1, X2} 7→ {X3, X4}, {X7} 7→ {X7, X8}),
    termining if A dominates B the Dominance Detection 2-II (v 7→ v , {X } 7→ {X }, {X } 7→ {X }), and 3-III
    Problem.                                                2    1    3        2     8       5
                                                      (v5 7→ v6, {X6} 7→ {X6}), we see that A2 is structurally an
                                                      assignment extended from A1, or, in other words, that A1
3  Symmetric Single-Valued Variables over             dominates A2 (see also Figure 1(b)).
   Symmetric Values                                     What we have done in this small example is to abstract
The ﬁrst general symmetry model that we study is pow- from the given model and the (arbitrary) names of variables
erful enough to manage symmetric single-valued variables and values to the actual structure of the problem. That is,
over symmetric values. Throughout this section, we consider instead of talking about speciﬁc variables and values, we
the partially symmetric CSP (Z, V, D, C) with single-valued considered members of classes. Speciﬁcally, for each as-
variables. We assume also that we are given a partition of signment we implicitly assigned each value a signature that
                                                      captures by how many members of each variable-symmetry
the variables Pk≤r Pk = Z and a partition of the values
                                                      class it was taken. For instance, in A1 v1 has the signature
Pl≤s Ql =  V  such that all variables within each Pk and
                                                      (2 × P1, 1 × P2), or, in shorter writing, the signature of v1 is
all values within each Ql are considered symmetric. Note
                                                      sig 1 (v ) = (2, 1). In A , on the other hand, the signature
that such partitions could be derived by a static analysis of a A 1         2
                                                      of v is sig 2 (v ) = (2, 2). Consequently, v in A can be
constraint program. The main objective in this section will 2   A   2                       2     2
                                                      viewed as more specialized than v1 in A1, or one may also
be to show that there exists an effective symmetry breaking say that v in A dominates v in A . In this terminology, v
algorithm that runs in polynomial time for this scenario.     1    1           2    2                   1
                                                      in A  has signature sig 2 (v ) = (1, 1) and therefore dom-
  The key idea consists in the introduction of structural ab- 2           A   1
                                                      inates v in A . Note that sig 2 (v ) is also (1, 1), but that
stractions: to model a CSP, we need to uniquely label each   1    1             A   6
                                                      v6 in A2 does not dominate v1 in A1 since v6 ∈ Q2 whereas
value and each variable with a name — which is, of course, v ∈ Q . In general:
not natural when certain variables and certain values are ac- 1 1
tually indistinguishable. We can rectify this by viewing each            A1                        A2
     P1                       P1
                   Q1                       Q1                               A1             A2
     X1                       X1
                   v1                        v1
     X2                       X2                                       (2,1) v1              v1   (1,1)
                   v2                        v2
     X3                       X3                                       (1,1) v2              v2   (2,2)
                   v3                        v3
     X4                       X4                                       (0,0) v3              v3   (0,0)

     X5                       X5
                   v4                        v4
                                                                       (0.0) v4              v4   (0,0)
     X6                       X6
                   v5                        v5
                                                                       (0,1)                      (0,0)
     X7                       X7                                             v5              v5
                   v6                        v6
     X8                       X8                                       (0,0) v6              v6   (1,1)
                   Q2                        Q2
    P2                        P2
                       (a)                                                          (b)
Figure 1: Part (a) illustrates assignments A1 and A2. Part (b) gives the signatures for each value, links pairs of values where
the one in assignment A1 dominates to the one in A2, and a perfect matching that proves that A1 dominates A2 is designated
by solid lines.

Deﬁnition 4                                           Deﬁnition 5
  • We say that a value v in an assignment A dominates a Given two assignments A and B, let us denote with V 0 a set
    value w in assignment B iff v and w belong to the same of duplicates of the values in V by attaching a prime sign after
                                           1                               0     0
    value-symmetry class and sigA(v) ≤ sigB(w).       the values’ names (i.e. V := {v | v ∈ V }). Then, we deﬁne
                                                      the dominance detection graph DDG(A, B) := (V ∪ V 0, E)
  • We say that a value v in an assignment A is struc-                0
    turally equivalent to a value w in assignment B iff v where E := {(v, w ) | v in A dominates w in B} denotes
    and w belong to the same value-symmetry class and the set of arcs.
    sigA(v) = sigB(w).
                                                      Theorem 1
3.2  Dominance Detection Using Signatures             Given two assignments A and B over a CSP with partially
The following lemma shows how signature-abstractions can symmetric single-valued variables and partially symmetric
help to detect dominance relations among assignments: values, the dominance detection problem between A and B
                                                      has complexity O(M + m2 + mn), where M = O(m2.5) is
Lemma 1                                               the time needed to determine whether there exists a perfect
An assignment A dominates another assignment B in a par- matching in DDG(A, B), m is the number of values, and n
tially symmetric CSP iff there exists a partial permutation α is the number of variables.
over P   Q  such that v in A dominates α(v) in B for all
      l≤s  l                                            In the interest of space here and at many other occasions
v ∈ V .                                               we must omit a formal proof. However, we would like to
Proof:  First, let us assume that A dominates B. Then, note that, with Lemma 1, it is clear that the dominance detec-
                                                      tion problem can be solved basically by determining whether
there exist partial permutations π over P Pk and α
                                      k≤r             there exists a perfect bipartite matching in DDG(A, B). The
over P    Q  such that for all (X, v) ∈ A it holds that
      l≤s  l                                          additional complexity denoted in the theorem is due to the
(π(X), α(v)) ∈ B. Since both X and π(X) belong to the necessity to construct DDG(A, B) ﬁrst. It is obvious that
same symmetry class, we have that for all values v ∈ V this can be achieved in time O(nm2), which already proves
it is sigA(v) ≤ sigB(α(v)), which is the same as to say that symmetry breaking in this scenario is tractable. How-
that v in A dominates α(v) in B. Now assume there exists ever, the runtime can be improved to the complexity that is
a partial permutation α over Pl≤s Ql such that sigA(v) ≤ claimed here by using sparse representations of signatures.
sigB(α(v)) for all v ∈ V . Then, since each variable is as- Then, in the algorithm analysis we can exploit that the to-
signed to at most one value, there exists a partial permutation tal number of non-zero signature components is bounded by
π over Pk≤r Pk such that for all (X, v) ∈ A it holds that O(|A| + |B|) = O(n).
(π(X), α(v)) ∈ B. Thus, we have that A dominates B.     Interestingly, it can also be shown that every bipartite graph
                                                      can also be viewed as a dominance detection graph of a CSP
  Consequently, we have that A dominates B iff there exists
                                                      and assignments A and B that can be determined in time lin-
a perfect matching in a bipartite graph where the edges are
                                                      ear in the size of the given graph. And therefore, a perfect
deﬁned by the signature-relation of values (see Figure 1(b)):
                                                      bipartite matching exists iff A dominates B, which makes
  1Where the ≤-relation on vectors is deﬁned as the usual the dominance detection problem at least as hard as bipar-
component-wise comparison that yields to the so-called dominance tite matching. In other words, we can show that dominance
ordering - which is different from a lexicographic ordering. detection takes time T where T ∈ Ω(M)∩O(M +m2 +mn).                                                                          0
4  Symmetry-Based Filtering                           and D2 := DDG(A, B   ) only differ in that the latter bipar-
                                                      tite graph may contain some additional edges that must all be
With Theorem 1, we can break all symmetries when given a         0
CSP with partially symmetric variables and values in poly- incident to w in the right partition. Obviously, if D2 con-
                                                      tains an m-matching, this matching must contain exactly one
nomial time when using a symmetry breaking by dominance                                                 0
detection (SBDD) approach [Fahle et al., 2001; Focacci and of those additional edges. Consequently, if A dominates B ,
Milano, 2001]. What is annoying in this setting is that we then D1 must contain an m − 1-matching. Only if this is the
still have to check every choice point to see if it is not domi- case, work needs to be done to make B ancestor-symmetry
nated by one that was previously expanded, i.e. we still have resistant with respect to A.
to touch the garbage in order to see that it is garbage. We So let us assume that D1 contains an m−1-matching. Pro-
will now develop an algorithm that does not suffer from this vided with that matching, using some straight-forward match-
disadvantage.                                         ing theory we can identify efﬁciently those and only those
  We achieve this goal by using dominance detection also for additional edges that would allow us to transform the exist-
ﬁltering rather than just pruning2. Obviously, a brute-force ing matching into a perfect one. Furthermore, it can also be
approach could simply try assignments out and use the dom- shown that those critical edges are independent of the partic-
inance detection algorithm above to perform ﬁltering as well. ular m − 1-matching that we computed (For an introduction
This procedure would lead to a very poor runtime, though. In to matching theory we refer to [Ahuja et al., 1993]). Among
the following, we will show that ﬁltering based on symmetry those critical edges that, if added, would allow us to construct
can be performed much more efﬁciently.                an m-matching, the only ones that we need to consider are
                                                                                        0
  Within SBDD, there exists a natural distinction between those which run between nodes v and w with v, w ∈ Ql for
two types of ﬁltering that apply: The ﬁrst consists in making some 1 ≤ l ≤ s and for which there exists 1 ≤ k ≤ r such
sure that none of the newly created children are symmetric to that sigA(v) ≤ sigB(w) + ek. If and only if we ﬁnd such
a node that was fully expanded before the node that is cur- a pair of nodes, a single extra assignment added to B will
rently branching off. When applying unary branching con- result in a successful dominance detection. Precisely, every
straints (which we assume are used here), this can be achieved assignment of w to a previously unassigned variable X ∈ Pk
by shrinking domain variables accordingly. The other, funda- will result in a dominated choice point. Thus, if we remove
mentally different type of “ﬁltering” consists in the creation w from the domain of X for all unassigned X ∈ Pk, we keep
of children that are also not symmetrical to each other. Both the unique parts of the search space and we never produce
types need to be addressed to achieve a symmetry-free search choice points that are symmetric to one that was expanded
tree (which corresponds to the GE-trees in [Roney-Dougal et previously to B.
al., 2004]). We distinguish the two types of ﬁltering by nam- With Theorem 1, the runtime needed for the initial value-
                                                                                        2.5
ing them differently: symmetric-ancestor based ﬁltering and matching algorithm is bounded by O(m + mn). We can
symmetric-sibling based ﬁltering.                     also prove that a ﬁltering algorithm can be formulated that,
                                                      once the matching is computed, runs in time O(m2 + mn).4
Symmetric-Ancestor based Filtering                    Therefore, since within SBDD at most n(m − 1) ancestor
The goal of symmetric-ancestor based ﬁltering is to shrink nodes need to be considered, we can prove the following:
the domains such that instantiating a variable with one of its
domain values will not result in the creation of a search node Theorem 2
that is symmetric to one that was previously expanded. Given a CSP with partially symmetric single-valued vari-
                                                      ables and partially symmetric values, we can achieve
Deﬁnition 6                                           ancestor-symmetry resistance for a given search node in time
Given a depth-ﬁrst-search tree T ,3 we say that a choice point
                                                      O(nm3.5 + n2m2).
B (associated with its homonymous assignment B that cap-
tures previously committed unary branching decisions) is Symmetric-Sibling based Filtering
ancestor-symmetry resistant iff for all previously fully ex-
                                                      To achieve full symmetry prevention, we also need to guar-
panded nodes A ∈ T (A is called an ancestor of B) and for
                                                      antee that newly created siblings are not symmetric to each
all variables X and values v ∈ D(X) it holds that A does not
                                                      other. Therefore, after we choose the next variable to be as-
dominate B ∪ {(X, v)}.
                                                      signed, but before we branch on it, we need to perform one
  Assume that we are currently investigating choice point B more “ﬁltering” step (it is actually more of an implicit prun-
and that A is some ancestor node that does not dominate B. ing step) where we choose a single representative value out
Observe that instantiating one more variable X ∈ Pk for of each equivalence class of values which, when assigned to
some k by setting X 7→ w ∈ Ql for some l will change only the chosen variable, would result in the creation of symmetric
the signature of w from sigB(w) to sigB(w) + ek, where choice points. Due to the fact that, whenever a sibling dom-
ek denotes the unit vector with a 1 in the kth component. inates another, they both must already be structurally equiv-
        0
We set B  := B ∪ {(X, w)}. Then, D1 := DDG(A, B)      alent (see Deﬁnition 4), we can avoid producing symmetric
                                                      siblings simply by choosing exactly one representative value
  2With ’ﬁltering’, we refer to the idea of domain reduction in CP;
’pruning’ refers to the detection of a sufﬁcient reason to backtrack. 4Again, the main technical idea consists in the use of sparse sig-
  3In the interest of space, we must omit a formal deﬁnition of a natures. The proof of the complexity is not particularly insightful
search tree here. The meaning should become clear from the context. but lengthy, which is why we leave it out here.among those that are structurally equivalent. The complex- Proof: We reduce the problem to subgraph-isomorphism. In
ity of this ﬁltering step is dominated by that of symmetric- order to apply Theorem 3, we need to ensure that both graphs
ancestor based ﬁltering.                              operate over the same set of nodes. In case that the set of
  Putting ancestor and sibling-based ﬁltering together, we nodes of the given graphs differ, it is easy to see that G1 can-
have completed our development of an effective symmetry not be sub-isomorphic to G2 if G1 contains more nodes than
breaking algorithm for CSPs with partial single-valued vari- G2. In case that G1 actually contains fewer nodes than G2,
able and value symmetry that runs in polynomial time. Note it is easy to see that we can add isolated nodes to G1 without
that the practical performance of the algorithms sketched can affecting subgraph-isomorphism. Then, we have that both
be enhanced in practice: for example, it is fully sufﬁcient graphs contain the same number of nodes, and by relabelling
to check against previously expanded nodes for which an the nodes in both graphs, we may assume that both graphs
m − 1 − h-maximum matching was found only after vari- operate on the same set of nodes.
able instantiations to h different values have been committed. Note that, despite this negative result, in some important
And as usual, by considering incremental updates of match- special cases the symmetry detection problem for CSPs with
ings, memory can be traded for cpu-time.              partially symmetric set variables and values is still tractable.
                                                      For instance, when the set variables cannot overlap, the algo-
5  Limits of Efﬁcient Dominance Detection             rithm developed in Section 3 can be adapted easily (by sim-
                                                      ply exchanging the roles of values and variables) to break all
After having developed a polynomial symmetry breaking al- symmetries efﬁciently.
gorithm for CSPs with partially symmetric single-valued vari-
ables in the presence of partial value symmetry, we now show Corollary 2
that dominance detection for partially symmetric set variables The dominance detection problem over partially symmetric
in the presence of partial value symmetry is NP-hard. More non-overlapping set variables and partially symmetric values
precisely, we reduce the corresponding dominance detection is tractable.
problem to subgraph-isomorphism.
  In order to achieve the desired reduction we construct a Note that the dominance detection problem as we consider
set-assignment from a graph in the following way:     it here regards arbitrary assignments. This implies that, when
                                                      the detection problem is tractable, we can break symmetries
Deﬁnition 7                                           efﬁciently. However, the situation changes when we achieve
Given an undirected graph G = (V, E) with c := |V |,  an intractability result like the previous one: Within meth-
we deﬁne a set of symmetric values N := {n , ..., n }, ods like SBDD the assignments that need to be compared can
                                          1     c     only differ in a rather speciﬁc fashion. We can also show that
and a set of symmetric variables P := {pij|{i, j} ∈ E}.
Then, the set-assignment A(G) is deﬁned as A(G) :=    these more speciﬁc dominance detection problems are NP-
{(p , {n , n }) | {i, j} ∈ E}.                        hard as well, therefore proving that SBDD in its general form
   ij  i  j                                           is incapable of breaking symmetries in partially symmetric
                                                      set-CSPs efﬁciently. However, we would like to stress that
Theorem 3                                             this result does not imply that symmetry breaking is NP-hard
Given two undirected graphs G1 = (V, E1) and G2  =    in general since we do not consider other methods here like
(V, E2), G1 is sub-isomorphic to G2 iff A(G1) dominates remodeling or the adaption of the branching scheme.
A(G2) when all variables and values are considered to be
symmetric.                                            6   Higher Forms of Symmetry

Proof: We start by showing that A(G1) dominates A(G2) Note that our intractability proof above shows that dominance
if G1 is sub-isomorphic to G2. Let σ : V  7→ V  bi-   detection over symmetric set variables and symmetric values
jective such that {i, j} ∈ E1 implies {σ(i), σ(j)} ∈  is already NP-hard when there exists only one set of symmet-
E2. Then, for all (pij , {ni, nj}) ∈ A(G1) it holds that ric set variables and one set of symmetric values. Clearly,
(pσ(i),σ(j), {nσ(i), nσ(j)}) ∈ A(G2). Therefore, A(G1) the problem stays NP-hard when we allow partial symmetry.
                                                      Partial symmetry is very helpful when even more complicated
dominates A(G2).
  Now let us assume that A(G ) dominates A(G ). Then, forms of symmetry need to be handled. Consider for example
                          1               2           the Social Golfer Problem (SGP):
there exist functions π : E1 7→ E2 and α : V 7→ V such that
(pij , {ni, nj }) ∈ A(G1) implies (pπ({i,j}), {nα(i), nα(j)}) ∈ 32 golfers want to play in 8 groups of 4 each week,
A(G2).  By construction of A(G2), this is equivalent to   such that any two golfers play in the same group at
                                                                                                    5
{nα(i), nα(j)} ∈ E for all {i, j} ∈ E. Thus, α is a sub-  most once. How many weeks can they do this for?
isomorphism between G1 and G2.                          The problem can be generalized by parameterizing it to g
  With Theorem 3, it is easy to prove the following   groups of s players each, playing for w weeks (instances are
                                                      usually written in g-s-w-format). A common model for the
                                                      problem introduces a set variable for each group, so that intra-
Corollary 1                                           group symmetries are broken automatically. Groups within
The dominance detection problem over partially symmetric
set variables and partially symmetric values is NP-hard. 5Problem 10 in CSPLib - http://www.csplib.org/.