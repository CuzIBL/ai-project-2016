                        Conﬂict Directed Backjumping for Max-CSPs∗
                                    Roie Zivan and Amnon Meisels,
                                   Department of Computer Science,
                                  Ben-Gurion University of the Negev,
                                       Beer-Sheva, 84-105, Israel


                    Abstract                          constraints violated by the solution (in Max-CSPs all weights
                                                      are equal to 1). The requirement in solving WCSPs is to ﬁnd
    Max-CSPs  are Constraint Optimization Problems    the minimal cost (optimal) solution. WCSPs and Max-CSPs
    that are commonly solved using a Branch and       are therefore termed Constraint Optimization Problems.
    Bound algorithm. The  &    algorithm was en-
                         B  B                           In this paper we focus for simplicity on Max-CSPs. Max-
    hanced by consistency maintenance procedures
                                                      CSP is an optimization problem with a search tree of bounded
    [Wallace and Freuder, 1993; Larrosa and Meseguer,
                                                      depth. Like other such optimization problems, the common
    1996; Larrosa et al., 1999; Larrosa and Schiex,
                                                      choice for solving it is to use a Branch and Bound algo-
    2003; 2004]. All these algorithms traverse the
                                                      rithm [Dechter, 2003]. In the last decade, various algorithms
    search space in a chronological order and gain their
                                                      were developed for Max and Weighted CSPs [Wallace and
    efﬁciency from the quality of the consistency main-
                                                      Freuder, 1993; Larrosa and Meseguer, 1996; Larrosa et al.,
    tenance procedure.
                                                      1999; Larrosa and Schiex, 2004]. All of these algorithms
    The present study introduces Conﬂict-directed     are based on standard backtracking and gain their efﬁciency
    Backjumping (CBJ) for Branch and Bound algo-      from the quality of the consistency maintenance procedure
    rithms. The proposed algorithm maintains Con-     they use. In [Larrosa and Schiex, 2004], the authors present
    ﬂict Sets which include only assignments whose re- maintenance procedures of local consistency levels, NC* and
    placement can lead to a better solution. The algo- AC*, which improve on former versions of Node-consistency
    rithm backtracks according to these sets. CBJ can and Arc-consistency. An improved result for Max-CSPs was
    be added to all classes of the Branch and Bound   presented in [Larrosa and Schiex, 2003]. This result was
    algorithm, in particular to versions of Branch    achieved by enforcing extended consistency which generates
    &
      Bound that use advanced maintenance proce-      larger lower bounds.
                                    ∗     ∗
    dures of local consistency levels, NC , AC and      The present paper improves on previous results by adding
           [                            ]
    FDAC    Larrosa and Schiex, 2003; 2004 . The      Conﬂict-directed Backjumping (CBJ) to the B&B algo-
    experimental evaluation of B&B CBJ on random      rithms presented in [Larrosa and Schiex, 2004] and in [Lar-
    Max-CSPs shows that the performance of all algo-  rosa and Schiex, 2003]. Conﬂict-directed Backjumping
    rithms is improved both in the number of assign-  (CBJ) [Prosser, 1993] is a method which is known to improve
    ments and in the time for completion.             standard CSP algorithms [Dechter, 2003; Ginsberg, 1993;
                                                      Kondrak and van Beek, 1997; Chen and van Beek, 2001].In
1  Introduction                                       order to perform standard CBJ, the algorithm stores for each
                                                      variable the set of assignments which caused the removal of
In standard CSPs, when the algorithm detects that a solution values from its domain. When a domain empties, the algo-
to a given problem does not exist, the algorithm reports it and rithm backtracks to the last assignment in the corresponding
the search is terminated. In many cases, although a solution conﬂict set [Chen and van Beek, 2001; Dechter, 2003].
does not exist we wish to produce the best complete assign-
                                                        One previous attempt at conﬂict directed B&B used rea-
ment, i.e. the assignment to the problem which includes the
                                                      soning about conﬂicts during each forward search step [Li
smallest number of conﬂicts. Such problems form the scope
                                                      and Williams, 2005]. Conﬂicts were used in order to guide
of Max-CSPs [Larrosa and Meseguer, 1996]. Max-CSPs are
                                                      the forward search away from infeasible and sub-optimal
a special case of the more general Weighted CSPs (WC-
                                                      states. This is in contrast to the use of conﬂict reasoning for
SPs) [Larrosa and Schiex, 2004] in which each constraint is
                                                      backjumping proposed in the present paper. Another attempt
assigned a weight which deﬁnes its cost if it is violated by a
                                                      to combine conﬂict directed (intelligent) backtracking with
solution. The cost of a solution is the sum of the weights of all
                                                      B&B   was reported for the Open-Shop problem [Gueret´ et
  ∗The research was supported by the Lynn and William Frankel al., 2000]. The algorithm proposed in [Gueret´ et al., 2000]
Center for Computer Science, and by the Paul Ivanier Center for is speciﬁc to the problem. Similarly to CBJ for standard
Robotics.                                             CSPs, explanations for the removal of values from domains

                                                IJCAI-07
                                                   198are recorded and used for resolving intelligently the backtrack B&B
                                                      1. current state ← initial state;
destination.                                                  ←
  Performing back-jumping for Max-CSPs is more compli- 2. CPS    empty assignment;
                                                      3. i ← 0;
cated than for standard CSPs. In order to generate a consistent 4. while(i ≥ 0)
conﬂict set, all conﬂicts that have contributed to the current 5. if(i = n)
lower bound must be taken into consideration. Furthermore, 6. upper bound ← lower bound;
additional conﬂicts with unassigned values of equal or higher 7. i ← i − 1;
costs must be added to the conﬂict set in order to achieve 8. else foreach (a ∈ Di)
completeness.                                         9.     temp state ← current state;
  The required information needed for the detection of the 10. update state(temp state, i, a);
culprit variables that will be the targets for the algorithm 11. if(local consistent(temp state))
                                                      12.      states[i] ← current state;
backjumps is polynomial. The maintenance of the data struc-                ←
tures does not require additional iterations of the algorithm. 13. current state temp state;
                                                      14.      i ← i +1;
  The results presented in this paper show that as reported 15. i ← ﬁnd culprit variable();
for standard CSPs by [Chen and van Beek, 2001], the im- 16. current state ← states[i];
provement in run-time is dependent on the degree of the con-
sistency maintenance procedure. However, the factor of im- update state(temp state, i, val)
provement in the number of assignments when using CBJ is 17. add (i, val) to temp state.CP S;
consistent and large.                                 18. temp state.CP S.cost ← temp state.CP S.cost + cost(i, val);
  Max-CSPs are presented in Section 2. A description of the 19. for j ← (i +1)to (n − 1)
                                                      20.  foreach (a ∈ temp state.Dj )
standard B&B algorithm along with the maintenance proce-                   
dures NC∗, AC∗ and FDAC  is presented in Section 3. Sec- 21. if(conﬂicts( i, val , j, a ))
                                                      22.    cost(a, i) ← cost(a, i)+1;
tion 4 presents the CBJ algorithm for B&B with NC∗, AC∗
and FDAC. An extensive experimental evaluation, of the           Figure 1: Standard B&B algorithm
contribution of conﬂict directed backjumping to B&B with state of the algorithm will be set to the state which was stored
NC∗, AC∗  and FDAC, is presented in Section 5. Our con- before the culprit assignment was performed. The space com-
clusions are in Section 6.                            plexity stays the same as in the recursive procedure case, i.e.
                                                      larger than a single state by a factor of n. For simplicity of
2  Max Constraint Satisfaction Problems               presentation we use a ﬁxed order of variables and the function
                                                      ﬁnd culprit variable simply returns i − 1.
A Max - Constraint Satisfaction Problem (Max-CSP)is                            &
composed, like standard CSP, of a set of n variables    The naive and exhaustive B B algorithm can be improved
                                                      by increasing the level of the maintained local consistency.
X1,X2, ..., Xn. Each variable can be assigned a single
                                                      As a result, the value of the lower bound of a current partial
value from a discrete ﬁnite domain {D1,D2, ..., Dn} respec-
tively. Similarly to former studies of Max-CSPs [Larrosa and solution is increased. After each assignment, the algorithm
Meseguer, 1996; Larrosa et al., 1999; Larrosa and Schiex, performs a consistency maintenance procedure that updates
2003], we assume that all constraints are binary. A binary the costs of potential future assignments and increases its
                                                      chance to detect early a need to backtrack. Three of the most
constraint Rij between any two variables Xj and Xi is a sub-
                                                      successful consistency check functions are described next.
set of the Cartesian Product of their domains; Rij ⊆ Dj ×Di.
                                       
  An assignment (or a label) is a pair var, val , where var 3.1 Node Consistency and NC*
is a variable and val is a value from var’s domain that is
assigned to it. A partial solution is a set of assignments of Node Consistency is a very standard consistency mainte-
values to variables. The cost of a partial solution in a Max- nance method (analogous to Forward-checking in standard
                                                             [           ]
CSP is the number of constraints violated by it (conﬂicts). CSPs) Dechter, 2003 . The main idea is to ensure that in the
An optimal solution to a Max-CSP is a partial solution that domains of each of the unassigned variables there is at least
includes all variables and which includes a minimal number one value which is consistent with the current partial solution
of unsatisﬁed constraints, i.e. a solution with a minimal cost. (CPS). For each value in a domain of an unassigned vari-
                                                      able, one must determine whether assigning it will increase
                                                      the lower bound beyond the limit of the upper bound.To
3  The Branch and Bound algorithm                     this end, the algorithm maintains for every value a cost which
Optimization problems with a ﬁnite search-space are often is its number of conﬂicts with assignments in the CPS.
solved by a Branch and Bound (B&B) algorithm. Both    After each assignment, the costs of all values in domains
Weighted CSPs and Max-CSPs fall into this category.   of unassigned variables are updated. When the sum of a
  The B&B  algorithm is presented in Figure 1. The gen- value’s cost and the cost of the CPS is higher or equal to
eral structure of the algorithm is different than its recursive the upper bound, the value is eliminated from the variable’s
presentation in [Larrosa and Schiex, 2004]. In order to be domain. An empty domain triggers a backtrack.
able to perform backjumping, we need an iterative formula- The down side of this method in Max-CSPs is that the
tion (cf. [Prosser, 1993]). We use an array of states which number of conﬂicts counted and stored as the value’s cost,
hold for each successful assignment the state of the algorithm does not contribute to the global lower bound and it affects
before it was performed. After each backtrack the current the search only if it exceeds the upper bound.In[Larrosa

                                                IJCAI-07
                                                   199NC*(i)                                                  For a detailed description of FDAC and demonstrations
1. for j ← (i +1)to(n − 1)
        ←         (  )                                of how FDAC   increases the lower bound, the reader is re-
2.    cj  min  cost Dj ;                              ferred to [Larrosa and Schiex, 2003].
3.    foreach (a ∈ Dj )
4.       a.cost ← a.cost − cj ;
5.    Cφ ← Cφ + cj ;                                  4   Branch and Bound with CBJ
6.            ←          +  φ;
   lower bound  CPS.cost   C                          The use of Backjumping in standard CSP search is known
7. for j ← (i +1)to(n − 1)
8.    foreach (a ∈ Dj )                               to improve the run-time performance of the search by a
9.       if(a.cost + lower bound ≥ upper bound)       large factor [Prosser, 1993; Kondrak and van Beek, 1997;
10.        Dj ←  Dj \ a;                              Dechter and Frost, 2002; Chen and van Beek, 2001]. Con-
11. return (lower bound < upper bound);               ﬂict directed Backjumping (CBJ) maintains a set of conﬂicts
               Figure 2: Standard NC*                 for each variable, which includes the assignments that caused
                                                      a removal of a value from the variable’s domain. When a
and Schiex, 2004], the authors suggest an improved version backtrack operation is performed, the variable that is selected
of Node Consistency they term NC*.InNC* the algorithm as the target, is the last variable in the conﬂict set of the back-
maintains a global cost Cφ which is initially zero. After every tracking variable. In order to keep the algorithm complete
assignment, all costs of all values are updated as in standard during backjumping, the conﬂict set of the target variable, is
NC. Then, for each variable, the minimal cost of all values in updated with the union of its conﬂict set and the conﬂict set
its domain, ci, is added to Cφ and all value costs are decreased of the backtracking variable [Prosser, 1993].
by ci. This means that after the method is completed in every The data structure of conﬂict sets which was described
step, the domain of every unassigned variable includes one above for CBJ on standard CSPs can be used for the B&B
value whose cost is zero. The global lower bound is calcu- algorithm for solving Max-CSPs. However, additional as-
lated as the sum of the CPS’s cost and Cφ.            pects must be taken into consideration for the case of Max-
  Any value whose  lower bound, i.e. the sum of the   CSPs.
CPS’s cost, Cφ and its own cost, exceeds the limit of the In the description of the creation and maintenance of a con-
upper bound, is removed from the variable’s domain as in sistent conﬂict set in a B&B algorithm the following deﬁni-
standard NC [Larrosa and Schiex, 2004].               tions are used:
  The NC∗  consistency maintenance function is presented
                                                      Deﬁnition 1 A global conflict set (GCS) is the  set
in Figure 2.
                                                      of assignments whose  replacement can  decrease the
3.2  Arc Consistency and AC*                          lower bound.
A stronger consistency maintenance procedure which is Deﬁnition 2 The current cost of a variable is the cost of its
known  to be effective for CSPs  is Arc Consistency   assigned value, in the case of an assigned variable, and the
(AC) [Bessiere and Regin, 1995].                      minimal cost of a value in its current domain in the case of
                                                      an unassigned variable.
  In Max-CSPs, a form of Arc-Consistency is used to project

costs of conﬂicts between unassigned variables [Larrosa and Deﬁnition 3 A conflict list of value vij ∈ Di,is
Meseguer, 1996; Larrosa et al., 1999; Larrosa and Schiex, the ordered list of assignments of variables in the
2003; 2004]. AC∗  combines the advantages of AC and   current partial solution, which were assigned before vari-
   ∗
NC  . After performing AC, the updated cost of the values able i, and which conﬂict with vij .
are used by the NC∗ procedure to increase the global cost
                                                      Deﬁnition 4 The conflict set of variable Xi with cost ci is
Cφ. Values are removed as in NC∗ and their removal initi-
                                                      the union of the ﬁrst (most recent) ci assignments in each of
ates the rechecking of AC. The system is said to be AC∗ if
                                                      the conflict lists of all values of Xi (if the conflict list of
it is both AC and NC∗ (i.e. each domain has a value with a
                                                      a value is shorter than ci then all its assignments are included
zero cost) [Larrosa and Schiex, 2004].
                                                      in the variables’ conflict set).
3.3  Full Directed Arc Consistency                      In the case of simple B&B, the global conflict set is the
The FDAC    consistency method enforces a stronger ver- union of all the conflict sets of all assigned variables. Val-
sion of Arc-Consistency than AC∗ (cf. [Larrosa and Schiex, ues are always assigned using the min-cost heuristic i.e. the
2003]). Consider a CSP with an order on its unassigned vari- next value to be assigned is the value with the smallest cost
                                                      in the variable’s current domain. Before assigning a variable
ables. If for each value vali of variable Vi, in every domain
                       k                              the cost of each value is calculated by counting the number of
of an unassigned variable Vj which is placed after Vi in the
                                                      conﬂicts it has with the current partial solution. Next, the
order, a value valj has a cost of zero and there is no binary
               s                                      variable’s current cost is determined to be the lowest cost
constraint between valik and valjs , we say that the CSP is in
a DAC  state. A CSP is in a FDAC state if it is both DAC among the values in its current domain. As a result, the
and AC∗. 1                                            variable’s conflict set is generated. The reason for the need
                                                      to add the conﬂicts of all values to a variable’s conflict set
  1The code for the AC∗ and FDACprocedures is not used in this and not just the conﬂicts of the assigned value, is that all the
paper therefore the reader is referred to [Larrosa and Schiex, 2003; possibilities for decreasing the minimal number of conﬂicts
2004].                                                of any of the variables’ values must be explored. Therefore,

                                                IJCAI-07
                                                   200update state(i, val)
1. add (i, val) to CPS;
2. CPS.cost ← CPS.cost + cost(i, val);
3. foreach(a ∈ Di)
4.   for 1 to val.cost
5.     GCS  ← GCS  ∪ first element in a.conflict list;
6.     remove first element from a.conflict list
7. for j ← (i +1)to (n − 1)
8.   foreach (a ∈ Dj )
9.   if(conﬂicts(i, val, j, a)
10.    a.cost ← a.cost +1;
11.    a.conflict list ← a.conflict list ∪ (i, val);      Figure 5: A conﬂict set of an unassigned variable
ﬁnd culprit variable(i)
                                                      However, replacing the current assignment of X2 can lower
12. if(GCS = φ)
13.  return −1;                                       the cost of value v2 of variable X3.
14. culprit ← latest assignment in GCS;
15. GCS ← GCS  \ culprit;                             4.1  Node Consistency with CBJ
16. return culprit;                                   In order to perform CBJ in a B&B algorithm that uses node
                                                      consistency maintenance, the conflict sets of unassigned
 Figure 3: The changes in B&B required for backjumping
                                                      variables must be maintained. To achieve this goal, for every
                                                      value of a future variable a conflict list is initialized and
                                                      maintained. The conflict list includes all the assignments
                                                      in the CPS which conﬂict with the corresponding value. The
                                                      length of the conflict list is equal to the cost of the value.
                                                      Whenever NC∗   adds the cost ci of the value with minimal
                                                      cost in the domain of Xi to the global cost Cφ, the ﬁrst ci
                                                      assignments in each of the conflict lists of Xi’s values are
                                                      added to the global conﬂict set and removed from the value’s
                                                      conflict lists. This includes all the values of Xi including
                                                      the values removed from its domain. Backtracking to the head
     Figure 4: A conﬂict set of an assigned variable
                                                      of their list can cause the return of removed values to the vari-
the latest assignment that can be replaced, and possibly de- ables current domain. This means that after each run of the
crease the cost of one of the variables values to be smaller NC∗ procedure, the global conﬂict set includes the union of
than the variable’s current cost must be considered.  the conﬂict sets of all assigned and unassigned variables.
  Figure 3 presents the changes needed for adding CBJ to Figure 5 presents the state of an unassigned variable Xi.
standard B&B. After a successful assignment is added to the The CPS includes the assignments of three variables as in
CPS, its cost is added to the cost of the CPS (lines 1,2). the example in Figure 4. Values v1 and v3 of variable Xi
Then, the added cost, val.cost is used to determine which as- are both in conﬂict only with the assignment of variable X1.
signments are added to the global conﬂict set (GCS). For Value v2 of Xi is in conﬂict with the assignments of X2 and
each of the values in the domain of variable i, the ﬁrst X3. Xi’s cost is 1 since that is the minimal cost of its values.
val.cost assignments are removed and added to the GCS Its conﬂict set includes the assignments of X1 since it is the
(lines 3-6). As a result, when performing a backjump, all that ﬁrst in the conflict list of v1 and v3, and X2 since it is the
is left for function ﬁnd culprit variable to do is to return the ﬁrst in the conflict list of v2. After the NC∗ procedure, Cφ
latest assignment (the one with the highest variable index) in will be incremented by one and the assignments of X1 and
the GCS (lines 14-16). In case the GCS is empty, function X2 will be added to the global conﬂict set.
ﬁnd culprit variable returns −1 and as a result, terminates Figure 6 presents the changes in NC∗ that are required for
the algorithm (lines 12,13).                          performing CBJ. For each value whose cost is decreased by
  The space complexity of the overhead needed to perform the minimal cost of the variable, cj, the ﬁrst cj assignments
CBJ in B&B is simple to bound from above. For a CSP with in its conflict list are removed and added to the global con-
n variables and d values in each domain, the worst case is that ﬂict set (lines 5-7). Note that the revised procedure uses the
for each value the algorithm holds a list of O(n) assignments. conflict lists of removed values as well as of remaining val-
                                                                                           ˆ
This bounds the space complexity of the algorithm’s state by ues. For each domain Di an additional set, Di is maintained,
   2
O(n d). Since we hold up to n states, the overall space used which holds the values that were removed from Di.
is bounded by O(n3d).
  Figure 4 presents the state of three variables which are in- 4.2 AC* and FDAC with CBJ
cluded in the current partial solution. Variables X1, X2 and Adding CBJ to a B&B algorithm that includes arc-
X3 were assigned values v1, v2 and v1 respectively. All costs consistency is very similar to the case of node consistency.
of all values of variable X3 are 1. The conflict set of vari- Whenever a minimum cost of a future variable is added to the
able X3 includes the assignments of X1 and X2 even though global cost Cφ, the preﬁxes of all of its values’ conflict lists
its assigned value is not in conﬂict with the assignment of X2. are added to the global conflict set. However, in AC∗, costs

                                                IJCAI-07
                                                   201NC* BJ(i)
1. for j ← (i +1)to (n − 1)
2.   cj ← min cost(Dj );
                     ˆ
3.   foreach (a ∈ (Dj ∪ Dj ))
4.     a.cost ← a.cost − cj ;
5.     for 1 to cj
6.        GCS  ←  GCS∪  first element in a.conflict list;
7.        remove first element from a.conflict list;
8.   Cφ ← Cφ + cj ;
9. lower bound ← CPS.cost + Cφ;
10. for j ← (i +1)to(n − 1)                           Figure 7: Assignments and Run-time of NC* and NC* CBJ
11.  foreach (a ∈ Dj )                                (p1 = 0.4)
12.    if(a.cost + lower bound ≥ upper bound)
         ˆ     ˆ
13.      Dj ← Dj ∪ a;
14.      Dj ← Dj \ a;
15. return (lower bound < upper bound);
       Figure 6: Changes in NC∗ that enable CBJ
of values can be incremented by conﬂicts with other unas-
signed values. As a result, the cost of a variable may be larger
than the length of its conflict list. In order to ﬁnd the right
conﬂict set in this case one must keep in mind that except
                                                      Figure 8: Assignments and Run-time of AC* and AC* CBJ
for an empty CPS, a cost of a value vk of variable Xi is in-
creased due to arc-consistency only if there was a removal of (p1 = 0.4)
                                k
a value which is not in conﬂict with v , in some other unas- and tightness p2 (which are commonly used in experimental
signed variable Xj. This means that a removal of the last evaluations of Max-CSP algorithms [Larrosa and Meseguer,
assignment in the CPS would return the value which is not 1996; Larrosa et al., 1999; Larrosa and Schiex, 2004]). In
in conﬂict with vk, to the domain of Xj. Whenever a cost of all of the experiments the Max-CSPs included 10 variables
a value is raised by arc-consistency, the last assignment in the (n =10) and 10 values for each variable (k =10). Two
CPS  must be added to the end of the value’s conflict list. values of constraint density p1 =0.4 and p1 =0.9 were
This addition restores the correlation between the length of used to generate the Max-CSPs. The tightness value p2,
the conflict list and the cost of the value. The variable’s was varied between 0.7 and 0.98, since the hardest instances
conflict set and the global conﬂict set can be generated in                    [
                    ∗                                 of Max-CSPs are for high p2 Larrosa and Meseguer, 1996;
the same way as for NC .                              Larrosa et al., 1999]. For each pair of ﬁxed density and tight-
  Maintaining a consistent conflict set in FDAC is some-    1  2
                 ∗                                    ness (p , p ), 50 different random problems were solved by
what similar to AC . Whenever a cost of a value is ex- each algorithm and the results presented are an average of
tended to a binary constraint, its cost is decreased and its these 50 runs.
conflict list is shortened. When a binary constraint is pro- In order to evaluate the contribution of CBJ to B&B algo-
jected on a value’s cost, the cost is increased and the last rithms using consistency maintenance procedures, the B&B
assignment in the CPS is added to its conflict list. Cau- algorithm with NC∗, AC∗ and FDAC was implemented.
tion must be taken when performing the assignment since the The results presented show the performance of these algo-
constant change in the cost of values may interfere with the rithms with and without CBJ. The NC∗ procedure was tested
min-cost order of selecting values. A simple way to avoid
                                                      only for low density problems p1 =0.4, since it does not
this problem is to maintain for each value a different cost
                                                      complete in a reasonable time for p1 =0.9.
which we term priority cost.Thepriority cost is updated The left hand side (LHS) of Figure 7 presents the num-
whenever the value’s cost is updated except for updates per- ber of assignments performed by NC* and NC* CBJ. For the
formed by the DAC procedure. When we choose the next
                                                      hardest instances, where p2 is higher than 0.9, NC* CBJ out-
value to be assigned we break ties of costs using the value of
                                                      performs NC* by a factor of between 3 at p2 =0.92 and 2
the priority cost.
                                                      at p2 =0.99. The right hand side (RHS) of Figure 7 shows
                                                      similar results for cpu-time.
5  Experimental Evaluation                              The LHS of Figure 8 presents the number of assignments
The common approach in evaluating the performance of CSP performed by AC* and AC* CBJ. For the hardest instances,
algorithms is to measure time in logic steps to eliminate im- where p2 is higher than 0.9, AC* CBJ outperforms AC* by
plementation and technical parameters from affecting the re- a factor of 2. The RHS of Figure 8 presents the result in
sults. Two measures of performance are used by the present cpu-time which are similar but the difference is smaller than
evaluation. The total number of assignments and cpu-time. for the number of assignments. Note that both performance
This is in accordance with former work on Max-CSP algo- measures decrease for p2 values above 0.98 for AC* CBJ.
rithms [Larrosa and Schiex, 2003; 2004].              This demonstrates a phase transition [Larrosa and Meseguer,
  Experiments were conducted on random CSPs of n vari- 1996; Larrosa and Schiex, 2004].
ables, k values in each domain, a constraint density of p1 Figure 9 presents similar results for the AC* algorithm

                                                IJCAI-07
                                                   202