   Algorithms for Identifying Rigid Subsystems in Geometric Constraint Systems 

                      Christophe Jermann                     Bertrand Neveu and Gilles Trombettoni 
                              AI Lab.                      COPRIN Team, INRIA-I3S/CNRS-CERM1CS, 
                      EPFL, 1015 Lausanne                           2004 route des lucioles, BP 93, 
                            Switzerland                             06902 Sophia Antipolis, France 
              e-mail: Christophe . Jermann@epf1. ch            e-mail: Bertrand. Neveu@sophia . inria . fr, 
                                                                    Gilles.Trombettoni©sophia.inria.fr 

                        Abstract                              like ad-hoc geometric rules, have been proposed to enhance 
                                                              structural rigidity capabilities, none of which succeeded to 
     The structural rigidity property, a generalization 
                                                              cover the gap between structural rigidity and rigidity. In [Jer•
     of Laman's theorem which characterizes rigid bar 
                                                              mann et al, 2002], we have defined the extended structural 
     frameworks in 2D, is generally considered a good 
                                                              rigidity, a new approximation of rigidity which supersedes 
     approximation of rigidity in geometric constraint 
                                                              even the heuristically enhanced characterizations. 
     satisfaction problems (GCSPs). However, it may 
                                                                 In this paper, we focus on the algorithmic aspects of the 
     fail even on simple GCSPs because it does not take 
                                                              structural characterization of rigidity. [Hoffmann et ai, 1997] 
     geometric properties into account. 
                                                              have proposed a flow-based algorithm called Dense for this 
     In this paper, we question the flow-based algorithm      purpose. After providing the necessary background (Sec•
     used by Hoffmann et ai to identify rigid subGC-          tion 2), we exemplify the limits of this algorithm and the ca•
     SPs. We show that this algorithm may fail because        pabilities of our new algorithm (Section 3). Section 4 presents 
     of the structural rigidity, but also by design. We in-   the specificities of our new algorithm and explains its advan•
     troduce a new flow-based algorithm which uses Jer•       tages: it uses the extended structural rigidity instead of the 
     mann et al.'S characterization of rigidity. We show      structural rigidity and it is designed in a geometrically cor•
     that this algorithm is correct in 2D and 3D, and can     rect way. To conclude, we explain how this algorithm can be 
     be used to tackle the major issues related to rigid•     used to tackle the major issues related to rigidity. 
     ity: deciding whether a GCSP is rigid or not and 
     identifying rigid (or over-rigid) subGCSPs.              2 Background 
     Keywords: Geometric Constraints, Rigidity char•
     acterization, Flow algorithms                            This section provides the necessary background for the pa•
                                                              per. It formally defines GCSPs, the rigidity concept and the 
1 Introduction                                                structural characterizations of rigidity. 
Geometric constraint satisfaction problems (GCSPs) arise 
naturally in several areas, such as CAD, robotics and molec•
ular biology. The rigidity concept is in the heart of many of 
these problems: deciding whether a GCSP is rigid or not, de•
tecting rigid or over-rigid sub-parts, and so on. 
  Several methods [Kramer, 1992; Bouma et ai, 1995; 
Dufourd et ai, 1998; Lamure and Michelucci, 1998; Hoff•
mann et ai, 2000; Jermann et ai, 2000; Jermann, 2002] for 
solving GCSPs have to deal with rigidity; e.g., geometric 
decompositions produce sequences of rigid subGCSPs to be 
solved separately and then assembled. 
  The techniques used for rigidity detection can be classi•
fied in two categories: pattern-based approaches [Bouma et 
al, 1995; Kramer, 1992] depend on a repertoire of rigid 
bodies of known shape which cannot cover all practical 
instances; flow-based approaches [Hoffmann et ai, 1997; 
Lamure and Michelucci, 1998] use flow (or maximum match•
ing) machinery to identify subGCSPs verifying the structural 
rigidity, a property based on a degree of freedom count. 
  The latter approaches are more general eventhough struc•       Fig. 1-a presents a GCSP in 2D composed of 3 lines con•
tural rigidity is only an approximation of rigidity. Heuristics, strained by 2 parallelisms and 2 line-line distances; Fig. 1-b 


CONSTRAINTS                                                                                                          233  depicts a GCSP in 3D composed of 1 line and 5 points bound 
 by 4 point-line incidences and 5 point-point distances. 
   We assume that geometric objects are indeformable (e.g., 
 no circle with variable radius). Also geometric constraints 
 must involve only positions and orientations of the objects 
 and they must be independent from the global reference sys•
 tem (i.e., constraints only fix objects relatively one to an•
 other). These limitations make the structural characteriza•
 tions of rigidity easier and are mandatory for geometric solv•
 ing methods based on rigidity. 
   According to these restrictions, a solution to a GCSP S — 
 (0, C) is composed of one position and orientation for each 
 object in O and satisfies all the constraints in C. For the solv•
 ing purpose, a GCSP is translated into a system of equations: 
 each object is represented by a set of unknowns (over the re•
 als) which determine its position and orientation; each con•
 straint becomes a system of equations on the unknowns of 
 the objects it constrains. 
 2.2 Rigidity 
                                                               2.4 Extended Structural Rigidity 
 Rigidity is defined w.r.t. movements. A movement in a 
                                                               The extended structural rigidity (es__rigidity in short) is based 
 GCSP is either a deformation (if it does not preserve the 
                                                               on the degree of rigidity (DOR) concept. The DOR of a sub•
 relative positions of the objects) or a displacement (rota•
                                                               GCSP is the number of independent displacements it admits; 
 tion+ translation). Intuitively, a GCSP is rigid if it admits 
                                                               it depends on the geometric properties it verifies. For exam•
 no deformation, and all the displacements of the geometric 
                                                               ple, the DOR of two lines in 2D is 3 if they are not parallel, 2 
 space. It is under-rigid if it admits some deformations, and 
                                                               if they are parallel; the parallelism property can be an explicit 
 over-rigid if it does not admit some displacements or has no 
                                                               constraint, but it can also be induced by the constraints of the 
 solution. More formal definitions of rigidity can be found 
                                                               GCSP embedding these lines. In this second case, computing 
 in[Whiteley, 1987].                                           the DOR may be equivalent to geometric theorem proving. 
   In Fig. 1-b, the subGCSP CDF is rigid since a triangle is 
                                                                 The principle behind the extended structural rigidity is the 
 indeformable and admits all translations and rotations in 3D. 
                                                               following: a GCSP is rigid if all its movements are displace•
 The subGCSP AF is under-rigid: point F can move indepen•
                                                               ments. Hence, comparing its DOF to its DOR allows us to 
 dently of line A since there is no constraint between them.   determine if it admits movements (DOF) which arc not dis•
 The subGCSP ACDEF is over-rigid since it has no solution:     placements (DOR), i.e., deformations. 
 generically, it is impossible to place a point at the intersection 
 of the 3 spheres (= 3 distance constraints) which centers are 
 aligned. 

 2.3 Structural Rigidity 
The structural rigidity corresponds to an analysis of degrees 
of freedom (DOF) in a GCSP. Intuitively, one DOF represents 
one independent movement in a GCSP. More formally:               The es_rigidity is superior to the s_rigidity (e.g., 
                                                               es_rigidity exactly corresponds to rigidity on every subGC-
                                                               SPs in Fig. 1). See [Jermann et al., 2002] for a comparison 
                                                               between s_rigidity and es_rigidity and details about the DOR 
                                                               concept. 


   Structural rigidity is a generalization of Laman's theo•
rem [Laman, 1970], which characterizes generic rigidity of 
2D bar frameworks. It is based on the following intuition: if 
a GCSP admits less (resp. more) movements than the num•
ber of independent displacements in the considered geometric 


 234                                                                                                      CONSTRAINTS                                                                properties of these lines: since they are parallel, K = 2 (in•
                                                               stead of 3 in algorithm Dense). Thus, the flow can be satu•
                                                               rated: a capacity 4 (two constraints plus the overflow) exactly 
                                                               matches the 4 DOFs of AB; the GCSP is not identified over-
                                                               rigid by our algorithm. Further overflow applications would 
                                                               allow to identify the GCSP as well-rigid. 
                                                               Example 2 
                                                               The second example (Fig. 1-b; in 3D) illustrates the second 
                                                               difference. Its object-constraint network is depicted in Fig. 2-
                                                               d. This figure shows the application of an overflow 6 via the 
                                                               virtual constraint 7? onto the 3 points C, E and F by our algo•
                                                               rithm; the overflow cannot be distributed completely, which 
                                                               signals an over-rigid subGCSP: ACDEF, found by adding 
                                                               reachable objects from R in the residual graph. 
                                                                 Algorithm Dense applies the overflow directly through a 
 Figure 2: Object-constraint networks and flow distributions   constraint-node. Since all constraints are binary in this exam•
                                                               ple, Dense cannot apply an overflow to the same set of ob•
                                                               jects as our algorithm. More generally, Dense cannot apply 
                                                               the overflow to all subGCSPs and can miss rigid or over-rigid 
                                                               ones. Moreover, applying the overflow 6 to a pair of objects 
                                                               in this GCSP leads to an incorrect answer, as it was the case 
                                                               in the previous example; e.g., segments which are rigid would 
                                                               be identified over-rigid. 
                                                                 These examples show that some simple and very common 
                                                               subGCSPs in 2D and 3D, like parallel lines, triangles or seg•

                                                               ments, cannot be treated correctly by algorithm Dense1. 
                                                                 In the following section, we detail the differences between 
                                                               algorithm Dense and our new algorithm and we present their 
                                                               consequences. 

3 Overview                                                     4 Algorithms 
                                                               In this section, we present Hoffmann et al.'s Dense algo•
In this section, we exemplify the contribution presented in 
this paper on the GCSPs in Fig. 1. We illustrate the two main  rithm in comparison to our new algorithm. Both use flow 
differences between algorithm Dense and our algorithm:         machinery on the object-constraint network representing the 
                                                               GCSP. Our algorithm has two main differences with algo•
  1. In our algorithm, the overflow depends on the geometric   rithm Dense: 
     properties of the objects it is applied to, while it depends 
                                                                 • It uses es_rigidity instead of s_rigidity. 
     only on the dimension of the geometric space in Dense. 
                                                                 • It distributes flow in a geometrically correct way in the 
  2. In our algorithm, the overflow is applied via a dedicated      network. 
     node R which can be attached to any subset of objects, 
     while it is applied directly via one constraint-node in     These new features are achieved thanks to two major mod•
     Dense.                                                    ifications in the Distribute function used by Dense (sec 
                                                               beginning of Section 3). 
Example 1                                                        We introduce first the principle of flow-based character•
The first example (Fig. 1-a; in 2D) highlights the first differ• ization of rigidity; then we present and discuss function 
ence. Fig. 2-a presents the object-constraint network associ•  Distribute which is the key to our contribution. Finally 
ated to this GCSP. In this picture, one can see the overload   we explain how this function is used to design algorithms for 
A' = 3 applied on the first constraint by algorithm Dense.     the main problems related to rigidity. 
This constraint is linked to two lines, A and B, which are 
parallel and lie at prescribed distance in the plane; AB is a  4.1 Flow-based Rigidity Detection 
rigid subGCSP. However, one can easily see that the overload   From the geometric point of view, the principle of structural 
cannot be distributed completely since a capacity 5 (two con•  characterization of rigidity is to check if a GCSP admits only 
straints plus the overload) is applied to two lines having only displacements. Hence, flow-based rigidity identification can 
4 DOFs. Hence, the GCSP is identified as over-rigid since it   be understood as follows: 
contains a sub-GCSP with less than 3 DOFs.                        'in practice [Sitharam, 2000], Dense embeds heuristic rules to 
   Fig. 2-b displays our algorithm behavior when the virtual   prevent this kind of simple failures, but more complicated examples 
constraint R is linked to the same subGCSP, AB. The value      can still mistake the algorithm since no rule-based approach can han•
of the overflow K is computed according to the geometric       dle all the singular cases. 


CONSTRAINTS                                                                                                           235    1. remove K displacements from the GCSP by introducing      flow algorithm3 like FordFulkerson [Ford and Fulkerson, 
     A' DOFs on the constraint side;                           1962]. This function returns the set V of objects reachable 
                                                               from the virtual constraint R in the residual graph if the max•
  2. check if an over-constrained subGCSP S' exists by 
                                                               imum flow cannot distribute the whole overload, an empty 
     computing a maximum flow in the overloaded object-
                                                               set V otherwise. Function Object-Induced-subGCSP 
     constraint network; 
                                                               returns the subGCSP S" induced by V. S" verifies 
  3. if so A" verifies DOF(S')<K                               DOF(S")<A" or S" is empty. 
   Indeed, a maximum flow in the object-constraint network 
represents an optimal distribution of the DOFs of the con•
straints among the DOFs of the objects. If it does not satu•
rate all the arcs outgoing from the source, some constraints' 
DOFs cannot be absorbed by the objects, i.e., the GCSP is 
over-constrained. In this case, there exists a subGCSP S' 
such that DOF(S")<0. When an overflow K is applied in 
the network on the constraint side, the identified subGCSP S' 
verifies DOF(S")<A'. [Hoffmann et al., 1997] have proven 
that S' is then induced by the objects traversed during the last 
search for an augmenting path, i.e., by the objects reachable    The two differences between our version of the 
from the overloaded constraint-node in the residual graph.     Distribute function and Hoffmann et a/.'s version have 
                                                               already been mentioned: the use of a dedicated constraint for 
                                                               overflow distribution, which allows to distribute the overflow 
                                                               to any subset of objects; and the adaptation of the overflow to 
                                                               the set of objects on which it is applied, which renders over•
                                                               flow application geometrically correct. 
4.2 Function Distribute 
Function Distribute [Hoffmann et al., 1997] implements         Example: The call to Distribute (S,3,dAB) (Hoff•
the principle presented above. We present our version of this  mann et a/.'s version) for the GCSP in Fig. 1-a is presented 
function and explain why and how it differs from Hoffmann      in Fig. 2-a. Since the overflow cannot be fully distributed, the 
et al. 's one.                                                 subGCSP AB is returned. This is correct from the flow point 
   As already said, applying an overflow A corresponds, from   of view since DOF(AB)=2 is less than A' = 3. However, 
the geometric point of view, to removing A' displacements      from the geometric point of view, it is incorrect to interpret 
from the objects linked to this constraint. But nothing ensures this result as an over-rigidity in the GCSP. 
that the subGCSP linked to a single constraint allows A' inde•   For the same subGCSP, our Distribute function 
pendent displacements: removing K DOFs from a subGCSP          is called differently: since DOR(,4S)=2, the overflow 
                                                               can be at most 2. Fig. 2-b presents the call to 
iS" with DOR(S')<K is geometrically incorrect2. 
                                                               Distribute [S, 2, AB). The overflow can be distributed 
   For instance, consider a subGCSP composed of 2 points 
                                                               fully: no subGCSP is returned. Further similar calls would 
linked by a point-point distance in 3D. This GCSP allows 
                                                               allow to conclude that this GCSP is not over-rigid. 
only 5 of the 6 independent displacements (3 rotations * 
3 translations) of the 3D space since they lack the rotation 
around the line going through them. Therefore, removing 6      Time Complexity: The complexity of our func•
displacements from a couple of points is geometrically in-     tion Distribute is dominated by that of function 

correct. However, Hoffmann et al.'s function Distribute        FordFulkerson; it is 0(n2(n + m)) where n is the 
does so when the distance constraint binding the two points    number of nodes and m the number of arcs. It is strictly 
in 3D is overloaded with A' = 6.                               equivalent to the complexity of Hoffmann et al.'s version. 
   In order to distribute the flow in a geometrically correct    Note that if several calls to this function are performed, 
way, we propose to introduce a Active constraint R, having     it could be modified to compute maximum flow in an 
DOF(R.)=A'. This constraint can be linked only to subset of    incremental way, yielding a better complexity. 
objects ()' allowing K independent displacements, i.e. induc•
ing a subGCSP S" having DOR(S")> K. K and S' are two           4.3 Algorithms For Rigidity Detection 
parameters of our function Distribute. 
                                                               Based on the Distribute function, several algorithms can 
  Function Overloaded-Network returns the object-              be designed to tackle the major problems related to the rigid•
constraint network corresponding to S where the fictive con•   ity concept. [Hoffmann et al., 1997] have proposed the 
straint 7?, set with capacity A', is linked to the objects of S". Dense and Minimal_Dense algorithms to identify a well 
The maximum flow computation is achieved by a standard 

                                                                  3In [Hoffmann et al., 1997], function Distribute is specifi•
   2Remember that the DOR represents the number of independent cally designed for binary constraints and flow distribution is merged 
displacements admitted by a subGCSP.                           with network construction and subGCSP identification. 


236                                                                                                       CONSTRAINTS or over-rigid subGCSP and minimize it (using a classical lin•  subGCSPs generated by DOR-Minimals (5). Algorithm 
ear minimization process). These algorithms can be repro•      Over-Rigid then proceeds as follows: 
duced using our function Distribute. This allows us to 
tackle the same problems in a geometrically correct manner       1. First turn, S' = BC and K =DOR(/?C)=5. Fig. 2(c) 
and with a better characterization of rigidity: the extended        represents the call to Distribute (S,5,50). All the 
structural rigidity. We will show on algorithm Dense how to         arcs outgoing from the source being saturated, no over-
introduce our Distribute function in existing algorithms.           cs_rigid subGCSP is identified. 
                                                                 2. At this turn, S' = CEF and K =DOR(CEF)--6. The 
Algorithm Dense Versus Algorithm Over-Rigid 
                                                                    call to Distribute (S,6,CEF) is represented in fig•
Schematically, algorithm Dense operates by calling the              ure 2(d). This turn, the arc S --> R is unsaturated. Since 
Distribute function for each constraint in the GCSP until           the set of object-nodes traversed during the last search 
a non-empty subGCSP is returned. The overload is induced            for an augmenting path is {A, C, D, E, F), the identi•
by the dimension of the considered geometric space: it rep•         fied subGCSP is ACDEF which is over-es_rigid. 
resents the maximum number of independent displacements 
in this space (3 in 2D, 6 in 3D). Dense is supposed to re•       On the same example, algorithm Dense would identify 
turn only over-rigid subGCSPs since returned GCSPs do not      each segment (2 points + 1 distance) and each point on the 
admit all the displacements allowed by the considered geo•     line A as an over-rigid subGCSP, which is false. 
metric space. 
   In fact, Dense is incorrect since it may remove more        Properties of algorithm Over-Rigid 
DOFs than the number of displacements admitted by a sub•
GCSP. For instance, two parallel lines admit only 2 displace•  To prove the correctness and completeness of algorithm 
ments in 2D; hence, removing 3 displacements from two par•     Over-Rigid, we need the following lemmas which estab•
allel lines is geometrically incorrect in 2D.                  lish properties on the DOR concept and on flow distribution: 
   To obtain a geometrically correct version of algorithm 
                                                               Lemma 1 Let S he a GCSP and S' C S" C S two subGC-
Dense, we propose to use the es_rigidity instead of the 
                                                               SPs. Then DOR(S') < DOR(S"). 
s_rigidity, i.e. the DOR is the overload; also, we use our 
Distribute function instead of Hoffmann et al 's one.          Proof: Each unit of DOR in a GCSP represents an indepen•
   This results in a new algorithm, called dent displacement (translation or rotation). Adding a new 
Over-Rigid which performs one call to function 
                                                               object o with some constraints to a subGCSP Sf cannot re•
Distribute (S, DOR (S') ,S')) for each S' C S to iden•         move the independent displacements already granted to S' 
tify over-es_rigid subGCSPs. Indeed, if the call for a given S' since constraints are independent from the global reference 
returns a non-empty subGCSP S"\ then it verifies DOF(S")       system. Thus, DOR(S') < DOR(S' U {o}).U 
< DOR(5'), a sufficient condition for being over-es_rigid 
(see Def. 4). Unfortunately, the number of subGCSPs is 
exponential, which would lead to an exponential number of 
calls to function Distribute. However, we will show that 
it is sufficient and correct to apply this function only to the 
DOR-minimal subGCSPs (see Def. 6 below), which gives the 
following algorithm: 
                                                               Proof: Let G$> be the object-constraint network overloaded 
                                                               for S" and Gs" the network overloaded for S". The only 
                                                               difference between these two networks resides in the fact that 
                                                               there are more arcs of the type R —* o in Gs' • Thus, it is 

                                                               more difficult to distribute an overflow in Gs" than in Gs,m. if 
                                                               a maximum flow in Gs' cannot saturate all the arcs outgoing 
                                                               from the source, a maximum flow in GS" cannot either.U 
                                                                 We will now prove the completeness, correctness and dis•
                                                               cuss the time complexity of our algorithm. 


CONSTRAINTS                                                                                                           237 