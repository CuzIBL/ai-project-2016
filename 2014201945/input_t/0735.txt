                                The   Range    and  Roots   Constraints:
                        Specifying    Counting    and   Occurrence      Problems∗

Christian Bessiere   Emmanuel    Hebrard       Brahim  Hnich        Zeynep   Kiziltan        Toby  Walsh
 LIRMM-CNRS           NICTA   and UNSW            4C, UCC                 DEIS           NICTA   and  UNSW
Montpelier, France     Sydney, Australia           Ireland       Univ. di Bologna,  Italy Sydney,  Australia
bessiere@lirmm.fr   e.hebrard@nicta.com.au   brahim@4c.ucc.ie    zkiziltan@deis.unibo.it tw@cse.unsw.edu.au

                      Abstract                          generalized arc-consistency is NP-hard and decomposition is
                                                        one method to obtain a polynomial propagation algorithm. In
      We propose a simple declarative language for spec-
                                                        the remaining cases, we show that the decomposition hinders
      ifying a wide range of counting and occurrence
                                                        propagation, and there exists some specialized and polyno-
      constraints. This speciﬁcation language is exe-
                                                        mial propagation algorithm. As not all global constraints are
      cutable since it immediately provides a polyno-
                                                        implemented and integrated into every solver, our language
      mial propagation algorithm. To illustrate the ca-
                                                        may  still be attractive in this case. We provide a generic
      pabilities of this language, we specify a dozen
                                                        means for propagating counting and occurrence constraints
      global constraints taken from the literature. We ob-
                                                        in the absence of a specialized algorithm. Our experiments
      serve one of three outcomes: we achieve general-
                                                        demonstrate that this is an efﬁcient and effective way to rea-
      ized arc-consistency; we do not achieve general-
                                                        son about counting and occurrence constraints in practice.
      ized arc-consistency, but achieving generalized arc-
      consistency is NP-hard; we do not achieve gener-
      alized arc-consistency, but specialized propagation 2 Formal  Background
      algorithms can do so in polynomial time. Experi-  A constraint satisfaction problem consists of a set of vari-
      ments demonstrate that this speciﬁcation language ables, each with a ﬁnite domain of values, and a set of con-
      is both efﬁcient and effective in practice.       straints specifying allowed combinations of values for subsets
                                                        of variables. We use capital letters for variables (e.g. X, Y
  1  Introduction                                       and S), and lower case for values (e.g. d and di). We write
                                                        D(X)  for the domain of a variable X. A solution is an as-
  Global constraints are central to the success of constraint pro- signment of values to the variables satisfying the constraints.
  gramming. Global constraints allow users to specify patterns A variable is ground when it is assigned a value. We consider
  that occur in many problems, and to exploit efﬁcient and ef- both integer and set variables. A constraint can be deﬁned on
  fective propagation algorithms for pruning the search space. only integer, or only set variables, or on both. A set variable
  Two common  types of global constraints are counting and S can be represented by its lower bound lb(S) which con-
  occurrence constraints. Occurrence constraints place restric- tains the deﬁnite elements and an upper bound ub(S) which
  tions on the occurrences of particular values. For instance, contains the deﬁnite and potential elements. Each set variable
  we may wish to ensure that no value used by one set of vari- is equivalent to a sequence of 0/1 variables representing the
  ables occurs in a second set. Counting constraints, on the characteristic function. A variable in such a sequence is 1 iff
  other hand, restrict the number of values or variables meet- the corresponding element is in the set.
  ing some condition. For example, we may want to limit the Given a constraint C, a bound support on C is a tuple that
  number of distinct values assigned to a set of variables. Many assigns to each integer variable a value between its minimum
  different counting and occurrences constraints have been pro- and maximum, and to each set variable a set between its lower
  posed to help model a wide range of problems, especially and upper bounds which satisﬁes C. An hybrid support on
                                         [
  those involving resources (see, for example, Regin,´ 1994; C is a tuple that assigns to each integer variable a value in
  Beldiceanu and Contejean, 1994; Regin,´ 1996; Beldiceanu, its domain, and to each set variable a set between its lower
                           ]
  2001; Beldiceanu et al., 2004b ).                     and upper bounds which satisﬁes C. If C involves only inte-
    We will show that many such constraints can be speciﬁed ger variables, a hybrid support is a support. A constraint C
  using a simple declarative language. This speciﬁcation lan-
                                                        is bound consistent (BC) iff for each integer variable Xi, its
  guage is executable. It decomposes these constraints into minimum and maximum values belong to a bound support,
  some simple primitives for which there are polynomial propa-
                                                        and for each set variable Sj , the values in ub(Sj) belong to
  gation algorithms. In some cases, we show that this decompo- S in at least one bound support and the values in lb(S ) be-
  sition does not hinder propagation. In other cases, achieving j                                     j
                                                        long to Sj in all bound supports. A constraint C is hybrid
    ∗
     Brahim Hnich is currently supported by Science Foundation Ire- consistent (HC) iff for each integer variable Xi, every value
  land under Grant No. 00/PI.1/C075.                    in D(Xi) belongs to an hybrid support, and for each set vari-                                                                                                −1
able Sj , the values in ub(Sj ) belong to Sj in at least one holds but not ROOTS([1, 1], {1}, {1}) since X (1) =
hybrid support, and the values in lb(Sj) belong to Sj in all {1, 2}, and ROOTS([1, 1, 1], {1, 2, 3}, {1, 2}) holds but not
hybrid supports. A constraint C involving only integer vari- RANGE([1, 1, 1], {1, 2, 3}, {1, 2}) as no Xi is assigned to 2.
ables is generalized arc consistent (GAC) iff for each variable In an associated report, we discuss how to propagate these
Xi, every value in D(Xi) belongs to a support.        two global constraints. Enforcing HC on the RANGE con-
  Enforcing hybrid consistency on a constraint C is equiva- straint is polynomial and give an O(nd + n · |lb(T )|3/2) al-
lent to enforcing GAC if the set variables are represented by gorithm where d is the maximum domain size of the Xi. En-
their characteristic function. If all variables in C are inte- forcing BC on the ROOTS constraint is O(nd). Unfortunately,
ger variables, hybrid consistency reduces to generalized arc- enforcing HC on the ROOTS constraint is NP-hard. Neverthe-
consistency, and if all variables in C are set variables, hybrid less, all the cases needed here are polynomial. For example,
consistency reduces to bound consistency.             if all Xi are ground, or T is ground then enforcing HC on
  We will compare local consistency properties applied to ROOTS([X1, .., Xn], S, T ) is O(nd).
(sets of) logically equivalent constraints, c1 and c2. As in
[Debruyne and Bessiere,` 1997], a local consistency property 4 Range Constraints
Φ on c1 is as strong as Ψ on c2 iff, given any domains, if Φ
                                                      In an associated report, we present a catalog containing over
holds on c1 then Ψ holds on c2; Φ on c1 is stronger than Ψ on
                                                      70 global constraints from [Beldiceanu, 2000] speciﬁed with
c2 iff Φ on c1 is as strong as Ψ on c2 but not vice versa; Φ on
                                                      this simple language. We have room here to present just a few
c1 is equivalent to Ψ on c2 iff Φ on c1 is as strong as Ψ on c2
                                                      of the more important constraints. In this and the subsequent
and vice versa; Φ on c1 is incomparable to Ψ on c2 iff Φ on
                                                      three sections, we list some global constraints which can be
c1 is not as strong as Ψ on c2 and vice versa.
                                                      speciﬁed using RANGE constraints, using ROOTS constraints,
  A total function F from a set S into a set T is denoted by
                                                      and using both RANGE and ROOTS constraints.
F : S −→ T where S is the domain of F and T is the range
of F. The set of all elements in the domain of F that have the 4.1 All Different
same image j ∈ T is F −1(j) = {i : F(i) = j}. The image
of a set S ⊆ S under F is F(S) =     F(i), whilst the The ALLDIFFERENT   constraint forces a sequence of vari-
                                Si∈S                  ables to take different values from each other. Such a con-
domain of a set T ⊆ T under F is F −1(T ) = F −1(j).
                                      Sj∈T            straint is useful in a wide range of problems (e.g. allocation
Throughout, we will view a set of variables, X1 to Xn as a
                        i=n                           of activities to different slots in a timetabling problem). It
function X : {1, .., n} −→ Si=1 D(Xi). That is, X (i) is the can be propagated efﬁciently [Regin,´ 1994]. It can also be
value of Xi.                                          decomposed with a single RANGE constraint:

3  Speciﬁcation   Language                                    ALLDIFFERENT([X1,  .., Xn]) iff
We propose a simple declarative language in which we can      RANGE([X1,  .., Xn], {1, .., n}, T ) ∧ |T | = n
specify many different counting and occurrence constraints. A special but nevertheless important case of this constraint
This speciﬁcation language is executable. It permits us to
                                                      is the PERMUTATION constraint. This is an ALLDIFFERENT
decompose each global constraint into more primitive con- constraint where we additionally know R, the set of values to
straints, each of which has an associated polynomial prop- be taken. That is, the sequence of variables is a permutation of
agation algorithm. In some cases, this decomposition does the values in R where |R| = n. This also can be decomposed
not hinder propagation. In other cases, enforcing local con-
                                                      using a single RANGE constraint:
sistency on the global constraint is intractable, and decom-
position is one method to obtain a polynomial propagation
                                                                   PERMUTATION([X1, .., X ], R) iff
algorithm. The speciﬁcation language consists of simple non-                            n
global constraints over integer variables (like X ≤ m), sim-       RANGE([X1, .., Xn], {1, .., n}, R)
ple non-global constraints over set variables (like S1 ⊆ S2 Such a decomposition of the PERMUTATION constraint ob-
or |S| = k) and two special global constraints acting on se- viously does not hinder propagation. However, decomposi-
quences of variables: ROOTS and RANGE.                tion of ALLDIFFERENT into a RANGE constraint does. In
  Given a function X representing a set of variables, X1 to addition, HC on the RANGE decomposition is incomparable
Xn, the RANGE constraint holds iff a set variable, T is the to AC on the decomposition of ALLDIFFERENT which uses a
range of this function restricted to the indices belonging to a clique of binary inequality constraints. Thus, we may be able
second set variable, S.                               to obtain more pruning by using both decompositions.
        RANGE([X1, .., Xn], S, T ) iff X (S) = T      Theorem  1 GAC on PERMUTATION   is equivalent to HC on
  The ROOTS constraint holds iff S is the set of indices which the decomposition with RANGE. GAC on ALLDIFFERENT
map to an element in T .                              is stronger than HC on the decomposition with RANGE.
                                      −1              AC on the decomposition of ALLDIFFERENT into binary in-
       ROOTS([X1, .., Xn], S, T ) iff S = X (T )      equalities is incomparable to HC on the decomposition with
  ROOTS and RANGE  are not exact inverses. A RANGE con- RANGE.
straint can hold, but the corresponding ROOTS constraint may Proof: Consider X1, X2  ∈   {1, 2}, X3    ∈
not, and vice versa. For instance, RANGE([1, 1], {1}, {1}) {1, 2, 3, 4}, and {1, 2} ⊆ T ⊆ {1, 2, 3, 4}. ThenRANGE([X1, X2, X3], {1, 2, 3}, T ) and |T | = 3 are both introduce Yj ∈ {x, −y, z}. Then ϕ has a model iff the USES
HC, but ALLDIFFERENT([X1, X2, X3]) is not GAC. Con-   constraint has a satisfying assignment, and i is true iff Xi = i.
sider X1, X2 ∈ {1, 2}, X3 ∈ {1, 2, 3}, and T = {1, 2, 3}.                                              2
Then X1  6= X2, X1  6= X3 and X2  6= X3  are AC but     One way to propagate a USES constraint is to decompose
RANGE([X1, X2, X3], {1, 2, 3}, T ) is not HC. Consider X1, it using RANGE constraints:
X2 ∈  {1, 2, 3, 4}, X3 ∈ {2}, and {2} ⊆ T ⊆ {1, 2, 3, 4}.
Then RANGE([X1, X2, X3], {1, 2, 3}, T ) and |T | = 3 are      USES([X1, .., Xn], [Y1, .., Ym]) iff
HC. But X1    X3  and X2    X3 are not AC. The other
           6=            6=                                   RANGE([X1,  .., Xn], {1, .., n}, T ) ∧
result holds immediately.                        2                                        0     0
                                                              RANGE([Y1, .., Ym], {1, .., m}, T ) ∧ T ⊆ T
4.2  Number  of Values                                  Enforcing HC on this decomposition is polynomial. Not
The NVALUE  constraint is useful in a wide range of problems surprisingly, this hinders propagation (otherwise we would
involving resources since it counts the number of distinct val- have a polynomial algorithm for a NP-hard problem).
ues used by a sequence of variables [Pachet and Roy, 1999].
                                                      Theorem  4 GAC  on USES is stronger than HC on the de-
NVALUE([X1, .., X ], N) holds iff N = |{X | 1 ≤ i ≤
                n                      i              composition.
n}|. The ALLDIFFERENT constraint is a special case of the
NVALUE  constraint in which N = n. Unfortunately, it is Proof: Consider X1 ∈ {1, 2, 3, 4}, X2 ∈ {1, 2, 3, 5},
NP-hard in general to enforce GAC on a NVALUE constraint X3, X4 ∈ {4, 5, 6}, Y1 ∈ {1, 2}, Y2 ∈ {1, 3}, and Y3 ∈
[Bessiere et al., 2004]. However, there is an O(n log(n)) {2, 3}. The decomposition is HC while GAC on USES prunes
algorithm to enforce a level of consistency similar to BC 4 from the domain of X1 and 5 from the domain of X2. 2
[Beldiceanu, 2001]. An alternative and even simpler way to Thus, decomposition is a simple method to obtain a poly-
implement this constraint is with a RANGE constraint: nomial propagation algorithm.

        NVALUE([X1, .., Xn], N) iff                   5   Roots  Constraints
        RANGE([X1, .., Xn], {1, .., n}, T ) ∧ |T | = N RANGE constraints are often useful to specify constraints on
                                                      the values used by a sequence of variables. ROOTS constraint,
  HC on this decomposition is incomparable to BC on the
                                                      on the other hand, are useful to specify constraints on the
NVALUE  constraint.
                                                      variables taking particular values.
Theorem 2 BC  on NVALUE  is incomparable to HC on the
decomposition.                                        5.1  Global Cardinality
Proof: Consider X1, X2  ∈  {1, 2}, X3 ∈  {1, 2, 3, 4}, The global cardinality constraint introduced in [Regin,´ 1996]
N   ∈   {3} and  {}  ⊆   T   ⊆   {1, 2, 3, 4}. Then   constrains the number of times values are used. We
RANGE([X1, X2, X3], {1, 2, 3}, T ) and |T | = N are both consider a generalization in which the number of oc-
HC. However, enforcing BC on NVALUE([X1, X2, X3], N)  currences of a value may itself be an integer variable.
prunes 1 and 2 from X3.                               That is, GCC([X1, .., Xn], [d1, .., dm], [O1, .., Om]) holds iff
  Consider X1, X2, X3 ∈ {1, 3} and N  ∈ {3}.  Then    |{i | Xi = dj }| = Oj for all j. Such a GCC constraint can be
NVALUE([X1, X2, X3], N) is BC. However, enforcing HC  decomposed into a set of ROOTS constraints:
on RANGE([X1, X2, X3], {1, 2, 3}, T ) makes {} ⊆ T ⊆
{1, 3} which will cause |T | = 3 to fail.        2            GCC([X1, .., Xn], [d1, .., dm], [O1, .., Om]) iff
                                                              ∀i . ROOTS([X1, .., X ], S , {d }) ∧ |S | = O
4.3  Uses                                                                       n   i  i       i     i
In [Beldiceanu et al., 2004b], propagation algorithms achiev- Enforcing HC on these ROOTS constraints is polynomial
ing GAC and BC are proposed for the USEDBY constraint. since the sets {di} are ground. Enforcing GAC on a general-
                                                            CC
USEDBY([X1,  .., Xn], [Y1, .., Ym]) holds iff the multiset of ized G constraint is NP-hard, but we can enforce GAC on
values assigned to Y1, .., Ym is a subset of the multiset of the Xi and BC on the Oj in polynomial time using a special-
                                                                   [                 ]
values assigned to X1, .., Xn. We now introduce a vari- ized algorithm Quimper et al., 2004 . This is more than is
ant of the USEDBY constraint called the USES constraint. achieved by the decomposition.
 SES    1         1
U    ([X , .., Xn], [Y , .., Ym]) holds iff the set of values as- Theorem 5 GAC on the Xi and BC on the Oj of a GCC
signed to Y1, .., Ym is a subset of the set of values assigned constraint is stronger than HC on the decomposition using
to X1, .., Xn. That is, USEDBY takes into account the num- ROOTS constraints.
ber of times a value is used while USES does not. Unlike the
USEDBY  constraint, enforcing GAC on USES is NP-hard. Proof: Sets being represented by their bounds, HC on the
                                                      decomposition cannot prune more on the Oj than BC does
                            SES
Theorem 3 Enforcing GAC on U    is NP-hard.           on the GCC. To show strictness, consider X1, X2 ∈ {1, 2},
Proof: We  reduce 3-SAT to the problem of deciding if a X3 ∈ {1, 2, 3}, di = i and O1, O2, O3 ∈ {0, 1}. The
USES constraint has a solution. Finding support is therefore decomposition is HC (with {} ⊆ S1, S2 ⊆ {1, 2, 3} and
NP-hard. Consider a formula ϕ with n Boolean variables and {} ⊆ S3 ⊆ {3}). However, enforcing GAC on the Xi and
m clauses. For each Boolean variable i, we introduce a vari- BC on the Oj of the GCC constraint will prune 1 and 2 from
able Xi ∈ {i, −i}. For each clause cj = x ∨ ¬y ∨ z, we X3 and 0 from O1, O2 and O3.                    2  This example illustrates that, whilst many global con- the number of variables using a particular value, whilst the
straints can be expressed in terms of ROOTS and RANGE, ATLEAST puts a lower bound. Both can be decomposed us-
there are some global constraints like GCC for which it is ing a ROOTS constraint without hindering propagation.
worth developing specialized propagation algorithms. Never-
theless, ROOTS and RANGE provide a means of propagation 6 Range  and  Roots  Constraints
for such constraints in the absence of specialised algorithms.
                                                      Some global constraints need both ROOTS and RANGE con-
5.2  Among                                            straints in their speciﬁcations.
The AMONG   constraint was introduced in CHIP to help 6.1  Assign and NValues
model resource allocation problems like car sequencing In bin packing and knapsack problems, we may wish to
[Beldiceanu and Contejean, 1994]. It counts the number of assign both a value and a bin to each item, and place
variables using values from a given set. AMONG([X1, .., Xn], constraints on the values appearing in each bin. For in-
[d1, .., dm], N) holds iff N = |{i | Xi ∈ {d1, .., dm}}|. stance, in the steel mill slab design problem (prob038
  One decomposition using the global cardinality constraint in CSPLib), we assign colors and slabs to orders so
GCC introduced in [Regin,´ 1996] is as follows:       that there are a limited number of colors on each slab.
                                                      ASSIGN&NVALUES     X1, .., X , Y1, .., Y , N holds iff
          AMONG([X1,  .., Xn], [d1, .., dm], N) iff                     ([      n] [      n]  )
                                                      |{Yi | Xi = j}| ≤ N for each j [Beldiceanu, 2000]. It can
GCC([X1, .., Xn], [d1, .., dm], [O1, .., Om]) ∧ X Oi = N be decomposed into a set of ROOTS and RANGE constraints:

  Unfortunately, this decomposition hinders propagation.    ASSIGN&NVALUES([X1,   .., Xn], [Y1, .., Yn], N) iff
Theorem 6 GAC  on AMONG   is stronger than GAC on the      ∀j . ROOTS([X1, .., Xn], Sj , {j}) ∧
decomposition using GCC.
                                                            RANGE([Y1, .., Yn], Sj , Tj) ∧ |Tj | ≤ N
Proof: Consider X1, X2    ,  , X3     , ,  , d1   ,
                      ∈ {1 2}    ∈  {1 2 3}   =  1      Decomposition hinders propagation as it considers the val-
d2    , and N    ,  . The decomposition is GAC, but en-
  =  2       ∈ {1 2}                                  ues separately. However, since this constraint generalizes
forcing GAC on AMONG([X1, X2, X3], [d1, d2], N) prunes 1
                                                      NVALUE,  enforcing GAC is NP-hard. Decomposition is thus
and 2 from X3 as well as 1 from N.               2
                                                      one method to obtain a polynomial propagation algorithm.
  An alternative way to propagate the AMONG constraint is
to decompose it using a ROOTS constraint:             6.2  Common
                                                      A generalization of the AMONG and ALLDIFFERENT con-
       AMONG([X1,  .., X ], [d1, .., d ], N) iff
                       n        m                     straints introduced in [Beldiceanu, 2000] is the COMMON
       ROOTS([X1, .., X ], S, {d1, .., d }) ∧ |S| = N
                      n           m                   constraint. COMMON(N,  M, [X1, .., Xn], [Y1, .., Ym]) en-
  It is polynomial to enforce HC on this case of the ROOTS sures N = |{i | ∃j, Xi = Yj }| and M = |{j | ∃i, Xi = Yj }|.
constraint since the target set is ground. This decomposition That is, N variables in Xi take values in common with Yj and
also does not hinder propagation. It is therefore a potentially M variables in Yj takes values in common with Xi. We prove
attractive method to implement the AMONG constraint.  that we cannot expect to enforce GAC on such a constraint as
                                                      it is NP-hard to do so in general.
Theorem 7 GAC  on AMONG  is equivalent to HC on the de-
                                                                                  OMMON
composition using ROOTS.                              Theorem  8 Enforcing GAC on C       is NP-hard.
Proof:    (Sketch) Suppose  the  decomposition into   Proof: We  again use a transformation from 3-SAT. Con-
                                                      sider a formula ϕ with n Boolean variables and m clauses.
ROOTS([X1, .., Xn], S, {d1, .., dm}) and |S| = N is
                                                      For each Boolean variable i, we introduce a variable Xi ∈
HC. The variables Xi divide into three categories: those
                                                      {i, −i}. For each clause cj = x ∨ ¬y ∨ z, we introduce
whose domain only contains elements from {d1, .., dm} (at
most min(N) such vars); those whose domain do not contain Yj ∈ {x, −y, z}. We let N ∈ {0, .., n} and M = m. ϕ has
                                                      a model iff the COMMON constraint has a solution in which
any such elements (at most n − max(N) such vars); those                                                2
whose domain contains both elements from this set and from the Xi take the literals true in this model.
                                                        One way to propagate a COMMON constraint is to decom-
outside. Consider any value for a variable Xi in the ﬁrst such
category. To construct support for this value, we assign the pose it into RANGE and ROOTS constraints:
remaining variables in the ﬁrst category with values from
                                                              COMMON(N,   M, [X1, .., Xn], [Y1, .., Ym]) iff
{d1, .., dm}. If the total number of assigned values is less
than min(N), we assign a sufﬁcient number of variables        RANGE([Y1, .., Ym], {1, .., m}, T ) ∧
from the second category with values from {d1, .., dm}        ROOTS([X1, .., Xn], S, T ) ∧ |S| = N ∧
to bring up the count to min(N). We then assign all the       RANGE([X1,  .., Xn], {1, .., n}, V ) ∧
remaining unassigned Xj with values outside {d1, .., dm}.
                                                              ROOTS([Y1, .., Y ], U, V ) ∧ |U| = M
Finally, we assign min(N) to N. Support can be constructed                  m
for variables in the other two categories in a similar way, as Enforcing HC on this decomposition is polynomial. De-
well as for any value of N between min(N) and max(N). 2 composition thus offers a simple and promising method to
  The ATMOST   and ATLEAST  constraints are closely re- propagate a COMMON constraint. Not surprisingly, the de-
lated. The ATMOST   constraint puts an upper bound on composition hinders propagation.Theorem 9 GAC  on COMMON   is stronger than HC on the Enforcing HC on  this decomposition is polynomial ({1}
decomposition.                                        is ground) and it is equivalent to enforcing GAC on the
Proof: Consider N = M  = 0, X1, Y1 ∈ {1, 2}, X2, Y2 ∈ DOMAIN  constraint.
{1, 3}, Y3 ∈ {2, 3}. Hybrid consistency on the decomposi- The CONTIGUITY constraint ensures that, in a sequence of
tion enforces {} ⊆ T, V ⊆ {1, 2, 3}, and S = U = {} but 0/1 variables, those taking the value 1 appear contiguously.
no pruning on the Xi and Yj . However, enforcing GAC on This is a discrete form of convexity. The constraint was in-
COMMON(N,   M, [X1, X2], [Y1, Y2, Y3]) prunes 2 from X1, troduced in [Maher, 2002] to model a hardware conﬁguration
3 from X2 and 1 from both Y1 and Y2.             2    problem. It can be decomposed into a ROOTS constraint:
6.3  Symmetric  All Different
                                                            CONTIGUITY([X1, .., Xn]) iff
In certain domains, we may need to ﬁnd symmetric solutions.
                                                            ROOTS([X1, .., X ], S, {1}) ∧
For example, in sports scheduling problems, if one team is                n
assigned to play another then the second team should also  X  = max(S)  ∧ Y  = min(S) ∧  |S| = X − Y + 1
be assigned to play the ﬁrst. SYMALLDIFF([X1, .., Xn]) en- Again it is polynomial to enforce HC on this case of the
sures X = j iff X = i [Regin,´ 1999]. It can be decomposed
      i        j                                      ROOTS  constraint. Unfortunately, decomposition hinders
into a set of ROOTS and RANGE constraints:
                                                      propagation. Consider X1, X3 ∈ {0, 1}, X2, X4 ∈ {1}. HC
                                                      on the decomposition will enforce {2, 4} ⊆ S ⊆ {1, 2, 3, 4},
    SYMALLDIFF([X1,  .., Xn]) iff
                                                      X  ∈ {4}, Y ∈ {1, 2} and |S| to be in {3, 4} but no prun-
    RANGE([X1, .., Xn], {1, .., n}, {1, .., n}) ∧
                                                      ing will happen on the Xi. However, enforcing GAC on
                1
    ∀i . ROOTS([X , .., Xn], Si, {i}) ∧ Xi ∈ Si ∧ |Si| = 1 CONTIGUITY([X1, .., Xn]) will prune 0 from X3.
  It is polynomial to enforce HC on these cases of the ROOTS Whilst ROOTS and RANGE can specify concepts quite dis-
constraint. However, as with the ALLDIFFERENT constraint, tant from counting and occurrences like convexity and dis-
it is more effective to use a specialized propagation algorithm crete derivatives, it seems that we may need other algorithmic
like that in [Regin,´ 1999].                          ideas to propagate them effectively.
Theorem 10 GAC  on SYMALLDIFF  is stronger than HC on
the decomposition.                                    8   Experiments
Proof: Consider X1 ∈ {2, 3}, X2 ∈ {1, 3}, X3 ∈ {1, 2}, The last three sections demonstrate that many global con-
{} ⊆ S1 ⊆ {2, 3}, {} ⊆ S2 ⊆ {1, 3}, and {} ⊆ S3 ⊆ {1, 2}. straints can be speciﬁed in terms of ROOTS and RANGE con-
Then the decomposition is HC. However, enforcing GAC on straints. We also argued that these speciﬁcations are exe-
SYMALLDIFF([X1,  X2, X3]) will detect unsatisﬁability. 2 cutable and in certain cases provide efﬁcient and effective
  To our knowledge, this constraint has not been integrated propagation algorithms. In this section, we support this ar-
into any constraint solver. Thus, this decomposition provides gument by means of some experiments.
a means of propagation for the SYMALLDIFF constraint.
                                                                2GCC+SUM        GCC+ROOTS        ROOTS
                                                       Size  f     t    #s    f    t    #s    f    t    #s
7  Beyond   Counting   and Occurrence                   10   6    0.02 9/10   6   0.01 9/10  335  0.41 10/10
                                                        15  6475  1.56 29/52 6468 1.38 29/52 23   0.10 52/52
The RANGE  and ROOTS constraints are useful for specifying 20 2852 1.37 20/35 2852 0.97 20/35 1093 3.54 32/35
                                                        25   71   0.22 13/20  71  0.09 13/20 2776 13.62 19/20
a wide range of counting and occurence constraints. Nev- 30 12472 11.87 6/10 12472 6.80 7/10 4279 17.23 9/10
ertheless, their expressive power permits their use to specify 35 16 0.44 20/56 14 0.15 21/56 5107 36.29 49/56
many other constraints.
  The ELEMENT  constraint introduced in [Van Hentenryck Table 1: Mystery Shopper. Instance are run with a 5 minutes
and Carillon, 1988] indexes into an array with a variable. time limit. #fails (f) and cpu time (t) are averaged on the
More precisely, ELEMENT(I, [X1, .., Xn], J) holds iff XI = #instances solved (#s) by each method.
J. We can use such a constraint to look up the price of a com-
ponent included in a conﬁguration problem. The ELEMENT  We used a model for the Mystery Shopper problem [Cheng
constraint can be decomposed into a RANGE constraint with- et al., 1998] due to Helmut Simonis that appears in CSPLib.
out hindering propagation:                            This model contains a GCC constraint and a number of
                                                      AMONG   constraints. ILOG’s Solver contains the GCC but not
      ELEMENT(I, [X1, .., Xn], J) iff |S| = |T | = 1 ∧
                                                      the AMONG  constraint. We implement AMONG either with
      I  S    J   T    RANGE   X1, .., X , S, T
       ∈    ∧   ∈   ∧        ([       n]    )         a GCC and a SUM  constraint or directly with ROOTS. This
  We may  wish to channel between a variable and the se- gives us two models (2GCC+SUM and GCC+ROOTS, resp.).
quence of 0/1 variables representing the possible values taken We also consider the model (ROOTS) which is a variation of
by the variable. The DOMAIN(X, [X1, .., Xm]) constraint in- GCC+ROOTS where we decompose the GCC constraint using
troduced in [Refalo, 2000] ensures X = i iff Xi = 1. This ROOTS. In order to generate a range of instances, we used the
can be decomposed into a ROOTS constraint:            following protocol. The duration in weeks as well as the num-
                                                      ber of varieties of shoppers, visits per salelady and number of
      DOMAIN(X,  [X1, .., Xm]) iff                    areas are all set to 4 (as in the original problem). The number
      ROOTS([X1, .., Xm], S, {1}) ∧ |S| = 1 ∧ X ∈ S   of saleladies takes its value in {10, 15, 20, 25, 30, 35}, and the