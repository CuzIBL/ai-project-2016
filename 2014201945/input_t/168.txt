                                Backdoors To Typical Case Complexity 

            Ryan Williams *                       Carla P. Gomes                           Bart Selman  
           Computer Science Dept.                Dept. of Computer Science              Dept. of Computer Science 
          Carnegie Mellon University                 Cornell University                     Cornell University 
             Pittsburgh, PA 15213                    Ithaca, NY 14853                       Ithaca, NY 14853 
            ryanw@cs.emu.edu                    gomes@cs.Cornell.edu                  selman@cs.Cornell.edu 


                        Abstract                               based planners, e.g., [11; 8; 1]. Somewhat surprisingly, on 
                                                               practical problem instances these methods scale well beyond 
     There has been significant recent progress in rea•        what one might expect based on a formal complexity anal•
     soning and constraint processing methods. In areas        ysis. In fact, current state-of-the-art SAT solvers can han•
     such as planning and finite model-checking, cur•          dle problem instances, as they arise in finite model-checking 
     rent solution techniques can handle combinatorial         and planning, with up to a million variables and five million 
     problems with up to a million variables and five          clauses [15]. The success of these methods appears to hinge 
     million constraints. The good scaling behavior of         on a combination of two factors: (1) practical combinato•
     these methods appears to defy what one would ex•          rial problem instances generally have a substantial amount 
     pect based on a worst-case complexity analysis. In        of (hidden) tractable sub-structure, and (2) new algorithmic 
     order to bridge this gap between theory and prac•         techniques exploit such tractable structure, through, e.g., ran•
     tice, we propose a new framework for studying the         domization and constraint learning. 
     complexity of these techniques on practical prob•
                                                                 These developments suggest that a standard worst-case 
     lem instances. In particular, our approach incorpo•
                                                               complexity analysis does not capture well the true complex•
     rates general structural properties observed in prac•
                                                               ity of typical problem instances encountered in practical ap•
     tical problem instances into the formal complexity 
                                                               plications. Theoretical computer scientists have been well-
     analysis. We introduce a notion of "backdoors", 
                                                               aware of the limitations of worst-case complexity results and 
     which are small sets of variables that capture the 
                                                               have explored alternatives, such as average-case complexity 
     overall combinatorics of the problem instance. We 
                                                               and smoothed analysis [20]. In average-case analysis, one 
     provide empirical results showing the existence of 
                                                               studies the computational cost of solving problem instances 
     such backdoors in real-world problems. We then 
                                                               drawn from a predefined problem distribution. Such an anal•
     present a series of complexity results that explain 
                                                               ysis can provide valuable insights, as demonstrated by the 
     the good scaling behavior of current reasoning and 
                                                               work on uniform random instance distributions (e.g. ran•
     constraint methods observed on practical problem 
                                                               dom k-SAT). However, the relatively basic distributions for 
     instances. 
                                                               which one can obtain average-complexity results appear to 
                                                               be quite far removed from the instance distributions one en•
1 Introduction                                                 counters in practice. In fact, formally defining the distribution 
                                                               of real-world problem instances is generally an open prob•
Most interesting AI formalisms for reasoning, planning, and    lem in itself. Smoothed analysis attempts to unify worst-case 
learning have been shown to be worst-case intractable. In      and average-case, but suffers from limited applicability: it 
the eighties and early nineties, such negative complexity re•  works well on algorithms for problems defined over dense 
sults led to an extensive search for tractable subclasses of   fields such as the simplex algorithm, but the applicability of 
the general formalisms. Unfortunately, these tractable sub•    smoothed analysis on discrete problem domains is unclear. 
classes were often too restrictive for real-world applications. 
                                                                 An alternative approach, which we will pursue in this pa•
In the mid-nineties, we saw the emergence of a more practical 
                                                               per, is to identify special structural properties common to 
approach to computationally hard problems in AI, with the 
                                                               known problem instances and rigorously show how clever 
introduction of fast satisfiability solvers and fast constraint 
                                                               algorithms can exploit such properties. Informal insights 
based reasoning methods [17]. For example, in planning we 
                                                               about what such special structure might be are currently al•
saw the success of constraint-based planners, such as Graph-
                                                               ready used in the design of, for example, branching and vari•
plan [2] and SatPlan 113], and most recently, heuristic search 
                                                               able choice heuristics in combinatorial search methods. A 
   *Supported in part by an NSF Graduate Fellowship and the NSF common feature of these techniques is an understanding that 
ALADDIN Center.                                                different groups of variables in a problem encoding often 
   Research supported by AFOSR, Darpa, and the NSF.            play quite distinct roles. For example, at the highest level, 


SATISFIABILITY                                                                                                       1173 one can distinguish between dependent and independent vari•
ables. The dependent or auxiliary variables are needed to ob•
tain compact problem encodings but the true combinatorics 
arises from the independent variables; e.g., the independent 
variables in an encoding of a planning domain represent the 
various operators applicable in a given state of the world, 
whereas the dependent variables encode the consequences of             Table 1: Time bounds for solving CSPs in the various scenarios 
                                                                       considered in this work. is an upper bound on the size of 
selecting a particular operator. A plan search technique that 
                                                                       the smallest backdoor, where is the number of variables in the 
branches purely on the independent variables can obtain sub•           problem, is a fixed constant. Empirical results (Section 3) suggest 
stantial speedups over search methods that do not exploit vari•        that for practical instances the backdoor is often a relatively small 
able dependencies [4].                                                 fraction of or even of size log  

   Another powerful intuition in the design of search methods 
is that one wants to select variables that simplify the prob•          scenario with an exhaustive search of backdoor sets. We show 
lem instance as much as possible when these variables are              that one obtains provably better search complexity when the 
assigned values. This intuition leads to the common heuristic          backdoor contains up to a certain fraction of all variables. We 
of branching on the most constrained variable first. In terms          then show that a randomized search technique, which in ef•
of Boolean satisfiability, this amounts to, in effect, focusing        fect repeatedly guesses backdoor sets, provably outperforms 
in on the tractable substructure of the problem, namely the            a deterministic search. Finally, in our third scenario we con•
unit clauses (1-SAT structure) and the binary clauses (2-SAT           sider the availability of a variable selection heuristic, which 
structure). The true effectiveness of this approach arises from        provides guidance towards the backdoor set. This strategy 
the fact that setting most constraint variables also simplifies        can yet further reduce the search space. Table 1 gives a high-
higher arity clauses, which either become satisfied or in turn         level summary of the results. By exploiting restart strategies, 
shrink themselves eventually to binary or unary clauses.               we can identify a polynomially solvable case when the back-
                                                                       door contains at most log(n) variables. We believe that this 
   These general insights have been incorporated in state-of-          final scenario is closest to the behavior of current effective 
the-art SAT and constraint solvers, and their effectiveness            SAT and constraint solvers. Our formal analysis also sug•
has been demonstrated empirically on a significant number              gests several novel algorithmic strategies that warrant further 
of benchmark problems [18]. However, a more formal un•                 empirical exploration. 
derpinning explaining the practical success of these strate•
gies has been lacking. In this paper, we introduce a formal            2 Hidden structure: Backbones and 
framework directly inspired by these techniques and present 
rigorous complexity results that support their effectiveness.               Backdoors 

   Preview of results. We first introduce the notion of "back-         Our approach and analysis applies both to SAT and CSP 
door" variables. This is a set of variables for which there is         problems [17]. SAT is the abbreviation for the well-studied 
a value assignment such that the simplified problem can be             Boolean satisfiability problem. CSP is the abbreviation for 
solved by a poly-time algorithm, called the "sub-solver". The          the more general problem of constraint satisfaction. 
sub-solver captures any form of poly-time simplification pro•
cedure as used in current SAT/CSP solvers. We also con•                   A CSP problem, C, is characterized by a set V = 
sider the notion of a "strong backdoor" where any setting                                 of variables, with respective domains  
of the backdoor variables leads to a poly-time solvable sub-                          (which list the possible values for each vari•
problem. The set of all problem variables forms a trivial back-        able) and a set of constraints. A constraint is defined on a 
door set, but many interesting practical problem instances             subset of variables denoting the variables' simulta•
possess much smaller backdoors and strong backdoors. We                neous legal assignments. That is, if 
will study backdoors in several practical problem instances,           then the constraint defines a subset of the Cartesian product 
and identify backdoors that contain only a fraction of the to•                             To simplify notation, we will assume that 
tal number of variables. For example, the SAT encoding of a            all variables have the same domain D. We use d to denote 
logistics planning problem (logistics . d. cnf) contains               the size of D. An assignment is a function from variables 
a backdoor with only 12 variables out of a total of nearly             to D. A solution to a CSP is a complete variable assignment 
7,000 variables. When given a set of backdoor variables of             that satisfies all constraints. A partial assignment defines the 
a problem instance, one can restrict the combinatorial search          values of a subset of the variables in V. SAT is a special case 
by branching only on the backdoor variables and thus search            of CSP with only Boolean variables 
a drastically reduced space.                                           and constraints given in the form of clauses. A clause is a 
                                                                       disjunction of literals and a literal is a Boolean variable or its 
  In general, finding a small set of backdoor variables for a 
                                                                       negation. 
problem instance is, however, itself a computationally hard 
problem. One contribution of this paper is that we formally              We use the notation to denote the simplified CSP 
show how the presence of a small backdoor in a problem pro•            obtained from a CSP, C, by setting the value of variable to 
vides a concrete computational advantage in solving it. We             value (A constraint involving is simplified by keeping 
analyze three scenarios. First, we consider a deterministic            only the allowed tuples that have assigned to Let  


1174                                                                                                                   SATISFIABILITY              be a partial assignment. We use to denote         to the satisfiability of the instance, given a sub-solver algo•

the simplified CSP obtained by setting the variables defined   rithm.1 We also introduce a stronger notion of the backdoor 
in In a SAT problem, this corresponds to simplifying the       to deal with both satisfiable and unsatisfiable (inconsistent) 
formula by fixing the truth values of some of the variables.   problem instances. 
   Our goal is to capture structural properties of real world 
problem instances. We start by reviewing the concept of a      Definition 2.4 [strong backdoor] A nonempty subset S of 
backbone in a SAT/CSP problem, as introduced in [141. A        the variables is a strong backdoor in C for A if for all 
variable is called a backbone variable if in all solutions to the           A returns a satisfying assignment or concludes 
CSP the variable is assigned the same value. Such variables    unsatisfiability of  
are also called frozen variables [61. Backbone variables are 
useful in studying the properties of the solution space of a     In contrast to backbones which are necessarily set to a cer•
constraint satisfaction problem.                               tain value, a (strong) backdoor S is sufficient for solving a 
                                                               problem. For example, when given the backdoor for a SAT 
Definition 2.1 [backbone] S is a backbone if there is a        problem, the search cost is of order (Simply check 
unique partial assignment : such that is all possible assignments of This means if S is relatively 
satisfiable.                                                   small, one obtains a large improvement over searching the 
                                                               full space of variable/value assignments. 
   We contrast this variable type with the kind we introduce, 
                                                                 We observe that independent variables are a particular kind 
backdoors. Backdoors are variable subsets defined with re•
                                                               of backdoor. As stated in they are a set S of variables 
spect to a particular algorithm; once the backdoor variables 
                                                               for which all other variables may be thought of as defined in 
are assigned a value, the problem becomes easy under that 
                                                               terms of S. For example, a maximal subset of independent 
algorithm. (Note that contrarily to the backbone there can be 
                                                               variables in a SAT encoding of a hardware verification prob•
different sets of backdoor variables.) 
                                                               lem is a backdoor for unit propagation, as the other variables' 
   To begin our exposition of backdoors, we define the sort of values may be directly determined after setting the indepen•
algorithms we have in mind. We will call them sub-solvers,     dent ones [19]. 
as they solve tractable subcases of the general constraint sat•
                                                                 There are two key questions concerning backdoors: 
isfaction problem. 

Definition 2.2 A sub-solver A given as input a CSP, C, sat-         What is the size of the backdoor in practical problem 
isfies the following:                                               instances? 
                                                                    When taking into account the cost of searching for a 
     (Trichotomy) A either rejects the input C, or "deter•
                                                                    backdoor set, can one still obtain an overall computa•
mines" C correctly (as unsatisfiable or satisfiable, returning 
                                                                    tional advantage in solving the CSP? 
a solution if satisfiable), 
    (Efficiency) A runs in polynomial time,                      We address these two key questions below. We will first 
                                                               show that practical problem instances can have surprisingly 
    (Trivial solvability) A can determine if C is trivially true 
                                                               small backdoors. In the subsequent section, we show how 
(has no constraints) or trivially false (has a contradictory 
                                                               even by taking into account the cost of searching for a back-
constraint), 
                                                               door, one can provably obtain an overall computational ad-
     (Selfreducibility) if A determines C, then for any vari•  vantage by using the backdoor. As we will see, the magnitude 
able x and value v, then A determines                          of this improvement is, of course, a function of the size of the 
                                                               backdoor. 
   For instance, A could be an algorithm that solves 2-SAT in•
stances but rejects all other instances. It is important to note 3 Size of backdoors 
that the results we will show in this paper are independent of 
a particular sub-solver; our results will hold for any A satis• We did an empirical study of the size of backdoors in sev•
fying the above four properties.                               eral practical SAT instances, using the SAT solver Satz-rand, 
   In what follows, let A be a sub-solver, and C be a CSP.     a randomized version of Satz [16]. Satz incorporates power•
                                                               ful variable selection heuristics and an efficient simplification 
   We first consider a notion of "backdoor" that is suitable for strategy (i.e., a good sub-solver). We modified Satz-rand to 
satisfiable CSPs.                                              trace the variables selected for branching, and to keep track of 
                                                               the minimum number of variables that need to be set before 
Definition 2.3 [backdoor] A nonempty subset S of the vari•     Satz-rand's simplification found a satisfying assignment effi•
ables is a backdoor in C for A if for some A ciently. (We are currently modifying this procedure to also 
returns a satisfying assignment of                             handle unsatisfiable instances and find strong backdoors.) 

   Intuitively, the backdoor corresponds to a set of variables,   'Observe that any satisfiable CSP has a backdoor of size at most 
such that when set correctly, the sub-solver can solve the re•      however, wc will see that significantly smaller backdoors arise 
maining problem. In a sense, the backdoor is a "witness"       in practice and give a computational advantage in search. 


SATISFIABILITY                                                                                                       1175        instance                     backdoor    fract.         of the following we will say holds for strong backdoors and 
      logistics.d 6783    437431        12     0.0018          unsatisfiable CSPs under this modified algorithm. 
      3bitadd_32  8704     32316       53      0.0061 
       pipe-01    7736     26087       23      0.0030            Note the procedure uses only polynomial time for CSPs 
       qg_30_1    1235      8523        14     0.0113          with a constant sized backdoor. We are interested in the case 
       qg_35_1    1597     10658        15     0.0094          where a backdoor of size exists, for some  
                                                               almost everywhere. The following gives a simple runtime 
 Table 2: Size of backdoors for several practical SAT in•      bound in terms of and  
 stances. 

   Table 2 summarizes our results. Our instances are from a 
 variety of domains [18]. These instances are now well within 
 the range of the fastest current solvers, such as Chaff [15]. 
 However, they are non-trivial and cannot be solved with the 
 previous generation of SAT solvers, e.g. Tableau [3]. Clearly, 
 the new solvers are better able to discover and exploit hidden 
 structure, such as small backdoors. In fact, as we can see from 
 the table, these instances have fairly tiny backdoors. That is, 
 only a very small fraction of all variables can be used to "un•
 lock" a satisfying assignment. We conjecture that such small 
 backdoors occur in many other real-world problem instances. 

4 Exploiting backdoors formally 

We will analyze three, increasingly powerful strategies: de-     The theorem implies that when small backdoors (or strong 
terministic, randomized, and heuristic branching variable se•  backdoors) are present, a substantial speedup almost always 
lection. The first two are meant to work for any CSP where     results. For example: 
the instance has a small fraction of backdoor variables, with 
respect to the sub-solver. The randomized strategy gener•
ally outperforms the deterministic one with high probabil•
ity (1 - where is the number of variables). This 
reflects the performance gain found in practice when back•       In our exposition of heuristic branching variable selection, 
tracking SAT solvers are augmented with randomization [15;     we will see an improvement on this (a poly-time bound). For 
9]. The third strategy yields tighter runtime bounds than the  a visual representation of the deterministic strategy's runtime, 
first two, but requires us to assume the existence of a good   when d — 2 and backdoors of size are considered, see 
heuristic for choosing backdoor variables (which we find to   Figure 1. This graph also indicates the following corollary in 
be the case in practice).                                     the case of SAT (proof omitted): 

4.1 Deterministic strategy                                     Corollary 4.2 For Boolean formulas with a backdoor of size 
                                                              at most n/4.404, Algorithm 4.1 solves the formula in 
The deterministic procedure may be construed as a gener•       time, where c 2. 
alization of iterative deepening that runs over all possible 
search trees of each depth. We assume the algorithm has          As we have seen in the previous section, in practice, back-
access to a particular sub-solver A running in (poly•         doors can be quite tiny of the variables, 
nomial) time, which defines the backdoor variables, and C is  for logistics . d. cnf). Therefore, these results have real 
an arbitrary CSP instance.                                    bearing on the improved solvability of real-world CSPs. 

Algorithm 4.1 Given a CSP C with n variables,                 4.2 Randomized strategy 
For  
                                                              Better performance results from adding randomization. This 
   For all subsets 5 of the variables with                    speed-up formally verifies a well-known fact about real-world 
                                                              solvers: augmenting a solver with randomization can dramat•
   Perform a standard backtrack search (just on the vari•
                                                              ically improve performance [9; 10]. 
ables in S) for an assignment that results in C being 
solved by sub-solver A.                                          Again, we assume a sub-solver A is on tap, with runtime 
                                                                     Let be a poly-time computable function on N 
  An analogous algorithm works for finding and exploiting     that bounds the backdoor size, and b be a parameter to be 
strong backdoors in a CSP to prove unsatisfiability: simply   later determined. The idea is to repeatedly choose random 
keep track of whether all assignments to the variables in S   subsets of variables that are larger than searching these 
result in C being a contradiction (as determined by A). All   subsets for a backdoor. 


1176 Algorithm 4.2 Given a CSP C with variables, 
Repeat times (and at least once): 
     Randomly choose a subset S of the variables, 
  of size Perform a standard backtrack 
   search on variables in S. If C is ever solvable by 
   A, return the satisfying assignment. 

  As before, an analogous algorithm works for general (sat-
isfiable or unsatisfiable) CSPs with strong backdoors: if every 
leaf in the search tree ends with A reporting unsatisfiability, 
then the C is unsatisfiable. 
  The algorithm as stated requires a priori knowledge of 
       This may be corrected by choosing a constant 
then running the algorithm assuming a backdoor of size 1. If 
that fails, run it again assuming a backdoor of size a, then a2, 
    etc., until a solution to C is found. 

Theorem 4.2 If C has a backdoor of size Algorithm 
4.2 finds a satisfying assignment with probability approach•
ing 1. 

Proof. Given there is a -sized backdoor in C, the             Figure 1: Improved exponential time. When d = 2 (SAT) and 
                                                              the size of the backbone is a constant fraction of the number of vari•
probability that a randomly chosen S of size                  ables the runtime of Alg. 4.1 (deterministic) and 
contains the entire backdoor is at least                      4.2 (randomized) is of the form (vertical axis) is a function 
                                                              of k. The top curve gives c as a function of k for the deterministic 
                                                              procedure. The bottom curve gives c for the randomized procedure. 
                                                              Note that for the randomized algorithm performs expo•
                                                              nentially better than whereas such an exponential improvement 
  Setting the probability that backtracking re•               for the deterministic algorithm does not occur until  

sults in A finding a solution is at least                     4.3 Heuristic strategy 

                  due to the self-reducibility property of A. So far, we have considered general systematic and ran•
Repeating this experiment times, the al•                      domized search strategies for finding and exploiting back-
gorithm succeeds with probability at least                    doors. However, practical combinatorial solvers generally 
                                                              use heuristics to guide the variable selection process. As 
  One can show that the algorithm runs in                     noted in the introduction, a common principle is to first 
                                               time. It branch on variables that simplify an instance the most. In 
remains to choose b to minimize this expression. As b         effect, this means such heuristics steer the variable choice 
depends directly on we evaluate two natural cases for         towards variables in a backdoor set. We will now formally 
                                                              analyze such heuristic guidance. 

    When B(n) =. klogu for some constant k, the runtime          Restart Strategies for Heuristic Search. By incorporat•
                                                              ing the notion of a variable choice heuristic into our frame-
is for some constant For work, our results are further sharpened. We consider the case 
large the runtime is optimized when is constant; it is        where a randomized depth-first search (DFS) solver with a 
               an improvement over the deterministic bound.   sub-solver A is running on an instance C having a backdoor 
                                                              of size B. The solver chooses variables to branch on accord•
    When for some constant we can show                        ing to a heuristic H, which has a success probability of at 
the runtime is minimized when resulting in a                  least of choosing a backdoor variable at any point in 
                                                              the search. We will use the notation (DFS,H,.4) to denote 
                                         time bound. For 
                                                              a solver with the above properties. 
example, when d = 2 (the case of SAT), and 
the following holds.                                            Informally, a restart strategy is simply a policy that restarts 
                                                              a solver after running it for a specified amount of time, until 
Corollary 4.3 For Boolean formulas with at most               a solution is found. Our main result here gives a condition 
backdoor variables, Algorithm 4.2 solves the formula in       under which a polynomial time restart strategy exists for DFS 
       time, where c 2.                                       solving CSPs with small backdoors. 

  In the Corollary, c is a function of A:. See Figure 1.      Theorem 4.3 If the size of a backdoor of a CSP C is B  


SATISFIABILITY                                                                                                     1177 