                    Computationally       Grounded      Model    of BDI-Agents∗

                          1               1                1                          2
                 Kaile  Su , Abdul  Sattar , Kewen   Wang    and  Guido  Governatori
         1Institute for Integrated and Intelligent Systems, Grifﬁth University, Brisbane, Australia
                  2School  of ITEE, The University of Queensland,  Brisbane, Australia


1  Introduction                                       2   Computationally   Grounded    BDI  Logic
There are two main semantic approaches to formalizing agent We introduce a multimodal logic of belief, desire and inten-
systems via modal logics, the possible worlds semantics tion, called OBDI logic, where the changes and computation
[Hintikka, 1962] and the interpreted system model [Fagin et of agents’ beliefs, desires, and desires are based on agents’
al., 1995]. The ﬁrst approach includes the well-known theory observations (i.e. local states). We assume the reader is fa-
of intension [Cohen and Levesque, 1990] and the formalism miliar with the notion of interpreted system model, and we
of the belief-desire-intension paradigm [Rao and Georgeff, will follow the terminology of [Fagin et al., 1995].
1998]. The second approach, offers a natural interpretation,
in terms of the states of computer processes, to S5 epistemic 2.1 Syntax
logic. The signiﬁcance of the second approach is that we are Given a set Φ of propositional atoms, the language of OBDI
able to associate the system with a computer program, and logic is deﬁned by the following BNF notations:
formulas can be understood as properties of program compu- hwffi ::= any element of Φ | ¬hwffi | hwffi ∧ hwffi |
tations. In this sense, the interpreted system model is compu-     °hwffi | hwffiUhwffi |
tationally grounded [Wooldridge, 2000].                            Bihwffi | Dihwffi | Iihwffi
  There are few computationally grounded models for for-
malizing general BDI-agents. A number of researchers   Informally, Biϕ and Diϕ means that agent i believes and
have attempted to develop executable agent languages such desires ϕ, respectively. While Iiϕ denotes that ϕ holds under
as AgentSpeak(L) [Rao, 1996], but these agent languages the assumption that agent i acts based on his intention.
have comparatively simple semantics [van der Hoek and
Wooldridge, 2003]. The aim of this paper is to present a com- 2.2 The BDI-system Model
putationally grounded model of general BDI-agents.    Given a set G of global states and a system K over G, an
  The main idea of our BDI-model is that we characterize an agent’s mental state over system K is a tuple hB, D, Ii, where
agent’s belief, desire and intention as a set of runs (comput- B, D and I are systems (sets of runs over G) such that
ing paths), which is exactly a system in the interpreted system I ⊆ K and D ⊆ B ⊆ K. A BDI-system is a structure
                                                      hK, M1, · · · , Mni, where K is a system and for every i, Mi
model. Let Bi, Di and Ii be sets of runs related to the be-
liefs, desires and intentions of agent i, respectively. Then, is agent i’s mental state over K.
                                                        Assume that we have a set Φ of primitive propositions. An
runs in Bi are possible computing paths from the viewpoint
                                                      interpreted BDI-system I consists of a pair (S, π), where S is
of the agent; runs in Di are those computing paths that the
                                                      a BDI-system and π is a valuation function, which gives the
agent desires; and runs in Ii are those computing paths with
the agent’s choices of the possible actions. Clearly, it is rea- set of primitive propositions true at each point in G.
sonable to assume that Di ⊆ Bi, that is, every desired com-
puting path is a possible one, but we need not to assume that 2.3 Semantics
I ⊆  D  or even I ⊆ B because an agent’s intention may In what follows, we inductively deﬁne the satisfaction rela-
 i    i        i     i                                                            ϕ
fail to achieve its goal and the real computing path may be tion |=OBDI between a formula and a pair of interpreted
                                                      BDI-system and a point. Given an interpreted BDI-system
beyond the agent’s belief even though the agent has chosen
                                                      I = (S, π), suppose that S = hK, M1, · · · , M i and for ev-
and completed an intentional series of actions.                                              n
                                                      ery i, Mi = hBi, Di, Iii. Let r be a run in K and u a natural
  The salient point of our work is that we present a general number, then we have that:
form of BDI agent programs, from which BDI-models can be                            0
                                                        • (I, r, u) |=OBDI Biϕ iff (I, r , v) |=OBDI ϕ for those
                                                            0                       0
generated and speciﬁcations in full BDI logics can be veriﬁed (r , v) ∈ Bi such that (r, u) ∼i (r , v);
by symbolic model checking techniques.                                              0
                                                        • (I, r, u) |=OBDI Diϕ iff (I, r , v) |=OBDI ϕ for those
                                                            0                       0
  ∗                                                        r , v   i        r, u  i r , v
   This work was supported by the Australian Research Coun- ( ) ∈ D such that ( ) ∼ (  );
                                                                                    0
cil grant DP0452628, and partially by the NSFC grants 60496327, • (I, r, u) |=OBDI Iiϕ iff (I, r , v) |=OBDI ϕ for those
                                                            0                       0
10410638 and 60473004.                                    (r , v) ∈ Ii such that (r, u) ∼i (r , v);  Other cases are trivial and omitted here.           is a ﬁnite-state program with n agents and for each agent i,

                                                      P  is agent i’s internal program over P. We use I A to denote
Proposition 1 The following formulas are valid:        i                                      P
                                                      the corresponding interpreted BDI-system.
  • X(ϕ ⇒  ψ) ⇒ (Xϕ ⇒ Xψ)
    Xϕ ⇒  Y Xϕ                                        3.2  Model  checking OBDI  logic
    ¬Xϕ  ⇒ Y ¬Xϕ                                      Theorem  3 Given  a   BDI-program   with  n  agents
    where X and Y stand for Bi, Di or Ii (for the same i). PA =  (PK , P1, · · · , Pn), suppose that PK =
                                                                   0
  • Relationship between belief and desire            (x, θ(x), τ(x, x ), O1, · · · , On), and for every i,
                                                                 i  i     i  i     i  i
    Biϕ ⇒ Diϕ                                         Pi  =  hP(θ1, τ1), P(θ2, τ2), P(θ3, τ3)i. Then, for every
                                                      LT L formula ϕ and agent i, the following are valid in IPA ,
  • Temporal operators
                                                                                 i  i          i i
    °(ϕ ⇒  ψ) ⇒ (°ϕ ⇒  °ψ)                              1. Biϕ ⇔ ∀(x − Oi)(G(P(θ1, τ1)) ⇒ Γ(ϕ, θ1, τ1))
                                                                                 i  i          i  i
    °(¬ϕ) ⇒  ¬ ° ϕ                                      2. Diϕ ⇔ ∀(x − Oi)(G(P(θ2, τ2)) ⇒ Γ(ϕ, θ2, τ2))
     U                 U
    φ  ψ ⇔ ψ ∨ (ϕ ∧ °(ϕ ψ))                                                     i  i          i  i
                                                        3. Iiϕ ⇔ ∀(x − Oi)(G(P(θ3, τ3)) ⇒ Γ(ϕ, θ3, τ3))
2.4  Axiomatization                                   where Γ(ϕ, θ, τ) is a boolean formula built from ϕ, θ, τ by
We give a proof system, called OBDI proof system, for those using quantiﬁcations and ﬁxed-point operations lft and gft.
BDI-agents with perfect recall and a global clock, which con- Remark that Theorem 3 provides a reduction of OBDI to
tains the axioms of propositional calculus plus those formu- LT L, while Proposition 9 in [Su, 2004] gives an OBDD-
las in Propositions 1. The proof system is closed under the based method of model checking LT L formulas. The com-
                               `ϕ      `ϕ
propositional inference rules plus: `Diϕ and `Iiϕ for every plexity of our reduction of logic OBDI to LT L is P SP ACE-
agent i.                                              complete. However, because quantiﬁcations of boolean func-
                                                      tions and ﬁxed-point operators can be dealt with in any
          The OBDI  proof system is sound and complete
Theorem 2                                             OBDD   package, the reduction can be based on OBDDs. In
with respect to interpreted BDI-systems with satisfaction re-
                                                      fact, we implemented a prototype of the OBDI model checker
lation |=   .
       OBDI                                           using CUDD, a very inﬂuential OBDD package developed by
                                                      Fabio Somenzi, and achieved some preliminary experimental
3  Model   Checking   BDI-Agents                      results.
In order to make our model checking algorithm practically
useful, we must consider where our model, an interpreted 4 Concluding  Remarks
BDI-system comes from. To make the things simpler, we In this work, we have explored computationally grounded
may consider some abstract programs such as ﬁnite-state pro- modal logics that characterize the internal attitudes of an
grams, which are expressive enough from the standpoint of agent–its beliefs, desires, etc, beyond S5 axioms and carried
theoretical computer science. Moreover, to make our model out a methodology on symbolic model checking for general
checking system practically efﬁcient, we use symbolic model BDI-agents.
checking techniques. Thus, a ﬁnite-state program in our ap-
proach is represented in a symbolic way.
                                                      References
3.1  Symbolic representation of interpreted           [Cohen and Levesque, 1990] P.R. Cohen and H.J. Levesque. Inten-
     BDI-agents                                         sion is choice with commitment. Artiﬁcial Intelligence, 42:23–
                                                        261, 1990.
We formally deﬁne a (symbolic) ﬁnite-state program with n
                               0                      [Fagin et al., 1995] R. Fagin, J. Halpern, Y. Moses, and M. Vardi.
agents as a tuple P = (x, θ(x), τ(x, x ), O1, · · · , On), where
x is a set of system variables; θ is a boolean formula over Reasoning about knowledge. MIT Press, Cambridge, MA, 1995.
x, called the initial condition; τ is a boolean formula over [Hintikka, 1962] J. Hintikka. Knowledge and Belief. Cornell Uni-
     0
x ∪ x , called the transition relation; and for each i, Oi ⊆ x, versity Press, Ithaca, NY, 1962.
containing agent i’s local variables, or observable variables. [Rao and Georgeff, 1998] A.S. Rao and M.P. Georgeff. Decision
Given a state s, we deﬁne agent i’s local state at state s to procedures for BDI logics. Journal of Logic and Computation,
be s ∩ Oi. We may associate with P an interpreted system 8(3):293–344, 1998.
IP = (R, π) called the generated interpreted system of P. [Rao, 1996] A.S. Rao. BDI agent speak out in a logical computable
  For convenience, we may use P(θ, τ) to denote a ﬁnite- language. In LNAI, volume 1038, pages 42–55, 1996.
                                     0
state program with n agents (x, θ(x), τ(x, x ), O1, · · · , On), [Su, 2004] K. Su. Model checking temporal logics of knowledge in
if x and O1, · · · , On are clear from the context. Given distributed systems. In AAAI-04, pages 98–103. AAAI, 2004.
                    P(θ, τ)     n
a ﬁnite-state program      with    agents, we deﬁne   [                           ]
                                    θ, τ               van der Hoek and Wooldridge, 2003 W. van der Hoek and
an agent’s internal program (over P(   ) as a tuple     M. Wooldridge. Towards a logic of rational agency. L.J. of
hP(θ1, τ1), P(θ2, τ2), P(θ3, τ3)i, where (θj ⇒ θ) ∧ τj ⇒ IGPL, 11(2):135–159, 2003.
τ,for j = 1, 2, 3, and (θ2 ⇒ θ1) ∧ τ2 ⇒ τ1 are valid. Clearly,
                                                      [             ]
an agent’s internal program is exactly related with an agent’s Wooldridge, 2000 M. Wooldridge. Computationally grounded
                                                        theories of agency. In E. Durfee, editor, Proceedings of ICMAS-
mental state. Thus, we deﬁne a (symbolic ) BDI-program  00, pages 13–22. IEEE Press, 2000.
with n agents as a tuple PA = (PK , P1, · · · , Pn), where PK