   Exploiting Inference Rules to Compute Lower Bounds for MAX-SAT Solving∗

                                     Han Lin1    and Kaile Su  1,2 †
      1Department of Computer Science, Sun Yat-sen University, Guangzhou 510275, P. R. China
                         2IIIS, Grifﬁth University, Brisbane, Qld 4111, Australia
                           1underchange@yahoo.com,      2k.su@grifﬁth.edu.au


                    Abstract                          sonable time [Kautz and Selman, 2005].Almosteverycom-
                                                      plete SAT solver is based on the DPLL algorithm [Davis et al.,
    In this paper we present a general logical frame- 1962], and almost every DPLL-based solver employs trans-
    work for (weighted) MAX-SAT problem, and study    formation rules, such as unit propagation and resolution, to
    properties of inference rules for branch and bound achieve high efﬁciency. Such rules improve SAT solvers in
    MAX-SAT solver. Several rules, which are not      two main aspects. First, it may be used to simplify a formula.
    equivalent but Λ-equivalent, are proposed, and we Second, at each internal node of the search tree, the solver
    show that Λ-equivalent rules are also sound. As an may attempt to use such rules to prove unsatisﬁability of the
    example, we show how to exploit inference rules to formula instantiated by a partial assignment, and if the for-
    achieve a new lower bound function for a MAX-     mula is really unsatisﬁable, the solver will not extend the par-
    2-SAT solver. Our new  function is admissible     tial assignment any more. Although such rules are of great
    and consistently better than the well-known lower use in SAT solving, it can not be applied directly to MAX-
    bound function. Based on the study of inference   SAT solvers for several reasons. First, using these rules to
    rules, we implement an efﬁcient solver and the ex- simplify a formula may not preserve the optimal value. Sec-
    perimental results demonstrate that our solver out- ond, since the goal of a MAX-SAT solver is to ﬁnd maximum
    performs the most efﬁcient solver that has been im- number of satisﬁed clauses, the proof of unsatisﬁability is
    plemented very recently [Heras and Larrosa, 2006], meaningless. This is why there is a big gap between SAT and
    especially for large instances.                   MAX-SAT solving. Fortunately, transformation rules can be
                                                      used to compute lower bounds during the MAX-SAT search-
                                                      ing process. In this paper, we further study the properties of
1  Introduction                                       transformation rules for (weighted) MAX-SAT and propose
In the past few years MAX-SAT solving techniques have several new rules to improve the lower bounds.
drawn increasing attention [Gramm et al., 2003; de Givry Due to the differences between the logic behind the MAX-
et al., 2003; Alsinet et al., 2003; Shen and Zhang, 2004; SAT problem and that behind SAT, [Larrosa and Heras, 2005]
Li et al., 2005; 2006; Larrosa and Heras, 2005; Xing and developed a logical framework to extend the SAT solving
Zhang, 2005; Heras and Larrosa, 2006] in various ﬁelds of techniques to MAX-SAT. However, because of the simplic-
artiﬁcial intelligence, because many problems can be handled ity of this framework, we can not study the properties of the
by transforming an original problem instance into a MAX- transformation rules intensively. In order to avoid this limi-
SAT instance and solving it with a MAX-SAT solver. These tation, we extend the framework by introducing several new
problems include MAX-CUT, MAX-CLIQUE,aswellasprob-    fundamental concepts.
lems in domains such as routing [Xu et al., 2003], bioin- This paper is organized as follows. In Section 2, we de-
formatics [Strickland et al., 2005], scheduling [Vasquez and scribe our logical framework for MAX-SAT, and intensively
Hao, 2001],andprobabilistic reasoning [Park, 2002].   study the properties of inference rules. In Section 3, we
  MAX-SAT is an optimization version of the SAT problem. propose several new inference rules to improve MAX-SAT
In the last decade signiﬁcant progress has been made in the solvers. In Section 4, as a case study, we show how to ex-
performance of SAT solvers. A modern SAT solver can han- ploit inference rules to improve the lower bound function of
dle instances containing up to a million variables within rea- MAX-2-SAT. Section 5 shows experimental results. Finally
                                                      we conclude the paper in Section 6.
  ∗This work has been supported by the Australian Research Coun-
cil grant DP0452628, National Basic Research 973 Program of
China under grant 2005CB321902, National Natural Science Foun- 2 A Logical Framework for Weighted
dation of China grants 60496327, 10410638 and 60473004, and MAX-SAT
Guangdong Provincial Natural Science Foundation grants 04205407
and 06023195.                                         In this section, we propose a logical framework for weighted
  †Corresponding author                               MAX-SAT, which is more general and suitable for study-

                                                IJCAI-07
                                                  2334ing the MAX-SAT solving techniques than the one proposed Deﬁnition 2 Given two bounded formulas (F1,k1) and
in [Larrosa and Heras, 2005; Heras and Larrosa, 2006]. (F2,k2),
                                                                       (F1,k1) |=(F2,k2)
2.1  Basic Notation and Deﬁnitions                         1
                                                      holds if every model of (F1,k1) is also a model of (F2,k2).
For convenience we introduce some notation and deﬁnitions. (F1,k1) and (F2,k2) are equivalent, denoted by (F1,k1) ≡
In propositional logic, a variable x may take values 1 (for (F2,k2),if(F1,k1) |=(F2,k2) and (F2,k2) |=(F1,k1).
true)or0 (for false). A literal is either a variable or its nega-
                                                      Deﬁnition 3 Given two weighted CNF formulas F1 and F2,
tion. The variable related to literal l is denoted by var(l).The
negation of a variable (or literal) x is denoted by x¯.Aclause              F1 |= F2
C = l1 ∨ l2 ∨ ...∨ lm is a disjunction of literals in which no
variable occurs more than once. A weighted clause is a pair holds, if (F1,k) |=(F2,k) for any k. Two weighted CNF
(C, w) where C is a clause and w is the weight of this clause. formulas F1 and F2 are equivalent, denoted by F1 ≡ F2,if
Without loss of generality, we assume w is a natural number F1 |= F2 and F2 |= F1.
in this paper. A CNF formula is a conjunction of clauses. A The following proposition and corollary reveal the relation
weighted CNF formula is a set of weighted clause. A bounded between our deﬁnitions and the weighted MAX-SAT prob-
formula is a pair (F, k) where F is a weighted CNF formula lem.
and k, a natural number, is the upper bound of this formula.
                                                                   F     F                          F  |=
For a formula F over a variable set V ,anassignment for F Lemma 1 Let 1 and 2 be weighted CNF formulas, 1
                                                                                              
is a mapping from V to {0, 1} and is denoted by a vector F2, if and only if for every complete assignment X of F1 and
         n                                           F
X ∈{0, 1} ,wheren is the number of variables in V .The 2, we have
assignment is complete if V  ⊇ V ; otherwise it is partial. An                           
                                                                 COST(F1,  X)  ≥ COST(F2,  X)
assignment satisﬁes a clause if it satisﬁes at least one literal
in the clause. An assignment satisﬁes a CNF formula if it Proposition 1 Given two weighted CNF formulas F1 and F2,
satisﬁes every clause in the formula. The instantiation of a if F1 |= F2,thenOPT (F1) ≥ OPT (F2).
       F                 l     true           F [l]
formula  by forcing literal to be  , denoted by   ,                                            F      F
produces a new formula as follows: all clauses containing lit- Corollary 1 Given two weighted CNF formulas 1 and 2,
                                                      if F1 ≡ F2,thenOPT (F1)=OPT   (F2).
eral l are eliminated, and ¯l is deleted from each clause where
it occurs. We use 2 to denote empty clause, which can not be Now we describe the procedure MAX-DPLL, which is
satisﬁed by any assignment.                           slightly different from [Larrosa and Heras, 2005],forsolv-
  Given a weighted CNF formula F and a complete assign- ing weighted MAX-SAT as follows.
    X    F
ment   for ,weset                                     function MAX-DPLL((F, k):bounded formula):interger;
                              
   COST(F,  X )=                             w       1. F :=ApplyEquivalentRules((F, k));
                                                         F                         (F, k)
                  (C,w)∈F and X does not satisfy C   2.    :=ApplyNonequivalentRules(   );
                                                      3. if (2,k) ∈ F  then return k;
                       
which indicates the cost of X in F .                  4. if F = ∅ then return 0;
  Given a weighted formula F , weighted MAX-SAT prob-
                                                      5. if F = {(2,w)} then return w;
                         X         COST(F,   X )
lem is to ﬁnd an assignment such that            is      l             F
minimum.  We denote such minimal value by OPT  (F ).  6.  :=SelectLiteral( );
Since unweighted MAX-SAT problem is a particular case in 7. v:=MAX-DPLL((F [l],k));
which w =1for every weighted clause (C, w) in F , we only 8. v:=MAX-DPLL((F [¯l],v));
consider weighted MAX-SAT problem in this paper.      9. return v;
2.2  The Logical Framework                            end function
Deﬁnition 1 A complete assignment X is called a model of Procedure 1: The procedure for solving weighted MAX-SAT.
a bounded formula (F, k),ifCOST(F, X ) <k. A bounded
formula is unsatisﬁable if it has not any model.        The MAX-DPLL procedure is much like the DPLL, and its
                                                      correctness is derived from the recursive equation
           (F, 0)
  Obviously,     is unsatisﬁable for any weighted formula    OPT  (F )=min{OPT   (F [l]),OPT(F [¯l])}
F and if (2,k) ∈ F ,then(F, k) is also unsatisﬁable.
  Note that in the above deﬁnition, if k =1, then a model The sub-procedures ApplyEquivalentRules and ApplyNon-
should satisfy every clause in the formula, which is the same equivalentRules in lines 1 and 2 will be discussed later. For
as the case in the context of SAT problem. So SAT solving the moment, they can be considered as procedures just re-
can be considered as a special case in our logical framework. turning the input formula F . The initial value of variable k,
  According to Deﬁnition 1, we can naturally generalize
semantic entailment relation and equivalence relation from 1Of course we can generalize this deﬁnition by replacing
classical positional logic to our logical framework.  (F1,k1) with more than one bounded formula, but it is meaning-
                                                      less in the context of MAX-SAT solving.

                                                IJCAI-07
                                                  2335upper bound of formula F , can be obtained by running a local a new formula. But if we only consider such rules, very few
search procedure, such as [Borchers and Furman, 1999]. rules can be exploited.
  Now let’s pay attention to inference rules for weighted An alternative way is to choose rules in this form P ⇒ Q
MAX-SAT. An inference rule is in this form:           such that OPT (P )=OPT   (Q). Unfortunately, applying
                                                      such kind of rules is not safe, because OPT (P )=OPT (Q)
                      P ⇒  Q
                                                      does not ensure the validity of OPT (P ∪R)=OPT (Q∪R)
                                                            P  Q     R
where P and Q are weighted CNF formulas. The procedure where ,  ,and   are weighted CNF formulas. A counter
for applying an inference rule to a formula can be described example is given as follows.
as follows (WCF is short for weighted CNF formula):   Example 1  OPT ({(x, 1)})=OPT     ({(x ∨ y,1)})=
                                                      0,butOPT    ({(x, 1), (¯x, 1)})=1while  OPT  ({(x ∨
function ApplyRule(P ⇒ Q:inference rule, F :WCF):WCF; y,1), (¯x, 1)})=0.
     P ⊆ F      F := (F − P ) ∪ Q
1. if      then                 ;                       Thus, if we attempt to incorporate more inference rules to
2. return F ;                                         weighted MAX-SAT solvers, we should ﬁnd rules that are
end function                                          not necessarily equivalent but can preserve the optimal value
                                                      of the original formula. For this purpose, we introduce the
Procedure 2: The procedure for applying an inference rule to following deﬁnition.
a weighted CNF formula.
                                                      Deﬁnition 5 Let Λ be a non-empty set of variables, two
                                                      weighted CNF  formulas F1 and  F2 are said to be Λ-
Deﬁnition 4 An inference rule P ⇒  Q is sound if for  equivalent, denoted by F1 ≈Λ F2, if for every weighted CNF
any weighted CNF formula R, we have OPT (P ∪ R)=      formula P over Λ, F1 |= P if and only if F2 |= P .Aninfer-
OPT  (Q ∪ R).                                         ence rule P ⇒ Q is a Λ-equivalent rule if P ≈Λ Q.
  An inference rule P ⇒ Q is an equivalent rule if P ≡  For Λ-equivalent rules, we have the following proposition
Q. The following proposition shows that applying equivalent and theorem.
rules to a formula can preserve its optimal value.    Proposition 3 All equivalent rules are Λ-equivalent for any
Proposition 2 All equivalent rules are sound.         Λ.
                                                                   P  ⇒  Q      Λ
  For a bounded formula (F, k), [Larrosa and Heras, 2005; Theorem 1 If      is a  -equivalent rule, and R is
                                                                                  Λ      OPT  (P ∪ R)=
Heras and Larrosa, 2006] incorporated the following infer- a weighted CNF formula over ,then
                                                      OPT  (Q ∪ R)
ence rules into their weighted MAX-SAT solvers:                   .
  • BR1: {(A, k), (A ∨ B,w)}⇒{(A, k)}                   Theorem 1 gives the condition under which we can apply
                                                      Λ-equivalent rules to the formula. And Proposition 3 shows
  • BR2: {(A, w), (A, u)}⇒{(A, w ⊕ u)}                that Λ-equivalent is a weaker notation than equivalent, that
  • BR3: If w ⊕  u =  k then {(A, w), (A ∨ B,u)}⇒     is, the set of equivalent rules is the subset of the set of Λ-
    {(A, w), (A ∨ B,k)}                               equivalent rules. So, theoretically, considering Λ-equivalent
  •      {(A, 0)}⇒{}                                  rules will provide more choices than considering equivalent
    BR4:                                              rules only. Thus, it is promising to employ Λ-equivalent rules
  • RES: {(x ∨ A, u), (¯x ∨ B,w)}⇒{(A ∨ B,m), (x ∨    in weighted MAX-SAT solvers. In Section 3, we will propose
                                     ¯          ¯
    A, u  m), (¯x ∨ B,w  m), (x ∨ A ∨ B,m), (¯x ∨ A ∨ several Λ-equivalent rules.
    B,m)}                                               Now let us pay attention to nonequivalent rules which are
                                                                         Λ
where x is any literal, A and B are arbitrary disjunction of neither equivalent nor -equivalent. We note that every in-
       m =  min{u, w}                            ⊕    ference rule P ⇒ Q considered in this paper should satisfy
literals,             in the RES rule, and operators  P |= Q
and  are deﬁned as                                          . So although applying a nonequivalent rule to a for-
                                                      mula may not preserve its optimal value, we may exploit it
               a ⊕ b = min{a + b, k}                  to compute a lower bound. From Proposition 1, we can con-
                                                      clude that lower bounds that are computed in this way are
                     
                        a − ba=  k                   admissible, namely the lower bound is always less than or
              a  b =
                        ka=       k                   equal to the optimal value. In fact, sometimes it is easier to
                                                      use nonequivalent rules to obtain conﬂict clauses. For exam-
                                                      ple, [Shen and Zhang, 2004; Li et al., 2005] apply inference
  Note that [Larrosa and Heras, 2005; Heras and Larrosa,
                                                      rules like {(¯x, 1), (x ∨ y,1), (¯y,1)}⇒{(2, 1)}.However,
2006] incorporated some special cases of RES rather than the
                                                      since such rules are not equivalent, they can not be used to
general RES rule.
                                                      achieve a tight lower bound usually. In Section 4, we will
  By exploiting the above rules, [Heras and Larrosa, 2006]
                                                      discuss this problem.
implemented a weighted MAX-SAT solver that outperforms
other state-of-art solvers. However, we can observe that all    Λ
the above rules are equivalent rules. It is no doubt that equiv- 3Some-Equivalent Inference Rules
alent rules are sound, that is, preserve the model and the op- In this section we present two Λ-Equivalent Rules and show
timal value, so it is safe to exploit equivalent rules to produce in which situation they can be applied.

                                                IJCAI-07
                                                  2336  The ﬁrst Λ-equivalent rule we propose is            Example 3  Let F = {(x, 3), (x ∨ y,2), (¯x ∨ z,1), (¯z, 1)}.
                                                      The 2-RES   rule transforms F into {(y ∨  z,1), (¯y ∨
                                                  2
1-RES: {(x ∨ A, u), (¯x ∨ B,w)}⇒{(A ∨ B,min{u, w})}   z,1), (¯z, 1)}. And the RES rule transform the resulting for-
                                                               {(z,1), (¯z, 1)}                   {2, 1}
where x is a literal, and A and B are arbitrary clauses (may mula into     , which can be simpliﬁed to  .
be empty).
Theorem 2 Let Λ  be a non-empty set of variables. If  4   A New Lower Bound Function for
var(x) ∈/ Λ, then 1-RES is a Λ-equivalent rule.           MAX-2-SAT
Proof  Without loss of generality, we may consider A and MAX-2-SAT is a special case of weighted MAX-SAT, in
B as variables. It is easy to verify that {(x ∨ A, u), (¯x ∨ which each clause has weight 1 and at most two literals.
B,w)}|=  {(A ∨ B,min{u, w})}, so for any weighted for- [Shen and Zhang, 2004] studied several lower bound func-
mula P, whenever {(A ∨ B,min{u, w})}|= P ,wealsohave  tions for MAX-2-SAT, and proposed a lower bound function
{(x∨A, u), (¯x∨B,w)}|= P . Now suppose {(x∨A, u), (¯x∨ lower bound4a, which is proved to be admissible and consis-
B,w)}|=  P ,whereP  is a weighted formula not containing tently better than others. The procedure for calculating this
x. There are four cases.                              function is as follows (LB1 is the number of conﬂicting (or
  • Case 1: A =0and   B  =0,ifx   =0,thecostisu,      empty) clauses by the current partial assignment).
    otherwise the cost is v, from Lemma 1, the cost of P
                                                      function lower bound4a(i:integer):integer;
    in this case should be less than min{u, v}, which is not
    greater than the formula {(A ∨ B,min{u, w})} in this 1. LB4:=LB1;
    case.                                             2. while (i ≤ n)do
  • Case 2: A =0and   B  =1,ifx    =0the cost is u,   3.   LB4:=LB4+min(μ(¯i),μ(i));
               0                        P
    otherwise is , from Lemma 1, the cost of should be 4.  t := |μ(¯i) − μ(i)|;
    0, which is also not greater than {(A∨B,min{u, w})}.
                                                      5.   if μ(¯i) >μ(i) then Y := B(i) else Y := B(¯i);
  •        A =1     B =0
    Case 3:     and      , analysis is similar with above  S := φ
    cases.                                            6.         ;
                                                              j ∈ Y   t>0
  •        A =1     B =1                              7.   for      if (   ) do
    Case 4:     and      , analysis is similar with above                ¯
    cases.                                            8.      if (μ(j) >μ(j)) then S := S ∪{j} else
  To sum up, we can conclude that no matter in which case, 9.   t := t − 1; μ(j):=μ(j)+1;
the cost of P is less than or equal to {(A ∨ B,min{u, w})}, 10. end if
             {(A ∨ B,min{u, w})}|=  P           
so we also have                       .               11.  end for
  According to Theorem 1 and Theorem 2, if a formula F 12. for j ∈ S if (t>0) do
        (x ∨ A, u)   (¯x ∨ B,w)     var(x)
contains          and          ,and        does not   13.     t := t − 1; μ(j):=μ(j)+1;
occur in other clauses in F, we can apply 1-RES to F .
                                                      14.  end for
             F  = {(x ∨ y,2), (¯x ∨ z,3)}
Example 2 Let                        . If we apply the     i := i +1
RES rule, we will get {(y ∨z,2), (¯x∨z,1), (x∨y ∨z,¯ 2), (¯x∨ 15.   ;
y¯∨z,2)}, which is too complicated. But if we apply the 1-RES 16. end while
rule, we will get a much simpler formula {(y ∨ z,2)}. 17. return LB4;
  The second Λ-equivalent rule we propose is          end function
2-RES: {(x, u), (x ∨ y,v), (¯x ∨ A, w)}⇒              Procedure 3: The procedure for computing LB4a.
       {(y ∨ A, min{u ⊕ v, w}), (¯y ∨ A, min{u, w})}
where x and y are literals, and A is the conjunction of arbi- The main idea of this procedure is to exploit the inference
trary literals (may be empty).                        rule {(¯x, 1), (x ∨ y,1), (¯y, 1)}⇒{(2, 1)} to obtain a lower
  Note that we can apply the RES rule to the right side of the bound (Due to limited space, for more details, please refer to
2-RES rule to get simpler formula further.            the original paper). However, this rule is not equivalent, so
              Λ                                       the tight may be not tight enough. According to the RES rule,
Theorem 3 Let    be a non-empty set of variables. If  {(¯x, 1), (x ∨ y,1), (¯y, 1)}≡{(¯x ∨ y¯), (2, 1)}
var(x) ∈/ Λ, then 2-RES is a Λ-equivalent rule.                                              , so we exploit
                                                      the rule {(¯x, 1), (x ∨ y,1), (¯y, 1)}⇒{(¯x ∨ y,¯ 1), (2, 1)} to
Proof  The proof is similar with Theorem 1, so we omit it get a better lower bound. Procedure 4 illustrates our algo-
here.                                            2    rithm. Line 12 and 17 change the formula by deleting x ∨ y
                                                 F    and adding the clause x¯∨y¯. k can be considered as a constant
  According to Theorem 1 and Theorem 3, if a formula                             k =3
contains {(x, u), (x ∨ y,v),and(¯x ∨ A, w),andvar(x) does number, in our code, we choose . So the time complex-
not occur in other clauses in F, we can apply 2-RES to F . ity of lower bound5 is the same as lower bound4a. In order
                                                      to compare with lower bound4a, we write the pseudo code in
  2This rule can be considered as an extension of the elimination the same style as procedure 3. Note that the real code is far
rule [Bansal and Raman, 1999] to weighted MAX-SAT.    from this pseudo code.

                                                IJCAI-07
                                                  2337function lower bound5(i, k:integer):integer;          MAX-3-SAT instances (experimental results are illustrated in
1. LB5:=LB1;                                          Table 2). The instances are generated by the well-know gen-
                                                      erator Cnfgen. Executions are run on a 2.4 Ghz Pentium 4
2. i1 := i;
                                                      computer with Linux.
         k>0
3. while (    ) do                                                                        Λ
          i ≤ n                                          Problem        Toolbar            -SAT
4.   while (   ) do                                    #var  #cls     #node  time(s)   #node  time(s)
                      ¯
5.    LB5:=LB5+min(μ(i),μ(i));                           50   100      383     0.00        6    0.03
6.    t := |μ(¯i) − μ(i)|;                                    150      541     0.01       37    0.04
7.    if μ(¯i) >μ(i) then Y := B(i) else Y := B(¯i);          200      748     0.02      150    0.05
      S := φ                                                  250     1167     0.04      289    0.06
8.          ;                                                 300     1803     0.07      685    0.09
9.    for j ∈ Y if (t>0) do                                   350     2771     0.13      997    0.11
10.       if (μ(j) >μ(¯j)) then S := S ∪{j} else              400     4213     0.22     1887    0.17
11.        t := t − 1; μ(j):=μ(j)+1;                          450     5214     0.29     2815    0.24
                                                              500     7264     0.42     3674    0.30
           B(i):=B(i)  −{j}  B(¯i):=B(¯i) ∪{¯j}
12.                         ;                 ;               550     8761     0.54     4530    0.38
13.      end if                                               600    13140     0.82     7365    0.58
14.    end for                                                650    18160     1.14   10523     0.81
15.    for j ∈ S if (t>0) do                                  700    24973     1.61   14378     1.09
                                                        100   200     1877     0.09      155    0.09
         t := t − 1 μ(j):=μ(j)+1
16.              ;               ;                            250     5135     0.42      967    0.18
                             ¯      ¯    ¯
17.      B(i):=B(i)  −{j}; B(i):=B(i)  ∪{j};                  300    10405     1.05     3217    0.46
18.    end for                                                350    28698     3.39     9759    1.31
                                                              400    60210     7.48   26931     3.74
19.    if μ(¯i) >μ(i) then μ(¯i):=t else μ(i):=t;
                                                              450   115093    15.10   54202     7.39
       i := i +1
20.            ;                                              500   244641    33.26  116368    16.01
21.  end while                                          150   300    13608     2.28     3961    0.94
22.  i := i1; k := k − 1;                                     350    62872    13.14   20706     4.57
                                                              400   216731    47.83   89632    19.99
23. end while
                                                              450   575106   128.77  202468    47.44
24. return LB5;                                               500  1358349   320.63  527558   127.43
end function
                                                      Table 1: The experimental results on random MAX-2-SAT.
Procedure 4: The procedure for computing LB5.
                                                         Problem        Toolbar           Λ-SAT
  The following theorem shows that LB5 is admissible and #var #cls    #node  time(s)   #node  time(s)
consistently better than LB4a.                           50   150      209     0.00        0    0.00
                                                              200      657     0.01       51    0.00
Theorem 4 LB4a  ≤ LB5  ≤ OPT  (F ).                           250     4087     0.12     1320    0.10
                                                              300     9889     0.35     5051    0.25
5  Experimental Results                                       350    26836     1.09   13329     0.63
The experimental results are presented in this section. Our   400    51133     2.28   28257     1.37
solver, called Λ-SAT, is compared with the solver Tool-       450    77010     3.74   41410     2.13
bar (http://carlit.toulouse.inra.fr/cgi-bin/awki.cgi/SoftCSP), 500  141339     7.18   72781     4.03
which implemented by [Larrosa and Heras, 2005; Heras          550   208578    11.32  129703     7.34
and Larrosa, 2006]. Other solvers are not freely available    600   383773    22.31  188048    11.07
and [Heras and Larrosa, 2006] showed that Toolbar outper-     650   434565    25.71  276834    16.91
forms others. So we only compare our solver with Toolbar.     700   673423    40.80  368897    23.42
  Our solver implements the variable selection strategy  80   300     2283     0.08        0    0.00
known as Jeroslow-Wang rule [Jeroslow and Wang, 1990],        350    21204     1.09     2566    0.18
which is widely employed in state-of-art SAT solvers. For     400   115956     7.07   29980     1.90
inference rules, we choose the same as [Heras and Larrosa,    450   552097    37.65  218965    15.18
2006], additionally we also employ the new rules proposed in  500  1412277   104.62  604266    45.93
this paper. Our tool is implemented in C.               120   450    39008     3.23        0    0.00
  We run two solvers with random MAX-2-SAT (experimen-        500   386564    39.04   48689     4.85
tal results are illustrated in Table 1, #var stands for the number Table 2: The experimental results on random MAX-3-SAT.
of variables and #cls stands for the number of clauses, #node
stands for the mean number of nodes of the whole search tree, The results demonstrate that for small instances, the perfor-
time stands for the mean running time over 30 instances) and mance of the our solver is nearly the same as Toolbar, while

                                                IJCAI-07
                                                  2338