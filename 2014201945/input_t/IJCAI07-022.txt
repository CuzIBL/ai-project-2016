     Constraint and Variable Ordering Heuristics for Compiling Configuration
                                              Problems

                     Nina Narodytska                                Toby Walsh
                  National ICT Australia                         NICTA and UNSW
                  ninan@cse.unsw.edu.au                           Sydney, Australia
                                                                tw@cse.unsw.edu.au

                    Abstract                          space and time resources than are available. We propose
                                                      three heuristic techniques for improving the time and space
    To facilitate interactive design, the solutions to con- required to construct a decision diagram representing the set
    ﬁguration problems can be compiled into a de-     of valid solutions to a configuration problems. These heuris-
    cision diagram. We develop three heuristics for   tics exploit the distinctive clustered and hierarchical structure
    reducing the time and space required to do this.  observed in the constraint graphs of configuration problems.
    These heuristics are based on the distinctive clus- The ﬁrst heuristic provides an order in which constraints are
    tered and hierarchical structure of the constraint added to the decision diagram. This limits the growth in the
    graphs of configuration problems. The ﬁrst heuris- amount of memory used during construction of the diagram.
    tic attempts to limit the growth in the size of the de- The second heuristic provides an initial order for the vari-
    cision diagram by providing an order in which con- ables within the decsion diagram. Finally, the third heuris-
    straints are added to the decision diagram. The sec- tic groups variables together based on the clustering. These
    ond heuristic provides an initial order for the vari- groups are used by a dynamic variable sifting [Rudell, 1993]
    ables within the decision diagram. Finally, the third procedure that reorders variables during the construction of
    heuristic groups variables together so that they can the decision diagram. The combined use of these techniques
    be reordered by a dynamic variable reordering pro- reduces by one or two orders of magnitude the time to con-
    cedure used during the construction of the decision struct decision diagrams for problems from the configuration
    diagram. These heuristics provide one to two or-  benchmarks suites [Subbarayan, 2004; Sinz et al., 2003].In-
    ders magnitude improvement in the time to compile terestingly, the same heuristics perform poorly on satisﬁabil-
    a wide range of configuration.                    ity benchmarks from SATLib suggesting that they are highly
                                                      tuned to the clustered and hierarchical structure of conﬁgura-
1  Introduction                                       tion problems.
Product configuration is often an interactive procedure. The 2 Compiling configuration problems
customer chooses a value for a decision variable. They then
                                                                                     [           ]
receive feedback from the configurator about valid values A binary decision diagram (BDD) Bryant, 1986 can be
for the remaining decision variables. This continues until a viewed as an acyclic directed graph where edges are labeled
complete and valid configuration is found.Such a scenario by assignments, and a path from the root to the node marked
requires an efficient mechanism to ensure the current deci- true corresponds to a model. The set of all such paths thus
sions can be consistently extended. Hadzic et al. have pro- gives the set of all possible models. Efﬁcient procedures exist
posed a two-phase approach for such interactive conﬁgura- for constructing and manipulating BDDs. To compile the so-
tion [Hadzic et al., 2004]. In the first ofﬂine phase, a compact lutions of a configuration problem into a BDD, we can repre-
representation is constructed of all product configurations us- sent every constraint as a separate BDD and conjoin together
ing a decision diagram. This representation is then used by these BDDs. As BDDs are added, the size of the result-
the interactive configurator during the second stage. ing BDD grows. For example, Figure 1 shows the relation-
  In this paper, we focus on optimising the first phase of ship between the number of constraints added and the num-
this configuration process: the compilation of the set of valid ber of nodes in the resulting BDD for the Renault Megane
                                                                            [               ]
product conﬁgurations into a decision diagram. This is a configuration benchmark Subbarayan, 2004 . The decision
computationally hard task that can use a significant amount diagram grows almost monotonically in size, except at the
of CPU time and require large amounts of memory. Although end where the addition of some critical constraints causes a
the first phase is performed ofﬂine and is not real-time like dramatic drop in size. We observe similar behavior with other
the second phase, performance is still important. For many conﬁguration benchmarks.
large configuration problems, compilation may require more Such growth is surprsing as quite different behavior is typ-
                                                      ically observed with combinatorial problems. For example,
   Copyright c 2006, IJCAI (www.ijcai.org). All rights reserved. Figure 1b shows the growth in the size of the BDD for Lang-

                                                IJCAI-07
                                                   149      x 105
     5

     4

     3

     2
     Number  of BDD nodes
     1

     0
      0     20     40    60     80    100    120
                     Number of added constraints
                        (a)
       x 106
     3.5

      3

     2.5

      2

     1.5

      1
     Number  of BDD nodes

     0.5

      0
      0       50     100     150     200     250
                     Number of added constraints
                        (b)
                                                      Figure 2: Constraint graph of a Mercedes configuration benchmark
Figure 1: Dynamics of BDD growth for (a) the Renault Megane (C211 FS).The circles indicate major clusters identified by Markov
configuration benchmark and (b) Langford(11,2) problem CLuster Algorithm(MCL)

ford’s number problem [Gent and Walsh, 1999]. The decision binary constraint problem whose constraint graph is a tree.
diagram can be orders of magnitude bigger at an intermedi- By ordering the constraints from the root to the leaves of
ate point than at the end. The amount of memory required the tree, we can achieve a monotonic growth in the size of
to represent the intermediate BDD may therefore be more the BDD. However, adding constraints in a random order can
than is available, even though the final BDD representing all lead to non-monotonic growth.
problem solutions may be comparatively small. In addition, Configuration problems also often have strong custered
even if there is adequate memory to represent the interme- structures. For example, the circles on Figure 2 indi-
diate BDD, the time to construct the final BDD is adversely cate major clusters identified by the Markov CLuster Algo-
affected since the time to add a new constraint to a BDD de- rithm(MCL) [van Dongen, 2000a] for the C211 FS bench-
pends linearly on the size of the BDD.                mark. A cluster typically corresponds to a group of vari-
  Monotonic growth in the size of a decision diagram is ables which are very tightly connected. For example, they
highly desirable from the perspective of memory consump- might describe a single component of the product, e.g., the
tion and speed. We therefore tried to identify the structure engine of the car. Adding to the decision diagram all the con-
of configuration problems monotonic behavior. Our goal straints within a cluster typically reduces the number of valid
is to use these properties in a more directed manner when combinations of the clustered variables and thus the size of
constructing a BDD. We begin our investigations with the the BDD. Our hypothesis thus is that conﬁguration problems
weighted primal constraint graphs. A primal constraint graph have a distinctive hierarchical and clustered structured which
of a problem is an undirected graph where nodes correspond often permits monotonic growth in the size of the BDD.
to problem variables and edges describe constraints. Two
variables are connected by an edge iff they participate in at
least one common constraint. The weight of the edge is equal 3 Constraint ordering heuristics
to the number of common constraints involving these two Based on these observations, we propose a heuristic for
variables. Figure 2 shows the constraint graph of a typical
                     1                                adding constraints that attempts to ensure monotonic growth
configuration benchmark. The constraint graph has a dis- in the size of the BDD by keeping its size as small as possible
tinct tree-like skeleton. It contains a tree of clusters, most of on every step. The heuristic attempts:
which have a star-like structure with a few central nodes con-
nected to a large number of peripheral nodes. In contrast, the To respect the tree-like structure of many configuration
constraint graph of a combinatorial problem like Langford’s problems.In particular, we want the heuristic to guar-
numbers problem is more clique-like.                      antee monotonic growth in the extreme case when the
  The tree-like structure of constraint graphs can help ex- constraint graph is a tree.
plain the monotonic behavior of BDD. Consider an idealised To respect the clustered structure of many configuration
                                                          problems. In particular, we want the heuristic to add
  1
   Most configuration benchmarks contain a large number of constraints from one cluster at a time.
unary constraints. In order to obtain more meaningful results, we
eliminated these constraints by performing pure literal deletion and To keep the number of variables small. Typically, a
unit propagation for all problems in our experiments.     BDD grows in size with the number of variables added.

                                                IJCAI-07
                                                   150                         Start                                 The first such constraint becomes the next candi-

                       1. Select the                           date for being added to the BDD.
                       first central
                        variable                      Step 7. Selection of the next central variable.

                       2.Select and
                       add the first                       7.1 The set of all neighbours of the current central vari-
                        constraint                             able is computed (the current central variable is the

                         3. All                                variable located at the top of the stack of central
                   Yes
             End       constraints
                        added                                  variables).
                              No
                                                           7.2 From the obtained set of variables, all variables that
                       4. Find next                            do not participate in scopes of any of the remaining
                        constraint
                                                               constraints are eliminated.
                                                           7.3 If the obtained set of variables is empty, the current
               Yes                 No
                     5. Next constraint found                  central variable is popped from the stack of central
         6. Add the                  7. Select a               variables and the algorithm returns to step 7.1.
        constraint to                new central
         the BDD                      variable             7.4 From the obtained set of variables, a variable
                                                               whose adjacent edges have the largest total weight
           Figure 3: Flowchart of Algorithm 1                  is selected to be the next central variable. This vari-
                                                               able is stored at the top of the stack of central vari-
                                                               ables. If there are several such variables, the first
    Therefore, we want the heuristic to add as few new vari-   in the used variable ordering is selected.
    ables as possible at each step.
                                                        This algorithm selects a central variable and adds all con-
  Among the many heuristic algorithms that we imple-  straints involving this variable, trying to add as few new vari-
mented and evaluated, the following algorithm, referred to ables as possible on every step. Among all constraints that
as Algorithm 1, produced the best results for the majority pass 4.1 to 4.3, a constraint containing the most inﬂuential
of the benchmarks. Figure 3 shows a ﬂowchart of the algo- variables is selected, since such constraint is more likely to
rithm. The internal state of the algorithm consists of a list reduce BDD size. Then the next central variable is selected
of constraints already added to the BDD, a list of remaining from the neighbours of the current central variable. We select
constraints, a list of variables already added to the BDD, a the heaviest variable hoping that it will be the center of the
list of remaining variables and a stack of variables that have next cluster (which is usually the case).
been used as central variables (the current central variable is Figure 4 shows the results of applying this algorithm to
located at the top of the stack). A central variable is one of the two configuration benchmarks. The graphs compare adding
most constrained variables of the problem, usually the center constraints in a random order, in the original order specified
of one of the clusters.                               in the benchmark description, and in the order produced by
Step 1. Selection of the first central variable. Among all Algorithm 1. In both cases, the order produced by Algo-
    problem variables, a variable whose adjacent edges have rithm 1 results in almost monotonic growth of the BDD and
    the largest total weight is selected to be the first central kept the BDD size smaller than the other two orderings on
    variable. This variable is stored at the top of the stack. all steps. As a result, this algorithm significantly reduced
                                                      the time to construct the BDD. We obtained similar results
Step 2. Selection of the first constraint. Among all con- for other problems from the configuration benchmarks suite,
    straints that include the central variable, a constraint which we were able to solve without the dynamic variable
    with the biggest number of variables in its scope is se- reordering optimisation presented in the following section.
    lected.                                             Another interesting feature of the graphs is that the original
Step 4. Selection of the next constraint. The next con- constraint ordering was much more efficient than the random
    straint to add to the BDD is selected from the set of ordering. We conjecture that the original ordering usually
    remaining constraints.                            reﬂects the natural structure of the problem. For example, it
                                                      typically groups together constraints describing a single com-
    4.1 All constraints that contain the current central vari- ponent of the product. Our constraint ordering heuristic was,
        able are selected from among the remaining con- however, able to make further improvements to this order.
        straints. If no such constraints exist, then Step 4
        terminates without selecting a candidate constraint. 4 Variable ordering
    4.2 From the obtained set of constraints, all constraints
                                                      In the previous section, we showed that in configuration prob-
        that contain the smallest number of variables not
                                                      lems it is often possible to achieve monotonic growth in the
        yet added to the BDD are selected.
                                                      size of the BDD using constraint ordering heuristics. For
    4.3 From the obtained set of constraints, constraints large configuration problems, this may still not be enough.
        with the smallest number of variables are selected. In order to reduce the space and time requirements of these
    4.4 For each selected constraint, the sum of weights of problems, we would like to find ways to reduce further the
        adjacent edges of all its variables is computed and size of the BDD. By reordering variables, it is often possi-
        those constraints with the largest sum are selected. ble to reduce dramatically the size of a BDD [Bryant, 1986].

                                                IJCAI-07
                                                   151       6
     x 10
   3.5                                                    variables are placed higher in the ordering. Most clus-
                                 A random ordering
                                 The original ordering
    3
                                 The ordering produced by Algorithm 1 ters found in configuration problems have a small num-
   2.5                                                    ber of central variables connected to a large number of
    2                                                     peripheral nodes (see for example Figure 2). Typically,
   1.5                                                    the central variables determine the values of the periph-
    1
   Number  of BDD nodes                                   eral variables. Therefore, we put them first in the vari-
   0.5                                                    able ordering and sort the rest of the variables by their
    0
     0   100  200  300 400  500  600  700  800
                     Number of added constraints          proximity to the center. The specific algorithm for or-
                        (a)                               dering variables within clusters is as follows:
     6
    x 10                                                  2.1. For each variable in the cluster, compute the total
                                A random ordering
                                The original ordering          weight of all its adjacent edges. We will refer to
   8
                                The ordering produced by Algorithm 1 this value as the weight of the variable.
   6                                                      2.2. Among all variables in the cluster, select a variable
   4                                                           with the biggest weight. This variable is consid-


  Number  of BDD nodes                                         ered the center of the cluster and is placed in the
   2
                                                               beginning of the cluster in the variable ordering.
   0
   0    100 200  300  400 500  600  700  800 900
                    Number of added constraints           2.3. Variables in the cluster are sorted by the weight of
                        (b)                                    edges connecting them to the central variable (vari-
                                                               ables that are not directly connected to the center
Figure 4: Dynamics of BDD growth when adding constraints in a  are pushed to the back of the cluster).
random order, the original order, and in the ordering produced by 2.4. Variables that are not sorted by the previous step
Algorithm 1 for (a) the C211 FS configuration benchmark and (b) are sorted by their weights (the heaviest variables
the C638 FVK configuration benchmark                           are put first). Variables with equal weights are
                                                               sorted by the total weight of their neighbours.
Unfortunately, determining the optimal variable ordering is Step 3. We establish an ordering among clusters: we place
NP-hard [Bollig and Wegener, 1996]. Heuristics are there- clusters that are weakly connected to the rest of the con-
fore used in practice. Variable ordering techniques can be di- straint graph in front of other clusters. The assumption
vided into two groups: static and dynamic variable ordering is that relatively independent clusters do not increase the
algorithms. Static algorithms compute an ordering of vari- size of the BDD greatly. In the extreme case, a com-
ables before BDD construction. Dynamic algorithms attempt pletely isolated cluster can be placed in the variable or-
to minimise BDD size by improving variable ordering after dering without increasing the size of the rest of the BDD.
the BDD has been partially or completely constructed.     The degree of isolation of a cluster is determined based
  The next sections describe static and dynamic variable or- on its projection. According to [van Dongen, 2000a],
dering heuristics that we developed for configuration prob- the projection of a node in a cluster is “the total amount
lems. These heuristics are based on the following simple ob- of edge weights for that node in that cluster (correspond-
servations. First, we observe that locating strongly dependent ing to neighbours of the node in the cluster) relative to
variables close to each other typically reduces the BDD size. the overall amount of edge weights for that node (cor-
Second, if in a group of variables, one or several variables responding to all its neighbours)”. The projection of a
strongly inﬂuence the assignments of all other variables, then cluster is “the average of all projection values taken over
these variables should be placed higher in variable ordering. all nodes in the cluster”. Clusters are sorted in descend-
                                                          ing order of their projections.
4.1  Static variable ordering heuristics
The proposed static variable ordering algorithm, referred to 4.2 Dynamic variable grouping heuristics
as Algorithm 2, consists of three steps. Step 1 finds and Dynamic variable ordering algorithms try to minimise
groups strongly dependent variables. Step 2 orders variable the size of an existing BDD by reordering its variables.
within groups. Step 3 orders groups relative to each other. Rudell [Rudell, 1993] has proposed a sifting algorithm
                                                      for dynamic variable reordering and demonstrated that it
 Step 1. First, we identify and group together strongly achieves significant reduction of BDD size for some types
    dependent variables.  We  employ  the fact that   of constraint satisfaction problems. The idea of the sifting
    configuration problems have clustered structure and as- algorithm is to move each variable up and down in the order
    sume that variables within a cluster are strongly related to find a position that provides a local minimum in the BDD
    to each other, while variables in different clusters are size. This procedure is applied to every problem variable se-
    weakly related. We use the MCL algorithm to decom- quentially. We applied the sifting algorithm provided by the
    pose problem constraint graphs into clusters and group CUDD package [GLU, 2002] to configuration benchmarks.
    variables belonging to a cluster together in the static We used an adaptive threshold to trigger variable reordering.
    variable ordering.                                Whenever the BDD size reached the threshold, we performed
 Step 2. Second, we try to order variables inside clusters variable reordering and, if the reduced BDD was bigger than
    so that variables that inﬂuence the assignments of other 60% of the current threshold, the threshold was increased by

                                                IJCAI-07
                                                   15250%. The initial threshold was equal to 100000 BDD nodes. typically placed contiguously in the original ordering. On the
These parameter values were selected empirically.     other hand, Algorithm 1 is able to find a good constraint or-
  Panda and Somenzi [Panda and Somenzi, 1995] noticed dering even if the constraints are randomly shufﬂed.
that dependent variables tend to attract each other during vari- Column 6 shows the effect of the static variable ordering
able sifting, which results in groups of dependent variables algorithm (Algorithm 2) on BDD construction speed. It pro-
being placed in suboptimal positions. To avoid this effect, duced comparable results to the original variable ordering
dependent variables should be kept in contiguous groups that (column 3) and performed an order of magnitude better than
are moved as one during variable sifting. They developed the random variable ordering (not given here), which means
the group sifting algorithm, which automatically finds and that we correctly identified the structure of the problem.
groups dependent variables. In our experiments (not cited Comparing columns 4 and 5, 7 and 8 we can see that vari-
here) this algorithm slightly improved performance of vari- able ordering heuristic based on grouping clustered variables
able sifting; however much better performance gain can be reduces BDD construction time compared to pure variable
obtained by taking into account problem structure. As de- sifting [Rudell, 1993] for the majority of benchmarks.
scribed in Section 4.1, in configuration problems, groups of Interestingly, we also tried these three heuristics on a wide
dependent variables can be identified based on the cluster de- range of satisﬁability benchmarks from SATLib. We ob-
composition of the constraint graph. We modified the vari- served uniformly poor performance. We conjecture therefore
able sifting algorithm to partition problem variables into con- that conﬁguration problems have an unusual hierarchical and
tiguous groups corresponding to clusters identified by MCL. clustered structure which we can exploit when compiling so-
Grouped variables are kept contiguous by the reordering pro- lutions into a decision diagram.
cedure. In addition, we allow variables within the group to
be reordered before performing the group sifting.     6   Related work
  When performing variable grouping, it is important to
                                                      Hadzic et. al. proposed using BDDs to represent the solu-
put only strongly connected variables in the same group
                                                      tions of configuration problems [Hadzic et al., 2004].How-
and avoid grouping weakly connected variables. Therefore,
                                                      ever, they were mainly concerned with reducing the size of
among the clusters found by the MCL algorithm, we only
                                                      the final BDD in order to improve the responsiveness of the
group clusters that have projections bigger than 0.35.
                                                      configurator and not with the efficiency of the BDD construc-
                                                      tion. In contrast we focus on reducing time and memory
5  Experimental results                               requirements for BDD construction. For example, our first
                                                      heuristic attempts to optimize the order in which constraints
We evaluated the three heuristics on problems from the
                                                      are added to the BDD. This does not affect the size of the
configuration benchmarks suites [Subbarayan, 2004] and
                                                      final BDD, just the size of intermediate BDDs.
[Sinz et al., 2003]. The algorithms were implemented in C++
                                                        Sinz [Sinz, 2002] has proposed an alternative approach to
using the CUDD 2.3.2 BDD package from the GLU 2.0 li-
                                                      the precompilation of the solutions of configuration problems
brary [GLU, 2002] and the implementation of the MCL al-
                                                      based on construction of the optimal set of prime implicates.
gorithm obtained from [van Dongen, 2000b]. In all experi-
                                                        Static variable ordering techniques have been extensively
ments, MCL was used with the inﬂation parameter set to 5.
                                                      studied for verification problems. Such problems can be de-
This parameter affects cluster granularity; we select it to be
                                                      scribed by a model connectivity graph, an analogue of the
equal to 5 to get fine-grained clusterings. Experiments were
                                                      constraint graph. A number of variable ordering heuristics
run on a 3.2GHz Pentium 4 machine with 1GB of RAM.
                                                      have been developed based on the topology of model con-
  In most cases, MCL produced a satisfactory clustering of
                                                      nectivity graph. These heuristics follow the same guidelines
the constraint graph. However, it failed on several large prob-
                                                      as the ones we used in the Algorithm 2. Namely, they keep
lems: C209 FA, C210 FVF, and C211 FW. In these problems,
                                                      strongly connected variables close in variable ordering and
the majority of variables are grouped into a single cluster as
                                                      put the most inﬂuential variables on top [Chung et al., 1994].
there are several variables connected to virtually every prob-
                                                      Jain et. al. [Jain et al., 1998] proposed a different approach
lem variable. Therefore whenever MCL encounters a clus-
                                                      based on construction of variable orderings for a series of
ter that contains more than half of problem variables, we re-
                                                      BDDs that partially capture the functionality of the circuit.
moved its central variables, which are the heaviest variables
                                                      This approach was further developed in [Lu et al., 2000].
in the cluster, and repeated the the clustering algorithm. The
                                                      While these methods are specialized to veriﬁcation, it would
removed central variables are placed at the top of the initial
                                                      be interesting nevertheless to adapt them to conﬁguration and
variable ordering as they are likely to be inﬂuential.
                                                      compare with the heuristics described here.
  Table 1 gives results of our experiments. As can be seen
from these results, the constraint ordering heuristics in Algo-
rithm 1 (column 3) reduce the time to construct BDDs com- 7 Conclusions
pared to random (column 1) and, in most cases, the origi- We have proposed three heuristics for reducing the time and
nal (column 2) constraint ordering. We note that the original space required to compile the solutions to a configuration
constraint ordering typically produces quite good results too. problem into a decision diagram. We first showed that the
As observed before, we conjecture that the original ordering growth in the size of the decision diagram depends strongly
follows the problem structure very closely. For example, all on the order in which constraints are added, and proposed
constraints describing a single component of the product are a constraint ordering heuristic based on the hierarchical and

                                                IJCAI-07
                                                   153