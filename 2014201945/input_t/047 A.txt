524                                             Session No. 13 Computer Understanding II (Representation) 


    SOME RELATIONS BETWEEN PREDICATE CALCULUS*      II. THE CORRESPONDENCE AMONG TREE, NETWORK AND 
  AND SEMANTIC NET REPRESENTATIONS OF DISCOURSE         ATTRIBUTE VALUE REPRESENTATIONS OF DISCOURSE 
             Robert F. Simmons and                     Linguists are accustomed to representing the 
                Bertram C. Bruce                    structure of natural language sentences as trees. 
                                                    The following sentence El could be represented as 
         Department of Computer Sciences            in Figure 1. 
             The University of Texas 
                  Austin, Texas                          El) John made chairs with tools on October 
                     U.S.A.                                  20th in Austin. 
                                                    For computational convenience Figure 1 can be 
 ABSTRACT                                           represented also as an attribute-value list as in 
                                                    Table 1. 
    Networks can be used to represent syntactic 
 trees of the semantic relations that hold between 
 words in sentences. They can be alternately 
 symbolized as association lists or conjoined sets 
 of triples. A semantic net represents a sentence 
 as a conjoined set of binary predicates. An algor•
 ithm is presented that converts a semantic net•
 work into predicate calculus formalism. The 
 simpler syntax of semantic network representa•
 tions in contrast of ordinary predicate logic 
 conventions is taken as an argument for their 
 use in computational applications. 
 Descriptive Terms: Semantic networks, Predicate 
 logic, Natural language, Computational linguis•
 tics, Association lists. 

 I. INTRODUCTION 
    In approaches to natural language question 
 answering, it is generally agreed that question 
 and text are to be transformed to some formal 
 language representation. After this has been 
 accomplished, answering a question phrased in a 
 formal language from a data base represented in 
 the same formal language is a process of theorem 
 proving where the data are taken as axioms and 
 the questions as theorems to be proved. 
    At this point two approaches are commonly 
 found in the literature. One represents question 
 and data in the syntactic conventions of the 
 predicate calculus and uses standard theorem 
 proving techniques such as Robinson's resolution 
 algorithm supported by heuristic selection of 
 relevant axioms (see Green & Raphael (4), Sande-
 wall (9), Darlington (2)). The other represents 
 question and text as attribute value lists or 
 semantic nets (which will shortly be shown to be 
 equivalent) and uses a matching algorithm guided 
 by heuristic choices of relevant data. This                          *Note: 1st, 2nd, etc. is an 
 approach is seen in Quillian (6), Raphael (7),                              arbitrary notation for 
 Colby et al (1), Schwarcz et al. (11).                                      successive branches 
    In the recent literature Sandewall (10) and                              from a node. 
 Palme (5) have each presented more or less for•
 mal developments of semantic network representa•      Table 1. Attribute-Value Representation of 
 tions as predicate logics. Thompson (13) shows 
 the similarity of a linguistic case-structure                  Syntactic Structure of El 
 analysis to predicate calculus statements. 
    From yet another point of view, this paper         Another linguistic representation for El sug•
 informally shows the similarity of semantic net•   gested by Fillmore (3) is shown in Figure 2. An 
 works to predicate calculus representations and    attribute-value representation of this structure 
 argues that the semantic net syntax is computa•    is also shown there. If the node values "John", 
 tionally simpler and therefore to be preferred.    "chairs", "tools", etc. are taken as symbols 
 *This research was supported by: The National      with unambiguous denotation, and AGT, OBJ, etc. 
 Science Foundation, Grant GJ 509 X                 as semantic relations, then Figure 2 is a seman-Session No. 13 Computer Understanding II (Representation)                                     525 


 tic network. The implied definition is that a      of our eventual conclusion that semantic nets 
 semantic netvork is a system of unambiguous        can be a fully valid representation of the under•
 symbols interconnected by definable semantic       lying logic of a discourse where the nodes are 
 relations.                                         unambiguous in their denotation and the relational 
                                                    arcs are fully defined. 
                                                    III. SOME LOGICAL ASPECTS OF SEMANTIC NETWORKS 
                                                      The principal value of using semantic nets for 
                                                    the structure underlying natural language sen•
                                                    tences is that they are closer to both the form 
                                                    and the meaning of natural language than other 
                                                    proposed structures, such as first order predi•
                                                    cate calculus. In this and the following sections 
                                                   we show that simple semantic nets can be mapped 
                                                    directly into ordinary first order predicate 
                                                    calculus, yet they have several computational 
                                                    advantages because of their proximity to natural 
                                                    language, 
                                                      One particularly illuminating interpretation 
                                                    of semantic nets is that which considers each 
                                                   node as the name of a set of processes and each 
                                                    relational arc as a restriction on the sets 
                                                   named by the nodes it connects. Thus the set of 
                                                   all "makings" includes all events or processes in 
                                                   which an agent A makes an object B, with an 
                                                    instrument C, on time D, at location E. A, B, C, 
                                                   D and E must satisfy certain restrictions based 
                                                    on their participation in deep case relations, to 
                                                    the verb "make". For example, A, as an agent, 
                                                   must be an animate instigator. Similarly "make" 
     Figure 2. Case structure of El and its         itself is restricted to that subclass of all 
               Attribute-Value Representation       verbs which have agent, object, instrument, time 
                                                    and locative cases. 
                                                      In a specific sentence the set of "makings" 
    Looking at the attribute-value representation  may be restricted further. For example in sen•
 of Figure 2, we can see that it can also be        tence El we have the small subclass of "makings": 
 represented as a conjoined set of triples as 
 follows:                                               "makings by John, of chairs, with tools, 
                                                         on Oct. 20, at Austin" 


 This is a simple and convenient representation 
 for computational purposes. Its logic is explained 
 later. 
    From this discussion it can be seen that the 
 "node-arc-node" structure of networks is a syn•
 tax of symbolic notation that can equally well 
 represent a syntactic tree structure or the 
 semantic relations among elements of a sentence.* 
 In either case, the net can be symbolized as an 
 attribute-value list where the attributes are 
 relations and the values are whatever is repre•
 sented on the nodes. The attribute-value list, 
 in turn, can be represented as a set of triples 
 where each value may be another set of triples. 
    Before proceeding into the next section con•
 sidering the logical notation for this structure, 
 it is worth mention that Williams (14) developed 
 a network representation for predicate calculus 
 statements following original graphic notations    Referring to Figure 3 we see that each node in 
 she attributes to Frege. We take this as support   the semantic network is also restricted by its 
                                                    relations to other nodes. Thus C3 refers to a 
 *In Simmons & Slocum (12) the representation is    subset of processes which is contained in the 
 developed for multi-sentence discourse and a       set called "chairs" and in addition serves in 
 network is formally defined.                       the object relation to a certain semantically 526                                             Session No. 13 Computer Understanding II (Representation) 


 restricted subset of "makings" represented by     Some of these relations are discussed elsewhere 
 node CI.                                           (see (12)). 
   In this scheme the relations AGT, OBJ, TIM         Because of the special significance of the 
 and LOC are defined in two ways. The first is In  relation Q and its consequences for the transla•
 terms of their logical import; i.e. (A AGT B)     tion algorithm, some discussion is warranted 
 where A is a token of make and B of John, indi•   here. For the purposes of the algorithm which is 
 cates that "John" is an argument of the predicate to follow we give, in Table 2, a preliminary 
 "make". The second is by the restrictions they    analysis for some of the kinds of quantification 
 impose on the nodes they connect. It is these     which are needed. Note that such quantifiers as 
 restrictions as well as the interconnections of    "many", "most of the" and "almost all" are 
 nodes which determines the semantically restric•  omitted from the table although they might be 
 ted sets.                                         used in semantic nets. 
   A consequence of this viewpoint is that the 
 statement "John made chairs with tools..." can 
 be tested for truth value with reference to a 
 data base (or model) by successive intersections 
 of members from the set of binary predicates that 
 represent It, with the set of binary predicates 
 that make up the data base. To produce such a 
data base, every sentence describing an instance 
 of a "making" is cross-referenced by its semantic 
relations of AGT, OBJ, INST, etc. to particular 
 specifiers, e.g., "John", "tools", "chairs", etc. 
 thus implying the set restrictions that have 
been described. And each nominal participant in 
a "making" Is cross-referenced by -AGT, -OBJ, 
etc. to its token of the verb. 
   In the simplest case such successive Inter•
 sections are performed by a simple matching al•
gorithm. To answer a question simply find the 
 set of triples matching each triple in the ques•
 tion. Methods similar to this are used in many 
question answering programs. A more sophisticated 
algorithm could incorporate various axioms for 
set theory and heuristics based on such informa•
 tion as the size of the sets being intersected 
or the list of semantic relations which determine 
 the sets. 
   It appears that most questions can be answered 
efficiently by the recursive use of a simple 
matching algorithm. More complicated questions 
may require extensive use of the concept of set 
restrictions and Intersections. Semantic nets 
are well suited for this kind of question answer•
 ing, but they have the additional virtue of        1. In the predicate calculus formula, above, F 
being easily transformed into more familiar        represents the portion of the formula which does 
 logics such as first order predicate calculus.    not contain x as a free variable, while P(x) is 
Following a more formal discussion of semantic      the portion which does. 
nets and the representation of quantifiers we      2. Equivalent predicate calculus expressions. 
give an algorithm for converting simple nets       3. Alternate logical meanings of "SOME-INDEF". 
 Into the predicate calculus. 
   A semantic net is a set of triples, (A R B),          Table 2. Examples of Quantifiers 
where A and B are nodes and R is a semantic                       in Semantic Nets 
relation. Nodes must be elements of a set of 
unambiguous symbols and semantic relations may 
be any of several defined or definable relations   We do not need a complete logical definition for 
 falling into one of the following categories:     a concept in order to use it in the semantic 
   1. Connectives such as OR, NOT, SINCE, etc.     net. As an example of the complexity which may 
   2. Deep case relations such as AGT, OBJ,        be avoided, consider the phrase "some fish". 
      DAT, etc.                                    This may mean some one fish, several fish, or 
   3. Attributive relations such as MOD, POSSES•   parts of one or more fish. In a semantic net we 
      SIVE, HASPART, ASSOC, etc.                   use the quantifier "SOME-INDEF" which allows any 
   4  "TOK" meaning "is a token of"                of these meanings. In predicate calculus we 
   5  "Q" meaning "is quantified"                  would be forced to select one of the formulas 
   6. Set relations such as SUP, SUB, EQUAL, etc.  given in Table 2 or perhaps a complicated dis•
                                                   junction of all the possible formulas. The con-Session No. 13 Computer Understanding II (Representation)                                    527 


sequence for question answering of such vagueness        prescribed ordering. Call this n-tuple, J. 
in the semantic net is of course a reduced pre•          Set J' equal to J with the first member 
cision in the correspondence between question            removed. Remove from G and all values of 
and answer. Thus answering the question                  G on its stack all triples whose first 
         "Did John eat a fish?"                          member is A. Go to step 5. 
from 
                                                      5. If J' has no members then set G=G J and 
         "John ate some fish."                                                          A
                                                         go to step 6. Otherwise go to step 7. 
leads to an answer of "maybe" reflecting the 
imprecision of the match.                             6. If the pushdown stack for G is empty then 
                                                         go to step 2. Otherwise set J and J' to 
IV. THE TRANSLATION ALGORITHM 
                                                         equal the top members of their respective 
   The algorithm given here is designed to con•          stacks. Substitute G, in J, for the first 
vert one representation of semantic nets to              element of J'. Remove the first member of 
predicate calculus. Several restrictions are             J'. Set G to equal the top member of its 
made to simplify the presentation. No higher             pushdown stack. Remove the top member of 
order predications are handled by the algorithm          the stacks G, J and J'. Go to step 5. 
(such as would normally be required to handle 
"he moves slowly"). It is assumed that connec•        7. If there is a triple in G of the form 
tives can be treated like verbs, while, in fact,         (a TOK b) such that a is the first element 
certain connectives may require complex transla•         of J' and b is a verb then call this 
tion algorithms in themselves. Also, relative            triple K and go to step 8. Otherwise 
clauses are not allowed. In sum, we are dealing          select the triple H-(a TOK b) such that a 
with a subset of semantic nets which could not           is the first element of J1 and b is a 
serve as a semantic structure for natural lan•           connective. Push G, J and J' onto their 
guage .                                                  respective stacks. Set G to nil and go 
                                                         to step 4. 
   Nevertheless, the algorithm does show that 
simple semantic nets have a sound logical             8. Paralleling the procedure used for connec•
structure, i.e., first order predicate calculus.         tives in step 4, form an n-tuple (B c1 c2 
An algorithm for more complex semantic nets              ...cn-1) such that B is the third member 
appears to be dependent only upon our understand•        of K and ci is the third member of the 
ing of the concepts we wish to allow.                    ith triple in the ordering prescribed by 
   The algorithm handles, in turn, connectives,          the case argument description of the 
verbs, nouns, and noun modifiers. It uses push•          verb. Call this n-tuple, F. Set F' equal 
down stacks in the customary way. We start with          to F with its first member removed. Remove 
pushdown stacks for the variables G, J, J', F            from G and all values of G on its stack 
and F', all empty. Capital letter variables (A)          every triple whose first member is the 
denote specific formulas, nodes or arcs under            first member of K. Go to step 9. 
consideration, while small letter variables (a) 
indicate any node or arc.                             9. If F' has no members then go to step 11. 
                                                         Otherwise go to step 10. 
Algorithm for converting semantic nets to 
predicate calculus:                                   10. Call the last element of F', D. Form a 
                                                         conjoined list, call it P', of all tri•
   1. Start with a conjoined list of triples             ples in G of the form (D r a) except the 
     representing the semantic net of a dis•             triples for which r=TOK or r=Q. Convert 
     course. Call this list, G. Go to step 2.            the triples in P' to prefix notation, 
   2. Set J to nil. Go to step 3.                        (r D a). Set P=P'A(E D) where (D TOK E) 
                                                         is in G. Locate the form specified for the 
   3. If there are any triples in G of the form 
                                                         X of (D Q X) in the table of quantifiers 
      (A TOK B) such that B is a connective, and 
                                                         (Table 2). Let the value of D be the 
     such that there are no triples (c r A) 
     where (c TOK d) is in G and d is a connec•          bound variable in that form and substitute 
     tive, then select the first such triple,            P and F as they have been constructed. 
     call it H, and go to step 4. Otherwise go           Call the result, F. Remove all triples 
     to step 12.                                         whose first member is D, from G. Remove 
                                                         D from F'. Go to step 9. 
   4. For each connective (or verb) there is a 
     prescribed ordering for its arguments.           11. If J is nil, set G=QvF and go to step 12. 
     For example, the verb "give" has the order•         Otherwise substitute F, in J, for the 
      ing AGT, OBJ, DAT. This ordering, specified        first element of J'. Remove the first 
      in the lexicon, is called the "case argu•          member of J' and go to step 5. 
     ment description for the connective (or          12. If there are any triples in G of the form 
     verb)". Collect and order (by case argu•            (A TOK b) such that b is a verb then 
     ment description) all triples of the form           select the first such triple, call it K, 
      (A r c) such that A is the first member of         and go to step 8. Otherwise, stop. 
     H. Form an n-tuple (B c1 c2....cn-1 ) such       As an example application of the algorithm 
      that B is the third member of H and the 
                                                    we take the sentence: 
     triple (A ri ci is the ith triple in the 528                                             Session No. 13 Computer Understanding II (Representation) 


         "The old man give a book to John."         V. DISCUSSION AND CONCLUSIONS 
 The numbering below corresponds to steps in the 
 algorithm. The value of each variable is written      We have mentioned some of the reasons for 
                                                    using semantic nets as the struction underlying 
 out when it changes. 
                                                    natural language discourse. These may be summar•
                                                    ized as follows: 
                                                    1. Vague or partially undefined concepts may be 
                                                    used in a semantic net by giving rules governing 
                                                    their operation. Many questions will not require 
                                                    the full specification of functions used in 
                                                    predicate calculus. For example, the dialogue: 
                                                           "The old man ate some fish." 
                                                           "Did the old man eat some fish?" 
                                                           "Yes." 
                                                    does not presume a precise understanding of the 
                                                    meaning of "some", but we would expect a compu•
                                                    ter question answerer to be capable of it. The 
                                                    earlier similar example showed that a "maybe" 
                                                    answer is the consequence of vagueness in criti•
                                                    cal aspects of the meaning represented in the 
                                                    semantic net. 
                                                    2. Simple questions will be answered by a simple 
                                                    matching procedure which is easily performed in 
                                                    a semantic net. More complex questions will take 
                                                    advantage of the set restriction principles of 
                                                    semantic nets. It is also possible to convert 
                                                    some parts of the net to first order predicate 
                                                    calculus and use some form of Robinson's (8) 
                                                    resolution algorithm. 
                                                    3. A semantic net seems closer than predicate 
                                                    calculus to natural language form and meaning. 
                                                    For example the nesting of natural language 
                                                    expressions such as 
                                                           "The man who caught the fish ate it." 
                                                    is easily handled in semantic nets (see (12)). 
                                                       Lest, however, we be too happy at this situa•
                                                    tion, it must be mentioned that there are alter•
                                                    nate specifications for processes, such as "the 
                                                    20th day of the 10th month" for "October 20" 
                                                    and "a lathe, a saw, a plane and a chisel" for 
                                                    "tools", or "furniture" for "chairs". Managing 
                                                    the possible logical, lexical and syntactic 
                                                    paraphrases of a statement in testing its truth 
                                                    value adds a significant transformational and 
                                                    implicational complexity that must be accommo•
                                                    dated if the semantic nets are to be useful in 
                                                    language processing. 
                                                       These complexities are provided for by addi•
                                                    tional relations in a lexicon and grammar. The 
                                                    lexicon shows, for example, that the process 
                                                    named "tools" includes as subsets the processes 
                                                    named "planes", "lathes", "hammers", "saws", etc.; 
   12. stop                                         that "chairs" are a subset of "furniture"; and 
                                                    that there is a transformation that maps "Octo•
    The final result of the translation algorithm   ber 20" into "20th day of the 10th month" and 
 is given in step 11. A simple transformation of    the converse. If this additional information is 
 the given formula can be make to conform to the    present, it is possible but difficult, to dis•
 particular conventions one wishes to follow,       cover the approximate paraphrastic equivalence 
 such as infix vs. prefix, the method for hand•     of El to E3 in the following two examples: 
 ling proper names, modifications, and other             El) "John made chairs with tools on 
 language fea tures.                                          October 20." 
                                                         E3) "John made furniture with a lathe, 
                                                              a saw, a plane and a chisel on 
                                                              the 20th day of the 10th month." 