      Fault-Tolerant      Context-Based      Interpretation     of Mathematical       Formulas

                               Helmut  Horacek   and  Magdalena   Wolska
                      Fachrichtung  Informatik      Fachrichtung  Computerlinguistik
             Universitat¨ des Saarlandes, Postfach 15 11 50, D-66041 Saarbruck¨ en, Germany
                                 {horacek@ags,magda@coli}.uni-sb.de

                    Abstract
                                                         Table 1: Examples of ﬂawed formulas from the corpus
    We present a fault-tolerant formula interpreter that
    aims at ﬁnding plausibly intended, formally correct              Example Formula         Error Category
    and contextually meaningful speciﬁcations from      (1) P ((A ∪ C) ∩ (B ∪ C)) = P C ∪ (A ∩ B)      3
    user statements containing formal inaccuracies.     (2) (p ∩ a) ∈ P (a ∩ b)                        2
                                                        (3) (x ∈ b) 6∈ A x ⊆ K(A)                      2
                                                        (4) P ((A ∪ C) ∩ (B ∪ C)) = P (A ∪ C) ∪ P (B ∪ C) 1
1  Motivation                                           (5) P ((A ∩ B) ∪ C) = P (A ∩ B) ∪ P (C)        1
Strong efforts are invested in supporting scientiﬁc publica- (6) (A ∩ B) ⊆ P (A ∩ B)                   1
tion environments in formal areas such as mathematics, with (7) If A ⊆ K(B) then A 6∈ B                2
powerful tools, including semantically-informed editors and
proof-checkers. Similarly, several research activities aim at In the context of the tutorial system mentioned above, the
teaching reasoning and problem-solving skills in tutorial sys- proof development environment ΩMEGA [3] is used to check
tems. In both settings, effective communication is frequently validity of (possibly ambiguous) proof-step interpretations
hindered by sloppiness and low-level errors in specifying for- and consistency with the proof context. Communication with
mulas on behalf of the user, resp. student. Hence, not only di- ΩMEGA is mediated by a proof manager whose task is to
agnosing errors in formulas, but also building hypotheses for build and maintain a representation of the constructed proof.
correcting errors is an important issue, a difﬁcult subproblem The proof manager also maintains a discourse memory of
in mathematical knowledge management according to [2]. identiﬁers, operators, and their properties (e.g., type, arity).

2  Our   Working   Context                            3   Error  Categories  and Correction  Attempts
Our interest in fault-tolerant formula interpretation originates Finding purposeful changes in a formula that aim at building
from work on a tutorial system which teaches proving math- a corrected and possibly intended version of that formula is
ematical theorems [1]. In this context, a corpus of written substantially guided by its correctness state. We distinguish
interactions with a simulated computer-based tutor in the do- three categories of errors: 1) logical, 2) type, and 3) structural
main of naive set theory has been collected [5]. In this cor- errors. A formula analyzer may ﬁnd it impossible to build a
pus, lengthy clariﬁcation subdialogs are often carried out to formula analysis tree on the basis of the deﬁned constructors
resolve low-level issues, which one wants to avoid since they (category 3), or to resolve a type mismatch in an analysis tree
distract the student from the higher-level tutorial goal. built successfully (category 2). Only for correctly analyzed
  In Table 1, we present examples of ﬂawed formulas from formulas, consulting the proof manager yields a distinction
the corpus. In (1), a segmentation error is shown: not only between a formula expressing a wrong (category 1) or a cor-
a space between the operator symbol P and identiﬁer C, but rect statement. In case of an error, attempts are undertaken
also parentheses are missing. (2) is an example of a typing to remedy the error by applying local and contextually justi-
error, where an operator symbol p has been used in place of ﬁed modiﬁcations to the formula. In order to obtain mean-
the identiﬁer b. In (3), the types of arguments of the main ingful changes, we associate a set of replacement rules with
operator are invalid. (4) shows a well-formed formula but it each error category, aiming to achieve an improvement of at
is not relevant in the context of the task: a stronger assertion least one category level. Each of these rules is justiﬁed by
about an intersection rather than union of the sets on the right- evidence about the plausibility of the given error occurring in
                              1
hand side of the equation is required . In (5), similarly to (4), the domain, the nature of the task, and user capabilities. Some
a weaker operator of set inclusion (⊆) rather than equality rules developed on the basis of errors observed in the corpus,
is correct. Finally, (6) and (7) are examples of commonly their associated error categories, and examples are illustrated
confused relations of subset and membership.          in Table 2. Testing applications of these rules is distributed
                                                      between formula analysis and formula modifying algorithms.
  1This is the only kind of error which we do not address here.                                                        2. If resources are not exceeded, the most promising suc-
  Table 2: Replacement rules attempting to remedy errors  cessor of a formula generated so far is promoted into the
   Replacement Rules Error Categories Examples            new best one, and its correctness state is assessed by the
     dual operator       1     ∩ ⇔ ∪, ⊂⇔⊃, ⊆⇔⊇            proof manager, continuing at step 1. Otherwise, an or-
 stronger/weaker operator 1    ⊃⇔⊇,  ⊆⇔=,  ⊇⇔=
    confused operator   1,2       ⊂⇔∈, K  ⇔ P             dered list of modiﬁed formulas examined is returned.
   confused identiﬁer   1,2     a ⇔ b, p ⇔ b, p ⇔ a     Preferred orderings among created formulas are estab-
    delete character     2      P C ⇒ P , P C ⇒ C     lished by the error-related category and a similarity-assessing
  insert blank or brackets 3 P C ⇒ P C, P C ⇒ P (C)   function, the former dominating the latter. The assessment
                                                      function combines the number of replacement rules applied
4  The  Enhanced    Formula  Analysis                 and the differences to the structurally most similar formula
                                                      in the context, which comprises the set of formulas consist-
Formula analysis is part of an input interpretation component ing of the goal expression, the previous proof step and possi-
whose task is to produce a representation that can be fur- ble follow-up steps. This function is approximated by simply
ther analysed by the proof manager. The formula modiﬁca- adding the number of rule applications to the number of op-
tion procedure presented here extends the method of parsing erators and variables appearing in both formulas compared,
mathematical expressions embedded within natural language multiple occurrences counted according to their frequency.
text [4]. Extended formula analysis consists of: (1) identiﬁca-
tion of mathematical expressions within the word-tokenized 6 Preliminary Results
text; (2) veriﬁcation of the identiﬁed sequence as to syntactic
validity and correction, in case of a parentheses mismatch or Finally, we give analyses of some examples from Table 1.
further tokenization needed; 2 (3) parsing of the expression. For utterance (1), we get two interpretations, depending on
                                                      whether the formula analyzer separates P C and inserts paren-
 1. The mathematical expression tagger uses a list of op- theses (2 alternatives), or whether it reports a type error,
    eration and identiﬁer symbols. Identiﬁcation of mathe- ﬂagging P C. In the latter case, replacing P C by any type
    matical expressions is based on: single character tokens compatible identiﬁer yields an error of category 1. The
    (including parenthesis), multiple-character tokens con- same holds for the parenthesis insertion with narrower scope,
    sisting only of known relevant characters, mathematical P (C), but the other alternative, P (C ∪ (A ∩ B)) yields no
    symbol unicodes, and new-line characters. Multiple- error and wins. Example (2) is relatively simple, since only
    character candidate tokens are further segmented into replacing the occurrence of p, ﬂagged as a type clash, is to be
    operators and identiﬁers by inserting the missing spaces. changed. Only replacements by a and b yield no error, b win-
 2. Once a candidate string is identiﬁed, “chains” of formu- ning over a since it gets a better context agreement score. In
    las are separated into individual segments, and paren- utterance (5), many rules are applicable. Changing variables
    theses match is veriﬁed. Missing parentheses are in- gives lower agreement scores than changing an operator to
    serted while obeying to the following preferences: (i) its dual counterpart, but all these choices remain within error
    provide parentheses for operators that require bracketed category 1. Only replacing “=” by “⊇” resolves the error.
    arguments, (ii) avoid redundant parentheses (i.e. double In the future, we intend to look into other subdomains of
    parentheses around the same substring).           mathematics and to incorporate results of formula modiﬁca-
 3. Syntactically correct candidate strings are parsed by a tions in tutorial strategies, e.g., asking for clariﬁcation, of-
    tree-building algorithm accessing standard requisite in- fering a small set of modiﬁed formulas. Similar interactions
    formation (e.g. list of operators and their precedence). could be also tailored for scientiﬁc publication environments.
  The output is a set of formula trees with nodes marked as
to type compatibility and bracketing where applicable. References
                                                      [1]  C. Benzm¨uller et al. Tutorial Dialogs on Mathematical
5  The  Formula   Modifying   Algorithm                    Proofs. In Proc. of IJCAI Workshop on Knowledge Rep-
                                                           resentation and Automated Reasoning for E-Learning
The algorithm incrementally generates formula modiﬁcations
                                                           Systems, pages 12–22, Acapulco, Mexico, 2003.
in a best-ﬁrst fashion and tests their impact on resolving the
original error, within speciﬁed resource limitations, that is, a [2] B. Buchberger and K. Nakagawa. Mathematical Knowl-
maximum  number of modiﬁed formulas and a time limit:      edge Editor: A Research Plan. SFB Report 2004-40,
                                                           Johannes Kepler University Linz, 2004.
 1. If the formula analyzer has produced a set of interpreta-
    tions by applying rules addressing syntactic errors, these [3] J. Siekmann et al. Proof Development with ΩMEGA. In
    modiﬁcations are taken as successors of the original for- Proc. of CADE-02, pages 144–149, Copenhagen, Den-
    mula. Otherwise, successors are generated for the for- mark, 2002.
    mula considered best by applying replacement rules in [4] M. Wolska and I. Kruijff-Korbayova.´ Analysis of Mixed
    the category associated with the error reported for the Natural and Symbolic Language Input in Mathematical
    original formula, unless the error is already resolved. Dialogs. In Proc. of ACL-04, pages 24–32, 2004.
  2This implements replacement rules of category 3. Parentheses [5] M. Wolska et al. An Annotated Corpus of Tutorial Di-
correction may yield multiple plausible interpretations. From this alogs on Mathematical Theorem Proving. In Proc. of
stage on, further processing is applied to all the interpretations. LREC-04, pages 1007–1010, Lisbon, Portugal, 2004.