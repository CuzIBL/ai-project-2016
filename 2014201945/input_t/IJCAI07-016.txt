     Dynamic Heuristics for Backtrack Search on Tree-Decomposition of CSPs
                   Philippe Jegou´  and  Samba Ndojh Ndiaye      and  Cyril Terrioux
                                       LSIS - UMR CNRS 6168
                               Universit´ePaulC´ezanne (Aix-Marseille 3)
                                 Avenue Escadrille Normandie-Niemen
                                   13397 Marseille Cedex 20 (France)
                 {philippe.jegou, samba-ndojh.ndiaye, cyril.terrioux}@univ-cezanne.fr

                    Abstract                          et al., 2000] for more details). They rely on the notion of
                                                      tree-decomposition of the constraint graph. They aim to clus-
    This paper deals with methods exploiting tree-    ter variables such that the cluster arrangement is a tree. De-
    decomposition approaches for solving constraint   pending on the instances, we can expect a signiﬁcant gain
    networks. We consider here the practical efﬁciency w.r.t. enumerative approaches. Most of works based on this
    of these approaches by deﬁning ﬁve classes of vari- approach only present theoretical results. Except [Gottlob et
    able orders more and more dynamic which pre-      al., 2002; J´egou and Terrioux, 2003], no practical results have
    serve the time complexity bound. For that, we de- been provided. So, we study these approaches by concentrat-
    ﬁne extensions of this theoretical time complexity ing us on the BTD method [J´egou and Terrioux, 2003] which
    bound to increase the dynamic aspect of these or-
                           k                          seems to be the most effective method proposed until now
    ders. We deﬁne a constant allowing us to extend   within the framework of these structural methods.
    the classical bound from O(exp(w +1))ﬁrstly to
    O(exp(w +  k +1)), and ﬁnally to O(exp(2(w +        While the problem of ﬁnding the best decomposition has
    k+1)−s−)), with w the ”tree-width” of a CSP and   been studied in the literature ﬁrstly from a theoretical point of
    s− the minimum size of its separators. Finally, we view, recently, some studies have been realized in the ﬁeld of
    assess the deﬁned theoretical extension of the time CSP, integrating as quality parameter for a decomposition, its
                                                                                        [               ]
    complexity bound from a practical viewpoint.      efﬁciency for solving the considered CSP J´egou et al., 2005 .
                                                      Yet, these studies do not consider the questions related to an
                                                      efﬁcient use of the considered decompositions.
1  Introduction                                         This paper deals with this question. Given a tree-
The CSP formalism (Constraint Satisfaction Problem) offers decomposition, we study the problem of ﬁnding good orders
a powerful framework for representing and solving efﬁciently on variables for exploiting this decomposition. As presented
many problems. Modeling a problem as a CSP consists in in [J´egou and Terrioux, 2003], the order on the variables is
deﬁning a set X of variables x1,x2,...xn, which must be static and compatible with a depth ﬁrst traversal of the as-
assigned in their respective ﬁnite domain, by satisfying a set sociated cluster tree. Since enumerative methods highlight
C of constraints which express restrictions between the dif- the efﬁciency of dynamic variable orders, we give condi-
ferent possible assignments. A solution is an assignment of tions which allow to exploit in a more dynamic way the tree-
every variable which satisﬁes all the constraints. Determining decomposition and guarantee the time complexity bound. We
if a solution exists is a NP-complete problem.        propose ﬁve classes of orders respecting these conditions, two
  The usual method for solving CSPs is based on backtrack- of them giving more freedom to order variables dynamically.
ing search, which, in order to be efﬁcient, must use both ﬁlter- Consequently, their time complexity possess larger bounds:
                                                      O(exp(w + k +1))and  O(exp(2(w + k +1)−  s−)),where
ing techniques and heuristics for choosing the next variable                         −
or value. This approach, often efﬁcient in practice, has an k is a constant to parameterize and s the minimum size of
exponential theoretical time complexity in O(e.dn) for an in- separators. Based on the properties of these classes, we ex-
stance having n variables and e constraints and whose largest ploit several heuristics which aim to compute a good order on
domain has d values. Several works have been developed, clusters and more generally on variables. They rely on topo-
in order to provide better theoretical complexity bounds ac- logical and semantic properties of CSP instance. Heuristics
cording to particular features of the instance. The best known based on the expected number of solutions enhance signiﬁ-
complexity bounds are given by the ”tree-width” of a CSP cantly the performances of BTD. Meanwhile, those based on
(often denoted w). This parameter is related to some topolog- the cluster size or on the dynamic variable ordering heuristic
ical properties of the constraint graph which represents the provide often similar improvements and may outperform the
interactions between variables via the constraints. It leads to ﬁrst ones on real-world instances. Finally, we report here ex-
a time complexity in O(n.dw+1) (denoted O(exp(w +1))). periments to assess the interest of the extensions based on the
Different methods have been proposed to reach this bound time complexity bound.
like Tree-Clustering [Dechter and Pearl, 1989] (see [Gottlob This paper is organized as follows. The next section pro-

                                                IJCAI-07
                                                   112vides basic notions about CSPs and methods based on tree- of the search space will not be visited again as soon as their
decompositions. Then, in section 3, we deﬁne several classes consistency is known. This is possible by using the notion
of variable orders which preserve the classical bounds for of structural good. A good is a consistent partial assignment
time complexity. Section 4 introduces two extensions giving on a set of variables, namely a separator (i.e. an intersection
new time complexity bounds. Section 5 is devoted to exper- between two clusters), such that the part of the CSP located
imental results to assess the practical interest of our proposi- after the separator is consistent and admits a solution com-
tions. Finally, in section 6, we summarize this work and we patible with the good. So, it is not necessary to explore this
outline some future works.                            part because we know its consistency. Thirdly, some parts of
                                                      the search space will not be visited again if we know that the
2  Preliminaries                                      current instantiation leads to a failure. This is possible in ap-
                                                      plying the notion of structural nogood. A structural nogood
A constraint satisfaction problem (CSP) is deﬁned by a tu- is a particular kind of nogood justiﬁed by structural proper-
ple (X, D, C). X is a set {x1,...,xn} of n variables. Each ties of the constraints network: the part of the CSP located

variable xi takes its values in the ﬁnite domain dxi from D. after the nogood is not consistent (a nogood is a consistent
The variables are subject to the constraints from C. Given an assignment of a separator of the graph).
instance (X, D, C), the CSP problem consists in determin- To satisfy the complexity bounds, the variable ordering
ing if there is an assignment of each variable which satisﬁes exploited in BTD is related to the cluster ordering. For-
each constraint. This problem is NP-complete. In this paper, mally, let us consider a tree-decomposition (E,T) of the CSP
without loss of generality, we only consider binary constraints with T =(I,F) a tree and assume that the elements of
(i.e. constraints which involve two variables). So, the struc- E = {Ei : i ∈ I} are indexed w.r.t. a compatible numera-
ture of a CSP can be represented by the graph (X, C), called tion. A numeration on E compatible with a preﬁx numeration
the constraint graph. The vertices of this graph are the vari- of T =(I,F) with E1 the root is called compatible numer-
ables of X and an edge joins two vertices if the corresponding ation. An order X of variables of X such that ∀x ∈ Ei,
variables share a constraint.                         ∀y ∈ Ej, with i<j, x X  y is a compatible enumeration
  Tree-Clustering [Dechter and Pearl, 1989] is the reference order. The numeration on the clusters gives a partial order on
method for solving CSPs thanks to the structure of its con- the variables since the variables in the Ei are assigned before
straint graph. It is based on the notion of tree-decomposition those in Ej if i<j, except variables in the descent of a good,
of graphs [Robertson and Seymour, 1986].LetG =(X, C)  namely those located in the subproblem rooted on the cluster
be a graph, a tree-decomposition of G is a pair (E,T) where containing the good. In fact, using goods and nogoods allows
T =(I,F)   is a tree with nodes I and edges F and E = not to explore twice subproblems if their consistency (incon-
{Ei : i ∈  I} a family of subsets of X, such that each sistency) with the current assignment is known. If we use
subset (called cluster) Ei is a node of T and veriﬁes: (i) a good to avoid visiting again a subtree, we known that the
∪i∈I Ei = X, (ii) for each edge {x, y}∈C, there exists variables in it can be assigned consistently with the current
i ∈ I with {x, y}⊆Ei, and (iii) for all i, j, k ∈ I,ifk is in a assignment. So BTD does not assign them effectively, but
path from i to j in T ,thenEi ∩ Ej ⊆ Ek.              they are considered done. For consistent problems, an addi-
  The width of a tree-decomposition (E,T) is equal to tional work must be performed to assign these variables if we
maxi∈I |Ei|−1.Thetree-width w of G is the minimal width want to provide a solution [J´egou and Terrioux, 2004].They
over all the tree-decompositions of G.                are named consistently assignable variables thanks to a good.
  Assume that we have a tree-decomposition of mini-   Thus the variables in Ej are assigned if the variables in Ei
mal width (w), the time complexity of Tree-Clustering is are either already assigned or consistently assignable thanks
O(exp(w +1))while its space complexity can be reduced to a good. To complete this order, we have to choose vari-
to O(n.s.ds) with s the size of the largest minimal sepa- able ordering heuristics inside a cluster. Finally, a compatible
rators of the graph [Dechter and Fattah, 2001]. Note that enumeration order on the variables is given by a compatible
Tree-Clustering does not provide interesting results in prac- numeration on clusters and a variable order in each cluster.
tical cases. So, an alternative approach, also based on tree- In [J´egou and Terrioux, 2003; 2004], the presented results
decomposition of graphs was proposed in [J´egou and Ter- were obtained without heuristics for the choice of the clus-
rioux, 2003]. This method is called BTD (for Backtracking ters and thus the choice of the variables. Only a traditional
with Tree-Decomposition) and seems to provide among the dynamic order was used inside the clusters. Obviously, the
best empirical results obtained by structural methods. variable ordering have a great impact on the efﬁciency of enu-
  The BTD  method proceeds by an enumerative search   merative methods. Thus, we study here how the beneﬁts of
guided by a static pre-established partial order induced by variable orderings can be fully exploited in BTD. Neverthe-
a tree-decomposition of the constraint-network. So, the ﬁrst less, to guarantee the time complexity bounds, it is necessary
step of BTD consists in computing a tree-decomposition. The to respect some conditions. So, in the next section, we deﬁne
obtained tree-decomposition allows to exploit some structural classes of orders guaranteeing complexity bounds.
properties of the graph, during the search, in order to prune
some branches of the search tree, what distinguishes BTD 3 Dynamic orders in  O(exp(w   +1))
from other classical techniques. Firstly, the order for the as-
signment of the variables is induced by the considered tree- The ﬁrst version of BTD was deﬁned with a compatible static
decomposition of the constraint graph. Secondly, some parts variable ordering. We prove here that it is possible to consider

                                                IJCAI-07
                                                   113more dynamic orders without loosing the complexity bounds. again. Thus the time complexity bound is not guaranteed any-
The deﬁned classes contain orders more and more dynamic. more. Meanwhile, the Class 3 orders guarantee this bound.
These orders are in fact provided by the cluster order and the Theorem 1 Let the enumeration order be in the Class 3, the
variable ordering inside each cluster.                time complexity of BTD is O(exp(w +1)).
Let (X, D, C) beaCSPand(E,T)   a tree-decomposition of
                                                      Proof We consider a cluster Ej in the cluster tree, and we
the graph (X, C), we exploit an order σi on the subproblems
P  ,...,P                   E     E              γ    must prove that any assignment on Ej is computed only once.
 i1      ik rooted on the sons ij of i and an order i
                E                                     Let Ei be the cluster parent of Ej and suppose that all the
on the variables in i. We deﬁne recursively the following        E                         E  − (E  ∩ E
classes of orders. In the three next classes, we choose the ﬁrst variables in i are assigned and those in j i j)
                                                      are not. Since the order belongs to the Class 3,thevariables
cluster to assign (the root): E1 among all the clusters and
          P                        E                  of the clusters on the path from the root to Ei are already
we consider 1 the subproblem rooted on 1 (i.e. the whole                                    E
problem).                                             assigned and those in the subtree rooted on j not yet. A
                                                      consistent assignment A on Ei ∩ Ej is computed at the latest
                                E
Deﬁnition 1 We begin the search in 1 and we try recur- when the variables in Ei are assigned (before those in the
sively to extend the current assignment on the subproblem subproblem rooted in Ej). Solving this subproblem leads to
         E                               E
rooted on i by assigning ﬁrst the variables in i accord- a failure or a solution. In each case, A is recorded as a good
     γ            P  ,...,P             σ                            
ing to i and then on i1    ik according to i.         or nogood. Let A be an assignment on Ej compatible with
  • Class 1. σi and γi are static. We compute σi and γi A. The next assignment of variables in Ei leading to A on
    statically (before starting the search).          Ei ∩ Ej will not be pursued on the subproblem rooted on Ej.
                                                        
                                                      A  is not computed twice, only the variables in Ei ∩ Ej are
  • Class 2. σi is static and γi is dynamic. We compute
                                                      assigned again. So the time complexity is O(exp(w +1)). 
    statically σi, while γi is computed during the search.
                                                      The properties of the Class 3 offer more possibilities in the
  • Class 3. σi and γi are dynamic. Both, σi and γi are variable ordering. So it is possible to choose any cluster to
    computed during the search. σi is computed w.r.t. the visit next among the sons of the current cluster. And in each
    current assignment as soon as all the variables in Ei cluster, the variable ordering is totally free. In section 4, we
    are assigned.                                     propose two natural extensions of the complexity bound.
  • Class ++. Enumerative dynamic order. The variable
    ordering is completely dynamic. So, the assignment or- 4 Bounded extensions of dynamic orders
    der is not necessarily a compatible enumeration order. We propose two extensions based on the ability given to the
    There is no restriction due to the cluster tree.  heuristics to choose the next variable to assign not only in
The deﬁned classes form a hierarchy since we have: Class 1 one cluster, but also among k variables in a path rooted on
⊂ Class 2 ⊂ Class 3 ⊂ Class ++.                       the cluster that veriﬁes some properties. So, we deﬁne two
Property of the Class 3. Let Y be an assignment, x ∈ Ej − new classes of orders extending Class 3. First, we propose a
(Ei ∩ Ej) with Ei the parent of Ej: x ∈ Y iff: i)∀v ∈ Ei, generalization of the tree-decomposition deﬁnition.
v ∈ Y        E   =  E   ∀P       σ (P  ) ≤ σ (P  )
       ii) Let ip     j ,  iu s.t. i iu      i ip ,   Deﬁnition 2 Let G =(X, C)  be a graph and k a positive
∀v ∈P    v ∈ Y   ∀v ∈ E     γ (v) ≤ γ (x) v ∈ Y
      iu ,    iii)      j s.t. j     j  ,      .      integer, the set of directed k-covering tree-decompositions of
  In [J´egou and Terrioux, 2003], the experiments use Class 2 a tree-decomposition (E,T) of G with E1 its root cluster, is
orders. Formally, only the orders of the Class 1 are compati- deﬁned by the set of tree-decompositions (E,T) of G that
ble. Nevertheless, for an order o3 in the Class 3 and a given verify:
          A                     o
assignment , one can ﬁnd an order 1 in the Class 1 that • E  ⊆  E E                (E,T)
instantiates the variables in A in the same way and the same 1   1,  1 the root cluster of
                                                        •∀E  ∈ E E ⊆ E   ∪ E  ∪ ...∪ E      E  ∪ E  ∪
order o3 does. This property gives to the Class 3 (thus Class i   ,  i    i1   i2        iR and i1    i2
                                                          ...∪ E     ⊂ E      E  ...E           T
2) orders the ability of recording goods and nogoods and us-     iR−1    i, with i1   iR a path in
ing them to prune branches in the same way Class 1 orders •|E|≤w +  k +1       w = max      |E |−1
                                                            i            ,where         Ei∈E   i
do. The Class ++ gives a complete freedom. Yet, it does not
guarantee the time complexity bound because sometimes it is Now, we give a deﬁnition of the Class 4.
impossible to record nogoods. Indeed, let the cluster Ej be a Deﬁnition 3 Let (X, D, C) be a CSP, (E,T) a tree-
son of the cluster Ei, we suppose that the enumeration order decomposition of the graph (X,C) and k a positive integer.
assigns the variables in Ei except those in Ei ∩ Ej,aswell A variable order is in the Class 4, if this order is in the Class
as the variables in the clusters which are on the path from the 3 for one directed k-covering tree-decomposition of (E,T).
            E     x                             E
root cluster to i.Let , the next variable to assign, be in j We derive a natural theorem:
and not in Ei ∩ Ej. If the solving of the subtree rooted on
Ej leads to a failure, it is impossible to record a nogood on Theorem 2 Let the enumeration order be in the Class 4, the
                                                                            O(exp(w  + k +1))
Ei ∩ Ej (if it is consistently assigned) because we do not try time complexity of BTD is     .
the other values of x to prove that the assignment on Ei ∩ Ej Proof This proof is similar to one given for Class 3 since we
cannot be consistently extended on this subtree. If the sub- can consider that BTD runs on a tree-decomposition (E,T)
problem has a solution, we can record a good. Actually, this of width at most w + k +1. 
solution is a consistent extension of the assignment on Ei∩Ej A second extension is possible in exploiting during the
which is a good. A nogood not recorded could be computed search, a dynamic computing of the tree-decomposition (we

                                                IJCAI-07
                                                   114can use several directed k-covering tree-decompositions dur- In practice, we assess here the proposed strategies on random
ing the search). Then, the time complexity bound changes partial structured CSPs in order to point up the best ones w.r.t.
because sometimes it would be impossible to record nogoods. CSP solving. For building a random partial structured in-
                                                                    (n, d, w, t, s, n ,p)
Deﬁnition 4 Let (X, D, C) be a CSP,  (E,T)  a  tree-  stance of a class          c  , the ﬁrst step consists in
decomposition of the graph (X,C) and k a positive integer. A producing randomly a structured CSP according to the model
            o         Class 5                         described in [J´egou and Terrioux, 2003]. This structured in-
variable order 5 is in the  , if for a given assignment              n               d
A, one can ﬁnd one directed k-covering tree-decomposition stance consists of variables having values in their domain.
(E,T)   (E,T)         ∀E  ∈ E E =  E  ∪ E   ∪    Its constraint graph is a clique tree with nc cliques whose
       of       such that  i     ,  i    i1    i2
...∪ E       E   ...E          T                o     size is at most w and whose separator size does not exceed
      iR , with i1   iR a path in and ﬁnd an order 3  s                       t
on (E,T), in the Class 3 that instantiates the variables in . Each constraint forbids tuples. Then, the second step
                                                      removes randomly p% edges from the structured instance.
A in the same way and the same order o5 does.
                                                      Secondly, we experiment the proposed heuristics on bench-
                                    k
This deﬁnition enforces to use directed -covering tree- mark instances of the CP’2005 solver competition1. All these
             (E,T)   (E,T)
decompositions       of       that verify the additional experimentations are performed on a Linux-based PC with a
         ∀E ∈ E E = E   ∪ E  ∪ ...∪ E
condition:  i    ,  i    i1   i2        iR . Hence, a Pentium IV 3.2GHz and 1GB of memory. For each consid-
          (E,T)                  (E,T)
separator in     is also a separator in . We denote   ered random partial structured instance class, the presented
  s−                              (E,T)
by   the minimum size of separators in  .             results are the average on instances solved over 50. We limit
Theorem 3 Let the enumeration order be in the Class 5, the the runtime to 30 minutes for random instances and to 10 min-
time complexity of BTD is O(exp(2(w + k +1)− s−)).    utes for CP’2005 benchmark instances. Above, the solver is
Proof Let (X, D, C) be a CSP, (E,T) a tree-decomposition stopped and the involved instance is considered as unsolved
of the graph (X, C) and E1 its root cluster. We have to prove (what is denoted by the letter T in tables). In the following
that any assignment on a set V of 2(w+k +1)−s− variables tables, the letter M means that at least one instance cannot be
on a path of the tree T is computed only once. Let A be an solved because it requires more than 1GB of memory.
assignment containing V . The order in which the variables In [J´egou et al., 2005], a study was performed on triangu-
of A were assigned is in the Class 3 for a directed k-covering lation algorithms to ﬁnd out the best way to compute a good
                                                  tree-decomposition w.r.t. CSP solving. As MCS [Tarjan and
tree-decomposition (E ,T ) of (E,T) that veriﬁes ∀Ei ∈ E ,
E = E  ∪E   ∪...∪E        E  ...E           T        Yannakakis, 1984] obtains the best results and is very easy
 i    i1   i2       iR , with i1   iR apathin .The
size of the clusters in (E,T) is bound by w+k+1,sotheset to implement, we use it to compute tree-decompositions in
V is covered by at least two clusters since s− is the minimum this study. We do not provide the results obtained by clas-
                       E ...E             (E,T)   sical enumerative algorithms like FC or MAC since they are
size of the separators. Let i1 iq be a path on
                                                     often unable to solve several instances of each class within 30
covering V . The solving of the subproblem rooted on E
                                                 i1   minutes.
with the assignment A leads to the recording of (no)goods on
                             E                         Here, for lack of place, we only present the more efﬁcient
the separators of these clusters. If i1 is the root cluster of
(E,T)     V         E       A                       heuristics:
       ,then  contains 1. Thus   will not be computed   • minexp(A)
again because it contains the ﬁrst variables in the search. We      : this heuristic is based on the expected num-
           E                     (E,T)      q ≥        ber of partial solutions of clusters [Smith, 1994] and on
suppose that i1 is not the root cluster of .Since
                                                         their size. It chooses as root cluster one which minimizes
2, we record a (no)good on the separator of E and its parent
                                     i1                   the ratio between the expected number of solutions and
and at least an other on the separator of E and E .LetB be
                                  i1     i2               the size of the cluster.
a new assignment that we try to extend on V with the same
                                                        • size(B)
values in A. One of the (no)goods will be computed ﬁrst.         : we choose the cluster of maximum size as root
Thus before all the variables in V are assigned, the search is cluster
stopped thanks to this (no)good. So A is not computed again. • minexps (C ): this heuristic is similar to minexp and or-
We prove that any assignment on V is computed only once. ders the son clusters according to the increasing value of
  Note that the new deﬁned classes are included in the hier- their ratio.
                               ⊂          i<j
archy presented in section 3: Class i Class j,if and    • minseps (D): we order the son clusters according to the
   1 ≤ i<j≤   5                ⊂
for            , with also Class 5 Class ++.              increasing size of their separator with their parent.
                      k
  To deﬁne the value of , we have several approaches to • nv(E)
choose variables to group. A good one consists in trying to     : we choose a dynamic variable ordering heuristic
reduce the value of the parameter s and, by this way, to en- and we visit ﬁrst the son cluster where appears the next
hance the space complexity bound. Then, we can observe that variable in the heuristic order among the variables of the
grouping clusters with large separators permits to achieve a unvisited son clusters.
signiﬁcant reduction of s.                              • minexpsdyn (F): the next cluster to visit minimizes the
                                                          ratio between the current expected number of solutions
5  Experimental study                                     and the size of the cluster. The current expected num-
                                                          ber of solutions of a cluster is modiﬁed by ﬁltering the
Applying a structural method on an instance generally as-
                                                          domains of unassigned variables.
sumes that this instance presents some particular topological
features. So, our study is ﬁrst performed on instances hav- 1This competition held during the Second International Work-
ing a structure which can be exploited by structural methods. shop on Constraint Propagation and Implementation of CP’2005.

                                                IJCAI-07
                                                   115          CSP                            Class 1       Class 2       Class 3             Class 4
                         w+      s     B      A      B      A      A      B      B      A     A      B
    (n, d, w, t, s, nc,p)              D      C      D      C      F      G      D      C     F      G
 (150, 25, 15, 215, 5, 15, 10) 13.00 12.22 9.31 28.12 3.41  2.52   2.45   5.34   2.75  2.17   2.08   2.65
 (150, 25, 15, 237, 5, 15, 20) 12.54 11.90 9.99 5.27 5.10   2.47   1.99   5.47   2.58  1.76   1.63   2.97
 (150, 25, 15, 257, 5, 15, 30) 12.16 11.40 13.36 27.82 3.38 5.06   4.97   3.55   1.41  1.05   1.13   1.30
 (150, 25, 15, 285, 5, 15, 40) 11.52 10.64 3.07 8.77 1.13   0.87   1.27   1.17   1.67  0.39   0.63   1.75
 (250, 20, 20, 107, 5, 20, 10) 17.82 16.92 54.59 57.75 15.92 12.39 12.14 14.93  10.18  7.75   7.34  10.26
 (250, 20, 20, 117, 5, 20, 20) 17.24 16.56 55.39 79.80 23.38 14.26 13.25 24.14  10.05  8.81   8.39  10.34
 (250, 20, 20, 129, 5, 20, 30) 16.80 15.80 26.21 21.14 7.23 5.51   6.19   7.84  33.93  4.61   4.41  34.20
 (250, 20, 20, 146, 5, 20, 40) 15.92 15.24 44.60 30.17 26.24 3.91  4.51  17.99  11.38  3.17   3.17  10.63
 (250, 25, 15, 211, 5, 25, 10) 13.04 12.34 28.86 38.75 15.33 11.67 13.37 18.12   5.86  7.71   6.65   6.44
 (250, 25, 15, 230, 5, 25, 20) 12.86 11.98 20.21 34.47 8.60 7.12  14.84  19.47   4.19  3.94   3.36   6.81
 (250, 25, 15, 253, 5, 25, 30) 12.38 11.82 11.36 16.91 5.18 11.13  5.14   5.26   2.80  3.71   3.52   3.06
 (250, 25, 15, 280, 5, 25, 40) 11.80 11.16 7.56 32.74 3.67 16.32  17.49   4.91   4.03  1.40   1.26   3.55
 (250, 20, 20, 99, 10, 25, 10) 17.92 17.02 M    M     M       M      M     M    66.94 63.15  62.99  66.33
 (500, 20, 15, 123, 5, 50, 10) 13.04 12.58 12.60 13.63 7.01 8.08   7.31   7.54   5.48  4.50   4.41   5.86
 (500, 20, 15, 136, 5, 50, 20) 12.94 12.10 47.16 19.22 25.54 23.49 27.01 15.11   4.86  4.92   3.94   5.24

Table 1: Parameters w+ and s of the tree-decomposition and runtime (in s) on random partial structured CSPs with mdd for
class 1 and mdddyn for classes 2, 3 and 4.

          CSP                                        Class 1         Class 2              Class 3
         Instance          n     e     w+    s     B       A       B       A        A       E       B
                                                   D       D       C       C        F       G       G
          qa 5             26    309    25    9   32.01  132.82    2.67   77.82    84.19   80.86    2.62
  qcp-10-64-45-QWH-10     100    900    91   82      T       M    69.83       T       T    70.10   69.82
 qcp-15-120-278-QWH-15    225  3,150   211  197      T       T   120.69   10.47    10.92  122.26  122.47
 qwh-15-106-392-QWH-15    225  3,150   211  197      T       M     0.89  169.49  181.18     0.86    0.89
 qwh-15-106-974-QWH-15    225  3,150   211  197      T    94.58    2.55   75.77    79.46    2.67    2.54

Table 2: Parameters w+ and s of the tree-decomposition and runtime (in s) on some instances from the CP’2005 solver
competition with mdd for class 1 and mdddyn for classes 2 and 3.

  • nvsdyn (G): it is similar to nv. We visit ﬁrst the son intersection is greater than a value smax). Table 1 gives the
    cluster where appears the next variable in the heuristic runtime of BTD for this class with smax =5.
    order among the variables of the unvisited son clusters. When we analyze the value of the parameter k, we observe
Inside a cluster, the heuristic used for choosing the next vari- that its value is generally limited (between 1 to 6). Neverthe-
                                                      less, for the CSPs (250, 20, 20, 99, 10, 25, 10),thevalueofk
able is min domain/degree (static version mdds for class 1
                                                      is near 40, but this high value allows to solve these instances.
and dynamic mdddyn for the other classes).
  Table 1 shows the runtime of BTD with several heuristics The heuristics for the Classes 2 and 3 improve very sig-
of Classes 1, 2, 3 and 4. For Class 5, we cannot get good re- niﬁcantly the results obtained. The impact of the dynamic-
                                                                    minexp     nv
sults and then, the results are not presented. Also it presents ity is obvious. and heuristics solve all the in-
                                                                                                 size
the width of the computed tree-decomposition and the max- stances except one due to a bad root cluster choice, solve
                                                                                               minexp
imum size of the separators. Clearly, we observe that Class all the instances. Except the unsolved instance, ob-
1 orders obtain poor results. This behaviour is not surprising tains very promising results. The son cluster ordering has
since static variable orders are well known to be inefﬁcient a limited effect because the instances considered have a few
compared to dynamic ones. A dynamic strategy allows to son clusters reducing the possible choices and so their im-
make good choices by taking in account the modiﬁcations of pact. We can expect a more important improvement for in-
the problem during search. Thus these choices are more jus- stances with more son clusters. The best results are obtained
                                                         minexp + minexp         size + minsep
tiﬁed than in a static case. That explains the good results of by        sdyn ,but            s obtains of-
Classes 2 and 3 orders. The results show as well the crucial ten similar results and succeed in solving all instances in
importance of the root cluster choice since each heuristic of the Class 4. The calculus of the expected number of solu-
the Classes 2 and 3 fails to solve an average of 4 instances tion assumes that the problem constraints are independent,
over all instances of all classes because of a bad choice of what is the case for the problems considered here. Thus,
                                                      size + minsep               minexp  + minexp
root cluster. We note that the unsolved instances are not the       may outperform                sdyn on
same for size and minexp heuristics. The memory problems real-world problems which have dependent constraints.
marked by M can be solved by using a Class 4 order with the When we observe the results in table 1, we see the rele-
sep heuristic for grouping variables (we merge cluster whose vance of extending the dynamic order. Merging clusters with

                                                IJCAI-07
                                                   116