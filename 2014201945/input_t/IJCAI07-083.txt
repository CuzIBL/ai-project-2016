 Qualitative Spatial and Temporal Reasoning: Efﬁcient Algorithms for Everyone

                                              Jochen Renz
                       Research School of Information Sciences and Engineering
                                   The Australian National University
                                     Canberra, ACT 0200, Australia


                    Abstract                          step is to deﬁne a pairwise disjoint and jointly exhaustive set
                                                      of base relations B (we assume in the following binary rela-
    In the past years a lot of research effort has been tions), i.e., between any two entities of our domain, exactly
    put into ﬁnding tractable subsets of spatial and tem- one of the base relations holds. The best known calculi are
    poral calculi. It has been shown empirically that the RCC8 calculus [Randell et al., 1992] which consists of
    large tractable subsets of these calculi not only pro- eight topological base relations for extended spatial regions
    vide efﬁcient algorithms for reasoning problems   and the Interval Algebra [Allen, 1983] which consists of 13
    that can be expressed with relations contained in the base relations for intervals. Many other calculi are deﬁned in
    tractable subsets, but also surprisingly efﬁcient so- the literature for different entities, aspects and granularities.
    lutions to the general, NP-hard reasoning problems
                                                        Knowledge about the relationships between given entities
    of the full calculi. An important step in this direc-                                    xRy        x
    tion was the reﬁnement algorithm which provides   can be represented in the form of constraints where
                                                      and y are variables over the domain of entities and R is a
    a heuristic for proving tractability of given subsets                           2B
    of relations. In this paper we extend the reﬁnement relation of the full set of relations . The powerset of the
    algorithm and present a procedure which identiﬁes base relations is used in order to be able to express indeﬁ-
    large tractable subsets of spatial and temporal cal- nite information in cases where the exact relationship is un-
    culi automatically without any manual intervention known. Given a set of such constraints we can then formulate
    and without the need for additional NP-hardness   different reasoning problems such as deriving unknown re-
    proofs. While we can only guarantee tractability  lations, eliminating impossible base relations from indeﬁnite
    of the resulting sets, our experiments show that for relations, computing the minimal representation, or checking
    RCC8 and the Interval Algebra, our procedure au-  the consistency of the given set of constraints. Since most
    tomatically identiﬁes all maximal tractable subsets. reasoning problems can be polynomially reduced to the con-
    Using our procedure, other researchers and practi- sistency problem, this is considered to be the most important
    tioners can automatically develop efﬁcient reason- reasoning problem. The theoretical properties of the consis-
    ing algorithms for their spatial or temporal calculi tency problem depend on the chosen set of relations and the
                                                      chosen domain. While the consistency problem is usually
    without any theoretical knowledge about how to                          2B
    formally analyse these calculi.                   NP-hard if all relations of are permitted, for many calculi
                                                      it is tractable when only the base relations B are used. These
                                                      two extremes in the complexity of deciding consistency have
1  Introduction                                       led to a considerable research effort in the past 20 years to
                                                                                                        B
Dealing with spatial and temporal information is an essential identify larger tractable subsets of a given set of relations 2
                                                      or even maximal tractable subsets which mark the boundary
part of any intelligent system and of our everyday lives. In                              B
the area of qualitative spatial and temporal representation and between tractable and NP-hard subsets of 2 .
reasoning, information is represented in terms of qualitative The signiﬁcance of having large tractable subsets is enour-
relationships between spatial or temporal entities, such as “A mous as it not only allows tractable reasoning in cases where
is left of B” or “C occurs during D”. It is distinguished be- the given information is restricted to relations of a tractable
tween different aspects of space and time, such as direction, subset, but mainly because it considerably speeds up the time
topology, distance, size/duration, or shape. For all these as- for deciding NP-hard instances of the consistency problem.
pects, qualitative relationships can then be deﬁned on a level In emprirical studies [Renz and Nebel, 2001] it has been
of granularity that suits a given application.        shown that almost all instances of the NP-hard consistency
  When developing a qualitative spatial or temporal calcu- problem for RCC8, even those instances in the phase tran-
lus, one has to select the domain of entities that are being sition, which are commonly considered to be the hardest in-
described. This could be points in a d-dimensional space, in- stances, could be solved surprisingly fast by combining dif-
tervals or line segments, or extended spatial regions. The set ferent heuristics based on the maximal tractable subsets of
of spatial or temporal entities is usually inﬁnite. The next RCC8. Similar results were found for the Interval Algebra

                                                IJCAI-07
                                                   526[Nebel, 1997]. The reasoning algorithms of these studies can which is usually inﬁnite and a set of base relations B which
be used for any spatial or temporal calculus provided that partitions D×Dinto jointly exhaustive and pairwise disjoint
tractable subsets are known which contain all base relations. relations, i.e., between any two entities of D exactly one base
Therefore, tractable subsets are essential for efﬁcient solu- relation holds. Since the domains are inﬁnite, we do not work
tions to the spatial and temporal reasoning problems, which on the tuples contained in the relations but only manipulate
in turn is a requirement for applications of these calculi. the relation symbols. We have different operators for doing
  Identifying tractable subsets is a very hard problem, in par- so, union (∪), intersection (∩), converse (), composition (◦)
ticular when spatial entities like extended spatial regions are and weak composition () of relations. Composition is de-
involved which cannot be easily represented. However, due ﬁned as R ◦S = {(a, c)|∃b.(a, b) ∈ R and (b, c) ∈ S}.Since
to the similar structure of the consistency problem over spa- we cannot deal with the tuples contained in the relations, we
tial and temporal relations–they are all based on a set of base can in many cases only use weak composition which is de-
relations and the same set of operators–it was possible to de- ﬁned as RS = {T |T ∈B: T ∩(R◦S)  = ∅}. The relations
velop a general method that can be applied to all sets of rela- used by a spatial and temporal calculus are those contained in
tions and which allows to prove tractability of a given subset the powerset 2B of the base relations. The consistency prob-
simply by running an algorithm [Renz, 1999]. The so-called lem CSPSAT(S) for spatial and temporal calculi, where S is
reﬁnement method requires as input two sets of relations S a subset of 2B is deﬁned as follows:
and T , S is the set that is being tested for tractability and T is
                                                      Instance: AsetV of n variables over a domain D and a set
a set for which it is known that a-closure decides consistency.                            B
                                                          Θ of constraints xRy where R ∈S⊆2  and x, y ∈V.
The reﬁnement method further needs a reﬁnement strategy,
which is a mapping of relations S ∈Sto relations T ∈T Question: Is there an instantiation of all n variables in Θ
for which T is a reﬁnement of S,i.e,T ⊆ S. Since there    with values from D which satisﬁes all constraints in Θ?
   22|B|                                        B
are    different subsets for a given set of base relations , The consistency problem is in general an NP-hard problem,
we cannot apply the reﬁnement method to all subsets, but can but if a subset T of 2B is known for which the consis-
only run it for a small number of candidate sets. One way of tency problem can be solved in polynomial time, a so-called
identifying these candidate sets is to make a number of NP- tractable subset, then the consistency problem can be solved
hardness proofs in order to identify relations that make the by splitting Θ into sets of constraints Θ such that for every
consistency problem NP-hard. These relations can be used constraint xRy ∈ Θ there is a constraint xRy ∈ Θ where
to restrict the number of candidate sets for tractable subsets. R is a reﬁnement of R, i.e., R ⊆ R, and by backtracking
Further, we have to ﬁnd a reﬁnement strategy for each can-              Θ [         ]
                           T                          over all possible sets Nebel, 1997 .
didate set to a corresponding set . Due to the large amount A local consistency algorithm for approximating the con-
of existing theoretical analysis on RCC8 and the Interval Al- sistency problem is the algebraic closure algorithm, or a-
gebra, e.g., a large number of NP-hard relations was known, closure algorithm [Renz and Ligozat, 2005]. It succes-
it was possible to apply the reﬁnement method to these two sively makes every triple x, y, z of variables in Θ a-closed
calculi and to identify large tractable subsets. But what if we by applying the following operation until a ﬁxpoint occurs:
have a calculus where no theoretical results are yet available? xRy := xRy ∩ (xS  Ty) where xSz and zTy ∈ Θ.
  In this paper, we extend the reﬁnement method and present If a ﬁxpoint occurs, Θ is called algebraically closed or a-
a general procedure by which large tractable subsets of arbi- closed. If the empty relation occurs during this process, Θ
trary spatial and temporal calculi can be identiﬁed fully auto- is inconsistent. In many cases a-closure decides consistency
matically without the need for any manual interaction. This of CSPSAT(B). This will be a requirement for applying
procedure will return one or more tractable subsets of a given our methods. In the following we say that a set of rela-
spatial or temporal calculus. While we cannot guarantee max- tions S is tractable/NP-hard if CSPSAT(S) is tractable/NP-
imality of the resulting tractable subsets, the procedure iden- hard. Similar, a relation R is said to be tractable/NP-hard, if
tiﬁes all maximal tractable subsets of RCC8 and the Interval CSPSAT(B∪{R}) is tractable/NP-hard.
Algebra. But even if the resulting tractable subsets are not
maximal, they can still give us efﬁcient solutions to the NP- 2.2 The reﬁnement method
hard consistency problem if they are used as split sets in Renz
and Nebel’s [2001] reasoning algorithms.              The reﬁnement method [Renz, 1999] is a general method for
                                                                                                       B
  The paper is structured as follows. In section 2 we give proving tractability of CSPSAT(S) for given sets S⊆2 .
                                                                             B
an introduction to spatial and temporal reasoning and to the It requires a subset T of 2 for which a-closure is already
reﬁnement method. In section 3 we describe our procedure, known to decide CSPSAT(T ). Then the method checks
in section 4 we apply it to RCC8 and the Interval Algebra and whether it is possible to reﬁne every constraint involving a
compare the output of the procedure to the known results. relation in S according to a given reﬁnement strategy to a
Finally, in section 5 we discuss our results.         constraint involving a relation in T without changing consis-
                                                      tency. It is based on the following deﬁnition.
2  Background                                         Deﬁnition 1 (Reduction by Reﬁnement)
                                                                 B
2.1  Qualitative spatial and temporal reasoning       Let S, T⊆2   . S can be reduced by reﬁnement to T ,ifthe
                                                      two conditions are satisﬁed:
A qualitative spatial or temporal calculus [Ligozat and Renz,
2004] consists of a domain D of spatial or temporal entities 1. for every S ∈Sthere is a TS ∈T with TS ⊆ S,

                                                IJCAI-07
                                                   527Algorithm:CHECK-REFINEMENTS                             So if a suitable reﬁnement strategy can be found, then
          S                     M    S
Input:Aset  and a reﬁnement matrix of  .              CHECK-REFINEMENTS    can be used to immediately verify
       fail               M
Output:     if reﬁnements in can make a-closed triples that reasoning over a given set of relations is tractable.
of constraints over S inconsistent; succeed otherwise.
                                                                                  S, T⊆2B
         ←  true                                      Corollary 3 ([Renz, 1999]) Let       be two sets such
1. changes                                            that a-closure decides CSPSAT(T ), and let M be a reﬁne-
2. while changes do
                                                      ment matrix of S. Suppose GET-REFINEMENTS(S,M)  re-
3.  oldM ←  M                                                 
                                                      turns M . If for every S ∈Sthere is a TS  ∈Twith
4.  for every algebraically closed triple               
                                                      M  [S][TS]=true, then a-closure decides CSPSAT(S).
5.  T =(R12,R23,R13)  of relations over S do
                                    
6.    for every reﬁnement T =(R12,R23,R13) of T
                                      
7.    with oldM[R12][R12]=oldM[R23][R23]=             3   A general procedure for identifying
                  
8.    oldM[R13][R13]=true  do                             tractable subsets
                                   
9.       T  ←  ALGEBRAIC-CLOSURE(T   )
                                              In this section we present a procedure for automatically iden-
10.      if T =(R12,R23,R13)  contains the empty
11.      relation then return fail                    tifying large tractable subsets of a spatial or temporal calcu-
                                                    lus. We assume that (1) we are given a set of base relations B,
12.      else do M[R12][R12] ← true,
                                                  that (2) the weak compositions and the converses of the base
13.          M[R23][R23] ← true, M[R13][R13] ← true
      M =  oldM            ←  false                   relations are known, and also that (3) a-closure decides con-
14. if          then changes                                    CSPSAT   B
15. return succeed                                    sistency for      (  ). A consequence of condition (3) is
                                                      that the closure S of a set S⊆2B under intersection, con-
 Figure 1: Algorithm CHECK-REFINEMENTS [Renz, 1999]   verse and weak composition has the same complexity as S
                                                                                                      
 2. every a-closed set Θ of constraints over S can be reﬁned [Renz and Ligozat, 2005]. In particular, it follows that B is
            
    to a set Θ of constraints over T by replacing xiSxj ∈ tractable. We further need the following lemma:
    Θ     x T  x  ∈ Θ    i<j
      with  i S j      for     , such that enforcing a- Lemma 4 Let S⊆2B. If a-closure decides CSPSAT(S),
    closure to Θ does not result in the empty relation.
                                                      then a-closure also decides CSPSAT(S).
                               CSPSAT(T  )
It is clear that if a-closure decides      for a set                                          
T⊆2B         S                              T         Proof Sketch. Each constraint xRy of Θ over S is replaced
        ,and   can be reduced by reﬁnement to ,then                                  Θ       S  Θ     S
a-closure decides CSPSAT(S). Therefore, it is sufﬁcient for with an equivalent set of constraints xy over . over
                                                      is the union of all Θxy and is equivalent to Θ. Applying a-
proving tractability of CSPSAT(S) to show that S can be re-                                             
                         T                            closure to Θxy leads to xRy, hence applying a-closure to Θ
duced by reﬁnement to a set for which a-closure decides                                 Θ
CSPSAT(T  ). This can be shown by the reﬁnement algorithm leads to the same result as applying it to .
[Renz, 1999] which uses a reﬁnement matrix that manages the Note that condition (3) is not actually a strict condition. Our
different reﬁnements and which initially contains the reﬁne- procedure can also be applied if this is not yet known. How-
ment strategy for every relation S ∈Sto a relation T ∈T. ever, the results of our procedure, i.e., tractability of the re-
Deﬁnition 2 (reﬁnement matrix)                        sulting sets, is only guaranteed if condition (3) is satisﬁed.
A reﬁnement matrix M of S has |S| × 2|B| Boolean entries
such that for S ∈S, R ∈ 2B, M[S][R]=true only if R ⊆ S. 3.1 Identifying tractable relations
  The algorithm CHECK-REFINEMENTS (see Figure 1) takes Our procedure consists of three different steps which we
as input a set of relations S and a reﬁnement matrix M of will describe separately. The ﬁrst step is to identify single
S. This algorithm computes all possible a-closed triples of tractable relations, i.e., relations which give a tractable sub-
                                                           2B
relations R12,R23,R13 of S (line 4) and enforces a-closure set of when combined with the base relations. During this
                                             
to every reﬁnement R12,R23,R13 for which M[Rij ][Rij ] step we will also obtain relations which are potentially NP-
= true for all i, j ∈{1, 2, 3},i < j (lines 6-9). If one hard, i.e., single relations that might lead to an NP-hard set of
of these reﬁnements results in the empty relation, the al- relations when combined with the base relations.
gorithm returns fail. Otherwise, the resulting relations For this we will test every single relation which is not con-
                                                      B
R12,R23,R13  are added to M by setting M[Rij ][Rij ]= tained in and see whether it can be reﬁned to relations of
                                                      B                R  ∈ B
true for all i, j ∈{1, 2, 3},i < j (lines 10-13). This is . For every relation , we ﬁrst compute the closure of
            M                                         B∪{R}   and apply the reﬁnement algorithm to every possi-
repeated until has reached a ﬁxpoint, i.e., enforcing a-                                 
closure on any possible reﬁnement does not result in new re- ble reﬁnement of R which is contained in B. The algorithm is
lations anymore. If no inconsistency is detected in this pro- given in Figure 2 and consists of two parts, CHECK-SINGLE-
cess, the algorithm returns succeed. A similar algorithm, REFINEMENT (C-S-R) which checks all reﬁnements for a
                                                                   R
GET-REFINEMENTS, returns the revised reﬁnement matrix single relation that is added to an existing set of relations
                                                     T
M  if CHECK-REFINEMENTS  returns succeed.IfCHECK-       ,andFIND-TRACTABLE-SINGLES   (F-T-S) which calls C-
                                                                                     B
REFINEMENTS  returns succeed, we have pre-computed all S-R for all relations not contained in . Even though the clo-
                                                                   
possible reﬁnements of every a-closed triple of variables as sure of R and B will likely contain more relations, we only
given in the reﬁnement matrix M . Thus, applying these re- initialise the reﬁnement matrix in C-S-R with a reﬁnement
ﬁnements to an a-closed set of constraints can never result in for R. This reﬁnement will propagate to the other relations as
an inconsistency when enforcing a-closure.            they can all be decomposed into relations of B ∪{R}.

                                                IJCAI-07
                                                   528  Algorithm C-S-R has three different outcomes for a re- Algorithm:CHECK-SINGLE-REFINEMENT (C-S-R)
                                                                           R ∈ 2B              T⊂2B
lation R and a set T , succeed, fail,andunknown.      Input: A single relation   , a tractable set    for
                                                            T≡         {T }                     M
succeed  means that there is an initial reﬁnement of R to which closure(  ) and a reﬁnement matrix .
                                                            succeed                 {R}∪T
R  ∈T  such that CHECK-REFINEMENTS  computes an up-   Output:          if the closure of     can be reﬁned
                                                        T  fail                    R    R ∈T
dated reﬁnement matrix by which all relations of the clo- to ,   if any reﬁnement of to        leads to an
                                                                      unknown
sure of T∪{R}  can be reﬁned to a relation of T without inconsistency, and     otherwise.
changing consistency. If this is the case, and a-closure de- 1. S←closure({R}∪T); good ← false
cides CSPSAT(T ), then a-closure also decides consistency 2. for every reﬁnement R of R with R ∈T do
for the closure of T∪{R}. This is an immediate conse- 3.  newM   ← M;  newM[R][R] ←  true
quence of Corollary 3. If all possible reﬁnements of R to 4. if CHECK-REFINEMENTS(newM, S)=succeed
                                                                   
relations of T fail, C-S-R returns fail. In this case the clo- 5. then M ← GET-REFINEMENTS(newM, S)
sure of T∪{R}  cannot be reﬁned to T and all attempts to 6.  if ∀i ∈Sthere is a j ∈T s.t. M [i][j]=true
reﬁne R lead to an inconsistency. This does not say anything 7. then return succeed
about whether adding R to T leads to an NP-hard set or not. 8. else good ← true
But it means that tractability for this set cannot be proven us- 9. if good = true return unknown else return fail
ing the reﬁnement method and that there is some likelihood
that the resulting set is NP-hard. A third possible outcome of Algorithm:FIND-TRACTABLE-SINGLES (F-T-S)
C-S-R is unknown, which means that there is a reﬁnement Input: A set of base relations B
                                                                       B                                B
of R to R ∈T which does not result in an inconsistency, but Output:AsetT⊆2 of tractable relations and a set H⊆2
which also does not lead to the reﬁnement of all relations of of potentially NP-hard relations.
            T∪{R}                T            T
the closure of       to relations of . Increasing by  1. T←closure(B); H =  ∅
some relations might lead to a successful reﬁnement of R,so ∀i, j ∈ 2B M[i][j] ← true i = j false i  = j
                      R                               2.         :              if     and     if
we cannot yet conclude if leads to a tractable set or not. 3. for every relation R  ∈T do
  F-T-S calls C-S-R for the different relations not contained   ←         R,B,M
  B                                             R    4.   result  C-S-R(       )
in  while keeping track of their outcome. If a relation             succeed      T←T∪           {R}∪B
returns succeed and therefore leads to a tractable subset, 5. if result =    then        closure(       )
                              B∪{R}                   6.   if result = fail then H←(H∪{R})
then all relations in the closure of   also lead to a         T     H
tractable subset and don’t have to be tested using C-S-R. We 7. return and
conclude this step with the following lemma.          Figure 2: Algorithms CHECK-SINGLE-REFINEMENT   and
Lemma 5  Let T   and H   be the result of F-T-S(B).   FIND-TRACTABLE-SINGLES
If a-closure decides CSPSAT(B), then it also decides
CSPSAT(B∪{T    }) for all T ∈T.                       tested whether the resulting set can be reﬁned to the current
                                                      candidate using the C-S-R algorithm (line 14). If it doesn’t
                                                      return fail, then the new relation is added to the current can-
3.2  Identifying candidates for tractable subsets     didate. The algorithm keeps track of all relations that cannot
Using the algorithm speciﬁed in the previous section, we can be added to the current candidate (lines 10,13,16). If any of
identify tractable relations, but we don’t know yet how they these relations is not yet contained in one of the candidates,
can be combined to form large tractable subsets. It could be then a new candidate must be generated which does contain
that the whole set T forms a tractable subset, but it could this relation (line 20). The new candidate will be tested in
also be that some of the relations in T lead to NP-hardness the next while loop of the algorithm. If all tractable relations
when combined with each other. One possibility to ﬁnd large are contained in at least one candidate, then it is still possi-
tractable subsets would be to test all subsets of T using the ble that there are more candidates, namely, if there is a pair
reﬁnement method, but there are obviously too many such of tractable relations which is not incompatible and which is
sets and we do not know which reﬁnement strategy might not yet contained together in any of the candidates. The al-
work. Our next step will therefore be to ﬁnd out which re- gorithm tests each pair of relations which is not yet contained
lations might lead to intractability when combined with each in a candidate set (line 22,23) and tests whether the closure
other. For this purpose we assume that any of the relations of of both these relations with the base relations can be reﬁned
the set H returned by F-T-S(B) leads to intractability when to the closure of one of the relations with the base relations
combined with B. Under this assumption, it is clear that any (line 26). If this is not possible and C-S-R returns fail,
pair of relations of T that contains a relation of H in its clo- then this pair is added to the list of incompatible pairs (line
sure cannot be contained in the same tractable subset and is 27). If a pair is found which can be reﬁned, then a new can-
therefore incompatible. This is done in lines 2-3 of FIND- didate is formed which contains the pair (line 28) and tested
TRACTABILITY-CANDIDATES   (F-T-C) in Figure 3.        in the next loop of the algorithm. If all pairs are tested, then
  F-T-C computes all candidates for tractable subsets start- the algorithm returns all candidates for tractable subsets. All
ing from the closure of the base relations and successively these candidates have in common that they do not contain any
adding new tractable relations. Each new relation is ﬁrst incompatible pair, they do not contain a potentially NP-hard
tested if it is incompatible with any of the relations already relation, and single reﬁnements can be made without result-
contained in the candidate (line 9). If it is not incompatible, ing in an inconsistency. What we do not know yet, is whether
then the closure with the current candidate is computed and the whole candidate can be reﬁned to a known tractable set.

                                                IJCAI-07
                                                   529Algorithm:FIND-TRACTABILITY-CANDIDATES   (F-T-C)      Algorithm:TEST-CANDIDATES
                                                                                              B
Input: A set of tractable relations T and a set of supposedly Input: Candidates for tractable subsets CSi of 2
                                                                                   B
NP-hard relations H. (Note: cl = closure)             Output: Tractable subsets TSi of 2
                                         B
Output: Candidates for tractable subsets CSi ⊆ 2
                                                      1. for all CSi do
1. L←∅(set of incompatible pairs); n ← 0; max ← 1     2.  queue ←∅;
                                                                  B
2. for all Ta,Tb ∈T do                                3.  ∀r, s ∈ 2 : M[r][s] ← true if r = s and false if r  = s
         {{T }, {T }} ∪ B ∩H =  ∅    L←L∪T     ,T                       
3.   if cl( a    b      )        then          a  b   4.  for each R ∈CSi\B do queue ← queue ∪R, 0;
  ∀r, s ∈ 2B M[r][s] ← true r = s    false r  = s
4.         :              if     and     if           5.  tractable ←B;
                    
5. cand ←B; newcand ←B                                6.  loop ← 0; changes ← false;
6. while (true) do                                    7.  while queue  = ∅ do
7.   nextrels ←∅;newrel←∅;  n++                       8.     take and delete the ﬁrst pair R,num from queue;
8.   for all Tj ∈T with Tj  ∈ cand do                 9.     if (num > loop and changes = false) then break;
9.     if there is an R ∈ candsuchthatTj,R∈L        10.    if (num > loop) then loop ← num; changes ← false;
10.       then nextrels ← nextrels ∪{Tj}; continue;   11.    if C-S-R(R, tractable, M) = succeed then
11.    newcand ←  cl(cand ∪{Tj})                      12.       tractable ← closure(tractable ∪{R});
12.    if newcand ∩H =  ∅ then                        13.       delete all S, n from queue where S ∈ tractable;
13.       nextrels ← nextrels ∪{Tj}; continue;        14.       changes ← true;
14.    if C-S-R(Tj, cand, M)  = fail then             15.    else add R,num+1 to the end of the queue;
15.       cand ← newcand                              16. TSi  ← tractable;
16.    else nextrels ← nextrels ∪{Tj};                17. return TSi for all i;
17.  CSn ←  cand                   
                                                              Figure 4: Algorithm TEST-CANDIDATES
18.  newrel is any relation in (nextrels \ i CSi)
19.  if newrel  = ∅ then                              each relation contained in the candidate whether a reﬁnement
20.    cand ← cl(B∪ newrel); newcand ← cand; max++    to the already known tractable subset is possible. If this is not
21.  while max = n do                                 possible for a relation, the same relation will be tested again
22.    Tk,Tj ∈T  is a pair s.t. Tk,Tj  ∈L           at a later stage. In order to prove that this recursive computa-
23.       and {Tk,Tj} is not contained in any CSi     tion indeed proves tractability, we introduce a new notion.
                                       CS
24.    if thereisnosuchpairthen return all i          Deﬁnition 6 Given a set S⊆2B.Theclosure sequence
25.    cand ← cl(B∪{Tj}); newcand ←  cl(cand ∪{Tk})                                               B
                                                      C(S; R1,...,Rn) is a recursively deﬁned subset of 2 :
26.    if C-S-R(Tk, cand, M)=fail then
                                                          C(S; R)=        S∪{R}
27.       L←L∪Tk,Tj; continue                         1.          closure(      )
            ←
28.    cand   newcand; max++                            2. C(S; R1, .., Rn)=closure(C(S; R1, .., Rn−1) ∪{Rn})
                                                                         B
 Figure 3: Algorithm FIND-TRACTABILITY-CANDIDATES     Lemma 7   Let T⊆2    . Suppose T≡C(B;   R1,...,Rn)
                                                          M
3.3  Testing the candidates                           and   is a reﬁnement matrix where only the diagonal is true.
                                                      If C-S-R(Ri, C(B; R1,...,Ri−1),M) returns succeed for
In this step we will prove tractability of the candidates we all 1 ≤ i ≤ n,thenCSPSAT(T ) is tractable.
found in the previous section or identify tractable subsets of
                                                      Proof.    If C-S-R(Ri, C(B; R1,...,Ri−1),M) returns
the candidates in case they are not tractable. We know that
                                                      succeed,thenSi     =  C(B; R1,...,Ri) can be reduced
CSPSAT  B
        ( ) is tractable and that a candidate set is tractable by reﬁnement to Si−1 = C(B; R1,...,Ri−1) and, hence,
                              CSPSAT   B
if it can be reduced by reﬁnement to  ( ). But which  CSPSAT(Si) is tractable if CSPSAT(Si−1) is tractable.
reﬁnement strategy can we use? We can extend tractability Since we know that CSPSAT(B) can be decided by a-closure,
  CSPSAT   
of        (B) to a larger set by adding one of the tractable tractability of CSPSAT(T ) follows by successively applying
relations and computing its closure. For the next relation to C-S-R to the corresponding closure sequence.
be added, it is sufﬁcient to reﬁne it to the larger tractable sub-
set we obtained in the step before. If a new relation cannot The whole procedure is then a sequence of the three steps
be reﬁned, i.e., if C-S-R returns fail we know that we can- (1) F-T-S, (2) F-T-C, and (3) TEST-CANDIDATES. The input
not add it to the current tractable subset. If C-S-R returns is a set of base relations together with its weak compositions,
unknown, we will try to add a different relation instead and and the output is one or more tractable subsets. As a conse-
test this relation again at a later stage.            quence of the previous lemmata, we obtain the main results.
  This is very similar to what has been done in the algorithm Theorem 8 Given a set of base relations B such that a-
                                                                                                B
F-T-C except for the special treatment of the relations for closure decides CSPSAT(B). For each TSi ⊆ 2 returned
which the interleaved C-S-R calls return unknown. If none by our procedure, CSPSAT(TSi) is tractable.
                                          unknown
of these calls (lines 14 and 26 in F-T-C) returned      Instead of using B as an input to our procedure, we can use
for any of the relations that have been added to a candidate, any other set for which a-closure decides consistency.
then this candidate must be tractable and no further process-
ing is required. If unknown occured while computing a can- Theorem 9 If a-closure decides CSPSAT(S), then any set
                                                                                       S
didate set, we have to use algorithm TEST-CANDIDATES of obtained by applying our procedure to can be reduced by
Figure 4 which takes a candidate and successively tests for reﬁnement to S and is therefore tractable.

                                                IJCAI-07
                                                   530