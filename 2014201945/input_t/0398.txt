       Regret-based Utility Elicitation in Constraint-based Decision Problems

    Craig Boutilier            Relu Patrascu              Pascal Poupart           Dale Schuurmans
Dept. of Computer Science  Dept. of Computer Science  School of Computer Science Dept. of Computing Science
   University of Toronto      University of Toronto     University of Waterloo      University of Alberta
   cebly@cs.toronto.edu       relu@cs.toronto.edu     ppoupart@cs.uwaterloo.ca      dale@cs.ualberta.ca


                    Abstract                          turing user preferences. While the structure of the utility
                                                      model is known, the parameters of this utility model are im-
    We propose new methods of preference elicitation for precise, given by upper and lower bounds. Adopting the min-
    constraint-based optimization problems based on the use             [ ]
    of minimax regret. Speciﬁcally, we assume a constraint- imax regret model of 5 , a robust decision can be made with
    based optimization problem (e.g., product conﬁguration) respect to this utility uncertainty, by choosing the minimax
    in which the objective function (e.g., consumer prefer- optimal conﬁguration. This is the solution the user would re-
    ences) are unknown or imprecisely speciﬁed. Assum- gret the least should an adversary impose a utility function
    ing a graphical utility model, we describe several elicita- consistent with our knowledge of the user’s preferences. If
    tion strategies that require the user to answer only binary regret is unacceptably high, we query the user for more in-
    (bound) queries on the utility model parameters. While a formation about their preferences, until the worst-case error
    theoretically motivated algorithm can provably reduce re- (regret) is small enough (zero if optimality is required).
    gret quickly (in terms of number of queries), we demon- In this work, we elicit preferences using bound queries
    strate that, in practice, heuristic strategies perform much (a local form of standard gamble queries [9])—that provide
    better, and are able to ﬁnd optimal (or near-optimal) con-
    ﬁgurations with far fewer queries.                tighter upper or lower bounds on the utility parameters—
                                                      since these are reasonably easy for users to assess and have
                                                      been studied extensively in the decision analysis literature.
1  Introduction                                       We develop several new strategies for elicitation using bound
The development of automated decision software is a key queries whose aim is to reduce the worst-case error (i.e.,
focus within decision analysis [21; 16] and AI [7; 3].To get guaranteed improvement in decision quality) with as few
deal with different users, some form of preference elicitation queries as possible. These include strategies with good theo-
must be undertaken in order to capture speciﬁc user prefer- retical guarantees (related to polyhedral methods in conjoint
                                                              [     ]
ences to a sufﬁcient degree to allow an (approximately) op- analysis 18; 11 ), as well as several heuristic methods that
timal decision to be taken. In this work, we study the prob- perform better empirically. We also show that one of these
lem of preference elicitation in constraint-based optimization strategies is largely unaffected by computational approxima-
(CBO). CBO provides a natural framework for specifying tion of the required minimax solutions.
and solving many decision problems, such as conﬁguration
tasks [15], in which hard constraints capture options avail- 2 Problem Formulation
able to a customer and an objective (or utility) function re- We assume some system is charged with making or recom-
ﬂects customer preferences. Explicit formulation as a math- mending a decision on behalf of a user, for example, conﬁgur-
ematical program or using a soft constraint framework [17; ing a (multiattribute) product for a consumer (e.g., the choice
2] has been successfully used to model such problems. of a car and options). However, since user preferences vary,
  Unfortunately, the requirement of complete utility infor- an appropriate conﬁguration requires that the system inter-
mation demanded by CBO is often problematic. For instance, act with the user to determine enough about her preferences
users may have neither the ability nor the patience to provide over feasible alternatives to make a good (or possibly opti-
full utility information to a system. Furthermore, in many if mal) choice. Thus, the system must engage in some form of
not most instances, an optimal decision (or some approxima- preference elicitation. This basic problem lies at the heart
tion thereof) can be determined with a very partial speciﬁca- of considerable work in multiattribute utility theory [12; 20;
tion of the user’s utility function. As such, it is imperative 14] and the theory of consumer choice (such as conjoint anal-
that preference elicitation procedures be designed that focus ysis [18; 11]). Our approach differs from classic approaches
on the relevant aspects of the problem (e.g., by ignoring in- in several important respects, as we emphasize below. Most
feasible parts of utility space, or utility for outcomes provably importantly, our decision model and elicitation strategies will
dominated given current information).                 be driven by the minimax regret criterion. To present our
  Our framework is as follows. We assume a set of (hard) results, we ﬁrst need to review previous work on minimax
constraints together with a graphical utility model [1; 4] cap- regret and the framework of [5] in more detail.2.1  Optimization with Graphical Utility Models         In this paper we adopt the minimax regret criterion, fol-
Following [5],weassumeaﬁnitesetofattributes   X  =    lowing the formulation of [5]. Unlike Bayesian methods,
                                                      minimax regret recommends decisions given only a set of
{X1,X2,...,XN  } with ﬁnite domains, characterizing a set
of choices available to a decision maker (or consequences possible utility functions rather than a probabilistic prior.
thereof). These might be, say, car options such as make, Thus it is suitable when reasonable priors are hard to for-
engine size, transmission type, etc. An assignment x ∈ mulate and does not require the computational approxima-
Dom(X)   is often referred to as a state. For ease of pre- tions often needed in reasoning with complex priors [7;
sentation, we assume attributes are boolean. We also have 3]. Minimax regret also allows recommendation of decisions
asetofhard constraints C over these attributes. Each con- that are robust in the face of utility function uncertainty since
                                                      it provides tight bounds on the worst-case error, which is ap-
straint C`, ` =1, ..., L, is deﬁned over a subset of attributes
X[`] ⊂ X, and thus induces a set of legal conﬁgurations of at- pealing in many circumstances (and unlike many schemes
tributes in the subset X[`] (e.g., the set of products that can be proffers a speciﬁc decision rather than, say, a Pareto optimal
                                                      set). Previously this has been found to be an attractive crite-
proposed). We assume that the constraints C` are represented
in some logical form and can be expressed compactly (e.g., rion in real-world procurement settings [6]. As we will see,
                                                      regret is also very effective in focusing elicitation effort even
X1 ∧ X2 ⊃¬X3). For instance, we might have that model
Passat and engine 2.8T do not allow transmission 5Speed- when priors are available [19].
Man.WeletFeas(X)    denote the subset of feasible states Suppose the utility function for a CBO problem is un-
satisfying C.                                         known, but constraints on its parameters (e.g., in the form
  Suppose the system had access to the user’s utility function of bounds) are available and some decision must be recom-
u  Dom  X   → R                                       mended.1  The minimax regret decision criterion suggests
  :    (  )     , representing a user’s strength of prefer-                             x
ence for various conﬁgurations (e.g., we might view this as that one adopt the (feasible) assignment that obtains mini-
                                                      mum max-regret, where max-regret is the largest quantity by
what they are willing to pay). The constraint-based optimiza-                      x
tion (CBO) problem is to ﬁnd an optimal feasible state x∗: which one could “regret” choosing (while allowing the util-
                                                      ity function to vary within the bounds). More formally, let U
               x∗ ∈ arg  max   u(x).                  denote the set of feasible utility functions. We refer to a pair
                       x∈Feas(X)                      hC, Ui,whereC  is a set of conﬁguration constraints, as an
                                                      imprecise CBO problem.Thepairwise regret of state x with
For multiattribute problems of this type, one generally as-    x0                   U
sumes some utility function structure [12; 8]. In this work, we respect to over feasible utility set is deﬁned as
adopt a generalized additive independence (GAI) model [8;      R(x, x0, U)=max{u(x0)     − u(x)},     (2)
1]. Speciﬁcally, we assume that the utility function can be                   u∈U
written as the sum of K local utility functions, or factors, which is the most our system could regret choosing x for the
over small sets of variables:                         user instead of x0 (e.g., if an adversary could impose any util-
                       X                              ity function in U). The maximum regret of decision x is:
                u x       f k x k .
                 ( )=        ( [ ])             (1)                                         0
                      k≤K                                      MR(x, U)=       max    R(x, x , U)     (3)
                                                                             x0∈Feas(X)
Here each function f k depends only on a local family of at- The minimax regret of feasible utility set U is:
tributes X[k] ⊂ X. We denote by x[k] the restriction of state
                                                                MMR(U)=         min   MR(x, U)        (4)
x to the attributes in X[k]. This model is attractive due to its              x∈Feas(X)
naturalness and generality (encompassing both linear models
[12] and UCP-nets [4] as special cases). The problem of ﬁnd- If the only information we have about a user’s utility function
                                                      is that it lies in the set U, then a minimax-optimal decision x∗
ing an optimal conﬁguration can be formulated as an integer x∗       x∗, U         U
program (IP), and can often be solved very effectively. (i.e., s.t. MR(  )=MMR(      )) minimizes the worst-
                                                      case loss w.r.t. possible realizations of utility u ∈U.
2.2  Minimax Regret                                     Computation of minimax regret in CBO problems requires
                                                      care; the explicit minimization in Eq. 4 is infeasible. For-
While many approaches to elicitation focus on obtaining full tunately, one can formulate it in a manner that exploits the
utility information, it will often be infeasible, undesirable, or graphical structure of the utility model, thereby admitting (in
unnecessary to extract a complete utility function from the practice) computationally tractable solution [5]. The proce-
user [20]. As a consequence, a system must make decisions dure of [5] assumes an imprecise CBO problem with factors
in the face of incompletely speciﬁed utility functions. Sev- f k, k ≤ K, deﬁned over local families X[k]. The parame-
                                                                                                  k
eral approaches have been proposed for representing utility ters of this utility function are denoted by ux[k] = f (x[k]),
uncertainty, as well as making decisions given this uncer- where x[k] ranges over Dom(X[k]). Upper and lower bounds
tainty. For example, Bayesian methods quantify uncertainty
                                                      on each of these parameters are assumed, denoted by ux[k]↑
about preferences probabilistically [7; 3]. Other techniques
                                                      and ux[k]↓, respectively. Effective computation of pairwise re-
simply pose constraints on the set of possible utility func- gret, max regret and minimax regret is possible by exploiting
tions and use various criteria to ﬁnd or reduce the set of de- structure in the constraints and graphical utility model.
cisions or otherwise direct elicitation; for example, one can
identify Pareto optimal [21] or dominant alternatives [20; 13; 1These constraints reﬂect knowledge of the user’s utility func-
14], or decisions that minimize regret [4; 16; 19; 5]. tion, generally obtained through elicitation as we elaborate below.                                                 τ
Input: imprecise CBO problem, worst-case error tolerance . tion, reﬁning initial bounds on the parameters, until minimax
 1. Compute minimax regret value mmr                  regret reaches an acceptable level τ.2 Table 1 summarizes the
 2. Repeat until mmr <τ                               general form of the interactive elicitation procedure.
     (a) Ask bound query q about some utility parameter u(x[k]). 3.1 Bound Queries
     (b) If u(x[k]) ≤ q then lower ux[k]↑ to q.       The types of queries we consider are bound queries in which
     (c) Otherwise raise ux[k]↓ to q                  we ask the user whether one of her utility parameters lies
     (d) recompute mmr                                above a certain value. A positive response raises the lower
Table 1: General form of the interactive elicitation procedure. bound on that parameter, while a negative response lowers
                                                      the upper bound: in both cases, uncertainty is reduced.3
  In particular, the minimax optimization in Eq. 4 is rewrit- While users often have difﬁculty assessing numerical pa-
ten as as minimization with an inﬁnite number of constraints. rameters, they are typically better at comparing outcomes [12;
A constraint generation procedure is used to generate con- 9]. However, a bound query can be viewed as a local form of
straints incrementally until all (ﬁnitely many) active con- a standard gamble query (SGQ), commonly used in decision
straints are enumerated. The mixed integer programs (MIPs) analysis; these, in fact, ask for comparisons. An SGQ for a
required to solve both the main minimization and the gen- speciﬁc state x asks the user if she prefers x to a gamble in
eration of the most violated constraint are compact, with a which the best outcome x> occurs with probability l and the
number of variables linear in the size (number of parameters) worst x⊥ occurs with probability 1 − l [12]. A positive re-
of the GAI model. An important property of this procedure is                              x
                                   ∗                  sponse puts a lower bound on the utility of ,andanegative
that it generates both an optimal solution x andanadversar- response puts an upper bound. Calibration is attained by the
ial witness xw for the current U: xw is the assignment that the
                  ∗               0                   use of common best and worst outcomes across all queries
maximizes regret of x in Eq. 4 (as the x variable in Eq. 3). (and numerical assessment is restricted to evaluating proba-
We refer to [5] for further algorithm details. The procedure bilities). The foundations of such queries can be made pre-
was shown to handle signiﬁcant practical problems, generally cise using results of Fishburn [8]; we defer details for space
generating very few constraints, with solution times ranging reasons (see [10] for more on elicitation in GAI networks).4
from fractions of a second to 1000 seconds [5].         Our query strategies rely on the following deﬁnitions.
  In practice, since minimax regret will be computed be-
tween elicitation queries, it is critical that minimax regret be Defn 1 Let hC, Ui be an imprecise CBO problem. An opti-
estimated in a relatively short period of time (say 5 seconds). mistic state xo,apessimistic state xp,andamost uncertain
For this reason, we propose several improvements to the pro- state xmu are any states satisfying:
        [ ]                                                     o
cedure of 5 that can speed up regret computation with elic-    x  ∈ arg max   max  u(x)
itation in mind: (1) The constraint generation procedure for           x∈Feas(X) u∈U
solving the MIP can be accelerated by simply ﬁnding a feasi-   xp ∈ arg max   min u(x)
ble x given the current set of constraints, rather than explicitly     x∈Feas(X) u∈U
                            x                                                                0
searching for a minimax optimal given current constraints.    xmu ∈ arg max    max  {u(x) − u (x)}
(2) Since minimax regret is computed incrementally by gen-             x∈Feas(X) u,u0∈U
erating constraints, it has an anytime nature and early stop-
ping can be used. This has the effect that some violated con- An optimistic state is a feasible state with the greatest upper
straints may not have been generated, but the “early” solution bound on utility. A pessimistic state has the greatest lower
provides a lower bound on true minimax regret. We can also bound on utility. A most uncertain state has the greatest dif-
compute an upper bound by computing the max regret of the ference between its upper and lower bounds. Each of these
x found for the last MIP solved. These bounds are often tight states can be computed in a single optimization by setting the
enough to provide good elicitation guidance. (3) The mini- parameters of the utility model to their upper bounds, their
max regret problem solved after receiving a response to one lower bounds, or their difference, and solving the correspond-
query is very similar to that solved before posing the query. ing (precise) CBO problem.
As such, one can “seed” the minimax procedure invoked after In this framework, the goal of an elicitation strategy is to
a query with the constraints generated at the previous step. In reduce minimax regret using as few queries as possible. The
this way, typically, only a few extra constraints are generated challenge is to select such queries efﬁciently—avoiding in-
during each minimax computation.                      tractabilities inherent in outcome enumeration and lookahead,
  While we focus on the use of upper and lower bounds while nevertheless reducing minimax regret effectively.
on utility parameters, the procedures described here can be 2We could insist that regret reaches zero (i.e., a provably optimal
adapted to problems with arbitrary linear constraints over util- solution), or stop when regret reaches a point where further improve-
ity parameters. Handling such constraints is important when ment is outweighed by the cost of further interaction.
comparison queries are used (see below). With this back- 3If the user’s true value is close to the query point, she may feel
ground in place, we can now turn to elicitation.      “roughly indifferent;” in this case we could impose a constraint that
                                                      the true value is “close” (e.g., within some ε) to this point.
                                                         4While we focus on bound queries, other queries are quite natu-
3  Elicitation Strategies                                                                               0
                                                      ral. Comparison queries ask if one state x is preferred to another x .
We consider an interactive process in which the decision soft- A response imposes a linear constraint on utility parameters. Regret
ware queries the user for information about her utility func- computation must then take the general form alluded to above.3.2  The Halve Largest Gap Strategy                   the utility parameter in the set {x∗[k]:k ≤ K}∪{xw[k]:
                                                      k ≤ K}                x k
The ﬁrst query strategy we consider is the halve largest gap  with largest gap( [ ]) and queries the midpoint of
(HLG) strategy. It asks a query at the midpoint of the largest the corresponding utility interval. Intuitively, should the an-
                                                                                               u x∗ k
interval, i.e., corresponding to the parameter x[k] with the swer to a query raise the lower bound on some ( [ ]) or
                                                                                 u xw  k
largest gap between its upper and lower bounds. This is moti- lower the upper bound on some ( [ ]), then the pairwise
                                                           R  x∗, xw
vated by theoretical considerations based on simple worst- regret ( ) will be reduced, and usually minimax regret
case bounds on minimax regret. Deﬁne, respectively, the as well. Of course, if the answer lowers the upper bound on
                                              k            u x∗ k                                u xw k
gap of a utility parameter u(x[k]),thespan of factor f and some ( [ ]) or raises the lower bound on some ( [ ]),
                                                                        R x∗, xw
maxspan of a utility model U as follows:5             then pairwise regret (    ) remains unchanged. (Note
                                                      that minimax regret might still be reduced.)
              x k    u   ↑−u    ↓
          gap( [ ]) = x[k]    x[k]              (5)     We have also experimented with a variant of the CS strat-
           span(f k)=    max      gap(x[k])     (6)   egy in which regret is computed approximately to ensure fast
                     x[k]∈Dom(X[k])
                     X                                interactive response by imposing a time bound on computa-
        maxspan(U)=      span(f k)              (7)   tion (as described above). While we can’t be sure we have the
                      k                               minimax optimal solution with early termination, the solution
                                                      may be good enough to guide the querying process. Further-
The quantity maxspan measures the largest gap between the more, since we can compute the max regret of the anytime
upper and lower utility bound, regardless of feasibility. We solution, we know the quality of the solution, and we have
can show that this quantity bounds minimax regret:    an upper bound on minimax regret which can be used as a
                                                      natural termination criterion for the querying process.
Proposition 1 For any hC, Ui, MMR(U) ≤ maxspan(U).
Since MMR(U) ≤  MR(xo, U) and for any optimistic state xo 3.4 Alternative Strategies
we have MR(xo, U) ≤ maxspan(U), the result follows.6
  This suggests an obvious query strategy, the HLG method, Finally, we have experimented with several other strategies,
in which a bound query is asked of the parameter p with the which we describe brieﬂy. The optimistic query strategy com-
                                         p↑−p↓  /     putes an optimistic state xo and queries (at the midpoint of the
largest gap, at the midway point of its interval, ( ) 2.                           o
This method ensures rapid reduction in max regret:    interval) the utility parameter in x with the largest gap. In-
                                                      tuitively, an optimistic xo is a useful adversarial choice, so
Proposition 2 Let U be an uncertain utility model with n reﬁning information about it can help reduce regret. The pes-
parameters and let m = maxspan(U). After n log(m/ε)   simistic query strategy is analogous, relying on the intuition
queries by HLG, minimax regret is no greater than ε.  that a pessimistic choice is useful in preventing the adversary
                                                      from making us regret our decision too much. The optimistic-
In the worst case, no query strategy can reduce regret more pessimistic (OP) strategy combines the two: it queries the pa-
quickly than HLG. Furthermore, there are classes of utility rameter that has the largest gap among both states. These
functions for which the bound is tight, so worst-case U and strategies are computationally appealing since they require
conﬁguration constraints C exist that ensure regret will never only standard CBO, not minimax optimization.
be reduced to zero in ﬁnitely many queries.7 This strategy The most uncertain state (MUS) strategy is a variant of
is similar to heuristically motivated polyhedral methods in HLG that accounts for feasibility: we compute a most un-
conjoint analysis used in product design and marketing [18; certain state xmu and query (at the midpoint) the parameter in
11]). In fact, HLG can be viewed as a special case of the xmu with the largest gap. Finally, the second-best (SB) strat-
method of [18] in which our polyhedra are hyper-rectangles. egy is based on the following intuition: suppose we have the
                                                      optimistic state xo and the second-best optimistic state x2o
3.3  The Current Solution Strategy                    (i.e., that state with the second-highest upper bound—this is
While HLG allows one to provide strong worst-case guaran- computable with a single optimization). If we could ask a
tees on regret improvement, it is “undirected” in that con- query which reduced the upper bound utility of xo to lower
siderations of feasibility play no role in determining which than that of x2o, we ensure that regret is reduced (since the
queries to ask. An alternative strategy is to focus attention on adversary can no longer attain this most optimistic value); if
parameters that participate in deﬁning the max regret, namely, the lower bound of xo were raised to the level of x2o’s upper
                   ∗                          w
the minimax optimal x and the adversarial witness x for bound, then we could terminate—knowing that xo is optimal.
the current U (recall that the witness maximizes the regret Thus we would like to query xo at x2o’s upper bound: a neg-
   ∗
of x ). The current solution (CS) query strategy asks about ative response will reduce regret, a positive response ensures
                                                      xo is optimal. The SB method “distributes” this query across
  5                                              p↑
   We denote the upper and lower bounds of any parameter p by the relevant factor parameters, asking several bound queries.
and p↓ respectively.
  6The deﬁnition of maxspan can be tightened to account for logi- The myopically optimal (MY) strategy computes the aver-
cal consistency of the assignments to different factors, or by restrict- age regret reduction of the midpoint query for each utility
ing attention to feasible states (w.r.t. C). The result still holds. parameter by solving the minimax problem for each response
  7The bound is not generally tight if there is overlap in factors; to each query; it then asks the query with the largest average
but is tight if maxspan accounts for logical consistency. reduction. This approach is generally infeasible, but we testit on small problems to see how the other methods compare.8 excellent anytime performance: after only 80 queries, aver-
                                                      age minimax regret has dropped from 18% to under 2%. In-
4  Empirical Results                                  terestingly, the time bound of 5 seconds imposed by CS-5,
                                                      while leading to approximately minimax optimal solutions,
We tested the effectiveness of our query strategies on a does not affect query quality: the approximate solutions give
variety of problems. For each problem we tested: halve rise to queries that are virtually as effective as the optimal
largest gap (HLG), current solution (CS), current solution solutions. The CS strategy requires on average at most 83s
with a computation-time bound of ﬁve seconds per query per query. The OP strategy works very well too, and re-
(CS-5), optimistic-pessimistic (OP), second-best (SB), and quires less computation time (0.1s per query) since it does
most uncertain state (MUS). We also compared these against not need to solve minimax problems (except to verify termi-
the more computationally demanding myopically optimal nation “periodically,” which is not reﬂected in query compu-
method (MY) on small problems. We implemented the con- tation time). However, both OP and CS-5 are fast enough to
straint generation approach of [5] and used CPLEX as the be used interactively on problems of this size. MUS, HLG,
generic IP solver. Our experiments considered two realistic and SB do not work nearly as well. Note the HLG per-
domains—car rentals and real estate—as well as randomly forms poorly since it fails to account for the feasibility of op-
generated synthetic problems.                         tions, thus directing its attention to parts of utility space for
  First, we tested small synthetic problems to allow a com- which no product exists (hence polyhedral methods alone [18;
parison of our heuristics with the MY strategy. Fig. 1 reports 11] will not offer reasonable elicitation in our setting). MUS
the average minimax regret over 45 small synthetic problems signiﬁcantly outperforms HLG for just this reason.
constructed by randomly setting the utility bounds and the The real-estate problem is modeled with 20 (multivalued)
variables on which each utility factor depends. Each prob- variables, with 47,775,744 possible conﬁgurations. The fac-
lem has 10 attributes that can take at most 4 values and 10 tored utility model consists of 29 local factors, giving rise
factors that depend on at most 3 attributes. We simulate user
                                         u            to 100 utility parameters. Query performance is shown in
responses by drawing a random utility function for each Fig. 2(b), using the same regime as above. Again, both CS
trial, consistent with the bounds, representing a user’s prefer- and CS-5 perform best, and the time bound of CS-5 has no
ences. Responses to queries are generated using u (assuming
                                      u               effect on the quality of the CS strategy. Interestingly, OP per-
the user accurately answers queries relative to ). Results are forms almost identically to these, with somewhat lower com-
shown for two cases: utility parameters drawn from a uni- putational cost (CS takes 14s/query, CS-5 5s, and OP 0.1s).
form distribution over each interval, and those drawn from a Each of these methods reduces minimax regret from 40% of
(truncated) Gaussian centered at the midpoint of the interval optimal to under 5% in about 120 queries. As above, SB fails
(reﬂecting that a user is somewhat more likely to have a true
                              9                       to make progress, while HLG and MUS do somewhat better.
value near the middle of the range). In both cases, we ob- We also tested the query strategies on larger randomly gen-
serve that the OP, CS and CS-5 heuristics decrease minimax- erated problems (with 25 variables of domain size no more
regret at a rate very close to MY. This suggests that OP, CS than four, and 20 utility factors with no more than three vari-
and CS-5 are computationally feasible, yet promising alter- ables each). The same performance patterns as in real-estate
natives to the computationally prohibitive MY strategy. emerge, with CS, CS-5 and OP all performing much better
  We report on further experiments using all strategies ex- than the others (see Fig. 2(c)). Although OP performs slightly
cept MY with larger synthetic problems, a real-estate prob- better than CS/CS-5, the difference is not signiﬁcant.
lem and a car rental problem taken from [5], drawing users
from uniform distributions (Gaussian results are very sim-
ilar both in shape and magnitude). As above, all results 5 Concluding Remarks
are averaged over 45 trials. The car-rental problem is mod-
                                                      We have developed a number of query strategies for elicit-
eled with 26 (multivalued) variables that specify various at-
                                                      ing bounds on the parameters of graphical utility models for
tributes of a car relevant to typical rental decisions, result-
                                                      the purpose of solving imprecise constraint-based optimiza-
ing in 61,917,360,000 possible conﬁgurations. The factored
                                                      tion problems. The most promising of these strategies, CS
utility model consists of 36 local factors, each deﬁned on at
                                                      and OP, perform extremely well, requiring very few queries
most ﬁve variables, with 150 utility parameters. Performance
                                                      (relative to the model size) to provide dramatic reductions in
of the various query strategies is depicted in Fig. 2(a). Ini-
                                                      regret. We have shown that using approximation of minimax
tial utility bounds are set to give minimax regret of roughly
                                                      regret reduces interactive computation time to levels required
18% of the optimal solution. Both CS and CS-5 perform
                                                      for real-time response without a noticeable effect on the per-
extremely well: regret is reduced to almost zero within 160
                                                      formance of CS. OP also can be executed in real-time, since
queries on average.10 More importantly, these methods show
                                                      it does not require the same intensive minimax computation.
  8By doing lookahead of this type for k stages, we could in fact We plan to extend this research a number of directions. We
compute the optimal query plan of k-steps.            would like to consider additional query types, such as com-
  9All experiments show a reasonably small variance so we ex- parisons of outcomes and tackle the associated computational
clude error bars for legibility.
  10Though this may seem like a lot of queries, recall that the tational boundaries of regret-based elicitation. Furthermore, while
problem is very large, with a utility model with 150 parameters. 160 queries may be large for typical consumer choice problems, it is
We intentionally choose problems this large to push the compu- more than reasonable for high stakes conﬁguration applications.