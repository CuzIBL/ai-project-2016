             Robust Human-Computer Interaction System Guiding a User 
                                  by Providing Feedback 

                                M. S. Ryoo and J. K. Aggarwal 
                              Computer and Vision Research Center 
                        Department of Electrical and Computer Engineering 
                       The University of Texas at Austin, Austin, TX 78712 
                              {mryoo, aggarwaljk}@mail.utexas.edu 

                   Abstract                      guide the user to perform the represented activity. While the 
                                                 user is trying to perform the activity he/she wants to do, our 
    We introduce a human-computer interaction system 
                                                 HCI system makes its own analysis on the current status of 
    which collaborates with a user by providing feed-
                                                 the activity being performed, and produce feedback. If the 
    back during user activities. The goal of the system is 
                                                 user does not perform the correct sub-event, the computer 
    to help a user complete a high-level activity that has 
                                                 interface alerts the user to the mistake.  The goal is to enable 
    been represented hierarchically. While a user is 
                                                 the system to provide feedback (or advice) to the user based 
    performing the high-level activity, our system ana-
                                                 on its action representation and visual observations. 
    lyzes what sub-events a user has already completed 
                                                   A HCI system helping a novice in the task of tightening 
    and what sub-events are needed next in order for the 
                                                 nuts while installing a car tire is a typical example that mo-
    user to finish the activity. The representations of 
                                                 tivated the construction of our algorithm. The task is com-
    human activities are constructed using a previously 
                                                 posed of multiple sub-events (tightening a single nut) which 
    developed context-free grammar based representa-
                                                 must follow a particular order: nuts must be tightened in the 
    tion scheme. We focus on a game named ‘penta-
                                                 order that is similar to drawing a star. Also, in this type of 
    gram game’ to illustrate our system. In the experi-
                                                 tasks, a user can undo sub-events (un-tightening a nut) to 
    ments, our system shows the ability to guide the 
                                                 recover from his/her mistake. The detailed structure and 
    user to complete the ‘pentagram game’ by providing 
                                                 characteristic of this activity is discussed in the section 4. Our 
    explicit feedback. The feedback not only contains 
                                                 system has the ability to guide a user not only to perform 
    atomic level instructions but also describes 
                                                 sub-events in a correct order but also to undo sub-events 
    higher-level long-term goals of the composite ac-
                                                 when he/she made a mistake. Our algorithm is designed to 
    tivities. 
                                                 provide feedback to accomplish those activities as well as 
                                                 other general activities. 
 1 Introduction                                    Previous HCI systems had mainly action-reaction based 
 Humans understand the structure of activities, and they take models. Those systems recognize human actions and perform 
 advantage of this knowledge of structure when performing particular reactions already encoded in the system. Research 
 high-level activities. In the middle of performing a complex on intelligent environments is a typical example of these 
 activity, humans know exactly what sub-events have already reactive systems. The goal of our system is a little different. 
 occurred and what sub-events need to be performed next. The goal of previous reaction based HCI systems is to pro-
 They explicitly or implicitly know what to do next, consid- vide correct reactions for corresponding actions, while that of 
 ering what they have done in order to achieve the goal in the our system is to guide and instruct how to make a whole 
 past. For example, during a dance of an expert dancer, the high-level activity successful by providing feedback. Reac-
 dancer explicitly or implicitly knows what his/her next move tion based HCI systems are not suitable in our case. In order 
 should be. The dancer knows all his/her moves and their for reaction based HCI systems to guide a user to perform 
 order in the dancing activity, and uses this knowledge during represented activities containing concurrent as well as se-
 the dancing activity to decide various moves.   quential sub-events, the system must specify all possible 
  Motivated by the ability of human experts, we design a steps and branches of the order of sub-events; the number of 
human-computer interaction (HCI) system which collabo- cases becomes very large. In addition, the feedback provided 
rates with a user to help the user complete high-level human by our system is hierarchical, which is difficult for reaction 
activities. Similar to human experts, the system has knowl- based systems to deal. 
edge on the structure of the activity that the user wants to The main technical contribution made in this paper is on 
perform. Our system has a representation of an activity which the algorithm to provide feedback, which estimates the in-
describes how the correct activity should look like tempo- ternal states of the incomplete composite activity and pre-
rally, spatially, and logically, and uses it to automatically dicts what sub-event is needed in order to complete the action. 


                                            IJCAI-07
                                             2850 In the case of simple sequential models, such as finite state 3.1 Language-like Representations 
 machines or hidden Markov models, estimating which state 
                                                 In order for our HCI system to provide feedback, the system 
 and what to do is a simple task since they inherently contain must have a formal and complete representation of the ac-
the information on the next occurring sub-event. However, in tivity that a user is trying to accomplish. We use Ryoo and 
the case of activities that can only be represented by highly 
                                                 Aggarwal’s CFG-based representation syntax to construct a 
complex models, such as full first-order logic, this is no formal representation of activity by listing necessary tem-
longer a simple task. We use the human activity representa- poral and spatial conditions. It is always assumed that the 
tion framework developed by Ryoo and Aggarwal [2006]. In 
                                                 system has a programming language-like representation of 
activities consisting of concurrent sub-events, it is not easy to the activity it wishes to recognize. 
determine which point the system has reached, and what 
sub-event is urgently needed in concurrent activities. In ad- Example 1 Let’s look into a spinning move in figure skating 
dition, in highly complex activities, some sub-events might as an example. Spinning moves that figure skaters do are 
have an identical sequence in the beginning, confusing the complex human activities, which involve both arm and leg 
system in its decision as to the status of the activity.  movements. Assume that our system wants to provide feed-
                                                 back (advice) to a skater to perform a common combination 
 2 Related Works                                 spin, a camel-sit spin. In a camel spin, a skater must spin with 
                                                 his/her leg and arm fully outstretched horizontally, into the 
 The reactive systems mentioned in the introduction have general shape of a ‘T’. In a sit spin, the skater must sit while 
 similar aspects as our system. Since Coen [1998] presented spinning. The camel-sit spin is a sequence of two spins: the 
 design principles of intelligent environments, several re- skater must initially spin with a ‘T’ shape, and then sit while 
 search projects constructed HCI systems for intelligent en- spinning. Our system must have the following CFG-based 
 vironments, rooms, and workspaces [Hassens et al., 2002; representation before applying our feedback providing algo-
 Kulkarni, 2002]. They introduced the concept of reactive rithm: 
 behavioral systems, extending previous rule-based reactive Camel-Sit_Spin(person1) = ( 
systems. Their main goal is to make the HCI correctly re-  list( def(‘a’, Spin(person1)), 
spond to relatively simple user behaviors or actions within    list( def(‘b’, Sit(person1)), 
the activity context.                                   list( def(‘c’, Stretch_Arm(person1)), 
  On the other hand, several works on surveillance and        def(‘d’, Stretch_Leg(person1))) )), 
children monitoring systems attempted to recognize hierar-  and( equals(a, this), 
chical human activities [Minnen et al., 2003; Park and Ag- and( and( during(c, a), during(d, a) ), 
garwal, 2006; Siskind, 2001]. Most of those works only      and( during(b, a), 
focused on after-the-fact detection of activities, and did not and( meets(c, b), meets(d, b) ) ) ))  ); 
attempt to provide feedback to the user who is performing the 
activities. In the work done by Ryoo and Aggarwal [2006], 3.2  Directed Graph Representations 
high-level human activities were represented hierarchically 
                                                 The language-like representation of activities is hu-
using context-free grammar (CFG) syntax, specifying tem-
                                                 man-oriented. In order to estimate ongoing status of the ac-
poral, spatial, and logical relationships among sub-events. 
                                                 tivity and to generate proper feedback, our system converts a 
Their representation was similar to the first-order logic using 
                                                 programming language-like activity representation into an 
Allen’s temporal predicates [Allen, 1994], and recognition 
                                                 internal directed graph representation automatically using the 
was done hierarchically. 
                                                 following algorithm. 
                                                   In our directed graph representation, a vertex is a time 
 3 Feedback                                      point (either starting time or ending time of a sub-event), and 
 The objective of our algorithm to provide feedback is as an edge from vertex t1 to vertex t2 implies t1 < t2. The 
 follows: Given a situation where the user is in the middle of purpose of this conversion is to calculate the necessary tem-
 performing an action, the system must analyze which poral ordering between times associated with an activity’s 
 sub-events are already done and which sub-events need to be sub-events. Our feedback providing algorithm uses this di-
 done. The explicit feedback must be provided finally, stating rected graph representation of human activities, since the 
 which sub-events are immediately needed and what is their directed graph representation enables us to calculate the 
 appropriate starting time and ending time.      order of two time points easily. 
  We assume that the system initially has the language-like The procedure to convert our CFG-based representation 
 representation of activities. We start with converting the into a directed graph representation is presented below. 
 representation of activities into a directed graph representa- First, the system must convert Allen’s temporal predicates 
 tion, which makes the system able to apply our algorithm. for time intervals into equalities and inequalities among time 
 We then discuss principle theorems justifying our approach. points. In our CFG-based representation, temporal relation-
 Finally, we present a general algorithm for providing feed- ships are specified as a logical formula of Allen’s temporal 
 back to hierarchical activities. The system must convey hi- predicates. Following the definition of temporal predicates, 
 erarchical structure of activities and generate hierarchical the representation can be converted into equalities and ine-
 feedback.                                       qualities among time points as follows: 


                                            IJCAI-07
                                             2851  Let a and b be the time intervals, (astart,aend) and (bstart,bend). 3.3  Consistent State and Feedback 
  equals(a, b)   =>  astart = bstart and aend = bend This subsection describes principle definitions and theorems 
  before(a, b)  =>  aend < bstart                which justifies for our algorithm theoretically. 
  meets(a, b)   =>  aend = bstart                  In our directed graph representation, analyzing the status 
  overlaps(a, b)  =>  astart < bstart and bstart < aend of ongoing activity is identical to finding up to which vertices 
  starts(a, b)    =>  astart = bstart and aend < bend the user has assigned a correct value. Since vertices corre-
  during(a, b)   =>  bstart < astart and aend < bend spond to the starting or ending times of sub-events, assigning 
  finishes(a, b)   =>  aend = bend and astart > bstart values for vertices means that a user started and ended 
  Also, we add one trivial inequality astart<aend for all time sub-events in those time points. We denote a set of assigned 
 intervals a. As a result, logical concatenations of Allen’s vertices as a state of the graph. 
 temporal predicates are converted into logical concatenations The system can calculate more than one possible assign-
 of equalities and inequalities among time points. ment, i.e. state, in one situation. There might be multiple 
  Next, the system removes the predicate not, as follows. candidate assignments for each vertex, since sub-events can 
  not(t1<t2)   =>  t2 < t1 or t1 = t2            occur multiple times. In addition, the system might leave 
  not(t1=t2)   =>  t1 < t2 or t2 < t1            some vertices unassigned, leaving them to be assigned in the 
                                                 future. Among many possible states, few of them satisfy the 
  The system then converts a logical formula into a dis- temporal order specified in the graph. We call those states 
junctive normal form (DNF). The end product is the dis- consistent states. 
junction of conjunctive clauses of pure equalities and ine-
qualities. This suggests that the activity representation can be Definition 1 (Assigned Vertex) We define a vertex assigned 
divided into several conjunctive clauses, where each clause vertex, if the system has assigned an identical value to all 
presents necessary temporal conditions for the activity. There time points associated with the vertex. We define a vertex 
is no semantic difference between the DNF representation unassigned vertex, if the system did not assign any value to 
and the directed graph representation we plan to construct. the time points associated with the vertex. We define a vertex 
For each clause, we formulate one directed graph to help the half-assigned vertex, if the sub-set of time points in the vertex 
user visualize the representation. The system first calculates are assigned while the others are unassigned. 
time points that are equal, checking the equalities in a clause. Definition 2 (Consistent State) Let S be a set of assigned 
The system assigns one vertex for a set of time points which vertices in a graph G. Let H be a set of half-assigned vertices 
are equal. For example, if t1=t2 and t2=t3, only one vertex is in G. We say the graph G is in the consistent state with the 
assigned for a set {t1, t2, t3}. Then, an edge is constructed assignment S and H if and only if 
from a vertex v1 to a vertex v2, if t1, t2 such that ( t1 v1 1.  v, w:  v, w  S H, v<w if there exist a path from 
 and t2 v2). What this directed graph representation sug- v to w, and 
gests is that the activity can be completed if and only if an 2. v:  v  S,   (parents of v) S, and 
integer value is correctly assigned for each vertex while 3. v:  v  H,   (parents of v) S, and 
satisfying the temporal order of the graph.        The consistent state implies that there is no contradiction 
Example 2 The language-like representation of the camel-sit among assigned values of the graph. The consistent state 
spin, which we discussed in example 1, may be converted clearly shows up to which point the activity has been proc-
into a directed graph. First, the temporal predicates are con- essed. From Definition 2, we know that a graph without any 
verted into equalities and inequalities.         assignment is also in a consistent state. Among consistent 
  (a  <a    and b <b  and c <c  and d <d    and  states, the states which we are particularly interested in are 
    start end  start end start end  start end    maximum consistent states. If additional assignments based 
  astart=thisstart and aend=thisend and astart<cstart and cend<aend  
  and a  <d   and d <a  and a <b   and b  < a    on currently provided time intervals are not possible for a 
       start start end end  start start end end  consistent state, it is a maximum consistent state. 
  and cend = bstart and dend = bstart) 
  This already is a DNF composed of only one conjunctive Calculating the maximum consistent states of an ongoing 
 clause. Figure 1 shows a final directed graph representation activity is the key component not only for analyzing the 
 of the example.                                 status of ongoing activity, but also for providing feedback. 
                                                 We introduce two theorems which will lead us to use an 
                   c      c                      iterative approach to find maximum consistent states. 
            c       e      e     b
             s     =       =      e              Theorem 1 Let U be a set of all vertices in a graph G in a 
    as                                  ae 
                   bs     de                     consistent state. Let v be a vertex, where v U-H-S and 
    =                      =            =        (parents of v)  S. If we assign a value larger than (max of 
   thiss                               thise     parents of v) to the entire time points in v, then G is still in the 
            ds     de     bs
                   =                             consistent state. If we assign the same value only to the 
                                                 sub-set of time points in v, making the v half-assigned, then G 
                   b
                    s                            is still in the consistent state. 

 Figure 1: The directed graph representation for ‘Camel-Sit_Spin’. Theorem 2 Let v be a vertex, where v H. If we make vertex 
 Edges (a , a ), (a , b ), (c , a ), and (d , a ) are omitted in the graph. v an assigned vertex by assigning identical values for all time 
      s e  s  s  e e     e e                     points in v, then G is still in the consistent state. 


                                            IJCAI-07
                                             2852  Iteratively updating consistent states using Theorem 1 and After calculating maximum valid consistent states, the 
2 will lead us to the maximum consistent states. Assuming system can provide feedback to the user. The feedback is 
that the system knows all starting times and ending times of one-step look-ahead information of the activity. By applying 
sub-events, the system can check whether further update is Theorem 1 and 2 once more to calculated maximum consis-
possible or not. If possible, the system can assign the value of tent states, the system is able to see what sub-events are 
detected sub-events for corresponding vertex. The only con- needed next in what time interval. 
straint is that the starting time and the ending time of the 
same sub-event must match. For example, if there are two 3.4  Hierarchical Feedback Algorithm 
time intervals (1, 5) and (3, 8) for the sub-event A, the system The actual algorithm for feedback providing is described in 
cannot assign 1 for As and 8 for Ae. This can be checked by this subsection, especially focusing on the hierarchical aspect 
applying either a dynamic programming algorithm or an of our feedback. 
algorithm which traverses back when adding the ending time Most high-level human activities have hierarchical struc-
of a sub-event. The resulting time complexity is either linear tures; sub-events also have their own sub-events. This im-
time or quadratic time in each case.             plies the system needs a hierarchical algorithm to recognize 
Algorithm to calculate maximum consistent states time intervals of sub-events, and suggests that hierarchical 
1   Initialize all vertices in the graph as unassigned vertices feedback is needed. 
2   do                                             Therefore, a recursive algorithm is designed, where the 
3     Apply Theorem 1 and 2 to find a vertex v   base case is the feedback providing for atomic actions (di-
4     Make v an assigned vertex or a half assigned vertex rectly telling the user to do the atomic action). For composite 
      accordingly                                activities, the system analyzes sub-events’ temporal struc-
5     Update v.value as a list of possible assignments tures using our directed graph representation of the activity, 
6     for all i,                                 and tells the user to start or end a particular sub-event, by 
7        Update v.value[i].p as a list of assignments of applying the algorithm presented in subsection 3.3. If that 
         parent vertex which is less than v.value[i]. sub-event is an atomic action, then the system can simply tell 
8        if v.value[i] is an ending time of a sub-event, the user to do the action. If that sub-event itself is a composite 
9          Traverse back the graph using value and activity, the system must tell the user how to complete that 
           value[i].p of ancestors of v to check the sub-event also. That is, the system must examine sub-events 
           starting of the sub-event was assigned of the sub-event to provide hierarchical feedback. This 
10         if not, remove v.value[i] from v.value process continues until the atomicity is gained. 
11  while v  NIL                                 Example 3 Let’s look into the spinning moves in figure 
12  return assignments of the graph              skating once more. Assume that a user wants to perform the 
  Even though maximum consistent states do not have any camel-sit/sit spin. We already defined what the camel-sit spin 
contradiction among their assignments on vertices, it does is and what the sit spin is. The camel-sit/sit spin is a combi-
not imply that the future assignments without any contraction nation of the camel-sit spin and the sit spin, where the skater 
are possible. Therefore, we must calculate maximum valid changes his/her axis feet between two spins. We can set the 
consistent states based on the maximum consistent states. sub-events of the camel-sit/sit spin to be the camel-sit spin 
                                                 and the sit spin. Assume that the system wants to provide 
Definition 3 (Valid Consistent State) We call a consistent feedback when the user just started to spin at time 1. Ap-
state as a valid consistent state, if it has at least one possible plying the approach presented in subsection 3.3 will result 
combination of future assignments that satisfies temporal with the system telling the user to ‘start the camel-sit spin, 
relationships among vertices. The maximum valid consistent after 1+’. However, that information is not sufficient. The 
states are the valid consistent states which do not have other system must explicitly specify how to start the sub-event also, 
valid consistent states containing them.         as follows: 
Algorithm to calculate maximum valid consistent states 1. In order to do a camel-sit/sit spin at (1, 1+), do the 
1   for each maximum consistent state with the assignment camel-sit spin at (1, 1+) 
                                                     2. In order to do a camel-sit spin (1, 1+), do a stretch 
    S and H, 
2     S’ = S ; H’ = H                                  _arm at (1+, 1+) and do a stretch_leg at (1+, 1+). 
 3    do                                             3. Stretch_arm and stretch_leg are atomic actions, so do 
                                                       them now. 
 4       Find as v such that 
           {vS’ ((ae is not assigned  ae<= current We always assume that the system knows time intervals of 
           time point)  (ae is assigned for v’ H’  sub-events already occurred by using the recognition algo-
           ae<current time point))}              rithm for the CFG-based representations. Further, we also 
           {vH’ as<current time point}           assume that the system knows the starting time of a sub-event 
 5       S’ = S’ - (as  descendent of v)         as soon as the sub-event started. That is, for each sub-event, 
 6       H’ = H’ - (as  descendent of v)         the system has a list of time intervals which specifies pre-
 7    while as  NIL                              vious occurrences of the sub-event, and has candidate start-
 8  return set of all S’ and H’                  ing times of the sub-event that are not completed. 


                                            IJCAI-07
                                             2853 Algorithm to provide hierarchical feedback: 
 1  Using previous recognition algorithms for the 
    CFG-based representation, find all possible starting 
    times and ending times of sub-events 
2   Convert the CFG-based representation into directed 
    graph representations 
3   Find the maximum valid consistent state closest to goal 
 4  Apply Theorem 1 and 2 once more to construct feedback. 
    When to start or end the corresponding sub-event is Figure 2: The illustration of the setup for ‘pentagram game’. There 
    specified                                   are five locations: place1, place2, …, and place5. Black stones are to 
  
 5  If the sub-event from step 4 is a composite itself, apply be placed on each location. If the placement is done in correct order 
    the same procedure from step 1 to the sub-event from 1 to 5, then the activity ‘pentagram game’ is complete. Other-
  
6   return the concatenated feedback            wise, if in an incorrect order, the activity is incomplete. Note that the 
                                                user can freely remove placed stones when he/she thinks the place-
 4 Experiments                                  ment is wrong. 
 We focus on the activity named ‘pentagram game’ for the 
                                                         this    x5      s5      x4      s4  
 experiments. The ‘pentagram game’ is a composite action, a e      s       s       s      s
 sequence of moving or removing stones in a particular place, =   =       =      =       = 
 similar to the activity of tightening the tire of a car. For our x5e s5e x4e    s4e    x3e
 experiments, we define three types of atomic actions that take 
 two parameters: move_stone(person1,place1), remove_stone 
                                                  s1     x1      s2      x2      s3     x3  
 (person1, place1), and basic_safe(person1, place1). The first s s s       s      s       s
                                                          =       =       =      =       = 
 atomic action describes a person1 moving a stone to place1. 
                                                         s1      x1              x2     s3
 The seconding atomic action describes a person1 removing a e      e     s2e      e       e
                                                          = 
 stone from place1 and placing it to somewhere else. The last                     assigned vertex
                                                         thiss
 atomic action describes that a person1 did not perform any                       half-assigned vertex
 action related to place1. For the notational convenience, we 
                                                                                  unassigned vertex
 will simply write move_stone(person1, place#) as ‘move#’, 
 since only one user is moving the stones. Our system detects Figure 3: The directed graph representation for ‘PentagramGame’. 
 the starting time and ending time of the atomic actions using The dotted vertices are unassigned vertices or half-assigned vertices.
 the computer vision techniques. 
  In order to make the high-level activity ‘pentagram game’    def(‘x2’, move_stone(person1, place2)), 
 successful, the user must place all stones in the locations    def(‘x3’, move_stone(person1, place3)), 
 following a particular order. Figure 2 describes the order of    def(‘x4’, move_stone(person1, place4)), 
 the activity ‘pentagram game’. One important characteristic    def(‘x5’, move_stone(person1, place5)), 
 of the ‘pentagram’ is that the user can always remove stones    def(‘s1’, Safe(person1, place1, …, place5)), 
 to go back to previous the state, which makes the activity    def(‘s2’, Safe(person1, place1, …, place5)), 
 more complex than it seems to be. For example, following    def(‘s3’, Safe(person1, place1, …, place5)), 
 the sequence of atomic actions satisfies the ‘pentagram    def(‘s4’, Safe(person1, place1, …, place5)), 
 game’ activity: move1-move3-remove3-move2-move3-move     def(‘s5’, Safe(person1, place1, …, place5))  ), 
 4-move5. Even though move3-remove3 was interrupted in the and(   
 original sequence m1-m2-m3-m4-m5, this also is a ‘penta- starts(‘this’, ‘x1’), finishes(‘this’, ‘x5’), 
 gram game’ activity since the person removed the stone from meets(‘s1’, ‘x1’), meets(‘x1’, ‘s2’), meets(‘s2’, ‘x2’), 
 place3 before other moves. Before defining the composite meets(‘x2’, ‘s3’), meets(‘s3’, ‘x3’),meets(‘x3’, ‘s4’), 
 activity ‘pentagram game’, we need to define move followed meets(‘s4’,‘x4’), meets(‘x4’, ‘s5’), meets(‘s5’, ‘x5’) ) 
by remove, such as m4-m5-rm4-rm5. We name this activity ); 
as a composite activity Safe(person1, stone1, place1, place2, We shot a video of users doing the ‘pentagram game’. 
place3, place4, place5). When playing ‘pentagram game’, Some of them performed a complete sequence of successful 
‘safe’ activity can be inserted between correct moves. activities, while others were stopped in the middle of an 
  Therefore, the ‘pentagram game’ will be composed of five activity. For some sequences, mistakes were intentionally 
‘move_stone’ atomic actions, and five ‘safe’ composite ac- made, such as inserting move4-move3 after initial move1. 
tivities: Safe-m1-Safe-m2-Safe-m3-Safe-m4-Safe-m5. Our The purpose of these erroneous insertions was to test whether 
language-like representation for the activity ‘Penta- our feedback providing algorithm can correctly guide the 
gramGame’ is as follows. The actual representation of the user to complete the overall activity. For example, if we fed 
‘Safe’ is omitted due to the limitation of space. the input sequences of move1-move4-move3, the system must 
                                                 guide user to start remove3 and start remove4. 
  PentagramGame(person1, place1, …, place5) = (    Videos taken by the Sony VX-2000 were converted to a 
  list(  def(‘x1’, move_stone(person1, place1)), sequence of frames with a frame rate of 10 per second. Each 


                                            IJCAI-07
                                             2854