               Optimal     Refutations    for  Constraint    Satisfaction    Problems

                                 Tudor  Hulubei  and  Barry  O’Sullivan
                                  Cork Constraint Computation   Centre
                   Department  of Computer  Science, University College  Cork, Ireland
                               tudor@hulubei.net,  b.osullivan@cs.ucc.ie


                    Abstract                          that cannot lead to a complete solution. In either case, the
                                                      ideal is that insolubility can be proven with the least amount
    Variable ordering heuristics have long been an im- of effort. In this paper we will measure such effort by the
    portant component of constraint satisfaction search number of nodes visited to prove that an insoluble (sub)tree
    algorithms. In this paper we study the behaviour of has no solution. We can evaluate variable ordering heuristics
    standard variable ordering heuristics when search- by comparing the number of nodes that they visit to prove the
    ing an insoluble (sub)problem. We employ the      insolubility of a (sub)problem with the minimum number of
    notion of an optimal refutation of an insoluble   nodes required to draw the same conclusion.
    (sub)problem and describe an algorithm for ob-      By comparing optimal refutations with those generated by
    taining it. We propose a novel approach to empir-
                                                      MAC  [Sabin and Freuder, 1994], when combined with vari-
    ically looking at problem hardness and typical-case ous standard variable ordering heuristics, we show empiri-
    complexity by comparing optimal refutations with  cally that there is a signiﬁcant difference between the perfor-
    those generated by standard search heuristics. It is mance of heuristics on typical random problems and those
    clear from our analysis that the standard variable found in the real world. We also suggest that small-to-
    orderings used to solve CSPs behave very differ-
                                                      medium sized random binary CSPs are of limited value when
    ently on real-world problems than on random prob- studying and developing variable ordering heuristics. While
    lems of comparable size. Our work introduces a po- this has been the intuition amongst constraints researchers,
    tentially useful tool for analysing the causes of the our analysis shows empirically that this is indeed the case and
    heavy-tailed phenomenon observed in the runtime   gains insights into the nature of the difference in behaviour
    distributions of backtrack search procedures.     between random and real-world problems. Finally, we discuss
                                                      how our results may provide further insights into the causes
1  Introduction                                       of the heavy-tailed phenomenon observed in the runtime dis-
The conventional wisdom in systematic backtrack search tributions of backtrack search procedures. For example, by
is that a variable ordering heuristic should be chosen so focusing on the distributions of actual and optimal refutations
that if a bad assignment is made, and search enters an we can study whether heavy-tailedness is present because of
insoluble (sub)tree, the heuristic will prefer variables that the variable ordering heuristic, the value ordering heuristic, or
have a high likelihood of proving quickly that the cur- is more fundamentally related to the structure of the problem.
rent (sub)tree is indeed unproductive. This property of
a variable ordering heuristic is often referred to as fail- 2 Preliminaries
ﬁrstness [Haralick and Elliott, 1980]. Fail-ﬁrstness can be Deﬁnition 1 (Constraint Satisfaction Problem). We deﬁne
seen as an explanation for why particular variable order- a CSP as a 3-tuple P =ˆ hV, D, Ci where V is a ﬁnite set of
ing heuristics are better than others for solving CSPs, and it n variables V =ˆ {V1, . . . , Vn}, D is a set of ﬁnite domains
has received considerable attention from the research com- D =ˆ {D(V1), . . . , D(Vn)} such that D(Vi) is the ﬁnite set of
munity [Smith and Grant, 1998; Beck et al., 2004]. Various possible values for Vi, and C is a ﬁnite set of constraints such
ways of explaining the quality of variable ordering heuris- that each Cij ∈ C is a subset of D(Vi) × D(Vj ) specifying
tics in terms of fail-ﬁrstness have been proposed. Some au- the combinations of values allowed between Vi and Vj , where
thors argue that heuristics that minimise branching depth are i < j. We say that P is arc-consistent (AC) if ∀vk ∈ D(Vi)
best [Haralick and Elliott, 1980], while others argue that such and ∀j such that Cij ∈ C, ∃vl ∈ D(Vj ) with (vk, vl) ∈ Cij .
a policy can cause an increase in branching factor which An assignment Aik =ˆ hVi = vki represents a reduction of
can have the effect of increasing the size of the resultant D(Vi) to {vk} ⊆ D(Vi). A solution to P is a set of distinct
(sub)tree [Smith and Grant, 1998].                               S
                                                      assignments =ˆ {Al1k1 , . . . , Alnkn |(vki , vkj ) ∈ Cij }.
  A search algorithm enters an insoluble search tree either
because the problem itself is insoluble, or because the current Deﬁnition 2 (Search Algorithm). A search algorithm Θ =ˆ
partial solution has just been extended with an assignment hΛ, ∆, ≺V , ≺vi is a combination of a branching method Λ, aconsistency enforcement method ∆, a variable ordering ≺V (note that each variable ordering heuristic will generate a dif-
and a value ordering ≺v, both of which can be either static ferent set of mistake points). When we analyse MAC in con-
or dynamic.                                           junction with a certain ≺V on a mistake point M, we will
                                                      refer to the refutation for the (sub)problem PM as the actual
Deﬁnition 3 (Search Tree). A search tree T for a problem refutation. We will contrast the actual refutation with the opti-
P is a set of nodes and arcs. Each node corresponds to a set mal refutation for PM, obtained by replacing ≺V with a new
             N
of assignments, =ˆ {Al1k1 , . . . , Alp−1kp−1 , Alpkp }, totally variable ordering heuristic ≺V such that |TM| is minimised.
ordered by a dynamic variable ordering heuristic ≺V . The Sometimes, rather than using the optimal refutation, we
root of the search tree is a special node R =ˆ ∅. Two nodes compare against the quasi-optimal, deﬁned as the smallest
N1 and N2 are connected by an arc if ∃Aij such that N2 = refutation whose depth does not exceed that of the actual. By
N1 ∪ Aij , in which case we say that N1 is the parent of N2, selecting variables based on a depth-ﬁrst traversal of the tree
   N              N                N
and  2 is the child of 1. For every node , its children are of minimum size, ≺V causes MAC to generate the smallest
totally ordered by a dynamic value ordering heuristic ≺v. possible search tree proving insolubility for PM. In our ex-
                                                      perience it is extremely rare that the quasi-optimal refutation
  Search trees are deﬁned in the context of a speciﬁc search is larger than the optimal. By accepting quasi-optimality we
algorithm. For a particular CSP instance P , and search algo- can use the depth of the actual refutation as an upper bound,
rithm Θ, a one-to-one mapping exists between the nodes in dramatically speeding-up search for better refutations.
the search tree T and the assignments made by Θ.
                                                      Deﬁnition 6 (Improvement Ratios). For a given mistake
Deﬁnition 4 (Mistake Point). For a soluble problem P , a point, the refutation improvement ratio is the ratio between
mistake point M is a node identiﬁed by a set of assignments the size of the actual refutation and that of the optimal refuta-
M
   =ˆ {Al1k1 , ..., Alp−1kp−1 , Alpkp }, totally ordered by ≺V , tion. The overall refutation improvement ratio is simply the
             S         M                         S
for which ∃S ∈ such that  \ {Alpkp } ⊂ S, but ¬∃S ∈   ratio between the total number of nodes in all the actual refu-
such that M ⊂ S. Since an insoluble problem does not admit tations and the total number of nodes in all their correspond-
any solutions, we deﬁne the mistake point associated with an ing optimal refutations encountered when ﬁnding the ﬁrst so-
insoluble problem as the root of its search tree.     lution or proving insolubility.

  Informally, a mistake point corresponds to an assignment 3 Analysing Refutations
that, given past assignments, cannot lead to a solution even
though, in the case of a soluble problem, a solution exists. Our focus here is only on how a variable ordering heuristic
Whenever the value ordering heuristic makes such a mis- behaves when trying to prove insolubility for a (sub)problem.
take, the role of the variable ordering heuristic is to guide We are not interested in focusing on how often a variable or-
the search out of that insoluble search tree as quickly as pos- dering heuristic enters an insoluble (sub)tree. Therefore, our
sible. However, it is important to realise that the actual set of analysis is centered around ﬁnding optimal refutations for all
mistake points encountered during search is also dependent the mistake points in a search tree. Unfortunately, this is a
on the variable ordering heuristic used.              herculean task, as we have to search through all the possible
  For a soluble problem P , let PM =ˆ {VM, DM, CM} be permutations of assignments, i.e. consider all possible search
the insoluble (sub)problem corresponding to M, where VM =ˆ trees rooted at each mistake point. Without clever optimisa-
                                                      tions, this would not be feasible for anything but the tiniest
V \ {Vl1 , ..., Vlp }, CM =ˆ {Cij |Vi, Vj ∈ VM, Cij ∈ C}, and
DM  is the set of current domains after arc-consistency has problems.
                                            M
been restored to reﬂect the domain reductions due to . If P 3.1 Basic Algorithm
is insoluble, as a notational convenience, we deﬁne M =ˆ ∅
and PM as the arc-consistent version of P . For brevity, we Given a problem instance, a search algorithm (MAC in our
will refer to the insoluble (sub)tree rooted at a mistake point case) and the variable ordering heuristic to be evaluated, we
and its corresponding insoluble (sub)problem interchange- begin by searching for a solution, with the goal of identify-
ably.                                                 ing all the mistake points. The mistake points represent the
                                                      roots of the insoluble (sub)trees the search algorithm happens
Deﬁnition 5 (Refutations). Given a search algorithm Θ, a to encounter before ﬁnding the ﬁrst solution. For each such
refutation for a given insoluble (sub)problem PM, rooted at mistake point we compute both the actual refutation, by re-
mistake point, M, is simply the corresponding search tree running MAC on the current (sub)problem using the heuristic
TM. We will refer to |TM|, the number of nodes in TM, as we are evaluating, and the optimal refutation, by considering
the size of the refutation.                           all the possible permutations of assignments to the variables
                                                      involved in that (sub)problem. Note that insoluble instances
  We study the refutations found using a version of MAC are just a special case where the only mistake point is before
that uses AC-3 [Mackworth, 1977] for consistency enforce- the ﬁrst assignment. Furthermore, when analysing insoluble
ment and selects values randomly. Our goal is to determine problems, it is important to realise that the optimal refutation
how close to optimality are the refutations obtained when is independent of the heuristic used; in other words no other
well known variable ordering heuristics, with randomly bro- ordering could possibly prove insolubility more quickly.
ken ties, are substituted for ≺V . For each heuristic ≺V we Both the search algorithm with the variable ordering
ﬁrst collect the mistake points it generates when using MAC heuristics being analysed and the exhaustive search for theoptimal refutation use the same method of enforcing consis- for varying values of n, and a subset of the RL-
tency (AC in our case). Failure to do so would make the refu- FAP Celar Scen11 [Cabon et al., 1999]. We have stud-
tation improvement ratio a function of both the variable or- ied the following dynamic variable ordering heuris-
dering and the level of consistency enforced, thus being detri- tics: min-domain [Haralick and Elliott, 1980], max-degree,
mental to our goal of analysing variable ordering heuristics. min(domain/degree) [Bessiere` and Regin, 1996], and bre-
  The version of MAC that we use employs k-way branch- laz [Brelaz,´ 1979]; their corresponding anti-heuristics; and
ing [Smith and Sturdy, 2004], rather than binary branching, random variable selection. These are regarded as the standard
so that selecting a variable Vi creates |D(Vi)| branches in the general-purpose variable ordering heuristics used in the CSP
search tree. Thus, we make sure that refutation sizes are not literature. Ties were broken randomly. Throughout our exper-
inﬂuenced by the value ordering.                      iments we have used a dynamic random value ordering.
                                                        Note that for heuristics we report the optimal refutations
3.2  Optimisations                                    for random problems and n-queens, and the quasi-optimal
There are a number of optimisations that we have applied. refutations for RLFAP. For anti-heuristics we always com-
  Firstly, we can easily maintain an upper bound on the size pute quasi-optimal refutations. While the true optimal refu-
of the optimal refutation by initially setting it to the size of tations for RLFAP may be smaller than those reported, based
the actual refutation, then updating it as smaller refutations on our observations the difference is not signiﬁcant. Limit-
are found. Therefore, the search for the optimal refutation can ing the search to quasi-optimal proofs allowed us to gather
be implemented as a branch-and-bound procedure.       signiﬁcantly more data for this problem.
  Secondly, we can improve the search by looking ahead
to avoid choices that cannot improve on the current small- 4.1 Random and n-Queens Problems
est refutation. Whenever a variable Vi is selected at a certain
depth all the values in its domain have to be tried, and they all Due to the extreme computational requirements of the search
have to fail for the current (sub)problem to be proved insolu- for optimal refutations, we had to limit our experiments to
ble. Consequently, we know that by selecting Vi, the size of random problems with 15 variables and uniform domain sizes
the current partial refutation will increase by at least a number of 10 values. We generated 800 instances for each tightness
of nodes equal to |D(Vi)|. We call this a 1-level look-ahead. point using a random problem generator that conforms to the
  By temporarily assigning to Vi, in turn, every value v in Model-B speciﬁcation [Gent et al., 2001].
its domain, and by attempting to restore arc-consistency after We selected instances at the highest peak of difﬁculty for
every such assignment, we can associate with each v a mini- these problems, found to pass through a plane corresponding
mum  contribution to the size of the refutation. If the assign- to density 0.95. Tightness was varied along this plane. Specif-
ment makes the subproblem arc-inconsistent, v’s contribution ically, we identify a distinct tightness at which we move from
will be 1, given by the node corresponding to the assignment generating a set of problem instances that are all soluble to
itself. However, if arc-consistency can be restored after the generating instances that are all insoluble. In Figure 1 this
assignment, at least one more variable will have to be consid- transition occurs at a tightness of 0.3. We indicate the range
ered before the current subproblem can be proved insoluble. of tightness for which all problems were soluble (resp. insol-
Therefore, v will carry a minimum contribution equal to the uble) with a “high” (resp. “low”) line.
smallest domain size amongst all the remaining unassigned

variables. We call this a 2-level look-ahead.             3
                                                         2.8                                    brelaz
  In general, Vi’s selection would increase the size of the cur-                             max-degree
                                                         2.6                                 min-domain
rent partial refutation by at least the sum of the minimum con-  2.4                      min-domain/degree
                                                         2.2                                   random
tributions of all the values in its domain. If that would cause                  HIGH=solution found, LOW=no solution 
                                                          2
the current partial refutation to exceed the size of the small-  1.8
est refutation found so far, Vi will be skipped at the current  1.6
                                                         1.4
depth. This dramatically reduces the search space and brings  1.2
reasonable size problems within reach.                    1
                                                         0.8
                                                           0   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1

4  Experiments                                            5
                                                                                              anti-brelaz
The basic experiment we run is this: for each variable order-  4.5                           max-domain
                                                          4                               max-domain/degree
                                           MAC                                               min-degree
ing heuristic we ﬁrst ﬁnd all the mistake points that vis-  3.5                  HIGH=solution found, LOW=no solution
its when ﬁnding the ﬁrst solution or proving insolubility; for  3
each mistake point, we ﬁnd MAC’s actual refutation (still with  2.5
the same heuristic); using the size of the actual refutation as  2
an upper bound, we ﬁnd the (quasi-)optimal refutation. This  1.5
                                                          1
approach was adopted because different variable orderings  0.5
generate potentially different sets of mistake points.     0   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1
  We  have performed experiments1 on random  binary
problems, various instances of the n-queens problem   Fig. 1: Mean overall improvement ratios (y-axis) for random prob-
                                                      lems as a function of tightness (x-axis). Heuristics (anti-heuristics)
 1 Code freely available with source at http://hulubei.net/tudor/csp. are in the top (bottom) plot. Median plots are virtually identical.  In Figure 1 we present the results associated with each of Finally, in Figure 3 we present, for each variable ordering
the variable ordering heuristics studied. Note that we are not heuristic, the distribution of insoluble (sub)trees in the data-
ranking heuristics, but are simply studying how close their set as a function of the improvement ratio. We see that almost
actual refutation sizes are to optimality. The overall refuta- all ratios were close to 1, meaning that almost all of the time
tion improvement ratio peaks at 1.8 for min(domain/degree) the standard variable ordering heuristics performed very close
at a tightness of about 0.24, meaning that for the set of mis- to perfection. We also see that for the random ordering heuris-
take points encountered when solving these problems using tic ratios of 10 are found less that 0.01% of the time and that
min(domain/degree) there does not exist a variable ordering there does not exist a single insoluble (sub)tree that provides
that could decrease the number of nodes in the corresponding an opportunity to make improvements of more than an order
refutations by more than that factor, on the average. Since at of magnitude over current heuristics.
the peak of difﬁculty proving insolubility accounts for most of In experiments performed over a large data-set of insolu-
the time spent in search, this result suggests that no improve- ble subtrees generated from problems ranging from 8 to 22
ment in the ordering of variables, for the problems we have queens we have observed similarly small refutation improve-
studied, would ever lead to an order of magnitude speedup. ment ratios for n-queens, only slightly bigger than those ob-
Indeed, in the soluble region we can see that at best we can served for random problems. Also, the linear relationship be-
hope to halve the time taken by max-degree. In theory, how- tween actual and optimal refutation size was observed, as well
ever, for soluble problems heuristics could do better by failing as a similar distribution of ratios.
less.
                                                           1
  Once we move  through the phase-transition to insoluble                                       brelaz
                                                                                             max-degree
problems, all heuristics offer improvement ratios less than  0.1                             min-domain
                                                                                          min-domain/degree
2.2 for max-degree and less than 1.6 for all other heuris-                                     random
tics, except random. In the case of min(domain/degree) we  0.01

see that when using MAC at the peak of difﬁculty the ra-  0.001
tio is approximately 1.4. This is an interesting result since
is demonstrates that for proving insolubility no variable or-  1e-04

dering heuristic exists, for these problems, that can improve  1e-05
upon min(domain/degree) by more than a factor of 1.4 at the  1           2       3    4   5   6  7  8  9  10
peak of difﬁculty.
  Figure 2 presents a plot of the distribution of actual refuta- Fig. 3: Probability of an insoluble (sub)tree in the data-set for ran-
tion sizes against optimal, per mistake point, for the random dom problems (y-axis) having an improvement ratio greater than a
                                                      certain value (x-axis).
and min(domain/degree) variable ordering heuristics. Of in-
terest here is the apparent linear relationship between actual
versus optimal refutation size. A similar linear relationship
was observed for all other heuristics and anti-heuristics stud- 4.2 RLFAP Celar Scen11
ied. When we discuss the performance of variable ordering The small improvement ratios obtained for random prob-
heuristics on a real-world problem in the next section we will lems and n-queens, and estimated in [Li and Gerard,´ 2000]
see that this linear relationship does not hold and that for very for hard random unsatisﬁable 3-SAT, do not seem to hold for
large refutations found by a heuristic, the optimal refutation real-world problems. A popular benchmark for binary CSPs,
can be many orders of magnitude smaller.              RLFAP Celar Scen11 was an obvious candidate for our analy-
                                                      sis. Unfortunately, at 680 variables, we could not analyse the

  600                       600                       entire problem. Instead, we extracted a subset of the original
                random              min-domain/degree problem made up of 22 variables that were part of the back-
  500                       500
                                                      door set [Williams et al., 2003] over which MAC backtracked
  400                       400                       while solving the original problem. We analysed all the mis-
  300                       300                       take points found when solving this subset of RLFAP over 500
  200                       200                       times for all variable ordering heuristics.

  100                       100                         Refutation improvement ratios of 20 and over were ob-
                                                      served, even when using the best heuristics, as seen in Fig-
    0                        0
     0  20  40  60  80  100  120  140  160  0  20  40  60  80  100  120  140  160 ures 4 and 5, while they were non-existent for random and n-
                                                      queens problems. Comparing Figures 2 and 4 we can clearly
Fig. 2: Refutation sizes for mistake points in random problems when see that heuristics behaves very differently on this problem
using random and min(domain/degree) variable orderings: actual (y- than on the random problems presented earlier. Speciﬁcally,
axis) as a function of optimal (x-axis).              we can see that actual refutations correlate very poorly with
                                                      quasi-optimal and that no linear relationship exists; note that
  The performance of a random variable ordering is of com- a log-scale had to be used on the y-axis of the left plot in
parable quality to that of a good variable ordering heuristic in Figure 4 due to the spread of actual refutation sizes for each
this problem class. From Figure 1 we see that the improve- quasi-optimal point on the x-axis.
ment ratio of the random heuristic is approximately 2.7 at the However, of particular interest in this problem is the pattern
phase transition, close to that of standard heuristics. we observe in Figure 5. While the vast majority of refutations   1e+07                    10000
                random              min-domain/degree have already begun developing the necessary infrastruc-
                            9000
   1e+06
                            8000                      ture needed to study real-world problems in a systematic
   100000                   7000                      way [Gomes et al., 2000; Walsh, 1999; Walsh, 2001]. There
   10000                    6000                      have also been some recent successful results demonstrat-
                            5000
    1000                    4000                      ing that one can beneﬁt considerably from developing vari-
    100                     3000                      able ordering heuristics that can exploit characteristics one
                            2000
     10                                               encounters in real-world problems [Boussemart et al., 2004;
                            1000
     1                        0                       Dubois and Dequen, 2001; Refalo, 2004].
      0  200  400  600  800  1000  1200  0  400  800  1200  1600 It is not known whether the linear relationship between ac-
                                                      tual and optimal refutations is preserved as the size of ran-
Fig. 4: Refutation sizes for mistake points in the RLFAP data-set dom problems increases. Recent work on studying the per-
when using random and min(domain/degree) variable orderings: ac- formance of variable ordering heuristics on very large CSPs
tual (y-axis) as a function of quasi-optimal (x-axis).
                                                      has shown that there can be orders of magnitude differences
                                                      between heuristics [Bessiere` et al., 2001]. However, those re-
offer small improvement ratios, it is possible to ﬁnd subtrees sults do not contradict the results presented in this paper with
on which the standard heuristics perform very poorly. For ex- respect to the relative performance of standard variable order-
ample, we can see that in a small number of subtrees max- ings on random and non-random problems.
degree did 100 times worse than quasi-optimal, while the Our analysis is related to the work of Li and Gerard
other heuristics, except min(domain/degree), sometimes did on studying the limits of branching heuristics for random
50 times worse than quasi-optimal. Clearly, the behaviour of 3-SAT [Li and Gerard,´ 2000]. However, our interests here
standard variable orderings is signiﬁcantly different on real- are in studying the limits of variable ordering heuristics
world problems than on the random problems that many re- in a constraint satisfaction context. Furthermore, our anal-
searchers use as a basis for studying these heuristics. In the ysis is capable of ﬁnding exact optimal refutations, rather
case of a random variable ordering, we observed a very small than approximating them, and focuses on the differences
number of subtrees where the refutation found was more than observed between random and real-world problems. Our
a factor of 105 worse than quasi-optimal, and that in the vast work is also closely related to the theoretical analysis of
majority of cases it performed more than an order of magni- proof complexity for satisﬁability and constraint satisfac-
tude worse than quasi-optimal.                        tion [Beame et al., 1998; Mitchell, 2003].


     1                                                     1
                                         brelaz                                                 brelaz
                                       max-degree                                            max-degree
                                       min-domain         0.1                                min-domain
    0.1                             min-domain/degree                                     min-domain/degree
                                         random                                                random
                                                          0.01
   0.01
                                                         0.001

   0.001                                                 1e-04

   1e-04                                                 1e-05
      1      10     100    1000   10000  100000  1e+06      1     10    100   1000 1e+4  1e+5   1e+6  1e+7
                                                           1
                                                                                                brelaz
Fig. 5: Probability of an insoluble subtree in the RLFAP data-set (y-                        max-degree
                                                          0.1                                min-domain
axis) having an improvement ratio greater than a certain value (x-                        min-domain/degree
                                                                                               random
axis).                                                    0.01

  Therefore, our standard heuristics behave very differently,  0.001
indeed much worse, on real-world problems than on random  1e-04
and n-queens problems. In particular, they can be less robust
                                                         1e-05
in the sense that they can sometime waste signiﬁcant amounts  1   10    100   1000 1e+4  1e+5   1e+6  1e+7
of time ﬁnding refutations for insoluble (sub)trees that are far
worse than optimal.                                   Fig. 6: Probability of an insoluble subtree in the RLFAP data-set (y-
                                                      axis) being greater than an optimal/actual (top/bottom) refutation of
                                                      a given size (x-axis).
5  Discussion
It is clear from our analysis that the standard variable or- In this paper we introduce a potentially useful tool for
derings used to solve CSPs behave very differently on real- analysing the causes of the heavy-tailed phenomenon ob-
world problems than on random problems of comparable  served in the runtime distributions of backtrack search pro-
size, which are frequently used to study the performance of cedures [Gomes et al., 2000]. Figures 5 and 6 show, for RL-
heuristics in the research literature. Our results demonstrate FAP, a very small percentage of insoluble (sub)problems for
that there are considerable opportunities to improve search which standard variable ordering heuristics will ﬁnd refuta-
performance on real-world problems. Some researchers  tions that are signiﬁcantly larger than optimal, leading to a