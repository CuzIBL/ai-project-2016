                                 The Ins and Outs of Critiquing

                                David McSherry1     and David W. Aha2
                          1School of Computing and Information Engineering
                      University of Ulster, Coleraine BT52 1SA, Northern Ireland
                                      dmg.mcsherry@ulster.ac.uk
                      2Navy Center for Applied Research in Artificial Intelligence
                 Naval Research Laboratory, Code 5515, Washington DC 20375, USA
                                        david.aha@nrl.navy.mil

                    Abstract                          sume that critiquing a recommended product amounts to
                                                      rejection of the product by the user. We argue that this is not
    Eliminating previously recommended products in    a realistic assumption and show that preventing users from
    critiquing limits the choices available to users
                                                      navigating back to products they critiqued earlier in the dia-
    when they attempt to navigate back to products
                                                      logue may result in recommendation failure.
    they critiqued earlier in the dialogue (e.g., in search
                                                        As we show in Section 2, an equally serious problem if
    of cheaper alternatives). In the worst case, a user
                                                      previously recommended products are not eliminated is that
    mayfindthattheonly  product she is prepared to
                                                      products that satisfy the user’s requirements, if any, may be
    accept (e.g., having ruled out cheaper alternatives) unreachable by any sequence of critiques. The effectiveness
    has been eliminated. However, an equally serious
                                                      of existing critiquing algorithms may thus be open to ques-
    problem if previous recommendations are not
                                                      tion whetherornotpreviously recommended products are
    eliminated is that products that satisfy the user’s
                                                      eliminated. To address this issue, we present a new version
    requirements, if any, may be unreachable by any
                                                      of progressive critiquing [McSherry and Aha, 2006] that
   sequence of critiques. We present a new version of
                                                      leaves open the option of repeating a previous recommenda-
   progressive critiquing that leaves open the option tion while also addressing the unreachability problem.
   of repeating a previous recommendation while also
                                                        In Section 2, we use examples to illustrate the problems
   addressing the unreachability problem. Our em-
                                                      of diminishing choices and unreachability in critiquing on
   pirical results show that the approach is most effec-
                                                      which we focus in this paper. In Section 3, we describe how
   tive when users refrain from over-critiquing attrib-
                                                      these problems are addressed in progressive critiquing. In
   utes whose current values are acceptable.
                                                      Section 4, we evaluate our approach on a well known case
                                                      base and investigate the effects of user critiquing choices on
1  Introduction                                       dialogue outcomes and efficiency. Our conclusions are pre-
                                                      sented in Section 5.
Critiquing in recommender systems is based on the idea that
it is easier for users to critique an example product than to 2 Problems in Critiquing
construct formal queries [e.g., Burke et al., 1997; Hammond
et al., 1996; Linden et al., 1997]. An early example is En- The challenge of critiquing is to recommend an acceptable
trée, a restaurant recommender that supports both direc- product based on information about the user’s requirements
tional critiques (e.g., Like this but cheaper)andreplacement that is both incomplete and imprecise. In a recommender
critiques (e.g., Like this with French food)[Burkeet al., system for personal computers, for example, a critique such
1997]. In approaches that combine critiquing with case- as Like this with a bigger screen does not determine pre-
based reasoning (CBR), an initially recommended product cisely the preferred screen size or the minimum size that the
may be retrieved on the basis of its similarity to an initial user might be prepared to accept. Another problem is that
user query [Burke, 2002]. The product recommended in  improvements in one attribute can often be gained only at
response to a critique is typically one that satisfies the cri- the expense of another [Burke, 2002]. A related issue is the
tique and is maximally similar to the critiqued product. trade-off between preserving similarity to a critiqued prod-
  Concern that basic critiquing algorithms often lead to uct and recommending one that is sufficiently different in a
protracted recommendation dialogues has prompted signifi- single dimension to satisfy the user’s requirements [Bridge
cant research interest in increasing the efficiency of critiqu- and Ferguson, 2002; Burke, 2002; Salamó et al., 2005].
ing [e.g., McCarthy et al., 2005; McSherry and Aha, 2006; Avoiding long and fruitless dialogues when none of the
Reilly et al., 2005]. However, approaches in which previ- available products are acceptable to the user is another im-
ously recommended products are eliminated implicitly as- portant issue in critiquing [McSherry and Aha, 2006].


                                                IJCAI-07
                                                   962  In any recommender system, the user’s requirements may available option. It is equally natural for a recommender
include constraints that must be satisfied and others that the system user to critique an acceptable product (e.g., in search
user is prepared to relax if necessary. Below we describe of cheaper alternatives). But on attempting to retrace her
how the user’s critiques and constraints are modeled in our steps (e.g., because cheaper alternatives do not meet her
formal analysis of critiquing.                        requirements), such a user may find her choices very limited
                                                      if previously recommended products have been eliminated.
Definition 1. We denote by Matches(Q) the possibly empty
                                                         In the worst case, the user may discover that the only
set of cases that satisfy a given set of constraints Q.
                                                      product she is prepared to accept has been eliminated.
  It can be seen that:                                Table 1 shows an example case base in the residential prop-
                       =                              erty domain that we use to illustrate this problem of dimin-
            Matches(Q)   ∩   matches(q)               ishing choices in critiquing. The case attributes are location
                         ∈
                        q  Q                          (A or B), bedrooms (3 or 4), and property type (detached or
where for each q ∈ Q, matches(q)isthesetofcasesthat   semi-detached). The attributes are equally weighted and the
satisfy q.                                            similarity between two cases is the number of matching
  In a critiquing system, the user is not required to express features.
her requirements in a formal query. Instead, by critiquing
the system’s recommendations, the user provides feedback
that the system uses to guide the search for an acceptable              Loc Beds Type 
product.
Definition 2. We denote by matches(r, C) the set of cases
that satisfy a critique r when applied to a given case C.

Definition 3. We denote by critiques(C) the set of available Table 1. Example case base in the property domain.
critiques that are applicable to a given case C.
  A critique cannot be applied to a case that already satis-
                       ∉                                For a critiquing algorithm in which previously recom-
fies the critique. That is, C matches(r, C) for any case C mended cases are eliminated, Figure 1 shows an example
and r ∈ critiques(C). If previously recommended cases are
                                                      critiquing dialogue in which the user is looking for a 4 bed-
eliminated, a critiquing failure occurs if matches(r, C)-E =
∅                                                     room  detached property in location A but is prepared to
 ,whereE  is the set of eliminated cases. If previously rec- compromise on bedrooms. Her initial query is loc = A, and
ommended cases are not eliminated, a critiquing failure can
                         ∅                            the initially recommended case is Case 1. The user can see
occur only if matches(r, C)= . For example, a sequence of from the response to her first critique that no case satisfies
repeated Like this but cheaper critiques, if allowed by the all her requirements (A 4 det). But when she tries to navi-
system, must eventually result in a critiquing failure.
                                                      gate back to Case 1 by critiquing Case 2 on location, the
  The expressiveness of a query language is an important
                                                      case now recommended is Case 3, even though it is less
issue in the retrieval of recommended products based on similar to Case 2 than Case 1. In this situation, it is difficult
user queries [Bridge and Ferguson, 2002]. An equally im- to see how the elimination of Case 1 (i.e., the only accept-
portant issue in critiquing is whether the user’s constraints able case) can be justified.
are expressible using the available critiques.
Definition 4. We say that a constraint q is expressible us-
ing the available critiques if for any case C ∉ matches(q)
there exists r ∈ critiques(C) such that matches(q) ⊆      Case 1  more bedsCase 2      loc = A  Case 3
matches(r, C).                                           A 3 det             B 4det             A 3sem

  For example, Between3and5bedroomsis an expressible   Figure 1. Example critiquing dialogue in which the user is unable
constraint in a property recommender that supports more        to navigate back to the only acceptable case.
and less critiques on bedrooms. An upper price limit (e.g.,
price ≤ £400) is expressible in a holiday recommender with
a Like this but cheaper critique, while an equality constraint Thus eliminating previously recommended products is
such as month = May is expressible using a replacement bound to result in recommendation failure if the user cri-
critique on month.                                    tiques the only acceptable product (or products). Even in a
                                                      product case base of realistic size, it is not unusual for only
2.1 The Diminishing Choices Problem                   a small number of acceptable products to be available if the
It does not seem realistic to assume, as in critiquing algo- user has several requirements that must be satisfied
rithms that never repeat a previous recommendation, that [McSherry, 2003]. The diminishing choices problem is thus
critiquing a recommended product amounts to rejection of a potentially serious drawback of critiquing approaches in
the product by the user. Shoppers often consider alternatives which previous recommendations are eliminated.
to a recommended product before deciding that it is the best


                                                IJCAI-07
                                                   963  However, Theorem 1 shows that when previously rec-    •  The single case recommended in response to a suc-
ommended cases are eliminated, a case that satisfies a given cessful critique is one that is maximally similar
set of expressible constraints can always be reached, without among those that satisfy the critique (i.e., no account
critiquing failures, if such a case exists. In practice, whether is taken of any previous critiques or initial query)
such a case is reached without critiquing failures may of
course depend on the user’s critiquing choices. It is also • Previously recommended cases are not eliminated
possible in practice for a case that satisfies all the user’s For such a critiquing algorithm, Figure 2 shows the cases
constraints to be reached without any critiques (i.e., the ini- recommended in a sequence of four critiques. After three
tially recommended case may satisfy all her constraints). critiques, the user has made no progress towards her goal,
                                                      and her fourth critique brings her back to where she started.
Theorem 1.  Eliminating previously recommended cases in
critiquing ensures that a case that satisfies a given set Q of The user can do no better by critiquing Case 1 on beds or
                                                      RRs or by choosing different critiques on Cases 2-4. She
expressible constraints can always be reached without cri-
                                                      cannot reach Case 5 even by resorting to critiques that are
tiquing failures if such a case exists.
                                                      inconsistent with her requirements, as none of the negative
Proof. Let C* ∈ Matches(Q) be any case that satisfies all critiques she might choose (e.g., less beds than Case 3) are
the constraints in Q.IfC1 ∉ Matches(Q), where C1 is the satisfied by Case 5.
initially recommended case, then there exists q1 ∈ Q such
that C1 ∉ matches(q1). As all the constraints in Q are ex-
pressible using the available critiques, there exists r1 ∈ cri-
                             ⊆
tiques(C1) such that matches(q1) matches(r1, C1). As C1                  Loc Beds Type RRs 
∉ Matches(Q), C* ∈ Matches(Q)=Matches(Q)-{C1}    ⊆
matches(q1)-{C1} ⊆ matches(r1, C1)-{C1}.
  If C2 ∉ Matches(Q), where C2 is the case recommended
in response to r1,thenthereexistsq2 ∈ Q such that C2 ∉
matches(q2)andr2 ∈ critiques(C2) such that matches(q2) ⊆
matches(r2, C2). As C1, C2 ∉ Matches(Q), C* ∈ Matches(Q)
= Matches(Q)-{C1,   C2} ⊆  matches(q2)-{C1,  C2} ⊆
matches(r2, C2)-{C1, C2}. It follows that matches(r2, C2)-
        ≠ ∅                                            Table 2. Example case base in which an acceptable case may be
{C1, C2}    ,andsor2   is bound to succeed despite the             unreachable from any other case.
elimination of C1 and C2.
  If C3 ∉ Matches(Q), where C3 is the case recommended
in response to r2, we can continue as long as necessary to To confirm that Case 5 is unreachable with any of Cases
construct a sequence of recommended cases C1, C2, ..., Ck 1-4 as the initially recommended case, it suffices to observe
and successful critiques r1, r2,...,rk such that C1, C2, ..., Ck that Case 5 cannot be reached in a single step from any of
∉  Matches(Q). As previously recommended  cases are   the other cases. So the best the system can do with any of
eliminated, C1, C2, ..., Ck, Ck+1 are distinct cases, where Ck+1 Cases 1-4 as the initially recommended case is to recom-
is the case recommended in response to rk. As the supply of mend a case that satisfies only one of the user’s require-
distinct cases C ∉ Matches(Q) must eventually be ex-  ments.
hausted, it must eventually be true that Ck+1 ∈ Matches(Q).
■
                                                                   Case 1   type = det Case 2
2.2 The Unreachability Problem                                    A 3sem2             B3det 2
Table 2 shows a second example case base in the property
domain that we use to illustrate the unreachability problem
in critiquing. In the example dialogue that we now present,        loc = A            more beds
the initially recommended case is Case 1 (A 3 sem 2) and
the user is looking for a 4 bedroom detached property in
location A with 3 reception rooms (A 4 det 3). If all the          Case 4   more RRs   Case 3
user’s requirements must be satisfied, then Case 5 is the
                                                                  B3sem3              B 4 sem 2
only acceptable case. Attributes in the case base are equally
weighted and the similarity between two cases is the number
of matching features. We assume a basic critiquing algo- Figure 2. Example critiquing dialogue in which the only accept-
rithm in which:                                                      able case cannot be reached.
  •  The available critiques are more and less critiques for
     beds and reception rooms (RRs) and replacement cri-
     tiques for loc and type                            At the expense of susceptibility to the diminishing
                                                      choices problem (Section 2.1), eliminating previously rec-
  •
     Each critique is applied only to a single attribute ommended products in the example dialogue would result in


                                                IJCAI-07
                                                   964                                                                                ≤  ≤
Case 5 being recommended in response to the user’s fourth As Ci ∉ matches(ri, Ci)for1 ik, it follows that Ck+1 ∉
critique. Another problem highlighted by our example is {C1,...,Ck}. ■
that recommended cases in a critiquing dialogue may in-
                                                        By allowing previous recommendations to be repeated in
volve unnecessary compromises with respect to previous
critiques that may frustrate or even mislead the user, and the event of a progression failure, progressive critiquing
                                                      avoids the diminishing choices problem (Section 2.1).
delay progress towards her goal. Given the response to her
                                                      Moreover, as we now show, the reachability of cases that
second critique, for example, the user may begin to doubt
                                                      satisfy a given set of expressible constraints, if any, does not
the availability of a detached property with 4 bedrooms.
                                                      depend on the elimination of previously recommended cases
                                                      in progressive critiquing.
3   Progressive Critiquing
                                                      Theorem 3. A case that satisfies a given set Q of expressi-
Progressive critiquing differs from other critiquing algo- ble constraints can always be reached in progressive cri-
rithms in that a recommended product must, if possible,
                                                      tiquing without critiquing or progression failures if such a
satisfy all previous critiques as well as the current critique
                                                      case exists.
[McSherry and Aha, 2006]. This strategy plays an important
role in the algorithm’s ability to address the unreachability Proof. If C1 ∉ Matches(Q), where C1 is the initially recom-
problem when, as in the version we now present, previously mended case, then there exists q1 ∈ Q such that C1 ∉
recommended products are not eliminated.              matches(q1). As all the constraints in Q are expressible us-
                                                      ing the available critiques, there exists r1 ∈ critiques(C1)
3.1 Taking Account of Previous Critiques              such  that matches(q1) ⊆  matches(r1, C1). If C2 ∉
While improvements in one attribute can often be gained Matches(Q), where C2 is the case recommended in response
                                                                             ∈               ∉
only at the expense of another [Burke, 2002], we have seen to r1, then there exists q2 Q such that C2 matches(q2)
                                                             ∈                               ⊆
in Section 2 that recommended cases may involve unneces- and r2 critiques(C2)suchthatmatches(q2) matches(r2,
sary compromises with respect to previous critiques. In pro- C2). In progressive critiquing, the case C3 recommended in
gressive critiquing, the case recommended in response to the response to r2 must also satisfy r1 ifsuchacaseexists.But
                                                                 ⊆           ∩            ⊆
user’s current critique is required, if possible, to satisfy all Matches(Q) matches(q1) matches(q2) matches(r1, C1)
                                                      ∩
previous critiques as well as the current critique. That is, if matches(r2, C2), so the existence of at least one case that
r1,...,rk is a sequence of critiques applied to recommended satisfies all the constraints in Q ensures the existence of a
cases C1,...,Ck then the case Ck+1 recommended in response case that satisfies both critiques. As a progression failure
to rk is one that is maximally similar among the available has not occurred, C1, C2,andC3 must be distinct cases by
cases C, if any, such that:                           Theorem 2.
                                                        If C3 ∉ Matches(Q), we can continue as long as necessary
             C  ∈   ∩   matches(r , C ).
                                i  i                  to construct a sequence of recommended cases C1, C2,...,Ck
                   ≤  ≤
                  1  i k                              and successful critiques r1, r2, ..., rk such that C1, C2,...,Ck
  The non-existence of a case that satisfies all the user’s ∉ Matches(Q) and:
critiques is recognized as a progression failure. In the event
                                                                    C  ∈   ∩  matches(r ,C )
of such a failure, the recommended case is one that is               k+1               i i
                                                                         1 ≤ i ≤ k
maximally similar among those that satisfy the user’s cur-
                                                      where C   is the case recommended in response to r .Again
rent critique. Such a case must exist as the user may select a k+1                                k
                                                      by Theorem 2, C , C , ..., C must be distinct cases. As the
critique in progressive critiquing only if it is satisfied by at    1  2     k+1
                                                      supply of distinct cases C ∉ Matches(Q) must eventually be
least one case.
                                                      exhausted, it must eventually be  true that C    ∈
  As previous recommendations are not eliminated in pro-                                           k+1
                                                      Matches(Q). ■
gressive critiquing, the case recommended in this situation
may be one that was previously critiqued by the user. As we 3.2 Recovery from Progression Failures
show in Theorem 2, however, a previous recommendation
can be repeated in progressive critiquing only when there is A mechanism for recovery from progression failures is
no case that satisfies all the user’s critiques.      needed to ensure that progress can again be made if the user
                                                      is prepared to compromise. Our solution is to maintain a list
Theorem  2. A previous recommendation can be repeated of active critiques that a recommended case must, if possi-
in progressive critiquing only when a progression failure ble, satisfy as well as the user’s current critique. If no such
has occurred.                                         case exists, a maximally similar case among those that sat-
Proof. Let C be the initially recommended case and let r , isfy the current critique is recommended, and any active
           1                                     1    critiques that are not satisfied by this case are deleted from
..., rk be any sequence of critiques that has not resulted in a
progression failure. For 1 ≤ ik≤ ,letC bethecaserec-  the list of active critiques.
                                  i+1                   Figure 3 shows an example critiquing dialogue in the
ommended in response to  ri. As a progression failure
has not occurred,                                     personal computer (PC) domain that we use to illustrate our
                                                      approach. Values of the critiqued attributes PC type, screen
                ∈
            Ck+1     ∩  matches(ri , Ci ).            size (in inches), and price (in UK pounds) are shown for
                  1 ≤ i ≤ k                           each recommended case. A progression failure has occurred


                                                IJCAI-07
                                                   965as the case recommended in response to the user’s third cri- 4 Empirical Results
tique satisfies only two of her three critiques.
                                                      Our evaluation focuses on the effects of user critiquing be-
                                                      havior on dialogue outcomes and efficiency when previ-
       Case 1       type = laptop    Case 2           ously recommended cases are not eliminated in progressive
    desktop 17 450                laptop 14 560       critiquing. We expect the best results to be achieved when
                                                      the user refrains from over-critiquing attributes whose cur-
                                                      rent values are acceptable. For example, a Like this but
                                     cheaper          cheaper critique on a product whose price is acceptable may
                                                      cause an unnecessary progression failure that hinders pro-
                                                      gress towards the user’s goal. Over-critiquing may also re-
       Case 4        bigger screen    Case 3          sult in a critiquing loop in which the user keeps coming
                                                      back to an unacceptable case she has already critiqued. This
    laptop 15 610                  laptop 14 540      is an important issue, as a critiquing loop may result in rec-
                                                      ommendation failure if the user decides to terminate the
     Figure 3. Example dialogue in progressive critiquing. dialogue.
                                                        Performance measures of interest in our evaluation are
  If the user now critiques Case 4, her critiques on Case 1 the average length of critiquing dialogues and the percent-
and Case 3, but not on Case 2, remain in force. For example, age of dialogues in which a target case is reached. Our ex-
a PC recommended in response to a faster critique on Case periments are based on a leave-one-in approach in which
4mustalsobealaptopwithscreen   >14ifsuchacaseex-      each case in the PC case base [McGinty and Smyth, 2002] is
ists. If not prepared to compromise on price, the user may used to represent the user’s requirements in a simulated cri-
instead choose to navigate back in the direction of less ex- tiquing dialogue. The value of a LIB attribute in a left-in
pensive options by critiquing Case 4 on price. Such a cri- case is treated as an upper limit (e.g., price ≤ 700), and the
tique may bring her directly back to Case 2 or Case 3, but value of a MIB attribute as a lower limit (e.g., speed ≥ 2.2).
only if there is no laptop cheaper than Case 4 with screen > The values of other attributes (e.g., make, type, screen size)
14.                                                   are treated as equality constraints. The left-in case also
                                                      serves as a target case in the critiquing dialogue. If other
3.3 Related Work                                      cases also satisfy all the user’s constraints, as in 14% of
Taking account of previous critiques is a feature that pro- dialogues, there may be more than one target case.
gressive critiquing shares with incremental critiquing  The case that is least similar to the left-in case is pre-
[Reilly et al., 2005]. In the latter approach, a case’s similar- sented as the initially recommended case in a simulated cri-
ity to the critiqued case is combined with the number of tiquing dialogue that continues until a target case has been
previous critiques it satisfies in a single compatibility meas- reached or the user has tried all possible critiques on a rec-
ure. However, a highly similar case may dominate other ommended case without reaching a target case. The avail-
cases that satisfy more critiques, with the result that the case able critiques are less critiques on LIB attributes, more cri-
recommended in response to a critique may not satisfy all tiques on MIB attributes, more and less critiques on screen
the user’s critiques even if such a case exists. Also in con- size and replacement critiques on nominal attributes.
trast to progressive critiquing, previously recommended We experiment with simulated users in two categories:
cases are eliminated in incremental critiquing. This feature
                                                      Class 1: Choose only critiques on attributes that fail to sat-
also distinguishes incremental critiquing from the ap-
                                                      isfy their constraints
proaches used in FindMe systems like Entrée and Car
Navigator [Burke et al., 1997; Hammond et al., 1996]. Class 2: Choose only critiques on attributes that fail to sat-
  Assessment of similarity with respect to less-is-better isfy their constraints or LIB/MIB attributes that already sat-
(LIB) attributes and more-is-better (MIB) attributes in pro- isfy their constraints
gressive critiquing is based on assumed preferences with
                                                        Table 3 shows the percentages of critiquing dialogues that
respect to such attributes [McSherry and Aha, 2006]. That
                                                      were successful (i.e., a target case was reached) in Classes 1
is, the preferred value of a LIB attribute (e.g., price)isas-
                                                      and 2. The fact that all Class 1 dialogues were successful
sumed to be the lowest value in the product case base, while
                                                      provides empirical confirmation that a case that satisfies a
the preferred value of a MIB attribute is assumed to be the
highest available value. One advantage is that no updating given set of expressible constraints can always be reached in
                                                      progressive critiquing if one exists (Theorem 3). In Class 2,
of user preferences is needed in response to critiques on
                                                      however, over-critiquing resulted in 13% of dialogues being
MIB or LIB attributes. Instead, only the user’s constraints
                                                      terminated by the simulated user without reaching a target
are updated, thus avoiding problems such as how to adjust a
                                                      case.
preferred price in response to a Like this but cheaper cri-
                                                        For all Class 1 dialogues and successful (+ve) Class 2
tique [Bridge and Ferguson, 2002].
                                                      dialogues, Figure 4 shows the minimum, average, and
                                                      maximum  numbers of critiques required to reach a target
                                                      case. Lengths of unsuccessful (-ve) dialogues in Class 2 are


                                                IJCAI-07
                                                   966