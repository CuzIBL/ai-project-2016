            Recycling Computed Answers in Rewrite Systems for Abduction 

                       Fangzhen Lin*                                 Jia-Huai You 
                  http://www.cs.ust. flin                   http://www.cs.ualberta. you 
              Department of Computer Science               Department of Computer Science 
      Hong Kong University of Science and Technolog              University of Alberta 
          Clear Water Bay, Kowloon, Hong Kong                 Edmonton, Alberta, Canada 

                     Abstract                          in [Lin and You, 2001]. The main result is a theorem (Theo•
                                                       rem 4.6) that says recycling preserves the soundness and com•
    In rule-based systems, goal-oriented computations  pleteness. 
    correspond naturally to the possible ways that an 
                                                         The class of rewrite procedures proposed in [Lin and You, 
    observation may be explained. In some applica•
                                                       2001] is based on the idea of abduction as confluent and 
    tions, we need to compute explanations for a series 
                                                       terminating rewriting. These systems are called canonical 
    of observations with the same domain. The ques•
                                                       systems in the literature of rewrite systems [Dershowitz and 
    tion whether previously computed answers can be 
                                                       Jouannaud, 1990]. The confluence and termination properties 
    recycled arises. A yes answer could result in sub•
                                                       guarantee that rewriting terminates at a unique normal form 
    stantial savings of repeated computations. For sys•
                                                       independent of the order of rewriting. Thus, each particular 
    tems based on classic logic, the answer is yes. For 
                                                       strategy of rewriting yields a rewrite procedure. 
    nonmonotonic systems however, one tends to be•
    lieve that the answer should be no, since recycling  The general idea of recycling is not new. Recycling in 
    is a form of adding information. In this paper, we systems based on classic logic is always possible, since 
    show that computed answers can always be recy•     inferences in these systems can be viewed as transform•
    cled, in a nontrivial way, for the class of rewrite ing a logic theory to a logically equivalent one. In dy•
    procedures proposed earlier in [Lin and You, 2001] namic programming, it is the use of the answers for pre•
    for logic programs with negation. We present some  viously computed subgoals that reduces the computational 
    experimental results on an encoding of a logistics complexity. In some game playing programs, for ex•
    domain.                                            ample in the world champion checker program Shinook 
                                                       (www.cs.ualberta.ca/~chinook), the endgame database stores 
                                                       the computed results for endgame situations which can be ref•
1 Introduction                                         erenced in real-time efficiently. 
                                                         However, the problem of recycling in a nonmonotonic 
Logic programming with answer sets [Gelfond and Lifschitz, proof system has rarely been investigated. We note that recy•
1988] or partial stable models [Przymusinski, 1990] has been cling is to use previous proofs. This differs from adding con•
adopted as a framework for abduction, and a number of  sequences. For example, it is known that the semantics based 
formalisms and top-down query answering procedures have on answer sets or (maximal) partial stable models do not pos•
been proposed [Dung, 1991; Eshghi and Kowalski, 1989;  sess the cautious nonmonotonicity property. That is, adding a 
Kakas and Mancarella, 1990; Kakas et al, 2000; Lin and You, consequence of a program could gain additional models thus 
2001; Satoh and Iwayama, 1992].                        losing some consequences. The following example is due to 
  The question we shall address in this paper is the following. Dix 11991]: 
With a sound and complete procedure for abduction, suppose 
we have computed explanations (conveniently represented as 
                                                                                                       (1) 
a disjunction) Es = E1 V... V En for observation q. Suppose 
also that in the course of computing explanations for another 
observation p, we run into q again. Now, we may use the P has only one answer set, Thus, c is a consequence. 
proofs Es for q without actually proving q again. The ques• When augmented with the rule the program gains a sec•
tion is this: will the use of the proofs Es for q in the proof for ond answer set, and losesas a consequence. 
p preserve the soundness and completeness of the procedure? The next section defines logic program semantics. Sec•
  In this paper, we answer this question positively, but in a tion 3 reviews the rewriting framework. Then in Section 4 
nontrivial way, for the class of rewrite procedures proposed we formulate rewrite systems with computed rules and prove 
                                                       that recycling preserves soundness and completeness. Sec•
   *This author's work was supported in part by HK RGC CERG tion 5 extends this result to rewrite systems with abduction, 
HKUST6205/02E.                                         and Section 6 reports some experimental results. 


NONMONOTONIC REASONING                                                                                 879 2 Logic Program Semantics                              formula resulted from rewriting Two central mecha•
A rule is of the form                                  nisms in formalizing goal rewrite systems are rewrite chains 
                                                       and contexts. 
                                                         • Rewrite Chain: Suppose a literal is written by its defi•
where and are atoms of the underlying propositional        nition whereThen, each literal 
language not c1 are called default negations. A literal is   in the derived goal is generated in order to prove 
an atom or its negation A (normal) program is a fi•        This ancestor-descendant relation is denoted A 
nite set of rules. The completion of a program P, denoted  sequence is then called a rewrite chain, 
Comp(P), is a set of equivalences: for each atom if        abbreviated as 
  does not appear as the head of any rule in P, 
Cornp(P); otherwise, Comp(P) (with                       • Context: A rewrite chain 
default negations replaced by the corresponding negative lit• records a set of literals for proving 
erals) if there are exactly rules P with as the            g. We will write and call C a context. 
head. We write T for Bi if Bi is empty.                    A context will also be used to maintain consistency: if 
                                                             can be proved via a conjunction, all of the conjuncts 
  The rewriting system of [Lin and You, 2001] is sound 
                                                           need be proved with contexts that are non-conflicting 
and complete w.r.t. the partial stable model semantics [Przy-
                                                           with each other. For simplicity, we assume that when•
musinski, 1990]. A simple way to define partial stable models 
                                                           ever is generated, it is automatically replaced by 
without even introducing 3-valued logic is by the so called al•
                                                           T(C), where C is the set of literals on the corresponding 
ternating fixpoints [You and Yuan, 1995]. Let P be a program 
                                                           rewrite chain, and is automatically replaced by 
and S a set of default negations. Define a function over sets S 
of default negations: The re•                            Note that for any literal in a derived goal, the rewrite chain 
lation is the standard propositional derivation relation with leading to it from a literal in the given goal is uniquely deter•
each default negation not being treated as a named atom mined. As an example, suppose the completion of a program 
not                                                    has the definitions: and Then, we 
  A partial stable model M is defined by a fixpoint of the get a rewrite sequence, ' For the 
function that applies Fp twice, while satisfying       three literals in the last goal, we have rewrite chains from 
            in the following way: for any atom 
                                   and is undefined 
otherwise. An answer set E is defined by a fixpoint S such Simplification Rules: Let $ and <t>; be goal formulas, C be 
that                                                   a context, and / a literal. 
3 Goal Rewrite Systems 
We introduce goal rewrite systems as formulated in [Lin and 
You, 2001]. 
  A goal rewrite system is a rewrite system that consists 
of three types of rewrite rules: (1) Program rules from 
Comp(P) for literal rewriting; (2) Simplification rules to 
transform and simplify goals; and (3) Loop rules for handling 
loops.                                                   SR3 merges two contexts if they contain no complemen•
  A program rule is a completed definition             tary literals, otherwise SR4 makes it a failure to prove. Re•
     Cornp(P) used from left to right: can be rewritten to peated applications of SR5 and SR5' can transform any goal 
             and These are called                      formula to a disjunctive normal form (DNF). 
literal rewriting. 
  A goal, also called a goal formula, is a formula which may 3.2 Loop rules 
involve V and A goal resulted from a literal rewriting After a literal / is rewritten, it is possible that at some later 
from another goal is called a derived goal. Like a formula, a stage either / or / appears again in a goal on the same rewrite 
goal may be transformed to another goal without changing its chain. Two rewrite rules are formulated to handle loops. 
semantics. This is carried out by simplification rules. 
  We assume that in all goals negation appears only in front 
of a literal. This can be achieved by simple transformations 
using the following rules: for any formulas and , 

                                                             - S is called a positive loop and are both 
3.1 Simplification rules                                       atoms and each literal on is also an atom; 
The simplification rules constitute a nondeterministic trans• - S is called a negative loop and are both 
formation system formulated with a mechanism of loop han•      negative literals and each literal on is 
dling in mind, which requires keeping track of literal se•     also negative: 
quences where each is in the goal                            - Otherwise, S is called an even loop. 


880                                                                           NONMONOTONIC REASONING  In all the cases above, is called loop literal. 

 Loop Rules: be a rewrite chain. 
LR1. 
                                   is a positive loop or 
     an odd loop. 
LR2. 
                                   is a negative loop or 
     an even loop. 
   A rewrite sequence is a sequence of zero or more rewrite 
 steps denoted such that                                     Figure 1: Recycling may generate extra proofs 
 is an initial goal, and for each 0 is obtained 
 from by                                               result. However, one can see that the existence of the rewrite 
   • literal rewriting at a non-loop literal in or     step implies the existence of a different way to prove 
   • applying a simplification rule to a subformula of , or 
   • applying a loop rule to a loop literal in 
                                                       contradicting that was rewritten to F in R°. 
 Example 3.2 For the program given in the Introduction,  Before giving the next example, we introduce a different 
                                       is proved but   way to understand rewrite sequences. Since any goal formula 
 is not. This is shown by the following rewrite sequences: can always be transformed to a DNF using the distributive 
                                                       rules SR5 and SR5,' and the order of rewriting does not mat•
                                                       ter, we can view rewriting as generating a sequence of DNFs. 
                                                       Thus, a rewrite sequence in DNF from an initial goal 

                                                       can be conveniently represented by derivation trees, or 
                                                       trees, one for each representing one possible way of prov•
 3.3 Previous results                                  ing For any the d-tree for has as its root node, 
 In [Lin and You, 2001], it is shown that (1) a goal rewrite sys• wherein a branch from to a leaf node corresponds to a 
 tem is a canonical system, i.e., it confluent and terminating; rewrite chain from g that eventually ends with an F or some 
 (2) any goal rewrite system is sound and complete w.r.t. the T(C). As such a disjunct is a conjunction, a successful proof 
 partial stable model semantics; and (3) the rewriting frame• requires each branch to succeed and the union of all resulting 
 work can be extended for abduction in a relatively straight• contexts to be consistent. 
 forward manner.                                         The next example is carefully constructed to illustrate that 
                                                       recycling may not yield the same answers as if no recycling 
 4 Goal Rewrite Systems with Computed Rules            were carried out. In particular, one can sometimes get addi•
                                                       tional answers. 
 We first use two examples to illustrate the main technical re•
 sults of this section.                                Example 4.2 Consider the program: 
 Example 4.1 Given a rewrite system suppose we have 
 rewrite sequence The failure is due to 
 positive loop on a. We may recycle the computed answer by 
 replacing the rewrite rule for by the new rule, 
 We thus get a new system, say R1. Suppose in trying to prove In Fig. I, each d-tree consists of a single branch. The left 
  we have                                              two d-trees are expanded from goal p corresponding to the 
                                                       following rewrite sequence: 
 where the last step makes use of the computed answer for 
     The question arises as whether this way of using previ•
 ously computed results guarantees the soundness and com•
 pleteness. Theorem 4.6 to be proved later in this paper an• The next two d-trees are for goal g, corresponding to the 
 swers this question positively. To see it for this example, as• rewrite sequence: 
 sume we have the following, successful proof in R° 

 where the termination is due the even loop on Had such Now, we recycle the proof for p in the proof for g and com•
  sequence existed, recycling would have produced a wrong pare it with the one without recycling. Clearly, the successful 


 NONMONOTONIC REASONING                                                                                881 d-tree for (the fourth from the left) will still succeed as it 
doesn 't involve any p. The focus is then on the d-tree in the 
middle, in particular, the node p in it; this d-tree fails when 
no recycling was performed. 
  Since p is previously proved with context recy•
cling of this proof amounts to terminating with a context 
which is the union of this context with the rewrite chain lead•
ing to p (see the d-tree on the right). But this results in 
successful proof that fails without recycling. 
  Though recycling appears to have generated a wrong re•
sult, one can verify that both generated contexts, 
and belong to the same partial stable model. 
Thus, recycling in this example didn 7 lead to an incorrect 
answer but generated redundant one. Theorem 4.6 shows 
that this is not incidental. Indeed, if p is true in a partial sta•
ble model, by derivation (look at the d-tree in the middle), so 
must be c, and 
                                                         An important property of provability by rewriting is the 
4.1 Rewrite systems with computed rules               so-called loop rotation, which is needed in order to prove 
Given a goal rewrite system R,, we may denote a rewrite se• the completeness of recycling; namely, a proof (a successful 
quence from a literal g by E.                         branch in a d-tree) terminated by a loop rule can be captured 
Definition 4.3 (Computed rule)                        in rotated forms. 
Let R be a goal rewrite system in which literal p is rewritten To describe this property, we need the following notation 
to its normal form. The computed rule for p is defined as: If about rewrite chains: Any direct dependency relation 
      F, the computed rule for p is the rewrite rule F; may be denoted by and we allow a segment (which may 
ifp then the computed rule for p is                   be empty) of a rewrite chain to be denoted by a Greek letter 
the rewrite rule p                                    such as and Thus, we may write to denote 
                                                      a rewrite chain from to via to mean a rewrite 
  For the purpose of recycling, a computed rule E is  chain that begins with followed by the segment denoted by 
meant to replace the existing literal rewrite rule for p. If a A rewrite chain may also be used to denote the set of the 
computed rule is of the form F representing a failed  literals on it. 
derivation, it can be used directly as the literal rewrite rule for 
   Otherwise, we must combine the contexts in E with the Lemma 4.5 (loop rotation) 
rewrite chain leading to and keep only consistent ones. Let be a rewrite system without computed rules. Let 
                                                      be a d-tree for literal g that succeeds with context C. Suppose 
Recycling Rule:                                       a branch of ends with Then, 
Let g1 be a rewrite chain where gTl is a non-loop lit• for any literal there is a proof of I that succeeds with 
eral. Let G — , and                                   the same context C. 
be the computed rule for Further, let be the          Proof A loop, where g and are 
subset of containing any such that G literals, can always be rotated as 
is consistent. Then, the recycling rule for gn is defined as: 
RC. 
  In the sequel, a rewrite system includes the recycling rule and so on, so that if n is a negative loop (or an even loop, 
as well as zero or more computed rules. We note that the resp.) so is its rotated loop. Rotation over a d-tree can be 
termination and confluence properties remain to hold for the performed as follows: remove the top node n, and for any link 
extended systems.                                     from the top node, attach the linkto any occurrence 
  We are interested in the soundness and completeness of a of The assumption of the existence of loop ensures 
series of rewrite systems, each of which recycles computed that in every round of rotation there is at least one occurrence 
answers generated on the previous one. For this purpose, of the top node. (See Fig 2 for an illustration where rotation 
given a program P we use to denote the original goal  proceeds from left to right.) It can be seen that the type of 
rewrite system where literal rewrite rules are defined by the a loop is always preserved and the set of literals on the tree 
Clark completion of P. For all is defined in          remains unchanged. 
terms of as follows: Let be the set of computed rules 4.2 Soundness and completeness of recycling 
(generated) on for the set of literals Then, is 
                                                      Theorem 4.6 For any is sound and complete. 
the rewrite system obtained from RlP by replacing the rewrite 
rules for the literals in by those in In the rest of this We sketch how this can be proved. We can prove the claim 
sectin, we will always refer to a fixed program P. Thus we by induction on the system without computed rules, is 
may drop the subscript P and write                    sound and complete [Lin and You, 20011. Now assume for all 


882                                                                          NONMONOTONIC REASONING  with are sound and complete, and show that           goal is rewritten to a disjunction of conjunctions of abducible 
     is also sound and complete.                      literals and 
  We only need to consider the situations where rewriting 
in differs from that ofbe the set of literals 
whose computed rules are generated on . We can first carry 
out rewriting without rewriting the literals that are in In where each is either or an abducible literal, and 
this case, rewriting from in both and terminate at             is consistent for each z, then this result can be re•
the same expression, which is either or a DNF, say    cycled. 
        Each can be represented by a d-tree. 
  For the soundness, we assume                        6 Experiments 
T(DS). For any D we need to show that 
there is a partial stable model M such that D M. Consider We have implemented a depth-first search rewrite procedure 
the d-tree that generates D and suppose g is its root node. with branch and bound. The procedure can be used to com•
We can show inductively in a bottom-up fashion that all the pute explanations using a nonground program, under the con•
literals on belong to the same partial stable model.  dition that in each rule a variable that appears in the body 
  For the completeness, we can show that for any context must also appear in the head. When this condition is not sat•
generated in . the same context will be generated in  isfied, one only needs to instantiate those variables that only 
Then, is complete simply because is complete.         appear in the body of a rule. This is a significant departure 
  Let;; and consider a proof of in that goes          from the approaches that are based on ground computation 
through p. In particular, consider a d-tree of this proof that where a function-free program is first instantiated to a ground 
contains p. Since each branch of this d-tree can be expanded program with which the intended models are then computed. 
and eventually terminated independent of others, for simplic• To check the effectiveness of the idea of recycling, we 
ity, we consider how a branch g • p in the d-tree is extended. tested our system on the logistics problem in iLin and You, 
In the computed rule for p is used while in R  it is not. 2001 ]. This is a domain in which there is a truck and a pack•
                                           l          age. A package can be in or outside a truck, and a truck can 
We only need to consider two cases in Rl: either g is proved 
via p and a previously computed rule, or the branch is termi• be moved from one location to another. The problem is that 
nated due to a loop. Here, let us consider the latter only In given state constraints such as that the truck and the pack•
expanding the rewrite chain • • p in R\ we may form a age can each be at only one location at any given time, and 
loop, say g - p- If the loop is in exactly the same loop that if the package is in the truck, then when the truck moves 
occurs in rewriting p as the top goal in R , so it is part of the to a new location, so does the package, how we can derive a 
                                  1                   complete specification of the effects of the action of moving a 
computed rule for /;. Otherwise it is a loop that crosses over 
                                                      truck from one location to another. Suppose that we have the 
p, in the general form 
                                                      following propositions: ta - the truck (package) is 
                                                      at location x initially; in - the package is in the truck initially; 
                                                      ta the truck (package) is at location 
where is the loop literal. As a special case of loop rotation after performing the action of moving it from to 
over a branch (cf. Lemma 4.1), the same way of terminating the package is in the truck after performing the action of mov•
a rewrite chain presents itself in proving /; as the top goal in ing the truck from to Then in [Lin and You, 20011, the 
R\ which is                                           problem is solved by computing the abduction of successor 
                                                      state propositions in terms 
                                                      of initial state propositions (abducibles) us•
If the loop on n is a negative loop (or an even loop, resp.), so ing the following logic program (see ILin and You, 20011 for 
is Thus the same context will be generated in         more details): 
  As given in the corollary below, if we only recycle failed 
proofs then exactly the same contexts will be generated. 

Corollary 4.7 Let R1 be rewrite system where each com•
puted rule is of the form Let g be a literal and E be 
normal form. Then, for any \ 

5 Recycling in Abductive Rewrite Systems 
As shown in [Lin and You, 20011, the rewriting framework 
can be extended to abduction in a straightforward way: the 
only difference in the extended framework is that we do not Here the variables are to be instantiated over a domain of 
apply the Clark completion to abducibles. That is, once an locations. For instance, given query pa(3,2,3), our system 
abducible appears in a goal, it will remain there unless it is would compute its abduction as pa(3) V in, meaning that for 
eliminated by the simplification rule SR2 or SR2'. In a sim• it to be true, either the package was initially at 3 or it was 
ilar way, the goal rewrite systems with computed rules in the inside the truck. 
previous section can be extended to abduction as well. Once a Which subgoals to compute first? If we want to compute 


NONMONOTONIC REASONING                                                                                883 