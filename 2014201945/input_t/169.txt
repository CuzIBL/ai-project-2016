                  Backbone Guided Local Search for Maximum Satisfiability* 

                             Weixiong Zhang, Ananda Rangan and Moshe Looks 
                                Department of Computer Science and Engineering 
                                         Washington University in St. Louis 
                                             St. Louis, MO 63130, USA 
                                            Email: zhang@cse.wustl.edu 


                        Abstract                               of clauses to the number of variables (C/V ratio) increases be•
                                                               yond a critical value, around 4.3, random 3-SATs begin to be•
     Maximum satisfiability (Max-SAT) is more general          come unsatisfiablc, and the computational cost of the problem 
     and more difficult to solve than satisfiability (SAT).    increases abruptly [2; 12; 13]. The backbone of a problem is a 
     In this paper, we first investigate the effectiveness of  set of variables that have fixed values in all optimal solutions 
     Walksat, one of the best local search algorithms de•      to the problem. The hardness of a SAT or Max-SAT is deter•
     signed for SAT, on Max-SAT. We show that Walksat          mined by the backbone size of the problem [13]. In addition, 
     is also effective on Max-SAT, while its effectiveness     the backbones of random SAT and Max-SAT also have small 
     degrades as the problem is more constrained. We           to large phase transitions [19]. The second direction is focused 
     then develop a novel method that exploits the back•       on developing efficient SAT solvers. The most noticeable re•
     bone information in the local minima from Walk-           sults along this line are the Walksat local search algorithm [16] 
     sat and applies the backbone information in differ•       and its variants [11], which are among the best SAT solvers 
     ent ways to improve the performance of the Walk-          used in practice for problems such as planning. 
     sat algorithm. We call our new algorithm backbone 
                                                                 A problem of fundamental interest and practical importance 
     guided Walksat (BGWalksat). On large random SAT 
                                                               in algorithm design is how to utilize problem structure proper•
     and Max-SAT problems as well as instances from the 
                                                               ties such as phase transitions and backbones to cope with high 
     SATLIB, BGWalksat significantly improves Walk-
                                                               complexity and improve algorithm performance. The current 
     sat's performance. 
                                                               research on this problem is limited. [15] developed a trans•
                                                               formation method to exploit phase transitions of tree search. 
1 Introduction                                                 [5] designed a method to incorporate estimated backbone vari•
Satisfiability or SAT is an archetypical combinatorial problem. ables in a systematic search for SAT. [18] proposed a heuristic 
A SAT involves a set of Boolean variables and a set of clauses backbone sampling method for generating initial assignments 
in the form of a disjunction of literals (variables or their nega• for a local search using an estimated backbone. This sampling 
tions). A clause is satisfied if one of its literals is set to true, scheme will also be studied in this research. 
and the problem is satisfied if all clauses are satisfied. The   In this paper, we develop a novel method to exploit the struc•
problem is to decide if a variable assignment exists that sat• ture of local minima reached by an effective local search algo•
isfies all the clauses. When not all clauses are satisfiable, the rithm, and an effective approach to utilize the structure infor•
goal is to maximize the satisfied clauses, and the problem be• mation to improve the performance of a local search algorithm. 
comes maximum SAT or Max-SAT, an optimization problem. A       We focus on Max-SAT in this research. 
SAT (Max-SAT) with k literals per clause is denoted as k-SAT     To develop our new method, we first study the performance 
(Max-k-SAT). It is known that k-SAT with k greater than two is of Walksat, which was designed for SAT, on Max-SAT (Sec•
NP-complete and Max-k-SAT with k being at least two is NP-     tion 3). We show that Walksat is effective on random Max-
hard [7]. Max-SAT is more general and difficult to solve than  SAT, finding many high quality local minima close to optimal. 
SAT. Many real-world problems, such as scheduling, pattern     In addition, the local minima reached by Walksat appear to 
recognition, and multi-agent cooperation and coordination [3;  form large clusters around optimal solutions. Our results also 
6], can be formulated and solved as SAT or Max-SAT.            show that the performance of Walksat degrades when the con-
  Recent years have witnessed significant progress made on     strainedness of Max-SAT increases. Although we carry out 
SAT and Max-SAT along two directions. The first is the un•     this analysis for the purpose of developing a new method, the 
derstanding of properties such as phase transitions and back•  result is of interest and significance on its own. To our knowl•
bones [2; 12; 13; 17; 19]. Phase transitions refer to dramatic edge, Walksat has only been analyzed on some overconstrained 
changes in a problem property when a critical parameter of     Steiner tree problems [10]. 
a problem changes. The most important phase transition re•       The main contribution of this paper is an innovative method 
sults on random 3-SAT are that when the ratio of the number    that exploits the solution structure of a combinatorial problem 
   *This research was supported in part by NSF grants IIS-0196057 to improve the performance of a local search algorithm such 
and ITR/EIA-0113618, and in part by DARPA Cooperative Agree•   as Walksat (Section 4). It was inspired by the recent research 
ments F30602-00-2-0531 and F33615-01-C-1897.                   on phase transitions and backbones of SAT and Max-SAT [13; 
 SATISFIABILITY                                                                                                     1179  19] and the performance results of Walksat in the first part 
 of the paper. We directly apply the new method to Walksat. 
 Nevertheless, the ideas and techniques developed here are gen•
 eral and applicable to other combinatorial problems and local 
 search algorithms. 
   Briefly, our main ideas are to use backbone information to 
make biased moves in a local search, and use local minima 
to approximate optimal solutions for extracting backbone in•
 formation. The frequencies of literals appearing in all local 
minima are called pseudo-backbone frequencies. Our new ap•
proach applies pseudo-backbone frequencies as a heuristic for 
selecting a variable to flip in each step of the Walksat algo•
rithm. Such biased moves guide the search toward regions 
possibly having optimal solutions. The effectiveness of this 
method is partially due to the effectiveness of Walksat on find•
ing optimal and high quality approximate solutions. We call 
the resulting algorithm backbone guided Walksat or BGWalk-
sat. We demonstrate and evaluate experimentally the effective• two Max-SAT instances of different sizes comparable, we nor•
ness of BGWalksat on large random Max-SAT instances and 
                                                               malize them. For a given problem, we divide the Hamming 
real problems from SATLIB [9] (Section 5). 
                                                               distance by the number of variables, resulting in the Hamming 
2 The Walksat Algorithm                                        distance per variable, and divide the cost difference by the 
                                                               number of clauses, giving the cost difference per clause. We 
Walksat is a randomized algorithm, it starts by creating an 
                                                               then use these two normalized quality measures to construct 
initial random variable assignment (which we call assignment 
                                                               the landscape of local minima reached by Walksat. 
generation). It then repeatedly makes a move by selecting a 
                                                                 To find the nearest optimal assignment, all optimal solu•
variable and flipping its value from True' to False or vice versa, 
                                                               tions are required, which are found by an extended DPLL al•
until it finds a satisfying assignment or reaches a predefined 
                                                               gorithm [4] for SAT. Since finding all optimal solutions is ex-
maximal number of flips. Each such attempt is called a try or 
                                                               pensive, we restricted ourselves to relatively small Max-SAT 
restart. The procedure repeats until a maximal number of tries 
                                                               problems. In our experiments, we used problems of 100 vari-
has been executed. 
                                                               ables and C/V ratios of 2.0, 4.3, 6.0 and 8.0 to capture prob•
   To select a variable, the effect of flipping a variable is as•
                                                               lems in different constrainedness regions. The problems were 
sessed. Flipping a variable may make some unsatisfied clauses 
                                                               randomly generated by uniformly picking three literals with•
satisfied. The number of clauses being made unsatisfied by 
                                                               out replacement for a clause, discarding duplicate clauses. For 
flipping a variable is call the break-count of the variable at the 
                                                               Walksat, we set the noise ratio at 0.5, the number of tries per 
current assignment. Walksat attempts to flip a variable with 
                                                               problem at 100, and the cutoff parameter at 10,000. We gener•
zero break-count, trying not to make the next assignment worse 
                                                               ated 1,000 problems at each C/V ratio. 
than the current. To find a variable with zero break-count, 
                                                                 The quality of local minima from Walksat are summarized 
Walksat first selects an unsatisfied clause C, randomly, from all 
                                                               in Figure 2. The X-Y planes show the correlation between the 
unsatisfied clauses. This is called clause pick. If C has a vari•
                                                               normalized Hamming distance and the normalized cost differ•
able of zero break-count, Walksat then picks such a variable, 
                                                               ence. The origins of the figures correspond to global minima. 
randomly, from the ones that qualify. If no zero break-count 
                                                               Each point on the X-Y plane represents a possible local mini•
variable exists in C, Walksat then makes a random choice. 
                                                               mum that may be visited by Walksat. The vertical Z axis mea•
With probability p it chooses, randomly, a variable from the 
                                                               sures the number of local minima reached by Walksat, aver•
ones involved in C (called noise pick); and with probability 
                                                               aged over 1,000 instances on each of which 100 tries were run. 
1 — p it picks a variable with the least break-count, breaking 
the tie arbitrarily if multiple choices exist (called greedy pick). As shown in Figures 2(a) and (b), Walksat performs well on 
  A flow chart of one try of Walksat is in Figure 1. The four  underconstrained and critically constrained problems, in that 
shaded rectangles contain the random choices we will analyze.  it can find global minima very often. This is shown by the 
Walksat takes three parameters to run, the number of tries, the points on Z axes indicated by the arrows in the figures. There•
maximal number of flips in each try or cutoff parameter, and a fore, Walksat is effective at finding optimal solutions on un•
probability or noise ratio for noise pick.                     derconstrained and critically constrained problems. However, 
                                                               the number of local minima which are also global minima de•
3 Performance of Walksat                                       creases from 66,677 to 8,616, on average, as the C/V ratio 
We now turn to the effectiveness of Walksat on Max-SAT, par•   increases from 2.0 to 4.3, indicating that the effectiveness of 
ticularly Max-3-SAT. We measure a local minimum in two         Walksat decreases. This number decreases further to 201 and 0 
ways. The first is the cost difference between a local mini•   on overconstrained problems with C/V ratios equal to 6.0 and 
mum and an optimal solution (which may have non-zero cost).    8.0 (Figures 2(c) and (d)). This result indicates that Walksat 
The second measure is the Hamming distance between a local    becomes less effective in finding optimal solutions as problem 
minimum and the optimal solution nearest to it. We introduce   constraints increase. 
the nearest Hamming distance to capture the minimal number       The distribution of local minima of Walksat exhibits a bell 
of flips required to turn a local minimum into an optimal so• surface on overconstrained problems (Figures 2(c) and (d)). 
lution. Furthermore, to make these two quality measures on    More importantly, the summit of such a bell surface shifts away 
 1180                                                                                                   SATISFIABILITY                                                                  Unfortunately, exact backbone frequencies are hard to come 
                                                               by without finding at least one optimal solution. The idea to 
                                                               bypass this problem was inspired by the effectiveness of high 
                                                               performance local search algorithms, such as Walksat. Our 
                                                               analysis on the performance of Walksat (Section 3) showed 
                                                               that Walksat can find optimal solutions very often on under-
                                                               constrained and critically constrained Max-SAT, and can also 
                                                               reach near optimal solutions very close to the optimal. Such 
                                                               near optimal local minima also form large clusters around op•
                                                               timal solutions. Thus, the local minima of Walksat must have 
                                                               common structures, which may also be shared by optimal so•
                                                               lutions. Therefore, we can use the local minima as if they were 
                                                               optimal solutions to compute pseudo-backbone frequencies as 
                                                               an estimation of the true backbone frequencies. We call this 
                                                               general approach backbone guided local search or BGLS. 
                                                                 The above ideas can be applied to almost all local search 
                                                               algorithms. However, actual application is problem and algo•
                                                               rithm specific, since local search algorithms operate very dif•
                                                               ferently on different problems. In this research, we consider 
                                                               Max-SAT and the Walksat algorithm. 
                                                               4.2 Backbone guided Walksat: BGWalksat 
 from optima] solutions, the (0,0) point on the X-Y plane, as the The application of BGLS to Max-SAT and Walksat leads to 
problems are more constrained. As the C/V ratio increases, the the backbone guided Walksat (BGWalksat) algorithm. Similar 
number of optimal solutions decreases [19], which can become   to Walksat, BGWalksat runs a total K tries. In addition, BG•
indistinguishable from a large number of suboptimal solutions. Walksat splits the total of K tries into two phases. The first, 
As a result, the search space becomes rugged, with more local  estimation phase, runs tries of original Walksat to collect 
minima in which Walksat may be trapped.                        local minima and compute pseudo-backbone frequencies (see 
   Despite the difficulty of overconstrained problems, Walksat Section 4.3). The second, backbone guided search phase runs 
is still fairly effective in that it is able to reach local minima = K - tries, in which variable selection is guided 
close to optimal solutions. For a C/V ratio of 8.0 (Figure 2(d)), by pseudo-backbone frequencies. The newly discovered local 
for instance, a large number of local minima landed on by      minima can also be added to the pool of all local minima to 
Walksat (the peak point of the bell surface) have a normalized update the pseudo-backbone frequencies. 
cost difference to optimal solutions of 0.014 for 100 variable   We now consider backbone guided moves or biased moves. 
problems, which is equivalent to approximately eleven more     As discussed in Section 2 and shown in Figure 1, Walksat 
constraints violated than an optimal solution on such overcon• makes five uniformly random choices. The first is the ran•
strained problems. Since Walksat is normally executed in mul•  dom initial assignment generation. Instead of uniformly ran•
tiple tries, the best local minimum it can reach is usually much domly choosing a variable and setting it to an arbitrary value, 
better than such most frequent local minima.                   we can view the pseudo-backbone frequencies as an approxi•
   A closer examination of the results in Figures 2(c) and (d) mate probability distribution of variable assignments and take 
indicates a nearly linear correlation between the cost differ• samples of variable assignments as initial assignments from 
ence and the Hamming distance. This observation implies that   this distribution. This scheme was called heuristic backbone 
a local minimum with a small cost is more likely to share a    sampling in [18]. 
larger common structure with an optimal solution. A similar      The second random choice in Walksat is the random clause 
phenomenon on the Traveling Salesman Problem was called        pick for choosing an unsatisfied clause. To apply the idea of 
the "big valley" [1]. We will exploit this in our new search   backbone frequencies, we extend it to the concept of pseudo-
algorithm described in the next section.                       backbone clause frequencies, which measure the frequencies 
4 Backbone Guided Local Search                                 that clauses are satisfied in all local minima. When picking a 
                                                               clause from the set of unsatisfied clauses, we choose one based 
4.1 The main idea                                              on its pseudo-backbone clause frequency. For example, given 
If all optimal solutions to a problem were known, they could   three unsatisfied clauses and with pseudo-backbone 
provide a useful clue to how a variable should be set. For ex• frequencies 0.3,0.05 and 0.15, respectively, we choose 
ample, if a variable is a part of the backbone, i.e., it has a fixed with probability with proba•
value in all optimal solutions, obviously the variable should be bility and C3 with probability  
set to that value. In fact, we can extend the concept of back•   The remaining three random choices involved selecting a 
bone to backbone frequency. The frequency of a variable-value  variable, uniformly, from a particular set. The first choice picks 
pair (or literal in SAT) in all optimal solutions is an indication a variable from the set of zero break-count variables in the cho•
of how often the variable should take that particular value. This sen clause C (the unshaded rectangle in Figure 1), the second 
can be exploited as a heuristic for selecting variables and val• directly from the variables involved in C, and the third from 
ues in a local search such as Walksat. In general, a variable- the set of variables in C with the least break-count. Rather 
value pair will be less likely to be swapped out of the current than picking one variable uniformly from a particular set, we 
state if it has a higher backbone frequency than another pair. make a biased selection based on variables' pseudo-backbone 
  SATISFIABILITY                                                                                                    1181  frequencies. Consider an example of three literals and still constructing the pseudo-backbone. Specifically, we run 
    in the chosen clause C with backbone frequencies 0.1,0.3   Walksat with dynamic noise for 30 short runs to construct the 
 and 0.6, respectively. We want to flip more than because      pseudo-backbone, followed by 7 long runs of backbone guided 
 literal appears more often than in all local minima           local search, each of which is 10 times as long as a short run. 
 (frequency 0.9 versus 0.4). Therefore, we pick and  
 with frequencies                                              5 Experimental Results 
 and respectively.                                             We now analyze the performance of BGWalksat on Max-
4.3 Pseudo-backbone frequencies                                SAT The benchmark suite for empirical evaluation consists 
The performance of backbone guided local search depends        of two different types of problems: randomly generated prob•
 largely upon the quality of pseudo-backbone frequencies.      lems and problems converted from real-world applications in 
There are at least two ways to compute pseudo-backbone fre•    SATLIB [9]. We included satisfiable and unsatisfiable prob•
quencies. The first and simplest method is to consider all the lem instances. We used Walksat implementation from Henry 
available local minima as if they were global optima, and take Kautz and developed BGWalksat on top of it. 
the frequency of a variable-value pair that ap•                5.1 Random ensembles 
pears in all local minima S as its pseudo-backbone frequency.  In these experiments, we investigate the effects of biased 
Specifically, we have frequency We moves on random choices in Walksat (Section 2). There are 
call this method average counting.                             five places where Walksat makes uniformly random choices 
   It is imperative to note that not all local minima are of   (the five rectangles in Figure 1). Our experimental results 
equal quality. A lower quality local minimum usually con•      showed that the biased random choice of picking a variable of 
tains less backbone variables than one of a higher quality.    zero break-count in a selected clause C (the unshaded rectan•
Therefore, the former is less reliable and should contribute   gle in Figure 1) has almost no effect. The reason is that when a 
less to the pseudo-backbone frequencies than the latter. Thus, zero break-count variable exists, there is usually one available, 
we must discount the contribution of a local minimum based     meaning that a very few such biased moves occur. We will not 
on its cost. If a local minimum has cost we can                consider this biased random choice in the rest of the paper. 
compute the pseudo-backbone frequency of as In our experiments, we generated random MAX-3-SAT in•
                                            In other words,    stances with 2,000 variables and three different C/V ratios of 
the pseudo-backbone frequency of I is reciprocally weighted    2.0, 4.3 and 8.0. We generated 100 instances for each of the 
by the costs of the local minima that I was involved with. We  C/V ratios. We also tested various noise ratios, from 0 to 0.9 
call this method cost reciprocal average counting.             with an increment of 0.1, as well as Walksat with dynamic 
4.4 Walksat and BGWalksat with Dynamic Noise                   noise. Each run, regardless of its configuration, was allowed 
One limitation of the Walksat family of algorithms is their    a total of one million flips. 
dependence on a manually set noise parameter. So far, two        For Walksat with static noise, the cutoff parameter was set 
mechanisms have been proposed to resolve this issue in SAT.    to 10,000 flips (so the algorithm was run from 100 different 
Auto-Waksat [14] uses a preliminary probing stage to estimate  starting points). We tested different ratios of the lengths of 
the optimal value for the noise parameter, while Walksat with  the backbone estimation phase and the actual backbone search 
dynamic noise [8] automatically adjusts the noise level as the phase in BGWalksat. We found that a ratio of about 0.3 seems 
search progresses. We have successfully combined our method    to provide the best results. In the results shown below, Walksat 
with the dynamic noise strategy, for SAT and Max-SAT.          was run on the first 30 tries to collect the initial set of local min•
  The idea of dynamic noise is simple: start search with the   ima and obtain the pseudo-backbone frequencies. BGWalksat 
noise parameter equal to zero, and examine the number of vi•   was run on the remaining 70 tries. New local minima were 
olations in the current state every flips, where is the        added to update pseudo-backbone frequencies every 5 tries. 
number of clauses in the instance. If the number of violations   We experimentally compared the two methods for comput•
has not decreased since the last time we checked (n flips ago), ing pseudo-backbone frequencies (Section 4.3). The average 
the search is assumed to have stagnated, and the noise level is counting (AC) method is generally worse than the cost recip•
increased to where is the current noise                        rocal average counting (CRAC) method on random problems. 
level. Otherwise, the noise level is decreased to              Due to space limitations here, we will only report the results 
The discrepancy between the formulas for increasing and de•    from the CRAC method below. 
creasing the noise level are based on the observations of how    There is little impact of biased moves when the C/V ratio 
Walksat behaves when the noise parameter is too high, com•     is 2.0, because Walksat is able to find optimal solutions in the 
pared with how it behaves when the parameter is too low [8].   first 30 tries in almost all problems. Figure 3 shows the results 
Following [8], we have set and = 0.2, which have               on random Max-SAT with 2,000 variable and C/V ratios of 4.3 
been found to be effective over a wide range of SAT and Max-   and 8.0, comparing Walksat and BGWalksat with biased noise 
SAT instances.                                                 pick, biased greedy pick, and bias moves combining biased 
  Dynamic noise was designed and tested with Walksat's cut-    noise pick, greedy pick, clause pick, and assignment genera•
off parameter set to infinity; i.e., no random restarts. This is tion. The error bars in the figures correspond to confi•
the setting we use for Walksat with dynamic noise for all of   dence intervals. As shown, biased greedy pick is effective at 
our experiments in the next section. Unfortunately, this setting low noise levels, but leads to degraded performance on higher 
is incompatible with backbone guided Walksat, which requires  noise levels. Biased noise pick, on the other hand, has a greater 
random restarts in order to construct the pseudo-backbone. To effect as the noise level increases, due to the direct relationship 
overcome this, we have devised "compromise" parameter set•    between the noise level and the frequency of noise picking. Bi•
tings, which allow dynamic noise to function effectively, while ased assignment generation and clause pick on their own, have 
 1182                                                                                                   SATISFIABILITY                                                                Table 1: Walksat vs. BGWalksat on easier satisfiable problems. 
                                                               Walksat and BGWalksat are the runs resulting in a satisfying 
                                                               solutions (out of 20) by these algorithms. The better results are 
                                                               underlined and in bold. 
                                                                         problem                [ Walksat I [ BGWalksat 
                                                                        bw_large.c 3016  50457 l 1 I 2 
                                                                       bw.large.d 6325   131973 1               0 
                                                                         par8-1    350    1149        6         19 
                                                                         par8-2    350    1157        6         19 
Figure 3: Quality improvement on random Max-SAT using bi•                par8-3    350    1171        7         17 
                                                                         par8-4    350    1155        0         16 
ased noise pick, biased greedy pick, and the combination of              par8-5    350    1171          I       — 
biased noise pick, greedy pick, clause pick, and assignment              qg1-08    512   148957      8          12 
generation (combined bias).                                              qg2-08    512   148957       1         4 
                                                                         qg3-08    512   10469       11         20 
                                                                         qg6-09    729   21844       0          5 
                                                                         qg7-09    729   22060       4          5 
                                                                        g125.17   2125   66272        5         5 
little effect of Walksat's performance (data not shown). How•           g250.29   7250  454622        4 |       2 1 
ever, when combined with other strategies, they can provide 
improvements, as shown. 
   We also tested Walksat and BGWalksat with dynamic noise     were not solved by either method, in any of their runs (Table 2). 
on the same instances, with good results. This is fairly un•   Results for unsatisfiable instances are presented in Table 3. 
surprising, since on this class of instances, Walksat performs    As the results show, BGWalksat significantly outperforms 
best with a low noise ratio, and dynamic noise begins with the Walksat in most cases. On easier satisfiable instances (Table 1), 
noise ratio set to zero, and only raises it as needed. We found BGWalksat finds more satisfying solutions than Walksat for all 
that the noise parameter fluctuated at low levels, with an av• parity (par) and quasigroup (qg) classes, and produces similar 
erage of 0.2 for both C/V=8 and C/V=4.3. The noise level       results to Walksat on blocksworld instances. On harder satis•
never exceeded 0.6 at any time. The solutions found by Walk-   fiable instances (Table 2), BGWalksat outperforms Walksat in 
sat with dynamic noise were as good as the best solutions found all but two of 34 instances, where it is less than half a percent 
by Walksat with static noise for C/V=8, and only about 3.5%    worse. In contrast, the overall average gain is 30%, and is over 
worse for C/V=4.3. When combining dynamic noise with BG•       50% in 11 of them. On unstatisfiable instances (Table 3), BG•
Walksat, the average noise level was slightly lower, giving 0.13 Walksat produces impressive gains on longmult instances, and 
for C/V=8 and 0.15 for C/V=4.3, due to the increased number    on ssa6288-047, with an overall average gain of 20%. On un•
of random restarts. This is because after every restart there is satisfiable quasigroup instances (not shown), performance was 
a period of rapid improvement, when the noise level remains    similar to that of Walksat. Performance of BGWalksat is never 
at zero. The performance of BGWalksat with dynamic noise is    more than 10% worse than Walksat on any of the unsatisfiable 
similar to that of BGWalksat with best static noise for C/V=8  instances we have studied. 
and slightly worst than that for C/V=4.3.                         The most glaring failure of BGWalksat is on the instances 
                                                               pl25.17 and g250.29. These instances are SAT-encoded graph 
5.2 Real problem instances 
                                                               coloring problems, and serve to illustrate an important point. 
We now investigate how BGWalksat improves upon Walksat         As described in Section 3, we believe that our method is effec•
on the problems from SATLIB [9], when used in conjunction      tive because it exploits the "big valley" structure of the solution 
with dynamic noise. The test problems include SAT-encoding     space. However, graph coloring problems exhibit a particular 
instances from a random hard graph coloring problems and       type of symmetry in their solution structures which is opaque 
SAT-encoded blocks world planning, bounded model check•        to local search methods such as Walksat. For example, color•
ing, and the all interval series problem. The details of these ing all red nodes green, and all green nodes red, results in an 
problems can be found on the website. We only chose prob•      identical solution, with a radically different encoding. Thus, 
lems with more than 350 variables, and discarded those that    there is not a single "big valley", but several, which can bury 
can be easily solved by Walksat and BGWalksat.                 the true backbone information and thus lead to degraded per•
   We considered satisfiable and unsatisfiable problems. We    formance. Presumably, BGWalksat's performance will suffer 
ran both Walksat and BGWalksat, both using dynamic noise,      on all instances with this type of symmetry. 
with a total of 10 million flips (compared with 1 million for 
our results for random instances). Interestingly, BGWalksat    6 Conclusions 
exhibited superior performance, over a wide range of real in•  We developed a novel and general method that exploits back•
stances, with some of the methods of biased-moves utiliz•      bone information for improving the performance of a local 
ing the pseudo-backbone disabled. For the results presented    search algorithm. We demonstrated and analyzed the new 
here, we use backbone-guided noise pick and backbone-guided    method, called BGWalksat, on Max-SAT using the Walksat 
clause pick, with the average-counting (AC) method. Results    algorithm, with both static and dynamic noise strategies. The 
are for twenty runs for each algorithm and instance. Experi•   main ideas are to extract backbone information from local min•
ments with the best static noise (not shown) produced similar  ima and use it directly to fix the discrepancy between the cur•
results.                                                       rent state and optimal solutions, so as to guide Walksat toward 
   In viewing the results, we found it useful to divide the satis• the regions of the search space more likely to contain optimal 
fiable instances into two categories, the easier instances, which solutions. In comparison, almost all existing local search meth•
were solved at least once (Table 1), and the harder ones, which ods focus on the costs of the states in the search space. There-
  SATISFIABILITY                                                                                                    1183 