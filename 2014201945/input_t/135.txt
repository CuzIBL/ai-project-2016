    A Parametric Hierarchical Planner for Experimenting Abstraction Techniques 

                          Giuliano Armano, Giancarlo Cherchi, Eloisa Vargiu 
                          Department of Electrical and Electronical Engineering 
                                           University of Cagliari 
                                           1-09123, Cagliari, Italy 
                                   armano, cherchi, vargiu @diee.unica.it 


                     Abstract                          entities belonging to a level and its superior. Translation 
                                                       rules are given in a PDDL-like format, explicitly defined 
    This paper presents a parametric system, devised 
                                                       to support abstractions. 
    and implemented to perform hierarchical plan•
                                                         Experiments have been performed on some classical 
    ning by delegating the actual search to an exter•
                                                       planning domains, widely acknowledged by the planning 
    nal planner (the "parameter") at any level of ab•
                                                       community -although not specifically tailored for ab•
    straction, including the ground one. Aimed at 
                                                       straction. To better assess the significance of the results, 
    giving a better insight of whether or not the ex•
                                                       three different planners have been used while performing 
    ploitation of abstract spaces can be used for 
                                                       experiments. 
    solving complex planning problems, compari•
                                                         The remainder of this paper is organized as follows: 
    sons have been made between instances of the 
                                                       first, some relevant work on planning by abstraction is 
    hierarchical planner and their non hierarchical 
                                                       briefly recalled, to give the reader a better insight of the 
    counterparts. To improve the significance of the 
                                                       issues deemed relevant. Then, the overall architecture of 
    results, three different planners have been se•
                                                       the system is illustrated, including the semi-automatic 
    lected and used while performing experiments. 
                                                       technique we developed for generating abstract spaces. 
    To facilitate the setting of experimental envi•
                                                       Subsequently, experiments are described and results are 
    ronments, a novel semi-automatic technique, 
                                                       discussed. Finally, conclusions are drawn and future 
    used to generate abstraction hierarchies starting 
                                                       work is outlined. 
    from ground-level domain descriptions, is also 
    described.                                         2 Related Work 
1 Introduction                                         Building an ordered set of abstractions for controlling the 
                                                       search has proven to be an effective approach for dealing 
There is experimental evidence that humans repeatedly 
                                                       with the complexity of planning tasks. This technique 
use abstractions while solving different kinds of prob•
                                                       requires the original search space to be mapped into cor•
lems [Stillings et ai, 1987], thus justifying the research 
                                                       responding abstract spaces, in which irrelevant details are 
in the field of automated hierarchical planning. 
                                                       disregarded at different levels of granularity. 
  It is apparent that abstraction is usually not effective 
                                                         Two main abstraction mechanisms have been studied 
on simple problems, due to the overhead introduced by 
                                                       in the literature: action- and state-based. The former 
the need of going back and forth across abstract spaces 
                                                       combines a group of actions to form macro-operators 
while performing the search. In other words, enforcing 
                                                       [Korf, 1987]. The latter exploits representations of the 
abstraction on simple problems may end up by wasting 
                                                       domain given at a lower level of detail; its most signifi•
computational resources. Yet, under certain assumptions 
                                                       cant forms rely on (i) relaxed models, obtained by drop•
abstraction can significantly reduce the search time when 
                                                       ping operators' applicability conditions [Sacerdoti, 
applied to complex problems [Knoblock, 1991]. 
                                                       1974], and on (ii) reduced models, obtained by com•
  In order to investigate the impact of abstraction 
                                                      pletely removing certain conditions from the problem 
mechanisms on the search complexity, we devised and 
                                                       space [Knoblock, 1994]. Both models, while preserving 
implemented a hierarchical wrapper able to embody any 
                                                       the provability of plans that hold at the ground level, per•
domain-independent planner provided that a compliance 
                                                       form a "weakening" of the original problem space, thus 
with the STRIPS subset of PDDL 1.2 standard [McDer-
                                                       suffering from the drawback of introducing "false" solu•
mott et al, 1998] is ensured. The embodied planner is 
                                                       tions at the abstract levels [Giunchiglia and Walsh, 
exploited at any level of the hierarchy, each level being 
                                                       1990]. 
characterized by its own definitions. A suitable decoup•
                                                         As for Knoblock's abstraction hierarchies, each predi•
ling between levels is guaranteed by using domain-
                                                      cate is associated with a unique level of abstraction -
specific rules that establish the correspondence between 


936                                                                                             PLANNING according to the constraints imposed by the ordered   at the ground level, on the goal obtained by translating 
monotonicity property [Knoblock, 1994]. Any such hier• downward its effects. Note that the initial state of each 
archy can be obtained by progressively removing certain refinement depends on the previous refinement; hence, 
predicates from the domain (or problem) space.        refinements must be performed according to the order 
  From a general perspective, let us assume that abstrac• specified by the abstract plan. To avoid incidental dele•
tions might occur on types, predicates, and operators. tion of subgoals already attained during previous refine•
Relaxed models are a typical example of predicate-based ments, they are added to the list of subgoals that results 
abstraction, whereas macro-operators are an example of from translating downward the effects of the current ab•
operator-based abstraction.                            stract operator to be refined. 
                                                         When the attempt to refine the current abstract solution 
3 System Architecture                                  fails P is invoked to find the next abstract solution, ] 
                                                       unless the number of abstract solutions found so far ex•
The system has been called HWQ, standing for (paramet• ceeds a given threshold If no abstract solution could 
ric) Hierarchical Wrapper. Note that square brackets are be successfully refined, to ensure the completeness of the 
part of the name, indicating the ability to embed an ex• algorithm, an overall search is performed at the ground 
ternal planner; being P any such planner, the notation level. The whole process ends when a ground solution is 
HW[P] shall be used to denote an instance of HW[] able found or the overall search fails. 
to exploit the planning capabilities of P. 
  Figure 1 illustrates the architecture of the system, fo• 3.2 Extending PDDL for Dealing with 
cusing on its main components, i.e., an engine and the      Abstraction 
embedded planner. The former is devoted to controlling 
the communication between adjacent levels, whereas the A problem and its corresponding domain are described in 
latter is exploited to perform planning at any given level accordance with the standard PDDL 1.2 syntax, using the 
of abstraction.                                       '''define problem" and "define domain" statements, re•
  Any domain-independent planner can be embodied      spectively. To describe how bi-directional communica•
within the system, provided that compliance with the  tion occurs between adjacent levels an extension to the 
STRIPS subset of the PDDL 1.2 standard is ensured.    standard PDDL has been devised and adopted. 
                                                         More precisely, the syntactic construct "define hierar•
                                                      chy" has been introduced. It encapsulates an ordered set 
                                                      of domains, together with a corresponding set of map•
                                                      pings between adjacent levels of abstraction. Since the 
                                                      mappings are given in term of types, predicates and op•
                                                      erators, three subfields have been introduced (i.e., 
                                                       : types, : predicates, and : actions), to represent the 
                                                      abstraction over such dimensions. The general form of 
                                                      the construct is: 
Figure 1. The architecture of the system. 
                                                         (define (hierarchy <name>) 
  Although the system supports a multiple-level hierar•    (:domains <domain-name>*) 
chy, for the sake of simplicity, in the following we as•   (imapping (<src-domam> <dst-domain>) 
sume that only one abstract level exists, giving rise to a  [:types <types-def>] 
two-level (i.e., ground and abstract) hierarchical descrip• [:predicates <predicates-def>] 
tion.                                                       [tactions <actions-def>]) *) 

3.1 The Planning Algorithm                              The following notation is adopted in the : types field 
Once instantiated with an external planner P, HW[P]   to represent a clause for mapping types: 
takes as inputs a ground-level problem and a structured 
description of the corresponding domain, including a set          (abstract-type ground-type) 
of rules to be used while mapping ground into abstract 
states and vice-versa. In fact, to perform planning at dif• It specifies that ground-type becomes 
ferent levels of abstraction, the engine of HW[] must op• abstract-type while performing upward translations. 
erate bi-directional translations (upwards and down•  To disregard a type, the following notation must be used: 
wards) to permit communication between adjacent levels. 
  To find a solution of a given problem, first the engine 
of HW[P] translates the init and goal sections from the     Due to the limitations of most of the existing planners, the 
ground to the abstract level. P is then invoked to search process of incrementally querying for another solution may be 
for an abstract solution. Subsequently, each abstract op• simulated by preliminarily querying for m abstract solutions, 
erator is refined by repeatedly invoking P. The refine•   to be released incrementally on demand. 
ment of an abstract operator is performed by activating P, 


PLANNING                                                                                              937           Tabic 1. Heuristics for pruning the operators1 graph. 

                 (nil ground-type)                        - an action remains unchanged or some of its parame•
                                                           ters are disregarded; 
  Moreover, the following notation is adopted in the      - an action is removed; 
:predicates field to represent a clause for mapping       - an action is expressed as a combination of actions 
predicates:                                                belonging to the ground domain; 
                                                          - a new operator is defined from scratch. 
                                                       3.3 Generating Abstractions 
                                                       To facilitate the setting of abstract spaces, as an alterna•
  It specifies that ground-predicate must be pre•      tive to the hand-coded approach used in [Armano et ai, 
served while going upward and vice-versa. Note that, if 2003], a novel semi-automatic technique for generating 
no differences exist in mapping a predicate between adja• abstraction hierarchies starting from ground-level domain 
cent levels, the corresponding clause can be omitted.  descriptions has been devised and adopted. 
  To disregard a predicate while performing upward       From our particular perspective, performing abstrac•
translations, the following notation is used:          tion basically involves executing two steps: (i) searching 
                                                       for macro-operator schemata through a priori or a poste•
(nil                                                   riori analysis, (ii) selecting some of the schemata evi•
 (ground-predicate ?pl2     tl2 ?p22 - t22 ...) )      denced so far and translating them into abstract operators. 
                                                         In this subsection, we concentrate on the task of find•
  It specifies that ground-predicate is not translated ing macro-operator schemata throughout an a-priori 
into any abstract-level predicate.                     analysis performed on the given domain and problem, 
  In addition, abstract-predicate can be expressed     rather than adopting the a-posteriori technique illustrated 
as a logical combination of some ground-level predicates. in [Armano and Vargiu, 2001], aimed at finding macro-
  To describe how to build the set of operators for the operator schemata according to a post-mortem analysis 
abstract domain, in the -.actions field, four kinds of performed on plan "chunks". 
mapping can be expressed: 


938                                                                                             PLANNING   Step (i) is performed by an algorithm for building and ing graph for the blocks-world domain.2 The resulting 
then pruning a directed graph, whose nodes represent   macro-operator schemata are (";" being used for concate•
operators and whose edges represent relations between  nation): pick-up;stack, unstack;put-down, pick-up ;put-
effects of the source node and preconditions of the desti• down, and stack;unstack. 
nation node. In particular, for each source node A and for 
each destination node B, representing operators defined 
in the given domain, the corresponding edge is labeled 
with a pair of non-negative numbers, denoted by 
The pair accounts for how many predicates A can estab•
lish and negate that are also preconditions of B. It 
is worth noting that source and destination node may co•
incide, thus giving rise to a self-reference. 
  Pruning is performed according to the domain-
independent heuristics reported in Table 1. Note that the Figure 3. The directed graph (after pruning), representing static 
pruned graph does not contain edges labeled the relations between operators of the blocks-world domain. 
corresponding operators being completely independent. 
                                                         Step (ii) is performed by selecting a subset of the re•
  At this point, the most promising macro-operator 
                                                       sulting macro-operator schemata, and by translating them 
schemata can be easily extracted from the pruned graph, 
                                                       into abstract operators. In principle, generating an ab•
each path being related with a candidate macro-operator. 
                                                       stract operator is not a deterministic task; for this reason 

                                        <0 1>          in the current implementation of the system this mecha•
                                                       nism has not yet been completely automated. Neverthe•
                                                       less, the simplest way of generating an abstract operator 
                                                       consists of deleting from the abstract level all predicates 
                                                       that do not occur among preconditions or effects of any 
                                                       selected macro-operator. This process influences (and is 
                                                       influenced by) the translation rules that apply to both 
                                                       types and predicates. For instance, the absence of a 
                                                       predicate as a precondition or effect of any induced ab•
Figure 2. The directed graph (before pruning), representing static stract operator entails its deletion from the abstract level. 
relations between operators of the blocks-world domain.  As for the blocks-world example, two macro-operator 
                                                       schemata have been disregarded (i.e., stack.unstack and 
   As an example, let us consider the well-known blocks-
                                                      pick-up;put-down), as they do not alter the state of the 
world domain, encompassing four operators: stack, pick•
                                                       domain (the resulting set of effects being empty). In fact, 
up, unstack, put-down. The corresponding graph is shown 
                                                       it is apparent that they are composed of complementary 
in Figure 2. Bearing in mind that the same mechanism 
                                                       actions. 
has been applied to all operators' pairs, let us concentrate 
-for instance- on the relation that holds between stack  It is worth pointing out that the approach described 
(source node) and pick-up (destination node).          above can be used also for generating abstractions tai•
  Considering that the effects of the stack operator are: lored to a given problem, by simply adding a dummy 
                                                       operator representing the goal(s) of the problem itself. 
 (not (holding ?x))                                    This "goal" operator has only preconditions (its set of 
(not (clear ?y))                                       effects being empty), representing a logic conjunct of 
(clear ?x)                                             predicates that characterize the goal of the input problem. 
(handempty)                                            In this way, all sequences deemed relevant to solve the 
(on ?x ?y)                                             problem are easily put into evidence (as they end with the 
                                                       "goal" operator). 
and that the preconditions of the pick-up operator are: 
                                                       4 Experimental Results 
 (clear ?x) 
 (ontable ?x)                                          The current prototype of the system has been imple•
(handempty)                                            mented in C++. Experiments have been performed with 
                                                       three planners: GRAPHPLAN [Blum and Furst, 1997], 
we label the corresponding edge with the pair It is    BLACKBOX [Kautz and Selman, 1998], and LPG [Ger-
apparent that stack establishes two preconditions for  evini and Serina, 2002]. In the following, GP, BB, and 
pick-up, while negating another.                       LPG shall be used to denote the GRAPHPLAN, 
  As for the pruning activity, Figure 3 shows the result• BLACKBOX, and LPG algorithms, whereas HW[GP], 

                                                            Since we are interested in finding macro-operators, we do 
                                                          not take into account self-references. 


PLANNING                                                                                              939  HW[BB], and HW[LPG] shall be used to denote their     compares the CPU time of each planner over the set of 
 hierarchical counterparts.                            problems taken from the AIPS planning competitions. 
   To assess the capability of abstraction to improve the Dashes show problem instances that could not be solved 
 search, we performed some tests on five domains taken by the corresponding system within the adopted time-
 from the 1998, 2000, and 2002 MPS planning competi•   bound. 
 tions [Long, 1998; Bacchus, 2000; Long, 2002]: elevator, Elevator. Experiments show that -for GP and BB- the 
 logistics, blocks-world, gripper, and zeno-travel. Experi• CPU time increases very rapidly while trying to solve 
 ments were conducted on a machine powered by an Intel problems of increasing length, whereas HW[GP] and 
 Celeron CPU, working at 1200 Mhz and equipped with    HW[BB] keep solving problems with greater regularity 
 256Mb of RAM. A time bound of 1000 CPU seconds has    (although the relation between number of steps and CPU 
 also been adopted.                                    time remains exponential). LPG is able to solve long 
                                                       plans in a very short time, thus doing away with the need 
                                           HW          to resort to HW[LPG]. 
   #    GP         BB HW           LPG 
              /GP/                         LPG 
                      elevator 
   1-4 1 0.01 0.06   0.1 0.33      0.01    0,11 
   3-1  0.23  0 36   1.34 1.20     0.02    0.15 
  4-1   1.96  0.83   1.03 1.74     0.02    0.16 
  4-4   10.11 0.84   311.5 1.79    0.02    0.16 
  5-1  364.7  2.03   180.8 2.54    0.02    0.18 
                      - 3.89 0.03          0.29 
                     logistics 
  4-2 1 0.68   1.22  0.27 0.46     17.93    -
  5-2   0.08  0.16   0.15 0.46     0.02     " 
  7-0    ~    10.93  4.49 2.17     2.12     "" 
  8-1    -    16.26  2.90 3.02      1.55    -
  10-0   -    43.43  8.27 3.76     2.17     -          Figure 4. CPU time comparisons in the blocks-world domain. 
  15-0   -    203.4  10.91 6.33    0.15                  Logistics. In this domain GP easily solves problems up 
                    blocks-world                       to a certain length, but it is unable to solve problems 
  4-0   0.34  0.32   0.16 0.67     0.02    0.08 
  6-0   3.04  1.82   0.26 1.68     0.05    0.23        within the imposed time limits if a given threshold is ex•
  8-0  31.61  11.13  0.92 2.46     0.36    0.31        ceeded. On the other hand, HW[GP] succeeds in solving 
  10-0   -     --    6.82 5.00     0.62    0.67        problems of increasing length without encountering the 
  11-0   --    --    16.23 4.25    4.23    0.83        above difficulties. BB performs better than HW[BB] for 
  14-0   -     -            9.84   5.00    1.91        small problems, whereas HW[BBJ outperforms BB on 
                                                       more complex problems. LPG is able to solve long plans 
  15-0   ~     --     ..           7.49    2.07 
  17-0   ~     --     --           33.93   3.49        in a few seconds at the most. For unknown reasons LPG 
  20-0   -     ~      -            66,78   7.88        was not able to refine any abstract operator when invoked 
  22-0 1 -     -      -            183.16 12.21        by the engine of HW [LPG]. 

  25-0   -     ~      --          668.98  24.94          Blocks-world. Tests performed on this domain reveal a 
                    zeno-travel                        similar trend for GP and HW[GP], although the latter 
   1    0.02  0.52   0.22 0.36     0.02    0.03        performs slightly better than the former. BB performs 
   8     -    42.55  0.94 2.36     0.14    0.49        better than HW [BB] for simple problems, whereas 
   9     -         -- 0.34 3.37    0.13    1.08        HW[BB] outperforms BB on problems of medium com•
   11    ~     -     11.20 2.78    0.16    1.06        plexity. LPG is able to solve problems whose solution 
   13    -     -    62.99 20.52    0.42    2.47 
                                                       length is limited to 100 steps. In this domain, HW[LPG] 
   14    -  --             20.04 | 3.90   21.93 
                                                       clearly outperforms LPG on more complex problems. 
                     gripper 
   2 1 4.72   0.56   0.42 0.63     0.02    0.07 
   3    7.91  1.73   5.22 1.20     0.02    0.12 
   4   18.32  2.63  268.7 1.55     0.02    0.14 
   5   57.21  4.38  421.1 1.54     0.03    0.15 
   6     --   7.97  586.4 2.26     0.03    0.17 
   9 |   -    24.29 |       3.63   0.05   0.36 
Table 2. Performance comparison of BB, GP, and LPG with 
their hierarchical counterparts. 

   All domains have been structured according to a 
ground and an abstract level, the latter having been gen• Figure 5. CPU time comparisons in the blocks-world domain. 
erated following the approach described in the previous  Zeno-travel. Unfortunately, in this domain, neither GP 
 subsection. For each domain, several tests have been per• nor HW[GP] are able to successfully tackle most of the 
 formed -characterized by increasing complexity. Table 2 problems of this domain. An improvement of HW[BB] 


940                                                                                             PLANNING 