                          A Labeling Approach to the Computation
                         of Credulous Acceptance in Argumentation

                                               Bart Verheij
                              Artificial Intelligence, University of Groningen
                                            b.verheij@ai.rug.nl


                      Abstract                        refutations of arguments are returned: the minimal admissi-
                                                      ble sets containing or attacking a given argument, respec-
    In recent years, the combinatorics of argumentation
    with arguments that can attack each other has been tively. As an encore, a straightforward way is provided to
    studied extensively. Especially, attack graphs (put construct all preferred extensions of an argumentation
    in the focus of attention by Dung's seminal work  framework, essentially by 'gluing' proofs and refutations.
    1995) have proven to be a productive tool of analy-
    sis. In this paper a new style of algorithm is pre- 2  Analyzing attack graphs in terms of sets
    sented that computes the minimal admissible sets       and in terms of labelings
    containing or attacking the argument. It is a
    breadth-first algorithm using labelings. The algo- The starting point of Dung's [1995] work is an argumenta-
    rithm is applied to the computation of the preferred tion framework, which is essentially a directed graph ex-
    and stable extensions of a given attack graph.    pressing the attack relations between arguments:
                                                        Definition (1). An argumentation framework is a pair
1   Introduction                                        (Arguments, Attacks), where Arguments is any set, and
                                                        Attacks is a subset of Arguments _ Arguments. The ele-
The formal study of argumentation with arguments and their ments of Arguments are the arguments of the theory, the
counterarguments in terms of argument attack graphs [Dung elements of Attacks the attacks.
1995] has proven to be fruitful. Dung introduced several When (Arg, Arg') is an attack, the argument Arg is said to
different argumentation semantics, of which especially the attack the argument Arg'. A set of arguments Args is said to
grounded and preferred semantics have been the topic of attack an argument Arg if and only if there is an element of
further study. A central decision problem is to determine Args that attacks Arg.
credulous acceptance (see, e.g., [Cayrol, Doutre & Mengin A useful shorthand for the specification of (finite) ar-
2003], [Dunne & Bench-Capon 2002, 2003]): given an ar- gumentation frameworks is as a set of lists of arguments.
gument attack graph and an argument, determine whether Each list of arguments in the set expresses attacks of the
the argument is an element of some preferred extension. first argument in the list. For instance, the set of lists {a b1
   The present paper provides an algorithm for the com- b2, b1 c1 c2, b2 c3 c4} denotes the argumentation frame-
putation of credulous acceptance. The approach is based on work, in which the argument a is attacked by b1 and b2,
labelings, which leads to a different kind of algorithm than while b1 is attacked by c1 and c2 and b2 by c3 and c4.Itcan
the more common argument game approaches. Argument    be useful to require of this shorthand that an attack list con-
games are a kind of dialogues in which a proponent tries to tains all attackers of its first element, but this is not neces-
defend an argument, while an opponent tries to attack it. A sary and reduces flexibility of the notation.
natural idea in argument game approaches is to defend
                                             1            In the rest of the paper, an argumentation framework AF
against the most recently proposed arguments first. As a =(Arguments, Attacks) is silently assumed. Some of Dung's
result, in an argument games approach, it is natural to con- central notions are the following:
sider the elements of an attack tree in a depth-first manner. Definition (2). 1. A set of arguments Args is conflict-free
   The main contribution of the paper is a breadth-first al- if it contains no arguments Arg and Arg', such that Arg at-
gorithm in terms of labelings that answers the credulous tacks Arg'.
acceptance problem for the preferred semantics. Formally 2. An argument Arg is acceptable with respect to a set of
proven results about labelings show the correctness of the arguments Args if for all arguments Arg' in the argumen-
algorithm. By the nature of the algorithm short proofs and tation framework the following holds:
                                                             If Arg' attacks Arg, then there is an argument Arg'' in
                                                             Args, such that Arg'' attacks Arg'.
   1 Natural, but not necessary: see e.g. [Cayrol et al. 2003].


                                                IJCAI-07
                                                   623  3. A set of arguments Args is admissible if it is conflict- Properties (5). Let J be a set of arguments and D be the
  free and all arguments in Args are acceptable with respect set of arguments attacked by the arguments in J. Then the
  to Args.                                              following properties obtain:
  4. An admissible set of arguments Args is a complete ex- 1. J is conflict-free if and only if (J, D) is a labeling.
  tension if each argument that is acceptable with respect to 2. J is admissible if and only if (J, D) is an attack-
  Args is an element of Args.                           complete stage.
  5. A preferred extension of an argumentation framework 3. J is a complete extension if and only if (J, D) is a com-
  is an admissible set of arguments, that is maximal with plete stage.
  respect to set inclusion.                             4. J is a preferred extension if and only if (J, D) is an at-
  6. A conflict-free set of arguments Args is a stable exten- tack-complete stage with maximal set of justified argu-
  sion of an argumentation framework if for any argument ments.
  Arg of the framework that is not in Args, there is an argu- 5. J is a stable extension if and only if (J, D) is a labeling
  ment Arg' in Args, such that Arg' attacks Arg.        with no unlabeled arguments.
The complete extension that is minimal with respect to set Proof omitted.
inclusion (which exists and is unique; see [Dung 1995]) is It is useful to introduce a name for minimal admissible sets:
called the grounded extension.                          Definition (6). An admissible proof (or proof, for short)
   In this paper, instead of sets, labelings are used as analy- for an argument Arg is an admissible set containing Arg
sis tool. An early use of the labeling approach for Dung's ab- that is minimal with respect to set inclusion. An admissi-
stract argumentation frameworks is by Verheij [1996], con- ble refutation (or refutation, for short) against an argu-
tinued using a more expressive language in [Verheij 2003b]. ment Arg is an admissible proof for an attacker of Arg.
Recently, Caminada [2006] has resumed the analysis of ar- It is important to note that the existence of a refutation of an
gumentation frameworks in terms of labelings.         argument does not only imply that the argument is in no
  Definition (3). A pair (J, D) is a labeling if J and D are preferred extension, but only that there is a preferred exten-
  disjoint subsets of the set Arguments of the argumentation sion attacking the argument.
  framework. The elements of J and D are the justified and
  defeated arguments, respectively. The elements of J  D 3 Computing credulous acceptance
  are labeled, other elements of Arguments unlabeled.
                                                      Before we turn to the algorithm some remarks about the
A convenient shorthand notation for a (finite) labeling (J, D)
                                                      approach are in use. What is the nature of the 'solutions' we
is as a list of arguments, some of which appear between
                                                      are looking for? Consider an argumentation framework in
parentheses. The arguments in parentheses are those in D.
                                                      which there is an argument a with two attackers b1 and b2,
For instance, using this shorthand, a (b1) c1 (b2) c3 denotes
                                                      which on their turn have two attackers each (arguments c1
the labeling in which the arguments a, c1 and c3 are justi-
                                                      to c4), and these are again each attacked by two attackers
fied and the arguments b1 and b2 defeated. Grouping the
                                                      (arguments d1 to d8). The relevant part of the attack graph
arguments in J and in D this becomes a c1 c3 (b1 b2). When
                                                      is shown in Figure 1. It is assumed that the figure shows all
there are no defeated arguments, this can be indicated as ().
                                                      attackers at at most three attack levels from argument a.
   The following definition contains the main notions of
                                                      There are for instance no other attackers of a than b1 and
the labeling approach.
                                                      b2. The dots indicate that higher attack levels are omitted.
  Definition (4). 1. A labeling (J, D) is conflict-free if the
                                                        Given this partial view of the attack graph, what can be
  set J is conflict-free.
                                                      said about the proofs and refutations of the argument a?Of
  2. A labeling (J, D) has justified defeat if for all elements
                                                      course we cannot determine 'complete' proofs and refuta-
  Arg of D there is an element in J that attacks Arg.
                                                      tions, but we know what the 'three-levels deep' partial proofs
  3. A labeling (J, D) is closed if all arguments that are at-
                                                      and refutations must look like if they exist. The figure
  tacked by an argument in J are in D.
                                                      shows a possible partial proof (on the left) and a possible
  4. A conflict-free labeling (J, D) is attack-complete if all
                                                      partial refutation. In the partial proof, a is justified (light
  attackers of arguments in J are in D.
                                                      grey). Hence both its attackers must be defeated (dark grey).
  5. A conflict-free labeling (J, D) is defense-complete if all
                                                      Since a proof is minimal, a partial proof only needs to con-
  arguments of which all attackers are in D are in J.
                                                      tain one attacker against a's attackers. Therefore the second
  6. A conflict-free labeling (J, D) is complete if it is both
                                                      attack level allows four different possible partial proofs, one
  attack-complete and defense-complete.
                                                      for each minimal choice of c's attacking the b's. In the fig-
  7. A labeling (J, D) is a stage if it is conflict-free and has
                                                      ure, the arguments c1 and c3 are chosen and consequently
  justified defeat.
                                                      labeled as justified. The third attack level is then again de-
Caminada's [2006] reinstatement labelings are closed com-
                                                      termined: the attackers of the c's that are justified must all be
plete labelings with justified defeat. The set of labelings of
                                                      defeated. As a result, there exist four possible partial proofs
an argumentation framework AF is denoted as LabelingsAF.
                                                      of the argument a. A similar analysis shows that there are
   The following properties summarize the relations be-
                                                      eight possible partial refutations, one of which is shown on
tween the set and labeling approach.


                                                IJCAI-07
                                                   624the right in the figure. Each possible partial refutation is tending the set of justified arguments of the input labeling in
determined by a choice between the two b's at attack level 1 a minimal way, such that all defeated arguments of the input
followed by two choices from a pair of d's at attack level 3. labeling are attacked by the justified arguments:

                                                           ExtendByDefense((J, D)) := {(J', D)  LabelingsAF | J'
                                                           is a conflict-free, minimal set of arguments  J, such
                                                           that for all arguments Arg in D there is an argument
                                                           Arg' in J' that attacks Arg}2
                                                      Extension by defense returns a set of labelings that can
                                                      contain zero, one or several elements. The following exam-
                                                      ple illustrates the two functions.
                                                      Example (7). Consider the argumentation framework AF =
                                                      {a b1 b2, b1 c1 c2, b2 c3 c4, c1 d1 d2, c2 d3 d4, c3 d5 d6,
                                                      c4 d7 d8}. It corresponds to the attack graph shown in Fig-
                                                      ure 1, assuming that there are no further arguments and at-
         Figure 1: a possible partial proof and refutation tacks than the ones shown. Some representative examples of
          for a three levels deep part of an attack graph applying the two functions for this framework are as fol-
   Note that possible partial proofs and refutations are in- lows. They result from the repetitive application of the two
deed only possible, in the sense that they are not necessarily functions starting with the labeling a(), in which a is justi-
the part of an actual proof or refutation. The unshown parts fied, as a 'seed':
of the attack graph may obstruct a possible partial proof or ExtendByAttack(a ()) = {a (b1 b2)}
refutation from being extended to an actual one. For in-  ExtendByDefense(a ()) = {a ()}
                                                          ExtendByAttack(a (b1 b2)) = {a (b1 b2)}
stance, the shown possible partial proof (on the left) is not ExtendByDefense(a (b1 b2)) = {a (b1 b2) c1 c3, a (b1
an actual partial proof if the figure already shows all attack-  b2) c1 c4, a (b1 b2) c2 c3, a (b1 b2) c2 c4}
ers of the argumentation framework since, in that case, there ExtendByAttack(a (b1 b2) c1 c3) = {a (b1 b2) c1 c3
is no way of defending against the d's. Using the terminol-      (d1 d2 d5 d6)}
ogy associated with labelings, the defeat of the d's cannot be ExtendByDefense(a (b1 b2) c1 c3) = {a (b1 b2) c1 c3}
justified. Similarly, the shown possible partial refutation is ExtendByAttack(a (b1 b2) c1 c3 (d1 d2 d5 d6)) = {a
                                                                 (b1 b2) c1 c3 (d1 d2 d5 d6)}
not an actual partial refutation if for instance d1 has exactly ExtendByDefense(a (b1 b2) c1 c3 (d1 d2 d5 d6)) = 
one attacker that is itself unattacked.               Starting with the labeling (a) in which the argument a is
   Notwithstanding this possibility of possible partial defeated, the following are found:
proofs and refutations becoming 'blocked' by knowing more ExtendByAttack((a)) = {(a)}
about the attack graph, each is genuinely possible, in the ExtendByDefense((a)) = {(a) b1, (a) b2}
sense that there exist extended attack graphs in which a pos- ExtendByAttack((a) b1) = {(a) b1 (c1 c2)}
sible partial proof or refutation is actualized. For instance, ExtendByDefense((a) b1) = {(a) b1}
                                                          ExtendByAttack((a) b1 (c1 c2)) = {(a) b1 (c1 c2)}
the possible partial proof shown is realized when the attack ExtendByDefense((a) b1 (c1 c2)) = {(a) b1 (c1 c2) d1
graph contains exactly one unattacked attacker for each of       d3, (a) b1 (c1 c2) d1 d4, (a) b1 (c1 c2) d2 d3,
the defeated D's, and the possible partial refutation is actu-   (a) b1 (c1 c2) d2 d4}
alized when the attack graph is already complete.         ExtendByAttack((a) b1 (c1 c2) d1 d3) = {(a) b1 (c1
   The discussion of the possible partial proofs in this ex-     c2) d1 d3}
ample provides a good illustration of the computational ap- ExtendByDefense((a) b1 (c1 c2) d1 d3) = {(a) b1 (c1
                                                                 c2) d1 d3}
proach in this paper. Formally, two functions on labelings
                                                      The functions ExtendByAttack and ExtendByDefense can be
are central in the algorithm: ExtendByAttack and ExtendBy-
                                                      extended to (LabelingsAF) (LabelingsAF) by stipulating
Defense. Both return a set of labelings given a labeling as
                                                      the following (where L denotes a set of labelings):
                                          
input. The function ExtendByAttack: LabelingsAF (La-      ExtendByAttack(L) := {(J, U) | There is a (J', U')  L,
belingsAF) adds all attackers of the justified arguments of a such that (J, U)  ExtendByAttack((J', U'))}
labeling to the set of defeated arguments:                ExtendByDefense(L) := {(J, U) | There is a (J', U')  L,
     ExtendByAttackAF((J, D)) := {(J, D')  LabelingsAF | D'  such that (J, U)  ExtendByDefense((J', U'))}
     is the set D extended with all arguments attacking ar- We can now formally define the partial proof and partial
     guments in J}                                    refutation options of an argument in an argumentation
The function ExtendByAttack returns a set of labelings that framework. They are the labelings that result from the alter-
contains one element or is empty. ExtendByAttackAF(J, D) is
                                                      nating application of the (nonmonotonic) functions Extend-
empty if and only if J is self-attacking: if one of the attack-
ers of an argument in J is an element of J, then (J, D'), where
                                                         2
D' is as in the definition of the function, is not a labeling A somewhat more exact, but less readable wording of the
                                                      constraint on sets J' is the following: J' is a conflict-free set of ar-
since this requires that J  D' is empty.
                                                      guments that is minimal with respect to set inclusion among the
   The function ExtendByDefense: LabelingsAF (La-
                                                      sets of arguments J'' for which it holds that for all arguments Arg in
belingsAF) returns the set of labelings that result from ex- D there is an argument Arg' in J' that attacks Arg.


                                                IJCAI-07
                                                   625ByAttack and ExtendByDefense, starting with different seeds Partial proof options
                                                      0:  a
(where n ranges over the natural numbers 0):         1:  a (b c)
   PartialProofOptions0(Arg) := {Arg ()}              2:  a (b c) e h
   PartialProofOptions2n+1(Arg) := ExtendByAt-            a (b c) e j a attacks j

       tack(PartialProofOptions2n(Arg))                   a (b c) e k
                                                          a (b c) f h f attacks itself
   PartialProofOptions2n+2(Arg) := ExtendByDe-
                                                          a (b c) f j a attacks j
       fense(PartialProofOptions2n+1(Arg))
                                                          a (b c) f k f attacks itself
                                                      3+: a (b c) e h (g), a (b c) e k (g)
   PartialRefutationOptions0(Arg) := {(Arg)}          Partial refutation options
   PartialRefutationOptions2n+1(Arg) := ExtendByAt-   0:   (a)
       tack(PartialProofOptions2n(Arg))               1:   (a) b, (a) c

   PartialRefutationOptions2n+2(Arg) := ExtendByDe-   2:   (a) b (h j k), (a) c (e f)
                                                      3+:  (a) b (h j k) a a is justified & defeated
       fense(PartialProofOptions2n+1(Arg))
                                                           (a) c (e f) f g f is justified & defeated
The elements of PartialProofOptionsn(Arg) are referred to as
                                                      Example (10). AF={ab,bc1c2,c1d,c2e,dc1c2,ec1
the partial proof options of the argument Arg at attack level
                                                      c2}. This argumentation framework shows how the labeling
n , the elements of PartialRefutationOptionsn(Arg) are its
                                                      approach deals with 'dependent choices'. When trying to
partial refutation options at attack level n.
                                                      credulously prove a, a choice between c1 and c2 must be
  Definition (8). A proof option is a labeling (J, D), such
                                                      made in order to defend against b. Further down the attack
  that there is an n0 0, such that for all n  n0 it holds that
                                                      graph, again a choice between c1 and c2 becomes available
  (J, D)  PartialProofOptionsn(Arg).Arefutation option is
                                                      (to defend against d and e). In a minimal proof, the choice
  a labeling (J, D), such that there is an n0 0, such that for
                                                      must be kept constant, as actually happens in our labeling
  all n  n0 it holds that (J, D )  PartialRefutationOp-
                                                      approach:
  tions (Arg)
      n    .                                          0: a; 1: a (b); 2: a (b) c1, a (b) c2; 3+: a (b) c1 (d), a (b)
The lowest value of n0 as in this definition is the depth of c2 (e)
the proof or refutation option.                       Since d is already attacked by c1 in the partial proof option
  It holds that, if (J, D) is a proof or refutation option, then a (b) c1 (d) that appears at the third level, the c2-option of
(J, D)  ExtendByAttack((J, D)) and (J, D)  ExtendByDe- attacking d is not considered.
fense((J, D)).                                          We will show that partial proof and refutation options in-
Example (7), continued. The following table shows that deed produce proofs and refutations. The following lemma
there are no proof options and eight refutation options for is needed.
the argument a.                                         Lemma (11).  1. If (J, D) is a conflict-free labeling, then
Partial proof options
                                                        the elements of ExtendByAttack((J, D)) and ExtendBy-
0: a
1: a (b1 b2)                                            Defense((J, D)) are conflict-free.
2: a (b1 b2) c1 c3, a (b1 b2) c2 c3,  a (b1 b2) c1 c4, a (b1 b2) c2 c4 2. A conflict-free labeling (J, D) is attack-complete if and
3: a (b1 b2) c1 c3 (d1 d2 d5 d6), a (b1 b2) c2 c3 (d3 d4 d5 d6),
                                                              ExtendByAttack((J, D)) = {(J, D)}
  a (b1 b2) c1 c4 (d1 d2 d7 d8), a (b1 b2) c2 c4 (d3 d4 d7 d8) only if                     .
4: none, since the d's cannot be defended against       3. A conflict-free labeling (J, D) has justified defeat if
Partial refutation options                              and only if (J, D)  ExtendByDefense((J, D)).
0: (a)                                                                                                  
1: (a) b1, (a) b2                                       4. If (J, D) is a conflict-free labeling, such that (J, D)
2: (a) b1 (c1 c2), (a) b2 (c3 c4)                       ExtendByAttack((J, D)) and (J, D)  ExtendByDefense((J,
3+: (a) b1 (c1 c2) d1 d3, (a) b1 (c1 c2) d1 d4,         D)), then J is admissible.
  (a) b1 (c1 c2) d2 d3, (a) b1 (c1 c2) d2 d4,
  (a) b2 (c3 c4) d5 d7, (a) b2 (c3 c4) d5 d8,           Proof omitted.
  (a) b2 (c3 c4) d6 d7, (a) b2 (c3 c4) d6 d8            Theorem  (12). If (J, D) is a proof or refutation option,
Example (9). AF={abc,bhjk,cef,eg,ff,ge,ja}.             then J is admissible.
This example is used by Cayrol, Doutre & Mengin [2003,  Proof. Proof and refutation options are the result of the
p. 379] to illustrate their approach in terms of dialogues. It consecutive application of the functions ExtendByAttack
further illustrates that partial proof and refutation options and ExtendByDefense starting from seeds that are con-
are gradually constructed and can be discarded. The table flict-free. Since the functions maintain conflict-freeness
below shows that there are two proof options and no refuta- (Lemma (11) under 1), proof and refutation options are
tion options for the argument a. The computation of the conflict-free. Since proof and refutation options are by
proof options is complete after the second level. Since b has definition fixed points of the functions ExtendByAttack
three attackers and c has two, there are six possible labelings and ExtendByDefense as in Lemma (11) under 4, the
that must be considered. Four of them are immediately dis- theorem follows.
carded since they are not conflict-free. The remaining two Theorem (13). Let AF be a finite argumentation frame-
are proof options that correspond to the two minimal admis- work, J a set of arguments of the framework and D the set
sible sets containing a. The computation of the refutation of arguments attacking arguments in J.
options shows that none remain from the third level onward. 1. If J is a proof of an argument Arg, then (J, D) is a proof
Indeed there exists no admissible set attacking a.      option for Arg.


                                                IJCAI-07
                                                   626  2. If J is a refutation of an argument Arg, then (J, D) is a has no refutation, then there is an n0 0, such that for all

  refutation option for Arg.                            n  n0 it holds that PartialRefutationOptionsn(Arg) = .
  Proof. 1. Let J be a proof of Arg. We inductively con- On the basis of the above, an algorithm can be built that
  struct a sequence (J(n), D(n)) for natural numbers n =0, computes proof options of minimal depth for an argument
  1, 2, ..., as follows:                              Arg given a finite argumentation framework AF:
    J(0) := {Arg}                                        Step 0: L := {Arg ()}.
    J(2n+1) := J(2n)                                     Step 1: L' := ExtendByDefense(ExtendByAttack(L)).
    J(2n+2) := some minimal subset of J that defends     Step 2: If there is a labeling (J, D)  L'  L, then re-
       against all elements of D(2n+1)                   turn L'  L.
    D(0) :=                                             Step 3: If L = L', then stop and return L.
    D(2n+1) := D(2n)  {Arg' | Arg' attacks an argument  Step 4: Goto step 1.
       in J(2n)}                                      For finite argumentation frameworks, the algorithm stops
    D(2n+2) := D(2n+1)                                since extension by attack and by defense either discards a
  The J(2n+2)-step is non-constructive, but can be made by labeling, keeps it constant or increases the set of labeled
  the admissibility of J. It follows by induction from the arguments in the labeling. When Arg has a proof, the algo-
  definitions and from the admissibility of J that, for all n, rithm returns the proof options for Arg of minimal depth.
                                               
  (J(n), D(n))  PartialProofOptionsn(Arg) and J(n) J. When  Arg has no proof, the algorithm returns the empty set
  When  n is larger then the depth of the attack graph (de- (Corollary (17)). By leaving out Step 2, the algorithm re-
  fined as the maximum length of a non-looping or mini- turns all proof options of Arg, hence all its proofs (Theorem
                            3
  mally looping attack sequence ), we have that J(n)=J (13)). When Step 0 is replaced by L:={(Arg)}, the algo-
  (this uses the minimality of J), and (J(n), D(n+1)) = (J, rithm computes refutation options.
  D) is a proof option. The proof of the second part is similar. The algorithm has been implemented (in Delphi 7 under
Example (14). AF={ab,bce,cd,de}.This example          Windows XP) and tested using a set of test examples. It
shows that sometimes a proof option contains redundant computes all proof and refutation options for all arguments
justified arguments, and hence does not correspond to a of a given argumentation framework. One detail of the im-
proof (which by definition must be minimal). The argument plementation is not obvious: the way in which extension by
a has two proof options, viz. ace(bd)and a e (b), while attack and by defense has actually been implemented. The
only the latter corresponds to a proof. The non-minimally algorithm keeps track of the newly labeled arguments. For
admissible set {a c e} arises since an early choice of de- extension by attack, only attackers of the arguments newly
fense turns out to be redundant further down the attack tree. labeled as justified are added. For extension by defense,
The trace of partial proof options of a is as follows: only defenses against the arguments newly labeled as de-
0: a; 1: a (b); 2: a (b) c, a (b) e; 3: a (b) c (d), a (b) e; feated are added. To find minimal defense sets as in the
4+: a (b) c (d) e, a (b) e                            definition of extension by defense, the minimality is
The choice of c at level 2 becomes obsolete. Note also that
                                                      checked of all sets that contain exactly one attacker against
the proof option a e (b) is already complete at level 2.
                                                      all arguments that are newly labeled as defeated and that are
Example (15). AF = {a b, b c1 c2, c1 d1 d2 d3, c2 d4, d1
                                                      not yet attacked by a justified argument.
e1, d2 e2, d3 e3, d4 e1, e1 f1 f2, e2 f3, f1 c2, f2 e2, f3
                                                                    DOUBLE(n):={a     a    a    ,a   a
e3}. This example shows that a proof option of minimal Example (18).                i0 (i+1)0 (i+1)1 i1 (i+1)0
                                                                                                    
depth does not necessarily have a minimal set of justified a(i+1)1 | i = 0, ..., n - 1}. DOUBLE*(n) := DOUBLE(n) {ai0
arguments, hence does not necessarily return a proof. This bi | i = 1, ..., n}. This example illustrates the exponential
argumentation framework has two proof options for the ar- complexity of the computation of proof options (cf. the re-
                                                      sults by Dunne & Bench-Capon [2003]). The number of
gument a. The first is a (b) c1 (d1 d2 d3) e1 e2 e3 (f1 f2
                                                      proof/refutation options of DOUBLE(n) grows exponentially,
f3) c2 (d4) of depth 7, the second is a (b) c2 (d4) e1 (f1 f2)
                                                      while DOUBLE*(n) has only one proof option or one refu-
e2 (f3) e3 of depth 8. The latter has {a, c2, e1, e2, e3} as
                                                      tation option. The nature of DOUBLE*(n) is such that it
set of justified arguments, which is a proper subset of {a,
                                                      may be necessary to consider all (partial) proof/refutation
c1, c2, e1, e2, e3}, the set of justified arguments of the
                                                      options of DOUBLE(n) to find this unique solution.
former. Hence, the only proof of a corresponds to the deeper
                                                      Example (19). DEEP&WIDE(n, m):={ab,bci0,cij   dij,dkj
proof option.
                                                      c(k +1)j | i = 0, 1, ..., n -1;j = 0, 1, ..., m -1;k = 0, 1, ...,
  Corollary (16). If Arg has no proof, then Arg has no proof m - 2}. DEEP&WIDE*(n, m) := DEEP&WIDE(n, m)  {b z}.
  options. If Arg has no refutation, then Arg has no refuta- This example illustrates the possible advantage of the
  tion options.                                       breadth-first character of our approach. The argument a has
  Corollary (17). For finite argumentation frameworks, if exactly one proof {a, z}. It corresponds to the proof option
  Arg has no proof, then there is an n0 0, such that for all a (b) z. The c-defenses against b all fail at the end of the c-d
                                           
  n  n0 it holds that PartialProofOptionsn(Arg)= .IfArg sequences, since the final d's cannot be defended against.
                                                      Since the proof option has depth 2, our approach quickly
                                                      finds it. Of course, the full width of the example (which
   3 An attack sequence is minimally looping of it is not non-
                                                      increases with the parameter n) must be considered at attack
looping, while all its proper initial parts are.


                                                IJCAI-07
                                                   627