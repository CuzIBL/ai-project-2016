 Bin-Completion       Algorithms      for Multicontainer      Packing    and   Covering    Problems

                                  Alex S. Fukunaga,   Richard  E. Korf
                                     Computer  Science  Department
                                 University of California, Los Angeles
                                fukunaga@cs.ucla.edu,  korf@cs.ucla.edu


                    Abstract                            In this paper, we consider complete algorithms for ﬁnding
                                                      optimal solutions to multicontainer packing problems. Multi-
    Bin-completion, a bin-oriented branch-and-bound   container packing problems are generally strongly NP-hard
    approach, was recently shown to be promising for  [Garey and Johnson, 1979] (including all of the problems
    the bin packing problem. We propose several im-   covered in this paper). Therefore, state of the art, complete
    provements to bin-completion that signiﬁcantly im- algorithms for ﬁnding optimal solutions are based on branch-
    proves search efﬁciency. We also show the gen-    and-bound. In contrast, note that single-container problems
    erality of bin-completion for packing and cover-  such as the classical 0-1 knapsack problem are weakly NP-
    ing problems involving multiple containers, and   hard, and pseudopolynomial time dynamic programming al-
    present bin-completion algorithms for the multiple gorithms exist (c.f. [Kellerer et al., 2004]).
    knapsack, bin covering, and min-cost covering (liq- Previous branch-and-bound algorithms for these problems
    uid loading) problems that signiﬁcantly outperform have tended to be “item-oriented”. For example, the classi-
    the previous state of the art. However, we show that cal algorithm for bin packing is the Martello and Toth algo-
    for the bin packing problem, bin-completion is not rithm [Martello and Toth, 1990]. Items are considered one
    competitive with the state of the art solver.     at a time. Each node in the search corresponds to a decision
                                                      regarding the assignment of an item to some non-full con-
                                                      tainer. In contrast, bin-completion is a “bin-oriented” branch-
1  Introduction                                       and-bound strategy, where a node represents an assignment
Many NP-hard problems involve packing some set of dis- of a set of items to a single container. In addition to standard
crete objects into multiple containers (“bins”). In one class branch-and-bound pruning methods, a combinatorial domi-
of problems, the objective is to pack some items into a set of nance criterion is used to prune search.
containers without exceeding the containers’ capacities. In a This paper begins by reviewing the previous work on bin-
related class of problems, the goal is to cover a set of con- completion. We then propose several improvements, in-
tainers by ﬁlling them up to at least some minimal level using cluding a generalization of the nogood pruning method pro-
a set of items. When both the containers and the items are posed in [Korf, 2003] that signiﬁcantly improves search efﬁ-
modeled as one-dimensional objects (possibly with an associ- ciency. We demonstrate the generality of the bin-completion
ated cost/value function), we refer collectively to these prob- approach by presenting new bin-completion algorithms for
lems as one-dimensional, multicontainer packing and cover- the multiple knapsack, bin covering, and min-cost covering
ing problems, or multicontainer packing problems in short. problems that signiﬁcantly outperform the state of the art al-
Multicontainer packing problems are ubiquitous, and model gorithms.
many AI applications including the allocation and rationing
of resources or tasks among a group of agents, as well as op- 2 Bin-Completion
erations research problems such as cargo loading and trans- Bin-completion is a bin-oriented branch-and-bound strategy
port.                                                 that exploits dominance properties to reduce the search space.
  The most widely studied instance of a problem in this class For clarity, we describe the bin-completion algorithm and our
is the bin packing problem: Given a set of items (numbers), extensions in the context of the bin packing problem due to its
and a ﬁxed bin capacity, assign each item to a bin so that the familiarity and simplicity, although the focus of our empirical
sum of the items assigned to each bin does not exceed the bin work is on other multicontainer problems.
capacity. For example, given the set of items 6, 12, 15, 40, A feasible set is a set of items whose sum satisﬁes the ca-
43, 82, and a bin capacity of 100, we can assign 6, 12, and pacity constraint (i.e., does not exceed the bin capacity). We
82 to one bin, and 15, 40, and 43, to another, for a total of say that a feasible set or bin assignment is maximal if no addi-
two bins. This is an optimal solution to this instance, since tional item can be added to the set without making the set in-
the sum of all the items, 198, is greater than 100, and hence feasible. The items are sorted in decreasing order of size. We
at least two bins are required.                       then generate maximal, feasible sets that include the largestitem. If there is more than one such set, the search may branch was apparently not investigated further until recently.
at that point. Each node of the search tree, except the root The BISON algorithm for bin packing by Scholl, Klein,
node, represents a complete, feasible assignment of items to and Jurgens [Scholl et al., 1997] is a hybrid algorithm that in-
a particular bin. The children of the root represent different tegrates a suite of complex lower bounding procedures, upper
ways of completing the bin containing the largest item. The bounding heuristics, and a branch-and-bound algorithm. The
nodes at the next level represent different complete, feasible branch-and-bound component of BISON is a bin-completion
sets that include the largest remaining item, etc. The depth algorithm where each node corresponds to a maximal, feasi-
of any branch of the tree is the number of bins in the cor- ble bin assignment. A very limited form of the Martello-Toth
responding solution. Bin-completion is a branch-and-bound dominance criterion is applied, as follows. If a maximal, fea-
algorithm. It starts with an upper bound, such as the best- sible bin assignment has a pair of items that can be replaced
ﬁt decreasing solution, and applies a lower-bound heuristic by single unassigned item without decreasing the sum of the
function to prune the search. Rather than assigning items one assignment, then it is dominated, and this node can be pruned.
at a time to bins, it branches on the different maximal, feasi- Korf implemented a bin-completion algorithm for bin
ble sets that can be assigned to each bin.            packing using the full Martello and Toth dominance cri-
  The key to making bin-completion efﬁcient is the use of a terion, and showed that it signiﬁcantly outperformed the
dominance criterion on the maximal, feasible sets that allows Martello-Toth item-oriented branch-and-bound algorithm


us to only consider a small subset of them.           [Korf, 2002]. Further improvements were achieved by using


      
                                             ¡
  Let  and ¡ be two feasible sets. If the elements in can a more efﬁcient algorithm for generating the undominated bin
be partitioned into subsets, and these subsets can be matched assignments, and nogood pruning (see below) [Korf, 2003].
to the elements of   such that the sum of the elements in
each subset doesn’t exceed the corresponding element of   ,

                                                      3   Extensions  to Bin-Completion


then set dominates set ¡ . In other words, if the elements
                                                      3.1  Nogood  Dominance   Pruning


of ¡ can be packed into bins whose capacities are the ele-


                   



ments of , then set dominates set ¡ . For example, let Suppose we have a bin packing instance with the numbers


 £¢¥¤§¦©¨
¨
¨ ¢¤
¨
¨


¦
                      ¡


               and let                      . Parti-  10,9,8,7,7,3,3,2,2, and bin capacity c=20. Let ¡%$ represent


                   ¤
¨ ¤§¦ ¤¨




                                                                                  ¤          ¤     
    ¡


tion  into the subsets   ,    , and          . Since  a bin assignment at depth & . 10,8,2 and 10,7,3 are


          ¦  ¨    ¨ !! ¨  


                                                                                                       ¢


                              


5 + 10 20,       , and              , set dominates   two undominated feasible bin assignments, and thus ¡('




                                                                      ¢+¤¨
,
*
                                                      ¤¨
*)
*¦


   ¡
                                                                    '
set . Given all the feasible sets that contain a common ele-   and ¡            are two possible assignments


ment " , only the undominated sets need to be considered for of the bin (node) at depth 1.

assignment to the bin containing " . The reason is that if we Korf [Korf, 2003] proposed the following nogood pruning



complete the bin containing " with a dominated set, then we technique. After exhausting the subproblem below the as-


                                                                  ¢£¤¨
)
¦
                                                                '


could swap each subset of items in the dominated set with the signment ¡    , and while exploring the subprob-
                                                                               ¢.¤¨
,





corresponding element of the dominating set, and get another lem below the assignment ¡-' , assume we ﬁnd a


                                                                                                    ¤)
¦
                                                                           ¢1¤2
)
*¦




solution without increasing the total number of bins. solution that assigns ¡0/     . We can swap the


                                                                     ¤§,



                                                                                 '
                                                                               ¡


  This dominance criterion was proposed by Martello and from ¡3/ with the from    , resulting in a solution with


                                                         ¢5¤¨
*)
¦     ¢6¤2
,



                                                      ¡4'                   ¡


Toth [Martello and Toth, 1990], and was used in their branch-       and and  /          . However, we have
                                                                                          ¢7¤¨
)
¦


and-bound algorithm for bin-completion. However, their already exhausted the subtree below ¡%'      , and
branch-and-bound algorithm was item-oriented, and they therefore, we can prune this branch because it is redundant.
only exploit this dominance property in a limited way. In In general, given a node with more than one child, when


particular, they take each item # , starting with the largest ele- searching the subtree of any child but the ﬁrst, we don’t
ment, and check if there is a single assignment of one or two need to consider bin assignments that assign to the same bin


more elements that dominates all feasible sets containing # . all items used to complete the current bin in a previously-




If so, they place # with those elements in the same bin, and explored child node, except for the largest element. More


                                                                  ¤8 
*8 
9:9;9;
8%<-
                                                                    '


apply the reduction to the remaining subproblem. They also precisely, let /      be a set of brother nodes in


                                                                          ¤§= 
*= 
9;9;9:
=><-
                                                                            '
use dominance relations to prune some element placements the search tree, and let /     be the sets of items
as well. Korf’s bin-completion algorithm [Korf, 2002] makes used to complete the bin in each node, excluding the ﬁrst item


much greater use of the Martello-Toth dominance criterion. assigned to the bin, which is common to all the brother nodes.


                                                                                        8@?
                                                                                                  




In particular, when branching on the completion of any bin, it When searching the subtree below node for ACB : for all
                                                                                        ¡


only considers undominated completions.               #EDFA , we exclude any bin assignment that (1) includes
                                                                                                  =IG


  Historically, the ﬁrst bin-completion algorithm we are all the items in =HG in the same bin, and (2)swapping from


                                                                     =J?  8%?


aware of was proposed by Christoﬁdes, Mingozzi, and Toth ¡ with the items in results in two feasible bin assign-
in 1979 for the liquid loading problem, which we call the ments. By rejecting these bin assignments as redundant, the
min-cost covering problem (see Section 6) [Christoﬁdes et number of node generations is reduced.
al., 1979]. Although their algorithm performs a bin-oriented We now propose an extension to this idea that allows prun-
branch-and-bound which considers only undominated com- ing even more nodes, which we call nogood dominance prun-


pletions, they use a much weaker dominance criterion (see ing, or NDP. Suppose that after exhausting the subproblem
                                                                            ¢K¤¨
)
¦




Section 6). However, subsequent research in branch-and- below the assignment ¡4'       , and while exploring


                                                                                          ¢L¤¨
,

                                                                                         '


bound algorithms for multicontainer problems focused on the subproblem below the assignment ¡        , we
                                                                               ¢M¤2
N,
¦


item-oriented approaches, and the bin-completion approach consider the assignment ¡0/   . We  can swap the

¤§,
*¦             ¤§,
*


                                  '
                                 ¡


      from ¡3/ with the     from    and end up with   tend to be easily solved using heuristics such as best-ﬁt de-


                     ¢  ¤¨
N,
¦ ¢  ¤2
N,
*


                   '
                                    ¡3/
a solution with the ¡           and               .   creasing. The solution found by the heuristic often equals the


However, according to the Martello-Toth dominance crite- lower bound, and therefore no search is required, and hence


        ¢¥¤¨
,
*¦           ¢¤¨
*)
¦
                                 ¡4'
rion, ¡4'          is dominated by            , and   there is no need to compute undominated completions. How-


we have already exhausted the search below the node with the ever, for the other three problems we considered, we have ob-


               ¢  ¤¨
)
*¦
              '
subtree under ¡           , so we can prune the search served that it is much less likely that heuristics will match the


because it is not possible to improve upon the best solution optimistic bound and allow termination without search, and


        ¢ ¤¨
*)
¦
                                                                                           &
under ¡4'         .                                   we have found that for instances with high , the algorithm
  In general, given a node with more than one child, when would either take a very long time to complete, or not termi-
searching the subtree of any child but the ﬁrst, we don’t need nate within a reasonable time limit because it was spending an
to consider assignments that are dominated by a bin assign- inordinate amount of time computing the set of undominated


ment in a previously-explored child node. More precisely, completions at each node. Another signiﬁcant drawback of


                                 8 ?       
                                         B
when searching the subtree below node for A , we ex-  completely enumerating the undominated bin assignments at


clude any bin assignments that are dominated by the items each node is the memory required to store all of them.


   G


  =
           DA
in  , for #   . Note that an assignment dominates itself. An alternative approach is to start to go down the search


Thus, no bin completion below node 8@? can be dominated by tree and explore the children of a node without ﬁrst enumerat-


           G


          =


                  D A
the items in , for # .                                ing and sorting the children. In cases where a good optimistic
  Nogood dominance pruning is strictly more powerful than bound (i.e., lower bound for bin packing, and upper bound
Korf’s nogood pruning. Any node pruned by nogood prun- for bin covering and multiple knapsack) is available, and it
ing will be pruned by NDP, but not vice versa. Of course, takes relatively little search to ﬁnd an optimal solution, this
since NDP must detect dominance relationships as opposed to approach can result in signiﬁcant speedups compared to the
equivalence relationships, NDP will incur more overhead per original scheme of generating all completions before going
node compared to nogood pruning. Our current implemen- further down the search tree.
tation propagates a list of nogood sets along the tree. While On the other hand, we have observed that the value-
generating the undominated completions for a given bin, we ordering strategy used to sort the undominated children of
check each one to see if it is dominated by any current no- a node has a signiﬁcant impact, and if we simply traverse
good. If so, we ignore that bin-completion.           the search tree depth-ﬁrst without ﬁrst enumerating and sort-
  Since the size of the nogood list increases with depth, and ing the children, we lose the beneﬁts of ordering the search
we compare each bin-completion against each nogood, the tree according to the value-ordering heuristic. The negative
per-node overhead of NDP increases with depth. This means impact of this can be alleviated by a hybrid strategy that gen-
that pruning at the bottom of the tree (where pruning has the erates a small number of children, applies the value-ordering
lowest utility) is more expensive than pruning at the top of the heuristic to these, then recursively calls bin-completion on
tree (where pruning has the highest utility). A simple strategy the remaining subproblem. We call this the hybrid incremen-
which address this issue is depth-limited NDP, where NDP tal branching strategy.


pruning is applied only at nodes down to the NDP depth limit Note that even in the absence of an explicit value ordering
¡
 . At nodes below the depth limit, Korf’s original nogood strategy, the algorithm used to generate the undominated chil-
pruning technique is applied.                         dren (for each problem, we use an adaptation of the algorithm
  In this section, we have described nogood pruning and given by Korf [Korf, 2003]) imposes an implicit ordering on
NDP in the context of the bin packing problem. Adaptations the undominated assignments. We are currently evaluating
of the technique for the multiple knapsack and bin cover- various combinations of hybrid incremental branching and
ing problem are straightforward, given the dominance criteria various value ordering strategies, and the choices reported
used for these other problems.                        in this paper for value ordering strategies and the number of
                                                      undominated assignments generated at once in hybrid incre-
3.2  Further modiﬁcations  to the search algorithm    mental branching are preliminary.
In Korf’s algorithm for bin packing, at each node, the un-
dominated feasible bin assignments are generated, and sorted 4 The Multiple Knapsack Problem
according to decreasing sum. The algorithm branches on the
completions according to the sorted order. In other words, a The Multiple Knapsack Problem (MKP) is a generalization of




largest-sum-ﬁrst value ordering heuristic is being applied at the classical 0-1 Knapsack Problem. Consider ¢ bins of ca-


                                                               
  
9;9:9;
 <


                                                              '


                                                                £ /  £             ¤


each node.                                            pacities £        . and a set of items that have a weight


                                                         
9:9;9;
          
9:9;9;



                                                      ¥     ¥§¦                  ¦


                                                        '                  '
                                                                                ¨
  An issue with enumerating all undominated completions         and a proﬁt ¨     . The goal of the MKP is
and applying value ordering is that computing the undom- to assign some subset of the items to each bin such that: (1)
inated sets is itself NP-complete. Korf [Korf, 2003] gives each item is assigned to no more than one bin, and (2) the
an algorithm that generates all and only undominated bin- sum of the weights of the items assigned to a bin does not
completions, without the need to generate dominated comple- exceed the bin’s capacity, and (3) the total proﬁt of the items


tions as intermediate results. Let & be the average number of that are assigned to a bin are maximized. For example, sup-
items that ﬁt in a container. The time to generate all undom- pose there are two bins with capacity 10 and 7, and 4 items


inated feasible assignments of a bin increases with & . This (9,3),(7,3),(6,7),(1,5), where the ﬁrst element of each pair is


is not an issue for bin packing, where problems with large & the weight of the item and the second element is the proﬁt

                                                                                    G      G
                                                                                          ¥



of that item. The optimal solution to this MKP instance is ered: (1) uncorrelated instances: ¨ and are uniformly


                                                                                                    G
                                                                                                  ¥



to assign (9,3) and (1,5) to the bin with capacity 10, and the distributed in ¨ , (2) weakly correlated instances: uni-
                                                                                      G




item (6,7) to the bin with capacity 7. The MKP has numerous formly distributed in [10,1000] and ¨ randomly distributed


                                                           G
© 22
 G4 22         GM


                                                         ¥        ¥



industrial applications. For example, the problem of loading in [        ] such that ¨   , (3) strongly cor-


                                                                       G


                                                                     ¥
                              ¤


¢ vehicles with cargo selected from items in order to max- related instances: uniformly distributed in [10,1000] and




                                                       G                                            G
                                                            G




                                                         ¢
                                                                ¨


                                                                                                   ¥
                                                           ¥



imize the value of the transported items is a MKP instance. ¨    , and (4) multiple subset sum instances: uni-


                                                                                     G3¢  G
                                                                                         ¥



                                                      formly distributed in [10,1000] and ¨ . The bin capac-


                                                                                      © 


                                                                                                   ?


                                                                                    ¢              £
                                                                                                ¦


4.1  The Mulknap   Algorithm                          ities were set as follows: The ﬁrst¦ capacities were


                                                                                      G¡           G


                                                                            ¨9        
*¨9 


                                                                                 G            G


                                                                                    ¥              ¥


                                                                                       ¢             ¢
                                                                                                  '


The state of the art algorithm for the MKP is Pisinger’s Mulk- uniformly distributed in '


                                                          ¢+
9:9;9;
 ©              <            < ¢


                                                                     <


                                                                 ¢                     £            £
            [            ]                               A



nap algorithm Pisinger, 1999 . Mulknap is a branch-and- for ¦          . The last capacity is chosen as


                                                                G




                                                      ¨9 
                                                                 ©        ?




                                                         
                                                                   


                                                                        '




                                                           G
                                                                      


                                                                     ?
                                                               ¥




bound algorithm, where each node represents a decision as                £
                                                             '


                                                                       '   to ensure that the sum of the capaci-
                                                                                               
to which bin to place an item into, or to leave it out en-                                   ©
                                                      ties is half of the total weight sum (if the ﬁrst ¢ capacities
tirely. There are several well-known upper bounds for the exceeded half the total weight, the instance was discarded).
MKP. Recent algorithms, including Mulknap, rely on the For each problem class, 30 instances were generated for vari-


solution of the Surrogate relaxed Multiple Knapsack Prob-
                                                                       ¤
                                                      ous values of ¢ and . Trivial instances were discarded as in
lem (SMKP) instance [Martello and Toth, 1990], which is [Pisinger, 1999]. The class of uniform, random instances that
a single-container 0-1 Knapsack problem where the items require the most search for branch-and-bound solvers appear


are the same as for the original MKP instance, but there is               
                                                                           ¢
                                                      to be generated when ¤ is relatively low [Pisinger, 1999;


a single container whose capacity is the sum of the capaci-                           
                                                                                       ¢
                                                      Martello and Toth, 1990]. Thus, the ¤ ratio for the MKP
ties of the containers in the original MKP instance. Although appears to be a critical parameter that determines search dif-


the 0-1 Knapsack problem is also NP-complete (weakly NP-                                              
                                                                                                       ¢
                                                      ﬁculty. Pisinger has shown that for problems with high ¤
complete, since there is a pseudopolynomial algorithm), this ratio, Mulknap is highly effective, solving very large in-
upper bound computation is very fast in practice. At each stances almost instantaneously with little or no search (when


node, Mulknap attempts to validate the upper bound for the
                                                                                   ¢
                                                      ¤ ranged from 200 to 100,000, and ranged 5 or 10). On the


remaining subproblem by distributing the set of items chosen          
                                                                       ¢
                                                      other hand, small ¤ ratios between 2-3 result in the hardest
as the solution for the SMKP into the bins. If such a distribu- problems. We therefore focus on these hard problems.
tion is possible without violating the bin capacities, then the On each instance, we ran Mulknap, bin-completion,
upper bound has been achieved, and we can backtrack with- and bin-completion with Nogood Dominance Pruning
out further search down the current branch. The distribution (BC+NDP). For comparison, we used Pisinger’s Mulknap
is done by solving a series of subset-sum problems. First, code, available at his website, 1 compiled using the gcc com-
the smallest knapsack is ﬁlled as much as possible with the piler with -O3 optimization settings. Our bin-completion
items from the SMKP solution. Then the second smallest is code was implemented in Common Lisp.2 Table 1 shows
ﬁlled with items from the remainder of the SMKP solution, our results. All experiments were run on a 1.3GHz AMD
and so on. Again, while this entails the solution of ¢ sub- Athlon. Each algorithm was given a time limit of 300 sec-
set sum instances, it is fast in practice (takes less time than onds to solve each instance. The fail column indicates the
the upper bound computation using the SMKP). In addition, number of instances (out of 30) which could not be solved
Mulknap also incorporates techniques for reducing the prob- by the algorithm within the time limit. The time and nodes
lem instance at every node, as well as tightening the capacity column show the total time spent and nodes generated on the
constraints. See [Pisinger, 1999] for details.        successful runs, excluding the failed runs. Thus, the most
4.2  Bin-Completion  for the MKP                      important indicator of performance is the number of failed
                                                      runs.


We deﬁne a dominance criterion for the MKP as follows: In Both bin-completion and BC+NDP signiﬁcantly outper-
                                         ¡ 


a feasible bin assignment for a bin with capacity £ , the sum form Mulknap, with the difference in performance becoming
                              ¢ 


of the item weights is no more than £ .
                                       


                                                      more pronounced as problem size was increased. This in-
                                                 ¡


  Let  and ¡ be two feasible assignments. dominates
                                 
9;9;9:



                                      ?               dicates that bin-completion is asymptotically more efﬁcient


                      A       ¡-'   ¡


if ¡ can be partitioned into subsets   such that each than Mulknap for this class of problems. BC + NDP con-
      ¤£


subset ¡ is mapped one-to-one (but not necessarily onto) to


                                               


                          ¥                           sistently outperforms bin-completion by a signiﬁcant margin


 £                                              £
                              A
  , an element of , and for all  , (1) the weight of is with respect to the number of nodes searched, and signiﬁcant
greater than or equal the sum of the item weights of the items


                                                      improvements in success rate and runtimes are observed for


                            £
  ¦£


in ¡ , and (2) the proﬁt of item is greater than or equal to the larger problems sets. Similar results were obtained when
                              §£
the sum of the proﬁts of the items in ¡ .             the items had weights and proﬁts in the range [10,100], as
  Our bin-completion algorithm for MKP uses the same up-
per bound and reduction techniques as Mulknap. Our current
                                                         1http://www.diku.dk/ pisinger/
implementation uses a hybrid incremental branching strategy
                                                         2All of our bin-completion algorithms described in this paper
(see 3.2) that generates two undominated children at a time, were compiled using CMUCL version 18e. To serve as a point of
then uses a value ordering strategy that sorted them according reference, we ported Korf’s bin-completion algorithm for bin pack-
to descending order of proﬁt sums.                    ing to Common Lisp, and found that CMUCL generated code that
  We evaluated our MKP algorithm using the same 4 classes ran at approximately half of the speed of Korf’s C code compiled
of instances used by Pisinger [Pisinger, 1999]. We consid- with gcc and -O3 optimization.        Mulknap     Bin-Completion  Bin-Completion + NDP n    Labb´e      Bin-Completion  Bin-Completion + NDP
 (m,n) fail time fail time   nodes fail time   nodes        fail time fail time   nodes fail time   nodes
 Uncorrelated Instances                                        10,000 instances per row
 10,30 10   851   0   330  7994849  0   116  2059561    10   0     2   0     2     215   0     2      215


 15,45 29    82  27   122  2818240 27    83  1389073    20   0     4   0     4     595   0     4      548
                                         
 10,20  8   618   0     1    1866   0     1     1038    40   0    78   0    10     5860  0    10     3888
 20,40 30     -   0   141  4703755  0    20   416409    60   2   458   0   154   3610644 0   127   2467708
 25,50 30     -   3  1459  47252632 0   490  9229360    80   17  823   2   110   3191035 1    88   1135615
 Weakly Correlated Instances                           100   28  1210  1   198   6045642 1    79   613463
 10,30 11   841   0   129  2168245  0    99  1544200           50,000 instances per row


 15,45 30     -  23   852  13632608 22  908  13181578   80  n/a   n/a  6   332   7597514 4   362   5763523
                                         
 10,20  4  1334   0     1    1194   0     1     794     90  n/a   n/a  6   574  15079358 4   493   7320350
 20,40 30     -   0    16   634072  0     4    84270   100  n/a   n/a  8   803  20739466 6   585  11600379
 25,50 30     -   1   734  25605562 0   205  3339290   120  n/a   n/a 20  1941  65428014 16  1543 33040246
 Strongly Correlated Instances
 10,30  0   571   0    73   684006  0    62   585643


 15,45 30     -  26   661  3697531 25   711  3816290     Table 2: Bin Covering results. (Times are in seconds).
                                         
 10,20  8   808   0     1     797   0     1     557
 20,40 30     -   0    9    359645  0     3    58665
 25,50 30     -   1   424  13008484 1   124  1757203
 Subset Sum Instances                                 no search, and can be immediately solved at the root node
 10,30  0   694   0    15   104240  0    14    93727


 15,45 26   711   4  1788  9452862  3  2017  10200510 when the heuristics described in [Labbe´ et al., 1995] compute
                                         
 10,20  8   941   0     1     624   0     1     462   a lower bound that equals the upper bound.
 20,40 30     -   0    3    126931  0     1    28840
 25,50 30     -   0   137  4613658  0    72  1261483
                                                      5.2  Bin-Completion  for Bin Covering
Table 1: Multiple Knapsack results. (Times are in seconds).


                                                      We deﬁne a dominance criterion for bin covering as follows.


                                                                                           
                                                                                                     ¡


                                                      Let   and ¡ be two feasible assignments. dominates if
                                                                                            ?


well as the range [10,10000].                                                          
9;9:9;



                                                                                      '




                                                                                          ¡
                                                                            A       ¡


                                                      ¡ can be partitioned into subsets      such that each


                                                                
                                                            £¢


                                                      item  £    is mapped one-to-one (but not necessarily onto)


                                                                                 ¥


                                                              ¡                     A


5  The  Bin  Covering  Problem                        a subset £ , such that for all  , the sum of the item


                                    
9:9


                                                                      ¡¤£


                                 ¥    ¥


                                        ¦             weights of subset  is greater than or equal to the corre-


                                                                                      
                                   '


Suppose we have ¤ items with weights     , and an in-


                                                                          ¡¤£         £
                                                      sponding item £ (i.e., “covers”  ).

ﬁnite supply of containers with quota ¡ . The bin covering
problem, also known as the dual bin packing problem, is to To see that this dominance criterion gives a valid pruning
                                                      criterion, suppose a solution to a bin-completion instance as-

pack the items into containers such that the number of con-                                  


                                                      signs ¡ to a bin. If we exchange the items in for the corre-
tainers that contain sets of items whose sum is at least ¡ is

maximized. That is, the goal is to distribute, or ration the sponding subsets of ¡ , then this would result in a valid solu-
items among as many containers as possible, given that the tion that satisﬁes at least as many bins.
containers have a speciﬁed quota that must be satisﬁed. Note As with LLM, we apply lower bounding heuristics at the
that the total weight of the items placed in a container can be root node, and apply the same upper bounds used in LLM


greater than ¡ .                                      [Labbe´ et al., 1995] at each node. We use a hybrid incremen-
  Bin covering is a model for resource or task allocation tal branching strategy that generates two undominated chil-
among multiple agents where the goal is to maximize the dren at a time, then using smallest-sums-ﬁrst value ordering
number of agents who fulﬁll some quota. It is also a model to order them.
for industrial problems such as: (1) packing peach slices into We compared our implementation of bin-completion for
cans so that each can contains at least its advertised net weight the bin covering problem with our implementation of the
in peaches, and (2) breaking up monopolies into smaller com- LLM algorithm (both implementations were in Common Lisp
panies, each of which is large enough to be viable [Assman and run on a 600MHz Pentium 3). We generated 10,000
et al., 1984].                                        random instances for each set, where the items were chosen
                                                      uniformly in the range [1,9999], and the quota was 10,000.
5.1  The Labbe,´ Laporte, and Martello Algorithm      We  ran our implementations of LLM, bin-completion, and
The state of the art complete algorithm for the bin covering bin-completion + NDP on each instance, with a time limit
problem is by Labbe,´ Laporte, and Martello [Labbe´ et al., of 180 seconds per instance. We also compared the two
1995]. We shall refer to this as the LLM algorithm. LLM is bin-completion variants on larger instances of 80-120 items,
a branch-and-bound algorithm. The items are sorted in de- using sets of 50,000 random instances. Table 2 shows our
creasing order of size. Each node represents a decision as to results. Again, we show the number of failed runs that
which bin to put an item into, or to leave it out entirely. At timed out before solving the instance, as well as the time
each node, lower bounds based on combinatorial arguments spent and nodes generated, excluding the failed runs. Bin-
are computed, and the remaining subproblem is reduced us- completion signiﬁcantly outperformed LLM. The increasing
ing two reduction criteria (see [Labbe´ et al., 1995]). At the gap in performance as problem size increases suggests that
root node, a set of heuristics is applied in order to compute bin-completion is asymptotically more efﬁcient than LLM.
a lower bound. As with the bin packing problem (c.f. [Korf, For the harder problems, bin completion + NDP signiﬁcantly
2002]), many instances of the bin covering problem require outperforms bin-completion.