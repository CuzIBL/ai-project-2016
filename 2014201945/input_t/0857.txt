            Decision Diagrams for the Computation of Semiring Valuations

                                              Nic Wilson
                                  Cork Constraint Computation Centre
                   Department of Computer Science, University College Cork, Ireland
                                          n.wilson@4c.ucc.ie


                    Abstract                          tions still correspond to complete directed paths; one can also
                                                      prune the representation to allow backtrack-free generation of
    This paper describes a new approach to computa-   any solution. If we can ﬁnd many such equivalences through
    tion in a semiring-based system, which includes   interchangeability then the number of nodes in the decision
    semiring-based CSPs (in particular weighted CSPs, diagram will be a tiny fraction of the number of nodes in the
    fuzzy CSPs and standard CSPs) as well as Bayesian corresponding decision tree. Indeed, the number of solutions
    networks. The approach to computation is based on can even sometimes be exponential in the size of such a de-
    what we call semiring-labelled decision diagrams  cision diagram, as the merging of nodes ‘factorises’ the so-
    (SLDDs).  These can be generated in a similar     lution set (so the size of the decision tree will be exponential
    way to a standard search tree (decision tree) for in the size of the decision diagram). This kind of representa-
    solving a CSP, but some nodes are merged, cre-    tion, in the form of binary decision diagrams [Bryant, 1986;
    ating a more compact representation; for certain  1995], has proved very effective in certain domains, such as
    classes of CSPs, the number of nodes in the re-   CAD applications.
    sulting network will be a tiny fraction of the num-
    ber of nodes in the corresponding search tree. A    Testing full interchangeability is often expensive, but one
    method is given for generating an SLDD that repre- can instead use the sufﬁcient condition, neighbourhood inter-
                                                                                            c
    sents e.g., a particular instance of a semiring-based changeability, that is, for all the constraints whose scope
                                                                       U     V − U  c  = c 0           c
    CSP; it is shown how this can be used to perform  intersects with both and     , u    u , where e.g., u
                                                                                U               c
    various computations of interest, such as solving a (which involves no variables in ) is the ‘slice’ of given by
                                                                         U    u
    semiring-based CSP, ﬁnding optimal solutions, de- instantiating variables to . This condition can be tested
    termining the possible values of each variable and quickly, in time proportional to the size of the (sliced) con-
    counting solutions of a CSP.                      straints. Furthermore, if one constructs these slices for each
                                                      node visited, and indexes them appropriately, then check-
                                                      ing whether we have previously generated neighbourhood-
1  Introduction                                       interchangeable u0, can be achieved efﬁciently.
Suppose we are performing a depth-ﬁrst search for solutions This computational approach can be generalised to
of a (not necessarily binary) CSP, where we record the nodes semiring-based systems (Section 2), including semiring-
of the search (decision) tree that we’ve visited so far. Solu- based CSPs (in particular weighted CSPs, fuzzy CSPs and
tions correspond to complete paths in the tree, i.e., directed standard CSPs) as well as Bayesian networks. Each edge in
paths from the root node to a node corresponding to a com- the decision diagram is labelled with a value in the semiring,
plete assignment. We are at a node with associated partial generating (Section 3) what we call semiring-labelled deci-
assignment u of set of variables U, which we have checked sion diagrams (SLDDs). We show how this can be done in
is consistent (in the CSP sense of it satisfying all constraints such a way that the SLDD represents the semiring-based sys-
involving only variables in U). Suppose we manage some- tem, i.e., the product of semiring values of edges in a com-
how to ﬁnd another assignment u0 of U, corresponding to a plete path is equal to the semiring value of the complete as-
node previously visited, which is also consistent, and which signment associated with the path. The efﬁciency of this ap-
is fully interchangeable, that is (extending [Freuder, 1991]) proach to computation is very much dependent on how com-
for all assignments w of the remaining variables W , uw is a pact the SLDD is, especially compared to the corresponding
solution of the CSP if and only if u0w is a solution. search tree. If the SLDD is compact, then it can be efﬁciently
  There is then no need to expand the subtree below u, as it constructed and the operations are efﬁcient. We give exam-
is equivalent to the one below u0 which we have already ex- ples of situations where the SLDD is compact (even linear
panded. Instead we can merge the nodes corresponding to u size) despite the number of solutions being exponential in the
and u0. The resulting structure will no longer be a tree—so number of variables.
can be described as a decision diagram (as opposed to a de- Sections 4 and 5 show how the semiring-labelled decision
cision tree)—but it will still represent all solutions, as solu- diagram can be used to perform various computations of in-                                                                              N           N
terest, including solving, optimising and generating inferred A-valuations, we may write C to mean c∈C c. Let c be
constraints, and projections needed in inference in Bayesian an A-valuation, and let U be a subset of Vc. The projection
networks and solving semiring-based CSPs.             c↓U of c onto U is deﬁned by, for u ∈ D(U), c↓U (u) is equal
  The formalism SLDDs deﬁned in this paper is a develop- to the semiring summation of c(w) over all w ∈ D(Vc) such
ment of the ﬁnite-state automata representations for weighted that w↓U = u.
constraints in [Amilhastre et al., 2002] (where the soft con- Many computational problems can be expressedN as com-
straints are unary). The latter, which can be considered as im- puting a projection of a combination C = C of a multiset
plementing a kind of dynamic programming [Bellman, 1957], C of semiring valuations (and a straightforward approach to
has been shown to be applicable as a compilation technique such a computation is exponential). In particular, computa-
on a substantial real-world problem.                  tions in semiring-based CSPs [Bistarelli et al., 1997; 1999;
  The main contributions of the paper are extending this 2002] are of this form. This is a general formalism for
computational technique of [Amilhastre et al., 2002] in a soft constraints, which includes weighted CSPs, fuzzy CSPs,
number of signiﬁcant ways: our technique, SLDDs, can be probabilistic CSPs, lexicographic CSPs and set-based CSPs.
applied to computation in many formalisms for preferences These use a special type of semiring, where ⊕ is idempotent
and uncertainty: in particular, to a very general class of soft and 1 is an absorbing element of ⊕.
CSPs, semiring-based CSPs; we allow soft constraints to be Finite CSPs can be expressed as a set C of A-valuations,
of arbitrary arity, as well as both extensional and intensional using A = h{0, 1}, 0, 1, max, ×i, so that ⊗ = × (i.e., min)
representations of constraints; it applies also to computation and ⊕ is max. A constraint on set of variables U is repre-
in Bayesian networks, and for counting the solutions of a sented as a semiring valuation c : D(U) → {0, 1}, where for
CSP. Our construction of the representation is also new, and assignment u of U, c(u) = 1 if and only if u satisﬁesN the con-
is based on backtracking search, where certain nodes in the straint. The CSP has a solution if and only if ( C)↓∅ = 1.
search tree are merged (implicity performing a kind of for- To perform computations in Bayesian networks, we use the
malised caching); this enables constraint programming tech- semiring A = hIR+, 0, 1, +, ×i, where IR+ is the set of non-
niques to be used, making SLDDs a combination of a form of negative real numbers. As is well known, computation in
dynamic programming and search-based approaches used in Bayesian networks [Pearl, 1988; Shenoy and Shafer, 1990]
constraint programming.                               can be performed by computing projections of combinations
                                                      of such A-valuations, where each A-valuation represents a
2  Semiring Valuations                                conditional probability table of a variable given its parents in
                                                      the Bayesian network. In particular, the marginal probability
Semirings consist of a set with two operations ⊗ and ⊕, that variable X is assigned to x is given by C↓{X}(x). This
which are both associative and commutative and such that ⊗ semiring can also be used to count the solutions in a CSP as
distributes over ⊕. Here we also assume a unit element and a
                                                      C↓∅, by restricting the input semiring values to being 0 or 1.
null element. Tuple A = hA, 0, 1, ⊕, ⊗i is said to be a semir-
ing if A is a set containing different elements 0 and 1 and ⊕
and ⊗ are operations on A satisfying the following properties: 3 Constructing an SLDD Representing a
⊗ is associative and commutative with identity 1, ⊕ is asso- Combined Semiring Valuation
ciative and commutative with identity 0, which is also a null
                                                      We will show how to construct a structure,1 called a semiring-
element (i.e., for all α ∈ A, α⊗0 = 0), and ⊗ distributes over
                                                      labelled decision diagram (SLDD), that represents, in a par-
⊕ i.e., and for all α, β, γ ∈ A, α⊗(β⊕γ) = (α⊗β)⊕(α⊗γ).                              N
                                                      ticular sense, the combination C = c∈C c of a multiset C
Semiring valuations. Let V be a ﬁnite set of variables. For of A-valuations, where A = hA, 0, 1, ⊕, ⊗i is a given semir-
each X ∈ V let D(X) be the domain (i.e., the set of possible ing. The SLDD is a directed acyclic graph, where the edges
assignments)Q of X. For U ⊆ V let the set of partial tuples are labelled with elements in A. As we’ll show in Sections 4
D(U) =    X∈U D(X)  be the set of possible assignments to and 5, this representation can then be used to perform certain
set of variables U. A complete assignment is an element of important computations.
                                 ↓W
D(V ). For u ∈ D(U) and W  ⊆ U, u    is the projection  The construction of the SLDD is very similar to that
                                          ↓W
of u onto variables W , so that for all X ∈ W , u (X) = of a search tree generated by chronological backtracking;
u(X).                                                 the difference is that when we generate an edge we use a
  Let A =  hA, 0, 1, ⊕, ⊗i be a semiring. An A-valuation certain condition forward neighbourhood interchangeability
c associates a semiring value with each of a particular set of (deﬁned below, extending the deﬁnition of neighbourhood in-
partial tuples: c is a function from D(Vc) to A, where set of terchangeability in the introduction) to test if we can avoid
variables Vc ⊆ V is called the scope of c. If u ∈ D(U) is creating a new node, but instead connect the edge to an al-
an assignment to set of variables U containing Vc, we may ready existing node.
                               ↓V
write c(u) as an abbreviation for c(u c ). The semiring op- Let U ⊆ V be a set of variables. Deﬁne a valuation c ∈ C
erations allow one to deﬁne a combination and a projection to be active (with respect to U) if its scope intersects both U
                                                0
operation on semiring valuations. The combination c ⊗ c of and V − U. For active valuation c, deﬁne, for u ∈ D(U),
                 0
A-valuations c and c is deﬁned to have scope V ∪ V 0 , and
                                        c    c        A-valuation cu to be the ‘slice’ of c given by assigning U to
by, (c ⊗ c0)(u) = c(u) ⊗ c0(u), i.e., c(u↓Vc ) ⊗ c0(u↓Vc0 ), for
                                                         1
each assignment u of Vc ∪ Vc0 . ⊗ is a commutative and asso- A more general deﬁnition of SLDDs is given in [Wilson, 2004],
ciative operation on A-valuations (on V ). If C is a multiset of with a corresponding version of Theorem 1.u; that is, the scope Vcu of cu is Vc − U, and for all assign- deﬁne the A-valuation cS by, for v ∈ D(V ), cS (v) = α(πv).

ments of t to Vcu , cu(t) is deﬁned to be c(ut) (where ut is the The SLDD is said to represent A-valuation cS .
concatenation of tuples u and t). Assignments u and u0 to set
                                                      Theorem 1  Let A be a semiring and let C be a multiset C of
of variables U are said to be forward neighbourhood inter-
                                                      A-valuations over variables V . Let S be an A-decision dia-
changeable (with respect to C) if for all active A-valuations                                       N
                                                      gram S constructed as above. Then S represents C = C
c, the slices cu and cu0 are equal. Roughly, what this im-  ↓∅   P
plies is that the subproblems corresponding to u and u0 are and C = π α(π), where the sum is over all complete
the same, so there is no need to solve them more than once. paths in S.
  A semiring-labelled decision diagram (over set of vari- In the next section it is shown how to compute such sums
ables V ) is deﬁned to be an A-decision diagram (over V ) efﬁciently.
for some semiring A = hA, 0, 1, ⊕, ⊗i. An A-decision dia- Note that ‘dynamic variable ordering’ can be used, i.e., the
gram consists of a directed acyclic graph with a unique earli- order of variables can differ between paths. We can also adapt
est (parent-less) node source and a unique latest (childless) constraint programming techniques to improve the efﬁciency.
node sink. Each edge λ is labelled with a value α(λ) in the We can use propagation e.g., maintaining arc consistency for
semiring (deﬁned below). A complete path is deﬁned to be the zeros [Wilson, 2004]. Furthermore, the SLDD can, like a
a maximal (directed) path, that is, a path from source to search tree, be generated in a depth-ﬁrst fashion: this is nat-
sink.                                                 ural when we’re attempting to solve a CSP; the construction
  Nodes and edges are both labelled with various pieces of can be terminated when a solution is found.
information, as described below. Associated with each node To facilitate merging, for partial tuple u we can represent
r (other than sink) is a variable Xr, which is the variable the collection of slices {cu : c active} as a string σ(u) of el-
                                                                                     0
that is about to be instantiated. Also Ur is the set of variables ements in the semiring. Then, for u, u ∈ D(U), tuples u and
associated with nodes on any (directed) path from source u0 are forward neighbourhood interchangeable if and only if
to r.                                                 σ(u) = σ(u0). For set of variables U, we can incrementally
  We start off by creating the node source, and deﬁne construct a trie (a tree of strings) storing each σ(ur) for all
Usource   = ∅, and usource to be the trivial assignment nodes r with ur ∈ D(U); this enables efﬁcient generation
to the empty set of variables. We also choose some variable of each edge of the SLDD. ForP valuations represented exten-
Y  ∈ V , and set Xsource =  Y . The construction pro- sionally, deﬁne size(C) to be c∈C size(c), where size(c) is
cess works by choosing a node already constructed, and con- the cardinality of the scope of c multiplied by the number of
structing the (directed) edges coming from the node, and the non-zero tuples in c. An upper bound for the time needed to
nodes at the end of the edges. At each point we choose a node construct the SLDD is then proportional to size(C)×size(S),
r 6= sink which has currently no children (i.e., no edges em- where size(S) is the number of edges of the SLDD. In par-
anating from it). If there is no such node, the construction is ticular, if the size of the SLDD is polynomial in n, for some
complete.                                             parametrised family of problems depending on the number of
  For each assignment x to Xr we create a (directed) edge variables n, then constructing the SLDD is polynomial.
λ from r with associated assignment Xr = x, (and deﬁne
Xλ =  Xr) and set of variables Uλ = Ur ∪ {Xr}, and as- When is the SLDD compact?
signment uλ to Uλ which is ur extended with assigningN x The crucial factor in the determining the efﬁciency of our
to Xr. The semiring value α(λ) is deﬁned to be c c(uλ) approach is the size of the SLDD; if the SLDD is compact,
where the semiring product is over all c ∈ C which are ‘just then it can be efﬁciently constructed and the operations are
instantiated’, i.e., such that Xλ ∈ Vc ⊆ Uλ.          efﬁcient. The SLDD will tend to be compact (compared to
  If Uλ = V , so that all the variables have been instantiated, the associated search tree) in situations where many differ-
we connect the end of λ to sink. If α(λ) = 0 we also set the ent partial instantiations lead to equivalent subproblems (and
end of λ to be sink. If α(λ) 6= 0, and we can ﬁnd previously so a standard search-based technique would solve the same
            0
created node r such that uλ and ur0 are forward neighbour- subproblem many times). There are many kinds of situations
hood interchangeable (this requires also Uλ = Ur0 ), we set where the problem structure causes this to happen. 2
                 0
the end of λ to be r . We call this ‘merging’, since it cor- We give a class of examples to illustrate that the con-
responds to merging nodes in a decision tree. Otherwise we structed semiring-labelled decision diagram can be compact,
                 0
create a new node r , set ur0 = uλ, Ur0 = Uλ and choose even if it represents an exponential number of non-zero com-
some Xr0 ∈ V − Ur0 . To aid future ‘merging’, we also store plete assignments (e.g., solutions of a CSP). In these cases the
             0
with the node r the slices cur0 , for active valuations c. size of the SLDD is linear in the number of variables, whereas
  Following a (directed) path thus corresponds to an as- the size of the corresponding search tree is exponential.
signment to a set of variables; also a complete assignment
                                                      Example.  Let V = {X  , . . . , X }, where the size of each
v ∈ D(V ) determines a complete path (i.e., a (directed) path              1      n
                                                      domain is at most d. Let C be a multiset of A-valuations,
from source to sink) π , by following, from each node r,
                      v                               for some semiring A, such that the scope of each valuation
the edge associated with value v(Xr).
  The semiring value α(π) associated with a path is the  2Even for random (binary) CSPs, it has been demonstrated ex-
semiring product of theN semiring values associated with each perimentally that the size of the SLDD representation can be sev-
edge in the path, i.e., λ∈π α(λ). This might be thought of eral orders of magnitude smaller than the size of the corresponding
as the cost of following path π. For A-decision diagram S search tree (this happens when the problems are sparse and loose).involves variables which are at most p apart (where p is con- source, for each r 6= source, deﬁne
stant and fairly small): for all c ∈ C, max {i : Xi ∈ Vc} −             M
                                                                               00      00
min {i : Xi ∈ Vc} ≤ p. This might arise, for example, in a       f(r) =    (f(r ) ⊗ α(r →  r)).
problem where there is a temporal component, with the in-              r00→r
dex i related to time. We can generate an A-decision dia-
                                                      where the semiring summation is over all edges r00 which
gram using the ﬁxed variable ordering X1, . . . , Xn (i.e., the
variables appear in that order in all paths). Let j be such point to r. Because the SLDD is a directed acyclic graph
that p ≤ j < n, and consider any assignments u and u0 to with source being the unique parent-less node, this de-
                                          0           ﬁnes f(r) for each r unambiguously. Symmetrically, deﬁne
set of variables U = {X1, . . . , Xj}. If u and u agree on
                               0                      g(sink) =  1, and, working backwards from sink, deﬁne,
their last p variables, i.e., u(Xi) = u (Xi) for all i such that          L              0      0
                                                      for r 6= sink, g(r) =  r→r0 (α(r → r ) ⊗ g(r )), where
j − p < i ≤ j, then they are forward neighbourhood inter-                                      0
changeable, since for any active A-valuation c, u and u0 agree the semiring summation is over all edges r → r emanating
                                                      from r. Furthermore, for each node r and edge r → r0, de-
on the scope of c, so cu = cu0 . This implies that the construc-                        0
                                  p                   ﬁne h(r) = f(r) ⊗ g(r), and h(r → r ) = f(r) ⊗ α(r →
tion of the SLDD will produce at most d nodes at ‘level’ j, 0 0
and an upper bound for the size of the SLDD is hence ndp+1; r ) ⊗ g(r ).
this is linear in n, since d and p are constants. For the CSP Proposition 1 Let r be a node and let λ be an edge in the
case, the number of solutions will often be exponential in n,                           L
                                                      SLDD. If r 6= source  then f(r) =   π α(π) where the
and hence exponential in the size of the SLDD. Many opera- semiring summation is over all paths π from source to r.
tions, such as counting the number of solutions, or ﬁnding an In particular, f(sink) is the semiring sum of α(π) over
optimal solution for more general semirings (see Section 5)
                                                      all pathsL from source to sink. Similarly, if r 6= sink,
can be achieved in time linear in n, even though an exponen- g(r) = α(π), where the semiring summation is over
tial number of assignments are being reasoned about.            π
                                                      all pathsL from r to sink. Also, if r∈ / {source, sink},
  A similar argument leads to an upper bound on the size of h(r) = π α(π) where the semiring sum of α(π) is over all
the SLDD of the same form, but in terms of pathwidth [Bod- complete paths passing through node r. Furthermore, h(λ)
laender, 1993], for arbitrary multisets of semiring valuations. is equal to the semiring sum of α(π) over all complete paths
(A ﬁxed variable ordering used to generate an SLDD gives which include the edge λ.
rise to a corresponding path decomposition.)
                                                        This proposition generalises proposition 8 of [Amilhas-
Other examples. Certain problems involving permutations tre et al., 2002], and the deﬁnitions of f and g are gener-
can also lead to relatively compact SLDDs; for example, alised forms of functions in deﬁnition 10 of [Amilhastre et
counting the number of linear orders which extend a given al., 2002].
partial order [van Dongen, 2004]. The structure of the prob- Note that the number of semiring operations needed to
lem ensures that the SLDD decomposes the problem (simi- compute functions f, g and h is linear in the size of the SLDD.
larly to a dynamic programming approach), reducing a fac-
torial problem to an exponential one—which can be a huge 5 Computations Using an SLDD
reduction in time complexity, but at the cost of large space
requirements. Similar remarks apply to solving a rehearsal In this section we show how the SLDD representation can
problem (CSPLib http://www.csplib.org/     problem    be used to perform important computations: projections and
number 39). Compact structures with a form similar to an ﬁnding optimal solutions. In [Wilson, 2004] we also showed
SLDD can also be used for enforcing generalised arc con- how the SLDD can be used for randomly picking a solution of
sistency for many forms of global constraints e.g., [Pesant, a CSP with uniform probability (by using an algorithm with
2004].                                                a very similar structure to that described below for ﬁnding
                                                      an optimal solution). It is assumed that we have an SLDD
                                                      representation of a function C : D(V ) → A, based on a
4  Propagation of Semiring Values in SLDD             semiring A = hA, 0, 1, ⊕, ⊗i; we also assume that we have
                                                      computed the associated functions f, g and h, as described in
The purpose of this section is to show how to efﬁciently per- the last section.
form various technical computations in an SLDD, in partic-
ular, the sum of the semiring values over (i) all complete 5.1 Performing Projections
paths, (ii) all complete paths which pass through a particu- As mentioned above, computing the projection of the com-
lar node, (iii) all complete paths which pass through a partic- bination of a multiset of semiring valuations is important
ular edge. The algorithms are immediate generalisations of for many different applications. It gives what is called in
a classic shortest path algorithm (and the application to the [Bistarelli et al., 1997] the ‘solution’ of a semiring-based con-
weighted CSP semiring hIN ∪ {0, ∞}, ∞, 0, min, +i reduces straint problem, and can be used for generating implied soft
to this shortest path algorithm).                     constraints in an idempotent semiring-based CSP [Bistarelli
  Suppose we have an A-decision diagram, with semiring et al., 2002]. Projecting to the empty set of variables can be
A  = hA, 0, 1, ⊕, ⊗i. We associate with each node r two used, for example, for computing the weight of the best so-
semiring values f(r) and g(r), which are deﬁned induc- lution in a weighted CSP, or for counting solutions of a CSP.
tively. Deﬁne f(source) = 1, and, working forwards from Projection to a singleton set determines the possible valuesof a variable for CSPs, and analogously for other semiring- λ to sink and resetting α(λ) to 0), since such an edge is
based CSPs; for the Bayesian network semiring it computes not part of any optimal complete path. For certain addition-
a marginal of the Bayesian network.                   is-max semirings (in particular, a fuzzy semiring with ⊗
  The lemma below shows how the projection of C onto the equalling min, or alternatively, if ⊗ is strictly monotonic),
empty set and to singleton sets can be computed efﬁciently. It the resulting network has the property that every complete
follows easily from proposition 1.                    path is optimal (ignoring edges λ with α(λ) = 0). This then
Lemma 1  Suppose an A-decision diagram on set of vari- gives considerable ﬂexibility in generating optimal solutions
ables V (with associated functions f, g and h) represents A- in an interactive setting, such as guiding a user in solving a
valuation C. Let X ∈ V be a variable, and x ∈ D(X) be a conﬁguration problem.
                    ↓∅     sink       source
value of X. ThenL (i) C = f(    ) = g(       ); and
(ii) C↓{X}(x) =       h(λ), where Λ is the set of edges 6 Discussion
                 λ∈Λx             x
associated with assignment X = x.
                                                      As well as the representation of [Amilhastre et al., 2002],
                ↓{X}
  So to compute C   (x) requires |Λx| − 1 semiring sum- which they directly generalise (see Section 1), SLDDs are
mations. To compute the projections onto every single vari- related to several other computational approaches, includ-
able, i.e., computing C↓{X}(x) for all variables X and all its ing search-based approaches for solving CSPs, and join
values x, requires a semiring summation for each edge in the tree/hypertree-based decomposition methods, and AND/OR
SLDD, so can be computed in time linear in the size of the search graphs. We very brieﬂy discuss these relationships be-
SLDD.                                                 low.
Adding unary semiring valuations. Suppose we receive a  Our construction of the SLDD in Section 3 is different from
new set of semiring valuations, all of which are unary (i.e., the way that the representation in [Amilhastre et al., 2002] is
the scope of each is a single variable) which we want to com- generated or similar representations such as Binary Decision
bine with the previous combination C. It can be seen that Diagrams [Bryant, 1986] and that of [Vempaty, 1992]. The
the same graphical structure can be used, but where we just latter involve building up the representation by adding the
change the semiring values on the edges. This can be used constraints incrementally, giving representations of subsets
for computing more general projections; it also has applica- of the constraints. SLDDs could also be generated in a sim-
tions in in dynamic soft CSPs [Amilhastre et al., 2002], and ilar way; however, the construction in Section 3 takes all the
for conditioning, and hence inference, in a Bayesian network, constraints (semiring valuations) into account at once. This
and computing most probable explanations [Pearl, 1988]. can sometimes be advantageous; in particular, when search-
                                                      ing for a single solution of a CSP, the SLDD need have time
5.2  Finding optimal solutions                        complexity at most polynomially worse than a standard CSP
In this subsection we only consider semirings A  =    search approach (such as chronological backtracking whilst
hA, 0, 1, ⊕, ⊗i with a special property: that for all α, β ∈ A, maintaining arc consistency), whereas the experimental re-
either α ⊕ β = α or α ⊕ β = β. Semirings A satisfying sults of [Pan and Vardi, 2004] seem to suggest that a BDD
this property are said to satisfy the addition-is-max property. approach can be exponentially worse than a search approach.
We can then deﬁne a total order ≥ on A given by α ≥ β   SLDDs often have large storage requirements, but they can
if and only if α ⊕ β = α. Any valuation structure, as de- involve very much fewer nodes (and need never involve more
ﬁned in deﬁnition 11 of [Bistarelli et al., 1999], gives rise to nodes) than a search tree approach. As illustrated by the ex-
a semiring satisfying addition-is-max, by using the order rela- ample in Section 3 (and by the application in [Amilhastre
tion to deﬁne ⊕ (note that we are writing the order the oppo- et al., 2002]), certain problems with a very large number of
site way round). Hence the approach in this section applies to solutions (i.e., non-zero complete assignments) can have an
any valued CSPs [Bistarelli et al., 1999], including weighted SLDD of manageable size, leading to efﬁcient computation;
CSPs, fuzzy CSPs and lexicographic CSPs, as valued CSPs a search-based method will often then not be feasible if one
can be represented as multisets of A-valuations where A sat- wants to compile the set of solutions, or count the number of
isﬁes addition-is-max.                                solutions.
  Complete assignment v ∈ D(V ) is deﬁned to be optimal if Perhaps the most-studied general approach for this kind
           0       0
C(v) ≥ C(v ) for all v ∈ D(V ). This happens if and only if of problem is the join tree (or hypertree decomposition) ap-
C(v) = C↓∅. To generate any optimal complete assignment proach, e.g., the general framework of Shenoy and Shafer
v ∈ D(V ) is very fast: linear in n, the number of variables: [Shenoy and Shafer, 1990] Bucket Elimination [Dechter,
we start with node source as the current node, and itera- 1999], and non-serial dynamic programming [Bertele and
tively pick a child of the current node, satisfying the following Brioschi, 1972]. Whether a join tree approach or a decision
condition, until we reach sink: we pick any child r0 of cur- diagram approach is more efﬁcient depends very much on the
rent node r with maximum value of α(π)⊗α(r → r0)⊗g(r0) form of the problem; a join tree approach may be more ef-
(among children of r), where π is the path chosen so far, ﬁcient if there is appropriate topological structure, but little
from source to r. The associated complete assignment will structure which is more value-speciﬁc; a decision diagram
be optimal, and conversely, any optimal complete assignment approach looks liable to be more efﬁcient if there is a good
can be generated in this way.                         deal of value-speciﬁc structure (e.g., of the form of ‘context-
  If we are only interested in optimal solutions, we could speciﬁc independence’ [Boutilier et al., 1996], deﬁned in a
eliminate each edge λ with h(λ) < C↓∅ (by connecting such Bayesian network context), leading to a compact decision di-