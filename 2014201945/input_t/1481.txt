          More on the Power of Demand Queries in Combinatorial Auctions:
                  Learning Atomic Languages and Handling Incentives

                     Sebastien´ Lahaie     Florin Constantin       David C. Parkes
                             Division of Engineering and Applied Sciences
                               Harvard University, Cambridge, MA 02138
                               {slahaie, ﬂorin, parkes}@eecs.harvard.edu

                    Abstract                            We extend this earlier work by providing a preference elic-
                                                      itation scheme for a broad class of languages, called atomic
    Query learning models from computational learn-   languages, which includes XOR and OR as special cases
    ing theory (CLT) can be adopted to perform elic-  (see Nisan [2000] for a formal study of bidding languages).
    itation in combinatorial auctions. Indeed, a re-  In addition to validating the ﬂexibility of the Lahaie and
    cent elicitation framework demonstrated that the  Parkes [2004] framework, our new algorithm demonstrates
    equivalence queries of CLT can be usefully sim-   the power of demand queries. For instance, we know of no
    ulated with price-based demand queries. In this pa- learning algorithm for OR using just value and equivalence
    per, we validate the ﬂexibility of this framework queries.
    by deﬁning a learning algorithm for atomic bid-     Our main contribution is to characterize the communica-
    ding languages, a class that includes XOR and OR. tion requirements of the Vickrey-Clarke-Groves (VCG) out-
    We also handle incentives, characterizing the com- come rule [Jackson, 2000]. Already known to be sufﬁcient for
    munication requirements of the Vickrey-Clarke-    determining the VCG outcome [Mishra and Parkes, 2004],
    Groves outcome rule. This motivates an extension  we prove here that any elicitation protocol for the VCG mech-
    to the earlier learning framework that brings truth- anism necessarily also determines a set of “universal com-
    ful responses to queries into an equilibrium.     petitive equilibrium” (UCE) prices. This result broadens our
                                                      understanding of demand queries, demonstrating that if the
1  Introduction                                       goal is to verify a VCG outcome it is necessary to verify an
There has been a burst of recent attention in the problem of efﬁcient allocation and set of UCE prices, which can be done
                                                      through a simple extension of demand queries to universal
preference elicitation in combinatorial auctions (CAs), which       1
are auctions in which agents can express values on bun- demand queries. We demonstrate how to extend the exist-
dles of items [Blum et al., 2004; Lahaie and Parkes, 2004; ing learning framework to terminate with UCE prices and an
Conen and Sandholm, 2001; Santi et al., 2004; Parkes, 2002]. efﬁcient allocation.
Indeed, elicitation is today recognized to be just as important With n agents, a na¨ıve way to handle incentives is to
a computational problem (and perhaps more so) as that of simply run the preference elicitation algorithm, and then run
winner-determination [Nisan and Segal, 2004]. CAs can po- it again n more times with each agent removed. This yields
tentially require agents (e.g. people, ﬁrms, automated bidding enough information to derive VCG payments. However, the
agents) to value an exponentially large number of different UCE-based characterization motivates a design for an exten-
bundles of indivisible goods, when determining the value on sion of the learning-based framework that we call Learner
even a single bundle can be hard [Sandholm, 1993].    Extend and Adjust (LeEA), that obtains VCG payments in a
  In query-based elicitation [Parkes, 2002; Conen and Sand- single run of the algorithm.
holm, 2001], agents must be able to respond to simple
                                                                                     [    ]
queries, such as identifying a preferred bundle at given Related Work. Nisan and Segal 2004 characterize the
prices, or providing the value of a speciﬁed bundle. Many minimal communication requirements of implementing an
of these methods are closely related to the “exact learn- efﬁcient allocation, but do not consider incentives. The
ing with queries” model from computational learning theory large literature on ascending-price Vickrey auctions (see
                                                            [    ]
(CLT) [Blum et al., 2004]. In fact, these are typically learning Parkes 2004 for a survey) is largely motivated by issues of
methods in their own right because they elicit valuations en- costly elicitation, and recent auctions are designed to termi-
                                                                         [                    ]
tirely and exactly. One exception is Lahaie and Parkes [2004], nate with UCE prices Mishra and Parkes, 2004 . Similarly,
who give a preference elicitation scheme that avoids complete 1This is not to say that elicitation algorithms for VCG based on
learning when possible. The main contribution in that paper is demand queries are necessarily efﬁcient. Indeed, in some cases
to explain how to simulate any learning algorithm with mem- demand-query based algorithms are known to be exponentially-
bership and equivalence queries as an elicitation algorithm inefﬁcient [Nisan and Segal, 2004]. However, it is at least suggestive
with value and demand queries.                        that demand queries are powerful in general.Conen and Sandholm [2002] had previously considered elic- satisﬁes conditions L1-L3 above. As special cases we have
itation methods that terminate with the VCG outcome. What L1 = XOR and Lm = OR.
is new in our work is the proof that UCE prices are necessary A bidding language is expressive for CAs if it can encode
                                                                              G
(as well as sufﬁcient) for the VCG outcome, together with the all valuation functions v : 2 → R≥0 that satisfy free dis-
careful integration of this methodology into elicitation meth- posal. It is not hard to see that L1 (XOR) is expressive, but
ods with polynomial query complexity.                 that Lk for k > 1 are not (consider for example the valua-
                                                      tion that places a value of 1 on all bundles). Representation
2  Preliminaries                                      (B, w) in a language L of valuation v is minimal if |B| is min-
The purpose of a CA is to allocate a set G of m distinct and imized over all valid L representations of v. In what follows,
indivisible goods among a set N of n agents, each with a val- sizeL(v) denotes the size of a minimal L representation of
          G                                           function v, when such a representation exists.
uation vi : 2 → R. Let Γ be the set of possible allocations,
in which no good is given to more than one agent. We aim
                       ∗     ∗      ∗                 2.2  Queries
for an efﬁcient allocation S = (S1P, . . . , Sn), namely an al-
                                n      ∗              Agents are modeled as “black-boxes” that can respond to
location that maximizes total value i=1 vi(Si ). By deﬁni-
tion, agent valuations satisfy the property of no externalities, queries. A response to a query provides partial information
meaning that an agent only cares about its own bundle, and about an agent’s valuation function. We adopt queries that
not those allocated to other agents. Valuations also satisfy are more or less natural in economic settings:
                                                      Value query. A value query VALUE(S) to agent i on bundle
free-disposal, meaning that vi(S) ≤ vi(T ) if S ⊆ T , are
                                                      S asks the agent to report its exact value v (S).
normalized: vi(∅) = 0, and bounded, so that there is a con-                              i
                                                      Demand query.  A demand query DEMAND(S, p)  presents
stant K > 0 (known to the center) such that vi(S) < K for
all S ⊆ G and all i ∈ N. Agents have quasi-linear utility an agent i with a bundle S and prices p over all bundles (in
functions, so that agent i’s utility for a bundle S at prices p is some bidding language). The agent replies YES if bundle S
                                                      is a best-response at prices p, meaning that v (S) − p(S) =
ui(S, p) = vi(S) − p(S).                                                                    i
                                                      maxT ⊆G [vi(T ) − p(T )]. Otherwise the agent replies with a
2.1  Bidding Languages                                bundle S0 that makes it strictly better off than S at prices p,
                                                             0      0
A bidding language is used to encode and communicate real- i.e. vi(S ) − p(S ) > vi(S) − p(S).
valued functions over bundles; this may for instance be an Universal demand query. A universal demand query UNI-
agent’s entire valuation function, or an underestimate of its DEMAND(S1, . . . , Sn, p) presents an agent i with prices p
true valuation function (as in bids in ascending-price CAs, over all bundles together with a set of n bundles S1, . . . , Sn
hence the name “bidding language”). In this work, the center (not necessarily distinct). The agent replies YES if every bun-
also uses bidding languages to quote prices to the agents. dle presented is a best-response to prices p. Otherwise, the
                                                      agent responds with an index j and a bundle S0 such that
  Formally, a bidding language consists of syntax and se- 0       0
mantics that allow one to encode value information and in- vi(S ) − pi(S ) > vi(Sj) − pi(Sj).
terpret these encodings. We consider the class of atomic lan- Note that ∅ may be a valid response to a demand query.
guages. An atomic representation is a pair (B, w) where B ⊆ Also note that prices are general functions p : 2G → R ,
 G                                                                                                    ≥0
2  is a set of bundles (the atomic bundles), and w : B → R≥0 and may be nonlinear (bundles are priced, not just items
is a real-valued function over these bundles (the values of the alone) and non-anonymous (different agents may face a dif-
atomic bundles). An alternate useful syntax is a list of atomic ferent price for the same bundle).
bids, where an atomic bid is a bundle-value pair (S, x), and x
is to be interpreted as the value of bundle S ⊆ G. The seman- 2.3 CE and UCE Prices
tics of an atomic language L are deﬁned through the evalua- CAs, and the preference elicitation scheme we consider here,
tion function φL(· ; B, w) that extends w to the set of all bun- generally operate by converging to a competitive equilibrium.
dles, so that the value of a bundle S is v(S) = φL(S; B, w). This ensures that the ﬁnal allocation is indeed efﬁcient.
A well-formed atomic language evaluation function satisﬁes
                                                      Deﬁnition 1 A competitive equilibrium among agents N is
the following conditions:                                          ∗     ∗      ∗
                                                      an allocation S = (S1 , . . . , Sn) together with prices p that
L1. φ (B; B, w) = w(B) for all B ∈ B.                             ∗
     L                                                satisfy: (1) Si ∈ argmax[vi(S) − pi(S)] for i = 1, . . . , n
                                                                       S⊆G
L2. φL(S; B, w) = φL(S; B|S, w) for all S ⊆ G, where          ∗          Pn
                                                      and (2) S ∈ argmax   i=1 pi(Si).
    B|S = {T ∈ B | T ⊆ S}.                                         S∈Γ
               0                        0    G
L3. φL(S; B ∪ B , w) ≥ φL(S; B), for all B, B ⊆ 2 and   If (S∗, p) constitutes a CE, we call p the CE prices and say
    all S ⊆ G.                                        that prices p support allocation S∗. For our results later on
  As an important example, consider the family of lan- incentives, we also need the following concept:
           m
guages {Lk}k=1.  The evaluation functionP for language Deﬁnition 2 A universal competitive equilibrium is an
                                                                           ∗
Lk is φk(S; B, w) = maxS∈Dk(S;B)   B∈S w(B), where    allocation-price pair (S , p) that constitutes a competitive
                              B                                                                 ∗
Dk(S; B) deﬁnes the set of all S ⊆ 2 that satisfy (i) |S| ≤ k, equilibrium among agents N, and such that (S−i, p) con-
(ii) ∪B∈S B ⊆ S, (iii) B1 ∩ B2 = ∅ for B1, B2 ∈ S s.t. stitutes a competitive equilibrium among agents N\{i}, for
                                                                              ∗
B1 6= B2. We call elements of Dk(S; B) decompositions some efﬁcient allocation S−i of items G among agents
of S into atomic bundles from B. It is easy to see that φk N\{i}, for all i ∈ N.  In fact, it is not hard to show that prices p that support some are ever added to B˜, and we make value queries on these new
                 ∗
efﬁcient allocation S−i among agents N\{i} for all i ∈ N additions to appropriately set w˜(B). From these conditions
also support all such efﬁcient allocations.           and L3 we get that v˜(S) ≤ v(S) for all S ⊆ G at all times,
                                                      and see that v˜ underestimates v.
3  A Learning-Based Architecture for                    The   outer-loop of the  learning algorithm issues
   Elicitation                                        DEMAND(∅,  v˜), i.e. with prices quoted equal to the cur-
                                                      rent manifest and in the same bidding language. If the
The learning framework of Lahaie and Parkes [2004] (that we
                                                      response is YES we are done since 0 ≤ v(S) − v˜(S) ≤ 0 for
call ‘Learner’) converts individual exact learning algorithms all S ⊆ G. Otherwise we obtain a more-preferred bundle
into preference elicitation algorithms. We will demonstrate S that is a counterexample (this follows from a simple
how to instantiate it here for the class of atomic languages. adaptation of Lemma 1 in Lahaie and Parkes [2004]). We
The goal of a learning algorithm for our purposes is to ex-
                                                               0 < v(S) − v˜(S) = φ (S; B, w) − φ (S; B˜, w˜)
actly determine an unknown target valuation v represented in then have            L            L        .
a given bidding language L in a number of queries that scales By property L2 this means there is at least one undiscovered
                                                      atomic bundle B ∈ B| \ B|˜ . To derive the atomic bundle
polynomially with sizeL(v) and m. Let V be the space of                  S    S
possible valuations, in our case all bounded and normalized B from S, we use the subroutine presented as Algorithm 1.
valuations that satisfy free-disposal and have no externalities. Recall that K is an upper-bound on agent values.
  Exact learning in the computational learning theory liter-
                                                                               S
ature typically uses membership and equivalence queries. A Algorithm 1 ﬁndNewAtomic( )
                                                        Construct prices p where
membership query in our domain is just a value query. Learn-           S    ½
ing algorithms maintain a manifest valuation v˜, which is their               K      if T 6⊂ S
                                                                   p (T ) :=
current estimate of the target function. On an equivalence          S         v˜(T ) otherwise
query we present v˜ to the agent; it replies YES if v˜ = v,
                                                        Issue DEMAND(∅, p )
and otherwise replies with some counterexample S such that               S
                                                        if the agent replies YES then
v˜(S) 6= v(S).
                                                          return S
                  [    ]
  Lahaie and Parkes 2004 note that for a multi-agent sce- else if the agent replies with bundle R then
nario, learning algorithms can be run in parallel for each agent return ﬁndNewAtomic(R)
while they perform value queries. Demand queries play a key end if
role in coordinating learning across agents. When all agents

require the response to an equivalence query, one can instead The prices pS in this subroutine can be constructed in the
                           ˜∗
compute an efﬁcient allocation S and supporting CE prices atomic language as (Bp, w˜p), as follows. First, initialize
p˜ with respect to the current manifests, and present these to
                                                      Bp =  B˜ with w˜p =w ˜. Then, add atomic bids (S, K) and
the agents as demand queries. Call these the manifest allo- ({j}, K) for all j∈ / S to complete the representation. The
cation and the manifest prices. If all agents reply YES, we
                                                      size of this construction is clearly polynomial in sizeL(v)
have reached a CE and S˜∗ is already efﬁcient; we need not and m. Finally, we then update our manifest by adding
learn any more information. Otherwise, the responses to the (B, w˜(B)), where B is the atomic bundle discovered in Al-
demand queries are in fact counterexamples that can be re- gorithm 1 and w˜(B) is obtained via a value query, and con-
turned to the learning algorithms as responses to their equiv- tinue. This is correct by property L1. The correctness of the
alence queries.                                       algorithm follows directly from this lemma:
  In the case of a speciﬁc bidding language, such as an
atomic language, we need to provide means to: (1) learn a Lemma 1 On performing query DEMAND(∅, p) in Algo-
target valuation in the given bidding language; (2) compute rithm 1, if the reply to the demand query is YES then S is an
an efﬁcient allocation with respect to manifests (i.e. solve atomic bid, and otherwise the bundle returned R is a subset
winner-determination); (3) compute supporting CE prices. of S and also a counterexample to v˜.

3.1  Learning Atomic Languages                        Proof.    If the agent replies YES, then it must be that
We now describe a learning algorithm with value and demand v˜(R) = v(R) for all R ⊂ S, because v˜ always underes-
queries for atomic languages.2 The manifest valuation v˜ is timates v. In particular, we have v˜(B) = v(B) for each
stored as pair (B˜, w˜). Let (B, w) be the minimal L represen- B ∈ B|S, and every atomic bundle B ⊂ S has been dis-
tation of target valuation v. The manifest representation will covered by the minimality of (B, w) and condition L2. Then,
always satisfy (1) B˜ ⊆ B, and (2) w˜(B) = w(B) for B ∈ B˜. it must be that S ∈ B is a new atomic bid since v˜(S) 6= v(S).
                                                      If instead bundle R is returned then R ⊂ S by the structure
This is true initially because we set B˜ = ∅. Throughout the
                                                      of the prices (all other bundles are priced at K). Moreover, as
learning process we will ensure that only elements B ∈ B
                                                      v(R) > p(R) =v ˜(R), we have a new counterexample. 2
  2Note that it is perfectly alright for individual learning algorithms Note that this subroutine is called at most sizeL(v) times
to use demand queries in the Learner framework. In simulating these since a new atomic bundle is returned each time. Also, ob-
algorithms, we just need to be clear which demand queries can be serve that Algorithm 1 makes at most m demand queries,
performed asynchronously and in parallel, and which queries need because we always recurse on strict subsets of the original
to be performed on all agents simultaneously.         argument S and |S| ≤ m.Theorem 1 An unknown target valuation v in any atomic ~0 = (0, . . . , 0) (with n entries).3 The usual program to solve
language L can be learned with at most sizeL(v)·(m+1)+1 winner-determination is WD(N, G,~ B~, w,˜ ~0).4 Let v∗ be the
demand queries and at most sizeL(v) value queries.    value of the efﬁcient allocation obtained through WD. The
                                                      linear program (LP) to obtain CE prices is as follows.
  This algorithm is efﬁcient for atomic languages and pro-
vides the ﬁrst polynomial query learning algorithm for the min                πs
                                                         s
                                                        π ,πi,pi(Bij )
OR language. OR can be more concise than XOR although it               X n   X
                                                                    s
is not always expressive [Nisan, 2000]. We do not know of a s.t.   π ≥            pi(Bij )   ∀γ ∈ Γ   (6)

learning algorithm for OR with membership and equivalence              i=1 {j:Bij ∈γi}
queries alone, so this result suggests the power of demand                                ∀i ∈ N
                                                                 X            X
queries. In this context, demand queries are used to provide a                            ∀S ⊆ G
kind of “focused” equivalence query in which an agent’s new πi ≥     w˜i(Bij ) −  pi(Bij )     0      (7)
                                                                                          ∀βi, β ∈
                                                                                  0            i
                                                              {j:Bij ∈βi}   {j:Bij ∈β }
counterexample is restricted to being a subset of the current                     i       Dk(S; Bi)
counterexample.                                                                X n
                                                                            s           ∗
                                                                           π +    πi = v              (8)
3.2  Computing CE Prices for  Lk                                               i=1
                                                                   s
In this section we explain how to compute the manifest allo-      π ≥ 0, πi ≥ 0, pi(Bij ) ≥ 0
cation and prices for language Lk. It is useful to work with Variables πi can be interpreted as the utility to each agent
the explicit structure of Lk, although we intend this to be from their allocations at the prices computed, and variable
suggestive of an approach that is workable for any atomic πs as the revenue to the seller. This formulation has an ex-
language. We ﬁrst describe a generalized mixed-integer pro- ponential number of utility-maximization constraints (7) and
gram (MIP) for winner-determination (WD), which will also revenue-maximization constraints (6). To address this we can
be revelant for computing CE prices. All mathematical pro- use delayed constraint generation [Bertsimas and Tsitsiklis,
grams deﬁned in this section can be readily solved with MIP 1997]. We only keep a subset of these constraints (initially
solvers such as CPLEX.                                empty), and obtain speciﬁc values for each of the variables in
                                                      the LP. To check whether any implicit constraints of type (6)
  Assume agent i’s manifest is represented in language Lki .
The program description takes ﬁve arguments: (1) a set of are violated, we solve WD(N, G,~ B~, ~p,~0), where ~p is the vec-
agents N 0 ⊆ N; (2) a vector of bundles S, with one bun- tor of prices obtained from the LP. If the solution to this is
                        0                                         s
dle Si for each agent i ∈ N ; (3) a vector of sets of atomic greater than π , we add the constraint of type (6) that cor-
                                          0
bundles B, with one set Bi for each agent i ∈ N ; (4) val- responds to the allocation obtained by this auxiliary integer
ues wi(B) for each agent over all atomic bundles B ∈ Bi; program.
(5) prices pi(B) for each agent over all atomic bundles B ∈ Similarly, we can run WD({i}, G,~ B~, w,˜ ~p) for each agent
                              B˜i
Bi. Let ri =  |Bi|. Let Γi ⊆ 2   be the possible allo- i to see if we need to generate any constraints of type (7),
cations to agent i (sets of pairwise disjoint atomic bundles and check whether the result is greater than πi. Note that
with cardinality at most ki). An allocation here is a vector each such integer program has an exponential number of con-
γ = (γ1, . . . , γn) where γi ∈ Γi for each agent i ∈ N. The straints of type (3) and (4). To use delayed constraint gen-
                           0
generalized formulation WD(N , S, B, w, p) is as follows: eration for these, we can run WD({i}, (. . . , Si, . . .), B~, ~p,~0)
               "                 #
            X    X ri                                 as an auxiliary program, where Si is the solution to the main
 max                wi(Bij )aij − zi                  integer program. If the solution to this program has value
aij ,eβ ,zi
    i      i∈N0  j=1                                  greater than zi, we must generate corresponding constraints
                                                      of type (3) and (4).5
                X ri
                                         0
 s.t.              aij ≤ ki        ∀i ∈ N     (1)
                j=1                                   4   Communication Requirements of
            X     X                                       Implementing the VCG Outcome
                       aij ≤ 1     ∀g ∈ G     (2)
               0
            i∈N {j:Bij 3g}                            In the above discussion, we set aside the issue of incentives
                             X
                                    ∀β ∈ Γ            in preference elicitation. A reliable elicitation scheme must
      e  ≥ 1 − |{j : B ∈ β }| +  a    i   i   (3)
       βi           ij   i        ij ∀i ∈ N 0         also induce the agents to truthfully reveal their preferences.
                           {j:Bij ∈βi}                  Suppose that instead of implementing the ﬁnal CE prices
                 X
                                    ∀β ∈ Γ
          z ≥         p (B  )e        i   i   (4)
           i           i  ij βi     ∀i ∈ N 0             3The function 0 is identically 0 over all bundles.
              {j:Bij ∈βi}                                4
                X                                        In this case, constraints (3) are irrelevant because they only
                                    ∀g 6∈ Si          serve to activate eβ if appropriate atomic bundles are selected, to
                     aij = 0              0   (5)                    i
                                    ∀i ∈ N            indirectly ensure that zi is set to the correct price through con-
              {j:Bij 3g}                              straint (4), and the price here is always 0. Similarly constraints (5)

       aij ∈ {0, 1}, eβi ∈ {0, 1}, zi ≥ 0             are irrelevant because any agent can be allocated any bundle.
                                                         5Note that this last program is the usual one the proxy would use
      ~      ˜     ˜    ~
  Let B =  (B1, . . . , Bn), G = (G, . . . , G) (with n en- to determine the value or price of a bundle, given the Lk representa-
tries), w˜ = (w ˜1, . . . , w˜n) (the values in agent manifests), and tion of its agent’s manifest valuation.                                       P         ∗                      7
obtained by Learner, we provide a payment of i6=j vi(Si ) rium correspondence. The proof of the following is straight-
                             ∗      ∗                 forward and omitted in the interest of space.
to agent j for all j ∈ N, where (S1 , . . . , Sn) is the efﬁcient
allocation (agent values are available via value queries). As Lemma 2 Let hW, µ, hh, qii be a nondeterministic commu-
Nisan and Segal [2004] point out, this aligns each agent’s util- nication protocol that realizes the Vickrey outcome rule F .
ity with the overall objective, and truthful revelation becomes Let w ∈ W and let γˆ = h(w). If v, v∗ ∈ µ−1(w), then
                                                                  ∗
an ex post Nash equilibrium of the elicitation protocol. How- F2(v) = F2(v ), where the VCG payments are with respect
ever, this scheme is clearly very costly for the center. The to efﬁcient allocation γˆ.
center pays the agents! The cheapest payment scheme that
                                                        We note in particular that F2j(w) is entirely independent
aligns the agents’ individual incentives with economic efﬁ-                                          ∗
                                                      of component vj in the original proﬁle v. Thus if v−j, v ∈
ciency is the VCG payment [Krishna and Perry, 2000].                                                 −j
                                                      µ−1(w), then F (v) = F (v∗).
  In this section, we may drop the assumption of no exter- −j      2j       2j
nalities so that our results hold with greater generality. Valu- Theorem 2 Communication protocol Π = hW, µ, hh, qii re-
ations and prices are therefore deﬁned over entire allocations. alizes the Vickrey outcome rule F if and only if there exists
                                                                               nr
Let Vi be the set of possible valuations for agent i. A state is an assignment p : W ³ R of prices to messages such
                                                                   0
a valuation proﬁle v ∈ V = V1 ×. . .×Vn. An outcome in our that protocol Π = hW, µ, hh, pii realizes the universal price
scenario is an element of O = Γ×Rn, namely a speciﬁcation equilibrium correspondence E.
of the allocation and the agents’ payments.           Proof. As mentioned, Mishra and Parkes [2004] provide the
  The objective is to implement the Vickrey outcome rule, proof of sufﬁciency. Suppose protocol hW, µ, hh, qii realizes
which is a correspondence F = (F1, F2) : V ³ O mapping Vickrey outcome rule F . For each w ∈ W , let γˆ = h(w),
states v ∈ V to pairs (ˆγ, q) such that γˆ is an efﬁcient allo-
                                                      and let pi(γ) = supv ∈µ−1(w)[vi(γ) − vi(ˆγ)] for all i ∈ N
cation for proﬁle v and (q , . . . , q ) is the associated vector       i  i
                      1     n           P             and γ ∈  Γ. Note that γˆ is directly obtained from the in-
of VCG payments. Letting γˆ(v) ∈ arg max      v (γ)
                       P             γ∈Γ  i∈N  i      formation generated by Π, but state v and efﬁcient alloca-
and γˆ−j(v) ∈ arg maxγ∈Γ    vi(γ), the VCG payments
                         i6=j                         tions in the marginal-economies γˆ−j(v) for j ∈ N are not.
(from the agents to the center) are deﬁned as:        However, we do not need to explicitly compute this infor-
           X               X                          mation to implement a universal price equilibrium accord-
   F2j(v) =    vi(ˆγ−j(v)) −  vi(ˆγ(v)) for j ∈ N     ing to Deﬁnition 2. Let q(w) be the VCG payments asso-
            i=6 j          i6=j                       ciated with efﬁcient allocation γˆ = h(w). The ﬁrst part
                                                      of the proof of necessity, which shows that prices p are CE
  Mishra and Parkes [2004] have shown that to compute prices, is proved by Nisan and Segal [2004]. We will show
VCG payments it is sufﬁcient to obtain UCE prices. In fact, that the prices p just constructed are in fact UCE prices cor-
we show here that it is not only sufﬁcient but necessary that a responding to γˆ, that are valid for all v ∈ µ−1(w). Fix agents
                                              6
communication protocol for VCG discover UCE prices.   i 6= j. By Lemma 2, any two v , v∗ ∈ µ−1(w) lead to the
                                                                                −j  −j  P−j
  We consider nondeterministic communication protocols. same VCG payment. Hence we obtain    [v (ˆγ (v)) −
This is the setting in which a center claims the VCG outcome                P             i6=j i −j
                                                      vi(ˆγ)] = sup    −1        [vi(ˆγ−j(v)) − vi(ˆγ)], which
is (γ, q), and must send messages to each agent to convince       v−j ∈µ−j (w) i6=j
                                                                           −1
them of this outcome. Each agent checks that the message is holds for all v−j ∈ µ−j (w) (call this equation (I)). By
valid given the semantics of the protocol and its private type, privacy preservationP we can write the right-hand side as
and if all respond YES the protocol has veriﬁed the outcome. sup −1        [vh(ˆγ−j(v))−vh(ˆγ)]+pi(ˆγ−j(v)).
                                                         v−i,j ∈µ−i,j (w) h6=i,j
Deﬁnition 3 [Nisan and Segal, 2004] A nondeterministic  By deﬁnition pi(ˆγ) = 0, so EquationP (I) gives: [vi(ˆγ) −
                                                      p (ˆγ)] − [v (ˆγ (v)) − p (ˆγ (v))] =  [v (ˆγ (v)) −
communication protocol is a triple Π = hW, µ, gi, where W i    i  −j       i P−j        h6=i,j h −j
is the message set, µ : V ³ W is the message correspon- vh(ˆγ)]−sup    −1          [vh(ˆγ−j(v))−vh(ˆγ)]. The
                                                                 v−i,j ∈µ−i,j (w) h6=i,j
dence, and g : W →  O is the outcome function, and the right-hand side is at most 0, so γˆ (v) is utility-maximizing
message correspondence µ has the following properties:                            −j
                                                      for all agents i ∈ N  at prices pi. The ﬁnal step is
  • Existence: µ(v) 6= ∅ for all v ∈ V.               to establish that γˆ−j(v) is a revenue-maximizing alloca-
                              T                       tion among agents N\{j}.  By privacy preservation, the
  • Privacy preservation: µ(v) = i µi(vi) for all v ∈ V, supremum on the right-hand side of equation (I) can be
    where µ : V ³ W  for all i ∈ N.
           i  i                                       brought within the summation. UsingP our price construc-
                                                      tion and rearranging, this yields:    p (ˆγ (v)) =
Protocol Π realizes choice correspondence F : V ³ O if P                          P      i6=j i −j
g(µ(v)) ⊆ F (v) for all v ∈ V.                          i6=j[vi(ˆγ−j(v)) − vi(ˆγ)] ≥ i6=j[vi(γ) − vi(ˆγ)], for
                                                      all γ  ∈  Γ.  This holds for all v   ∈  µ−1(w), so
Let r = |Γ| be the size of the (ﬁnite) set of allocations. De- P                     P−j        −j
                                                           p (ˆγ (v)) ≥ sup     −1        [v (γ) − v (ˆγ)] =
note the set of universal price equilibria in state v by E(v), i6=j i −j   v−j ∈µ (w)  i6=j i     i
                   nr                                 P                         −j      P
where E : V ³ Γ × R  denotes the universal price equilib-  sup    −1   [vi(γ) − vi(ˆγ)] =    pi(γ), for all
                                                        i6=j   vi∈µi (w)                  i6=j
  6The proof of this result, together with the associated deﬁnitions, 7This correspondence only maps states to personalized prices
closely follows the developments by [Nisan and Segal, 2004] who and efﬁcient allocations, and not to efﬁcient allocations in the
show that CE prices are necessarily revealed when a (nondetermin- marginal-economies with each agent removed. It is implied that the
istic) communication protocol computes an efﬁcient allocation. prices also support efﬁcient allocations in the marginal-economies.