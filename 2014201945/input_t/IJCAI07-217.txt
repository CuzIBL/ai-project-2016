                        Multi-issue Negotiation Protocol for Agents:
                              Exploring Nonlinear Utility Spaces
                       Takayuki Ito                     Hiromitsu Hattori and Mark Klein
             Department of Computer Science,              Center for Collective Intelligence,
      Department of Techno-Business Administration,         Sloan School of Management,
              Nagoya Institute of Technology.          Massachusetts Institute of Technology.
                 ito.takayuki@nitech.ac.jp             hatto@ics.nitech.ac.jp,m klein@mit.edu

                    Abstract                            We propose a bidding-based multiple-issue negotiation
                                                      protocol suited for agents with such nonlinear utility func-
    Multi-issue negotiation protocols have been studied tions. Agents generate bids by sampling their own utility
    widely and represent a promising ﬁeld since most  functions to ﬁnd local optima, and then using constraint-
    negotiation problems in the real world involve in- based bids to compactly describe regions that have large util-
    terdependent multiple issues. The vast majority   ity values for that agent. These techniques make bid gener-
    of this work has assumed that negotiation issues  ation computationally tractable even in large (e.g., 1010 con-
    are independent, so agents can aggregate the util- tracts) utility spaces. A mediator then ﬁnds a combination of
    ities of the issue values by simple summation, pro- bids that maximizes social welfare. Our experimental results
    ducing linear utility functions. In the real world, show that our method substantially outperforms negotiation
    however, such aggregations are often unrealistic. methods designed for linear utility functions. We also show
    We cannot, for example, just add up the value of  that our protocol can guarantee optimality in the theoretical
    car’s carburetor and the value of car’s engine when limit.
    engineers negotiate over the design a car. These    The remainder of the paper is organized as follows. First
    value of these choices are interdependent, result- we describe a model of non-linear multi-issue negotiation.
    ing in nonlinear utility functions. In this paper, Second, we describe a bidding-based negotiation protocol de-
    we address this important gap in current negotia- signed for such contexts. Third, we present experimental as-
    tion techniques. We propose a negotiation protocol sessment of this protocol. Finally, we compare our work with
    where agents employ adjusted sampling to gener-   previous efforts, and conclude with a discussion of possible
    ate proposals, and a bidding-based mechanism is   avenues for future work.
    used to ﬁnd social-welfare maximizing deals. Our
    experimental results show that our method substan- 2  Negotiation with Nonlinear Utilities
    tially outperforms existing methods in large non-
                                                      We consider the situation where n agents want to reach an
    linear utility spaces like those found in real world                           ∈
    contexts.                                         agreement. There are m issues, sj S, to be negotiated. The
                                                      number of issues represents the number of dimensions of the
                                                      utility space. For example, if there are 3 issues1, the utility
1  Introduction                                       space has 3 dimensions. An issue sj has a value drawn from
                                                                                            2
Multi-issue negotiation protocols represent a important ﬁeld the domain of integers [0,X], i.e., sj ∈ [0,X] .
of study since negotiation problems in the real world are of- A contract is represented by a vector of issue values s =
ten complex ones involving multiple issues. While there has (s1, ..., sm).
been a lot of previous work in this area ([Faratin et al., 2002; An agent’s utility function is described in terms of con-
Fatima et al., 2004; Lau, 2005; Soh and Li, 2004])theseef- straints. There are l constraints, ck ∈ C. Each constraint
forts have, to date, dealt almost exclusively with simple ne- represents a region with one or more dimensions, and has an
gotiations involving independent mltiple issues, and there-
fore linear (single optimum) utility functions. Many real- 1The issues are not ”distributed” over agents. The agents are all
world negotiation problems, however, involve interdepen- negotiating over a contract that has N (e.g. 10) issues in it. All
                                                      agents are potentially interested in the values for all N issues.
dent multiple issues. When designers work together to de- 2
sign a car, for example, the value of a given carburetor is A discrete domain can come arbitrarily close to a real domain
highly dependent on which engine is chosen. The addition of by increasing the domain size. As a practical matter, very many
                                                      real- world issues that are theoretically real (delivery date, cost) are
such interdependencies greatly complicates the agent’s util- discretized during negotiations. Our approach, furthermore, is not
ity functions, making them nonlinear, with multiple optima. theoretically limited to discrete domains. The deal determination
Negotiation mechanisms that are well-suited for linear utility part is unaffected, though the bid generation step will have to be
functions, unfortunately, fare poorly when applied to nonlin- modiﬁed to use a nonlinear optimization algorithm suited to real
ear problems ([Klein et al., 2003]).                  domains.

                                                IJCAI-07
                                                  1347                 Utility

                   55
                                                              Utility

                           46Issue 2

                  3

               7
           Issue 1                                                           Contracts
                                                           Figure 3: Adjusting the Sampled Contract Points
           Figure 1: Example of A Constraint
                                                      billion) possible contracts, too many to evaluate exhaustively.
                                                      Agents must thus operate in a highly uncertain environment.
                                                        Finding an optimal contract for individual agents with such
                                                      utility spaces can be handled using well-known nonlinear op-
                                                      timization techniques such a simulated annealing or evolu-
                                                      tionary algorithms. We can not employ such methods for ne-
                                                      gotiation purposes, however, because they require that agents
                                                      fully reveal their utility functions to a third party, which is
                                                      generally unrealistic in negotiation contexts.
                                                        The objective function for our protocol can be described as
                                                      follows:                 
                                                                        arg max    ui(s)             (1)
                                                                            s
                                                                               i∈N
                                                      Our protocol, in other words, tries to ﬁnd contracts that maxi-
                                                      mize social welfare, i.e., the total utilities for all agents. Such
  Figure 2: A Nonlinear Utility Space for a Single Agent
                                                      contracts, by deﬁnition, will also be Pareto-optimal.

associated utility value. A constraint ck has value wi(ck,s) 3 The Bidding-based Negotiation Protocol
if and only if it is satisﬁed by contract s. Figure 1 shows an Our bidding-based negotiation protocol consists of the fol-
example of a binary constraint between issues 1 and 2. This lowing four steps:
constraint has a value of 55, and holds if the value for issue 1 [Step 1: Sampling] Each agent samples its utility space in
is in the range [3, 7] and the value for issue 2 is in the range order to ﬁnd high-utility contract regions. A ﬁxed number of
[4, 6]. Every agent has its’ own, typically unique, set of con- samples are taken from a range of random points, drawing
straints.                                             from a uniform distribution. Note that, if the number of sam-
An agent’s utility for a contract s is deﬁned as ui(s)= ples is too low, the agent may miss some high utility regions

  ck∈C,s∈x(ck) wi(ck,s),wherex(ck) is a set of possible in its contract space, and thereby potentially end up with a
contracts (solutions) of ck. This expression produces a sub-optimal contract.
”bumpy” nonlinear utility space, with high points where [Step 2: Adjusting] There is no guarantee, of course, that
many constraints are satisﬁed, and lower regions where few a given sample will lie on a locally optimal contract. Each
or no constraints are satisﬁed. This represents a crucial depar- agent, therefore, uses a nonlinear optimizer based on simu-
ture from previous efforts on multi-issue negotiation, where lated annealing to try to ﬁnd the local optimum in its neigh-
contract utility is calculated as the weighted sum of the util- borhood. Figure 3 exempliﬁes this concept. In this ﬁgure, a
ities for individual issues, producing utility functions shaped black dot is a sampling point and a white dot is a locally op-
like ﬂat hyper-planes with a single optimum. Figure 2 shows timal contract point.
an example of a nonlinear utility space. There are 2 issues, [Step 3: Bidding] For each contract s found by adjusted sam-
i.e., 2 dimensions, with domains [0, 99]. There are 50 unary pling, an agent evaluates its utility by summation of values of
constraints (i.e., that relate to 1 issue) as well as 100 binary satisﬁed constraints. If that utility is larger than the reserva-
constraints (i.e., that inter-relate 2 issues). The utility space tion value δ, then the agent deﬁnes a bid that covers all the
is, as we can see, highly nonlinear, with many hills and val- contracts in the region which have that utility value. This is
leys.                                                 easy to do: the agent need merely ﬁnd the intersection of all
  We assume, as is common in negotiation contexts, that the constraints satisﬁed by that s.
agents do not share their utility functions with each other, in Steps 1, 2 and 3 can be captured as follows:
order to preserve a competitive edge. It will generally be the SN: The number of samples
case, in fact, that agents do not fully know their desirable
                                                        : Temperature for Simulated Annealing
contracts in advance, because each own utility functions are T
simply too large. If we have 10 issues with 10 possible val- V : A set of values for each issue, Vm is for an issue m
                                             10
ues per issue, for example, this produces a space of 10 (10 1: procedure bid-generation with SA(Th, SN, V, T)

                                                IJCAI-07
                                                  1348                                      Agent 1           The mediator employs breadth-ﬁrst search with branch cut-
                                                      ting to ﬁnd social-welfare-maximizing overlaps:
                                                      Ag: A set of agents
                                                      B: A set of Bid-set of each agent (B = {B0,B1, ..., B },
         Utility                                                                                   n
                                                        A set of bids from agent i is Bi = {bi,0,bi,1, ..., bi,m})
                                                        1: procedure search solution(B)
                                                                       { 0  }
                                                        2: SC  :=  j∈B0  b ,j , i := 1
                                     Contracts                      |  |
          The 2nd best                                  3: while i<  Ag do
                                                               
          contract point    The best contract point     4:  SC   := ∅
                                      Agent 2           5:  for each s ∈ SC do
                                                        6:   for each bi,j ∈ Bi do
                                                               
                                                        7:    s  := s ∪ bi,j
                                                                                            
                                                        8:    if s is consistent then SC := SC ∪ s
         Utility                                                      
                                                        9:  SC  := SC , i := i +1
                                                       10: maxSolution  = getMaxSolution(SC)
                                                       11: return maxSolution
                                     Contracts
                                                        It is easy to show that, in theory, this approach can be guar-
             Figure 4: Deal Identiﬁcation             anteed to ﬁnd optimal contracts. If every agent exhaustively
                                                      samples every contract in its utility space, and has a reser-
             ∅
 2:  Psmpl :=                                         vation value of zero, then it will generate bids that represent
 3:  while |Psmpl| <SN                                the agent’s complete utility function. The mediator, with the
 4:   Psmpl := Psmpl ∪{pi} (randomly selected from P ) complete utility functions for all agents in hand, can use ex-
           |I|                                        haustive search over all bid combinations to ﬁnd the social
 5:  P := Π    V  , P  := ∅
           m=0  m   sa                                welfare maximizing negotiation outcome. But this approach
 6:  for each p ∈ Psmpl do
                                                     is only practical for very small contract spaces. The compu-
 7:   p := simulatedAnnealing(p, T )                  tational cost of generating bids and ﬁnding winning combina-
                    
 8:   Psa := Psa ∪{p }                                tions grows rapidly as the size of the contract space increases.
 9:  for each p ∈ Psa do                              As a practical matter, we have to limit the number of bids the
10:   u := 0, B := ∅, BC := ∅                         agents can generate. Thus, deal identiﬁcation can terminate in
               ∈                                      a reasonable amount of time. But limiting the number of bids
11:   for each c C do                                 raises the possibility that we will miss the optimum contract.
12:    if c contains p as a contract                  The bid limit thus mediates a tradeoff between outcome opti-
       and p satisﬁes c then                          mality and computational cost. We will explore this tradeoff
13:     BC  := BC ∪ c                                 later in the paper.
14:     u := u + vc                                   4   Experiments
15:   if u>= Ththen                                   4.1  Setting
16:    B := B ∪ (u, BC)                               We conducted several experiments to evaluate the effective-
                                                      ness and scalability of our approach. In each experiment, we
                                                      ran 100 negotiations between agents with randomly gener-
[Step 4: Deal identiﬁcation] The mediator identiﬁes the ﬁ-
                                                      ated utility functions. For each run, we applied an optimizer
nal contract by ﬁnding all the combinations of bids, one from
                                                      to the sum of all the agents’ utility functions to ﬁnd the con-
each agent, that are mutually consistent, i.e., that specify
                                                      tract with the highest possible social welfare. This value was
overlapping contract regions3. If there is more than one such
                                                      used to assess the efﬁciency (i.e., how closely optimal social
overlap, the mediator selects the one with the highest summed
                                                      welfare was approached) of the negotiation protocols. To ﬁnd
bid value (and thus, assuming truthful bidding, the highest so-
                                                      the optimum contract, we used simulated annealing (SA) be-
cial welfare) (see Figure 4). Each bidder pays the value of its
                                                      cause exhaustive search became intractable as the number of
winning bid to the mediator.
                                                      issues grew too large.The SA initial temperature was 50.0 and
                                                      decreased linearly to 0 over the course of 2500 iterations. The

  3                                                   initial contract for each SA run was randomly selected.
   A bid has an acceptable region. For example, if a bid has a re- We compared two negotiation protocols: hill-climbing
gion, such as [0,2] for issue1, [3,5] for issue2, the bid is accepted
by a contract point (1,4), which means issue1 takes 1, issue2 takes (HC), and our bidding-based protocol with random sampling
4. If a combination of bids, i.e. a solution, is consistent, there are (AR). The HC approach implements a mediated single-text
deﬁnitely overlapping region. For instance, a bid with regions (Is- negotiation protocol([Raiffa, 1982]) based on hill-climbing.
sue1,Issue2) = ([0,2],[3,5]), and another bid with ([0,1],[2,4]) is con- We start with a randomly generated baseline contract. The
sistent.                                              mediator then generates a variant of that baseline and submits

                                                IJCAI-07
                                                  1349it for consideration to the negotiating agents. If all the agents
prefer the variant over its predecessor, the variant becomes Table 1: Optimality with linear utility functions, for 4 agents
the new baseline. This process continues until the mediator Issues   12345
can no longer ﬁnd any changes that all the agents can accept: HC   0.973  0.991  0.998  0.989 0.986
                   {          }                             Issues   678910
I: A set of issues, I = i1,i2, ..., in                       HC    0.987  0.986  0.996  0.988 0.991
V : A set of values for each issue, Vn is for an issue n
                                                             1.2
 1: procedure systematicLS(I,V )
 2:  S := initial solution (set randomly)                    1
 3:  for each i ∈ I do
                                                             0.8
 4:   for each j ∈ Vi do
        
 5:    S  := S with issue i’s value set to j
                                                           0.6
 6:    if all agents accept S then S = S
                                                           Optimality  Rate
 7: return S
                                                             0.4
                                                                   HC
  In our implementation, every possible single-issue change        AR
was proposed once, so the HC  protocol requires only         0.2
(domain size) × (number of issues) iterations for each           2345678910
negotiation (e.g., 100 steps for the 10 issue case with domain               Number of Issues
[0, 9]). We selected this protocol as a comparison case be- Figure 5: Social welfare with nonlinear utility functions
cause it represents a typical example of the negotiation proto-
cols that have been applied successfully, in previous research than about√ 6400,000 bid combinations, which implies a
                                                                  n
efforts, to linear utility spaces.                        limit of 6400000 bids per agent, for N agents.
  The parameters for our experiments were as follows:   In our experiments, we ran 100 negotiations in every con-
  • Number of agents is N =2to 5. Number of issues is 1 dition. Our code was implemented in Java 2 (1.4.2) and run
    to 10. Domain for issue values is [0, 9].         on a dual 2GHz processor PowerMac G5 with 1.2GB mem-
                                                      ory under Mac OS X 10.4.
  • Constraints for linear utility spaces : 10 unary con-
    straints.                                         4.2  Results
                                                      Let us ﬁrst consider the linear utility function (independent
  • Constraints for nonlinear utility spaces: 5 unary con-
                                                      issue) case that has been the focus of almost all previous work
    straints, 5 binary constraints, 5 trinary contraints, etc. (a
                                                      on multi-issue negotiation. As we can see (Table 1), even
    unary contraint relates to one issue, an binary constraint
                                                      the simple HC protocol produces essentially optimal results
    relates to two issues, and so on).
                                                      for a wide range of contract space dimensions. This is easy
  • The  maximum   value for a constraint : 100  ×    to understand. Since the issues are independent, the media-
    (Number of Issues). Constraints that satisfy many tor can optimize over each issue independently, ﬁrst ﬁnding
    issues thus have, on average, larger weights. This seems the most-favored value for issue 1, then for issue 2, and so
    reasonable for many domains. In meeting scheduling, on. Once every issue has been optimized, the ﬁnal contract
    for example, higher order constraints concern more peo- will generally be very close to optimal (though full optimality
    ple than lower order constraints, so they are more impor- can not be guaranteed because the HC protocol does not ex-
    tant for that reason.                             plore whether offsetting concessions between different agents
  • The maximum width for a constraint : 7. The following - AKA logrolling - could somewhat increase social welfare).
    constraints, therefore, would all be valid: issue 1 = [2, 6], We used hill-climbing to conﬁrm how inefﬁcient the simple
    issue 3 = [2, 9] and issue 7 = [1, 3].            hill-climbing is for the multiple interdependent-issues case
                                                      even if the hill climbing performs well in the single issue
  •
    The number of samples taken during random sampling: cases. As shown in the experimental result, our proposing
                       ×
    (Number of Issues)   200.                         method is much better than the simple hill-climbing. Of
  • Annealing schedule for sample adjustment: initial tem- course, if we take multiple hill-climbing and pick the best re-
    perature 30, 30 iterations. Note that it is important that sult, it could make good quality solution. However, that is not
    the annealer not run too long or too ’hot’, because then completely straightforward. After the multiple hill-climbing,
    each sample will tend to ﬁnd the global optimum instead it is a problem how to pick the ”best” result when the agents
    of the peak of the optimum nearest the sampling point. differ concerning which results are better.
                                                        The story changes dramatically, however, when we move
  • The reservation value threshold agents used to select
                                                      to a nonlinear utility function (interdependent issue) case
    which bids to make: 100.The threshold is used to cut
                                                      (Figure 5 shows 4 agents case). In this context, HC produces
    out contract points which have low utility.
                                                      highly suboptimal results, averaging only 40% of optimal, for
  • The√ limitation on the number of bids per agent:  example, for the 10 issue case. Why does this happen? Since
    n 6400000 for N agents. It was only practical to run every agent has a ”bumpy” (multi-optimum) utility function,
    the deal identiﬁcation algorithm if it explored no more the HC mediator’s search for better contracts grinds to a halt

                                                IJCAI-07
                                                  1350         4500

         4000      AR                                          1
         3500      HC                                         0.9
                                                              0.8
         3000                                                 0.7
                                                               0.6
         2500                                                  0.5
                                                               0.4
         2000
                                                               0.3

                                                             Optimality  Rate                   2
                                                                                              3
       CPU  time [ms] 1500                                     0.2                          4
                                                               0.1                        5
                                                                                       6
         1000                                                  0                     7
                                                                2                 8    Number of Issues
                                                                   3           9
         500                                                           4    10
                                                               Number of Agents 5
           0                                                Figure 7: Scalability with the number of agents
              2345678910
                       Number of Issues                      1.2
                                                                    100  200
         Figure 6: CPU time [ms] with 4 agents               1.15   300  500
                                                                    700  900
as soon as any of the agents reach a local optimum, even if a 1.1

contract which is better for all agents exists somewhere else 1.05
in the contract space. The AR protocol, by contrast, achieves
much better (often near-optimal) outcomes for higher-order    1
problems. For example, even for the 10 issue case, AR proto- Optimality Rate
col can secure 80% of optimal, which is twice as good as HC. 0.95

Since agents using the AR protocol generate bids that cover  0.9
multiple optima in their utility spaces, our chances of ﬁnding
                                                             0.85
contracts that are favored by all agents is greatly increased.   2345678910
  The increased social welfare of our bidding-based protocol                  Number of Issues
does, however, come at a cost. Figure 6 shows the compu-  Figure 8: Tradeoff of Optimality vs Sampling Rate
tation time needed by the HC and AR negotiation protocols
with 4 agents. HC has by far the lowest computational cost, as comparison, we conducted experiments in which the number
is to be expected considering that agents do not need to gener- of samples per issue was increased at other (still linear) rates:
ate bids themselves and need consider only a relative handful by 100 samples per issue, 200 samples per issue (our original
of proposals from the mediator. HC’s computational needs setting), 300 samples per issue, and so on. The result of this
grow linearly with problem size. In the AR protocol, by con- comparison are shown in Figure 8. As we can see, the op-
trast, the bid generation computation increases linearly with timality rate became better when there were more sampling
problem size, and the deal identiﬁcation times increases expo-
                               (#       )             points. There is, however, a down side to this. Table 3 shows
nentially (as (# of bids per agent) of agents ). At some the failure rate (i.e., the percentage of negotiations that do
point, the deal identiﬁcation cost becomes simply too great. not lead to an agreement) for each setting. Paradoxically, the
This explains why social welfare optimality begins to drop failure rate is higher when there are more sampling points, es-
off, in ﬁgure 5, when the number of issues exceeds 5. In our pecially for problems with more issues. When there are many
computing environment, the deal identiﬁcation algorithm can sampling points, each agent has a better chance of ﬁnding re-
ﬁnd results in a reasonable period of time if the total number ally good local optima in its utility space, contracts on top
of bid combinations√ is less than 6,400,000. With 4 agents, this of hills that are more likely to be narrow than wide. Since
implies a limit of 4 6400000 = 50 bids per agent. The number the number of bids is limited due to deal identiﬁcation algo-
of bids generated per agent begins to grow beyond that limit rithm’s computation time, an agent can cover only a narrow
as we go to 4 or more issues (see Table 2). This means that portion of its utility space with own bids. As a result, we run
the mediator is forced to start ignoring some (lower-valued) an increased risk of not ﬁnding an overlap between the bids
submitted bids, with the result that social-welfare maximizing from the negotiating agents.
contracts are more likely to be missed.
  In ﬁgure 7, we summarize the impact of these scaling con- 5 Discussion
siderations. This ﬁgure shows the social welfare optimality of While deal identiﬁcation in our protocol appears superﬁ-
the AR protocol, for different numbers of issues and agents, cially similar to deal identiﬁcation in combinatorial auc-
given√ that the mediator limits the number of bids per agent tions ([Sandholm et al., 2002]), in reality they are fundamen-
to ( n 6400000). As we can see, AR produces outcomes with tally different, and as a result we have been unable to take
90%+ optimality for up to 8 issues, depending on the number advantages of the recent works on developing more efﬁcient
of agents.                                            deal identiﬁcation algorithms. These algorithms address a
  We can expect that the optimality will be improved by in- ”sharing” problem: the challenge is to allocate resources to
creasing the number of samples an agent takes of its own util- buyers in a way that maximizes social welfare, with the con-
ity space, when searching for bids. In our original setting, straint that each resource may have only a single ”winner”.
the number of samples was increased by 200 per issue. For Our protocol, by contrast, raises a ”ﬁt” problem: the chal-

                                                IJCAI-07
                                                  1351