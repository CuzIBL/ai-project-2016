                             Recent Progress in Heuristic Search:
                 A Case Study of the Four-Peg Towers of Hanoi Problem
                     Richard E. Korf                                Ariel Felner
              Computer Science Department         Department of Information Systems Engineering
           University of California, Los Angeles         Ben-Gurion University of the Negev
                  Los Angeles, CA 90095                P.O. Box 653, Beer-Sheva, 84105 Israel
                     korf@cs.ucla.edu                             felner@bgu.ac.il

                    Abstract                          assumption [Dunkel, 1941], and the conjecture remains un-
                                                      proven. Absent a proof, the only way to verify optimality of
    We integrate a number of new and recent advances  this solution for a given number of discs is by a systematic
    in heuristic search, and apply them to the four-  search for shorter solutions. Previously this had been done
    peg Towers of Hanoi problem. These include fron-  forupto24discs[Korf, 2004], and we extend it here to 30
    tier search, disk-based search, parallel processing, discs. The size of the problem space is 4n,wheren is the
    multiple, compressed, disjoint, and additive pat- number of discs, since each disc can be on any of four pegs,
    tern database heuristics, and breadth-ﬁrst heuristic and the discs on any peg must be in sorted order. Thus, each
    search. New ideas include pattern database heuris- new disc multiplies the size of the problem space by four.
    tics based on multiple goal states, a method to re-
    duce coordination among multiple parallel threads,
    and a method for reducing the number of heuris-
    tic calculations. We perform the ﬁrst complete
    breadth-ﬁrst searches of the 21 and 22-disc four-
    peg Towers of Hanoi problems, and extend the ver-
    iﬁcation of “presumed optimal solutions” to this
    problem from 24 to 30 discs. Veriﬁcation of the
    31-disc problem is in progress.

1  Towers of Hanoi Problems                                  Figure 1: Four-Peg Towers of Hanoi Problem
The standard Towers of Hanoi problem consists of three pegs,
and n different sized discs, initially stacked in decreasing or-
der of size on one peg. The task is to transfer all the discs 2 Prior Work on Four-Peg Towers of Hanoi
from the initial peg to a goal peg, by only moving one disc at
any time, and never placing a larger disc on top of a smaller The simplest search is a brute-force search, with no heuristics.
disc. To move the largest disc from the initial peg to the goal Complete breadth-ﬁrst searches, generating all states from a
peg, none of the smaller discs can be on either peg, but must given initial state, have previously been done for up to 20
                                                           [         ]
all be on the remaining auxiliary peg.1 This generates a sub- discs Korf, 2004 .
problem of the same form as the original problem, allowing a There are two different symmetries that can be used to
simple recursive solution. It is easily proven that the shortest speed up this search. The ﬁrst is that transferring the discs
solution to this problem requires 2n − 1 moves.       from an initial peg to any of the other three pegs are equiva-
  The problem becomes more interesting if we add another lent problems. Thus, given any state, we sort the three non-
peg (see Figure 1). While the four-peg Towers of Hanoi initial pegs in order of their largest disc, reducing the number
                                                                                  [                 ]
problem is 117 years old [Hinz, 1997], the optimal solu- of states by almost a factor of six Bode & Hinz, 1999 .The
tion length is not known in general. The difﬁculty is that reduction is slightly less than six because if two non-initial
moving the largest disc from the initial to the goal peg re- pegs are empty, permuting them has no effect.
                                                                                             [
quires that the remaining discs be distributed over the two The other is a symmetry of the solution path Bode & Hinz,
                                                          ]
auxiliary pegs, but we don’t know a priori how to distribute 1999 . Assume that we ﬁnd a path to a middle state,where
them in an optimal solution. In 1941, a recursive strategy all discs but the largest are distributed over the two auxiliary
was proposed that constructs a valid solution [Frame, 1941; pegs. We can then move the largest disc from the initial to
Stewart, 1941], and optimality proofs of this “presumed op- the goal peg. If we then execute the moves made to reach
timal solution” were offered, but they contained an unproven the middle state in reverse order, we will return all but the
                                                      largest disc to the initial peg. If, however, while executing
  1An auxiliary peg is any peg other than the initial or goal peg. these moves, we interchange the initial and goal pegs, we will

                                                IJCAI-07
                                                  2324move all but the largest disc to the goal peg, completing the new conﬁguration of discs is ﬁrst encountered, we store the
solution. Thus, once we reach a middle state, we can generate corresponding search depth in the database. This search con-
a complete solution, and a shortest path to a middle state gen- tinues until all conﬁgurations have been generated. A pattern
erates a shortest solution path. In practice, this cuts the search database is only constructed once, and can be used to solve
depth in half, and we refer to this as a half-depth search. any problem instances with the same goal state. Note that
  [Korf, 2004] used both these symmetries in a brute-force any set of 15 different-sized discs generate exactly the same
half-depth search to verify the presumed optimal solution pattern database, regardless of their actual sizes.
lengths for up to 24 discs. Additional techniques he used,
such as frontier search, storing nodes on magnetic disk2,and
parallel processing, are discussed below.             4   Multiple-Goal Pattern Databases
  Verifying the optimal solution length for more discs re-
quires a heuristic search. Previously, the largest four-peg Our main new contribution is pattern databases for multiple
Towers of Hanoi problem that had been solved optimally with goal states. Rather than initializing the breadth-ﬁrst search
heuristic search was 19 discs [Zhou & Hansen, 2006],com- queue with one goal state, we seed it with all the goal states
pared to 24 discs for brute-force half-depth search. The rea- at depth zero. Then, the depth of any state in the breadth-ﬁrst
son is because the heuristic search was a full-depth search, search is the length of a shortest path to any goal state.
computing the heuristic to the single goal state.       For example, to construct a pattern database of the number
  The most important new idea in this paper is how to com- of moves needed to transfer 15 discs to two auxiliary pegs, we
                                                                                   215
pute a heuristic that estimates the length of a shortest path initialize the search queue with all states in which the 15
to any of a number of goal states. This allows us to imple- discs are distributed among the two auxiliary pegs, and assign
ment a heuristic half-depth search, by estimating the length each a value of zero in the database. The breadth-ﬁrst search
of a shortest path to a middle state. The naive approach of runs until all conﬁgurations of 15 discs have been generated,
computing a heuristic to each middle state, and taking the recording their depths in the database. Thus, for any state,
minimum of these values for each state of the search, is im- the database value is the minimum number of moves needed
practical with a large number of middle states. For the n-disc, to move all the discs to the two auxiliary pegs.
four-peg problem, there are 2n−1 possible middle states, one While this may appear obvious in hindsight, it escaped the
for each way to distribute the n−1 smallest discs over the two attention of at least three groups of researchers working on the
auxiliary pegs. This can be reduced to 2n−2, by assigning the Towers of Hanoi. [Felner, Korf, & Hanan, 2004] used heuris-
second-largest disk to one of the auxiliary pegs.     tic search with additive pattern database heuristics to solve
                                                      up to 17 discs. [Felner et al., 2004] used compressed pattern
3  Pattern Database Heuristics                        databases to solve up to 18 discs. [Zhou & Hansen, 2006]
                                                      solved up to 19 discs, using breadth-ﬁrst heuristic search
Pattern databases lookup tables stored in memory [Culber- with pattern databases. All of these were full-depth heuristic
son & Schaeffer, 1998], and are the most effective heuris- searches to a single goal state, using pattern database heuris-
tics known for many problems, including Rubik’s cube [Korf, tics. At the same time, all of these researchers knew that
1997] and the sliding-tile puzzles [Korf & Felner, 2002].A brute-force half-depth searches to multiple goal states could
pattern database for the Towers of Hanoi contains an entry for solve larger problems [Korf, 2004], but didn’t see how to
each possible conﬁguration of a subset of the discs, the pat- combine the two together.
tern discs. The value of each entry is the number of moves Multiple-goal pattern databases also have real-world appli-
required to move the pattern discs from their given conﬁgura- cations. Consider a car navigation system that must quickly
tion to the goal peg, ignoring all other discs [Felner, Korf, & plan a route to the nearest hospital. We ﬁrst run Dijkstra’s
          ]
Hanan, 2004 . Given a problem instance, for each state in the algorithm [Dijkstra, 1959] in a preprocessing step, initially
search, we use the conﬁguration of the pattern discs to com- seeded with all hospital locations, storing with each map lo-
pute an index into the database. The corresponding value is cation the distance to the closest hospital. For this search, the
then used as a lower-bound estimate of the number of moves direction of any one-way streets is reversed. Then, when the
needed to move all the discs to the goal peg.         user requests a route from his current location to the nearest
  The size of a pattern database depends on the number of hospital, A* will ﬁnd an optimal path in linear time, since the
pattern discs. We can represent any conﬁguration of n discs
                                4n − 1                heuristic is exact. As another application, suppose we want to
by a unique index in the range 0 to   , by encoding   label each address in a city with the identity of the closest ﬁre
the location of each disc with two bits, and using the result-
   2                                                  station, to aid in dispatching ﬁre trucks. We run Dijkstra’s al-
ing n-bit binary number as the index. Thus, we only store gorithm, initially seeded with the location of all ﬁre stations,
the heuristic values and not the corresponding states in the but modiﬁed so that each node also includes the identity of
database. If the values are less than 256, each value is stored the closest ﬁre station, in addition to its distance. In this case,
in a single byte. Thus, a pattern database of 15 discs requires
415 =230                                              we don’t reverse one-way streets, because we are traveling
         bytes, or a gigabyte of memory.              from the ﬁre station to the address.
  To construct such a pattern database, we perform a breadth-
                                                        In addition to multiple-goal pattern databases, verifying the
ﬁrst search starting with all 15 discs on the goal peg. As each
                                                      presumed optimal solution of the 30-disc problem required
  2Throughout this paper we use “disc” to refer to a Tower of integrating a number of additional recent and new research
Hanoi disc, and “disk” to refer to a magnetic storage disk. results in heuristic search, which we discuss below.

                                                IJCAI-07
                                                  23255  Frontier Search                                      Previous implementations of this algorithm [Korf, 2003;
                                                      2004; Korf & Shultze, 2005] have stored in memory an array
The limiting resource for both breadth-ﬁrst search to gener- entry for each possible ﬁle name, but this doesn’t scale to very
ate pattern databases, and heuristic search to verify optimal large name spaces. Instead, we maintain in memory a hash ta-
solutions, is storage for search nodes. Linear-space depth- ble with the names of the ﬁles that exist at any point in time.
ﬁrst searches are completely impractical for this problem, be- For each ﬁle name, we store whether a corresponding expan-
cause they generate too many duplicate nodes representing sion ﬁle exists at the current and/or next depth, whether the
the same state. To reduce the number of stored nodes, we former has been expanded, whether a merge ﬁle exists, and a
use frontier search [Korf et al., 2005]. For simplicity, we de- list of the expansion ﬁle names that could contribute children
scribe breadth-ﬁrst frontier search. A standard breadth-ﬁrst to this merge ﬁle. To conserve disk space, we merge merge
search stores all nodes generated in either a Closed list of ﬁles as soon as all such expansion ﬁles have been expanded.
expanded nodes, or an Open list of nodes generated but not
yet expanded. Frontier search saves only the Open list, and
not the Closed list, reducing the nodes stored from the total 7 Parallel Processing
number of nodes in the problem, to the maximum number of Any I/O intensive algorithm must be parallelized to utilize the
nodes at any depth, or the width of the problem. For example, CPU(s) while a process blocks waiting for I/O. Furthermore,
the total number of states of of the 22-disc, four-peg Towers increasingly common multi-processor systems, and multiple-
of Hanoi problem is 422 or 17.6 trillion, while the width of core CPUs, offer further opportunities for parallelism. Our
the problem is only 278 billion states, a savings of a factor of algorithm is multi-threaded, with different threads expanding
63. It also saves with each node the operators used to gener- or merging different ﬁles in parallel. Merging eligible ﬁles
ate it, to avoid regenerating the parent of a node as one of its takes priority over ﬁle expansions.
children. Additional work is required to generate the solution Since all nodes in a given ﬁle have their largest discs in
path. In our case, however, we don’t need the solution path, the same positions, any duplicate nodes are conﬁned to the
but simply the depth of a given node, both to generate pattern same ﬁle, and duplicate merging of different ﬁles can be
databases, and to verify presumed optimal solutions.  done independently. When expanding nodes, however, any
                                                      children generated by moving the large disks will be writ-
                                                      ten to different merge ﬁles, and the expansion of two dif-
6  Storing Nodes on Disk                              ferent ﬁles can send children to the same merge ﬁle. Pre-
Unfortunately, 278 billion nodes is too many to store in mem- vious implementations of this algorithm [Korf, 2003; 2004;
ory. One solution is to store nodes on magnetic disk [Korf, Korf & Shultze, 2005] have coordinated multiple threads so
2003; 2004; Korf & Shultze, 2005]. The challenge is to de- that ﬁles that can write children to the same merge ﬁle are
sign algorithms that rely on sequential access, since random not expanded at the same time. In our implementation, we
access of a byte on disk takes about ﬁve milliseconds. remove this restriction. Two different threads may indepen-
  The main reason to store nodes is to detect duplicates, dently write children to the same merge ﬁle, as long as the
which are nodes representing the same state, but reached via ﬁles are opened in append mode. This both simpliﬁes the
different paths. This is normally done with a hash table, code and speeds it up, since it requires almost no coordina-
which is randomly accessed whenever a node is generated. tion among multiple threads.
On disk, however, duplicates nodes are not checked for im-
mediately, but merged later in a sequential pass through the 8 Compressed Pattern Databases
disk. When this delayed duplicate detection is combined with A pattern database heuristic that includes more components
frontier search in a problem such as the Towers of Hanoi, two of a problem is more accurate, since the database reﬂects in-
levels of the search tree must be stored at once [Korf, 2004]. teractions between the included components. In the case of
  The algorithm expands one level of the search space at a the Towers of Hanoi, the more discs that are included, the
time. There are two types of ﬁles: expansion ﬁles that contain more accurate the heuristic. The limitation is the memory
no duplicate nodes, and merge ﬁles that contain duplicates. to store the database. For example, a full pattern database
All nodes in a ﬁle are at the same depth. When expansion based on the 22-disc four-peg problem would require 422 or
ﬁles are expanded, their children are written to merge ﬁles at about 17.6 trillion entries. We can “compress” such a pat-
the next depth. For fault tolerance, and ease of interrupting tern database into a smaller database that will ﬁt in memory,
and resuming the program, we save all expansion ﬁles at the however, with only a modest lost of accuracy, as follows.
current depth, until completing the iteration to the next depth. We generate the entire 22-disc problem space in about 11
  All nodes in the same ﬁle have their largest discs in the days, using disk storage. As each state is generated, we use
same positions. The nodes within a ﬁle specify the positions the conﬁguration of say the 15 largest discs as an index into a
of the 14 smallest discs. The 28 bits needed to specify 14 pattern database, and store in that entry the shallowest depth
discs, plus four used-operator bits, equals 32 bits or a single at which that conﬁguration of 15 discs occurs. That entry is
word. For example, the 30-disc problem requires storing the the minimum number of moves required to move all 22 discs
positions of 29 discs. The positions of the 14 smallest discs to their goal peg, where the minimization is over all possi-
are stored with each node, and the positions of the remain- ble conﬁgurations of the remaining seven smallest discs. The
ing 15 discs are encoded in the ﬁle name, generating up to values in this pattern database are signiﬁcantly larger than the
415/6 ≈ 179 million ﬁle names.                        corresponding entries in a simple 15-disc pattern database,

                                                IJCAI-07
                                                  2326because the latter values ignore any smaller discs. This is depth. A better solution to this problem is breadth-ﬁrst
called a compressed pattern database [Felner et al., 2004], heuristic search (BFHS) [Zhou & Hansen, 2006].(BFHS)
and occupies only a gigabyte of memory in this case.  is given a cost threshold, and searches for solutions whose
  To use this compressed pattern database in a search of a cost does not exceed that threshold. The cost of a node n is
problem with at least 22 discs, for each state we look up the f(n)=g(n)+h(n),whereg(n) is the cost from the initial
position of the 15 largest discs, and use the corresponding state to node n,andh(n) is the heuristic estimate of the cost
table value as the heuristic for that state.          of reaching the goal from node n. BFHS is a breadth-ﬁrst
                                                      search, but any node whose total cost exceeds the cost thresh-
9  Disjoint Additive Pattern Databases                old is deleted. BFHS is also a form of frontier search, and
                                                      only stores a few levels of the search at a time. Thus, once a
Consider a Towers of Hanoi problem with 29 discs, a simple solution is found, additional work is required to construct the
22-disc pattern database, and an seven-disc pattern database. solution path. If the optimal solution cost is not known in ad-
A move only moves a single disc. Thus, given any conﬁg- vance, breadth-ﬁrst iterative-deepening-A* [Zhou & Hansen,
uration of the 29 discs, we can divide them into any two 2006] performs a series of iterations with successively in-
disjoint groups of 22 and seven discs each. We look up creasing cost thresholds, until an optimal solution is found.
the conﬁguration of the 22 discs in the 22-disc database, BFHS is ideally suited to the Towers of Hanoi for several
look up the conﬁguration of the seven discs in the eight- reasons. One is that to verify optimality of the presumed op-
disc database, and sum the resulting values to get an ad- timal solutions, we don’t need to construct the solution paths,
missible heuristic for the 29-disc problem. This is called but simply show that no shorter solutions exist. If we were
a disjoint additive pattern database [Korf & Felner, 2002; to ﬁnd a shorter solution, however, we would need to gener-
Felner, Korf, & Hanan, 2004]. There is nothing special about ate it to verify its correctness. Secondly, since we know the
this 22-7 split, but maximizing the size of the largest database presumed optimal solution length in advance, we could set
gives the most accurate heuristic values.             the cost threshold to one less than this value, and perform a
  We can add values from a compressed database the same single iteration, eliminating iterative deepening.
way. Again assume a problem with 29 discs, a 22-disc pattern
database compressed to the size of a 15-disc database, and
a simple seven-disc database. Given a state, we use the 15 12 Minimizing Heuristic Calculations
largest discs to represent the 22 largest discs, and look up the For many search problems, the time to compute heuristic
corresponding entry in the compressed pattern database. We evaluations is a signiﬁcant fraction of the running time. This
also look up the conﬁguration of the seven smallest discs in is particularly true of large pattern databases, since they are
the eight-disc database, and add these two heuristic values randomly accessed, resulting in poor cache performance.
together, to get an admissible heuristic for all 29 discs. For pattern database heuristics, we can determine the max-
                                                      imum  possible heuristic value from the maximum values
10   Multiple Pattern Databases                       in each database. For search algorithms such as BFHS or
In order to sum the values from two different pattern iterative-deepening-A* (IDA*) [Korf, 1985], pruning occurs
databases, the corresponding sets of elements must be dis- by comparison to a given cost threshold. We can speed up
joint, and every move must move only a single element. How- these searches by only computing heuristics for nodes that
ever, given any two admissible heuristic functions, their max- can possibly be pruned. In particular, if t is the cost threshold,
imum is also admissible. Furthermore, the maximum of sev- and m is the maximum possible heuristic value, then we don’t
                                                                                              ( )+   ≤
eral different pattern database heuristics is often more accu- compute heuristics for those nodes n for which g n m t,
rate than the value from a single pattern database of the same since they can’t possibly be pruned. We don’t need to com-
total size, and more than compensates for the overhead of the pute the heuristic at the shallowest possible depth that prun-
additional lookups [Holte et al., 2004].              ing could occur either, since the cost of additional node ex-
  Continuing our example with 29 discs, we can construct pansions may be compensated for by the faster speed of a
two different admissible heuristics as follows: One divides brute-force search. Since BFHS searches breadth-ﬁrst, we
the 29 discs into the 22 largest and seven smallest discs, don’t even need to load the pattern databases until the depth
adding their pattern database values, and the other divides at which we start computing heuristics, saving the memory
them into the seven largest and 22 smallest discs, again for additional parallel threads.
adding their database values. Finally, we take the maximum
of these two values as the overall heuristic value. We can use 13 Brute-Force Search Experiments
the same two databases for both heuristics.
                                                      We ﬁrst ran complete brute-force searches of the four-peg
                                                      Towers of Hanoi, both to compute pattern databases, and for
11   Breadth-First Heuristic Search                   another reason as well. For the three-peg problem, a breadth-
Frontier search with delayed duplicate detection can be com- ﬁrst search to depth 2n−1, starting with all discs on one peg,
bined with a best-ﬁrst heuristic search such as A* [Hart, Nils- will generate all states of the problem at least once. Thus,
son, & Raphael, 1968], but a best-ﬁrst search frontier in- 2n−1 is the radius of the problem space from this initial state.
cludes nodes at different depths, and is usually larger than For the three-peg problem, this radius is the same as the opti-
a breadth-ﬁrst search frontier, with all nodes at the same mal solution length to move all discs from one peg to another.

                                                IJCAI-07
                                                  2327  It was believed that this was true of the four-peg problem as instead of six. We also built simple pattern databases for up
well. However, [Korf, 2004] showed that this is not true for to seven discs, essentially instantaneously.
the 15-disc and 20-disc four-peg problems. For the 15-disc We then ran breadth-ﬁrst heuristic search, starting with all
problem, 129 moves are needed to move all discs from one discs on the initial peg, searching for a middle state in which
peg to another, but there exist 588 states that are 130 moves all but the largest disc are distributed over the two auxiliary
from the standard initial state. For the 20-disc problem, the pegs. For example, in the 30-disc problem, a middle state is
optimal solution is 289 moves, but the radius of the problem one where the 29 smallest discs have moved off the initial peg
from the standard initial state is 294 moves. What happens to two auxiliary pegs. Thus, the largest disc is not represented
for larger problems was unknown.                      at all. This search also used the six-fold symmetry.
  We ran the ﬁrst complete breadth-ﬁrst searches of the 21- If a middle state is found in k moves, then a complete solu-
and 22-disc four-peg Towers of Hanoi problems, starting with tion of 2k +1moves exists, utilizing the symmetry between
all discs on one peg. The machine we used is an IBM Intellis- the initial and goal states. Breadth-ﬁrst heuristic search was
tation A Pro, with dual two gigahertz AMD Opteron proces- run with the cost threshold set to (p − 1)/2,wherep is the
sors, and two gigabytes of memory, running CentOS Linux. presumed optimal solution depth. It would be more efﬁcient
We have three terabytes of disk storage available, consisting to set the cost threshold to one move less, checking only for
of four 500 gigabyte Firewire external drives, and a 400 and the existence of shorter solutions. To increase our conﬁdence
two 300 gigabyte internal Serial ATA drives.          in our results, however, we used the (p − 1)/2 cost threshold,
  Table 2 shows our results. The ﬁrst column shows the num- and checked that an actual solution was found. A search with
ber of discs, the second column the optimal solution length a given cost threshold will ﬁnd all solutions whose cost is less
to transfer all discs from one peg to another, the third column than or equal to that threshold.
the radius of the problem space from the standard initial state, For each problem, we took the maximum of two heuristics.
the fourth column the width of the problem space, which is For the 30-disc problem, which only uses 29 discs, one value
the maximum number of unique states at any depth from the was the compressed pattern database value for the 22 largest
standard initial state, and the last column the running time discs, plus the complete pattern database value for the seven
in days:hours:minutes:seconds, running six parallel threads. smallest discs, and the other was the compressed database
Note that for both problems, the radius from the standard ini- value for the 22 smallest discs, plus the complete database
tial state exceeds the optimal solution depth, and we conjec- value for the seven largest discs. For the smaller problems,
ture that this is true for all problems with 20 or more discs. we also used the 22-disc compressed database, and looked up
                                                      the remaining discs in a complete pattern database.
 D    Optimal  Radius           width        time       We implemented our parallel search algorithm using multi-
 21      321      341   77,536,421,184  2:10:25:39    ple threads. The number of threads is limited by the available
 22      385      395  278,269,428,090  9:18:02:53    memory, since each thread needs it own local storage. The
                                                      pattern databases are shared, however, since they are read-
  Table 1: Complete Search Results for Towers of Hanoi only. In our experiments we ran ﬁve parallel threads on two
                                                      processors. We used all seven disks, evenly dividing the ﬁles
                                                      among the disks, to maximize I/0 parallelism.
                                                        The results are shown in Table 1, for all problems not pre-
14   Heuristic Search Experiments                     viously veriﬁed. The ﬁrst column gives the number of discs,
We next ran heuristic searches of the four-peg Towers of the second column the length of the optimal solution, the third
Hanoi. As explained above, there exists a solution strategy column the running time in days:hours:minutes:seconds, the
that moves all discs from one peg to another, and a conjec- fourth column the number of unique states expanded, and
ture that it is optimal, but the conjecture is unproven. Prior to the last column the maximum amount of storage needed in
this work, the conjecture had been veriﬁed for up to 24 discs megabytes. In all cases, the presumed optimal solution depth
[Korf, 2004]. We extended this veriﬁcation to 30 discs. was veriﬁed. The 30-disc problem took over 17 days to run,
  We ﬁrst built a 22-disc pattern database, compressed to generated a total of over 4.3 trillion unique nodes, and re-
the size of a 15-disc database, or one gigabyte of memory. quired a maximum of 398 gigabytes of disk storage. Even
This was done with a complete breadth-ﬁrst search of the with two processors, the limiting resource is CPU time.
22-disc problem, seeded with all states in which all discs
were distributed over two pegs. We used the 6-fold symme- D Opt.         time       unique states  space
try described above to generate the database, since all non- 25 577      2:37       443,870,346       43
initial pegs are equivalent. The database itself did not use this 26 641 14:17     2,948,283,951     263
                                           15
symmetry, however, but contained an entry for all 4 possi- 27 705     1:08:15     12,107,649,475   1,079
ble conﬁgurations of the 15 largest discs, to make database 28 769    4:01:02     38,707,832,296   4,698
lookups more efﬁcient. It took almost 11 days to construct 29 897   2:05:09:02   547,627,072,734  56,298
the pattern database, and required a maximum of 392 giga- 30 1025  17:07:37:47 4,357,730,168,514 397,929
bytes of disk storage. The reason that this is longer than the
time for the complete search of the 22-disc problem described Table 2: Heuristic Search Results for Towers of Hanoi
above is that we had to access the pattern database for each
node expanded, and were only able to run ﬁve parallel threads A search of the 31-disc problem is in progress at press time.

                                                IJCAI-07
                                                  2328