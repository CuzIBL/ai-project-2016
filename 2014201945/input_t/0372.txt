                                    Pushing the     EL   Envelope

                       Franz Baader    and Sebastian Brandt    and  Carsten Lutz
                               Intitute for Theoretical Computer Science
                                         TU Dresden, Germany
                                    lastname@tcs.inf.tu-dresden.de


                    Abstract                            For these reasons, and also because of the need for expres-
                                                      sive DLs supporting GCIs in applications, from the mid 1990s
    Recently, it has been shown that the small descrip- on the DL community has mainly given up on the quest of
    tion logic (DL) EL, which allows for conjunction  ﬁnding tractable DLs. Instead, it investigated more and more
    and existential restrictions, has better algorithmic expressive DLs, for which reasoning is worst-case intractable.
    properties than its counterpart FL0, which allows The goal was then to ﬁnd practical subsumption algorithms,
    for conjunction and value restrictions. Whereas the i.e., algorithms that are easy to implement and optimize,
    subsumption problem in FL0 becomes already in-    and which—though worst-case exponential or even worse—
    tractable in the presence of acyclic TBoxes, it re- behave well in practice (see, e.g., [Horrocks et al., 2000]).
    mains tractable in EL even with general concept   This line of research has resulted in the availability of highly
    inclusion axioms (GCIs). On the one hand, we ex-  optimized DL systems for expressive DLs [Horrocks, 1998;
    tend the positive result for EL by identifying a set Haarslev and Moller,¨ 2001], and successful applications:
    of expressive means that can be added to EL with- most notably the recommendation by the W3C of the DL-
    out sacriﬁcing tractability. On the other hand, we based language OWL [Horrocks et al., 2003] as the ontology
    show that basically all other additions of typical language for the Semantic Web.
                    EL
    DL constructors to  with GCIs make subsump-         Recently, the choice of value restrictions as a sine qua non
    tion intractable, and in most cases even EXPTIME- of DLs has been reconsidered. On the one hand, it was shown
    complete. In addition, we show that subsumption   that the DL EL, which allows for conjunction and existential
    in FL  with GCIs is EXPTIME-complete.
         0                                            restrictions, has better algorithmic properties than FL0. Sub-
                                                      sumption in EL stays tractable w.r.t. both acyclic and cyclic
                                                      TBoxes [Baader, 2003b], and even in the presence of GCIs
1  Introduction                                       [Brandt, 2004]. On the other hand, there are applications
The quest for tractable (i.e., polynomial-time decidable) de- where value restrictions are not needed, and where the ex-
scription logics (DLs), which started in the 1980s after the pressive power of EL or small extensions thereof appear to
ﬁrst intractability results for DLs were shown [Brachman and be sufﬁcient. In fact, SNOMED, the Systematized Nomen-
Levesque, 1984; Nebel, 1988], was until recently restricted clature of Medicine, employs EL [Spackman, 2000] with an
to DLs extending the basic language FL0, which allows for acyclic TBox. Large parts of the Galen medical knowledge
conjunction (u) and value restrictions (∀r.C). The main rea- base can also be expressed in EL with GCIs and transitive
son was that, when clarifying the logical status of property roles [Rector and Horrocks, 1997]. Finally, the Gene Ontol-
arcs in semantic networks and slots in frames, the decision ogy [Consortium, 2000] can be seen as an acyclic EL TBox
was taken that arcs/slots should be read as value restrictions with one transitive role.
rather than existential restrictions (∃r.C).            Motivated by the positive complexity results cited above
  For subsumption between concept descriptions, the trac- and the use of extensions of EL in applications, we start with
tability barrier was investigated in detail in the early 1990s the DL EL with GCIs, and investigate the effect on the com-
[Donini et al., 1991]. However, as soon as terminologies plexity of the subsumption problem that is caused by the ad-
(TBoxes) were taken into consideration, tractability turned dition of standard DL constructors available in ontology lan-
out to be unattainable: even with the simplest form of acyclic guages like OWL. We prove that the subsumption problem
TBoxes, subsumption in FL0 (and thus in all languages ex- remains tractable when adding the bottom concept (and thus
tending it) is coNP-hard [Nebel, 1990]. Subsumption in FL0 disjointness statements), nominals (i.e., singleton concepts), a
is PSPACE-complete w.r.t. cyclic TBoxes [Baader, 1996; restricted form of concrete domains (e.g., references to num-
Kazakov and de Nivelle, 2003], and we show in this pa- bers and strings), and a restricted form1 of role-value maps
per that it becomes even EXPTIME-complete in the presence
of general concept inclusion axioms (GCIs), which are sup- 1Adding arbitrary role-value maps to EL is known to cause un-
ported by all modern DL systems.                      decidability [Baader, 2003a].Name         Syntax    Semantics                      syntax can be found in the lower part of Table 1. Note that a
top            >       ∆I                             ﬁnite set of GCIs would commonly be called a general TBox.
bottom         ⊥       ∅                              We use the term CBox due to the presence of RIs. An inter-
nominal        {a}     {aI }                          pretation I is a model of a CBox C if, for each GCI and RI
                         I    I                         C
conjunction  C u D     C  ∩ D                         in  , the conditions given in the third column of Table 1 are
                             I        I               satisﬁed. In the deﬁnition of the semantics of RIs, the symbol
existential            {x ∈∆   | ∃y ∈ ∆ :
              ∃r.C                 I       I          “◦” denotes composition of binary relations.
restriction                (x, y) ∈ r ∧ y ∈ C }
                                                        The main inference problem considered in this paper is
                             I               Dj
                       {x ∈∆   | ∃y1, . . . , yk ∈ ∆ :                         ++
concrete   p(f1, . . . , fk) I                        subsumption. Given two EL   -concept descriptions C, D
                   D       fi (x) = yi for 1 ≤ i ≤ k ∧
domain         ∈ P  j                   D             we say that C is subsumed by D w.r.t. the CBox C (C vC D)
           for p                     ∈   j }
                           (y1, . . . , yk) p         iff CI ⊆ DI for all models I of C.
                         I    I
GCI          C v D     C   ⊆ D                          Some remarks regarding the expressivity of EL++ are in
            ◦ · · · ◦ v I ◦ · · · ◦ I ⊆ I
RI        r1     rk   r r1     rk   r                 order. First, though we restrict the attention to subsump-
                                                      tion, EL++ is expressive enough to reduce all other standard
        Table 1: Syntax and semantics of EL++.        reasoning tasks (concept satisﬁability, ABox consistency, in-
                                                      stance problem) to the subsumption problem and vice versa
(which can express transitivity and the right-identity rule re- [Baader et al., 2005]. Second, our RIs generalize three means
                          [              ]
quired in medical applications Spackman, 2000 ). We then of expressivity important in ontology applications: role hier-
prove that, basically, all other additions of standard DL con- archies r v s; transitive roles, which can be expressed by
structors lead to intractability of the subsumption problem, writing r ◦ r v r; and so-called right-identity rules r ◦ s v
and in most cases even to EXPTIME-hardness. Proofs and s, which are important in medical applications [Spackman,
further technical details can by found in the accompanying 2000; Horrocks and Sattler, 2003]. Third, the bottom concept
             [                ]
technical report Baader et al., 2005 .                in combination with GCIs can be used to express disjointness
                                                                                    u   v ⊥
                            EL++                      of complex concept descriptions: C D   says that C, D
2  The Description Logic                              are disjoint. Finally, the unique name assumption for individ-
In DLs, concept descriptions are inductively deﬁned with the ual names can be enforced by writing {a} u {b} v ⊥ for all
help of a set of constructors, starting with a set NC of concept relevant individual names a and b.
names, a set NR of role names, and (possibly) a set NI of
individual names. In this section, we introduce the extension 3 Tractability of EL++
EL++  of EL, whose concept descriptions are formed using
                                                      Before we can describe a polynomial-time subsumption al-
the constructors shown in the upper part of Table 1. There
                                                      gorithm for EL++, we must introduce an appropriate normal
and in general, we use a and b to denote individual names,
                                                      form for CBoxes. Given a CBox C, we use BCC to denote
r and s to denote role names, and C, D to denote concept
                                                      the smallest set of concept descriptions that contains the top
descriptions.
                                                      concept >, all concept names used in C, and all concept de-
  The concrete domain constructor provides an interface to
                                                      scriptions of the form {a} or p(f , . . . , f ) appearing in C.
so-called concrete domains, which permits reference to, e.g.,                      1     k
                                                      Then, C is in normal form if
strings and integers. Formally, a concrete domain D is a pair
(∆D, PD) with ∆D a set and PD a set of predicate names. 1. all GCIs have one of the following forms, where
                                                                 ∈           ∈     ∪ {⊥}
Each p ∈ P is associated with an arity n > 0 and an exten- C1, C2  BCC and D   BCC      :
sion pD ⊆ (∆D)n. To provide a link between the DL and
                                                                   C1   v  D,          C1  v   ∃r.C2,
the concrete domain, we introduce a set of feature names NF.  C  u C    v  D,       ∃r.C   v   D.
In Table 1, p denotes a predicate of some concrete domain       1    2                  1
D                                        EL++
  and f1, . . . , fk are feature names. The DL may      2. all role inclusions are of the form r v s or r1 ◦ r2 v s.
be equipped with a number of concrete domains D1, . . . , Dn
          D     D                                     By introducing new concept and role names, any CBox C can
such that ∆ i ∩ ∆ j = ∅ for 1 ≤ i < j ≤ n. If we want to                            C0
                                     D      D         be turned into a normalized CBox that is a conservative
stress the use of particular concrete domains 1, . . . , n, we   C                   C0                C
     EL++  D      D            EL++                   extension of , i.e., every model of is also a model of ,
write     ( 1, . . . , n) instead of .                and every model of C can be extended to a model of C0 by
                   EL++  D      D
  The semantics of      ( 1, . . . , n)-concept descrip- appropriately choosing the interpretations of the additional
                                      I      I ·I
tions is deﬁned in terms of an interpretation = (∆ , ). concept and role names. In [Baader et al., 2005] it shown
The domain ∆I is a non-empty set of individuals and the in-
                  I                                   that this transformation can actually be done in linear time,
terpretation function · maps each concept name A ∈ NC to                       C0
         I    I                                       yielding a normalized CBox  whose size is linear in the
a subset A of ∆ , each role name r ∈ NR to a binary rela-   C
     I     I                                          size of .
tion r on ∆ , each individual name a ∈ NI to an individual
 I    I                                               Lemma 1   Subsumption w.r.t. CBoxes in EL++ can be re-
a  ∈ ∆ , and each feature name f ∈ NF to a partial function
 I       I           D                  I
f  from ∆ to        ∆  i . The extension of · to arbitrary duced in linear time to subsumption w.r.t. normalized CBoxes
              1≤i≤n                                     EL++
concept descriptionsS is inductively deﬁned as shown in the in .
third column of Table 1.                              In the following, all CBoxes are assumed to be normalized.
  An EL++  constraint box (CBox) is a ﬁnite set of general When developing the subsumption algorithm for normalized
concept inclusions (GCIs) and role inclusions (RIs), whose EL++ CBoxes, we can restrict our attention to subsumption        0         0
 CR1 If C ∈ S(C), C v D ∈ C, and D 6∈ S(C)
                                                      BCC, which is deﬁned as follows: C  R D iff there are
     then S(C) := S(C) ∪ {D}
                                                      C1, . . . , Ck ∈ BCC such that
             ∈        u    v   ∈ C      6∈
 CR2 If C1, C2 S(C), C1 C2   D    , and D S(C)          • C1 = C  or C1 = {b} for some individual name b,
     then S(C) := S(C) ∪ {D}
                                                        • (Cj, Cj+1) ∈ R(rj) for some rj ∈ RC (1 ≤ j < k),
        0 ∈       0 v ∃   ∈ C         ∈
 CR3 If C  S(C), C    r.D   , and (C, D) / R(r)         • C  =  D.
     then R(r) := R(r) ∪ {(C, D)}                           k
                     0           0                      Second, rules CR7 and CR8 use the notion conj(Si(C)), and
 CR4 If (C, D) ∈ R(r), D ∈ S(D), ∃r.D v E ∈ C,                                                      p
            ∈                                         satisﬁability and implication in a concrete domain. If is a
       and E / S(C)                                   predicate of the concrete domain D , then the EL++-concept
     then S(C) := S(C) ∪ {E}                                                       j
                                                      description p(f1, . . . , fn) can be viewed as an atomic ﬁrst-
 CR5 If (C, D) ∈ R(r), ⊥ ∈ S(D), and ⊥ ∈/ S(C),       order formula with variables f1, . . . , fn. Thus, it makes sense
     then S(C) := S(C) ∪ {⊥}                          to consider Boolean combinations of such atomic formulae,
       { } ∈     ∩                      6⊆            and to talk about whether such a formula is satisﬁable in (the
 CR6 If a   S(C)  S(D), C   R D, and S(D) S(C)                             D               D
                     ∪                                ﬁrst-order interpretation) j, or whether in j one such for-
     then S(C) := S(C) S(D)                                                               ++
                                                      mula implies another one. For a set Γ of EL (D1, . . . , Dn)-
 CR7 If conj (S(C)) is unsatisﬁable in Dj and ⊥ ∈/ S(C), concept descriptions and 1 ≤ j ≤ n, we deﬁne
     then S(C) := S(C) ∪ {⊥}
                                                           conj(Γ) :=                   p(f1, . . . , fk).
 CR8 If conj (S(C)) implies p(f1, . . . , fk) ∈ BCC in Dj
                                                                             ^        D
                                                                             ∈     ∈P  j
       and p(f1, . . . , fk) ∈/ S(C),                                p(f1,...,fk) Γ with p
     then S(C) := S(C) ∪ {p(f1, . . . , fk)}
                                                      For the rules CR7 and CR8 to be executable in polynomial
                   0 0     0              D
                              ∈        ∈ P j
 CR9 If p(f1, . . . , fk), p (f1, . . . , fk0 ) S(C), p , time, satisﬁability and implication in the concrete domains
        0   D             0
             `                                        D      D
       p ∈ P  , j =6 `, fs = ft for some s, t, and ⊥ ∈/ S(C), 1, . . . , n must be decidable in polynominal time. How-
     then S(C) := S(C) ∪ {⊥}                          ever, for our algorithm to be complete, we must impose an
             ∈       v  ∈ C          ∈                additional condition on the concrete domains. The concrete
 CR10 If (C, D) R(r), r s  , and (C, D) / R(s)               D
     then R(s) := R(s) ∪ {(C, D)}                     domain   is p-admissible iff
                                                                                     D
             ∈            ∈         ◦  v    ∈ C         1. satisﬁability and implication in are decidable in poly-
 CR11 If (C, D) R(r1), (D, E) R(r2), r1 r2 r3  ,          nominal time;
       and (C, E) ∈/ R(r3)
     then R(r3) := Ri(r3) ∪ {(C, E)}                    2. D is convex: if a conjunction of atoms of the form
                                                          p(f1, . . . , fk) implies a disjunction of such atoms, then
              Table 2: Completion Rules                   it also implies one of its disjuncts.

between concept names. In fact, C vC D iff A vC0 B, where Let us now show that the rules of Table 2 indeed yield a poly-
 0                                                                                         ++
C = C∪{A  v C, D v B} with A and B new concept names. nomial algorithm for subsumption in EL (D1, . . . , Dn)
Our subsumption algorithm not only computes subsumption provided that the concrete domains D1, . . . , Dn are p-
between two given concept names w.r.t. the normalized input admissible.
CBox C; it rather classiﬁes C, i.e., it simultaneously computes The following lemma is an easy consequence of the facts
the subsumption relationships between all pairs of concept that (i) each rule application adds an element to one of the
names occurring in C.                                 sets S(C) ⊆ BCC  ∪ {>, ⊥} or R(C, D) ⊆  BCC × BCC,
  Now, let C be a CBox in normal form that is to be classiﬁed. (ii) the cardinality of BCC is polynomial in the size of C, and
                                                                     
We use RC to denote the set of all role names used in C. The (iii) the relation R can be computed using (polytime) graph
algorithm computes                                    reachability, and (iv) the concrete domains are p-admissible.
  • a mapping S from BCC to a subset of BCC ∪{>, ⊥}, and Lemma 2 For a normalized CBox C, the rules of Table 2 can
                                                      only be applied a polynomial number of times, and each rule
  • a mapping R from RC to a binary relation on BCC.
                                                      application is polynomial.
The intuition is that these mappings make implicit subsump-
tion relationships explicit in the following sense:     The next lemma shows how all subsumption relationships
                                                      between concept names occurring in C can be determined
(I1) D ∈ S(C) implies that C vC D,                    once the completion algorithm has terminated.
          ∈                  v   ∃
(I2) (C, D) R(r) implies that C C r.D.                Lemma 3   Let S be the mapping obtained after the applica-
In the algorithm, these mappings are initialized as follows: tion of the rules of Table 2 for the normalized CBox C has
                                                      terminated, and let A, B be concept names occurring in C.
  • S(C) := {C, >} for each C ∈ BCC,
                                                      Then A vC B iff one of the following two conditions holds:
  • R(r) := ∅ for each r ∈ RC.
                                                        • S(A) ∩ {B, ⊥}= 6 ∅,
Then the sets S(C) and R(r) are extended by applying the
                                                        • there is an {a} ∈ BCC such that ⊥ ∈ S({a}).
completion rules shown in Table 2 until no more rule applies.
  Some of the rules use abbreviations that still need to be The if-direction of this lemma (soundness) immediately fol-
introduced. First, CR6 uses the relation  R ⊆ BCC ×   lows from the fact that (I1) and (I2) are satisﬁed for the initialdeﬁnition of S, R, and that application of the rules preserves Name  Syntax Semantics
(I1) and (I2). This is trivial for most of the rules. We consider negation ¬C ∆I \ CI
CR6 in more detail. If {a} ∈ S(C) ∩ S(D), then C, D vC disjunction   C t D  CI ∪ DI
{ }                             v   ∃   · · · ∃                                            I        I
 a . Now, C   R  D implies that C C  r1.    rk−1.D    value restriction ∀r.C {x | ∀y : (x, y) ∈ r → y ∈ C }
  {b} vC ∃r . · · · ∃r − .D                   b                                        I         I
or         1      k 1   for some individual name . In at-least restriction (> n r) {x | #{y ∈ ∆ | (x, y) ∈ r } ≥ n}
the second case, this implies that D cannot be empty in any           6     { |  {  ∈  I |     ∈ I } ≤ }
model of C, and in the ﬁrst case it implies that D is non-empty at-most restriction ( n r) x # y ∆ (x, y) r n
                                                                     ∃ −    { | ∃       ∈  I ∧  ∈  I }
in any model of C for which C is non-empty. Together with inverse roles r .C x   y : (y, x) r y  C
C, D vC {a}, this implies that C vC D, which shows that
                                                                Table 3: The additional constructors.
the rule CR6 is sound since it preserves (I1).
  To show the only-if-direction of the lemma, we assume that has been proved in [Lutz, 2003]. Moreover, we can show
the two conditions do not hold, and then use the computed [Baader et al., 2005] that both Q and S are convex.
                                               I
mappings S, R to construct a model I of C such that A 6⊆ Proposition 5 Q and S are p-admissible.
BI . Basically, the domain ∆I of this model consists of all
                                                        Both Q and S are interesting concrete domains since they
elements C ∈ BCC such that A  C. However, we identify
                            R                         allow us to refer to concrete numbers and strings in concepts,
elements C, D of BCC if there is an individual name a such
                                                      and use the properties of the concrete predicates when rea-
that {a} ∈ S(C) ∩ S(D). The interpretation of concept and
                                                      soning. However, the predicates available in these concrete
role names is determined by S, R: if D ∈ BCC is a concept
            I                                         domains are rather restricted. Unfortunately, p-admissibility
name, then D  = {C  ∈ BCC  | D ∈ S(C)}, and if r is a
                        I                             is a fragile property, i.e., we cannot extend Q and S by other
role name, then (C, D) ∈ r iff (C, D) ∈ R(r). Finally,
                                                      interesting predicates without losing p-admissibility. As an
the interpretation of the feature names is determined by the
                                                      illustration, we consider one extension of Q and one of S.
the assignments satisfying the conjunctions conj(S(C)) (see                 ≤q ,>q
[                ]                                      The concrete domain Q     extends Q by the additional
Baader et al., 2005 for a more detailed description of this                              ≤q ,>q
                                                      unary predicates (≤q)q∈Q . Then the Q   -conjunction
construction, and a proof that it indeed yields a countermodel 0
                                                      >0(f ) implies the disjunction ≤0(f) ∨ >0(f) without im-
to the subsumption relationship A vC B).                                           ≤
                                                      plying one of its disjuncts. Thus, Q q ,>q is not convex.
  To sum up, we have shown the following tractability result:                            ∗              ∗
                                                        Next, consider any concrete domain S with domain Σ
                                                                                               ∗
Theorem 4 Let D1, . . . , Dn be p-admissible concrete do- for some ﬁnite alphabet Σ and, for every s ∈ Σ , the unary
                            EL++(D   , . . . , D )
mains.  Then subsumption in         1      n  w.r.t.  predicates prefs and suﬀs with the semantics
CBoxes can be decided in polynomial time.
                                                                 S∗      { 0 ∈ ∗ |              0}
                                                             prefs   :=   s   Σ   s is a preﬁx of s
P-admissibile and non-admissible concrete domains                S∗      { 0 ∈ ∗ |             0}
                                                             suﬀs    :=   s   Σ   s is a sufﬁx of s .
In  order  to  obtain concrete DLs   of  the  form                                   ∗
  ++                                                  Let Σ =  {a , . . . , a }. Then the S -conjunction suﬀ (f)
EL   (D , . . . , D ) for n > 0 to which Theorem 4 ap-           1     n                            a1
        1      n                                      implies the disjunction pref (f) ∨ . . . ∨ pref (f) without
plies, we need concrete domains that are p-admissible. In                    a1              an
the following, we introduce two concrete domains that are implying any of its disjuncts.
p-admissible, and show that small extensions of them are no                          EL
longer p-admissible.                                  4   Intractable extensions of      with GCIs
  The concrete domain Q = (Q , PQ) has as its domain the set In this section we consider the sublanguage EL of EL++
Q of rational numbers, and its set of predicates PQ consists and restrict the attention to general TBoxes, i.e., ﬁnite sets of
of the following predicates:                          GCIs. Recall that EL is obtained from EL++ by dropping all
  • a unary predicate > with (> )Q = Q ;              concept constructors except conjunction, existential restric-
                    Q        Q                                                                    EL
  •                                  ∈ Q              tion, and top. We will show that the extension of with
    unary predicates =q and >q for each q ;           basically any typical DL constructor not present in EL++ re-
  • a binary predicate =;                             sults in intractability of subsumption w.r.t. general TBoxes.
                                                      Syntax and semantics of the additional constructors used in
  • a binary predicate +q, for each q ∈ Q , with
               0 00        0       00                 this section can be found in Table 3, where #S denotes the
    (+ )Q = {(q , q ) ∈ Q 2 | q + q = q }.
      q                                               cardinality of a set S.
  The concrete domain S is deﬁned as (Σ∗, PS), where Σ is In addition to the subsumption problem, we will sometimes
the ISO 8859-1 (Latin-1) character set and PS consistes of also consider the satisﬁability problem: the concept descrip-
the following predicates:                             tion C is satisﬁable w.r.t. the general TBox T iff there exists
                                                                           I
                              S    ∗                  a model I of T with C  =6 ∅. As in the previous section,
  • a unary predicate >S with (>S) = Σ ;
                                                      we can restrict the attention to satisﬁability/subsumption of
  •                             ∈   ∗
    a unary predicate =w, for each w Σ ;              concept names w.r.t. general TBoxes.
  • a binary predicate =;
                                                      Atomic negation
  •                                ∈  ∗                     ¬                                          ¬
    a binary predicate concw, for each w Σ , with     Let EL  be the extension of EL with negation, and let EL( )
        Q   {  0  00 |  00   0 }                                       ¬
    concw =  (w , w ) w  = w w  .                     be obtained from EL by restricting the applicability of nega-
                                                                                                 ¬
Polynomiality of reasoning in Q can be shown by a reduction tion to concept names (atomic negation). Since EL is a no-
to linear programming, and polynomiality of reasoning in S tational variant of the DL ALC, EXPTIME-completeness ofsatisﬁability and subsumption in ALC w.r.t. general TBoxes Non-p-admissible concrete domains
                            ¬
[Schild, 1991] carries over to EL . EXPTIME-completeness P-admissibility of the concrete domains is not only a sufﬁ-
                    ¬
even carries over to EL( ) since ¬C with C complex can be cient condition for polynomiality of reasoning in EL++, but
replaced with ¬A for a new concept name A if we add the also a necessary one: if D is a non-convex concrete domain,
two GCIs A v C and C v A.                             then subsumption in EL(D) is EXPTIME-hard, where EL(D)
                ¬                                                      EL                         D
Theorem 6 In EL(  ), satisﬁability and subsumption w.r.t. is the extension of with the concrete domain . The
                                                      proof uses a stronger version of Theorem 7: we can show that
general TBoxes is EXPTIME-complete.
                                                      subsumption of concept names w.r.t. restricted ELU TBoxes
Disjunction                                           is EXPTIME-complete, where a restricted ELU TBox is a
Let ELU be the extension of EL with disjunction. Subsump- general EL TBox extended with a single GCI of the form
tion in ELU w.r.t. general TBoxes is in EXPTIME since ELU A v B1 t B2 [Baader et al., 2005].
is a fragment of ALC. To obtain a matching EXPTIME lower The subsumption problem for such restricted ELU TBoxes
                               ¬                                                      ++
bound, we reduce satisﬁability in EL( ) w.r.t. general TBoxes can be reduced to subsumption in EL (D) as follows. Let
                                                                                   T           ELU
to subsumption in ELU w.r.t. general TBoxes. To this end, let A0 and B0 be concept names and a restricted TBox.
                                  (¬)                 Since D is not convex, there is a satisﬁable conjunction c of
A0 be a concept name and T a general EL TBox. For each
                        T                             atoms of the form p(f1, . . . , fk) that implies a disjunction
concept name A occurring in , we take a new concept name ∨    ∨
A0 (i.e., one not occurring in T ). Also ﬁx an additional new a1 . . . am of such atoms, but none of its disjuncts. If
concept name L. Then the general TBox T ∗ is obtained from we assume that this is a minimal such counterexample (i.e.,
T                          ¬        0                 m  is minimal), then we also know that c does not imply
  by replacing each subconcept A with A , and then adding ∨   ∨
the following GCIs:                                   a2   . . . am, and that each of the ai is satiﬁable. Then
                                                      we have (i) each assignment of values from D that satisﬁes c
  • > v A t A0 and A u A0 v L  for each A ∈ N in T ;
                                           C          satisﬁes a1 or a2 ∨. . .∨am; (ii) there is an assignment satisfy-
  • ∃r.L v L.                                         ing c and a1, but not a2 ∨. . .∨am; (iii) there is an assignment
                                                                      ∨    ∨                    T ∗
Note that ∃r.L v L is equivalent to ¬L v ∀r.¬L. It thus satisfying c and a2 . . . am but not a1. Now, let be ob-
                                                      tained from T by replacing the single GCI A v B t B0 by
ensures that L acts as the bottom concept in connected coun-                  0
                                                      A v  c, a1 v B, and ai v B for i = 2, . . . , m. It is easy to
termodels of A0 vT ∗ L. Using this observation, it is not hard
                                                      see that A0 vT B0 iff A0 vT ∗ B0.
to verify that A0 is satisﬁable w.r.t. T iff A0 6vT ∗ L.
                                                                                                  D
Theorem 7 In ELU, subsumption w.r.t. general TBoxes is Theorem 9 For any non-convex concrete domain , sub-
                                                                EL  D
EXPTIME-complete.                                     sumption in  (  ) w.r.t. general TBoxes is EXPTIME-hard.
                                                      For example, this theorem applies to the non-convex concrete
At-least restrictions
      ≥                                               domains introduced in Section 3.
Let EL 2 be the extension of EL with at-least restrictions
                                    ≥
of the form (> 2 r). Subsumption in EL 2 w.r.t. general Inverse roles
                            ≥
TBoxes is in EXPTIME since EL 2 is a fragment of ALC  Let ELI be the extension of EL with inverse roles. We show
extended with number restrictions [De Giacomo and Lenz- that subsumption in ELI w.r.t. general TBoxes is PSPACE-
erini, 1994]. We establish a matching lower bound by reduc- hard by reducing satisﬁability in ALE w.r.t. primitive TBoxes:
                                                      ALE         EL
ing subsumption in ELU w.r.t. general TBoxes. Let A0 and   extends   with value restrictions and atomic negation;
B0 be concept names and T a general ELU TBox. Without primitive TBoxes are ﬁnite sets of GCIs whose left-hand side
loss of generality, we may assume that all concept inclusions is a concept name. This satisﬁability problem is known to be
in T have one of the following forms:                 PSPACE-complete [Calvanese, 1996].
                                                        Let A  be a concept name and T a primitive ALE TBox.
          v     ∃    v           v ∃                         0
        C   D,    r.C  D,     C     r.D,              We assume without loss of generality that T contains only
                C1 u C2 v C,  C  v C1 t C2,           concept inclusions of the following forms:

where C, D, C1, and C2 are concept names or >. Call the     A v B, A   v ¬B, A   v ∃r.B, A  v ∀r.B,
               ∗                       ≥
resulting TBox T . To convert T into an EL 2 CBox, we                 0
                                                      where A, B, and B are concept names. We take a new con-
simulate each GCI C v C  t C  by introducing two new                                           ∗
                       1    2                         cept name L and deﬁne the general ELI TBox T to consist
concept names A and B and a new role name r, and putting
                                                      of the following GCIs:
                 C v ∃r.A u ∃r.B,                       • A v  D for all A v D ∈ T
      C u ∃r.(A u B) v C1,  C  u (> 2 r) v C2.                if D is a concept name or of the form ∃r.B;
                                                        • ∃ −    v           v ∀    ∈ T
It is easy to see that A0 vT B0 iff A0 vT ∗ B0.            r  .A   B for all A  r.B     ;
                ≥                                       •   u   v            v ¬   ∈ T
Theorem 8 In EL  2 , subsumption w.r.t. general TBoxes is A   B    L for all A  B     ;
EXPTIME-complete.                                       • ∃r.L v L.
The interested reader may note that similar reductions can be As in the case of ELU, the concept inclusion ∃r.L v L is
used to show EXPTIME-completeness for EL extended with equivalent to ¬L v ∀r.¬L and ensures that L acts as the
one of the role constructors negation, union, and transitive bottom concept in connected countermodels of A0 vT ∗ L.
closure.                                              Additionally, ∃r−.A v B is clearly equivalent to A v ∀r.B.