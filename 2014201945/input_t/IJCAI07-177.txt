                   First Order Decision Diagrams for Relational MDPs
                       Chenggang Wang      and  Saket Joshi   and Roni Khardon
                                    Department of Computer Science
                                            Tufts University
                                          161 College Avenue
                                       Medford, MA 02155, USA
                            {cwan|sjoshi01|roni}@cs.tufts.edu

                    Abstract                          be very compact, allowing problems to be represented and
                                                      solved efﬁciently.
    Dynamic programming algorithms provide a basic      First order decision trees and even decision diagrams
    tool identifying optimal solutions in Markov Deci- have already been considered in the literature [Blockeel and
    sion Processes (MDP). The paper develops a rep-   De Raedt, 1998; Groote and Tveretina, 2003] and several se-
    resentation for decision diagrams suitable for de- mantics for such diagrams are possible. In particular Groote
    scribing value functions, transition probabilities, and Tveretina [2003] provide a notation for ﬁrst order BDDs
    and domain dynamics of First Order or Relational  that can capture formulas in Skolemized conjunctive normal
    MDPs (FOMDP). By developing appropriate op-       form and then provide a theorem prover based on this repre-
    erations for such diagrams the paper shows how    sentation. In this paper we adapt and extend their approach to
    value iteration can be performed compactly for    handle ﬁrst order MDPs. In particular, we extend the deﬁni-
    such problems. This improves on previous ap-      tions to handle existential quantiﬁcation and numerical leaves
    proaches since the representation combines com-   through the use of an aggregation function. This allows us to
    pact form with efﬁcient operations. The work also capture value functions using algebraic diagrams in a natural
    raises interesting issues on suitability of different way. We also provide additional reduction transformations
    representations to different FOMDPs tasks.        for algebraic diagrams that help keep their size small, and al-
                                                      low the use of background knowledge in reductions. We then
                                                      develop appropriate representation and algorithms showing
1  Introduction                                       how value iteration can be performed using the decision dia-
In the past years there has been an increased interest in de- grams.
veloping relational or ﬁrst order MDPs. Some examples in- It is useful to compare our solutions to the propositional
clude symbolic dynamic programming (SDP) [Boutilier et ones. The main difﬁculty in lifting the ideas is that in rela-
al., 2001], the relational Bellman algorithm (ReBel) [Ker- tional domains the transition function speciﬁes schemas for
sting et al., 2004], approximate linear programming for conditional probabilities. The propositional solution uses the
FOMDPs  [Guestrin et al., 2003; Sanner and Boutilier, 2005], concrete conditional probability to calculate the regression
approximate policy iteration [Fern et al., 2003], and induc- function. But this is not possible with schemas. While one
tive policy selection using ﬁrst order regression [Gretton and can ﬁrst ground the domain and problem at hand and only
Thiebaux, 2004].                                      then perform the reasoning (e.g. [Sanghai et al., 2005])this
  Among these, only SDP and ReBel are exact solution  does not allow for solutions abstracting over domains and
methods. To our knowledge there is no working implemen- problems. Like SDP and ReBel our constructions do perform
tation of SDP because it is hard to keep the state formulas general reasoning and they do so by using decision diagrams.
consistent and of manageable size in the context of situation Due to space constraints most proofs and some details are
calculus. Compared with SDP, ReBel provides a more prac- omitted from the paper.
tical solution. ReBel uses simpler language (a probabilistic
STRIPS-like language) to represent FOMDPs, so that reason- 2 Markov Decision Processes
ing over formulas is easier to perform.               We assume familiarity with standard notions of MDPs and
  Inspired by the successful application of Algebraic Deci- value iteration [Puterman, 1994]. In the following we intro-
sion Diagrams (ADD) [Bryant, 1986; Bahar et al., 1993] in duce some of the notions and our notation. A MDP can be
solving propositionally factored MDPs [Hoey et al., 1999; characterized by a state space S, an action space A,astate
St-Aubin et al., 2000] we lift propositional ADDs to handle transition function Pr(sj|si,a) denoting the probability of
relational structure and use them in the solution of FOMDPs. transition to state sj given state si and action a, and an imme-
The intuition behind this idea is that the ADD representation diate reward function r(s), specifying the immediate utility
allows information sharing, e.g., sharing between state parti- of being in state s. A solution to a MDP is an optimal policy
tions. If there is sufﬁcient regularity in the model, ADDs can that maximizes expected discounted total reward as deﬁned

                                                IJCAI-07
                                                  1095by the Bellman equation. The value iteration algorithm uses
the Bellman equation to iteratively reﬁne an estimate of the
value function:            
                                              
  Vn+1(s)=maxa∈A[r(s)+γ       s∈S Pr(s |s, a)Vn(s )]
  where Vn(s) represents our current estimate of the value
function and Vn+1(s) is the next estimate.
  ThemainobservationusedbyHoeyet al. [1999] is that if              Figure 1: A simple FODD.
                               
we can represent each of r(s), Pr(s |s, a),andVk(s) com-
pactly using ADDs then value iteration can be done directly tion over the variables. We focus on the following syntactic
using this representation, avoiding the need to enumerate the deﬁnition which does not have any explicit quantiﬁers.
state space which is implicit in the equation above.    Deﬁnition of First Order Decision Diagrams:
  Taking the next step, the SDP approach [Boutilier et al., (1) We assume a signature with a ﬁxed set of predicates and
2001] was developed in the context of the situation calcu- constant symbols, and an enumerable set of variables. We
lus. Stochastic actions are speciﬁed as a non-deterministic also allow to use an equality between any pair of terms (con-
choice among deterministic alternatives. In this way one can stants or variables).
separate the regression over action effects, which is now de- (2) A First Order Decision Diagram (FODD) is a labeled di-
terministic, from the probabilistic choice of action. On each rected acyclic graph, where each non-leaf node has exactly
regression step during value iteration, the value of a stochastic two children. The outgoing edges are marked with values
action A(x) parameterized with free variables x is determined true and false.
in the following manner:                              (3) Each non-leaf node is labeled with: an atom P (t1,...,tn)
   V                                                                =
  Q  (A(x),s)=rCase(s)⊕                              or an equality t1 t2 where ti is a variable or a constant.
    γ[⊕jpCase(nj(x),s) ⊗ regr(vCase(do(nj (x),s)))] (4) Leaves are labeled with numerical values.
  where rCase(s) and vCase(s) denote reward and value   Figure 1 shows a FODD with binary leaves. Left going
                                                                   true
functions in the compact “case notation” of Boutilier et edges represent  branches. To simplify diagrams in the
al. [2001], nj(x) denotes the possible outcomes of A(x),and paper we draw multiple copies of the leaves 0 and 1 but they
pCase(nj(x),s) the choice probabilities for nj(x).  represent the same node in the FODD.
  After the regression, we need to maximize over the action The semantics of ﬁrst order formulas are given relative to
parameters of each Q-function to get the maximum value that interpretations. An interpretation has a domain of elements,
could be achieved by using an instance of this action. In SDP, a mapping of constants to domain elements, and for each
this is done by adding the negation of higher value partitions predicate a relation over the domain elements which speci-
into the description of lower value partitions, leading to com- ﬁes when the predicate is true. There is more than one way
plex formulas and reasoning. Finally, to get the next value to deﬁne the meaning of FODD B on interpretation I.Inthe
function we maximize over the choice of action.       following we discuss two possibilities.
  The solution of ReBel [Kersting et al., 2004] follows the Semantics based on a single path: A semantics for deci-
same outline but uses a probabilistic STRIPS-like language sion trees is given by Blockeel and De Raedt [1998] that can
for representing FOMDPs. More importantly the paper uses be adapted to FODDs. The semantics deﬁne a unique path
a decision list [Rivest, 1987] style representation for value that is followed when traversing B relative to I. All variables
functions. The decision list gives us an implicit maximization are existential and a node is evaluated relative to the path lead-
operator since rules higher on the list are evaluated ﬁrst. As ing to it. For example, if we evaluate the diagram in Figure 1
a result the object maximization step is very simple. On the on the interpretation I1 with domain {1, 2, 3} and relations
other hand regression in ReBel requires that one enumerate {p(1),q(2),h(3)} then we follow the true branch at the
all possible matches between a subset of a state partition and root since ∃x, p(x) is satisﬁed, but we follow the false
action effects and reason about each of these separately. branch at q(x) since ∃x, p(x) ∧ q(x) is not satisﬁed. Since
                                                      the leaf is labeled with 0 we say that B does not satisfy I.
                                                      This is an attractive approach, since it builds mutually exclu-
3  First Order Decision Diagrams                      sive partitions over states, and various FODD operations can
An Algebraic Decision Diagram is a labeled directed acyclic be developed for it. However, for reasons we discuss later
graph where non-leaf nodes are labeled with propositional this semantics is not well suited to value iteration, and it is
variables, each non-leaf node has exactly two children cor- therefore not used in the paper.
responding to true and false  branches, and leaves are  Semantics based on a multiple paths: Following Groote
labeled with numerical values. Ordered decision diagrams and Tveretina [2003] we deﬁne the semantics ﬁrst relative to
specify a ﬁxed order on propositions and require that node la- a variable valuation ζ. Given a FODD B over variables x and
bels respect this order on every path in the diagram. In this an interpretation I, a valuation ζ maps each variable in x to a
case every function has a unique canonical representation and domain element in I. Once this is done, each node predicate
diagrams have efﬁcient manipulation algorithms, leading to evaluates either to true or false and we can traverse a
successful applications [Bryant, 1986; Bahar et al., 1993]. single path to a leaf. The value of this leaf is denoted by
  There are various ways to generalize ADDs to capture rela- MAPB(I,ζ).
tional structure. One could use closed or open formulas in the We next deﬁne MAPB(I)=aggregateζ {MAPB(I,ζ)} for
nodes, and in the latter case we must interpret the quantiﬁca- some aggregation function. That is, we consider all possible

                                                IJCAI-07
                                                  1096valuations ζ, for each we calculate MAPB(I,ζ) andthenwe lower among labels of p, q) and recursively combines the cor-
aggregate over all these values. In [Groote and Tveretina, responding sub-diagrams, according to the relation between
2003] leaf labels are in {0, 1} and variables are universally the two labels (<, =,or>).
quantiﬁed; this is easily captured by using minimum as the Additional Reduction Operators: In our context, es-
aggregation function. In this paper we use maximum as the pecially for algebraic FODDs we may want to reduce the
aggregation function. This corresponds to existential quan- diagrams further. We distinguish strong reduction that pre-
tiﬁcation in the binary case, and gives useful maximization serves MAPB(I,ζ) for all ζ and weak reduction that only
for value functions in the general case. We therefore deﬁne: preserves MAPB(I). In the following let B represent any
MAPB(I)=maxζ    {MAPB(I,ζ)}.                          background knowledge we have about the domain. For exam-
  Consider evaluating the diagram in Figure 1 on the inter- ple in the Blocks World we may know that ∀x, y, [on(x, y) →
pretation I1. The valuation {x/2,y/3} leads to a leaf with ¬clear(y)].
value 1 so the maximum is 1 and we say that I satisﬁes B. (R5) Strong Reduction for Implied Branches: Consider
  We deﬁne node formulas (NF) and edge formulas (EF) re- any node n with label l(n).Letx be the variables in EF(n↓t).
cursively as follows. For a node n labeled l(n) with incom- If B|= ∀x, [NF(n) → l(n)] then whenever node n is reached
ing edges e1,...,ek, the node formula NF(n)=(∨iEF(ei)). then the true branch is followed. In this case we can re-
Denote the true branch of a node n by n↓t and the false move n and connect its parent directly to the true branch.
branch by n↓f . The edge formula for the true outgoing It is clear that the map is preserved for any valuation. A sim-
edge of n is EF(n↓t)=NF(n) ∧ l(n). The edge formula for ilar reduction can be formulated for the false branch.
the false outgoing edge of n is EF(n↓f )=NF(n)∧¬l(n).   (R6) Weak Reduction Removing Dominated Siblings:
These formulas, where all variables are existentially quanti- Consider any node n such that if we can reach n we can also
ﬁed, capture reachability conditions for the node or edge. reach n↓t.Ifn↓t always gives better values than n↓f then we
  Basic  Reduction  of  FODDs:         Groote  and    should be able to remove n↓f from the diagram. We start by
Tveretina [2003] deﬁne several operators that reduce a giving a special case of this condition.
diagram into “normal form”. A total order over open predi- Let x be the variables that appear in NF(n),andy the vari-
cates (node labels) is assumed. We describe these operators ables in l(n) and not in NF(n). Consider the condition (I1):
brieﬂy and give their main properties.                B|=  ∀x, [NF(n) →∃y,l(n)] which requires that every valu-
  (R1) Neglect operator: if both children of a node p in the ation reaching n can be extended to reach n↓t.
FODD lead to the same node q then we remove p and link all Let min(n↓t) be the minimum leaf value in n↓t,and
parents of p to q directly. (R2) Join operator: if two nodes p, q max(n↓f ) be the maximum leaf value in n↓f . Consider next
have the same label and point to the same two children then the additional condition (V1): min(n↓t) ≥ max(n↓f ).In
we can join p and q (remove q and link q’s parents to p). (R3) this case regardless of the valuation we know that it is better
Merge operator: if a node and its child have the same label to follow n↓t and not n↓f . If both I1 and V1 hold then ac-
then the parent can point directly to the grandchild. (R4) Sort cording to maximum aggregation the value of MAPB (I) will
operator: If a node p is a parent of q but the label ordering is never be determined by the false branch. Therefore we
violated (l(p) >l(q)) then we can reorder the nodes locally can safely replace n↓f with any constant value between 0 and
using two copies of p and q such that labels of the nodes do min(n↓t) without changing the map. A symmetric operation
not violate the ordering.                             can be applied exchanging the roles of n↓t and n↓f .
  Deﬁne a FODD to be reduced if none of the four operators In some cases we can also drop the node n completely and
can be applied. We have the following:                connect its parents directly to n↓t. This can be done if (I1A):
                                                      B|=  ∀   [∃    ( )] →  [∃      (   )]
Theorem 1 [Groote and Tveretina, 2003]                       u, v, NF n     v,w,  EF n↓t where u are the
(1) Let O ∈{Neglect, Join, Merge, Sort} be an operator and variables that appear in (the sub-diagram of) n↓t, v the vari-
                                                      ables that appear in NF( ) but not in ↓t,and the variables
O(B) the result of applying O to FODD B, then for any ζ,                  n          n      w
                                                      in l(n) and not in u or w. This condition requires that for ev-
MAPB(I,ζ)=MAPO(B)(I,ζ)
                                                      ery valuation ζ1 that reaches n↓f there is a valuation ζ2 that
(2) if B1,B2 are reduced and satisfy ∀ζ, MAPB1 (I,ζ)=
                                                      reaches n↓t andsuchthatζ1 and ζ2 agree on all variables in
MAPB2 (I,ζ) then they are identical.
                                                      n↓t. It is easy to see that I1A follows from I1 if (I1B): no
Property (1) gives soundness, and property (2) shows that re- variable in y appears in the sub-diagram of n↓t.
ducing a FODD gives a normal form. This only holds if the An important special case of R6 occurs when l(n) is an
maps are identical for every ζ and this condition is stronger equality t1 = y where y is a variable that does not occur on
than normal equivalence. However, this weak normal form the FODD above node n. In this case, the condition I1 holds
sufﬁces for Groote and Tveretina [2003] who use it to pro- since we can choose the value of y. Therefore if V1 holds
vide a theorem prover for ﬁrst order logic.           we can remove the node n connecting its parents to n↓t and
  Combining FODDs:    Given two algebraic diagrams we substituting t1 for y in the diagram n↓t.
may need to add the corresponding functions, take the max- (R6) General Case: The conditions for replacing n↓f with
imum or use any other binary operation op over the values a constant and for dropping n completely can be relaxed. Due
represented by the functions. Here we adopt the solution to space constraints, we only sketch the details. I1 can be
from the propositional case [Bryant, 1986] in the form of relaxed to (I2): B|=[∃x, NF(n)] → [∃x, y,EF(n↓t)],which
the procedure Apply(p, q, op) where p and q are the roots of requires that if n is reachable then n↓t is reachable but does
two diagrams. This procedure chooses a new root label (the not put any restriction on the valuations (in contrast with I1).

                                                IJCAI-07
                                                  1097                                                      next state when A(a) has been performed in the current state.
                                                      We call a action parameters, and x predicate parameters. No
                                                      other variables are allowed in the TVD.
                                                        Notice that the TVD simultaneously captures the truth val-
                                                      ues of all instances of p(x) in the next state. Notice also that
                                                      TVDs for different predicates are separate and independent.
                                                      This can be safely done even if an action has correlated ef-
                                                      fects (not conditionally independent) since the actions are de-
                                                      terministic.
                                                        For any domain, a TVD for predicate p(x) can be deﬁned
           Figure 2: A template for the TVD
                                                      generically as in Figure 2. The idea is that the predicate is
      =     −
Let D    n↓t   n↓f which we can calculate using Apply. true if it was true before and is not “undone” by the action or
V1 can be relaxed to (V2): all leaves in D have non-negative was false before and is “brought about” by the action. TVDs
values. But using V2 requires a condition stronger than I2. for the logistics domain in our running example are given in
  (R7) Weak Reduction Removing Dominated Edges:       Figure 3. All the TVDs omitted in the ﬁgure are trivial in the
  Consider a FODD with two nodes p, q where q is in the sense that the predicate is not affected by the action. In order
sub-FODD of p↓f and their formulas satisfy that if we can to simplify the presentation we give the TVDs in their generic
follow q↓t then we can also follow p↓t. In this case, if form and did not sort the diagrams.
min(   ) ≥ max(   )           ( )
    p↓t         q↓t then MAPB  I  will never be deter-  Notice how we utilize the multiple path semantics with
mined by q↓t so we can replace q↓t with a constant between 0 maximum aggregation. A predicate is true if it is true ac-
   min(   )                    min(   ) ≥ max(    )
and     p↓t . If in addition we have p↓t       q↓f    cording to one of the paths speciﬁed so we get a disjunction
then it is also safe to remove q completely. Due to space con- over the conditions for free. If we use the single path seman-
straints, we omit the details and the general case of R7. tics then a single path in a TVD must capture all possibilities
  (R8) Weak Reduction by Uniﬁcation: Consider a FODD  for a predicate to become true in a state. Thus different con-
B and two sets of variables x and y of the same cardinality. ditions must be tested sequentially and their bindings must be
     {   }
By B  x/y we denote the FODD resulting from replacing combined so the corresponding notion of TVD is signiﬁcantly
variables in x by the corresponding variables in y. Now con- more complicated.
               {    }−
sider the FODD B x/y B  which we can calculate using  Probabilistic Action Choice: Multiple path semantics
Apply. If all leaves in this diagram are non negative then makes it hard to specify mutually exclusive conditions us-
∀        ( )=            ( )
 I,MAPB   I   MAPB{x/y} I so we can safely replace B. ing existentially quantiﬁed variables and in this way specify
                                                      a distribution. We therefore restrict the conditions to be ei-
4  Decision Diagrams for MDPs                         ther propositional or depend directly on the action parame-
We follow Boutilier et al. [2001] and specify stochastic ac- ters. Notice that under this restriction any interpretation fol-
tions as a non-deterministic choice among deterministic al- lows exactly one path (since there are no variables and thus
ternatives. We therefore need to use FODDs to represent the only the empty valuation) so the aggregation function does
deterministic domain dynamics of actions, the probabilistic not interact with the probabilities assigned. A diagram show-
choice among actions, and value functions.            ing the choice probability for unloadS in our logistics exam-
  Example Domain:    We use the logistics problem vari- ple is given in Figure 3.
ant from [Boutilier et al., 2001] to illustrate our constructions Reward and value functions: can be represented directly
for MDPs. The domain includes boxes, trucks and cities, using algebraic FODDs. An example is given in Figure 3.
and predicates are Bin(Box,City), Tin(Truck,City),and
On(Box,Truck)  with their obvious meaning. The reward 5   Value Iteration with FODDs
function, capturing a planning goal, awards a reward of 10 if The general ﬁrst order value iteration algorithm works as fol-
the formula ∃b, Bin(b, P aris) is true, that is if there is any lows: given as input the reward function R and the action
box in Paris.                                         model, we set V0 = R, n =0and perform the following
  The domain includes 3 actions load, unload,anddrive. steps until termination:
Actions have no effect if their preconditions are not met. Ac- (1) For each action type A(x), compute:
tions can also fail with some probability. When attempting A(x)
                                                         T    (Vn)=⊕j(prob(Aj  (x)) ⊗ Regr(Vn,Aj(x))).
load, a successful version loadS is executed with probability n+1
                                                           A   =   ⊕ [ ⊗        ( A(x)( ))]
0.99, and an unsuccessful version loadF (effectively a no- (2) Qn+1 R γ  obj-max Tn+1  Vn  .
operation) with probability 0.01. The drive action is executed (3) Vn+1 is obtained by maximizing over Qn+1:
                                                              =max     A
deterministically. When attempting unload, the probabilities Vn+1   A Qn+1.
depend on whether it is raining or not. If it is not raining (rain- Regression by Block Replacement: Consider Vn and
ing) then unloadS is executed with probability 0.9 (0.7), and the nodes in its FODD. For each such node take a copy of the
unloadF with probability 0.1 (0.3).                   corresponding TVD, where predicate parameters are renamed
  The domain dynamics:  are deﬁned by truth value dia- so that they correspond to the node’s arguments and action
grams (TVDs). For every action schema A(a) and each pred- parameters are unmodiﬁed. Block Replacement Regression
icate schema p(x) the TVD T (A(a),p(x)) is a FODD with BR-regress(Vn,Aj(x)) is the FODD resulting from replacing
{0, 1} leaves. The TVD gives the truth value of p(x) in the each node in Vn with the corresponding TVD, with outgoing

                                                IJCAI-07
                                                  1098                                                                                       ≠


Figure 3: Logistics domain: TVDs, action choice probabilities, reward function, and regression. (a)(b) The TVDs for
Bin(B,C)  and On(B,T)  under action choice unloadS(b∗,t∗). (c)(d) The TVDs for Bin(B,C) and On(B,T) under ac-
tion choice loadS(b∗,t∗,c∗). Note that c∗ must be an action parameter so that (d) is a valid TVD. (e) The TVD for Tin(T,C)
under action drive(t∗,c∗). (f) The probability FODD for the action choice unloadS(b∗,t∗). (g) The reward function R and
                                                      ∗ ∗
the value function V0. (h) Regression of V0 through unloadS(b ,t ). (i) Multiply (h) with the choice probability FODD. (j)
                            ∗  ∗
Regression of V0 over unloadF (b ,t ) multiplied with the probability. (k) The unreduced result of adding two outcomes for
unload(b∗,t∗). (l) The reduced result after addition. Notice that the left branch reduces to 10 by using both the recursive part of
Apply and R6. The middle part is dropped by R7. (m) Multiply by γ =0.9, perform object maximization, and add the reward
       unload
to get Q1   . Notice that in object maximization we have also dropped the equality on the right branch by the special case
                                                                    unload
of R6. It turns out that V1, the value function after ﬁrst iteration, is the same as Q1 . In this case the diagram for unload
                                                                                         ∗  ∗
dominates the other actions (not shown). (n) Block replacement in computing V2 through action unloadS(b ,t ) .


                                                IJCAI-07
                                                  1099