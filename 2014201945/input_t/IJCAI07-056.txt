                       On Valued Negation Normal Form Formulas‚àó

                      Hel¬¥ ene` Fargier                            Pierre Marquis
                   IRIT-CNRS, Toulouse                 CRIL-CNRS, Universite¬¥   d‚ÄôArtois, Lens
                   email: fargier@irit.fr                 email: marquis@cril.univ-artois.fr


                    Abstract                          2000] and semiring CSP [Bistarelli et al., 1995]; PFU [Pralet
                                                      et al., 2006]. In such frameworks, satisfaction is a more grad-
    Subsets of the Negation Normal Form formulas
                                                      ual notion than in the standard CSP one; valuations range
    (NNFs) of propositional logic have received much
                                                      over some ordered scale (which can e.g. be interpreted as
    attention in AI and proved as valuable representa-
                                                      a utility/uncertainty scale) and can be aggregated using some
    tion languages for Boolean functions. In this pa-
                                                      operators. These frameworks consider a number of queries
    per, we present a new framework, called VNNF,
                                                      which extend the ones considered in the standard framework
    for the representation of a much more general class
                                                      (mainly, the consistency query); especially, optimization is an
    of functions than just Boolean ones. This frame-
                                                      important query in such settings.
    work supports a larger family of queries and trans-
                                                        At the intersection of those two research lines are a few ap-
    formations than in the NNF case, including opti-
                                                      proaches, where DAGs are used to represent functions rang-
    mization ones. As such, it encompasses a number
                                                      ing over an ordered scale. Let us mention SLDD [Wilson,
    of existing settings, e.g. NNFs, semiring CSPs,
                                                      2005], AADD  [Sanner and McAllester, 2005], ADD [Bahar
    mixed CSPs, SLDDs, ADD, AADDs. We show
                                                      et al., 1993], and arithmetic circuits [Darwiche, 2002].
    how the properties imposed on NNFs to deÔ¨Åne
                                                        This work can be viewed as a further, yet more system-
    more ‚Äútractable‚Äù fragments (decomposability, de-
                                                      atic attempt to bridge the gap between both research streams.
    terminism, decision, read-once) can be extended to
                                                      We present a general framework, called VNNF (for ‚ÄúValued
    VNNFs, giving rise to subsets for which a number
                                                      NNFs‚Äù), suited for the representation of a much more gen-
    of queries and transformations can be achieved in
                                                      eral class of functions than just Boolean ones. This frame-
    polynomial time.
                                                      work supports a larger family of queries and transformations
                                                      than in the NNF case, including variable elimination, suited
1  Introduction                                       to optimization issues and encompasses a number of existing
For the past few years, several frameworks specializing the representation settings, e.g. NNF, semiring CSP, mixed CSP,
standard propositional one have been developed. Such frame- SLDD, ADD, and AADD. We show how the properties im-
works are centered on fragments which are proper subsets of posed on NNFs to deÔ¨Åne ‚Äútractable‚Äù fragments (decompos-
a full propositional language. Among them is the inÔ¨Çuential ability, determinism, decision, read-once) can be extended to
DNNF fragment [Darwiche, 2001], and its subsets d-DNNF, give rise to subsets of VNNF, for which a number of queries
FBDD and OBDD, which have been successfully applied to a and transformations can be achieved in polynomial time.
number of AI tasks, including diagnosis, reasoning under un-
certainty, and planning. The success of such languages comes 2 The VNNF Framework
from the fact that they support a number of queries and trans- The VNNF framework gathers the family of VNNF lan-
formations in polynomial time and are quite spatially suc- guages, and the queries and transformations they support.
cinct. The sources of their efÔ¨Åciency have been identiÔ¨Åed Each VNNF language allows the representation of some func-
as formal properties on the corresponding structures, e.g. de- tions ranging over an ordered scale; such a language is fully
composability for DNNF, while d-DNNF asks also for deter- characterized by a representation context E,X,F consist-
      [                        ]
minism Darwiche and Marquis, 2002 .                   ing of a valuation structure E, a set X of variables and a set
  On the other hand, in the recent years, many algebraic F of primitive or ‚Äúlocal‚Äù functions (the word is taken from
frameworks generalizing the standard CSP one have been [Pralet et al., 2006] where local functions represent prefer-
                              [               ]
pointed out; among them are VCSP Schiex et al., 1995 , val- ences or plausibility degrees over assignments). Let us Ô¨Årst
            [
uation algebra Shenoy and Shafer, 1988; Kohlas and Shenoy, make precise the notion of valuation structure:
  ‚àó
   The authors would like to thank Sylvie Coste-Marquis for her DeÔ¨Ånition 1 (valuation structure) A valuation structure is a
help. The second author has been partly supported by the Region¬¥ triple E = E,,OP where:
Nord/Pas-de-Calais, the IRCICA Consortium and by the European
Community FEDER Program.                                ‚Ä¢ (E,)  is a set ordered by a relation  (which is thus

                                                IJCAI-07
                                                   360    reÔ¨Çexive, antisymmetric and transitive) and such that E ‚Ä¢ fz denotes the restriction (or conditioning)off by z,
    has a greatest element  and a least element ‚ä•;       i.e. the function given by scope(fz)=scope(f) \ Z
                                                                                                     
                                                          and for any scope(fz)-assignment t, fz(t)=f(z + t).
  ‚Ä¢ OP  is a subset of OPE , the set of all binary operators
    ‚äó    E              ‚äó                                 Clearly enough, the conditioning of f by z where Z is
      on   such that each  is associative, commutative,               X                      scope(f)
    monotonic (‚àÄa, b, c ‚àà E,ifa  b then a ‚äó c  b ‚äó c)   any subset of  (and not necessarily of    ) can
                                                          also be deÔ¨Åned, and considered equal to fy where y is
    and has a neutral element e‚äó.
                                                          the Z ‚à©scope(f)-assignment which coincides with z for
  When  E is totally ordered by , elements of OPE are    every variable from Z ‚à© scope(f).
                              ‚ä•                                                         
generally called uninorms. When (resp.  ) is the neu-   ‚Ä¢ f ‚äóf  is the ‚äó-combination of f and f , i.e. the function
             ‚äó  ‚äó                                                                               
tral element of ,  is usually called a t-conorm (resp. a  given by scope(f ‚äó f )=scope(f) ‚à™ scope(f ) and for
         E
t-norm)on  . We shall use the same terminology here, ne-  any scope(f‚äóf )-assignmentt, f‚äóf (t)=f(t)‚äóf (t).
glecting the fact that E is not necessarily totally ordered.
                                                        ‚Ä¢ f          [x, ‚äó]           f    ‚äó
For instance, t-conorms on E =[0, 1] include the operations [x,‚äó] is the  -projection of (or -elimination of
                                                                  x                        scope(f   )=
max(a, b), a + b ‚àí a.b, min(a + b,1). T-norms include the variable ), i.e. the function given by [x,‚äó]
         min(a, b) a.b                                    scope(f) \{x}           scope(f   )          t
operations      ,   . Max and  are also t-conorms on                  and for any     [x,‚äó] -assignment ,
E = R+ ‚à™{+‚àû}.     is a uninorm on E = R‚à™{+‚àû, ‚àí‚àû}.                               
                                                          f[x,‚äó](t)=  x‚ààdom(x) fx(t).
  We assume that OP contains the following operators ‚àß and
‚à®, which can be viewed as generalizations of the well-known We shall typically consider tractable representation contexts:
Boolean connectives:                                  DeÔ¨Ånition 2 (tractable representation context) A repre-
   a ‚àß=   ‚àßa  = a,    a ‚àß b = ‚ä• if a, b =         sentation context E,X,F where E  =  E,,OP   is
   a ‚à®‚ä•=   ‚ä•‚à®a  = a,    a ‚à® b =  if a, b = ‚ä•.       tractable iff each element of F ‚à™ OP is in linear time,2 and
  When  is a total order, min and max are alternative gener- this is also the case for the characteristic function of .
alizations of the Boolean connectives. Interestingly, ‚àß and ‚à®
                                                        If a function f is in linear time, then every conditioning
are admissible in any valuation structure (hence our assump-
                                                      of f and every ‚äó-combination of f with another linear time
tion is harmless), while min and max are admissible in any
                                                      function are in linear time as well, provided that ‚äó is in linear
valuation structure with a totally ordered domain:
                                                      time. and any z, fz ‚àà F ). We are now ready to deÔ¨Åne in a
             1
Proposition 1 Let E be any valuation structure. OPE con- formal way the family of VNNF languages:
tains ‚àß (resp. ‚à®) which is a t-norm (resp. a t-conorm) on E. DeÔ¨Ånition 3 (VNNF) Given a representation context
Furthermore, if  is a total order, OPE contains min (resp. E,X,F where E = E,,OP, VNNF is the set of all
max) which is a t-norm (resp. a t-conorm) on E.       Ô¨Ånite, rooted directed acyclic graphs (DAGs) where each
                                                      internal node is labeled by the name of an operator of OP
  The last two elements of a representation context are much and can have many arbitrarily children and where each leaf
simpler notions:                                      node is labeled by the name of an element of F and by a
  ‚Ä¢ X  = {x1,...,xn} is a Ô¨Ånite set of variables ranging Z-assignment where Z ‚äÜ X.
    on Ô¨Ånite domains. dom(x) denotes the domain of vari- It is important to observe that such DAGs are not concerned
    able x ‚àà X. When   Y  ‚äÜ  X, we note dom(Y  )=     by the representation of local functions (or operators): they
    Œ†x‚ààY dom(x) and call Y -assignments the elements y ‚àà are just given by their names, and can be represented as data
    dom(Y ).IfY and Z are disjoint subsets of X, then y+z structures or algorithms, but outside the DAG.
    is the Y ‚à™ Z-assignment obtained by ordering the values Each leaf node N of a VNNF œÜ labeled by f and z actually
    given in the two tuples in an increasing way w.r.t. the represents fz: z grounds some of the variables of scope(f).
    indexes of the associated variables.              Let vars(N)=scope(f)    \ Z denote the set of free vari-
                                                                                   N
  ‚Ä¢ F is a set of functions f ranging over E (the ‚Äùlocal ables of the function associated to . For any internal node
                                                      M     op(M)                 M      Children(M)
    functions‚Äù). When f is a function from Y ‚äÜ X to E,  , let     denote the label of , and           the
    scope(f)=Y   is called the scope of f. Constant func- set of its children. The set of free variables occurring in the
                                                            œÜ              M        vars(œÜ)=vars(M)=
    tions are identiÔ¨Åed with elements of E without loss of VNNF rooted at node is thus
                                                                     vars(N)  œÜ
    generality. We assume that F contains all functions f N‚ààChildren(M)     .   is said to be grounded when
    such that card(scope(f)) ‚â§ 1, i.e. F contains all ‚Äùliter- vars(œÜ)=‚àÖ.
                                      E
    als‚Äù (cf. Section 5.3) and constants from .       DeÔ¨Ånition 4 (semantics of a VNNF) Let œÜ be a VNNF w.r.t.
                                                      E,X,F                val(œÜ)   œÜ
  Let f ‚àà F such that scope(f)=Y . Let Z s.t. Y ‚äÜ Z ‚äÜ         . The semantics      of   is the function from
                                                      scope(val(œÜ)) = vars(œÜ)  E
X and z be any Z-assignment. We consider that f(z) is equal                to  recursively deÔ¨Åned by:
to f(y) where y is the Y -assignment which coincides with z ‚Ä¢ If œÜ is a leaf node labeled by f ‚àà F and a Z-assignment
for every variable from Y .                               z, then val(œÜ)=fz;
         f  f  ‚àà F   ‚äó‚ààOP        x ‚àà X    z
  Now, let ,      ;let        and      ;let  be any     ‚Ä¢ Otherwise œÜ = ‚äó(œÜ1,...,œÜn), and val(œÜ)=val(œÜ1)‚äó
Z              Z ‚äÜ scope(f)
 -assignment s.t.          . We shall use the following   ...‚äó val(œÜn).
notations:
                                                         2A function is said to be polytime (resp. in linear time) when
  1Due to space reasons, proofs are omitted.          there exists a polynomial (resp. linear) time algorithm computing it.

                                                IJCAI-07
                                                   361  A VNNF is thus simply the structured representation of a CSPs Recovering the standard CSP framework is also easy,
function (val(œÜ)) that does not necessarily belong to the set considering the same valuation structure as for the NNF
of primitives F . Importantly if E,X,F is tractable, then framework. No restriction is put on X (it can be any set of
val(œÜ) is a polytime function.                        discrete variables), but for getting a CSP as a VNNF language
  Obviously, a given function over a valuation structure can we must add some restrictions on VNNF formulas. First of
be represented by many distinct but equivalent VNNFs. Since all, the root node has to be a min node. In general CSPs, each
VNNFs are deÔ¨Åned as DAGs, subformulas that would have child of the root is a local function f : scope(f) ‚Üí{0, 1}.
several occurrences in tree-like representations do not need to In table-deÔ¨Åned CSPs, each child of the root is a max node,
be duplicated. But they can. It is always possible to simplify whose children are themselves min nodes connecting func-
a VNNF by merging identical subgraphs. This reduction does tions of the form x == a, that take value 1 if satisÔ¨Åed and
not change the semantics and can be achieved by an algorithm value 0 otherwise. QuantiÔ¨Åed CSPs can also be viewed as
similar to the one used for OBDDs. However, it does not speciÔ¨Åc Q-VNNFs, where min x (resp. max x) stands for the
lead to a canonical form in the general case (i.e., we do not universal (resp. existential quantiÔ¨Åcation) on variable x.
necessarily have val(œÜ)=val(œà) only if the reduced form
                                                      Semiring CSPs and valuation algebras  E  is equipped
of œÜ coincides with the reducd form of œà).
                                                      with two operators: OP = {‚à®, ‚äó} and  is deÔ¨Åned by a  b
  Let us now ‚Äùquantify‚Äù VNNFs. In classical logic, two
                                                      iff a ‚à® b = a. It is moreover assumed that E,, ‚à®, ‚äó is
quantiÔ¨Åers are used: ‚àÉ and ‚àÄ. In the VNNF framework, every
                                                      a commutative semiring and ‚à® is idempotent. In a semir-
operator of OP can be used as a quantiÔ¨Åer:
                                                      ing CSP viewed as a VNNF, the root node of the DAG is a ‚äó
DeÔ¨Ånition 5 (Q-VNNF) A (prenex) quantiÔ¨Åed VNNF (Q-    node and each of its children is a local function. Interestingly,
                             Œ¶=‚äó     x ,... ‚äó x  œÜ
VNNF) is a sentence of the form     1 i1     j  ij    the deÔ¨Ånition of quantiÔ¨Åed semiring CSPs follows from our
      œÜ                       x            X  3                               
where   is a VNNF, each variable ij belongs to , and  framework. In particular, if is complete, then computing
    ‚äó            OP   i ‚àà 1 ...j ‚äó  x  ,... ‚äó x                                   œÜ
each  i belongs to   (         ).  1 i1     j  ij is  the best value of a semiring CSP is equivalent to compute
called the preÔ¨Åx of Œ¶ and œÜ its matrix.               max XœÜ  (note that min can also be added to OP and used as
The semantics of Œ¶, denoted val(Œ¶) is the function from a quantiÔ¨Åer). Valuation algebras [Shenoy and Shafer, 1988;
                                                                            ]
scope(val(Œ¶)) = vars(œÜ) \{xi1 ,...,xij } to E recursively Kohlas and Shenoy, 2000 can be more general than VNNF
deÔ¨Åned as follows:                                    since valuations can bear on subsets of assignment, e.g. for
                                                      representing commonality functions. When restricted to the
  ‚Ä¢ If the preÔ¨Åx of Œ¶ is empty, then val(Œ¶) = val(œÜ).
                                                      distributional case they can be recovered in way similar to the
  ‚Ä¢ Otherwise,Œ¶ is of the form ‚äóyŒ® and               one used for semiring CSPs.
    val(Œ¶) =           val(Œ®)y.
               y‚ààdom(y)                              Other frameworks for decision making under uncertainty
  Clearly enough, quantiÔ¨Åed VNNFs are convenient for rep- The VNNF framework subsumes many of the constraint-
resenting at the syntactic level projections of functions. When based frameworks for decision making under uncertainty,
x ,...,x                    Œ¶
 i1     ij are pairwise distinct, is said to be polite. When e.g. mixed CSPs (they can be represented by disjunctions
vars(œÜ) ‚äÜ{x    ,...,x }              Œ¶
             i1      ij , the Q-VNNF   is said to be  of a conjunction of constraints Ci, i ‚àà 1 ...n representing
closed. Its semantics is an element of E. Computing it is what is satisfying and, with a disjunction of constraints Ki,
what is called the evaluation of a (closed) Q-VNNF.   i ‚àà 1 ...m representing the knowledge about the state vari-
                                                      ables) and possibilistic mixed CSPs (each such CSP can be
3  Generality of the VNNF Framework                   represented by a VNNF whose root is labeled by max and has
                                                      two children: a min-rooted VNNF and a max-rooted one).
Let us now show how the VNNF framework encompasses
                                                      Stochastic or more generally expected utility CSP networks
various representation settings pointed out so far.
                                                      can be represented as well by products between a VNNF œÜp
Negation Normal Forms (NNFs)   The propositional lan- representing the probability density over the state variables
guage NNF (Negation Normal Form  formulas) is a well- (e.g. a bayesian net) and a semiring CSP œÜu over E =[0, 1]
known fragment for representing Boolean functions. For re- synthesizing the utility function. Denoting X the set of deci-
                                              E  =
covering it as a VNNF language, it is enough to set   sion variables and Y the set of state variables, maximizing
{0, 1}           1  0 dom(x)=E          x ‚àà X  F                                           
     ,  is such that  ,            for each     ,     expected utility amounts to compute max X YœÜp .œÜu.
                                            1
is the set of all Boolean functions of arity at most (such In the qualitative cases (mixed and possibilistic) a standard
functions can be represented by literals and Boolean con- quantifying sequence is rather max X min Y . PFU generic
      OP   = {min, max}  min
stants),                (    nodes correspond to con- networks [Pralet et al., 2006]) are not stricto sensu subsumed
                      max
junctions of formulas and nodes to disjunctions). Then by the VNNF framework, since they may involve a non-
val(œÜ)(x)
         is simply the truth value taken by the boolean func- commutative combination of utility degrees and plausibility
                          œÜ              x
tion which is the semantics of when applied to . Quanti- degrees. Nevertheless, non-commutativity is not a compul-
Ô¨Åed Boolean formulas in negation normal form are also easily sory condition and most of the practical instances of PFU
                     min x      max x
recovered as Q-VNNFs:      (resp.     ) stands for the consider a commutative aggregator. Arithmetic circuits, as
                                            x
universal (resp. existential quantiÔ¨Åcation) on variable . considered in [Darwiche, 2002], for the factored representa-
  3                                                   tion of belief networks can also be recovered as VNNFs.
   If Y = {y1,...,yk}‚äÜX  and ‚äó‚ààOP, then we abbrevi-
ate ‚äóy1 ...‚äó yk by ‚äóY ; this is harmless since each ‚äó‚ààOP is Finally, we shall see in Section 5.3 that VNNFs also en-
associative and commutative.                          compass decision diagrams like AADDs (and thus ADDs)

                                                IJCAI-07
                                                   362and SLDDs.                                              We have obtained the following complexity results for
                                                      VNNF assuming that the underlying representation context
4  Queries and Transformations                        is tractable (which is a reasonable assumption that we make
                                                      from now on up to the end of the paper):
The VNNF framework includes a number of algorithms for
answering queries about functions represented as VNNFs, Proposition 2
and related functions which can be characterized via the ap- ‚Ä¢ Partial and full consistency are NP-complete.
plication of transformations on functions represented by VN- ‚Ä¢                   coNP
NFs. A fundamental difference between the NNF setting and Partial and full validity are -complete.
the VNNF one is that in the VNNF framework, the under-  ‚Ä¢ Optimization is NP-hard
lying valuation structure does not necessarily reduce to the ‚Ä¢ Optimal value is DP-complete.
Boolean one. Especially, since E may contain more than two
                                                        ‚Ä¢           #P
elements, the equivalences a ‚ä•iff a =  and a ‚â∫iff      Counting is   -hard.
a = ‚ä• do not hold anymore. In the NNF framework, the key ‚Ä¢ Evaluation of a closed Q-VNNF is PSPACE-complete.
queries include consistency (CO), validity (VA), and model
                                                        Observe that, though VNNF is a much more general frame-
counting (CT), while the key transformations are condition-
                                                      work than the NNF one, the generalization does not lead to a
ing (CD), conjunction (‚àßC), disjunction (‚à®C) and forgetting
                                                      complexity shift w.r.t. the basic queries under consideration
(FO). Let us explain how to state related queries and transfor-
                                                      in [Darwiche and Marquis, 2002]. Note that we could also de-
mations in the VNNF framework, and point out some addi-
                                                      Ô¨Åne notions of full entailment and full equivalence and show
tional ones which make sense in this more general setting.
                                                      the corresponding decision problems coNP-complete.
Full consistency/validity If we consider  as the norm, we Let us now focus on transformations. Three transfor-
get very strong notions of consistency/validity: œÜ is fully con- mations are mainly to be considered; conditioning (com-
                   x   val(œÜ)(x)=      œÜ
sistent iff there exists s.t.          and  is fully  pute a VNNF representing val(œÜ)z), ‚äó-combination (com-
              x val(œÜ)(x)=
valid iff for each ,         .                        pute a VNNF representing val(œÜ1)‚äóval(œÜ2)) and ‚äó-variable
Partial consistency/validity On the contrary, one may con- elimination (compute a VNNF representing val(œÜ)[y,‚äó] =
sider every value of E except ‚ä• as the norm, and this leads to val(‚äóyœÜ), or more generally val(‚äóYœÜ)).
the following notions of partial consistency and partial valid- The case of ‚äó-combination is obvious since œÜ1 ‚äó œÜ2 is a
ity: œÜ is partially consistent iff there exists x s.t. val(œÜ)(x)  VNNF and represents val(œÜ1) ‚äó val(œÜ2). If the representa-
‚ä• and œÜ is partially valid iff for each x, val(œÜ)(x) ‚ä•. tion context is tractable, then each ‚äó-combination is in linear
                                                      time. If œÜ is a VNNF, then a VNNF representing val(œÜ)z can
Optimal satisfaction More interesting in practice is the no-                               œÜ
tion of optimal satisfaction, that looks for best assignments; also be obtained in linear time in the size of . It is enough to
                                                                                    œÜ
this query is typically useful when VNNFs encode prefer- revise the assignment associated to :
ences or plausibility degrees and calls for optimization:given DeÔ¨Ånition 6 (conditioning a VNNF) Given a VNNF œÜ,we
a VNNF  œÜ, Ô¨Ånd x and a ‚àà E such that val(œÜ)(x)=a and denote œÜz the VNNF obtained by replacing in the label of
such that there is no y such that val(œÜ)(y)  a. We thus each leaf, the Y -assignment y by y ‚ó¶z, the Y ‚à™ Z-assignment
search for a non-dominated solution. When  is a total order, which coincides with y on each variable from Y and with z
this is equivalent to classical maximization. The associated on each variable from Z \ Y .
decision problem (deciding whether a value is optimal) con-
                              a ‚àà E            œÜ a      It can be easily checked that œÜz represents the restriction
sists in determining whether, given and a VNNF  ,       val(œÜ)   z       val(œÜ )=val(œÜ)
is the value taken by œÜ for some non-dominated solution. of    by , i.e. that  z         z. That is why we
                                                      call œÜz the conditioning of œÜ by z.
                                             a ‚àà E
Counting  extends easily from NNF to VNNF: Given        ‚äó-variable elimination generalizes the transformation
           œÜ          x           val(œÜ)(x)=a
and a VNNF  , how many  are such that          ?      known as forgetting in the NNF case. In contrast to the pre-
Evaluation of a quantiÔ¨Åed form The extended notion of vious transformations, it can be very expensive: at each elim-
quantiÔ¨Åcation naturally leads to the problem of evaluating ination step, the size of the current VNNF œÜ may increase
a (closed and polite) Q-VNNF. As a decision problem, this in a non-constant way (the size of x‚ààdom(x) œÜx can be
can be written as determining whether val(Œ¶)  a. This |dom(x)| larger than the size of œÜ). Thus, applying the def-
query is of great importance in many settings: in the NNF inition directly would lead to an exponentially larger VNNF,
one, this query generalizes the famous PSPACE-complete unless a bounded number of variables has to be eliminated.
problem called QBF. QuantiÔ¨Åcation also makes sense when
E = {0, 1}. When  is a total order, evaluating a Q-VNNF 5 Determinism, Decomposability, Decision
is a way to achieve optimization (Ô¨Ånd the best value of œÜ
amounts to evaluating max XœÜ). The relationship between   and Read-Once
optimization and quantiÔ¨Åed forms is less obvious when par- The previous sections have shown the VNNF framework
tial orders are considered (the identiÔ¨Åcation of an operator en- quite general. However, every query under consideration, if
coding non-domination is not an easy problem and may have it is no more difÔ¨Åcult than in the Boolean case, is intractable
no solution; for instance, computing a non-dominated value under the standard assumptions of complexity theory. An im-
for a semiring CSP represented by a VNNF œÜ is not equiva- portant issue is thus to deÔ¨Åne restrictions on the VNNF lan-
lent to evaluate the quantiÔ¨Åed one ‚à®XœÜ).              guages allowing efÔ¨Åcient queries and transformations.

                                                IJCAI-07
                                                   363  In the NNF framework, a few properties, namely decom- 5.2 Determinism
posability, determinism, decision and read-once are sufÔ¨Åcient A second important property in the NNF framework is de-
to achieve many of them in polynomial time. We shall see that terminism. More than a property of logical exclusion, it is
a third one is valuable in the VNNF framework, namely dis- linked to the existence of a neutral element for ‚äó:
tributivity. The key point is that it enables efÔ¨Åcient ‚äó-variable
                                                      DeÔ¨Ånition 9 (determinism) An internal node N in a VNNF
elimination, which is an important transformation for several œÜ                y ‚àà dom(vars(N))
issues, including the optimization one.                 is deterministic iff for each          , there is at
                                                      most one M ‚àà Children(N) such that val(œà)(y) = eop(N),
5.1  Distributivity and decomposability               where œà is the VNNF rooted at M.
The space explosion inherent to a direct application of ‚äó- DeÔ¨Ånition 10 (d-DVNNF) d-DVNNF is the class of all VN-
variable elimination in the general case does not necessarily NFs in which each internal node is either simply decompos-
occur; especially, it can be limited when some of the chil- able or deterministic.
      œÜ                           x
dren of do not depend on the variable to be eliminated. As to d-DVNNF, the main result is:
Thus, in the DNNF case, at most one child of each ‚àß node
may depend on the variable to be forgotten. Actually, in ad- Proposition 6 The restrictions of full validity and partial
dition to independence, a further property is implicitly used validity on d-DVNNF are in P.IfœÜ is a d-DVNNF, then
in the NNF framework for ensuring polytime forgetting, and counting can be achieved in time O(|E| + |œÜ|).
it has to be made explicit in order to be extended to VNNF:
the distributivity of ‚àß over ‚à®. The impact of distributivity 5.3 Decision diagrams
on variable elimination in valuation algebras is known for a Let us now focus on other properties that prove useful for
while (see e.g. [Shenoy and Shafer, 1988]) and requiring it is deÔ¨Åning another interesting fragment of VNNF: the set of all
not so demanding in many representation contexts.     decision diagrams. We Ô¨Årst need a number of deÔ¨Ånitions:
DeÔ¨Ånition 7 (‚äó-distributivity) A VNNF œÜ ensures ‚äó-    DeÔ¨Ånition 11 (literals) A literal on x ‚àà X is a function f
distributivity iff for any  labelling an internal node in œÜ, whose scope is {x}. LX is the set of all the literals that can
 distributes over ‚äó: ‚àÄa, b, c ‚àà E : a  (b ‚äó c)=     be built on variables from X.
(a  b) ‚äó (a  c)
               .                                        By extension, we shall also call literals the leaves labeled
Proposition 3                                         by literals.
  ‚Ä¢ Any VNNF w.r.t. any representation context ensures ‚äó- DeÔ¨Ånition 12 (assignment nodes) An assignment node N
    distributivity for ‚äó = ‚à® and for ‚äó = ‚àß.           on x ‚àà X in a VNNF œÜ is a node of the form l ‚äó Œ±, where l is
                                                                x    ‚äó              E
  ‚Ä¢ Any VNNF w.r.t. any representation context where  is a literal on and is a t-norm on .
                      ‚äó               ‚äó =  max        Two assignment nodes N1 and N2 on x ‚àà X are exclusive
    a total order ensures -distributivity for  and                          f     f                 ‚àÄx ‚àà
    for ‚äó = min.                                      iff their respective literals 1 and 2 are exclusive, i.e.,
                                                      dom(x), either f1(x)=‚ä• or f2(x)=‚ä•.
                                                ‚äó
  We  are now  ready  to deÔ¨Åne  the fragment of   -                          N           l ‚äó Œ±       l
decomposable VNNFs:                                     In any assignment node of the form     where  is a
                                                      literal on x one may assume without loss of generality that Œ±
DeÔ¨Ånition 8 (‚äó-decomposability) Let œÜ be a VNNF:      is not a literal (a literal f can always be replaced by the as-
  ‚Ä¢ A node N  of œÜ is simply decomposable iff for each signment node f ‚àß). Then dvar(N) can denote the variable
    Ni,Nj  ‚àà Children(N),  vars(Ni) ‚à© vars(Nj)=‚àÖ      x and tail(N) the formula Œ± in a non-ambiguous way.
         i = j
    when     .                                        DeÔ¨Ånition 13 (decision nodes) A decision node N on x in a
  ‚Ä¢ A node N of œÜ is ‚äó-decomposable iff it is simply decom- VNNF œÜ is a node of the form N1  ... Nm where all the
    posable and op(N) is distributive over ‚äó.         Ni are assignment nodes on the same variable x and  is a
                                                                 E  N
  ‚Ä¢ œÜ is ‚äó-decomposable iff each of its (internal) nodes N t-conorm on . is exclusive iff its assignment nodes are
    is ‚äó-decomposable when op(N) = ‚äó. ‚äó-DVNNF is the pairwise exclusive.
    class of all the ‚äó-decomposable VNNFs.            DeÔ¨Ånition 14 (linear node) A node N is linear iff at most
  As to ‚äó-decomposability, the main result is:        one of its children is not grounded.
Proposition 4 ‚äó-DVNNF is linearly closed for ‚äó-variable Note that leaves are linear nodes. We are now ready to
elimination, i.e., there exists a linear time algorithm for com- deÔ¨Åne the language of decision diagrams:
puting a ‚äó-DVNNF equivalent to ‚äóYœÜwhen œÜ ‚àà‚äó-DVNNF     DeÔ¨Ånition 15 (decision diagrams) A decision diagram is a
and Y ‚äÜ X.                                            VNNF in which each internal node is either an exclusive de-
  This generalizes the result of tractability of DNNF for the cision node or a linear node.
forgetting operation. It moreover implies that the optimiza- Two particular subclasses of decision diagrams are worth-
tion of any VNNF the nodes of which are either max nodes while noticing, the read-once ones and the ordered ones:
or decomposable nodes is tractable.                   DeÔ¨Ånition 16 (read-once and ordered decision diagrams)
Proposition 5 The restrictions of full consistency, partial ‚Ä¢ A decision diagram œÜ is read-once iff for any assignment
consistency and optimisation on max-DVNNF are in P.       node N in œÜ, dvar(N) does not occur in tail(N).

                                                IJCAI-07
                                                   364