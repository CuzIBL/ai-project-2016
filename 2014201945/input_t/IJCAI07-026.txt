                 A Dynamic Approach to MPE and Weighted MAX-SAT
                             Tian Sang1,PaulBeame1, and Henry Kautz2
                          1 Department of Computer Science and Engineering
                             University of Washington, Seattle, WA 98195
                                   {sang,beame}@cs.washington.edu
                                   2 Department of Computer Science
                             University of Rochester, Rochester, NY 14627
                                        kautz@cs.rochester.edu

                    Abstract                            The success of modern complete SAT solvers has inspired
                                                      a number of researchers to develop improved complete MAX-
    The problem of Most Probable Explanation (MPE)    SAT algorithms. Recent developments include using unit
    arises in the scenario of probabilistic inference: propagation for strong bound computation [Li et al., 2005;
    ﬁnding an assignment to all variables that has the 2006]; adapting local consistency methods developed for
    maximum  likelihood given some evidence. We       CSP to MAX-SAT   [de Givry et al., 2003]; and using fast
    consider the more general CNF-based MPE prob-     pseudo-Boolean solvers to check the optimality of MAX-SAT
    lem, where each literal in a CNF-formula is asso- bounds [Aloul et al., 2002].
    ciated with a weight. We describe reductions be-
    tween MPE and weighted MAX-SAT, and show            In probabilistic reasoning, the problem of Most Probable
    that both can be solved by a variant of weighted  Explanation (MPE) is to ﬁnd an assignment to all variables
    model counting. The MPE-SAT algorithm is quite    that has the maximum likelihood given the evidence. Exact
    competitive with the state-of-the-art MAX-SAT,    methods for MPE on probability distributions represented by
    WCSP, and MPE solvers on a variety of problems.   Bayesian networks include well-known methods such as the
                                                      Join Tree algorithm [Jensen et al., 1990], as well as a recent
                                                      branch-and-bound algorithm, AND/OR Tree Search [Mari-
1  Introduction                                       nescu and Dechter, 2005]. Since solving MPE exactly is NP-
Constraint Satisfaction Problems (CSP) have been the subject Hard, local search algorithms have been introduced for ap-
of intensive study; many real-world domains can be formal- proximation [Park, 2002]. In this paper, we consider MPE
ized by CSP models and solved by either complete or incom- on CNF formulas with weighted literals, where the goal is to
plete reasoning methods. Beyond classic CSP, where a solu- ﬁnd a solution with maximum product or sum of its literal
tion must satisfy all hard constraints, some CSP models are weights. This CNF-based MPE problem is strictly more gen-
capable of handling both hard and soft constraints. The def- eral than MPE for discrete Bayesian networks, because any
inition of constraints and the measurement of the quality of discrete Bayesian network can be converted to a CNF with
a solution vary from model to model, and the goal is usually weighted literals whose size is linear in the size of conditional
to ﬁnd a best solution to the constraints, rather than simply probability tables (CPTs) of the network [Sang et al., 2005b].
a solution. For example, the constraints can be associated MPE on CNF can be viewed as a special case of Weighted
with probability, cost, utility, or weight; the goal can be to Model Counting (WMC) [Sang et al., 2005b], and is likely
minimize costs of violated constraints, or to maximize the easier than WMC because we may apply branch-and-bound
likelihood of a variable assignment, etc. However, all ﬁt in based pruning techniques to reduce the search space. We
a general framework for soft constraints, namely, semi-ring choose Cachet [Sang et al., 2004], a state-of-the-art model
based CSPs [Bistarelli et al., 1997]. In this paper, we focus counting system, as a platform on which to build our
on two speciﬁc models: MPE and weighted MAX-SAT.      MPE solver, and we extend pruning techniques for sub-
  MAX-SAT extends SAT to the problem of ﬁnding an as- problems with components. As a result, we present MPE-
signment that maximizes the number of satisﬁed clauses, in SAT, a decomposition-based branch-and-bound algorithm
case the formula is unsatisﬁable. Weighted MAX-SAT ex- that works on top of WMC and prunes the search space ef-
tends MAX-SAT by adding a weight to each clause, with fectively. Furthermore, we are able to use the dtree algorithm
the goal of ﬁnding an assignment that maximizes the sum of [Huang and Darwiche, 2003; Darwiche, 2002] to boost the
of weights of satisﬁed clauses. MAX-SAT and weighted  performance on problems with good decomposability.
MAX-SAT problems are solved by either incomplete local  In general, MPE and weighted MAX-SAT illustrate two
search methods or complete branch-and-bound based exhaus- complementary ways of representing soft constraints: either
tive search. For most MAX-SAT problems, local search  having weight on variables or having weight on constraints
methods exhibit better speed and scaling than complete meth- (clauses). Although they have apparently different represen-
ods. Local search methods, unfortunately, do not provide a tations of weight and goals, they can be converted to each
proof that the returned solution is optimal.          other by adding auxiliary variables or clauses, possibly at

                                                IJCAI-07
                                                   173some loss in efﬁciency. In addition to describing these re- clause. Not surprisingly these two representations are equiv-
ductions, we show how to formulate CNF-based MPE as an alent in that they can be directly converted to each other.
iterative pseudo-Boolean satisﬁability (PBSAT) process.
                                                      MPE to weighted MAX-SAT
  In our experiments we compare our MPE solver MPE-SAT
with other state-of-the-art complete MPE/MAX-SAT solvers We give a simple conversion for MPE on CNF to weighted
as well as a pseudo-Boolean solver on a variety of MPE and MAX-SAT, which is different from the encoding in [Park,
MAX-SAT problems. Our approach is quite competitive on 2002] translates MPE on Bayesian Networks to weighted
most problems and is signiﬁcantly faster than each of the MAX-SAT. Assuming the combination operator is +,
other solvers on at least one of the classes of benchmarks. • for each literal in MPE, a unit clause is added with
                                                          weight equal to the weight of the literal.
2  MPE and Weighted MAX-SAT                             • all original clauses in MPE are assigned an “inﬁnite”
                                                          weight, which is a number chosen to be at least as large
The MPE problem originated in research on Bayesian net-   as the sum of the weights added in the previous step.
works, one of the most popular graphical models. A Bayesian
network is a DAG, where each source node has a prior proba- Since all original clauses have an inﬁnite weight, any op-
bility distribution on its values and each non-source node has timal solution in weighted MAX-SAT must satisfy them and
a Conditional Probability Table (CPT) specifying the proba- maximize the sum of weights of satisﬁed unit clauses, which
bility distribution of its values given the values of its parents. obviously maximizes the sum of literal weights in MPE and
Most Probable Explanation (MPE) is the problem of ﬁnding therefore is an optimal solution in MPE as well, and vice
a complete assignment of values to nodes that has the max- versa. The converted formula has a mixture of hard and soft
imum likelihood given some node values as evidence. The constraints, which is a challenge for exact weighted MAX-
likelihood of a complete assignment is the product of the cor- SAT solvers: to be efﬁcient, they must take advantage of the
responding entries in the conditional probability tables and hard constraints.
the prior probabilities. To solve MPE exactly, one can ei- Weighted MAX-SAT to MPE
ther compile the Bayesian network into a junction tree and
then propagate the evidence [Jensen et al., 1990],orper- Givry et. al. [2003] described a Pseudo-Boolean encoding for
form a branch-and-bound search, e.g., AND/OR tree search MAX-SAT. Although that does not explicitly refer to MPE,
[Marinescu and Dechter, 2005]. Alternatively, one can con- it can be modiﬁed for MPE by adding proper weights. Our
vert MPE to weighted MAX-SAT and solve it by any local conversion is as follows:
search algorithm [Park, 2002].                          • for every variable x in weighted  MAX-SAT, let
  We begin with some deﬁnitions:                          weight(x)=weight(¬x)=0.
Deﬁnition 1 A CNF formula with weighted literals is a CNF • for every clause ci in weighted MAX-SAT, an auxiliary
formula plus a function weight that maps literals to real- literal ¬yi is added to ci, with weight(¬yi)=0and
valued non-negative weights.                              weight(yi)=weight(ci).
Deﬁnition 2 Given a combination operator ⊕ deﬁned on the
                                                        While the original formula for MAX-SAT may be unsat-
reals, the problem of MPE on CNF formulas with weighted
                                                      isﬁable, the converted formula is guaranteed to be satisﬁable
literals is to ﬁnd a complete satisfying assignment s that has
                                                      because one can always obtain a trivial solution by setting all
the maximum ⊕iweight(vi),wherevi is either the positive
                                                      auxiliary y variables to false. When the combination operator
or negative form of the ith variable in s. To be convenient, we
                                                      is ﬁxed to sum, solving MPE on the converted formula ﬁnds a
also deﬁne the inverse operator . MPE of an unsatisﬁable
                                                      solution with a maximum sum of weight of y variables, which
CNF formula is deﬁned to be 0.
                                                      is equivalent to maximizing the sum of weights of satisﬁed
  This CNF-based MPE can represent Bayesian-network-  clauses in weighted MAX-SAT. This encoding does not add
based MPE because there are linear reductions from Bayesian any clause, but needs as many auxiliary variables as the num-
                                        [
networks to CNF formulas with weighted literals Sang et al., ber of clauses. The inﬂated number of variables makes solv-
                              ]                  ⊕
2005b; Chavira and Darwiche, 2005 . Practically, setting ing MPE more difﬁcult, especially since auxiliary variables
to arithmetic + or × (then  is either − or /) sufﬁces our
                     ×                                make every clause trivially satisﬁable and thus unit propaga-
purposes . For example, is used for likelihood-originated tion and conﬂict-driven learning become unavailable.
MPE and + is used for weighted MAX-SAT-originated MPE.
In the rest of the paper, we will use the short term MPE for MPE and Pseudo-Boolean SAT
“MPE on CNF formulas with weighted literals”, when there Since the encoding in [de Givry et al., 2003] converts MAX-
is no confusion.                                      SAT to Pseudo-Boolean SAT and (weighted) MAX-SAT and
  The problem of weighted MAX-SAT on a CNF formula is MPE are equivalent, we observe that there is a close relation-
to ﬁnd an assignment that has the maximum sum of weights ship between MPE as Pseudo-Boolean SAT as well.
of all clauses satisﬁed by that assignment. When every weight Deﬁnition 3 Given a CNF formula φ and a set C of linear
is 1, weighted MAX-SAT reduces to MAX-SAT.            constraints over variables in φ, Pseudo-Boolean SAT (PB-
  Both MPE and weighted MAX-SAT optimize a metric of  SAT) is to ﬁnd a total assignment that satisﬁes both φ and
the weight, the only difference is that MPE has a weight on linear constraints in . A linear constraint has the form
                                                      n                C
each literal and weighted MAX-SAT has a weight on each  i=1 aivi ≥ d where vi is a variable that takes value 0 or

                                                IJCAI-07
                                                   1741, ai and d are real-valued constants and n is the number of Algorithm 2 MPE-SAT
variables.                                            MPE-SAT(φ, lb) // returns MPE of CNF formula φ
  We show how to convert a likelihood-based MPE to an  if φ is empty, return optimal value of unassigned vars
iterative PBSAT process. In the context of likelihood, the if φ has an empty clause, do nogood learning and return 0
combination operator ⊕ becomes ×, and a variable vi has do dynamic component detection: solve each separately
weight(vi)=pi  and weight(¬vi)=1−    pi. Without loss  do cache lookup: reuse previously computed values
of generality, we assume 0 <pi < 1, otherwise if pi =0(1) do dynamic bounding:ifE(φ) ≤ lb return 0 // pruning
we solve the simpliﬁed formula with vi instantiated to 0 (1). select an unassigned literal v ∈ φ by branching heuristics
The MPE goal is to ﬁnd a complete satisfying assignment that lresult = MPE-SAT(φ|v=0,lb weight(¬v))
maximizes                                              update lb according to lresult
                                                                     |      
                               pi  xi                  rresult = MPE-SAT(φ v=1,lb weight(v))
      pi    (1 − pi)=       (     )     (1 − pi).      result = Max(lresult ⊕ weight(¬v), rresult ⊕ weight(v))
                             1 − pi
  xi=1  xi=0              i           i                do caching: AddToCache(φ, result)
     
                                                       return result
Since  i (1 − pi) is a constant and log is an increasing
function, this is equivalent to maximizing
                     x    
                 pi   i             pi                3.2  Branch-and-Bound and Decomposition
       log [  (  −   ) ]=     log ( −   )xi.
            i  1   pi       i     1   pi              Branch-and-bound is the underlying mechanism for most ex-
This linear expression can be used as the left side of a haustive search algorithms that ﬁnd an optimal solution. The
linear constraint in PBSAT, but we still need to ﬁgure branch-and-bound algorithm maintains a global best solution
out what bound d to put on the right side. By deﬁni-  found so far, as a lower bound. If the estimated upper bound
tion of MPE, we know that the optimal value must be in of a node is not better than the lower bound, the node is
   n
[0,  i=1 Max(pi, (1 − pi)) ]. Now we can iteratively search pruned and the search continues with other branches.
for the bound d using binary search. At each step when d is Previous research has shown that decomposition and
set, we solve PBSAT with a single linear constraint   caching techniques are critical for such exhaustive search to
              
                        pi                            be efﬁcient [Darwiche, 2002; Bacchus et al., 2003; Sang et
                  log (    )xi ≥  d.                  al., 2004; Marinescu and Dechter, 2005]. However, with dy-
                      1 − pi
                i                                     namic decomposition the simple form of branch-and-bound
In this way, we can get d arbitrarily close to the optimal value must be modiﬁed. During the search, a problem may decom-
in a bounded number of steps.                         pose into several independent sub-problems (components)
                                                      that, for efﬁciency, one would like to analyze separately. The
3  Algorithms and the Implementation                  branch-and-boundalgorithm must include a way of allocating
                                                      portions of the global bounds to the individual components.
In this section, we ﬁrst examine a simple MPE algorithm and
then show how to enhance it with some advanced techniques. 3.3 MPE-SAT
3.1  DPLL for MPE                                     To address the above issues, we develop MPE-SAT, a
The na¨ıve Algorithm 1 is a simple modiﬁcation of the classic new decomposition-based branch-and-bound algorithm with
DPLL search. First if the formula is empty (already satisﬁed), dynamic decomposition and caching. MPE-SAT extends
DPLL-MPE returns the optimal value (e.g., sum or product) DPLL-MPE with the following function blocks. Since there
of weights of unassigned variables, which becomes part of the are a number of similarities with the related AND/OR tree
current value; if the formula is UNSAT, DPLL-MPE returns search algorithm [Marinescu and Dechter, 2005],webrieﬂy
0 by deﬁnition; otherwise it selects a variable to branch, re- compare our methods with that algorithm.
cursively solves each branch and then returns the best value, Dynamic Component Detection A connected component
which is the better one found in the two branches.    detection is performed dynamically for every non-trivial φ
  Unlike DPLL for SAT where the search halts when a SAT in the search. Since components of φ are independent sub-
leaf is found, DPLL-MPE performs an exhaustive search over problems with disjoint variables, they are solved separately
all possible SAT leaves for the optimal value. It can be very and then their results are combined to get the result for φ
slow without proper pruning, and that is why branch-and- (though Algorithm 2 does not show details of these obvi-
bound algorithms are widely used for many similar optimiza- ous steps due to space limitation). (In AND/OR tree search,
tion tasks including MAX-SAT and weighted CSP.        components are determined statically using the pseudo tree
                                                      constructed before the search.)
                                                        Caching and Cache lookup  When the value of a com-
Algorithm 1 DPLL-MPE                                  ponent is known, the component with its value is stored in
DPLL-MPE(φ)  // returns MPE of CNF formula φ          a hash table (caching) for later reuse (cache lookup), which
 if φ is empty, return optimal value of unassigned variables avoids repeated computation. A component to store can be
 if φ has an empty clause, return 0                   its corresponding clauses or a short signature of the clauses to
                           ∈
 select an unassigned variable v φ to branch          save space. Even when the exact value of a component is un-
 return Max(DPLL-MPE(φ|v=0) ⊕ weight(¬v) ,
                       |    ⊕                         known because of pruning in its subtree, a proper bound can
           DPLL-MPE(φ   v=1)  weight(v))              be cached for reuse too. The purpose of this bound caching

                                                IJCAI-07
                                                   175is to save the partial work already done for a component that Component Processing Components are processed in a
is to be pruned. A cached bound can be used as an estimated depth-ﬁrst order and the search stays within a component un-
upper bound of the component for pruning and it is updated til it is ﬁnished. This component processing strategy is well
whenever a tighter bound or the exact value of the same com- suited to dynamic bounding for sibling components, but it
ponent is found. (AND/OR tree search caches the context is different from that for model counting. In Cachet, once
instead of the component itself.)                     a component is found SAT during search, the work on the
  Dynamic Bounding The parameter lb, initially ∞ or given rest of that component will be temporarily suspended and an
by local search, is the lower bound for φ when φ is created. unexploited component (if available) will be processed next.
E(φ) is an upper bound estimation of the true value of φ, That strategy works well for ﬁnding UNSAT components as
which can be simply ⊕v∈φMax(weight(v),weight(¬v)),a   soon as possible, which is good for model counting; but in
cached bound or a result by special computation (as described MPE-SAT we want to continue working on a SAT component
in section 3.4). If E(φ) is at most lb, the current branch is until it is fully done, because the known value of a ﬁnished
pruned for it will not yield a better result. Note that for a component yields better lower bounds for its siblings when
subproblem, lb for its right branch may be better than lb for they are checked for pruning.
its left branch, because solving the left branch may improve Optimal Solution Retrieval In order to get the optimal
the previous lb. When a sub-problem (component) is being solution as well as the optimal value, we need to maintain
solved, only local information is needed for pruning; i.e., the all partial solutions associated with all the active components
bound from its parent and the bounds from sibling compo- on the current search path, from which we can compose the
nents, which are updated dynamically. A parent’s lb is imme- optimal solution at backtracking. The optimal partial solution
diately broken and passed into its sub-problems for pruning of a component must be cached together with its exact value.
(top-down). For example, if sub-problem S splits into S1 and Branching Heuristics The dynamic branching heuristics

S2 then lbS1 = lbS  E(S2).andlbS2  =  lbS  E(S1).   for SAT and model counting such as VSIDS, VSADS and

However, since S2 is solved after S1, lbS2 should be dynam- EUPC [Moskewicz et al., 2001; Sang et al., 2005a] work well
ically updated with the exact value of S1 replacing E(S1). for MPE too. These heuristics aim at maximizing the effect
(AND/OR tree search uses dynamic bounding as well but col- of unit propagation or avoiding the infeasible search space by
lects bounds from sub-problems (bottom-up).)          learning from conﬂicts. However for MAX-SAT problems,
  Branching Heuristics Any dynamic heuristic good for we have found that the dtree-based semi-dynamic branch-
DPLL search will work, and it turns out that decomposition- ing heuristic [Huang and Darwiche, 2003; Darwiche, 2002;
based heuristics are often very useful (as discussed in section 2004] is often better, because in those problems unit propaga-
3.4). (AND/OR tree search uses the statically-constructed tions and conﬂicts that guide dynamic heuristics are no longer
pseudo-tree heuristic, which also aims at decomposition.) available whereas structural decomposition based heuristics
  Nogood Learning The well-known conﬂict-driven clause are affected less. The dtree program by [Huang and Dar-
learning technique for satisﬁability testing, e.g., [Zhang et al., wiche, 2003] computes a static variable group ordering based
2001], can be directly used for CNF-based MPE. Learned on dtree decomposition [Darwiche, 2002],whichisfed
clauses implicitly prune the infeasible search space. to MPE-SAT. The semi-dynamic branching heuristic makes
  Comparison  Since the top-down scheme passes the best choices by dynamic heuristic for variables in the same group,
known lower bound to a sub-problem once it is available, but prefers variables in a group with higher priority and the
MPE-SAT may examine fewer nodes than AND/OR tree      group priorities are determined statically by dtree. The time
does when pruning occurs. MPE-SAT beneﬁts from nogood for running dtree is usually insigniﬁcant compared to the time
learning that dynamically changes its variable ordering (with for solving the problem. A nice property of dtree is that after
VSIDS or VSADS heuristic), while nogood learning is likely each group of variables is instantiated (from high to low pri-
less useful for the static pseudo-tree variable ordering. The ority), the problem is guaranteed to decompose. However, if
dynamic component detection in MPE-SAT is more powerful a problem has a large tree-width, the sizes of the high priority
than the static detection in AND/OR tree search because the groups by dtree can be so large that the search space blows
latter may miss some decomposition due to dynamic effects; up before the problem decomposes.
however, the overhead of the former is much higher. Finally, Upper Bound Computation We are able to extend the
the more expensive component caching in MPE-SAT is more UP heuristic [Li et al., 2005] to weighted MAX-SAT in our
powerful than context caching in AND/OR tree search, be- solver. Computing an upper bound on the weight of the satis-
cause different contexts may lead to the same component. ﬁed clauses of formula φ is equivalent to computing a lower
                                                      bound on the weight of violated clauses of φ. The weight of
3.4  The Implementation                               violated clauses of φ can be estimated as follows:
The problem of model counting (counting the number of solu- CostLB =0
tions of a CNF formula) shares many features with MPE, both for each unit clause of φ
requiring exhaustive search. In DPLL-MPE if we replace the Simplify φ by setting the current unit clause to true
max operation by sum (and the optimal value of a SAT leaf is if there is an empty clause (conﬂict)
one) we will get a na¨ıve model counting algorithm. Using the increment CostLB by the minimum weight of the
weighted model counting system Cachet [Sang et al., 2004]   empty clause and the clauses for deriving it, and
as a platform, we have implemented the MPE-SAT algorithm    remove clauses for deriving the empty clause from φ
and the following to better support it.                 CostLB  is the lower bound of violated clauses at the end.

                                                IJCAI-07
                                                   176  We also adopt a trick from previous MAX-SAT solvers that    Problems #vars #clauses Toolbar PB2 MPE-SAT
                                                                ra   1236  11416  30    0.04  0.18
when the value of a known solution and the current estimated    rb   1854  11324   X    1.2   0.72
                                                                rc   2472  17942   X    10    3.9
value differ only by one, unit clauses are safely propagated. 2bitcomp6 252 766   17    5.5   0.21
                                                              2bitmax6 150  370    X    3.5   0.28
                                                               rand1  304   578    X    X     15
4  Experimental Results
                                                          Figure 2: MPE of circuit CNF and runtime in seconds.
We tested with both CNF-based MPE   and MAX-SAT.
The CNF-based MPE problems are either from  random            Problems #Node Induced width AoTree MPE-SAT
3-CNF or structured CNF formulas with random literal           75-12  144     19      20     0.47
                                                               90-15  225     23      412    0.1
weights (equivalent to weighted MAX-SAT), or trans-            75-15  225     25      X      0.56
lated from Bayesian networks (special because of the           90-25  625     41      X      5.5
                                                               90-30  900     47      X      68
ad-hoc Bayesian-network-to-CNF encoding). The MAX-
SAT problems are structured ones used in previous liter- Figure 3: MPE of grid Bayesian networks and runtime in seconds.
ature and fault diagnosis problems generated from stan-
dard circuit benchmarks that are challenging for many
solvers. More details of these problems can be found at The ﬁrst domain is MPE on satisﬁable random 3-CNF for-
www.cs.washington.edu/homes/sang/benchmarks.htm       mulas with random weights between 1 and 1000 on each pos-
  We used the following state-of-the-art solvers:     itive literal and 0 weight on each negative literal. The prob-
  Toolbar [de Givry et al., 2003; 2005] : an exact weighted lems were converted to weighted MAX-SAT via the encoding
CSP solver that integrates efﬁcient algorithms for maintaining in section 2 (introducing only positive unit clauses). Since we
                                                                                    ⊕
various levels of local consistency. It is a generic solver for use + as the combination operator for MPE here, a direct
weighted CSP and weighted MAX-SAT. We used version 3.0. translation to PBSAT is adding a linear constraint where the
  UP [Li et al., 2005] : an exact branch-and-bound MAX- weighted sum of all positive literals is at least a given bound.
SAT solver using unit propagation and distinguishing inde- In principle we should run PB2 iteratively to optimize this
pendent conﬂicts for powerful lower bound computation. bound, but we just set the bound as opt (for proving SAT)
                                                      and opt +1(for proving UNSAT), because PB2 is not efﬁ-
  MaxSatz [Li et al., 2006] : an exact branch-and-bound
                                                      cient enough on this domain. (The value of opt was that found
MAX-SAT solver extending UP  with sophisticated lower
                                                      by other solvers.) For MPE-SAT, we used the weight-based
bound computation techniques. Highly optimized for MAX-
                                                      dynamic heuristic, where variable selections with good unit-
SAT, it was the winner of the 2006 MAX-SAT evaluation.
                                                      propagated weights are preferred before a solution is found
      [               ]
  PB2  Aloul et al., 2002 : a pseudo Boolean SAT solver (to get a good bound early) and bad unit-propagated weights
that takes linear constraints. It can prove the optimality of are preferred afterwords (to get prunings early).
encoded MAX-SAT problems. Basically, an auxiliary vari- In Figure 1, each point represents the median runtime on
able is added for each clause and there is a linear constraint 100 instances. On the PB2 curve, the data point of ratio 2.6
limiting the sum of these added variables to the given bound. is actually a timeout (median > 600 seconds). Compared to
  AoTree [Marinescu and Dechter, 2005]: the AND/OR tree the other two, PB2 is very inefﬁcient at low ratios, frequently
implementation that works for MPE of Bayesian networks timed out. However, as the problem gets more and more
and weighted CSP.                                     constrained with ratio increasing towards 4.2, PB2 improves
  MPE-SAT: our solver that implements the MPE-SAT al- signiﬁcantly. MPE-SAT has a similar trend: it is about two
gorithm. It is for CNF-based MPE and weighted MAX-SAT. times slower than Toolbar at low ratios, but gains a dramatic
  All experiments were done on a Linux machine with 2.8 speedup at high ratios. Apparently at high ratios MPE-SAT
GHz Pentium 4 CPU and 4 GB memory, except that we ran and PB2 beneﬁt a lot from clause learning by the underlying
AoTree on a Windows machine with 2.8 GHz Pentium 4 CPU SAT engine, which prunes most infeasible search space. The
and 1.5 GB memory. The runtime cutoff is 600 seconds. curve of Toolbar is rather ﬂat before ratio 4.2. For low ratio
Since not all solvers apply to the same domains, for each do- under-constrained problems, Toolbar prunes the search space
main, we show the results only for the solvers that apply. very effectively using advanced bounding techniques; how-
                                                      ever, without nogood learning, it is not effective at pruning
              Random MPE (100 variables)              using the constraints and so does poorly on well-constrained
         1000
                                    mpe-sat
                                    toolbar           high ratio problems. This effect is ampliﬁed with 200 vari-
                                     pb2
          100                                         ables and ratio 4.2: Toolbar often cannot solve an instance in
                                                      an hour but MPE-SAT can solve it in a few seconds.
          10                                            Figure 2 shows the results of MPE on structured circuit

           1                                          CNF formulas with random variable weights. Clearly most
        time  (sec)                                   problems are easy to MPE-SAT but hard or non-solvable to
          0.1                                         Toolbar. We also ran PB2 with a na¨ıve binary search for the
                                                      optimal value. PB2 works ﬁne on all problems but one. It
          0.01
           1.8  2.2  2.6   3   3.4  3.8  4.2
                      clause/var ratio                appears that CNF-based MPE suits MPE-SAT and PB2 better
                                                      than Toolbar, which is optimized for weighted CSP.
    Figure 1: MPE of random 3-CNF (median runtime)      In Figure 3, we compared with AND/OR tree search on

                                                IJCAI-07
                                                   177