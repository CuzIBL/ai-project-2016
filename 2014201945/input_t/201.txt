     Splitting the atom: A new approach to Neighbourhood Interchangeability in 
                                     Constraint Satisfaction Problems 

                                James Bowen and Chavalit Likitvivatanavong 
                    Cork Constraint Computation Centre, University College Cork, Ireland 
                                           {j.bowen, chavalit}@4c.ucc.ie 

                        Abstract 

     We investigate interchangeability of values in 
     CSPs, based on an approach where a single value in 
     the domain of a variable can be treated as a combi•
     nation of "sub-values". An algorithm for removing 
     overlapping sub-values is presented. The resulting 
     CSPs take less time to find all solutions and yield a 
     more compactly-representable, but equivalent, so•         are merged because they, also, are NI. That the approach sur•
     lution set. Experimental results show that, espe-         passes NI can be seen by considering values e and / in Y. 
     cially in loose problems with large numbers of solu•      Values e and / are not NI because, while both e and / sup•
     tions, dramatic savings in search cost are achieved.      port (6, h) and (c, h), / also supports (6, i) and (c, i). How•
                                                               ever, we can split / into two fragments, one of which supports 
                                                               (6, h) and (c, h), while the other supports (6, i) and (c, i). The 
1 Introduction                                                 first fragment can be merged with e and the second can re•
While most CSP algorithm research is based on the assump•      main isolated. 
tion that only one solution to a CSP need be found, the cen•
tral idea in this paper is motivated by a requirement of certain 2 Background and Definitions 
interactive constraint-based applications: sometimes, before   We will use a cross-product representation (CPR) [Hubbe and 
making his next interactive decision, the user needs to know   Freuder, 1992] to denote sets of solutions to the star-graph 
all solutions to a sub-CSP. Thus, we need an approach which    CSPs that we must consider when transforming variable do•
will reduce the search cost of finding all solutions to a (sub- mains. For example, consider the star-graph centred at Y in 
)CSP and which will enable a more compact representation       Figure (ii). The set of solutions to this star-graph in which the 
of the complete solution set. Neighbourhood Interchange-       centre variable, Y, has the value can be represented by the 
ability (NI) [Freuder, 1991] of domain values suggests itself, following CPR:  
since merging NI values in a variable domain reduces both        We define an operator, called "commerge" (commonality 
thrashing during search and the complexity of enumerating      extraction and merge), on two CPR sets as follows. The op•
the solution set. Without loss of generality, we restrict our  erator extracts, from the two CPR sets, those solutions which 
attention here to binary CSPs, where the constraints involve   have common values for the leaf variables and merges the 
two variables.                                                 values for the centre variable. To compute the commerge 
   Our idea is based on a new approach to NI. Normally, each   of two CPR sets, the sets of values for the leaf variables are 
domain value is treated as atomic. Our idea is to "split the   combined using normal set intersection but the sets of values 
atom" - a domain value can be split into several "sub-values"  for the centre variable are combined using normal set union. 
so that interchangeable fragments from other values can then   We denote the commerge operator as Thus, for example, 
be merged to avoid duplicate search effort during the solving 
process.                                                         We define the "communion" of two CPRs as follows. Two 
   When the values in a domain have been split into frag•      CPRs can be communioned only if the CPRs differ from each 
ments, interchangeable fragments of different values can be    other in at most one of the cross-multiplied sets, which cannot 
merged. Figure (i) depicts a constraint network while (ii)     be the set for the centre variable. In the communion, all the 
shows the microstructure. Figure (iii) shows the result of     common cross-multiplied sets are unchanged, but the differ•
splitting and merging value fragments, resulting in smaller    ing leaf sets are subjected to ordinary set union. We denote 
domains for X and Y.                                           the communion operator as For example, the two CPRs 
  The approach subsumes NI, as can be seen in X where                                            can be communioned be•
b and c, which are NI, are merged; similarly, d and g in Y     cause they differ only in the right-most subsets which do not 


1366                                                                                                   POSTER PAPERS correspond to the centre variable; the communion of these 
two CPRs is  
   We also define a new form of subtraction, the "comminus" 
of two CPRs, as follows. One CPR can be comminused from 
another only if they have a common set for the centre variable. 
Given that provision, the comminus of two CPRs, denoted 
by is the same as subtraction. Note that the operator can 
result in a set of CPRs. Consider, for example, the result of 
subtracting (which contains only one solution 
to a star-graph) from (which contains four 
solutions). The difference between these two CPRs contains 
three solutions: In CPR form, this set of                     Theorem 1 If, after the domain of variable V\ has been 
three solutions needs two CPRs. That is, 
                                                              transformed, the domain of a neighbouring variable, V2, is 
                                                              also transformed, any subsequent attempt to transform the 
                                                              domain ofV1 will result in no change. 

3 Transforming CSPs                                           4 Experimental Results 

The procedure for transforming the domain of a single vari-   We tested the algorithm over randomly generated CSPs with 
able is stated in pseudocode below.                           eight variables and six values in each domain, varying den•
                                                              sity from 0.1 to 0.9 with 0.05 increment step, while tightness 
                                                              ranges from 0.1 to 0.8 with the same increment. For each 
                                                              parameter point, the number of constraint checks required 
                                                              to compute all solutions and the number of representations 
                                                              needed to express these solutions are evaluated, averaged over 
                                                               100 problem instances. The solver is based on MAC-3 with 
                                                              dom/deg variable ordering. The upper bound of the result 
                                                              is ten times the size of the variable's domain. 
                                                                 For the random problem generator, we use model B where 
                                                              density and tightness are fraction instead of probability. Since 
                                                              the transformation process requires arc-consistent CSPs, wc 
                                                              also ensure that every problem is arc-consistent by linking 
                                                              each value to at least one value for every constraint in order 
                                                              to guarantee support. 
                                                                 The results are shown in the above graph. While the trans•
                                                              formation cannot guarantee to reduce the number of con•
                                                              straint checks needed to compute all solutions to a CSP, it can 
                                                              produce huge savings. From the graph, we can see the method 
   The size of result could be very large if there are        works best for problems with low density or low tightness, as 
many fragments of CPRs, making it unlikely that the result•   either case will lead to a lot of CPR combination. In these 
ing CPRs can be compressed so that the resulting domain       cases the work needed for transformed CSPs is less than 1% 
is smaller than the original. Therefore we impose an upper    of the work needed for untransformed CSPs. In those prob•
bound on the size of if exceeds the up•                       lems where the transformation does not produce large sav•
per bound, transformation of the variable's domain is aborted. ings, its effect is usually harmless. Indeed, in the worst case 
This cutoff heuristic reduces the transformation time, making we have seen in the experimental data, which occurred only 
the algorithm practical even though the worst-case time com•  at a few data points, the number of extra constraint checks for 
plexity is exponential.                                       a transformed CSP is around 1 % more than for the untrans•
   The overall transformation process involves transforming   formed CSP. 
each variable domain, one by one, in some order. The or•
der in which variables are processed affects the result. As a References 
heuristic, we have chosen never to accept the result of trans•
forming a variable's domain if the result of the transformation [Freuder, 1991] Eugene C. Freuder. Eliminating inter•
is that the number of members in the domain is increased, and    changeable values in constraint satisfaction problems. In 
choose the variable whose transformation leads to the maxi•      Proceedings ofAAAl'91, pages 227-233, 1991. 
mum domain size reduction.                                    [Hubbe and Freuder, 1992] Paul D. Hubbe and Eugene C. 
                                                                 Freuder. An efficient cross-product representation of the 
3.1 Convergence                                                  constraint satisfaction problem search space. In Proceed-
                                                                 ings of AAA! '92, pages 421 -427, 1992. 
We only need to transform the domain of each variable once 
due to the following theorem: 


POSTER PAPERS                                                                                                      1367 