                   A Structure-Based Variable Ordering Heuristic for SAT 

                                       Jinbo Huang and Adnan Darwiche 
                                           Computer Science Department 
                                 University of California, Los Angeles, CA 90095 
                                           {jinbo, darwiche} @cs. ucla. edu 


                        Abstract                               behavior in which the SAT problem is recursively decom•
                                                               posed into smaller problems that are solved independently. 
     We propose a variable ordering heuristic for SAT,         The general concept is that while the initial SAT problem may 
     which is based on a structural analysis of the            not be decomposable, it can be broken into independent sub 
     SAT problem. We show that when the heuristic              problems after instantiating a certain number of variables that 
     is used by a Davis-Putnam SAT solver that em•             can be determined structurally. Hence, putting such a decom•
     ploys conflict-directed backtracking, it produces         posing set of variables first in the ordering leads to an early 
     a divide-and-conquer behavior in which the SAT            decomposition of the problem. The key, however, is that this 
     problem is recursively decomposed into smaller            process can be repeated recursively, allowing one to recur•
     problems that are solved independently. We dis•           sively decompose the SAT problem down to single clauses. 
     cuss the implications of this divide-and-conquer          The other key point which we establish analytically is that it 
     behavior on our ability to provide structure-based        is critical for the DP solver to employ conflict-directed back•
     guarantees on the complexity of Davis-Putnam              tracking for the suggested order to have this recursive decom-
     SAT solvers. We also report on the integration 
                                                               positional effect.1 
     of this heuristic with ZChaff— a state-of-the-art           By way of experimentation, we incorporated this technique 
     SAT solver—showing experimentally that it signif•         in the publicly available ZChaff program [ZChaff, URL] and 
     icantly improves performance on a range of bench•         tested both the original and modified programs on a range of 
     mark problems that exhibit structure.                     SAT benchmarks. Our results indicate a significant improve•
                                                               ment in speed on the majority of the instances. 
                                                                 The rest of the paper is structured as follows. We start with 
1 Introduction                                                 a brief review of DP solvers in Section 2. We then turn in Sec•
The class of Boolean satisfiability (SAT) problems has been    tion 3 to the proposed variable ordering heuristic, where we 
of perpetual interest to researchers in many areas of com•     define it formally in terms of a graphical model, known as a 
puter science. Although these problems have a potentially      dtree (decomposition tree). We then describe in Section 4 our 
exponential complexity, fresh techniques have continued to     integration of the new heuristic with ZChaff [ZChaff, URL], 
be proposed and implemented, allowing an increasing num•       and provide experimental results that illustrate its effective•
ber of (previously) intractable problems to be solved in rea•  ness. We then consider a theoretical analysis of the proposed 
sonable amounts of time.                                       ordering heuristic in Section 5, where we show that when 
                                                               coupled with conflict-directed backtracking, the proposed or•
   Most existing complete SAT solvers are based on the 
                                                               dering generates a behavior which is equivalent to a divide-
Davis-Putnam (DP) procedure [Davis and Putnam, 1960; 
                                                               and-conquer search algorithm that recursively decomposes 
Davis ct al, 1962], which formulates the SAT problem as 
                                                               the given SAT problem all the way to single clauses. This 
a systematic search problem in the space of variable instanti•
                                                               correspondence allows us to provide some guarantees on the 
ations, and uses depth-first search to find a solution. Various 
                                                               complexity of the resulting search, depending on the structure 
techniques are employed by DP solvers in an attempt to prune 
                                                               of the given SAT problem. We finally close in Section 6 with 
the search space, or to focus it on regions that promise earlier 
                                                               some concluding remarks. 
discovery of a solution. It has been noted that, among other 
things, the order in which variables are instantiated has a great 
effect on the resulting complexity of the SAT algorithm; see   2 Davis-Putnam (DP) Search 
[Li and Anbulagan, 1997] for example.                          We start by reviewing the basic DP search for the satisfiability 
   We propose a new variable ordering heuristic for SAT,       problem. As is customary, a propositional theory is expressed 
which is based on a structural analysis of the SAT problem.    in Conjunctive Normal Form (CNF). Recall that to satisfy a 
We show that when the suggested ordering heuristic is used 
by a DP solver that employs conflict-directed backtracking        'Sec [Bayardo and Pehoushek, 2000] for an example where (dy•
[Silva and Sakallah, 1996], it produces a divide-and-conquer   namic) decomposition is used, but in the context of model counting. 


SATISFIABILITY                                                                                                      1167  Algorithm 1 sat(Thcory : C) 
  1: if there is an inconsistent clause in C then 
  2: return false (unsatisfiablc) 
  3: if there is no uninstantiated variable in C then 
  4: return true (satisfiable) 
  5: select an uninstantiated variable v in C 

  6: return sat{C\v=true) V sat(C\v=false) 

propositional theory in CNF each of its clauses simultane•
ously has to be satisfied. We will use 
to denote our target theory having m clauses where C{ denotes           Figure 1: A dtree for a four-clause CNF. 
its zth clause. We will write to repre•
sent the theory obtained by replacing the occurrences of vari•
able v to true (false) in the theory C, Algorithm 1 provides   have disjoint sets of (uninstantiated) variables:  
a recursive description of the basic DP algorithm except that            and they are hence com•
it omits the use of unit propagation which we discuss later.   pletely independent sub-problems. Ordering one set of vari•
   This algorithm is often implemented iteratively instead of  ables before the other therefore seems a good strategy from 
recursively, where it explores the search space by instantiat• this point on. We have thus obtained a constraint on the order 
ing variables one at a time (we will call these instantiations of variables: variables are processed first, followed 

decisions and the corresponding variables decision variables). by and then 2 Note that and can each be re•
Each of these decisions is pushed onto the decision stack and  cursively broken up in a similar fashion, until all variables 
the theory is updated to reflect the new variable assignments. are partitioned into a sequence of groups, which serves as our 
When inconsistency is discovered in the theory it goes back    proposed variable ordering. Within each of these groups, the 
on the stack to the last decision whose variable has not been  algorithm is free to use any variable order. 
tried both ways, flips it, and proceeds therefrom. In case all   To generate such a variable group sequence we will need to 
previous decision variables have been tried both ways, it de•  specify how the theory C is to be partitioned into sub-theories 
clares the theory as unsatisfiablc. The theory is declared sat•   and , how the sub-theories in turn are to be partitioned, 
isfiable if all variables have been successfully instantiated, or and so on. A graphical model known as a dtree serves nicely 
if all clauses have been subsumed (satisfied by the current,   for this purpose, as it allows us to offer guarantees on the 
possibly partial, variable assignment).                        complexity of the resulting search [Darwiche, 2002]. 
   Note that there is no need to attempt both recursive calls on A dtree (decomposition tree) for a CNF C is a full binary 
Line 6 in case one of the calls succeeds. Hence, one opportu•  tree whose leaves correspond to the clauses of C\ see Fig•
nity for optimization is to first try the most promising disjunct ure 1. Each internal node represents a subset of C corre•
in Line 6. Note also that we did not specify how to choose the sponding to all the leaves under it; the root in particular rep•
next variable on Line 5. In fact, a different chain of decisions resents the original theory C. Such a tree naturally induces 
can often lead to a remarkable difference in complexity [Li    a recursive decomposition scheme, partitioning a theory into 
and Anbulagan, 1997].                                          two parts represented by the node's two children. 
   We describe in the next section a variable ordering heuris•   A number of properties can be defined for the nodes of a 
tic based on a structural analysis of the SAT problem. We      dtree [Darwiche and Hopkins, 2001]. 
then provide an experimental and a theoretical analysis of the 
heuristic in later sections.                                   Definition 3.1 The variables of an internal dtree node is the 
                                                               set of variables mentioned in the clauses represented by the 
3 A Variable Group Ordering                                    leaves under that node; the variables of a leaf node is the set 
                                                               of variables mentioned in the clause it represents. 
Recall that is our target propositional 
theory in CNF. We have alluded to our desire of decompos•      Definition 3.2 The cutset of an internal dtree node is the in-
ing C into disconnected components. However, if we simply      tersection of its children's variables, minus all its ancestors' 
split C into two arbitrary subsets and these two sub-          cutsets; the cutset of a leaf node is its variables minus all its 
theories will in general have some variables in common and     ancestors' cutsets.3 
hence not qualify as disconnected components. 
                                                                 Figure 1 depicts a dtree for a four-clause CNF theory. The 
  To overcome this difficulty we propose the following 
                                                               clauses are listed at the bottom below their corresponding 
method. Let and denote the sets of variables men•
                                                               leaves. The cutset is shown inside of each node. 
tioned in Ci and CR, respectively. We start the DP search on 
CNF C, but insist that it only make decisions on variables in      We assume the left-right order. Choice between the two orders 
          at this stage. If unsatisfiable is declared during   affords another opportunity for applying heuristics, but is beyond 
this process, we are done; otherwise all variables in          the scope of this paper. 

will at some point have been instantiated.                        3 A cutset is usually not defined for a leaf node in a dtree, but we 
  Observe that the resulting sub-theories now extend the definition here for convenience. 


1168                                                                                                     SATISFIABILITY    Recall that each dtree node t corresponds to a part of the  benchmarks. Our choice of SAT solver is ZChafT [ZChafT, 
CNF theory; hence the variables of a dtree node are simply     URL] as it has ranked first in the recent (2001 and 2002) SAT 
the variables of that part of the CNF theory; and the cutset   Competitions [SATEX, URL]. 
represents all variables that need to be instantiated before the Our additions and modifications to ZChafT consist of 1) 
two sub-theories become disconnected (assuming that all cut•   the package that implements dtree generation; 2) a separate 
sets of t's ancestors have been instantiated). The following   chunk of code that extracts a variable group ordering from 
two concepts will help formally state our proposed heuristic   the dtree; and 3) change to the ZChafT code such that the pro•
for ordering variables.                                        gram is given the variable group ordering as a second input 
Definition 3.3 A variable group ordering of set V is a parti•  (the first being the CNF) and forced to select variables from 
tion of variables V into an ordered sequence of subsets.       the same group, one group at a time following the specified 
                                                               group order. Within the same variable group, ZChaff is left 
   With respect to the set of variables in Figure 1, the follow• to use its own heuristic, known as the Variable State Inde•
ing is a possible variable group ordering:                     pendent Decaying Sum decision heuristic [Moskewicz et ai, 
     which dictates that variables should be consid•           June 2001]. The new code is in the form of add-on and re•
ered before and before. Note that a strict                     placement files that compile with the original ZChafT package 
variable ordering is a special case of variable group ordering to produce the modified program; it is available for download 
in which all groups have size one.                             at http://reasoning.cs.ucla.edu/dtree.sat/. 
Definition 3.4 The variable group ordering (v.g.o.)              Our experiments were carried out on a Redhat system 
induced by a dtree is one obtained recursively as fol-         with a 930MHz CPU and 700MB of memory. The origi•
lows: output the cutset of the root; output the v.g.o. of its left nal ZChafT program and its modified version, which we call 
child; output the v.g.o. of its right child; discard empty sets. Dtree-ZChafT, were run on the same sets of CNFs. We re•
                                                               port in Table 1 the comparative performance of these two 
   Our proposed variable ordering scheme can now be stated 
                                                               programs. Note that only those instances that were solved 
as simply the variable group ordering induced by the dtree. 
                                                               by both programs are included. Instances on which Dtree-
The variable group ordering induced by the dtree in Figure 1, 
                                                               ZChafT succeeded but ZChafT ran out of memory are reported 
for example, is  
                                                               in Table 3; the reverse case did not happen for the given test 
   So far we have not discussed how dtrees are to be con•
                                                               suite. Some of our benchmarks are from [Aloul, URL]; others 
structed. There are obviously many distinct dtrees for any 
                                                               are from the SATL1B website [SATLIB, URL]. 
nontrivial CNF theory. To reduce the complexity of the SAT 
algorithm we have adopted a heuristic that calls for relatively  The times shown are in seconds and each represent the total 
balanced dtrees with small cutsets. A good balance ensures a   time for all instances in the group. We generated two dtrees 
near-logarithmic tree height, which allows the recursive de•   per CNF and chose the one with smaller width4. During the 
composition to finish faster. And smaller cutsets lead to min• generation of each dtree, we repeated each hypergraph par•
imizing the number of cases that may need to be considered     titioning step twice and chose the smaller cut. The reported 
for each decomposition. Hence, both of these strategies will   "Dtree Time" includes the time to thus obtain a dtree and that 
help reduce the overall complexity.                            to compute a variable group ordering from it. Adding "Dtree 
   To generate dtrees with the above properties, we employ     Time" and "Dtree-ZChafT Time" gives the actual running 
the same hypergraph partitioning technique as described in     time of Dtree-ZChafT, which is compared with that of the 
[Darwiche and Hopkins, 2001]. Our hypergraph for a CNF         original ZChafT. Figures in bold highlight the benchmarks on 
theory C is constructed by having a node for each clause in    which the proposed ordering lead to an improvment. Scores 
C and having a hyperedge for each variable in C connect•       on a single-instance basis are shown in the last column. Con•
ing all nodes (clauses) that mention the variable. The hyper•  sidering whole groups, we observe that Dtree-ZChafT leads 
graph partitioning tool recursively partitions the set of nodes to improvement on seven out of the ten groups by a factor of 
into two (balanced) parts while attempting to minimize the     between 1.1 and 7.8. Considering individual instances, it also 
number of edges across. A small number of crossing edges       leads to improvement on the majority of them. For a more de•
translates into a small number of variables shared between     tailed picture, we have included in Table 2 individual results 
two sets of clauses. Hence the resulting dtree is expected to  on a select number of typical instances from each group. 
have relatively small cutsets. The degree of balance is con•     We would like to point out that most of these CNFs are rel•
trolled by specifying what is called the balance factor. We    atively "hard" instances for ZChafT—they require more than a 
have used a balance factor of 35 in our experiments, which     few seconds. On instances where ZChafT finishes in a flash— 
tells the program not to let the ratio of the two partitions in such as til6, parl6, many of those in UF250, and some of 
size (large over small) exceed The reader is                   those in Pigeonhole—our proposed ordering was not helpful 
                                                               since generating the dtree alone could take more time than 
refered to [Darwiche and Hopkins, 2001] for a more detailed 
                                                               that needed by the plain ZChafT to solve the SAT problem. 
description of this technique. 
                                                               Finally, to complete the picture, Table 3 reports on instances 
                                                               (not included in the first two tables) on which ZChafT ran out 
4 Experimental Results                                         of memory but Dtree-ZChafT succeeded. We also note that 
To evaluate the effectiveness of our proposed ordering tech•

nique, we decided to integrate it with an existing SAT solver     4Thc notion of width captures both the cutset sizes and the degree 
to see whether it would improve performance on a variety of    of balance; a formal definition can be found in [Darwiche, 2001]. 


SATISFIABILITY                                                                                                      1169                                     Table 1: Overall results on all benchmarks 
               Benchmark              SAT/UNSAT    Dtrce Dtree-ZChaff ZChaff  Improved Instances 
                                                   Time     Time       Time 
               Pigeonhole      8        UNSAT       16       944       7368          5 
              FPGA-UNSAT       9        UNSAT       64      3379       26849         9 
                  URQ          8        UNSAT       6        236       927           8 
                UUF250         100      UNSAT      533      32040     41292          84 
                 UF250         100        SAT      538      3515       4378          22 
               FPGA-SAT        11        SAT        38      21251      18207         6 
                 DIFP_A        14        SAT       447      54070     142755         13 
                DIFP.W         14        SAT       764      103726    228653         7 
                  iil6         10        SAT       223       73         63           0 
                 par 16        10        SAT        33       23         9            0 

                                                       Algorithm 3 sat(Thcory : C, Dtreenode : T) 
         Table 3: Instances on which ZChaff failed 
                                                        1: if there is an inconsistent clause in C then 
      Instance                   Dtree Dtrce-ZChaff     2: return  
                                 Time      Time         3: if T is then 
       hole 14       210/1485     6        3636 
       hole 15       240/1816     8       14977         4: return true 
   fpgal L20_uns_rcr 440/4220     17       7041         5: if there is no uninstantiated variable in then 
       urq3_5         46/470       1       589          6: return sat  
       urq3_6         46/470       1       181          7: select an uninstantiated variable v in T.cutset 
       urq3_7         46/470       1       577          8: return  
       urq3_8         46/470       1       1366 

 Algorithm 2 sat(Theory : C, Dtreenode : T)              Given a CNF C and a corresponding dtree, recall that each 
  1: if there is an inconsistent clause in C then      dtree node T corresponds to a subset of the CNF C. From 
                                                       here on, we will use C : T to refer to the set of clauses in CNF 
  2: return false 
  3: if T is null then                                 C corresponding to node T. Algorithm 2 takes two inputs: a 
  4: return true                                       CNF C and a corresponding dtree rooted at node T. The 
  5: V =                                               following invariant is maintained by the algorithm: clauses 
  6: for all instantiations of V do                    C : T are disconnected from other clauses. This is true triv•
  7: then ially for the very first call to Algorithm 2, and remains true for 
                                                       recursive calls since cutsets associated with ancestors of node 
  8: return true                                       T must be instantiated by the time the recursive call is made. 
  9: return false 
                                                       Algorithm 2 decomposes the clauses in C : T by setting vari•
                                                       ables in the cutset of node T to some value Specifically, 
                                                       clauses can now be decomposed into two smaller 
 the total running time of all experiments was about 2 weeks. 
                                                       sets, andwhich are solved inde•
                                                       pendently. If both of these sets of clauses are solved success•
 5 Decompositional Semantics of the Heuristic          fully for some instantiation a, the original CNF C is declared 
   We show in this section that when the proposed variable satisfiable. Otherwise it is declared unsatisfiable. 
 ordering heuristic is integrated with a DP solver that employs Note that cutset variables do not need to be instanti•
 conflict-directed backtracking, such as ZChaff, it produces a ated simultaneously as given on Line 6 of Alogirthm 2— 
 divide-and-conquer behavior in which the solver recursively instantiating these variables one at a time leads to the variant 
 breaks down the SAT problem into smaller sub-problems that Algorithm 3. The order in which variables are instantiated 
 are then solved independently. Specifically, even though the by this algorithm is indeed consistent with the group ordering 
 solver is using a DP search method, we will show that it em• induced by the given dtree, as formalized by Definition 3.4. 
ulates Algorithm 2, which explicitly uses the dtree to realize In fact, the only key difference between Algorithm 3 and a 
 a divide-and-conquer search. One significance of this cor• DP solver that uses the dtree group ordering is that when 
respondence is that we can now offer structure-based guar• all cutset variables of dtree node T are instantiated, Algo•
 antees on the complexity of DP solvers that use such orders. rithm 3 will spawn two independent computations on 
 Such guarantees have usually been restricted to DP solvers and However, the DP solver will sequence these 
based on resolution [Davis and Putnam, 1960; Dechter and two computations, potentially creating a dependence between 
Rish, 1994], which have not been as influential for SAT given them. That is, if a contradiction is reached while solving 
their intractable space complexity [Davis and Putnam, 1960; the second problem in the sequence, the search may 
Davis et al, 1962].                                    backtrack to variables in the first problem therefore 


1170                                                                                        SATISFIABILITY                                             Table 2: R esults on selec t instances 
                         Instance                      SAT/UNSAT       Dtree   Dtree-ZChaff   ZChaff 
                                                                     Time (s)     Time (s)    Time (s) 
                          hole 10          110/561        UNSAT         2            6           19 
                          hole 11          132/738       UNSAT          3           22          160 
                          hole 12          156/949       UNSAT          3           213         1580 
                                          300/2130       UNSAT           8          388        2279 
                                          308/2030       UNSAT          7           234         3968 
                                          400/3840        UNSAT         15         1859         8912 
                          urq3_9           37/236         UNSAT          1           1           5 
                         urq3_3            43/334        UNSAT           1          48           58 
                          urq4_4           64/356         UNSAT          1          44          465 
                       uuf250-010         250/1065       UNSAT          5           266         436 
                       uu250-030          250/1065       UNSAT           5          65          119 
                       uuf250-050         250/1065        UNSAT          5          286         301 
                       uuf250-070         250/1065       UNSAT           5          913         1360 
                       uuf250-090         250/1065       UNSAT          5           29           37 
                        uf250-010         250/1065         SAT          5            4           0 
                        uf250-030         250/1065         SAT           5          95           55 
                        uf250-050         250/1065         SAT           5           5           3 
                        uf250-070         250/1065         SAT          5            1           0 
                        uf250-090         250/1065         SAT          5           70          229 
                     fpgal0_9_sat_rcr      135/549         SAT          2            1           3 
                     fpgal2-9_sat_rcr      162/684         SAT           3          119         145 
                     fpgal3_9_sat_rcr      176/759         SAT          3           848         265 
                     difp_19_99.arr_rcr   1201/6563        SAT          29          209         401 
                     difp_20.99_arr_rcr  1201/6563         SAT          29           9          220 
                     difp_21.99_arrj-cr   1453/7967        SAT          37         1393        17968 
                     difp_19.3_wal_rcr   1755/10446        SAT          50          294         1041 
                     difp_20_3_wal_rcr   1755/10446        SAT          50          49          838 
                     difp_21_3_waLrcr    2125/12677        SAT          66         4206        28495 
                          iil6al         1650/19368        SAT          34           0           0 
                         par 16-1         1015/3310        SAT           6           1           0 


 eliminating the benefit of decomposition. As we discuss next  tiating variables and then start solving the second prob•
 though, this is impossible to happen if the solver employs    lem involving variables only to realize that this problem 
 conflict-directed backtracking, as in ZChaff. Specifically, we is not satisfiable under the current settings of variables 
 will show that in such a case, the solver will effectively con• Conflict-directed backtracking is guaranteed not to backtrack 
 duct two independent searches on the sub-problems corre•      to any of the variables in as it is clever enough to realize 
 sponding to and Hence, the combination of a                   that none of these variables are contributing to the contradic•
 DP solver, with our ordering heuristic, and conflict-directed tion. Instead, conflict-directed backtracking is guaranteed to 
 backtracking corresponds to an iterative implementation of    immediately backtrack to some variable in V. Hence, even 
 the divide-and-conquer search conducted by Algorithm 3.       though the two problems are sequenced, the resulting behav•
                                                               ior is similar to that of Line 6 of Algorithm 3. 
   We start by offering a brief description of conflict-directed We will now present an important implication of this cor•
 (nonchronological) backtracking and refer the reader to [Silva respondence we just established . Suppose that our CNF has 
 and Sakallah, 1996] for more details. In a DP solver, a vari• a connectivity graph G, which is known to have a treewidth 
 able is instantiated either as a decision or as an implication     It is known that a dtree must then exist whose height is 
 through unit propagation. In the latter case, the assignments log where is the number of clauses, and in which ev•
previously made and causing the clause to become unit are      ery cutset has size [Darwiche, 2001]. It is also known 
 recorded as the causes of the implication. These recordings   that running a divide-and-conquer algorithm, such as Algo•
 enable a backward construction of an implication graph when   rithm 3, on such a dtree will lead to a time complexity of 
 a conflict (contradiction) occurs. With careful analysis of the                   This complexity will then apply to a DP 
 implication graph, conflict-directed backtracking chooses a   solver that uses the group ordering derived from the men-
 decision variable such that, by backtracking to it, at least one 
 of the causes of the conflict is eliminated. One key property 
                                                                  5The connectivity graph G is obtained by including a vertex to 
of this form of backtracking is this. Suppose that after in•   G for each CNF variable, and then adding an edge between two 
 stantiating variables V, we split the SAT problem into two    vertices iff their variables appear in the same clause. Treewidth is a 
 independent pieces: one involving variables and the other     positive integer that measures graph connectivity: the less connected 
 involving variables VR. We solve the first problem by instan- the graph, the smaller the treewidth. Trees have treewidth 1. 


SATISFIABILITY                                                                                                      1171 