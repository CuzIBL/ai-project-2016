               DPLL with a Trace: From SAT to Knowledge Compilation

                                  Jinbo Huang and Adnan Darwiche
                                     Computer Science Department
                                 University of California, Los Angeles
                                        Los Angeles, CA 90095
                                     {jinbo, darwiche}@cs.ucla.edu

                    Abstract                          decades, many of them continue to build on what is known
                                                      as the DPLL search [Davis et al., 1962] (for examples,
    We show that the trace of an exhaustive DPLL      see complete SAT solvers in the 2004 SAT Competition:
    search can be viewed as a compilation of the propo- http://satlive.org/SATCompetition/2004/).
    sitional theory. With different constraints imposed
    or lifted on the DPLL algorithm, this compilation   This paper sets out to demonstrate a deep connection be-
    will belong to the language of d-DNNF, FBDD, and  tween SAT solving and knowledge compilation. In the ﬁrst
    OBDD, respectively. These languages are decreas-  direction, we show how advances in search-based SAT algo-
    ingly succinct, yet increasingly tractable, support- rithms will carry over, via an exhaustive version of DPLL, to
    ing such polynomial-time queries as model count-  compiling propositional theories into one of several tractable
    ing and equivalence testing. Our contribution is  languages. We start by pointing out that the trace of an ex-
    thus twofold. First, we provide a uniform frame-  haustive DPLL search, recorded compactly as a DAG, can be
    work, supported by empirical evaluations, for com- viewed as a compiled representation of the input theory. With
    piling knowledge into various languages of interest. different constraints imposed or lifted on the search process,
    Second, we show that given a particular variant of we then show that the compilation will be in the language of
    DPLL, by identifying the language membership of   d-DNNF, FBDD, and OBDD, respectively. These languages
    its traces, one gains a fundamental understanding of are known to decrease in succinctness: A propositional the-
    the intrinsic complexity and computational power  ory may have a polynomial-size representation in d-DNNF,
                                                                                                [
    of the search algorithm itself. As interesting exam- but not in FBDD; or in FBDD, but not in OBDD Darwiche
                                                                      ]
    ples, we unveil the “hidden power” of several re- and Marquis, 2002 .
    cent model counters, point to one of their potential In the second direction, we formulate two principles by
    limitations, and identify a key limitation of DPLL- which the intrinsic complexity and computational power of
    based procedures in general.                      a DPLL-based exhaustive search is related to the language
                                                      membership of its traces. Applying these principles, we point
                                                      out that several recent model counters are doing enough work
1  Introduction                                       to actually compile theories into d-DNNF. We also discuss a
Knowledge compilation has been a key direction of research potential limitation on the efﬁciency of these model counters,
in automated reasoning [Selman and Kautz, 1991; Marquis, as well as knowledge compilers using similar algorithms,
1995; Selman and Kautz, 1996; Cadoli and Donini, 1997; based on the fact that these algorithms only generate traces
Darwiche and Marquis, 2002]. When propositional theories in a speciﬁc subset of d-DNNF. Finally, we note that the ef-
are compiled into a suitable target language, some generally ﬁciency of all DPLL-based exhaustive search algorithms are
intractable queries may be answered in time polynomial in inherently limited by their inability to produce traces beyond
the size of the compilation. Compiling combinational circuits d-DNNF. This realization is signiﬁcant because some impor-
into OBDDs, for example, allows functional equivalence to tant computational tasks, such as existential quantiﬁcation of
be tested in polynomial time (or constant time if the same variables and computation of minimum-cardinality models,
variable order is used) [Bryant, 1986]. More recent applica- could be efﬁciently accomplished with a weaker representa-
tions of compilation can be found in the ﬁelds of diagnosis tion known as DNNF, a strict superset of d-DNNF.
and planning, involving the use of the DNNF language [Dar- Under our uniform DPLL-based framework for knowledge
wiche, 2001a; Barrett, 2004; Palacios et al., 2005].  compilation, the power of successful modern SAT techniques
  Propositional Satisﬁability (SAT), on the other hand, has is harnessed, including sophisticated conﬂict analysis, clause
been an area of no less importance, or activity. Aside learning, faster detection of unit clauses, and new branching
from its theoretical signiﬁcance as the prototypical NP- heuristics. We also discuss caching methods speciﬁc to the
complete problem, SAT ﬁnds practical applications in many needs of compilation and tailored to the desired target compi-
areas of artiﬁcial intelligence and computer science at large. lation language, as well as structure-based complexity guar-
While SAT algorithms have substantially improved over the antees. We ﬁnally relate our experimental results on imple- (a) NNF         or                 (b) Decision Node
                                          or          Table 1: Polytime queries supported by a language. ◦ means
       and               and
                                       and   and      “not supported unless P=NP” and ? means “do not know.”
                                                         Lang.   CO   VA   CE   IM   EQ   SE   CT  ME
    or      or       or      or      ¬¬¬X ααα X βββ               √         √                       √
                                                         DNNF     √    √◦   √    √◦   ◦    ◦   √◦   √
                                                        d-DNNF    √    √    √    √    ?    ◦   √    √
                                    (c) Alternatively    FBDD     √    √    √    √   √?    ◦   √    √
 and and and and   and and and and                       OBDD                              ◦
                                           X                      √    √    √    √   √    √    √    √
                                                        OBDD<
                                       ααα
  ¬¬¬A B ¬¬¬ B A    C  ¬¬¬ D D ¬¬¬ C           βββ
                                                        The OBDD language is the subset of FBDD where all sen-
     Figure 1: An NNF sentence and a decision node.   tences satisfy the ordering property: variables appear in the
                                                      same order on all root-to-sink paths [Bryant, 1986]. See Fig-
                                                      ure 2d for an OBDD example. For a particular variable order
mentations of the three respective compilers to the theoretical <, we also write OBDD< to denote the corresponding OBDD
succinctness relations of the corresponding languages. subset where all sentences use order <.
  The remainder of the paper is organized as follows. Sec- Having an option among target compilation languages is
tion 2 reviews a number of propositional languages concerned desirable, despite their succinctness relations which may be
in this work and their theoretical roles and relations in knowl- known. The reason is that the succinctness of a language of-
edge compilation. In Section 3, we describe a uniform frame- ten runs counter to its tractability—that is, the set of queries
work for knowledge compilation, with regard to these lan- supported in polynomial time—and the best choice may de-
guages, based on recording the trace of an exhaustive DPLL pend on the task at hand. Given this trade-off between the two
search, and discuss its implications on our understanding of criteria, the rule of thumb, according to [Darwiche and Mar-
the complexity and computational power of various search quis, 2002], is to choose the most succinct language that sup-
algorithms. We report experimental results in Section 4 and ports the desired set of queries in polynomial time (in some
conclude in Section 5.                                cases the support of transformations, such as Boolean opera-
                                                      tions, is also a consideration).
2  Target Compilation Languages                         Table 1 lists a set of polynomial-time queries of in-
                                                      terest supported by each of these languages; the two-
A logical form qualiﬁes as a target compilation language if letter abbreviations stand for the following eight queries,
it supports some set of nontrivial queries, usually including respectively: COnsistency, VAlidity, Clausal Entailment,
clausal entailment, in polynomial time. We will review in this IMplicant, EQuivalence, Sentential Entailment, model
section several target compilation languages relevant to the CounTing, Model Enumeration [Darwiche and Marquis,
present paper, and refer the reader to [Darwiche and Marquis, 2002].
2002] for a more comprehensive discussion.              Interestingly, this table offers one explanation for the popu-
  The languages we shall describe are all subsets of the more larity of OBDDs in formal veriﬁcation where efﬁcient equiv-
general Negation Normal Form (NNF). A sentence in NNF is alence testing, among other things, is often critical. Although
a propositional formula where conjunction (and, ∧), disjunc- more succinct, d-DNNF and FBDD are not known to admit
tion (or, ∨) and negation (not, ¬) are the only connectives and a polynomial-time equivalence test (a polynomial-time prob-
negation only appears next to a variable; sharing of subformu- abilistic equivalence test is possible [Darwiche and Huang,
las is permitted by means of a rooted DAG; see Figure 1a. 2002; Blum et al., 1980]). Note also that although there is no
  We start with the DNNF language, which is the set of all difference between d-DNNF and FBDD to the extent of this
NNF sentences that satisfy decomposability: conjuncts of table, the question mark on the equivalence test (EQ) could
any conjunction share no variable. Our next language, d- eventually be resolved differently for the two languages.
DNNF, satisﬁes both decomposability and determinism: dis- In the following section we will use the notion of recording
juncts of any disjunction are pairwise logically inconsistent. the trace of a DPLL search to establish an important link be-
The formula of Figure 1a, for example, is in d-DNNF.  tween SAT and knowledge compilation, providing a uniform
  The FBDD language is the subset of d-DNNF where the framework for compiling knowledge into some of these lan-
root of every sentence is a decision node, which is deﬁned guages. From this point of view we will then discuss our new
recursively as either a constant (0 or 1) or a disjunction in understanding of the complexity and computational power of
the form of Figure 1b where X is a propositional variable algorithms based on exhaustive DPLL.
and α and β are decision nodes. Note that an equivalent but
more compact drawing of a decision node—shown in Fig- 3   DPLL with a Trace
ure 1c—is widely used in the formal veriﬁcation literature,
where FBDDs are equivalently known as Binary Decision We start with the basic DPLL search as in [Davis et al., 1962].
Diagrams (BDDs) that satisfy the test-once property: each To facilitate our subsequent discussion of variants of this al-
variable appears at most once on any root-to-sink path [Ger- gorithm, we will omit unit resolution from the pseudocode.
gov and Meinel, 1994]. See Figure 2c for an FBDD example (All our discussions, however, are valid in the presence of
using this more compact drawing.                      unit resolution; see also the following two footnotes.)(a) CNF               (b) Search Tree
                                     x1                 As the title of this paper suggests, we like to think of this
                                                      complete search tree, also known as a termination tree or de-
      x ∨∨∨ x
       1   2                   x             x        cision tree, as the trace left by the exhaustive DPLL search.
        ∨∨∨¬¬¬ ∨∨∨              2             3
      x1   x2 x3                                      Such a trace corresponds to the portion of the search space
      ¬¬¬ ∨∨∨ ∨∨∨          unsat x         x   sat    actually explored by a particular execution of the algorithm.
       x1  x2 x3                  3         2
                                                      Furthermore, the trace can be viewed as a compiled repre-

                              unsat sat unsat sat     sentation of the original CNF formula, because it uniquely
                                                      identiﬁes the propositional theory—by specifying its models.
                                                        From the viewpoint of knowledge compilation, however, a
(c) FBDD  x           (d) OBDD       x                search trace recorded in its present form may not be immedi-
           1                          1               ately useful, because it will typically have a size proportional
                                                      to the amount of work done to produce it. Answering even a
     x           x              x           x
      2           3              2           2        linear-time query on such a compilation, for example, would
                                                      be as if one were running the whole search over again.
       x      x                      x
        3      2                      3                 This problem can be remedied by reducing the trace from
                                                      a tree to a DAG, with repeated applications of the following
    0              1           0              1       two rules: (i) Isomorphic nodes (i.e., nodes that have the same
                                                      label, same low child, and same high child) are merged; (ii)
        Figure 2: Exhaustive DPLL with a trace.       Any node with identical children is deleted and pointers to it
                                                      are redirected to either one of its children [Bryant, 1986].
  Algorithm 1 is a summary of DPLL for SAT. It works by re- If we apply these reduction rules to the tree of Figure 2b,
cursively doing a case analysis on the assignment to a selected and rename “sat/unsat” to “1/0”, we will get the DAG of Fig-
variable (Lines 5&6): The theory is satisﬁable if and only if ure 2c (in this particular example the ﬁrst rule only applies to
either case results in a satisﬁable subtheory. ∆|x=0 (∆|x=1) the terminal nodes and the second rule does not apply). Ob-
denotes the CNF obtained by replacing all occurrences of x serve that this DAG is none other than a propositional theory
with 0 (1) in ∆ and simplifying the formula accordingly. In in the language of FBDD. And this is no accident!
effect, this algorithm performs a search in the space of vari-
able assignments until it ﬁnds one that satisﬁes the given CNF 3.1 Compiling CNF into FBDD
formula or realizes that no satisfying assignment exists.1 We are in fact in possession of a CNF-to-FBDD compiler, de-
  Now consider extending Algorithm 1 so that it will enu- scribed more formally in Algorithm 2. The main difference
merate all satisfying assignments—by always exploring both from the original DPLL is on Line 6: we always explore both
branches of Line 6—rather than terminate on ﬁnding the ﬁrst branches, and the newly introduced function, get-node, pro-
one. Figure 2b depicts the search tree of this exhaustive ver- vides a means of recording the trace of the search in the form
sion of DPLL on the CNF of Figure 2a, under some particular of a DAG. Speciﬁcally, get-node will return a decision node
variable ordering. We are using a dotted (solid) line to denote labeled with the ﬁrst argument, having the second argument
setting the variable to 0 (1), and will refer to the correspond- as the low child, and having the third argument as the high
ing branch of the search as the low (high) branch. Note that child. Note that Lines 2&4 have been modiﬁed to return the
each leaf of this tree gives a partial variable assignment that terminal decision nodes, instead of the Boolean constants.
satisﬁes the theory regardless of the values of any unassigned We point out that the amount of space required by Algo-
variables, and the whole tree characterizes precisely the set of rithm 2 to store the FBDD is only proportional to the size
all satisfying assignments.                           of the ﬁnal result. In other words, it will never create re-

  1                                                   dundant nodes to be reduced later. This is because the two
   To incorporate unit resolution into this simpliﬁed picture where reduction rules are built-in by means of a unique nodes ta-
all assignments are by decision, one can assume that when a chosen ble, well-known in the BDD community [Somenzi, Release
decision variable (Line 5 of Algorithm 1) has been implied by unit ]
resolution, the algorithm will simply proceed down the right branch 240 . Speciﬁcally, all nodes created by get-node are stored
according to the implied value of the variable, noting that the other in a hash table and get-node will not create a new node if (i)
branch leads to unsatisﬁability. One may also assume that in choos- the node to be created already exists in the table (that existing
ing a decision variable, those already implied by unit resolution will node is returned); or (ii) the second and third arguments are
be favored, although this would represent a restriction on the search the same (either argument is returned).
traces, which we describe shortly, that can be possibly generated.

                                                      Algorithm 2 dpllf (∆): compiles CNF ∆ into FBDD (dpll is low-
Algorithm 1 DPLL(∆): returns satisﬁability of CNF ∆   ercased to distinguish it from Algorithm 3, its full version)
 1: if there is an empty clause in ∆ then              1: if there is an empty clause in ∆ then
 2:  return 0                                          2:  return 0-sink
 3: if there is no variable in ∆ then                  3: if there is no variable in ∆ then
 4:  return 1                                          4:  return 1-sink
 5: select variable x of ∆                             5: select variable x of ∆
 6: return DPLL(∆|x=0) or DPLL(∆|x=1)                  6: return get-node(x, dpllf (∆|x=0), dpllf (∆|x=1))  Caching. Despite the use of unique nodes which controls was shown to be exponential only in the cutwidth of the given
the space complexity, Algorithm 2 still has a time complex- CNF. A variant caching scheme allows one to show a parallel
ity proportional to the size of the tree version of the search complexity in terms of the pathwidth (cutwidth and pathwidth
trace: Portions of the DAG can end up being explored mul- are not comparable).
tiple times. To alleviate this problem, one resorts to formula Classical OBDD Construction. We emphasize here that
caching [Majercik and Littman, 1998].                 Algorithm 4 represents a distinct way of OBDD construction,
  Algorithm 3 describes the same CNF-to-FBDD  com-    in contrast to the standard method widely adopted in formal
piler, but now with caching: The result of a recursive call veriﬁcation where one recursively builds OBDDs for compo-
DPLLf (∆) will be stored in a cache (Line 10) before being nents of the system (or propositional theory) to be compiled
returned, indexed by a key (computed on Line 5) identifying and combines them using the Apply operator [Bryant, 1986].
∆; any subsequent call on some ∆0 will immediately return A well-known problem with this latter method is that the in-
the existing compilation for ∆ from the cache (Line 7) if ∆0 is termediate OBDDs that arise in the process can grow so large
found to be equivalent to ∆ (by a key comparison on Line 6). as to make further manipulation impossible, even when the
  In practice, one normally focuses on efﬁciently recog- ﬁnal result would have a tractable size. Considering that the
nizing formulas that are syntactically identical (i.e., have ﬁnal OBDD is really all that one is after, Algorithm 4 affords
the same set of clauses). Various methods have been pro- a solution to this problem by building exactly it, no more and
posed for this purpose in recent years, starting with [Ma- no less (although it may do more work than is linear in the
jercik and Littman, 1998] who used caching for probabilis- OBDD size, both because inconsistent subproblems do not
tic planning problems, followed by [Darwiche, 2002] who contribute to the OBDD size, and because the caching is not
proposed a concrete formula caching method in the con- complete). An empirical comparison of this compilation al-
text of knowledge compilation, then [Bacchus et al., 2003; gorithm and the traditional OBDD construction method can
Sang et al., 2004] in the context of model counting, and then be found in [Huang and Darwiche, 2004].
[Huang and Darwiche, 2004; Darwiche, 2004] who proposed
further reﬁnements on [Darwiche, 2002].               3.3  From FBDD to d-DNNF
3.2  From FBDD to OBDD                                Although any FBDD is also a d-DNNF sentence by deﬁnition,
                                                      it remains a reasonable option to compile propositional theo-
We now turn to OBDD as our target compilation language. ries into d-DNNF only, given its greater succinctness. Con-
Note that in Algorithm 3, DPLL is free to choose any variable sidering that d-DNNF is a relaxation of FBDD, we can obtain
on which to branch (Line 8). This corresponds to the use of a d-DNNF compiler by relaxing a corresponding constraint
a dynamic variable ordering heuristic in a typical SAT solver, on Algorithm 3. Speciﬁcally, immediately before Line 8, we
in keeping with the spirit of FBDD compilation.       need not insist any more that a case analysis be performed on
  Not surprisingly, a CNF-to-OBDD compiler can be ob- some variable x of the formula; instead, the following tech-
tained by switching from dynamic to static variable ordering: nique of decomposition can be utilized. See Algorithm 5.2
The new compiler will take a particular variable order π as As soon as variable instantiation ﬁnishes without contra-
a second argument, and make sure that this order is enforced diction, we will examine the remaining CNF formula, and
when constructing the DAG. See Line 8 of Algorithm 4. partition it into subsets that do not share a variable (Line 5).
  Caching. Naturally, any general formula caching method, These subsets can then be recursively compiled into d-DNNF
such as the ones we described earlier, will be applicable to (Lines 7–9) and conjoined as an and-node (Line 10). Note
Algorithm 4. For this more constrained compiler, however, that decomposition takes precedence over case analysis: Only
a special method is available where shorter cache keys can when no decomposition is possible do we branch on a se-
be used to reduce the cost of their manipulation. The reader lected variable as in regular DPLL (Lines 14&15).
is referred to [Huang and Darwiche, 2004] for details of this
method, which allows one to bound the number of distinct 2When unit resolution and clause learning are both integrated
cache keys, therefore providing both a space and a time com- into this algorithm, an issue arises regarding implications via learned
plexity bound. In particular, due to this speciﬁc caching clauses that span otherwise disjoint components. See [Sang et al.,
scheme, the space and time complexity of compiling OBDDs 2004] for more discussion on this issue.


Algorithm 3 DPLLf (∆): compiles CNF ∆ into FBDD       Algorithm 4 DPLLo(∆, π): compiles CNF ∆ into OBDDπ
 1: if there is an empty clause in ∆ then              1: if there is an empty clause in ∆ then
 2:  return 0-sink                                     2:  return 0-sink
 3: if there is no variable in ∆ then                  3: if there is no variable in ∆ then
 4:  return 1-sink                                     4:  return 1-sink
 5: key = compute-key(∆)                               5: key = compute-key(∆)
 6: if (result = cache-lookup(key)) 6= null then       6: if (result = cache-lookup(key)) 6= null then
 7:  return result                                     7:  return result
 8: select variable x of ∆                             8: x = ﬁrst variable of order π that appears in ∆
 9: result = get-node(x, DPLLf (∆|x=0), DPLLf (∆|x=1)) 9: result = get-node(x, DPLLo(∆|x=0, π), DPLLo(∆|x=1, π))
10: cache-insert(key, result)                         10: cache-insert(key, result)
11: return result                                     11: return result  Note that our relaxation of Algorithm 3 has resulted in a Caching. Several caching methods have been proposed for
new type of node, returned by get-and-node on Line 10. The d-DNNF compilation, the latest and most effective of which
old get-node function (Line 15) still returns decision nodes appeared in [Darwiche, 2004]. However, we refer the reader
(in a relaxed sense, as their children now are not necessarily to [Darwiche, 2001b] for a caching scheme that is speciﬁc to
decision nodes) in the form of Figure 1c. The unique nodes the dtree-based decomposition method. This scheme is not
technique can also be extended in a straightforward way so competitive with the one in [Darwiche, 2004] in that it may
that isomorphic and-nodes will not be created.        miss some equivalences that would be caught by the latter, yet
  We point out here that Algorithm 5 only produces sen- it allows one to show that the space and time complexity of d-
tences in a subset of d-DNNF, because it only produces a DNNF compilation is exponential only in the treewidth of the
special type of disjunction nodes—decision nodes (again in CNF formula (as compared to the pathwidth and cutwidth in
the relaxed sense). Recall that d-DNNF allows any disjunc- OBDD compilation). Interestingly, no similar structure-based
tion as long as the disjuncts are pairwise logically inconsis- measure of complexity appears to be known for FBDDs.
tent. We will come back to this in the next subsection. Relation to AND/OR Search. Recent work has explored
  Static vs. Dynamic Decomposition. Algorithm 5 sug-  the long established notion of AND/OR search to process
gests a dynamic notion of decomposition, where disjoint queries on belief and constraint networks [Dechter and Ma-
components will be recognized after each variable split. This teescu, 2004b; 2004a]. An AND/OR search is character-
dynamic decomposition was initially proposed and utilized ized by a search graph with alternating layers of and-nodes
by [Bayardo and Pehoushek, 2000] for model counting and and decision-nodes, the former representing decomposition
adopted by a more recent model counter [Sang et al., 2004]. and the latter branching. The DAGs produced by Algo-
[Darwiche, 2002; 2004] proposed another (static) method for rithm 5 are indeed AND/OR graphs and, conversely, the
performing the decomposition by preprocessing the CNF to AND/OR search algorithms described in [Dechter and Ma-
generate a decomposition tree (dtree), which is a binary tree teescu, 2004b; 2004a] can be used to compile networks into
whose leaves correspond to the CNF clauses. Each node in the multi-valued equivalent of d-DNNF. This implies that
the dtree deﬁnes a set of variables, whose instantiation is these AND/OR search algorithms are capable of many more
guaranteed to decompose the CNF into disjoint components. tasks than what they were proposed for—model counting (or
The rationale is that the cost of dynamically computing a par- other equivalent tasks such as computing the probability of a
tition (Line 5) many times during the search is now replaced random variable assignment satisfying the constraint query).
with the lesser cost of computing a static and recursive parti- We discuss this further in the following subsection.
tion once and for all. This method of decomposition allows
one to provide structure-based computational guarantees as 3.4 Understanding the Power and Limitations of
discussed later, and can be orders of magnitude more efﬁcient DPLL
on some benchmarks, including the ISCAS85 circuits.3
                                                      The main proposal in this paper has been the view of
  3One  may obtain results to this effect by running the exhaustive-DPLL traces as sentences in some propositional
model counter [Sang et al., 2004], version 1.1, available language. This view provides a uniﬁed framework for knowl-
at http://www.cs.washington.edu/homes/kautz/Cachet/, on bench- edge compilation as we have shown earlier, but we now show
marks used in [Darwiche, 2004]. It should be noted that the two another major beneﬁt of this framework: By using known re-
programs differ in other aspects, but the decomposition method ap- sults about the succinctness and tractability of languages, one
pears to be the major difference. Note also that using DPLL for can understand better the intrinsic complexity and computa-
compilation incurs higher overhead than for model counting due to tional power of various exhaustive DPLL procedures.
the bookkeeping involved in storing the DPLL trace.
                                                        Consider a particular variation of DPLL, say DPLLx, and
                                                      suppose that its traces belong to language Lx. We then have:

Algorithm 5 DPLLd(∆): compiles CNF ∆ into d-DNNF        1. DPLLx will not run in polynomial time on formulas for
 1: if there is an empty clause in ∆ then                 which no polynomial-size representation exists in Lx.
 2:  return 0-sink
 3: if there is no variable in ∆ then                   2. If DPLLx runs in polynomial time on a class of formu-
 4:  return 1-sink                                        las, then DPLLx (with some trivial modiﬁcation) can an-
 5: components = disjoint partitions of ∆                 swer in polynomial time any query on these formulas
 6: if |components| > 1 then                              that is known to be tractable for language Lx.
 7:  conjuncts = {}
 8:  for all ∆ ∈ components do                          Take for example the model counters recently proposed in
            c                                         [Bayardo and Pehoushek, 2000; Sang et al., 2004], which
 9:    conjuncts = conjuncts ∪ {DPLLd(∆c)}
10:  return get-and-node(conjuncts)                   employ the techniques of decomposition and (the latter also)
11: key = compute-key(∆)                              caching. A simple analysis of these model counters shows
12: if (result = cache-lookup(key)) 6= null then      that their traces are in the d-DNNF language (for speciﬁc
13:  return result                                    illustrations, see the DDP algorithm of [Bayardo and Pe-
14: select variable x of ∆                            houshek, 2000] and Table 1 of [Sang et al., 2004]). There-
15: result = get-node(x, DPLLd(∆|x=0), DPLLd(∆|x=1))  fore, neither of these model counters will have a polynomial
16: cache-insert(key, result)                         time complexity on formulas for which no polynomial-size
17: return result                                     representations exist in d-DNNF.