                 Reducing Accidental Complexity in Planning Problems

                                            Patrik Haslum
                                         National ICT Australia
                                 Patrik.Haslum@nicta.com.au


                    Abstract                            We investigate some transformations aimed at reducing the
                                                      accidental complexity of planning problems, mainly by ab-
    Although even propositional STRIPS planning is    stracting away parts of the problem that are easily solved.
    a hard problem in general, many instances of the  Abstraction has a long history in AI planning, and it has been
    problem, including many of those commonly used    shown that it can reduce problem-solving effort exponentially
    as benchmarks, are easy. In spite of this, they are [Knoblock, 1994] (but also potentially increase the required
    often hard to solve for domain-independent plan-  effort [B¨ackstr¨om and Jonsson, 1995]). Methods of abstract-
    ners, because the encoding of the problem into a  ing, decomposing or “factoring” planning problems have at-
    general problem speciﬁcation formalism such as    tracted renewed interest recently [e.g. Sebastia et al., 2006;
    STRIPS hides structure that needs to be exploited Domshlak and Brafman, 2006].
    to solve problems easily. We investigate the use of We focus on “safe” abstraction, i.e., on ﬁnding conditions
    automatic problem transformations to reduce this  under which solutions to an abstracted problem are guaran-
    “accidental” problem complexity. The main tool    teed to be reﬁnable into a concrete solution. In most ab-
    is abstraction: we identify a new, weaker, condi- stractions we consider, reﬁnement of an abstract solution is
    tion under which abstraction is “safe”, in the sense a polynomial-time operation (though, in the worst case, the
    that any solution to the abstracted problem can be generated plan may be exponentially longer than the short-
    reﬁned to a concrete solution (in polynomial time, est plan). We also show examples of how “difﬁcult” problem
    for most cases) and also show how different kinds formulations can make safe abstraction impossible, and sug-
    of problem reformulations can be applied to create gest some methods to (automatically) reformulate problems
    greater opportunities for such safe abstraction.  to make them more amenable to abstraction.
                                                        Due to space restrictions, proofs and detailed algorithm de-
1  Introduction                                       scriptions are omitted from the paper, but will be provided on
                                                      request.
Planning, even in the very restricted case of the propositional
STRIPS formalism, is, in general, a hard problem (in fact, it
is PSPACE complete; Bylander, 1991). But not all planning 2 Representation
problems are hard: in fact, it has been shown that in many of A domain-independent planner is – indeed must be – pre-
the benchmark domains frequently used to evaluate planning sented with an encoding of a planning problem in a prob-
systems, a plan can be found by simple procedures running lem speciﬁcation formalism. Our starting point is the stan-
in low-order polynomial time [Helmert, 2006b]. In spite of dard propositional STRIPS representation but, like several
this, the problems are not easy for domain-independent plan- researchers have recently done, we also consider an al-
ners. That is not to say that planners can not solve problems ternative representation based on multi-valued, rather than
in these domains – many recent planners scale up fairly well propositional, state variables [Jonsson and B¨ackstr¨om, 1998;
– but what determines the difﬁculty of a particular planning Edelkamp and Helmert, 1999; Helmert, 2006b].Inthisrep-
problem for a given planner is often not the intrinsic com- resentation, a world state assigns to each of a set of variables,
plexity of the problem, but more the size and structure of the {V1,...,Vn}, a value from a ﬁnite domain Di. Each action
problem encoding. This discrepancy between the essential is described by a pre- and a postcondition, which are partial
complexity of the problem being solved and the accidental assignments over the set of variables. The postcondition is
complexity, i.e., the difﬁculties added to the problem as a re- interpreted as an assignment: on execution of the action, the
sult of the way the problem is formulated, the tools adopted variables mentioned in the postcondition are changed as indi-
for solving it, etc., is not unique to automated planning1. cated and variables not mentioned keep their values.

  1The terms essential and accidental complexity were coined in ality of a program or algorithm, while the accidental complexity is
the area of software engineering, by Fred Brooks in 1986. In his the “complexity overhead” caused by inadequate tools or languages,
paper, essential complexity refers to the complexity of the function- making simple solutions difﬁcult to state.

                                                 IJCAI07
                                                  1898    loc(pkg2)  loc(pkg1)                              tails” are ignored. Because these “details” are not taken into
                                                      account, the solution to the abstract problem may not be a
                                                      valid plan. The next step is to ﬁnd, in the non-abstracted
                           (at truck B) (at truck A)  version, a plan to “bridge the gap” between each step of the
         loc(truck)              loc(truck)           abstract plan. Solving the abstract problem is generally eas-
           (a)                     (b)                ier, as is ﬁlling in the missing details because the plan frag-
                                                      ments needed to bridge consecutive steps in the abstract plan
   (at pkg1 B) loc(truck) = (at truck B) (in pkg1 truck) loc(truck) = (at truck A) (at pkg1 A) are typically short. This can be done recursively, with each
           loc(truck) = (at truck B) loc(truck) = (at truck A)
                                                      “bridging plan” successively reﬁned through a number of ab-
                      loc(pkg1)                       straction levels.
                        (c)                             In an ideal abstraction hierarchy any solution at a higher
                                                      level of abstraction can be reﬁned into a solution at the next
Figure 1: (a) Causal graph for a simple logistics problem; (b) lower abstraction level by only inserting some actions (“ﬁll
and (c) domain transition graphs of two problem variables. in the details”), that is, without changing the solution as it
Edges in the DTG in ﬁgure (c) are annotated with the precon- appears at the more abstract level. This is the downward re-
ditions of the corresponding actions on other variables. ﬁnement property, as deﬁned by Bacchus and Yang [1994].
                                                      When this property does not hold, the abstract solution found
                                                      by a planner may not be reﬁnable to a concrete solution, forc-
  The multi-valued state variable representation is expres- ing backtracking to generate a new solution at the higher ab-
sively equivalent to propositional STRIPS and can be con- straction level.
structed from the STRIPS representation by making use of Knoblock [1994] has proposed an efﬁcient procedure for
state invariants of a particular kind, namely sets of atoms with automatically generating abstraction hierarchies satisfying a
the property that exactly one atom in each set is true in ev- weaker property, called ordered monotonicity:insuchahier-
ery reachable world state. Several methods for automatically archy, there exists at least one abstract plan that can be reﬁned
extracting such “exactly one” invariants from STRIPS encod- into a concrete plan (if the problem is solvable). Knoblock’s
ings have been proposed [e.g. Edelkamp and Helmert, 1999; procedure constructs a graph over the atoms in the planning
Scholz, 2004; Helmert, 2006b].                        problem (essentially the causal graph) and computes the tree
  We also make use of two kinds of graphs that summarise of strongly connected components of this graph which is then
some structural properties of a planning problem: The causal topologically sorted to yield a hierarchy. The procedure can
graph of a planning problem is a directed graph whose nodes equally be applied to the multi-valued variable representation
correspond to problem variables (multi-valued or proposi- of a problem, resulting in the same hierarchy. In the trans-
tional) and that has an edge from V to V  iff some action portation problem described above, the resulting hierarchy
that has an effect on V  has a precondition or effect on V . considers at the most abstract level only the location of one
In particular, the causal graph contains a bidirected edge be- package; at the next, the other package as well; and only at
tween any pair of variables such that there exists an action that the concrete level, the location of the truck.
changes both simultaneously. The domain transition graph If every “reﬁnement problem”, i.e., the subproblem solved
(DTG) of a (multi-valued) variable V is a directed graph when reﬁning a plan down one level in the abstraction hier-
whose nodes correspond to the values in the domain of V archy, is known to be solvable, then clearly any abstract plan
and whose edges correspond to actions that change the value can be reﬁned. This is the case in the example transportation
of the variable: the graph has an edge from v to v if there problem: as the variable loc(truck), representing the lo-
exists some action whose precondition includes V = v and cation of the truck, can change from any value to any other
whose postcondition includes V = v.                  value, whatever the state of the other variables and without
  To illustrate, consider a very simple transportation prob- changing any of them, it is always possible to reﬁne an ab-
lem: two packages (pkg1 and pkg2) can be loaded in and stract plan for moving the packages by inserting actions to
unloaded from a truck, which can move freely between some move the truck to appropriate locations.
locations (A, B). The multi-valued variable representation of More generally, the downward reﬁnement property can be
this problem has a variable loc(truck), with values {(at ensured by abstracting only when some sufﬁcient condition
truck A),  (at truck B)}, and a variable  loc(?p)     for the solvability of all (relevant) reﬁnement problems is met.
for each package ?p, with values {(at ?p A), (at ?p   This idea, termed “safe abstraction” was recently introduced
B), (in ?p  truck)}. Note that values in the variable do- by Helmert [2006a], as an improvement of the Fast Down-
mains correspond to atoms in the STRIPS encoding of the ward planner2. To formalise safe abstraction, deﬁne the free
problem. The causal graph and domain transition graphs of domain transition graph of a variable V as the subgraph of
two variables are shown in ﬁgure 1.                   the DTG containing only the edges due to actions that do not
                                                      have any pre- or postcondition on any other variable. A value
                                                      v of V is free reachable from value v iff there is a path from
3  Abstraction                                             
                                                      v to v in the free DTG of V . Helmert’s condition for safe
The idea of hierarchical abstraction in planning is to solve
the problem ﬁrst in an abstracted version, in which only the 2A similar technique is for numeric variables is described by
“critical” aspects of the problem are considered and the “de- Chen et al. [2006].

                                                 IJCAI07
                                                  1899Variables:        Actions:                            problem, and the DTG and free DTG of variable b1. The free
b1: {0, 1}        inc1:                               DTG of variable b1 is not strongly connected; however, the
b2: {0, 1}         pre: b1 = 0
b3: {0, 1}         post: b1 = 1                       only externally required value is 1 (a precondition of inc2

Init: b1 = 0,     inc2:                               and inc3, and a goal) and the only externally caused value
    b2 = 0,        pre: b1 = 1, b2 = 0                is 0, and since 1 is indeed free reachable from 0,variableb1
    b3 = 0         post: b1 = 0, b2 = 1               is safely abstractable. Moreover, abstracting away b1 makes
Goal: b1 = 1,     inc3:                               the transition from 0 to 1 in the domain of b2 free, and thus
    b2 = 1,        pre: b1 = 1, b2 = 1, b3 = 0
    b3 = 1         post: b1 = 0, b2 = 0, b3 = 1       b2 also safely abstractable in the same way; following the
                                                      abstraction of b2 also b3; and so on.
Figure 2: A small instance of the binary counter planning Note that the causal graph of the problem, shown in ﬁgure
problem.                                              3(a), forms a single strongly connected component. Thus,
                                                      Knoblock’s abstraction procedure applied to this problem
                                                      yields only a single abstraction level, comprising the entire
                                                      problem. The causal graph summarises all possible causal
                        inc1
                                                      dependencies in a planning problem (recall that it has an edge
                                                                             
                    0   inc2   1                      between variables V and V iff there exists some action that
                                                               
        b2              inc3                          changes V  and depends on or changes V ). The free DTG
  b1          b3                        inc1
                                    0          1      condition, on the other hand, focuses on what is possible to
                                                      achieve independently of other variables.
        (a)              (b)             (c)
                                                      4   Reformulation
Figure 3: (a) The causal graph of the problem in ﬁgure 2. (b)
The DTG of variable b1; (c) the free DTG of b1.       Typically, there are several ways that a planning problem can
                                                      be encoded in a speciﬁcation formalism, such as STRIPS.
                                                      It is widely recognised that different problem formulations
abstraction is that the free DTG forms a single, strongly con- may be more or less suited to a particular planning system
nected component, i.e., that every value is free reachable from or technique. Although the abstraction conditions discussed
every other value. This condition, however, is unnecessarily in the previous section rely on the causal and domain transi-
strong: for downward reﬁnement to be ensured, it is sufﬁ- tion graphs, which are considered to be “structural” features
cient that any value of the variable that is required to reﬁne of a problem, they too suffer from such encoding sensitiv-
an abstract plan is free reachable from every value that the ity. Ideally, a planner should be able to accept any problem
variable may take on as a consequence of that plan. Let the formulation, and if necessary reformulate it in a way more
externally required values of variable V be those values that suited to the planners needs. Sometimes, such reformulation
appear in the precondition of some action that changes a vari- is possible by exploiting structure in the problem description.
able other than V and let the externally caused values of V be As an example, consider the well known Towers-of-Hanoi
those values that appear in the postcondition of some action problem. This problem was used by Knoblock [1994] to
that changes a variable other than V , plus the value of V in demonstrate the construction of an effective abstraction hi-
the initial state.                                    erarchy. Figure 4(a) shows the encoding used by Knoblock:
                                                      it represents the position of each disc by the peg that the disc
Theorem 1 If all externally required values of V are strongly is on and has a different action for moving each disc. Figure
connected in the free DTG and free reachable from every ex- 4(b) shows a different encoding of the domain, introduced by
ternally caused value of V , and the goal value of V (if any) Bonet & Geffner [2001]. In this formulation, the position of
is free reachable from each externally required value, then each disc is either on a peg (with noting beneath it) or on a
abstracting V is safe (i.e., preserves downward reﬁnement). larger disc, and there is a set of additional atoms to represent
                                                      that a disc or peg is “clear” (has nothing on it). The same
Checking the safe abstraction condition and reﬁning each step action moves each disc.
in an abstract plan are both polynomial in the size of the do- Both encodings are correct, in the sense that they capture
main of the state variable, which corresponds to the number the essential constraints of the original problem, but they dif-
of atoms that make up the variable. The principle is straight- fer in their properties. Figure 5 shows the corresponding
forwardly transfered to components of more than one vari- causal graphs (for the STRIPS representation of the two prob-
able, but at exponentially increasing computational cost since lem formulations). The causal graph for Knoblock’s formu-
the “domain transition graph” of such a component is the ab- lation consists of three strongly connected components (each
stract state space of all variables in the component. contains atoms relating to the position of one disc), forming
  To illustrate the difference that the weaker condition a tree, and thus a three-layered abstraction hierarchy. The
makes, consider a planning problem involving a binary causal graph for Bonet’s & Geffner’s formulation, however,
counter that can only be increased, in steps of one: the prob- has only a single connected component. Thus, Knoblock’s
lem description, in multi-valued variable form, for a small procedure does not ﬁnd any abstraction hierarchy in this for-
instance is shown in ﬁgure 2. Variables b1, b2, b3 represent mulation of the problem; neither does the safe abstraction
the bits of the counter. Figure 3 shows the causal graph of the condition deﬁned above. For ﬁnding safe abstractions, a

                                                 IJCAI07
                                                  1900Atoms:
(on ?disc ?peg) ?disc = large, medium, small                        loc(pkg2) in(truck) loc(pkg1)
               ?peg = peg1, peg2, peg3

Actions:
(move-small ?p1 ?p2):                                                        loc(truck)
 pre: (on small ?p1)
 add: (on small ?p2)
 del: (on small ?p1)
                                                      Figure 6: Causal graph for the capacity restricted transporta-
(move-medium ?p1 ?p2):
 pre: (on medium ?p1), (not (on small ?p1)), (not (on small ?p2))) tion problem.
 add: (on medium ?p2)
 del: (on medium ?p1)

(move-large ?p1 ?p2):                                                                                  3
 pre: (on large ?p1), (not (on medium ?p1)), (not (on medium ?p2)), placed by the latter in action preconditions and in the goal .
     (not (on small ?p1)), (not (on small ?p2)))      Performing such substitutions it is possible to eliminate all
 add: (on large ?p2)
 del: (on large ?p1)                                  clear  atoms from action preconditions, and once these
                        (a)                           atoms do not appear as preconditions (or goals) they can be
Atoms:                                                removed from the problem entirely.
 (on ?disc ?pos) ?disc = large, medium, small           In the present example, however, this is not enough to make
               ?pos = peg1, peg2, peg3, or any smaller disc
 (clear ?pos)                                         the problem hierarchically abstractable. To obtain such a
                                                      formulation, it is necessary to invent new propositions ab-
Actions:
 (move ?d ?p1 ?p2):                                   breviating certain conditions, and substitute these into ac-
 pre: (can-go-on ?d ?p2), (on ?d ?p1), (clear ?d), (clear ?p2) tion preconditions and effects. For example the relevant con-
 add: (on ?d ?p2), (clear ?p1)
 del: (on ?d ?p1), (clear ?p2)                        ditions for the medium disc are (on medium ?peg) ∨
                                                      ((on  medium large)∧(on large ?peg)), for each
                        (b)
                                                      ?peg.
Figure 4: Two different STRIPS encodings of the Towers-of- Eliminating atoms based on “exactly one” invariants is a
Hanoi problem.                                        simple operation, easily automated. However, each invariant
                                                      gives rise to several possible – mutually exclusive – substitu-
                                                      tions, and chosing which – if any – should be applied to arrive
                                                      at a better problem formulation is not so easy, and automating
problem formulation with less “coupling” (fewer mutual de- the introduction of new abbreviating atoms even more difﬁ-
pendencies) between variables is generally better. How can cult. Also, while the substitution is polynomial in time, it
Bonet’s & Geffner’s STRIPS formulation be rephrased – au- may introduce complex action preconditions, which may re-
tomatically – so as to be if not identical to Knoblock’s formu- quire exponential space to compile away.
lation, then at least as good for this purpose?
  The atom (clear ?d)   in the second encoding is actu- 5 Composition
ally equivalent to the statement ¬∃x(on x ?d), i.e., the
atom acts as an “abbreviation” for a more complex condi- Let us return to the simple transportation problem in section
tion. This equivalence is simply a restatement of an “ex- 2, but add a capacity restriction on the truck: it can carry
actly one” invariant (the same kind used to construct the at most one package at a time. This is naturally encoded
                                                      with a new variable, in(truck), with values {(empty
multi-valued variable representation of the problem). For ex-                  }                   4
ample, {(clear large),  (on medium large),     (on    truck),  (in ?p truck)    , for each package ?p .The
small large)}    is such an invariant; thus, (clear   causal graph of the new problem is shown in ﬁgure 6.
large)  is true exactly when ¬(on medium large)  ∧      The variable loc(truck)  is safely abstractable as be-
¬(on  small large)    holds, and consequently can be re- fore, but the variables representing the locations of the
                                                      packages are now dependent, via the in(truck)  vari-
                                                      able, so the abstracted problem does no longer nicely de-
               (on large peg3)                        compose. The variable in(truck)   could be eliminated

                                      on_ d1_ d2
                                  clear_ d2
           (on large peg2)
                                          on_ d1_ peg3 by reformulation as described in the previous section, us-
                               clear_ peg3            ing the invariant fact that (empty truck) is equiva-
                  (on large peg1)            on_ d1_ peg2
                            on_ d2_ peg1              lent to ¬(in pkg1 truck)    ∧¬(in pkg2 truck),
           (on medium peg3)
                                               on_ d1_ peg1 but this does not remove the coupling between variables
                           on_ d2_ peg2
               (on medium peg2)                       loc(pkg1)   and loc(pkg2).
                                               on_ d1_ d3

              (on medium peg1)
                           on_ d2_ peg3                 However, in this problem, unlike the Towers-of-Hanoi

                                               clear_ d3 problem above, the coupling between variables loc(?p)
          (on small peg3)
                            on_ d2_ d3                and in(truck)   is “transient”. Assuming the goal is to
          (on small peg2)                    clear_ peg1
                               clear_ peg2            move package ?p  to some location (not to leave it in the
                                          on_ d3_ peg1
           (on small peg1)        on_ d3_ peg3
                                      on_ d3_ peg2    truck), the abstract plan consists of two steps: loading ?p at
           (a)                       (b)
                                                         3Alternatively, clear could be recast as a derived predicate,
Figure 5: Causal graphs of the two formulations of the Tower- using axioms as deﬁned in PDDL2.2.
                                                         4
of-Hanoi problem shown in ﬁgure 4.                       The same kind of restriction, encoded in essentially the same
                                                      way, is found in, e.g., the Gripper and Satellite domains.

                                                 IJCAI07
                                                  1901its initial location and unloading it at the goal location (recall Domain  Simpliﬁcation
that the location of the truck has been abstracted away). Al-
though the actions in this plan change both variables, the plan Gripper    Solved.
                               =                          Logistics        Solved.
as a whole does not: in(truck)    (empty truck)           Movie            Solved.
holds both at the start and end of it, and only loc(?p)   Mystery          None.
changes permanently. Moreover, the intermediate state vis- Mprime          None.
ited by this abstract plan is “uninteresting”, in the sense that Grid      Minor (∼ 50% less atoms).
the only actions that can be taken in this state that could not Blocksworld (4 ops) Minor (0 – 20% less atoms)
also be taken in the state before or after the plan are the one Elevator (STRIPS) Solved.
that completes the plan and one that just undoes the effects of FreeCell   None.
the ﬁrst. Thus, the two actions in the plan can be replaced by Depots      Minor (1 – 10% less atoms).
                                                                                 0  25
a single action, with the compound pre- and postconditions DriverLog       Minor ( –  % less atoms; small
of the sequence, without affecting the solvability of the prob-            instances solved).
                                                          Rovers           Signiﬁcant (60 – 90% less atoms).
lem, and performing this replacement for all such sequences Satellite      Solved.
breaks the coupling between the two variables.            Airport          Some (40 – 60% less atoms).
                                                          Pipesworld       None.
             c                                            Promela          None.
Theorem 2 Let  be a condition on two or more variables, let PSR (small)    Varied (0 – 50% less atoms).
A be the set of all actions whose effect includes c5, and let B
be the set of actions whose precondition includes c.Ifc does Figure 7: Simpliﬁcation obtained by current techniques on
not hold in the initial state; c is either inconsistent with or dis- planning problems from different domains.
joint from the effects of every action not in A; the postcondi-
tion of every action in A is either inconsistent with or disjoint
from the goal condition; and every action not in B whose 6 Conclusions
precondition is consistent with c is commutative with every
action in A ∪ B, then replacing the actions in A ∪ B with one Abstraction and decomposition (or “factoring”) can be very
composite action for each executable sequence a, b1,...,bk, powerful tools for reducing the accidental complexity caused
where k  1, a ∈ A and each bi ∈ B – excluding sequences by encoding a planning problem in a general problem speci-
with no effect – is safe (i.e., preserves solution existence). ﬁcation formalism, such as STRIPS. We have shown how the
                                                      applicability of these methods can be widened, by formulat-
If the safe sequencing condition holds for every effect c in- ing a weaker condition for safe abstraction and by applying
                                                      different reformulations to make problems more amenable to
volving some pair of variables V1 and V2, and if the ef-
fects of each of the new composite actions change at most abstraction.
      V     V
one of 1 and 2, this replacement removes the causal cou- Implementation & Current Results
pling between the two variables due to simultaneous change. The techniques described above, together with the action set
There may still be causal dependencies between them due to reduction method proposed by Haslum & Jonsson [2000] and
some action changing one having a precondition on the other: standard reachability and relevance analysis6, have been im-
if such dependencies exist in both directions, nothing is of plemented, though with some limitations: safe abstraction of
course gained by making the replacement.              more than one variable is limited by a bound on the size of the
  Collapsing a sequence of actions into a single action has composite DTG, reformulation is restricted to atom elimina-
also been proposed by Junghanns & Schaeffer [2001],inthe tions with a simple replacing condition, and composition to
context of solving the Sokoban puzzle, in the form of what sequences of length two. The strategy is to try each technique
they call “tunnel macros”. These sequences correspond to in turn, iterating until no more simpliﬁcations are made. In
moves in a tunnel, where there is only one “productive” direc- spite of the restrictions, some operations are still too time-
tion of movement, and also satisfy the criterion of having “un- consuming, and therefore disabled, in some domains. Also,
                                      c
interesting” intermediate states (the condition in theorem 2 different methods for ﬁnding invariants in some cases result
can be thought of as deﬁning a “tunnel” in the state space of in different multi-valued variable encodings, some of which
the planning problem). However, tunnel macros in Sokoban are more suited to simpliﬁcation than others. Thus, the sys-
serve a different purpose, viz. to reduce search depth, and tem is not completely automatic.
are not restricted to actions that cause coupling between vari- Table 7 summarises the (best achieved) result of attempt-
ables. Likewise, Botea et al. [2005] show that adding macro ing to simplify a collection of planning domains, comprising
actions to a planning problem can improve the efﬁciency of most of the domains from the 1st, 2nd, 3rd and 4th planning
search (and, in some cases, heuristic accuracy; interestingly, competitions. Many of these encode very simple problems,
so can removing macros [Haslum and Jonsson, 2000]). Yet, and indeed in many of them (those marked “solved” in the ta-
the procedure they propose for generating macros may be ble) repeated abstraction removes the entire problem, so that
adaptable to our purpose as well.
                                                         6The relevance analysis uses ideas similar to Scholz’s [2004]
  5So that if A is non-empty there is a causal coupling due to si- path reduction technique, which is stronger than the standard
multaneous change of the variables mentioned by c.    method.

                                                 IJCAI07
                                                  1902