                                                                                  NG ATNS 
                                                             Tim Finin and George Hadden 
                                         Coordinated Sciencence Laboratory,. "Universit                 y of Illinois 
                                                                 Urbana, Illinois 61801 
        Augmented Transition Networks (ATNs) have                                  code which achieves a speed-up factor of 5 to 10 
become a popular and effective tool for                                            and a size reduction factor of up to 1/2. 
constructing natural language understanding                                                The translation of an ATN network into LISP 
systems. Our own system. PLANES [Waltz 76] is                                      code is straightforward process, each state in the 
based on a large "semantic grammar" which is                                       network resulting in a simple LISP function. Our 
 implemented as an ATN network. In developing our                                  compiler, however, attempts to produce efficient 
 system, we were frustrated by numerous problems                                   code by applying three sets of optimization 
and shortcomings IN the basic ATN formalism.                                       (expressed in a simple pattern matching language) 
 Consequently, we have augmented and extended the                                  rules at different stages of the translation. 
model to overcome some of these problems. We have                                          The first set of rules defines 
 also developed an optimizing compiler for ATN                                     source-to-source transformations on ATN networks 
networks which translates them into LISP functions                                 and individual ATN states. For example, one rule 
and an interactive program which allows one to                                     will bundle any adjacent word arcs of a state into 
easily extend and modify an ATN grammar.                                           a single SELECT arc if the set of words tested by 
        Extensions to thel__ ATN. Model                                            the arcs are disjoint. 
        Some of the extensions are relatively simple:                                     The second set of optimization rules is 
the inclusion of new arc types such as PHRASE                                      applied as the ATN network is translated into LISP 
 (which matches two or more input words) and ROOT                                  code. The domain of these rules is the set of ATN 
 (which matches on the root forra(s) of the current                                arcs. For example, one rule carefully examines 
input word). Others have involved re-examining                                     the condition and actions on an arc to determine 
the basic ATN mechanism in order to alleviate more                                 if they might cause a side-effect (e.g. set a 
 fundamental problems.                                                             register). If no side-effects are possible, then 
        We have extended our ATN system to provide                                 code for generating a new register context need 
several control primitives which can be used to                                    not be included. 
dynamically prune the tree of decision points on                                          The final set of optimization rules defines 
the developing "parse." One primitive, FAIL                                        LISP source-to-source translations which result in 
 (included both as an arc type and as an arc                                       faster and/or more compact code. This set of 
action) can propagate a failure message to any                                     rules also includes transformations which can 
point on the decision tree. Other primitives                                       optionally "open code" the more common built-in 
allow one to save environments, both control and                                   ATN actions (e.g. setting or accessing a 
variable binding. This allows one to suspend the                                   register). 
processing activated by a specified PUSH arc or                                              Network Editor 
action and to continue parsing as if it had                                                    have developed a special                purpose editor, 
failed. If subsequent attempts to find a Darse                                     NETEDI [Waltdevelopez 76][HAdded a specian l purpose76] [Hadden 77], which knows about 
fail, the suspended processing will automatically                                  the structure of ATN's and takes advantage of 
be resumed in the same environment.                                                their redundancies. 
        Even with the ability to control backup, we                                       NETEDI expects as its main input a list. 
have found that the ATN model still suffers from a                                 Each element of this list corresponds to a new arc 
paucitv of control primitives. Evaluating an ATN                                   in the ATN with the following exception: if some 
state is conceptually a simple process in which                                    initial segment of the input list would correspond 
one evaluates each arc leaving a state until one                                   to a set of arcs already in the ATN, no new arcs 
 is found which can be taken (leading to a new                                     are added for these. The input list can be as 
state to be evaluated) which does not return                                       simple as a list of words which form a sentence or 
 failure. Thus the basic control primitive is the                                  phrase or complex enough to form any possible arc 
IF-THEN-ELSE-IF-ELSE... applied to the arcs of a                                   — complete with embedded tests, LISP expressions, 
state. We have found it convenient to add the                                      and transition modes. 
ability to conjoin or disjoin bundles of arcs                                             Consider one of the elements of the input 
leaving a state. For example, it is ouite common                                   list. If it is an atom which begins with a "&". 
to have a group of arcs leaving a state in which                                   it represents a PUSH arc. When NETEDI sees one or 
only one arc can possibly be taken.                                                these, it adds register-setting code to the PUSH 
        In the standard ATN formalism, there is no                                 arc; the register will have the same name as the 
easy way to encode the knowledge that if one of                                    subnet PUSH-ed to. Any other atom in the input 
these arcs can be followed but eventually leads to                                 list represents a WRD arc. 
failure, then the other arc(s) can not possibly be                                        Any arc (including WRD and PUSH) can be 
followed. Our ATN system supports a SELECT                                         represented by including its name as the first 
construct which will only allow one arc in the                                     element in a list, preceding the name with a ":" 
bundle to be followed. The SELECT construct has                                    and putting the rest of the arguments in the list. 
the additional benefit of signaling to the reader                                  For example, "(:CAT PREP)" would form a CAT (for 
that the governed arcs are locallv exclusive                                       category) arc which recognizes prepositions. So 
possibilities, distinguishing some of the                                          "((:CAT PREP) &NP)" would produce the code 
deterministic from the non-deterministic aspects                                   required to recognize prepositional phrases 
of a grammar.                                                                      assuming the ATN contained a state called "ANP" 
        In our own work we use long sequences of                                   which is the first state of a noun phrase 
single-arc states to parse special constructions                                   recognizer. 
or idiomatic phrases. This auickly results in a 
spaghetti like network which is difficult to read 
and understand. To avoid this situation and to                                                          abriel.     R.P. and Finin, T.W.; "The 
keep together code which logically belongs                                             LISP Editor";                Working Paper 1, Advanced 
together, we have defined an AND construct which                                       Automation Group. C.S.L., Univ. of 111.; 
conjoins a bundle of arcs into a single unit. The 
destination of each arc in the bundle (except for                                  r 1975* , 
                                                                                   [Hadden 77] Hadden, G.D.G.D;             "NETEDI: An Augmented 
the last arc, of course) is just the next arc in                                       Transition Network Editor", MSEE Thesis, Univ. 
the bundle.                                                                        _ of 111.: 1977. 
       These extensions to the ATN model have been                                [Sussman 72] Sussman, G.J. and McDermott, D.V.: 
built into an efficient interpreter (written in                                         From PLANNERR  to CONNIVER — A Genetic 
MACLISP) which uses a simple recursive technique                                       Approach"Ap   ; Proc, FJCC; 1972. 
for simulating non-deterministic automata.                                        [Walt:z  76] Waltz, D.L., et.al.; "The PLANES 
       I Compiler fox AIM. JteiMkfe                                                    System: Natural Language Access to a Large 
       Another major component of our ATN system is                                    Data Base";          C.S   L. Technical Report T-31*; 
an optimizing compiler which translates ATN                                            1976. 
networks into compact, efficient LISP code. This 
LISP code can then be passed through a standard 
LISP compiler to produce machine language code.                                           The work described in this report was 
Compilation of the ATN networks used in the PLANES                                 supported bb;y  ththee  OfficOffice  orf Naval ReResearcs        h under 
system and several other large parsing networks                                    contract number N0001*l-67-A-0305-0026. 
has resulted in corresponding machine language 

                                                         Natural        Language-lO:            Flnin 
                                                                             193 