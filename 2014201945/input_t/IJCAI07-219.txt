 Sequential Bundle-Bid Single-Sale Auction Algorithms for Decentralized Control

     Sven Koenig                Craig Tovey              Xiaoming Zheng               Ilgaz Sungur
          USC           Georgia Institute of Technology         USC                        USC
   Computer Science    Industrial and Systems Engineering Computer Science   Industrial and Systems Engineering
    skoenig@usc.edu         ctovey@isye.gatech.edu       xiaominz@usc.edu            sungur@usc.edu


                    Abstract                          the team cost of SSI auctions tends to be larger than that of
                                                      combinatorial auctions since the agents cannot take as many
    We study auction-like algorithms for the distributed al- synergies among tasks into account in their bids. To reduce
    location of tasks to cooperating agents. To reduce the the team cost of SSI auctions, we extend them to assign k>1
    team cost of sequential single-item auction algorithms,
    we generalize them to assign more than one additional additional tasks among the agents during each round. These
    task during each round, which increases their similarity sequential bundle-bid single-sale (= single-item) auction al-
    to combinatorial auction algorithms. We show that, for gorithms (short: SSI auctions with bundles) still consist of
    a given number of additional tasks to be assigned dur- several rounds, until all tasks have been assigned to agents.
    ing each round, every agent needs to submit only a con- During each round, all agents can now bid on bundles of at
    stant number of bids per round and the runtime of win- most k tasks and the auctioneer then assigns k additional tasks
    ner determination is linear in the number of agents. The to agents, making SSI auctions with bundles similar to com-
    communication and winner determination costs do not binatorial auctions. We expect the team cost of SSI auctions
    depend on the number of tasks and thus scale to a large with bundles to be smaller than the one of standard SSI auc-
    number of tasks for small bundle sizes. We then demon- tions since the agents can take more synergies among tasks
    strate empirically that the team cost of sequential bundle-
    bid single-sale (= single-item) auction algorithms can be into account in their bids. In this paper, we develop a gen-
    substantially smaller than that without bundles for multi- eral theory for such SSI auctions with bundles, proving that
    agent routing problems with capacity constraints. they can be implemented for small bundle sizes k without
                                                      greatly increasing the communication and winner determina-
                                                      tion costs of standard SSI auctions.
1  Introduction
We study the distributed allocation of tasks to cooperating 2 Task-Allocation Problem
agents, where each task has to be assigned to exactly one We now formalize the task-allocation problems. A task-
agent so that the team cost is small (= team performance is allocation problem consists of a set of agents A =
                                                      {a  ...a }                 T =  {t ...t }
high). Auction algorithms promise to solve these combina- 1  m   and a set of tasks     1   n . Any tuple
                                                      (T  ...T   )                        T   ⊆  T
torial task-assignment problems with small communication a1   am  of pairwise disjoint bundles ai ,forall
and computation costs since the agents compress information i =1...m, (= no task is assigned to more than one agent)
into a small number of bids, which they compute in parallel is a partial solution of the task-allocation problem, with the
                                                                      a                 T       cagent(T )
and then exchange [Dias et al., 2005]. Ideal combinatorial meaning that agent i performs the tasks ai .Let a
auctions consist of a single round, after which all tasks have be the cost needed by agent a ∈ A to perform the tasks
                                                        
been assigned to agents. All agents bid on all bundles (= sets) T ⊆ T , called agent cost. There can be synergies among
                                                                  cagent(T )+cagent(T )
of tasks and the auctioneer then assigns all tasks to agents, tasks, that is, a a       does not necessarily
                                                           cagent(T  ∪ T )   T  ∩ T  = ∅
which allows the agents to take synergies among tasks into equal a        even if          . The cost of the
account in their bids and results in a minimal team cost but partial solution, called team cost, depends on the team objec-
incurs prohibitively large communication and winner deter- tive. In this paper, we consider two different team objectives.
                                                                                             cagent(T )
mination costs. The communication and winner determina- The team cost of the partial solution is a∈A a a for
                                                                                  max     cagent(T )
tion costs remain large even if the agents bid on selected bun- the team objective MiniSum and a∈A a a for the
dles only [Berhault et al., 2003]. Researchers have therefore team objective MiniMax. We use cteam as a special opera-
recently advocated sequential single-item auctions (SSI auc- tor (shorthand) for either the sum and max operator, depend-
                                                                                    cteamcagent(T )
tions) instead [Lagoudakis et al., 2005]. SSI auctions consist ing on the team objective, and write a∈A a a to make
of several rounds, until all tasks have been assigned to agents our notation independent of the team objective. Any partial
                                                             (T   ...T  )     ∪   T  =  T
[Boutilier et al., 1999; Fatima, 2006]. During each round, all solution a1 am with a∈A a  (= each task is as-
agents bid on all unallocated tasks and the auctioneer then as- signed to exactly one agent) is a complete solution of the task-
signs one additional task to some agent, which incurs small allocation problem. We want to ﬁnd a complete solution of
communication and winner determination costs. However, the task-allocation problem with a small team cost.

                                                IJCAI-07
                                                  1359                                                        We now consider any round of the SSI auction with bun-
                                                      dles. Assume that agent a ∈ A has already been assigned
                                                      the tasks Ta ⊆ T in previous rounds for all a ∈ A. Thus,
                                                      U =  T \∪a∈ATa is the set of unassigned tasks. We leave out
                                                      the “unassigned” in the following for readability since only
                                                      unassigned tasks are bid on and subsequently assigned. A bid
                                                      b is a triple of an agent, a bundle and a bid cost (= numerical
                                                      value of the bid). If b is a bid, then we use ba to denote the
                                                      agent, bt to denote the bundle it bids on and bc to denote the
        Figure 1: Multi-Agent Routing Problem         bid cost. We now explain exactly which bids the agents sub-
                                                      mit (including how much they bid) and which of these bids
                                                      win.
3  Multi-Agent Routing                                  Bidding Phase: The set of submitted bids B satisﬁes:
We study multi-agent routing problems as examples of task- 1) for all b ∈ B, it holds that ba ∈ A, bt ⊆ U,and
                                                                                              
allocation problems, as shown in Figure 1. Multi-agent rout- 0 < |bt|≤k; and 2) for all a ∈ A and T ⊆ U with
ing problems are task-allocation problems where the tasks are 0 < |T |≤k, there exists exactly one bid b ∈ B with
                                                                        
to visit given targets with exactly one agent each. The terrain, ba = a and bt = T (= each agent bids on all non-empty
the locations of all agents and the locations of all targets are bundles of at most k tasks). For the MiniSum team objective,
known.1 The agent cost of an agent to visit a set of given tar- b = cagent(T ∪b )−cagent(T )
                                                       c    ba    ba  t   ba     ba . In other words, the agent
gets corresponds to the smallest travel distance needed to visit bids the increase in its agent cost for all tasks assigned to it
the targets from its current location. There can be synergies if it is additionally assigned the tasks that it bids on, which
among tasks, for example, the smallest travel distance needed is similar to previous work on marginal-cost bidding in Con-
to visit two close-by targets is typically smaller than the sum tractNet [Sandholm, 1996]. For the MiniMax team objective,
of the travel distances needed to visit each target individu- b = cagent(T ∪b )
                                                       c    ba    ba  t . In other words, the agent bids its agent
ally. Multi-agent routing is a standard task for robot teams cost for all tasks assigned to it if it is additionally assigned the
that needs to be solved, for example, as part of de-mining, tasks that it bids on.
search-and-rescue and taking rock probes on the moon. In Winner Determination Phase: Each collection B ⊆ B
                                                                                                
multi-agent routing without capacity constraints, every agent of bids is potentially winning iff 1) ba = b and bt∩b = ∅ for
                                                                                      a       t
can perform an arbitrary number of tasks. Multi-agent rout- all b, b ∈ B with b = b ; and 2) |∪b∈B bt| =min(k, |U|) (=
ing problems without capacity constraints are standard test a potentially winning collection of bids must have been made
domains for agent coordination with auctions [Dias et al., by different agents, since several bids by the same agent do
2005]. In multi-agent routing with capacity constraints, ev- not express synergies, and cover exactly k tasks or all tasks
ery agent can perform at most a given number of tasks (= its in case the number of tasks is smaller than k). The term |U|
capacity), for example, can take only a given number of rock covers the case where the number of tasks is smaller than
probes before its drill bit becomes useless due to wear and the bundle size k. We denote the set of all potentially win-
tear. Multi-agent routing problems with capacity constraints ning collections of bids as P (B). The auctioneer evaluates
are novel applications for agent coordination with auctions. a potentially winning collection B ⊆ P (B) of bids accord-
                                                                    cteamb
                                                      ing to the value b∈B c, called evaluation cost, for both the
                                                      MiniSum and MiniMax team objectives. Thus, the winning
4  SSI Auctions with Bundles                                                                    
                                                      collection Bw ∈ P (B) of bids satisﬁes, for all B ∈ P (B),
We now develop a blend of combinatorial and sequential team      team
                                                      c    b  ≤ c    b
                                                       b∈Bw c    b∈B  c (= the winning collection of bids has the
single-item auctions (SSI auctions), which we call sequen- smallest evaluation cost among all potentially winning col-
tial bundle-bid single-sale (= single-item) auction algorithms lections of bids). Any such collection of bids can be chosen.
(short: SSI auctions with bundles) to solve the task-allocation
                                                      The auctioneer then assigns the additional tasks bt to agent ba
problems: Initially, all tasks are unassigned. SSI auctions for all b ∈ B . At this point in time, agent a ∈ A has been
with bundles consist of several rounds, until all tasks have     w
                                                      assigned the tasks Ta(Bw)=Ta ∪ bt if there exists b ∈ Bw
been assigned to agents, which then execute the tasks as- with b = a,andT (B )=T otherwise.
signed to them. During each round, all agents bid on all non- a       a  w     a
                     k                                  We now explain why we expect these bidding and winner
empty bundles of at most unassigned tasks (bidding phase) determination rules to result in a small team cost. (However,
and the auctioneer then assigns exactly k additional tasks to
                                                      their team cost can be worse than that of standard SSI auc-
agents (or all tasks in case the number of tasks is smaller than tions.)
k), either to the same agent or different agents (winner deter-
mination phase). We call k the bundle size.
                                                      Theorem 4.1 For  all B   ∈    P (B), it holds  that
                                                                                            
  1                                                   cteamcagent(T (B )) ≤ cteamcagent(T (B ))
   One can solve multi-agent routing problems in unknown terrain a∈A a a w   a∈A  a     a      for both the
by making assumptions about the unknown terrain, such as the as- MiniSum and MiniMax team objectives.
sumption that it is traversable, making it in effect “known” and thus
solvable with auctions. One then runs another auction to re-allocate Proof: Let X and Y be any two potentially winning collec-
                                                                               cteamb ≤  cteamb
all unvisited targets to agents whenever this assumption turned out tions of bids. We show that b∈X c b∈Y c (a) implies
                                                      cteamcagent(T (X)) ≤  cteamcagent(T (Y ))
to be wrong and needed to get revised.                 a∈A a     a          a∈A  a     a     (b). Consider

                                                IJCAI-07
                                                  1360                               cteamcagent(T )                    min(k − k, |U|−k)
the MiniSum team objective. Adding a∈A a  a  to both  node at depth                   is a leaf. The bid tree
                                                                                                  
sides of Inequality (a) yields Inequality (b) since by deﬁnition is empty if this depth is negative. (The term |U|−k covers
b =  cagent(T ∪ X ) − cagent(T )   X
 c    a     a    a    a     a where  a is the (possibly the case where the number of tasks is smaller than the bundle
empty) bundle of tasks bid on by agent a in the collection X size k.) Otherwise, each edge from the node in question to
                                                          
of bids. Now consider the MiniMax team objective. By def- its k children is labeled with one of the tasks contained in
       cteamcagent(T (X)) = max    cagent(T (X)) =
inition, a∈A a    a             a∈A a     a           the bundle. This completes the construction of the bid trees.
max{max         cagent(T ), max     cagent(T     ∪
        a∈A:ba∈X a   a      a∈A:ba∈X a    a          The agent then submits bids on all bundles that label nodes
X )} =max{max       cagent(T ), max      cagent(T ∪
 a              a∈A  a     a     a∈A:ba∈X a    a      in its bid trees, calculating the bid costs as before. (The same
Xa)},   where  the  second argument  is  the  evalu-  bundle can label several nodes but, of course, results in only
ation cost of  the collection X  of  bids from  In-   one bid.) Thus, the number of bids per agent is constant for
                            cteamcagent(T (Y ))  =
equality (a).     Similarly, a∈A  a     a             SSI auctions with a given bundle size.
max{max    cagent(T ), max      cagent(T  ∪   Y )}
        a∈A a     a     a∈A:ba∈Y a     a       a  ,
where the ﬁrst argument is identical to the ﬁrst one above
                                                      Theorem 5.1 The winner determination phase assigns the
and the second one is the evaluation cost of the collection
                                                      same min(k, |U|) additional tasks (modulo tie breaking) to
Y of bids from Inequality (a). Thus, Inequality (a) implies
 team agent         team agent                        agents no matter whether the agents bid on all non-empty
c ∈ c    (T (X)) ≤ c ∈  c   (T (Y )) and thus Inequality
 a A a     a        a A a     a                       bundles with at most k tasks or submit bids on the bundles
(b).
                                                      from their bid trees only.
  In other words, each round of SSI auctions with bundles as-
signs min(k, |U|) additional tasks to agents so that the team Proof Sketch: Assume that the agents bid on all non-empty bun-
cost after the assignment is as small as possible. Thus, SSI dles with at most k tasks and that the winning collection of bids is
auctions with bundles perform hill-climbing and the resulting W . We show that we can achieve the same team cost if the agents
team cost can thus be expected to be small. Unfortunately, the bid on the bundles from their bid trees only. Obviously, the team
communication and winner determination costs of SSI auc- cost cannot be smaller if the agents bid on the bundles from their bid
tions with bundles (as described so far) are large since the trees only, a subset of all non-empty bundles with at most k tasks.
number of bids is a kth-order polynomial in |U|, the num- We thus need to show that it cannot be larger either. To this end,
ber of tasks. This is a problem because the communication consider an arbitrary winning bid b ∈ W whose bundle bt is not
and winner determination costs are bottlenecks for SSI auc- in any bid tree of agent ba. We now show that we can replace this
                                                                                        
tions with bundles, especially since the auctioneer is often bid b with a bid b so that the bundle of bid b is in a bid tree, the
centralized. Thus, SSI auctions do not scale to large numbers collection of bids remains potentially winning, and the bid cost of
                                                          
of tasks even for small bundle sizes. We now show how to bid b is no larger than the bid cost of bid b, which implies that the
modify SSI auctions with bundles so that they continue to as- substitution cannot increase the team cost since the cteam operator
sign the same additional tasks to the same agents during each is monotonically increasing in its arguments. Similar substitutions
round (modulo tie breaking) but so that, for a given bundle can then be made for all bids in W , if necessary, until all bids are on
size, every agent needs to submit only a constant number of bundles from the bid trees of the agents, which proves the theorem.
                                                                                                    
                                                                                      F =  ∪     b
bids per round and the runtime of winner determination is To prove the property, consider the tasks b ∈W \{b} t that
linear in the number of agents and independent of the number are part of the winning bids except for bid b. The following prop-
                                                                   b            b = b
of tasks. This is the main contribution of our paper and per- erties will hold: is in a bid tree, a a (= both bids are from
                                                                   |b | = |b |
haps surprising since SSI auctions with bundles are similar to the same agent), t t (= both bids are on the same number of
                                                            b ∩ F = ∅
ideal combinatorial auctions, for which winner determination tasks), t (= no task is assigned to more than one agent)
                                                         b ≤ b
is known to be NP-hard and thus needs to be approximated and c c (= the bid cost of the new bid is no larger than the bid
[Hoos and Boutilier, 2000]. The result is due to the fact that cost of the previous bid). We achieve these properties by choosing
                                                             
agents bid only on bundles of at most k tasks for SSI auctions the bid b with the smallest bid cost among all bids from the |bt|th
with bundles but on all bundles for ideal combinatorial auc- bid tree of agent ba whose bundles do not contain tasks in F ,asfol-
tions. The idea behind our modiﬁcation is that the agents do lows: We start at the root of the |bt|th bid tree of agent ba as current
not need to submit bids on all bundles of at most k tasks since node. If the bundle of the current node does not contain any tasks
some bundles have no chance of winning.               in F , then we pick the bid on this bundle. Otherwise, choose a task
                                                      contained in both this bundle and F (ties can be broken arbitrarily)
5  Bidding Phase                                      and follow the edge labeled with this task from the current node to
                                                      one of its children, and repeat the procedure. We are guaranteed to
We now explain exactly which bundles the agents need to bid reach a node whose bundle does not contain any tasks in F because
on. To determine which bids to submit in a round of an SSI F contains min(k −|b |, |U|−|b |) tasks and the |b |th tree has
                     k                   k                              t        t             t
auction with bundle size , an agent constructs bid trees, depth min(k −|b |, |U|−|b |). The bundle of this node is the bun-
           1 ≤ k ≤ k                 k                           t        t
one for each         . Each node of the th bid tree is dle with the smallest bid cost that does not contain any tasks in F
                     k
labeled with a bundle of tasks. Each edge is labeled with and has the stated properties, per construction of the bid trees.
atask. Thekth bid tree is recursively constructed, starting
with its root. Consider any node in the bid tree. It is la- As example, consider the multi-agent routing problem
beled with the bundle that has the smallest bid cost among all without capacity constraints shown in Figure 2 for the Mini-
bundles of k tasks that do not contain any of the tasks that Max team objective. The agents and targets are located on the
label the edges from the root to the node in question. Each real line. (Epsilon is a small positive tie-breaking constant.)

                                                IJCAI-07
                                                  1361                       ε    ε

Figure 2: Multi-Agent Routing Problem without Capacities

      {t1}  {t2}   {t3}  {t1,t2} {t1,t3} {t2,t3} {t1,t2,t3}
 a1   1+   1 − 2 1 −  3 − 3 3 −  1 −   3 − 
 a2   3     1+    1     3     3      1+    3

                 Table 1: Bid Costs
                                                      Figure 3: Bid Trees for SSI Auctions with Bundle Size Three
Table 1 shows the bid costs of both agents on all bundles. Fig-
ure 3 shows the bid trees of agent a1 during the ﬁrst round of
an SSI auction with bundle size three. For example, the bun-
dle of two targets with the lowest bid for agent a1 and thus the
root of its bid tree two is {t2,t3}. The bundle with the lowest
bid for agent a1 among all bundles with two targets different
from target t2 and thus a child of the root of its bid tree two
is {t1,t3}. Similarly, the bundle with the lowest bid for agent
a1 among all bundles with two targets different from target
t3 and thus the second child of the root of its bid tree two is Figure 4: Bid Trees for SSI Auctions with Bundle Size Two
{t1,t2}. Overall, the agent bids on all non-empty bundles of
                                                a1
at most three targets. Figure 4 shows the bid trees of agent Number of Targets Bundle Size Previous Number New Number
during the ﬁrst round of an SSI auction with bundle size two. |U|       k         of Bids       of Bids
Consequently, the agent bids on the bundles {t2,t3}, {t2},  20          20       1048575    1048575 (100.00%)
{t3}, which are only half of all non-empty bundles of at most 20        19       1048574    1047074 (99.86%)
                                                            20          18       1048554    1030781 (98.30%)
two targets. For example, the agent does not bid on all single 20       17       1048364    944747  (90.12%)
tasks but only on the ones with the lowest and second-lowest 20         16       1047224    809850  (77.33%)
bid cost. Table 2 demonstrates the substantial reduction in the 20      15       1042379    561204  (53.84%)
                                                            20          14       1026875    343120  (33.41%)
number of bids of one agent for different bundle sizes in case 20       13        988115    184060  (18.63%)
there are 20 tasks.                                         20          12        910595    85684   (9.41%)
                                                            20          11        784625    34510   (4.40%)
                                                            20          10        616665    12130   (1.97%)
6  Winner Determination Phase                               20          9         431909     3764   (0.87%)
                                                            20          8         263949     1048   (0.40%)
From now on, we use B to refer to the bids of the agents    20          7         137979     315    (0.23%)
                                                            20          6         60459      105    (0.17%)
on the bundles from their bid trees. Although the number of 20          5         21699      39     (0.18%)
bids is small, it is not clear whether the auctioneer can deter- 20     4         6195        16    (0.26%)
mine the winning bids with a small runtime. In the follow-  20          3         1350        7     (0.52%)
                                                            20          2         210         3     (1.43%)
ing, we construct a winner-determination rule that is linear in 20      1          20         1     (5.00%)
the number of bids and thus linear in the number of agents
and independent of the number of tasks for SSI auctions with  Table 2: Reduction in the Number of Bids
a ﬁxed bundle size. It is curious that the construction and
justiﬁcation of the winner-determination rule are rather more
complicated than those of the bundle construction.    of the items. Note that a consistent portfolio is a potentially winning
                                                      collection of bids. To ﬁnd the winning collection of bids, the auc-
Theorem 6.1 The auctioneer can determine the winning bids tioneer constructs a search tree for each sequence. Each node of the
with a runtime that is linear in the number of bids.  search tree for a given sequence (s(1) ...s(l)) is labeled with a port-
                                                      folio for the sequence. Each edge is labeled with a constraint, which
  Proof Sketch: The auctioneer needs to assign min(k, |U|) ad- can be of two kinds: 1) “t ∈ b(j)t”foragivent ∈ U and a given
ditional tasks to agents. It ﬁrst ﬁnds all different non-decreasing 1 ≤ j ≤ l and 2) “b(j)a = ba and b(j)t = bt”foragivenb ∈ B
sequences of at most |A| positive integers that sum to min(k, |U|). with |bt| = s(j) and a given 1 ≤ j ≤ l. The search tree for a given
For example, there are three such sequences for min(k, |U|)=3 sequence (s(1) ...s(l)) is recursively constructed, starting with its
and |A|≥3, namely the sequences (1,1,1), (1,2) and (3), but only root. Consider any node in the search tree. It is labeled with a port-
two such sequences (the latter two) for |A| =2. Each sequence folio (b(1) ...b(l)) with the smallest evaluation cost among all port-
represents a possible set of winning bid sizes. The number of such folios that satisfy the constraints that label the edges from the root
sequences must be O(1) because k = O(1). A portfolio for such to the node in question, as follows: If the constraint is “t ∈ b(j)t”
a sequence (s(1) ...s(l)) is a collection of bids (b(1) ...b(l)) with then the portfolio needs to satisfy t ∈ b(i)t for i = j and, for all
b(i) ∈ B and |b(i)t| = s(i) for all 1 ≤ i ≤ l. The portfolio is con- 1 ≤ i ≤ l with i = j, t ∈ b(i)t. If the constraint is “b(j)a = ba
sistent iff b(i)a = b(j)a and b(i)t ∩b(j)t = ∅ for all 1 ≤ i<j≤ l, and b(j)t = bt,” then the portfolio needs to satisfy b(i)a = ba and
that is, no agent gets more than one bid, and the bids form a partition b(i)t = bt for i = j and, for all 1 ≤ i ≤ l with i = j, b(i)a = ba

                                                IJCAI-07
                                                  1362and b(i)t ∩ bt = ∅. The node is deleted from the search tree if no As example, consider again the multi-agent routing prob-
portfolio satisﬁes the constraints. Each node with a consistent port- lem without capacity constraints shown in Figure 2 for the
folio is a leaf. Otherwise, the auctioneer chooses any 1 ≤ i ≤ l MiniMax team objective.2 For this particular example, SSI
with b(i)a = b(j)a or b(i)t ∩ b(j)t = ∅ for some 1 ≤ j ≤ l with auctions with larger bundle sizes indeed result in a smaller
i = j to generate the constraints that label the edges from the node team cost, since they are less myopic, although this is not
in question to its children: 1) “t ∈ b(j)t,” one constraint for each guaranteed in general. 1) For SSI auctions with bundle size
1 ≤ j ≤ l with j = i and each t ∈ b(i)t; and 2) “b(j)a = ba and one (where the auctioneer automatically assigns only one ad-
b(j)t = bt,” one constraint for each 1 ≤ j ≤ l and each b ∈ B with ditional target), targets are assigned to agents in the following
b(i)a = ba and |bt| = s(j). The justiﬁcation for these constraints order. Round 1: agent a1 is assigned target t2; Round 2: agent
is that at least one of them must be satisﬁed: Either some bid by a1 is assigned target t3; and Round 3: agent a1 is assigned
agent b(i)a is part of the portfolio or there is a bid part of the portfo- target t1. We write this as: a1 ← t2; a1 ← t3; a1 ← t1.
lio whose bundle includes some task t ∈ b(i)t. If this were not the The largest travel distance of any agent (= makespan) is
case, then one could substitute bid b(i) for the bid at the ith position, 3 − . 2) For SSI auctions with bundle size two where the
resulting in a potentially winning bid without increasing the evalu- auctioneer is cautious (that is, assigns only one additional
ation cost. This completes the construction of the search trees. The target) targets are assigned to agents in the following or-
winning collection of bids then is any portfolio (b(1) ...b(l)) with der, where parentheses enclose targets that are not assigned:
the smallest evaluation cost among all consistent portfolios that label a1 ← t2(t3); (a1 ← t1),a2 ← t3; a1 ← t1.Themakespan
nodes in the search trees, per construction of the search trees. There is 3 − 3, which is slightly smaller than the makespan of
are O(1) sequences and thus O(1) search trees. The depth of the SSI auctions with bundle size one. The makespan of SSI
search tree for a given sequence (s(1) ...s(l)) is at most k + l and auctions with bundle size two where the auctioneer assigns
thus O(1) since each constraint imposes an additional restriction on two additional targets (if possible) is 3 − , which is slightly
a portfolio and no portfolio can satisfy more than k + l constraints. larger than the makespan of SSI auctions with bundle size
The number of children of every node in each search tree is O(1). two where the auctioneer assigns only one additional target
Thus, each search tree has O(1)O(1) = O(1) nodes. The portfo- and the reason why the auctioneer assigns only one additional
lio of each node can be determined in time O(|B|) by ﬁnding the target in our experiments. 3) For SSI auctions with bundle
bid with the smallest bid cost that satisﬁes the constraints indepen- size three where the auctioneer assigns only one additional
dently for each position in the portfolio. Consequently, the runtime target, targets are assigned to agents in the following order:
of winner determination is O(1) × O(1) × O(|B|)=O(|B|). (a1 ← t1),a2 ← (t2)t3; a1 ← t1, (a2 ← t2); a2 ← t2.The
                                                      makespan is 1+, which is the minimal team cost since the
  Consider again the multi-agent routing problem without
                                                      bundle size equals the number of targets and smaller than the
capacity constraints shown in Figure 2. Figure 5 shows the
                                                      makespan of SSI auctions with bundle size two.
corresponding search trees for the ﬁrst round of an SSI auc-
tion with bundle size three. The underlined bids were used to
generate the constraints. Consistent portfolios are annotated 8 Experiments
with their evaluation cost.                           We now evaluate the beneﬁt of SSI auctions with bundles for
                                                      multi-agent routing problems on known eight-neighbor pla-
7  Reﬁnement                                          nar grids of size 51 × 51 with square cells that are either
The auctioneer can be cautious and assign only one additional blocked or unblocked. The grids resembled ofﬁce environ-
task of the min(k, |U|) tasks per round, namely one with the ments, as shown in Figure 1. We averaged all results over
smallest agent cost. In this case, the bidding phase changes 25 instances of the same ofﬁce environment with randomly
as follows: Every agent also needs to bid on all tasks that are closed doors. We solved multi-agent routing problems with
part of larger bundles that it bids on since it bids its agent capacity constraints using SSI auctions with bundles where
cost on single tasks. This increases its number of bids by a the agents stopped bidding once the number of tasks assigned
constant that is usually small. As example, consider again to them reached their capacity. We set the capacities of all
the multi-agent routing problem without capacity constraints agents to the ratio of the number of targets and agents. An
shown in Figure 2. Figures 3 and 4 show that agent a1 already agent needs to determine the bid costs of many bids to deter-
bids on all tasks that are part of larger bundles that it bids on mine which bids to submit. To determine each bid cost for
during the ﬁrst round of SSI auctions with bundle sizes two multi-agent routing problems, it needs to solve a version of a
and three and thus does not need to submit any additional TSP problem (where it does not need to return to its initial lo-
bids during the ﬁrst round. The winner determination phase cation) when calculating the smallest travel distance needed
changes as follows: The auctioneer ﬁrst determines the win- to visit the targets from its current location, an NP-hard prob-
ning collection of bids W , as before. Then, it determines the lem. These calculations therefore need to be approximated
                             agent      agent        to run fast. For this purpose, we used a combination of the
bid b ∈ W and task t ∈ b with c  (t) ≤ c   (t ) for
                      t      ba         ba
   b ∈ W     t ∈ b                                 two-opt and cheapest-insertion heuristics in our experiments.
all       and      t (= the task with the smallest agent Table 3 tabulates the team cost for SSI auctions with bun-
cost or, equivalently, bid cost among all winning tasks). It dle sizes one, two and three as well as approximations of
does this by comparing the bids of agent b on task t for all
                                a
b ∈ W      t ∈ b                                         2
       and      t and choosing the one with the smallest Similar results holds for the MiniSum team objective. Only the
bid cost (ties can be broken arbitrarily). It then assigns only results for SSI auctions with bundle size two where the auctioneer
this additional task t to the bidding agent ba.       assigns only one additional target is slightly different.

                                                IJCAI-07
                                                  1363