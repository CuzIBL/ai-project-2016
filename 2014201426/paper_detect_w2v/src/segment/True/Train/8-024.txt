prow step toward automatic richard waldinger univ pittsburgh richard bethesda aescrides pruw prow accepts specification calculus decides lisp construction formal prow free debugged user prow make prow lisp modifying part prow translates lisp thus prow modified prow also used quest make kind mistake grammar make syntactical easy think logically liable make mistake constructing thus producing much made simplifying make fewer syntactical complain natural find comfort noting much machine much done overcome mentioned prow prow resembles heuristic compiler simon much slagle raphael formal prow lisp axiomatized stored axiom user relationship predisuppose prcw construct prow call prover thus establishing existence prover prow call process give desired prow prover free prow also used robot circuit well lisp tried hard make reader want thoroughly prow familiar lisp automatic proving noted prow compiler user compiler fortran construct user prow supply specification prow able decide correctness used prcw omitted limitation waldinger thesis resolution prover prow robinson resolution inference rule ordinary resolution adequate lead primitive resolution atom lisp want atom tree necessarily testing primitive lisp meaningless yield must forbidden achieved user prow declare bols primitive primitive made inference rule primitive resolution primitive resolution primitive processing primitive primitive next primitive prpttebspr going inference rule primitive resolution primitive resolution primitive reader interested prow skipped user prow declare primitive allowed insipid clause clause user true axiom necessarily insipid hypothesis insipid user concerning quantifier negation make clause clause user declare also need halt clause halt clause clause user vital clause vital clause inductive halt clause declared insipid vital clause clause resolvent clause vital vital also inductively
