portfolio kevin eugene nudelman galen andrew mcfadden yoav shoham kevinlb eugnud galand jmcf shoham stanford stanford rarely best case well surprisingly phenomenon pronounced runtimes highly exhibit high runtime variance faced deciding rice dubbed nearly followed failed receive widespread excellent work distribution lowest runtime driven refinement resulted neglect many uncompetitive excellent consideration literature dissatisfaction rejected ought novel evaluated answer high time combined form portfolio time easy sufficiently uncorrected portfolio poorly reader familiar boosting paradigm machine learning recognize boosting idea combining weak classifier much stronger ensemble iterativcly training classifier data ensemble poorly portfolio work demonstrated statistical regression used learn surprisingly accurate algorithmspecific empirical hardness distribution work portfolio runtimes optimal domain feature indicative runtime distribution collect runtime data regression learn feature predicts runtime predicting runtime portfolio train feature predict time predicted fastest case past work case data collected work work constructed predicting time cplex winner determination combinatorial optimization formally also cplex heuristic heuristic data fixed size good nondominated sampled relies machine learning data training validation test portfolio runtimes test never used train runtime data collected pentium xeons linux case portfolio runtimes portfolio note cplex optimal show ideal portfolio perfectly overhead portfolio show time feature time dark despite fact much slower cplex portfolio outperforms cplex neglecting cost computing feature portfolio take optimal show frequency ideal portfolio portfolio illustrate relative portfolio make mistake time mistake costly explains portfolio time close optimal show portfolio work well even even superior focused decided portfolio reexamine reduce time take complement portfolio distribution reflecting encountered practice greatest hard portfolio full describes rejection sampling automatically show able automatically skew easiest distribution harder fact distribution time harder anything previously seen runtime distribution time distribution conclusion learned runtime used portfolio outperform constituent also used induce harder benchmark distribution case combinatorial auction demonstrates portfolio composed cplex olderand much outperforms cplex full also show reduce time spent computing feature substantially degrading portfolio demonstrate response portfolio time induce distribution hardness realism work parallel classification regression considers
