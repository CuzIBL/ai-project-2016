describes prolog vector processor call parallel backtracking enables kind process explosion compiled code parallel backtracking code compilation kind transformation code parallel backtracking simulator compiler prototype native code system expect eight time scalar processing upon vectorization enables prolog pipelined vector processor hitachi prolog transformed vectorized compiled procedural former vectorization phase latter code phase type orparallelization done vectorization phase enables prolog operation pipeline pipeline vector processor lead expectation high compiled hand achived high mlips major drawback avoid process explosion parallel processing highly naive address machine translation forbes avenue pittsburgh address process increased explosively computation unable continue resource exhaustion process explosion eight process remains computational fail describes vectorized explosion compilation vector processor parallel backtracking avoiding explosion vector combinatorial describes avoiding process explosion vector processing prolog parallel backtracking draw conclusion work vectorizing work major prolog wide sense processing transformation mainly prolog vectorization kind concurrent processing vector pipelined processing parallel processing computation fitted well vector processing hardware efficiently used vector processing kind parallel processing inflexible parallel processing kind operation fitted well vector processing compiletime transformation transformation vectorization execute prolog vector processor transformation vector processor must used type transformation enables type kanada sugaya parallel distributed processing transformation deterministic procedure procedure vector vector goal fail decrease vector dead processed masked operation list vector vector processor contrary vector varies nondeterministic procedure vector accumulated vector lengthen vector done vector processor slower scalar processor used vector high achieved vector sufficient namely hundred process initially code nondeterministic procedure append brief explanation vectorized code show code vjselect outline vectorized goal list selects list rest procedure vectorized counterpart procedure vjselect vectorized goal kanada sugaya vector goal vectorized counterpart body procedure part part corresponds clause procedure part corresponds clause part counterpart part computes vector part computes rest recursively vector vector displayed mask vector true mean vector live part vector killed invalidated vector displayed mask vector part procedure vjnerge part merges vector whole computation vector vjnerge vector vjnerge vector outputted merge vector explosion combinatorial vector processor parallel backtracking parallel backtracking avoids explosion vector parallel processing combinatorial vectorizing procedural backtracking vectorizing prolog explains vector processing vector processing vector processor vector vector explosively processing vector overflow main storage disk computation fails continue explains kanada vector vector vector step computation continued vector computation vector finish step control computation vector vector vector processed case final vector vector splitting done step whole computation done process hand backtrackings process parallel distributed processing combinatorial parallel backtracking parallel backtracking prolog explosive vector close process explosion processing prolog parallel backtracking last slightly modified applicable vectorized prolog thereby avoiding process explosion expense explains applying parallel backtracking prolog vector made must decided vector vjnerge made vjnerge parallel backtracking vector increased procedure vjnerge kept step procedure merge vector stand vector sufficient merges sufficient merge merge merging vector show vjnerge parallel backtracking procedure vjnerge vector merge vector mask vector vector vjnerge formed list vector vjnerge actually list vector vector vector merged resulting vector outputted outputted stand mean vjnerge merge dead displayed vector vjnerge succeeds make backtracking vjnerge vjnerge backtrackings handled appropreately backtracking merge failure backtracking merge done syntactic code code backtrackings occurred procedural must automatic backtracking applying parallel backtracking merging splitting vector merge merge vector former merges vector appropriately good vector arbitrary inefficient merging splitting copying vector latter merges vector actually vector latter probably copying vector latter probably good merge vector vector sufficient achieving high vector processor simulator vectorized compiler prolog mode generates vectorized prolog system outlined vector simulator computes vector kanada sugaya lated functor functor name prolog functor good simulating vector functor accessed prolog vector immutable unassignable procedure intemediate merge simulated prolog procedure code simulator computation pseudoparallel simulator decomposes resulting vector user user interface prolog prolog user type vector solusions take little time printed extract user type backtracking printed extract user user wait little vector prolog used part simulator deterministic made part procedure backtracking used procedure merge procedure decomposes vector user conclusion prolog vector processor process explosion parallel backtracking simulator code vectorizing compiler real system certainly make prolog system rank eight time mainframe machine achieves high nine time scalar processing backtrackings take much time parallel backtracking acknowledgement wish thank sakae takahashi seiichi yoshizumi hitachi continuing
