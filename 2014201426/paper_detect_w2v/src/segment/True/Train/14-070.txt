elegant standpoint high modularity concurrent lisp concurrent lisp scale system proposes concurrent concurrent lisp system concurrent lisp applying multiprocessing lisp used many system lisp lisp planner conniver backtracking coroutines searching disadvantage backtracking abandoned path tree coroutines complicated transfer control coroutines standpoint high modularity processing great computation fact lisp concurrent lisp system multiprocessing backtracking coroutines multiprocessing backtracking many lisp system backtracking fail failset backtrackkiyoshi yutaka educational processing kyoto kyoto japan abandoned path tree coroutine lisp system convenient selecting path reach goal system task coroutine scheduling disadvantage coroutines control transfer coroutines make complicated modul control coroutine coroutine path tree allocated process process path find goal process best process continue searching forward repeat process find show outline process coroutine type process process process case process proceeds concurrently path reach goal communicate process message need operation transfer control process thus process dedicated task case coroutine hand coroutines coroutine communicate mean resume operation coroutine selects coroutine agenda resume coroutine coroutine path find goal resume coroutine coroutine must keep track task also next coroutine viewpoint build derive consist many must activated subroutine coexist coroutine process system modeling used widely production system actor derive elegant convetional modularity processing concurrent lisp outline concurrent lisp concurrent baaed lisp changing feature atom preserved dynamic binding used concurrent lisp lisp ordinary lisp funct concurrent lisp concurrent manipulate data attached process starteval process mutual process system concurrent lisp many cooperating process evaluates form process concurrent lisp process evaluates form process main process activated doublet kind form process activated process starteval property process process activated parent process main process main process activated loop process terminates finish form parent terminates form evaluated process process process process parent process parent process name user main process name main process starteval starteval proc procn proci namei name process formi form evaluated process process starteval process activates process process name specified name evaluates form starteval name process procn list namei namen name must form atom form type form form parent process parameter processed type form passed newly form mean activation process form starteval recursive activation process show computing factorial recursive process activation fact lambda cond zerop lambda time termp procval starteval gensym fact data area used process classified type static dynamic data area property list process control block static association list area allocated control stack dynamic data stored static area used process body stored property list used process data stored dynamic area possessed process lambda allocated process process concurrently possessed process concurrent lisp manipulate data attached process process name process process data manipulation listed mutual exclusion process concurrent need mutual exclusion avoid illegal process concurrent lisp primitive idea originated modified adapted process synchronization interprocess communication concurrent process operator hoare serializer guarded strictly feature form process evaluates form exclusive access data area form process keep awaits holding form wait process process suspended form form form form form process wait neither evaluates form exclusive access data area process mean wait process synchronize process must form process keep awaits holding form form form form nesting allowed wait show interprocess communication process wait evaluates form assumed process setq process null process interprocess communication concurrent lisp manipulate data give truth process termp specified process terminated else waitp specified process waiting else asonterm osonterm process specified process terminated else asonwait osonterm process specified process waiting else give process process name parent firstson brother process parent next younger brother sonlist list process name process procname procnum process name specified process give process procval process specified sonnval process list process specified process used mailing process mail appends self raes mailbox process recmail mailbox concerned process empty else getraail mailbox concerned process mail cleared process synchronization interprocess communication coupled construct interprocess communication tion garbage collection processor process operates allocated main processor operation parent process process process refer free parent process show interprocess communication communication family process property ordinary lisp property atom used data area concurrent lisp property used data area process mailing concurrent lisp mailing message passing process realize mailing mailbox process control block process message process receives mail process recmail setq getmail process concurrent lisp concurrent lisp concurrent lisp repeat loop read doublet doublet print process main process activated terminates phase main process descendant process activated terminate major process control block control stack association property schedule module interpret module facom system concurrent lisp processor system processor master processor main process processor memory stack memory area area list area list cell stored area access area area literal atom numeral stack area area control stack process memory data area bottleneck memory multiprocessor installed concurrent lisp many process activated system accept thousand process lisp system japan ratio reported lisp machine lisp scale hand ratio expect system consisting lisp system scale specification concurrent lisp slightly modified adapted system major modification primitive system form form form process modification divided disjoint parameter modification imposes restriction list rplaca rplacd eliminated user main lambda data prog data csetq used csetq name list name data name name process starteval monit name mark starteval name list data termp progn monit csetq asonterm eval procval lambda progn eval mapcar name wait cond sort goal terminate name name cond greaterp name csetq plus delta mapcar list name cadr name caddr name lambda mail resume csetq plus delta mapcar name lambda mail waitp name lambda progn cset procname self eval process name cond eval procname goal cond lessp csetq cset procname self eval procname self asonterm main greaterp recmail wait resumed cond recmail getmail resumed asonterm continue addl lambda prog temp ntemp setq temp expand make temp setq ntemp name temp next cond proc ntemp halt ntemp mark temp eval procname maxe lambda prog bdlist setq bdlist eval procname mapcar lambda bdlist lambda prog temp setq temp name caar cond proc temp progn csetq name temp name temp starteval temp lambda terminate evai procname halt lambda progn cset procname self wait eval procname asonterm note atom absent delta name data make process name sort sort test eval evaluates expand expands next proc name test name show main part puzzle used main process monit process process main process activates monit process process examines boardmonit process process process reach monit selects process reach goal parent process process searching process examines expands activates show process concluding elegant backtracking coroutine descript lisp sense duce concurrent feature lisp process name delta standpoint concurrent lisp part compatible lisp concurrent part also concurrent lisp control backtracking coroutines multiprocessing lisp system dinary lisp parameter passing system continuation scheme concurrent lisp concurrent lisp make message passing plasma thus concurrent lisp used also host system becoming progress tecture system save construction maintenance concurrent lisp system work well host acknowledgment thank associate sophia masaki kyoto contribution
