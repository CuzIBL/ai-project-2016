golog successfully control robot perhaps greatest user constrain executable plan flexible planning golog planner integration golog planning sense planning formulated part golog planner subset plan pddl show semantics understood progression calculus underlies golog thus embedding golog show golog integrated planner database resulting system golog golog levesque successfully control robot burgard reiter calculus reiter precondition combined imperative construct well perhaps greatest golog user constrain executable plan flexible planning golog planner grid task deliver passenger pickup dropoff moving left grid golog agent highlevel control specified like passenger served passenger plan route follow route pick passenger plan route follow route drop planning specified golog trying nondeterministically goal satisfied reiter quickly infeasible even grid planner like hoffmannand nebel bonet geffner hand capable handling much planning seems natural combine golog planner planner pednault subset plan pddl long integration arise expressiveness correctness embedding calculus full firstorder restricted finite domain literal difficult suffice simply mapping companion eyerich expressiveness correctness need make sure plan returned planner goal also legal plan calculus semantics pddl subset long term transition lifschitz semantics strip lifschitz roughly literal transition plan operator deleting literal extending work reiter able show semantics captured precisely progression calculus refers updating conclusion drawn drawn nice purely declarative semantics variant calculus lakemeyer levesque reiter calculus translation calculus simpler term worry semantics semantic like progression simpler arbitrary fixed universe discourse simplification lead loss expressiveness fact lakemeyer levesque showed capture precisely fragment calculus golog establishing plan turn embedding planner golog latest hoffmann nebel indigolog sardina incorporates reiter planner progression showing golog pure golog proceeds show formulated next formal semantics mapping progression establish correctness updating progression integration golog modal dialect equality simplicity fluent rigid connective modal operator term connective like used usual abbreviation term built primitive usual ground term simplicity sort distinct sort calculus lump term read hold hold call free sentence fluent operator mention used executable type unary semantics intuitively determinewhich fluents true initially also formally pair uation calculus operator show semantic correspondence also considers epistemic operator need left ground ground fluent atom mapping substitutionally rigid term treated isomorphic fixed universe discourse levesque lakemeyer name used domain sentence mean simultaneously replacing free occurrence term sentence sentence read logically entail mean read abbreviates reiter sentence mention fluents form post finite fluent sentence singleton fluent free post finite successor axiom fluent fluent free idea represents database precondition axiom post successor axiom fluents incorporating reiter reiter frame pddl subset strip supporting equality typing also precondition negation disjunction quantifier finite list type finite list form defining primitive type side distinct finite list fluent list type abbreviated finite list primitive finite list operator goal form precondition item distinct forbids type also also implicitly type supertype type case planning simply finite ground fluent atom ground literal operator triple whereis list type precondition free constructed item name operator parameter precondition atomic equality atom precondition precondition loss generality form kind fluent stand precondition hold true afterwards taxi domain operator goal operator move true xcoord ycoord xcoord ycoord connects xcoord ycoord xcoord ycoord connects move taxi four main cardinal move lead grid moving taxi passenger accordingly pickup passenger understood list pair xcoord ycoord passenger picking someone taxi passenger noone taxi hold person time drop passenger true taxi passenger drop taxi occupant closed connects east connects north goal passenger xcoord ycoord long semantics applying operator case idea roughly closed ground atom operator precondition satisfied deleting hold hold mapping generalize reiter show applying operator corresponds form progression constructing successor axiom post coincidence normal form resembles axiom used reiter construct successor axiom frame generalizing also pednault transform operator successor axiom mean disjunct successor axiom conjunct ensures true instantiation consistent type semantics defines fluent type additionally type successor axiom applying move xcoord ycoord connects move xcoord ycoord connects pickup drop passenger passenger stated operator mentioned possibly truth construction incorporates frame post sentence xcoord ycoord passenger taxi taxi passenger passenger precondition axiom precondition axiom case distinction taxi move taxi passenger pickup xcoord ycoord passenger taxi drop passenger encode also typing ojki sentence sentence form type primitive type ojki declared type sentence form declares type abovesentences establish type consistency operator form post ensures fact remain true successor encode case closed atom mentioning literal literal consisting xcoord ycoord taxi passenger taxi passenger taxi passenger false correctness note consequence construction lemma operator instantiation parameter parameter fluent satisfiable type satisfied satisfied type show correspondence semantics deleting literal progression derived reiter progression simpler fact need arbitrary sentence progression ground term post sentence fluent fluent post post post primitive abbreviatesstands mean intuitively observer looking forward time impossible distinguish satisfying satisfies post translation easy progression finitely many open additionally case case literal deleted dels case correspondsprecisely applying theaccording semantics long ground applying construction consistency hold progression case case hold case satisfiable progression want progress move south note reader axiomatization connects instantiation entailed disjuncts move entailed instantiation connects east connects north progression consisting xcoord ycoord taxi passenger taxi passenger taxi passenger false tell closed operator semantics progressing case prescribes applying operator easy show extends arbitrary legal plan also legal plan golog golog calculus lakemeyer levesque well core golog primitive primitive formed construct imperative procedure nondeterministic flexibility full planning primitive eclipse prolog indigolog courtesy hector levesque sardina semantics indigolog feature progression sense primitive indigolog also reiter planner specified golog procedure goal plan take resume translation taxi domain used throughout test passenger atdest passenger atdest atsamepos pickup atdest drop passenger endwhile atdest stand xcoord ycoord atsamepos abbreviates xcoord ycoord summarizes varying grid size passenger indigolog indigolog replaced call planner hoffmann nebel legal plan case test four distribution passenger carried pentium main memory prob size golog golog clearly show golog planner compete smallest missing test minute aborted want emphasize competing planning system classical planning envision combined system inefficient fail case gathered illustrate idea robot constantly transporting item warehouse robot execute thousand sensing servicing transportation request seem feasible whole offline planner certainly indigolog task role planner subtasks optimal schedule pending request golog slow believe ground work conclusion showed combine golog planner declarative semantics progression calculus also considering fragment pddl long feature time preference also formalism like flux thielscher family gelfond lifschitz hope lead convergence planning largely separated inception strip acknowledgment work partly supportedby grant
