lisp machine architectural even architectural lisp philosophy derive perceived clarity code concomitant ease lisp system assembly microcode excellent opportunity architecture microcoded machine parallel operation circumstance loss microcoded made philosophical partially forfeited ease ease certification case portability lisp compiler sufficiently code sacrifice compiler sacrifice diminish centered major tool compiler assembler subset lisp target lisp maclisp lisp system compiling assembling constructing binary system disk file compiler brook sophisticated optimizing compiler rabbit compiler steele compiler wulf kernel manipulates data generates pointer compiler must arithmetic quantity retrieve data fixnums code compiler addressing mode optimizing assembler take care optimization literal must upon loading build core disk file build data skeleton core stack stack frame vector register copy atom kernel storage word file linking compiled maclisp used target lisp routine substituted routine load assembled lisp file routine linking access simulated data access used target lisp linking system lexical reader debugging tool part system garbagecollector interface disk file major concern ease lisp code system concern portability difficult piece code difficult code debug garbage collector routine garbage collector operates data normal lisp code traditionally assembly system defines operate pointer compiler compiler code code supplied anticipated writer code writer template code compiler register allocator supply addressing mode data transfer routine proven debugged relatively modification made worry early commitment storage layout register assignment code tested lisp tool thus code isolated lisp code latter eliminated testing lisp system spectrum architectural philosophical outlook spectrum mentioned portability spectrum spectrum lisp system lisp system occupy portable system occupy portable task microcode comparable task runtime system portability compiler assumes code portable code stack machine compiler code stack machine emitted microcode macrocode else must expanded native machine code cmacros expanded expanded part last compiler depend render high high difficult runtime system lisp piece system subprimitives code portability system spectrum portable lisp gris closest lisp term true compiler burton moore system microcode code demonstrates mismatch masinter gabriel gabriel rees early compiler adapted compiler graph derived tree lisp code node graph represents lisp construct backpointers node link pair node node node commitment architecture scheme part compiler assumes register illustrates style demonstrates compiler comparing brook compiler runtime handcoding take fixnums ignoring code defun rest nums nums nums null nums opencoded code seen assembly coding difficult architecture code comprises test properly rest list move register nums manage loop computation five jump beginning code test bottom loop code major optimization eliminates call listifies rest taking stack easy compiler optimization moment difficulty success portable machine existence portable compiler compiler code much microcoding hand much runtime system assembly code need lisp code lisp consing routine accessed simpler normal lisp lisp compatible maclisp moon absence portable compiler desirable compiler code brook lisp compiler move highly optimizing compiler statistic compiler understands form lisp primitive subprimitives code normally line assembly code whole lisp system lisp code compiler assembly avoid overhead lisp list must interact storage allocation data fast consers carefully compiler compiles fast procedure call consing lisp consers line code primitive operation notably interface operating system need referred piece lisp code code primitive easy code primitive open close file transfer ascii quarter word buffer thence file transfer ascii terminal line code trap handler also fall line code long code operation lead identical lengthy code fast consers used replace jump copy code lisp caching gabriel line code lookup bind cache stack functionreturn interface vector list unbundled onto stack register line code conclusion bulk time optimizing compiler clean part remainder lisp system debug minimizes need squeeze ounce need understandable modifiable lisp rapidly architecture used widespread
