debugging wolfgang mayer markus stumptner computing centre south australia mayer developing automatic debugging area year debugging borrowed integrated classical reasoning engine test sample used debugging show precise explanation developing tool engineer locating area last increasingly maintain syntactic semantic property extends past diagnosis mainstream oriented java concrete show used well past modelling adaptive refinement refinement process target loop identified main culprit imprecise diagnostic refined reasoning conflict diagnosis automatic debugging outline adaption module debugger classical framework series outcome work concludes mbsd debugging debugging mbsd diagnosis locating mbsd introduced console goal identifying incorrect clause vhdl java behaviour system behaviour system system receive behaviour supplied system behaviour anticipated behaviour used identify componentsthat assumed deviate fromtheir normal behaviour behaviour idea adapting debugging role system reflects behaviour incorrect test case anticipated used assumed behave differently observedmisbehaviour partitioned componentswhich formthe block explanation componentcorrespondsto fragmentof text diagnosis expressed term fault operate normal mode specified abnormal mode behaviour intuitively mode corresponds modification partitioned five representing representing assignment mode leave undetermined possibility expand assignment rendering undetermined loop iteration altered formal semantics test case submitted conformance testing module reflecting fault consistent test case consistent test case specification possibly satisfies behaviour specified test case case anticipated mbsd engine computes explanation term mode assignment invokes conformance testing module explanation process iterates explanation formally mbsd framework reiter diagnosis extendedto handle multiplefault mode mbsd relies test case specification fault represents explanation test case describes anticipated debugging debugging triple text consideration test case derived block explanationsreturned debugger simplicity presentation assumed fault explanation modified exhibit deviating behaviour remaining exhibit normal behaviour incorrect behaviour explanation fault consistent explanation debugging problemiff test case derived altered reflect violate assertion describing specified test specification semantic fault fault test assertion infeasible assert test specification representing line abnormal case terminates satisfying fault line misbehaviour left undetermined line satisfies assertion explanation explanation intuitive precise test undecidable must approximated literature ranging purely introduces borrowed construction vhdl early java static fixed representing test case fault used successfully debug vhdl dynamic lookup handling lead java mayer stumptner constructed dynamically taking feasible test case generalised take fault test case introduced presentation derived graph representing graph graph tuple finite vertex directed edge andv distinct exit vertex vertex graph edge transforming vertex test specification proceeds graph system edge final vertex reached depicts graph derived edge connecting successor loop line induces successor transition representing case loop entered transition representing loop termination flow graph induces trace traverse loop four time stop case specified part undetermined fault potentially infinite path must followed graph finite concrete concrete semantics replaced formally framework lattice concrete safe note infeasibility represents resents ordering greatest operator framework pair galois connection concrete reverse mapping semantic operating domain graph computing fixpoint case lattice infinite height graph cyclic widening operator must termination widening operator selectively discard computation mutually dependent eventually converges system fixpoint derived backward guaranteed terminate work variant bourdoncle bidirectional forward backward repeatedly refine backward derived terminate must hold left undetermined dynamic creation utilise debugging must lifted domain replacing counterpartsand translation assumed assertion evaluated framework concrete dynamically allocated data finitely purely static fixed graph modelling graph constructed dynamically assertion fromthe test case specification path path ignored reached path followed remaining framework thus middle ground purely static dynamic determining consistency fault test case outlined assertion construct graph forwardabstract semanticsand backward implying assertion violation analyse graph forward thenew programstates eliminate realised repeat step fixpoint reached case satisfying test case specification explanation consistent test case benefit dynamic system concise significantadvantage dealing path representing java runtime thrown path actually followed ambiguity control flow thepurely static dynamic data deteriorates dramatically presence loop graph sufficient good partially evaluated leading tighter remaining case potentially accessed calledmethod fixpoint computation replaced native fixpoint undetermined many fault affect minor part proceed normally unaffected consequently many alternative branch must purely static eliminated mbsd examines case proceeds normally line reached lead undetermined proceed normally ambiguity control flow arises line fact trace reduces linear backward derives must hold last remaining occurrence undetermined graph consistent explanation refinement partially facilitate refinement loop recursive call loop call conflicting case inconsistent loop must expanded case loop call terminate iteration recursive call user loop call expanded lost widening heap regained potentially leading contradiction elsewhere achieved informed restructuring automatically derived property illustrate refinement rely mbsd engine examines explanation loop assumed incorrect loop evaluated uniquely loop iteration loop approximated widening operator assertion satisfied leading backward reveals must also hold loop conflict loop subsequently loop expanded true fault process repeat stop leading proved assertion violated backward derives eliminates explanation fault flaw hardware diagnosis mbsd great difficulty fault manifest structural dynamic modelling flexible fault modifying originally affected behaviour addressed appropriately modelling dynamically allocated data benefit scope fault precisely crude modelling mbsd fraction undesirable explanation expressive specification behaviour believe fault mode deal effectively fault mbsd well slicing reader interested referred slicing classic slicing eliminate influence distinguished pair slicing criterion hypothesis fraction contributes rest pruned away reduce debugging static backward slicing mentioned slicing criterion recursively collect influence skipped also process repeat fixpoint reached static quickly even remaining remains dynamic slicing considering dependency arise test case static slicing dependency followed contributing collected dynamic much static counterpart many control dependency long remain static slicing criterion remaining ignored relevant computation test case dynamic slicing computes seen case loop static dynamic mbsd numberof approacheshavebeen introduced wotawa static dynamic slicing case abnormal slicing stating hold mbsd mbsd extend dependency tracking interpretationbased concrete semantics relies statically constructed accurate poor collapse loop iteration recursive call precisely test used debugging siemens test suite transcribed java debugging test bench used debugging retained test line code comp represents diagnosis used construct explanation sslice dslice exec static dynamic returned explanation time averagediagnosis time time forthe fault explanation limitation diagnosis listed fault indicated explanation differ significantly static slicing warrant overhead variant fault tested eight test case variant test reported variant test case slight test case detected test adder test case attributed fraction test case test case seen static slicing dynamic slicing many case much test case dynamic little contribute final comparing seen improves case fact case fewer explanation explanation missed comparing slicing providessignificantly fewer explanation computationally demanding slicing millisecond note optimised rely java visualworks smalltalk work delta debugging isolating root failure minimising exhibit fault systematically explored minimised resulting root explaining fails checking locate fault comparing trace leading erroneous misbehaviour identified focussing trace deviate slightly passing failing test case trace also synthesise correction faulty specification behaviour used post heuristically synthesise correcting fault able correction automatically formal specification mbsd conclusion introduced debugging illustrated centred around simulation outlined debugging notable achieved difficult debugging well interpretationbased considerable slicing debugging reduction explanation static slicing roughly conversely computationally demanding optimisation applicable interactive adder binsearch binomial bubblesort hamming permutation polynom sumpowers tcas name comp sslice dslice exec time debugging ongoing work broadening fault mode deal wider fault assignment incorrect missing swapped user incremental specification behaviour automatic verification lead mbsd engine fast powerful adaptive conformance checker
