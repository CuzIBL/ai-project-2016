examines lisp view parallel computation identify exactly parallel really lisp construct realizing case augmenting lisp parallel construct examined critiqued parallelism lisp main lisp parallel code clever compiling parallelize code attractive code modification relief conceptual overhead parallelism dusty deck suffers hard particularly true lisp show much well flow control fortran relatively successfully compiler parallelism achieved parallel construct lisp idea help compiler parallelism construct construct used conceptual burden degree burden elegance simplicity construct used construct lighter conceptual burden construct able hide protect inherent parallel side lisp suffers code must rewritten construct take parallelism defining construct fulfills goal placing conceptual overhead sense parallelism suitably expressed area progress made parallel construct lisp exactly opportunity parallelism lisp really seem construct take pure lisp parallelizing lisp applicative many lisp concentrate call control parallelism control parallelism viewed mediumor parallelism call lisp procedure call good type parallelism parallel lisp remote procedure call fork process procedural parallel block computation encapsulated computation call data parallelism data parallelism corresponds closely vector parallelism idea data data parallel long dependency data distributing task call processor distributes data invokes processor form parallelism mimd stream data stream stream data stream term used classifying parallel architecture type computation particularly suited felt finer grain architecture simpler numerous processor simd conversely grain fewer processor mimd architecture term also used distinguish machine remember actually refer computation architectural case deal exclusively form parallelism interestingly compiler dusty deck seen also seem deal exclusively form parallelism work done area combining form parallelism need recognized parallel lisp date little work done area surprising distinction form reality weak true lisp continuum code data clearly take case parallel seen form control parallelism view bundled sent processor evaluated case viewed occasion exploiting data parallelism data case distributed processor case moving data control view vector resides processor invoking vector distributing vector processor step ignored simd broadcasting code processor code stored processor broadcasting pointer command control broadcasting processor time must distribute vector processor well viewed distributing code data processor broadcasting eval form processor synchronization step viewed case subject distinction control data parallelism opportunity parallelism lisp actually case mentioned concentrate construct dialect lisp lisp parallel lisp text refer lisp construct used parallelism case construct indicated italic normal lisp construct indicated typewriter font multilisp lisp multilisp scheme dialect lisp treat lisp lexically scoped like lisp distinguish lisp dialect lisp construct base dialect construct multilisp notable elegance economy construct introduces parallelism fact construct used parallelism basically promise computation creating implicitly stating okay proceed computation calculated calculated calculated time computation computation occurring time creating thus carried time rest computation danger side caused must depend ordering rest computation responsibility side unfortunate responsibility conceptual overhead overhead construct deal underestimated overhead halstead describes data modular discipline setq build cell representing promised atom printcons defun printcons conscell print conscell print conscell four possibility evaluated case coerced computation proceed dealing regular cell evaluated case printcons wait evaluated proceeding evaluated case printcons wait evaluated proceeding evaluated case printcons must wait continuing multilisp construct delay delayed corresponds regular delayed construct infinite data nonterminating computation wished fist prime prime delay defun prime delay prime biema multilisp computation terminate delay case resource lost computation ultimately storage exhausted data delay computes removed changing resource used true delay removing delay computation infinite data delay thus form lazy represents reduction ordering computation eager also computation begun necessarily anyway case multilisp eager construct construct computation halted prematurely construct computation able halt freeing computational resource eager computation alternate process returned time garbage collected system multilisp construct pcall pcall simultaneous continue fmished evaluating differs call pcall thus much form parallelism midway undefined flow control pcall simulated call access multilisp primitive identity operator touch evaluated fact used pcall construct multilisp call multiprocessor underway processor maintains queue pending processor task access processor pending queue find execute unfair scheduling computational progress made system deadlock scheduling saturated system behaves like processor sequentially call removed code evaluated coerced changing flag stored lisp item represents extra indirection pointer traversal indirect removed garbage collector qlisp construct qlisp semantics multilisp form much construct qlisp expressive great construct parallelism qlet qlambda qlet much expect binding parallel qlet take extra usual binding pair extra evaluates qlet behaves exactly like evaluates atom eager qlet spawn process continues computation evaluates neither eager qlet spawn process wait finish evaluating continuing computation last semantics qlet closely resemble pcall multilisp used mimic semantics exactly placing call qlet assigns qlet evaluates eager used simulate call passed qlet qlambda take qlet form closure namesake lambda evaluates qlambda behaves exactly lambda evaluates eager process representing closure spawned soon closure evaluates something eager closure process process closure qlambda requiring middle prog spawned computation continues upon spawned process discarded process closure spawned requiring spawning process wait operator supplied alter wait obvious semantics construct give semantic qlisp deal handled multilisp happens spawned process throw happens spawned process throw catch outside scope catch qlisp process spawned scope catch killed construct qcatch behaves slightly differently qcatch normally thrown wait process spawned returning thrown kill subprocesses qlisp defines semantics form spawned process ensures cleanup form upon nonlocal exit construct kill process give type eager multilisp qlisp flavor multilisp construct multilisp much made qlisp process scheduled busy processor time creation multilisp process processor process time swapped round fashion qlet qlambda dynamic tuning process feature multilisp also left runtime system connection machine lisp connection machine lisp introduces parallelism form data control parallel data connection machine lisp xapping distributed mapping xapping ordered pair pair domain mapping representing connection machine lisp domain pair xapping identity xapping domain successive xector john torn andy john andy connection machine lisp also infinite xappings infinite xapping xapping take domain also connection machine lisp mapped universal xapping also lisp lazy xappings yield xapping squarte root sqrt xref sqrt xappings type lisp many operator meaningfully connection machine lisp defines main operator xappings operator xapping operator take applies xapping parallel take xappings parallel xapping sharing omitted acona domain intersection domain xappings operator main parallelism machine lisp main operator reduction operator take xapping binary reduces xapping applying binary xapping xapping undefined used associative commutative nonassociative occasion lambda arbitrary xapping connection machine lisp made regular operator operator form serve communication operator operator passed binary xappings semantics operator xapping specified specified pair resulting xapping allowed xector pair combined binary supplied operator pmax young dead young database xappings qualitative young dead qualitative collide combined heuristic best oldest terribly good heuristic case interprocessor communication operator clearer considers person stored processor xapping transfer processor philip george processor label young combined operator parallelism connection machine lisp parallelism pcall construct multilisp pointed steele distinction mimd pcall simd operator connection machine lisp pcall evaluated parallel synchronous assured fact multilisp qlisp asynchronously connection machine lisp xapping biema synchronously processor case connection machine lisp control centralized case multilisp distributed centralization control definitely reduces conceptual overhead well computational overhead requiring call eval many call occurring processor price overhead opportunity exploiting control parallelism many lost steele comment suggesting lost control parallelism reintroduced xectors construct connection machine lisp otfuncall multilisp construct pcall seen parallelism lisp case process style parallelism code data bundled sent processor distributed data code sent synchronously major remains exploiting parallelism merged encompass exploring examine lisp opportunity parallelism actually obvious control parallelism lisp binding construct seen pcall multilisp qlet qlisp form parallelism parallel unfortunate seen multilisp qlambda qlisp parallel block parallel prog case lisp call evaluated parallel line treat transaction execute parallel redoing conflict detected hardware also investigated control parallelism evaluted parallel conditionals also parallel natural expressing eager parallel imagine spawned parallel killed soon false true semantics form must made clear conditionals case also parallel eager fashion evaluating antecedent parallel parallelism desired consequents commenced terminated actually used eager bring computation used halt side undone scheduling must infinite computation resource data parallelism lisp must look data control used traverse data parallelism fall type lisp list vector list lisp need parallel control operate data exploited construct mapping construct recursion parallelism construct much parallelism exploited processing flow control lisp mentioned complicating compile time mapping hand parallelized mapping construct applies passed list modeled construct connection machine lisp recursion simplest case reduces iteration tail recursion comment made also case recursion iteration body recursion recursion step iteration body iteration iteration step compiler recursion also used mapping construct distinguishes recursion also data tree structured data traversing data parallelism dependent data much parallelism balanced unbalanced tree type parallelism exploited control data parallelism mere must data view distribution tree structured data distribution tree fact accomplished xappings connection machine lisp recursive lend parallel tower hanoi classic examining lisp seen exactly opportunity parallelism judge extent studied successful clear none control data parallelism coherent parallel goal convenient form parallelism
