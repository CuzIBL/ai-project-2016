work progress automatic prover recursive intend transformation mathematical prover extendible user serf analogous prover permit many influenced proved thus relevant lemma prover employ lemma proved correctness compiler correctness reported naval foundation grant force work progress automatic prover like lisp prover system prof considerably serve analogous sense easy data attache mccarthy floyd hoare business system mathematical proving system formalized floyd correctness automating system conjecture applying relevant axiom many subgoals undesirable term formulate cleanest subgoal thorough behave also progress comparing subgoals look looping subsume subgoal subgoal proving much bledsoe system automatic lisp prover demonstrate automatic system take proved proper construct complicated idea able user relevant lemma proved beforehand compiler user suggesting lemma aubin cartwright produced automatic provers recommend thesis anyone mechanizing prover system automatic correctness compiler next lemma employed guide prover lemma lemma summarizes system royer arithmetic recursive referred system prover recursion induction used compiler limitation ennumerate system proved sent upon request also welcome request code system admits arbitrary recursive lisp prover primitive recursion regard definitional axiom used expand call recursive induction derive induction solely proven lemma recursive suggest induction domain partitioned disjoint type user free axiomatically property free conjecture understood even distinguished axiomatization containing remain even axiomatized constrained axiomatically recursively aubin cartwright typed typed type true false sole respective false true false arithmetic atom stack axiomatically automatically axiomatizing property virtually identical burstall close style clark tarnlund also induction induction noetherian induction burstall induct ordering system correctness optimizing compiler exercise many heuristic system lemma system competence handling significantly lisp prover presentation axiom used system readable commentary discovered compiler axiomatically introduced distinct atomic stack simplicity want optimize compile numerically valued composed binary time plus recursive formp recognizes form mentioned formally main wish optimized compiled code form stack pushing onto stack unoptimized form formp exec compile envrn push eval envrn compiler compile work pass optimize folding time plus optimized time optimizing compiler call codegen reverse codegen form insj generates form treating previously laid form codegen pushi pushv consing onto pushi hardware push onto stack pushv push form codegen assumes argl code argl code mean hardware push reader encouraged inspect codegen note compilation take produced recursive call codegen argl codegen reversed form time plus producing copy aubin automatic employing lemma analogous reader lisp prover knowing system correctness compiler inadequacy permit formulate codegen type handling inadeaurte made lemma lemma used system lemma many lemma rewriting axiom lemma open simpler sense prover axiom lemma axiom lemma sequents deduce sequent form form used term false form used boolean used true decided hypothesis formp optimize established true care avoid regression repeated commutativity pumping term avoid form unless thus lemma plus plus boyer trick induction conjecture find conjecture open call conjecture find subexpressions occurring instantiating conjecture ordering thus lead naturally plausible ordering ntuples recursive descends recursion answer system imposes responsibility upon user lemma term lemma lemma term term wellfounded ordering lessp nonnegative induction lemma time recursive induction induction capable examining subset find also recognizes lexicographic ordering induced ordering lemma derive fact lemma arithmetic manipulate case word size host machine obvious digit base learned grade computing arithmetic maclisp base binary machine base correctness must mapping back convert base base base digit stop divide base remainder digit recursively converting quotient base base embodied series digit note recurses quotient divided base lemma justifies recursion analogously induction unwind quotient quotient divided neither actually untyped arithmetic legal nonintegers treated thus stronger neither thus wanted induction form base cognizant lemma plausible induction base base base base base base base quotient base base base note induction hypothesis proved instantiation take tuple tuple lemma term quotient base base appearing hypothesis reappear open conclusion observe employing proved lemma prover insure done soundly induction quotient case produced unsound induction assumed prover system proved lemma induction note quotient recurses turn justified proved lemma stating quotient lemma proved system accepting discover plausible induction scheme scheme precisely system mapping back inverse modulo base base numberp lemma crucial system base base base base plus rover lemma choosing ntuples wellfounded last simply irrelevant thus system plausible recursion free throw remaining compiler recall codegen form recursion form digging recursive call thus laid unchanged call arbitrarily acceptable form induces thus system know conjecture involving codegen form induction form leaf free instantiation want simpler conjecture involving codegen form free system know sound induct form optimizing compiler axiomatically specified primitive used numberp true false true false push stack pushed onto stack popped stack getvalue undefined axiomatically specified numeric fact crucial originally tried avoid deep lemma driven ordering used subgoal induction assumes terminates plus recursive call many crucial able induct subset knowing sufficient ordering unnecessarily clutter induction seem like mere inconvenience toorestricted subgoals induction work progress feature ourrent system prover encouraged success extending lisp prover loss able system commentary mechanically produced prover response user command append flatten comment base case step note case conclusion namely proved hypothesis proved sends sends picked hypothesis term reappear conclusion opened true thus proved proved append term occurrence replaced append proved prover produced hypothesis proved
