manipulating access codasyl database meet specification algebra prolog automatic explores transformation induced data generating data case processing data representing relationship applies codasyl database enormous secondary storage redundant pointer traverse many thus changing generating alternative disc access concern manipulation formulated algebra specifies relationship retrieved data stored data item used access access path desired item exploring alternative consequence access path bell embodied system astrid gray typing algebra generating codasyl database idms user view benefit twofold give user view codasyl database thus able think term manipulation high operation algebra work access operation pointer database embedding operation fortran code complicated derived data system endeavour find access path computes storing costly database complicated hand competitive trained code system user type algebra parsed manipulated rewritten algebraic form rewrite rule assist transformation next concrete codasyl data traversal system read stored traversal manipulated combined slow discarded done good best modification remainder costed database access time used fortran code database system oriented accessing thousand batch producing substantial printout thus translator matter handle system handle restricted view restricted astrid system manipulation rewritten prolog describes show prolog well adapted task layout describes transformation affect resultant best carried gray moffat algebra prolog describes traversal used piece describes traversal used prolog used combine traversal snag draw conclusion work work burstall darlington system recursion manipulated play role algebraic system rewrite concrete data term coding traversal represents data tarnlund addressed access mode storage tarnlund studied answer representing derived calculus looking derivation held binary tree transformation user asks algebra system improves rewriting database tuples containing fixed viewed column database used come database view database algebra treated derived operation algebra operation used adapted codd extend gray join operation generalised intersection formed cartesian selecting tuples joining selects tuples extends tuples column algebra rewritten algebra rewrite rule prolog rule handling commutation transformation move operation involving ease join stadium allocation stadium cordoba year placings stadium allocation cordoba placings placing year traversal codasyl database user think actually complicated doublylinked transformation need path traversal thus codasyl relationship used alternative base traversal held codasyl database type linked pointer uniquely type show linkage precisely piece code realises tuples time accessing pointer modifying thus stored database placings hold base traversal piece code loop traversal internally prolog obvious base traversal placings generating tuple year game venue venue game year year game venue year link team year link team mean ccess visita type owning year mean belonging type ambiguous specified mean mean access containing mean type database corres ponding code owned owned venue thus arrow traversal represents code note game must generates need modification algebraic operation modification traversal derived thus derived traversal modified next operation done inserting year resulting traversal operation specified user many commutative gray moffat join join cartesian formed loop type traversal turn traversal representing formed concatenating part traversal bell gray codasyl many case linked join operator placings year generates case concatenate traversal keeping copy year game venue link team also year link team game venue traversal correspond loop code desired tuples best made link best fewer also join traversal head traversal match middle alternative traversal venue game year link team match property intersection traversal preferred made stadium venue choosing optimum esslemont gray join traversal hold unit clause trav term giving access symbolised procedure trav pick clause gray moffat overlap accordance prod overlap twice reversed case head successful traversal asserted clause clause thus operand also safely asserted node inserted used type assign correspondence clause form equiv curr joining modified traversal operation operation node joined operation node traversal prolog take thousand prolog need hundred much read modify much wordier also many type must compile prolog clause grammar save page procedure parse base backtracking keep combined prolog handle reclaims conclusion codasyl database storage fact unlikely generating traverse manipulate list used arrange specification form algebra procedural form loop assignment user think also commit unsuitable transformation transformation form traversal form prolog particularly suitable work good backtracking assert address time acknowledgement scicon london boulay gave many comment generous serc acknowledged
