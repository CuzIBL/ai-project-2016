processor used deduction distributing deduction strongly dependent communication task allocation supply processor replicated database broadcast network term refers procedure message computation infinite varying communication utility easy powerful selecung work satisfactorily communication dynamic task supply protocol work supply protocol literature parallelism identified reasoning machine fifth system motooka processor must made cooperate computation clearly need identify parallel reasoning computation need build multiprocessor hardware need parallel computation onto processor keeping mind communication last need largely ignored time bottleneck achieving high processor address last need task allocation work well presence communication task allocation processor system strongly affect parallel computation conway also communication cost part cost computation good task allocation processing cost communication cost kept mind type computation backwardchaining deduction barr parallelism employed conery ciepielewski processor backwardchaining broadcast network work part arpa work processor scenano applies processor broadcast area network like ethernet metcalfe processor broadcast network chip suggested ullman ullman database replicated goal deduction time task allocation strategics domain database fact rule used syntactically task allocation extra parallel task allocation lawler work well domain reasonable eliminated inapplicable task allocated beforehand processing mayr eliminated communication cost inaccurately modeled lageweg contender kind control communication cost clever reduce communication cost outright communication network protocol transferring task processor protocol davis malone trade communication cost parallelism supply flexible interprocessor throughput term refers procedure message computation throughput mean data term message unit time sent communication network communication protocol explains view deduction tree task processor architecture describes used control communication describes used task supply protocol framework viii also work computation tree barr used problemreduction deduction barr used exploited tree deduction tree choosing multiprocessor architecture practical utilize workstation malone stepping stone studying multiprocessor interconnection well optimal task allocation even relatively mayr made optimal genesereth used system data base dynamic calculus fopc rule base static fopc rule even data base kept unchanged deduction proceeds data base literal cither atomic negation atomic rule base form alpha beta alpha alphan beta beta goal proved must also literal literal rest term data base used refer rule base data base node tree tuple goal binding node goal literal binding empty goal node tree child take goal goal rule child rule used parent child goal parent goal removing goal antecedent rule applying unifier resulting goal binding child unification binding binding parent unify goal goal parent node data base data base treated rule antecedent used child failure tree leaf represents goal empty node deduction tree referred equivalently task unit deduction node child deduction binding list satisfies desired list binding list desired subtasks task independently communication subtasks also grain task deduction tree unit deduction arbitrarily size deduction processor architecture goal processor architecture great processor architecture property many processor broadcast network memory processor copy database form communication message broadcast processor processor kind architecture symbolics processor chaosnet moon time processor used message impossible processor clock synchronized close synchronization desirable distributed clock synchronization marzullo supply varying communication highest communication cost work best communication throughput plentiful relative message traffic need take also lowest communication cost work best communication throughput utility unifying framework infinite strategics varying communication case demonstrated usefulness strategics communication seems left unexplored genesereth free pure form caching supply task processor task task worked processor work task processor committed work task processor committed line arrow show transfer task task flow left hypothetical commit line must announced processor task work task flow left commit line must announced grabbed processor processor also grab task ideally work processor time task grabbed processor message delay processor grab task protocol understood processor grab resolved properly handled task killed communication protocol handle next controlling communication fact task work work arbitrarily balanced seen newly task work grabbed absolutely obtains highest communication cost newly task work work absolutely obtains demanddriven lowest communication cost explained task picked work task picked work supply protocol network communication protocol used transfer task processor also referred task supply protocol next domain work contrasted work part task message task task globally name attached piece proved binding boolean mean must true must false parent task pending subtasks task true genesereth grabbed timestamp task grabbed revised grab request task grab request grab request timestamp message hach message four message type message used make task broadcast mentioned processor receives message processor task name task name work grabbed timestamp message used make task grabbed announcement mentioned processor selects task next task broadcast grabbed message task grabbed message task removed work processor message task revised task grabbed message task even task awaiting subtasks aborted timestamp grabbed message timestamp task name aborting task also mean aborting pending subtasks task remote task aborted sending kill message explained kill kill message sent abort task remotely kill message task name removed work case task task aborted task also task awaiting subtasks subtasks recursively aborted done sent answer remotely originated task done message reported parent task parent task name pending subtasks parent task name combined parent task reported processor originated parent done message used originator parent task remote processor computation genesereth toplevel task reported heuristic heuristic used reduce computation communication time processor task work locally task preferred save sending done message task task completed processor done fashion reduces reduce grab task heuristic used grab processor arbitrary priority watching message broadcast network processor hint processor processor sends grabbed message processor know processor busy task made processor defer grabbing processor free deciding task move work costly picked also deciding task grab work costly done free processor grab costly task surplus task processor processor tend remain busy grab reduces message traffic cost deduction deduction deduction tree costly also delay high processor heunstically assumed tree announcement task broadcast network heunstically assumed costly costly domain processor task time task free backward chaining case repetition acceptable acceptable repetition affect correctness computation caching backward chaining case idempotent computation mentioned handle realistic failure work davis address dynamically distributing task processor supply protocol malone supply protocol abasp stand ward type protocol used task soon submitted grabbed message processor abasp task award message also award message abasp additionally drastically grabbed message message abasp case grabbed message best case task announced happen grabbed message sufficiently early inhibit processor grab task also recall heuristic reduce grabbed message note extra message task extra message parallel killed extra kill message practice delay reasonably throughput delay lead quick killing replicated extra announced replicated throughput case well deal case shapiro bagel shapiro also deal dynamic distribution task multiprocessor system shapiro deal systolic mapping case mean know ahead time many subtasks going task make allocation imagine moment broadcast network infinite message throughput practical serf illustrate plentiful network throughput newly task announced processor precisely processor newly task task task work task work must announced message processor allowed grab task work internally task surplus task announced need highest network throughput reported simulation processor architecture unit time reported time unit deduction give deduction tree experimented database processor behavioral structural piece hardware adder also fact proved adder turn answer deduction tree searched trying time processor adder unit deduction time unit show adder processor reader directed curve labeled infinite throughput genesereth data bottleneck throughput bottleneck note time really announce surplus task processor busy next alternative reduce communication thereby decrease task conclusion work well throughput communication cost ignored minsky hypothesis curve infinite throughput case asymptotically linear long size deducuon tree processor communication cost certainly reduces logarithmic case time throughput bottleneck case allocation supply surplus task throughput supply surplus task previously announced task grabbed drastically reduce message traffic lead task throughput bottleneck surplus task supplied work surplus task supplied work precisely processor generates genesereth task keep next task supply task work work empty keep remaining task work task supplied demanded work empty allocation fewer message explained case message provably infinitesimal fraction case case deduction tree balanced binary tree ratio task processor asymptotically infinity data show dramatic reduction message practical case attracuve property storage task kept locally supplydriven case processor keep copy task worked disadvantage delay transferring task processor happen processor free time processor grab task work wait surplus task work fact unboundedly worse rate task rate consumption task rate consumption task high delay compound curve labeled infinite throughput illustrate adder unit delay infinite throughput seen comparing curve labeled infinite throughput infinite throughput time processor slightly time extra time extra delay supplying task message sent much message sent degrade much presence throughput limitation imposed fact case illustrated curve labeled bottleneck throughput delay throughput processor time changing throughput infinity bottleneck case time outperforms time conclusion supplydriven presence throughput fewer message tradeoff delay supplying task high case message traffic high case optimally resolved cither delay also viewed reduction parallelism great ease seems probable strategics communication time automating viii conclusion work supply idea actually suggest retain essential goal vary supply task communication task domain case acceptable supply protocol task supply protocol processor interconnection case interconnection broadcast network broadcast replaced broadcast subset processor broadcast directed solely originating processor task cost deduction cost deduction used easy make accurate mean reasonable cost stop distribution cost justify overhead distribution processor also used break processor comparing timestamps grab take timestamps time profitable load balancing probability proving probability cost proving used best task barnett simon rosenschein rosenschein work done optimal generalize arbitrary task hand many pairwise redistribution hope getting redistribution work major work remove major bottleneck distribution deduction replicated database communication network architecture used consist processor connection neighbor hexconnected plane processor memory part database parallelism also taking full parallelism difficult controlling communication cost seen crucial successful multiprocessor used communication cost task supply protocol easy powerful work best communication adapted task interconnection task acknowledgment wish thank ernst mayr many stimulating commented draft
