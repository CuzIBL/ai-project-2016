modified calculus built fragment counting quantifier mention axiom introduced capture taxonomic reasoning show regression operator framework regression reiter calculus regression operator show executability decidable modified even base incomplete open incomplete base type progression sound classical progression show base resulting progression definable modified calculus mention formalization semantic service calculus well understood reasoning reiter used semantics service foundation golog reiter mcilraith calculus formulated reasoning undecidable unless restriction imposed axiomatizes motivation intention overcome difficulty fragment foundation modified calculus satisfiability fragment decidable nexptime demonstrate reasoning reasoning fragment decidability motivation come baader family formalism play role formal foundation widely used ontology area semantic many expressive considerable expressive going propositional ensuring reasoning decidable borgida mostly used static base formalization reasoning carried fragment propositional calculus giacomo give epistemic framework dynamic system reasoning framework strictly propositional reduces framework baader baader integrating formalism take well alcqio foundation show executability reasoning possibly sequentially composed coincides reasoning service term potentially lead complication specification reasoning task planning quantify framework take term integration taxonomic reasoning reasoning restricting calculus introducing axiom taxonomy increasingly difficult beneficial progress incomplete base progressed task computing progressed progression structured briefly review reiter calculus counting quantifier modified calculus regression main reasoning calculus progression briefly reasoning background calculus axiomatizing dynamic system dialect disjoint sort term consisting term history distinguished used corresponds uniquely term depend domain fluents vary next normally fluent last sort represents fluent resulting ground term fluents distinguished characterize execute term sort mention quantify sort mention equality mention term sort fluent term reiter clear sometimes suppress simply also restoring back fluents obvious axiom five axiom reiter precondition axiom successor axiom name axiom duna domain foundational axiom duna ground term free reasoning task reasoning task executability executable abbreviation executability executable planning executability arise naturally regression central computational form automated executability task reiter recursive regression operator regressable reiter eliminating atom favor precondition axiom replacing fluent atom logically repeatedly make particularly regressable regressable mention ground term regression show reduce regressable proving task name axiom duna fact demonstrates executability task proving task arbitrary type reasoning undecidable overcome difficulty closed domain closure domain finite many domain unrealistic formulated fragment ordinary equality free twovariable counting extends counting quantifier pacholski show satisfiability decidable prof nexptime even counting quantifier coded succinctly background connection baader borgida soutchanski modeling dynamic system modified calculus dynamic system formulated modification idea syntactic modification executability guaranteed decidable consequence decidability satisfiability modified connection explained ldlsc sort obey restriction term sort allowed term sort sort sort allowed duna fluent ldlsc sort call fluents dynamic call fluents dynamic role ldlsc static unary static role binary unchangeable taxonomic property unchangeable domain static dynamic primitive usual full connective quantifier ldlsc also counting quantifier equality allowed lscdl dynamic system dealing open stated unknown false dynamic system interested formalized seven axiom ldlsc duna five duna introduced axiomatize fact property ldlsc axiom must conform precondition axiom ldlsc axiom form unary binary term free free axiom characterize precondition successor axiom type fluents ldlsc primitive dynamic form fluents exactly primitive dynamic role form fluents exactly vector specified fluent syntactic form reiter loss generality axiom form vector represents vector empty represents quantifier free quantified note disjunctive subformula false acyclic tbox axiom tbox axiom tbox axiom tbox axiom static tbox dynamic tbox static tbox form unary domain free fluent dynamic tbox form free fluent appeared side tbox axiom also tbox axiom must acyclic acyclicity exactly tbox rbox axiom idea rbox also axiom rbox axiom role taxonomy role inclusion axiom primitive role static dynamic axiom assumed specified sense rbox axiom compiled induction rbox axiom used regression operator used taxonomic reasoning finite sentence suppress term fluents specifies incomplete also describes fact changeable time domain static tbox axiom well rbox axiom also name axiom remaining foundational axiom name axiom duna usual note axiom well next axiom eliminated process regressing regressable sentence modified regression lazy unfolding giving ldlsc turn reasoning task ldlsc domain regressable ldlsc regressable slightly regressable reiter free term sort ground inwe careful regression operator main deal tbox extend regression aregressable extend regression operator reiter lazy unfolding baader expand dynamic operator make sure regressing fluent atom never need free deal restriction modify regression operator operator reiter replacing atom fluent atom regression operator reiter quantified side axiom renamed free atom replaced renaming assures equivalence regression avoid introducing reiter regression operator assure dynamic handled modify regression operator regressable possibility reusing guaranteed ldlsc regressable formal term sort term sort atomic form represents quantifier cluding counting quantifier represents atom case form axiom duna regression atom equality role regressable atom form term sort ldlsc must precondition axiom form sort empty vector syntactic restriction lscdl replacing dual free quantified replacing free quantified dynamic form term term must tbox axiom form restriction ldlsc term lazy unfolding primitive primitive role form term sort term sort term sort must fluent restriction ldlsc term sort role yxff ifif orif able supposeregressable regression terminates finite step ldlsc regressable acyclicity tbox axiom rbox axiom compiled consequently participate regression ldlsc regressable background ldlsc modified regression operator induction hold done transform logically regression reiter ldlsc regressable background decidable axiom unsatisfiable decidable fact satisfiability decidable executability decidable even incomplete soutchanski give illustrate reasoning task reduction dealing property need show ldlsc realistic dynamic domain school enrollment service shopping service fluent form reasoning fluent computational answering form vector ground term reiter satisfiability decidable nexptime progression progression also filtering response progression duna formal classical progression reiter sentence classical progression ground domain interpret fluents identically sequel progression relationship progression iteratively repeated progressed progression next iteration reiter show classical progression finite definable definable reiter progression inis definable definitely definable ldlsc modifying reiter replace infinite replace succ succ true successor replace empty infinitely many axiom form form successor sense natural rest exactly reiter assumes ldlsc infinite progression finite ldlsc definable remains open weaker classical modified progression type incomplete case incomplete show modified progression ldlsc sound classical progression restrict syntactic form allowed ewffs boolean equality vector vector abbreviation fluent literal ground term call form name axiom subset finite sentence sentence also clause disjunction finitely many composed ground fluent literal secondly fluent syntactic form disjunction form containsis ground fluent ldlsc easy side syntactic form natural propositional case generic decidable ground abbreviation disjunct satisfying disjunction easy ewffs intuition behind abbreviation collection case true hold case fluent take case cease true entailed remove case negation entailed remove guaranteed cease true represents collection deleted ground need progression variant progression modified progression ground resulting sentence clause form negation clause setb clause nothing replace easy resulting remains progression repeated next ground intuition behind ground keep truth fluent definitely true false also keep remaining consistent removing conflicting note conflict case case name axiom entailment ground modified progression classically sound classical progression modified progression also classically classical progression modified progression nice property ground consistent consistent modified progression also consistent modified progression classically sound case classical progression progression relationship also progression relationship sentence sentence sentence work major consequence proved service composition atomic service property affected service parameter guaranteed even incomplete sequentially composed service executable composite service desired previously made mcilraith assumes composite service giacomo considers propositional fragment mentioned mcilraith golog composition semantic service surprisingly straightforward golog operator restriction golog reiter operator ldlsc regressable occurrence term term baader proposes integration alcqio formalism reasoning service soutchanski levesque computational tractability progression assumed proper form used normal form weaker type progression proper show progression sound sometimes classical progression also disjunction levesque considers formulated entailment undecidable impose restriction arity fluents obvious case reiter shirazi amir levesque progression definable also case simply restrict disjunctive case nobody also considers abox winslett also mention boolean abox formulated term primitive fluent literal progression term ground giacomo expressive inclusion assertion tbox showed expressible abox computes practical reasoning ldlsc computational reasoning ldlsc high practical facilitate empirically executability planning also progression incomplete modified progression classically acknowledgment thanks natural council canada toronto financial
