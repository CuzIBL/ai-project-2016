filtering problemof tracking belief partially observable dynamic domain filtering tractable deterministic domain tractability sharply intractability structured stochastic domain circuit belief filtering time size linear size domain size compact resulting feature also reasoning answering propositional circuit handle past time step smoothing ouralgorithmsextensively aiplanning domain outperforms competing sometimes ordersof magnitude much work applies system time diagnose past predict make must system time step reasoning task domain filtering amir russell task belief belief filtering deterministic domain difficult planning diagnosis partially observable deterministic domain belief biere cimatti roveri bertoli petrick bacchus part computation difficult belief exponential propositional feature defining domain belief compactly bdds bryant filter database progression winslett reiter none compact even domain amir russell compactness tractability strip precondition hold importantly straightforward filtering deciding clause belief time belief time liberatore show entirety done creating belief piecemeal tractable filtering handle deterministic domain importantly time belief depend domain size resulting feature used checking clarke extend circuit negation node show time hold restricted show circuit smoothing past also perspective sidestep intractability stochastic domain circuit belief show updating circuit connective take determinism feature true made true true interestingly empirical examination suggests graphical bdds maintain compact applies many checking planning observability attractive planning fear reaching belief filtering filtering tracking hereby referred filtering imagine assembly robot item construct machine part oriented must brought goal orientation assembly beginning part located conveyor belt part drift fence perpendicular belt rotates edgesis aligned fence sensor edge part orientation part edge sensor noisy robot rotate part discrete back belt pick assembling formally deterministic transition system transition system tupleis finite propositional fluents exactly fluents true finite transition executingaction onbelt partofassembly touch touch pickup assemble rotate sequel implicit transition system conveyor belt triangle drift fence rotates edge touching fence robot keep track observe maintain belief belief robot belief receiving semantics filtering filtering semantics amir russell robot considers sentence filter empty filter filter true filter filterfilter filter call step progression step filtering receiving eliminate consistent illustrates imagine robot isosceles triangle edge size touching fence orientation left part rotating triangle degree middle part expect observing part robot eliminates belief leaving robot know orientation triangle triangle left middle progressing rotate rotating triangle putting belt observing eliminated circuit filtering filtering hard belief enumeration intractable domain amir russell belief foundation compact restricted canonical form circuit flat extend deterministic domain actionobservation satisfies satisfiable call belief circuit circuit circuit directed acyclic graph leaf node connective node represents applying connective node child connective node exactly child many avoid node domain finite rule form propositional literal semantics rule iterate rule rule precondition hold hold lead contradiction execute rest fluents stay precondition hold also make failure lead sink triangle triangle belt rotate rotate touching edge rule touch touch onbelt touch touch touch onbelt touch touch touch onbelt touch domain procedure preprocess belief domain processdomain explf process progressaction filterobservation explf procedure progressaction thus explanation caused held nextval procedure filterobservation procedure circuit time replace node pointed explf procedure processdomain domain extract next nextval simplify demonstrated receives belief domain filtered belief circuit maintains circuit data pointer node pointer node represents rooted node used interchangeably maintain pointer base receiving observationsand knowing execute constrains belief fluent explf explains true node marked explanation touch time root node explanation time keep fluents time regression explf fluent give belief word fluent replaced explf preprocessing phase extract data domain procedure line node fluent explf pointer also circuit explf node pointer line iterate circuit pointer time step line belief closer look circuit constructed preprocessing extract domain fluents affect need know affect describing true simply precondition rule causing hold take disjunction none false execute hold take rotate touch touch touch touch onbelt touch touch onbelt touch procedure progressdomain construct nextval evaluates true hold intuitively caused hold held affect execute regarding true false time preprocessing iterate procedure progressaction belief construct circuit asserting line build circuit nextval procedure ensures circuit fluents construct nextval circuit leaf fluents time step replaces explanation node circuit crucial copying whole need edge graph pointer recursively maintain compactness circuit built explanation pointer line explanation root nextval circuit built line also deal procedure filterobservation simply updating explanation touch rotate show explanation touch rotate rectangle bottom node explanation pointer time circuit nextval procedure replaced fluents explanation node node root graph representing touch branch describes case caused hold left branch case held falsify next iteration pointer touch node note explanation node node possibly representing subformulas answering belief circuit interested satisfiability satisfiable entailment unsatisfiable construct circuit inference circuit arbitrary propositional want satisfiable replace fluents explanation circuit time circuit refer past last step true note fluent time step node keep track node replace fluents time step explanation node take logt time note tracking explanation many filtering domain circuit circuit satisfiability converting circuit grow exponentially duplicating subformulas grow significantly inference circuit work show structural lost encoding used give procedure circuit efficiently effectively encoding taking circuit ganai thiffault dpll iteration uninstantiated true truth propagated resulting circuit parent true well recursively satisfying assignment backtracks assignment unsat take time circuit edge leaf give whole process interestingly demonstrates circuit compactly belief compactly domain fluents make parity fluents formally applying show maintains belief throughout preprocessing domain phase extract nextval examine specification fluent affected executable easy hold simultaneously simplified true executable execute true nextval word note simplifying compact imagine receive arbitrary receiving describes time node fluent true node fluent time pointer rectangle want maintain true explanation fluent node execute arriving time executable explanation affect explanation construct graph explanation pointer root node note show gate sake clarity fact replaced five gate depicted time constructthe graph note substitute fluents explanation time pointer time step execute observe alternatively think querying hold process explanation creating circuit updating pointer circuit pointer belief answering show propagation time rest false propagated assignment consistent correctness filterthat time belief true time time time observing propagating recall satisfies satisfiable used sketch show flat show filtering consequence restricted show computes exactly consequence time teff nextval nextval asserts occurred time mean subscript fluent corresponds axiom explanation closure axiom calculus reiter robot recognize impossible drop adopt slightly recall filter analogue handle teff consequence vocabulary fluents subscript lemma applying representing exactly filter formally belief filter satisfies satisfies lack filter consequence finder restricted tractability show computes exactly consequence observe consequence easy keep form explf fluent time show consequence show resulting maintains form need form luckily converted form linear time form explf construct replacing teff explf find consequence note consequence resolution resolve fluents nextval last note maintains exactly form namely explf representing avoid confusion think line finit also exactly explanation progressaction cfilter progress handling belief actionobservation actdesc longest precondition preprocessing time alternatively hash take time actdesc circuit size literal drop precondition maintain flat note depend domain size actdesc domain affect fluents precondition sketch initializing take time handling actdesc node edge graph take time worst case simplification done need construct graph time receive node edge resulting maintain negation node sketch circuit leaf literal maintain explanation explf explf expl explf take left filtering time grid domain size time linear depend domain size slight graph filtering time msec domain size note explanation replace literal explanation converting take time linear size time modulo checking property hold step system belief show doable applying generating belief time maximal plus actdesc size checking assignment take time thus testing satisfiability size propositional unrolling system step used checking need guess assignment linear refines domain deterministic answering filter belief actdesc implication representationspace combinatorial show belief fluents cannotbe circuit size strictly linear nevertheless cfilter show belief reachable belief size linear size belief size longest also amir russell showed belief possibly nondeterministic domain belief belief exponential belief size show hold deterministic system note handle transition many inherently natural treat deterministic flipt exactlyonecase exactlyonecase specifies exactly hold binary encoding unfortunately grows linearly handle deterministic idea maintain belief form expll literal filtering also handle parametrized domain strip tested domain list size long lisp inferenceon noclause thiffault circuit block ferry grid gripper hanoi logistics movie domain fluents step filtering time msec left show linear note time msec size step time domain domain size filtering time even fluents grows time slight graph circuit size depend part show filtering filter amir russell lisp filtering unrolling system step bddbased filtering buddy package outperformed sometimes magnitude note graph size depend highly ordering even circuit linear exponential size optimal ordering long processing time beginning heuristic good ordering good ordering reached processing even heuristic process domain filter unroll also slower process long domain also filter handle domain unroll suffers frame need fluents domain size managed handle domain hundred thousand fluents taking millisecond step show time find resulting circuit modified noclause significantly reasoning time grows linearly practical filtering temporal unbounded note agent constrained belief take find satisfying also conclusion straightforward filtering prime implicates consequence time belief time work liberatore showed deciding clause belongs belief even deterministic domain discouraged nevertheless work tractable filtering deterministic domain surprising show creating consequence time creating belief piecemeal past belief bdds amir russell none guaranteed compactness circuit also showed maintain obtainedhere implication many expect planning controlling perhaps stochastic filtering plan explore acknowledgement work foundation career award grant thank reviewer helpful comment
