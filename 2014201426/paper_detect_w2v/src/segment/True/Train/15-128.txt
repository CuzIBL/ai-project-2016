prolog proven domain suffers lack modularity particularly routine data prolog make inconvenient describes module database view conceptually prolog powerful representing database parsing rich find prolog lacking modularity satisfactory routine data find convenient data type data data type like list queue seems moderate size reimplements append list half reimplement subset encountered data grammar english english calendar service parser domain date well operation calendar convenient part speech domain keep vocabulary distinct thus week fine noun domain date domain noun week true domain difficulty prolog data type used illustrate data well encountered prolog speak prolog mean prolog clocksin mellish prolog routine occasionally process routine auxiliary routine fast reverse routine clocksin mellish sole revzap assist reverse never reverse unfortunately prolog routine name revzap take database alongside reverse routine mean user must know name auxiliary routine inadvertently reuse prolog strange name routine sometimes nonalphabetic name work keep name prevent name collision file hiding auxiliary routine module prolog routine packaged module name visible outside module exported reverse surrounded module list export reverse reverse revzap list consulting twice defines twice introducing module long usable prolog weak naming list module list routine append suggest ssnset miss duplicating code attractive alternative subroutine wish prohibit queue consulting queue defining routine list twice prolog double routine clause appended overload routine name also name queue consulted clause deletes chained possibly resulting hidden even desirable clause file chained prolog clause selectively routine recousult replaces clause routine regard clause handicap particularly case routine partially rule partially fact rule family family earliest ancestor sibling parent unknown capture sibling fact form sibling sibl keep straight rule kept file rule fact kept file family answer family easy answer family reconsult retract rule sibling last module view prolog database partitioned module module collection routine routine clause clause functor routine contained module routine tagged case visible outside module module database view view module module routine contained module view view used queue taking besides feuer module list routine routine list clause view module list module considering goal view module containing goal searched like database searched prolog thus view behaves like dynamic show module list routine reverse revzap reverse clause revzap view list list followed builtin declaring routine public operator hide routine name thus srevzap routine list module view database plus builtin routine module builtin prolog builtins routine coded inside module many routine thought builtin actually coded prolog atomic directive module file view module correspondence module file file prolog text module prolog module database file read file system module built module view module view builtin list implicitly relied upon list list construct absolute routine module queue beginning directive next queue directive refer routine module unadorned likewise refers queuesdelete refers queue append listsappend routine list visible case selective reconsulting handled module rule faml sibling family established demarcated syntactically prolog routine clause functor head impossible routine tame name functor module used viewed absolute module feuer reflect family directive remove remove clause module remove fami clause module rule sibling resides rule untouched prolog popularity embeds elegance easy unfortunately prolog routine easy build naming prolog identified absence routine consulting file overloading routine name rest idea module view routine routine visible module consulting file module consult file database routine accessed name module thus conflict routine name view ordered list module routine occurring view referenced accessed absolute acknowledgement grateful shamim naqvi claude sammut comment draft
