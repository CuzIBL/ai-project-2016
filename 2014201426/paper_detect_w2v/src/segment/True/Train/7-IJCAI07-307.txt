factored concurrency semantics petri closely concurrent planning domain planning petri independently unconvincing investigate relationship area focusing petri unfolding attractive reachability naturally enables resolution subproblems hand unfolding forward planning exponentially hand inspired planning heuristic investigate automatic heuristic guide unfolding resulting directed reachability tool petri petri traditionally used modelling analysing distributed system murata compact much planning operator additionally independence concurrency causal enables resolution subproblems confers partially ordered interleavings exploited early godefroid kabanza synthesize reactive plan nevertheless fair work failed sufficiently utilize connection area edelkamp jabbar work applying planning heuristic detecting deadlock petri goal work petri successfully planning petri unfolding mcmillan esparza reachability particularly attractive preserve much inherent petri unfolding process generates forward simpler type occurrence acyclic avoids conflict petri absence deadlock unfolding stop occurrence represents marking reachable size unfolded exponentially size petri exponentially size represents searching unfolding gain backgroundon petri unfolding pointing reachability planning graph blum furst give translation planning transition unfolding tool planning costly build unfolded extract partially ordered plan time linear size capitalise planning embed heuristic unfolding resulting directed edelkamp petri show monotonic planning heuristic haslum geffner petri guide unfolding cost plan loss completeness analyse benchmark planning competition petri benchmark omitted ground hickmott petri unfolding petri side marking directed bipartite graph type node transition system capture dynamic system directed transition vice versa marking represents system assigns token disjoint finite transition flow indicating presence absence marking preset node postset node simplicity transition preset postset marking enables transition occurrence firing transition absorbs token preset token postset thus moving marking corresponds transition modelled system transition concurrently enabled marking allto simultaneously transition concurrently enabled marking transition conversely transition forward conflict mean whilst individually enabled fire firing transition concurrently followed transition token token never exceed unfolding unfolding reachability preserve concurrency planning term unfolding searching partially ordered plan considering unnecessary unfolding occurrence node occurrence transition marking unfolding achieves eliminating backward conflict transition backward conflict eliminating know exactly transition fired marking planning term elimination backward conflict achieves property backstrom nebel know plan unfolding occurrence homomorphism mapping transition occurrence representing initially marked conditionswhich emptypreset side show prefix unfolding side path reached note also transition unfolding path causal history conflict configuration unfolding built configuration configuration configuration represents causally closed configuration ancestor occurrence forward conflict motivated fact forward conflict simultaneously finite prefix configuration configuration marking mark identifying token fired marking mark marking configuration identifies resultant petri marking configuration configuration ancestor configuration containing conditionscan simultaneously marked configuration presets form configuration unfolding process identifying transition enabled occurrence simultaneously marked identified transition referred occurrence postsets finite prefix unfolded case unfolding infinite seek finite prefix much formally prefix reachable marking configuration mark transition enabled configuration obtaining finite prefix identify cease unfolding loss referred term adequate configuration mcmillan esparza configuration extends finite disjoint finite configuration adequate well founded left finite prefix unfolding preserved finite mark mark finite isomorphic loss term completeness cease unfolding take marking caused thus marking proceed also proceed relevant esparza adequate prefix mark mark freeware unfolds ptnets adequate configuration comparing cardinality refined foata normal form make strict thus minimise size prefix esparza prefix righthand side finite prefix mole generates configuration firstly marking configuration secondly configuration adequate mole finite prefix unfolding cease even resulting unfolding mole build finite prefix maintains priority queue configuration part computation exponential maximal size presets transition esparza size prefix decrease strength ordering concurrency ordering strict size unfolding reachable http mole unfolding prefix initialise priority queue queue empty remove queue postset prefix identify queue endif endwhile postsets prefix concurrency esparza presence concurrency lead prefix exponentially unfoldingbuilds partially ordered avoids combinatorial interleavings handled concurrently unfolding planning graph reader find view unfolding powerful planning graph blum furst play role graph node firstly whilst planning graph reachability unfolding computes reachability exactly petri semantics mutexes binary propagated accounted determining secondly unfolding duplicate node node node predecessor consequence plan extracted unfolding time linear plan extraction planning graph unfolding asynchronous time confers subproblems consequently unfolding lends plan optimal cost graph suited parallel plan planning unfolding tool mole planning need turn planning tool accept fact help representing propositional planning operator truth boolean presence absence token token meaningless best token resulting repeatedly true need removed make false translation operates step step established replacing planning operator operator step eliminate precondition lacking step resulting mapped onto translation also characterise extent concurrency match concurrency used planning establishing literal complement literal literal assigns planning operator pair planning operator precondition literal negatively precondition planning quadruple planning operator goal literal planning property operator precondition establishing replaced operator literal operator work like exactly literal literal clearly operator exactly literal retains take operator replaced four operator respective eliminating precondition exactly false idea translation operator transformation opand erators precondition step translation negativepreconditions eliminated usual gazen knoblock replacing opposite operator reditions forcing operator replaced correctness operator step literal iffis literal literal literal operator preserve property operator execute exactly operator operator property mentioned actually operator establishes correctness translation fact operator replaced replaced exactly operator planning reachable reachable mapping resulting planning planning illustrates mapping operator reachable marking resulting induction transition leading planning pnet concurrency interested concurrent partiallyordered plan simultaneous operator arises concurrency used connection translation coincides concurrency planning turn case concurrencyin planning independence operator capture intuition yielding case independence imply concurrency sense planning operator petri transition take token fire concurrently remedied considering petri complicates unfolding process mole converse implication hold case transition take simultaneously planning simultaneous petri transition marking token transition fire concurrently transition planning operator concurrency operator dependent case concurrency arising translation strictly stronger independence planning operator transition fire simultaneously simultaneously proven contrapositively showing complementary role fire simultaneously directing mole planning easy mole partially ordered plan slightly altered stop queue labelled designated transition mole actually suffices augment planning operator dummy operator precondition goal mole stop labelled transition dequeued configuration partially ordered plan owing fact mole queue configuration cardinality plan fewest ordering used mole serious drawback planning lead mole natural idea ordering guidance goal generalising restricted optimality considering arbitrary additive cost turn arbitrary monotonic heuristic build adequate orderwhich letting heuristic guide unfolding optimal plan adequacy ensures retaining completeness prefix rejoins work directed modelchecking pioneered edelkamp edelkamp heuristic optimal cost reaching goal goal cost cost operator applying monotonic cost operator applicable transfer case identifying operator transition considering true monotonic heuristic like haslum geffner automatically planning equally ordering configuration heuristic configuration mark monotonic ordering adequate matter checking adequacy make monotonicity heuristic ordering mole queue monotonic heuristic planner generates partially ordered plan smallest cost deterministic planner optimise parallel plan aware planner able optimise arbitrary cost heuristic unfolding substantially differs planning petrify translation planning operator petrify handle fragment pddl modified mole heuristic respective ordering ordering complemented parikhvectors foata normal form case equality esparza make strict ordering bonet geffner haslum geffner cost heuristic heuristic heuristic monotonic optimality also completeness nonetheless work well practice call planning unfolding petri planner resulting guided mole petri encoding produced petrify conducted pentium memory artificial benchmark illustrates planning unfolding exponentially planning artificially constructed goal subgoals subgoal achievable disjoint precondition deletes precondition next true subgoal degree concurrency varies concurrent subgoal precondition precondition graph show node expanded forward unfolding heuristic varying case fairness node expanded optimality cost optimal find optimal clearly show degrades exponentially node expanded unfolding plan heuristic make purely case enables optimality fails early unfolding solves size couple minute producing plan long benchmark next look gain realistic planning competition comparing unfolding demonstrating heuristic unfolding airport openstacks warwick feature ratio natural encoding openstacks produced parallel propositional disables concurrency airport unfolding expands magnitude fewer node hardest reduce magnitude easiest underperforms openstacks unfolding spectacular decrease benefit striking systematically expands node show guided unfolding able fact openstacks easy much previously reach unfolding made domain degree concurrency rover pipesworld domain disallow concurrency node expanded unfolding identical heuristic unfolding give next turn time time heuristic comparable case optimal planner fair delicate planner optimal track winner optimise parallel plan step planning challenging even case unit cost plan fewer parallel planner family aware planner capable optimising arbitrary cost middle graph give feel time heuristic airport openstacks previously also time planner parallel planner default note able openstack time petri benchmark artificial left airport middle openstacks reachability coverage dartes left time airport middle openstacks final demonstrates benefit guiding unfolding planning heuristic analysing reachability petri connection planning interested determining transition petri reachable petri benchmark mole dartes corbett communication skeleton fairly turned challenging mole unable decide reachability dartes transition reasonable time benchmark mole generates even finite prefix matter left mole guided heuristic dartes transition recorded time decide reachability graph show percentage computation time ranging mole quickly able simplest overhead computing heuristic outweighs benefit heuristic help time solves guided solves unsolved guided unsurprisingly transition reachable sanity checked turn achieves coverage quickly reach coverage conclusion relationship planning petri hand demonstrated petri unfolding form reduction godefroid promising recognise planning subproblems treat separately hand planning heuristic able effectively reachability work forward heuristic planning enhanced reachability tool applicable esparza schroter suffer finite prefix aware work explores petri planning meiller fabiani colored petri planning graph merely obviating need type permanent mutexes silva recast plan extraction graph petri submarking reachability demonstrating many benefit work foundation planning unfolding many possibility work reduction node expanded heuristic runtime cost recomputation node inherent forward bonet geffner remedying improving time forward switching heuristic need database heuristic edelkamp inverted dynamic domain refanidis vlahavas alternatively investigate analogue regression make sense unfolding translation planning operator petri area experimented translation linear quadratic domain mutex unfortunately many benchmark mutex greatly dominates size petri motivated need translation give linear exponential operator worst case even petrify experienced benchmark beneficial extend combine translation ambitious concern compact translation believe exhaustive connection planning petri unfolding fruitful determining precise relationship size unfolding property causal graph planning treewidth identifying weaker property heuristic ordering completeness finite prefix acknowledgement many thanks stefan schwoon patrik haslum help mole also thank jonathan billington blai bonet javier esparza malte helmert kambhampati maurice pagnucco john slaney david smith reviewer comment thanks australia nicta australian defence organisation dsto dpolp dynamic planning optimisation learning nicta funded australian government backing australia initiative part australian council
