reduce heuristic grow polynomially size path grid gene alignment computational biology main idea bidirectional open list closed list completes node optimal path path path reconstructed recursively applying node node also node goal node grid dimension dimension reduces memory time dimension dimension grid edge potentially cost want lowestcost path corner opposite corner cost path cost edge best alignment gene amino acid carrillo lipman omit mapping suggest practical want align simultaneously generalizes path grid shortest path maze case edge node finite cost indicating path node infinite cost indicating wall orthogonal move left want path corner diagonal move straightforward grid trivially generalizes dimension path shortest path term edge going path left move show work memory grid memory jkstra shortest path dijkstra time node neighbor worst case interested cost goal terminate practice grid searched show restrict move toward goal much simpler dynamic simply scan grid left bottom storing cost path node grid done cost edge left cost node left cost edge cost node storing node also time case neighbor node predecessor optimal path dijkstra must maintain open list node expanded process node cost root whole graph memory memory main dijkstra grid edge cost workstation megabyte memory largest exhausting memory grid take five half minute size memory much difficult grid memory happen edge cost listed implicitly rule gene alignment edge cost pair amino acid aligned gene edge cost amino acid even simpler longest subsequence pair hirschberg edge cost zero pair edge grid used returned cost edge pseudorandom page kernighan ritchie efficiently jump around korf chickering memory heuristic hart nilsson raphael reduce must searched assumes efficiently cost node goal gene ikeda imai establish nonzero edge cost grid manhattan goal time edge cost heuristic unfortunately must node generates ultimately memory memory limitation like dijkstra addressed last year korf many korf rely avoid memory bestfirst idea keep memory path node node memory linear highly tree hopeless grid must distinct path node grid path corner opposite corner grid node path corner grid node path path move toward goal move path taylor korf used avoid regular grid unfortunately assumes path node edge cost caching node miura ishida cache fraction node must grid pitiful largest size duplicate node path cost iteration expanded four node expanded iteration five size expanded billion node took hour divide conquer bidirectional dcbds discovered independently literature revealed case main idea hirschberg pedagogical hirschberg case dijkstra closed list node expanded open list node expanded open list corresponds frontier closed list corresponds interior node open list expanded cost consistent thus execute storing closed list exponential branching open list closed list storing closed list save much dimensionality frontier interior resulting memory twodimensional size closed list quadratic size open list linear must addressed duplicate node normally eliminated checking node open closed list closed list prevent leaking back closed open node list divide conquer bidirectional operator take closed node initially operator generates parent node node open list open copy arrived path happens list forbidden operator forbidden operator copy fact used dijkstra closed list well node open closed list grid sped dijkstra main closed list never expands completes cost optimal path goal node unfortunately path path node node node linear path eliminating fact storing path pointer closed list subpaths construct path bidirectional goal simultaneously frontier meet node path cost path cost continue keeping node best cost node frontier guaranteed node lowestcost path save node vector recursively find path node node goal node final path recursive subproblems built call bidirectional dcbds show idealized view dcbds left panel show final horizon bidirectional intersection node node optimal panel show next node toward goal intersection node panel show next node path frontier look like circle circle uniformed dijkstra know goal hirschberg hirschberg give computing maximal subsequence linear generates matrix axis matrix corresponds pair substring sting maximal subsequence substring dynamic computes matrix scanning left bottom time matrix need left thus matrix storing time deleting soon next completed fact need stored replace soon used unfortunately yield maximal subsequence subsequence hirschberg computes half matrix storing time bottom storing middle find column part recursively substring final substring dcbds hirschberg dynamic latter scan matrix predetermined systematic dcbds expands node cost dynamic used distinguish ancestor node descendent priori modified find path grid restrict path dcbds generalizes hirschberg dynamic bestfirst arbitrary graph dcbds size dcbds reduces million node memory size twodimensional memory exhausted size frontier roughly practice time limiting grid asymptotic time hirschberg considers move toward goal dynamic grid analyze time dcbds frontier circle circle frontier represents open list node cost node approximately node expanded next move left thus node term edge diamond shaped four compass diamond node path node closest diagonal great many path thus path node near diagonal much path node near diamond frontier represents node nearly cost frontier near diagonal relative diamond approximating circular fact simulation grid show frontier roughly circular time approximated node expanded proportional area contained frontier grid size path diagonal bidirectional quarter circle radius area next need bidirectional generates quarter circle goal corner plus full circle centered node reaching node full circle twice find node node thus circle radius area generates node full circle twice plus quarter circle radius recursion sweep area circle radius area term infinite easy show converges area time dcbds find path frontier dijkstra spread circular corner goal corner grid covered area grid overhead dcbds dijkstra dimension sweep volume sphere area circle main diagonal cube goal eighth sphere quarter circle dimension dcbds generates node dijkstra tested dcbds lowestcost path grid edge grid cost cost path edge cost move away goal well toward goal efficiently jump around size shortest path node dijkstra node dcbds node ratio path grid generating korf chickering much grid memory show grid size tested dcbds seed averaged next sample size column give grid dimension give edge shortest path twice grid size minus column give edge path trial data show path path fourth column give node grid grid size fifth column show node expanded dijkstra memory data show dijkstra generates node grid grid size megabyte memory unable dijkstra empty sixth column show node expanded dcbds sixth column show ratio node expanded dcbds divided node expanded dijkstra sufficient memory even dijkstra node side ratio dijkstra grid sufficient memory predicted node expanded dcbds approximately time grid seems slightly size asymptotic time size grid dimension term come node grid must examined logn term come fact open list heap size open list resulting time node access heap even dcbds expands time many node dijkstra take twice long main operator node reapplying expanding node take time applying operator checking duplicate closed list grid size take dcbds hour size take grid size storage node megabyte memory twelve million node thus memory work obvious waste dcbds twice panel full circle centered node searched twice locate node locate node node simultaneously circle optimization full circle reduce time dcbds fast dijkstra drawback optimization complicates recursion must simultaneously panel full circle must interleaved destroys recursive replacing loop interleaved iteration terminate even continues recursive bidirectional goal node obvious optimization terminate recursion size sufficient memory hold subgrid memory execute dijkstra suggests recursion hierarchy contribute diminishingly time optimization idea storing open list memory suggests execute dijkstra open list node expanded closed secondary storage device disk magnetic tape parent node optimal path root completed reconstruct path scanning file closed node backwards looking parent goal node parent node node expanded nondecreasing cost guaranteed path reconstructed backward file closed node secondary storage device considerably main memory access device sequentially unfortunately device read backwards efficiently best simulate disk tape file block main memory access block reverse dcbds slow secondary storage device unlikely lead conclusion hirschberg dynamic reduce memory arbitrary graph dcbds dynamic latter work know priori neighbor node ancestor descendent dcbds hirschberg find path grid edge goal dcbds arbitrary path show path grid dcbds memory reduces memory suggests time cost reduction dimension dimension predicts overhead optimization reduce reduce time used dijkstra dcbds straightforward prune also practice benefit drawback bidirectional memory ironically dcbds show bidirectional used save memory revive area acknowledgement thanks toru ishida teruhisa miura introducing gene alignment thanks hania gajewska developing code grant
