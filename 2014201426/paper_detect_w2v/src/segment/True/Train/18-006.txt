many control construct heuristic used prolog system extra control feature computation rule used classify detecting failure quickly unavoidable avoiding failure examining system reach conclusion concerning deficiency overcome idealized computation rule hierarchy goal breadth many prolog system control system justified naish went step showed control automatically shortened naish take much broader view examine many control primitive heuristic identify strength weakness term control rule computation rule restricted control rule resolution hope conclusion contribute system control main part introduces property like computation rule exhibit extent control rule contributes property used classification idealized control rule suggested give referred literature illustrates kind efficiently flexible control procedure permutation list block show difficult perm work prolog perm proceed ahead perm perm proceed ahead perm eight queen desirable form control perm list queen time safe nodiag test queen safe call perm swapped delay call call resuming instantiated call used tree list leaf desired form control call leaf coroutine instantiates list leaf newly next tree call tree grandparent parent parent ancestor parent ancestor parent ancestor grandparent ancestor procedure parent collection fact grandparent used find grandparent grandchild person reverse call parent grandchild ancestor pose difficult optimization ancestor someone parent ancestor infinite loop fact infinite loop someone ancestor even difficulty descendant naish feature computation rule obvious overriding property wish computation rule exhibit minimize size tree unfortunately case even find heuristic size tree next paragraph heuristic reasonably classification implementable control rule goal finitely fail computation rule atom lead detecting failure quickly heuristic work contributed area slightly subtle rule applies goal success branch tree fixed branch rule avoid creation failure branch infinite branch much control rule many control rule mentioned literature feature mentioned minimizing tree size unsurprisingly fairly case probably expanded call match clause clearly rule metalog dincbas continually tested atom clause rule overhead deterministic call deterministic call mean match clause selecting deterministic call optimal goal naish show control determinism detected compile time wait database goal consisting call database procedure fact naish give call find heuristic probability match take unification form indexing used naish minimized find best computation rule call database procedure delayed call done generalizes warren stabler best form control grandparent detecting failure call test soon test fail call thus failure quickly soon good idea call test naish naish suggest recognising test automatically test deterministic construct sufficiently instantiated infinite test soon failure branch normally delaying call uninstantiated test resumed quickly eager consumer eager consumer annotation clark used call test quickly creating extra failure branch placing eager consumer annotation prevents constructing whole computation subgoal delayed made instantiate annotated unfortunate consequence delaying instantiated test case annotated call test safe made eager consumer eight queen call nodiag queen caused restriction designated consumer eager naish consumer inheritance annotation sameleaves fairness lassez show resolution finite failure fairness rule rule primitive delay call unfair fairness affect practical system concern avoiding infinite loop detecting failure fair computation rule used heuristic concern completeness control primitive delay call indefinitely causing incompleteness fair computation rule call done eventually breadth simplest fairness breadth computation rule test consume data rate recursion corresponds functor nesting breadth rule fairly delay generating testing failure relatively quickly unfortunately strict breadth rule poor avoiding failure test pseudo parallelism connective declarative connects pseudoparallel computation rule alternate selecting atom control also used control used prolog porto used fair computation rule test test tends behind avoid left recursion goal ordering heuristic suggested naish actually left recursion desirable perm alternative eight queen left recursion pathological case failure rule system breadth control rule failure left recursion avoiding failure freese main delaying prolog avoid creating failure branch many primitive simplest geler freeze prolog colmerauer freeze used delay delay call eight queen made eager consumer freeze four control inherited leaf made also freeze wait procedure make perm work lasy producer lazy producer powerful avoiding failure lesser extent detecting failure lazy producer annotation prevents call constructing call construct annotated call delayed producer bind delayed call resumed call resumed help avoid naish failure call test help failure overlap control eager consumer mean coroutining test difficult walt heading wait muprolog naish used generating automatically naish believe major contribution avoiding failure wait like freeze used delay call sufficiently instantiated flexibility make procedure perm work heuristic also best form control goal like failure producing subgoals safe nodiag perm delayed automatically wait safe nodiag perm automatically wait also interact favourably rule selecting deterministic call eight queen call procedure forced deterministic detected preprocessor alternative eight queen control automated wait delay call unnecessarily wait ancestor overcome fairness call priority delayed indefinitely handled control parent ancestor delaying system partially instantiated call system creating failure branch muprolog delay alternative eight queen control completeness preferable system test eventually system avoiding failure flexible delay call failure branch call must delayed also manifest firstly delay whole secondly primitive wait even many procedure work efficiently consuming subset wait delay call flexible procedure partly also automatically deficiency partially compensated fair computation rule call delayed wait done eventually also deficiency failure despite well understood delaying whole subcomputations eager consumer limitation icprolog failure impaired test system leaf handled well left recursion also area breadth rule slightly worse coroutine intervention idealized system major feature firstly call extra failure branch delayed secondly call fail thirdly computation rule fair even call failure branch eventually hierarchy call test deterministic call nondeterministic call call database procedure call procedure wait call delayed wait delayed call system optimal call database procedure type call done breadth failure fairness desirable priority call done call next priority fairness conclusion prolog system extra control fairly relying mostly introduced control rule judged show weakness strength control rule clearly system flexible control
