rising production system aimed bottleneck production cupid multiprocessor architecture execute drete distributed rete describes cupid drete emphasis correctness effectiveness exploiting parallelism match operation monkey banana cupid simulator drete show time uniprocessor compiled production system growing improving toward goal concentrating customized uniprocessor multiprocessor architecture work reported cupid multiprocessor architecture distributed drete drete cupid tandem taking optimum drete rete family production uniprocessor cupid drete assessed tool limitation test simulation simulated monkey banana used past grade machine high parallelism used user guide also compiler next brief review production family rete drete cupid architecture give simulator simulation implication production rete production system part rule production defining operation data memory control applies rule data rule made describing applies describing operation data responsibility control rule time data rule match conflict rule conflict resolution fired firing rule data invalidates match match must recomputed rule proceeds match conflict resolution rule firing phase phase match phase computationally rete reduces match operation done taking rule fact rule firing data employing rete mean compiling rule network interconnected memory node node test join data subject consistent binding token representing caused firing rule injected network memory node match rete match phase node activation node activation arrival token representing data node token next node memory node incoming token arrival twoinput node next network node test binding newly arrived token token stored memory node opposite side successful token sent network token emerging bottom network enabled rule drete drete distributed rete drete match phase partitioned motivation partitioning resulting derived data contained work well production system size communication quantity data flowing match phase reflect variability production system drete meet data flexibility manage data form drete guided cupid architecture drete partitioning node activation stored data partitioning done node approximately match phase time spent partitioning carried step isolate node memory node attached node node memory node process port partitioning step node replicated replicated copy token stored memory node copy node data token left token node copy side designated generative copy responsible storing token node note size node dependent data thus kelly seviora parallelism node activation data must process node copy numbered consecutive pair left side side numbering scheme make easy activate side node address distinction side node node copy represents side token arriving operation node copy node token arriving node copy opposite side stored token token arriving stored token pass token polarity network successful token arriving node copy side stored token duplicate node copy arriving token attached node copy activated generative generative activated node copy passed node copy node copy activated generative arriving token ignored token arriving node copy side stored token deletion node copy generative deletion stored token node copy generative token retransmitted node copy activated necessarily successfully token opposite side match phase insure formation conjugate pair node whole node node keep node code node formation used involving type node copy used left node copy side node token side nothing bottom node copy token potentially blocking passage token node retransmission token used bottom node copy path token node bottom node copy transmit token cancelling sent node data make token invalid node partitioned storing arriving token token stored token tool done parallel parallelism match phase whole drete node activated token node adjustment serial operation approximately hashing token hashing reduce next subsection consideration distributing match operation balance workload processing drete pair continually produced eliminated match dynamic load balancing used move pair away processing probability node copy activated time processed recall node copy match phase load balancing done host conflict resolution phase production transfering node copy nearby processing multiprocessing generative node copy node copy transfered processing node copy fixed processing load balancing scheme effectiveness also execute load balancing scheme time consuming reduce speeding match phase simulation revealed time spent load balancing phase operation never match time load balancing phase match phase overlapping conflict resolution phase serious node token load balancing make concise encoding size node copy minimized storing template processor token stored minimized keeping network simulated node size word token size word compiled byte encode node generates inline code template drete hashing token match phase hashing token token partitioning node node copy responsibility match phase case incoming token stored token case hash bucket token hash bucket token opposite side responsibility storing token divided comparing incoming token fraction token opposite side node reduces importantly reduces node copy activation hashing used case twoinput node type done equally sized bucket data case drete parallelize match operation reduces done node copy activation match phase node copy responsibility incoming token stored token hashing node copy activation expense significantly drete little storage expense size node dependent token drete hashing node copy responsibility match phase hash bucket token token parallelism drete previously mentioned beneficial drete token hashing potentially much reduces done greatest degree parallelism work done drete date hashing preparation made explore promising alternative cupid architecture cupid processor attached host host conflict resolution phase production fire rule firing rule host sends data cupid match cupid responds conflict cupid architecture comprised processing communication scheme processing hundred take parallelism processing arranged dimensional node distributed evenly cupid communication system pair unidirectional tree processing leaf tree tree used broadcast match processing parallel path high path ensures fast activation network node match tree collect response processing incoming match data path width tree widens serial processing wordwidth root tree accommodate volume data tree response data network node back processing path root collection broadcast tree response representing enabled rule removed stream sent host processor awaits response match phase communication system serial link connecting processing four nearest neighbour link dynamic load balancing carrying pair processing produced busy processing phase link used match transfer node copy need travel nearest neighour node copy predetermined seated processed anywhere processing cupid architecture processing broadcast tree branching processing collection tree branching bottom processing interconnect system also clarity link joining opposing edge cupid processing block combine computational match operation processing node activation memory kelly seviora processing area pair block indicating node network processing processing also machine handling data transfer communication port machine conditionally reaching processing broadcast tree ignore arriving match machine used transfer node activation onto collection tree data distributed host processing broadcast tree five machine handle incoming outgoing node copy transfer link machine managed interrupt protocol processing done micron cmos cell preliminary communication machine also done processor bond pipeline harvard architecture wide data path risc processor satisfying relatively processing match operation need compact interruption communication tool branch used fixed branch benefit pipeline operation branch assist traversing linked list used storing pair increased processor caused offset reduction code size resulting reduction size processing cell processing minus memory comparable microprocessor prefabrication simulation show peak rate mips dynamic frequency simulation cupid drete used memory frequency branching execute mips cupid establish relative respective processing unit stated cupid drete code mips normalize cupid combined frequency occurrence cupid processing code establish cupid show four relative frequency cupid part long stream processor pipeline full case successful branch memory access calculated multiplying memory cupid data calculated execute cupid mips mips rating machine elimination simulator simulator commercially package register transfer simulation cupid drete done establish coherent processing match load balancing well memory machine simulation term verifying drete cupid time consuming simplest test hierarchical simulator made move simulation process time communication simulator simulation test processing simulator verified comparing response simulation simulator tuned agree simulator response long mixed process activation incorporating cell processing simulator cupid time machine case compiled simulation match phase simulated dummy process used host processor interact processing memory caused rule firing processing established simulation monkey banana benchmark disabled estimating match phase time take show match time monkey banana cupid size processing cupid next line show match time cupid normalized normalization take communication time match time processor decrease next line show normalized cupid processor continue matter calculate cupid clock infinity effectiveness communication system quantity data must exchanged processing cupid limiting case bottom calculated communication clock remains time serial path widened word width conclusion cupid time processing show cupid processing execute operation match phase effectively parallel substantially reduces match uniprocessor case processing multiplied processing cupid kelly seviora noted monkey banana high degree parallelism fact fairly diminishing cupid size processing indication parallelism reached simulation parallel show match fold processing monkey banana despite parallelism verifies fairly processing modest sufficient processing production system time verifies drete load balancing inordinate overhead match operation match substantial production system match phase computational conflict resolution phase host conflict resolution partially parallel match phase response match phase incorporated conflict resolution arrive throughout match phase match phase remains dominant production system time merit
