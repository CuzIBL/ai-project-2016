describes architecture graphical tracing system parallel parlog novel feature architecture graphical parlog representational user perspective granularity ongoing work graphical tool visualisation afterwards demonstration textual trace architecture threefold construction debugging informative graphical trace user representational preferred granularity user visualisation truly onto conception wish view central tenet visualisation visualisation optimal task necessarily make explicit expense work show presentation style show process practical parlog virtual machine benefit teaching tracing also debugging work parlog interested letting user perspective suite need best resulted repertoire give user complimentary perspective user able come perspective visualisation defining tool background parlog gregory conlon good review visualisation myers utter pancake style parlog ringwood conlon gregory impressive system textual tracing parlog closely incremental process communication channel briefly parlog brayshaw fuller treatment generalised show embed series story inherent many system defining made explicit implicit highlighted hidden prespectives behaviour demonstrate fuller informed view gained looking face revealed series visualisation utilise representational user modify visualisation conclusion perspective emphasising parlog parlog test case visualisation generalise work visualisating prolog eisenstadt brayshaw brayshaw eisenstadt also deal dynamic parallelism like starvation deadlock ringwood built around node representing process shading node indicating process core must adopted conlon good conceptual novice alike parlog considers process proceed four namely test clause goal tested clause tested clause test head guard carried clause thought racing clause head guard test process commits clause test guard clause cease commit mark race guard clause committed spawn process reduces clause body concurrent subprocesses spawned subgoals process succeeds succeed conjunctive fails process goal fails spawned goal leaf node call succeeds goal succeeds adopted conlon considers onto database parlog attempting goal process test parallel head guard clause goal attempting drink john true database drink mike whisky drink john beer drink helen wine figuure test phase goal icon left show evaluating goal goal drawn mode shaded arrow goal correspond mode respective thus drink must match head parallel clause main process icon thus glance binding enviroments goal attempted head match database clause indexed left renumbered subscript avoid name clash main body clause renaming transient parallel lest phase show binding subscripted letter arrow used show eisenstadt brayshaw thus clause clause drink john beer match goal part clause drink match database clause test phase committed name clause next node indicating process commit unified spawn body clause drink fact succeeds final snapshot succeeded drink john beer view executon process much coarser grained suitable much simply omitting unification considering name process indicated icon want unification binding test phase arrow zooming introduced eisenstadt brayshaw reveal also coarse grained superset view arbitrarily interleave coarse fine trace demonstrate incorporate representational integrated introduced process need view give considers made many node view tightly integrated user readily swap coarse grained view opened vice verca node view also replay panel trace history wound back beginning browsed forward back user modus operandi system user visualisation user able style menu user build visualisation tree give kernel prepresentation style amongst strength good mapping code compactness introduced left ands distinguished linking tree alternative clause viewed conjoined clause body ands guard distinguished line stippling process commits successful guard broader hashed line style disunguish surrounding unsuccessful unsuccessful node left whatever commitment took fact clause guard successful necessarily tree employed dynamic revealed replay panel show happens clause commits process whatever terminated informative process committed dynamic suspended goal evaluating root node lack showing dynamically suspension graphically reinforce showing line underneath distinguish mixing coarse view node dealt coarsegrained noted fine grained well zoom node node case view also moment snapshot test process test phase clause bottom process node default process test phase brought displayed commitment node process communication data communicated looking channel caused recursive filter sift process parlog term many intercommunicating process parlog thought kind view process communication illustrated view process node link process link show occurred incremental fashion upon user preference node actually tliose tree view looking previously tree process depicted node descriptor mapped onto process view horizontal cross tree control tree removed need made crosssections come arbitrary part arbitrary process communication seen remember perspective emphasis control implicit pull process front hide control process final style employ metaphor introduced domingue eisenstadt metaphor make repetetive behaviour explicit parlog construct like recursion conceptualise carrying form schematic view call repetetive process type behaviour trace implicit trace employing make explicit form list item viewed item axis cross axis tell happenned item parlog default mapping recursive process likewise also look guard invocation process guard conceptual behaviour guard sucessive invocation style form thus distinguish metaphor type granularity next metaphor canonical unit user architecture open extent expand system embracing metaphor whilst maintaining granularity perspective goal reduction process communication iteration user visualisation feature system provision user able visualisation exploring taking template user able mapping trace thereby producing visualisation tried tool user mapping getting code production debugger tool user visualisation selecting node call graph thus priori decide trace trace work post user take textual trace mapping template textual trace term trace thus user visualisation posthumous trace crucial distinguishes user mapping need term node trace node mapped template thus rendered visualisation showing mapping symptomatic footprint leave trace thus analysing trace detecting user footprint mapped template user visualisation produced trace history relative temporal also preserved simulated concurrency proceeds tree process communication view arbitary mapping produced describing footprint node thus node tree need process much cliche template series role link user instantiate series look trace history cliche said footprint leaf behind trace trace footprint script process tracer trace history process spawned subprocesses script script clichd thus script call exit process look cliche occurred subtree hierarchical produced process slightly mark beginning conceptual item termed agent wish wish computes look root process searching downwards make look agent clichds happenned occurred default show last picked replay introduced note dynamic mean need parallel dynamic parlog code underneath word used conceptual machine used serialise piece code helped user conceptualisation make definitional process mapping easy constructing tool graphical techiniques preexecution trace construction generalisation prolog brayshaw user asked representational style whatever style fill role filler template wish identifying footprint term call graph call graph plot user node wish footprint cliche interested footprint produced node call tree footprint defining final trace constitutes defining time node prompted conditionalise script node final script footprint script node naming script node script node recongnised script prolog tracer embedded script user menu authoring tool tool user trace footprint legal derived descriptor originally prolog eisenstadt generalised parlog call clause call success failure type failure left menu script editing area user type wish edit prolog goal constrain script additionally user edit script mean menu node call graph default script hold simply line call make much call clause namely clause resulted failure failure script menu dialog clause wish node footprint repeatedly selecting call graph defining script specified call graph node also made precondition script clichd double click process user call upon icon cliche built representational style definitional process repeated defining visualisation textual trace progam user work textual trace textual trace symptom descriptor adopted eisenstadt user associate role filler template choosing style role footprint selecting footprint manifested runtime trace footprint script defining footprint generalisation tracer series syntactic rule true automated generalisation semantics differ containing literal matter replaced likewise user automatically hollow term hand generic whole operation script seen edited augmented prolog script upon used visualisation process visualisation production potentially resulting view liking back edit script script call graph also fashion seen textually trace four graphical view scaling text tracing system thought type visualisation system convice layout structuring indenting make readable like graphical conterparts successful really acceptable thus visualisation system textual graphical think scaleability scalcability type used tackling scaling elsewhere brayshaw eisenstadt want make dichotomy destinguishes textual visualisation graphical visualisation sufficient selective exhaustive trace mode unwieldy useless take long system informative trace part believe misleading think somehow text trace practical exploring make visualisation exciting possibility affords openning route conclusion argued perspective visualise parlog focused embedded metaphoric system goal reduction process communication iteration portrayed fine coarse user realised system prolog modified parlog subset pinto particularly focussing realising type flexibility style desirable make whole definitional process footprint graphical minimise envolved acknowledgement work joint council grant gratefully acknowledged also like thank marc eisenstadt many visualisation debugging comment draft
