affine aadd capable compactly representing additive multiplicative show aadd worstcase time multiplicative linear case exponential empirical tabular aadd used bayes inference aadd well yield exponential additive multiplicative exploited suggest aadd yield exponential time probabilistic inference algebraic mean representing arithmetic operation factored boolean domain rely main directed acyclic graph tree reconvergent branch terminal node enforce strict ordering root terminal node enabling canonical produced thus identical identical ordering independence conjunctive disjunctive thus showing conjunctive additive disjunctive multiplicative bottom terminal high true edge solid false edge dotted exponential enumerated tabular compactness extend case additive multiplicative independence demonstrated exponentially unfortunately probabilistic reasoning domain potentially leading exponential time inference domain affine algebraic address limitation affine aadd capable canonically compactly representing additive multiplicative aadds fvar bhfh blfl real closed real fvar boolean type also impose expressed aadds edge fvar grammar grammar normalized aadds grammar aadd assignment recursively lemma normalized aadd satisfies ordering form fvar bhfh blfl fvar fvar earliest ordering occuring aadd form satisfies satisfies lemma ordering nonconstant mapping aadd satisfying ordering lemma proved straightforward induction lemma show ordering aadds canonical identical identical aadd aadds compact additive multiplicative show aadd node binary operation used exponentially sized aadds linear size binary operator aadds operation substraction work much work formal verification literature attempted tackle additive multiplicative evbdds fevbdds hdds limitation prevent discussing aadds data note major data canonical form relying property aadds node fact data terminal rational experience render unusable probabilistic inference considerable computational difficulty aadd analog bryant propagate affine transform edge recursion normalization resulting node rely helper getgnode take unnormalized aadd node form cached aadd node form reduce reduce take arbitrary ordered aadd normalizes cache node aadd nice property reduce need prespecify getgnode hchnode fidhifor branchesvar offset mult hmultiplier andreturncanonicalvaluesnodefor offset aadd additive multiplicative independence reduce compactly uniquely automatically ordering guaranteed lemma routine take aadd operand operation resulting aadd control flow straightforward normalize operand canonical form reuse previously cached computation neither branch recursively call routine instantiation step terminal computation computeresult half determines computation recursion proper termination computes operation terminal node pruning optimization node recursion operation recursive computation call unable reuse previously cached computation must recursively reduce offset multiplier node offset multiplier node case case operand terminal node care terminal node operation commutative reorder operand node operand come propagate affine transform branch operation separately high branch build normalize aadd node getgnode node operand match know simply branching true case operator high branch likewise false case branch canonical caching aadd cache applying operation operand provably time cache brfri recursion suggests canonical caching scheme normalizes cache chance cache cached reversing normalization ensures optimal reuse operation cache lead exponential reduction time caching caching getnormcachekey canonical cache modifyresult reverse normalization summarized bottom half operation limitation prevent covering operation efficiently aadds briefly summarize computation aadd node normalization restriction restriction true false returning proper branch node containing test reduce operation summed marginalized simply restricted seem negation aadd node note violates normalization scheme consequently negation must likewise reciprocation must reordering rudell reordering recomputes edge reordered node aadds loss cache naive cache relied hashing equality testing find many node computation turn offset multiplier differing exponential explosion node consequently hashing scheme considers equality algorithmcr node node difficult property hashing scheme next outline work efficiently nearly optimally practice node cache used getgnode operation cache used cache containing four offset multiplier computeresult operation hopi hopi note operation opposite hopi hopi hopi hopi hopi note operation modified handle null modifyresult operation normalized cache computation modification brfri brfri brfri brfri brfri note brfri hopi brfri hopi brfri computeresult getnormcachekey modifyresult routine aadd node euclidean euclidean consequence know graphically dimension hashing scheme origin hashing extract base representing fractional hash effectively discretizing bucket width equality test true hashing scheme origin hash bucket fall bucket bucket width probability node straddling bucket empirical hashing scheme sufficient prevent uncontrollable case visualization hashing scheme dark circle ring radius hashing scheme hash ring bucket also hash bucket squared avoid thus hash efficiently squared origin aadds time reduce aadds multiplicative worst case sketch ordering aadd fixed edge thus reduce seen analog aadd operation time bottom aadds left overhead normalization note linear aadds probability cpts normalization reduce cache reduce cached node clear aadd must fewer reduce call fewer cached node worst case aadd generates many reduce call cache aadd multiplicative time operator time aadds linear operation exponential sketch operation hold true operand aadds computation terminal exponential operation must time exponential hand operand aadds recursing high branch operand step recurses branch respective additive multiplicative normalized canonical caching scheme thus yielding cache branch cached node call aadd operation empirical operation demonstrates relative time aadds operation exponential linear time reduction proved bayes bayes simply elimination fixed greedy treewidth minimizing ordering replaced aadds show network time consisting evidence publicly http cpts parent node note probability aadds indicating aadd able additive multiplicative case also aadd yield exponential linear reduction considerable computational exploiting additive multiplicative inherent cpts markov process mdps simply iteration tabular factored mdps sysadmin domain simply substitute aadds transition dynamic factored iteration show relative iteration convergence optimal bayes aadd time node time aadd node time alarm barley carpo hailfinder insurance network elimination time tabular aadd inference bayes exceeded memory iteration time bottom final tabular aadd network configuration sysadmin network star bidirectional ring configuration transition dynamic sysadmin considerable additive note exponential size aadd little additive survives nonetheless manages take considerable additive computation thus comparably exponentially concluding aadd proved time multiplicative linear case exponential empirical tabular aadd used bayes inference concluding aadds well yield exponential time conclusion emphasize show elimination iteration aadds best bayes inference many handle efficiently specialpurpose modification show transparently substituting aadds diverse probabilistic inference used yield exponential exploiting additive multiplicative suggest aadd yield exponential time probabilistic inference gross simplification
