singleton consistency enhances pruning consistency ensuring network inconsistent assignment enforce optimal time give time enforcing achieves thus optimal costly trade time optimality nevertheless last time previously show good ensuring consistency lead failure enforce idea reasoning sometimes name domain limiting assignment domain ensuring consistency fail lhomme used accurate heuristic dpll freeman ambulagan satisfaction csps introduced name singleton consistency debruyne studied theoretically experimentally prosser debruyne nice property give real consistency enhancing ubiquitous consistency much simpler restricted path consistency berlandier consistency debruyne exotic consistency operational semantics understood enforcing remove domain thus opposed path consistency montanari kconsistency freuder implementingit done simply enforcing past debruyne bartak erben optimal time singleton consistency lack enforcing enforcing optimal time optimal time reached cost high prevents optimal time nevertheless time remains past show good preliminary network finite domain domain finite take ordered satisfying network assignment domain network satisfied binary domain consistent instantiation domain said inconsistent network consistent inconsistent network inconsistent removed empty domain inconsistent singleton consistency network singleton consistent network replacing singleton inconsistent inconsistent inconsistent debruyne bartak erben time binary optimal best time expect enforcingsac binary mcgregor know checking fail verifying domain path consistent pair path consistent deleted enforcing path consistency pair involving find path consistent worst case path consistency pair need checked looking compatible useless linked form path consistency pair involving removed optimal time path consistency storing guaranteed seeking compatible pair proving path consistency fail thus ckjccd enforcing path consistency enforcing path consistency pair path consistent becomingpath inconsistent deletion pair thus path inconsistent worst case time optimal time data storing inconsistent removed must consistency remaining data fact lead wipe consistency hold long domain removal consistency lead time data sufficient reach optimality waste time time scratch enforces lowest time idea behind optimal want redo potentially time consistency optimal inout boolean init phase pendinglist else false foreach copy domain data propagac propagac foreach pendinglist pendinglist else false propag phase pendinglist pendinglist propagac else false foreach pendinglist pendinglist true scratch subproblem time inconsistent represents consistency call avoid costly repetition consistency call duplicate time benefit incrementality consistency generic incremental call call consecutive call differ deletion subproblem sacopt domain noted data enforcement propagac incrementally propagates removal call initialising data false inconsistent composed main step consistent line loop line take domain creates copy line removal propagated subproblem inconsistent pruned removal propagated line propagating master inconsistent line twofold subproblem removed line line never subproblems removal benefit propagation duplication line subproblem pendinglist propagation line initialisation phase finished know pendinglist inconsistent removal contained propagated loop line propagates removal line propagation fails mean inconsistent removed domain master line subproblem containing propagation list propagation line pendinglist empty removal propagated subproblems optimal time binary soundness removed line line inconsistent inconsistent initialisation phase line inconsistency proceed induction remaining case removed line inconsistent inconsistent line mean made consistent containing inconsistent inconsistent sacopt sound completeness thanks pendinglist line know consistent thus remaining inconsistent consistent network binary optimality network binary work arity used time obviously depend case optimal time regin used line tell time namely regarding time loop copy data propagatesarc consistency subproblem line task nded loop line subproblem time consistency subproblems incremental mean restriction thus cost consistency propagation subproblems cost updating list line worst case removed thus list leading pendinglist time optimal chose list list propagated used specified removal accurate list used mackworth domain modification bear mind used decrease time optimal losing time optimality save used network seems difficult reach optimal time maintain subproblems time subproblems need optimal time optimal requiring whole process relax time optimality reach satisfactory time avoid discussing term instantiate idea binary idea optimal arity sacsds sharing data much incrementality avoid redundant work duplicating subproblem data optimal optimal time domain subproblem propagation list note presentation list domain list removed thanks domain know removal domain also used avoid propagation phase scratch exactly domain enforcing removal restart scratch propagation main idea opposed sacopt duplicate subproblems data optimal used data maintained master case last maintains last smallest compatible built nevertheless used subproblems avoid repeating done work initialisation line repeatedly pendinglist propagates line note mean enforcement must initialised line inalgorithm inout boolean pendinglist else false foreach pendinglist pendinglist pendinglist pendinglist propagsubac else deleted propagmainac deleted updatesubproblems deleted else false true propagac inout domain inout deleted boolean foreach foreach last last last else deleted deleted false true propagmainac propagsubac procedure updatesubproblems deleted foreach deleted deleted deleted pendinglist pendinglist consistent inconsistent removed line deletion propagated master propagmainac line removed deleted line used updatesubproblems line removed subproblems list pendinglist propagation modified subproblems propagmainac propagates deletion master propagsubac propagates deletion subproblems part belong propagmainac propagsubac propagsubac used propagate consistency subproblems come fact data modified mean last line data former loop line know last subproblem well data subproblems thus must modified propagsubac last guaranteed smallest supportin subproblemsand achieving propagmainac last data line need deleted removed propagation removal subproblems proving inconsistency subproblem done updatesubproblems remove deleted subproblems also propagation list pendinglist propagation subproblems time binary soundness note last achieving last domain subproblems subdomains subproblem also last explains propagsubac benefit last losing line made soundness come completeness completeness come fact deletion propagated initialisation line pendinglist main loop process subproblem time inconsistent inconsistent line deletion make inconsistent line propagmainac line removed subproblems line pendinglist propagation list propagation line main loop pendinglist empty removal propagated empty consistent subdomain data last domain propagation list considering regarding time duplicate domain propagates consistency subproblem line task ndnd removal propagated pendinglist line operation subproblem worst case time consistency subproblems domain subproblem stored propagation launched domain time propagation subproblem thus spite propagation subproblem removed thanks incrementality consistency propagation removal note reach optimal consistency subproblems duplicate data optimality cost consistency propagation time propagation removal consistency subproblems domain subproblems sufficient time time improvesthis complexitybecause domain subproblem propagate subproblems time expect time last reduces even permit optimal time gain assessed enforcement subproblem must done copy built runtime potentially ndnd time duplication creating subdomains network binary frost time prosser pentium memory window tested note note propagation list done recommendation made bartak erben parameter tested mean time sparse network network domain density network relatively sparse five neighbour tightness network consistency subproblem storing list subdomains sacopt sufficient show best tighter inconsistent removed tightness peak mentioned bartak erben propagation useless sparse network around peak clear winner time slower time slower dense network network domain graph binary show close consistent tightness data useless propagation howeverthe cost buildingthis data time time around peak little time repeatedly recheck consistency subproblems cost testing subproblem remains tight time inconsistency propagation data useless conversely bartak erben worthwhile intuition data cost creation profit expect costly best time peak propagation subproblems also avoid redundant work reduce work subproblem conclusion optimal time high prevents network optimal time show good comparedto literature open alternative pruning network part network also used heuristic done success ambulagan
