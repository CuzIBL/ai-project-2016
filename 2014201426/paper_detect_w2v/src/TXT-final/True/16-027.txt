 
       we consider that we have made a decisive step towards determinism in parsing. we agree with winograd's hesitation to evaluate the determinism hypothesis as formulated by marcus. however  this does not make us doubt about the possibility of determinism; on the contrary  we examined not only how to 
improve over marcus  but also the historical reasons of the non-determinism of most systems. 
       our improvements are based on two principles: syntactic-semantic integration  and quasi-simulta ieousness. the f i r s t means that there is no such thing as  the autonomy of syntax   marcus ; so  we agree with schank and  further  we showed that local semantic ambiguities could be solved deterministically  marcus  ch.1  claims that these ambiguities need parallel processing . the second permits the processing of structures too d i f f i c u l t for parsifal e.g. locally ambiguous pp attachments. 
detailed examples support our proposals. 
	i 	possible factors of non-determinism 
       with the notable exception of marcus  already mentioned   most  parser makers  seem to agree on having a non-deterministic strategy  backtracking or parallelism . schank  et al.  have always perceived the inadequacy of those strategies  and practised the integration of syntax and semantics  but they have conserved a top-down approach  'prediction' cf wilks  
       we shall try to show the importance of 1 factors of nondeterminism which are not related to nl ambiguity: the architecture of systems  rules and interpreter  stack mecanism  word by word processing. 
a. 	architecture of systems 
       decision elements for a parser are of 1 kinds: morphosyntactic  semantic  pragmatic and contextual. so  it is obvious that considering only one of them brings about non-determinism  independently of nl. i t s e l f . however  even when a system uses a l l of this information  non-determinism may appear due to an a r t i f i c i a l separation between modules  eg syntactic & semantic . some non-determinism remains even in the most sophisticated modular systems and that's because: 
-one module is dominating the others  as in 	shrdlu  
-too many interaction points exist 
-the non-det. may find refuge in one of the modules  as in parsifal  	the semantic one . 
b. 	representation for a grammar and interpretor 
       the interpreter has usually either a top-down or a bottom-up strategy  but most frequently top-down. 
but a relative clause  for instance  should rather be parsed bottom-up  in order to be attached deterministically. in theory  the marcus parser seems to permit this strategy   attention shifting rules  . but the grammar marcus actually wrote does not take advantage of this f a c i l i t y  nd relative clauses are also parsed top-down. from his theoretical work   we s t i l l have the confirmation of following point: 
     a completely top-down or completely bottom-up mecanism must parse non deterministically some sentences that would not give the same trouble to a mixed strategy.  in the f i e l d of programming languages  such a mixed strategy has already been applied  
earley  
     now  another important point: in a traditional declarative system  atn or psg   the rules are independent of the interpreter. so  when a conflict arises between two valid rules  it is not possible for the interpreter to make a decision. hence one has to l i m i t the role of the interpreter and the rules must be non ambiguous  their condition part being as detailed as possible . 
c. 	the stack 
       one essential step in nl processing is to gene rate from a text a so-called meaning representation. concretely  this representation is an interconnected graph of internal structures  b u i l t step by step. at a certain step  processing may be interrupted in order to start working on some other structure. this makes necessary to store a trace of the interrupted structure. in general  this is done by means of a stack. 
       each new interruption makes the structure at the top of the stack inaccessible. this implies two crucial problems: when to start building a certain structure  and then  how does one know it is finished. 
       a complication may appear when a certain word functions as a starter for several structures. without elaborating on this problem  we can say it has to do with top-down or bottom-up interpretation of the rules. even harder is the decision of ending a structure: take the ambiguous sentence  i saw the man with a telescope . the d i f f i c u l t y comes from having to decide either to end the direct object after 'man' or to continue it by a np modifier. 
       that proves a certain inadequacy of the stack mecanism. one could think of a l i s t instead of a stack  in order to solve this problem  cf schank ; however  when there are several modifiers in succession  attachment becomes so complicated that this necessary improvement is by no meansaufficient: it seems 

1 g. sabah and m. rady 
necessary to make use of a quasi-simultaneous mecanism like ours  cf ¡ì ii-c . 
	d. 	word by word processing 
       most parsers  read  one word at a time  integrating it into a representation before any processing of the next word. this strategy could be termed  hie et nunc  and opposed to the famous  wait and see  strategy. the obvious advantage of the second one is that the parser may delay a d i f f i c u l t decision until it becomes easier. in particular  many potential ambiguities disappear as soon as what canes next is known. 
e. 	the design of our parser w i l l result from the solution of the four above problems: -integration of syntax and semantics 
-top-down and bottom-up rules 
-quasi simultaneous elaboration of structures -look ahead f a c i l i t y . 
	ii 	original features of the parser 
a. 	formal rules 
       the final aim of our parser is to generate a semantic representation. but  it also generate a 
       provisional syntactic representation based on systemic grammars  halliday   in order to have reference either to semantic or syntactic information when i t s own functioning makes it necessary. 
       the  condition part  of a rule considers syntactic and semantic features of the current structure but also of whatever comes next  words or structures. 
the  action part  can do several things: 
-generate and develop a syntactic structure 
-develop a semantic description of a syntactic structure 
-attach a structure to another 
-detach or resume a structure 
-activate or deactivate other rules   meta-actions   
       both the actions and the conditions allow a fusion of syntax and semantics and may call domain specific procedures  eg for inferences ... . the rules are arranged in overlapping packets. each packet corresponds to a well defined kind of situation  top-down definition . interruption rules  ¡ìii-b1  allow a bottom-up mecanlsm. 
take a rule activated by 'to cure' for example 
if .the verb is followed by a np & .the semantic description  sd.  of this np is compatible with the description of the 'objective' case of the verb 
then .attach np to verb as direct object & .attach sd of np to sd of verb with label 'objective'. 
this rule is ok for  the doctor cures the f l u     but does not apply for  the doctor cures my daughter . such cases are to be treated by a rule similar to the preceding one  replacing 'objective' by 'dative'. 
       in an ambiguous case like  the doctor cures i t   the two rules by themselves do not resolve the semant i c problem at this level  but  having tried them  
we may find that the search for the antecedent of ' it' is made easier: it is possible to start inferences from the conditions of these non applied rules. 
b. 	look ahead 
       this notion is well known to people who write compilers  cf ako & ullman quoted by marcus . marcus was the f i r s t to apply it to the syntax of nl and we tried to go over to semantics. 
       materially  look ahead means that the parser has a certain field of vision  including the current structure and the three next ones  which may be non terminal  1 is an experimental choice  cf marcus for the necessity of a limitation . 
1. look ahead and semantic ambiguity 
       to show the connection between look ahead and choice of a meaning representation  let us consider the two sentences:  john makes a program in simula  
and  john makes a program conscious . 
       each sentence corresponds to a different meaning of 'to make1 and it is necessary to know what comes after the f i r s t syntactic object to resolve the ambiguity. so  this part of the sentence should be processed before choosing a meaning for the verb. the look ahead f a c i l i t y permits to examine simultaneously the 1st and 1nd complements. looking at this latter  one can decide between 'makel' and 'make1' and correctly attach the semantic structures. in case of truly ambiguous sentences  what remains arc syntactic and semantic preference heuristics. 
1. interruption rules 
¡¡¡¡¡¡we want to make it. possible for a structure to wait completion of another one and resume then. if so  si  s1  s1 are the viewed structures  the current one plus the 1 in the f i e l d of vision  and rl the rule: if si is a np & s1 an adjective & s1 a pp  then . . . ; and  if this rule being active the field of vision i s : 
s1= vp ... verb:make      si- article:a  s1=   noun: program    s1= adjective:conscious  then  it is visible that rl does not apply  for si is not a np. so  the np and pp have to be generated f i r s t . this w i l l be done by means of: 
r1: if si begins a np then generate a new pp & i n sert it before si & activate np rules. r1: if s1* begins a pp then generate a new pp & i n sert it before s1 & activate pp rules. 
r1 and r1 must be active at the time as rl. there is no need to order them since the conditions in rl w i l l be satisfied only after r1 and r1 are applied. when they apply  they interrupt the development of the active structure by creating the np and pp  and a c t i vating corresponding rules. once the np and pp are detached  the interpreter goes back to si and applies rl 
c. quasi simultaneous execution 
       this is another original feature of our parser. as we have shown  the stack mecanism does not permit the correct recognition of the end of a constituent 
* these rules have a variable  $  in this place: then it applies either if si or s1 or s1 matches the condition part  cf  . this seems an improvement on the  attention shifting rules  developped by marcus. 
** inspired by simula 

¡¡¡¡¡¡¡¡ quasi simultaneous  generation brings a new solution to this problem: a developping structure can be detached as soon as possible and elaborated latter if it is needed. this makes possible more intelligent choices in the situation of complex attachment mentioned above: when attaching a new structure  the parser may consider all the previously detached ones. 
two operations are involved: detach and resume. 
they are to be performed in following cases: 1  creating a new structure; means detaching the current one before activating the new one. 1  end the current structure  which is then detached; the previous one being resumed. 
1  explicit detach instruction in a rule  implying that the last detached structure is resumed. 
a  similarly  explicit resume instruction in a rule. 
g. sabah and m. rady 1 
a lisp version is being considered. 
           the present conceptual representation permits to consider synonymy  homonymy and selection restrictions. moreover  in a perspective of integration of the domain knowledge to linguistic competence  this representation  or a more frame-like one  w i l l make possible not only these tasks but also more sophisticated and useful inferences. 
           the program is already able to process the french forms of every example 	mentioned 	in the text  and 	we hope to make it usable to other research teams in the next future. 

¡¡¡¡¡¡¡¡let us have some examples:  le cahier de l'etu diantc que jean a examine.    the note book of the girl that john examined-'it'.    in french  the verb has a mark permitting to distinguish between  examined i t     the note book and  examined her  the girl  
¡¡¡¡¡¡¡¡we see that: .a deterministic processing of the relative clause needs to wait for its attachment until one has treated the verb  which has a gender mark capable of indicating the correct attachment. . to examine  has several meanings depending on what is examined. the choice of a certain meaning needs a recognition of the actual object of examine  that is equivalent  to the attachment of the relative clause. here we have a couple of contradictory requirements. 
¡¡¡¡¡¡¡¡let. us detail how a quasi simultaneous treatment can get. us out of this predicament. 
when the verb of the relative clause is seen certain syntactic and semantic i'eatures of its object can be recognised; the parser then detaches the relative clause and resume the last seen np  here   the g i r l   . there is no match with the ' i t ' mark  so the relative clause cannot  modify ' g i r l ' . this np is then terminated  and  the np corresponding to 'note book' is resumed. this time  the relative clause is accepted as a modifier and can itself be resumed in order to solve the ambiguity in 'examine'. 
we can also give examples of pp attachment: 
 john puts the wine on the table.  
 john drinks the wine on the table.  
       as soon as the noun 'the wine' has appeared  the np can be detached  permitting the pp 'on the table' to be started. when considering possible attachments for this pp  the rules allow to take into account the features of the verb. 
       the differences between 'put' and 'drink' explains that it is possible to attach the pp to the verb in one case and to the np in the second case. 
conclusion 
       after examining the main factors of non-determinism in parsers  we tried to solve the corresponding problems. actual experimentation confirms the interest of such an approach. we made a simula program of about 1 instructions which parses sentences of about 1 words in 1 seconds on a pdp1  using an approximate total of 1 k core . 
