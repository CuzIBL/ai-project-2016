 
while prolog has proven useful for writing programs in a variety of domains  it suffers from its lack of support for modularity  particularly for building libraries of routines and data. this paper points out some problems with standard prolog that make libraries inconvenient. it then describes a solution to those problems based on the concepts of modules and database views. 
1. introduction 
conceptually  prolog is a simple  but powerful  language. we have found it useful for representing small databases and for parsing rich languages. however  one place we find prolog lacking is in its support for modularity; there is no fully satisfactory way to implement libraries of routines or data. 
there are two places where we find libraries convenient: to implement common data types and to store domain-dependent data. the common data types are things like lists  sets  and queues. it seems that every program of moderate size reimplements append and member on lists  and half the programs reimplement union and subset on sets. 
we have encountered domain-dependent data in the course of building grammars for limited-domains of english. while writing an english front-end to a calendar service  for example  parsers for two or three domains might be implemented: dates  places  people; as well as for the operations on the calendar itself. it is convenient to use the same parts of speech for each of the domains  yet to keep some of the vocabulary distinct. thus week may be a fine noun in the domain of dates  but not for the domain of places. that is  noun  week  may be true in one domain but not another. 
in this paper we will present some of the difficulties in building libraries of prolog statements. the example of building libraries for common data types will be used because it is easier to illustrate  but the problems and solution are valid for domain-dependent data as well. 
1. the problems 
this section points out three problems encountered when building libraries of prolog statements. in what follows  when we speak of standard prolog  we mean prolog as defined in clocksin and mellish's programming in prolog  cl1 . 
1 no local routines 
occasionally in the process of writing a routine  an auxiliary routine is needed. consider  as an example  the fast reverse routine from clocksin and mellish  p. 1 : 

the sole purpose of revzap is to assist reverse; it should never be called except from reverse. unfortunately  in standard prolog all routine names are global  so revzap takes its place in the database alongside reverse. this is especially a problem for library routines as it means that a user of the library must know the names of auxiliary routines so as not to inadvertently reuse them. 
a common approach taken in standard prolog is to use strange names for local routines  sometimes created by including some nonalphabetic character in the name. while this convention works to keep names in libraries separate from those in application programs  it does not prevent name collisions between different library files. 
another approach taken to solve the problem of hiding auxiliary routines is to add the concept of a module to prolog. routines are then packaged in a module and those names that should be visible outside the module are exported  egg1  jon1  per1 using this implementation  the definition of reverse might be surrounded by 
module list 
:- export  reverse . 
definition of reverse and revzap 
end list 
1 consulting twice defines twice 
introducing modules goes a long way towards making libraries usable. 
yet  prolog's weak naming structure is still a problem. consider an example of building a set using lists. assume that the module list is available with the routines append and i 
to suggest that ssnset can be implemented without using member it to miss the point. duplicating code if an always available  though not always attractive  alternative to using a common subroutine. 

while one wouldn't wish to prohibit using both sets and queues in the same program  consulting both set and queue will result in defining the routines of list twice. the result of this for most prolog implementations is to double the length of each routine  since the new clauses would be appended to the old ones. 
1 cannot overload routine names 
notice also in the example that delete is defined for both sets and queues.1 since delete is a global name  if both set and queue are consulted in the same program  the clauses for the two deletes would be chained together possibly resulting in one of the implementations being hidden. 
even if it were desirable for the clauses defined in two different files to be chained together  in standard prolog the clauses cannot be updated selectively; the standard update routine recousult replaces all the clauses in a routine  without regard for where the clauses were defined. this is a handicap particularly in the case where a routine is defined partially by a general rule and partially by context-specific facts. 
as an example  consider a general rule about families: 

for a specific family  there may be some people  i.e.  the earliest known ancestors  who are known to be siblings but whose parents are unknown. to capture sibling completely  facts of the form sibling sibl sib1 . 
are needed. in order to keep things straight  general rules are kept in a file rules and specific facts are kept in the files fam1 and fam1 for two different families. then 

sets the context to answer questions about the first family. but there is no easy way to change the context to answer questions about the second family  since 
   :- reconsult fam1 . will retract the general rule about siblings. 
1. our solution 
we propose a solution to the problems presented in the last section based on two concepts: modules and views. 
  the prolog database is partitioned into modules; each module is a collection of routines. a routine is a sequence of clauses  where each clause has the same principal functor in its head.1 every routine is contained in some module. a routine may be tagged as private  in which case it is not visible outside the current module. 
  each module sees the database through its view. a view is a sequence of modules; each module sees only those routines that are contained in the modules of its view and it sees them in the order in which they occur in the view. 
1. the same definition of delete could be used for both sets and queues by not taking advantage of the knowledge that element! only occur once in a aet. but  again  this it besides the point. 
	a. feuer 	1 
a module can be represented as a list of routines and a routine as a 
list of clauses. the view for a module is a list of module references. when considering any goal  the view for the module containing the goal is searched top-down  just like the database is searched in standard prolog. thus  a view behaves like a dynamic context. 
figure 1 shows the definition and representation of a module list  with the two routines reverse and revzap. reverse contains one clause and revzap contains two. the view for list is list followed by builtin. in the program  rather than explicitly declaring routines public  we use the operator  $  to hide a routine name. thus   srevzap  is a routine that is private to list. 
when a module is created it is given a view of the database that includes itself plus the builtin routines  in the module builtin . in our prolog  builtins are those routines coded inside the interpreter itself. 
another module  called standard  contains many of the routines commonly thought of as builtin but actually coded in prolog  such as atomic and not. 
the directive use x  
adds the module associated with the file x to the view of the current module. there is a one-to-one correspondence between modules and files. a file contains prolog source text and a module contains prolog objects; modules exist only within the interpreter. the file-name and the module-name are the same. if x is not yet in the database  the file x is read from the file system and the module x is built. here is how set might be implemented given modules  view  and use: 

the modules in the view for set are set  builtin  and list  in that order. notice that where the previous implementation of set implicitly relied upon member for list  this implementation does so explicitly. the  $  in  list$member  constructs an absolute reference to the routine member in the module list.1 queue is defined similarly to set  beginning with a use directive. 
next  consider a program  p  that uses both sets and queues. it might begin with two use directives: 

in p  member would refer to the routine member defined in the module set. delete  unadorned  likewise refers to delete in set. queuesdelete refers to delete in queue  append would be an error  as would be listsappend  since these routines are defined in list  which is not visible to p. 
finally  the case of selective reconsulting is easily handled. using the modules rules  faml  and fam1 with sibling being defined in each  the context for the first family is established similarly to before: 

1. routine* are not demarcated syntactically in prolog. since  by definition  a routine is the sequence of clauses with a given principal functor in their head  it is impossible to have two routines with the tame name  i.e.  the same principal functor  in the same module. 
1. the expression ''sx  used to reference an x that is private can be viewed as an absolute reference to a' in the current module. 
1 a. feuer 
to change the context to reflect the second family  we introduce the directive remove which removes all of the clauses associated with a given module: 
:- remove  fami . :- use fam1 . 
since clauses are associated with a module  the general rule for sibling that resides in rules is untouched. 
1. summary 
prolog is increasing in popularity because it embeds the elegance and power of logic in an easy to use language. unfortunately  libraries of prolog routines are not easy to build because the naming structure of prolog is too simple. in particular  we have identified three problems: absence of local routines  consulting a file more than once  and overloading routine names. 
our solution to these problems rests on the ideas of modules and views. a local routine is a routine visible only within the module in which it is defined. instead of consulting files  we use modules; use may consult a file if it isn't already in the database. finally  a routine is accessed by its name and by its module  thus there is no conflict when two routines have the same name in different modules-since a view is an ordered list of modules  the routine occurring first in the view is the one referenced. the other may be accessed by using an absolute reference. 
acknowledgement 
i am grateful to shamim naqvi and claude sammut for their comments on a draft of this paper. 
