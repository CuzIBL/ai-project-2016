 
　　　in this paper we consider a .specific type of logic programs called recursive-schema programs and show that the class of recursive-schema programs has s u f f i c i e n t expressive c a p a b i l i t y   which provides an alternative simple proof for the resultby tarnlund concerning the computational power of horn clause programs. further  it is shown that any turing computable l o g i c program can be expressed as a c o n j u n c t i v e formula of three recursive-schema programs. some application issues are also discussed in the contexts of program 
transformation and synthesis. 
	1. 	introduction 
　　　in reference to recent attempts concerning what is called the f i f t h generation computer project  the research area of logic programming languages has lately been a t t r a c t i n g considerable attention. since a logic programming language p r o l o g was . i n i t i a t e d by the w o r k of 
co l meraure colmeraure 1  and kowalski kowalski 
1.   intensive work on prolog has been done this decade because of i t s great f e a s i b i l i t y as an al language. among others  there are a few papers d e v o t i n g to the t h e o r e t i c a l issues on l o g i c programming languages. tt was shown by tarnlund  tarnlund 1  that any turing computable function is computable in binary horn clauses  which ensures the s u f f i c i e n t computational power of horn logic programs. 
　　　this paper concerns a subclass of horn logic programs. f i r s t we introduce a certain type of a logic program called  recursive-schema   and then define a class of  recursive-schema programs  in a 
　　　recursive manner. a recursive-schema program has very simple structure and property common to many conventional logic programs  and it is explained by the following example. 
	suppose 	one 	wish 	to 	d e f i n e the 	concept 
 ancestor   then he may express it as a binary predicate as follows : 
     ancestor x y  holds true if and only if x is a parent of y  or there exists z such that x is a parent of z and ancestor z y  holds true in a c o n v e n t i o n a l l o g i c formula t h i s is represented  using a  parent  predicate  l i k e ancestor x y   - parent x y  ancestor x y   - parent x z   ancestor z y . 
on the other hand  one may also express the concept in a different fashion  that is  
ancestor x y   - transitive-closure parent   x y   
where 
transitive-closure p  x y    - p x y  transitive-closurc p  x y    - p x z   transitive-closure p  z y  . 
the introduction of a recursive-schema program is motivated by the latter viewpoint of formulating a concept. 
　　　in the next section we introduce a fixed logic program called  recursive-schema  which is a simple generalization of   t r a n s i t i v e - c l o s u r e   mentioned above  and define a class of recursive-schema programs. it is shown that the class of recursive-schema programs has sufficient expressive power in that any recursively enumerable language can be computed by a recursivn-schema program. this result gives an alternative simple proof for the tarnlund's result p r e v i o u s l y mentioned. preceding concluding remarks in section 1  in reference to program transformation and synthesis  some application issues are discussed in section 1. 
1. a class of logic programs recursive schemas 
　　　it is generally understood that prolog  a logic programming language  is one of nonprocedural programming languages. nonprocedural programming has many d e s i r a b l e f e a t u r e s   because it can suppress unnecessary details of low-level constructs the procedures bears  and it enables one to write programs in more concise manner  leavenworth 1 . the simpler a program i s   the easier it is understood  debugged  and modified. 
　　　now  l e t a predicate  recursive-schema  be defined as follows: 

since we are concerned with logic programs  it should be noted that the second clause  1  is 
logically equivalent to 
 1'  	recursive-schema a b f g x   b g x   recursive-schema a b f g f x  . 

1 t. yokomori 


primitive predicates by using some rules. 
     it would be useful to point out the following facts : 
 1  any program in rec can be transformed into several assertions and one fixed program  and 
 1  starting with the fixed program and translating those assertions  one can synthesize a program in rec. 
this is illustrated by figure 1. 
     when we compare the two databases  it is easily seen that dr1 consisting of one fixed rule   recursive-schema program  and assertions of facts is much simpler and more effective than db1 in the following sense. that is  each program in db1 is demand-driven  so that it is not until when called that it is embodied. hence  db1 can save much space. 
t. yokomori 1 
1. concluding remarks 
by introducing a specific logic program called 
 recursive-schema   we have defined the class of  recursive-schema programs  in a recursive fashion. a recursive-schema program was proposed to capture the common and simple structural property of logic programs  and it has been shown that the class of recursive-schema programs has sufficient computational power to compute any recursively enumerable language. it should be noted that from the way of constructing the class of recursive-schema programs and the result on computational power just mentioned above  one can conclude that any turing computable logic program can be obtained from a small set of primitive predicates and the  recursive-schema  


thus  	a program   p l u s   can be obtained from 
 append  by one-to-one mapping t. this means that any program in rec whose domain is the set of natural numbers can be obtained by using only the transfer mapping t and a few p r i m i t i v e s in the  list world . in general  the same thing goes to the recursive-schema programs whose domain world has a one-to-one mapping to the list world. 
by applying a few rules. 
     further  we have discussed some applicat i on issues of recursive-schema programs from rather new view-points of program transformation and synthesis. it was demonstrated that a program transformation in terms of  recursive-schema  can provide a spacially efficient method for database design  while a program systhesis in our sense can be useful for generating new predicates. 
     the proposed methods in this paper can be easily implemented in prolog and incorporated in the phase of database design. 
acknowledgements 
     the author would like to express his gratitude to dr. toslo kitagawa  the president of iias-s1s  fujitsu ltd.  for warm encouragement and useful suggestion he has been giving through his work. 
     also many thanks to hajime sawamura for very constructive comment. 
