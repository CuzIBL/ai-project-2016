 
the inevitable proliferation of expert systems underscores the need for robust  friendly interfaces requiring minimal user training. the objective of the xcalibur project is to meet this need by providing natural comprehension and generation in the context of a focused mixed-initiative dialog. the xcalibur architecture is discussed  including its three central components  parser  generator and information manager   its methods of handling ellipsis and imperfect input  and its relation to the underlying expert system. 
1. introduction 
　as expert systems mature into software products for a wide spectrum of users  the availability of flexible user interfaces becomes critically important. natural language interfaces become particularly appropriate for the following reasons: 
 c  no extra cognitive demands are placed on the user  allowing him or her to focus on the problem at hand. 
  the domain specificity of most expert systems provides strong constraints on the vocabulary  actions and concepts that may be expressed in natural language. this renders an otherwise open-ended task tractable. 
  recent advances in multi-strategy parsing  fail-soft recovery techniques  ellipsis handling and the like  help to make flexible natural language communication a practical reality  1  1 . 
　this paper describes the xcalibur project  whoso objective is to provide flexible natural language access  comprehension and generation  to the xsel expert system . xsel  the digital equipment corporation's automated salesman's assistant  advises on selection of appropriate vax components and peterg. anick 
digital equipment corporation 
hudson  ma 1 
produces a sales order for automatic configuration by the r1 system . part of the xsel task is to provide the user with information about dec components  subsuming the data-base query task. however  unlike a pure data base query system  an expert system interface must also interpret imperatives requesting actions  understand assertions of new information  and carry out task-oriented dialogs  such as those discussed by grosz  . xcalibur  in particular  deals with commands to modify an order  as well as information requests about its present task or its data base of vax component parts. xcalibur will also process clarificational dialogs when the underlying expert system  i.e. xsel  requires additional information or advice  as illustrated in the sample dialog below: 
 what is the largest 1 fixed disk under $1  
the rp1 aa is a 1 mb fixed pack. disk that costs $1. 
 add /wo rp1-aa disks to my order. 
line item 1 added:  1 rp1-aa  
 add a printer with graphics capability fixed or changeable font  
 fixed font lines per minute  
 make it at least 1  upper/lowercase. 
ok. line item 1 added:  1 ixy1 -sy  
 tell me about the ixyl 1 
the ixyl 1 is a 1 lpm line printer with plotting capability 
except for the system-driven clarification interchange  which is beyond xcalibur's present capabilities  this dialog is indicative of the present state of our system. 

1 j. carbonell et al. 
the rest of this paper discusses the major modules of xcalibur: the dypar ii parsing system  the information manager and the natural language generator. since the major contribution of xcalibur thus far is perhaps the integration of diverse techniques into a working system  we focus more on the engineering aspects of our project. we do mention  however  some advances we have not reported elsewhere  including expectation-based error-recovery  case-frame ellipsis resolution  and focused natural language generation. figure 1 provides a schematic view of xcalibur  and the following sections present some details of the internal workings of xcalibur as it processes a sample information request. 
1.the dypar-ll module 
　the original dypar natural language parser  was built to test the feasibility of incorporating multiple parsing strategies into a uniform computational framework. dypar-ii is an extension of the dypar parser that incorporates recursive case-frame instantiation  in addition to the semantic-grammar  pattern matching and global transformation strategies present in the original system. through multi-strategy parsing  a measure of flexibility  robustness and conciseness can be achieved that is not exhibited in more rigid single-strategy systems.1 in this section we mention some of the highlights of the dypar ii system. 
1 . 1 . the recursive case frame method 
   a case frame consists of a header pattern and a set of marked or positional cases with  semantic and syntactic  expectations for possible case fillers. cases and case frames correspond to semantic units in the problem domain. although different classes of case frames  such as action-verb case frames and complex-noun case frames  play different syntactic roles  all are recognized by the same interpreter. 
　efficiency and robustness is achieved by combining bottom up recognition of semantic patterns  corresponding to case headers  for instance   with top down expectation-driven instantiation once a case-frame has been recognized. moreover  discourse level expectations and constraints can easily be integrated into the expectation and recognition mechanisms. 
the parsing method used by dypar-ii is summarized below:1 
1. if dialog expectations exist at the case-frame level  activate those case frames and skip to step 1.  then  if step 1 fails - i.e.  no expectations are confirmed - return to step 1 . 
1. apply a fast scanning unanchored match of the input  or input fragment  against a set of header patterns  which have been cross-referenced and precompiled into a discrimination network for efficiency. each pattern is associated with one or more case frames  and serves to stait a complete parse attempt in that frame's context. failure of this step may indicate that the utterance is an ellipsed phrase. 
1. if steps 1 or 1 succeeded  use the case frame  and syntactic transformations  in a top down fashion to generate syntactic and semantic expectations to recognize the rest of the input. here is where the system recurses into embedded patterns or case frames and where expectationdriven error recovery comes into play . 
   the reader is referred to  and  for a discussion of the multi-strategy approach. dypar-ii is a step on the way to the as yet unfinished multipar system  which carries the multi strategy approach to its logical conclusion - applying problem solving techniques to select dynamically the appropriate knowledge and strategy to apply as the parse unfolds. 
1 
   the computational mechanisms and knowledge structures of dypar-ii are reported in greater depth in  and . 
1. finally  the completed parse is mapped into a form suitable for the information manager. this second mapping gives the system a measure of portability to different domains. 
1. expectation-based error recovery 
   in the absence of a globally consistent parse of the input utterance  an expectation-based error recovery process is triggered  similar to the methods proposed by granger  and carbonell  i . errors can range from ungrammaticalities and interjections to unknown words and misspellings. our scheme calls for attempting corrections that satisfy pending expectations - and these can be ranked according to the strength of the expectation and the likelihood of occurrence for that particular error. thus far  spelling correction is our only fully operational recovery strategy. a word that can be corrected to fulfill an expectation receives much higher priority than a context-free spelling correction. for instance  the correction prot -  port in  add a dual prot disk  is made because a disk descriptor is expected.1 furthermore  semantically anomalous but  correctly spelled  words can be considered as candidates for correction  as in  copy the flies in my directory to the backup tape    but these corrections are more risky. 
1. the information handler 
   the information handler mediates the communications between the parser  the underlying expert system  and the natural language generator. currently  the underlying system is a stripped-down version of the real xsel  including access to a relational database of component descriptions  and the capability to create and modify a dynamic database of ordered  line-items   quantily-partname pairs   but lacking the expertise to suggest components to the user or check an order for configurability. 
1. internal representation 
　when xsel is ready to accept input  the information handler is passed a message indicating the case frame or class of case frames expected as a response. for our example  assume that a 
　command/query is expected  the parser is notified  and the user enters 
 what is the price of the 1 largest dual port fixed media disks  

   this representation embeds the case frame information extracted during the parse within primitives understood by the information-handling routines and xsel data adapter. the select field describes the selection criteria for a set of database items; the operation field describes operations to be performed on the set  such as ordering and truncating  the project field contains the attribute s  of principal interest; and the info-source field contains the database from which the objects are to be selected. in the example  the query does not explicitly name an info-source  which could be the component database  the current set of line-items  or a set of disks brought into focus by the preceding dialog. 
　　using a small dictionary  the tops1 spfll program generated 1 possible corrections to the word  prot  clearly expectations reduce search  especially in the presence of compound errors or potentially ambiguous input. 
the information handler is responsible for filling in defaults  modifying  and adding fields to the parser output to satisfy the needs of the expert system routines that execute the commands. it contains tables for mapping ambiguous attribute names  eg. 
 size    speed   into the field names appropriate to the selected object case frames  and for applying default database matching functions when these are not explicitly mentioned in the input. for example  in most contexts   1 mb disk  means a disk with  greater than or equal to  1 mb  not strictly  equal to . a  large  disk refers to ample memory capacity in the context of a functional component specification  but to large physical dimensions during site planning. we plan to extend the knowledge sources available to the information handler to support anaphora resolution and the more subtle pragmatic decisions that interfaces to expert systems require. we are also in the process of augmenting the internal representation language with recursion to handle joins/composition of attributes  as in  the cost of the controller for the disk.  
1. case-frame ellipsis 
　the xcalibur parser handles ellipsis at the case-frame level. its coverage appears to be a superset of the lifer/ladder system  1  1  and the planes ellipsis module . although it handles most of the ellipsed utterances we encountered  it is not meant to be a general linguistic solution to the ellipsis phenomenon. 
1 . 1 . examples 
　the following examples illustrate the types of sentence fragments our case-frame algorithm can parse. for brevity  assume that each sentence fragment occurs immediately following the initial query 
initial query:  what is the price of the three largest single port fixed media disks   
 speed   
 two smallest   
 how about the price of the two smallest   
 smallest with dual port  
 speed with two ports   
 disks with two ports.  
in the representative examples above  punctuation is of no help  and syntax alone is of limited utility. for instance  the last three phrases are syntactically similar  indeed  the last two are indistinguishable   but each requires that a different substitution be made on the preceding query. all three substitute the number of ports in the original select field  but the first substitutes  ascending  for  descending  in the operation field  the second substitutes  speed  for  price  in the project field  and the third merely repeats the case header of the select field filler. 
1. the ellipsis resolution methods 
 . ellipsis is resolved differently in the presence or absence of strong discourse expectations. in the former case  the discourse expectation rules are tested first  and  if they fail to resolve the sentence fragment  the contextual substitution rules are tried. if there are no strong discourse expectations  the contextual substitution rules are invoked directly. 
exemplary discourse expectation rule: 
if: the system generated a query for confirmation or disconfirmation of a proposed value of a f i l l e r of a case in a case frame in focus  
then: 	expect one or more of the following: 
1  a confirmation or disconfirmation pattern. 
1  a d i f f e r e n t but semantically permissible f i l l e r of the case frame 1n question  optionally naming the 
j. carbonell et al. 1 
	a t t r i b u t e 	or providing 	the case marker . 
1  a comparative or evaluative pattern. 
1  a query for possible f i l l e r s or constraints on possible f i l l o r s of the case in question.   i f 
	this expectation 	is confirmed  	a sub-dialog 	is 
entered  where previously focused e n t i t i e s romain in focus.  
　the following dialog fragment  presented without further commentary  illustrates how these expectations come into play in a focused dialog: 
 add a line printer with graphics capabilities. 
is 1 lines per minute acceptable  
	 no  1 is better 	expectations 1  1 & 1 
	 or  	other options for the speed  	expectation 1 
	 or  	too slow  try 1 or faster 	expectations 1 & 1 
　the contextual substitution rules exploit the semantic representation of queries and commands discussed in the previous section. the scope of these rules  however  is limited to the last user interaction of appropriate type in the dialog focus  as illustrated in the following example: 
exemplary contextual substitution rulo: 
if: an a t t r i b u t e name  or conjoined l i s t of a t t r i b u t e names  is prosent without any corresponding f i l l e r or case header  and the a t t r i b u t o is a semantically permissible descriptor of the case frame 1n the select f i e l d or the last query in focus  
then: substitute the new a t t r i b u t e name for the old f i l l e r of the project f i e l d of the last quory. 
　for example  this rule resolves the ellipsis in the following utterances: 
 what is the size of the 1 largest single port fixed media disks  
 and the price and speed  
　xcalibur currently has eight rules similar to the one above  and we have found several additional ones to extend the coverage of ellipsed queries and commands  see  for a more extensive discussion . it is significant to note that a small set of general rules exploiting the case frame structures covers most instances of commonly occurring ellipsis  including all the examples presented earlier in this section. 
1. the natural language generator 
   generation proceeds in three phases:  1  a request from the parser or information handler is converted into a conceptual dependency graph   1  the verb is selected and the slots of the cd graph are mapped into a case frame  and  1  the case frame is rendered into english. only the first stage of this process is domain dependent. stage two is performed by a case frame builder similar to that in goldman's babel system . the third stage includes dialogue modeling of objects already mentioned  and pronominal references are built for noun phrases that have already been said. throughout these stages  focus information is used to guide the generation process. 
1 . 1 . why natural language output 
   xcalibur chooses sentential output over a tabular form when a table would be degenerate. for example  suppose the user requests the price of all 1 volt graphics terminals costing less than 1 dollars. there is only such terminal  the vt1-ma  so xcalibur prints: 
   the vt1-ma is a 1 volt terminal with graphics capability that costs 1 dollars. 

1 j. carbonell et al. 
1. an example 
consider the following user input: 
    what is the price of the largest dual port fixed media disks   
　after parsing and database look up  the information handler passes the following request to the generator: 
 render-result 
	 class 	 disk   
	  a c t o r - l i s t 	 rp1 ba   
	  p r o j e c t i o n - a t t r 	  p r i c e     
 focus 	 ports 	disk-pack-type number-of-megabytes    
   the domain adaptor then constructs the following conceptual dependency graph. cd macros such as cd-be or cd-connect are used to represent concepts that are not cd primitives. the following cd graph is generated: 
 cd-be 
	 actor 	 rpo1-ba 	 ref 	  d e f         
 object 
	 disk 	 focus 	 ports media number-of-megabytes price   
	 rel 	 cd-cost 	 actor  disk   
	 object 	  d o l l a r 	 count 	 1   
	 focus 	  c o u n t                 
	 tense 	 pres    
　to prevent noun phrases from accreting large adjective lists  some information is placed into relative clauses. the generator uses focus information to determine the placement of various slot fillers. hers the price of the disk has been moved into a relative clause for emphasis. currently there are three levels of focus: out of focus  in focus  and explicitly requested by user. 
   after the request structure has been converted into a cd graph  the case frame builder selects a verb using rules similar to goldman's babel generator  and maps the cd slot fillers into individual cases. the sentence structure is then generated using a recursive atm grammar. finally the individual noun phrases are filled out  and any relative clauses are generated by recursive calls to the generator. 
   the rp1-ba is a dual port fixed pack 1 mb disk that costs $1 dollars. 
1. pronominalization 
　simple pronominalization is performed by the noun phrase builder. as each object is rendered into a noun phrase  a database of all object/noun phrase mappings is checked  and the shortest unique form of the noun phrase is used if the information has already been rendered in the current session. thus a vt1-aa might be represented by any cf the following noun phrases: 
  the soft copy terminal with optional advanced video. 
  the soft copy terminal. 
  the terminal. 
  it. 
1. concluding remark 
　xcalibur is still in its early stages of development  but it already surpasses the capabilities of most if not all existing natural language systems as a flexible expert systems interface. future developments are governed by the dual  and complementary  objectives of providing the requisite functionality for a robust expert system interface  and investigating focused task-oriented mixed initiative dialogs with users of differing abilities and interests. 
1. 