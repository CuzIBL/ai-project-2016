understanding and improving 
	lisp 	programs 
harald wertz 
universite paris 1 
departement d'lnformatique 
1 paris 
       we are currently investigating the creation of an didactic environment for the teaching of a programming language to approximately 1 students each year. at 
this effect we are constructing a robust and perspicious system : vision & can & phenarete  greussay 1  goossens 1  wertz 1   a system designed to help the individual apprentice in the process of developing  writing and debugging programs. 
in this note we will describe some aspects of 
phenarete  the convivial part of the system : phenarete receives as input a student proposition of a program - which may contain as well syntactic as semantic errors and will deliver as output her improved propositions of this program : a finite sequence of approximations. 
       with the help of our system  the learning of a programming language is done in a cycle : 
	improvement 	-- propositions 
user 	and 
 proposition 	~~*  	approximation 	~ ot 
	¡ö system   	-phenarete 
phenarete 
       before constructing phenarete we observed for one year our students beginning to learn lisp  to see which kinds of errors are statiscally the most current. 
there we found principally five sorts of errors : 
- absence of variables 
- inversion of variables 
- grouping errors 
- absence of the conditionnal instruction 
- non-representation of the termination of a computation. 
our system is particularly efficient in the detection of these kinds of errors. it doesn't try to verify the program with respect to the intentions of the programmer  but it tries to understand the programming language constructs used in the program  to see the interaction of the different parts of the program and to detect inconsistencies  with a particular emphasis on the verification of the termination of the program. in some way phenarete may be considered as an intelligent interpreter : she does not execute but she injerpiejjlthe program  and the result of an interpretation are some propositions  propositional interpreter . phenarete incorporates the programming knowledge of a programming apprentice. 
       let me illustrate the reasoning involved in an interpretation of a simple lisp program  main steps only  : suppose a student has submlted the following program  the numbers are for references in the tetf . 

         first   line 1 and 1  the grouping of the body of the function suggests that the user has omitted the cond-function call  so phenarete introduces  line 1-b   cond . then  line 1  we find as the first clause of the cond immediately a recursive call of the function rev  and following  line 1  another clause. knowing that line 1 can never be attained during an execution of the program we can invert the two clauses. this gives : 

         so far the surface improvements. now a closer look at line 1' tells us that x and y will be lists  when 
the function is invoked  and that the first argument  x  is inchanged and the second argument  y  will grow longer. in line 1' the case second argument - nil is solved  but this is the only case where the computation of rev will terminate. if y is different of nil  the only constructive computation done in the program is the creation of the new list argument 1. so  when hypothesising that the result of rev will be this list just created  we have to force a recursion stop. let us try to call rev with the cdr of argument 1 : 

but the recursion will not stop either. so let's try to introduce a supplementary test   null x  . and  always under the hypothesis that y will be the result of the computation  this gives us : 

this will be the first proposition of phenarete ; 
proposition 1 

         but this new line is just the line 1' with x and y inversed  so let's try without line 1'. ok  that is also a recursive procedure which stops with the correct algorithm  so another proposition : 

finding no more possible interpretation  phenarete will stop  after these two propositions. during the interpretation-phase she justifies all the modifications she proposes in a way similar we did. 
         the system is implemented in vlisp-1 and is currently used by about 1 students. 
references : 
chailloux j.  vlisp-1  manuel de 