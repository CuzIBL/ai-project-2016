 
this paper introduces a methodology for proving termination of general logic programs  when the prolog selection rule is considered. this methodology combines the approaches by apt and bezem  l  and apt and pedreschi   and provides a simple and flexible tool for proving termination. 
1 	introduction 
general logic programs  glp's for short  provide formalizations and implementations for special forms of nonmonotonic reasoning. for example  the prolog negation as finite failure operator has been used to implement a formulation as logic program of the temporal persistence problem in ai  see  1; 1; l  . termination of glp's is a relevant topic  see    also because the implementation of the operators for the negation  like clark's negation as failure  and chan's constructive negation   are based on termination conditions. two typical examples of glp's which behave well w.r.t. termination are the socalled acyclic and acceptable programs   l    . in fact  it was proven in  l  that when negation as finite failure is incorporated into the proof theory  a program is acyclic iff all sld-derivations with arbitrary selection rule of nonfloundering ground queries are finite. floundering is an abnormal form of termination which arises as soon as a 
non-ground negative literal is selected. a similar result was proven in  for acceptable programs  this time with the selection rule restricted to be the prolog one  which selects always the leftmost literal of a query. in  it was shown how one can obtain a complete characterization  i.e. to overcome the drawback of floundering  by considering chan's constructive negation procedure instead of negation as finite failure. 
　the notion of acceptability combines the definition of acyclicity with a semantic condition  that uses a model of the program which has also to be a model of the completion of its  negative part   see definition 1 . because of this semantic condition  the proof of acceptability may become rather cumbersome. moreover  finding a model which satisfies the above requirement may be rather difficult. 
　in this paper we refine the notion of acceptability  by using a semantic condition which refers only to that part 
1 
of the program which is not acyclic. more specifically  a program p is split into two parts  say p1 and p1; then one part is proven to be acyclic  the other one to be acceptable  and these results are combined to conclude that the original program is terminating w.r.t. the prolog selection rule. the decomposition of p is done in such a way that no relations defined in p  occur in p1. we introduce the notion of up-acceptability  where p1 is proven to be acceptable and p1 to be acyclic  and the one of low-acceptability which treats the converse case  p1 acyclic and p1 acceptable . we illustrate the usefulness of this approach by means of examples of programs which formalize problems in non-monotonic reasoning. 
　even though our main results deal with chan's constructive negation only  a simple inspection of the proofs shows that they hold equally well for the case of negation as finite failure. 
　our approach provides a simple methodology for proving termination of glp's  which combines the results of bezem  apt and pedreschi on acyclic and acceptable programs  results widely considered as a main theoretical foundation for the study of termination of logic programs   . we believe that this methodology is relevant for at least two reasons: it overcomes the drawback of  for proving termination due to the use of too much semantic information  and it allows to identify for which part of the program termination does or does not depend on the fixed prolog selection rule. 
　the remaining of this paper is organized as follows. the next section contains some preliminaries; in section 1 we explain the notions of acyclicity and acceptability. in section 1  the notions of up-/low-acceptability are introduced. in section 1  we introduce a methodology for proving termination of glp's  based on these notions. finally  in section 1 we give some examples. for lack of space  proofs of the results have been omitted. they can be found in the full version of the paper. 
1 	preliminaries 
we follow prolog syntax and assume that a string starting with a capital letter denotes a variable  while other strings denote constants  terms and relations. a  extended  general logic program  called for brevity pro-
gram and denoted by p  is a finite set of  universally quantified  clauses of the form h  - l1 ...  lm  where 

m 1  h is an atom  and the li's  called literals  are either atoms p s   or negative literals or equalities s = t  or inequalities where v quantifies over some  perhaps none  of the variables occurring in the inequality. equalities and inequalities are also called constraints  denoted by c. an inequality  is said to be primitive if it is satisfiable but not valid. for instance   is primitive. in the following  the letters a  b indicate atoms  while c and q denote a clause and a query  respectively. 
　suppose that all aid-derivations of q are finite and do not involve the selection of any negative literals. then there is a finite number of computed answer substitu-
1; let . be the equality where is the substi-
tution written in equational form  and quantifies over the variables that do not occur in q. then the 
clark's completion of p logically implies 
i.e.  	to resolve negative non-
ground literals  chan in  introduced a procedure  here called sldcnf-resolution  where the answers for - q are obtained from the negation of fq. however  this procedure is undefined when q has an infinite derivation. then  the notion of  infinite  derivation in this setting is not always defined. therefore in this paper we refer to an alternative definition of the chan's procedure introduced in   where the subsidiary trees used to resolve negative literals are built in a top-down way  constructing their branches in parallel. we shall also consider a fixed selection rule  where at every resolution step  the leftmost possible literal is selected  where a literal is called possible if it is not a primitive inequality. intuitively  the selection of primitive inequalities is delayed until their free variables become enough instantiated to render the inequalities valid or unsatisfiable. we call with slight abuse prolog selection rule this selection rule. then sldcnf-trees with prolog selection rule are called ldcnf-trees. 
　to prove termination of logic programs  functions called level mappings have been used  l   which map ground atoms to natural numbers. their extension to negated atoms was given in   where the level mapping of -a is simply defined to be equal to the level mapping of a. here  we have to consider also constraints. constraints are not themselves a problem for termination  because they are atomic actions whose execution always terminates. therefore  we shall assume that the notion of level mapping is only defined for literals which are not constraints. however  note that the presence of constraints in a query influences termination  because for instance a derivation fails finitely if a constraint which is not satisfiable is selected. 
definition 1  level mapping  a level mapping is a function | | from ground literals which are not constraints to natural numbers s.t. 
　in the following sections we introduce the notions of acyclic and acceptable program. 
1 	acyclic and acceptable programs 
in this section  the definitions of acyclic and acceptable program are given  together with some useful results from . 
definition 1  acyclic program  a program p is acyclic w.r.t. a level mapping if for all ground in-
stances h  - l  ...  lm of clauses of p we have that 
　with a query q = l1 ...  ln we associate n sets  q i of natural numbers s.t. a ground instance of li}. 
q is called bounded w.r.t. | | if every  q i is finite. 
　bounded queries characterize a class of queries s.t. every their sldcnf-derivation is finite. we have proven in  that if p is acyclic and q is bounded then every sldcnf-tree for q in p is finite; and that also the con-
verse of this result holds: call a program p terminating if all sldcnf-derivations of ground queries are finite. then  for a terminating program p  there exists a level mapping | | s.t.:  i  p is acyclic w.r.t. | |;  ii  for every query q  q is bounded w.r.t. | | iff all its sldcnf-derivations are finite. notice that when negation as finite failure is assumed   i  holds only if q does not flounder   l  . in fact  simple programs  like 

terminate because floundering  but are not acyclic. 
　for studying termination of general logic programs with respect to the prolog selection rule  the notion of acceptable program    was introduced. its definition is based on the same condition used to define acyclic programs  except that  for a ground instance h  - l1...  ln of a clause  the test  h     li is performed only till the first literal ln which fails. this is sufficient since  due to the prolog selection rule  literals after ln will not be executed. to compute n  a class of models of p  here called good models  is used. a model of p is good if its restriction to the relations from negp is a model of comp p~   where p~ is the set of clauses in p whose head contains a relation from negp  and negp is defined as follows. let negp denote the set of relations in p which occur in a negative literal in the body of a clause from p. say that p refers to q if there is a clause in p that uses the relation p in its head and q in its body  and say that p depends on q if  p  q  is in the reflexive  transitive closure of the relation refers to. then negp denotes the set of relations in p on which the relations in negp depend on. 
definition 1  acceptable program  let  be a level mapping for p and let i be a good model of p. p is acceptable w.r.t.  and / if for all ground instances h  - l1 ...  ln of clauses of p we have that 
holds for 
p is called acceptable if it is acceptable w.r.t. some level mapping and a good model of p. 

　let q = l  ...  ln be a query  let | | be a level mapping and let i be a good model of p. then  with q we associate n sets of natural numbers s.t. for 
instance of q 
then q is called bounded if every 	is finite. 
　bounded queries characterize those queries s.t. all their ldcnf-derivations are finite. in   we have shown that similar results as those for terminating programs hold also for left-terminating programs  where a program is left-terminating if all ldcnf-derivations of ground queries are finite. 
1 	up- and low-acceptability 
to prove that a program p is acceptable is in general more difficult than to prove that it is acyclic  because one has to find a good model of the program. therefore in this section we introduce two equivalent definitions of acceptability  called up- and low-acceptability  which are simpler to be used  since one has only to find a good model of a subprogram  which is obtained discarding those clauses forming an acyclic program. informally  to prove that a program is left-terminating  it is decomposed into two suitable parts: then  one part is shown to be acyclic and the other one acceptable. the following notion is used to specify the relationship between these two parts. recall that a relation is said to be defined in a program if it occurs in the head of at least one clause of the program. 
definition 1 let p and r be two programs. we say that p extends r  written p   r  if no relation defined in p occurs in r. 
informally  p extends r if p defines new relations possibly using the relations defined already in r  then one can imagine the program p u r as formed by an upper part p and a lower part r  and investigate the cases when either the lower or the upper part of the program is acyclic. this is done in the following sections  by introducing the notions of up- and low-acceptability. for a level mapping  we shall denote by | | r its restriction to the relations defined in the program r. 
　in the following definition  the upper part of the program is proven to be acceptable and the lower part to be acyclic. for two programs p  r  let p   r denote the program obtained from p by deleting all clauses of r and all literals defined in r. 
definition 1  up-acceptability  let | | be a level mapping for p. let r be a set of clauses s.t. p = p1 u r for some p1  and let i be an interpretation of p   r. p is up-acceptable w.r.t. | |  r and i if the following conditions hold: 
1  p extends r; 1  p r is acceptable w.r.t. | ||p r and 
1  ris acyclic w.r.t. for every ground instance of a clause of p1  for is defined in r and is not a constraint  then 
　a program is called up-acceptable if there exists r and i s.t. p is up-acceptable w.r.t. | |  r and /. 
1 



1 

automated reasoning 

automated reasoning 

automated reasoning 

	marchiori 	1 

	marchiori 	1 

	marchiori 	1 

automated reasoning 

automated reasoning 

automated reasoning 

automated reasoning 

	marchiori 	1 

	marchiori 	1 

