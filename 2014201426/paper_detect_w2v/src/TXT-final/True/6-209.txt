 
in this work  we present a genetic algorithm  ga  system  evolutionary counterpoint   evoc  that generates contrapuntal music. counterpoint is the construction of a musical piece by superimposing multiple melodies  indirectly forming an underlying harmonic structure. here  we include a description of the underlying algorithm  fitness function  and overall system modules. 
1 introduction 
   counterpoint is the art of combining individual melodic voices to form a harmonious whole fgreenberg  1 . contrapuntal music composition can be thought of as a vast search for the perfect combination of melodies. given the exhaustive nature of the problem  genetic algorithms are ideal to facilitate the pursuit. in this work  we employ genetic algorithms to this end  and describe our implementation. 
   one aspect of counterpoint study involves taking a given musical line and creating an accompanying line. to do this correctly  the composer uses a set of guidelines  rules  for composition. these can be as simple as 'no dissonant sounds' to as complex as 'perfect intervals must be approached from opposite voices and one voice must step.' using these sets of rules and a given melodic line known as a cantus firmus  one develops accompanying lines that adhere to every guideline. the guidelines are of utmost importance to our system because our fitness function is based on them. in our work  we have made the problem more manageable by using species i counterpoint  the most structurally primitive form of counterpoint. 
1 music as a constraint problem 
　constraint programming is concerned with using constraints to solve problems. music composition of a counterpoint nature can be seen as a specialized constraint satisfaction problem  csp . any csp has the following characteristics: a set of variables  a domain for the variables  and a set of constraints on the domain  bartak  1 . every note in a given cantus firmus line gives the composer at least one variable to satisfy. every variable  note  is defined within the domain of every possible musical tone. finally  the set of counterpoint guidelines gives us the constraints on the domain. the task of the composer  our system  evoc  is to come up with a correct set of pitches along with its timing schedule. the version of counterpoint rules we are currently applying is limited to species i in two voices  figure 1   where given an upper melody as input  the system composes the bass line. we employ the counterpoint rules found in a typical music theory setting  magnuson  some of which are shown in figure 1. 
1 main algorithm 
begin evoc-algorithm    
input: cantus firmus line output: species i melody line 
randomly generate 1 initial melodies  parents  repeat 
1. create 1 offspring using crossover on parents 
1. randomly mutate offspring 
1. apply fitness function to offspring 

1. select new parents from offspring 
poster papers 	1 

1 system evoc 
　the evoc system consists of two independent program modules each invoked by the visual basic interface. module one reads in the input midi file and transforms it into an intermediate text format. module two uses this to run the genetic algorithm and generate a counterpoint line. a graphical representation of the logical organization can be found in figure 1. 

　the visual basic interface provides a simple  easy way to invoke the other two modules. after loading the interface  the user defines the name of the midi file with the given melody line. using this file name  the additional two modules are invoked. 
　the midi input module is a c++ program that reads in a midi file and outputs it as an intermediate file. the melody  as represented by a midi file track  is read from the file using file-processing routines implemented in sapp's improv suite 1 . from there  the lines are converted to an internal representation  from which the intermediate file is created. 
　the final module runs the genetic algorithm. this part reads the intermediate file  initializes the algorithm  and employs the main algorithm detailed in section 1. this algorithm iterates until the fitness function returns zero indicating that a correct melody has been generated. the output of this final module is the generated contrapuntal melody. 
1 prolog fitness function 
　in any ga system  the fitness function indicates which members of a generation survive. for our fitness function  we wrote a theorem prover that embodies the historical species i counterpoint guidelines. by comparing any given genotype melody with the guidelines  we assign a valuation of validity to the genotype. during selection  the highest rated melodies persist to the next generation. 
   the evaluation function first constructs a list of note   values. these notes have the form: note midi value  midl name  measure . with these note lists  the prolog evaluation is done using multiple scans  with two primary areas of investigation: melodic adherence and harmonic adherence. compositional errors occur when the constraints of the program  the species counterpoint rules  are broken. when such an error is encountered  an appropriate penalty is assessed against the particular genotype valuation. serious infractions  e.g.  parallel fifths  suffer a -1 penalty  while non-serious violations  e.g.  counterbalance issues  may only suffer a -1 penalty. 
1 conclusion 
　to date  we have an operational system that can generate valid counterpoint lines in species i. the output is correct and perfectly valid as a functional counterpoint line. we are currently working on improving the rule base as well as the user interface for evoc. 
　in this poster  we presented a genetic algorithm and a theorem proving deductive fitness function for the searching and generation of musical counterpoint. it employs a theorem prover as a fitness function that houses fundamental guidelines used by musicians composing these pieces. 
