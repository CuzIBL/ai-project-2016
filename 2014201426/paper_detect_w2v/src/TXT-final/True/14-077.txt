 
　　　an i-space is a large human-machine informat i o n space  designed especially for environments 
where large amounts of d i s t r i b u t e d information  and tools for using that information  must be interfaced to a wide variety of users in real time. the important characteristics of an i-space are that it presents a powerful  but uniform and simple interface to a l l users  that it permits users to synthesize information from diverse parts of the i-space for simultaneous viewing and maniu l a t i o n via t h e i r screens  and that it accommoates a cluttered desktop environment  where a c t i v i t i e s can be set aside  but kept up to date by real-time mechanisms   then l a t e r returned to. we describe the goddard i-space  a prototype system f o r goddard space f l i g h t center  an archetype of organizations in need of an i-space. this 1space is presently running on a vax  and w i l l soon incorporate a large multiprocessor to handle real-time scheduling and event-driven pattern 
matchers. 
1- 	the 	i-space concept 
　　　information growth in modern society is outpacing the i n d i v i d u a l human s a b i l i t y to access and synthesize information. while this problem applies to a l l segments of society  it is most noticeable in large commercial and governmental organizations  where teams of both technical and non-technical professionals must work cooperat i v e l y toward goals whose solutions demand the coordination of substantial amounts of information in a timely fashion. the very existence of such large societal e n t i t i e s and t h e i r often ambitious goals can be a t t r i b u t e d   in part  to computers and advanced software tools. it seems appropriate  therefore  that computers be applied toward the solution of problems which result from this i n f o r mation explosion. 
　　　we describe here the i-space project  a human-machine system designed to interface both technical and non-technical professionals to  the large  dynamic  and diffuse information space  in which tney conduct t h e i r daily professional a c t i v i t i e s . this project shares some goals with the pie project  goldstein 1a  and the zoc proj e c t  newell 1   both advanced human-machine information systems. however  in our project  
more emphasis is placed on the real-time acquisit i o n and synthesis of information from diverse  often geographically d i s t r i b u t e d sources. 
　　　goddard space f l i g h t center  an example of an organization with needs in these areas  is the environment for which we are designing the current i-space. .  at t h i s center  as many in 1 data proceasing  empires  engage in p r o j e c t - s p e c i f i c a c t i v i t i e s involving the engineering  science  and administration of near-earth s a t e l l i t e s . data is everywhere: science databases  engineering i n f o r mation  some o n - l i n e   some not   administrative 
　　　* this research was supported by the goddard space f l i g h t center under contract ina1. 
1 
scheduler  system documentation  experiment schedules  and so f o r t h . while each empire runs adequately  there is no central information hub which allows  for example  a bewildered v i s i t i n g s c i e n t i s t to gain a grasp of what science data is available  or a goddard administrator to ascertain the adrainistrative or technical status of some 
subproject. the dynamic nature of goddard s mission operations  and the need for timely access of information  magnify the basic problem of a human's i n a b i l i t y to deal with massive amounts of information. 
　　　the i-space is a prototype information hub for goddard. by logging into thi1 hub  a user enters the goddard information space  a potent i a l l y vast c o l l e c t i o n of frames  akin to smalltalk's classes and objects   i n g a l l s 1|  as used in the pie system i  goldstein 1b . regions of the i-space deal with various aspects of goddard s operations   e . g .   science  engineeri n g   specific projects  administration  maintenance  experiment scheduling  specific spacec r a f t     and the user roams through t h i s space i n t e l l i g e n t l y assisted by the system. as he proceeds  the current frame generates a high resol u t i o n crt representation of i t s e l f as a form with a c o l l e c t i o n of s l o t s  the specific contents of the frame . when he reaches a frame. of i n t e r e s t . he requests that the i-space system  focus' that frame. as we describe below  a focused frame puts the user in real-time touch with that frame's contents  providing in effect a constantly updated  synthesized view of selected i-space information relevant to 1ome task.  invoking  a focused frame's slot is tantamount to requesting that some computation be performed  so that the 1-space is in fact a programming environment as well as an information system. in e f f e c t   the i-space replaces the conventional operating system. 
　　　in the sections below  we describe the system's conceptual design  hardware and software architectures  human-machine interface  and current and potential q u a l i t i e s as an a r t i f i c i a l l y i n t e l l i g e n t manager of large amounts of informat i o n . 
1. conceptual 	design 
　　　the main goal of an i-space is to d e l i v e r a simple interface through which the user gains screen access to a l l information and tools appropriate to the solution of his task at hand. a second goal is that information be delivered in a dynamic fashion  which often means real-time. the user must be given the i l l u s i o n of looking through powerful windows at data that may be changing fey the second or minute. at goddard  such data could be o r b i t a l or engineering data from a 
　　　spacecraft  data being routed from one administrator's screen to another's screen  newly updated science data  a b u l l e t i n about a hardware f a i l u r e or schedule change  and so f o r t h . the user must be given direct conduits to and from the information sources with which he must deal in performing his job. 
　　　an i n t e r e s t i n g image comes to mind at goddard  where there are already many pools of i n f o r mation i n d i v i d u a l l y managed by existing equipment. 
suppose there were a room at goddard whose walls were covered with information conduits flowing to every reach of the organization. suppose also that a user enters the room and  using  patch cords'  simultaneously taps i n t o some a r b i t r a r i l y chosen set of conduits and i n t e r a c t s with the information sources at the other ends of those conduits in a w h o l i s t i c fashion. for example  information received from various conduits might be combined to derive certain synthesized informat i o n   or information might be sent to several cond u i t s to e f f e c t a complex task. further suppose that each s p e c i f i c setup of patch cords is named  saved  and l a t e r r e i n s t a l l e d automatically to bring the user back to the same information context when he next enters the room. f i n a l l y   ima ine that many users are in t h i s room  a l l simulaneously patching to and sharing seta of conduits 
with minimal interference. 
　　　would not such a system be a foundation f o r a very i n t e l l i g e n t d i s t r i b u t e d information system  and would not such a system represent an increment a l advance in i n t e r f a c i n g humans to large computer-based information systems  we  of course  believe that both answers are yes! 
　　　the i-space conceptual design follows this image closely   f i g . 1 . the  room' is the central i-space computer  c u r r e n t l y our departmental 
vax 1 running c and lisp under unix. the walls f i l l e d with information conduits  which we call the i-bank  w i l l be realized by zmob  rieger 1   appendix   a 1 processor research computer under current construction by our ai group  zmob is currently being simulated by unix processes . the c o l l e c t i o n s of patch cords that route  synthesize  and present information from the conduits are the i-space frames. the a b i l i t y f o r many users to use the room simultaneously translates to our implementation of the i-space as a unix s h e l l which coordinates several unix processes per user. 
1 . 1 . 	i-space frames 
　　　i-space frames are lisp data structures that contain a l l the information required to set up  maintain  synthesize  and display information from a set of information  conduits  on regions of the user s screen. s t r u c t u r a l l y   a frame is a c o l l e c t i o n of named s l o t s . each frame corresponds to an a c t i v i t y   or local environment  upon which a user might wish to focus h i s a t t e n t i o n . each slot represents an aspect of the frame's environment  and generally w i l l be responsible for bringing a t o o l   service  or information to the user via a region of his display screen. v i s u a l l y   a frame resembles a form-like description of an associated i-space a c t i v i t y . it is presented by displaying a l l i t s s l o t s at an appropriate level of a c t i v a t i o n for that user. each s l o t is presented as a 
　　　three window display: the s l o t name  the s l o t value or work area  and a status region. the 
shapes and locations of windows on the screen  and whether or not a l l three are displayed at the current level of activation are initially determined by information in the frame's representation. 
categorically  i-space frames include: 
menu frames: frames whose slots will move the user to other frames in the region of the i-space where the user is presently situated. 
real-time control frames: frames whose slots give the user access to realtime information about dynamic regions of the i-space. 
information frames: frames whose slots provide windows into external databases. 
documentation frames: frames that document features and capabilities of the i-space itself. 
system tool frames: frames that give the user access to standard system tools  such as editors  higher level languages  and u t i l i t y packages. 
i-space development frames: frames that allow the use  to  extend  modify  and create new i-space frames and procedures  and that deliver 1-space status and user information. 
within each category there is considerable diversity. for example  administrative plans and schedules  science data  engineering schedules  and building and grounds maintenance are a l l examples of information frames  found in different regions of the i-space. real-time interpersonal communications  satellite science and engineering control channels  and ground-based equipment monitors and sensors are all examples of real-time control frames that reside in various reaches of the i-space. furthermore  most frames will have characteristics of several of these categories  since the slots which comprise the frame may address different needs. for example  one user may find it convenient to define a frame whose slots are:  1  a screen-screen link with a colleague   1  a real-time conduit to a satellite   1  a window to an external database   1  a fortran prof ramming environment  and  1  a window into a ocal piece of documentation. focusing such a 
frame would set up a l l the necessary communications channels  then present the user with this miniature world  which keeps him in touch with several parts or his environment simultaneously. 
slots 
　　　the logic of a slot depends upon the nature of the task it is designed to perform. the slots of a menu frame are generally descriptions of other frames to which the user can move. the slots of a real-time frame associated with the attitude control of a satellite would have names like  current attitude .  alter current attitude   and so forth. the slots of an information frame about an administrator s weekly schedule would have names like  person for whom schedule desired    week desired   and  the schedule . slots in a system tool frame for a class of utilities  might be such things as run file transporter   rewind tape   and so forth. slots of a higher level language tool such as lisp might be  run the interpreter   debug some code . load saved code   and so forth. generally  slots w i l l follow an imperative style of programming  and the invocation of a slot always means  do your thing for me' . 
frame and slot activation levels 
　　　three levels of frame/slot activation are possible: browse    focus.    and invoke . up to hree  activation procedures  can be associated with each slot of a frame  each procedure 
1 
corresponding to one of the three levels of a c t i v a t i o n . when the user i n i t i a l l y brings a frame to his screen  the e n t i r e frame is activated at the browse level by i n d i v i d u a l l y executing each s l o t ' s browse level procedure   i f any   which then erforms a computation   t y p i c a l l y one which isplays the name of the s l o t in the name window 
and  perhaps  other information in the value window.  since a c t i v a t i o n procedures can also be sens i t i z e d to the user s p r i o r i t y and clearance leve l s   d i f f e r e n t events may occur for d i f f e r e n t users when an a c t i v a t i o n procedure is applied. t y p i c a l l y   browse level procedures w i l l attempt to present only enough information to give the user an overview of the frame s contents or c a p a b i l i t i e s   under the assumption that the user is not interested in frames he passes through in reaching his target frame in the 1-space. 
　　　when he reaches a frame in the 1-space with which he wishes to i n t e r a c t   the user focuses' that frame. this causes a l l browse level a c t i v a t i o n procedures superceded by focus level procedures to be terminated  and a l l superceding focus level procedures to be applied. conceptua l l y   t h i s results in more detailed or accurate services being run at each s l o t . 
　　　in either browse or focus mode  the user can move to a certain slot and invoke i t . if the invoke level a c t i v a t i o n procedure exists for that s l o t and if it is determined that the user is q u a l i f i e d to invoke that s l o t   the invoke level procedure supercedes the running browse or focus level procedure at the s l o t   t y p i c a l l y r e s u l t i n g in some control or sensing event within the ispace. when the invoke procedure relinquishes cont r o l   the s l o t is returned to i t s previous a c t i v a t i o n l e v e l . when the e n t i r e frame is l e f t   it may be l e f t either in a focused or defocused state   i . e .   l e f t a c t i v e   or discarded   permitting the user to i n t e r a c t sequentially with several focused frames  which are v i s u a l l y overlaid and restored on the screen . as in pie  the i-space user i n t e r face provider for the 'cluttered desktop' display c o n t r o l   where p a r t i a l l y occluded frames may actua l l y s t i l l be running in focus mode and keeping themselves up to date visually even though they are not at the top of the p i l e . 
　　　invoking an i-space frame's 1 l o t is tantamount to computing. since a l l a c t i v a t i o n procedures are unrestricted lisp functions  the effectb on the i-space of an invoked s l o t can be a r b i t r a r y . simple examples of invocation results are such tilings as one-time data acquisition and display   e . g . . a thermal value for a s a t e l l i t e   a fact from a aata base   and frame changing   e . g .   by invoking a  menu  frame's s l o t   the user runs a 
　　　procedure which moves to another frame . more complex examples include such a c t i v i t i e s as r e p e t i tive real-time data acquisition and display updating  and the running of an e n t i r e processor within the s l o t ' s value window. in t h i s l a s t case  invoking  say  the run the e d i t o r ' s l o t of the current frame can cause the system editor to be invoked within the s l o t ' s value window. hence  convent i o n a l computing is considered a subset of the larger 1-space organization. 
1. 	example scenario 
　　　in the context of the applications at goddard  a sample session of a v i s i t i n g s c i e n t i s t employing the i-space to obtain data or effect experiments would proceed as follows. since the s c i e n t i s t is not an experienced i-space user  he depends on the system s expertise to assist him in locating the desired information and accomplishing his tasks. the f l a v o r of a session with an experienced user d i f f e r s from the following scenario in that users f a m i l i a r with the i-space can move quickly from one frame to another without passing through intermediate frames. 
　　　i n i t i a l l y the system presents to the scient i s t a series of menu frames which describe the information available in the goddard 1-space. when each frame is browsed the t i t l e of an available category of information is displayed. focusing the s l o t associated with a category produces a b r i e f   but more detailed description of the category. when a s l o t in a menu frame ia invoked  the s c i e n t i s t moves through the i-space to another frame  presumably more specific than the previous one  which is then browsed. our s c i e n t i s t is interested in experimenting with the space telescope. he traverses the i-space from general frames describing goddard at large through 1cience-specific frames to the  near earth s a t e l l i t e s frame and arrives at the  space telescope  frame. browsing t h i s frame he discovers thart the following categories of information about the 
space telescope are .  available:  documentation   s a t e l l i t e status    experiment data base   cont r o l operations   and personnel contacts . focusing on the ' s a t e l l i t e status  s l o t of t h i s frame produces the information that the space telescope is operational and available for experimentation. 
the s c i e n t i s t then invokes the  experiment date base  s l o t to browse through the results of p r e v i ous experiments  discovers that the results he is interested in are not available and decides to perfonn the experiment himself. he returns to the space telescope frame to examine the available documentation and then moves from the documentation frame to the control operations frame. the s c i e n t i s t then invokes the appropriate s l o t in the control operations frame intending to accomplish his goal  unfortunately the experiment doe1 not run  perhaps because s c i e n t i s t did not specify the task c o r r e c t l y . returning again to the space telescope  frame  he invokes the  personnel cont a c t   s l o t creating a screen-to-1creen conversat i o n with the project manager  determines his i n i t i a l error in operating the space telescope and r e t r i e s his experiment. now successful in his quest  our s c i e n t i s t movea on to other uses of the i-space  perhaps investigating topics mentioned in other frames that were v i s i t e a during t h i s session. 
　　　a few points of i n t e r e s t should be made. at no point in the scenario did our s c i e n t i s t realize that the information he requested  or the operations he invoked  might have been accomplished on remote hosts. encoded in the procedures contained in the i n d i v i d u a l frames of the 1-space is the expertise to accomplish any a c t i v i t y   be it locating pertinent data or performing specific calculations. our s c i e n t i s t ' 1 screen-to-screen conversation may have been with a project manager located in the next o f f i c e or an i n d i v i d u a l on a remote host. information describing the current status of the telescope may have been stored in a data base  or it may have been the r e s u l t of an actual request to the s a t e l l i t e via a c o n t r o l l i n g computer to report i t s current status. the i n d i v i d u a l i-space frames determine the source of the i n f o r mation and via the i-shell schedule reauests to retrieve the information or execute procedures to produce the r e s u l t . 
	 l'1.' 	i-space heal-time scheduling and processes 
　　　consider the genera} character of an i-space session from one user s point of view. at any given moment  the user w i l l have a currently browsed or focused frame  some of whose s l o t s may have been invoked   and possibly a c o l l e c t i o n of other focused and p a r t i a l l y invoked frames in the background. each s l o t of each of these frames has been activated at some l e v e l . if the s l o t s a c t i v a t i o n procedure is one which is concerned with r e p e t i t i v e or real-time updating  or is on the lookout f o r certain events or data in the ispace a t - l a r g e   then it w i l l be making demands on the i-space f o r periodic a t t e n t i o n . for t h i s reason  the system must include a scheduler process per user  as well as a system-level scheduler f o r mediating the user schedulers' requests of the ibank   i . e .   zmob . 
　　　the architecture of the i-space scheduling system is shown in fig. 1. as the i-space s h e l l i n t e r p r e t s user desires  and s l o t s become activated  s l o t a c t i v a t i o n procedures run and send scheduling tasks to the o-schedulfr  a separate process that manages i t s one user s scheduling needs. the u-scheduleh in turn determines the f r e quency by which a procedure should be run and makes appropriate demands on the s-scheduler. the s-scheduler is a system-wide process which synthesizes a l l u-scheduler requests to the i-bank  
1 
p r i o r i t i z e s them  from user p r i o r i t y and real-time requirements of the scheduled event   then passes them to the i-bank. which f i n a l l y carries out the requested interactions with the outside. results are returned as named message packets  which are sorted out by the s-scheduler and sent to the various requesting u-schedulers  which in turn route results to t h e i r i-shells. 
status information display 
　　　because of the design goal of presenting a user interface that has appearances of both a pie-like programming/personal environment and real-time windows into dynamic regions of the ispace  the i-shell must take care in how it processes responses. f i r s t   associated with any s l o t that displays real-time information  or that serves as a user comnand window to a real-time device somewhere in the i-space  is a separate status or synchronization window. using inforrna-
tion-from the u-scheduler  t h i s ′ window is illuminated when the main window's real-time scheduling f a l l s behind  and a real time clock begins displaying the delay time u n t i l the currently scheduled event is completed. for example  if the u-scheduler has been instructed to acquire updated thermal information from a spacec r a f t every 1 seconds  and there has been a delay beyond t h i s period  the synchronization window illuminates and begins displaying the overrun time u n t i l the data becomes a v a i l a b l e . on output  i f   say  the user'has requested that text be sent to another host  and there are i-space delays in gett i n g the information out  and returning the confirmation that it was sent  beyond the time deemed reasonable by the sending s l o t   the status window w i l l also be activated. 
multiple active frames 
　　　another topic of i n t e r e s t that arises because of the i-space's blend of a pie-like environment with real-time scheduling is that of routing incoming real-time results to the user s display in meaningful ways. because the user may have focused a frame that has given r i s e to recurring real-time scheduling events  then moved to another frame without having defocused the current one  the i-shell must properly manage the a r r i v a l of scheduled information associated with the setaside  but not defocuaed frame  or frames . this requirement demands that the logic of each frame be isolated from i t s display manifestation  so that the i-shell can maintain a pool of currently running and up-to-date frames  even if not a l l are completely v i s i b l e on the display screen  because of t h i s separation of frame logic and frame display in the i-shell  the user is f ree to focus or invoke s l o t s of a frame  then move on to another frame before those e f f e c t s are f u l l y f e l t . v i s u a l l y   the e f f e c t is a cluttered screen of the current frame and other p a r t i a l l y occluded frames  a l l of whose v i s i b l e parts may be changing to r e f l e c t real-time updates from completed scheduled events. a d d i t i o n a l l y   completions of invoked slots for set-aside frames  w i l l be noted by a flashed 
message in the display's status area. 
　　　since the logic of i-space frames is what binds together the scheduling and user interface aspects of the i-spacfc  we turn next to a descript i o n of the structure and contents of i-spack frames. 
	1' 	organization of jthe 1-space 
	1.'l' 	frame logic and scheduling 
　　　a frame in the 1-space is a lisp data structure containing a set of s l o t s which correspond to each subactivity of a task in the 1-space. a s l o t is a description of a p a r t i c u l a r aspect of a frame and contains the s l o t ' s name  value  display descriptor  a c t i v a t i o n procedures  and access channels. associated with each s l o t are three levels of a c t i v a t i o n which correspond to the three ＊m~o aes~o f processing in the 1-space. 
　　　for each a c t i v a t i o n level  browse  focus or invoke   a s l o t specifies   l   the channel to be 
used   1  the procedure to be run on that channel.  1  the parameters passed to the procedure   1  the schedule by which the procedure is run.  1  the consumers that handle the results returned from tne procedures  and  1  the p r i o r i t y required to activate the slot at t h i s levet: stot s p e c i f i cations may be e x p l i c i t l y included in the frame or i m p l i c i t l y refer to system defaults. for instance  the absence of a channel indicates that the 1lot is to be executed by the i-shell i t s e l f  without i n t e r a c t i o n with the i-bank . an example of this is the s l o t description for browsing the space telescope frame v i s i t e d by out s c i e n t i s t during the scenario. 
	s l o t 	o r b i t 
browse n u l l   consume ＊ l isplay  name  value  ; 
this slot s p e c i f i c a t i o n causes tfje contents of the name and value   windows of the o r b i t   s l o t to be sent to the user's terminal for display.  the n u l l procedure is used to indicate that no comput a t i o n is necessary before executing the consumer function.  another common s l o t procedure is movetoframe  the mechanism which moves the user to a d i f f e r e n t frame as the result of invoking h s l o t of a ilemj frame. 
　　　an 1-space information conduit is called a channel. channels access various objects in the external world   e . g .   mainframe computers  s a t e l l i t e c o n t r o l l e r s   administrator's desktop computers and so forth  as well as the i n t e r n a l computing environment   e . g .   uijix tools  such as  e d i t o r s   high level languages and program development t o o l s   . currently channels refer to s p e c i f i c 
　　　resources  or connections  in the i-lai k  and have associated c a p a b i l i t i e s  or sets of procedures that can be executed on the channel . we are currently developing plans f o r decoupling the r e l a t i o n s h i p of channel and procedure and replacing s p e c i f i c 