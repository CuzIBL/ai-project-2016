 
　　　the goal of this investigation is the development of a semantics for 1 o r d e r theories based on certain new syntactic structures in f o r m a l proofs which derive f r o m their pragmatic and semantic aspects. the present report is m a i n l y concerned with these new syntactic s t r u c t u r e s   the motivation behind t h e m   their technical definition and their basic p r o p e r t i e s . their role in a new semantics for lntuitiom stc peano a r i t h metic is indicated in the last section. 
1. introduction 
　　　this paper constitutes a s u m m a r y of a s e m inar entitled   c o m m e n t i n g p r o o f s   given at the a r t i f i c i a l intelligence l a b o r a t o r y at m  1. t. during the spring of 1. the s e m i n a r was concerned with new syntactical s t r u c t u r e s in f o r m a l proofs which derive f r o m t h e i r pragmatic and semantic aspects. these s t r u c t u r e s can be used to provide a semantical interpretation for proofs quite distinct f r o m that of model theory and rather m o r e akin to the construction semantics for intuitionistic peano a r i t h m e t i c developed by k. godel and the a. l procedural interpretation of the logical connectives and quantifiers a la c. hewit's planner language. the work is actually a synthesis of elements f r o m y e s s e n m volpin's foundational studies { l   a n d g. sussman's work on building a   c a u s a l   history of a c o m p u tation f r o m the comments of the corresponding documented p r o g r a m  1 . 
　　　for the most part we shall r e s t r i c t ourselves to the context of peano a r i t h m e t i c and the p r i m a t i v e recuresive a r i t h m e t i c of addition  m u l t i p l i c a t i o n and exponentiation in p a r t i c u l a r . at the end of this report a few r e m a r k s w i l l be made on how these ideas are extended to a r i c h e r deductive environment. 
　　　in our work we distinguish between f o r m a l proofs  a sequence of sentences satisfying the usual syntactic c r i t e r i a   and   r e a l   p r o o f s  a f o r m a l proof constructed by someone in a c c o r d ance with a motivational system of goals . in the latter case each line may be commented by i n t r i n s i c   f o r m a l - s y n t a c t i c   r e m a r k s and e x t r i n sic  goal related  r e m a r k s . these r e m a r k s not only explain the purpose of a p a r t i c u l a r l i n e   but at the same time establish connections with other lines  previous lines and lines yet to be c o n s t r u c t ed . in tact these r e m a r k s point to connections between the very signs that make up the lines of the proof. 	these connections  which  using y e s s e n i n - v o l p i n ' s t e r m i n o l o g y   	are called identificational connections 	or ids   are the links of a very detailed syntactic structure which resides i m p l i c i t l y in real proofs  a 	s t r u c ture of causal chains connecting the occurences of symbols. 	this is the new syntactic s t r u c t u r e mentioned in the f i r s t p a r a g r a p h . 
　　　with this sort of i n f o r m a t i o n it becomes possible to answer a question like  what part of the t e r m 1. 1 is responsible for the t h i r d stroke in the right hand side of the equation 1 = 1   . such a part w i l l be called an ingredient of a t e r m   consisting of a c e r t a i n l i s t structure whose atoms are the occurences of symbols in the t e r m . if we think of a t e r m t being evaluated to its n u m e r a l value l t l = l l . . . l then the ingredients represent the computational h i s t o r y of each stroke in itl. 
much of the present report is concerned with d e fining the ingredients of a t e r m and c h a r a c t e r i z ing t h e i r dependence on the computational paths used to evaluate the t e r m . the semantics which arises f r o m this comes f r o m considering a proof as encoding a procedure f o r manipulating l i s t structures so that if  f o r example  the proof is of t=s then the encoded procedure induces an i s o m o r p h i s m f r o m the ingredients of t onto the ingredients of s. while ingredients and the r e sulting semantics can be i m p l i m e n t e d it seems best at this point to treat these ideas t h e o r e t i c a l l y and to be aware of t h e i r possible relevance to such concepts as consistency  relevant e n t a i l -
ment  computational e f f i c i e n c y and methods of proof. 	we wont develope these connections in this report other than to b r i e f l y point out a c o n nection between computational efficiency 	and the   n o r m a l   f o r m of an ingredient in section 1. j   -   recursive a r i t h m e t i c . 
　　　recursive a r i t h m e t i c consists syntactically of t e r m s and equations  and deductively of c o m p utations  constucted by means of the r e c u r s i o n axioms and the substitution rule . 
　　　t e r m s are expressions f o r m e d f r o m 1  +       exp       by means of the following rules. 
	1  	1 is a t e r m . 
	z  	if t is a t e r m then so is 	t l . 
1  if t and s are t e r m s then so are  t + a   t   s  and exp t  s  . 
1 

　　　　　we shall use the symbols t  r  s  . . .   t1 r1  s1 .......to denote t e r m s . we shall make use of the usual conventions for ignoring paran theses. also note that our use of the w o r d   t e r m   doesn't allow f o r the occurences of free v a r i a b l e s   i . e . they are always to be closed. * 
	t e r m s of the f o r m 1  	1  	. . . . 1   n } 
 n concatenated strokes  are called n u m e r a l s . 
　　　　　an equation is an expresion of the f o r m t = s. 

here s r  denotes a t e r m in which the t e r m r has one or m o r e indicated occurences  and s   r '   denotes the t e r m resulting f r o m the replacement in s r  of r by r' at the indicated occurences of r in s r  . note that this is m o r e general than u n i f o r m substitution. we say that lc follows f r o m la and l.b by substitution. 
         a proof or computation is f o r m a l l y d e fined as a sequence of equations each of which is a instance of a r e c u r s i o n a x i o m or else follows by substitution f r o m two previous equations. we consider two simple yet i l l u m i n a t i n g examples. 

	1  	commenting proofs . 
　　　　　we begin c o m m e n t i n g these computations by means of i n t r i n s i c and e x t r i n s i c r e m a r k s - this terminology is after sussman. 	then we use these r e m a r k s to generate ids between the occurences of symbols in the computation. 	by 
* the notational methods that we shall develope for +  *   and exp  w i l l serve to handle all other p r i m i t i v e r e c u r s i v e functions. t r a c i n g out chains of ids we can establish an accountability for every sign in the computation. this w i l l at the same time make explicit the semantics of the computation  i . e . which occurences of symbols are synonomous and what are the computational roles of each sign. 
　　　　the i n t r i n s i c or f o r m a l comments make note of : 
1  if the line is an a x i o m ; in which case a pointer is generated to the axiom schema in question; 1 if the line follows by substitution; in which case pointers are generated to the lines f r o m which it follows and to the occurences of the t e r m to be replaced. 
　　　　the e x t r i n s i c or g o a l - r e l a t e d r e m a r k s consist of: 
1  the top level goal statement  i. e. find the value of t e r m t ; 
1  the assertion that line l  s =. s'  is generated in o r d e r to s i m p l i f y by substitution a t e r m t s  in a previous line l 1 ; 
1  the assertion that line l   is the result of a substitution rule f r o m lines l  l' whose p u r pose it was to achieve s i m p l i f i c a t i o n by means of this substitution; 
1  the assertion that the line matches the top level goal. 

　　　　example 1 is c o m m e n t e d in a s i m i l a r m a n n e r . 
	1. 	identificational connections. 
　　　　we now add a t h i r d type of comment to the analyzed computation  namely we make note of the identificational connections  ids . f i r s t of all each a x i o m is to be accompanied by certain ids as 

for e x a m p l e   in a1 we would say that s and 

1 

t in the r. h. s. are r e w r i t t e n f r o m the s and t in the l . h . s. and this justifies their synonymity. on the other hand we also make an identificational connection between the two occurences of 1 and this constitutes our semantical i n t e r p r e t a t i o n of + in t e r m s of the sucessor function x l . 
　　　　　now consider m1. 	we say that both t's in the r . h . s. 	are r e w r i t t e n f r o m the l . h . s 	t. s i m i l a r l y the s in the r . h . a. 	is r e w r i t t e n f r o m the s in the l . h . s  . however  we associate the second t in the r . h . s. 	with the stroke 1 of the 
l . h . s . this is part of our semantical i n t e r p r e tation of * . thus we are looking at m - n as saying add m to itself n t i m e s ; in this computation n acts as a counter for the n different r e w r i t t i n g s of m. the strokes of m a r e the counter or cont r o l elements in this case. 
　　　　　let a be an a x i o m and id a  the set of ids associated with a. m o r e e x p l i c i t l y : if a stroke p on the r . h . s is s i m p l y r e w r i t t e n f r o m a stroke q on the l . h . s.  without a control element  then put id p q  in id a ; if on the other hand p in the r. h  s. is r e w r i t t e n ! f r o m q in the 1. h. s. under 
the control element q' and using an a x i o m for the operation f  either   or exp  then put id p   q  q '   f   in id  a  . * 
         ids come f r o m the substitution rule in a c cordance with the following schema. 

these ids actually come f r o m the e x t r i n s i c c o m ments associated with these l i n e s : lb's purpose is to s i m p l i f y the indicated s in the r . h . s. of l a . hence the s in the    n. s. of lb is r e w r i t t e n f r o m the s in the r. h. s. of la. lc achieves the goal of l b ; hence the context r in the r . h . s  of lc is r e w r i t t e n f r o m the context r in the r . h . s. of la 
and the s' in the r . h . s. of lc is r e w r i t t e n f r o m the s* of the r. h. s  of lb. also  the 1. h. s  of lc is r e w r i t t e n f r o m the l . h . s. of la. 
         fully commented by ids examples 1 and z  z look like the following. 
example 1 commented by ids. 

* a set of ids like id a  is usually taken s y m e t r i c a l l y   i. e.   if id u  v  is in id a  then so is id v  u . 

　　　　　we can now trace out paths of i d s   t h e r e by d i a g r a m m i n g the computational relations b e tween the different occurences of strokes in the proof. for e x a m p l e   in example 1. 1  if we d e note the occurences of strokes in l1 by p p' p   q  q'  q   left to right  then we can see that p i s connected to q  p' is connected to q' and p  is connected to q   . f u r t h e r m o r e these are the only connections between the strokes of l 1 . this yields a very nice correspondence between the 
1. h. s. and the r. h. s. strokes of l1. 
　　　　　the case of example 1 is m o r e c o m plicated in that some of the occurences of strokes act as counter elements and when in this role they do not get r e w r i t t e n . lable the strokes in l1 p   p'  p  q q'  left to right . trace out a path f r o m q or q' of l1 to a pattern of strokes p  p'  and p  of l 1   using the ids f o r the a x i o m s and the substitution rule. we see that q t r a c e s out to the pattern  p  p'  -   and q' traces out to the pattern  p  p   *  . thus we a r e lead to say that q is r e w r i t t e n f r o m p under the control element p' while q' is r e w r i t t e n f r o m p under the control element p .  p  p'      and  p  p       are the p a t t e r n s in 1 of l1   r e s p o n s i b l e   for q and q' r e s p e c t ively in this computation. these patterns  w h i c h w i l l be precisely defined in section 1  we c a l l the ingredients of 1. generally speaking  when a t e r m t is evaluated   i . e . proved equal to some n u m e r a l n   we may identify the ingredients of t responsible for each stroke in n . in section 1 we determine how the ingredients depend on the computation path used to evaluate the t e r m t. 
	1. 	computation paths . 
　　　　　on the previous pages we have presented two examples in some detail i n o r d e r to give an intuitive picture of what is happening with p r o o f s   comments and i d s . we shall now t u r n to a detailed study of the possible computation paths f r o m a t e r m . 
　　　　　we shall r e s t r i c t our attention to c o m p u tations which have the following  standard  f o r m : 

1 


  

where l1 is an a x i o m 	and f o r i = 1  .. .   n-1  
l1i+1 follows f r o m l z i - 1 and l1i by substitution. we shall assume that these computations have been commented and the a p p r o p r i a t e ids have been m a d e . 
　　　　　the sequence of t e r m s t  =t1    t 1   . . .   tn is called a computation path f r o m t to t n . consider a step of the computation  called a simple reduction  

we w r i t e r s   - r  s'  to indicate that r  s'  has been obtained f r o m r s  by a simple reduction. if u = v is an a x i o m we shall also w r i t e u --  v and call it a simple reduction. 
　　　　　define i d   r   s   -   r   s '     to be the set of d e r i v e d ids between the signs of r s  and r   s '   . 
specifically : 
1  if p is an occurence of a stroke in r s'  which is r e w r i t t e n f r o m q in r s  via the id a then id p.q  is in i d   r   s   - * r   s '     -
1  if p is an occurence of a stroke in r s'  which is r e w r i t t e n f r o m q in s' of lb via c and q is r e w r i t t e n f r o m q' in s of the 1. h. s. of lb  i. e. the id i d   q '   q   is in id s = s'   see section 1   and q' is r e w r i t t e n f r o m q  in s in the r. h. s. of la via b  then i d   p   q n   is in i d   r   s   -   r   s '     . 1  if p is an occurence of a stroke in r s'  and is r e w r i t t e n f r o m q in s' of lb via c and q is r e w r i t t e n f r o m q* in s of the 1. h. s. of lb under the control of q  in the l . h . s. of lb for the function f  i. e. id  q'  q     f   q  is in id s - s'    and q'and q  are r e w r i t t e n f r o m q* and q** respectively in s in the r. h. s. of la via b then id p   q*  q * *   f   is in i d   r   s   -   r   s '   l 
1  if u - v is an a x i o m define id u - *-v  to be equal to id u - v . 
　　　　　every occurence of a stroke p in r s'  is associated through id r s   - * r   s '     with a unique stroke q in r   s j of la or a unique pattern   q # r q * *   f  of strokes in r s . 
　　　　　if t j   . . . tn is a computation path p and tn is a n u m e r a l then p is called an evaluation path and tn is called the value of ti w. r. t. p . 
　　　　　define t t  to be the set of all t e r m s occuring in the computation paths f r o m t; the r e l a tion s- r d e t e r m i n e s a partial ordering of t t  which we w i l l now investigate. 
　　　　　the notation s - -   r denotes a computation path f r i m s to r. we say that t 1 - -   t n is a subt e r m path if none of the reductions t i : - t i - 1 involve the m a i n function  outer most function symbol in polish notation  . 
definition1. 1 a loop consists of two different computation paths going f r o m a t e r m t to a t e r m t'. a diamond is a loop which has either f o r m 1 or ii below. we i l l u s t r a t e this using   as the m a i n function s y m b o l . 
 where the indicated paths are s u b t e r m c o m putation paths   where both broken pathe are subterm paths; we m a y assume that each involves that same a s sociated s u b t e r m paths s - -   s ' and r - -   r ' . 
definition 1. 1 two computation paths are s i m p l e variants if they d i f f e r by a diamond  i . e . they look like 

two paths are homologous if there is a sequence of computation paths p i   p1  . . . . pn such that pi and pn are the two paths in question and f o r i - 1  . . .   n- 1  pi and p i - 1 are simple v a r i a n t s . note that homologous evaluation paths assign the same value to a t e r m . 

can be resolved into a diamond.  the dotted paths a r e subterm paths. m u l t i p l i c a t i o n is s e r v i n g as a p a r a d i g m case.   
l e m m a 1. 1b  any split can be resolved into a loop. 
　　　　　l e m m a 1. 1 is an anologue to the c h u r c h rosser t h e o r e m f o r the lamda calculus. the proof of this and other results is by an induction argument on the rank rk t  of a t e r m   where rk is an integer valued function   p r i m i t i v e r e c u r s i v e   defined so that a  if s is a subterm of t then rk s    jjc t  and b  if s-  t then j-kjt    hk s . the existence of such a function shows us that any computation path f r o m t has less than or equal to rk t  steps. if we were using all p r i m i t i v e r e c u r sive functions then such a rank function could be 

1 

general r e c u r s i v e but not p r i m i t i v e r e c u r s i v e   
e . g . like ack e r m a n ' s function. the organization of the proof is to dovetail 1. 1a and 1. 1b  f i r s t proving 1. 1a for rk t    n and then 1. 1b f o r rk t    n. the proof is somewhat m o r e complicated than the usual one because we do not r e q u i r e substitution to be u n i f o r m   a condition which would considerably s i m p l i f y the s t r u c t u r e of t t   n a m e l y any split of a m a j o r connective would a l ways i m m e d i a t e l y r e s o l v e : 
	1. 	ingredients. 
definition 1. 1. let q1  . . .   q denote the o c c u r ences of strokes in the t e r m t. lng t  denotes the set of l i s t expressions obtained f r o m q1  . . . q n       and exp  according to the following r u l e s . 
1  1 	 .......qn 	are in ing t . 
1  if i  and j  a r e in ing t  and f is   or exp then 
　　　　the m e m b e r s of lng t  are called the a b s t r a c t ingredients o f t   and q     . . .   q are c a l l ed the simple ingredients of t. ing  t  denotes the set of simple ingredients of t. in the e x p r e s s ion  i j f   j is called the control element and i is called the raw m a t e r i a l . to understand the m o t i v a t i o n behind this definition let us once again consider the r e c u r s i v e definition of u. v : u j = u and u - v l r u. v + u. thus v act as a control e l e ment and u as a fixed p a r a m e t e r . c o r r e s p o n d i n g l y   if i and j were ingredients in r and s resp. then in the t e r m t equal r* s   i j f  would be an ingredient in t with j as the c o n t r o l element and i as the   r a w m a t e r i a l   to be recopied. 
　　　　in the analysis of ingredients and how they change as we trace out the ids in a computation it soon becomes clear that these changes tend to respect the internal s t r u c t u r e of ingredients and can be c h a r a c t e r i z e d as   h o m o m o r p h i s m s   of this s t r u c t u r e . 	so we make a definition. 
definition 1. z. 	a mapping h: ing t -*ing s  	is a h o m o m o r p h i s m 	 horn  	iff 	for all 	 i  j  f  in ing t  h  i f j i 1  = 	  h   i k h ♀     f   . 
facts about h o m o m o r p h i s m s . 
1. 1a if h   g : ing t -*ing s   are h o m o m o r p h i s m s which agree on ing q  t  then h = g. 
1. 1b any map h : ing 1  t --*lng 1   extends to a unique horn f r o m ing t  into ing s . 
	1. 1c 	horn h is 1 on ing t  	iff 	h is 1 on 
ing 1  t . 
　　　　there are infinitely many abstract i n g r e dients in ing t  	only some of which represent real computations. 	we now use the idea of h o m o m o r p h i s m t o s i n g l e these out in a precise m a n n e r . 
1 


　　　　　our example 1. 1 suggests that as we move f r o m one computation path p to a s i m p l e v a r i a n t p' of p we w i l l find that hcpj q  is changed into an equivalent ingredient h   p ' 1   q   ; this is the content of t h e o r e m 1. 1 . 
	1. 	final r e m a r k s . 
　　　　　the ideas presented in this paper can s t r a i g h t f o w a r d l y be applied to other deductivecomputational systems such as the lamda calculus and c u r r y ' s combinatorial logic. 
　　　　　the next step in this investigation extends our analysis to the full 	1 s t order intuitionistic 	theory 	of 	peano 	a r i t h m e t i c . 	the semantics developed 	provides a means whereby with each t h e o r e m a 	we can associate a c o l l e c t ion m   a   of procedures extracted f r o m the proofs of a. 	this w i l l be the subject of a second paper being p r e p a r e d under an nsf grant through boston u n i v e r s i t y . 

we then define an ingredient to be 	references. 
in normal if it can't be reduced nor does it contain any ingredients which can be so reduced. 
	 1  	y e s s e n i n - v o l p i n   a . s .   	  u u r a i n t u i t i o n * 
if one t r i e s to make a cost estimate for v a r i o u s i s m and the a n t i t r a d i t i o n a l p r o g r a m f o r the 
computation paths it appears that if h   p   { q   is in 
	foundations of mathematics *'  	procedings of the 
n o r m a l f o r m then p is the least expensive c o m -
s u m m e r conference on intuitionism and proof 
putation path. 	such estimates are not so easy to 
t h e o r y at buffalo  	new y o r k   1  	north holland. 
make in a reliable way but the examples which have been studied are quite suggestive. 
z  	sussman  	g.   	 a computational model of skill a q u i s i t i o n     doctoral thesis  	m i t   1. 
1 

d1fikiti1n theory as t a1 for a crmtiv  problem solver 
h.andreka  t.gergely  i.nemeti ftungarian academy of sciences budapest  ungary 
             abstract in this paper the application of some deep theorems of mathematical logic is shown in the f i e l d of a r t i f i c i a l i n t e l l i gence. namely  using some of the results of definition theory we give the mathema t i c a l base to systems for automatic designing. /sad/  these systems are capable 
of solving constructive tasks of such kind that need some creativity from the psychological point of view. above tasks contain the i m t l i c i t e description of the object to be contructed. f i r s t of a l l that unit is investigated at sad which provides an explicit definition to the circumscribed object. 
             introduction one of the main directions in research of a r t i f i c i a l intelligence is developing problem solving systems namely  systems for automatic designing /sad/  their practical importance is invaluable. these systems are capable to solve constructive 
tasks  a task is constructive if the unknown is some kind of an object of which characteristics are described in the conditions of the ta1k. two kinds of these are distinguished: 
1. the objects to be constructed are defined e x p l i c i t l y : a/ well-defined task b/ incompletely defined task - here the 
conditions provide an incomplete description of the object 
1. the objects to be constructed are defined i m p l i c i t l y . 
in these take the objects are not named only certain expectations are given about them. 
designing tasks appearing on the expectations of a non-professional customer 
belong to l a t t e r type. it can't be expected from him to give an explicit definition of a required program e.g. with the i n put-output relation. a l l he can do is to give some hints on his own expectations towards some  programlike  thing. similar problems occur at decision making where information is i m p l i c i t l y connected with the question to be decided about. 
a sad capable of solving the 1econd type constructive task  must consist of the following two basic oomponents: 
1. high-level problem defining unit which provides an explicit definition to the implicit object description 
1. solving unit which carries out the e x p l i c i t l y defined task 
mathematical logic and i t s model theory provides plenty of f a c i l i t i e s in sad research. in our present study we i n t r o duce the usefulness of definition theory  an intensively developing f i l e d of modeltheory  from the point of view of sad. 
basic definitions 
the following t r i p l e form a language: 
  syntax  the set of possible worlds  v a l i d i t y     or formally l = f  m  f   . 
a 	type t is a pair of functions  i.e. 

set. 
mere dot and rgt are the domain and the range of t respectively. dot' is the set of relation symbols and dot  is the set of function symbols. 
in the followings we suppose that a t-type first-order langugage 

1 

is given. here  is the set of t-type structures.  t-type structure  is a function for which 

aboves are to be found in more details in  notations of common knowledge are also to be found there. 
prom now on when program is being discussed relation symbols w i l l be used in describing the camputer programs where such symbols may show what relation the input-output should have. this descriptive method provides a far more natural handling of the programs than the descriptions of programs by functions  since this approach is more close to the i n t u i t i o n of the non-programer customers. 
intuitive description of sad based on the definition theory 
let  be a set of first-order formulas which provides the knowledge of a discripline within that designing w i l l occur. s.e.p p provides the semantics of a programing language and the properties of different implemented programs. 
the customer give1 hi1 requests with the help of a set of formulas  . this i m p l i c i t l y defines one or more relation symbols and/or function symbols which do not occur in dot' u dot  . in the followings without l i m i t i n g generality  we supposec that gives the implicit definition of only one relation symbol  p. e.g. .  gives the implicit definition of such a program of which input and output are in relation p. let denote the set of formulas defining the relation p i m p l i c i t l y . 
1 
le 	extension 	o f 	the 
type be the syntax of the 
first-order language extended by relation 
p. thus 
t carry out the design of the required object we have to give i t s explicit description by a formula of   f . bo as to have the required program written in our programing language we have to find such a formula from f which defines v e x p l i c i t l y . 

what is the task of a high-level problem 
defining unit supposed to be at sad  it has to find a definition  on the base of  knowledge to the requested expecta-

if the answer to question 1. is negative then the knowledge within the disciplines 
defined by is 	not enough for the explicit description of the required object. 
on the basis of aboves a  high-level  
1 

problem defining unit of sad should operate the following way. 
the basic knowledge of sad is provided by set of formulas   the customer gives his required object description by the help of set of formulas as a f i r s t step the unit has to find an exact answer for the existence of   but since it ic to complicated a task the following way is chosen. firsb the system controls whether contradicts to knowledge   i.e. it t r i e s to deduce the identically false from . 
if this doesn't suceed within a present time period then the system presupposes the existence of a formula and it w i l l proceed onto the 1. task  i . e . producing 
let us suppose that we succeeded in producing such a formula. it is followed by t i s trying: 
if really becomes 
the requirements of the customer if not  then it may be supposed that the knowledge of the sad is not satisfactory for defining . therefore has to be extended t i l l and aboves have to be repeated nov; for set of formulas the system w i l l go on with this either u n t i l it proves the impossibility of on the basis of the extended set of formulas or  it succeeds to produce formula   of course the system goes on with trying only for a fixed time. w'e note that the extension of set of formulas need inductive logical means from the system. 
now we shall see that case when defines v only up to the disjunction  
the so obtained formulas have to be controlled one by one. so this control goes on u n t i l the f i r s t for which    if neither 
satisfies above condition then it might be supposed that the knowledge  is not satisfactory. in this case the prodecure goe1 on similarly  i.e.  is extended u n t i l   etc. 
useful theorems of definition theory 
in this chapter we introduce those theorems of definition theory without proof which provide the explicit definition of p on the basis of  and    their proofs can be found in . it is expected to obtain different types of theorems depending on the strenght of 
 v/'e begin with the theory containing the weakest conditions for 
if  and a model 	is given then 
the conditions of the theorems contain either that how many relations 
are there for which ; or that how many such relations are there to such a relation so as 
1.theorem /chang - makkai theorem/. if 
of 
then there are a f i n i t e number of para-

circumscribes the relation p in some 
measure then there exists a parameter-
- v e c formulas such that one of them gives the definition 

of p. in other words the set of formulas defines p e x p l i c i t l y up to para-
meters and disjunction. 
1 

theorem 	is 
is 
 then there exists a f i n i t e number of first-order parametric formulas 
the intuitive meaning of 	the theorem is as it follows: if the number of 
relations satisfying set of formulas  is less than the number of a l l 
possible relations then up to disjunction  parametrically defines relation p. the condition of the theorems claims that not a l l the possible relations should carry the characteristics described by the set of formulas 
above theorems /theorems 1. and 1./ are true also for that case when the number of the suitable relations is less than 
not    b u t i . e . in this case there exists a f i n i t e number of f i r s t -order parametric formula and such a parametervector that one of the formulas w i l l give the definition of relation p by the suitable parametervector. 
theorem 1 . is such that in every model is 
		then the statement of the 
previous theorem is true# 
i n t u i t i v e l y the above theorems /theorems 1. and 1 . / state the following: if is such that i t s required characteristics arc f u l f i l l e d in every model by at least f i n i t e number of relations then there exists such a formula for calculating parameters and there exist formulas out of v/hich one defines relation p by the parameters determined by 
fron the point of view of sad this means that a theorem prover extended by inductive elements can prove  that 

on the basis of thin proof a zero-order muct bo selected so 
	that 	.after this it has 
to be proved  that 
then on the basis of knowledge we select the suitable defining formula 
		* 
1 

in these theorems similarly to theorems 
1. and 1. the formulas  and the formula 		serve to 	define the parametervector. the definition of r e l a t ion 1 is 	done also on the basis of those described after theorem 1- there is a difference only when definition is done on the basis of theorem 1  because here we have to try out the formulas not only according 	tt 	also according to   
 the conditions of theorems 1. and 1. for  are so much stronger than those of theorems 1. and 1. that now we claim the existence of such a f i n i t e k which is upper-bound of the number of suitable relations in each model. 
the  is t e strongest in that case if this conditions are satisfied in each model by at least one relation. now we discuss those theorems which refer to t h i s . 
theorem 1. /svenonius' theorem/: if for 
in 	f 
i n t u i t i v e l y it means that if we take two extensions 	and 	of any 	model 	so that these become models of and these are isomorphic then 
  
in this case the set of formulas defines relation p up to disjunction. 
1. /beth'a theorem/: if the set is such that for each 
                 conclusion as we could see from aboves the model theory provides mathematical bases suitable for the development of different kinds of sad important in the practice. this is expecially important because to construct i m p l i c i t l y described objects from psichological point of view is a task demanding creativity. the degree of creativity partly depends on the circumscription of the required object and partly on the development of the corresponding discipline. with the help of the theorems of different strength described in aboves we can obtain different sad-s of different degree of creativity. so far we can see that the research of a r t i f i c i a l intelligence requires the application of deep mathematical results of mathematical logic. to make sad more effective we need the following problem to be solved: and are given then what conditions should satisfy so as to have a formula existing for which 
