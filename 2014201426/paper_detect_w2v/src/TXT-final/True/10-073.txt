eg - a case study in problem solving 
with king and pawn endings1 
crispin perdue and hans j. berliner 
carnegie-mellon university pittsburgh  pa 1 
   
   we present an overview of the design of a program that playr  simple chess endings with pawns and details of interesting aspects. the program evaluates positions according to production-like rules and also generates moves through the mediation of rules that produce  strategies . effects of the design are discussed  partly through examples. the design affects the application of standard chess programming principles  among them use of cutoffs  the definition of a repeated position  and the comparison of values of positions. we also describe problems and solutions of problems concerning concepts peculiar to this type of design  especially the concept of search within the context of pursuing a particular strategy. 
introduction 
   king and pawn endgames are an appealing subject for study for several reasons. even in very simple pawn endings straightforward searching may not deliver a correct answer. a reason to stop searching may not appear within 1 ply  and even at branching factors of 1 this is too much search. see  newborn  1 . these endings are also easily divided into easier and harder classes of problems. the easiest problems can be solved by less sophisticated means and yet they can be solved better by the more powerful techniques that are essential in solving the more complex endings. 
   because objectives in the king and pawn endings tend to be few in number  but may be several moves away  we felt this was an opportunity to explore analysis of a  strategic  nature. we have also found it possible to substitute calculations for substantial amounts of searching in many situations. 
   eg has developed over a period of time and changed as it has done so. this development has left behind a series of object lessons in the design of such a program which are more important than the fact that it solves certain problems. 
   in the presentation  parts of the program will be presented in simplified form. these views will be refined or altered as needed further on. 
¡¡this work was supported by the advanced research projects agency of the office of the secretary of defense  contract f1-c-1  and is monitored by the air force office of scientific research. 
a first view - evaluating positions 
   1 he information most readily available to the would-be chess programmer relates descriptions of the king and pawn endings positions to facts about them. as available from technical books on the endings such as  averbakh and maizelis  1   it can usually be described for the computer in terms of ordinary geometrical relations and the  functional  relations of the king and pawn endings  bearing relations on pieces and squares . the descriptions are usually stated in such a way that it is easy to test whether or not a description holds. eg has a set of rules whose condition parts are in this form which it uses to evaluate positions. 
   let us look at the rule of the square  example k if the king is inside the square shown after his move  he will be al  le to capture the pawn by the time it promotes. the test condition of the rule of the square appears in the condition parts of several rules for evaluating positions. 
example 1: 

	uhi te 	to move 
   an exceedingly simple yet powerful evaluation rule states that in positions where white has a king and pawn against black's king  white need never lose.  of course he actually cannot lose.  in general we will always refer to the side with a distinct advantage as  white . this convention simplifies the statement of rules. 
   looked at from a very simple point of view  eg searches moves proposed by move suggestion rules. any branch of the search terminates when it reaches a position whose game-theoretic value is known to be either good enough or bad enough to be definitely accepted or rejected by the side on move at the root of the search tree.  for instance  in a position where it is known from the start that one side 
   
problem-solvin -l' 	pordue u1 
   
cannot win  a drawn position must be considered good enough for that side.  every position is evaluated by applying the position evaluation rules to it when it is first reached. the values are represented by a pair of values from the set: {black win  draw  white win . the pair represents a range within which eg is sure the gametheoretic value of the position lies. in the simple endings we have investigated a good player can expect to completely analyze a position  so we have tried successfully so far to avoid heuristic values  instead obtaining exact values by analysis. 
   the information about values of positions thai is obtained from static evaluation is used in several ways to control search. the most obvious use of the information is to prevent search at positions  other than the root  where the true value of the position is known. the availability of this kind of information can save a great deal of effort  as in example 1. 

   since the statically determined values of positions are consistent with the game theoretic values  it is possible to use these values to return similarly consistent values from the search. let us call the first value of the range indicated by a value the  lower value  and the second one the  upper value . the lower value of a node may be set to the maximum of the lower values of its daughter nodes  and its upper value may be set to the maximum of its daughters' upper values. 
sf archinig and. strategies 
   only moves suggested for a particular reason are considered in any position. this restricts the search further. example 1 illustrates the structure of eg and some issues of searching with this design. 
example 1: 

   
   even though the principal variation from this position to the promotion of the pawn is 1 ply deep  one of the basic  patterns   position descriptions  for endings with a king a pawn against a king applies after just one ply of search. eg would try the  unique  winning move before any others  but even if they were suggested  any of the other legal moves in this position would be rejected after 1 to 1 ply of search  when positions known to be drawn would be reached. 
   the winning move is k-b1. the condition met by the position it yields is typical. it says that when one side has exactly one pawn and the other side has only a king  if the pawn is not at the edge of the board  the side with the pawn  has the opposition  and his king is more advanced than the pawn  the side with the pawn can force a win. 
   to  have the opposition  is a chess term for a situation where two kings face each other frontally  as after white's correct move  and with an odd number of squares between them. the side not on move is said to be the one having the opposition. 
   each of the nodes with no descendants is followed by its value. in this example  the range of uncertainty of each is nil 1 nodes are searched including the root. how does fg decide what to try  
   all moves are generated by what we call strategies. as part of the problem solver  strategies combine the characteristics of means and goals; a strategy specifies goal information and also is a means for obtaining the situation specified. eg being written in lisp  strategies are implemented as s-expressions which are evaluated and also inspected by eg. when a strategy is evaluated in the context of a particular node in a search tree it produces a list of moves  possibly empty. this list of moves goes into a buffer. if a move is needed and the buffer is empty  a new round of strategy suggestion occurs. if no new strategies are proposed  eg tries no more moves from the node. 
   
p r o b l e m - s o l v i n p - 1 : 	pe/miie 
1 
   
   the list of moves generated by a strategy at a 
   particular node in a search basically depends on its arguments  which help to define the goal  and on the chess position at the node. usually either one move or no moves are generated at one time by a strategy. 
   in example 1  eg considers six squares to be critical for the white king to reach  shown starred.  advancing the pawn can only be harmful.  white must bring the king to onr of these or he will only achieve a draw. of the six  only those nearest to the white king need to be considered; if they fail all the others will also. in this position there sre two squares at a distance of three from the white king: q1 and k1. two strategies are suggested  one to reach qfl and one to reach k1. only moves generated for either one of these two strategies are c onsidered. 
   white does not adhere strictly to his initial strategy  march to q1 . there is what amounts to a hierarchy of strategies  and the rule which suggests taking of the opposition in the critical situations can take precedence over the basic strategy. actually  this arrangement has proved to interfere with the improvement of the program. we will be in a better position to explain this once feasibility testing has been presented.  see the section on 
calculations.  
   in this common type of position where the pawn is not on a rook file black marches toward a square on the file of the white pawn: either the square of the white pawn or onr of the squares in front of it. there is a feasibility test based on distances which can declare squares to be impossible for black to reach if white tries to prevent his occupation of them. black heads for the square of those not ruled out by the distance test which is closest to the pawn. if he fails to achieve a draw  he tries squares as far as the third square in front of the pawn. if all of these fail  the strategy fails  which in this case means the position is lost. 
   blac.kv. basic strategy of reaching k1 suggests an inferior move at his second turn before the correct one is suggested. black's correct moves are made because eg recognizes that when white succeeds because he gets the opposition  there are special techniques black can use to prevent this.  the evaluation rules that involve the opposition are written to record the fact that it occurred and the move suggestion rules check for such a message. 1 his is the same kind of mechanism that is in the causality facility described in  berliner  1   but here the causes of failure recognized and the counter-strategies tend more in the direction of being special cases.  black tries to just mark time for one move by moving to a square adjacent to the one he was on when white succeeded by obtaining the opposition. in this example he happens to make the correct move on the first try. in some other examples ecs behavior may be somewhat less appropriate. 
more search control issues 
repetition of positions 
   the reader may have noticed that several positions are repeated. it is necessary to allow this; the reason is that in different contexts different variations may be tried from the same position. one component of the context is a statement of the strategy being pursued. another is a 
   he  script ion of events  such as the occurrence of the pattern of the opposition  for which there are particular counter measures. in particular  the same position may be reached during the pursuit of two different strategies. that is exactly what happened in this case. nodes in the search tree can be considered the same if the positions are the same in the usual sense and the contexts are also the same. 
searching in context 
   if a strategy fails somewhere other than the root node of the search  eg will usually try fewer strategies than it would if that position were a root node. typically  the strategies in simple king and pawn positions have the property that if the strategy generates any moves at all  one of them will be at least as good for its goal as the best move- generated by any strategy not generating moves diiected to that end. this implies that if a strategy is tried at a node  it does not need to be tried anywhere in the search trees rooted at siblings of the nodes generated by the strategy. eor this reason we calf it the exclusionary property. this method of reducing tree search is based on a suggestion in  berliner  1 . other aspects of control of the tree search are also directly related to concepts described there. 
   in example 1 both of white's basic strategies are suggested at the root node and they have the exclusionary property  so white does not initiate branching except at the root node. if the exclusion did not occur  white would try two moves at each of depths 1 and 1. 
strategies that fail 
   if in some position a strategy cannot make a consistent move or it is known that the value it was aiming for is not obtainable  we say that it has failed in that position.  each strategy has associated information giving the minimum value it is designed to achieve if successful  effectively a standardized piece of goal information.  we make the assumption that the principal variation will end at a leaf at which a strategy has succeeded. since the minimum value can be chosen to be the absolute minimum value  it is easy enough to choose the value conservatively  and some cutoffs can be made this way. 
   when a strategy fails  it may do so at a position where the static evaluator is uncertain of the value of the position. if some other strategy is not a failure at the node  the failure of the strategy is hardly more significant than  say  suggestion of an illegal move. if all proposed strategies fail  the  success  assumption affects the value 
   
prompm-sol v l n p - l : 	perdue u1 
   
backed up. under that assumption  the variation could be to reach a position where the pattern actually applies. the 
discarded  and as a practical matter that would usually be calculations are based on time and distance. equivalent to giving the position the absolute minimum value. in practice  we subordinate this assumption to the 
for example eg assumes in king and pawn against king 
assumption that the static evaluation is consistent. instead situations that if the white king is  as close  to the pawn 
of returning the absolute minimum value  we return the as the black king and  closer  to one of the three squares 
minimum value indicated by the static evaluation. this marked with stars in example 1  white can win the ending. 
provides a consistency check in those cases where the 
conversely if the black king is  closer  to the pawn than 
principal variation is generated by a strategy that fails. the white king he will be able to capture the pawn and 
¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡draw. as has been mentioned above  with the  interruption  scheme sometimes positions are played correctly only 
two algorithms have been developed which handle time 
because 	one 	strategy 	suggests 	the 	first 	moves 	of 	a and distance 	measurements 	with 	great 	precision 	within 
variation  at which point another strategy suggests the their domains of applicability. they both operate by 
best continuation. it is hard to ensure that the marking squares of the chess board with indications of 
interruption will occur if the interrupting strategy has the distance. they each do their analysis with all other pieces 
exclusionary property  though under some circumstances it stationary by assumption. 
will. 
	one 	is 	a 	variation 	of 	the 	a* 	algorithm 	for 	finding 
kin¡ê and two pawns versus kin¡ê 
	minimum cost 	paths  described in  nilsson  	1 . 	the 
variation is that this algorithm finds all minimum cost 
the main problem in endings with king and two pawns 
 shortest  paths for a king of a given color between two 
against a king is to use the information about the pawns given points on a board rather than the one path given by 
individually along with the information applying only to the 
	a*. 	the 	other 	algorithm 	is 	less 	interesting 	from 	an 
two pawns together. it has turned out to be fairly simple algorithmic point of view   but more interesting in the 
to use the existing information about endings with a king assumptions behind its use. its purpose is to determine 
and pawn against a king. 
	which 	squares 	of 	the 	board the white king can reach 
before the black king and which squares the black king can 
the problem of evaluation of positions was handled by reach first. the idea is that each side starts out claiming 
generalizing the evaluator for king and pawn versus king the square that its king is on. the sides then alternate in 
endings a little bit. it was given parameters and expanded claiming all the unclaimed squares adjacent to squares 
somewhat. one typical  and important  change was that already claimed by them and not adjacent to any square 
those positions leading to stalemate with only one pawn on already claimed by the other side. the algorithm 
the board almost always lead to wins with two pawns. the terminates when neither side can claim any more squares. 
rules 	for 	detecting 	these 	classes 	of 	positions 	were 
modified to distinguish between positions with and without 
this divides the board up into  spheres of influence  of 
an extra pawn which can make a move for the simple the kings and it provides a very useful approximation for 
purpose of forcing black to move. the evaluator for the set of squares which each king can reach despite the 
positions with a king and two pawns versus king has a rule efforts of the other. certainly each king can reach all of 
which says with minor exceptions that if a position can be the squares indicated by this algorithm. however  if one of 
recognized as a win for either pawn  by itself  it is a win the kings only needs to reach one of a set of two or more 
with the two pawns together. suggestion of strategies and squares  he may be able to do so even when the algorithm 
moves is handled in a similar way. eg solves almost all does not indicate it. this analysis is quite effective and it 
endings with king and two pawns versus king. the known solves very much the same set of problems that people 
exceptions involve potential stalemates and a few unusual 
	solve 	by 	 counting  	analysis 	on the 	chessboard. 	see 
positions. 	there seems to be a tendency for a few unusual 	f
	botvinnik  	1  for a proposal to apply this type of 
kinds of positions to be overlooked when rules are being analysis to the movements of all types of pieces for 
written.   analysis purposes. 
unfortunately  it does not appear that things can be this 
example 1 is one where eg's calculation abilities can be 
easy in general. to be used in more complex positions  used and are  but some searching is still done. if the black 
knowledge sources like the position evaluators would have king were at n1  black would not try the first variation. 	if 
to be able to give much more information  certainly things the white king were at n1  white would not try the second 
such as reasonable bounds on the time needed to win with variation shown. a particular pawn and the squares each side needs to have available to it. 
calculations 
   eg's ability to detect properties of positions without searching is distinctly better than has been indicated up to now. it has the ability in many cases to detect that patterns can be achieved without going through a search 
problem-solvining-l: perdue 
1 
   

   the values given are all relative to white. the initial position is evaluated as  draw win   at least a draw for white. black abandons the first variation upon realizing it cannot succeed at its aim of achieving a  loss . white's strategy of attacking the black pawn from the other side is fairly reasonable  but fails. the last variation  which black uses to select his move  is good play for both sides. 
feasibility and interruption 
   in many positions the calculations can also determine when simple strategies will fail. we call this the use of calculations for feasibility testing. feasibility testing is an important means for reduction of search in the endings we have seen. in the design of the program we found that feasibility testing interacts badly with careless reliance on interruption of strategies by higher-ranked strategies. 
   the problem is that when a strategy may be interrupted in unspecified ways by unspecified other strategies  it is impossible to reject in advance any moves it might generate. this is the problem referred to in the description of example 1. 
more representation issues 
a view of the kpk endings 
   we now turn to a large view of the king and pawn versus king endings. eg's behavior in playing out an ending can he viewed through an analogy to navigation  f g has a pretty good idea of which way to go at any given point  but is still subject to error. to avoid error  it has memorized a number of landmarks in the area  and it corrects itself by watching for them. that is  it backtracks when a clearly wrong landmark is reached and stops searching when a satisfactory one is found.  the analogy works best when eg is playing the side which succeeds in the ending.  a  landmark  is a position meeting the conditions for one of the static evaluation rules. figure 1 is a  map  which portrays something of how eg interacts with its environment in the king and pawn versus king endings. 
each node in the graph represents an informally defined 
 lass of positions  each associated with a few related types of landmarks  i.e. known patterns or types of positions. we give either a verbal description of the main kind of pattern or a generalized description of the set of patterns associated with each node.  there are really a number of additional types of known positions which cover special cases  especially where the basic rules would give incorrect information. these are left out to keep the figure simple.  eg may start a search from a position not belonging to any node and search may pass through positions belonging to no node while navigating from one node to another. the nodes also mostly have self-loops which are not shown. 

figure 1: states of king and pawn vs king endings 
   
	since 	feasibility 	testing is 	so 	useful  	the use 	of interruptions 	has 	been modified 	to 	make allowed interruptions 	explicit 	in the 	representation of 	each strategy. this has required better understanding of the situations where we had relied on interruption of strategies before. 
   the fact that we need to eliminate arbitrary interruptions does not mean eliminating searching. it only means that arbitrary interruptions cannot be implicitly allowed in all strategies. it is not necessary in all strategies. to solve more difficult problems with limited search will require the ability to automatically generate strategies in which limited and specified types of interruptions are allowed. 
descriptions of nodes: 
a: positions where white has the win and the white king can deny the black king access to the squares of the file of the pawn which are in front of the pawn. 
b: positions where white has the win but black has access to the file of the pawn. 
c: positions where the pawn has been safely promoted. 
d: positions where the pawn is safe  but no win is 
   
p r o b l e m - s o l v i r i k - 1 : 	pfirhue 
1 
   
possible with correct play by both sides.  see example 1.  
e: stalemated positions. 
f: special case positions with the white king on the sixth rank  as in example 1. 

   the clashed arrows represent transitions corresponding to blunders a tyro might make because of unfamiliarity with these endings. he might also fail to get the most out of a position not belonging to a node. 
   the existence of this graph model of the king and pawn versus king ending problem was not assumed during the development of the program. the graph does not coi respond directly to any structure in the program. it does summarize some things nicely. 
making progress 
   for example  notice that the search does not terminate only at positions known to be better than the initial position. a variation is considered satisfactory if it leads to a position as good as can be expected to result from the root node. it would appear that eg should have trouble with  endless  looping. it could loop among positions in a node or among nodes. mow does it know how to make progress  the answer at present is that the search is sufficiently well-directed that the issue doesn't occur. this has been somewhat surprising to us  and we have considered ways of giving eg  a better sense of direction . 
more on this later. 
putting up resistance 
   game-playing programs sometimes exhibit quirks of behavior when choosing between moves of nearly equal loss comes immediately with one and sometime later with the other. as described so far eg would choose arbitrarily between any two variations leading to equal degrees of failure for it. where one way of failing is complex and the other is immediate and simple  the result may look foolish. tor example  in some king and pawn versus king positions white might unnecessarily abandon the pawn. if the position weren't winnable  white wouldn't care whether he had the pawn or not. 
   to try to prevent this problem  one might add some slight credit to failing variations where the failure is recognized deeper in the tree or create a measure of the complexity of the search that must be performed to determine that the variation fails. we have responded by distinguishing individual positions from one another  rather than looking at search depth or complexity. this is convenient for us because we can use the evaluation rules that already exist. we have been able to express our subjective preferences successfully by this method. 
   in the king and pawn versus king endings we differentiate positions where black can force white to show a little understanding of the ending by using the opposition properly and those where the question will not come up. we also distinguish between the utterly dead draws and positions where white retains his pawn and can force black to play correctly for the stalemate. 
   making these fine distinctions can lead to problems with searching. the search looks for  the best move   and this can lead to substantial amounts of searching to decide which of two moves is slightly better than the other in a situation where a truly better move has yet to be tried. 
   to resolve this problem we run the search in two phases. in the first phase the search only concerns itself with the major issues of winning and losing. if after the first phase an issue of putting up resistance remains  the search is extended  redone in fact  to decide that finer point. 
a paradox 
   there are situations in chess where making progress in a winnable position is a significant problem  as in the ending of bishop and knight against a lone king. a program has been written which uses search to resolve those problems  hueberman  1 . it deals strictly with situations which are already known wins for one side  so its representation is designed to keep track of progress. its static evaluation yields conservative minimum measures of progress and the role of search is to select a move by the side with the advantage which definitely leads to progress despite resistance. information ranking won positions according to progress is quite appropriate  so it appears we could encode this information on the existing 
   
value. behavior may look particularly strange when a program is choosing between bad alternatives where the 
¡¡¡¡that ending is known to be winnable  yet it is thought that the more unfavorable positions require over 1 moves for the mate. see averbakh and maizelis  1. 
	p r o b l e m - s o l v i n   - l : 	p e r d u e 
k 1 
   
numeric preference scale much as is done with the  resistance  information. but in a sense we cannot do this. it is interesting to see that the preferences of black and white cannot necessarily be represented on a single linear scale. consider the positions in class f such as example 1: 

	e i ther 	s i de 
	to 	move 
   how does each side compare the value of this situation with the same position one or two squares further advanced  e.g. pawn at qb1  we believe that white prefers the position with the more advanced pawn if he has any hope that black may blunder. black's opinion may not be quite as clear. let us suppose that his preferences are expressed on the same scale as white's. if this is true he must prefer the less advanced position. 
   thus if two strategies are tried  both maintain the draw  and one ends with the pawn less advanced than in the other  black will choose the one with the less advanced pawn. we see no reason why black should behave this way. if he has confidence in his understanding of the situation he has nothing to gain by delaying -- he will lengthen the time it takes him to reach his objective with no other effect. we feel that black at least must not prefer to slow down the game in such a situation  so his preferences are not the inverse of white's. 
   the situation makes sense if the players have models of each other. we are assuming that white has assigned black a nonzero probability of failing to find the stalemate. 
black  we are assuming  does not do so. 
the form of rules in eg 
   the form taken by rules of eg has proved a success. calls on complicated functions are allowed  notably those described in the section on calculations  so it would be difficult to determine in any definite way the absolute power of the rules. nevertheless  we can talk about the power of the rules relative to the functions they call. the rules have proved generally comfortable to use and powerful enough for our purposes. 
   the rules are interpreted directly by lisp  but we restrict ourselves to a subset of the control structure and almost bar side effects entirely. side effects are limited to use for the purpose of user-specified elimination of common subexpressions. the control structure consists of conditionals  mapping functions  find quantification over lists. 
the mapping functions are the standard mapcar and 
mapcan functions. treating lists as sets  they allow the calculation of images of sets under transformations  unions over sels of sets  and selection of subsets containing elements with specified properties. the existential quantifier is extended to indicate an element of the list having the property if such an element exists. there is also a universal quantifier. we do sometimes sort elements of a list and pick the best with some property  but this could be simulated with the other operations  although inefficiently. we rarely do violate the rules. 
   these operations with the booleans and  primitive  functions  and predicates  effectively give us the basic operations of set theory for finite sets  implemented as lists. this seems to be a very natural form in which to stale rules and create lists of things like strategies  and it is powerful enough to be used. 
