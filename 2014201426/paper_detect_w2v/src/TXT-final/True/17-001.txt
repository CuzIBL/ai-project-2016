 
　　　　the tutor for doing proofs in high school geometry consists of a cot of ideal and buggy rules  irr   a tutor  and an interface. the ibr is responsible for ehiuertly computing matcher  to all the correct and incorrect rules the interface is responsible for interacting with the student and graphically representing the proof. the tutor is responsible for directing the ibr and interface to achieve a current tutorial strategy. the strategy wo employ involves tracing the student's behavior in terms of what rules in the ibr it instantiates  correcting the student when behavior deviates below a minimum threshold  and helping the student over hurdles. while incomplete  current evidence indicates the geometry tutor is guite effective. 
the advanced computer tutoring project has been working on the development of intelligent computerhased tutors for mathematics and science subjects in the range of senior highschool to junior college. this paper describes the general framework that we have developed and its instantiation in the case of a tutor tor generating proofs in geometry. first  we will describe the general philosophy of out tutoring efforts. second  we will describe the basic structure of the geometry tutor that we have built. third  we will describe the ongoing efforts to evaluate the tutor. 
general philosophy 
　　　　our approach to tutoring stems from two observations about the nature of learning in domains like high-school geometry. first  the major learning hurdle is acquiring domainspecific problem-solving skills  e.g  generating proofs in geometry   and the way they are learned is by practicing the problem-solving skill. we have intensively observed numerous students going through the first half of high school geometry  anderson  1 . we have not yet seen a case where a student was tible to absorb abstract instruction  from the text or the teacher  and go off and use that knowledge effectively in problem-solving. students only acquired effective use of problem-solving knowledge by struggling with its application through a series of problems. 
　　　　the second observation is that students learn these problem-solving skills much more effectively if they learn with a full-time  private  human tutor who knows the domain well than if they learn in the standard classroom situation  where students solve problems on their own  getting feedback by handing in exercises to be graded or comparing their solutions with example solutions in our work comparing these two modes of study  we have found the students with private tutoring reach the same achievement level as much as four times more rapidly than the classroom students. bloom  1  has compared private tutoring with classroom instruction for two school topics: cartography and probability. in his research  students spent the same amount of time learning  and he looked for differences in achievement levels. he found that 1 percent of the students with the private tutors performed better than the average classroom-student. interestingly  he also found that the strongest benefit was for the poorest students. there was little difference between the achievement levels of the best students in the two conditions. 
　　　　there are a number og reasons for the success of the private human tutor. very important is the constant monitoring and shuctunng of the student's problem solving attempts the tutor can diagnose what contusions that paiticular student has  determine what the student needs to know  and provide instruction specific to these needs. the teacher can communicate the overall goal structure that controls the pioblem solving something that is difficult to do outside of the problem context and which is seldom attempted in classroom instruction. private tutors are very good at managing student errors they provide immediate or near immediate feedback on these errors they can point the student back to the right track and prevent the student from getting lost. in this way students can partially solve problems that they would normally give up on and so can learn from their solution attempts. 
　　　　the ability to be an effective tutor requires that the tutor have an internal model of how the skill should be performed and be able to access this model for purposes of instruction. such a model we call an ideal model. the tutor needs to be able to supplement this ideal model with various errors that a student makes in deviating from the model. we call this the buggy model after brown and burton  1 . 
　　　　one of the major commitments in our tutoring efforts has been to instantiate the ideal model and the buggy model as production systems. this follows from our psychological analysis of such skills in terms of the act* production system  anderson  
       
1 	j. anderson et al. 
1 . there are two major consequences of this commitment. first  act* production systems have well-defined goal structures which we try to communicate to the student. second  these production systems imply a commitment to a grain size of instruction. essentially  every production in the system encodes a meaningful step of cognition. therefore  we monitor the student's problem-solving production step by production step and after each step determine which production  from the ideal or buggy model  that step instantiates. 
       this leads to what we have called the model-tracing paradigm for instruction. essentially  the tutor traces the student's behavior through its ideal and buggy model. at any point in time there are a number of productions in the tutor that might apply. the tutor infers which rule the student executed by determining which one matched the student's output. if it is a correct production  the tutor slays quiet and continues to trace the students problem solving. if an incorrect production has bean applied  the tutor interrupts with appropriate remedial instruction the final possibilities are that the student does not know what to do next or that the students behavior matches no production  correct or incorrect usually  this occurs when the student is greatly confused we have found that the best thing to do in such situations is to tell the student the next step to take. if this is explained properly  the student is often able to get back on a right track. 
       the set of ideal and buggy rules  henceforth called ibrs  are based on considerable theoretical analysis of the characteristics of the problem domain and on a great deal of empirical observation of student behavior. therefore  it is reasonable to suppose that they are more sophisticated than those possessed by most private tutors. also  we have greater access to the knowledge encoded in these rules than do typical private tutors for whom the ideal model is often tacit and incapable of being directly described to students. we think it is possible to outperform human tutors in our use of these rules  which is not to deny that our computer tutors will be outperformed by human tutors on other dimensions such as natural language analysis. 
the architecture of the geometry tutor 
       in trying to achieve our tutoring paradigm  we have realized the need to separate out three components in a tutor. these are the ibr  the tutor  and the interface. these three components are clearly separated in the current version of the geometry tutor  although they were not so clearly separated in earlier versions  boyle & anderson  1 . there are a number of advantages that come from clearly asperating the components. first  from a software engineering point of view it becomes possible to develop and test each component independently. second  the components can be optimized for their distinct characteristics. third this is a step towards one of the ultimate goals of the advanced tutoring project--which is to develop a domain-free theory of instruction. while our current tutor is not entirely domain-free it represents a strong step in that direction. the ibr and the interface are the components in which most of the domain specifics are represented. 
       the centra! component in this triad is the tutor it defines our current tutoring strategy in our current system the tutor is implemented as a production system in the ops1 language  forgy  1 . it uses information both from the ibr and from the student  via the interface  to control the tutorial interaction. it can present information to the student and lequest information from the student by invoking the interface it has two means of interaction with the ibr: 
        a  it can look at which ideal and buggy rules are currently instantiated in the ibr and use these to interpret the students behavior. it allows the ibr to trace the student's solution by selecting in conflict resolution one of the ibr production rules. it then receives an update of the instantiated rules in the ibr after firing this rule. 
        b  it can request of the ideal model whether a statement can be proven  subject to certain constraints. this will cause the ibr to attempt a proof and report back information such as whether such a proof exists  how long it is  how optimal it is  what rules it involves  etc. 
       we will return to a further description of the tutor after describing the ibr and the interface. 
the ibr 
       there were two major goals in our design of the ibr. the first was to have the ideal model generate proofs in what we felt was a natural  humanlike way--in contrast to some methods of proof. the bugs are hung off the structure generated by the ideal model so it is doubly important that it generate human like proofs  both in order to instruct students about what is right and to interpret their errors. the second goal was to make the ibr efficient. it is an important constraint on tutoring that the ibr perform its computations rapidly so that feedback to the student be rapid. most of the computation in the geometry tutor is done in the ibr. as we will see  both of these goals posed interesting challenges in the case of geometry. 
     figure 1 illustrates a geometry proof problem that is considered relatively complex for high-school students. the important feature to note is that at any point in time there are a large number of inferences that can be made. for instance  from the given fact that m is the midpoint of it is possible to infer that  but this is just one of the many inferences that are possible. for instance  it is also possible to infer that because of the vertical angle configuration formed by segments and moreover  these possible inferences can be ordered in a continuum according to aptness  where the first is very apt and the second is very inapt. 
       

       there is another kind of deductive reasoning that students engage in when faced with such problems this is reasoning backwards from statements to be proven to statements that will prove them thus  a student can reason backwards from the goal of proving m is the midpoint of to the subgoal of proving 
 this involves the definition of midpoint. it is possible to reason backwards from this goal again. for instance  one might reason backwards from the goal of proving to the subgoal of proving this would involve the use of the corresponding parts rule for congruent triangles. on the other hand  one might reason back from the goal of proving 
to the subgoals of proving this would involve using the transitive property of congruence. again  these backward inferences can be ordered as to their aptness with the first two inferences being quite apt but not the third. 
     the important observation is that the aptness of an inference is not an absolute property of the rule of geometry that authorizes it  but rather a function of the context in which it occurs. for instance  it does not seem appropriate to make the vertical-angle forward inference that however  another vertical angle inference  is quite apt  particularly after we establish that then we can use these two side congruences and the angle congruence to show that by the side-angle-side postulate. 
       we have created an ideal model for generating proofs in geometry that involves forward and backward inference rules with contextual restrictions. it takes the form of a production system that enables us to model the flexible alternation between backward and forward reasoning that we observe in human experts  every significant conlextualized rule of inference is a separate production rule our use of a production system enables us to achieve the desired flexibility and to have the individual productions used as objects of instruction. compared to other theorem provers for geometry such as nevms  1  our system is distinguished by the flexibility of its control structure and its decomposition of domain knowledge into relatively modular rules. 
	j. anderson et al. 	1 
as an example of a forward inference rule  the following 
 enflishified  production generates a vertical angle inference when that will enable a side angle side inference. 

and there are triangles 
and are colinear 
	then 	infer  by vertical angles. 
as an instance of a contextually bound backward rule  consider t 
if the goal is to prove two lines parallel and there is a transversal 
	then 	set as a subgoal to prove the alternate 
interior angles are congruent. 
       we have developed 1 such rules and have ordered them according to aptness. the ideal model applies the best inference rule that is satisfied in a situation  whether that is a backward or a forward rule. this system can prove all the problems in the high school material we have been working with. it also generates human-like proofs. not all the inferences it makes are part of the final proof  but when it deviates from the final proof  it deviates in the way we have observed in human subjects. 
       geometry poses an interesting challenge for efficient production-system implementation because of all of the symmetries that exist in geometry. consider matching the rule that says if there is a goal to prove two ingles congruent and they are parts of corresponding triangles  set a subgoal to prove the two triangles congruent below is the encoding that is close to what we actually use for this rule. 

figure 1 illustrates a situation where this rule should match with two distinct bindings of variables 
however  as the astute reader no doubt discerns  there is potential for a great many other bindings and the trick is to filter them out as unnecessary. consider  for instance  the binding of a. because of the symmetry of congruence and the symmetry of the end points of an angle  it can bind to any of p  r  s  m  u  v  w  or n. having settled on this binding  there can still be two bindings for c  four for d  and two for f.  these four bindings completely constrain b and e.  altogether there are 1 x 1 x 1 x 1 ＊ 1 possible bindings to be considered  of which only eight 
       
1 	j. anderson et al. 
correspond to distinct hypotheses about triangle congruence. 
six of these distinct hypotheses can be rejected as implausible given the physical diagram-this plausibility check is the same idea used by gelernter  1 . the only two plausible hypotheses about triangle congruence are 

figure 1 
       an immediate reaction to this problem is to try to canonicalize the angles  segments  and triangles in the diagram and have a unique name for each such object. the problem with such attempts is that they fail to uncover all the possible matches to geometry rules that exist. these can only be uncovered by considering the actual ordering of points as significant. for instance  most canonicalizations of this problem would fail to be able to retrieve the eight distinct hypotheses about triangle congruence in figure 1. they would have particular difficulty with representing the distinction between the two plausible hypotheses above which only differ in terms of the correspondence between the points of the triangles. it is no accident that traditional geometry uses a point representation and not a canonicalized object representation. 
     part of our solution is to encode into our statements of the rules the symmetries and have our pattern matcher take advantage of this. so for the rule above we inform the pattern matcher that it need not consider both angle orderings in the congruence. therefore it can assume will match to and not worry about the potential match to it also need not consider both orders of the ray points  a. c  in the first angle. therefore it can assume a will match to q. this reduces by a factor of four the amount of pattern matching that must be done. secondly  we have a special coding for the points on a ray such that we do not have to consider each combination separately. for instance in figure 1  two ray points can match to each of points a  c  d  and f in the pattern. however  we do not have to consider the  combinations. so  rather than having 1 instantiations of the pattern  we have 
1/ 1 x 1  - 1 instantiations. as most of the computation in the ibr is spent in pattern matching  this is a very significant savings. these two instantiations are expanded to eight when we consider the various triangles that can be formed  but six of these are filtered out on the basis of plausibility. 
       these patterns are organized on a modified rete net to obtain much of the efficiency of the ops family of production systems  forgy  1 . we estimate that we are able to obtain a couple orders of magnitude of efficiency over any previous production-rule-based geometry theorem prover. for instance  it is able to produce the prototypical expert solution to the problem in figure 1 in eight seconds of cpu time on a xerox dandelion. table 1 summarizes the sequence of inferences that it makes. it makes three inferences that are not part of the final proof  but these are inferences experts frequently make  and these inferences actually lead to a slightly longer proof. the important fact to note is that eight seconds is much less than human performance  usually a minute  and so is definitely within the bounds for acceptable tutoring. 
table 1 
inferences made in generating a proof for the 
problem in figure 1 

the interface 
       a major effort in the design of the interface has been to communicate to the student the logical structure of a proof and the structure of the problem solving process by which a proof is generated. figures 1 illustrate the proof graph that we have developed for this purpose. there we have a representation of the graph at the beginning of a geometry proof  in the middle of the proof  and at the end of the proof. figure 1 illustrates the initial problem-state. the statement to be proven is at the top of the screen  the givens at the bottom  and the diagram in the upper lefthand corner. the student can reason forward from the givens and backward from the statement to be proven. the student grows the graph by a combination of pointing to statements on the screen and typing in information. each step of inference involves a set of premises  a reason  and a conclusion. reasoning forward  the student points to the premises  types in the reason  and points to the conclusion or types it in. reasoning 
       
	j. anderson et al. 	1 
backwards  the student points to the conclusion  types in the figures 1 and 1 show some of the possible states in proof reason  and then provides the premises. development. the student is finished when there is a set of 

	figure 1 	initial problem state 

	figure 1 	immediate problem state 

	figure 1 	final problem state 
       
1 	j. anderson et al. 
logical inferences connecting the givens to the statements to be proven. figure 1 illustrates how inferences can be grown from the top and the bottom to meet in the middle. figure 1 shows the screen when a student achieves a final proof. note that the student has made some inferences which were not part of the final proof. 
       one function of this formalism is to graphically illustrate the structure of a complete proof. high school students typically do not appreciate how the steps of a proof fit together and find this structure to be particularly enlightening. second  the proof graph concretely illustrates critical features of the problem space-that inferences can be grown in forward and backward mode  that choice points exist where the student must choose among multiple inference rules  that the ultimate goal is to complete a well-formed logical structure. 
       there are a number of other features available in the interface which the student finds uselul. the system automatically does spelling and syntax checking and so protects the student from the misundurstandings that can result from mistyping. numerous help windows can be brought up. the two help windows that students find most useful are a window providing the currently applicable rules of inference and a window giving the statement of any particular postulate  theorem  or definition. 
the tutor 
the tutorial component can be described at two levels. 
first  there is the minimal tutor that we have actually implemented and tested with students  and then there are the various embellishments that we are in the process of implementing and testing. the minimal tutor can be described with respect to three steps a student must go through to complete an inference: selecting a set of statements from which to make an inference  specifying the rule of inference that will apply to these statements  and then specifying the statements that result from applying this rule of inference. 
       in the selection step the student can either select a set of statements from which to apply an inference rule or ask for help. if the student asks for help  the tutor picks the statement set of the most highly rated rule in the conflict set of the ibr  subject to the constraint that the inference produced by that rule is actually part of a proof. it provides the student with the statements  backward or forward  that are part of this rule. if the student selects a set of statements and they represent the instantiation of any legal rule  the system accepts it even if it is poorly rated and even if it is not part of the proof. if the student selects a statement set that is not part of any rule  the tutor tells the student so  and the student gets to select again. if the student chooses a wrong set again  the tutor presents the student with the same statement set that it would if the student had asked for help. this  two strikes and you're out  principle was instituted to prevent the student from looping with guess after guess. 
       the tutor treats the rule-selection step similarly. if the student asks for help  it provides the highest-rated rule involving the statements chosen in the previous step. it will accept any legal rule that applies to those statements. if the student twice provides illegal rules  it will give the highest-rated legal rule. the 
analogous thing is again done in specifying statements that are the result of applying the rule. 
       this minimal tutor is one that tries to guide the student to a solution with minimal intervention it accepts any legal inference that the student wants to make we have found that students can get lost in a maze of legal but useless inferences. therefore  one thing we want to do is to prevent students from making low-rated inferences that are not part of any reasonable proof. the minimal feedback we can provide would be something like  it is legal to do that  but it won't get you anywhere.  however  we would like to build into the tutor recognizers for particular false paths as well as unnecessarily long-winded paths that students go down. as an example of the latter  students often prove theorems as part of a larger proof when they could apply that theorem directly. 
       implied in this capacity is the ability of the tutor to query the ibr as to whether an unanticipated inference is part of a reasonable proof. in reasoning backwards this amounts to judging if each of the premises can be proven and how quickly. in reasoning forward this amounts to judging whether the conclusion of a forward inference figures in a reasonable proof. 
       with these facilities in place we can begin to explore the issue of how directive to be in our feedback. we can allow students to go a fixed number of steps off the path  to override the tutor's advice  etc. given our commitment to immediate feedback and reducing working-memory load  we would expect that the more structured environment would be better  but there is sufficient controversy on this topic to merit empirical exploration. 
       another feature we would like to augment the tutor with is the ability to recognize student confusions and instruct on these confusions. for instance  many students do not realize that in the side-angle-side postulate the angle must be included by the two sides. this requires that there be a buggy rule in the ibr to match this pattern and that the tutor know of this bug and have an explanation associated with it. 
       a related feature is the ability to give the student strategic advice in addition to simply telling the student that an inference is inadvisable. for instance  if the student starts out in figure 1 with the inference  we would like to be able to say something of the order  no  it is not useful to make that vertical angle inference here. it is useful to make the vertical angle inference when the angles are corresponding parts of triangles you want to prove congruent. in this problem why don't you try to make an inference involving the fact that m is the midpoint of 
       
	j. anderson et al. 	1 
yet another feature we would like to provide the tutor with 
       
is the ability to generate remedial problems tailored to student weaknesses. this requires keeping an assessment of how well the student knows the various rules in the ideal model. if there is a weak rule  the tutor can generate a problem involving this rule and tutor the student on the rule. 
evaluation 
       beginning in the fall of 1 we intend to have a classroom of 1 xerox dandetigers in one of the pittsburgh public high schools  and to teach four or five geometry classes of ten students each based on these tutors. the tutor will be devoted to the proof generation portion of high-school geometry  which is slightly more than half of a standard curriculum. this part of the course will be taught on a self-paced basis. the other part of the course  involving ruler and compass construction and coordinate geometry  will be taught in the conventional way. there will be many issues concerned with coordinating such a class which we have yet to work out. however  the outcome of this project will be a fairly systematic evaluation of the tutor and variations on it. 
       in absence of that we have only our pilot work with the geometry tutor to report. we have run three students through the minimal tutor in various stages of development. one student was of above-average ability  one of average ability  and one of belowaverage ability  as defined by their math grades . the belowaverage student came to us for remedial purposes  having failed 1th grade geometry. the other two were eighth graders with no formal geometry training. all learned geometry quite successfully and reached the point where they were solving problems more complex than are assigned in the pittsburgh public schools. after it was over  all claimed to like geometry  which is encouraging given that classroom geometry is usually rated as the least liked of all school subjects  hoffer  1 . 
       assuming that we can establish equally positive results on a larger scale  the next question concerns how we can reproduce this tutor on a more economical scale. it is our belief that the generation of personal computers slated for the late 1s will be sufficiently powerful to deliver this instruction. for instance  the ibm machine being developed on the cmu campus is projected to be sufficiently powerful. moreover  there are optimizations in the direction of compiling the real time computations made by the ibr and the tutor that might reduce computational time by a factor of ten. 
