ion and also from various view points. the basic motivation of conceptual representations is to aid in providing a specification language which serves as a good interface between programmers and the computer and also between users and implementors. conceptual representations are intuitive clear and easy to understand  yet their rigorous interpretations are provided. instead of going into details of syntactic constructs of conceptual representations  we give examples. below | exp  is the unpack operation on  exp  which means writing out all elements denoted by  exp  individually. 
 cell a  ;a cell containing a at its content*.  queue a b c   ;a queue with element* a b c . 
	 node  car. a  c fr; b   	;a lisp node containing a and b. 
 customer  letter*: {lm   *~of-*tompt-nccdcd: n   ;a cuttomer vi*iting a po*t office 
                     ;u ho carriet letter* !m and want* n *tamps.  post-office  customer: {!c}   collector: {!cl}   
;a pott office which contain* cuttomer* gc and mail collector* !cl. 
it should be noted that a conceptual representation does not represent the identity of an actor. it only provides a description of the state of an actor. thus to state that an actor q is in the state expressed by a conceptual representation  queue a b c   an assertion of the following form: 
 q it-a  queue a b o  
is used. some examples of specification using conceptual representation are given in the later sections. 
       symbolic evaluation is a process which interprets a module on abstract data to demonstrate that the module satisfies its specification. symbolic evaluation differs from ordinary evaluation in that 1  the only properties of input that can be used are the ones specified in the pre-requisites  and 1  if the symbolic evaluation of a module m encounters an invocation of some module n  the specification of n is used to continue the symbolic evaluation. the implementation of n is not used. the technique of symbolic evaluation has been studied by a number of reseachers  for example  boyer&moore1  bursta1l&darlington1  hewitt&smith1  yonezawa1  king1 . 
       our method for symbolic evaluation of distributed systems is an extention of the one developed for symbolic evaluation of programs written in simula-like 1anguages yonezawa&hewitt1l one of the main techinques we employ in symbolic evaluation is the introduction of a 
	auto. 	p r o g . - l 
notion of situations mccarthy&haves1 . a situation is the local state of an actor system at a give moment. the precise definition of locality in the actor model of computation is found in  hewitt&baker1   by relativiiing states of modules with situational tags which denote situations  relations and assertions about states of modules in different situations can be expressed. explicit uses of situational tags seem to be very powerful in symbolic evaluation of distributed systems. a simple example is given in section 1. 
       another technique we employ in symbolic evaluation is the use of actor induction to prove properties holding in a computation. actor induction is a computational induction based on the precedes ordering  cf. section 1  among events. it can be stated intuitively as follows: 
 for each event e in a computation c  if preconditions for e imply preconditions for each event e' which is immediately caused by e  then the computation c is carried out according to the overall specifications.  
the precedes ordering has two kinds of suborderings  1  the activation ordering   activated  which is the causal relation among events  and 1  the arrival ordering  ''arrive*-heforem  which expresses ordering among events which have the same target actor. thus there are two kinds of actor induction according to these suborderings. an example of the induction based on the arrival ordering is used in section 1. 
1 . m o d e l l i n g a n a i r l i n e r e s e r v a t i o n s y s t e m 
- a specification of an air line reservation system -
       as an illustrative example of distributed systems  let us consider a very simple air line reservation system. suppose we have just one flight which has a non-negative number of seats. a number of travel agencies  parallel processes  independently try to reserve or cancel seats for this flight  possibly concurrently. we model an air line reservation system as a flight actor f which behaves as follows. the flight actor f 
       accepts two kinds of message   reterve-a-*cat:  and  cancel-o-teat: . when f receives  reterve-a-*cat: t if the number of free seats is zero  a message  no-more-teat*:  is returned. otherwise a message  ok-itt-reterved:  is returned and the number of free seats is decreased by one. when f receives  cancel-a-*eat:   if the number of free seats is less than the maximum number of seats of the flight  a message 
 ok-it*-cancelled:  is returned and the number of free seats is increased by one  otherwise  too-many-cancelt:  is returned. furthermore requests by  re*erve-a-*eat.  and  cancel-a-teat:  are served on a f irst-come-first-served base. 
　　　to write a formal specification of the air line reservation system  we need to describe the states of the flight actor. for this purpose  we use the following conceptual representation 
	 flight 	 seals 	free 
which describes the state of a flight actor. the number of free seau is  m  and     is the size of the flight in terms of the total 
: yonezawa 

number of seats. the formal specification of the air line reservation system using this conceptual representation is depicted in figure 1 below. 

       the first  event:... -clause states that a new flight actor f is created by an event where the create-flight actor receives a 
       positive number s.  actor * means that  actor  is newly created. the second  event:... -clause has two cases according to the number of free seats at the moment when the flight actor f receives {reterve-a-teat: . when the number of free seats is zero  cate-l   the state of f does not change. when it is positive  case-1 t the number of free seats decreases by one as stated by the assertion in the  next-coiuf:... ~clause. the notation in figure 1: 
 event;  t    m  
 pre-cond: ...   
 next-cond: ...  astertion  ...   
 return:  ector      
means that when an event  t    m  takes place  if the p r e c o n d i t i o n s 	are 	s a t i s f i e d   	 astertion s 	i n 	t h e 
 next-con .. -clause hold immediately after the event until the next message arrives at t.  actor  in the  resurn. .. -clause is returned as the result of the event.  next-cond:...  differs from  pott-cond:...  in that assertions in  poii-conrf;... -clause hold at the time  actor  is r e t u r n e d   whereas assertions in 
 next-cond:... -clause hold at the time the next message arrives the next message may arrive at t before or after a reply for the previous message is returned. the third  event:... -clause is for the cancelling event  which is interpreted in a similar way. the  for-eventt: ... -clause states that requests  messages  received by the f l i g h t actor are served on t h e first-come-first-served base. namely  the replying events for events e and e' take place in the same order as e and e  
	1 . 	i m p l e m e n t i n g 
	t h e 	a i r 	l i n e 	r e s e r v a t i o n 	s y s t e m 
our strategy to implement the air line reservation system 
 specified in the previous section  is as follows first  we implement a flight-data actor which satisfies the specification in figure 1 on the condition that it is always activated serially then we put some protecting  or scheduling  mechanism on the flight-data actor so that the protected flight-data actor may satisfy the specification of the air line reservation system 
       in figure 1 below we give an implementation of the flight-data actor in plasma. 
 craata-flight-data =s  zreate-flight-data receives a tize s of flight. {let  tize initially s  ;a variable size it set to s. 
	 teatt-free initially t  	;a variable seats-free it net to s.hen ;the following cas
         ;returned at an actor which behavet at a flight-data.  cases 
 =  {reserve-a-teat:  ;when a {reterve-...  message it received   rules teats-free 
	 e  1 	;if seats-free it zero  
	{no-more-seats:   	; no-.   mettage it returned. 
	 = 	else 	;otherwite 
 seats-free  -  teats-free - 1   
　　　　　　　　　　　　;teats-free it decreated by one. {ok-itt-reterved:     ;{ok-   mettage it returned. 
 s  {cancel-a-teat:  ;when a  cancel-...  mettage it received   rules seats-free 
	 i  size 	;if teatt-free it equal to tize  
	{too-many-cancel 	t:   	;{too-...  it returned  
	 i  elte 	;otherwite 
 teats-free  -  teatt-free   1  
                         ;seatt-free it increated by one. {ok-itt-cancelled:        ;{ok-...  it returned. 
figure 1 
it is fairly straightforward to write a specification for this flight-data fd by using a conceptual representation: 
{flicht-data {teatt-free:  m  {tixe:  t   
which describes the state of a flight-data actor. the number of free seats is  m  and  ′  is the size of the flight in terms of the 

auto. p r o r . - l : yonezawa 1 

number of seats. note that if fo were sent more than one message concurrently  anomalous results would be caused. for example  in the implementation in figure 1  if  retserve-a-seat:  and  cancel-a-teat:  messages are sent concurrently   no-more-teatt:  message might be returned even if there are vacant seats. therefore in order to model the air line reservation system by using the above implementation of a flight-data actor  the way it is used must be restricted so that interference between different activations does not take place. as suggested in the beginning of this section  the restriction we impose is that fd must be used serially in the sense that fd is not allowed to receive a message until the activation by the previous message is completed. now the flight-data actor can be used to implement the air line reservation system under this restriction. we give a formal specification for the flight-data actor in figure 1 below. 

in this specification  the restriction of the serial use is expressed in the following notation  
	auto  	p r o t f . - l 
1 
	 fd 	it-uted-terially  
stated as a precondition for events. in contrast to the specification above  there are no such preconditions in the specification of the air line reservation system  the flight actor  in figure i. thus the reservation system is specified to work properly even if it is accessed concurrently. also notice that the specification above has no statements about scheduling such as the first-come-first-served scheduling which is stated as  for events:... -clause in the specification of the air line reservation system. 
1. one-at-a-tlme 
       in this section  we consider how the serial use of a flight-data actor is realized in environments where communicating parallel processes try to use the flight-data actor. our approach is to surround a flight-data actor fd with some mechanism which arbitrates parallel requests to the flight-data actor fo and passes these requests to fd in the serial fashion. we call this protection mechanism a one-at-a-time guardian. a ono-at-a-time- guardian can be easily implemented by a 
       s e r i a l izer atkinson&hewitt1  which is a general synchronization mechanism in the actor model of computation. 
       now we give a specification for one-at-a-time guardians. a one-at-a-time guardian is created in an event where an actor one-at-a-tlme receives a resource  a flight-data actor in this case . the one-at-a-time guardian thereby created will then contain the received resource. the following  event;... -clause expresses this. 
 event:  one at time  ＊ resource  
 return: g*   
 post-cond:  g it-a  one-at-a-time resource     
where  one-at-a-time  retource   is the conceptual representation for a one-it-a-tima guardian which contains  resoure. next  we specify how a one-at-a-time guardian g behaves. in general a request to the guardian g  which is an arrival of a message m at g  eventually causes an invocation  or use  of resource. the invocation of resource begins with an access to resource which is an arrival of the same message m at resource and ends with a reply for the access which is a return of some result of the invocation.  see the figure 1 below.  

       our aim of using a one-at-a-time guardian g is to control invocations of resource by parallel requests so that only one invocation of resource takes place at a time. in order to do so  if we have two concurrent requests  the end of the invocation by one request should always precede the beginning of the invocation of the other request. this intuitive 
: 	yonezawa 

description of the desired behavior of a one-at-a-time guardian can be described in terms of the order of the events request  access and reply introduced above. suppose we have two requests  request} which is an arrival of a message mi at g  and request  which is an arrival of a message m1 at g. then request  causes access  which is an arrival of mk at 
resource resulting in reply-for accessk   in this order  where 
k stands for either i or j . to ensure the one-at-a-time property of invocations of a resource  the following ordering relation must be satisfied: 
m if request1 precedes requestj  
then rep/r/orfaccessj  must precede access: . 
since requestr always precedes accessk and accessk always precedes rep/y-for accessk   the desired ordering relation can be expressed by the following diagram. 

　　　　this behavior of the one-at-a-tima guardian is formally described as a specification in figure 1 below. note that resource must be guaranteed to reply. 

　　　　1 . s y m b o l i c e v a l u a t i o n o f t h e a i r l i n e r e s e r v a t i o n s y s t e m 
       our implementation of the air line reservation system is expressed by the following simple code. 
 craata-flijht at  a  ona-at-a-tima  craata-flijht-data    . 
 equivalent   
    cr ata-flight =   i  on -at-a-tima     craata-flight-data  = s  .   in this section we demonstrate that the above code meets the specification of the air line reservation system given in figure 1. 
our method for the demonstration is symbolic evaluation. the symbolic evaluation of the code 
 ona-at-a-time  craata-flifht-data     
reveals the following facts: 
1  an actor fd is created by  craata-flight-data  = s   
1  g is created by  one-at-a-time  = fd  and returned  and 1  the two actors satisfy the following assertions immediately after the creation of g 
 fd i*-e  flight-data  trait-fret: t   *ite: s     g i*-a  one-at-a-time fd  . 

this means that the flight actor is created as a one-at-a-time guardian g which contains a flight-data actor fd with s free seats. in what follows  we will establish that the ona-at-a-tima guardian g satisfies the specification for the flight actor in figure 1. 
       the  even:.. c1ause in the specification for the flight actor in figure 1 specifies the behavior of g in terms of the conceptual representation 
 g it-a {flight  seats-free:...  *ize:...    
 notice that f in the specification for the flight actor is instantiated as g.  on the other hand  g is implemented as a onav-at-a-tima  guardian which contains the flight-data actor fd. this means that we have two views of g and correspondingly two different conceptual representations are used to describe the state of g. in order to show that the implementation satisfies the specification  we need to establish some relation between the state of g expressed by 
	 flight  seats- free: .  	 tize:..    
and the state of fd expresssed by  flight-data 	 *eat*-free:...  *i*e:..  . 

auto. prok.-l: yonezawa 
1* 

the relation we need is: 
 if g satisfies the assertion 
      g ii-a {flight beau-free: n   tize: s    in a situation where g receives a message m  then fd always satisfies the assertion 
      fd it-a  flight-data  teatt-free: n   size:s    in the situation where fd receives the same message m 
    through the ore-at-a-time. guardian   and vice versa.  this relation is expressed formally as follows: 

sit e  expresses the situation where an event e takes place. 
the above implementation commentary formally describes the basic idea of the implementation. it can be viewed as the counterpart of an  invariant  in parallel process environments  which was first introduced by  hoare 1  to show correctness of implementation of data structures which are supposed to be used serially. 
　　　　it should be noted that the first-come-first-served based scheduling by the guardian g guarantees the above relation. if the guardian does more complicated scheduling  the relation needed for the demonstration may not be so simple. for more general scheduling cases  see  yoneiawa1 . 
i. establishing the  event:  g  ＊  reserve-a-ieat:  ... -c dluse 
       there are two cases to be considered. we only consider the  case-.1... -c1ause. 
case-1:  g is-a  flight  seats- free: n   tize: t      n   1  
　　　　the guardian g receives a  reterve-a-neat:  message m. to know the result of this event  the specification for one-at-a-time in figure 1 is used. since the flight-data actor fd is guaranteed to reply  the specification for one-at-a-time guarantees that the  reserve-a-seat:  message m is received by fd. to know the state of the flight-data actor fd at the time of the arrival of m  the above implementation commentary is used. since the state of g at the time of the arrival of m at g is described as: 
              g i$-a  flight  $eatt-free: n   siize: s  . the state of fd at the arrival of m at fd is described as 
 fd i$-a {flight-data  eat$-free: n  {size: s   . 
then the  case--1... -clause in the  event. .. -clause of the specification for flight-data actors in figure 1 is referred to. since the precondition that fd must be used serially is satisfied 
 because fd is contained inside the one-at-a-time g   the  case-1~ -clause of the specification for flight-data actors tells us that 
	a u t o . 	p r o g . - l 
1 
 1   ok-iu-reterved:  is returned  and 
 1  the state of fd is now expressed as: 
 fd it-a  flight-data  seat-free: n - 1   tize: ＊   . 
 1  is what the  return:.. -clause in the specification for the flight in figure 1 requires. since the state of fd expressed as 

remains unchanged until the next message m' arrives at fd. by using the implementation commentary in the other direction this time  we know that the state of g remains unchanged as 

until the message m' arrives at g. this is what  next-cond:..   clause in the specification for the flight actor in figure 1 requires. thus case-1 is shown. case-1 may be shown analogously. it should be noted that induction on the order of arrival of messages is used. 
ii. establishing the  event:  g  ＊  cancel-a-teai:  .. -c * ise 
the argument for this event is analogous to that of i. 
iii. establishing the  for-eventt:j   zuie 
       the event where the flight actor g receives a message means that the one-at-a-time guardian receives the same message. suppose that m and m' arrive at g in this order. the specification for the one-at-a-time guardian specifies that 
m' is not received by fd until the reply from fd for m is completed. therefore the reply to m' always takes place after the reply to m. this is what the specification requires. 
iv. establishing the confinement of the flight-data actor fd 
       the discussion in i  ii and iii above assumes that no one can access the flight-data actor fd except through the guardian g. this assumption always holds because the flight-data actor fd created by  create-flight-data    t  is never released outside the one-at-a-time actor. 
	1 . 	f u r t h e r 	w o r k 
　　　　we are currently working to establish a coherent methodology for demonstrating that a distributed message-passing system will meet its specifications. by using the technique of symbolic evaluation  we would like to analyze the relationships and dependencies between modules in a distributed system. this approach will be instrumental in assisting us with the evolutionary development of distributed systems. 
       we are also working on the application of procedural objects  such as actors  to the area of business automation. in order to replace paper forms and paper documents  we use  active  forms and  active  documents which are displayed as images on the tv terminal accompanied by procedures. active forms and documents are sent from one site to another whereby 
: yonezawa 
clerks are requested to provide necessary information with the guidance of the accompanying procedures. such procedures may also check the consistency of filled items and point out errors and inconsistencies to persons who are processing forms. thus active forms and documents accompanied by procedures enormously increase the flexibility and security of message and document systems. furthermore we propose to use the  language  of forms and documents as the basis for the user to communicate with the information processing system. one of the ultimate objectives in our research is to develop a methodology for the construction of real-time distributed systems which can be efficiently and effectively used by non-programmers. 
	1 . 	a c k n o w l e d g e m e n t s 
       conversations with jeff rulifson have been helpful in further developing the notion of an  active  document. this research was conducted at the artificial intelligence laboratory and laboratory for computer science  formerly project mac   massachusetts institute of technology under the sponsorship of the office of naval research  contract number n1c1. 
1. bibliography 
atkinson  r. and hewitt  c. e.  synchronization in actor 
systems  1-th sigplan-sigact symposium on principles of programming languages  los angles  january. 1. 
birtwistle  c  dahl  o.-j.  myhrhang  b  and nygaard  k. simula begin auerbach  phil. pa.  1. 
bobrow  r. s. and winograd  t.  an overview of krl  a 
knowledge representation language  csl-1. xerox palo alto research center  july  1. 
boyer  r.s. and moore  j.s.  proving theorems about lisp functions  jacm. vol.1. no.l. january  1. 
burstall  r.m and darlington  j  some transformations for developing recursive functions  proc. of international conference on reliable software. los angles  1. 
greif  i.  semantics of communicating parallel processes  phd thesis mit  also technical report tr-1. laboratory for computer science  formerly project mac   september  
1. 
greif  i. and hewitt  c.  actor semantics of planner-1  
proc. of acm sigplan-sigact conference. palo 
alto  california. january  1. 
hewitt  c. e.  how to use what you know  ijcai-1  ussr  september 1. 
hewitt  c.e.  viewing control structures as patterns of passing messages  ai-memo no.1  artificial intelligence lab. 
mit  december. 1.  also to appear in the journal of artificial intelligence. 
hewitt  c.e and baker  h.  laws for communicating parallel 
processes  proceeding of ifip-1  toronto  august. 1  also working paper 1. artificial intelligence laboratory mit. december 1. 
hewitt  c.e. and smith  b.c.  towards a programming apprentice  ieee transaction on software engineering  vol. se-lno. 1. march  1. 
hoare  c.a.r.  proof of correctness of data representation  acta informatica vol. 1. pp1.1 
king  j.  symbolic execution and program testing  cacm vol.1 no. 1 july 1. 
kulpers  b. j.  a frame for frames: representating knowledge for recognition  in d. g. bobrow & a. m. collins  ed.  representation and understanding  new york   academic press  1. 
learning research group  personal dynamic media  ssl-1. xerox palo alto research center  april 1 
lenat  d. b.  beings: knowledge as interacting experts  ijcai-1. ussr  september  1. 
mccarthy  j. and hayes  p.  some philosophical problems from the standpoint of artificial intelligence  machine intelligence vol.1. american elsevier new york 1. 
minsky  m.  a framework for representing knowledge  in p. h. winston  ed.  the psychology of computer vision  new york  mcgraw-hill  1. 
rich  c. and shrobe  h.e.  understanding lisp programs: 
towards a programmer's apprentice  masters' thesis  electrical engineering and computer science  mit august  
1.  also ai-tr no.1  artificial intelligence laboratory  mit. 
steiger  r.  actor machine architecture  master's thesis 
department of electrical engineering and computer science  mit  june 1. 
yonezawa  a.  meta-evaluation of actors with side-effects  working paper 1. artificial intelligence laboratory mit. june  1. 
yonezawa  a. forthcoming ph.d. thesis.  department of electrical engineering and computer science. mit. 1. 
yonezawa  a.  and hewitt  c.  symbolic evaluation using 
conceptual representations for programs with side-effects.  ai-memo. no.1  artificial intelligence laboratory  mit. december 1. 

auto. p r o g . - l : yonezawa 1 

understanding and improving 
	lisp 	programs 
harald wertz 
universite paris 1 
departement d'lnformatique 
1 paris 
       we are currently investigating the creation of an didactic environment for the teaching of a programming language to approximately 1 students each year. at 
this effect we are constructing a robust and perspicious system : vision & can & phenarete  greussay 1  goossens 1  wertz 1   a system designed to help the individual apprentice in the process of developing  writing and debugging programs. 
in this note we will describe some aspects of 
phenarete  the convivial part of the system : phenarete receives as input a student proposition of a program - which may contain as well syntactic as semantic errors and will deliver as output her improved propositions of this program : a finite sequence of approximations. 
       with the help of our system  the learning of a programming language is done in a cycle : 
	improvement 	-- propositions 
user 	and 
 proposition 	~~*  	approximation 	~ ot 
	＊ system   	-phenarete 
phenarete 
       before constructing phenarete we observed for one year our students beginning to learn lisp  to see which kinds of errors are statiscally the most current. 
there we found principally five sorts of errors : 
- absence of variables 
- inversion of variables 
- grouping errors 
- absence of the conditionnal instruction 
- non-representation of the termination of a computation. 
our system is particularly efficient in the detection of these kinds of errors. it doesn't try to verify the program with respect to the intentions of the programmer  but it tries to understand the programming language constructs used in the program  to see the interaction of the different parts of the program and to detect inconsistencies  with a particular emphasis on the verification of the termination of the program. in some way phenarete may be considered as an intelligent interpreter : she does not execute but she injerpiejjlthe program  and the result of an interpretation are some propositions  propositional interpreter . phenarete incorporates the programming knowledge of a programming apprentice. 
       let me illustrate the reasoning involved in an interpretation of a simple lisp program  main steps only  : suppose a student has submlted the following program  the numbers are for references in the tetf . 

         first   line 1 and 1  the grouping of the body of the function suggests that the user has omitted the cond-function call  so phenarete introduces  line 1-b   cond . then  line 1  we find as the first clause of the cond immediately a recursive call of the function rev  and following  line 1  another clause. knowing that line 1 can never be attained during an execution of the program we can invert the two clauses. this gives : 

         so far the surface improvements. now a closer look at line 1' tells us that x and y will be lists  when 
the function is invoked  and that the first argument  x  is inchanged and the second argument  y  will grow longer. in line 1' the case second argument - nil is solved  but this is the only case where the computation of rev will terminate. if y is different of nil  the only constructive computation done in the program is the creation of the new list argument 1. so  when hypothesising that the result of rev will be this list just created  we have to force a recursion stop. let us try to call rev with the cdr of argument 1 : 

but the recursion will not stop either. so let's try to introduce a supplementary test   null x  . and  always under the hypothesis that y will be the result of the computation  this gives us : 

this will be the first proposition of phenarete ; 
proposition 1 

         but this new line is just the line 1' with x and y inversed  so let's try without line 1'. ok  that is also a recursive procedure which stops with the correct algorithm  so another proposition : 

finding no more possible interpretation  phenarete will stop  after these two propositions. during the interpretation-phase she justifies all the modifications she proposes in a way similar we did. 
         the system is implemented in vlisp-1 and is currently used by about 1 students. 
references : 
chailloux j.  vlisp-1  manuel de 