 
a model of unrestricted and-parallel execution for logic programs is described  based on dependency directed backtracking  ddbt  aimed at improving the efficiency of execution while remaining faithful to conventional syntax and semantics. this is achieved with maximum exploitation of parallelism  ddbt  support of opportunistic stream parallelism and potentially parallel backtracking. the same dependency information needed for ddbt is used to resolve variable binding conflicts. an algorithmic description of the behavior of processes embodying logical procedures is given. circular dependencies arising out of the opportunistic nature of execution are removed by imposing an ordering on dependencies with an overwriting rule. various aspects of the model are discussed and illustrated with examples. 
1 introduction 
logic programming has grown out of work on automatic theorem proving  and is based on the idea that logic can be used as a programming language. the widespread use of such programming languages has been hindered by what is often cited as a major disadvantage - execution can be very slow. this problem is being tackled on many fronts: 
  by enhancing the control mechanism of logic program-ming languages with various schemes of ddbt  bruynooghel1 coxl1 changl1 kumarl1 .   by developing special purpose machines for the execution of logic programs such as the warren abstract machine 
 wam   warren 1  and the berkeley programmed logic machine  fagin 1  dobry 1 . 
  by adapting the execution model of logic programming languages for use on a multiprocessing architecture  lil1  conery 1  hermenegildo l1  
the above ideas are by no means mutually exclusive. 
various parallel execution models incorporating ddbt 
 kumar 1a  dembinskil1  borgwardtl 1   have been expressed in terms of abstract machine microinstructions  faginl1 . but many of the parallel execution models have been criticized for expensive runtime support  forcing the computation of all solutions simultaneously  no support of ''stream parallelism   etc. a common characteristic of these models is their approach to the problem of variables shared by more than on subgoals in a clause resulting in schemes of restricted and-parallelism. 
     this work focuses on the use of intelligent or termbased ddbt  bruynooghe 1  drakos 1  in the context of parallel execution. ddbt is a simple mechanism  where each object is tagged with the set of derivation steps at which it is constructed or modified. on subsequent failures  the modification histories of failing objects can form a set of possible culprits. backtracking to any intermediate derivation step between the current step and the most ''recent  step in the culprits would not remove the failure. consequently  intermediate steps potentially containing choice points can be ignored. 
     ddbt can not only help in reducing the search space in the manner described above but also allow a higher degree of parallelism during forward execution and introduce some parallelism during backtracking. this is achieved by using the dependency information required for ddbt in sequential models to resolve variable binding conflicts in the parallel model. 
the advantages of this approach are mainly: 
  the maximum amount of and-parallelism is exploited   no preprocessing or runtime support is required to detect goals with shared variables 
  opportunistic stream parallelism is supported 
  parallel backtracking is possible 
  only one solution at a time is computed 
  it is fairer than other models with desirable termination properties  drakos 1  
1 parallel execution of logic programs 
a program clause is a formula of the form a --b1... bn n 1  where bl... bn are atoms or negated atoms. a is an atom called the head of the clause and b l ..  bn is the body of the clause. the commas in the body denote conjunction. a logic program is a finite set of program clauses. the set of all program clauses with the same predicate p in their heads is called the definition of p. a goal clause is a like a program clause but without a head. each b1  i = l ... n  is called a subgoal and can be interpreted procedurally as a 

1 this work is supported by a grant from the university of leeds 
	drakos 	1 




	drakos 	1 

a l 1 . a l l .b l 1 . b 1 l . 
and the goal  -a x y   b y x . then the following scenario is possible: 
two processes p1 and p1 are created to solve the two subgoals. p1 produces the variable binding { x/l } and p1 produces { y/l }. so shallow failures occur both in p1 and p1 which move to their second alternatives  sending a reset message to each other since dependents l  = {1 } and dependents 1  = {1}. so they both restart from their first alternative clause and the cycle may be repeated... 
     in a sequential model of execution either p1 or p1 would be the producer of both x and y. similarly  in parallel execution models with variable annotations  pereiral1  or in models of restricted and-parallelism  changl1 faginl1 hermenegildol1  this is not a problem as consumer processes always follow the completed execution of producers. such solutions though  introduce a sequential element limiting the amount of 
parallelism and increasing the administration overheads. 
     there are three ways in which a process may depend on another process  i.e.  i  by direct failure   ii  by indirect failure when receiving a redo and  iii  by consuming substitutions. these make possible six different cases of direct circular dependencies. in the previous example the circularity arose out of two direct failures. it can be shown that such dependencies can be eliminated by imposing an a 
posteriori ordering with an overwriting rule: 
if a process p1 receives a substitution 1 from pj such that j   i then 1 is overwriten so that p| becomes the producer of 1. also  if a subsequent failure occurs because of 1  a 
reset is sent to pj. 
the overall effect of the rule is to make  older  processes the producers  thus restoring the partial order between producers and consumers imposed by the structure of the program. consider the execution of the previous logic program under these circumstances: 
p1 produces { x / l }  p1 produces  y/l } as before  but eventually p1 overwrites y and becomes the producer of { y/1 }  sending a reset to p1. p1 eventually accepts the reset  tries and rejects b l 1  and on moving to b 1 l  the first solution is found. 
an algorithmic description of the behavior of a process is given in program 1. 

opportunistic stream parallelism can best be illustrated with the following logic program and the goal 
 -front s 1  x  l 1   in the usual notation: 
front n x z  :-append x y z   !ength x n . length  1 . 
length  q | r  s n  :- length r n . append  x x . append  u | x   y  u | z     : - append x y z . 
the predicate front n y z  denotes the relation between a number n  in the successor notation i.e. 1 is 1  s 1  is 1  s s 1   is 1 etc.  and a list y containing the first n elements of a list z. one possible execution scenario up to the first solution is shown in figure 1  assuming that enough processors are available  and that variables shared by different goals but in the same argument position are bound by processes with lower process-id's  this is just a convention making more consistent the inherently sequential  frame by frame trace of the execution and is not required by the model . 
in frame 1 of fig. 1  p1 produces the substitution 
{ x /     } but a deep failure occurs in p1 which sends a redo back to p1 in return  p1 sends a reset since p1 depends on it. in the second frame  p1 tries the second alternative and produces {x/ u1|x1   u l / 1 } consumed by p1. note that p1 starts checking the length of the list  1xi  even before xi is bound eventually by p1  the child of p1 . { x l /     } is consumed by the child of p1  p1 and the first solution is arrived at with { x /   l   } . in the case of multiple solutions it is assumed that all active processes participate in a  failure  when a solution is arrived at a redo can be sent to the youngest process to resume the execution towards subsequent solutions. 
	stream 	parallelism 	or 	data 	flow 	corouting 
 clarkl1 clarkl1 faginl1  as it is otherwise known is an alternative control strategy where a call need not be completely evaluated before execution can proceed. in the definition of front  the first subgoal can be considered as producing successively longer lists with elements from z  and length checking if they have n elements. conventionally  append would have to be completely evaluated before execution can move to length  but with data flow corouting it is possible for length to start checking the length of list y even before its elements are known. usually this is achieved with annotations designating literals as producers and consumers and with strict protocols for interleaved execution. with opportunistic stream parallelism  as shown in the example  the producers and consumers as well as the order of execution are arbitrary. as a consequence  the full potential of stream parallelism may not be exploited but on the other hand there are no administration costs. 
1 discussion 
perhaps the most serious criticism against ddbt is the expensive representation and manipulation of the dependency sets. this cost can be reduced with a bit-integer representation so that a set of process-id's can be encoded as a single binary integer. then set operations such as union and intersection can be performed with fast logical machine instructions  drakosl1 . decoding bit-integers into their constituent process-id's can be done efficiently using logarithms. the disadvantage of this encoding scheme is that very large binary numbers may be required 
	drakos 	1 

 1p+1 where p is the number of activated processes . 
     a simulation prototype of this model is being developed in order to assess performance gains and costs  with emphasis on the large bit-integer storage costs  the extra costs of overwriting in unification  message passing overheads  etc. at a later stage the design will be expressed in terms of an abstract logic machine based on the wam  warren abstract machine  warrenl1  . the expected result is the specification of a high performance truly parallel logic machine. 
acknowledgements 
i wish to thank my supervisor richard thomas for his support  encouragement and advice. also thanks to leyni. 
