 
　　　a first level implementation of al  a high-level programming system for manipulator control  has been completed and is now in operation. several new modules have been added to the system i.-.cluding: pointy an interactive system for specifying representation of parts  and alaid an interactive debugger for al. recent work in vision has been incorporated into the al system. this paper describes the present implementation of al and discusses current work. 
introduction 
　　　this paper summarizes recent work done by the hand-eye group at the stanford artificial intelligence laboratory. for a complete discussion the original papers should be consulted  see bibliography . 
　　　general purpose robot manipulators such as the  unimate  provide a possible answer to the problems of automation of assembly for small scale batch manufacturing and of materials handling where special purpose equipment is too costly. we are implementing a system called al for the specification of these tasks. the principal aim of our work is not to provide a 
　　　programming system for the factory floor  but rather to do research on the underlying issues inherent in such a system. 
an overview of the al system 
　　　we have a digital equipment corporation klio processor supporting the sail language  a dialect of algol   and a digital equipment corporation 1 minicomputer which is programmed in palx assembly language. two six degree of freedom scheinman stanford arms and several other small devices such as a mechanical screwdriver and a pneumatic vise are controlled by the 1. 
the main modules of the al system are shown in figure 1. 
through pointy the user generates a description of the parts to be used in the assembly. this data structure together with a user written al program is then compiled. the resultant code  cahed the' pseudocode  is interpreted by the runtime system causing the manipulators to perform the desired task. alaid provides debugging facilities and an interface to other programs such as a vision module. 
　　　in the current implementation the runtime system and part of alaid reside on the 1. the remainder of the system uses the kl1. 
a brief summary of the al language 
at the heart of our work is the al programming language 
 1 al is an algol-like source language extended to handle the problems of manipulation. much of the design of al grew 

figure j. 
out of experience with the stanford wave system  1 
　　　in addition to the normal scalar variables found in most programming languages  available data types in al include those types necessary to specify three-dimensions! measures like directed distances  locations and orientations. arithmetic operators such as rotation and translation are provided to handle these new data types. 
　　　provision is made for simultaneous execution of several processes. this allows calculation and arm movement to take place concurrently. several manipulators can be operated in independent or coordinated motion. synchronization of parallel processes is accomplished by signal and wait primitives. 
　　　a rich vocabulary for specifying manipulator motion is provided. included in this is the ability to monitor various conditions  e.g. force or touch  and to perform an appropriate action if the tested condition occurs. 
a general purpose text macro facility ii also available 
representation of objects 
　　　one goal in the design of al was for ease of programming  and in specific  ease in representing objects and the relationships between objects. even for a simple part like the box in figure 1 there are several features: two screw holes  a grasping point  and the box's location. when the box is moved the other features should move with it. also when the hand is 


r o h o t   c s - l : 	goldman 
1 

frame box  box-grasp  scl  sc1; 
affix box-grasp to box 
atframe rot yhat l1  vector i l.1 l  ; 
affix scl to box 
at fr am e rot yhat  1  vector 1 1  ; 
affix sc1 to box 
　　　atframe rot yhat 1  vector 1 ; box  - frame nilrotn vector  1 1   
declarations necessary to describe the affixment relations of the box in figure 1. figure 1. 
grasping the box one would like to specify motion in terms of the box and let the system compute the necessary movement of the arm. al allows the user to declare the affixment relations between objects and then automatically takes care of the subsequent bookkeeping operations. 
　　　from a study of sample al programs it has become apparent that these declarations occupy a substantial proportion of the code. they also tend to be more difficult to write than the procedural statements  see figure 1 . with the development of even higher level manipulator languages  declaration of a detailed world model will become a significant problem. 
　　　pointy is a prototype system that allows the user to interactively build the necessary data structures using the manipulator itself to point to the objects and their features . the output from a session with pointy is a text file of al declarations. to increase the manipulator's precision as a measuring tool a sharp pointer is grasped by the hand. the pointer is shaped so it can reach into such awkward places as the inside of a screw hole or the interior of a box. in order to make the shape of the pointer compatible with all kinds of unforseen obstructions the pointer may be bent by the user into an arbitrary shape. when the pointer's shape is changed  recalibration of the pointer's tip is quickly accomplished by pointing to a known position. 
　　　the current pointy system contains three major modules: an affixment editor  arithmetic routines  and an interface to the manipulator. the affixment editor contains facilities for creating and modifying the affixment relations between the objects being modelled. the arithmetic routines permit the user to perform arithmetic operations and to modify the location attributes of parts. the manipulator interface contains facilities for moving the manipulator under either system or user control and for retrieving the current position of the manipulator for use by the rest of the system. 
　　　a preliminary version of the system has been implemented and tested. this preliminary system demonstrates that specifying object modules can be a much easier process than might otherwise have been believed. a fuller version of the system is currently under development. 
debugcinc manipulator programs 
　　　experience has shown that most programs of moderate size contain errors  and that debugging is a significant part of software production. this work is greatly facilitated by the use of debugging tools that know about the language the program is written in. for example bail  a debugger for sail  knows about sail's data types  primitive operations and procedure implementation  1 
　　　debugging an al program involves examining and modifying variables  altering the flow of control  triggering condition monitors  and patching code. provision must also be made to handle both the explicit and implicit parallelism in the program. another factor is that manipulator programs work in the real world which is less tractable than the highly controlled world of the computer. many actions are irreversible. backing up to an earlier state usually involves the repositioning of physical objects  including the manipulator. failures arise due to discrepancies between the program's model of the world and the actual state of affairs. indeed the idea of a program crashing takes on new meaning. 
　　　alaid has been designed to meet these problems and to assist the programmer in preparing correct manipulator code . since our system resides on two computers  we further require 
alaid to provide a link between the two machines. this allows debugging to proceed from either machine. it also allows a clean interface between an al program running on the 1 and a higher level strategy program on the kl1. alaid enables the two processes to signal each other using the synchronization primitives in al and it also allows the program running on the kl1 to examine and set variables in the memory space of the al manipulator program on the 1. 
　　　the state of alaid at the moment is fairly primitive. it connects the two machines  can examine and set variables  signal and wait for events  and cause the runtime system to enter 1ddt  a symbolic assembly language debugger. alaid resides on both machines and runs as a parallel process with the runtime system. a more advanced version of alaid is currently being implemented which will allow the user to alter the flow of control  set breakpoints  and examine/modify the pseudocode. 
interfacing vision to al 
　　　there are many manipulator tasks which are greatly enhanced by the use of vision. visual feedback can provide better positioning  inspection  error detection  and error recovery. recent work in visual information processing here has taken advantage of the fact that in assembly tasks there is a great deal of prior knowledge about the type  placement  and appearance of the objects that form the scene  1 the goal is to verify an object's presence  e.g. is the screw on the screwdriver   or to refine the location of some object  e.g. where exactly is the screw hole . from the model of the expected scene one knows roughly where each object should be. they may be misplaced by half an inch or rotated fifteen degrees  but there will not be any big surprises. this class of visual tasks has been named verification vision. 
　　　through the use of alaid it is possible to have a verification vision program running on the kl1 interfaced to an al program on the 1. the vision module can be coordinated with the manipulator code to provide a large degree of visual feedback. whenever the manipulator program needs visual feedback it can signal the verification vision program. using alaid the vision module can examine variables in the manipulator program to see which of several tasks it is to perform. it can then take a picture and compute the needed information which  again via alaid  can be stored into the appropriate variables in the manipulator code. 

robotics-1: goldman 1 

　　　a manipulator program making use of visual feedback has been successfully demonstrated. the manipulator  holding a mechanical screwdriver  picks up a screw from a dispenser and inserts it into a screw hole in a carburetor assembly. a quick visual check is made to confirm that a screw has actually been retrieved from the dispenser  and if not  another try is made. the precise location of the screw hole is determined visually and this information is made available to the manipulator program. 
other work 
　　　the present al system calculates trajectories for the manipulators at compile time. we are presently investigating possible algorithms for runtime trajectory calculation . doing the calculation at runtime will reduce the load on the planning system in the compiler  possibly to the vanishing point. this will make it easier to add arrays and procedures to the al language. it also opens the possibility for an interactive manipulator system. 
we are also improving the force-feedback features of al 
. a new force-sensing wrist is being added to the manipulator allowing more precise force monitoring. better touch sensors are also being investigated. software to allow compliant motions and the application of forces  in addition to better force-sensing  has recently been completed. this work will make our manipulators capable of much more delicate motions. 
　　　there are still several minor features of al that have yet to be implemented  such as library functions. these will be added to al shortly and a number of demonstration assemblies will be programmed. a film of al in operation will be available 
soon. 
　　　finally  work will shortly begin on two arm cooperative ＊motions when our second arm interface is finished. 
summary 
the first version of the al language is now operational. 
experience obtained from writing al programs for various assembly tasks has shown that the declarations necessary to describe the parts occupies a substantial portion of the code  and that these declarations tend to be more difficult to write than the procedural statements. pointy  a system to allow the user to interactively generate these declarations  has been written and successfully tested  providing a solution to the problem of parts specification. work has been done investigating the requirements of debugging tools for manipulator programs. a preliminary system  called alaid  which knows about the data types in al has been implemented. using alaid  a vision module has been interfaced to the al system  enabling a manipulator program to utilize visual feedback. 
　　　other current work deals with runtime trajectory calculation  manipulator path specification  improved force-sensing and application of forces  and two arm cooperative motions. 
acknowledgements 
this work was supported by the national science foundation through grant nsf-apr-1-a1. thanks also go to all the members of the stanford hand-eye group who have worked with the al system. 
bibliography 
1. 	t.o.binford  	r.c.bolles  	r.finkel  	t.a.cafford  
d.d.grossman  	e.miyamoto  	m.s.mujtaba  	m.d.roderick  
b.e.shimano  	r.h.taylor; exploratory study of computer 
integrated assembly systems; second report  sept 1  1 to 
nov 	1; 	artificial 	intelligence 	laboratory  	stanford university. 
1. t.o.binford  r.c.bolles  r.finkel  t.a.cafford  r.goldman  d.d.grossman  j.p.jarvis  c.r.liu  m.s.mujtaba  
m.d.roderick  	v.d.scheinman  	b.e.shimano  	r.h.taylor; 
exploratory study of computer integrated assembly systems; 
third report  dec 1 to july 1; artificial intelligence laboratory  stanford university. 
1. 	t.o.binford  	t.a.cafford  	g.gini  	m.cini  	i.giaser  
r.coldman  	t.ishida  	c.r.liu  	m.s.mujtaba  	h.nabavi  
e.nakano  	e.panofsky  	v.d.scheinman  	d.schmelling  
b.e.shimano; exploratory study of computer integrated assembly systems; fourth report  aug 1 to march 1; artificial intelligence laboratory  stanford university. 
1. r.c.bolles; verification vision within a programmable assembly system; memo aim-1; december 1; artificial intelligence laboratory  stanford university. 
1. r.finkel  r.h.taylor  r.c.bolles  r.paul  and jafeldman; 
al  a programming system for automation; memo aim-1; november 1; artificial intelligence laboratory  stanford university. 
1. r.finkel; constructing and debugging manipulator programs; memo aim-1; august 1; artificial intelligence laboratory  stanford university. 
1. r.goldman  m.s.mujtaba; al users manual; forthcoming; artificial intelligence laboratory  stanford university. 
1. d.d.grossman  r.h.taylor; interactive generation of object models with a manipulator; memo aim-1; december 1; artificial intelligence laboratory  stanford university. 
1. r.p.paul; 	wave  	a 	model-based 	language 	for 
manipulator control; first north american industrial robot conference and exposition  october  1. 
1. j.f.reiser; bail  a debugger for sail; memo aim-1; 
october 	1; 	artificial 	intelligence laboratory  stanford university. 
1. r.h.taylor  a synthesis of manipulator control programs from task-level specifications; memo aim-1; july 1; artificial intelligence laboratory  stanford university. 
1.  a film of al in operation; forthcoming; artificial intelligence laboratory  stanford university. 

roknt i c s - 1 : 1ool hfrvin 1 
