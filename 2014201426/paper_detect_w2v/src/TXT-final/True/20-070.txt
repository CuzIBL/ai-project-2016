 
in many applications we want to build systems which must test the consistency of some theory  or set of axioms . this problem is general to many applications  for example abduction  learning  default reasoning  diagnosis  and is examined here in the context of theory formation from a fixed set of possible hypotheses  pga1 poole1 . there is a problem which arises when we are generating theories that contain variables. two solutions are examined  the first where we are only allowed to have ground instances in theories formed  and the second where we may have universally quantified variables in the theory. it is shown that for the second case that the solution of reverse skolemisation is not adequate to solve the problem  nor is any naive pattern matcher a solution for both cases is outlined. 
1 	introduction 
we consider here the problem of checking the consistency of a theory generated by a program we consider the problem in terms of a theory formation system which has a fixed set of possible hypotheses  i.e.  we are assuming some other system is supplying the general forms we can to assume this study is independent of how the possible hypotheses are generated . this is a problem because variables in a generated theory somehow need to have their quantification reversed when checking consistency. this paper shows that some proposed solutions do not work  and provides a solution to the problems where we don't allow variables in our hypotheses  and the general case where we allow arbitrary instances of defaults. 
1 	formal semantics 
we use the standard syntax of the first order predicate calculus  with variables in upper case. we assume we have the following two sets of formulae: 
f is a set of closed formulae  called facta   which we are given as true 
 is a set of formulae  each instance of which can be used as a possible hypothesis 
we say formula g is explainable if there is some d  a set of instances of elements of 
d is said to be the theory that explains g. 
　　without loss of generality  we assume that g is variable free  and is an atom. we also assume that elements of a are atomic and do not contain bound variables. these assumptions do not restrict the expressiveness of the system  but make analysis simpler 
is equivalent to  reiter1 's norma  default : 
1 	implementation 
the obvious way to implement explainability  reiter1 pga1j is to note that both proving the observations  and testing consistency are the role of a theorem prover. intuitively  the idea is to try to prove the goal from f and  and make d the set of instances of  used in the proof. a complete theorem prover is an appropriate tool to check whether is consistent  by failing to prove inconsistency . checking consistency corresponds to showing that the theory does not predict anything known to be false. 
　　in this paper i assume that we are using some sort of complete resolution theorem prover  see eg.  chang1j  to generate the instances of hypotheses which imply the goal. the results  however  do not seem to be restricted to such systems. 
　　there is a problem which arises when there are variables in the d generated. consider the following example. 
example 1 that is  any instance of p can be used if it is consistent. let that is g is true if there is some y for which p y  is true. 
　g is explainable with the theory which is consistent with f  consider the interpretation on the domain {a  1}   and implies ′. so according to our semantics above  g is explainable. 
　　however  if we try to prove g} we generate . where y is free  implicitly a universally quantified variable . the existence of the fact  should not make it inconsistent  as we want g to be explainable. 
theorem 1 in proving explainability  it is not adequate to only consider interpretations in the herbrand universe of some set of 
formulae. 
proof consider the example above; the herbrand universe is just the set {a}. within this domain there is no consistent theory to explain g. 
　　this shows that herbrand's theorem is not applicable to the whole system. it is  however  applicable to each of the deduction steps  chang1 . 
	poole 	1 

1 	ground instances of defaults 
consider first the case where we only allow ground instances of possible hypotheses in a theory. a ground instance is defined to be one without variables or skolem constants. 
　　the procedure1 to compute explainability  when we only allow ground instances of defaults in theories  is 
1. skolemise f  forming   free variables are universally quantified ; 
1. try to prove g using elements of ftk and as axioms. make do the set of instances of used in the proof; 
1. reject do if it contains a skolem function  that is try to find another proof of g   
1. form d  by replacing free variables in do with unique constants; 
1. add d1 to f and try to prove an inconsistency. if complete search for a proof fails  g is explainable. 
example 1 consider f and as in example 1 above. if we try to prove g  we use the hypothesis instance this means that g is provable from any instance of to show g cannot be explained  we must show that all of the instances are inconsistent. the above algorithm says we replace y with a constant is consistent with the facts  so that we can show g is explainable. 
let us first try to justify this procedure. 
　　if g is explainable  there is a ground theory d which explains g. some more general set do of instances of defaults can be generated in the manner described above such that  for some 1  this is a direct corollary of the lifting lemma  chang1  page 1  . 
　　the third step of the procedure enforces the groundness of defaults found. the fourth and fifth steps follow from checking if is consistent by skolemising the x  the free variables in do . 
1 	arbitrary instances of defaults 
sometimes we don't want to be restricted to just ground instances of defaults. consider the following examples: 
example 1 consider the blocks world  where we only want positive knowledge about which blocks are on each other  and we want the closed world assumption for  on . this is done by having the defaults: 
if we have 

this says that a block has a clear top if there is nothing on it  and that block a is on block 1. we want to conclude that 1 does not have a clear top  and all other blocks have a clear top. 
   'this problem is  in general  undecidable; this procedure has the property that if it halts  it has computed a correct answer  and if a provable answer exists this  nondeterministic  procedure can compute it. 
1 	reasoning 
example 1 let  that is  we may assume that any block is on the table. let 

we want to say that g is explainable as there is a red thing on the table  namely the object that we know is red  but do not know its name . the ground procedure would reject such an answer  as it must know the name of the individual said to exist. 
　　we extend the definition of explainability to allow arbitrary instances of the possible hypotheses in our theories. in particular we want to be able to assume a default for all individuals we can. 
　　if we want to expand the procedure given in the previous section  we have to consider how to handle existentially quantified variables. the standard way to do this is to give names to the individuals said to exist  i.e. skolemisation   chang1  . if we skolemise it allows us to use normal resolution theorem pro vers. 
however  we must consider the skolem functions in the theories generated. 
　　it has been suggested  bledsoe1 cox1  that we  reverse skolemise  the generated hypotheses. if we can prove their negation  we have shown the theory inconsistent; if a complete theorem prover fails to prove their negation the theory is consistent. this is equivalent to unifying the reverse skolemised form with provably inconsistent instances of possible hypotheses. 
　　unfortunately  no such pattern matching program will work in general. 
theorem 1 there can be no algorithm which does pattern matching on the instances which lead to the goal to be explained  and the instances which are inconsistent such that the goal is explained if and only if the pattern matcher fails. 
proof: to prove this it is adequate to show two examples which have identical inconsistent hypotheses and syntactically identical instances which can prove the goal  but have opposite answers. 
　　the examples we use are based on having just one simple default  namely that any individual is in the table: consider 

that is  there is one block  a  that is not on the table  and is red. g1 is explainable if everything is on the table  g1 is explainable if all non-red things are on the table. according to our semantics g1 should not be explainable  as we can't assume a is on the table   but g1 should be explainable  assuming that everything except a is on the table . 
　　when attempting to compute their explanations  we note that exactly the same instances of hypotheses lead to each goal  and exactly the same instances are inconsistent. put into skolem normal form this becomes: 

　　to prove each g1 we generate the theory {ontob/e c  }  and the only inconsistent instance of hypotheses is ontable a . note that the last clause is not used in either the proof of g1 nor in proof of inconsistency. d 
1 	building the knowledge base 
the problem we have is that we have lost the context of what the skolem constants represent. in this section we show how hilbert's e-symbol can be used to keep track of which functions the skolem functions denote. 
　　hilbert's e-symbol is a notational device to implicitly describe an individual said to exist. ex.p x  is  intuitively  an x such that p x  is true . this was designed to eliminate existential variables through the equivalence: 
where is any well formed formula parameterised by x. see  leisenring1  for a detailed description of hilbert's e-symbol. when skolemising  see  chang1    we replace 
 where ables 
we should also define what / i s . we can use hilbert's e-symbol to define /: 
that is 	
　　to build the knowledge base  skolemise all existentially quantified variables  and record the definitions of all skolem functions and constants. in the skolemised form all variables are universally quantified and so explicit quantification can be removed. 
1 	the general explanation procedure 
the procedure outlined here is an extension of the one presented in section 1. see  poole1  for more details. 
　　we are trying to solve the problem of given some g  whether it is explainable or not. that is  if there are assumptions from which can be consistently added to f to imply g. 
the following describes the algorithm: 
　　let  be the skolemised form of facts f. we assume we have recorded the definitions of all skolem functions. 
　try to prove g from f$k and  let do be the set of instances of elements of used in the proof. 
　　let be a grounding of -do- that is  we replace free variables in do with unique constant symbols. we then know 

by construction  given our proof procedure is sound . 
form d1 by replacing each instance of a skolem function with a 
unique variable x1. we know 	implies 
d  and does not contain any skolem functions  and so 

　we now find out which instances of we cannot assume. to do this  we try to prove from f *. 
we collect up the instances of the x  proven  green1 . 
suppose we find the answer1: 
we know that we cannot assume any instance of 
　for those instances which we need in the above proof that we cannot use  because they are inconsistent   we must find an alternate explanation. the instances we need for the proof of g are for 	the ones we must 
 for every instance of c j . that is  for 
the case w - ti ... tn ct  we must find an alternate proof to that found initially  for all instances of the c  . 
　　for each inconsistency of the above form found  we must try to reexplain g from the case 

if f' is consistent  then we can explain g only if we can explain g  using a different set of instances of elements of  from f'. if f' is inconsistent  then inconsistency found is irrelevant to the theory needed to explain g. 
　　in this description  we have ignored the problems of skolem functions appearing in the c  and the t  as well as disjunctive answers from the proof of  see  poole1  for full details. 
example 1 consider the blocks world of example 1. let 

　　that is  we can explain gb if 1 has a clear top  and explain ge if c has a clear top. 
　skolemising the facts gives  cleartop 1   that is we try to explain g  using an alternate proof to above  from 

which cannot be done. 
　　we can explain ge as we cannot prove the negation of the corresponding d1  that is we cannot prove 
1
　　if w is a formula  vw is th  universal closure of w. that is if w has free variables vit...tvk then v * is defined to be vu...vv* w. similarly  is defined to be the existential closure of w. 
	poole 	1 
example 1 consider the example in theorem 1 above. the skolem constants  c  have different definitions  

1 	conclusion 
there are many areas in which this problem arises. some people have assumed that it is sufficient to consider the herbrand universe  reiter1 . others have tried to define a  reverse skolemisation  algorithm which can be applied to the hypotheses generated  and unified with the instances leading to inconsistencies  cox1 bledsoe1 . we have shown that both of these ideas cannot work. 
　　we have shown that we need to keep track of the context in which skolem functions are defined  and have shown how this 
1 	reasoning 
can be done by using hilbert's e-symbol. a procedure is outlined which solves this problem for the case of no skolem functions in the inconsistencies found. |poole1  gives the general solution to the problem. 
acknowledgements 
this research was supported under nserc grant a1. thanks to eric neufeld  paul van arragon  denis gagne  bruce kirby and randy goebel for valuable discussions  arguments and comments on an earlier draft of this paper. 
