
the notion of a conservative extension plays a central role in ontology design and integration: it can be used to formalize ontology refinements  safe mergings of two ontologies  and independent modules inside an ontology. regarding reasoning support  the most basic task is to decide whether one ontology is a conservative extension of another. it has recently been proved that this problem is decidable and 1exptime-complete if ontologies are formulated in the basic description logic alc. we consider more expressive description logics and begin to map out the boundary between logics for which conservativity is decidable and those for which it is not. we prove that conservative extensions are 1exptime-complete in alcqi  but undecidable in alcqio. we also show that if conservative extensions are defined model-theoretically rather than in terms of the consequence relation  they are undecidable already in alc.
1	introduction
the design and integration of ontologies formulated in modern ontology languages such as owl is a serious challenge. experience shows that principled methodologies as well as automated reasoning support are required to ensure that the resulting ontologies are well-structured . in the recent papers  1; 1; 1; 1   conservative extensions have been identified as a crucial notion for formalizing central tasks in ontology design and integration. consequently  conservative extensions can play a key role in design and integration methodologies   and reasoning about conservative extensions can provide valuable support for the ontology designer.
¡¡formally  an ontology t1 ¡È t1 is a conservative extension of an ontology t1 w.r.t. a signature ¦£ iff every consequence of t1 ¡È t1 formulated in ¦£ is already a consequence of t1. for example  assume that ontologies are formalized in a description logic  dl  such as owl-dl and its fragments . then a signature is a set of concept and role names  an ontology is a dl tbox  and a consequence of a tbox is a subsumption relationship between two concepts which follows from the tbox. intuitively  t1 ¡È t1 is a conservative extension of t1 w.r.t. ¦£ if adding t1 to t1 does not change the ontology t1 as far as concepts built only from concept and role names in ¦£ are concerned. we give three examples of ontology related tasks that can be understood in terms of conservative extensions.
- ontology refinement. during ontology design  a frequent task is to add more details to a part of the ontology that has not yet been sufficiently described. intuitively  such a refinement should have no impact on other  unrelated parts of the ontology. this requirement can be formalized by demanding that the refined ontology is a conservative extension of the original one w.r.t. the concept and role names that do not belong to the refined part  1; 1 .
- ontology merging. the most straightforward way to integrate two ontologies is to simply take their union. such a merging should not compromise the original ontologies. one possible formalization of this requirement is to demand that the united ontology is a conservative extension of the component ontologies w.r.t. the set of all concept and role names used in the respective components. weaker formalizations are obtained by excluding from the signature concept and role names for which an interaction between the component ontologies is expected  and intended  .
- defining modules. a module inside an ontology t that describes an independent part of the application domain can be defined as a subsetsuch that t is a conservative extension of t  w.r.t. the concept names and role names that belong to.
the most basic reasoning task regarding conservative extensions is as follows: given ontologies t1 and t1 and a signature ¦£  decide whether t1 ¡È t1 is a conservative extension of t1 w.r.t. ¦£. in the following  we refer to this task as deciding conservative extensions. in   this decision problem is investigated for the basic dl alc and proved to be 1exptimecomplete. the aim of the current paper is to investigate conservative extensions in more expressive dls such as the ones underlying the ontology language owl-dl and to map out the boundary between decidable and undecidable. our main results are as follows:  i  in alcqi  the extension of alc with inverse roles and qualifying number restrictions  deciding conservative extensions is 1-exptime complete and thus not more difficult than in alc; and  ii  if we further extend alcqi with nominals  conservative extensions in the result-
namesyntaxsemanticsinverse roler  ri  1nominal{a}{ai}negation c¦¤i   ciconjunctionci ¡É diat-most number
restriction{d | #{e | d e i¡Ê ri ¡Än e	c	¡Ê	} ¡Ü	}
figure 1: syntax and semantics of alcqio.
ing dl alcqio are undecidable. this shows that conservative extensions in owl-dl  of which alcqio is a fragment  is also undecidable. it also identifies alcqi as a significant fragment of owl-dl in which conservative extensions are still decidable.
¡¡in mathematical logic  there exist  at least  two versions of conservative extensions. one is based on the consequence relation as sketched above. an alternative  stronger version is defined in a model-theoretic way. we also consider deciding the latter kind of conservative extensions and show that  already in alc  this problem is highly undecidable. details of all proofs can be found in the technical report .
1	preliminaries
in dls  concepts are inductively defined with the help of a set of constructors  starting with a set nc of concept names  a set nr of role names  and  possibly  a set ni of individual names. in this paper  we consider the dl alcqio and its fragments. the constructors available in alcqio are shown in figure 1. there  the inverse constructor is the only role constructor  whereas the remaining constructors are concept constructors. in figure 1 and the remainder of this paper  we use #s to denote the cardinality of a set s  a and b to denote individual names  r and s to denote roles  i.e.  role names and inverses thereof   a b to denote concept names  and c d to denote  possibly complex  concepts. for an inverse role s = r  we set s  := r. as usual  we use  as abbreviation for an arbitrary  but fixed  propositional tautology     and   for the usual boolean abbreviations  
 at-least restriction
 if n = 1    =		 
 existential restriction  for  universal restriction  for . we assume that the numbers inside number restrictions are coded in binary.
¡¡the dl that allows only for negation  conjunction  disjunction  and universal and existential restrictions is called alc. the availability of additional constructors is indicated by concatenation of a corresponding letter: q stands for number restrictions; i stands for inverse roles  and o for nominals. this explains the name alcqio  and also allows us to refer to its sublanguages in a simple way.
¡¡the formulation of ontologies in description logics is based on tboxes  and we will from now on use these two terms interchangeably. formally  a tbox is a finite set of concept implications.
¡¡the semantics of alcqio-concepts is defined in terms of an interpretation i =  ¦¤i ¡¤i . the domain ¦¤i is a nonempty set of individuals and the interpretation function ¡¤i
maps each concept name a ¡Ê nc to a subsetri ona¦¤i ofi  and each¦¤i  each role name r ¡Ê nr to a binary relation
inductively as shown in the third column of figure 1.individual nametension of ¡¤	a ¡Ê ni to an individual ai ¡Ê ¦¤i. the ex-
i to inverse roles and arbitrary concepts is defined

cian interpretation  di  and i is ai modelsatisfiesof a tboxan implicationt if it satisfies allif
implications in written	t . a concept  if every modelcofistsatisfiable relative to adsuch thatrelative to a tboxi of t satisfies thet
tbox t cif there exists a modelis subsumed by a concepti concept
implication.
¡¡despite the fact that individual names are closer to constants than to predicates  we henceforth use the term predifinite set of predicates. the signaturecates to refer to elements of nc ¡È nr sig¡È n ti. a  of a tboxsignaturetis ais the set of all predicates that occur in t . given a description llogic l and a signature ¦£  we use l ¦£  to denote the set of¦£. -concepts that use only predicates from
definition 1  conservative extension  let t1 t1and  be a sig-t1 beif
tboxes formulated in a dl l  and let ¦£   sig
nature. then t1 ¡È t1  we haveis a ¦£-conservative extension of t1
1.
deciding conservative extensions means to decide  given
ttwo tboxes1 ¡È t1 t¦£1-conservative extension ofand t1 and a signature ¦£t 1.sig t1   whether is a
if ¦£ = sig t1   we simply drop ¦£ and only talk about conservative extensions. it is not difficult to see that an alternative
definition of conservative extensions is as follows:athat is satisfiable relative to¦£	t1 ¦£ t1	t1 ¡È t ¦£ 1 is
   -conservative extension of iff each concept c ¡Ê l . is satisfiable relative to t1¡Èt1 therefore  a concept  but not relative toct1¡Ê l¡È t1. we call such a concept awitnesses thatthat is satisfiable relative tot1 ¡È t1 is notwit-a
t1
ness conceptconservative extension of.	t1
¡¡let us give an example for conservative extensions in the description logic alcqi. assume that t1 is a tbox formalizing knowledge about universities:
intro tcslecturelecturerprofessor	teachingassistant	lecture	subject.subject   given by.lecturer
		
lectureremployed by.university
university	employed by . academic  admin 
the upper part of t1 describes university lectures  saying  e.g.  that every introductory lecture on theoretical computer universities and their employees. suppose now that we wantscience  tcs  is a lecture. the lower part of t1 describes to refine the part of the ontology that is concerned with lectures. we extend the signature by adding the concept names automatatheory and complexitytheory and state in t1 that these subjects are discussed in every introductory tcs lecture. we also say that automata theory and complexity theory are different things:
introsubject.automatatheory
introsubject.complexitytheory 	automatatheory  complexitytheory
intuitively  this addition should have an impact on the upper part of t1 since it adds information about lectures  but it should not affect the lower part which is not concerned with lectures. this intuition can be formally captured by conservative extensions: if we choose ¦£ to be the set of all predicates used in the lower part of t1  then t1 ¡È t1 is a ¦£is not affected-conservative extension of t1. thus  the lower part of. if we choose ¦£ to be the predicatest1 by the addition of t1
in the upper part ofextension  a witness concept beingt1  then t1 ¡È t1 is not a ¦£-conservative
introtcs has subject  .
by considering these two cases of conservative extensions  the ontology designer can thus verify that his modification changes the tbox  only  in the intended way.
¡¡this example also shows that conservative extensions depend on the descripion logic land we have seen that if: the tboxes t1 and t1¦£areis actually formulated in alci
holds since we assumedis not athe set of predicates in the upper part of¦£-conservative extension ofalcqi	t1. however  this onlyt1  then t1 ¡È t1 to be the underlying dl
and thus allowed number restrictions in the witness concept.
  for the same
section  we investigate a purely model-theoretic version ofif we switch the underlying dl to¦£-conservative extension of t1	alci  then¦£. in the nextt1 ¡È t1 is a
convervative extension  which does not depend on the language.
1	model conservative extensions
in mathematical logic and software specification   there are two different kinds of conservative extensions: one that is based on the consequence relation  and one that is based on models only . for simplicity  we|=  as in definition 1 formulate this second notion only for the case where ¦£ = sig t1 .
definition 1  model conservative extension is a model conserva-let t1 and
tleaving the predicates inmodel ofthe interpretation of the predicates intive extension1 be tboxes.t1 ¡È tof1we say that1 iff for every modelsig  t1  ¡È t1sig oft1t 1   there exists aby modifying1
twhich can be obtained fromfixed. i	i sig t   while t
to distinguish the two versions of conservative extensions  in this section we call the one based on  |=  a deductive conservative extension.
¡¡the notion of a model conservative extension is more strict than the deductive one: if t1 ¡È t1 is a model conservative extension ofextension of t1  then it is clearly also a deductive conservative  but the converse does not hold. to see the latter  consider the tboxest
.
it is not hard to see thatextension of t1 if alc  or event1 ¡È t1alcqiis a deductive conservative  is the language for witness concepts  but it is not a model conservative extension. the stronger notion of model conservative extensions is of interest for query answering modulo ontologies. in this case  one might want to ensure that under the addition of any abox
asignature of over the signature oft1  to t1¡Ètt1¡Èa  the answers to queries  over the¡È tcoincide with those tois a model conservativet1¡Èa.
this immedialy follows if t1 is just a extension of t1  but it does not follow if t1 ¡È t1 deductive conservative extension of t1.
¡¡however  from an algorithmic viewpoint model conservative extensions are a problematic choice: we show that they are highly undecidable even in the basic description logic
alcthe following result is by a reduction from the semantic con- and therefore also in all its extensions . the proof of sequence problem in modal logic and can be found in .
theorem 1 it is ¦°1-hard to decide whether for two given
alcservative extension oftboxes t1 and tt1  the tbox.	t1 ¡È t1 is a model con-
1	decidability in alcqi
we give a tight complexity bound for deciding conservative extensions in alcqito denote the. we use |csize| to denote the length of a concept c  and |t | of a tbox t .
theorem 1 it is 1-exptime-complete to decide conservative extensions in alcqi. in the case that  there exists a witness conceptt1 ¡È t1 is not a conservative extension of t1
c of length at most 1-exponential in |t1 ¡È t1| that can be computed in time polynomial in |c|.
the lower bound can be proved exactly in the same way as the 1-exptime lower bound for conservative extensions in alc . however  the lower bounds from alc do not simply transfer to alcqi and it is necessary to walk through the proof in  and check that it also works for the case of
alcqiupper bound. it is established by devising a 1-e. in the following  we concentrate on proving thexptime algorithm that  for convenience  decides non-conservative extensions.
property.we start by reminding thatmore precisely  a tree interpretationalcqi has the tree modelis an interpretationequipped with an additional relation  i   ¦¤i ¡Á ¦¤i such that  i   ¦¤i  i  is a tree   si and ri are
disjoint for all distinct roles s and r. in alcqiis satisfiable in  every conceptationtree modelc that is satisfiable relative to a tboxof t   i.e.  a model of t that is a tree interpreta-t
¡¡¡¡. in this section  when talking of an interpretation or model of a tbox we always mean a tree interpretation.
¡¡to develop the algorithm for deciding non-conservative extensions in alcqi  we introduce a new kind of witness for non-conservativity. the new witnesses are very similar to finite tree interpretations and easier to work with than witness concepts. for a signature ¦£  let a literal type s for ¦£ be a subset of lit ¦£  := {a  a | a ¡Ê ¦£ ¡É nc} such that for each a ¡Ê ¦£ ¡É nc  a ¡Ê s iff  a /¡Ê s. a ¦£-role is a role r such that r or r  is in ¦£.
definition 1  ¦£-tree  a ¦£-tree t =  w   l o  is a finite intransitive tree  w    such that each node w ¡Ê w is labeled by a literal type l w  for ¦£  each edge  is labeled by a  is a set of leafs of
 w   .
essentially  a ¦£-tree is a finite tree interpretation equipped with an additional unary predicate o denoting a subset of the leafs. the following definition provides a way to relate ¦£trees and actual interpretations.
definition 1  ¦£-embedding  let t =  w   l o  be a ¦£tree with root¦¤i. a ¦£-embeddingw ¡Ê wf  and: ti¡ú ian interpretation with rootis an injection from wd to¡Ê
¦¤i such that
  for alland ¦£-
roles r 
  c ¡Ê l v  iff f v  ¡Ê ci  for all v ¡Ê w and c ¡Ê lit ¦£  
  then every for some
¡¡¡¡¦£-role r is in the range of f. ft :is calledt ¡ú i. ¦£-embeddable into i if there is a ¦£-embedding
the definition illustrates that ¦£-trees represent a  finite  initial part of  potentially infinite  tree interpretations. this explains the predicate o of ¦£-trees: o marks those leafs in the ¦£-tree that are not necessarily leafs in the tree interpretation i that we embed into. we can now establish ¦£-trees as witnesses for non-conservativity.
lemma 1 t1 ¡Èt1 is not a conservative extension of t1 w.r.t. ¦£ iff there exists a ¦£-tree t =  w   l o  which is ¦£embeddable into a model of t1 but not into any model of t1 ¡È t1.
the general idea behind the algorithm is as follows:	by
1
tree that is ¦£-
conjecture that there are cases in which the smallest such treelemma 1  to decide whetherextension ofmodel of t1¡Èttembeddable into a model of1  it suffices to decide whether there exists a. this is what our algorithm will do. alas  wet1 ¡È t1 is not a conservativet1  but not into any¦£-
is 1-exponential in |t1 ¡È t1|  and therefore a 1-exponential algorithm cannot simply try to construct such a tree. instead  we check the existence of the ¦£-tree by searching for certain witnesses for the existence of such a tree. before we can introduce these witnesses  which should not be confused with ¦£-trees as witnesses for non-conservativity   we need to introduce the notion of a type.
definition 1  type  let t be a tbox. we use cl t   and isto declosed under single negations and under subconcepts. anote the smallest set that contains all concepts in t type t is a subset of cl t   such that t
  for all  c ¡Ê cl t  ;
  for all
cl t  .
given an interpretation i and u ¡Ê ¦¤i  the set

is a t -type. in what follows  we will not always distinguish between the type t and the conjunction of all members of t. we now introduce a witness for the existence of a ¦£-tree that is ¦£-embeddable into a model of t1  but not into any model of t1 ¡È t1. to avoid writing sub- and superscripts  from now on we assume the input t1  t1  and ¦£ to be fixed.
definition 1  root pair  internal pair  a root pair  t u  consists of a t1-type t and a set u of t1 ¡Èt1-types. an internal pair  consists of a ¦£-role r  t1-types t  and a function u mapping each t1 ¡È t1-type to a set of t1 ¡È t1-types.
intuitively  each  root or internal  pair encodes relevant information about possible embeddings of a ¦£-tree into models of t1 and t1 ¡È t1. this is made precise by the notion of realizability.
definition 1  realizable root pair  let t =  w   l o  be a ¦£-tree. a root pair  t u  is realized by t iff
1. there exist a model i of t1 with root d ¡Ê ti and a ¦£embedding f : t ¡ú i;
1. for every t1 ¡È t1-type s  we have s ¡Ê u iff there exist a model i of t1 ¡Èt1 with root d ¡Ê si and a ¦£-embedding f : t ¡ú i.
while root pairs encode information about possible embeddings of a ¦£-tree into models of t1 and t1 ¡Èt1  internal pairs encode information about possible embeddings of a ¦£-tree into rooted submodels of models of t1 and t1 ¡È t1. in the following  if i is a  tree  interpretation and d ¡Ê ¦¤i  we write id to denote the sub-tree interpretation of i rooted at d.
definition 1  realizable internal pair  let t =  w   l o  be a ¦£-tree. an internal pair realized by t iff
  there exist a model such that
  and there is a ¦£-embedding
f : t ¡ú id;
  for all   we have iff there exist a model such that
  and there is a ¦£-embedding
	t	d.
a  root or internal  pair is realizable if there exists a ¦£-tree t which realizes it.
observe that internal pairs store information not only about the element d ¡Ê ¦¤i to which the root of t is mapped  but also comprise the type t of the predecessorand the  unique!  role r which connects. this is necessary due to the presence of inverse roles and number restrictions and bears some similarity to the double blocking technique in tableau algorithms; see . also note that the u-component of internal pairs is a function rather than a set because  intuitively  the possible types of d in models of t1 ¡È t1 depend on the type of the predecessor d in such models.
¡¡let us now describe the algorithm. by lemma 1 and definition of realizability  there exists a realizable root pair of the form  t    iff t1 ¡È t1 is not a conservative extension of t1 w.r.t. ¦£. the algorithm for deciding non-conservative extensions searches for such a root pair. the easiest case is that a root pair  t    is realized by a singleton ¦£-tree  i.e.  a ¦£-tree that consists of only a single node. this special case is tested first. if the test is not successful  we must check whether there is a root pair  t    that is realized by a non-singleton tree t =  w   l o . assume that this is the case and that the root of t is w. then each subtree of t rooted at a succesor node realizes an internal pair  with
. intuitively  this means that we can
check realization of the root pair  t    in t based on the realization of internal pairs in trees of strictly smaller height. similarly  we can check the realizability of internal pairs in a ¦£-tree based on the realizability of internal pairs in ¦£-trees of strictly smaller height. based on these observations  our algorithm repeatedly generates internal pairs that are realized by ¦£-trees of larger and larger height until all such pairs are generated. it then checks whether there exists a root pair  t    that is realizable based on the generated internal pairs. the following definition formalizes one step of the algorithm in which root pairs or new internal pairs are generated from an existing set of internal pairs.
¡¡in the following  if t is a ¦£-tree and w ¡Ê w  we write tw to denote the sub-tree of t rooted at w.
definition 1  one step  let r be a set of internal pairs. a root pair  t u   resp. internal pair   can be obtained in one step from r if there exists a ¦£-tree t =  w   l o  with root w such that
  t realizes  t u   resp.  ;
  for all  there exists an internal
 such that 
is realized by tw.
the details of our algorithm are given in figure 1  where mt1 t1 := 1 ¡Á |t1 ¡È t1| ¡Á 1¡Á|t1¡Èt1|.
intuitively  considering only a subset of ri of cardinality mt1 t1 means that we limit our attention to ¦£-trees of outdegree mt1 t1. this is justified by the following lemma.
lemma 1 if t1 ¡È t1 is not a conservative extension of t1 w.r.t. ¦£  then there exists a root pair  t    realized by a ¦£-tree t of outdegree at most mt1 t1.
it remains to be shown that each step of the algorithm can be carried out effectively and that the algorihm yields the 1exptime upper bound stated in theorem 1. we start with the former. the proof of the following lemma relies on the fact that satisfiability in alcqi relative to tboxes can be decided in exptime .
lemma 1 it can be checked in 1-exponential time  in the size of t1  t1  whether a  root or internal  pair can be obtained in one step from a set r of realizable internal pairs with |r| ¡Ü mt1 t1.
suppose tboxes t1 and t1  and a signature ¦£   sig t1  are given.
1. determine the setof root pairs realized by singleton ¦£-trees. if  then reject the input  because t1 is not satisfied in any model . ifcontains a root pair  t u  such that u =    then accept. else 
1. determine the set r1 of internal pairs realizable by singleton ¦£-trees. if r1 =    then reject the input.
else 
1. generate the sequence r1 r1 ... of sets of internal pairs such that
 
where is the set internal pairs which can be obtained from some non-empty subset of ri of cardinality not exceeding mt1 t1 in one step. this is done until
. then accept the input if there exists
a root pair  t u  with u =   which can be obtained in one step from some subset of ri of cardinality not exceeding mt1 t1. if no such root pair exists  reject the input.figure 1: algorithm for non-conservativeness w.r.t. ¦£.
the number of internal pairs is bounded double exponentially in the size ofgorithm stabilizes after at most double exponentially many|t1 ¡È t1|. therefore  the third step of the alrounds. together with lemma 1  it follows that our algorithm is a 1-exptime one.
theorem 1 the algorithm in figure 1 accepts input t1¦£  . itt1  ¦£ iff t1 ¡È t1 is not a conservative extension of t1 w.r.t. runs in 1-exponential time.
to show the upper bound on the size of witness concepts stated in theorem 1  we proceed as follows: first  we obthen this pair is realized by aserve that if the algorithm finds a realizable root pair¦£-tree of at most double expo t   -  nential depth and single exponential outdegree. second  we show how to convert such a ¦£-tree into a witness concept of three-exponential size.
1	undecidability in alcqio
we show that conservative extensions are undecidable in
alcqiodecidable tiling problem.. the proof is by a reduction of the following un-
definition 1 a domino system d =  t h v r l t b  consists of a finite set t of tiles  horizontal and vertical matching relations h v  topttiles  and¡Á t  and setsbottomr l t btiles. a so-t of right tiles  left tiles 

¦Ólution: {1 ... nto d is a triple  1} ¡Á {1  ... mn m ¦Ó  where1} ¡ún mt such that the¡Êand following hold:
1.  ¦Ó i j  ¦Ó i + 1 j   ¡Ê h  for all i   n and j ¡Ü m;
1.  ¦Ó i j  ¦Ó i j + 1   ¡Ê v   for all i ¡Ü n and j   m;
1. ¦Ó 1 j  ¡Ê l and ¦Ó n j  ¡Ê r  for all j ¡Ü m;
1. ¦Ó i 1  ¡Ê b and ¦Ó i m  ¡Ê t  for all i ¡Ü n.
using proof methods from   it is easy to show that it is undecidable whether a given domino system d has a solution. we show how to convert a domino system d into tboxes t1 and t1 such that d has a solution iff t1 ¡È t1 is not a conservative extension of t1. in particular  models of witness concepts will correspond to solutions of d.
¡¡let d =  t h v r l t b  be a domino system. the tbox t1 uses the following signature: an indidual name o  role names rx and ry  concept names top  bottom  left  and right and each element of t as a concept name. the tbox t1 contains the following:
  the roles rx  ry  and their inverses are functional:

  every position in the n ¡Á m grid is labeled with exactly one tile and the matching conditions are satisfied:

  the concepts left  right  top  bottom mark the boundaries of the grid in the expected way:
	right	.right
    right	and similarly for left  top  and bottom.
  the individual name o marks the origin:
bottom.
the tbox t1 introduces two new concept names q and p. it contains the following two concept inclusions:

the idea behind this definition of t1 is to enforce that models i of witness concepts are such that  i  there is no infinite outgoing rx/ry-path starting at oi and  ii  rx and ry commute in the connected part of i rooted at oi. this is achieved as follows: if  i  is violated  then we can find an assignment of q in i that satisfies t1. similarly  if  ii  is violated  then we can find an assignment of  q and  p in i that satisfies t1.
¡¡it can be checked that  as intended  d has a solution iff t1 ¡È t1 is not a conservative extension of t1. here  we only show how to construct a witness concept in the case that d has a solution. such a witness concept c has to ensure that for all models i of c and t1  the connected part of i rooted at oi is isomorphic to the n ¡Á m-grid. ¡û 
¡¡for every word w ¡Ê {rx ry}   denote by w the word that is obtained by reversing w and then adding ¡¤  to each symbol. let |w|r denote the number of occurrences of the symbol r in w. now  c is the conjunction of
.top
and for every w ¡Ê {rx ry}  such that |w|rx   n and |w|ry   m  the concept
¡û 
where 1 k if 1 k. it is readily checked that c enforces an n¡Ám-grid as required.
theorem 1 in alcqio  conservative extensions are undecidable.
note that the theorem applies even to the case where ¦£ = sig t1  and we allow  as the only form of number restriction.
1	conclusion
although the high computational complexity suggests that efficient tools for deciding conservative extensions will be difficult to attain  our results and techniques lay theoretical foundations that are important for practical applications of conservative extensions. these could be based on approximations  semi-decision procedures  and on syntactic restrictions in a normative framework such as . finally  transitive roles are a main ingredient of dls underlying owl-dl. it remains an important open problem to investigate conservative extensions for dls containing transitive roles and role hierarchies.
