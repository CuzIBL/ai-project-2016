
different methodologies have been employed to solve the multi-sensor multi-target detection problem in a variety of scenarios. in this paper  we devise a time-step optimal algorithm for this problem when all but a few parameters of the sensor/target system are unknown.  using the concept of covering graph  we find an optimum solution for a single sensor  which is extended to multiple sensors by a tagging operation. both covering graph and tagging are novel concepts  developed in the context of the detection problem for the first time  and bring a mathematical elegance to its solution. furthermore  an implementation of the resulting algorithm is found to perform better than other notable approaches. the strong theoretical foundation  combined with the practical efficacy of the algorithm  makes it a very attractive solution to the problem. 
1. introduction 
　the problem of multi-sensor target tracking has attracted a significant amount of interest over the past few years. the papers  jung and sukhatme  1  and parker are especially relevant in the context of this paper as representative algorithms; we appraise these in specific scenarios in a subsequent section. other pertinent approaches include a scheme for delegating and withdrawing robots to and from targets through the alliance architecture  parker 1   a strategy for maximizing coverage with mobile sensors  sameera and sukhatme 1  and a method for sensor management in a distributed tracking setup  horling et. al  1 . there is also a large volume of work in the context of using a network of static sensors to guide robots pursuing invaders  schenato et. al 1 . a more detailed citation of literature is avoided here due to strict page limits.  
　our first objective in this paper is to analyze performance of existing solutions  and reformulate target detection as an optimization problem. subsequently  we introduce the notion of covering graph to optimize the detections of a single sensor. extending this technique to multiple sensors is in general nontrivial  involving searching over a discrete search space  which is accomplished by a tagging operation.  these ideas are crucial in transforming a continuous search space into a discrete one  enabling us to find an optimal solution from among several disparate ones. in contrast almost all existing solutions employ some heuristic to determine a good solution in an uncountable search space. finally  we test our algorithm against two others whose parameters are tweaked by hand to perform optimally. nonetheless  our results show that our algorithm is able to perform better than compared approaches across a number of test cases. 
1. analysis of existing algorithms 
　in this section we examine the performance of two existing representative algorithms  those of  parker 1  and  sukhatme 1 .  
 1 parker's algorithm 
　　fig.1 shows a set of targets  depicted by small unshaded squares  moving counter clockwise about a circle. the shaded squares represent sensors; one sensor  closest to the circle  is repelled away by the sensor-target repulsive force referred to in  parker 1 . also  every target is outside the sensing range of every other sensor. it is evident that optimal detection will occur if instead of getting repelled away  the former sensor is attracted to the inside of the circle.
1 sukhatme-jung algorithm 
　　fig 1 shows an environment partitioned into five regions by landmarks represented by the diagonal black lines. a sensor s is initially stationed in region 1. targets are located along each edge of the dotted square abcd . they move in the direction indicated by the arrows cyclically with uniform velocity. the dotted circle is the fov  field of vision  region of a nonexistent sensor placed at its center o ; it is meant to touch the sides of the square  but  offset for clarity. it is clear that optimal detection takes place at 
o . due to the uniform velocity of sensor motion the urgency of all regions will be the same  causing the sensor to either remain in region 1 or switch continually from one region to an adjacent one.  hence the algorithm is unable to find the optimal positiono .

fig. 1 a pathological run of parker's algorithm. the shaded squares are the sensors  the unshaded ones are the targets moving in a circle. note the repulsion of the sensor closest to the circle 
　both these algorithms perform very well in many scenarios   such as the ones cited in their sources ; the pathological runs shown above are exceptions to the rule.  parker's algorithm fails when target-sensor and sensor-sensor forces give conflicting results  and sukhatme-jung's becomes suboptimal due to the artificial division of the environment area into regions. the presence of these exceptions leads us to ask the question: can the  performance be improved further  
 	 	 	 	 

fig. 1 pathological run of sukhatme-jung algorithm. the black lines are landmarks  the dark circle s is the sensor  and the dotted lines indicate target motion paths. 
1. problem statement  
we introduce the following definitions: 
1. e is a bounded region in the plane  called the environment over which sensors and targets move. the precise shape of e is of little significance in what follows  hence will be assumed to be an aa square.
1. s t   {s  t   s  t ..  s  t } is the snapshot of the set of 
	1	n
sensors   at time instant   . each sensor has fov f  a.
1. t  t   {t1  t  t1  t .. tm  t }is likewise the snapshot of the set of targets at time instant t .
　given s 1  as a set of points within e   and t  1  as a set of points on the edges of e . at every time instant t  1 1..  every target moves with a maximum speed of vmax in an unknown direction. a sensor has a maximal speed of smax . determine positions of s t  over time in such a way that the number of targets detected by at least one sensor is maximized. if there are several possible optimal solutions  we prefer those which maximize the number of detections by precisely one sensor. this last requirement minimizes redundant detections. 
1 preliminaries  
if p is a point on the plane and r  1   definecr  p 
 resp. dr  p    as the circle  resp. closed disk  of radius 

r centered at p ; also  define dr  p  as the exterior 
of dr  p  . define c si   as the circle of radius smax centered at si  called the sensor circle of si   and c tj   a circle of radius vmax centered at t j  called the target circle of tj  .  define d si   and d tj   correspondingly as sensor and target disks. note that df  si  is the fov disk of si .
given a set p of points on the plane  define hull p  as the vertex set of the convex hull of p .
　we call the ordered pair  s t1   t t1    the configuration of the sensor-target system at time instant t1   and any set of consecutive configurations a configuration sequence. define a configuration sequence to be feasible if the following condition holds: for every pair of consecutive time instants  t' t'1 in the sequence  | si  t' 1  si  t'  | smax for every sensor and | t j  t' 1  t j  t'  | vmax for every target; we will be interested only in feasible sequences hereafter. we define the number of k detections  resp. k  detections    of the configuration as the number of targets detected by precisely  resp. at least  k sensors  and call k the order of detection.  with these definitions  the problem seeks to maximize 1+ detections  preferring maximal 1-detections. 
1 solving a set of quadratic constraints 
　this section develops a technique to be used later in section 1 to assign sensor positions in a multi-sensor system. given two disjoint sets of targets  tinc {t1 t1 .. tk } and texc {tk 1 tk 1  ..t l}  we are asked to determine whether we can place a sensor that covers all targets in tinc and none of those in texc . the problem reduces to determining if there exists a sensor position p for which 
|| p	ti ||	f  	ti	tinc  	 	 	 	 	 	 	 	 	 	 	 1a  
|| p	ti ||	f  	ti	texc  	 	         	 	   	 	 	 	 1b  
has a solution .  1  has a solution if and only if the inter-
section i	df  ti 	d f  ti is non-null; in 
	ti tinc	i	exc
this case  every point in i is a solution. further  suppose that  1a  has a solution  but with the additional constraint that || p tk 1 || f   it does not. this means that every circle of radius f which covers tinc also covers t k1 . in such 

a case  t k 1 is said to be dependent on tinc ; in particular  if t k 1 falls within hull tinc     it is always dependent on tinc .
1 methodology 
1single sensor system 
covering graph 
　consider the configuration  s1 t1   t t1    . we say that a point p d s1   is a covering point with respect to s1   of a set t' t of targets  currently within d f  s1    iff no target in t can escape out of c f  p  in one time step.  observe that if p is a covering point of target ti  t'   then 
p  dd  ti    where d f vmax .  in the same scenario we say that every pair of targets in t ' is simultaneously coverable. note that two targets are simultaneously coverable iff the  euclidean  distance between them is at most 1d . define the covering graph cg s t  t  t   of the configuration as a graph whose nodes are covered targets  and whose edges connect a pair of simultaneously coverable targets. from above  targets in t ' will form a clique in the covering graph. further define a maximal clique in cg s t  t  t   as one with the maximal number of vertices  noting that this could be non-unique. 
　 it is easy to see that moving to a covering point of a maximal clique ensures that a maximum number of targets will be detected at the next time instant. we formalize this idea as follows: define the covering function cf : d s1   n which takes a point in d s1  to the number of targets that a sensor at that point will definitely cover in the next time step. the maximal values of the covering function will be attained at the points of intersection of c f  ti    c f  tj     where ti  j  d f  s1    giving us 
an algorithm to move s1 to  a covering center of a maximal clique. s1 visits each of the points of intersection of the form above  and moves to that which gives maximal detections; should there be no intersections  it moves to a covering point of any target it detects. this ensures a maximal number of detections in the next time step  and the algo-
　　　　　　　　　　　1 rithm runs in o m   time where m is the number of targets. 
number of cliques 
　in this section we estimate the maximal number of cliques that can exist in df  s1  . a clique in 
cg s1  t  t1  t   has all its targets lying within a circle of radius d f vmax as a result  the separation between two cliques is at least d . consequently  the number of cliques in df  s1  is at most the size of maximum set of points m that can be chosen in df  s1  such that the distance between any every point in m   with its nearest neighbors in m    is d . such an m can be constructed as follows. choose a point p1  d f  s1 t   ; draw the circle 
c' cd  p1     and mark off the vertices of a regular hexagon inscribed in it .  repeat the construction at every pi  1 i 1 until no more points within df  s1  can be 
found. this leads to tiling of df  s1  by regular hexagons of side d   leading to o   f   1   hexagons and clique centers. d
1 multi-sensor system 
　　in this section we use ideas from previous sections to obtain an optimal solution to tracking with n sensors. the sensors share knowledge of the targets they see at every time instant  enabling each to build the global covering graph..   
taglists and taglist types 
　to optimize 1+ detections is a nontrivial problem in general. we assume for the purpose that every target ti is tagged with a list of sensors  ti.taglist . also  de-
finet.taglist{ i ti.taglist }. the point of introduci t
ing taglists- as claimed in section 1- is to convert  a continuous search space into a discrete one. when we say ti is tagged with a list s' s   we try to see if ti can be covered by the sensors in s' ; if this is feasible  then sensor positions can be assigned to sensors in s' by the algorithm in section 1  or else deemed impossible by the same. we formalize this in the following definitions. 
　given  s t1     an instance of t  t1  1 .taglist is said to be feasible iff for every sensor the intersection 

rd  t  d  t   if jf j
   cover t.taglist s   cover t.taglist s   j i j i
is nonempty. here cover t.taglist  si   is the set of all tar-
gets covered by si .  we say that a point p	d s   is a
i
covering point with respect to si   of a set t't of targets  currently detected by at least one sensor in the system  iff no target in t can escape out of c f    p in one time step.  the covering graph and covering function of a sensor are defined correspondingly. 
　for a single sensor  optimality of detection hinged on the assurance that a certain number of targets would be seen the next time step. this assurance is  formalized by the idea of a proper taglist in a multi-sensor system. a feasible instance of t  t1  1 .taglist is said to be proper iff for every sensor si  t    targets in cover t.taglist  si   are vertices of a clique in cg si  t1   t  t1    . it is difficult to construct proper taglists directly ; it is easier to take a shortcut through taglists which satisfy  the hull property  defined next. 
　an instance of  t  t1  1 .taglist is said to satisfy the hull property if and only if the following criterion holds for every subset t ' of targets in it. if every target in t ' is tagged with sensor si   then every target located within  hull t '  is also tagged with si . note that if an instance of 
t  t1  1 .taglist is proper  it also satisfies the hull property; the converse need not be true. we will use this property to generate proper taglists and later to compute the complexity of the multi-sensor system.  
finding the optimal solution 
　the findopt routine finds the sensor assignment that guarantees maximal 1+ detections in the next time step. 
findopt s t 1  t  t1   
1. generate an initial proper taglist current fort  t1   . compute n1 current  and 

n1  current    which denote the number of 1+ and 
1 detections in current respectively.
1. for each proper taglist next remaining do 
	a.	if	n1  next 	n1  current  or 
	  n1  next 	n1  current  and
	n1  next 	n1 current    	then 
	current	next
1. assign 	sensor 	positions 	corresponding 	to 
current using the method in section 1. 
finding all proper taglists 
　　it remains to specify how we find proper taglists. note that only sensors with overlapping fov regions pose a difficulty  for otherwise we run the single-sensor algorithm on each sensor. the brute force approach would be to generate all possible taglists  check whether each is proper  and pass 
　　　　　　　　　　　　　　　　　　　　km it to findopt   at the expense of having an  o 1    k  1 algorithm. this is too expensive a solution in time. instead  we generate all taglists satisfying the convex hull property  which in general takes time sub-exponential in m   and check whether each is proper. this is formalized below. 
if d f  si    d f  s j      for every pair of distinct 
sensors  the only proper taglist we generate corresponds to maximal clique detections by each sensor.  if the sensors move in such a way that their fov overlaps  we degenerate to the weakly overlapping case covered below. 
	we 	call 	s' t1  	{s  t1    s1  t1   ..  sk  t1  }	s t1  
strongly overlapping iff d f  si  t1    . suppose i s'
that t ' t1   is the set of targets detected by s'   and further that t '' t1    t ' t1   is detected by more than one sensor.  suppose that qi  t1   is the set of cliques of 
cg si  t1   t ' t1    1  k .
   we generate the space of proper taglist instances for  t ' t1   as follows. construct an iterator i1 that traverses the space q1  t1    q1  t1   .. qk  t1   . at every point of the traversal of i1   do the following. tag every target that appears in one or more cliques with all sensors in whose fov it falls. suppose that t ''' is that subset of t '' which is currently detected by more than one sensor in s' . construct iterator i 1 which goes over all possible combinations of sensor assignments to targets in hull t '''  . each of these satisfies the hull property.  output the resulting taglist if and only if it is proper. 
	we call	s' t1  	weakly overlapping iff for every  
si	s' there exists at least one s j	s': j	i such that 
d f	i	d f  s j    .  following the same notation as 
in the previous case  we generate the space of proper taglist instances as follows. i1 has the same meaning as before. it is then possible to write s' t as 
s' t1    s1 ' t1    s1 ' t1    sr ' t1     where sensors in each si ' t1   are strongly overlapping. correspondingly r
t ''' is expressible as a union  t ' ' 'i  t1   . construct itera-
i 1
tor i 1 which goes over all possible sensor assignments to r
targets in  hull t '''i  t1      the cartesian product of i 1 hulls; output the resulting taglist iff it is proper. 
complexity analysis
　　a typical worst case scenario is one in which s t  is weakly overlapping.  in this case i 1  runs over 
o   df  1n   clique combinations  so the algorithm is exponential in the number of overlapping sensors. suppose that there are k :1 k n hulls for i 1 to consider  and that the i -th hull encloses  or has on its boundary  mi targets in all  and m'i vertices. suppose further that all m targets are currently 
　　　　　　　　　　　m'i detected. then i 1 takes o n iterations to traverse its space  and each iteration takes polynomial time in m in for computing the hulls  verifying hull points  and so on. note that m'i  o mi    o m  except in rare cases  so that the run-time is sub-exponential  typically polynomial  in the number of detected targets. 
　　in essence while the algorithm is exponential in number of overlapping sensors it is typically polynomial in the number of targets due to tags for only the targets that form the convex hull for a set of targets that constitute a clique. in steady state when sensors have diverged to maximize detections  the number of overlapping sensors is generally small  and this is specifically so when the area of e  is considerably greater than the total area covered by the sensors. indeed when the total area covered by sensors is greater than or equal to area of e maximizing detections is trivially achieved. 
1. simulation and results 
1 implementation specifics 
　the optimal algorithm above  hereafter called opt  as well as the representative algorithms of parker and sukhatme-jung   have been implemented on an intel p1 machine running fedora core 1 using the g++ compiler and qt for graphical simulation. the specifics of each implementation are given below. 
opt algorithm 
　　this is essentially the same as the multi-sensor version presented in section 1 with the restriction that  when opt runs for 1 second  it terminates and outputs the most optimal solution generated thus far.  this restriction ensures that opt takes nearly the same time to output its solution as its adversaries.  
parker algorithm 
   we implemented the a-commt version of the parker algorithm. we set the sensing range of every sensor to the fov of opt sensors during comparison; predictive tracking and communication ranges do not matter for simulation. in addition  we tweaked the values of dri and doi   corresponding to cut-off points for sensor-sensor and sensor-target forces   until they gave optimal performance. specifically  we changed do1 and dr1 from one test case to another  observing that 1do1 do1.1do1 and 
1do1do1 gave best results; likewise did 
1dr1 1dr1 . furthermore  we scaled the weighted force vectors to an equal degree for all sensors. 
sukhatme-jung algorithm 
   we partitioned the square environment into a crossshaped  topological map. we tweaked the urgency and availability thresholds from one test case to the next; in particular  1  availability  1 and 1 urgency 1 give maximal detections.  the control parameter d was varied likewise across test cases till maximal detections were obtained; specifically  when the fov or the number of sensors was decreased   we gave a small value to d    between 1 and 1   and large otherwise  between 1 and 1.  
1 tabulated results 
　　the environment is the square  1    1  . five sensors  each of fov 1  are randomly placed in e   each with smax  1 . targets emanate from five sources placed randomly on the edges of e every time instant. the speed of each target is uniformly distributed in  1  and angle uniformly distributed on  1  . in tables 1  the rows indicate the order of the detection as a percentage rounded to the nearest integer  and the columns indicate the algorithm whose performance is noted. tables 1 and 1 show readings of the form a|b  to be interpreted as follows. in table 1  a corresponds to the case of 1 sensors  and b to that of 1 sensors  as indicated in its caption. table 1 is read similarly.
1  performance graphs 
　fig. 1a  resp. 1b   shows how the number of 1+ detections varies with fov resp. number of sensors  for each algorithm. the performance gain of opt over the earlier ones is evident for various sensor and fov combinations as it gives consistently higher 1+ detections  despite the manual tweaking of its adversaries to achieve optimal performance.
detection opt parker sukhatme-
jung 1 1 1 1 1 1 1 1 1 1 1 1 1+ 1 1 1 table 1: table of base case 
detection opt parker sukhatme-
jung 1 1 1 1 1 1 1 1 1 1 1 1 1+ 1 1 1 table 1: for cases: number of sensors increased to 1 | decreased to 
1
detection opt parker sukhatme-
jung 1 1 1 1 1 1 1 1 1 1 1 1 1+ 1 1 1 table 1: for cases: increasing fov to 1|decreasing to 1


1. conclusions
　　a novel algorithm for multi-sensor based multi target detection has been formulated and analyzed in terms of its computational complexity. comparison with other approaches in literature verifies its efficacy across diverse scenarios. such a multi-sensor algorithm finds applications in border patrol  guarding of secured areas  search and rescue and warehouse surveillance. 
