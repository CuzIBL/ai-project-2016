 
in a recent study selman and kautz proposed a method  called horn approximation  for speeding up inference in propositional knowledge bases. their technique is based on the compilation of a propositional formula into a pair of 
horn formulae: a horn greatest lower bound  glb  and a horn least upper bound  lub . in this paper we address two questions that have been only marginally addressed so far: 1  what is the semantics of the horn approximations  1  what is the exact complexity of finding horn approximations  we obtain semantical as well as computational results. the major results of the former kind are: horn glbs are closely related to models of the circumscription; 
reasoning wrt the horn l u b can be mapped into classical reasoning. the major results of the latter kind are: finding a horn glb is  mildly  harder than solving the original inference problem; finding the horn lub is a search problem that cannot be parallelized. we believe that our results provide useful criteria that may help finding a knowledge compilation policy. 
1 	introduction 
in a recent study  selman and kautz  1; kautz and 
selman  1  selman and kautz proposed a method  called horn approximation  for speeding up inference in propositional knowledge bases. propositional inference is the problem of checking whether  holds  where  are propositional formulae. the start-
ing point of their technique stems from the fact that inference for general propositional formulae is co-npcomplete -hence polynomially unfeasible- while it is doable in polynomial time when  is a horn formula. the fascinating question they address is the following: is it possible to compile a propositional formula  into 
    work supported by the esprit basic research action n.1-compulog and by the progetto finalizzato sistemi informatici e calcolo parallelo of the cnr  italian research council . 
	cadoli 	1 


selman and kautz's proposal is to approximate inference wrt a propositional formula  by using its horn glbs and lubs. in this way inference could be unsound or incomplete  but it is anyway possible to spend more time and use a general inference procedure to determine the answer directly from the original formula. the general inference procedure could still use the approximations to prune its search space  see  selman and kautz  1  page 1  . it is also important to notice that horn glbs and lubs can be computed off-line  hence this form of approximate reasoning is actually a compilation. 
table 1 summarizes the major properties of horn 
glbs and lubs stated in  selman and kautz  1; kautz and selman  1 . the four columns refer respectively to: 
  logical relation wrt   i. e. what kind of inference can be performed using this approximation  ; 
  size of the formula wrt the size 
  number of possible approximations of this kind; 
  computational complexity of the search problem of finding the approximation. 

table 1: some properties of horn glbs and lubs. 
horn approximations have two computational problems: 
1  computing them is an np-hard task and 1  due to its exponential size  it may be impossible to store the horn l u b . about the first aspect selman and kautz notice that since approximations could be computed off-line  the computational cost of finding them will be amortized over the total set of subsequent queries to the knowledge base. w i t h respect to the second aspect  they propose in  kautz and selman  1  a technique for  compressing  the horn l u b into a  quasi- equivalent formula. due to reasons related to circuit complexity theory  it is not possible to apply the technique in general  see  kautz and selman  1  for further details . 
   other computational properties of horn approximations are studied in  greiner and schuurmans  1; roth  1 . 
in this paper we address two important questions that have not been addressed so far: 
1. is it possible to describe horn approximations with a semantics that does not rely on the syntactic notion of horn clause  
1. what is the exact complexity of finding horn approximations  
1 	automated reasoning 
an answer to the first question shows the exact meaning of the approximate answers. an answer to the second question tells in which cases it is reasonable -from the computational point of view- to use horn approximations. 
we obtain two different kinds of results: 
semantical 
  horn glbs of  are closely related to models of the circumscription of 
  reasoning wrt horn glbs is the same as rea-soning by counterexamples using only minimal models; 
  while skeptical reasoning wrt the horn glbs of a formula is the same as ordinary reasoning wrt brave reasoning wrt the horn glbs of is the same as reasoning wrt circ 
  compiling more knowledge does not always give better horn glbs; 
  reasoning wrt the horn lub can be mapped into classical reasoning; 
  the horn lub of  is related to cwa computational 
  finding a horn glb is  mildly  harder than solving the original inference problem; 
  reasoning wrt the horn lub is exactly as hard as solving the original inference problem; 
  finding a horn ub is a search problem that cannot be parallelized. 
we believe that our results provide useful criteria that may help finding a knowledge compilation policy. in particular  we show that an interesting tradeoff seems to emerge between the computation done during the compilation time and the computation done during the query answering time. 
the structure of the paper is as follows: in section 1 and 1 we study horn glbs and lubs  respectively; we discuss our results in section 1. 

	be a propositional formula and 	a 
	the minimum model of 	is minimal 
theorem 1 implies that if we have a horn g l b of then we can obtain in linear time  see  dowling and gallier  1   a minimal model of  more technically  the theorem shows a polynomial reduction from the search problem of finding a minimal model of to the search problem of finding a horn g l b of the present author analyzed in  cadoli  1  the computational complexity of the search problem of finding a 
minimal model of a propositional formula. one of the results of that paper is that finding a minimal model of is hard  using many-one reductions  with 
             it is important to hard problems are in a precise 
sense computationally harder than np-complete or co-
 1 . we recall that the problem of holds is co-np-complete. 
   as shown in  cadoli  1   hardness of finding a minimal model holds even if a model of is known. this fact can be compared with a consideration in  selman and kautz  1  theorem l   :  is satis satisfiable  hence finding a horn glb is np-hard. we can now say that even if we know that  is satisfiable and have one of its models in hand  finding a 
horn glb is still hard. we recall that finding a model  not necessarily minimal  of a propositional formula is per se an np-hard task. 
c o r o l l a r y 1 finding a horn glb of a propositional hard. this holds even if a 
we notice that the above corollary gives us just a lower bound. it is reasonable to ask how easy is to find a horn glb  i. e. to give an upper bound to the problem. in 
 selman and kautz  1l  an algorithm for computing a horn glb of a formula is shown. the algorithm performs an exponential number of polynomial steps. it is possible to show that a horn g l b can be found in polynomial time by a deterministic turing machine with access to an np oracle  i. e. to prove that the problem is in the class . this means that we only need a polynomial number of queries to the g l b in order to  pay off  the overhead of the knowledge compilation. 
f r o m m i n i m a l models t o g l b s 
we now show that if we have a minimal model m of a 
then we can easily build a very good approx-
imation of a horn g l b of in particular we show that we can build in linear time a horn lb of  whose minimum model is m. this result allows us to perform  in 
                 is the class of decision problems that can be computed by a polynomial-time deterministic machine which can use for free an oracle  or subroutine  that answers a set of np-complete queries  e. g. satisfiability checks  whose cardinality is bound by a logarithmic function. we refer the reader to  johnson  1  for a thorough description of all the complexity classes that are cited in this paper. 
1
¡¡¡¡ both np-complete and co-np-complete problems can be solved with a single call to an oracle in np. 
	cadoli 	1 


1 	automated reasoning 
man  1  in general it is not possible to store efficiently the horn l u b of in particular the size of can be exponential in the size of and this seems to be independent on the representation used for   see  kautz and selman  1  for further details . as a consequence any method for efficiently representing the horn l u b is incomplete. in  selman and kautz  1  page 1  the authors propose to approximate the horn l u b with horn upper bounds of limited length. this idea is used in 
 greiner and schuurmans  1   where horn ubs with a limited number of horn clauses are studied. in subsection 1 we investigate about this idea and analyze its computational properties. other computational properties of horn lubs are addressed in subsection 1. in subsection 1 we make a brief semantical remark. 
	cadoli 	1 

1 	a semantical remark 
equation  1  gives a sound and complete characterization of inference wrt  in terms of classical propositional inference. in this subsection we make a brief remark about the relation existing between horn lubs and closed-world assumption  reiter  1 . 
observation 1 let m be the minimum model of 
m is the intersection of all the minimal models of therefore m is a model of 	iff the closed-world assumption 	is consistent. 
we notice that may be consistent even i f i s non-horn: the cwa of is consistent. relations between horn lubs and closed-world reasoning are implicit in the works  borgida and etherington  1; selman and kautz  1l . 
1 	discussion 
the computational results that we have seen in sections 1 and 1 show that when we deal with knowledge compilation there exists an interesting tradeoff between computation during compile time  off-line  and computation during query-answering time  on-line . 
¡¡in section 1 we have seen that the computational effort of finding a horn glb is justified only if a significant number of queries to it will be done. in particular we have seen that the compilation is more expensive than a set of query answering tasks. the size of such a set has a lower bound which is a function logarithmic in the size of the input and an upper bound which is a function polynomial in the size of the input. 
¡¡in section 1 we have obtained similar results  showing that high-quality horn ubs need a significant computational effort. 
since compilation causes anyway loss of information 
 either soundness or completeness   the computational effort spent in the compilation must be compared to the quality of the inference obtained. it is an open issue to find an adequate formal framework for comparing the two aspects. 
acknowledgments 
i am grateful to h. kautz and b. selman for fruitful discussions on their method. i had interesting discussions also with l. c. aiello  m. lenzerini  e. omodeo and m. schaerf  who also read previous versions of the paper. thanks to d. schuurmans for sending me a preliminary version of his paper. 
