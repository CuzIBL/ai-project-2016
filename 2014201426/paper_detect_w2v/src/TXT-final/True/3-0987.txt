
in this paper  we propose a new approach to establish singleton arc consistency  sac  on constraint networks. while the principle of existing sac algorithms involves performing a breadth-first search up to a depth equal to 1  the principle of the two algorithms introduced in this paper involves performing several runs of a greedy search  where at each step  arc consistency is maintained . it is then an original illustration of applying inference  i.e. establishing singleton arc consistency  by search. using a greedy search allows benefiting from the incrementality of arc consistency  learning relevant information from conflicts and  potentially finding solution s  during the inference process. furthermore  both space and time complexities are quite competitive.
1 introduction
inference and search are two categories of techniques for processing constraints  dechter  1 . on the one hand  inference is used to transform a problem into an equivalent form which is either directly used to show the satisfiability or unsatisfiability of the problem  or simpler to be handled by a search algorithm. inference aims at modifying a constraint network by employing structural methods such as variable elimination and tree clustering  or filtering methods based on properties such as arc consistency and path consistency. on the other hand  search is used to traverse the space delimited by the domains of all variables of the problem. search can be systematic and complete by relying on breadth-first or depth-first exploration with backtracking  or stochastic and incomplete by relying on greedy exploration and randomized heuristics.
　one of the most popular systematic search algorithms to solve instances of the constraint satisfaction problem  csp  is called mac  sabin and freuder  1 . mac interleaves inference and search since at each step of a depth-first exploration with backtracking  a local consistency called arc consistency is maintained. however  since the introduction of stronger consistencies such as max-restricted path consistency  debruyne and bessiere ` 1a  and singleton arc consistency  debruyne and bessiere ` 1b   one issue has been the practical interest of utilizing such consistencies  instead of arc consistency  before or during search.
　there is a recent focus about singleton consistencies  and more particularly about sac  singleton arc consistency   as illustrated by recent works of  debruyne and bessiere  1b;` prosser et al.  1; bartak  1; bessiere` and debruyne  1; 1 . a constraint network is singleton arc consistent iff any singleton check does not show unsatisfiability  i.e.  iff after performing any variable assignment  enforcing arc consistency on the resulting network does not entail a domain wipe-out.
　in this paper  we propose two new algorithms  denoted sac-1 and sac-1+  to establish singleton arc consistency. while sac algorithms introduced so far perform a breadthfirst search up to a depth equal to 1  these two new algorithms perform several runs of a greedy search  where at each step  arc consistency is maintained . however  unlike sac-1+  sac-1 does not record the context of performed runs.
　we have identified several advantages to adopt this approach:
  extra space requirement is limited 
  both algorithms benefit from the incrementality of arc consistency 
  using a greedy search enables learning relevant information from conflicts 
  it is possible to find solution s  while establishing the consistency 
  time complexity of both algorithms is quite competitive.
　more precisely  the good space complexity of both algorithms allows to use them on large constraint networks. in particular  sac-1 admits the space complexity of the underlying arc consistency algorithm. next  when a greedy search maintaining arc consistency is used  we naturally benefit from the incrementality of arc consistency  i.e.  the fact that iteratively establishing arc consistency on a more and more reduced search space is less penalizing than repeatedly establishing it on the original search space. besides  when a deadend is encountered during a greedy search  a no-good can be recorded and/or the origin of the failure taken into account. also  some solutions may be found by the algorithm. finally  if the instance contains a large under-constrained part  a very efficient time complexity can be expected.
1 preliminaries
a constraint network consists of a finite set of variables such that each variable x has an associated domain dom x  denoting the set of values allowed for x  and a finite set of constraints such that each constraint c has an associated relation rel c  denoting the set of tuples allowed for the variables vars c  involved in c. a solution to a constraint network is an assignment of values to all the variables such that all the constraints are satisfied. a constraint network is said to be satisfiable if it admits at least a solution.
　the constraint satisfaction problem  csp   whose task is to determine whether or not a given constraint network is satisfiable  is np-complete. a constraint network is also called csp instance. to solve a csp instance  a depth-first search algorithm with backtracking can be applied  where at each step of the search  a variable assignment is performed followed by a filtering process called constraint propagation. usually  constraint propagation algorithms  which are based on some constraint network properties such as arc consistency  remove some values which can not occur in any solution.
definition 1 let p =  x  c  be a constraint network  c （
c  x （ vars c  and a （ dom x .  x a  is said to be arc consistent wrt c iff there exists a support of  x a  in c  i.e.  a tuple t （ rel c  such that t x  = a. p is said to be arc consistent iff  x （ x   dom x  1=   and  c （ c   x （ vars c    a （ dom x    x a  is arc consistent wrt c.
　ac p  will denote the constraint network obtained after enforcing arc consistency  ac  on a given constraint network p. ac p  is such that all values of p that are not arc consistent have been removed. note that a value will usually refer to a pair  x a  with x （ x and a （ dom x . if there is a variable with an empty domain in ac p   denoted ac p  = 〕  then p is clearly unsatisfiable. p|s with
s   {x = a|x （ x … a （ dom x } is the constraint network1 obtained from p by restricting the domain of x to the singleton {a} for any variable assignment x = a （ s.
definition 1 let p =  x  c  be a constraint network  x （
x and a （ dom x .  x a  is said to be singleton arc consistent iff ac p|x=a  1= 〕. p is said to be singleton arc consistent iff  x （ x   dom x  1=   and  a （ dom x  
 x a  is singleton arc consistent.
　x will be called the domain of p =  x  c . we will note  x a  （ p  respectively   x a  （/ p  iff x （ x and a （ dom x   respectively  a 1（ dom x  .
1 overview of sac algorithms
the first algorithm that has been proposed to establish singleton arc consistency is called sac-1  debruyne and bessiere ` 1b . the principle of this algorithm is to check the singleton arc consistency of all variables whenever a value is detected singleton arc inconsistent and then removed. worstcase space and time complexities of sac-1 are respectively o md  and o mn1  where n denotes the number of variables  d the size of the largest domain and m the number of constraints.
　a second algorithm  denoted sac-1  has been proposed by  bartak  1 . the idea is to check  again  the singleton arc consistency of a value  y  b  after the removal of a value  x a  only if  x a  does not support  y  b   i.e.  does not belong to ac p|y=b . hence  this algorithm allows avoiding usefulness singleton checks by recording  for each value  the set of values supported by it. as expected and supported by the experimentation of  bartak  1   sac-1 offers a significant improvement of practical time efficiency with respect to sac-1. worst-case space and time complexities of sac-1 are respectively o n1  and o mn1 .
　 bessiere` and debruyne  1  have remarked that sac-1
　does not present any improvement in terms of worst-case time complexity because whenever the singleton arc consistency of a value  x a  must be checked again  one has to perform the arc consistency enforcement on p|x=a from scratch. in other words  sac-1 does not exploit the incrementality of arc consistency. an arc consistency algorithm is said incremental if its worst-case time complexity is the same when it is applied one time on a given network p and when it is applied up to nd times on p where  between two consecutive executions  at least one value has been deleted. all current arc consistency algorithms are incremental. to benefit from the incrementality of arc consistency   bessiere` and debruyne  1; 1  have proposed a new algorithm  sac-opt  that duplicates the original constraint network into nd dedicated constraint networks  one for each value  x a  of the instance. simply  whenever the singleton consistency of a value  x a  must be checked  the dedicated constraint network is used. worst-case space and time complexities of sac-opt are respectively o mnd1  and o mnd1  which is the best time complexity that can be expected from an algorithm enforcing singleton arc consistency  bessiere and debruyne  1`  .
　finally  from the observation that a space complexity in o mnd1  prevents the use of sac-opt on large constraint networks   bessiere` and debruyne  1  have proposed another algorithm called sac-sds which represents a trade-off between time and space. with respect to each value  only the domain  called sac-support  is recorded as well as a propagation list used for arc consistency. in return  the data structures required to establish arc consistency are no more dedicated but shared. an experimental study on random instances have highlighted the good performance of this algorithm. worst-case space and time complexities of sac-sds are respectively o n1  and o mnd1 .
1 sac-1
all algorithms previously mentioned involve performing a breadth-first search up to a depth equal to 1. each branch  of size 1  of this search corresponds to check the singleton arc consistency of a value  and allows removing this value if an inconsistency is found  after establishing arc consistency . one alternative is to check the singleton arc consistency of a value in the continuity of previous checks. in other words  we can try to build less branches of greater sizes using a greedy search  where at each step  arc consistency is maintained . as long as  for a current branch  no inconsistency is found  we try to extend it. when an inconsistency if found  either the branch is of size 1 and a value is detected inconsistent  or all but last variable assignments correspond to singleton arc consistent values. this last statement relies on proposition 1.
proposition 1 let p =  x  c  be a constraint network and let s   {x = a|x （ x … a （ dom x }. if ac p|s  1= 〕 then any pair  x a  such that x （ x and dom x  = {a} in
ac p|s  is singleton arc consistent.
　proof. if ac p|s  1= 〕 then  clearly any element x = a （ s is singleton arc consistent. it is a consequence of the monotony of arc consistency. one should observe that we can also find some values  y  b  such that y （ x and dom y   = {b} in ac p|s  with y = b 1（ s. these values are also clearly singleton arc consistent. 
　as mentioned in the proof above  some values can be detected singleton arc consistent while checking the singleton arc consistency of another one s . proposition 1 can then be seen as a generalization of property 1 in  chmeiss and sais  1   and is also related to the exploitation of singletonvalued variables in  sabin and freuder  1 .
　although the primary goal of our approach was to exploit incrementality of arc consistency  other nice features have been observed. indeed  using a greedy search  one may find solutions and one can learn from conflicts by recording nogoods or weighting failure culprits.
　below  we give the description of a first algorithm that uses a greedy search in order to establish singleton arc consistency. the description is given in the context of using an underlying coarse-grained arc consistency algorithm  e.g. ac1  mackworth  1  or ac1/1  lecoutre et al.  1   with a variable-oriented propagation scheme.
　first  let us introduce some notations. if p =  x  c   then ac p q  with q   x means enforcing arc consistency on p from the given propagation set q. for a description of ac  see  for instance  the function propagateac in  bessiere` and debruyne  1 . qsac is the set of values whose singleton arc consistency must be checked. a branch corresponds to a set of values that have been assigned. for any set of values s   { x a  | x （ x … a （ dom x }  vars s  = {x| x a  （ s}. finally  an instruction of the form pbefore ○ p should not be systematically considered as a duplication of the problem. most of the time  it correspond to store or restore the domain of a network  and the structures of the underlying arc consistency algorithm .
　algorithm 1 starts by enforcing arc consistency on the given network. then  all values are put in the structure qsac and in order to check their singleton arc consistency  successive branches are built. the process continues until a fix-point is reached. algorithm 1 allows building a branch by performing successive variable assignments while maintaining arc consistency  line 1 . when an inconsistency is detected for a non empty branch  one has to put back the last value in
qsac  line 1  since we have no information about the singleton arc consistency or inconsistency of this value. if the branch is empty  we have to manage the removal of a value and to reestablish arc consistency  lines 1 to 1 . note that algorithm 1 buildbranch  
1: br ○   1: pbefore ○ p
1: consistent ○ true
1: repeat
1:	pick and delete  x a  （ qsac s.t. x 1（ vars br 
1: p ○ ac p|x=a {x}  1: if p 1= 〕 then 1: add  x a  to br
1:	else
1:	consistent ○ false
1: if br 1=   then 1: add  x a  to qsac
1:	end if
1: until not consistent ‥ vars qsac    vars br  =  
1: p ○ pbefore 1: if br =   then
1:	remove a from dom x 
1:	p ○ ac p {x} 
1:	qsac ○ qsac { y b | y b  （ dom pbefore  dom p }
1: end if

algorithm 1 sac-1 p =  x c  : csp 1: p ○ ac p x  
1: repeat
1:	pbefore ○ p
1:	qsac ○ { x a  | x （ x
1:	while qsac 1=   do
1:	buildbranch  
1: until p = pbefore… a （ dom x }no inconsistency is detected when a solution is found or when there is no way of extending the current branch. finally  in order to maximally benefit from the incrementality of arc consistency  we have to build branches as long as possible. hence  although not indicated in the algorithm   it is important to select first values  x a  （ qsac such that a （ dom x .
proposition 1 sac-1 is a correct algorithm with a worstcase space complexity in o md  and a time complexity in o bmd1  where b denotes the number of branches built by sac-1.
　proof. correctness results from proposition 1. if sac1 uses an optimal coarse-grained arc consistency algorithm such as ac1  then the overall space complexity is o md  since space complexity of ac1 is o md   the data structure qsac is o nd  and each branch built is o n . the overall time complexity is o bmd1  since  due to incrementality  each branch built by the algorithm is o md1 . 
　remark that b must include the  empty  branches that correspond to the detection of inconsistent sac values. with respect to already singleton arc consistent constraint networks  corollary 1 indicates that sac-1 can outperform sac-opt and sac-sds  admitting then a time complexity in o mnd1  . more interestingly  it suggests that sac-1 can outperform sac-opt and sac-sds on structured  not necessarily singleton arc consistent  instances that contain large under-constrained parts as can be expected in real-world applications.
corollary 1 sac-1 admits a worst-case time complexity in
o mn1  but  when applied to an already singleton arc consistent constraint network  sac-1 admits a best-case1 time complexity in o md1  and a worst-case time complexity in o mnd1 .
proof. in the worst-case   hence  we obtain
o mn1 . when applied to an already singleton arc consistent constraint network  the best and worst cases correspond to branches of maximum size and of size 1  1 consistent assignment followed by an inconsistent one   respectively. we have then respectively b = d  all branches delivering a solution  and b = nd branches. 
1 sac-1+
　it is possible to improve the behaviour of the algorithm sac-1 by recording the domain of the constraint networks obtained after each greedy run  that is to say  for each branch. when a value is removed  it is then possible to determine which previously built branches must be reconsidered. indeed  if a removed value does not support a branch  i.e. does not belong to the domain associated with the branch  all values of the branch remain singleton arc consistent. on the other hand  if it supports a branch  we have to verify that the branch still remains valid by re-establishing arc consistency from the recorded domain. when a branch is no more valid  we have to delete it. in summary  sac-1+ exploits incrementality as sac-sds does.
　in order to manage domain and propagation of constraint networks corresponding to branches  we consider two arrays denoted p and q. for a given branch br  p br  corresponds to the constraint network associated with the branch br  in fact  we only need to record the domain of the constraint network  whereas q br  contains the variables that have lost some value s  and that should be considered when re-establishing arc consistency.
　after enforcing arc consistency on the given network  algorithm 1 builds successive branches by calling the function buildbranch+. once the singleton arc consistency of all values of qsac have been tested  we have to check the validity of the branches that have been built and recorded in brs by a call to the function checkbranches since some values may have been deleted after a branch has been built. for each branch br  we re-establish arc consistency on p br   line 1 of algorithm 1  and in case of a domain wipe-out  we delete this branch and update qsac  lines 1 and 1 .
　algorithm 1 differs from algorithm 1 on two aspects. first  we need to record the domain of the constraint network corresponding to the branch that is built  line 1  and add this branch to brs  line 1 . note that if the last variable assignment entails a domain wipe-out  pstore is not updated  line 1 . for the implementation  p br  can be directly set  backtracking one step if necessary  without any duplication of domain. second  after re-establishing arc consistency  line 1   all values that have been removed including the singleton arc inconsistent one  line 1  must be taken into account in order algorithm 1 update set : set of values  1: qsac ○ qsac   set
1: for each br （ brs do
1:	for each  x a  （ set do 1:	if  x a  （ p br  then
1: remove  x a  from p br  1: add x to q br 
1:	endif
algorithm 1 buildbranch+  
1: br ○   1: pbefore ○ p
1: consistent ○ true
1: repeat
1:	pick and delete  x a  （ qsac s.t. x 1（ vars br 
1: p ○ ac p|x=a {x}  1: if p 1= 〕 then 1: add  x a  to br 1: pstore ○ p
1:	else
1:	consistent ○ false
1: if br 1=   then 1: add  x a  to qsac
1:	end if
1: until not consistent ‥ vars qsac    vars br  =  
1: p ○ pbefore 1: if br =   then
1:	remove a from dom x 
1:	p ○ ac p {x} 
1:	update { y b | y b  （ dom pbefore    dom p } 
1: else 1: p br  ○ pstore
1:	add br to brs
1: end if
algorithm 1 checkbranches   1: for each branch br （ brs do
1: p br  ○ ac p br  q br   1: if p br  = 〕 then 1: qsac ○ qsac“ br
1:	remove br from brs
1:	end if
1: end for
algorithm 1 sac-1+ p =  x  c  : csp 
1: p ○ ac p x  
1: brs ○  
1: qsac ○ { x a  | x （ x … a （ dom x }
1: while qsac 1=   do 1:	while qsac 1=   do 1:	buildbranch+  
1:	checkbranches   1: end while
to update the state of all branches  line 1 . for each branch  line 1 of algorithm 1   we have to remove these values  line 1  and update the propagation list  line 1 .
proposition 1 sac-1+ is a correct algorithm with a space complexity in o bmaxnd + md  and a time complexity in o bmd1  where bmax denotes the maximum number of branches recorded by sac-1+ and b denotes the number of times a branch is built or checked by sac-1+.
　proof. correctness comes from proposition 1 and the fact that once  the singleton arc consistency of all values have been checked and some branches recorded  one verify that the property still holds by calling checkbranches. in addition to the space requirement in o md  of the underlying optimal coarse-grained arc consistency algorithm  it is necessary to record the domain of the constraint networks corresponding to the valid branches that have been built. as recording a domain is in o nd   we obtain o bmaxnd + md . 
　remark that corollary 1 also holds for sac-1+. however  one should be optimistic about the average time complexity of this algorithm since it avoids building new branches when unnecessary.
1 experiments
to prove the practical interest of the algorithms introduced in this paper  we have implemented them as well as the algorithms sac-1 and sac-sds  the latter being considered as the most current efficient sac algorithm  bessiere` and debruyne  1 . we have used ac1  lecoutre et al.  1  as an underlying arc consistency algorithms. we have conducted an experimentation on a pc pentium iv 1ghz 1mo under linux with respect to different classes of random  academic and real-world instances. performances have been measured in terms of the number of singleton arc consistency checks  #scks  and the cpu time in seconds  cpu . for information  is also given  for each instance  the number  #〜  of values removed by any sac algorithm  when #〜=1  it means that the instance is initially singleton arc consistent .
　first  we have experimented the two classes of random binary csp instances introduced in  bessiere` and debruyne  1 . however  due to lack of space  we only present the figure depicting results about the class  1 1 t  corresponding to sparse constraint networks with 1 variables  1 values per domain and a density of 1  i.e.  1 constraints . t denotes the constraint tightness  i.e.  the proportion of unallowed tuples in the relations associated with the constraints.
　in figure 1  we can observe that when t   1  the beginning of a phase transition   sac-1 and sac-1+ have the same behaviour and outperform sac-1 and sac-sds. in the phase transition  sac-1 and sac-sds respectively become the worst and the best approaches. for complete networks of the class  1 1 t   similar results  not depicted here  are obtained  and at the pic of difficulty  sac-sds  1 s  is about three times more efficient than sac-1  1 s  and sac1  1 s  and two times more efficient than sac-1+  1 s . it is not really a surprise since the generated instances have no structure  which corresponds to the worst-case for sac-1 and sac-1+ as the average size of the branches that are built  at the critical point  is quite small  「 1 .

tightness  t 
figure 1: mean cpu time on 1 random instances of class  1 1 t  at each value of t
next  we have dealt with the following academic instances:
  two chessboard coloration instances  denoted cc-1 and cc-1  involving quaternary constraints 
  two golomb ruler instances  denoted gr-1 and gr-1  involving binary and ternary instances 
  two prime queen attacking instances  denoted qa-1 and qa-1  involving only binary constraints.
　table 1 shows that sac-1  and especially sac-1+  have on some instances a much better behaviour than sac-1 and sac-sds. roughly speaking  it can explained by the fact that such instances have some regular structure.
　next  we have tested real-world instances  taken from the fullrlfap archive  which contains instances of radio link frequency assignment problems. table 1 shows the results obtained on some representative instances. as expected  on already singleton arc consistent instances  scen1  graph1   a significant improvement is obtained. but it is also true for the other instances as they contain large under-constrained parts. it clearly appears that  on such structured instances  using sac-1 and sac-1+ is the best approach  especially as sac-sds has been out of memory on some instances.
　it is interesting to note that sac-1 and sac-1+ can be much faster than sac-1 and sac-sds even if the number of singleton checks  see for example  cc-1 and scen1  is similar. it results from the exploitation of the incrementality of arc consistency  when building branches . another point
sac-1sac-sdssac-1sac-1+cc-1
 #〜=1 cpu1111#scks11cc-1
 #〜=1 cpu1111#scks11cpu1111#scks11gr-1  #〜=1 cpu1111#scks11qa-1
 #〜=1 cpu11.1.1#scks11qa-1
 #〜=1 cpu1111#scks11table 1: academic instances
sac-1sac-sdssac-1sac-1+scen1
 #〜=1 cpu111  1 1  1 #scks11scen1
 #〜=1 cpu111  1 1#scks11graph1
 #〜=1 cpu1111#scks11graph1
 #〜=1 cpu1-11#scks1-1graph1
 #〜=1 cpu1-1  1 1  1 #scks1-1table 1: rlfap instances
to be mentioned is that some solutions  enclosed in brackets near cpu time  have been found during the inference process on some instances. for example  1 solutions have been found on scen1 by sac-1 and sac-1+.
　finally  we have experimented some realistic scheduling problems. we have selected 1 representative instances from the set of 1 job shop instances proposed by  sadeh and fox  1 . it is quite interesting to note  see table 1  that sac1 and sac-1+ have found solution s  to these two instances quite more efficiently than mac  when run to find one solution . it can be explained by the restart aspect of both algorithms.
sac-1sac-sdssac-1sac-1+macjs-1
 #〜=1 cpu111  1 1  1 1
-#scks11js-1
 #〜=1 cpu111  1 1  1 1
-#scks11table 1: job-shop instances
1 conclusion
establishing singleton arc consistency can be justified if it is effective  allows some filtering . on the contrary  applying a sac algorithm on a constraint network that is already singleton arc consistent is a problem as it may involve a large waste of time. the two algorithms  sac-1 and sac-1+  introduced in this paper combine inference and search and can be understood as an answer to this problem. indeed  when an instance is under-constrained or  more generally  contains easy large parts  as can be expected in real-world applications  exploiting search during inference can pay off. it has been confirmed by our experimentation. besides  one should have noted the limited space requirement of both algorithms which makes them applicable on large constraint networks.
　we believe that this approach deserves further investigation in order to determine if it could be applied to other local consistencies and  to what extent  maintaining sac during search could be a viable alternative to mac.
acknowledgments
this paper has been supported by the cnrs  the  programme cocoa de la region＞ nord/pas-de-calais  and by the  iut de lens .
