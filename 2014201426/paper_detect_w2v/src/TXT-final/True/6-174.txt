 
in this paper we consider the solution of scheduling problems that are inherently over-subscribed. in such problems  there are always more tasks to execute within a given time frame than available resource capacity will allow  and hence decisions must be made about which tasks should be included in the schedule and which should be excluded. we adopt a controlled  iterative repair search approach  and focus on improving the results of an initial priority-driven solution generation procedure. central to our approach is a new retraction heuristic  termed max-flexibility  which is responsible for identifying which tasks to  temporarily  retract from the schedule for reassignment in an effort to incorporate additional tasks into the schedule. the max-flexibility heuristic chooses those tasks that have maximum flexibility for assignment within their feasible windows. we empirically evaluate the performance of max-flexibility using problem data and the basic scheduling procedure from a fielded airlift mission scheduling application. we show that it produces better improvement results than two contention-based retraction heuristics  including a variant of min-conflictslminton et al.  1   with significantly less search and computational cost. 
1 introduction 
many scheduling domains present problems that are oversubscribed; problems where there are more tasks to be performed over a given time frame than can be feasibly accommodated by available resources. in such problems  it is inevitably necessary to exclude some tasks from the schedule. hence  a basic objective is to maximize resource utilization  or somewhat equivalently to accommodate as many tasks as possible . however  in many cases  the situation is further complicated. input tasks are often differentiated by priorty  implying that some tasks are more important than others and if necessary should be included at the expense of others. in the particular domain that motivates this work  for example  task priorities must be rigidly respected. though it is theoretically possible to trade one higher priority task for a set of lower priority tasks in some circumstances  this is the exception rather than the rule. thus  the objective is to accommodate as many tasks as possible within this constraint. 
　oversubscribed problems present an interesting challenge for constraint-directed search procedures. oversubscribed problems are not particularly well suited to formulation within a standard backtracking search framework. hence the application of constructive approaches depends heavily on the ability of search control heuristics to anticipate resource interactions. repair-based approaches  on the other hand  tend to operate myopically through infeasible intermediate states in hopes of arriving at a better final feasible state. their effectiveness in the presence of global constraints  such as enforcement of priority  will similarly rely on the ability of search heuristics to effectively focus the repair process. 
　in this paper  we take a repair-based search perspective of the problem and focus on locally improving an initial solution. we assume that the initial solution generator is prioritydriven  and define a controlled  task swapping search procedure for finding and exploiting opportunities to rearrange currently scheduled tasks and incorporate additional tasks that were excluded from the initial solution. to direct the repair process we introduce a novel retraction heuristic  max-
flexibility  for choosing which tasks to  temporarily  retract to make room for additional  lower priority tasks. maxflexibility chooses based on a simple measure of the relative temporal flexibility that alternative competing tasks have for feasible re-assignment elsewhere in the schedule. 
　we evaluate the efficacy of this approach using data and the basic scheduling procedure obtained from a realworld  multi-mission scheduling problem: the day-to-day airlift scheduling problem faced by the usaf air mobility command  amc . we compare the performance of maxflexibility to a variant of the min-conflicts heuristic  minton et ai  1   adapted to serve as a retraction heuristic  and another more-informed contention-based heuristic. 
1 basic allocation procedure 
without loss of generality the amc scheduling problem can be characterized abstractly as follows: 
  a set t of tasks  or missions  are submitted for execution. each task i ♀ t has an earliest pickup time 

1 	scheduling 

a latest delivery time a pickup location  
a dropoff location desti  a duration di   determined by origi and desti  and a priority pri 
  a set res of resources  or air wings  are available for assignment to missions. each resource r  has capacity   corresponding to the number of contracted aircraft for that wing . 
  each task i has an associated set  of feasible resources  or air wings   any of which can be assigned to carry out i. any given task i requires 1 unit of capacity  i.e.  one aircraft  of the resource r that is assigned to perform it. 
  each resource r has a designated location home . for a given task i  each resource r requires a positioning time to travel from homer to and a de-positioning time to travel from desti back to homer. 
　a schedule is a feasible assignment of missions to wings. to be feasible  each task i must be scheduled to execute within its interval  and for each resource r and 
time point /  typically  the problem is over-subscribed and only a subset of tasks in t can be feasibly accommodated. if all tasks cannot be scheduled  preference is given to higher priority tasks. tasks that cannot 

　both the scale and continuous  dynamic nature of the amc scheduling problem effectively preclude the use of systematic solution procedures that can guarantee any sort of maximal accommodation of the tasks in t. the approach adopted within the amc allocator application instead focuses on quickly obtaining a good baseline solution  and then providing a number of tools for the end user to selectively relax problem constraints to incorporate as many additional  initially unassignable  tasks as possible  becker and smith  1; kramer and smith  1 . 
　the basic allocation procedure used within the amc allocator constructs a schedule incrementally; the set of unassigncd input missions is first prioritized  and then missions are successively inserted into the current partial scheduling in priority order. the prioritization scheme utilized in the initial step considers the assigned priority pr i  of each mission i as its dominant ordering criterion. in case of missions of equal priority  secondary criteria give preference to missions with earlier possible start times and smaller overall slack. a given mission i is inserted into the schedule via a search of alternative options. more specifically  for each r r i  a set of candidate execution intervals is generated and evaluated  and the highest ranked alternative is selected as the assignment. in the search procedure's basic configuration  only feasible intervals are generated and the evaluation function emphasizes choices that minimize  and execute i as 
early as possible. if a mission cannot be feasibly assigned  it is marked as unassignable. 
　this scheduling process allows for assignment of individual missions on the order of milliseconds  with a two to three week window of approximately a thousand missions assignable in a few seconds. 
　since it is generally expected that several or more missions will be unable to be assigned during the first pass allocation process  the user can direct the system to automatically explore the space of constraint relaxation options on a given mission  or can do this on a more interactive basis. available relaxation options include delaying a mission beyond its due date  over-allocating beyond contracted capacity on a wing  bumping a lower priority mission  or some combination of these basic options. specifically tailored evaluation functions are used when searching in the space of relaxed constraints. for instance  when searching for delay options  the dominant optimization criterion is minimizing tardiness.1 
1 	improving on the initial solution 
the quality of any schedule produced by the above greedy procedure will be a function in large part of its prioritization heuristic. this heuristic dictates the assignment possibilities that will be available to a given task i at the time it is inserted into the schedule  and consequently which tasks will ulitmately end up as unassignable. as just indicated  this heuristic gives over-riding preference to higher priority tasks. this bias in fact reflects the basic scheduling policy in the amc application domain. 
　at the same time  strict relance on this ordering heuristic can obviously lead to sub-optimal solutions. it is quite possible that some  rearrangement  of the assignments of higher priority tasks could enable the feasible insertion of additional  lower priority tasks. since  in practice  the end user may spend non-trivial amounts of time analyzing and negotiating constraint relaxation options to enable incorporation of additional unassignable missions  it makes sense to consider techniques for productively broadening the search performed by this basic procedure. 
　two broad classes of approaches have been pursued in the literature. one set of approaches  e.g.  ljoslin and clements  1; bresina  1; cicirello and smith  1   focuses on exploring a  neighborhood  around the trajectory of the base heuristic. in our context  this would correspond to repeatedly perturbing the task order in some manner and reapplying the basic search procedure. another set of approaches have been termed iterative repair  e.g.   minton et al  1; zweben et al.  1; rabideau et ai  1    wherein an initial base solution is progressively revised  and hopefully improved  over time. in our context  this would correspond to repeated retraction and  rc assertion of subsets of task assignments. both sets of approaches have natural anytime properties. one interesting requirement in the current context  however  is that we would like to guarantee that higher priority missions won't be supplanted by lower priority missions. in the case of iterative re-solving approaches  enforcement of this constraint would seem possible only in a rather 
   'a separate search procedure designed to identify and exploit opportunities for reclaiming resource capacity by combining  or  merging   two or more roundtrip missions into one is also provided  but this capability is orthogonal to the techniques discussed in the current paper. 


1 	scheduling 

figure 1: insertunassignabletasks procedure 
1 	retraction heuristics 
in designing a retraction heuristic  our general goal is to retract the task assignment that posseses the greatest potential for reassignment. one simple estimate of this potential is the scheduling flexibility provided by a task's feasible execution interval. more precisely  let  represent the amount of time available for executing task  . then a simple  resource-indepedent measure of flexibility is 

　however  recall that di is not the total amount of time that the supporting resource must be allocated for. dt only accounts for the time required to execute the task; it does not account for the time to position and deposition the resource for task execution. the total time that a given resource r 
must be allocated for is 
given that the resources being allocated are generally scheduled near to capacity  a worst-case  resource-dependent measure offlexibilty is  


1 	computational analysis 
the genesis of the max-flexibility heuristic and the missionswap algorithm took place while experimenting with the canonical data set used to test and demonstrate the amc allocator. this data set  which we'll refer to as the tutorial data set  consists of 1 actual missions  1 operations  and 1 actual air wings  and represents a two to three week horizon of amc airlift and air refueling missions. 
　using the basic allocation procedure the system is able to feasibly allocate all but two of the 1 missions in the tutorial data set. for demonstration purposes those two missions are usually added to the schedule by over-allocating a given wing. 
　it turned out that this particular data set was not as resource over-constrained as we had thought. application of the mission-swap algorithm with even a random retraction heuristic is able to schedule the two unassignable missions in a few seconds. 
1 	experimental design 
for our experiments we generated data sets using the tutorial data set as a seed: five data sets of twenty problems each were generated  with the wing capacities randomly reduced 
　　　for each data set  the basic allocation procedure was employed to quickly schedule as many missions as possible in priority order. the number of unassignable missions was recorded  and then insertunassignabletasks was executed on the set of unassignable missions. then run-time  nodes searched  number of times missionswap was called   and final number of unassignable missions were recorded. for each run this process was repeated with min-conflicts  mincontention  max-flexibility and random choice as the retraction heuristic  choosetasktoretract  in figure1 . 
experiments were run on a 1ghz pentium iv pc with 
1 gb of ram  running windows 1. the scheduling engine is implemented in allegro common lisp 1. 
1 	results 
the results of our experiments are shown in figures 1  1  and 1. as expected  as the random degree of overallocation was increased from 1% to 1%  the number of initial unassignable missions increased  as did the numbers of unassignables after application of insertunassignabletasks. over all problem sets the baseline random-choice heuristic 

the use of measures of temporal flexibility and resource contention as guidance for variable and value ordering has a long history in the field of constraint-directed scheduling  sadeh  1; smith and cheng  1; beck  1   although for the most part use has been in constructive search contexts. our work  alternatively  seeks to exploit these measures in an iter-

figure 1: computational cost 
was able to assign 1% of the unassignable missions. minconflicts  min-contention and max-fiexibility were able to assign 1%  1%  and 1%  respectively. 
　what is most striking  though  are the results shown in figures five and six. while max-flexibility achieved somewhat better results in solution quality  it did so while searching far less and reaching a solution far more quickly than any of the competing heuristics. 
1 	discussion 
our preliminary results show that in the face of a resource constrained scheduling problem  the decision of what tasks to temporarily retract in order admit more tasks into the schedule may be delegated to an extremely simple and cheap retraction heuristic: max-flexibility. in order for this heuristic to be effective it should retract tasks that have a high likelihood of reassignment elsewhere within their feasible windows. 
　it is somewhat counter-intuitive  then  that max-flexibility is able to perform so well  based only on task flexibility to reschedule  irrespective of other competing tasks in the schedule. min-contention performance approaches that of maxflexibility  but only at significant additional cost - approximately triple the run-time on average in our experiments. 
our conjecture is that as a schedule becomes more and ative repair search context  to determine which tasks to retract and reassign. 
　work in manufacturing scheduling domains has addressed a broad range of priority based scheduling problems  morton and pentico  1   and some of this work  e.g.   smith  1   discusses heuristic techniques for schedule repair. however  a broad assumption that underlies most of this work is that due dates are relaxable and the objective is to minimize tardiness. as such  these are not over-subscribed problems in the same sense as the type of problem considered here. 
　research in the domain of space mission planning and scheduling  alternatively  has focused on the solution of oversubscribed problems  e.g.   minton et al.  1; johnston and miller  1; rabideau et al  1  . generally this research is aimed at solving the single mission  single resource problem  e.g.  the observing schedule for a space telescope .  zweben et al.1 's shuttle ground processing domain is one exception  wherein both multiple resources and multicapacity resources are considered. the approach employed here is repair-based  and simple heuristics are employed to mitigate resource constraint violations. it is not clear how useful this technique would be  however  in addressing problems where maintaining task priority is crucial. 
　recent work in the area of scheduling observations on multiple earth satellites comes closest to tackling the same issues which we address: multiple resources  multi-capacity resources  fixed time windows  and mission priority.  pemberton  1  proposes a solution to preserving priority in the 

1 	scheduling 

face of over-constrained resources by segmenting the problem into priority classes  solving them individually  and recombining them.  frank et al  1  propose a contentionbased heuristic for use in solving a very similar problem within an iterative sampling framework. however  no experimental analysis is given. 
finally  work in constraint satisfaction problem solving 
 csp  has explored ideas similar to those introduced in this paper.  verfaillie and schiex  1  describe a repair procedure similar to missionswap for non-disruptively resolving conflicts in dynamic csps  actually motivated by previous work on a continuous  single-resource scheduling problem .  prcstwich  1  utilizes a  largest domain first  retraction heuristic to drive an incomplete backtracking procedure. 
1 	conclusions 
we have presented a novel retraction heuristic  maxflexibility  and shown its applicability to a multi-mission airlift scheduling problem. this heuristic is much faster and less memory intensive than min-confiicts and min-contention  and provides better solution quality. we suggest that maxflexibility as used in a generic task swapping algorithm like mission-swap may generally be applicable to resourceconstrained scheduling problems with fixed time windows. this method is particularly suitable to dynamic scheduling domains  where an existing schedule must be preserved as tasks change and new ones are added. 
　it is possible that with further study and experimentation a more informed retraction heuristic than max-flexibility might be found. it is likely  though  that such a heuristic would be much more expensive  and that a heuristic that is fairly smart  but very cheap  may be the best choice of all. 
acknowledgements 
the work reported in this paper was sponsored in part by the department of defense advanced research projects agency  darpa  and the us air force research laboratory under contracts f1-1 and f1-1  by the usaf air mobility command under subcontract 1 to northrop-grumman corporation  and by the cmu robotics institute. 
