 
recent research has shown the promise of using propositional reasoning and search to solve al planning problems. in this paper  we further explore this area by applying integer programming to solve ai planning problems. the application of integer programming to ai planning has a potentially significant advantage  as it allows quite naturally for the incorporation of numerical constraints and objectives into the planning domain. moreover  the application of integer programming to ai planning addresses one of the challenges in propositional reasoning posed by kautz and selman  who conjectured that the principal technique used to solve integer programs-the linear programming  lp  relaxation-is not useful when applied to propositional search. 
we discuss various ip formulations for the class of planning problems based on strips-style planning operators. our main objective is to show that a carefully chosen ip formulation significantly improves the  strength  of the lp relaxation  and that the resultant lps are useful in solving the ip and the associated planning problems. our results clearly show the importance of choosing the  right  representation  and more generally the promise of using integer programming techniques in the ai planning domain. 
1 	introduction 
although some of the application areas addressed in the fields of artificial intelligence  ai  and operations research  or  are very similar  e.g.  planning  scheduling   the techniques that are used to solve these problems are oftentimes substantially different. therefore  it seems only natural that recent research in the interface between ai and or has focused on comparing the relative merits of the techniques and tools that are used in these areas. in this paper  we further explore the interface between ai and or by applying integer programming 
1 	challenge papers  ip   which has a rich history in or  to a classical ai problem  ai planning. 
　the possibility of using or techniques in ai planning has not received much attention so far. bylander 1  uses linear programming as a heuristic for noninear planning; bockmayr and dimopoulos  de-
scribe domain-dependent ip models for specific problem domains; and kautz and walser   who use ip formulations for planning problems with resources  action costs  and complex objective functions. however  theirs is the only work we know of besides ours. 
　one potential advantage of using integer programming for ai planning is that ip formulations quite naturally allow the incorporation of numeric constraints and objectives into planning domains for example  see kautz and walser  . the use of numerical constraints and objectives is not addressed adequately in most existing ai planning systems  but it is critical in real-world planning  nau et al  1 . 
　one difficulty indeveloping integer programming formulations for ai planning is that the performance of the resulting ip will depend critically on how ai planning problems are formulated as integer programs. the purpose of this paper is therefore to develop good domainindependent ip formulations for ai planning. in particular  we discuss various ip formulations for the class of action-based planning problems using strips-style operators. our main objective is to show that a carefully chosen ip formulation significantly improves the  strength  of the lp relaxation  so that it can provide useful guidance in solving the problem. 
　our ip formulations are principally derived from work by kautz and selman   which showed that planning problems can be efficiently solved by general propositional satifiablity algorithms. as such  the use of integer programming also addresses one of the challenges posed in the paper  ten challenges in propositional reasoning and search   by selman et al. . specifically  the challenge that we address concerns the development of ip models and methods for propositional reasoning. selman et al. mention that the basic technique used to solve integer programs-that is  the linear programming  lp  relaxation of the problem-does not appear to be useful for satisfiability problems  since it usually 

sets all variables  modulo unit propagation  to the value   and therefore does not guide the selection of variables in solving the problem. 
our results are as follows: 
  in our experiments  ip formulations derived directly from sat encodings proposed by kautz and selman 
 performed rather poorly-but an alternative ip formulation that we call the  state-change formulation  was competitive with blackbox using the systematic satz solver  kautz and selman  1   in terms of the number of nodes expanded in the search space. since the brandling rule that is used in systematic satisfiability algorithms is an important factor in reducing the size of the search tree  this indicates that the lp relaxation does guide the selection of variables in solving the problem. 
  like graphplan-based planners such as blackbox  state-change formulation is guaranteed to find plans that have optimal values for the number of time steps in the plan. however  this formulation also takes into account the number of actions required by the plans  i.e.  the plan length ; and the number of actions obtained using the state-change ip formulation was usually much less than the number of actions in the plans obtained by blackbox. 
　the organization of this paper is as follows. in section 1  we discuss the various ip formulations of the planning problem. next  section 1 provides experimental results for these formulations  and a comparison with the systematic satisfiability solver. we conclude in section 1 with a brief discussion of issues that arise in using ip techniques  and of plans for future work. 
1 	integer programming formulations 
the most effective current approach for solving general integer programs involves the use of branch and bound employing a linear programming  lp  relaxation. thus  the key to the effectiveness of using integer programming to solve planning problems will lie in the effectiveness of the lp relaxation in improving the underlying tree search. the lp relaxation is typically solved at every node in the search tree. search can be terminated at a node 1  if lp relaxation value indicates that further search could only uncover solutions with objective function values inferior to the best known  1  if the lp is infeasible  which in turn implies the integer program is infeasible and 1  if the lp yields an integer solution. since for planning problems  the objective function is only of secondary consideration  1  will have little value. on the other hand 1  and 1  can be quite useful in improving search performance for planning problems. in particular  if the initial lp solves integer then no search is necessary. another role the lp relaxation plays is that it provides information useful in deciding which variables to branch on. 
　a key issue in the performance of integer programming algorithms is the  strength  of the formulation. in general  there can be many equivalent integer programming 
formulations for a given problem. one formulation is stronger than another if the feasible region of the lp relaxation more closely approximates the integer program  see  wolsey  1  for more details on this concept . stronger formulations are more likely to yield integer solutions and produce objective function values closer to the values of the integer program. 
　in the remainder of this section we discuss two ip formulations for strips-style planning problems. in order to express these formulations  we first introduce the following sets: 
  f  the set of fluents  that is  the set of all instantiated predicates; 
  a  the set of actions  that is  the set of all instantiated operators; 
   represents the set of fluents that hold initially; 
   represents the set of fluents that have to to hold in the goal state. 
we assume that the number of time steps in the plan  t  is given. furthermore  we introduce the sets 
   represents the set of actions which have fluent / as a precondition; 
   represents the set of actions which have fluent / as an add effect; 
   represents the set of actions that delete fluent /. 
1 	satplan-based ip formulations 
initially  our ip formulations were motivated by the well known satplan encodings  as discussed in  kautz and selman  1 . in satplan  the problem of determining whether a plan exists  given a fixed number of time steps  is expressed as a satisfiability problem. 
　it is well known that satisfiability problems can be expressed as integer linear programs   see for instance  blair et a/.  1  or  hooker  1  . usually  this is done by converting the clauses in the cnf representation of the satisfiability problem to 1 linear inequalities. for instance  the clause 

is equivalent to the 1 inequality 

our first formulation consisted of this conversion for the satplan encodings that are based on graphplan  blum and furst  1   i.e.  we allow for parallel actions and the propagation of fluents using the  no-op  operator. the resulting formulation is summarized as follows. 
variables for all   we have fluent variables  which are defined as 

	vossen  ball  lotem  and nau 	1 

for all  we have action variables  which are defined as 

we remark that the action variables include the  noop  maintain operators from graphplan for each time step and fact  which simply has that fact both as a precondition and as an add effect.  no-op  actions are necessary to propagate the fluent values. 
constraints the constraints are separated into different classes  which can be outlined as follows: 
  initial/goal state constraints these con-straints set the requirements on the initial and final period  i.e. 

  precondition constraints actions should imply their preconditions  which is expressed as follows. 

  backward chaining constraints backward chaining is expressed as 

  exclusiveness constraints actions conflict if one deletes a precondition or add effect of the other. the exclusiveness of conflicting actions is expressed as 

	for all 	    . . .   t   and all a  a! for which there 
exist such that  and add f. 
objective function the objective function was set to minimize the number of actions in the plan. it should be noted that in theory we could have chosen any objective function  since the constraints guarantee a feasible solution. in practice however  the choice of an objective function can significantly impact performance. 
in addition  we made the following two modifications in the formulation. first of all  we used the notion of clique inequalities to strengthen the formulation. the basic idea behind this is that the inequalities can be replaced by 
. this leads to a 
formulation which is not only more compact but also stronger  in the sense that the fractional solution 
 is feasible in the first set of inequalities  but 
1 	challenge papers 
not in the second. it should be noted that the ability to detect clique inequalities is available in most of today's commercial solvers. 
　secondly  we did not restrict all variables to be 1 integers. specifically  the integrality of the fluent variables  was relaxed  that is  the constraints  {1} 
were replaced by . this is possible because 
the integrality of these variables is implied by the integrality of the action variables. we remark that as a consequence  none of the fluent variables will be selected in the branch and bound tree. 
1 	an alternative formulation 
we now describe an alternative formulation of the planning problem  which we shall refer to as the  statechange formulation . the differences with respect to the formulation described in the previous section are twofold. first of all  the original fluent variables are  compiled away  and suitably defined  state change  variables are introduced instead. as we will see  this results in a stronger representation of the exclusion constraints. secondly  we more explicitly restrict the possible propagation of fluents through  no-op -actions  so as to reduce the number of equivalent feasible solutions. 
　before giving this formulation  we again first define the variables. the action variables are the same as before  
i.e.  

for all  now however  the  no-op  actions are not included  but represented separately by variables    t . 
　in order to express the possible state changes  we introduce auxiliary variables which are defined logically as 

informally   = 1 if and only if an action is executed in period i that has / as a precondition but does not delete it. we note that the execution of such an action at a given time step implicitly asserts that the value fluent / is propagated. similarly   if and only if an action is executed in period i that has / both as a precondition and a delete effect.  if and only if an action is executed in period i that has / as an add effect but not as a precondition. 
the logical interpretation of these variables is repre-

sented in the ip formulation by the following constraints: 	1 	e x p e r i m e n t a l r e s u l t s 


that have / both as a precondition and as an add effect are mutually exclusive. as a consequence these variables can in fact be substituted out  although for reasons of clarity we shall not do so here. the remaining exclusiveness constraints can easily be expressed in terms of the auxiliary variables  by stating that is mutually exclusive with . however  in order to strengthen the formulation we furthermore assert that  is mutually exclusive with  and 
 . informally  this means that a fluent can only be propagated at a time step if no action that adds it is 
executed. the resulting constraints are as follows. 

for all 
　the backward chaining requirements can also be expressed in terms of the auxiliary variables. since  all auxiliary variable that assert the precondition of a fact 
/ at a certain time step  and  are mutually exclusive  we have the following 
constraint 

　the objective function is again set to minimize the number of actions. also  the integrality requirement of the auxiliary variables variables was again relaxed  as it is implied by the integrality of the action variables. 
we tested the ip formulations on a variety of planning problems from the blackbox software distribution  and compared the results with those obtained by blackbox using the systematic satz solver. the integer programs were solved using cplex 1  a widely used lp/ip solver. in solving the integer programs  we used all of cplex's default settings  except the following: the initial lp optimum was obtained by solving the dual problem  and the variable selection strategy used was  pseudo-reduced cost . in addition  the solver was terminated as soon as a feasible integer solution was found. all problems were run on a sun ultra workstation. 
　the results are shown in table 1.  nodes  represents the number of nodes visited in the branch and bound procedure  and  iterations  the number of simplex iterations performed. all times are in seconds. it should be noted that  both for the ip formulations and blackbox  the results shown are for the problem of finding a feasible solution given the number of time steps  i.e.  t is known in advance and given . 
   as shown in table 1  the state-change formulation led to a significant improvement in performance. whereas the satplan-based ip formulation solved only the smallest problems  the state-change formulations solved all  and required both fewer nodes and less computation time. while the systematic blackbox solver usually required less time than the state-change formulation  both blackbox and the state-change formulation explored similar numbers of nodes. moreover  the blackbox/satz did not find a feasible solution to the  bwlarge.b  blocks-world problem  while the state-change formulation did find a solution  using only 1 nodes. 
　it should be noted that the introduction of auxiliary variables can possibly introduce a large number of variables and constraints. however we found that the size of the formulation was significantly reduced by standard ip preprocessing  similar to the use of graphplan as a preprocessing tool in blackbox . for example  while the initial formulation of the problem  rocket.a  had 1 variables and 1 constraints  preprocessing reduced this to 1 variables and 1 constraints. similar reductions in size were also obtained for the other problems. 
   a further indication of the strength of respective formulations can be found by examining the value of the lp relaxations. since the objective function that is used is to minimize the number of actions in the plan  the value of the lp relaxation may also viewed as a lower bound on the number of actions required in the plan. the results for the satplan-based and the state-change formulation are shown in table 1. in almost all cases  the state-change formulation has a much higher lower bound  which indicates that its formulation is indeed much stronger. 
　in the satplan and graphplan framework  the parallel length   i.e.  the number of time steps  of plans is minimized. the ip formulation follows this framework  
	vossen  ball  lotem  and nau 	1 


- denotes that no plan was found after 1 hours of computation time. 
* denotes that the node limit of 1 was reached without finding a feasible integer solution. 



so it also is guaranteed to minimize the number of time steps. in addition  the ip formulation also explicitly uses minimization of the number of actions in the objective function. since we set the solver to terminate as soon as the first feasible integer solution was found  the ip solutions were not guaranteed to minimize the possible number of actions. still  we found that in most cases  the ip formulation found plans with a significantly smaller total number of actions than those obtained by blackbox. this is shown in table 1. 
1 	conclusions 
although selman et al.  reported difficulty in making effective use of ip techniques for propositional reasoning in general  our results suggest that ip techniques may potentially work well for ai planning problems  for the following reasons. 
  first  the ip formulation has the potential to do 
1 	challenge papers 
efficient planning. in our results  the number of nodes expanded in the search space was typically small  and comparable to a systematic satisfiablity solver. this indicates that the lp relaxation gave significant guidance in the selection of variables in solving planning problems. 
  second  ip models may provide a natural means of incorporating numeric constraints and objectives into the planning formulation. this capability would be important in many application domains  but it is not available in most existing approaches to ai planning. it should be noted  however  that the way in which numeric constraints will be represented may have a significant influence on the performance  much in the same way as we saw with the various ip formulations. therefore  the development of strong ip representations that capture common numeric constraints that arise in the planning domain is an issue for further research. 
we would like to emphasize that so far our main concern has been the development of different ip formulations  rather than improving the efficiency of the lp relaxation itself. while we believe that the state-change formulation is reasonably strong  solving the lp relation at each node is still sometimes computationally expensive. one 

of the main reasons for this  we believe  is the degeneracy of the lp relaxation  a condition that can cause the lp solver to execute many non-productive iterations . therefore  we are currently also investigating techniques to resolve this degeneracy  as well as further strengthening of the ip formulation. in particular  we want to investigate the use of constraint and column generation techniques. 
