 
     this paper is intended to give a glance at some issues involved in implementing an advanced proof component based on the connection method. the material presented comprises contributions to the following problem domains:  a  dealing with formulas in non-normal form   b  the dynamic incorporation of unification into a proof procedure   c  controlling the generation of copies of clauses. 
introduction 
in  and  the theory and architecture of 
lops  a system for logical program synthesis  has been presented. its deductive component consists of a theorem prover based on the connection method  see  or  . the current work in the lopsproject focuses on the replacement of this prover by a considerably advanced version. 
     there is theoretical  and experimental  evidence that the connection method has the potential of outperforming any other deductive method  such as resolution  due to its lack of redundancy  its applicability to non-normal-form formulas and several other unique features. in particular  the deep insight into the nature of proofs provided by this approach has opened the view of problems and their solutions which have not even been clearly identified in the context of previous methods. most of the material presented here is of that nature. it is concerned with three major aspects of theorem proving  each presented in one of the following three sections. 
     with the results reported in the first section we achieve a refinement of all our previous work concerning the ground-level which is well-balanced in view of the present implementation. although  usual first-order  unification may be regarded as a solved problem  its dynamic incorporation into the process of proof deserves further considerations presented in section 1. section 1 gives first results on a promising way of controlling the generation of copies of clauses which has never been taken into account before. 
	each 	section highlights a whole paper 	 viz. 
     . thus the reader should be aware that this note cannot provide more than a few condensed excerpts from an extensive body of material. in particular  the important issue of com* work supported by deutsche forschungsgemeinschaft bining these facets to a well-balanced system cannot be explained here in further detail. 
1. ground-level features 
     while in  and  some techniques have been introduced to enhance the performance of the connection procedure for normal form matrices of propositional logic  their adaptation to non-normal form will be dealt with in the following paragraphs. a detailed discussion of these and further issues may be found in . 

a 	riteral  	then p is complementary if  p n l    u 
{l } is complementary  
  c  if there are occurrences l and -l of literals then p is complementary if both  p n l    u {l } and  p n -l    u {-l } are complementary. 
1. theorem: 
given a partial path p and a clause c selected for extension  then  l - 1  hold: 
  1  the continuations of p through the occurrence l s o f a literal in c need not be checked for complementarity if there is an occurrence lr of the literal l which appears both among the stored subgoals and in the clausal core of a path literal. 
  1  if p does not contain an occurrence of the literal l but c contains an occurrence -lu and a r 
subgoal l exists which is in the clausal core of a 
path literal  then only the continuations of p through -lu must be checked for complementarity. 
  1  if c contains an occurrence k of a literal and p contains an occurrence ks of the same literal then we can exclude c as a clause suitable for extension. 
     part  1  and  1  of the theorem are dynamic applications of factorization  while  1  is a dynamic application of a generalized form of 1.t in   which expresses an idea due to prawitz. 
     an unreflected combination of part  1  of the theorem and ditchmarking  would result in an erroneous proof procedure  as pointed out in 1  as an open problem. this has now been solved by storing the occurrence lr together with all the information needed for a future checking for complemen-
tarity of the paths containing lr. 
1. the concept of weak unification 
     in order to prove a formula f of first-order logic using the connection or resolution method it is  in general  necessary to consider  at least implicitly  several copies  obtained by renamings of variables  of each clause. such a formula f which we shall  for simplicity  here assume to be in normal form is valid iff there exists a set of copies of its clauses which can be made propositionally complementary by substitution of variables. so if c and d are two different copies of clauses of f then we have to look for unifiable connections between literals of c' and d'  respectively  where c' and d' are obtained from c and d by applying the current substitution generated so far in the proof process. 
¡¡¡¡¡¡it is necessary for an efficient proof procedure to eliminate  before actually establishing the -proof  all searches for connections which can be recognized in advance as not unifiable by taking into account a single copy of each clause. this leads us to the concept of weak unification. a similar but weaker concept has been introduced in  under the name of weak substitution. 
1 definition: 
two terms or literals l and m are called weakly unifiable if there are substitutions $ and $ such that l$ m$ . 
a 	set 	{l -m} 	of literals occurring in two 	 not 
w. bibel et al. 1 
necessarily different  clauses of a formula f is called a weakly unifiable connection  for short a w-connection  if l and m are weakly unifiable. 
     obviously  l and m are weakly unifiable iff two copies l~ and m~ of l and m  respectively  with disjoint sets of variables are unifiable. hence any connection between literals of clauses c' and d' as above must correspond to a w-connection of f. so we first determine  using a unification algorithm  the set of w-connections of f. in the main part of the proof procedure we then only need to consider connections corresponding to w-connections. 
     there is another advantage of weak unification. if we check two literals l and m for weak unifiability then the unification algorithm gives us a most general unifier uof l~ and m~ as above. let $be the current substitution. in order to establish a new connection between l and m we have to find out whether l~$ and m~$ are unifiable. let $ denote the most general unifier of these two literals. then  after the proof procedure has taken into account the connection {l~ m~}  $ t s the new current substitution. now the point is that $ can be obtained as a supremum of $and u i n a lattice of equivalence classes of substitutions by the following theorem the non-trivial proof of 
which is given in . there are similarities with the lattice of equivalence classes of terms introduced in |1  although a direct relationship does not seem to exist. 
1 theorem: 
for substitutions $and tlet $  t i f f there is a substitution tsuch that $ r t we say that two idempotent substitutions $and tare equivalent to each other iff $  t and t  $. 
then 	the set of equivalence classes of 	idempotent substitutions together with an added greatest 	ele-
ment is a complete lattice. 
     determining the supremum of $and uin this lattice amounts to a unification of pairs of terms. it takes less time than a unification of {l$ m$}. incidentally  if f is valid then its set of wconnections is spanning  in one copy of f   a fact which may be taken advantage of for the elimination of useless alternatives in the course of proof. 
     another property which can be checked by looking at just one copy of the matrix is whether a clause contains a pure literal. the simplest case is that the clause contains a literal which does not have a w-connection with any literal of the matrix. then we can delete the whole clause  with all its copies  from the matrix. but there are other cases in which we can also do this. 
1 definition: 
let c be a clause of f  c' an instance of c  i.e.  c' is obtained from c by substituting consistently all variables of c by closed terms   and l a literal of c'. then we call l a pure literal of c' in f if  for all literals m of f and substitutions $ {l m$ is not complementary. note that l is not a literal of f. if there is a pure literal of c' in f then we call c' a pure instance of c in f. c is called a p-clause of f if every possible instance 
w. bibel et al. 
in 
be 
on artificial intelligence  bad honnef  januar 1 1. on the number of copies needed of a clause 
     in certain special cases bounds can be given for the number of copies needed of a clause. however  this is not true in general since first-order logic is undecidable. a few simple estimates are the following. 
     if f contains no function symbols  k is the maximum of 1 and the number of constants occurring in f  c is a clause of f and n is the number of variables occurring in c then at most kn copies are needed of c. this fact is useful if the number n of variables occurring in c is small. however  already the case where f contains only the three terms x  y and fx  and no constants  is undecidable as can be seen by skoleraization of the formulas of the undecidable  w.r.t. validity  prefix class 
     if f has only one clause with more than one literal and there are no w-connections within this clause then only one copy of this clause is needed. this is not the case if there is a weak connection within the clause as can be seen from 

     if a valid matrix f has two clauses with two literals in each clause then it has the form 

as an example we give the matrix 
 j. siekmann  ed.   inf orraatik-fachberichte 1 springer  berlin  1  1 .  invited paper  
 w.bibel and k.m.hoernig: lops - a system based on a strategical approach to program synthesis. in: automatic program construction techniques  a. biermann et al.   macmillan  new york 1. 
 w.bibel and k.m.hoernig: improvements of a tautology-testing algorithm. 1th conference on automated deduction  new york  usa  june 1  d. 
loveland  ed.   lecture notes in computer science 1  springer  berlin  1  1 . 
1  e.eder: properties of substitutions and unifications. projekt beweisverfahren  inst. f. inf. tum  report atp-1-i-1  1 . 
 e.eder: on the number of copies needed of a clause in a connection proof. projekt beweisverfahren  inst. f. inf. tum  report   in preparation  
 b.fronhoefer: a discussion of refinements of the connection method. projekt beweisverfahren  inst. f. inf. tum  report   in preparation  
 g.huet: confluent reductions. jacm 1  pp.1  1  
 a.mueller: an implementation of a theorem prover based on the connection method. projekt beweisverfahren  inst. f. inf. tum  report atp-1xii-1  1 . 
 ii  r.b.stillman: the concept of weak substitution in theorem-proving. jacm 1  pp.1.  1  
