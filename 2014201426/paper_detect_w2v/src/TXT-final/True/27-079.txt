 
although plan space planners have been shown to be flexible and efficient in plan generation  they do suffer from the problem of  looping' - that is they may spend an inordinate amount of time. doing locally seemingly useful but globally useless refinements in this paper i review the anatomy of looping and argue that looping is intimately tied to the production of non minimal solutions i then propose two classes of admissible pruning techniques based on the notion of plan minimality i show that the first one is admissible for planners which do not protect their establishments but allow a precondition to be reestablished any number of times the second one is admissible for planners which protect their establishments through causal links i also discuss the complexity of the proposed pruning strategies and then potential applications 
1 introduction 
domain independent classical planning techniques come in two mam varieties - those that search in the space of world states and those that search m the space of plans. the conventional wisdom of the planning community supported to a large extent by the recent analytical and empirical studies  1  1  holds that searching in the space of plans provides a more flexible and efficient framework for planning 
　despite its many perceived advantages plan-space planning techniques still lag behind state-space planning tech niques in terms of search control and pruning heuristics in particular an important property of state-space planners is that given any domain  that has only a finite members of distinct states  the planner will terminate in finite time on any problem  whether or not the problem has a solution. in contrast since the ground operator sequences form a power sequence over the set of operators in theplanning domain the complete search space of a plan-space planner can be infinite even for domains with finite number of actions consequently a plan-space planner trying to solve an unsolvable problem 
    this research is supported in part by nsf research initiation iward  ria  iri 1 nsf young investigator award  nyi  iri-1 and arp a/rome laboratory planning initiative grant 
f1-1-c-1 i think eric cohen yongqu suresh katulcam and laurie ding for helpful comments 
may never halt without looping checks even when the the corresponding state-space planner will 
　tne only way to avoid such looping is to intelligently prune unpromising search paths although there exist a vanety of techniques for pruning search branches m state space planning  including the state-loop goal loop and inconsistent-state heuristics see section 1  these loop control techniques turn out to be either inapplicable  or inadmissible for plan space planners   following  we consider a pruning technique admissible if it does not affect the planner's ability to find all minimal solutions for any given problem  of course as long as the planning problem is solvable  ie  has at least one soluuon plan  and the underlying planner uses an admissible search strategy to navigate the space of partial plans then theoretically at least lack of pruning strategies may not directly affect the efficiency of the planner instead the increased branching factor and the commitment of the state-space planners tend to dominate over the larger search space size of the plan-space planners tnis explains why we typically find plan-space planners faring better than state space planners m many domains  1  
　despite this pruning strategies for plan-space planners are still very important for several reasons even with best-first search looping can cause serious problems when faced with unsolvable problems further many practical planners use depth-first rather than best-first search strategies for efficiency purposes looping can significantly affect the efficiency of depth-first search regimes the final and often overlooked need for pruning strategies has got to do with the importance of failures in learning  1  most speedup learning strategies to improve planning performance learn from the fadures encountered in plan generatioo existence of a vanety of pruning techniques provides a rich opportunity for the learner to learn from the pruned branches although best-first search strategies may be able to avoid the unpromising branches and depth-limited depth first strategies may be able to avoid infinite looping neither of them provide any guidance for the learner in the presence of learning strategies the cost of pruning techniques also tends to be less of a concern in particular it is possible to use the pruning techniques strategically by combining them with a depth-limited search and applying them only to the plans that cross the depth-limits  see l 1  1  for a demonstration of the effectiveness of this approach  
　despite their importance  very little work has been done towards formulation and evaluation of pruning techniques for 
	kambhampati 	1 


	1 	planning 

planning problem. a complete plan is also called a solution plan a partial plan that is not complete is said to be an incomplete plan 
　two partial plans p and p1 are said to be equivalent if there is a bijective mapping from the steps of p1 to the steps of p1 such that under that mapping the ardenngs bindings causal links and the symbol tables of the plans are equal a partial plan p1 is said to be a subplan of another partial plan p1 if p1 is equivalent to a plan p1 derived from p1 by removing some steps and the ordering  binding  causal link relations involving those steps a plan p is said to be minimal if it is complete  and no subplan of p is complete. 
　a precondition p of a step a m a partial plan is said to be necessarily true   or satisfied  if m every ground linearization of the plan  diere is some step a' that precedes a and gives p and no step between a' and a deletes p similarly if at least one ground linearization satisfies these conditions then p is said to be possibly true if all preconditions of all the steps are necessarily true then the plan is complete for actions whose preconditions and effects are function-less first order literals  called the tweak representation  chap man  provides the necessary and sufficient conditions for checking the necessary truth of a precondition in polynomial time 
　plan space planning involves repeatedly selecting and ' 'establishing  a precondition of a step in the plan  such that it becomes necessarily true. when all preconditions are necessarily true planning is complete since the establishment refinements used by most planners ensure completeness by considering all possible ways of achieving a chosen precondi tion the order in which different preconditions are selected for establishment  referred to as ' goal selection order  or goal order'1  does not matter however when an individual 
partial plan is refined by establishing a specific precondition the constraints added in that process may undo the establish ment of a previously established precondition  thus making it not necessarily true  there are two general approaches for handling this - some planners popularly called goal protection planners or causal link planners  post constraints  called causal links  to protect their past establishments  in particular if the planner uses the effects of step a1 to make the condition p true at step a it posts a causal link a' -* a on the partial plan. this constraint ensures that no step a  that can delete p can possibly come between 1' and a because of this a causal link planner will never undo an establish ment that it has made  and thus never has to work on the same precondition more than once in   we point out that such protection strategies lead to reduction of redundancy in the search space examples of dus class of planners include snlp l1 and ucpop  a second class of planners such as tweak  ua and to  which may be called noncausal link planners  do not protect their establishments but allow re-establishment of a precondition that was previously established and was subsequently undone we will see that these two classes of planners need differing types of pruning strategies 
1 	review of existing p r u n i n g techniques 
most existing techniques for pruning plans m plan-space planning attempt to show that the constraints in the partial plan are mutually inconsistent if the inconsistency proof technique 'domain independent  such domain independent techniques include showing that the ordering constraints have a cycle  or showing that the binding constraints are unsahsfiable the former can done with the help of a topological sort. algorithm in 1 n1  time for an n step plan the complexity of binding consistency check depends on whether the variables have finite or infinite domains in the former case the consistency check is np-complete  while in the later case it can be done in 1 n1  time for an n variable plan finally we can also prune a plan if there exists no ground linearization that is safe with respect to all the causal links of the plan. this check is useful when the underlying planners use causal links but postpone resolution of the conflicts with the causal links  1  checking the link inconsistency of an arbitrary partial plan is np-complete  
　sometimes the constraints on the plan themselves may not be inconsistent but may be inconsistent together with some implicit domain knowledge admissible pruning is possible even m such situations as long as relevant knowledge about die domain is available. the pruning techniques are men called 'domain-dependent   often such domain dependent pruning techniques can prune a plan earlier than the domain independent ones an an example consider the simplified blocks-world problem of achieving on a  b  a on b  c  starting from an initial state where a is on b and c is on the table  a a causal link planner such as snlp  may generate the following partial plan in solving this problem. 

in this plan the goal condition on a  b  is being established from the effects of the initial state and a new step puton  b  c  is added to achieve the second goal on b  c  given the blocks world domain axiom that a block can not both be clear and support another block we can show that this partial plan cannot be refined into a solution  even though its constraints by themselves are not inconsistent  to see this consider the state of the world preceding 
puton b  c  in any eventual solution plan this state should contain both clear b   which is a precondition of the action  and on a  b   which is protected by the causal link 
s1 - ' ' s±  the infeasibiliity of this can be detected with the help of the plan structure and the appropriate blocks world domain axiom. 
　although applying this strategy at every refinement could be cosdy m  we show that combining this strategy with an explanation based learning framework can significantly improve planning performance 
1 minimality based p r u n i n g for non-causal link planners 
as i discussed earlier pruning techniques based on constraint inconsistency alone are not enough to stop looping in many situations in this section  i will develop a technique for pruning partial plans that are likely to lead to non-minimal solutions to do this we need to extend the notion of minimality to cover incomplete plans 
definition 1  nsatplan  given an incomplete plan v 	we 

uses only the constraints of the plan then we call the pruning define nsatplancp  as the plan derived from v by removing 
	kambhampati 	1 


	1 	planning 


	kambhampati 	1 

　the pp-cutset of a step may reduce in size  as additional ordenngs are introduced making steps currently unordered with respect to a to come before it  but the np-cutset will never reduce in size  since refinements can add but not delete step and ordering constraints  
　in the example plan in figure 1 the links comprising ppcutset of the step a   shown with the bold border  are shown in dashed lines the corresponding conditions are p q and r. from the figure we can also see that the links comprising the np-cutset the steps'have me conditions q andron them. thus the pp-cutset of a  is dominated by the np-cutset of s 
　now suppose that all the remaining open conditions of the plan in figure 1 are with respect to steps that are necessarily before a   equivalently the preconditions of all the steps a in p such that * can possibly follow a  have causal links supporting them  in such a case  the pp-cutset of a  can never increase in size during planning  it may reduce in size if the steps that are currently unordered with respect to s  get ordered to come before s    since the pp-cutset of s  is currendy dominated by the np-cutset of s1  and the pp-cutset of a  will not increase and the np-cutset of a step will not decrease in size this dominance relation will hold for all refinements of this plan including any refinements corresponding to complete plans it is easy to see that any such complete plans will be non-minimal by lemma 1 thus the plan in figure 1 can be pruned without losing any minimal solutions  complete plans  this pruning strategy is called the cutset prune strategy formally 
pinning strategy 1  cutset-prune  prune any incomplete partial plan p if it has two steps a' and s  such that  1  a' necessarily precedes a   1  every open condition  e  a  of the plan is such that a necessarily precedes s   1  np cutsets'  dominates pp-cutset a   
　it is easy to see that cutset-prune will stop looping in the hf/he example for a causal link planner such as snlp in particular once a plan of type so α s1 α s1 o1 α 
1 	planning 
s1 o1 α s ±is made with the causal links {s1 he s1  s1 -* 
s1 s1 -1 s± } the cutset-prune strategy can prune the plan since pp-cutset of s1 is dominated by the np-cutset of s1 and there are no open conditions after a  it is also provably admissible for causal link planners in particular we have 
theorem 1 cutset-prune is an admissible pruning strategy for planners that protect their establishments via causal links 
　as noted above  the admissibility property follows from the fact that the plans pruned by cutset-prune will not have any refinements culminating m minimal solutions we can illustrate it with the example plan shown in figure 1 suppose this plan  call it p is refined into a complete solution plan p' it is possible to remove the steps 1 a1 and 1   plus a few others  from p' without affecting its correctness to see this we start by noting that since there are no open conditions 
possibly after a  in p in figure 1 the only links given by these steps to steps that are possibly after s  in the complete plan p' are those that they currendy give in p the conditions supported by these links can still be supplied by a' or steps that are necessarily before a' for example  the link j1 -  a-j can be redirected as *o -  *1 at the end of this process the steps s1 and s1 will not have any useful causal links emaniting from them to steps possibly after a  thus all these steps  and any steps preceding a  that take any links from them  can be removed without affecting the correctness of p' showing that the plan p' is non-minimal 
cost of cutset-prune since cutset-prune is quite costly  it needs to potentially look at n1 pairs of steps and the check on the cutset dominance could be costly when the plan contains variables  it may cot be an effective strategy to use at every iteration  it needs to be applied more strategically once again i believe that the primary utility of this strategy will be in terms of its guidance to an underlying learning system  cf   in particular it can be applied to plans crossing depth limits to see if they are provably non-minimal if so the explanation of non-mimniality can be used to guide 

an ebl based system to learn effective control rules to avoid the looping brandies in the future  1- 1 
1 	related work 
as mentioned earlier most state space planners including strips  and prodigy  use state loop and goal loop based pruning strategies state-loop heuristics prune any path that visits the same world state more than once. goal-loop heuristics are used in state-space planners that use means-ends analysis or planners that do backward search in the space of states these techniques prune any search path where in an attempt to achieve some goal g the planner spawns a set of subgoals that include g the state-loop techmques are inapplicable for plan-space planners which do not keep track of world state during planning. the goal loop strategies turn out to be inadmissible in general  ci   la  we present a generalized planner called ucp that combines both state-space and plan-space approaches within a single framework ucp does have the ability to use the state loop and goal loop pruning as well as the minimality pruning strategies described in this paper 
　moms et al  discuss a way of using filter conditions to avoid certain types of looping in partial order planners their method depends on an a priori analysis of the domain operators to identify the preconditions which should not be expanded even this analysis allows loop control in only a very restricted class of situations both the nsat-prune and the cutset-prune strategies will stop looping on all the examples described in their paper without requiring any special analysis of filter conditions 
　drummond and curne  describe a pruning strategy called temporal coherence heuristic which is analogous to the inconsistent state heuristics used by backward state-space planners this method essentially constrains the planner to work on the goals in the reverse order of their achievement and thus is complete only when the planner backtracks on all goal ordenngs murray and yang  describe empirical studies that show that the increased branching factor caused by backtracking over goal ordenngs is typically not offset by the temporal coherence based pruning in contrast the minimality based pruning strategies described in our work are complete for a much larger class of planners 
　as i mentioned earlier fink and yang  formulate a set of tractable necessary but insufficient conditions for checking non-mimality of partial plans they however do not use their nation of minimality improving planning performances as i discussed in section 1 before the notices of minimality of complete plans can be used to develop pruning techmques they must first be generalized to incomplete plans 
1 	conclusion 
in this paper i addressed the problem of  looping   motivated the need for pruning techmques to avoid looping and showed that looping is intimately ued to the production of non-minimal solutions i then proposed two classes of admissible pruning techmques based on the notion of plan minimality the first one  based on the nation of nco-minimal uncomplete plans is admissible for non-causal link planners such as ua and to which don't protect goals but allow reestablishment of goals the second one is based on the notion of cutset of the causal dependency graph of a plan. and is admissible for causal link planners such as snip which protect establishments through causal links i also discussed the complexity and utility of the pruning strategies the development here also brings out the interplay between the redundancy in the search space of a planner and 
the admissibility of different pruning strategies for it 
