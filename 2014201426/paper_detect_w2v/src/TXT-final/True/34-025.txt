 
a representation for robot plans is proposed. the representation of a given plan r e f l e c t s the structure of the process which produced the plan. this information is useful in both the o r i g i n a l cons t r u c t i o n of the plan and i t s subsequent m o d i f i cation if unforeseen events cause execution f a i lures. a programmed system that constructs and executes  in simulation  plans for journeys using a large system of public transport is described to i l l u s t r a t e the advantages of the representation. it is also shown how the representation could be used for more t y p i c a l robot-planning worlds. 
	1. 	introduction 
       since most robots must function in a world whose behaviour they cannot hope to predict exactl y / they must be prepared for plans they make to f a i l during execution.  as usual  a plan is a l i n e a r sequence of actions or operations intended to transform some i n i t i a l state of the robot's world into some goal state.  such f a i l u r e s may occur because some action in the plan f a i l s to have i t s expected effect or because of some unpred i c t a b l e event outside the control of the robot. in any case  a f t e r such a f a i l u r e the robot must be able to modify i t s plan to cope with the unexpected turn of events. 
       rather than throw away the o r i g i n a l plan and s t a r t again from scratch  it is clearly desirable that as much as possible of the work that went i n t o constructing the old plan should be reused in producing a modified version. one previous system  strips 1 ' 1   that dealt with replanning a f t e r execution f a i l u r e s   t r i e d to save work by making a r b i t r a r y subsequences of operations from the o r i g i n a l plan available to the replanning process as p r i m i t i v e operations. no a t t e n t i o n   however  was paid to the way in which such subsequences were o r i g i n a l l y intended to contribute to the f u l f i l l m e n t of the goal of the p l a n   thus  at times  leading to rather a r b i t r a r y uses of them. such a scheme does not t r y and use any of the problem analysis that went i n t o constructing the o r i g i n a l plan but only i t s r e s u l t s . 
　　　more h i e r a r c h i c a l l y structured systems have proposed t h a t plans should be sketched out at some l e v e l of d e t a i l abstracted from that of the robot's p r i m i t i v e actions  and each step f u l l y detailed only as it is executed. such an approach  while giving an i n b u i l t f l e x i b i l i t y with regard to d e t a i l s   runs the r i s k of disaster if some of the unelaborated steps turn out to be impossible because of some complication at the more detailed l e v e l s . 
　　　the scheme of plan representation presented in t h i s paper is p r i m a r i l y designed to f a c i l i t a t e the reconstruction of detailed plans after f a i l u r e in execution. it does t h i s by e x p l i c i t l y recording in the representation of a p a r t i c u l a r plan the structure of the process which produced that plan. the information thus recorded includes the choices made during the construction of a p l a n   how they advanced the construction of the plan in terms of sub-goaling and refinement of d e t a i l s   and how they are l o g i c a l l y related to each other. after f a i l u r e t h i s information enables that part of the 
development of a plan due to decisions invalidated by the circumstances of f a i l u r e to be precisely i d e n t i f i e d and discarded. the r e s u l t i n g data structure represents that part of the o r i g i n a l problem analysis which is s t i l l applicable a f t e r the f a i l u r e * . use of t h i s structure by the replanning mechanism w i l l avoid the corresponding part of the o r i g i n a l planning e f f o r t being d u p l i cated during replanning. 
　　　while the representation makes as few assumptions as possible about planning processes  it is b a s i c a l l y oriented to processes based on h i e r a r c h i c a l levels of d e t a i l 1   1   ' 1 . by making i n f o r mation about a l l steps of a plan constantly a v a i l able  the representation f a c i l i t a t e s plan making for worlds in which the effects of operators tend to i n t e r f e r e with each other to a s i g n i f i c a n t extent. it also permits d i f f e r e n t parts of the execution sequence to be developed in an order and to r e l a t i v e levels of depth  dependent only on the constraints of the problem domain. such an a b i l i t y is useful when there are d i f f e r e n t c e r t a i n t i e s as to whether the d i f f e r e n t steps of an undet a i l e d skeleton plan can be successfully developed to a d e t a i l e d l e v e l . 
　　　use of the representation forms the basis of a working robot planning and  simulated  execution system described in section 1. some aspects of the system implemented are atypical of robot p l a n ning domains in general  and so a discussion of how the representation would be used with a more usual robot world follows in section 1. 
	1. 	the representation 
　　　a plan in the proposed representation cons i s t s of two i n t e r l i n k e d data structures: 	a tree 
which represents the subgoal structure of the plan and a graph which represents the l o g i c a l r e l a t i o n ships of the decisions taken in constructing the plan. this representation and i t s uses are described below in general terms; for detailed examples see section 1. 
* i n fact it does not always represent a l l of i t   since there can be decisions that are s t i l l appropr i a t e a f t e r f a i l u r e   but are discarded because they were o r i g i n a l l y based on one of the decisions invalidated by the f a i l u r e . 
1 

　　　each node of the subgoal tree of a plan  subsequently jnode  corresponds to a goal and the action necessary to achieve i t .  these two concepts are s u f f i c i e n t l y close that it is often usef u l to blur any d i s t i n c t i o n between them.  sub-
goaling is represented by the branching of the tree 
  with a l e f t to r i g h t time ordering . thus  would indicate that goal x has been s p l i t 
i n t o subgoal y and subgoal z  or equivalently that the action required to achieve x can be s p l i t i n t o an action that w i l l achieve y followed by an action that w i l l achieve z . the root of the tree corresponds to the t o p - l e v e l goal of the p l a n   while in a complete plan the t i p s of the tree correspond to p r i m i t i v e actions. for a system using a h i e r archy of levels of d e t a i l   progress along a branch from root to t i p would thus be n a t u r a l l y accompanied by an increasing amount of d e t a i l . 
　　　besides just representing a goal or a c t i o n   each jnode can contain any other information about that goal or action that is h e l p f u l to the plan construction process. in p a r t i c u l a r   information about the expected state of the world before or a f t e r the action could be thus represented. communication and co-operation between processes cons t r u c t i n g d i f f e r e n t steps in the same plan can be greatly f a c i l i t a t e d by having such information for every step in the plan constantly available. 
　　　the nodes of the decision graph of a plan  subsequently dnodes  are in one-one correspondence with the decisions made during the construction of that p l a n . the p a r e n t - c h i l d r e l a t i o n of the graph indicates l o g i c a l dependence of the c h i l d on the parent. logical dependence of one decision on another here means that the process which made the second decision was influenced by some d i r e c t consequence of the f i r s t . a graph structure is necessary to represent such l o g i c a l dependencies  because the effects of two quite independent decisions can influence the making of a t h i r d . 
　　　each dnode has two-way pointers from it to those jnodes created as a d i r e c t consequence of its decision. these pointers can be used in conjunct i o n with a graph structure to precisely i d e n t i f y a l l the effects both d i r e c t and i n d i r e c t of a decision on the development of a plan. the process of removing the effects  thus i d e n t i f i e d   of a decision from a plan is known as undoing the decision and consists of: 
a  removing the decision from the graph and a l l 
the jnodes pointed to by the decision from the t r e e ; 
b  undoing the children of the decision in the graph. 
　　　this undo mechanism forms the basis of the method for reconstructing plans a f t e r f a i l u r e in execution. the basic idea is to i d e n t i f y the most l o g i c a l l y senior decisions inappropriate to the unexpected s i t u a t i o n   undo them  and then use what is l e f t of the o r i g i n a l plan representation as a basis for plan reconstruction. to t h i s end  each decision must have a resumption point of the plan construction process associated with i t . use of t h i s resumption point should r e s u l t in the plan construction process being reentered to remake the decision in the l i g h t of a l l currently available information. 
       in more d e t a i l the replanning mechanism works as follows. when an execution f a i l u r e occurs  the execution monitoring system is assumed to designate a set of jnodes as unexecutable  these jnodes being the most senior that could be so designated. then: 
1. a l l portions of the subgoal tree successfully executed are discarded  together with any dnodes d i r e c t l y responsible only for discarded jnodes  
1. a l l information in the t r e e   made inaccurate as a result of the circumstances of f a i l u r e   is updated  
1. for each jnode  a  of the unexecutable set a  if a has already been removed from the tree nothing more is done  otherwise 
b  the dnode  d  d i r e c t l y responsible f o r a is undone  
c  the plan construction process is reentered through the resumption point of d  
d  if the reentered plan construction process 
terminates successfully nothing more is done  otherwise 
e  if a is not the root of the t r e e   	it is 
replaced by i t s parent and step b  is looped t o   otherwise 
f  replanning is assumed to be impossible. 
　　　if t h i s mechanism is always to produce a complete plan  the resumption point associated with a decision must not only remake i t s own d e c i s i o n   but also any other dependent decisions needed to produce a complete plan. such an arrangement may not always be feasible. in such cases those jnodes on the f r o n t i e r of the subgoal tree that were not p r i m i t i v e at the end of the above process would have to be found and developed u n t i l they were. this problem does not  however  arise w i t h 
　　　the system to be described in the next section. 
	1. 	a working system 
based on use of the representation 
　　　the representation described above forms the basis of a working system for the construction and  simulated  execution of plans. the plans concern the journeys of a  robot  t r a v e l l e r through a network of r a i l   sea and a i r public transport services. the system contains a considerable amount of knowledge in procedural form about how to make plans in such a domain. it is n o t   however  t i e d to a p a r t i c u l a r network  but accepts the d e f i n i t i o n of such a network in tabular form as i n i t i a l data. this d e f i n i t i o n comprises l i s t s of connections  timetables f o r those connections and some geographical data  concerning the p o s i tions of towns and the r e l a t i v e positions of countries and seas . 

1 

　　　the network used for example purposes is extensive. it connects 1 european centres using 1 r a i l services  1 sea services and 1 a i r services g i v i n g in excess of 1 town to town connections and more than 1 p r i m i t i v e journeys  journeys between two centres using one service at a p a r t i c u l a r time . the services used are a l l taken from real world timetables- the geographical area covered by the network is shown in figure 1. for the sake of r e a d a b i l i t y   only a small subset of the network is shown  but t h i s subset includes a l l the routes used in the examples. 

　　　the system can construct plans subject to cert a i n constraints of time and cost. these cons t r a i n t s can be both global  e.g. on the o v e r a l l cost of a journey  and l o c a l  e.g. on the time of a r r i v a l at a p a r t i c u l a r p l a c e   . the system can also cope w i t h the occurrence of  unexpected  events during the simulated execution of a journey. it checks t h e i r relevance to the journey and if necessary modifies the plan using the replanning mechanism described in the previous section. 
　　　the system uses i t s domain dependent knowledge to good e f f e c t and a planning time of around 1 seconds is t y p i c a l f o r a journey involving s i x p r i m i t i v e journeys. the plan produced is  reasonable  though not necessarily optimal. the system was coded in pop-1 on an icl 1 computer. 
       figure 1 shows the subgoal tree and decision graph of a plan produced by the system for going from manchester to nice by t r a i n and boat.  this plan i s   in f a c t   optimal with respect to both time and cost for a journey in the example network from 
manchester to nice using surface transport.  
because of the nature of the domain  a l l jnodes correspond to journeys of varying degrees of spec i f i c a t i o n . the correspondence between increase in d e t a i l and increase in depth of the tree w i l l be clear. times are represented by a 1-hour clock time plus a day  thus 1 1 means 1 p.m. on day 1 of the journey. the l i s t of numbers in brackets associated with each dnode indicates which jnodes were created as a d i r e c t r e s u l t of each 
dnode. 
　　　the function of each decision shown in f i g u r e 1  b  is as follows: 
　　decision 1 is a dummy decision which is n o t i o n a l l y responsible for a l l the unchangeable features of the world. 
　　decision 1 chooses surface transport as the mode of t r a v e l . because a sea  the english channel  l i e s between manchester and nice  it results in subgoaling the o r i g i n a l goal i n t o three subgoals: to get to the channel  to cross i t   and to get to nice. 
　　decision 1 chooses the route for the channel crossing and thus refines jnodes 1  1 and 1 i n t o the more detailed jnodes 1  1 and 1 r e s p e c t i v e l y . 
　　decision 1 fixes a time for the sea crossing  r e f i n i n g jnode 1 s t i l l f u r t h e r . 	since the sea crossings are rarer than the r a i l connections  unnecessary waiting is minimized if r a i l times are f i t t e d to sea times rather than the other way round. 	the s i t u a t i o n a f t e r t h i s decision is an example of the concurrent use of d i f f e r i n g l e v e l s of d e t a i l for d i f f e r e n t steps of the p l a n . 
　　decision 1 f i x e s the route for the t r a i n journey as far as the channel crossing  but is independent of decision 1 even though made a f t e r i t . decision 1 is s i m i l a r . 
　　decision 1 f i x e s a time for the t r a i n journey immediately before the channel crossing. it de-
pends on a r o u t i n g decision  1  and a timing decision  1  which are independent  but an a l t e r a t i o n in e i t h e r would require the reconsideration of decision 1. decision 1 is s i m i l a r . 
　　decisions 1  1 and 1 are other timing decisions which depend on a routing decision and i t s dependent timing decision. 
　　　the domain dependent expertise of the planning system is encoded in a number of special functions c a l l e d dfunctions. each dfunction has i t s own special area of knowledge and is associated with the making of a p a r t i c u l a r sort of decision. df un-
ctions are parameterless and are expected to e x t r a c t a l l the knowledge they require from the decision graph and subgoal tree representing the e x i s t i n g state of the plan. 
there are seven main dfunctions: 
　　trysorp which chooses between a i r and surface t r a n s p o r t   
　　trains  boats  and planes which choose routes for r a i l   sea and a i r journeys respectively  
　　traintime  seatime and planet1me which choose times for journeys by r a i l   sea and a i r respect i v e l y . 

1 


　　　since dfunctions take a l l t h e i r information from the plan representation e x i s t i n g at the time they are c a l l e d   they make ideal resumption points for use with the replarming mechanism described in the previous section. indeed  t h i s is the reason they were so designed. 
　　　the e n t i r e planning system runs under a simple backtracking regime. the problems with automatic backtracking are well known1  and t h i s feature of the system is undesirable. however  since emphasis is placed on t r y i n g to make good decisions at the f i r s t attempt  the bad points of backtracking do not have as much impact as they might. see r e f e rence 1 for a discussion of how the representation can be used to ameliorate backtracking for those plan construction processes using i t . the unim-
plemented scheme proposed there is based on the fact that the representation enables a decision to 
be remade without remaking chronologically subsequent but l o g i c a l l y independent decisions. 
　　　use of the representation can also help the plan construction process in handling the global constraints of time and cost that can be imposed on a journey. the system deals with these const r a i n t s by associating with each jnode an estimate of the time and cost of the journey it represents. the more specified the journey  naturally the more accurate the estimate. at any time the most upto-date estimate for the whole journey can be obtained by summing the individual estimates of the jnodes on the current f r o n t i e r of the t r e e   making allowance for waiting times and overnight stops. if t h i s estimate is much outside the prescribed l i m i t   then the development of the plan along the current lines can be discontinued immediately  thus wasting as l i t t l e e f f o r t as possible. such an approach leads to l i t t l e time being spent on journeys f o r which the allowance is grossly inadequate  but more on journeys for which the allowance f a l l s just short. 
1 

	the computer output produced by a simulated 	replaced by decision 1  the choice of that service. 
execution of the example plan described above i s : 
except that 
1 

　　　the system described above is atypical of robot planning systems. most other systems are concerned with worlds in which e.g. a mobile robot pushes blocks around through a network of rooms1 1  or a one-handed robot moves blocks about on a table top . the essential difference between these worlds and the transport world l i e s in the number of features of the world that change or can be changed in a predictable way. for the transport world such features are few and fixed  only the robot's position and consequently the amounts of time and money available to i t     while for the other worlds they are numerous and variable  e.g. the position of every block . 
　　　the systems mentioned above that deal with such domains a l l use some sort of data base to model the changing features of t h e i r worlds. this data base contains a record of a l l changeable features of the world and is t y p i c a l l y updated in a simulation of execution as plan construction proceeds. if the representation is to make e x p l i c i t l y available at a l l times information about every step in a plan  one data base is i n s u f f i c i e n t for use with i t . there must be several  one for each jnode in the plan. to provide for each jnode a separate 
data base containing mention of a l l changeable features of the world i s   however  unnecessarily wastef u l . 	it is possible and even advantageous to use 
one global data base plus a linked incremental system of alterations to i t . 
　　　in t h i s scheme  each jnode has attached to it an a l t e r a t i o n   i . e . a record of the changes expected to be brought about by the action associated with i t . the presence or absence of any piece of information in the data base representing the expected state of the world a f t e r the execution of some jnode can then be found by looking back along the f r o n t i e r of the t r e e   s t a r t i n g with that jnode  for the f i r s t mention of that item in an a l t e r a t i o n . an item can be mentioned as being e i t h e r present or absent  but the f i r s t mention of it discovered determines i t s status. if the item is not mentioned in any of the a l t e r a t i o n s   i t s status is the same as i t s status in the global data base describing the i n i t i a l state of the world. an example w i l l make this clearer. 
　　　consider the simple world shown in figure 1 with a robot  two boxes  four rooms and four connecting doors. figure 1 shows the tree and graph of a plan to transform it from the configuration shown in figure 1 to one in which the two boxes are next to each other. the p r i m i t i v e actions shown in the plan are similar to those used by strips1 for a similar world. no assumptions are made  however  about the type of process which produced the plan or about the order in which i t s several steps were elaborated. 
　　　the global data base representing the i n i t i a l state of the world might contain the following items: 
 in robot r1omi   in boxl r1  	 in b1 room1  
 closed do1   open d1  	 open door1  
 open d1  
plus other information describing s t a t i c features of the world such as d1 connects rooml and r1 or that the two boxes are pushable. 
　　　the a l t e r a t i o n s associated with each jnode might be as follows: 

　　　thus - in robot $  denotes the absence of a l l items of that form  i . e . it cancels any s p e c i f i cation of which room the robot is i n . the p o s i t i v e items of an a l t e r a t i o n take precedence over i t s 
negative items when c o n f l i c t s a r i s e . 
　　　in t h i s complete plan  the room the robot is expected to be in a f t e r the execution of jnode 1 is found d i r e c t l y from the a l t e r a t i o n of jnode 1  

1 

since it contains  in robot room1 . for jnode 1  however  it is necessary to follow the f r o n t i e r back u n t i l jnode 1  to find t h i s information  since the alterations of neither jnode 1 nor jnode 1 contain an item of the form  in robot room . simil a r l y the expected position of b1 after the execution of every jnode w i l l always be found from the global data base since no mention of it is made in any a l t e r a t i o n either p o s i t i v e l y or negatively. 

　　　using such a scheme with predicates which give essentially the same information at d i f f e r i n g levels of d e t a i l can lead to d i f f i c u l t i e s when d i f f e r e n t steps of a plan are at d i f f e r e n t levels of d e t a i l . suppose  for example  that jnode 1 was further developed to specify  at robot x   x being the position the robot must be in to push b1 in the proper d i r e c t i o n . then the data bases of a l l subsequent jnodes in the execution sequence would contain this  for them  erroneous information. one solution is to ensure that whenever a new peice of information is established  a l l other information 
both at the same and lower levels of d e t a i l that could c o n f l i c t should be erased. thus including  in robot room  in an a l t e r a t i o n would also e n t a i l the inclusion of -   i n robot $    - nexto robot $  and - at robot $  in the same a l t e r a t i o n . 
　　　an important advantage of the incremental scheme is related to t h i s problem. any d e t a i l s f i l l e d in about one step of a plan become immediately available in the data bases of a l l subsequent steps of the p l a n   providing  of course  no intervening a l t e r a t i o n contradicts the d e t a i l . thus the data base of one jnode can be updated by development of a completely d i f f e r e n t step of the plan. for example  in the above plan  jnode 1 is already in existence immediately after decision 1 is made.  closed door1  is present in i t s data base  since the item is present in the o r i g i n a l data base and no intervening a l t e r a t i o n existing at that time mentions i t . however  after decision 1 has been made  jnode 1 is present on the f r o n t i e r of the tree and i t s a l t e r a t i o n removes  closed doorl  from the data base of jnode 1 and inserts  open doorl  in i t s place. 
　　　this data base scheme makes the construction of the decision graph straightforward. a decision d i r e c t l y depends exactly on those other decisions which f i r s t established the information influencing i t s formation. thus if information from the a l teration of a jnode influences a decision  that decision depends on the decision responsible for the creation of the eldest ancestor of that jnode whose a l t e r a t i o n contains the same information. 
　　　the advantages of having information about the e n t i r e plan constantly available are more apparent in a world where d i f f e r e n t steps of the same plan are more l i k e l y to interfere with each other. an example of such a world is the well known blocks world of winograd1. the robot in this world cannot l i f t up a block which has other blocks on top of i t . to manipulate such a block  it must f i r s t clear off i t s top by putting the supported blocks somewhere else  usually on the table. such tact i c s can lead to problems when one block occupies the space needed for another. such problems are resolved rather i n e f f i c i e n t l y by backtracking in winograd's system. if the above representation were used  a plan could be developed as far as poss i b l e down each branch of i t s tree u n t i l it was necessary to choose d e f i n i t e places on the table in which to put the blocks. a place for each block could then be chosen using the information in the tree about a l l the other objects which had to be f i t t e d i n   thus eliminating the need for t r i a l and error backtracking search. 

1 

　　　the method of plan reconstruction after execut i o n f a i l u r e   baaed on use of the representation and described in section 1  works in exactly the same manner as i l l u s t r a t e d in section 1. for example  suppose in the execution of the present p l a n   the robot discovered when it got to do1 that it was not only closed but locked. it would apply the replanning procedure to jnode 1  as the most senior unexecutable ancestor of jnode 1  the unexecutable p r i m i t i v e action of opening d1. 
acknowledgements 
this paper is based on a university of edinburgh master of philosophy t h e s i s 1 . as in t h a t   i would l i k e to thank my supervisors harry barrow and donald michie for t h e i r guidance and encouragement. my f i n a n c i a l support at edinburgh was provided by the science research council. 

f i r s t l y   jnode 1 would be discarded since it had already been successfully executed. then the global data base would be updated with the current position of the robot and the f a c t that d1 is locked. dnode 1  the choice of the robot's route from rooh1 to r1om1  is the decision d i r e c t l y res-
ponsible for jnode 1  so it would be undone  removing jnodes s  1 and 1 from the tree and dnodes 
1 and 1 from the graph. since the knowledge that d1or1 is locked is available  reentering the planning process should then r e s u l t in the route from room1 to r1 via r1 being chosen. in the new plan  thus produced  the tree representing the robot's going from r1 to room1 would grow from the o r i g i n a l jnode 1. a l l the rest of the plan about pushing b1 through door1 would  of course  remain intact throughout t h i s process. 
	1. 	conclusion 
　　　a representation for robot plans has been p r e sented which can assist in both the construction and execution of such plans. use of the represent a t i o n was i l l u s t r a t e d by a description of a working planning and execution system concerned with the journeyings of a robot t r a v e l l e r in a network of public transport services. the problem domain of t h i s system is atypical of robot planning systems in general  but it was also shown how the representation could be used for more typical worlds. the examples of the use of the represent a t i o n indicated a number of features of i t : 
　　　when a f a i l u r e occurs during execution  the representation enables the discarding of those parts of the plan invalidated by the f a i l u r e and thus reconstruction of the plan based on the select i v e reuse of the analysis made by the o r i g i n a l planning process. 
　　　the structure of the representation is oriented towards planning systems using hierarchical levels of d e t a i l   and enables d e t a i l s to be f i l l e d in in an order unrelated to execution order. it also f a c i l i t a t e s the use of information about one part of a plan in constructing other parts of the same plan. 
　　　the representation makes these contributions to plan construction and execution  because  for a p a r t i c u l a r plan  it r e f l e c t s the structure of the process which produced the plan. the present representation is able to r e f l e c t the structures of currently t y p i c a l planning processes. for more advanced processes with more structure a represent a t i o n capable of r e f l e c t i n g the extra structure would probably give further benefits similar to the ones mentioned above. 
1 
