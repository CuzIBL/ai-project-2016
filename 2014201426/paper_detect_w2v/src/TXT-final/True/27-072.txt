optimizing decision quality with contract algorithms 
shlomo zilberstein* 
computer science department 
university of massachusetts 
a m h e r s t m a 1 u s a shlomo cs umass edu 

a b s t r a c t 
contract algorithms offer a tradeoff between output quality and computation time provided that the amount of computation tunc is determined prior to their activation originally they were introduced as an intermediate step in the composition of interruptible anytime algorithms however for many real-time tasks such as information gathering game playing  and a large class of planning problems contract algorithms offer an ideal mechanism to optimize decision quality this paper extends previous results regarding the meta-level control of contract algorithms by handling a more general type of performance description the output quality of each contract algorithm is described by a probabilistic  rather than deterministic  conditional performance profile such profiles map input quality and computation time to a 
probability distribution of output quality the composition problem is solved by an efficient off-line compilation technique that simplifies the run-time monitoring task 
1 d e c i s i o n m a k i n g w i t h c o n t r a c t a l g o r i t h m s 
the wide performance variability of artificial intelligence techniques  most notably in search and knowledgebased systems  has been a major obstacle in applying these techniques to real-time environments this problem led to the development of a variety of approximation techniques such as anytime algorithms  dean and boddy  1  horvitz 1   design -to time  garvey and lesser 1  and various progressive reasoning methods  mouaddib and zilberstein  1  it is by now well understood that a successful system must trade off decision quality for computation time anytime algorithms in particular offer a simple means by which a sy stem can monitor and maximize its overall utility 
　contract algorithms are a special type of anytime algorithms that was introduced in order to simplify the 
 url http //anytime cs umass edu/-shlomo 
1 	planning anytime algorithm composition problem  russell and zilberstein 1l  general anytime algorithms are interruptible but naive composition of anytime algorithms destroys interruptibihty since no results are available before the last component is activated similar to interruptible algorithms  contract algorithms offer a tradeoff between computation time and quality of results  but the amount of computation time must be determined prior to activation so that time can be allocated optimally to the components this leads to a two step solution to the composition problem of interruptible algorithms first the system is compiled into one large contract algorithm and then this algorithm is made interruptible with only a small constant penalty  zilberstein  1  
   despite the original motivation for their development  contract algorithms may be just the right solution in many real-time problem domains such domains as information gathering  database query processing  game playing and many planning and scheduling tasks are characterized by a predictable utility function  that is  the utility of results of quality q at a future tune t can be determined by the current state of the domain in such domains  and in domains that have near predictable utility function it is advantageous to utilize contract algorithms rather than interruptible ones  given the performance degradation associated with the contract to interruptible conversion 
　many existing programming paradigms can be used to construct useful contract algorithms examples include iterative deepening search  iterative improvement algorithms in numerical computation variable precision logic  relational database query answering  and randomized techniques such as monte carlo algorithms and fingerprinting algorithms for a survey of such programming techniques and examples of their ai applications see  zilberatein  1  the composition of these algorithms  however  presents a non-trivial meta-level resource allocation problem for any given contract time allocated to a composite system  the problem is how to allocate this time to the componenta bo as to maximize the overall output quality we refer to this problem as the contract algorithm composition problem 
　the rest of this paper presents an efficient solution to the contract algorithm composition problem section 1 defines the problem formally and describes the main factors that determine the complexity of the problem in section 1  we show that the resource allocation problem can be mapped to a decision problem represented by an influence diagram unfortunately  standard algorithms for evaluating influence diagrams perform poorly on this problem section 1 describes an off-line compilation process and a run-tune monitoring technique that offer an alternative solution to the resource allocation problem in section 1  we show that the compilation problem can be solved efficiently for a large class of composite systems as a result large systems composed of contract algorithms can be optimally monitored with negligible run-time overhead we conclude with a summary of the contribution of this work and some open problems 
1 	the meta-level resource allocation problem 
this section defines the resource allocation problem that arises when a system is composed of a set of contract algorithms to formally define the problem one must answer a number of basic questions these questions are discussed below 
program structure the first question is what type of programming constructs are used to connect the s s tern's components in this paper  we will consider the case of functional composition as the only programming construct the results howe er can be generalized to additional programming constructs as shown in  zilberstein  1  
speech recognizer  utterance  
linguisticverification   
generatelnterpretation  
filternoise  utterance  
classifyspeaker utterance   
generatecontext state   
figure 1 a speech recognition module composed of contract algorithms 
　many systems can be described at the top level as a composition of a set of modules consider for example a speech recognition system whose structure is shown in figure 1 each elementary function represents a contract algonthm the lower level modules filter noise from the input and classify the speaker  in terms of geneder accent  and other features that may be used to calibrate the interpretation module  the results are passed to a 
　function that generates possible interpretations finally  candidate interpretations along with the current context are passed to a function that performs linguistic verification and determines the best interpretation each one of these functions can be composed of more primitive contract algorithms the resource allocation problem is the problem of calculating the execution time of each elementary component  so as to maximize the quality of the final interpretation 
performance profiles the second question is what meta-level knowledge is used to characterize the performance of individual contract algorithms we use discrete conditional performance profiles  cpps  that map input 
quality and run-time to a discrete probability distribution of output quality for an algorithm a with two inputs for example  the cpp is denoted by 
and  is the probability of output quality 
qk with input qualities  g   j  and time allocation t 
each quaht  measure 	can represent the 
level of certainty  precision  or specificity of the data these quality measures arc  local  to each component part of the composition problem is to propagate the effect of quality degradation in lower levels on the overall quality of the system and on its. utility the cpp of an elementary contract algorithm can be determined empirically by running the algorithm over randomly selected problem instances  dean and boddy  1 zilberstein 1  in fact  we are currently de eloping a bet of programming tools to mechanize the construction of cpps and to store them in a library for later use  grass and zilberstein  1  
time-dependent utility functions the third question is how the quality of the output of the system will affect the domain  v  in which it operates as we mentioned earlier  we assume that the environment is characterized by a predictable utility function this function represents the utility of a result of quality q in state s at time t for example in the speech recognition domain described above  the state s may represent situations with different level of error sensitivity  q may represent the probability of correct interpretation and the overall utility may depend on 1 and q  as well as on the delay in producing the interpretation 
monitoring schemes the fourth question is how to determine the tot al allocation of computation tune to the system and how to monitor the execution of the components in this paper  our goal is to derive the optimal allocation prior to the activation of the system this approach leads to a simple monitoring scheme by which every module is activated with a fixed predetermined contract time several strategies for adjusting the allocation of residual tune based on the actual progress in problem solving have been proposed in  zilberstein  1  these techniques can be used to modify the fixed contract strategy to improve performance when there is a large degree of uncertainty regarding the output of each module 
　the answers to the above four questions produce a well-defined meta-level resource allocation problem namely  given a system that is a functional composition of contract algorithms  the cpps of the components  and 
	zilberstein 	1 

a time-dependent utility function  what is the beat overall contract and how should the time be distributed to the components so as to maximize the overall utility of the system 
1 o p t i m a l resource allocation using influence diagrams 
the tune allocation problem defined above can be represented as a decision problem using influence diagrams  howard and matheson  1  the construction of the influence diagram is a trivial modification of the directed acyclic graph  dag  representation of the system itself 

figure 1 influence diagram representation of the metalevel resource allocation problem 
　for example  the speech recognition system described above can be schematically represented by the following functional expression e d a x  b y   c z   where a b c d and e are contract algorithms given such an expression  we can map the resource allocation problem to the influence diagram shown in figure 1 in this diagram  each elementary contract algorithm is represented by a chance node that corresponds to the uncertainty regarding the output quality of the algorithm in addition  we represent the quality of each input x y and z  by a chance node the output quality of each contract algorithm is influenced bv the qualities of the inputs and by the time allocation to that node this dependency is characterized by the cpp of the contract algorithm that forms the conditional probability matnx attached to the node the problem is then to determine the total allocation of time  t  and the sub-allocation a tl t1 to each component  that would maximize the overall quality of the system note that the overall utility is represented by a value node that is influenced by the quality of the system's output and by the state of the environment represented by a single chance node s the state of the environment is more likely to be determined be a complex probabibstic model but since we focus in this paper on the behavior of the decision making components  a single node is used to represent that influence 
　note that  in general  the decision diagrams that we get satisfy the following two restrictions 
1 there is a total ordering among the decision nodes that is determined by the order of evaluation of the composite system 
1 each decision node influences all the successive decisions  since only the remaining time can be allocated at each step  to simplify the diagram  the links representing this influence are shown as short outgoing arrows 
　under these two conditions  shachter's transfor mation approach can be applied to evaluate the diagram but the complexity of this evaluation technique is high even with a small number of modules the reason is the exponential complexity of the algorithm combined with the fact that the discrete time variables may range over a large number of values as a result  solving the time allocation problem by standard evaluation techniques for influence diagrams is not practical 
　the question is what properties or reasonable restrictions can be introduced so as to reduce the complexity of the run-time resource allocation problem an efficient alternative solution will not only simplify the composition of contract algorithms but will also apply to a general class of resource allocation problems represented b  the above influence diagram these general resource allocation problems are characterized by the following three properties 
1 each computational element offers a trade off between resource consumption  not necessarily computation time  and output quality 
1 resource availability is limited  and 
1 conditional performance profiles can be constructed to characterize the dependency of output quality on input quality and resource allocation 
this class of resource allocation problems is  in general np-complete  zilberstein  1   but under a set of reasonable assumptions it can be solved efficiently by the compilation process described in the next two sections 
1 o p t i m a l resource allocation using off-line compilation 
as an alternative to the influence diagram solution  we developed a two-step solution baaed on  1  an off-line compilation process that derives the optimal allocation to the components for any given contract time  and constructs the best performance profile of the whole system  and  1  a run-time monitoring technique that determines the optimal overall contract tune m any given situation 
calculating 	the 	optimal 	c p p 	of the 	system 
when the computation time of each component of a system is known  we can easily derive the probability distribution of the output hence  for any given contract 

1 	planning 

time  we can in principle find the best apportionment of time to the components based on the resulting quality distribution  and the utility function of the system  we refer to this problem as global compilation of contract algorithms  since it solves the global optimization problem directly global compilation is analogous to evaluating the influence diagram of the previous section it is obviously an np-complete problem and cannot be solved even off-line for large programs  zilberstein  1  the local compilation technique presented in section 1 addresses this complexity issue 
calculating the optimal contract time suppose that the system has been compiled into a single contract algorithm  1  whose cpp is qa i ; r.  let sq be the current state of the domain  and let st represent the state of the domain at tune   let qt represent the quality of the result of the contract algorithm at time t  anr1 let ut  s t q  be the time-dependent utility function the optimal contract time is calculated as follows 
　due to uncertainly concerning the quality of the result of the algorithm  the expected utility of the result in state 1  at time / is represented b  
		 1  
k 
the probability distribution of future output quality is provided by the cpp of the algorithm due to uncertainty regarding the future state of the domain the ex pected utility of the results at time / is represented b  
		 1  
the probability distribution of the future state is calculated using a probabilistic model of the environment now  the optimal contract time  tc can be determined before the system is activated l   sohing the following equation 
		 1  
　as we mentioned earlier once an initial contract time is determined  several monitoring strategies can be used to modify the allocation based on the actual progress in problem solving in particular we have studied two strategies for contract adjustment  zilberstein  1  the first strategy re-allocates residual time among the remaining modules once the result of a module becomes available the second strategy adjusts the original contract each time an elementary component terminates in the latter case  the monitor considers the output provided by an intermediate computation as input to a smaller residual system composed of the remaining contract algorithms at that point  a better contract time can be determined that takes into account the actual quality of all the intermediate results generated so far 
　to summarize  the compilation and monitoring approach to meta-level resource allocation is a valuable alternative  provided that the off-line compilation process could be performed efficiently this is achieved by the local compilation technique described below 
1 	t h e optimality of local compilation 
in this section we show how the composition of contract algorithms can be solved efficiently by an off-line local compilation process the goal of the compilation process is to produce the best possible cpp of a composite module based on the cpps of the components instead of solving the global optimization problem directly  local compilation calculates the optimal cpp of an algorithm based on the cpps of its immediate components if those components are not elementary their cpps are calculated using local compilation as well 
　to simplify our analysis and to be able to guarantee both efficiency and optimality  we use the following three assumptions 
1 the input monotomcity assumption that the output quality of a contract algorithm improves as the quality of its mput s  improves this assumption is not only reasonable but also represents a desired property of every contract algorithm 
1 the bounded degree assumption that the number of inputs to each individual algorithm is bounded this assumption represents a good software engineering practice 
1 the tree-structured assumption that the structure of the program can be represented by a directed tree this is the only real restriction since general functional expressions have a dag representation but not necessanly a tree-structured one several techniques to remove this restriction and achieve optimal  or near-optimal  performance are described in  zilberstein 1  these techniques are analogous to the methods used to evaluate general bayesian networks  pearl  1  
1 o p t i m a l i t y of local c o m p i l a t i o n of deterministic c p p s 
we first prove the optimality of local compilation when the cpp of each contract algorithm is deterministic  that is  when the input quality and run-time determine exactly the output quahty under the above three assumptions  and without limiting the generality of the discussion  we will consider binary functions onl  and assume that the composite expression is a complete binary tree 

figure 1 a tree representation of a composite expression 
let f  j denote the jih function on the iih level of the tree the root node is denoted accordingly by f1 if 
	zilberstein 	1 


	1 	planning 

implies input monotomcity in such case  maximizing expected quality at each compilation step will yield the globally optimal results hence we get the following re-
	opttmaltty 	of local 	compilation 	of 
let e be a composite expression 
of an. arbitrary depth n whose conditional performance 
profiles satisfy the input linearity assumption  then for any input and contract time t 
proof an immediate result of theorem 1 and the input linearity assumption since for any linear function  j  
note that input linearity guarantees that 
the expected output quality of a module is a linear function of the qualities of its inputs  therefore we can simply maximize expected mput quality to guarantee maximal expected output quality d 
　obviously  the validity of the input linearity assumption cannot be generall} established however  we sug-
gest that it is a reasonable approximation even in those cases where the dependency is not totally linear based on passed experience with contract algorithms  the dependency of output quality on input quality follows a general pattern with very low input quality  the algorithm tends to fail very high input quality does not 
have a significant marginal effect on output quality but withing the middle range of possible input quality  the dependence is near-linear this has been the case with several algorithms that we have developed in the past we argue that the optimal operation of a system will normally result m a contract time that falls within the middle range boundaries  hence the linearity assumption is a good approximation further experimental work is needed to assess the validity of the last argument 
figure 1 it is not possible to determine which one of the following quality distributions is  better' without knowing the cpp that they affect 
　suppose  for example  that we compare two alternative allocations that produce the quality distributions shown in figure 1 it is impossible to determine locally which one is better based on expected quality or any other aspect of the distributions in particular  if low output quality has a  disastrous  effect on the system s performance  then the distribution that has a slightly 
lower expected value but a higher lower bound on qual-
ity may be better 
　the question is under what circumstances will the local optimization approach  based on expected quality  guarantee that the result is globally optimal a sufficient assumption is that the dependency of output quality on input quality is linear we call this assumption the input linearty assumption input linearity means that for any given time allocation  the probability of output quality 1 	a p p l i c a t i o n s of the c o m p i l a t i o n technique 
the advantages of compilation of contract algorithms have already been demonstrated by two applications in the area of mobile robot navigation  zilberstein and russell  1   using deterministic cpps  and in the area of model-based diagnosis  pos  1   using a slightly modified type of performance profiles  called statistical performance profiles  this paper extends those results by analyzing the use of probabilistic cpps that capture more accurately the performance of contract algorithms 
　another application of this work is to the evaluation of a general class of decision problems that normally arise in resource allocation when the resulting infiu 
ence diagram has the structure and properties described in section 1  it can be evaluated efficiently using the local compilation technique the idea of compiling cpps representing conditional probability matnces leads to a powerful tractable evaluation technique for such decision problems the technique is especially useful in real-time  jjc is a linear function of the mput qualities since weonly consider incredomains where the meta-level resource allocation prob-sing linear functions  input linearity 
lem must be solved quickly at run-tune 
	zilberstein 	1 

1 	conclusion 
contract algorithms offer a flexible building block for systems that must trade off decision quality for computational resources we have formalized the problem of resource allocation that arises m systems composed of contract algorithm and offered two solutions to the problem the first solution exploits existing algorithms for evaluation of influence diagrams but it is inefficient the second technique rehes on local compilation of cpps and is both efficient and optimal under certain conditions  most of which are satisfied by any system composed of contract algorithms we argue that the input linearity assumption  needed to guarantee the optimality of locaj compilation of probabilistic cpps  is a reasonable approximation and therefore it leads to near-optimal results 
　these results apply to the construction of a large class of ai systems that operate in domains with timedependent  predictable utility functions in addition  local compilation is a powerful technique for evaluation of decision models that share the structure of the influence diagram in section 1 for this type of resource allocation decisions  local compilation offers a significant complexity reduction based on the monotonicity of cpps 
　further work is needed to analyze the effect of nonlinear input-output dependency and to apply the results to larger systems composed of contract algorithms our ultimate goal is to provide an analytical foundation for the widespread use of reusable contract algorithms in various decision making applications 
a c k n o w l e d g e m e n t s 
support for this work was provided m part by the national science foundation under grant iri-1  research initiation award  and by a faculty research grant from the university of massachusetts 
r e f e r e n c e s 
 dean and boddy  1  t dean and m boddy an analysis of time-dependent planning in proceedings of the seventh national conference on artificial intelligence  pages 1  minneapolis  minnesota  1 
 garvey and lesser  1  a 	garvey and v 	lesser 
	design-to-time 	real-time scheduling 	in 	ieee 
	transactions 	on 	systems  	man 	and 	cybernetics  
1  1  1 
 grass and zilberstem  1  j grass and s zilberstem programming with anytime algorithms in proceedings of the ijcai-1 workshop on anytime algorithms and deliberation scheduling  montreal  canada  1 
 hayes-roth tt al  1  
b hayes-roth et al guardian a prototype intel ligent agent for intensive-care monitoring technical report ksi-1  stanford knowledge systems laboratory  stanford california 1 
1 	planning 
 horvitz  1  e j horvitz reasoning about beliefs and actions under computational resource constraints in proceedings of the 1 workshop on uncertainty in artificial intelligence  seattle  washington  1 
 howard and matheson  1  r a howard and j e matheson influence diagrams in principles and applications of decision analysis  vol 1  menlo park  california strategic decision group  1 
 mouaddib and zilberstem  1  a i mouaddib and s zilberstem knowledge-based anytime computation in proceedings of the fourteenth international joint conference on artificial intelligence  montreal  canada  1 
 pearl  1  j pearl probabilistic reasoning in intelligent systems networks of plausible inference los altos  california morgan-kaufmann  1 
 pos  1  a pos time-constrained model-based diagnosis master thesis  department of computer science university of twente  the netherlands  1 
 russell and wefald  1  s j russell and e h wefald principles of metareasoning artificial intelligence  1-1 
 russell and zilberbtein  1  s j russell and s zil berstein composing real-time systems in proceedings of the twelfth international joint conference on artificial intelligence pages 1  sydney  australia  1 
 shachter  1  r d shachter evaluating influence diagrams operation research 1  1  1 
 von neumann and morgenstern  1  von neumann and o morgenstern theory of games and economic behavior 1nd ed princeton  new jersey princeton university press  1 
 zilberstem  1  s zilberstem operational rationality through compilation of anytime algorithms ph d dissertation  computer science division  university of california at berkeley  1 
 zilberstein and russell  1  s zilberstem and s j russell anytime sensing  planning and action a practical model for robot control in proceedings of the thirteenth international joint conference on artifi cial intelligence  pages 1  chambery  france  
1 
 zilberstem and russell  1  s zilberstem and s j russell optimal composition of real-time systems artificial intelligence  forthcoming  1 
