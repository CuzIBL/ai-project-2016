 
the paper is concerned with the design of a module system for logic programming so as to satisfy many of the requirements of software engineering. the design is based on the language godel which is a logic programming language which already has a simple type and module system. the module system described here extends the godel module system so as to include parameterised modules. in particular  this extended system allows general purpose predicates that depend on facts and rules for specific applications to be defined in modules that are independent of their applications. 
	1 	introduction 
logic programming has been used extensively for representing and reasoning about knowledge bases. for large knowledge bases we require a means of segmenting the program so that small component parts of the knowledge base can be developed. these can then be used to build larger components  and so on  until the program is completed. these components are called modules. 
modules can be researched from a number of points of view including software engineering  object-oriented programming  and theory construction. we concentrate here on the software engineering use of modules and  in particular  the use of modules in program construction. there are a number of requirements for such a module system. 
1. there must be a means of combining mod-ules. this is normally achieved by allowing one module to import another. 
1. part of a module should be protected from unintended use by other modules. this is called encapsulation. usually a module is divided into two parts. one part defines a language that can be used by an importing 
    supported by serc grant gr/h/1 1 logic programming 
module. the other part extends this language with symbols only required locally. 
1. it should be possible to develop a mod-ule independently of other modules that it does not import. thus the import relation is normally restricted to defining a partial order on the modules in a program. the order of compilation of the modules must then respect this ordering. 
1. a module should be usable in as many con-texts as possible. a module providing an abstract data type such as a stack or a definition of an abstract relation such as transitivity needs to be re-usable and not tied to a specific application. 
the reasons for having types in logic programming languages are well known. the structure of the knowledge domain can be represented directly by means of type declarations. these declarations also define the intended use of the symbols and therefore protect the program from syntactic errors caused by misuse of the symbols. the language on which we have based our ideas is the logic programming language godel  hill and lloyd  1 . godel has a parameterised type system that supports generic but not inclusion polymorphism. moreover  godel has a simple module system that supports importation  encapsulation  and separate compilation as well as allowing for modules defining abstract data types. the godel module system does not support re-usable modules defining abstract relations such as transitivity. the parameterised module system described here extends the module system in godel so as to provide better facilities for defining abstract relations in re-usable modules. other authors have investigated modules for logic programming.  miller  1  extends prolog to provide a theory of modules over horn clauses. the modules are defined by nested implication with the  semantics based on intuitionistic logic. in this module system  the modules are dynamic in the sense that they are created and deleted at run time. thus a modification 

of sldnf-resolution is required for the procedural semantics. 
the module system given in  o'keefe  1  only deals with untyped programs where the predicates are considered to be local to the modules but the functions are assumed to be global. thus abstract data types cannot be defined. a number of prolog implementations supporting module systems similar to that described by o'keefe have been marketed.  sannella and wallen  1  describe a prolog module system based on the theory of modularity underlying the standard ml module system. this module system  extended to include types  provides all the facilities provided by godel. it also allows for a form of parameterised modules although the parameterisation is with respect to the module names instead of the symbols. however  the main difference is that a predicate must be defined in a single module  whereas  in our system  predicates that are parameterised can be defined in more than one module. the system is less flexible than the one described here but safer in that the predicates are better protected from unintended use. 
 goguen and meseguer  1  present eqlog which combines functional and logic programming. the language provides a parameterised module system which appears to be similar in function to the module system described in  sannella and wallen  1 . however  it is described in the framework of eqlog rather than prolog so that it is not immediately applicable to logic programming languages.  antoniou and sperschneider  1  divide a module into four parts; import  export  body  and parameter. the import and export parts use horn clauses to specify the imported and exported predicates. these are only used for the combination of the modules. exported predicates are also defined in the body part of the module. it is these definitions that are used in the execution of the program. the parameter part specifies generic predicates using full first order logic. importing modules supply the implementation for each of these predicates. this must be correct with respect to its specification. since each module has to denote a complete theory  every predicate in the module must be completely defined within the module. this disallows the more flexible system described in the current paper. the paper1 is organised as follows. in the next section  godel's module system is explained. we show how this can be extended to include parameterised modules. in section 1  we give a number of definitions associated with a modulefree typed logic program which are needed later. then  in section 1  we provide a formal definition of a modular program with parameterised modules. finally  section 1 outlines the intended semantics for such a program. 
1 	the godel language 
the module system in godel is best explained by means of an example1. 
export 	the 	jonesfamily. 
base 	person. 
coistait eve pat.bob tim mary: person. predicate mother father: person*person. 
local 	thejonesfaaily. 
father bob pat . 
mother pat mary   
export 	thejonesrels. 
import 	thejonesfamily. 
predicate anc: person * person. 
local thejonesrels  predicate par: person * person. 
par x y   - mother x y  v father x y . 
anc x.y   - par x z  * anc z y . anc x.y   - par x y . 
in both of the above modules there are a number of declarations and statements. the statements are formulas in the language defined by the declarations. there are two kinds of declaration: language and module. the language declarations begin with a key word that indicates the category1 of symbol being declared. in the jonesfaaily module  person is declared to be a base type; eve  pat  etc.  are declared to be constants of type person; mother and father are declared to be predicates with arguments of type person. in godel  a symbol name  for a given arity and category  must have at most one declaration in a module. each module is in two parts called export and local a part begins with a module declaration stating whether it is the export or local part and the name of the module. the export part contains language declarations for symbols that can be used in this module and also in other modules that import it. thus the type person can be used in thejonesrels as well as in either part of the jonesfamily. symbols declared in the local part of a module are only available for use within this part. hence  since thejonesrels declares par in the local part  par cannot be used outside this module. statements are only allowed in the local part of a 

l
   a version of this paper with several longer examples showing the use of parameterised modules is available as a 
   technical report.  hill  1  
1 par  rela  anc are short for parent  relations  ancestor. 
¡¡¡¡1 the categories are: type constructor  function  or predicate. a base  constant  or proposition is regarded as a constructor  function  or predicate  respectively  of arity 1. 
	hill 	1 

module. these define the predicates declared in either part of the module. the jonesrels also has a module declaration that begins with the key word import. this makes all the symbols declared in the export part of the jonesfamily available for use in the jonesrels. the example illustrates the many-sorted types in godel. however  in godel  we can also define generic functions and predicates. a common example of such a data structure is a list  which is defined to be a list of terms of a certain type  but the particular type to be used is not specified. for example  godel provides a system module lists. this module exports the type constructor list  constant mil  function cons  and predicate member with language declarations: 
coistructor l i s t / 1 . 
	coistant 	m i l : l i s t   a   . 
function cons: a*list a - list a . predicate meaber: a*list a . 
if the language included the base type int  then we have the types list  a   list  list  a    l i s t   l n t     l i s t   l i s t   i n t       etc. the tuples of types in a declaration is called a declared type. other types for wil  cons  and member can be obtained from their declared types by means of type substitutions. thus wil also has types list  int  and l i s t  list   i n t       cons has types int * l i s t   i n t   -  l i s t   i n t   and l i s t   i n t   * 
l i s t   l i s t   i n t     -  l i s t   l i s t   i n t       and 
	member 	has 	types 	int 	list  int  	and 
	l i s t   i n t   	* l i s t  list  int  . 
a definition of a constructor c is a set of function declarations with range type of the form 
c t1............ tn   or c  if the arity n is 1 . a definition of a predicate p is a set of statements 
with p in the head. 
a godel program for a module rn  called the main module  is the smallest set of modules 
that includes m and is closed wrt the modules named in the import declarations. the program must satisfy the following three conditions. 
ml the module names can be partially ordered so that if m1 occurs in an import declaration in a module named m then m'   m. 
m1 every symbol appearing in  the export part of  a module  must be declared in or imported into  the export part of  the module* 
m1 each constructor or predicate with a nonempty definition in a module must be declared in that module. 
these conditions enable independent compilation and protect procedures defined in one module from being modified by an-
1 	logic programming 
other. the set of modules {thejonesfamily  the jonesrels} form a godel program. in the example  a module containing general rules about family relations was forced  by the module system  to contain a declaration importing a module defining a specific family thereby preventing its reuse with other families. thus we propose to modify the above language to allow parameterised modules. in the next example  a rels module is parameterised wrt the base person and predicates mother and father. note that  here it is the thejones module that imports the rels module  whereas in the previous example  the importation was in the opposite direction. 
export 	thejones. 
import 	rels jones ma pa . 
base 	jones. 
predicate ma pa: jones * jones. 
coistait eve pat bob tin mary: jones. 
local 	thejones. 
pa bob pat . 
ma pat mary . 
export 	rels person mother father . 
base 	person. 
predicate mother father: person*person. predicate anc: person * person. 
local 	rels person mother.father . 
import 	trans person  par . 
predicate par: person * person. 
par x y   - mother x y  /father x y . anc x y   - tr x y . 
export 	trans point connect . 
base 	point. 
predicate connect: point * point. predicate tr: point * point. 
local 	trans point  connect . 
tr x y   - connect x y . 
tr x y   - connect x z  ft t r   z   y   . 
the module name that follows the key words 
export and local consists of an identifier with 1 or more symbols as arguments. the set of declarations for these symbols  which must be in the export part of the module  is called the signature of the module. for example  rels  person  mother  father  is a module name with identifier rels and signature 
base 	person. 
predicate mother father: person*person. 
symbols that are declared in a module but are not in the signature are said to be completely specified by the module. for example  the base jones is completely specified in thejones. the written module is the initial module  /nstances of these modules can be obtained by 

substituting new symbols for symbols occurring in the module name. the substituted symbols must be distinct from symbols completely specified by the initial module. thus the following module is imported into rels person  mother  father . 
export 	trans person par . 
base 	person. 
predicate par: person * person. predicate tr: person * person. 
local 	trans person par . 
tr x y   - p a r   x f y   . 
tr x y   - par x z  & t r   z . y   . 
note that if a symbol is completely specified in a module it is completely specified in every module that is an instance of this module. thus the predicate tr is completely specified by trans  point  connect  and trans person par .  trans person tr  could not occur in an import declaration in a module since tr is completely specified in trans  person  connect .  
we define a modular program in a similar way to the definition of a godel program above. informally  it is a set of initial modules with a main module  closed wrt the identifiers in the import declarations and satisfying similar module conditions to those given above. 
m l * the identifiers in the module names can be partially ordered so that if i' is an identifier in an import declaration in a module with identifier i then j1   /. 
m1* every symbol name appearing in  the export part of  a module m  must either be declared in  the export part of  m or be completely specified by the export part of a module that is imported into  the export part of  m. 
m1* each constructor or predicate name declared in or imported into a module and completely specified by an imported module n may only have a non-empty definition in n or in imported modules that are also imported into n. 
the set of modules 
{the j ones  
rels  person  mother  father   trans  point  connect  }  together form a modular program for the the jones. 
the previous example shows the way the module system works where each module imports no more than one module and each of the constructors and predicates is completely defined within a module. however  the parameterised module system allows for multiple inheritance and also for a predicate or constructor definition to be split between several modules. to illustrate this  we define another family named hill. due to marriage between the families  we create a new family with name hiluones. 
export thehilljonss hilljones ma pa . base hilljones. 
predicate ma  pa: hiluones * h i l l jones. import 	thejones hilljones na pa   thehills  hiljones  ma  pa . coistait pas: h i l u o n e s . 
local thehill jones  hiluones  ma  pa . 
ma mary pam . pa tom paa . 
export 	thehills hill ma pa . base 	h i l l . 
predicate ma pa: h i l l * h i l l . 
import 	rsls hill ma pa . 
comstait 	robin jill tom: h i l l . 
local 	thehills hill ma pa . pa robin ton . 

	hill 	1 


1 	logic programming 

hill 	1 