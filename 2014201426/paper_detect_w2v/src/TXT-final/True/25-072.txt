 
domain-oriented knowledge-acquisition tools provide efficient support for the design of knowledge-based systems. however  the cost of developing such tools is high  especially when their restricted scope is taken into account. developers can use metalevel tools to generate domain-oriented knowledge-acquisition tools that are custom tailored for a small group of experts  with considerably less effort than is required for manual tool development. an epistemic obstacle to creating such metatools is the specification model for tar-
get knowledge-acquisition tools. the metatool dots is based on an abstract-architecture approach to the specification and generation of knowledge-acquisition tools. dots is domain and method independent  because it is based on an architectural model of the target knowledgeacquisition tool. 
1 	introduction 
many knowledge-acquisition tools are unsuitable for their tasks because they are adapted neither to the application domain  not to the requirements of individuals  such as developers and experts. researchers in knowledge acquisition are experimenting with knowledgeacquisition tools custom tailored for specific domains  gale  1; musen et al  1 . usually  such domainoriented knowledge-acquisition tools are more useful than are general knowledge-acquisition tools  because custom-tailored tools can meet the requirements of the particular knowledge-acquisition situation. 
   simultaneously  traditional knowledge engineering and expertise transfer is being replaced gradually by methodologies where developers assemble problem solvers for knowledge-based systems from reusable 
   *the preparation of this manuscript has been supported in part by grants lm1 and lm1 from the national library of medicine  by gifts from digital equipment corporation  and by scholarships from the swedish institute  from the fulbright commission  and from stanford university. the development of dots has been supported by the swedish national board for industrial and technical development  nutek . 
1 	knowledge base technology 
method components that accomplish subtasks  chandrasekaran  1; steels  1 . in mcdermott's  approach  developers use method-specific knowledgeacquisition tools to acquire the domain knowledge required by the methods. method-oriented knowledgeacquisition tools  however  are not domain oriented per se; they must be adapted to specific domains and individuals. 
   developers of knowledge-based systems wishing to use domain-oriented knowledge-acquisition tools face several barriers: it is difficult and laborious for developers of knowledge-based systems to adapt existing knowledgeacquisition tools  and to implement new domain-oriented knowledge-acquisition tools for new domains. another barrier is that the investment of developing and maintaining domain-oriented tools cannot always be justified within the budget of a single application project. many of these barriers can be eliminated by tools that enable developers to generate new domain-oriented knowledgeacquisition tools from high-level descriptions. such metatools can simplify the task of developing domainoriented knowledge-acquisition tools  and can reduce significantly the work required to implement these tools. thus  metatools can make domain-oriented knowledgeacquisition tools feasible in situations where these tools could not be used previously. the knowledge-acquisition tools generated can then support the development of the target knowledge-based systems. 
   the design of metatools presents several epistemological and technical challenges. the way developers view knowledge acquisition affects the way that they design knowledge-acquisition tools. the developer's view of target knowledge-acquisition tools determines the appropriate specification strategy for target knowledgeacquisition tools in metatools. automatic generation of such knowledge-acquisition tools requires a high-level description-or metaview-of the target tools  eriksson and musen  in press . for example  protege  musen  1  is a metatool that generates a domain-oriented knowledge-acquisition tool from an instantiation of a generic problem-solving method. the drawbacks of method-oriented metatools  such as p r o t e g e   are that the problem-solving method supported cannot be replaced easily  and that such metatools do not handle combined methods well. 
	we 	have 	formulated 	a 	metaview  	the 	abstract-

architecture view  for specification of target knowledge-
acquisition tools in metatools. the abstract-architecture view is based on a decomposition of the major functions in target knowledge-acquisition tools. in this approach  developers instantiate and combine subcomponents into specifications of target knowledge-acquisition tools  which are then used to instantiate target tools. d o t s 1 is a metatool that implements the abstractarchitecture view  eriksson  1 . d o t s allows developers to custom tailor knowledge-acquisition tools for new domains with minimal effort. d o t s is domain and method independent in the sense that it does not assume any particular domain  or problem-solving method  for the knowledge-acquisition tools it generates. dots assumes that the target knowledge-acquisition tools are based on graphical knowledge editing; the target knowledge-acquisition tools comprise several knowledge editors in which the experts enter their knowledge actively according to their conceptual model of the do-
main. 
1 	design of knowledge-acquisition tools 
knowledge-acquisition tools can be based on several models-for example  models of cognition  models of knowledge representations  and models of problemsolving methods. musen  describes three basic conceptual models for interactive knowledge-acquisition tools: symbol-level  task-oriented  and method-oriented conceptual models. the supportive power and the scope of a knowledge-acquisition tool follow from the model supported. moreover  we can conceive many models for metatools. the essence of a metatool is the model for the target knowledge acquisition tools that the metatool supports. we use the term metaview for such specification models for knowledge-acquisition tools. we divide the development process for knowledge-acquisition tools into three major stages: 
1. knowledge-acquisition analysis: in this stage  the developer analyzes the domain and the task  and outlines the requirements for the knowledgeacquisition tool. the developer must acquire domain knowledge manually to determine the features required by the knowledge-acquisition tool. 
1. tool specification: in this stage  the developer models the knowledge-acquisition tool. when a metatool is used  the result of this stage is a specification that conforms to the metaview supported by the metatool; otherwise  the result is a regular software specification. 
1. tool implementation: in this stage  the developer- or the metatool-implements the knowledgeacquisition tool. metatools transform the tool specification developed in step 1 to an operational program. 
¡¡developers can model domains independent of the problem-solving method through specification approaches  such as knowledge-level analysis  newell  1  
dots is an acronym for domain-oriented tool support. 
and ontological analysis  alexander et al.  1 . however  in the general case  the transformation from such models into a high-quality knowledge-acquisition tool is nontrivial. target knowledge-acquisition tools must be designed by developers in cooperation with the tool users  e.g.  domain experts . we seek appropriate knowledge-level descriptions for domain-oriented knowledge-acquisition tools  rather than descriptions of domains or descriptions of problem-solving methods   because knowledge-acquisition tools are different from target systems. our research objective is to develop metaviews for domain-oriented knowledge-acquisition tools that are general; that is  they are not restricted  for instance  to a particular problem-solving method. 
¡¡we have developed a rnetaview for target knowledgeacquisition tools that comprises generic building blocks for knowledge-acquisition tools-for instance  generic user-interface components for interactive knowledge editing  generic knowledge representation structures for internal use in the knowledge-acquisition tool  and generic knowledge-base generators that produce target knowledge bases. this abstract-architecture view incorporates architectural components of knowledgeacquisition tools at an abstract level. the abstractarchitecture view provides the developer with a conceptual model of the target knowledge-acquisition tool that is based on the tool's architecture. developers can specify a broad variety of knowledge-acquisition tools by specifying such building blocks and by defining the relationships among them. a metatool can automate stage 1 by transforming such specifications into an implementation of the knowledge-acquisition tool. 
1 	generation of knowledge-acquisition tools 
d o t s is a metatool that supports the abstractarchitecture view. d o t s allows its users to edit interactively an abstract-architecture specification of the target knowledge-acquisition tool. from this specification  dots produces an operational knowledge-acquisition tool that experts can use to develop knowledge bases. we shall discuss briefly the specification of knowledgeacquisition tools in dots. the details of the dots implementation in described in  eriksson  1 . 
1 	specification m o d e l 
the abstract-architecture view comprises four component types  each of which constitutes a stage in the acquisition and generation of knowledge bases in knowledgeacquisition tools  see figure 1 . in this model  knowledge editors handle the user dialog; for instance  there are form-based and graph-oriented knowledge editors. also  there are knowledge modules that represent the knowledge acquired by these knowledge editors. the relationships among the knowledge editors and the knowledge modules are defined by update rules. finally  there is a description language of transformation rules that allows the developer to specify the knowledge-base generator of the target knowledge-acquisition tool. specifically  the four component types in the abstract-architecture view 
	eriksson 	1 

e xpert 
figure 1: the model of the target knowledge-acquisition tools. the expert interacts with knowledge editors. update rules map the contents of the knowledge editors to an internal representation-the knowledge modules. a knowledgebase generator driven by transformation rules transforms the knowledge modules to a target knowledge base. dots allows developers to edit the knowledge-acquisition-tool specification according to this abstract-architecture view. are defined as follows: 
1. knowledge editors: the knowledge editors allow experts to enter and edit domain knowledge according to the experts' conceptual domain model. examples of knowledge editors are domain-specific forms and graph editors. the knowledge editors are part of the user interface of the target knowledge- acquisition tool; they operate on the internal knowledge representation in the knowledge-acquisition tool  and provide views of the representation. 
in dots  developers can custom tailor the user interface of target knowledge-acquisition tools by specifying and refining knowledge editors  such as menu layouts  window-system behavior  and editor properties  see figure 1 . d o t s provides predefined types of knowledge editors for various types of knowledge  and also can allow the introduction of userdefined knowledge editors. figure 1 shows a formlayout editor provided by dots. developers use this tool to design layouts for form-based knowledge editors. the resulting form-based knowledge editor is shown in figure 1. note that this example is consistent with the fixes in the sisyphus vt task.1 
1. knowledge modules: the knowledge modules provide encapsulation and manipulation of the internal knowledge representation of the target knowledgeacquisition tools. the information that the expert enters in the knowledge editors is stored in knowledge modules. furthermore  the knowledge modules serve as an intermediate representation in the transformation of the knowledge acquired into the target knowledge base  see figure 1 . 
1. update rules: update rules preserve consistency among the knowledge editors and the knowledge modules in the target knowledge-acquisition tools. 
1
¡¡¡¡the sisyphus experiment is an attempt by the knowledge-acquisition community to provide a set of standard problems that researchers can use to compare their approaches to knowledge acquisition and problem solving. the sisyphus vt task is based on the vt system for elevator configuration  marcus et al.  1   
1 	knowledge base technology 
the specification of the update rules defines the mapping between the knowledge presented and edited in the knowledge editors and the knowledge modules. 
transformation rules: the knowledge-base generator of the target knowledge-acquisition tool generates the knowledge bases. in the dots approach  the knowledge-base generator is based on trans-
formation rules that map knowledge represented by the knowledge modules into the appropriate knowledge-base structures  e.g.  classes  instances  and rules . generally  the rule preconditions of the transformation rules refer to the contents of knowledge modules  whereas the rule conclusions refer to structures in target knowledge bases. in other words  the transformation rules define the denota-

figure 1: the specification of knowledge editors in dots. a sample user-defined knowledge editor  fix-ke  is highlighted in the knowledge-editor hierarchy. the developer uses an editor comprising subeditors for slots  menu layout  window properties  and attached menu to define the details of the knowledge editor  lower right . 


figure 1: the editing of the layout for a form-based knowledge editor. dots provides this graphical tool  which developers can use to custom tailor forms for the domain-in this case  elevator configuration  marcus el at.  1 . 

figure 1: the resulting form-based knowledge editor in the target knowledge-acquisition tool. in this example  the experts use this form to specify fixes for constraint violations. 
tional semantics for the knowledge that the target knowledge-acquisition tools acquire  because  currently  the knowledge-acquisition tools do not interpret the knowledge modules. 
we have found the concepts of knowledge editors  knowledge modules  update rules  and transformation rules to be sufficient building blocks for interactive knowledgeacquisition tools based on graphical knowledge editing. other types of knowledge-acquisition tools  such as interview-oriented tools that elicit knowledge through a textual dialog with the expert  might require other sets of components  kawaguchi et a/.  1 . 
1 	generation of target tools f r o m d o t s 
the dots code generator takes as input the user's specification of the target knowledge-acquisition tool and produces code for the target knowledge-acquisition tool. the code generator is based on a set of transformation rules that maps abstract-architecture specifications  e.g.  components descriptions  into constructs constituting the target knowledge-acquisition tool. the transformation rules are similar to those used by the target knowledge-acquisition tools for knowledge-base generation. the code generated is intended to run with a run-time library consisting of core functions required by the target knowledge-acquisition tool-for example  functions for window management  internal bookkeeping  persistent storage  and knowledge-base generation. 
1 generation of knowledge bases f r o m target tools 
the generic knowledge-base generator is an important component of the target knowledge-acquisition tools. we shall provide an example that illustrates how target knowledge bases are generated from the contents of knowledge modules. this example is loosely based on the sisyphus vt task. suppose that we want to generate rules from the information entered in the fix form  figure 1 . we assume that the developer has already defined the knowledge editor and the appropriate knowledge module for representing the information acquired. the task of the know ledge-base generator is to produce appropriate rules from such knowledge modules. for the form shown in figure 1  we wish to generate an instance of the fix class for the knowledge base  in this example: 
 definstance increase pit depthl of fix 
 desirability 1  
 variable pit depth  
 action increase  
 amount 1  
 description  try increasing...    
   in dots  transformation rules map the knowledge modules to the target knowledge base. figure 1 shows a sample transformation rule  generate-1  that produces target instances from the knowledge modules. the 
clause  states that the transformation rule is applicable to all knowledge modules of type f ix-km  and that the variable is bound to a knowledge-module instance during the generation process . the precondition of the transformation rule tests whether the user has filled in 
	eriksson 	1 


figure 1: a transformation rule that maps the contents of the fix form to a an instance of the fix class in the target knowledge base. 
the variable field in the fix form  figure 1 . if the precondition is satisfied  the conclusion of the transformation rule builds an instance of the class fix in the target knowledge base. if the expert has entered several fix-km into the knowledge-acquisition tool  several instances of the generate-1 transformation rule may generate multiple target instances. the purpose of the build-instance clause is to provide a convenient syntax for instance generation  and to allow the knowledge-acquisition tool to maintain the target knowledge base as the knowledge modules change  by adding and deleting rules from the knowledge base. 
¡¡an alternative to using instances of the fix class to represent fixes in the knowledge base  is to use production rules to represent the fixes. in this case  the production rules would implement fix operations  e.g.  increase a state variable . by using a build-rule clause  we can define readily a transformation rule that generates production rules from the contents of the fix-km knowledge module. in this approach  the user interface of the knowledge-acquisition tool and the fix form  figure 1  would remain the same after we modified the transformation rule. by using this technique  we can defer de-
sign decisions about the knowledge representation in the knowledge base until we have acquired a significant body of knowledge. 
1 	related work 
the principal work with which the abstract-architecture approach and its implementation in dots should be compared is protege  musen  1 . protege implements a metaview that is based on a generic problem-solving method: skeletal-plan refinement  tu et al.  1 . however  this method-oriented view is restricted to a single problem-solving method. a subsequent project  protege-il  generalizes protege  and removes some of these restrictions  puerta et al.  1 . spark  burn  and firefighter  sbf   marques et ai  1  form a set of tools designed to make programming easier by providing reusable programming constructs  or mechanisms. spark helps the developer to identify and combine rele-
1 	knowledge base technology 
vant mechanisms from a library. in the sbf approach  each mechanism in the library is supported by a corresponding knowledge-acquisition tool. sis  kawaguchi et al.  1  is a metatool that supports a metaview similar 
to the abstract-architecture view. sis  however  generates knowledge-acquisition tools that interview experts through a textual question-and-answer dialog. 
¡¡protege  sbf  and other metatools that support method-oriented views require less modeling than dots does  because the former metatools draw their power from assumptions on knowledge acquisition for the problem-solving method supported  and because these metatools use a priori knowledge-acquisition tool designs. compared to protege and sbf  dots trades supportive power for generality  and requires the developer to perform a knowledge-acquisition analysis that results in an overall tool design. dots differs from toolboxes that support programmers in the implementation of knowledge-acquisition tools in conventional programming languages  gappa  1  by providing an abstract and coherent architectural view  which hides from the developer the details of the run-time library of the knowledge-acquisition tools. 
1 	summary and discussion 
although domain-oriented knowledge-acquisition tools provide effective support for the development of knowledge-based systems  the task of implementing such domain-oriented tools is laborious  eriksson  1; gale  1; musen et ai  1 . previous approaches to automatic generation of knowledge-acquisition tools  such as protege  have relied mainly on method-oriented views for the specification  which  unfortunately  make the metatools specific to the problem-solving methods of the target knowledge-based systems. the abstractarchitecture view and dots contribute to knowledge acquisition by enabling developers to construct domainoriented knowledge-acquisition tools. 
¡¡the dots project demonstrated that the abstractarchitecture view can be used for method-independent specification of knowledge-acquisition tools  and that the tools generated automatically from such specifications are comparable to hand-crafted tools. for instance  we have used dots to generate a basic knowledgeacquisition tool for the sisyphus vt task. given a domain ontology  the development time for this knowledgeacquisition tool was about 1 hours. because the problem definition is based on the vt system and the associated domain  the knowledge-acquisition tool generated performs a knowledge-acquisition task similar to that of salt  marcus and mcdermott  1   a knowledgeacquisition tool developed for the original vt system  marcus et ai  1 . 
¡¡another general conclusion is that the abstractarchitecture view is sufficient for specification of graphical knowledge-acquisition tools that provide knowledgeediting support for domain experts. in our approach  a generic knowledge-base generator  which is parameterized by transformation rules  provides flexibility in terms of output knowledge bases from the knowledgeacquisition tools. 

¡¡although we can remove most domain and method restrictions by using the abstract-architecture view  this approach uncovers other obstacles. although dots is method independent  it is restricted in terms of the types of knowledge-acquisition tools that it can generate. in dots  the design space of the target knowledgeacquisition tools is restricted to knowledge-acquisition tools with a common basic architecture. d o t s cannot generate easily other knowledge-acquisition tools  such as repertory-grid based tools and machine-learning tools. however  this restriction has not been a severe hindrance in practical development  because we are mainly interested in generating domain-oriented knowledge-acquisition tools that support the experts' domain models. 
¡¡we have applied dots to several domain tasks. for instance  we have used dots to develop a knowledgeacquisition tool for a knowledge-based system that troubleshoots dna sequencing machines1  eriksson and larses  1 . also  we are currently formulating metaviews that bridge the protege and dots approaches by providing multiple perspectives. we are developing a metatool  dash  that supports knowledgeacquisition analysis  and that helps developers to design target knowledge-acquisition tools from domain ontologies  i.e.  class definitions . 
acknowledgments 
i thank sture hagglund  mark musen  and kristian sandahl for valuable discussions about dots  and i am grateful to lyn dupre for editorial assistance. the examples based on the sisyphus vt task benefited from discussions with john gennari and thomas rot hen flub. 