ion techniques 
giuliano armano  giancarlo cherchi  eloisa vargiu 
department of electrical and electronical engineering 
university of cagliari 
　　　1  cagliari  italy armano  cherchi  vargiu  diee.unica.it 

abstract 
this paper presents a parametric system  devised and implemented to perform hierarchical planning by delegating the actual search to an external planner  the  parameter   at any level of abstraction  including the ground one. aimed at giving a better insight of whether or not the exploitation of abstract spaces can be used for solving complex planning problems  comparisons have been made between instances of the hierarchical planner and their non hierarchical counterparts. to improve the significance of the results  three different planners have been selected and used while performing experiments. to facilitate the setting of experimental environments  a novel semi-automatic technique  used to generate abstraction hierarchies starting from ground-level domain descriptions  is also described. 
1 introduction 
there is experimental evidence that humans repeatedly use abstractions while solving different kinds of problems  stillings et ai  1   thus justifying the research in the field of automated hierarchical planning. 
　it is apparent that abstraction is usually not effective on simple problems  due to the overhead introduced by the need of going back and forth across abstract spaces while performing the search. in other words  enforcing abstraction on simple problems may end up by wasting computational resources. yet  under certain assumptions abstraction can significantly reduce the search time when applied to complex problems  knoblock  1 . 
　in order to investigate the impact of abstraction mechanisms on the search complexity  we devised and implemented a hierarchical wrapper able to embody any domain-independent planner provided that a compliance with the strips subset of pddl 1 standard  mcdermott et al  1  is ensured. the embodied planner is exploited at any level of the hierarchy  each level being characterized by its own definitions. a suitable decoupling between levels is guaranteed by using domainspecific rules that establish the correspondence between entities belonging to a level and its superior. translation rules are given in a pddl-like format  explicitly defined to support abstractions. 
　experiments have been performed on some classical planning domains  widely acknowledged by the planning community -although not specifically tailored for abstraction. to better assess the significance of the results  three different planners have been used while performing experiments. 
　the remainder of this paper is organized as follows: first  some relevant work on planning by abstraction is briefly recalled  to give the reader a better insight of the issues deemed relevant. then  the overall architecture of the system is illustrated  including the semi-automatic technique we developed for generating abstract spaces. subsequently  experiments are described and results are discussed. finally  conclusions are drawn and future work is outlined. 
1 related work 
building an ordered set of abstractions for controlling the search has proven to be an effective approach for dealing with the complexity of planning tasks. this technique requires the original search space to be mapped into corresponding abstract spaces  in which irrelevant details are disregarded at different levels of granularity. 
　two main abstraction mechanisms have been studied in the literature: action- and state-based. the former combines a group of actions to form macro-operators  korf  1 . the latter exploits representations of the domain given at a lower level of detail; its most significant forms rely on  i  relaxed models  obtained by dropping operators' applicability conditions  sacerdoti  1   and on  ii  reduced models  obtained by completely removing certain conditions from the problem space  knoblock  1 . both models  while preserving the provability of plans that hold at the ground level  perform a  weakening  of the original problem space  thus suffering from the drawback of introducing  false  solutions at the abstract levels  giunchiglia and walsh  1 . 
　as for knoblock's abstraction hierarchies  each predicate is associated with a unique level of abstraction according to the constraints imposed by the ordered monotonicity property  knoblock  1 . any such hierarchy can be obtained by progressively removing certain predicates from the domain  or problem  space. 
　from a general perspective  let us assume that abstractions might occur on types  predicates  and operators. relaxed models are a typical example of predicate-based abstraction  whereas macro-operators are an example of operator-based abstraction. 
1 system architecture 
the system has been called hwq  standing for  parametric  hierarchical wrapper. note that square brackets are part of the name  indicating the ability to embed an external planner; being p any such planner  the notation hw p  shall be used to denote an instance of hw able to exploit the planning capabilities of p. 
　figure 1 illustrates the architecture of the system  focusing on its main components  i.e.  an engine and the embedded planner. the former is devoted to controlling the communication between adjacent levels  whereas the latter is exploited to perform planning at any given level of abstraction. 
　any domain-independent planner can be embodied within the system  provided that compliance with the strips subset of the pddl 1 standard is ensured. 

figure 1. the architecture of the system. 
　although the system supports a multiple-level hierarchy  for the sake of simplicity  in the following we assume that only one abstract level exists  giving rise to a two-level  i.e.  ground and abstract  hierarchical description. 
1 the planning algorithm 
once instantiated with an external planner p  hw p  takes as inputs a ground-level problem and a structured description of the corresponding domain  including a set of rules to be used while mapping ground into abstract states and vice-versa. in fact  to perform planning at different levels of abstraction  the engine of hw must operate bi-directional translations  upwards and downwards  to permit communication between adjacent levels. 
　to find a solution of a given problem  first the engine of hw p  translates the init and goal sections from the ground to the abstract level. p is then invoked to search for an abstract solution. subsequently  each abstract operator is refined by repeatedly invoking p. the refinement of an abstract operator is performed by activating p  at the ground level  on the goal obtained by translating downward its effects. note that the initial state of each refinement depends on the previous refinement; hence  refinements must be performed according to the order specified by the abstract plan. to avoid incidental deletion of subgoals already attained during previous refinements  they are added to the list of subgoals that results from translating downward the effects of the current abstract operator to be refined. 
　when the attempt to refine the current abstract solution fails p is invoked to find the next abstract solution    unless the number of abstract solutions found so far exceeds a given threshold  if no abstract solution could be successfully refined  to ensure the completeness of the algorithm  an overall search is performed at the ground level. the whole process ends when a ground solution is found or the overall search fails. 
1 extending pddl for dealing with abstraction 
a problem and its corresponding domain are described in accordance with the standard pddl 1 syntax  using the '''define problem  and  define domain  statements  respectively. to describe how bi-directional communication occurs between adjacent levels an extension to the standard pddl has been devised and adopted. 
　more precisely  the syntactic construct  define hierarchy  has been introduced. it encapsulates an ordered set of domains  together with a corresponding set of mappings between adjacent levels of abstraction. since the mappings are given in term of types  predicates and operators  three subfields have been introduced  i.e.  : types  : predicates  and : actions   to represent the abstraction over such dimensions. the general form of the construct is: 
 define  hierarchy  name   
 :domains  domain-name *  
 imapping   src-domam   dst-domain   
 :types  types-def   
	 :predicates 	 predicates-def   
 tactions  actions-def    *  
　the following notation is adopted in the : types field to represent a clause for mapping types: 
	 abstract-type 	ground-type  
　it specifies that ground-type becomes abstract-type while performing upward translations. to disregard a type  the following notation must be used: 
 due to the limitations of most of the existing planners  the process of incrementally querying for another solution may be simulated by preliminarily querying for m abstract solutions  to be released incrementally on demand. 

planning 	1 

tabic 1. heuristics for pruning the operators1 graph. 
 nil ground-type  
moreover  the following notation is adopted in the 
:predicates field to represent a clause for mapping predicates: 

　it specifies that ground-predicate must be preserved while going upward and vice-versa. note that  if no differences exist in mapping a predicate between adjacent levels  the corresponding clause can be omitted. 
　to disregard a predicate while performing upward translations  the following notation is used: 
 nil 
 ground-predicate 	 pl1 	t l 1  p1 - t1 ...    
　it specifies that ground-predicate is not translated into any abstract-level predicate. 
　in addition  abstract-predicate can be expressed as a logical combination of some ground-level predicates. 
　to describe how to build the set of operators for the abstract domain  in the -.actions field  four kinds of mapping can be expressed: 
- an action remains unchanged or some of its parameters are disregarded; 
- an action is removed; 
- an action is expressed as a combination of actions belonging to the ground domain; 
- a new operator is defined from scratch. 
1 generating abstractions 
to facilitate the setting of abstract spaces  as an alternative to the hand-coded approach used in  armano et ai  1   a novel semi-automatic technique for generating abstraction hierarchies starting from ground-level domain descriptions has been devised and adopted. 
　from our particular perspective  performing abstraction basically involves executing two steps:  i  searching for macro-operator schemata through a priori or a posteriori analysis   ii  selecting some of the schemata evidenced so far and translating them into abstract operators. 
　in this subsection  we concentrate on the task of finding macro-operator schemata throughout an a-priori analysis performed on the given domain and problem  rather than adopting the a-posteriori technique illustrated in  armano and vargiu  1   aimed at finding macrooperator schemata according to a post-mortem analysis performed on plan  chunks . 

　step  i  is performed by an algorithm for building and then pruning a directed graph  whose nodes represent operators and whose edges represent relations between effects of the source node and preconditions of the destination node. in particular  for each source node a and for each destination node b  representing operators defined in the given domain  the corresponding edge is labeled with a pair of non-negative numbers  denoted by the pair accounts for how many predicates a can establish  and negate  that are also preconditions of b. it is worth noting that source and destination node may coincide  thus giving rise to a self-reference. 
　pruning is performed according to the domainindependent heuristics reported in table 1. note that the pruned graph does not contain edges labeled  the corresponding operators being completely independent. 
　at this point  the most promising macro-operator schemata can be easily extracted from the pruned graph  each path being related with a candidate macro-operator. 
 1  

figure 1. the directed graph  before pruning   representing static relations between operators of the blocks-world domain. 
   as an example  let us consider the well-known blocksworld domain  encompassing four operators: stack  pickup  unstack  put-down. the corresponding graph is shown in figure 1. bearing in mind that the same mechanism has been applied to all operators' pairs  let us concentrate 
-for instance- on the relation that holds between stack  source node  and pick-up  destination node . 
considering that the effects of the stack operator are: 
 not  holding  x   
 not  clear  y   
 clear  x  
 handempty   on  x  y  and that the preconditions of the pick-up operator are: 
 clear  x  
 ontable  x   handempty  
we label the corresponding edge with the pair  it is apparent that stack establishes two preconditions for 
pick-up  while negating another. 
as for the pruning activity  figure 1 shows the result-
ing graph for the blocks-world domain.1 the resulting macro-operator schemata are   ;  being used for concatenation : pick-up;stack  unstack;put-down  pick-up ;putdown  and stack;unstack. 

figure 1. the directed graph  after pruning   representing static relations between operators of the blocks-world domain. 
　step  ii  is performed by selecting a subset of the resulting macro-operator schemata  and by translating them into abstract operators. in principle  generating an abstract operator is not a deterministic task; for this reason in the current implementation of the system this mechanism has not yet been completely automated. nevertheless  the simplest way of generating an abstract operator consists of deleting from the abstract level all predicates that do not occur among preconditions or effects of any selected macro-operator. this process influences  and is influenced by  the translation rules that apply to both types and predicates. for instance  the absence of a predicate as a precondition or effect of any induced abstract operator entails its deletion from the abstract level. 
　as for the blocks-world example  two macro-operator schemata have been disregarded  i.e.  stack.unstack and pick-up;put-down   as they do not alter the state of the domain  the resulting set of effects being empty . in fact  it is apparent that they are composed of complementary actions. 
　it is worth pointing out that the approach described above can be used also for generating abstractions tailored to a given problem  by simply adding a dummy operator representing the goal s  of the problem itself. this  goal  operator has only preconditions  its set of effects being empty   representing a logic conjunct of predicates that characterize the goal of the input problem. in this way  all sequences deemed relevant to solve the problem are easily put into evidence  as they end with the  goal  operator . 
1 experimental results 
the current prototype of the system has been implemented in c++. experiments have been performed with three planners: graphplan  blum and furst  1   blackbox  kautz and selman  1   and lpg  gerevini and serina  1 . in the following  gp  bb  and lpg shall be used to denote the graphplan  
blackbox  and lpg algorithms  whereas hw gp   

 since we are interested in finding macro-operators  we do not take into account self-references. 
planning 	1 

hw bb   and hw lpg  shall be used to denote their hierarchical counterparts. 
　to assess the capability of abstraction to improve the search  we performed some tests on five domains taken from the 1  1  and 1 mps planning competitions  long  1; bacchus  1; long  1 : elevator  logistics  blocks-world  gripper  and zeno-travel. experiments were conducted on a machine powered by an intel celeron cpu  working at 1 mhz and equipped with 1mb of ram. a time bound of 1 cpu seconds has also been adopted. 
# gp /gp/ bb hw lpg hw lpg elevator 1 1.1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 - 1 1 1 logistics 1 1.1 1 1 1 1 -1 1 1 1 1 1   1 ~ 1 1 1 1    1 -1 1 1 1 -1 -1 1 1 1 -1 -1 1 	1 1 blocks-world 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ---1 1 1 1 1 ----1 1 1 1 1 --1 1 1 1 ~ --.. 1 1 1 ~ ----1 1 1 -~ -1 1 1 1 	---1 1 1 -~ --1 1 zeno-travel 1 1 1 1 1 1 1 1 -1 1 1 1 1 1 --- 1 1 1 1 1 ~ -1 1 1 1 1 --1 1 1 1 1 	-	--1 | 	1 1 gripper 11 1 1 	1 1 1 1 1 1 1 	1 1 1 1 1 1 1 	1 1 1 1 1 1 1 	1 1 1 1 --1 1 	1 1 1 	1 	| 	-1 | 	1 1 1 table 1. performance comparison of bb  gp  and lpg with their hierarchical counterparts. 
　all domains have been structured according to a ground and an abstract level  the latter having been generated following the approach described in the previous subsection. for each domain  several tests have been performed -characterized by increasing complexity. table 1 compares the cpu time of each planner over the set of problems taken from the aips planning competitions. dashes show problem instances that could not be solved by the corresponding system within the adopted timebound. 
elevator. experiments show that -for gp and bb- the 
cpu time increases very rapidly while trying to solve problems of increasing length  whereas hw gp  and hw bb  keep solving problems with greater regularity 
 although the relation between number of steps and cpu time remains exponential . lpg is able to solve long plans in a very short time  thus doing away with the need to resort to hw lpg . 

figure 1. cpu time comparisons in the blocks-world domain. 
　logistics. in this domain gp easily solves problems up to a certain length  but it is unable to solve problems within the imposed time limits if a given threshold is exceeded. on the other hand  hw gp  succeeds in solving problems of increasing length without encountering the above difficulties. bb performs better than hw bb  for small problems  whereas hw bbj outperforms bb on more complex problems. lpg is able to solve long plans in a few seconds at the most. for unknown reasons lpg was not able to refine any abstract operator when invoked by the engine of hw  lpg . 
　blocks-world. tests performed on this domain reveal a similar trend for gp and hw gp   although the latter performs slightly better than the former. bb performs better than hw  bb  for simple problems  whereas hw bb  outperforms bb on problems of medium complexity. lpg is able to solve problems whose solution length is limited to 1 steps. in this domain  hw lpg  clearly outperforms lpg on more complex problems. 

figure 1. cpu time comparisons in the blocks-world domain. 
　zeno-travel. unfortunately  in this domain  neither gp nor hw gp  are able to successfully tackle most of the problems of this domain. an improvement of hw bb  over bb can be observed  similar to the one shown for the blocks-world domain. lpg is able to solve long plans in a few seconds at the most  thus avoiding the need to resort to hwflpgj. 
　gripper. for the gripper domain  both hw gp  and hw bb  clearly outperform their non-hierarchical counterparts. lpg is able to solve long plans in a very short time. 
for the sake of brevity  only two plots  i.e.  figures 1-
1 concerning the blocks-world domain  of relative performances -i.e. non hierarchical vs. hierarchical- are reported. 
1 conclusions and future work 
in this paper a parametric system has been presented  devised to perform hierarchical planning by delegating the actual search to an external planner  the parameter . aimed at giving a better insight of whether or not the exploitation of abstract spaces can be useful for solving complex planning problems  comparisons have been made between any instances of the hierarchical planner and its non-hierarchical counterpart. 
　to better investigate the significance of the results  three different planners have been used to make experiments. to facilitate the setting of experiments  a novel semi-automatic technique for generating abstract spaces has been devised and adopted. experimental results highlight that abstraction is useful for classical planners  such as gp and bb. on the contrary  the usefulness of resorting to hierarchical planning for the latest-generation planner used for experiments  i.e.  lpg  clearly emerges only in the blocks-world domain. 
　as for future work  we are currently addressing the problem of automatically generating abstract operators. 
