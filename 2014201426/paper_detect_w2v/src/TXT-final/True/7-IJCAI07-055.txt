 
this paper presents a new modeling approach for imp programs with operator component matrix  ocm  model  which can be used in imp program diagnosis. using this model and model-based diagnosis method  some logic errors can be found in imp programs. the model  can also be extended to all kinds of imperative programs. the advantages of this diagnosis method lie in its simple and regular presentation  uniform diagnosed objects  usage of isomorphism assumptions  in structure  and usage of assertions about the expected program. these advantages make diagnoses more accurate  and even help to correct the faults by mutation of operator components. 
1 introduction 
model-based diagnosis was first proposed in 1 by reiter  reiter  1   this approach is mainly used to diagnose the systems composed of some physical components. applying model-based diagnosis to program debugging is still a new field. now  dependency model  mateis et al.  1   wieland  1  and value-base model  mateis et al.  1  are widely used in program diagnoses  both of which use program slicing technology   wotawa  1 : the former considers static slices of a program by analysing the dependency between variables  and the latter in fact uses dynamic slices depending on a special test by computing the valuation trajectory. but these methods are not competent in structural errors  and always result in very coarse diagnoses  i.e.  too many candidate diagnoses.   
　this paper uses a simple imperative programming language-imp which helps to focus on the important issues and avoid considering unnecessary detail. the syntax of imp is shown in  winskel  1 . for imp programs  we present a new modeling approach with ocm  which can be used in imp program diagnosis. using this model and  model-based diagnosis method  some logic errors can be found in imp programs. the model can also be extended to all kinds of imperative programs. the advantages of this diagnosis method lie in its simple and regular presentation  uniform diagnosed objects  the usage of isomorphism assumptions in structure  and the usage of assertions about the expected program. these advantages make diagnoses more accurate  and even help to correct the faults by mutation of operator components. 
　in this paper  section 1 presents the operator component matrix model for programs. section 1 further analyses the dependencies implied in the model  including black-box dependency and white-box dependency. section 1 is the core of the paper  it defines such terms as isomorphism  abstract program  program specification and breakpoint  and under these terms  it also defines the model-based program diagnosis problem  diagnosis and conflict etc.  and gives an example to illustrate them. section 1 introduces related works  and the last section makes a conclusion.   
1 operator component matrix model 1 operator component and 1-variable 
definition 1. in an n-ary function fn x1 x1 ...xn-1   we use a cvaelclteodr thef k1n- tfh1 no p..era. fntno1r compoto denonent te fno  f th nen-aryf kfnunction  k=1 ...nf-n1.    is 
so  we can represent fn x1 x1 ... xn-1  as 
　　         f1n x1 f1n x1 ... fnn 1 xn 1                1        where     is called as operator-plus       is called as operator-times  and we stipulate that the symbol     has associativity and exchangeability  and     has associativity and distributivity to     . so  we can also represent  1  as   f1n  f1n  ...fnn 1  x1 x1 ...xn  t . 
　　we can prove that the above stipulation is reasonable  because under the stipulation  any legal expression in the form of operator components has a unique computable form  i.e. f1 x1 f1 x1 ... fn 1 xn 1 is computable iff the sequence  f1 f1   fn  is a permutation of all the operator components of an n-ary function. 
definition 1. if a domain is composed of a single element 1  then we call the variable in the domain as 1-variable. i.e.  we consider the constant 1 as a special variable.  definition 1.  given two variables x and y  if the value of y is independent of x  we call x has a null operator component to y  represented as 1. 
the arithmetic operators of imp are defined as follows: 
　　　 1  n  x  n x   where n is a constant in n. especially  we call 1 as identical operator component  which can also be represented as 1  but note that here 1  is different from null operator component 1. 
    1   x y  	 x+y.     1    x y  	 x y. 
	x-y can be derived from   and -1	i.e.  
x-y=x+ -1  y=  x  -1 y  = 1 x	  1	-1  y. 
property 1. for a aexp1  suppose x1  ...  xn are variables in a   then it can be represented in the form of         a=f1	f1 x1	f1 x1	...	fn xn   where f1  f1  f1  ...  fn are operator component expressions. 
for instance   x  1 y+1 =  1	1  1	 1 x 	   1	1  y 
property 1.  for any f  g  h	   m n n 
	 	f 1 f=1  f 1 f=f  f	1	f=f 
	 	m	n= m n 
1 presentation of commands 
in  imp programs  there are five types of commands: skip statement  skip   assignment statement  x:=a   compound statement  c1;c1   branch statement  if b then c1 else c1  and loop statement  while b do c . here we present these statements in the form of ocm. assignment statement 
suppose the variable set of a program is{x1 ... xn} then from property 1 and definition 1  each aaexp takes the form of  f1 f1 x1 ... fn x n   where fk=1 if variable xk does not occur in a. 
     so  we can denote assignment statement xk:=ak  k=1..n  as  xk:= fk1 fk1 x1 ... fkn x n or            xk:= fk1 fk1 ... fkn  1 x1 ... xn t    . 
      when the program executes the assignment statement xk:=ak  only the value of variable xk will be changed. so we can consider that it implies such assignment statements as 

   c is a matrix composed of operator components  such matrix is called as operator component matrix  abbreviated as ocm. we can treat  c as a state transition matrix. property 1.  the first row of any state transition matrix has the form  of   1  1  ...  1 . 
property 1.  in any row of any state transition matrix  there is at least one operator component that is not 1. 
   we label the commands with 1  1  ...  n by their occurrence order in a program. let x k-1  be the program state before the execution of the k-th command  and x k  be the program state after the execution of the k-th command  then x k =ckx k-1    where ck is the state transition matrix of the k-th command.  the value of an expression a under program state x k  is represented as  a  x k  . skip statement 
in a unit matrix  if we look number 1 as operator component 1  and number 1 as operator component 1  we call such matrix as unit ocm  represented as e. we also call the ocm composed of all 1 as zero ocm  represented as o.      
so  skip statement  skip  can be represented as x:=ex . 
presentation of compound statement 
compound statements take the form of c1;c1. suppose command c1 can be represented as x:=c1x and c1 can be represented as x:=c1x  where c1 and c1 are all ocms  then we can represent the command as x:=  c1 x . presentation of branch statement 
branch statements take the form of  if b then c1 else c1. suppose command c1 can be represented as x:=c1x and c1 can be represented as x:=c1x  where c1 and c1 are all ocms. then we can represent the command as x:= 
 mc1-m c1 x  where m=1 when  b x 1  =true  otherwise m=1  x 1  is the program state before the execution of the command. note that we look the result of m and 1-m as  operator component 1 or 1. presentation of loop statement 
loop statements take the form as  while b do c.  suppose command c can be represented as x:=cx  where c is an ocm. then we can denote the command as  x:= cnx   where n is the number of executions of loop body c  i.e. n= min{k| b  x k   =false  k1}  where x k  is the program state after the k-th execution of command c . 
       according to structural induction  it can be proved that any imp program can be denoted in the form of  x:=cx. we call c as the ocm model of the program. 
1 an example 
to facilitate analysis  we use an example shown in fig 1.  
 
1 key point 	if  from  to   then 
1 	 {start := from ; 
1 	 stop := to} 
     else  
1 	         {start := to;  
1 	stop := from}; 
1 i:= start; 
1 s:= 1; 
1 key point 	while  i  stop    do 
1 {s:=s+i;  
1 i:= i+1} 
1 	       end  
figure 1:   an imp program 
   let x= 1 from to start stop i s t   we can get the ocm model of the program  
c=c1c1= c1c1 nc1 mc1c1 1-m c1c1  
1	1	1 n 1	1	1	1
1	1	1	1	1	1	1
	1	1	1	1	1	1	1 
	1	1	1	 	1	m 1 m 1	1
1	1	1	1 m	m	1	1
1	1	1	1	m 1 m 1	1
	1	1	1	1	1	1	1
where cl  is  the state transition matrix of the command labeled with l; m=1 if   from to  x 1  =true or else m=1;  n=min{k|  i   stop  x 1 k  =false  k1}  where x 1  is the program state before execution of the command labeled with 1; x 1 k  is the program state after the k-th execution of the command labeled 1. 
      if a program includes branch statements or loop statements  there are some unknown  constants  appearing in its ocm model  such as m  n in the above example. though their values are dependent on a given test case  we still look them as formal constants. 
1 dependency analysis 1 black-box dependency 
definition 1. such an operator component 	 is called a 
characteristic operator component  if it satisfies that 
      	=    	=    	1	=   	1	= . 
an ocm k is called the characteristic matrix of c   if k  is constructed by replacing all the operator components in c except 1 with  .       
theorem 1.  for any ocm c1  c1  if k1 and k1 are respectively the characteristic matrix of c1 and c1  then k1 is the characteristic matrix of c1. 
theorem 1.   for any characteristic matrix k   the chain k  k1  k1  ...  kn satisfies one of the two cases as below: 
 1  n  n n  kn=kn; 
 1  n  m  n  n  kn+m=kn. 
    since the set of all characteristic matrixes of a given dimension is limited  any chain k  k1  k1  ...  kn  must reach a fixed point or enter into a ring. the theorem indicates that the dependency in a loop is definite.   
definition 1.  assume that x is the vector of all variables in  program1 p   c is the ocm model of p  k is the characteristic matrix of c  then k is called the black-box dependency matrix of p. 
      from the example shown in figure 1  we can get its black-box dependency matrix 
 1	1 1	1       1	1. 
	k1	1
	1	1
	1	1
	1	1
　from k  we can get the dependencies of the final values of variables to the initial values of variables; we represent these dependencies as  x n  b kx 1    where x n  is the final program state  x 1  is the initial program state. for instance  we extend the variable s  we can get 
	          s n 	b	1	from 1 	to 1    
which means the final value of s is decided by the initial value of from  the initial value of to  and the constant value of s assigned in the program. especially  if the black-box dependency of a variable includes the item 1  it shows the variable has been assigned with a constant in the program. 
       in the black-box dependency  if we find a variable does not appear in the dependencies of any other variables and its final value is not concerned about  the variable is usually considered useless  which can be deleted from the program.  
1 white-box dependency  
definition 1.  for an ocm c  after replacing all its operator components except 1 and 1 with formal operator component represented as  p  p is the label set of the commands where the actual operators occur   the new components matrix h is called as the formal matrix of c. the properties of  p  are shown as follows:      p1 p1    p1   p1 =  p1 p1    p1   p1 =  p1 p1   
 p1 	1	 p1 =  p1    p1  1  p1 =1	  p1 	1	 p1 =  p1    p1  1  p1 =  p1 . 
definition 1.  assume that x is the vector of all variables in  program p   c is the model of p  h is the formal matrix of c   then we call h is the white-box dependency matrix of p.      from the example shown in figure 1  we can get its white-box dependency matrix 
	1	1	1	1
	1	1	1	1
     1	1	1	1 
	h1.1 	 1 	1	1
	1.1 	 1 	1	1
	 1 	 1 1.1 	 1 1.1 	1	1
	 1 1 1 	 1 1.1.1 	 1 1.1.1 	1	1
　from h  we can get the dependency of variables to commands which is represented as  x n  w hx 1    where x n  is the final program state  x 1  is the initial program state. for any variable in x  we can get its dependency to commands from h. for instance  we extend the variable s  and get    s n  w  1 1 1  1  1 1.1.1  from 1   
  1 1.1.1  to 1 .  
then we establish a set s which is composed of all the command labels appearing in the right part  i.e.   s = {1 1 1 1 1}.  
we call  s  as the white-box dependency of variable s  which means the final value of s is decided by the command set {1 1 1 1 1}. it can be proved to be equivalent with the program slice about the slicing criterion  s  1   wotawa  1 . note that white-box dependencies include data dependencies and control dependencies which are implied in the formal constants related to a branch statement or a loop statement.  
1 complexity analysis  
      in this model  the dimension of each ocm is   n+1  n+1  where n is the number of variables in the program. it seems that the size of  the matrix model would grow quickly with the number of variables. however  it is not a big problem  because when we diagnose a program  at one time  a diagnosed object is generally a program module  a procedure or a function  where the number of variables won't be too big. moreover  we can store all state transition matrixes in the dense mode of sparse matrix.  
      
1 model-based program diagnosis  
1  isomorphism assumption and abstract program 
definition 1. two commands c and c are isomorphic  represented as isomorph c  c   iff one of  the following cases is satisfied: 
1  c::=skip  c ::=skip;  
1  c::= x:=a1  c ::= y:=a1  x  y  vs a1  = vs a1  where x  y  means that x and y are the same variable  vs a  means the set of  all the variables in  a;  
1  c::= c1; c1  c ::= c1 ; c1  isomorph c1  c1    isomorph c1  c1  ; 
1  c::= if b then c1 else c1  c ::= if b then c1 else c1  isomorph c1  c1    isomorph c1  c1  ; 1  c::= while b do c1  c ::= while b do c1  isomorph c1  c1  . 
   generally  a diagnosed program should be close to an expected program. that is to say  it is possible that minor revisions will make the diagnosed program correct. so  we always suppose that for any diagnosed program  there exists a  correct  program which is isomorphic with the diagnosed program. this assumption is called isomorphism assumption.  
    in some diagnosed programs  it is possible that some variable is lost in the right-side expression of an assignment statement  such that the isomorphism assumption cannot hold any more. but fortunately  we can extend the expression to a new equivalent expression which includes the lost variable by adding a null operator component. for instance  if x:=x+i is written as x:=x+1 by mistake   we can extend the expression x+1 to x+1 i. we call this case as extendable isomorphism  so it assures that many diagnosed programs are at least extendable isomorphic with a correct program. 
definition 1. for a given program  ocm model   if we replace all the operator components of the program with abstract operator components  the new program is called an abstract program.  an abstract operator component is only a marker which does not refer to any concrete operator component. 
for example  there is a command l:  s:=s+i in a program 
 where l is the label   whose model is represented as s:= 1 l  s 1 l  i  and whose abstract model is represented as s:= 1 l  s 1 l  i  where 1 l  and 1 l  are abstract operator components. suppose the mapping from the abstract model to the actual model is map  then map={{  1 l   1 l      1 l  
1 l  }}. in order to identify the operator components which have the same form  we add the command label to them. suppose the command l:  s:=s+i should be  l:  s:= s i   it is known that the abstract model of the  correct  command has the same form of the abstract model of the  wrong  command. given a mapping map ={  1 l   1 l      1 l   1 l  }  we can get the correct command from the abstract model. 
　　under the isomorphism assumption  we can construct the abstract model of expected program from the concrete model of the diagnosed program by replacing components in the concrete model  with abstract components. 
　  note that each extended null operator component must be replaced by an abstract operator component in the abstract model. 
1  program specification and breakpoint 
program specification  
to further describe the abstract program  we need offer some assertions about the static properties of it  each assertion is called a program specification  morgan  1 . 
definition 1.  a program specification  has the form as below: 
       precond x   frame x   postcond x    where x  is the set of variables  precond x  is a description of the initial state of x  frame x  indicates a piece of the abstract program including x  and postcond x  gives a description of the final state of x after the  execution   of the piece of abstract program.   
   note that frame x  cannot be executed until a concrete implementation is given. if slice x  is a concrete implementation of frame x   postcond x  must come true after execution of slice x  under the condition precond x   and we denote it as  {precond x } slice x { postcond x }. 
for example  to such a specification   precond s  i ={s 1  i 1}  frame s  i ={ s:= 1 s	1 i}   postcond s  i ={s 1}  
slice {s:=s+i} is an implementation of frame s i   but slice {s:=si} is not . breakpoint 
the position of a program is called a breakpoint  if where there is an assertion. the assertions about the variables in a breakpoint are called intermediate results. the value of variable x in a breakpoint b is represented as x b .  
　in program diagnosis  a kind of special position is often used as breakpoints  and those positions are closely followed with a boolean expression  we call them as key points. for example  in figure 1  there are two key points in the positions of label 1 and label 1.    
　note that in a runtime of a program  a breakpoint may be passed by several times or zero times  but it corresponds to a unique position in a program.  
　for a given breakpoint  if all test cases should pass it  we call the assertions in this breakpoint as invariant   always   assertion   otherwise  we call them as  intermittent   sometime   assertion   mayer and stumptner  1 .  
　 so  it is known that any program specification must relate to two breakpoints  and the program code between the two breakpoints must be a legal  compound  command. for example  in figure 1  the codes between breakpoint 1 and breakpoint 1 are not legal commands. if b1 and b1 are the breakpoints related to frame x   we also represent frame x  as frame b1 b1  x . if x includes all the variables of the program  x can be omitted.   
1  program diagnosis 
definition 1. a program diagnosis problem is a triple  sd  comps  specs  where sd is the ocm model of the actual program to be diagnosed  comps is the set of operator components in sd  specs is the set of program specifications. 
definition 1. suppose  sd  comps  specs  is a program diagnosis problem. let ad be the abstract program of sd  acomps be the abstract operator components in ad  and 
map be the mapping from comps to acomps. then 
　comps is a diagnosis  iff  there exists map : sa where  is the set of all operator components and sa is a subset of acomps  such that  ad  map  specs    is consistent  and 
	 	c comps    map  map-1 c  =c. 
     under isomorphism assumption  ad  specs is always consistent  that is  the expected program is an interpretation of ad.    
   since any operator component corresponds to a command in the program  components in  indicate the possible faults in the program. 
definition 1. let  be a diagnosis. if there exists no ' such that ' is also a diagnosis  then  is a minimal diagnosis.  
definition 1. suppose  sd  comps  specs  is a program diagnosis problem. let ad be the abstract program of sd  acomps be the abstract operator components in ad  and map be the mapping from comps to acomps. then c comps is a conflict set iff  for any map : acomps where map c =map c   ad  map  
specs    is inconsistent. 
definition 1.  let c be a conflict set. if there exists no c'c such that c' is also a conflict set  then c is a minimal conflict set.   
theorem 1.  if c1  c1 ... cn are all minimal conflict sets of program p  then all the least hitting sets of {c1  c1 ... cn} are minimal diagnoses of p.  
　the definitions about hitting set can be found in  lin et al.  1 .  
theorem 1. suppose ps= precond x   frame b1 b1   postcond x   is a program specification. let slice b1 b1  be the implementation of frame b1 b1  in the diagnosed program p. given a program input   if  1  the program state in b1 is consistent with precond x    1  y is the set of variables whose states in b1 are inconsistent with postcond x    and  1  c is the white-box dependency set of  y in  slice b1 b1   then c is a conflict set.  
theorem 1. suppose ps= precond x   frame b1 b1   postcond x   be a program specification. let slice b1 b1  be the implementation of frame b1 b1  in the diagnosed program p. suppose there is an equation y=f w 1   in postcond x   where y x  w x  and w 1  denotes the state of w in b1. if the black-box dependency set of y in slice b1 b1  is not equal to w  then the white-box dependency set of y in slice b1 b1  is a conflict set. 
     the conclusions of theorem 1 and 1 are obvious; theorem 1 is a special case of theorem 1.   
1 a diagnosis example  
program diagnosis problem 
consider the program shown in figure 1. suppose command 1 is written as s:=si by mistake. then the program diagnosis problem is given as below: 
sd= x c   where x= 1 from to start stop i s t 
c=c1c1 
=  c1c1 nc1 mc1c1 1-m c1c1  
where cl denotes the ocm model of the command labeled with l in the diagnosed program; 
comps={1.1   1.1   1.1   1.1   1   1   	1.1   	1.1   
 1 
	1	  1.1  }; 
specs={ps1  ps1  ps1}   where 
      ps1=  {from to}  frame 1   {i=from}   
      ps1=  {from to}  frame 1   {i=to}   
      ps1=  {i stop}  frame 1    
     {i=stop 1 +1  s= i 1 +stop 1   i-i 1  /1}  where  i 1  and stop 1  denote respectively the initial values of i and stop before the execution of the frame. 
diagnosis 
ad= x f   
where x= 1 from to start stop i s t 
f=f1f1 
= f1f1 nf1 mf1f1 1-m f1f1  
where fi denotes the abstract ocm model of the command labeled with l in the expected program;  
acomps={ f  1   f  1   f  1   f  1   f  1   f  1   f1.1   f1.1   f1.1   f1.1  }; 
map={ f  1  1.1    f  1  1.1     f  1  1.1     f  1  1     f  1  1     f1.1  1.1    f1  1  1.1     f1.1 1    f1  1  1.1  } 
given a set of  inputs of the diagnosed program 
input={from=1   to=1}  i.e.  from 1 =1 and  to 1 =1   which satisfy the precondition of ps1  by running the diagnosed program with the inputs  we can get the results of i 1 =1 and  to 1 =1  which  are consistent with the postcond of ps1. in this case  we cannot get a conflict set.  
   we go on checking the other program specifications. by observing the values of the variables of the precondition of ps1 in breakpoint 1  we get i 1 =1 and  stop 1 =1  which satisfy the precondition of ps1. and after applying ps1  s 1  should be  1  1 /1. but s 1  equals to 1 actually  so there is a conflict. in frame 1   the white-box dependency of s is {1  1  1} which makes a conflict set. if we go on observing i  i 1  is always consistent with the postcondition of ps1  so the white-box dependency of i  i.e.  {1}  must not be included in a conflict set.  if we have another 
assertion to assure that statement 1 is right  we can finally get the diagnosis {1}.  
   we can correct the faults by mutating some operator components in the diagnoses  because the number of operator components is very limited except the operator components m  m n . generally  we can assume that max m 1 where max is a finite number given in advance. when the mutations f1.1  1.1    f1  1  1.1  take place  we can find the correct program.  
1. related work 
there are a lot of works developed in model-based program diagnosis during the years  among which the most important work is about program slicing  wotawa  1 . our model gives a new and simpler method of computing program slices  i.e. white-box dependency .    
　in the presentation of the abstract model of the expected program  in order to improve the diagnosis capabilities   chen et al.  1  also uses assertions to specify an abstract model. but it does not deal with abstraction in program structure and it only works on the value-based model. our model has stronger presentation capability  which uses more information about the existing program structure under the isomorphism assumption.  
　in correcting the faults   wotawa  1  also discusses a different mutation method  which cannot assure us of finding the correct program by mutation since the mutation scope is too large.  
     we have also developed the presentation of an array in the form of operator components. for example  array x with x=a  x=b  x=c can be represented as x= a  b c where    and  are all operator components; x:=a can be represented as x :  a  x under the property  n   n  1   n   m   m    n m  ; expression x can be represented as {1} x where {1} is an operator component under the property{n}  n  1 {n}  m  1  n m  . 
due to the space limitation  we don't discuss it in detail. 
1. conclusion 
this paper presents a new model for imp programs with ocm. ocm model and isomorphism assumption are  the basis of abstract programs  and we use the assertions of program specifications to describe the abstract programs. acquisition of program specifications is a key problem  which needs more knowledge about the expected program. obviously  the more specifications are achieved  the more accurate diagnoses are. 
     ocm model has a uniform presentation  which comply with the rules for matrix operations. we can got the dependency easily from the ocm model by using characteristic operator component and formal operator component.   
   due to the space limitation  we cannot discuss more diagnosis cases in detail. for example  we do not consider the diagnosis for the condition parts of branch statements and loop statements. generally  we put these conditions into the program specifications.  
   moreover  by using black-box dependency and extending null operator components  we can find some structural faults such as variable missing. in dependency models  structural faults always result in the mistakes of program slicing  wotawa  1   thereby result in wrong diagnoses. 
