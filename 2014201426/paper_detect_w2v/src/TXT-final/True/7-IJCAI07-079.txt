
there are numerous cases where we need to reason about vehicles whose intentions and itineraries are not known in advance to us. for example  coast guard agents tracking boats don't always know where they are headed. likewise  in drug enforcement applications  it is not always clear where drug-carrying airplanes  which do often show up on radar  are headed  and how legitimate planes with an approved flight manifest can avoid them. likewise  traffic planners may want to understand how many vehicles will be on a given road at a given time. past work on reasoning about vehicles  such as the  logic of motion  by yaman et. al.  yaman et al.  1   only deals with vehicles whose plans are known in advance and don't capture such situations. in this paper  we develop a formal probabilistic extension of their work and show that it captures both vehicles whose itineraries are known  and those whose itineraries are not known. we show how to correctly answer certain queries against a set of statements about such vehicles. a prototype implementation shows our system to work efficiently in practice.
1 introduction
there are many applications where one may wish to reason about a set of moving vehicles. one example is  mittu and ross  1  who developed  jointly with the us navy  lockheed martin  bbn  and other companies  ways to predict where and when an enemy submarine would be in the future  and with what probability  based on knowledge about its past movements  terrain conditions  etc. their predictions consist of a set of statements of the form  vehicle v will be at location l with some probability in the interval
.  likewise  bae systems and the us army developed a system which makes similar makes similar predictive statements about where land vehicles will be in the future. cell phone companies are  and in some cases already have  developed methods to predict where cell phone users will be going in the future - a small number of law enforcement agencies in the us already use such probabilistic predictions to track selected criminals  e.g. in the case of a child abduction in the us  an amber alert is used  and such predictions help determine where best to cut them off. these are three applications we know of where predictions of the form  vehicle v is going to be at location l at time t with probability p  are automatically generated and reasoned with. there are numerous theoretical models already to predict where vehicles will be in the future  when they will be there  and with what probability  chen and chien.  1; tsang et al.  1; kato et al.  1 . this paper does not reinvent the wheel by showing how to predict when and where vehicles will be in the future - this has already been done in  chen and chien.  1; tsang et al.  1; kato et al.  1; mittu and ross  1  and a host of other papers. rather  we focus on how to reason about such predictions.
　in this paper  we develop a principled approach to solving such problems by extending  go  theories due to yaman et. al.  yaman et al.  1; 1 . their framework is suitable for reasoning about applications where we know the vehicles' intended destinations - however  there are many applications such as the three mentioned above where this is not known with certainty. a second drawback of the above framework is that while temporal indeterminacy is allowed via intervals  no probability measure is associated with those intervals. this again is appropriate when we are reasoning about plans known to us  e.g. flight plans   but is not appropriate when we are reasoning about a vehicle  e.g. an enemy vehicle on the battlefield  whose plans are not known to us with 1% accuracy.
　in this paper  we propose  probabilistic  go  pgo theory for short  theories by building on  yaman et al.  1 . a pgo theory allows us to reason about motion plans that we know as well as motion plans that we do not know with 1% certainty. the next section provides a syntax for pgo theories. the section after that gives a formal model theoretic semantics. the following section shows how to check consistency of pgo theories via linear programming. however  the size of the linear program in question may be exponential  leading one to initially suspect  wrongly  that consistency checking here is np-complete. we subsequently determine that this
problem is polynomially solvable  under the assumption that we are reasoning only about a finite future  by constructing a polynomially sized set of linear constraints for consistency checking and to answer certain kinds of queries called  in  queries such as  is vehicle id within a given region at a given time with probability over a threshold   such queries are obviously of great utility. the next section describes a prototype implementation  together with experimental results showing our system to perform well in practice.
1 syntax of pgo theories
we assume the existence of a set id of vehicle ids. each id （ id has an associated maximal velocity vid+. we also assume that time is represented by integers drawn from some set t =  1 n  for some integer n. likewise  we assume  is the set of all points  x y  such that x y are integers and for some integers. we use ed p1 p1  to denote the euclidean distance between two points. we assume the existence of a set l   space called  locations.  for instance  consider a 1 〜 1 region - however  if we are only interested in reasoning about  on road  vehicles  then the only locations we might be interested in would be the locations along the roads - in this case  l would consist of points on the roads.
definition 1  reachability . we assume the existence of a reachability predicate reachable id l1 l1  which is true iff vehicle id can move to location l1 from location l1 in one unit of time. the reachability predicate must satisfy the axiom:
reachable id l1 l1    ed l1 l1  ＋ vid+
we extend reachability to include time t   1 as follows: reachable id t l1 l1  iff either  i  reachable id l1 l1  and t = 1 or  ii  there is an l1 s.t. reachable id l1 l1  and reachable id t   1 l1 l1 .
　intuitively  the reachability predicate encapsulates many aspects of vehicle movement that we do not wish to get into in this paper. for example  if a road is a narrow and winding road up a mountainside  the vehicle may not be able to achieve its maximal speed - in this case  the predicate tells us what is achievable and what is not. likewise  reachable also may tell us that certain locations cannot be reached by a particular vehicle  e.g. a car may not be able to drive from new york to paris.
definition 1  atoms . suppose id id1 id1 （ id  l （ l  t （ t  and p （  1 . suppose r is a convex region.
1. pgo id l t p  is a probabilistic go atom  hereafter a pgo atom . intuitively  this atoms says that id is at location l at time t with probability p.
1. in id r t p  is a probabilistic in atom. intuitively  this atom says that id will be somewhere in region r at time t with probability p or more.
　a pgo theory is a finite set of pgo atoms. note that in atoms cannot appear within a pgo theory but can be used in queries. as mentioned earlier  we know of at least three applications where pgo theories are automatically generated by prediction algorithms: the lockheed/bbn/us navy and other application for predicting submarine movements  the bae/us army application for predicting locations of enemy vehicles  and the law enforcement application based on predicting cell phone locations.
1 semantics of pgo theories
we now define a model theory for pgo theories.
definition 1  world . a world w is any function from id〜t
andtoreachableltsuch that（ t. id ww denotes the set of all worlds. id t  w id t + 1   holds for all id （ id
　intuitively  w id t  tells us where the vehicle id is at time t according to world w.
definition 1  interpretation . an interpretation is a probability distribution i overw （ ww  i.e.such thati assigns values in the  1 . interval to worlds use i to denote the set of all probability distributions over w
　an interpretation assigns a probability to each possible world. we are now ready to define the concept of satisfaction of atoms by an interpretation.
definition 1  satisfaction . suppose i is an interpretation. i
satisfies
1..
1.
i satisfies a pgo theory g iff it satisfies all atoms in g.
as usual  a pgo theory g is consistent iff there is at least
one interpretation that satisfies it. an atomiff every interpretation that satisfiescontains onlythe set { li pi pgo|   id  1  1 .1   pgog also satisfiest （afor instance  iftis  we letentaileda.gid tbybegg
　for a pgo theory gpgo  an id lid （i t pid1and a  （ g} id  1  1 .1   and pgo{  1  id 1   1. 1     1 . 1    then1 g}.id 1 = {  1  .1 } and gid 1 =
definition 1  completeness . a pgois completetheory giff it is completeis complete for
for all id at all time points t.
　intuitively  a pgo theory is complete at time t for vehicle id iff every place that the vehicle can possibly be at at that time is explicitly mentioned in gid t.
1 checking consistency of pgo theories
in this section  we start by observing that we can check consistency of pgo theories by solving a set of linear constraints. for each world w  let vw be a variable representing the probability that the world w is the actual world. definition 1  lp constraints for a pgo atom . for pgo atom a = pgo id l t p   let lp a  be the set of equations:
1.  
1. for all w （ w  1 ＋ vw ＋ 1.
1. 
if g is a pgo theory  we set lp.
　the first and second constraints force i to be a proper probability distribution. the third forces the sum of the probabilities of the worlds in which a given vehicle id is at location l at time t to be exactly p if there is a go-atom that says this. the following result give us connections between consistency of a pgo theory  and the above set of constraints. proposition 1.
 i  a pgo theory g is consistent iff lp g  is solvable.
 ii  suppose  iff the result of minimizing  subject to the constraints
lp g  is greater than or equal to p.
　an obvious problem with the above result is that the size of the input to the linear program for lp g  is on the order of |l||t|，|id| 〜 |g|. this is too large for the above algorithms to tractably solve any reasonably sized problem. one may wonder whether consistency checking for pgo-theories is np-complete. it is not  as we will shortly see in the next section.
1 partial path probabilities
lp g  associates a variable in the linear program with each world. instead  we might want to associate a variable  denoting the probability that a vehicle with id leaving at time t. we call this a path
probability variable. it is clear that as long as we only look at a bounded time horizon  the number of path probability variables is polynomial w.r.t. the number of time points  size of space and the number of vehicles. what we will try to do in this section is to reformulate lp g  in terms of these variables so that the resulting set of constraints is polynomial in the size of the pgo-theory.
definition	1	 interpretation	compatibility .	given  defined for every  and interpre-
tation i  we say i is compatible with p iff

theorem 1. suppose θ is an assignment to all path probability variables. there is an interpretation i compatible with θ iff p satisfies
1. for each.
.
1. for each
		.
　the above theorem provides us the ammunition needed to associate a new set of linear constraints with a pgo-theory g. our variables for this lp will correspond to each path probability: v.
definition 1  plp . for pgo theory g  plp g  is the associated set of partial path based linear equations. without loss of generality we assume the maximum time point t to be larger than any time point mentioned in g.
1. let plp ，  be the constraints obtained by replacingwith v	in items  1 - 1  of theo-
rem 1.
1. for	 	let plp a  be
1. for	 	let plp a  be
for pgo-theory g  plp g  = plpplp a .
　the following important theorem shows that solvability of plp g  determines consistency of g and that entailment of in queries can be determined by solving a linear program with plp g  as the set of constraints and an objective function based on the query.
proposition 1. for pgo theory g 1. plp g  has a solution iff g is consistent.
1. in queryminimizingin id r t p  is a logical consequence of1	subject to plpg giff 
is greater than or equal to p .
1. checking consistency of a pgo-theory and checking entailment of ground in queries are solvable in polynomial time.
1 plp's size
it only containsplp g  is significantly smaller than that of|id| ， |t| ， |l|1 variables andlp g because
　　　|t| ， |id| + |t| ， |l|1 + |t| ， |id| ， |l| + |g| equations. the size of this linear program is therefore had a size ofbounded byfurthermore  it turns out that there are alternate ways of ex-||l|id|t|1|，|， |idt||〜 |g|1 ， |l|. 1 〜 |g|. in contrast  lp g  pressing plp g  which result in more easily solvable linear programs.
1 variable pruning
linear equations comes when we knowthe first simplification we can make to plp g to be zero. inor any set of v
such cases  we can safely eliminate v from plp g .
1 an alternative linear program: alp
many pgo-theories only mention some time points from the set of all time points t. this can be leveraged to create a small linear program which does not reference the unmentioned time points.
definition 1  alternate linear program . let g be a set of all the time points such that for everypgo atoms and id be a vehicle. let tt1i there is a pgo atom  t1 ，，，   tn be
following alternate set of linear equations:pgo id l ttn	i p  （ g. without loss of generality  we can as-alp g id  is the sume	is not the maximum time point.
1. for each a = pgo id l ti p  （ g such that t1 ＋ ti   tn  plp a  （ alp g id .
1. for each
		.
1. for each t1 ＋ ti ＋ tn  alp g id 
1. for each t1 ＋ ti   ti+1 ＋ tn  for each l l' such that  we have
1. for each t1   ti   tn  for each l we have
		
theorem 1. plp g  is solvable iff alp g id  is solvable for every id.
　this theorem provides us with added efficiency in two ways. first  it prunes a fair number of variables. second  it divides the linear program into |id| linear programs  one for each vehicle. when the entire linear program is considered  the running time is o r1   where r is the number of variables. but  if we consider each vehicle individually  the running time is proportional to |id|，o  r/|id| 1   giving a speedup of o |id|1 . we can further exploit this trick of dividing the linear program into smaller sub-problems by considering complete points in a pgo theory.
theorem 1. for pgo theory g and vehicle id complete for id at time be the max time point referenced by the the theory  let and let be
alp g id  is solvable iff
alpsolution to g1id alptalp id  gand g ididalp id  andgtid talp id   are solvable.  ii  thegtid t id  gives a solution for 1  t.
　this theorem is particularly useful for in queries. since only one time t is ever referenced by a in query  we can sandwich t between the two nearest complete time  t1 and t1 s.t. t1 ＋ t ＋ t1. then  since we assume in queries to be asked only of consistent pgo theories  we are only required to solve for the particularwhich contains the query. in the best case  the in query will fall on a complete time/id pair  meaning that to solve the query we must only use the linear constraints in alp gid t id   where t is the in query's time point and id is the query vehicle .
1 alp size
now  instead of solving plp  a massive linear program  we are solving many smaller alp.
　for vehicle id in theory g with n mentioned time points of which every cth one is complete  and each two consecutive time points  t1 and t1  we must solve alp. this will happen in o n1  where n is the number of variables. the number of variables is bounded by  c + 1  ， |l|1. thus computing consistency of g using alp will happen in time |id| 〜 n/c 〜 o   c + 1  ， |l|1 . there is an interesting phenomenon happening here: the running time of our algorithms may decrease as the size of the theory grows - so long as more complete time points are added.

figure 1: time to check consistency of complete theories with 1 to 1 pgo atoms per time point when maximum speed is 1 and 1.
1 experimental section
we have implemented a prototype pgo system in matlab on a pentium 1  1ghz  processor running under windows xp and with 1gb of memory. our system implements all algorithms described in this paper for both complete and incomplete theories.
　we ran several experiments to test the performance of these algorithms and identify the important factors that affect the performance other than the obvious ones such as number of atoms and time points referenced. we performed our experiments on theories that refer to a single vehicle using alp type linear programs.
　the maximum number of pgo atoms per time point in a complete theory plays an important role in checking consistency. this number gives a maximum number of path probabilities for each time point. another important factor we considered was the maximum speed of the vehicle because this affects the maximum number of reachable locations and hence the total number of path probability variables in our final linear program. to test the effect of these speed and atom density  we created random theories in a 1〜1 grid. we varied the maximum number of atoms per time point from 1 to 1  with maximum speeds of 1 and 1. the number of distinct time points in the theory varied from 1 to 1. we derived the speed values as follows: suppose we use the 1 〜 1 grid to represent the usa. then speed of 1 will coincide with that of a car  1 mph  while a speed of 1 will coincide with that of a plane  1 mph .
consistency check time for complete theories: figure 1 shows the time taken for consistency checking for 1 kinds of complete theories. the data points represent the average over 1 randomly generated theories. as seen in the figure the effect of increasing number of pgo atoms per time point has a greater on impact on performance than increasing maximum speed. the reader can see that it only takes a few seconds to reason about 1 time points.
consistency check time for incomplete theories: for incomplete theories  the size of the grid has a great impact on the time required to check consistency. we say a time point figure 1: time to check consistency of incomplete theories with 1  1  and 1 pgo atoms per time point  a maximum speed of 1 or 1  and incmax varying from 1 to 1  displayed as k in the graph's key .
t is incomplete iff the sum of the probability field in all pgo atoms ends up being less than 1. we investigated how the structure of the theory affects the consistency checking algorithm. let incmax be the maximal number of incomplete time points followed by a complete time point in a theory. for this experiment we created random theories in a 1 by 1 grid with maximum speed 1  maximum number of pgo atoms per complete time point ranging from 1 to 1  incmax = 1 or incmax = 1 and the number of referenced time points ranging from 1 to 1. furthermore every complete time point is followed by incmax incomplete time points in the theory. so when incmax = 1 and the total number of time points in the theory is 1  there are 1 incomplete time points interleaved with 1 complete points. figure 1 shows the time taken to check consistency for 1 kinds of randomly generated theories. the data points represent the average of 1 runs - note that the y-axis uses a logarithmic scale. as seen in the figure  the effect of increasing the number of pgo atoms per time point has a similar effect on the on the performance. however  increasing incmax affects the running time dramatically.
in-queries. figure 1 shows the time required to answer  in  queries as we vary the temporal density of a complete theory. temporal density of a theory is the ratio of time points referenced in the theory and the total number of time points. for these experiments we set the grid size to 1 by 1 and maximum time points to 1 and number of pgo atoms per time point to 1. for example when the theory has a temporal density of 1  it has a total of 1 time points. the data points in the graph are an average of 1 runs. the reader can easily see that the time taken drops exponentially with an increase in the density. since a rise in density corresponds to an increase in theory size  these results are particularly interesting yet consistent with theorem 1. it shows our algorithms' running time decreases as the number of referenced time points increases. this is sensible: when one is working with probabilistic data  one should sometimes find it easier to answer queries as the amount of data increases  because fewer possible satisfying interpretations for the data need be considered.
figure 1: time to answer in-queries w.r.t. complete theories of varying temporal density.
1 related work
there are several spatio-temporal logics  gabelaia et al.  1; merz et al.  1; wolter and zakharyaschev  1; cohn et al.    in the literature. these logics extend temporal logics to handle space. most of them involve logical languages similar to ltl. there is also much work on qualitative spatio-temporal theories for a survey see  anthony g. cohn  1  . the closest work to ours is that of  muller  1a; 1b  which describes a formal theory for reasoning about motion in a qualitative frame work. the expressive power of the theory allows for the definition of complex motion classes. the focus of these works is qualitative - in contrast  we deal with uncertainty about where vehicles will be in the future. our methods are rooted in a mix of probability  geometry and logic rather than just logic alone.
　other related work includes  shanahan  1  which discusses the frame problem when constructing a logic-based calculus for reasoning about the movement of objects in a real-valued co-ordinate system.  rajagopalan and kuipers  1  focuses on relative position and orientation of objects with existing methods for qualitative reasoning in a newtonian framework. the focus of these works is qualitative - in contrast our work is rooted in a mix of geometry and logic rather than logic alone.
1 conclusions
there are numerous applications where we wish to reason about moving objects. in some cases   i  we know the intended destinations of the moving objects while in others  ii  we do not know this for sure. in this paper  we have developed the concept of a probabilistic go theory  pgo theory   which is capable of handling both cases. this extends the notion of a go-theory proposed by  yaman et al.  1   which only handles case  i .
　as future work  we intend to examine aggregation techniques which would allow the creation of minimally sized linear programs solving pgo problems. we further intend to include queries which reference periods of time. also  work must be done to expand this system to handle multi-object queries where the vehicles' locations are not independent of one another.
　we have presented a syntax and declarative semantics for pgo theories  efficient algorithms to check the consistency of pgo theories  and efficient algorithms to implement  in  queries. our implementation shows that these algorithms work effectively in practice.
1 acknowledgments
this work was partly supported by afosr grants fa1 and fa1  aro grant daad1 and by the joint institute for knowledge discovery.
