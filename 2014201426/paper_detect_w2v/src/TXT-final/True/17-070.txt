 
in t h i s paper we desoribe a program that v e r i f i e s the oonsistenoy and completeness of expert system knowledge bases whioh u t i l i z e the lookheed expert system  les  framework. the algorithms desoribed here are not specific to les and oan be applied to most rule-based systems. the program  oalled check  combines logioal principles as well as speoifio information about the knowledge representation formalism of les. the program oheoks for redundant rules  c o n f l i c t l n g rules  subsumed rules  missing rules  ciroular rules  unreachable olauses  and deadend olauses. it also generates a dependency ohart whioh shows the dependencies among the rules and between the rules and the goals. check oan help the knowledge engineer to deteot many programming errors even before the knowledge base testing phase. it also helps deteot gaps in the knowledge base whioh the knowledge engineer and the expert might have overlooked. a wide variety of knowledge bases have been analyzed using check. 
1 	introduction 
the lookheed expert system  les  is a generio rule-based expert system t o o l   similar to emycin   that has been used as a framework to construct expert systems in many areas suoh as electronic equipment diagnosis  design oheoking  photo interpretation  and hazard analysis. les employs a combination of goal-driven and data-driven rules with the l a t t e r being attaohed to the faotual database  demons . one objective in the design of les was to make it easy to use. thus  many debugging tools and aids were added to the les program. one of these aids is the knowledge base completeness and oonsistenoy v e r i f i c a t i o n program oalled check. i t s purpose is to help a knowledge engineer oheok the knowledge base whioh he 
oonstruoted for l o g i o a l l y redundant rules  c o n f l i c t i n g rules  subsumed rules  missing rules  unreachable olauses  and deadend olauses. check does not perform any syntax oheoking on the rules  sinoe t h i s is done automatically when the rule f i l e s are loaded into the knowledge base. check s t a t i o a l l y analyzes the knowledge base   i . e .   after the rules and facts are loaded into the knowledge base   unlike teiresias  whioh performs an assessment of rules in the setting of a problem-solving session 
 1. 
suwa  soott  and s h o r t l i f f e  have written a program for verifying that a set of rules comprehensively spans the knowledge base. this program was devised and tested within the oontext of the oncocin system  an emycin-like system . our work d i f f e r s from theirs in that check inoludes unreachable olauses and deadend olauses as two additional rule oheoking o r i t e r i a . furthermore  check produoes a dependency ohart and deteots any oiroular rule ohains. also  check was devised and tested on a generio expert system with oase-grammar rules and a  frame  database. it has been used to analyze a wide variety of knowledge bases. check does not take into aooount oertainty factcrs when oheoking the rule base. 
1 	checking 	for 	consistency 	and 
completeness 
a s t a t i o analysis of the rules oan deteot many potential problems and gaps that exist in a rule base. we now i d e n t i f y and give definitions for seven o r i t e r i a that are used by check to perform statio analysis of any rule base oonstruoted for use with les. the f i r s t four o r i t e r i a are concerned with potential problems  whereas the last three o r i t e r i a are oonoerned with gaps in the knowledge base. 
1 	potential problems in a knowledge base 
by s t a t i o a l l y analyzing the logioal semantios of the rules represented in les's case grammar format  check oan deteot redundant rules  oonflioting rules  rules that are subsumed by other rules  and c i r c u l a r - r u l e ohains. the following definitions for these four potential problems are used in check: 
o redundant rules: two rules succeed in the same situation and have the same results. in les  t h i s means that the if parts of the two rules are 
1 t. nguyen et al. 
equivalent  and one or more then olauses are also equivalent. because les allows variables in rules  equivalent means that the same specific objeot names can match t h e i r corresponding variables. for example the rule  p x  -  q x   is equivalent to the rule  p y  -  q   y       where x and y are variables. 
o conflicting rules: two rules succeed in the same s i t u a t i o n but with c o n f l i c t i n g results. in les  t h i s means that the if parts of the two rules are equivalent  but one or more then olauses are oontradiotory  or one pair of if olauses is oontradiotory while they have equivalent then olauses. for example  the rule  p x  -  not q x    is oontradiotory to the rule  p x  -  q   x     . 
o subsumed rules: two rules have the same r e s u l t s   but one oontains additional constraints on the situations in whioh it w i l l suooeed. in les  t h i s means one or more then olauses are equivalent  but the if part of one rule oontains fewer oonstraints and/or clauses than the if part of the other r u l e . for example  the rule   p x  and q y   -  r   z     is subsumed by the rule  p x  -  r   z     . 
o circular r u l e s : a set of rules is a c i r c u l a r - r u l e set if the ohaining of those rules in the set forms a cycle. for example  if we had a set of rules as follows:  1   p x  -   q x    1   q x  -  r   x      1   r x  -  p x   and the goal is r   a     where a is a 
constant  then the system w i l l enter an i n f i n i t e loop at run time  unless the system has a speoial way of handling c i r c u l a r rules. 
1 	potential gaps in a knowledge base 
the development of a knowledge-based system is an i t e r a t i v e prooess in whioh knowledge is enooded  tested  added  ohanged  and refined. this i t e r a t i v e prooess often leaves gaps in the knowledge base whioh both the knowledge engineer and the expert may have overlooked during the knowledge aoquisition prooess. in les  we have found three situations indicative of gaps in the knowledge base. these three situations  called cd missing rules   1  unreachable olauses  and  1  deadend olauses are desoribed below: 
o missing rules: a s i t u a t i o n in whioh some values in the set of possible values  called legal values  of an objeot's a t t r i b u t e are not oovered by any r u l e ' s if olauses   i . e .   the legal values in the set are oovered only p a r t i a l l y or not at a l l   . a p a r t i a l l y oovered a t t r i b u t e oan prohibit the system from attaining a oonolusion or oause it to make a wrong oonolusion when an unoovered a t t r i b u t e value is enoountered during run time. 
o unreachable clauses: in a goal-driven produotion system  a then olause of a rule should either matoh a goal olause or matoh an if olause of another rule   i n the same rule set . otherwise  the then olause is unreachable. 
o deadend glauses: to aohieve a goal  or subgoal  in les  it is required that either:  1  the attributes of the goal olause are askable  user provides needed information  or  1  that the goal olause is matched by a 
then olause of one of the rules in the rule sets applying to that goal. if neither of these oonditions is s a t i s f i e d then the goal olause oan not be achieved  i . e .   it is a  deadend olause . similarly  the if olauses of a rule also must meet one of these two oonditions  or they are  deadend olauses . 
1 dependency chart and circular-rule chains detection 
as a by-produot of the rule oheoking  check generates a dependency ohart whioh shows the interactions among the rules and between the rules and the goal olauses. an example of a dependency ohart for a small problem is shown in figure 1. a  *  indioates that one or more olauses in the if part of a rule or a goal olause  g.c.  matches one or more olauses in the then part of a r u l e . the dependenoy ohart is very useful when the knowledge engineer deletes  modifies  or adds rules to the rule base. 
note that in figure 1  the  *  's indicate the dependencies for the o r i g i n a l rule set. by adding a olause to rule 1  the   *1  dependencles appeared. note  rule 1 now references i t s e l f - a s e l f - o i r o u l a r r u l e . by the addition of one olause to rule 1  the   * 1   dependenoles appeared. this also oauses the rule set to be c i r c u l a r   sinoe an if olause of rule 1 is matohed by then olauses of rule 1 and rule 1 whioh in turn matoh an if olause of rule 1. circular rules should be avoided since they oan lead to an i n f i n i t e loop at run time. some expert systems  suoh as ekycin  handle oiroular rules in a speoial way. 
nevertheless  the knowledge engineer w i l l want to know whioh rules are oiroular. so  check uses the dependenoy ohart to generate graphs representing the interaotions between rules  and uses a c y c l i o graph detection algorithm to deteot oiroular rule ohains. 

t. nguyen et al. 1 
categories 	so that the system oan 
solve d i f f e r e n t goals using only those rule sets 	which 	apply to that g o a l . ; to solve a partioular 	goal  	often 	he 	w i l l 	seleot several 	goal-driven 	rule 	sets 	and 	when rules  demons . 	sinoe these rule sets 	are generated 	over 	a 	period 	of 	time  it is quite possible that t h e i r 	interaction 	w i l l oause 	some 	problems. 	thus  for eaoh goal it is neoessary to 	compare 	the 	rules 	  i n the 	rule 	sets 	speoified 	by 	that 	goal  against eaoh other and against the 	olauses of that goal. 	we now show an algorithm   i n an a l g o l - l i k e notation  whioh 	check 	uses. the 	algorithm 	does the checking for a set of subjeot oategories with n 	rules 	and 	a 
goal with g olauses. 
beoause an if part or a then part oan have more than one olause  the comparison between one part and another is handled by comparing a olause of one part to every olause in the other part. 

1 	t. nguyen et al. 

1 . 1 	gnymattv 
in t h i s paper we desoribed a program called check whose function is to deteot four potential problems  redundant rules  c o n f l l o t i n g rules  subsumed rules  and oiroular rules  and three potential gaps  missing rules  unreaohable clauses  and deadend olauses  in a knowledge base u t i l i z i n g the les framework. we applied the oonsistenoy and completeness v e r i f i o a t i o n method of suwa  soott  and s h o r t l i f f e  to the generio expert system les with good results. furthermore  we have extended the checklng to inolude oiroular rules  unreaohable olauses  and deadend olauses. we also showed a general algorithm whioh performs the oheoking funotion e f f i c i e n t l y . finally  as a by-produot of the rule oheoking processing  check generates a dependenoy ohart whioh shows how the rules oouple and interaot with eaoh other and with the goals; t h i s ohart should help the knowledge engineer to i d e n t i f y immediately the effeots of deleting  adding  or modifying rules. 
from our experiences with oonetruoting different knowledge bases  we f i n d that many ohanges and additions to the rule sets ooour during the development of a knowledge base. thus  a t o o l suoh as check that oan deteot many potential problems and gaps in the knowledge base should be very useful to the knowledge engineer in helping him to develop a knowledge base rapidly and accurately. 
the major area of improvement for check is the handling of oertainty faotors in the rules sinoe les allows the rules to have oertainty faotors associated with them; t h i s may require the d e f i n i t i o n s for the seven conditions oovered in t h i s paper to be revised. 
