 
     this paper describes a theorem prover  running on a pdp-1-tenex system  that can prove some theorems whose statements involve a r e l a t i v e l y large number of d e f i n i t i o n s . such theorems require special methods because  1  t h e i r statements contain a large number of clauses and  1  their proofs are quite long although straight-forward. 
     a theorem is proven by f i r s t subdividing it into  simple  subgoals and then using a standard resolution theorem prover to prove the subgoals. the f i r s t part of this process involves the substitution of d e f i n i tions f o r defined quantities and the use of logical s i m p l i f i c a t i o n . this process which is more similar to a natural deduction system than a resolution system  is shown to be complete when restricted to f i r s t - o r d e r logic. however  the theorem prover can deal with some interesting higher-order theorems as is shown by an example. 
	1. 	introduction 
     the motivation for t h i s research stems from our view of how theorem provers w i l l be used in solving r e a l - l i f e problems. we believe that the f i r s t few applications of theorem provers w i l l be man-machine oriented because  at the current state of the a r t   theorem provers can only solve r e l a t i v e l y easy problems and 1t w i l l probably be quite a while before they can solve t r u l y d i f f i c u l t problems on their own. 
     it also seems to us that theorem provers w i l l be faced with a large number of problem-oriented predicates due to d i v e r s i t y of real world data. some of these predicates w i l l be s u f f i c i e n t l y basic that they w i l l of necessity be b u i l t into the theorem prover. however  most of them  due to their abundance  w i l l have to be defined 1n terms of the basic predicates and logical connectives. 
     on the basis of these assumptions  we feel that the role of the machine w i l l be primarily a big data f i l t e r   doing the r e l a t i v e l y straight-forward part of the theorem proving which might be quite lengthy. for the most part  this amounts to  wading  through d e f i n i tions and previously proven theorems  and perhaps metatheorems   many of which are quite long and tedious; proving the easy parts and isolating the n o n - t r i v i a l parts. the man then would select a n o n - t r i v i a l part to 
work on next and would give the machine  hints  on how 
to go about proving i t . the hints w i l l be of various forms  such as conjecturing induction hypothesis  lemmas  the value of important variables  etc. 
     this paper describes a theorem prover  tpi  that can prove some lengthy but straightforward theorems whose statement contains defined quantities. although tpi 1s a t o t a l l y mechanical  and not a man-machine theorem prover  the types of problems for which 1t is designed are similar to what we feel w i l l be the kind of problems that a machine should do 1n a man-machine  application of theorem proving. since the approach of tpi 1s somewhat d i f f e r e n t than a standard resolution theorem prover  1n the next section we will give an example of how 1t proved a particular theorem. this will motivate sec. 1 which describes tpi 1n fair det a i l . 
	1. 	an example of tpi 
모모in this section we give an example of how tpi proved the theorem that the direct product of 1 groups 
1s a group. 	the statement of this theorem 1s* 

the operator and inverse of the product group are 뫢 and j  respectively  and are defined below. in the first line of  1   g univ  indicates that g is some element of the universe and  + fng g g   indicates that + is a binary operator on 1. the remainder of the f i r s t line indicates that -:g  g and 1s some element of g. the second line of  1  states the same things about h * i and e. thus the first two lines universally quantify 1 variables subject to the restrictions that they must lie 1n certain domains. gr 1s a defined predicate having 1 arguments  a group  its operator  its inverse and its identity  respectively. thus  the last line of  1  states that  if g and h are groups then so is gxh  cartesian product of g and h . the operator 뫢 of the latter 1s 

in this expression  is the usual operator of abstraction. the meaning of  1  1s that 1t 1s a two-place function. the string  u gxh  indicates that the f i r s t argument which gets substituted for u must be 1n the set gxh. 1  u  is the f i r s t element of the ordered pair u while 1nd u  is the second element of u. the . 1n  1  1s the operator which takes two terms and makes an ordered pair out of them. an example of the use of  1  is a뫢b. this expression 1s defined 1f both a and b are 1n gxh and the term a뫢b evaluates to the ordered pair  1st a +1st b  1nd a 1nd b  . note that g  h  +  * are free variables 1n  1  which are quantified by the quantifiers 1n  1  because 뫢 occurs in  1 . 
모모the inverse j of the product group 1s defined 1n a manner similar to  1  as 
		 1  
the identity of the product group 1s given 1n  1  as the ordered pair  1 e . 
모모to prove {1   tpi must know the definition of group  1 s t   etc. 	tpi has a repertoire of definitions and previously proven theorems which includes these definitions and other definitions  such as definition of homomorphlsm  that are not relevant to proving  1 . we will not state the definitions because their content will become clear by their use. 
	 there are 1 differences between  1  and the formula given to tpi: 	an example of the f i r s t is that 
gr g + - 1  1s given to the machine as  gr g + - 1 . the second 1s that infix notation 1s used 1n  1  and thirdly parentheses are omitted in  1  if their omission causes no ambiguity. 
1 first of a l l   tpi simplifies  1  which 1n this 
case involves putting skolem functions 1n for the universally quantified variables in  1 . for notational purposes we will use the same names as the variables and thus  1  becomes 

     in this formula g  +  etc. are constants and their domains are known because of the first 1 lines of  1   
e.g.  + is a binary operator on g. next  tpi sees from the definition of group that 1t is sufficient to prove that o 1s associative; j is a right inverse; and  1 e  is a right identity. the resulting formula is immediately simplified and stated as the following three subgoals  or lemmas  which tpi will work on separately: 
 1  
 1  
 1  
in these formulae a  b  c  d  e are skolem functions that are elements of gxh.  1    1    1  state respectively that  1 e  is a right identity  j is a right inverse and 뫢 is associative. the reader will note that  1    1  and  1  are more complicated than textbook formulae because they contain terms that can obviously be simplified such as lst 1 e  which is just 1. however  these formulae were produced directly from the definition of a group and such simplification will occur later in the proof. 
     tpi next processes  1  1n much the same way that it processed  1 . it sees from the definition of an ordered pair that two ordered pairs are equal if their f i r s t components are equal and if their second components are equal. using this definition on  1   the following two new subgoals are produced: 
 1  
 1  
     when tpi processes  1  it notes that  1  cannot be further divided into subgoals  and thus calls on a resolution-based theorem prover called the subgoal solver  sgs   to solve 1t. but f i r s t 1t replaces defined quantities by their definitions and then reduces the formula to normal form. fig. 1 gives the result of processing  1  1n this way. in fig.1 the variable x is restricted to be 1n g. this information 1s checked implicitly in tpi whereas a standard resolution theorem prover would append an  to each clause containing an x  e.g.  the f i r s t clause in fig. 1 would be 
 v x+1=x. similarly y 1s restricted to be 1n h while u and v are not restricted. 
     the definition of a group indicates that + and * are associative. instead of representing this information as clauses  the operators are  flagged  and the sgs processes them as n-ary operators. 
as the reader can easily see  f1g. 1 gives a contradiction in just two steps. from clauses 1 and 1 in f1g. 1 we get l s t   a   + 1 = { a   . from this and clause 1 in f1g. 1 we get 1st{a  ist a  which 1s contradiction. tpi processes  1  almost identically to the way in which 1t processed  1 . the normal form .of  1  1s the f i r s t 1 clauses in fig. 1 and 1nd a +1nd o e =1nd n  which also has a two-step contradiction. 
     tpi then proceeds to  1  and uses the definition of ordered pair to divide  1  and into the following two subgoals: 
 1  
 1  
 1  equates the f i r s t components of the left and right sides of the = in  1  while  1  equates their 1nd components. 
     since  1  cannot be divided into subgoals  it is reduced to normal form  which is just the f i r s t 1 clauses in f1g. 1 and 
		 1  
this is passed to the sgs which easily solves 1t in 1 steps. from  1  and clause 1n fig. 1  lst b +- lst  b  =lst o e  1s deduced. this and clause 1n f1g. 1 gives o=1st 1 e  which by clause 1 in fig. 1 implies 1 which is a contradiction. 
     tpi processes  1  in much the same way as  1  proving it also 1n three steps. proceeding onto  1   tpi breaks it into 1 subgoals by separately equating the two components of the left and right of the = 1n  1 . since the generation of these subgoals is so similar to the generation of the above subgoals we will not state the subgoals 1n this paper. also their proofs will be omitted because they are just 1 steps apiece. 
     this concludes the proof of  1 . in summary then  tpi divides  1  into 1 terminal subgoals or lemmas and proves these 1 subgoals independently which constitutes a proof of  1 . the purpose  1    1  and  1   which are intermediate subgoals  is to facilitate the generation of the 1 terminal subgoals; i.e.   1    1  and  1  are not directly proven by the sgs. 
	1. 	description of tpi 
     the purpose of this section 1s to describe the internal mechanisms of tpi which is a lisp program currently running on a pdp-1 under tenex. due to space limitations  the description will be very brief. for this reason the interested reader 1s referred to ! 
which is a fairly detailed description of tpi. 
     tpi operates from a repertoire of definitions not all of which are needed in any particular theorem. currently  there are over a dozen defined quantities 1n tpi's repertoire. incorporated into the definitions are also some previously proven theorems. all of this information is contained on two lists bd  backward definitions  and fd  forward definitions . 
     all statements on bd are of the form q a-+b  while fd statements are of the form q b=c . 	b 1s the defined quantity and q 1s a string of restricted quantifiers. a together with c comprises the definition of b. 	in ad-
dition  certain previously proven theorems about b may also be incorporated into these statements as described 1n sec. 1. as an example  consider the definition of a group on bd. in this case b 1s gr g + - 1  and a 1s 

1 

1 
1 
1 

uses definitions in a way which 1s very similar to tpi and bledsoe'si use of definitions 1s somewhat similar. although the overall characteristics of all these theorem provers  including tpi  are quite different  they all proved some relatively impressive theorems. in particular  each can prove theorems that the others cannot prove. however  this author believes that 1n each case much of the power stems from the same few basic principles even though the methods of these theorem provers were independently developed along quite different lines. 
acknowledgments 
this research was supported by the national 
science foundation under grant gj-1  and the air force office of scientific research under grant afosr1oc. 
