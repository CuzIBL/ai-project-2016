t h e u t i l i t y o f e x p e r t k n o w l e d g e 
jonathan schacffer ta. marsland 
computing science department  
university of alberta  
edmonton  
canada t1g 1 

a b s t r a c t 
how useful is the knowledge we add to an expert system  what is important knowledge  can too much knowledge be bad  these questions are examined by presenting the preliminary results of experiments that paired programs with varying amounts of chess knowledge against each other. the experiments illustrate problems of interacting knowledge and give some insight into methodologies for  teaching  expert systems. 
1. introduction 
　　with the increasing awareness of the potential for expert systems  knowledge engineering has become a recognized discipline. the addition of knowledge to an expert system raises some important questions: what should one add  how much  can too much knowledge be a bad thing  the goal of answering these questions is to find a methodology for adding knowledge to an expert system  one that maximizes performance while minimizing redundancy and inefficiency. 
　　consider the analogy between a student and an expert system. both go through a period of learning in which the objective is to raise abilities to a desired level of competence. however  the student attends schools in which the curriculum is organized so that new knowledge builds upon the old. it would be absurd  for example  to teach quantum mechanics as part of a grade 1 course. in contrast  expert systems are  taught  in an ad hoc manner. there is no established method for teaching an expert system  nor guidelines for organizing a curriculum. 
　　in this paper  a series of experiments with chess knowledge is reported illustrating some of the difficulties with adding knowledge to an expert system. many of the problems are analogous to those a student encounters when enrolled in a poorly designed education program. the solutions are often similar to the way they are solved by educators. the results of the experiments give some insight into the difficulties of  teaching  expert systems. 
t a competitor in the most recent world computer chess championship . 1. experiment design 
　　a chess program has two distinct parts; the framework for making and analyzing moves  and the knowledge that allows the program to play well. the former includes legal move generation and tree searching  and is well understood. the latter  however  is vague and informal; it is the product of centuries of experiences that have been condensed into rules and exceptions  few of which can be formalized. 
　　the expertise in our chess program phoenix t was partitioned into the following 1 routines: tactics  t   space and mobility  sm   pawn weaknesses  pw   king safety  ks   center control  cc   pawn structure  ps   incremental scores  is   and planner  pl . details of the contents of the routines can be found elsewhere  and are not essential to the points raised in this paper. to determine the utility of this knowledge  a pair of experiments have been performed; one to show how the knowledge should be acquired and one to see the consequences of its removal. the experiments illustrate the  un importance of the knowledge routines as they interact with each other. 
　　each experiment followed an established technique  1  and consisted of a series of matches between versions of phoenix with differing amounts of knowledge. a match consisted of 1 games  with each opponent playing the white and black side of 1 starting positions. the accumulative knowledge experiment starts initially with the basic tactics program  t  and uses it to play a series of matches against t supplemented with a 
　　different knowledge routine for each match. this allowed us to measure the effectiveness of each expert component relative to a program with no such knowledge. this process was repeated by gradually expanding the basic program t with more and more knowledge and using it to identify the next best piece to acquire. the removal experiment starts with phoenix and  using the same technique  gradually eliminates knowledge. this allows us to measure the importance of the routines relative to a program with complete knowledge. 
1 j. schaeffer and t. marsland 
　　to limit the scope of the problem  we have restricted our attention to the acquisition of middlegame knowledge. it was therefore necessary to remove any influence that other phases of the game might have. opening specific information was reduced by chosing diverse starting positions for the matches that were each ten moves into the game. tree searching techniques were factored out of the experiment by having all programs use the same parameters and search to a depth of 1 ply. a game was considered over when it either ended in checkmate or draw  or when phoenix determined that an endgame had been reached. in the latter case  the final position was adjudicated. 
　　a difficult problem was posed by cases where there was no clear-cut winner  but one side had accumulated positional advantages that in the long-term may prove decisive. since the opponents have slightly different models of what is important  it was possible for both sides to think that they had the advantage! the notion of a superior or inferior position was introduced to ensure that the advantage of long term factors could be considered even though the material balance was equal. to ensure impartiality  the adjudications were performed by the chess program cray blitzt. adjudication resulted in a position being assessed a value in the range 1 to 1 with a win  worth 1 point  defined as the side to move being up a full pawn. if the position was not won  a value was assigned reflecting how  un  favourable the position was  with a value of 1 for a balanced position. 
1. results 
　　the results of the accumulative knowledge experiment are summarized in table 1. each row gives the result of the matches between a base variant of phoenix  t with 1 or more pieces of knowledge added  and that program supplemented by the piece of knowledge specified in the column heading. for example  the entry in row 1 and column 1 says that the base program 
t + sm + cc lost by a score of 1 to 1 to 
t + sm + cc + ks. note  however  that the acquisition of knowledge cannot be done in an arbitrary manner. consider row 1 column 1  where the base program won by a score of 1 to 1 over itself supplemented by ps. this  and similar apparent anomalies  illustrate that the haphazard addition of knowledge may not be effective until necessary basic knowledge is in place. 
　　these results can be put into a more familiar form by expressing them as chess ratings  which provide a convenient means of equating the 
t a portable version of the current world computer chess champion  l   but running on a vax 1. program's performance with human abilities. the average club player has a rating of about 1. the details of the rating formula are not important and are discussed elsewhere . pegging the basic t program with a rating of 1  experimentally determined and consistent with others   yields table 1. note that the version of phoenix used has a tournament rating of 1  close to the predicted 1. 
　　the tables support the well-known result  that the most important heuristic is space and mobility  since it gives phoenix almost half its rating points. space and mobility is the simplest routine to implement and requires no real expert knowledge. in some sense  sm can be viewed as the first lesson in the education of a chess program. 
　　after sm  it appears that the law of diminishing returns takes over. additional knowledge provides fewer rating points for increased effort. it is interesting to note that the three smallest gains  is  pl  and ps  were for the three largest routines containing the most heuristics. the inclusion of is appears to have a negative effect on performance  although the difference between 1 and 1 is not significant  as verified by other experiments . this is an example of knowledge used as a building block  is by itself may not be significant  but its presence provides the environment necessesary for effective use of subsequent additions. the rating gains obtained by adding knowledge appear to decrease steadily  except for king safety  see table 1 . this anomaly may be explained by the observation that ks is not an important factor in most positions  and in many games has little bearing on the play. 
　　table 1 presents the results of the diminishing knowledge experiment. whereas sm is the first piece of knowledge that one would give to a program  pw is the most valuable to retain. when phoenix is supplemented by all the knowledge routines  pw plays a much more important role than it does when working in an environment with little knowledge. this illustrates that some knowledge needs the right environment with which to interact to achieve best results. an analogy might be teaching new material to students who do not have the proper pre-requisites. 
the results of matches involving ps in both 
tables 1 and 1 are interesting in that by removing 
ps the program often plays better! most of the knowledge in ps is sophisticated  in the sense that it builds on many elementary concepts that would be taught early in any chess education. one possible explanation of the results then is that phoenix does not know enough to use ps properly. another possibility is that ps has not been implemented correctly; either there is a bug in the routine  or the knowledge has not been properly represented. regardless  it appears that ps may not be of significant benefit to phoenix as it currently stands. the argument for inclusion of a piece of knowledge should take into account the expected benefit versus the cost in terms of space  execution time  and implementation time. 
　　finally  a few words of caution. these results must be taken in the proper perspective. they could be implementation dependent; other interpretations of chess knowledge may differ. in addition  since the experiments were done with only one program  the ratings reported should be interpreted as measuring relative rather than absolute importance. each match consisted of 1 games and took an average of 1 hours of computing time on a vax 1. each experiment consisted of 1 matches for a total of 1 games  taking over 1 months to complete. despite the large outlay of computing resources some statistical variability is still to be expected. 
1. conclusions 
　　our experiments illustrate some of the benefits of a complete retrospective study of the knowledge in an expert system. in particular  they show that knowledge cannot be added in an arbitrary manner  since more sophisticated concepts require that certain fundamental ideas be in place before they can become effective. if the knowledge components are independent  they may be added in any order  but this is not normally the case. rather  there are interactions which are used to resolve contradictions  in order to provide 
table 1: diminishing knowledge results 
	j. schaeffer and t. marsland 	1 
a  best guess decision  when the situation is not clear-cut. these interactions are seen clearly in the knowledge removal experiment. for example  they show the benefits of planning in chess  pl   something that was not obvious in the accumulation experiment. they also illustrate the problems with knowledge that is used infrequently  ks   or perhaps is not well understood  ps . all too often such knowledge may be handling special cases only  and may even be detrimental when applied inappropriately. probably this is an indication that too much diverse knowledge is embodied into a single routine  leaving open the possibility that the best implementation of the ideas contained therein has not been provided. 
　　our experiments have opened up some other avenues of research. in particular  to what extent does knowledge compensate for depth of search  a well-known result is that an extra ply of search in a chess program is worth about 1 rating points   to what extent are the two interchangeable; can additional knowledge in phoenix be used to compensate for a shallower search tree  other experiments being formulated are designed to measure the granularity or  in dependence of knowledge. none of the knowledge routines is completely independent of the others. by breaking the routines into finer granules  the interactions can be identified more clearly  and redundant or contradictory relations can be eliminated. 
