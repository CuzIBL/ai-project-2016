
in this paper  we propose a new progression mechanism for a restricted form of incomplete knowledge formulated as a basic action theory in the situation calculus. specifically  we focus on functional fluents and deal directly with the possible values these fluents may have and how these values are affected by both physical and sensing actions. the method we propose is logically complete and can be calculated efficiently using database techniques under certain reasonable assumptions.
1 introduction
this paper deals with the problem of getting a robot or agent to reason efficiently about action and change under the following three conditions:
1. the agenthas incompleteknowledge aboutcertain changing values in the world  fluents ;
1. the agent has both physical  world-changing  and sensing  knowledge-producing actions at its disposal;
1. the agent is long-lived and may have performed thousands or even millions of actions to date.
these conditions are typical of robots or agents that must operate autonomously over long periods of time  such as the agents found in role-playing games. for example  an agent may not know the relative locations of other agents or important objects  but may be able to moveand to sense what agents and objects are nearby. the challenge is to reason efficiently about the overall state of the world in this setting  taking into account what has been done and what has been sensed  as a large number of such actions are performed.
¡¡there is a significant body of work on logical formalisms for dynamic domains that are appropriate here  such as the situation calculus  mccarthy and hayes  1   the event calculus  kowalski and sergot  1   and the fluent calculus  thielscher  1 . in logical terms  we seek an efficient solution to the projection problem  reiter  1 : given an action theory that specifies the preconditions and effects of actions  including sensing   and a knowledge base about the initial state of the world  determine whether or not some condition holds after a given sequence of actions has been performed. this is a fundamental reasoning problem and a necessary prerequisite to other forms of reasoning in dynamic domains such as planning and high-level program execution. while the projection problem can be solved by regression or by progression  lin  1   it is generally agreed that regression alone is impractical when the number of actions is large  lakemeyer and levesque  1 .
¡¡while formalisms based on logic can represent a general form of incomplete knowledge in a straightforward way  they would then require systems based on some form of theoremproving. it is quite typical of the practical implementations of these formalisms to forego this generality and either insist on complete knowledge or to employ an inference mechanism that is logically incomplete. for the situation calculus  the former approach was taken in the practical implementations of the golog agent programming language  levesque et al.  1; de giacomo and levesque  1 ; the latter was taken by liu and levesque  where incomplete knowledge was dealt with using a logically incomplete form of progression. in the flux implementation of the fluent calculus  thielscher  1  incomplete knowledge is dealt with using constraint rules and a logically incomplete constraint solver.
¡¡in this paper  we propose a new progression mechanism for a restricted form of incomplete knowledge formulated as a basic action theory in the situation calculus. specifically  we focus on functional fluents and deal directly with the possible values these fluents may have and how these values are affected by both physical and sensing actions. our approach handles a restricted form of  functional  local-effect action theories but generalizes the liu and levesque account where progression is logically complete only for action theories that are context complete  that is  where there is complete knowledge about the context of any context-dependent successor state axioms. our method can be calculated efficiently using database techniques  related to those of  antova et al.  1   under certain reasonable assumptions. to our knowledge  no other logical formalism handles progression  and therefore the projection task  in a way that is both logically complete and practical under the three conditions listed above.
¡¡the rest of the paper is organized as follows. in section 1  we review the situation calculus notation  as well as the definitions of projection and progression. in section 1  we discuss the notion of a possible value and define the localeffect and bounded action theories. in section 1  we present a progression mechanism for local-effect and bounded theories and in section 1  we discuss the complexity of the approach. in section 1  we discuss related work. finally  in section 1  we draw conclusions and discuss future work.
1 situation calculus theories and progression
the situation calculus  mccarthy and hayes  1  is a first-order language with some limited second-order features specifically designed for representing dynamically changing worlds. the languagehas disjoint sorts for actions  situations  and objects  everything else .
¡¡a situation represents a world history as a sequence of actions. the constant s1 is used to denote the initial situation where no actions have been performed. sequences of actions are built using the function symbol do  such that do a s  denotes the successor situation resulting from performing action a in situation s. a fluent is a predicate or function whose last argument is a situation  and thus whose value can change from situation to situation. actions need not be executable in all situations  and the predicate poss a s  states that action a is executable in situation s. actions have sensing results  and the function sr a s  denotes the sensing result of action a when executed in situation s  scherl and levesque  1 .
¡¡here  we restrict our attention to a situation calculus language l that includes only the function symbols do sr s1 as described above  the predicate symbol poss  a finite number of functional1 fluent symbols f  a finite number of action function symbols a whose arguments are of sort object  and a finite number of constant symbols c of sort object.
¡¡within l  we can formulate action theories that describe how the world changes as the result of the available actions. we focus on a variant of the basic action theories  reiter 
1 . an action theory d has the following form:1
d = dap ¡È dss ¡È dsr ¡È duna ¡È d1 ¡È dfnd ¡È e
1. dap is a set of action precondition axioms  one per action symbol a  of the form.
1. dss is a set of successor state axioms  ssas   one for each fluent symbol f  of the form
. ssas characterize the conditions under which the fluent has a specific value at situation do a s  as a function of situation s.
1. dsr is a set of sensing-result axioms  sras   one for each action symbol a  of the form
. sras relate sensing outcomes with fluents.
1. is the set of unique-names axioms for actions:
.
1. d1 is a set of axioms describing the initial situation s1.
1. dfnd consists of the axioms for equality and a set of domain independent foundational axioms which formally define legal situations.
1. e is a set of unique-names axioms for constants along with a domain closure axiom for sort object.
¡¡to describe actions along with their sensing results  we use terminology as in  de giacomo et al.  1 . a history h is a sequence  a1 r1  ¡¤ ... ¡¤  an rn   where each ai is a ground action term and ri is a constant that represents the action's sensing outcome. we assume that non-sensingactions always return the fixed result c. we use end h  as an abbreviation for the ground situation term that corresponds to h. this is defined as follows: end h  is s1 for the empty history  and end h ¡¤  a r   is do a end h  . similarly  s h  is the set of atoms that describe the sensing results in h. s h  is an abbreviation for {sr ai end hi   = ri | 1 ¡Ü i ¡Ü n}  where hi is the sub-history up to action ai   a1 r1 ¡¤...¡¤ ai 1 ri 1 .
¡¡a situation-suppressed expression is a formula in the language without poss and sr  and with all situation arguments suppressed. ¦Õ ¦Ò  denotes the situation calculus formula obtained from ¦Õ by restoring the situation argument ¦Ò into all fluents in ¦Õ. we use a b c d e to range over c and f g to range over f. a primitive fluent term is a ground term that mentions at most one fluent symbol  e.g. f c s1   and a primitive atom is one that mentions at most one primitive fluent term  e.g. f c s1  = d  f c s1  = x. a primitive formula  sentence  is a formula  sentence  that mentions only primitive atoms. note that quantification is allowed in primitive formulas but not when the variable appears as an argument of a fluent. finally  we use ¦Ó u to denote a situationsuppressed primitive fluent term.
¡¡in this notation  the projection task  reiter  1  is the following: given a history h and a situation-suppressed sentence ¦Õ  determine whether or not d¡Ès h  |= ¦Õ end h  . we propose to solve it for certain restricted action theories using a form of progression  which we define along the lines of  lin and reiter  1  and  liu and levesque  1 . let i be a standard model iff i satisfies e.
definition 1. let i be a standard model of is a successor model of i wrt a world-changing action  iff i is a standard model and for any primitive fluent atom  iff
i |= ¦µf 	   	   1 .	for a sensing action  with  is a successor model of  is a stan-
dard model  and and.
definition 1.  progression of d1 wrt  iff the standard models of are exactly the successor models of
d1 wrt .
one step of progression is a solution to one step of projection is consistent  then
	    |=	 end     iff 1 |=	  1 .
1 possible values and bounded action theories
although we are assuming that every fluent is functional  and thus has a single value  we do not assume that this value is known. for example  to say that the value of the fluent age in situation s1 might be 1 or 1  d may contain the following disjunction:  age = 1 ¡Å age = 1 ¡Å age = 1  s1 . thus  we say that 1 and 1 are the possible values that the fluent age can take.1 as another example  suppose that we have the following sentence in d:
.
in this case  the fluents f and g each have two possible values. but because of the constraint between them  we should consider the pairwhich has two  rather than four  possible values: . more generally  we have the following definition:
definition 1. let ¦Ó be a tuple of distinct situation-suppressed primitive fluent terms. a finite set of constant tuples v =
  each of the same length as ¦Ó is the set of possiis the smallest set such that
. each element of v is a
possible value .
note that v is the empty set only if d ¡Ès h  is inconsistent.
¡¡when we say that a sentence is possibly true  we mean that it is entailed for some possible value of the fluents in the sentence  taking into account that some fluents may be grouped with others because of constraints.
definition 1. let h be a history and let ¦Õ be a situationsuppressed primitive sentence. letbe a set of tuples of situation-suppressed primitive fluent terms such that every primitive fluent term in ¦Õ appears in exactly one ¦Ói.
we say that ¦Õ is possibly true at history  wherewith eachreplaced by one of its possible
values at h.  a tuple is replaced by
by replacing each term ¦Ói by the corresponding ci. 
¡¡we say that ¦Õ is known to be true at h wrt t iff  ¦Õ is not possibly true at h wrt t .
¡¡it is not hard to see that a sentence ¦Õ is known to be true at h iff for every possible value of the fluents at h  the substituted ¦Õ obtained is indeed entailed. but this is not the same thing as saying that ¦Õ end h   itself is entailed by d ¡È s h . this depends on how we group the fluent terms into tuples.
example 1. consider a theory d containing the above sentence about f and g. let h be the empty history and let ¦Õ be . then we have the following:
1. d ¡È s h  |= ¦Õ end h  ; 1. ¦Õ is not known to be true at h wrt {f  g};
1. ¦Õ is known to be true at.
what is going on here is that for t = {f  g} we look at the possible values of f and g independently  including cases where f = g. foron the other hand  we only look at the two possible values for  and so rule out the cases where f = g.
¡¡this idea of fluent terms taking values independently is very much related to the weak disjunctive knowledge property defined in  petrick and levesque  1; petrick  1  for an epistemic setting of the situation calculus. our account here generalizes this idea by allowing tuples of fluent terms.
¡¡what we will be proposing in this paper  is a method of computingprogressionunderincompleteknowledgethat uses the possible values of fluent terms as above. to ensure that we get a t that correctly captures any constraints among the fluents  we will restrict the form of the basic action theory. the main idea behind what we call a bounded action theory is that d1 will explicitly list the initial possible values of the fluents according to some grouping t  and that the bodies of the successor state and sensing-result axioms will be suitable for specifying a new grouping t  such that what is known about the fluents after some action is performed is accurately captured by the new grouping t .
definition 1. let  be a set of tuples of situation-suppressed primitive fluent terms such that every primitive fluent term appears in exactly one ¦Ói. we say that d is local-effect and bounded by t iff the following all hold:
1. d1 = {¦Á1 s1  ... ¦Ák s1 }  where for each i  there is a set c of constant tuples such that
1. each successor state axiom in dss has the form
 
where is a disjunction of formulas
of the formcontains  z is the remaining variables of is a primitive formula that is called the context .
1. each sensing result axiom in dsr has the form
  where  is a
primitive formula.
1. each	precondition	axiom	in	dap	has	the	form
  where  is a primitive
formula.
1. each action symbol a is either a sensing action or a world-changing action and appears exclusively in exactly one sra or in some ssas  respectively.
1. if action symbol a appears in ¦Ãf then it cannot appear in ¦Ãg for any fluent g that appears in ¦Ãf.
   local-effect and bounded action theories have the property that for any pair of ground action term and sensing re and  are primitive sentences and  is logically equivalent to    are contained in is a primitive sentence. these theories are restricted in that if an action changes the value of a fluent term  then c is contained in the arguments of the action.
1 progression using databases
given an action theory d that is local-effect and bounded by t  we will use a database to represent the possible values for each ¦Ó in t  as a way to capture the models of d1. then we will define a procedure prog that transforms this database into one that represents a progression of d1.
¡¡we first review some basic notions of relational database theory. let l be a first-order language with a finite number of predicate symbols and a finite number of constant symbols c. a database instance for the language l is a first-order structure i such that the domain of i is c  = is interpreted ¦Õ := dbq
 
are the relation names in ¦Õ
+
 
where the extension of

figure 1: progress i1 wrt sensing action
as identity  and each constant is interpreted as itself. let x y be tuples of variables. an x-relation over i is a finite set of mappings ¦Æ from  which we write as. let ¦Õ be a formula with free variables. the answer to ¦Õ wrt i is the x-relation
.
definition 1. let l1 be the language that has the constants in c  and for each the relation name r¦Ó with arity
. we define i1  the database that represents d1  as the database instance for language l1 such that the interpretation of each r¦Ó is the set of constant tuples c that appear in the corresponding ¦Á s1  ¡Ê d1  in item 1 of definition 1.
¡¡the following definition shows how to transform a primitive situation calculus formula ¦Õ into a query dbq ¦Õ  of l1. we will need to use a set of new variables  and we assume that there is a mapping ¦Î from primitive fluent terms to these variables such that each term is mapped to a distinct variable.
definition 1. let ¦Õ be a situation-suppressed primitive formula. letwith each primitive fluent term replaced by the corresponding variable wrt the mapping ¦Î. let t    t be the smallest set such that if some element of ¦Ó appears in ¦Õ. we define dbq ¦Õ  as the formula

¡¡now  on to progression. here is how prog works when a is a sensing action: the fluents that are affected are those that appear in . we use the concatenation of all the that mention these fluent terms to construct a new relation. the tuples in this relation will be the answers to the query dbq. the progression for a world-changingaction is more complex. for each fluent term that is potentially given value d by action cording ¦Ãf  we collect all thethat contain either or a fluent term in the context  and we concatenate them together to make a new ¦Ó. we then assign r¦Ó to be the tuple of all possible values for these terms  using both the new value  when the context is true and the previous values
when the context is false.
definition 1. let i1 be a database  be a ground action term  and b be a sensing result. then the procedure
prog is defined as follows:
1. if a is a sensing action  then do as in figure 1;
1. if a is a world-changing action  then use figure 1.
now we are ready to present our main result:
theorem 1  progression . let d be a local-effect action theory that is bounded by t and  be an action-sensing for each f ¡Ê f do
for each that mentions a do  the subset of e that corresponds to x
d := the element of e that corresponds to v
 the element of t that mentions
 dbq
¦Õ := same as ¦Õ+but with context formula negated
 q+ := ¦Õ+ i1  but with the column corresponding replaced by the value d in all rows
 
are the relation names in ¦Õ+
 
     where the extension of end for
end for

figure 1: progress i1 wrt world-changing action
result pair such that is consistent. let i1
be the database that represents d1. then prog represents a progression of d1 wrt .
¡¡the proof of theorem 1 follows from the following lemma and the property of bounded theories listed in item 1 of definition 1 which implies that the processing of fluents in the main loop of figure 1 can be done in any order.
lemma 1. let ¦Õ be a situation-suppressed primitive sentence. then  ¦Õ is possibly true at the empty history wrt to t iff there exists a standard model of d1 that satisfies ¦Õ s1  iff dbq ¦Õ  i1  is non-empty.
we conclude this section with an example.
example 1. consider the following scenario where an agent lives in a fantasy world of some role playing game. the agent is trapped inside a dungeon and in order to get out she has to unlock the main door and climb out. unfortunately  the main door can only be unlocked by casting a magical spell. in particular  the agent has to cast the spell while being in the same room with a magical orb that is hidden somewhere in the dungeon  otherwise the spell has no effect. finally  even though the agent cannot find the magical orb  she knows that it is hidden somewhere in rooms r1 or r1 of the dungeon.
¡¡for simplicity we use three  functional  fluents to represent this scenario: hero orb door which hold the location of the agent  the location of the orb  and the state of the door respectively. we use two actions: go y   the agent moves to room y; cast y   the agent casts a spell that magically instructs the door to change to state y. also  we use the constants cl op to represent the state of the door  closed  open  and r1 r1 for the two rooms.
¡¡let d be an action theory such that d1 consists of the sentences door = cl s1    orb = r1 ¡Å orb = r1  s1   and hero=r1 s1 ; dap consists of preconditionaxioms such that ¦°go and ¦°cast are always true; and dss consists of the ssas such that ¦Ãhero a v  s  is a = go v   ¦Ãorb a v  s  is false  and ¦Ãdoor a v  s  is a = cast v ¡Ä z hero = z ¡Äorb = z . d is local-effect and bounded by t = {agent orb door}  but it is not context-complete. the following figure shows the database that represents d1 and the transformed database after applying prog once for action cast op   and after applying prog two more times for go r1  and cast op .

heror1
orbr1
r1
doorcl
heroorbdoorheroorbdoorr1
r1r1
r1op
clr1
r1r1
r1op
opnote that after the three steps of progression the fluent door has exactly one possible value  op  as intended.
¡¡finally  to justify concerns about why this approach is better than just calculating all the possible worlds  the reader should imagine there being a large number of fluents with unknown value  e.g. other doors  objects  for which the database remains unchanged. a more detailed discussion follows.
1 complexity analysis
we first review some results about the complexity of database queries of a certain form. the guarded fragment gf is the smallest set of formulas such that any existentially quantified sub-formula¦Õ is conjoined with a guard  i.e. an atom containing all the free variables of ¦Õ  andre¡äka et al.  1 . in  gottlob et al.  1  gf was extended to the k-guarded fragment gfk where up to k atoms may jointly act as a guard. when i is a database of size n such that the domain and all relations are sorted  and ¦Õ ¡Ê gfk is a formula of size l  then ¦Õ i  can be computed in time o lnk   see  liu and levesque  1  .
¡¡the complexity of prog is dominated by the evaluation of database queries of the form dbq ¦Õ . by definition 1  it follows that dbq ¦Õ  is a k-guarded formula  where k is the number of relation names that appear in dbq ¦Õ . for any theory d  we let the width of d be the maximum k and the depth of d be the maximum length over all of the formulas and . by definition 1  we get the following:
theorem 1. let d be a local-effect action theory that is bounded by be an action-sensing result pair.
let i1 be the database that represents d1. then  the complexity of prog  where l is the depth and k is the width of d  and n is the size of i1.
¡¡the tractability of the approach relies on the assumption that the width of d is often a small constant k.  note that the width of d is bounded by what we are calling the depth of d.  there is also one more issue: as we saw in example 1  after a progression step is performed some of the relations in i1 may be joined together in the updated database and eventually this can lead to an exponentialblow-up of the size of the database.
¡¡nevertheless  we expect that in real-world domains there is a small upper-bound on the number of primitive fluent terms that are both unknown and mutually constrained at any history  and thus need to appear in the same relation in i1. also assuming that there is a constant upper-bound for the number of possible values that a single fluent may have at any history then the size of the largest relation in i1 is always bounded by a large constant n.
¡¡with the current definition of prog  the size of the relations in i1 may not be optimal because fluents that are known to be true may not be stored in a separate relation  such as hero in example 1. this can be avoided by augmenting prog to check  as a final step  whether some of the updated fluents have only one possible value and should be stored separately. finally  following the proof of the complexity result about gfk in  liu and levesque  1   note that n is the size of the largest relation in i1. hence  under the stated assumptions the complexity of is o lnk+1   where l is the depth of d  and k n as above.
1 related work
one of the main differences between our approach and most of the related work in the literature is that we work with functional fluents. our intuition is that when it comes to restricted forms of incomplete knowledge  functional fluents with possible values are an attractive alternative. in a formalism with relational fluents  such as  son and baral  1; liu and levesque  1   it is not clear how to handle information of the form  age = 1 ¡Å age = 1 ¡Å age = 1  without using a general method for unrestricted disjunctions  which will have computational problems of its own. our way of handling the disjunctions by using a database of possible values is similar to ideas in  antova et al.  1  where  however  actions and progression are not handled .
¡¡one serious limitation of our approachis that we are forced to represent all the primitive fluent terms in the language. also  the theories we are dealing with are essentially propositional and we insist that an action does not affect both a fluent and its context. the approach of  liu and levesque  1  does not suffer from these limitations. nevertheless  our progression mechanism is always logically correct  unlike the weak progression mechanism that is employed by liu and levesque which is logically complete only for theories that are context-complete. an example of the theories that we can handle better is illustrated at the end of section 1.
¡¡one approach that is very similar in spirit to our own is that of the flux system for implementing fluent calculus theories  thielscher  1 . flux can express incomplete knowledge in the form of finite domain arithmetic constraints that are handled by constraint handling rules  fru¡§hwirth  1 . when incomplete knowledge is progressed in flux  new constraints that represent the progression are appended to the constraint store. when fluents remain unknown and are constantly progressed  the  chain  of stored constraints becomes larger which  apart from affecting the efficiency of reasoning  can lead to failure due to lack of memory resources. so while flux can be more efficient in computing the progression of a state after an action has been executed  appending constraints can be problematic for long-lived agents.
¡¡another similar approach is that of  funge  1   dealing with real-valued functional fluents. unlike our approach though  funge's does not provide a mechanism for joining fluents together whenever they are related with some constraint. other related approaches for doing approximate progression of action theories include  approximate  logical filtering  amir and russell  1   and the 1-approximation semantics for an extension of the action language a  son and baral  1 . finally  the idea of reasoning with possible values has been applied in an iterative planner  levesque  1  and in a variant of golog  sardina and vassos  1 .
1 conclusion
in this paper  we have proposed a new progression mechanism for a restricted form of situation calculus basic action theories that feature incomplete knowledge and sensing. our approachhandles theorieswhich are essentially the functional version of the local-effect action theories  liu and levesque  1   further restricted so that they are also bounded by a set of groupings for fluents. we use a large database in order to represent the models of a theory by dealing directly with the possible values that these groupings of fluents may have. our progression mechanism updates the database according to how the possible values are affected by both worldchanging and sensing actions. the method we propose is logically complete and can be calculated efficiently using database techniques under certain reasonable assumptions.
¡¡our current and future work focuses on some of the limitations of our approach. we are investigating alternative formalisms for representing d1 so that we avoid listing all primitive fluent terms in the language as well as all the possible values for each fluent. in particular  we consider the incorporation of intervals as a way to concisely represent large lists of possible values and the use of quantified axioms in d1. furthermore  we believe that the local-effect requirement can be lifted with a small additional cost in the progression mechanism. finally  we want to extend our approach so that it can handle the evaluation of unrestricted quantified formulas.
