 
　　an approach based on planning techniques is proposed in order to support the complex activity of a multi-office organization. the italian public administration has been taken as an example and analyzed. the synthesis and the execution of procedures are investigated in an automated office based on knowledge about the organization structure  the documents and the rules that regulate the activity. a system is described whose aims are the formation of a plan that represents an executable specification of a procedure and the effective execution of the required operations. when an exception is raised  the planner is automatically invoked to update the plan according to the current state of the office system. a prototype has been built and tested on some applications within the domain of the piedmont administrative procedures. 
	i 	introduction 
the integration of the artificial intelligence 
 ai  concepts and methods with the current office information systems  ois  facilities is a good way of improving the quality of the latter  and of increasing their functionalities and efficacy. it is plain that the ois'a capabilities cannot merely consist in supporting a few simple tasks such as electronic mail  information retrieval  document preparation and so on  which are common to most offices. more than a uniform data representation and a system language for programming office procedures is required to effectively solve the office automation  1a  issue. to this respect  it is by now widely accepted  barber 1  crof-; 1  aiello 1  that ai techniques can be useful in many aspects of the office work  e.g. the utilization of problem solvers to perform specific activities in specialized domain. 
　　indeed  an effective automated office system should help users also in performing their higher level unstructured tasks  which are related to the goals and functions of offices. knowledge based systems are useful in this activity  too. such systems can make use of knowledge about the structure and the organization of the environment  of 
1 	knowledge representation 
franco sirovich 
dipartimento di informatica university di torino 
c.so svizzera 1 - 1 torino  italy  
knowledge coded within the laws and rules that regulate the activities  and of more informal knowledge on current practices  derived from the gained experience. these kinds of knowledge can help in establishing the behaviour of the user in an organization consisting of many specialized offices  by means of a problem-solving activity whose aim is to arrange complex procedures that achieve the user goals in a cooperative way. 
　　these requirements are particularly emphasized in the italian public administration  pa   where we have very complex and multi-layered laws  e.g. state vs. local laws  and a particular work organization. even though the various agents have some margin of authonomy and a particular degree of responsibility and accountability for their portion of work  their activity is subject to a significant control  either from a technical  or from a decisional point of view. the organizational structure of the pa is shaped according to the control structure which is required by law and such a kind of cooperation is needed in order to accomplish the work. because of this fact  the problem-solving activity in the pa must be very sensitive to the organization itself. the domain of the pa proved to be quite an interesting field to experiment with  verify the applicability of problem-solving techniques to the synthesis of office procedures and improve the ois features. 
　　the paper is organized in five sections: section ii outlines our view of multi-office organizations; section iii determines the boundaries of the problem and analyzes how problem-solving techniques are currently used in the office environment; in section iv we propose an approach  based on planning techniques  to the synthesis and the execution of procedures in an automated office; finally  the last two sections of the paper describe a prototype we built at csi-piemonte and some examples of its functionalities. 
ii the domain characteristics and needs 
　　in the pa environment  most of the office work consists in tackling procedures  which are neither strictly coded nor exactly repeated. each case must be first handled by doing some problem-solving activity in order to identify the rules and the competences which are relevant to it. 
　　the procedures concern many matters and catego ries of laws and rules. some of these are stable  some are evolving  some leave a wide room to the discretion of the administrative structure. this discretion is frequently exerted by bureaucratic regulations  e.g. circulars or deliberations. 
　　the knowledge on the specific procedures must be combined with the general rules and the organization: the problem-solving activity consists in building a strategy for facing the current case  and then applying it. this results in a planning process which produces a sequence of activities  whose main goal is to operationally solve the new task. in this domain  it is worth noting that most undertaken steps are involved and must be certified by documents which record  possibly in a synthetic form  that all relevant regulations have been complied with and all activities have taken place in a lawful way. for this reason  the planning process is linked to the structure of the necessary docu-
ments on the one hand and defines the different structures of these documents on the other. 
　　in the pa  the resolution of the problems we analyzed as testbed is entrusted to the level of the officials responsible for the offices  alias services in this environment . it is plain that this kind of office work requires capacities pertaining to a different level than  for example  the secretary's one. rather  it concentrates on the tasks of the other levels  and integrates them within procedures. the officials have some kind of discretion and accountability  both in establishing the practices which make concrete the general content of the laws  and in taking decisions involving technical aspects. in fact  the duties these officials carry out do not include issues which require political decisions. in the pa  this type of issues is of concern for the elective political organs only. 
　　these officials never work alone: the operative part of their activity is strictly bound to the interaction with the other agents in the system. they receive incitements from the environment  and themselves produce incitements. their activity is subject to control  and they themselves exert some control over the other agents activity. moreover the operations they solicit  visas  signatures  production of documents  ...  not always yield the expected results  just because of the technical discretion the other officials exert and because of the indeterminacy and of the indefiniteness of the decisions the political organs take. 
the complexity 	of the environment and the characteristics of the tasks these persons perform cause their prevailing activity to be the  quasi interactive  construction and execution of procedures. reasoning ability and knowledge is required: 
. to build new procedures; 
. to face unusual cases and exceptions to the normal course of a procedure; 
. to adapt a procedure to the changes in the environment  for example because of new laws or dispositions. 
i l l problem delimitation 
　　the challenging and difficult problem of interpreting legal texts and solving the contradictions among the rules  cook 1  mccarty 1  goldman 1  rissland 1  has been avoided in order to deal with the complexity of the domain. a knowledge-base  which provides relevant formal rules and combines them with the informal rules gained from the experience has been developed with the help of domain experts. 
　　in particular  our attention has been focused on making and managing contracts. in this case the government regulations and laws on the one hand and the routine procedures and the officials' experience on the other  state: 
. how the pa must choose a contracting party; 
. that the pa's contracts depend on certain requirements  formalities and others documents; 
. how these contracts must be managed by the pa; 
. who carries out which functions in the organizational structure of the pa. 
these rules are at the bottom of the reasoning for  constructing  and  executing  suitable procedures. then  our work is in a complementary position in relation to the complex legal decision making problem  although it falls within one of application area for expert system in law: the legal procedure and document generation  waterman 1 . 
　　the addressed problem is the following: in the field of the administrative procedures  as we pointed out above  and in many other offices  as we feel  the problem-solving activity involves both the procedure oriented and the data oriented ap-
proach. the reasoning activity aims at developping plans  i.e. procedures  which provide them both. procedures and documents are strictly related and interdependent for a series of reasons. firstly  the properties of a document to be produced often determine or require specific steps in the procedure  or superimpose a particular execution order. secondly  the actions require the existence of several documents as a precondition. thirdly  the production of documents is itself an operation. finally  the documents record and certify the most important parts of the procedures. therefore  we cannot cope with all these requirements by modeling 
	bona  montini  and sirovich 	1 
the problem-solving activity in the office from only one of these two points of view. 
　　in fact  in the interpretation of problem-solving as a data oriented activity  the solution of a goal is achieved by picking out which documents are necessary and which characteristics are required for them. documents are described by means of a set of properties  connected by various relationships  usually expressed as rules or constraints. as an example  consider the definition of the documents and their relationships in the omega system by means of  descriptions   attardi 1 . from this point of view  part of the problem-solving activity consists in building documents. informations are gathered by interacting with the user and by conveniently querying data bases. 
　　on the other hand  the use of problem-solving techniques in the procedure oriented approach aims at stating which steps must be done in order to perform the task. in this case  the rules of a knowledge base define the logical decomposition of the task in a set of subtasks and the corresponding precedence relations among them  down to the level of the application of single tools. 
　　in the oa literature  a similar process can be found   in the automatic generation of augmented petri nets  apn  from procedure descriptions expressed in a non-procedural language  zisman 1  zisman 1 . in this non-procedural language we can distinguish two different procedure representation levels. one level defines successive tool applications as  macros  of the system  activity detail   while the other level combines the macros introducing precedence relations  activity initiation . an alternative way of viewing the problem-solving methods in the office procedures is to define procedure hierarchies  croft 1   where the terminal nodes represent single tool invocations. the planner examines the state of the objects contained in the semantic database and the procedure descriptions in order to automatically carry out as much of that procedure as possible. 
iv our proposal 
　　in offices like those we described in the previous sections  the goal of the reasoning activity is to build a  plan  and then to control its execution by modifying it when an unexpected situation occurs. this activity aims at identifying the various operations to be done and the precedence relations among them  at establishing which agents must perform the most  routine  and mechanical activities  as well as the less structured ones  that involve choices and decisions  and at defining all the documents involved in the procedure. 
a planning system can take the role of a con-
1 	knowledge representation 
sultation system in an effective and useful way for this kind of users  because its running mimics the activity they perform  that is the construction of procedures and documents. in addition  an integrated approach to plan generation and plan execution  sacerdoti 1  wilkins 1  can be profitable in an office environment where exist a few tools  however simple  such as electronic mail  text processors  archives and so on. in this case  the process of monitoring plan execution can automatically carry out as much of the step specified in a plan as possible  help the users to coordinate the less structured activities and  when a failure or a surprise occurs  shift to the planning process to modify the plan. 
　　we propose a planner which uses both properties of documents and procedural steps  and therefore can introduce new informations in documents and/or particular steps in procedures  in order to reach its goals. a uniform representation for the knowledge on both procedures and documents is required because they share the same  rationale  and find reciprocal justification and explanation. 
　　according to the laws in the domain  the plan resulting of the reasoning phase could be interpreted as the way the overall organization acts. to make the result of the reasoning process an executable procedure we could examine the plan from the point of view of an individual official and apply a mapping between the predicates that describe primitive operations for the planning mechanism and  macros  of an office language. the office language could provide primitives for synchronizing the activities and a macro definition facility. moreover  its interpreter could invoke a series of integrated tools and execute steps in parallel. 
　　the planner  on the other hand  should be not only a procedure generator  but also a document generator. in this case  the documents could be described in the plan by means of a set of properties. in analogy to the procedural aspect  we could define a mapping between properties  on one side  and structure and contents on the other. applying this mapping  the document part of a plan can be translated in a form definition language  tsichritzis 1  or in a constraint language  ferrans 1 . even tools for the automatic composition of free text documents  zisman 1  sprowl 1  can avail themselves of the informations produced by the reasoning program. the generic text of a document can be described by means of a production rule language  where the antecedent part matches the informations generated by the planner  and the consequent part corresponds to portions of text containing variables that are bound during the pattern matching phase. 

　　note that with a homogeneous representation of documents and procedures  we can express the semantic consistence of a document also by relating it to the context of the procedure it pertains to  being this context known during the reasoning phase. in this way  our planner can acquire  integrate and organize the knowledge needed to produce documents  determine the conceptual structure of the documents and get nearer to an effective document generator  improving the features of already existing tools. this fact paves the way for effectively enriching the ois environment  by controlling several ois tools from a higher level  that is from the cognitive level. 
v system description 
　　the ideas suggested above have been implemented within the project aspera* of the csi-piemonte in cprolog vers.1 on at&t 1 microcomputer under 
unix** system v as operating system. the overall architecture of aspera consists of two processes communicating by means of two named-pipes. the first process is a unix shell which simulates an ois system  the second is a prolog environment where a planner and an execution-monitor act. fig.l shows the aspera modules whose main functionalities are described below. the simple unbroken arrows show which modules call which others. the double 

figure 1: the aspera system 
 aspera is the acronym of automatic support for planning & executing regional administrative procedures. this project has been carried out with the collaboration of the department of computer science of the university of turin and of the regional shareholdings service of regione piemonte. 
**unix is a trademark of bell laboratories. 
unbroken arrows show where the informations produced by the various modules are loaded and the broken ones the flow of data through the system. 
　　the knowledge is described by a knowledge representation language oriented to the office domain and based on logic programming. with respect to most planners described in the ai literature  sacerdoti 1  wilkins 1  we do not only represent the knowledge by means of  operators   but we employ the logical decomposition of the horn clauses formalism to define the relations expressed both in the laws and regulations and in the informal rules the officials use to cope with the problems. we combine this  qualitative  reasoning with an  operative  one concerning which primitive actions*** are to achieve and which conditions are necessary before an action can be performed. the result of the reasoning is a network of instantiated primitive actions  nodes  at just one level of detail with partial ordering relation on them. 
　　note that low cost hardware and general purpose computers  which the pa can utilize today  are the target machines for this application. thus we chose to adapt the expressiveness of prolog to the needs of the addressed problem instead of employing more powerful tools on lisp machines. 
a. the language 
　　the knowledge representation language extends the horn clauses formalism  clocksin 1   by supplying suitable mechanisms for the office domain. the main extensions are: 
. classification of predicates according to their role within the office system; 
. definition of a soundness range for the variables according to a taxonomy of concepts in use 
in the domain; 
. precedence relations among operations; 
. definition of the functional dependencies in 	the predicates; 
. identification of the document types and of the document versions. 
　　the knowledge base  the kb of figure 1  consists of definitions of predicates  taxonomic concepts and logical rules. the predicates are classified in four categories: 
  operations  whose instances correspond to office system macros; 
  document predicates  whose instances define properties and contents of the documents; 
. interaction predicates  which describe informations to be found outside the system  users  data bases  ...  ; 
. logical predicates  which can represent different kinds of relationships. 
***that is the leaves in the deduction tree. 
bena  montini  and sirovich 1 

　　the taxonomy of concepts represents the hierarchy of semantic categories* existing in the domain and is a finite graph without cycles. the arcs which interconnect the categories specify subset relations  figure 1 . 

　　the variables and the constants  objects  which appear in the rules  figure 1  can be restricted according to the categories specified in the taxonomy by means of the prolog operator  isa . 

　　the precedence relations among operations represent some procedural knowledge of the domain that contributes to the success of a plan. these relations are expressed by preconditions and marked with the symbol   . for example  the rule of figure 1 shows** that people must sign a contract before it can be registered. a general rule may contain both preconditions and subgoals in which the rule consequent is decomposed. 
　　operation  document and interaction predicates allow to define functional dependencies of their arguments  attardi 1 . for example  the predicate definition guaranty  #offer  type of guaranty  expresses that an offer must provide for a particular type of guaranty. the symbol#means that every offer must fix univocally the guaranty type. 
　　at last  a section of kb allows to declare the types of the documents involved in the domain. for each document a version sequence can be defined  draft  text to be voted . the planner examines these informations to enforce some precedence relations among the nodes automatically. for example  the system assumes a particular version of a document must be always drawn up before it can be used. 
*a semantic category is a name given to a collection of known elements in the domain  mcskimin 1 : e.g. subject  administrative act  contract. **we follow prolog convention: an initial upper case character means a variable and a lower case denotes constants  i.e. objects and categories. 1 knowledge representation 
　　the reader module loads in the prolog database the knowledge base  builds a few internal representations for it  initializes the short-term memory  stm  of the system and loads also the rules that define how an operation has to be executed 
 these  macros  are loaded into the exec base of figure 1 . 
b. reasoning and plan formation 
　　several completeness levels of a plan could be considered according to the number of cases the plan is able to cope with. the simplest level supposes  optimistically  that each operator returns a successful  and expected  result. in this case  a coherent plan is established by considering as reference the procedures that generally are used. a mechanism for revising the plan is triggered when an exception occurs. an exception can be defined as the mismatch between the situation expected in the plan and the actual situation. a most complex level consists of a program which provides for all the alternatives on which there exists some knowledge. in other words  we can say that the second type of plan contains as much informations as we are able to infer from the knowledge. 
　　in our domain  for the complex  dynamic and indefinite nature of the external world described above and for the inherent incompleteness of the knowledge base  it is useless that the planning system investigates all the possibities that can happen in the world: this 1s not always practical or desirable. it is more useful to accept that things in the real world not always proceed as planned and to aim at an integrated approach to plan formation and plan execution with capabilities to replan. 
　　in the current experimentation  the interpreter  planner of figure 1  produces a plan by proving a theorem which expresses a goal. the proof occurs according to the usual method of the lushresolution. a set of nodes is associated with each proof and represents operations that will produce the effective realization of the goal  if they are executed with success. the nodes are globally stored in the stm. during the reasoning process both the precedence relations among the nodes and the properties of the documents involved in the procedure are also inserted in the stm. 
　　during the proof  the variables can be restricted to more specific categories and the unification algorithm considers these restrictions to unify variables and objects  montini 1 . this simplified constraint approach improve the efficiency and the generality of the planner  reduces the amount of backtracking necessary during a proof and allows a more general symbolic reasoning. 
　　the system applies rules of the knowledge base and acts in different ways in accord with the type of the predicate it is examining. a logical goal is achieved by selecting a rule and by proving in its turn each subgoal which appears in i t . a set of nodes is associated with the proof of each subgoal; the union of these sets is associated with the proof of the goal. precedence relations among nodes are introduced by examining the preconditions that appear in the rule: we introduce in the global description of the plan a precedence between the nodes associated with the preconditions and the nodes associated with the goal. in short  in the plan the nodes which correspond to preconditions precede the ones which correspond to the goal. 
　　the rules that describe the next three kinds of predicates  i.e. the operations  the predicates about the documents and the interactive predicates  can only contain preconditions  and not subgoals. from the point of view of the logical decomposition in subgoals  these predicates  therefore  must be considered as  primitive . in the course of the reasoning process  a goal whose type is operation or interaction is considered proved  if the operation or interaction has already been done. otherwise  the preconditions are examined  a new node is built  associated with the goal and inserted in the plan  in stm  together with the precedence relations with regard to the preconditions. the new node is thus the result of the proof and is passed to the higher level goal. 
　　during plan formation  as the nodes are globally stored  two equal instances of the same node are not allowed*. a new node is not introduced in the plan  if its description corresponds to the one of an already inserted node: in this case the two nodes are unified and regarded as one. great care is also taken in backtracking  when we have to delete some nodes and some precedence relations from the stm. consequently  we only delete a node from the plan when the backtracking arrives at the point in which the node was really inserted into the net. 
　　the global informations are also kept consistent by examining the functional dependencies  for example  nodes with contradictory informations are not inserted into a plan  and by checking the absence of cycles in the plan  i.e. the precedence relations among the nodes of the plan cannot involve cycles . this last task is performed by the test module of figure 1. 
　　likewise  a document property goal is satisfied by examining the description of the document  if it already exists and has been filled. otherwise  the 
 this choise is closely related to the heuristic  use existing object  used by noah  sacerdoti '1 . preconditions are examined. if the proof is successful. a new specific node is built. this node represents the operation of drawing up the document. the property is then inserted into the document description in the stm  and the consistency is checked with respect to functional dependencies. 
c. plan execution 
　　the link between the planning system and the interpreter of the office system programming lan-
guage is performed by the translator  exec module of figure 1   whose task is to map the net of nodes and the precedence relations into an executable procedure. in the plan  each node represents an operation. some of its arguments are interpreted by the translator as the agents who must carry out the operation  according to the syntactic conventions in the mapping. thus  the translator can interpret the plan as the way the overall organization acts and can identify where the roles and the competences of the agents within the area of the procedure fall. 
　　during the translation phase  a sequence of steps is built by examining the plan from the point of view of an individual agent. translation of an operation into a macro is achieved taking into consideration the point of view the translator assumed and the arguments of the operation. if an operation of the plan is forwarded agenta  agentb  documentd   when the translator has the point of view of the agenta  the operation is mapped into the macro send mail documentd  agentb ; otherwise  when the translator acts as the agentb  the operation corresponds to a statement as receive mail documentd  agenta   which predisposes agentb to receive documentd from agenta; again  if the plan is examined from the point of view of a third agent  the agentc  the operation corresponds to no action. 
　　during the execution  the available tools can be the usual ones in an office system. among them  it is worth mentioning expert systems to solve specific problems in the domain  barber 1 . the role of the preparation document tools has been emphasized in the implementation. these tools make use of the results of the reasoning phase both to automatically f i l l form and to put parts of documents together in order to produce free text documents. in order to achieve these results  the system uses a particular document description  in which parts of text and predications are mixed  in a language that substantially remembers the precondition and action rule paradigm. the produced documents are  of course  objects of the archiving system  so next steps in the procedure  or even other procedures  can use them again. 
at last  when an operation produces a different bena  montini  and sirovich 1 
result than the one expected by the plan  the execution of the procedure is interrupted and the planning system is invoked to extend the plan  according to the current situation  i.e. the operations already performed and the results obtained. the already performed operations  the drawn up documents  the query already asked do not appear in the new plan which only provides the actions which have s t i l l to be done. then the control is returned with the modified plan to the execution monitor and this cycle can continue until the whole procedure has been completed. 
　　in this regard  a problem of incompleteness owing to the characteristics of the office operations exists. the execution of an office operation cannot be undone  once happened  unless we explicitly provide for the execution of the  inverse  operation in the plan  if this is possible. the incompleteness is due to the fact that such an inverse operation does not always exist or can be applied  for example  a signature usually cannot be withdrawn . in such cases the execution of an operation could prevent the possibility of going through alternative ways  and  thus  of achieving the overall 
goal. likewise  there is a problem of minimality in the plan formation: if an undo operation exists  the total cost of the plan is made higher by two operations which cancel out. 
　　this problem can take advantage of a replanning approach like that of  sacerdoti 1  wilkins 1  and in part solved with plans which provide alternatives. our research is continuing in this direction  by taking into consideration both the possibilities of symbolic execution involved in the use of restricted variables and the cost of such plans in relation to the dynamic nature of the external world. 
vi an example 
　　the prototype we described in the previous section has been tested on some applications within the domain of the piedmont regional administrative procedures. in order to exemplify the concepts we present in this paper  some relevant rules follow. the following rule  that is the transcription of the regional piedmontese law 1  art. 1 chosen contractor contract  csi rp :object of  contract contract work  able and willing contract csi rp   write legitimation contract contract 'law 1'  : contract isa contract  work isa computer science. 
ensures csi-piemonte  referred to as csi  has right of priority in entering into contracts with regione piemonte  referred to as rp  when the contract concerns the field of computer science. in the rule  the mixture of procedural steps  e.g. 
1 	knowledge representation able and  willing  and document properties  as write legitimation  contract  is evident. moreover  the rule contains elements of procedure recording. in fact  if in achieving its goal the planner makes use of this rule  the condition write legitimation contract must be satisfied. the planner inserts this property in the stm  and  during the execution phase  the free text document generator uses it to insert into the contract a reference to the pursuance of the regional law as a justification. 
　　the fact that people  x  express their will to enter into a contract with someboby  y  by forwarding him an offer is established by the rule: 
ab1e and willing contract  x  y :    valid offer offer x contract   forwarded x y offer  
: contract isa contract  offer isa offer  x  y isa juridical person. 
the validity of the offer is a precondition. this property is defined in turn by other rules that specify further properties the offer must satify  and that  during the planning phase  introduce more nodes and precedence relations into the net. 
　　observe that the  forwarded  predicate is declared as an operation  and that  hence  during the planning phase its instances correspond to nodes 
 see figure 1 . taking into consideration the  valid offer  precondition  the plan contains suitable precedence relations between the nodes deriving from the precondition and the one which corresponds to the forwarding. at execution time all the operations relative to the validity of the offer must be completed before the actual forwarding of the document starts. among these operations there is the drawing up of the offer itself. 
 1     1  
1: drawn up csi offer1  
1: forwarded csi rp offer1  
figure 1: a precedence network 
　　the translation of the network in figure 1 can be done from two points of view  that is the agent csi and the agent rp. the procedure for csi expects that two macros are successively invoked. the first macro calls the free text document generation tool in order to produce an offer based on the description contained in the plan. the other macro  as we previously saw  v.1   invokes the electronic mail facility  and sends region the offer. in the procedure for rp the node  1  will be translated into the empty macro  because it requires no operations on behalf of that agent  while the node  1  predisposes the agent to receive the document. remark that the macro can also contain some timeout mechanisms  in order to send a solicitation in the case of delays in forwarding the offer. the 

receivejnail macro  lastly  takes care of invoking the tool  which checks that the contents of the documents coincide with the expectations in the plan. if such a check fails  the conveniently invoked planner  making use of the new informations  can eventually modify the plan. 
vii conclusions 
　　the approach to the office activity presented in this paper is centered on planning techniques  
which are based on knowledge about the organization structure  the documents and the procedures of the office. this approach can be considered  according to the opinion of  hammer i1   as providing tools for supporting the office system analysis. the task of the office analyst is to describe all the necessary knowledge  and  by using the planning capability  to arrive at an executable specification of procedures in the automated office system. 
　　in a highly dynamic and ever changing environment  like the pa's world  this analysis is itself one of the system tasks  indeed  one of the main tasks . unlike other kinds of office  this task is not a prerogative of an individual worker  but is constantly performed by the officials responsible for services  to face both the very great number of execeptions  and the changes in the laws and regulations. moreover  we feel this activity must be supported in an automated office  and included in an overall office model  because it is not closely related to the domain we considered  but is involved in the general management of the activities in a firm. 
acknowledgements 
	the authors wish to 	thank f.massacesi 	and 
d.formento  of the regional shareholdings service of regione piemonte  for their work as domain experts. we are grateful to our colleagues at laboratorio di intelligenza artificiale  with which we had useful exchanges of opinions  and 
p.tribaudino for her helpful editorial assistance. 
