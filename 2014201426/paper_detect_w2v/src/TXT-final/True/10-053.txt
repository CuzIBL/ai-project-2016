 
　　　many of the tasks that go into the building of an expert system - collecting the expert knowledge  setting it up for efficient problem-solving  providing mechanisms for acquisition and explanation - are structured by the choice of organization for the system's knowledge base. this paper discusses one such organization and the implementation approach it entails. this approach has been used to produce a business consultant program. 
introduction 
　　　re cently  a considerable amount of research has been directed toward the development of programs which provide problem-solving expertise to the user   brown  et  a l . 1   buchanan  et a l .    
 davis    hart    martin    pople    rubin     s h o r t l i f f e      sussman  . the methods for building these programs differ mainly in the way they trade off the ease with which knowledge can be acquired and explained against the efficiency with which it can be used to solve problems. the approach taken here explores a different trade-off: concentrating on a representation for the expert knowledge which is at the same time easy to build and efficient to run  at the cost of increasing the complexity of the process which applies this expert knowledge to any particular problem. 
　　　all approaches to building expert systems are essentially mechanisms for applying general knowledge about a class of problems to specific examples of that class. in existing systems  particularization of knowledge is part of problem-solving. for example  in rule-based systems   davis    shortliffe    the process of deciding whether an expert rule is applicable to a problem is part of the process which uses that rule to help solve the problem. when some state of knowledge about the problem matches the pattern of a rule  the rule is automatically applied. this creates a new state which w i l l be used for further rule application - a process which continues u n t i l a desired solution state is reached. note that this method requires that the same knowledge representation be good for solving 
*this research was supported by the advanced research project agency of the department of 
defense  and was monitored by 	the office of naval research under contract number n1-c-1. 
current address 
computer science department 
research laboratories general motors technical center barren  michigan 1 
problems and for enabling the program to see when knowledge is applicable. frame systems  rubin  have a similar property. 
　　　in the approach presented here  application of knowledge is separated from problem-solving. knowledge representations and the problem-solving procedures which use them are tailored specifically to solving problems in the domain of interest. this allows them to be easy to build and explain  because the expert's concepts and procedures can retain their real world interrelationship within the program. at the same time  this problem-solving knowledge can be efficient to use because the system builder can take advantage of algorithms which are specifically designed for those interrelationships. a l l of this is at the cost of providing a separate  relatively sophisticated procedure to find a mapping between the specialized expert problem-solving knowledge structures and the  presumably very different  input problem structures. 
　　　this approach has been used to implement an expert system which uses a cause-effect flow model of the firm   forrester    gorry   to solve work force control problems presented as one page 
business cases  mark   
definition of reformulation 
　　　the basis of the reformulation approach is the following model of expertise: 
figure 1. the reformulation mode  of expertise 
　　　the expert knowledge is in the form of a self-contained and self-consistent model of a 
　　　class of problems  and solution methods  in the domain of interest. the client describes problems in  naive  terms - i . e .   in a form that is certainly not based on  and in fact may vary 
widely from  the expert's formalism for describing things in the domain. the expert's task is to understand what the client is saying in terms of the self-contained  self-consistent model: to reformulate the naive description into something which can be handled by the expert problem-solving methods of the model. that i s   the expert creates a modelled version of the input description which preserves the special representation and 
a c q . - 1 : 	mark 
1 

consistency of the general expert model  but which is particularized to the problem at hand. the expert's specialized problem-solving procedures  which take advantage of that representation and that consistency  can then be used on the modelled 
version in order to solve the client's problem. 
　　　as an example of this process  consider the case of a business consultant who views the firm as an interconnection of regulated flows  of goods  personnel  money  etc. . the consultant solves problems by  1  diagnosing the client's complaints as being caused by one or more of the various kinds of flow problems he or she knows about  and  1  suggesting changes in the regulation of certain flows in order to ameliorate these problems  see  forrester  and  corry  for examples of this basic approach . thus  the consultant reformulates the business situation into a modelled version which is in terms of the flow model so that flow-based diagnostic and solution procedures can be used. however  the modelled version also incorporates a l l of the essential characteristics of the client's firm so that the diagnosis and solution make sense for 
that firm. 
　　　reformulation  then  is the process of constructing the mapping between the client's naive problem description and the specialized expert's knowledge. 
reformulation as an implementation methodology 
　　　the importance of the reformulation model shown in figure 1 is that it can be used to define a basic method for organizing expert knowledge in programs: 
 1  the concept structures of the expert knowledge base are chosen with reference only to the dictates of the expert model. for example  for the cause-effect flow models of the business consultant  the concept structures look like 
	 ci  	 determtned-by  employees  
	 influx 	 act-on  people  
 hire    
	 outflux 	 act-on  employes  
 fire      
i . e .    the number of employes is determined by the number of new hires coming in and ex-employes going out   in a database system a possible concept structure would be 
	 c1  	 access project 
 characteristics 
 job-number  
 job-type   
 optional-characteristics 
 date-specification     
i.e.   in order to find a particular project  its job number and type must be specified  and some date information may be specified . the point is that in choosing structures  the expert need only be concerned with the characteristics of his expert knowledge  not 
with the 	characteristics 	of the system which w i l l apply that knowledge. 
 1  1   a l l of the program's knowledge about a concept is stored with that concept and nowhere else. the fact that  hire  is an action which operates on  people  according to a certain policy is found under the concept  hire  - never as part of some problem-solving procedure that  knows about   hire . 
moreover  a l l of the policies that the program knows about for controlling hiring are found under  hire . 
 1  problem-solving procedures are constructed so as to use the given structures e f f i c i e n t l y . for example  the business consultant program contains specialized procedures for tracing cause-effect relationships through flow structures represented as in  ci . the database program could have a specialized procedure for determining the best access path to objects described as in  c1 . 
 1  knowledge about how a given expert concept structure applies to a particular problem is not stored with the structure. a l l decisions about how to apply a given piece of expert knowledge are made by the map construction process; e.g.  the choice of a specific hiring policy to model  hire  in a particular firm  or the decision not to model  hire  at a l l   are the responsibility of the map construction process. 
 1  for the purposes of map construction  expert concept structures are considered to be patterns which must be matched with input structures. the mapping procedure i t s e l f consists of transformations which may be applied to these patterns to produce new patterns which are closer in form to the input structure under consideration  see figure 1 . one kind of transformation allows the substitution of more specific patterns for more general ones. the program would use this kind of transformation to change the  hire  concept in  ci  into a pattern which could match a particular firm's hiring policy. another kind of transformation can be used to delete the  hire  concept - and the concepts that depend on it - from  ci  to reflect the fact that no match is expected at a l l in a particular problem. the kinds of pattern transformations available to the program are listed and discussed below. 
 1  1   the procedure which decides when and where to apply these transformations is controlled by  in a sense  parameterized by  information derived from the patterns that have already been successfully transformed and matched to input structures. these matched patterns are contained in the modelled version of the problem at hand  see figure 1. . for example  .  see figures 1 and 1   the fact that  ci  has been expanded to model a particular hiring 

knowledge acq.-1: mark q.1 

policy which separates employes into salaried the mapping effort  the transformation selection and union w i l l be noticed by the selection procedure w i l l have a very restricted set of root procedure and used to aid the choice of viable structures from which to begin transformation transformations later in the problem. chains. since relatively few transformations specifically  as the modelling effort result in new legal structures  the set of continues - and where that much detail is possible transformations at any given time w i l l 
necessary - only transformations which also be restricted. furthermore  the system does preserve the distinction between salaried and not depend on the natural parsimony of the model; union w i l l be allowed. deciding how detailed it provides its own restriction mechanism based on a pattern to present at given point is also information gathered from the mapping effort so part of the transformation selection far. mechanism  as we w i l l see later. 
　　　this restriction mechanism is a key feature of the reformulation approach. it is used to make pattern-matching efficient. remember that in this approach patterns are equated with concept 
structures  not with subgoals as in other systems. at each stage in the pattern transformation series  the program can look at the concept structures it has already matched in order to see what features of the problem restrict the choice of transformations that can be applied. we w i l l see how this restriction mechanism works in the 
	figure 1. reformulation as implementation 	next section. 	t mention it now 	because 	it is an 
　　　in summary  a reformulation system works by advantage of the approach: it provides a mechanism mapping input problem descriptions into the for using search limiting constraints at each concepts of its expert model. it does this via a stage of the pattern-matching process. this is kind of pattern-matching in which the expert quite distinct from approaches used in other concept structures  viewed as patterns  are put expert systems  which rely on extensive search or through a series of transformations in order to sophisticated failure backup schemes in their 
make them closer to the input forms. the pattern-matching effort. in reformulation  low particular transformations and the patterns to yield searching is greatly reduced; backup is 
which they are applied are chosen by a selection limited to rare garden-path situations  see procedure which is parameterized by information  mark  . drawn from already matched patterns. 
advantages of this approach 
　　　before going into the details of how this methodology works  i w i l l discuss i t s advantages as an approach to building expert systems. first of a l l   notice that the system's mode of operation is to try to make everything it is given into something that can be handled by i t s particular expert model. although this may seem a l i t t l e severe  it is really just an acceptance of reality  and perhaps an advantage. in the foreseeable future  expert systems w i l l only be another advantage of the reformulation able to do a few things  w i l l know relatively approach is that the information attached to each l i t t l e about relatively restricted domains. if concept structure localizes a l l of the system's the system cannot map an input problem  a request knowledge that is relevant to that structure. to a database system  a business consulting this attached knowledge is not cluttered with situation  into one of the things it knows about  control structure information. therefore  the it w i l l have to give up on the problem. only way in which two concept structures can be therefore  it is reasonable to construct systems interdependent is if one mentions the other at top which work by trying to channel a l l input into the level. for example  in  ci  we can see that the few things they know how to do. concept  employes  depends on the influx and 
	outflux 	structures 	in 	a 	way 	defined 	by 
　　　this is the reality - the advantage is that determined-by. we can be confident that no other this allows the system to always work from its interdependency information is hidden away in a 
knowledge base of comparatively few  well-formed separate procedure or under some other unmentioned expert concept structures. only transformations concept. 
which 	originate 	from 	these 	structures 	can 
constitute legal mappings. 	in the well-structured 	finally  	the control mechanism of steps 	 1  
models assumed here  concepts w i l l be basically and  1  above allows the system to deal with a canonical: they w i l l not overlap unnecessarily. number of issues which arise whenever a realistic the possible ways to manipulate concept structures amount of expert knowledge must be applied to a which result in new legal concept structures w i l l problem. for any given problem  only parts of the be few and well understood. thus  at any point in expert knowledge base w i l l be relevant. 
knowlphgo knowlprlgo a c q . - 1 : mark 
1 

furthermore  in many domains the l e v e l of d e t a i l at which these p a r t s are r e l e v a n t w i l l vary from problem to problem. for example  in the business c o n s u l t a n t system  the labor sector of the f i r m is u s u a l l y modelled i n d e t a i l   w h i l e the production sector i s merely sketched. however  i f d e t a i l s o f 
the p r o d u c t i o n process   q u a l i t y c o n t r o l problems  s e a s o n a l i t y   e t c .   d i r e c t l y d i r e c t l y a f f e c t labor needs in a p a r t i c u l a r problem  the production sector must be modelled much more t h o r o u g h l y . 
       the problem d e s c r i p t i o n alone cannot determine what the expert should model: some p a r t s of the c l i e n t ' s r e c i t a l may be i r r e l e v a n t to what the expert needs to know. the expert program mist t h e r e f o r e s i f t through the input to f i n d the things it needs. it must ask the c l i e n t questions about things it needs but cannot f i n d . 
       in the r e f o r m u l a t i o n approach  the mapping mechanism can be used to s t r i k e a balance between what the program wants to know and what the c l i e n t is t r y i n g to t e l l i t . on the one hand  each mapping is f i r m l y rooted in the expert model  since it must consist of a chain of transformations which begins w i t h an o r i g i n a l expert concept s t r u c t u r e . on the other hand  the mapping mechanism is s p e c i a l i z e d to each i n d i v i d u a l problem  because the t r a n s f o r m a t i o n s e l e c t i o n procedure is c o n t r o l l e d by i n f o r m a t i o n taken from the program's current model of that problem  see figure 1   . 
       to achieve t h i s balance  the mapping mechanism is used in the f o l l o w i n g way on each problem: 
 1  the c l i e n t ' s basic symptom is defined by matching a symptom p a t t e r n in the model. e . g .   input of the form  the dominion co. o f t e n h i r e s or lays o f f workforce . . .   maps i n t o the symptom. 
part selected in  1  w i t h a d e f a u l t l e v e l which can be a l t e r e d by i n f o r m a t i o n from   1   . 
       the next s e c t i o n describes in more d e t a i l the way in which the mapping mechanism e f f e c t s t h i s system behavior. tn p a r t i c u l a r   it discusses the kinds of transformations that can be a p p l i e d to expert p a t t e r n s and the kinds of feedback i n f o r m a t i o n t h a t can be used to choose these t r a n s f o r m a t i o n s   
d e t a i l s of the map construction process 
       concept s t r u c t u r e s   or p a t t e r n s   are made up of two kinds of elements: concepts  l i k e  people  or  job-number   and f u n c t i o n a l concepts  l i k e determined-by  influx  outflux  and act-on in 
  c i     and access  characteristics  and opttonal-charactertsttcs in  c1 . a concept is anything t h a t the expert chooses to name as a coherently describable e n t i t y . a f u n c t i o n a l concept groups concepts to convey a s p e c i a l meaning to the expert model   l i k e a f l o w or an access s p e c i f i c a t i o n   . functional concepts are not matched against the i n p u t . they do not represent the e x p e r t ' s p o i n t of view of something the c l i e n t might say  but r a t h e r an i n t e r n a l view of how concepts are s t r u c t u r e d . there is no r e s t r i c t i o n on concepts or f u n c t i o n a l concepts  except that they must be i d e n t i f i e d as such   since the i n t e n t is that they be chosen to be convenient f o r the concept s t r u c t u r e s of any given expert model. 
       the transformations that can be applied to patterns represented i n t h i s form a r e : 
s t r u c t u r a l t r a n s f o r m a t i o n s : patterns can be rearranged according to r u l e s attached to f u n c t i o n a l concepts. this u s u a l l y means that a new f u n c t i o n a l concept w i l l be i n v o l v e d . e. 

 c1  	 state-of 	 number-of workforce    fluctuating  . 
 1  that symptom is used to select those parts of the expert model which are relevant to the 
solution 	of 	the 	c l i e n t ' s 	problem. 	e.g.  symptom  c1  is attached 	to 	a 	part 	of 	the +model which 	deals with damping 	problems 	in workforce 	flows. 	when  c1  is matched  	that 
part w i l l be selected as relevant. 
 1  feedback from the modelled version of the problem is used to see how those relevant parts should be applied to the particular problem at hand. e. g .   the fact that the dominion co.'s h i r i n g policy contains no long delays would r e s t r i c t the class of damping problems that are possible in this f i r m . the idea is to express different points of view of the same set of concepts: sometimes it is important to know that a   b   and  c  are part of the same flow  and sometimes it i1 important to know that a  is determined by b  
and c ; sometimes the system only needs to know that the user has seen e   ♀   and ♀  and other times it must know the exact display format.        note that  1  uses the problem description and the expert model to define the expert's view of the problem   1  makes sure that a l l transformations must be rooted in the expert's idea of what is relevant  and  1  uses the c l i e n t ' s description to ensure that the model is correctly particularized to the problem. level of d e t a i l considerations are handled by starting each elaborations: sub-patterns  including i n d i v i dual concepts  can be substituted for concepts 
within a pattern. e.g.  a particular h i r i n g policy can be substituted for  hire  in  ci ; 
  month-name x  day-number y  four-digit-year z   can be substituted for  date-specifications  in  c1 . knowl f hrr  	a c q . - 1 : 	mark 1 

deletions: sub-patterns can be removed from the pattern according to rules attached to functional concepts. e.g.  
 outflux  act-on  employes  
 fire    
can be deleted from  ci  if necessary because determineivby is s t i l l well-formed with only one argument. 
instantiations; client-level descriptors can be substituted for concepts or sub-patterns. this corresponds to pattern-matching in the usual sense. e.g.    f i r e      dismiss    lay-off   etc. may be matched with  fire ; a certain demain of integers can be matched with  job-number . 
　　　these possible transformations make up the kinds of knowledge which can be attached to concept structures. in the case of a concept  attached knowledge consists of the possible elaborations for that concept  like the hiring policies under  hire   and possibly a match-list of the possible user descriptors that the concept can be associated with   hire    employ    take on  . for a functional concept  this knowledge consists of structural transformation rules and rules defining sub-structures that can be deleted  and s t i l l allow the pattern  i.e.  concept structure  to make sense . 
　　　in addition  concepts can have arbitrary properties which can be accessed and used by the model's problem-solving procedures. the system builder can make the application of any of these properties part of the map construction process by providing an explicit property access function as one of the functional concepts. in this case  the value of the property must be a valid concept structure. for example   name-of  employe   in a pattern implies that the value of the employe's name property can be substituted for that construct. a b u i l t - i n class-membership property is provided by the system for relating individual concepts  e.g.   employe  is a member of the  people  class . class-membership information is used by the map construction process. 
　　　it is important to understand that no applicability information goes along with the knowledge attached to individual concepts. yet it is quite clear even from the few examples given here that some part of the system must decide on applicability: a particular hiring policy is not always a good model of  hire    lay-off  cannot always be substituted for  fire   a determined-by cannot always be changed into a flow without fatal loss of information. the choice of what to use when is made by the transformation selection procedure. 
　　　the procedure i t s e l f is basically just a general function which knows how to look up transformations and apply them to arbitrary l i s t structures. the whole philosophy of reformulation is to take advantage of as much information as possible in this procedure to choose the right transformation without extensive t r i a l and error search. as i said earlier  the procedure relies on the structure of the model i t s e l f to represent what the expert needs to know to solve the problem. in a well-structured model  strong expectations of what the expert needs to know constrain the choice of possible transformations to some extent. however  the procedure must have additional information in order to narrow down the choice to what is appropriate for the particular problem at hand. this information is what is drawn from the patterns that have already been matched. the information is in the form of constraints that can be divided into three categories: 
 1  constraints of the whole problem on the transformations that can be applied to each 
pattern; 
 1  constraints of a pattern on the transformations that can be applied to the individual elements of that pattern; 
 1  constraints within each pattern element on the transformations that can be applied to i t . 
　　　in the existing business consultant program  the f i r s t category is compressed into a single piece of information with a single use. the piece of information is the program's view of what the client's symptom i s ; i t s only use is to define the group of patterns that are applicable to that symptom. thus  the mapping between the dominion co. case and the symptom concept  c1  represents the program's view of dominion's symptom. the fact that  c1  is attached to a group of patterns which deal with damping problems defines that group of patterns to be applicable to the dominion case. 
　　　note that in the business consultant program  the system does work to establish a view of the symptom  i . e     to construct the mapping to a symptom pattern. the program's view may even end up being rather different from the client's own. in other problem areas  the expert system may not have such a strong model of symptoms. for example  in a database system  the client's symptom corresponds to the overall reason why the client is using the system during any particular session  e.g.   to find out if there are any workload peaks    to see where our parts inventory is going  . here the system would probably not have the f a c i l i t y for deducing this reason. the client would have to provide this information  via a statement like  i'm trying to do x.   in order to make it available. the importance of this symptom or statement of intent information is that it provides a top level restriction on the patterns which have to be considered relevant. it is especially important because it is used at a time the very beginning of the problem-solving effort - when none of the other problem-based constraint information is available. 
　　　the second category  pattern-level constraints  is more interesting. these constraints exert primary influence over the 

know!ert*p a c q . - 1 : 	mark 
j1 

choice of pattern transformations and govern the  level of d e t a i l   mechanism. the form of the constraint is just the pattern as it has been matched so far  including any matched sub-patterns that are already in the modelled version. there are also a few special forms which w i l l be discussed in a minute. the constraints are used by the restriction mechanism to govern the choice of transformations. the restriction rule is simply stated: 
if the constraint contains an element which is more restrictive than the pattern element being transformed  only the elaborations and match-list of this more restrictive element may be used as transformations. 
　　　the comparative restrictiveness of any two concept structures can be determined on the following basis: 
an instantiation of a concept is more restrictive than that concept  
an elaboration of a concept is more restrictive than that concept  
a member of a class is more restrictive than the class i t s e l f   employe  is more 
restrictive than  people    
. a property value is more restrictive than the property i t s e l f   mary  is more restrictive than  name-of  employe     
a property is more restrictive than the concept of which it is a property   name-of 
	 employe   	is 	more 	restrictive 	than 
 employe    
. a concept which is not related to another concept in one of the above ways is not more restrictive than that concept. 
　　　a l l of this essentially says that once it has been determined how a concept maps into the problem at hand  future structures which refer to that concept are restricted to use the same mapping. these concept structures are then used to restrict the other concept structures that refer to them  and so on  u n t i l the model of that particular problem is complete. 
　　　note that an important side-effect of this way of proceeding is that  as the mapping effort goes on  the choice of pattern transformations becomes more and more restricted  and the matching effort becomes more and more e f f i c i e n t . 
　　　a number of special mapping activities which greatly enhance the modelling capability of an expert system cannot be easily incorporated into this simple restriction mechanism. these activities are therefore handled by another pattern-level constraint - the special form alluded to earlier. the special mapping activities are: model  which interrupts the mapping of the current pattern and calls the mapping procedure on a new pattern in an unrestricted mode; similar  which compares the values of given properties of the current pattern with those of another pattern; and contradictory  which is just like similar except that it looks for given differences between two patterns. 
　　　these are handled by the purpose constraint. a purpose is just an elaboration of the form 
 purpose mode pattern  
which  when selected as a transformation  interrupts the map construction procedure  handles 
the pattern in the mode indicated  and then returns control to the mapping process. 
　　　an example of the use of model arises in the mapping of  hire . it is sometimes necessary to find out the details of the production sector of the firm before choosing between certain policy alternatives of  hire  in  ci . 
 purpose model production-pattern  
is therefore included as an elaboration of  hire   causing mapping of  hire  to stop u n t i l production-pattern has been matched. 
　　　the other two modes are efficiency devices. sometimes it is much easier to see if the pattern under consideration is similar  or contradictory  enough to an already matched pattern to obviate the need for a separate effort on that pattern. for either similar or contradictory  if the pattern named in the purpose has not already been matched  the purpose is a no-op. 
　　　this checking of properties for similarity or contradiction must be handled by specialized procedures. tt is not part of the normal mapping process. in a more general sense  purpose's provide  hooks  for any expert problem-solving procedures which the system designer wishes to build into the mapping process. for example  the business consultant program contains an additional  show-cause  purpose which provides special cause-effect tracing through flow patterns. such domain dependent efficiency devices can add to the effectiveness of the mapping process without impairing the aesthetics of the reformulation approach  since their interaction with the basic process can only be through well-defined purpose channels. 
　　　note that level of detail considerations are handled by the interaction of the restriction mechanism and the model purpose. in the main  the level of detail at which an arbitrary pattern is matched is determined by whether i t s elements or elaborations of i t s elements have already been matched. this is handled by the restriction mechanism  which propagates the level of detail of already matched elements throughout a new pattern. i f   in the midst of this process  a pattern has to be mapped at a different level of d e t a i l   that pattern can be introduced by a model purpose  which removes the restrictions. 

knowledge acq.-1: mark 
1k 

　　　finally  the element-level constraints on pattern transformation are expressed in terms of the class-membership property discussed earlier. if element a has a class-membership property with value b  the possible instantiations of a are restricted by an existing mapping of b.  remember that b must also be a valid concept structure.  usually  b is simply another concept; e.g.  
 people  is the value of the class-membership property of  employe . but it may be more complex  as in a value like  integer  min-value   max-value    an implied form of match-list. in either case  the choice of an instantiation transformation for the pattern element a is restricted in the usual way by the existing match   i f any  of concept structure b. thus  if 
 people  	has already been matched 	to 	 member-of 
 fred mary 	john     employe  can only match fred  
mary 	or 	john. 	if 	 min-value  	in 	the 
class-membership property above has been found to be 1  the number to which that property is attached must be at least 1. 
conclusions 
　　　the reformulation methodology described here is proposed as an alternate approach to organizing expert knowledge. tt offers some distinct advantages over other approaches in domains in which the knowledge is well structured and the input is not. by allowing the knowledge representation to be optimized for problem-solving  and by providing local hooks for a l l knowledge about each concept  the reformulation approach makes it relatively easy to build in expertise and add to it later. however  it does not force the system designer to abandon control of the use of that expert knowledge to a general problem-solving method which cannot tune i t s e l f to particular problems. finally  reformulation approach provides a map construction process which can particularize the knowledge base to specific problems in more interesting ways than simple instantiation. this makes the approach useful for domains in which it is inappropriate to severely restrict the form of user input. 
　　　the primary disadvantages of the approach result from one of its advantages: by refusing to place external restrictions on the representation of expert knowledge  the reformulation approach abdicates the responsibility of providing help in representing that knowledge. that i s   there is no b u i l t - i n conceptual framework for the system builder to use as the basis for representing the knowledge of the problem domain  in contrast  see  martin  . also  the map construction apparatus required by the reformulation approach is comparatively complex and hard to build  even with more detailed versions of the guidelines sketched here  see  mark  . both of these problems would be greatly alleviated if existing concepts  functional concepts  and purpose's could be shared in new application domains. this issue of providing a general underlying conceptual framework  which is of course of much interest elsewhere  again  see  martin    is being pursued in the current applications of this approach. 
