 
this paper concerns formal theories for reasoning about the knowledge and belief of agents. it has seemed attractive to researchers in artificial intelligence to formalise these propositional attitudes as predicates of first-order predicate logic. this allows the agents to express stronger introspective beliefs and engage in stronger meta-rcasoning than in the classical modal operator approach. results by montague  and thomason  show  however  that the predicate approach is prone to inconsistency. more recent results by des rivieres & levesque  and morreau & kraus  show that we can maintain the predicate approach if we make suitable restrictions to our set of epistemic axioms. their results are proved by careful translations from corresponding modal formalisms. in the present paper we show that their results fit nicely into the framework of logic programming semantics  in that we show their results to be corollaries of well-known results in this field. this does not only allow us to demonstrate a close connection between consistency problems in the syntactic treatment of propositional attitudes and problems in semantics for logic programs  but it also allows us to strengthen the results of des rivieres & levesque  and morreau & kraus . 
1 introduction 
the approach most often used in constructing formal theories for reasoning about multiagent systems is to formalise the agents' beliefs and knowledge through modal operators. an alternative approach is to formalise these propositional attitudes as predicates of a first-order predicate logic. this has several advantages  which have been widely discussed in the literature  davies  1; attardi and simi  1; carlucci aiello et al.y 1; mccarthy  1; grant et a/.  
1 . most importantly  it allows us to quantify over the propositional objects of knowledge and belief as for instance in  agent 1 believes that everything known by agent 1 is also known by agent 1   formalised by 

this formula has no counterpart in the classical modal operator approach  since if a'i and k1 were modal operators  we would not be able to apply them directly to the variable x  modal operators only apply to well-formed formulas . thus the predicate approach gives us more expressive power and the ability of agents to refer to the totality of their own and others beliefs  which is important in meta-reasoning. 
　unfortunately  the predicate approach easily becomes inconsistent  since the added expressive power allows the agents to express self-referential beliefs that in some cases turn out to be paradoxical. this was proved by montague  and thomason . they prove that certain axiom schemes describing natural properties of knowledge and belief are inconsistent with formal arithmetic. their results are reviewed in section 1. des rivieres & levesque  and morreau & kraus  have shown there to be a way out of these inconsistency results: to suitably restrict the set of sentences that we instantiate our axiom schemes of knowledge and belief with. these results are reviewed in section 1 as well. 
in this paper we will show that the results of des rivieres  
levesque  morreau and kraus can be reduced to well-known results in logic programming semantics. this is carried out in section 1. in section 1 we give a strengthening of their results  using again the connection to logic programming semantics. 
1 terminology and notation 
we will be using theories of first-order predicate logic to formalise propositional attitudes of agents. to prove the consistency of these first-order theories  we use results from logic programming semantics. below we introduce the kinds of logic programs and first-order languages we will be considering. 
1 	logic programs 
all logic programs considered in this paper will be propositional. thus  an atom is simply a propositional letter  and a literal is either a propositional letter p or its negation -p. we take the symbols true and false to be among our propositional letters with the obvious intended interpretation. a clause is a formula of propositional logic on the form 


where h is an atom  and all li are literals. a prepositional program  or simply a program  is a  possibly infinite  set of clauses. herbrand models of programs are defined in the usual way. we require that all models assign the truthvalue true to the propositional letter true and false to false. 
　given a program p  comp p  denotes its clark completion. since we work only with propositional programs  the clark completion is particularly simple. the clark completion of p is the following set of equivalences in infinitary propositional logic: for each atom a in p  
  if a does not appear as head of any clause in p  then a  ~  false  comp p . 
  otherwise we have 	comp p   where 
　　　　　　　is the set of clauses in p with head a. 
　let p be a propositional program. the dependency graph of p is the directed graph with signed edges defined as follows. the nodes of the graph are the atoms  propositional letters  occurring in p excluding the special atoms true and 
false. there is a positive edge from a to b  denoted by  a  b  -f   if and only if there is a clause ln in p such that ll -＊= b for some then there is a negative edge from a to b  denoted  a  b - . we say that a depends on b  denoted by a   b  if there is a proper path from a to b in the graph. we say that a depends negatively on b  denoted by  if there is a path from a to b containing at least one negative edge. a program p is called locally stratified if the relation  in the dependency graph of p is well-founded. 
1 	first-order languages 
we use l to range over languages of first-order predicate logic. we take the connectives of first-order logic to be -   a 
and  when using in formulas  these formulas are simply abbreviations of formulas containing only -   a and  we require all languages l to contain the one-place predicate symbols t and p. p will be used as a predicate that picks out a set of  codes of  formulas in l. t will  depending on the context  be used to express one of our syntactic attitudes belief or knowledge. by l - {t} we denote the language l with the predicate symbol t removed. we will assume that all considered languages contain a parametrised coding. by a parametrised coding in l we understand an injective map r   1 from the formulas of l into the terms of l satisfying: 
 i  for any formula in l  the term  has the same free variables as  but f is not itself a variable . 
 ii  for any formula in l and any term r which is free for x in ~ is term obtained by substituting t for all free occurrences of x in 
 iii  the coding is well-founded  that is  there is no infinite 
	sequence of f o r m u l a s s u c h that- 	n is 
	a term in 	for all 
we refer to  feferman  1  for the construction of a parametrised coding. feferman's coding does not satisfy  ii   but a simple variant of it will.  is called the code of the intended interpretation of a formula is that is known  or 'v 's believed . we assume all first-order languages l to contain the language of peano arithmetic. throughout the paper  by formal arithmetic we mean robinson's arithmetic  though any other standard formalisation of arithmetic could have been used in its place. we identify firstorder languages l with their sets of sentences. by a sentence in l we understand a closed formula  that is  a formula without any occurrences of free variables. the set of ground terms of l is denoted tcrms l . 
　to avoid confusion between formulas of propositional programs and formulas of first-order languages we will use latin letters for the former and greek letters for the latter. 
1 	regular formulas and rpq formulas 
wc now define the sets of first-order sentences which we intend to prove that our axiom schemes of knowledge and belief can consistently be instantiated with. 
definition 1. let l be a first-order language. the set of regular formulas ofl is the least set satisfying: 
 i  any atomic formula of 	is a regular formula. 
  i i   a r e regular formulas and x is a variable  then and :   are regular formulas. 
 iii  	if 	is a regular formula then 	is a regular formula. 
　our definition differs slightly from the one given by morreau and kraus . instead of using a parametrised coding  they have an  n + l -place predicate symbol for each n  such that instead of writing  ...  .rn n   w h e r e a r e the free variables of they would be writing where is then a stan-
dard  non-parametrised  godel coding. to simplify matters  we have chosen to take care of the free variables by using a parametrised coding rather than by introducing infinitely many predicate symbols of different arities. 
　as an example of a regular formula we have  for a suitable choice of l  

expressing that the agent knows mike's telephone number. if we have more than one agent  we can of course introduce a predicate symbol ti for each agent i. in that case the following sentence also becomes regular: 

expressing that agent 1 believes agent 1 to have correct beliefs about the departure time of the train. as an example of a nonregular formula we have 

expressing that the user believes that the system only utters what it believes to be the case. it is non-regular because system is applied directly to a variable and not to the code of a formula. to allow expressing beliefs such as this one  morreau and kraus  extended the set of regular formulas to a more inclusive class called the rpq formulas. 

1 	knowledge representation 

definition 1. let l be a first-order language. the set of rpq formulas of l is the least set satisfying: 
	 i  any atomic formula of 	is an rpq formula. 
  i i   a r e rpq formulas and x is a variable  then and are rpq formulas. 
 iii  if ψ is an rpq formula then 	is an rpq formula. 
 iv  if ψ is any formula in l  then 	is an rpq formula. 
　this definition also differs from the one given by morreau and kraus . it defines a slightly more inclusive set of formulas  and at the same time it is simpler  since it avoids morreau and kraus' use of two distinct collections of variables. 
　by regular sentence we understand a closed regular formula  and by rpq sentence a closed rpq formula. 
1 	review of previous results 
consider the following axiom schemes in a first-order language l: 
al. 
a1. 
a1. 
a1. 
a1. a1. 
axiom scheme expresses that everything known  believed  is true. it seems reasonable to characterise knowledge by the axiom schemes a1-a1 and belief by a1-a1. but the following theorem shows that this is not always possible. 
theorem 1  montague |1|  thomason  . let l be a first-order language. formal arithmetic extended with any of the following sets of axioms is inconsistent. 
 a  the axiom schemes of knowledge  at a1  instantiated over the sentences of l. 
 b  the axiom schemes of belief  a1-a1  instantiated over the sentences of l. 
　the inconsistency of  a  is montague's result  and the inconsistency of  b  is thomason's result. a way out of these inconsistency results is to restrict the set of sentences that we instantiate a1-a1 with. this strategy gives us the following positive results. 
theorem 1  des rivieres and levesque  1 . let l be a first-order language. formal arithmetic extended with any of the following sets of axioms is consistent. 
 a  the axiom schemes of knowledge  a1-a1  instantiated over the regular sentences of l. 
 b  the axiom schemes of belief a1-a1  instantiated over the regular sentences of l. 
theorem 1  morreau and kraus |1| . theorem 1 still holds when we replace  regular sentences   with  rpq sentences  . 
　theorem 1 is proved in ides rivieres and levesque  1  by a careful translation from a corresponding first-order modal logic. theorem 1 is proved in  morreau and kraus  1  by a similar translation from a corresponding secondorder modal logic. in the following section we give proofs of their results taking a completely different route. we show that the problems can be reduced to problems of consistency of particular logic programs. 
　instead of working directly with the axiom schemes ala1  we will most of the time be working with the truth scheme which is the following axiom scheme: 

this is often sufficient since  as the following lemma shows  instances of axiom schemes a1-a1 are logical consequences of corresponding instances of the truth scheme. to prove that the axiom schemes a1-a1 instantiated over a set of sentences s are consistent  it thus suffices to prove the consistency of the truth schema instantiated over that same set. 
lemma 1. let l be a first-order language  and let s be a set of sentences in l satisfying: 
if 	and 	are in s then  are in s. 
let m be a model of l in which 	holds for all  in s. then all of ai-a 1 hold in m for all 
proof that al holds in m when ψ is in s is a trivial consequence of the fact that holds in m. to see that a1 holds in m  we first note that if is in s then  is in s as well  by assumption on s. this sentence is an abbreviation of  so we get that the following instance of the truth schema holds in m: 

using this together with the fact that al holds in m  we get that t{rt ψ  -  ψ  holds in m. that is  a1 holds in m. a1-a1 are proved to hold in m in a similar manner. 
1 	from lp semantics to consistent treatments of knowledge and belief 
the results of this paper are based on the following lemma. 
lemma 1  przymusinski  1  sato  . /f a program p is locally stratified then c:omp p  has a herbrand model. 
　our formulation is taken from  sato  1 . it should be noted that sato is not considering infinite programs in his paper  but his proof carries over without modification to this more general framework. this is because sato is considering the set of ground instances of non-propositional programs rather than these programs themselves. the set of ground instances of a finite non-propositional program is in general an infinite propositional program  that is  the kind of logic program we are considering in this paper. 

definition 1. let l be a first-order language  and let s be a set of sentences in l. we define an infinite program pl s as follows. for every sentence in l  the program pl s contains a propositional atom denoted the clauses of pl s are given by: 

　the relation between models of the program p l   s and models of the first-order language l is given by the following lemma. 
lemma 1. let l and s be as above  /f comp  has a herbrand model m then l has a herbrand model n satisfying: 
 1  
 ii  
proof assume m is a model of cohip pl.  . comp  pl s  is the following set of equivalences: 
 1  
 1  
 1  
 1  let n be the following herbrand model of l: 

 i  is proved by induction on the syntactic complexity of if ψ is an atom then  1  holds by definition of n. to prove  1  for sentences of the form we simply use  1    1  and  1   respectively. for the case of the proof is: 

where the first equivalence is by  1  and the third is by induction hypothesis. the two remaining cases are proved similarly. thus  i  holds. furthermore  using  i  and  1   we get for all 

and thus proving  ii . 	＆ 
lemma 1. let l be a first-order language and let r be the set of regular sentences in l. the propositional program pl r is locally stratified. 
proof to simplify matters we will throughout this proof be identifying every propositional letter  with the corresponding first-order sentence in l. it should always be clear from the context whether is used to denote the first-order sentence or the corresponding propositional letter. thus  by the identification  the nodes of the dependency grapl of pl r are all sentences in l. the edges are: 

edges and edges of the last type t-edges. 
　we have to prove that  is locally stratified. actually  we will be proving something slightly stronger. we will prove that the relation  in the dependency graph of  is wellfounded. that is  we will prove that there does not exist any path of infinite length in the graph. assume the opposite  that is  assume the existence of an infinite path 
claim  o contains infinitely many t-edges. 
proof of claim. assume the opposite. then there will be an infinite subpath of containing no t-edges. thus all edges on o' must be but note that for any 
such edge  the start node will have higher syntactic complexity than the end node. thus  along the syntactic complexity will be strictly decreasing  which contradicts being infinite. this proves the claim. 	
with every formula p in l we now associate a natural number   called the t-degree of the t-degree is defined recursively by 
    otherwise. 
the well-foundedness of the parametrised coding ensures that d is well-defined. by the above claim   contains an infinite number of t-edges. let t be the end node of such an edge. then ψ is regular. let be the infinite subpath of  having ψ as its start node. then every node on  must be a regular formula  c.f. the definition of a regular formula . this implies that every edge on is 
 i  either a 
 ii  or of type 	does not contain t x  as a subformula. 
item  ii  follows from that fact that when x is a variable then t x  is not a regular formula  and therefore no formula having t x  as a subformula can be regular either. now note that on any edge of type  i  or  ii   the t-degree of the end node will be less than or equal to the t-degree of the start node. thus the t-degree will be monotonically decreasing along a' and must therefore be constant from some point. but then from this point it can not contain any t-edges  since the t-degree of the end node of such an edge is always one less than the t-degree of the start node. this contradicts the claim above. 	
lemma 1. let l be a first-order language and let s be a set of sentences in l. if pl s locally stratified then any herbrand model of. can be expanded into a herbrand model of l in which holds for all  in s. 

1 	knowledge representation 

proof. let m denote a herbrand model of l - {t}. let p be the program extended with the following clauses: 
	true  if 	is an atom in 
	false  if 	is an atom in 
pl s is assumed to be locally stratified  and since p has the same dependency graph as  then p must be lo-
cally stratified as well. therefore comp p  has a herbrand model m'  by lemma 1. finally  lemma 1 gives us the existence of a herbrand model n of l in which the equivalences hold for all in s. to see that  v expands m 
we just have to note that if 	is an atom in l - {t} then 
and 

theorem 1. let l be a first-order language and let u be a theory in l - {t} containing formal arithmetic. if u has a herbrand model then u extended with any of the following sets of axioms has a herbrand model. 
 i  the axiom scheme  instantiated over the regular sentences of l. 
 ii  the axiom schemes of knowledge  a1-a1  instantiated over the regular sentences of l. 
 iii  the axiom schemes of belief a1-a1  instantiated over the regular sentences of l. 
proof assume u has a herbrand model m. let r denote the set of regular sentences in l. by lemma 1  pl r is locally stratified. so by lemma 1  m can be expanded into a herbrand model n in which holds for all 
regular  this proves  i .  ii  and  iii  then immediately follow  using lemma 1. 	＆ 
theorem 1 is an immediate consequence of theorem 1  when taking u to be formal arithmetic. the machinery we have introduced can also be applied to prove theorem 1. it is an immediate consequence of the following corollary to theorem 1. 
corollary 1. theorem 1 still holds when we replace  regular sentences  with  rpq sentences . furthermore  the extension of v in the herbrand model constructed will be the set of codes of regular sentences. 
proof let s denote the set of rpq sentences of l. modify the program  by removing every clause of the form 

where r is not the code of any regular sentence. call the new program ql s- it is easy to see that ql s is locally stratified  using the argument given in the proof of lemma 1. lemma 1 still holds when we use ql s instead of pl s so any herbrand model of u can be expanded into a model of l in which  holds for all rpq sentences. this proves  i  in theorem 1 with  regular sentences  replaced by  rpq sentences    ii  and  iii  then follows from lemma 
1. 	d 
1 	strengthening the results 
we now strengthen the results obtained above. we want to define a set of formulas more inclusive than the rpq formulas that the truth scheme can safely be instantiated with. for this we need a couple of new definitions. 
 definition 1. let l be a first-order language and let ψ be a formula in l. the set of formulas occurring in ψ is defined as the least set containing  and satisfying: 
  i f a subformula of a formulaoccuring in  then is occuring in 
  is occurring 	inthen 	is occurring in 
assume is a formula occurring in 	  the occurrence is said to be negative if 	occurs in a formula a where occurs in 
 . otherwise the occurrence is called positive. an occurence of in is said to be protected if occurs in a formula a where occurs in 
thus  for instance  occurs in formulas such as a and but not in   when a = 
t. 	has positive occurrence in 	but negative 
occurrence in 
definition 1. let l be a first-order language. a formula  in l is said to be weakly rpq if for any variable x  the 
formula t x  only occurs positively or protected in 
   note that in an rpq formula  every occurrence of t x  for some variable x is protected  so every rpq formula is also weakly rpq. thus the set of rpq formulas is a subset of the set of weakly rpq formulas. it is furthermore a proper subset  since among the weakly rpq formulas we have e.g.  which is not rpq. the previously 
obtained results can be extended to the weakly rpq formulas. 
theorem 1. let l be a first-order language and let u be a theory in  if u has a herbrand model  then u extended with the axiom scheme 

instantiated over the set of weakly rpq sentences has a herbrand model. 
proof let s denote the set of weakly rpq formulas. using lemma 1  it suffices to prove that pl s is locally stratified. as in the proof of corollary 1  we can consider the modified program ql s instead. to obtain a contradiction  assume ql s is not locally stratified. then  in the dependency graph of is not well-founded  that is  there must exist an infinite path containing infinitely many negative edges. as in the proof of lemma 1  we get that  must contain infinitely many t-edges. let be the end node of such an edge. then is weakly rpq. let be the infinite subpath of having this node as its start node. then every node on must be weakly rpq. as noted in the proof of lemma 1  if every edge on is 
 i  either a 
 ii  or of type where a x  does not contain t x  as a subformula  

then can not be infinite. thus  every node on   must have an occurrence of t x  for some variable x. since all nodes arc weakly rpq  in each of these t x  is either positive or protected. but if t x  occurs protected in there can be no infinite path starting at . thus  in every formula t x  must occur positively  for some variable x . but this implies that all edges in the path are positive  which contradicts our assumption. 	
the above theorem also relates to a result by perlis . perl is showed that a modified truth scheme is consistent with arithmetic. it is easily seen that the set of instances of the  unmodified  truth scheme shown to be consistent by perlis' result is contained in the set of instances shown to be consistent by theorem 1. 
　in view of the results by montague and thomason  theorem 1   there is a limit to how many instances of our axiom schemes we can add while still retaining consistency. the set of weakly rpq sentences is quite close to this limit  as is made clear by the following example. 
example. let l be a first-order language containing three one-place predicate symbols a  v and t. one of the simplest examples of a formula which is not weakly rpq in l is the formula . let us call this formula in 
ψ  t x  occurs negatively and unprotected  since let u be the theory consisting of the following axioms 
		 1  
u obviously has a herbrand model m  but we will show that 
u extended with the single axiom 
		 1  
does not have a herbrand model. this shows that theorem 1 no longer holds if we to the weakly rpq sentences add a sentence such as  assume  to obtain a contradiction  that there exists a herbrand model n in which all of  1    1  and  1  holds. then we obtain the following contradiction: 

1 	conclusion 
we have been showing that results on the consistency of the predicate approach to knowledge and belief can be proved through the use of well-known results from logic programming semantics. this connects the two research fields in a new and interesting way  and have furthermore allowed us to strengthen the previously known results on the consistency of the predicate approach. it is expected that the connection between the two fields can be pursued further to get even better consistency results. this might be done by using some of the results from the literature on logic programming semantics that strengthen lemma 1. 
acknowledgments 
i would like to thank the following persons for guiding me in the direction that led to this paper: j1rgen fischer nilsson  mai gehrke  joao alexandre leite and ken satoh. special thanks to roy dyckhoff for his interest in my work and his many valuable comments. 
