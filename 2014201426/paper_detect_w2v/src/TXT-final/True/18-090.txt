 
     the motor control problem is considered in the framework of knowledge representation. in the ai/robotic world  a formal model for motor knowledge should f i l l a gap between task planning and low level robot languages; such model should be able to  virtualize  the robot and the interaction with the environment so that the planner could produce  and rely on  high level abstract actions  characterized by high autonomy and skill. the paper discusses some general aspects about actions  actors  and scenes  and describes the nem language  which is able to represent and animate humanoids in a scene and is meant to provide a software laboratory for experimenting with action schemas. 
1. 	introduction 
     in the ai/robotic world  a formal model for motoric  knowledge  marino et al.  1  should f i l l a gap between task planning  lozano perez  1  and low level robot languages  bonner and shin  1 ; such a model should be able to  virtualize  the robot and the interaction with the environment so that the planner could produce  and rely on  high level abstract actions  characterized by high autonomy and skill. this problem is strongly related to that of modeling and simulating the human body and its movements  badler and smoliar  1 . this paper briefly reviews a formal language  called nem  for the representation and animation of  moving entities   or actors  e.g. humanoids   in a scene. geometric  kinematic  dynamic aspects are all tightly interrelated for any skill. in general  however  it is convenient to distinguish  for an actor  two different levels of  knowledge  of the particular aspect of a skill: i  a qualitative/symbolic/explicit level  and ii  an implicit/analogic/quantitative one; nem is intended to support the second level. 
     an action is a change in the relation between an ector and its surrounding. if we now associate with each feature of the scene a local system of coordinates  a frame  *      the action can then be viewed as a stream of variations of some of the mutual relations between local coordinate systems  due to a stream of motor commands. 
the whole scene can thus be described as a 
 forest  of frames  linked to features  grouped together conveniently when referring to a common structure  an actor  an object  a family or a part thereof . ensembles of frames can only represent  in a direct way  the  skeletric  structure of actors or objects; if smoother and more detailed representations are needed  it would be necessary to associate appropriate  shape formation  attributes with frames and frame ensembles. this points out the problem of interfacing an action oriented system with solid modeling concepts  binford  1  and with techniques of path planning and obstacle avoidance  lozano perez  1 . 
1. nem: a language for representing actors  scenes  actions 
     the nem language has been designed to provide a procedural  non-hierarchical representation of motoric knowledge. nem is intended: i  to define and model  potentially  moving entities   objects  or  actors   ; ii  to describe the movement of an entity as a whole  or of groups or parts of entities . 
     object/actor representation is based on an atomic element called geometric frame  gf   by which geometric frame structures  gfs  can be built. gfss provide object/actor modeling in terms of skeletons of articulated chains  whose basic element is a tree of gfs. nem objects are general and hierarchical:  limb    man    quadruped    table    crowd  are legal parameterized  families of  entities. 
     moving objects are called actors. an actor's movement is described by means of scripts called motions. motions are abstract  non-hierarchical procedural descriptions of movement for single 
    *  this kind of  frames  has nothing to do with minski's: they come from analytic geometry. 
objects  parts or groups of them  or generalizations of objects  families . a motion can adapt itself to a particular object in a family: for example  a script  animal walk  could f i t   at some level of detail  different actors like a  spider  or a  dog . motions are built by composition  or specialization of other motions. motions can express  at a certain level  geometric reasoning  both static   is the book over the chair     and dynamic   may john reach the book without walking    . finally  motions allow expression of common sense motoric knowledge  that we may call  common skill knowledge  : naive physics concepts  such as  gravity    equilibrium    collision    pushing  and so on  can be easily defined in terms of general virtual motions. 
     nem has three components: i  an algebra  called frame algebra notation  fan   which manages gfss; ii  atomic motor primitives and their semantics   primitives  ; iii  rules of superimposition or composition of motions and primitives  called constructs. they are the operators with which we can build motions. 
1. frames and motions 
     the atomic datum in nem is the frame  which corresponds to an orthogonal system of reference and is represented by means of a 1 x 1 homogeneous matrix. homogeneous matrices express the translation/rotation of the given frame with respect to an ancestor frame. 
     frames are used to identify significant points of an object/actor. for example  a simple pyramid can be defined by the following gfs: 
  env frame pyramid 
　　  pyramid frame vertex 1 vertex 1 vertex 1 where env is the  universe  frame  the environment  and   c   is an operator which refers a frame to its ancestor. the definition of a gfs and its corresponding initialization can be embedded into a parameterized definition block and instanciated several times. 
     at the lowest level  fan semantics guarantees the computability of all spatial relations. however  fan provides functions at different higher levels: gfss can be dynamically generated and destroyed; frames can be assembled/disassembled into their components; functions can be defined and so on. for example  the script 
pos adam*mouth   eve'r'hand  gives the geometric relation existing at a certain instant between adam's mouth and eve's right hand. finally  a frame can be referenced by its position inside a gfs  its  pathname   rather than by its name. 
g. marino etal. 1 
pathnames 	and 	related 	functions 	 such 	as 	the 
is def   pathname  function   which tests the existence of a gfs element  allow motion scripts to fit families of similar structures. 
a motion is a collection of three components: 
i  frames and declarations of variables  ii  motor primitives and iii  instances of other motions. any component may be missing: for example  a motion can simply embed an object definition. motions are usually active concurrently; frames and variables binding is dynamic. 
     the atomic element for motion construction is the primitive motor operator  pmo . pmos are inspired by anthropomorphic mechanics and are defined at two levels: i  joint level  and ii  limb level. the pmos of the former type move a frame  whereas the pmos of the latter type affect chains of frames by specifying the motion of the  end effector   they solve the inverse kinematic problem  benati et al.  1  . more abstract operators are also defined: for example  temporary linking an end effector with some moving frame  passive motions   or  reversing  a chain   move the hip with respect to the foot  . 
     composite motions are defined by composing pmos and/or composite motions already defined. compositions can be made in different ways: 
sequential execution: 
　　action l ; action 1 j action 1 ; ...  where  action  stands for a pmo or a motion; parallel execution: 
action l & action 1 & action 1 ... 
guarded execution: 
while event do action 
wait event do action 
perform action l except event then action 1 
     the composition paradigm allows to overlap in time different spatio-temporal units  therefore providing an unlimited capability of trajectory formation: this expresses naturally a nonhierarchical  distributed approach to motor control  hinton  1  which is conceptually akin to the object-oriented programming style  weinreb and moon  1 . guarded executions allow actors to synchronize through events  or to communicate each other through message passing. 
1. 	results 
     the nem project is being implemented in the unix environment. the nem interpreter is written 

1 g. marino et al. 
in c to obtain high efficiency. preliminary ver sions of two interfaces are available: one interfaces nem with fadl1  a geometric modeling system  and the other with prolog. 
     figure 1 shows a graphic trace of the performance of a nem script which represents a diving humanoid. it is worth noting that in this motor paradigm the motor actions are concurrent with the action of gravity. in the nem script  two corresponding concurrent motions are activated; this is an example of physical laws implicitly embedded into the motoric knowledge. moreover   environmental  processes can be tested by  control  actors in order to tune action parameters. 
     several other paradigms are being experimented  sitting  walking  picking ...  with the purpose of building a high level motor data base. with regard to the nem-padl1 interface  fig. 1 shows a nem humanoid  in a  discobolus  posture   dressed  with a padl1 articulated solid model. better schemes of human body representation are available  see special issue of ieee comp. graph  and appl. vol.1 no.1   but most of them are not articulated. 
1. 	final remarks 
     we stressed the potential capability of nem to build high level  abstract pieces of motor activity  in spite of the simplicity of the gfss  which are a low level atomic piece of knowledge. moreover  nem's facilities to express both static and dynamic geometric reasoning suggest that it could play a role of  co-planner   as to say  it could integrate both functions of analog modeling 


the  moving  world and of storing tasks/actions data base. 
