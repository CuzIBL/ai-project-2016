 
we study the relationships among structural methods for identifying and solving tractable classes of constraint satisfaction problems  csps . in particular  we first answer a long-standing question about the notion of biconnected components applied to an  optimal  reduct of the dual constraint-graph  by showing that this notion is in fact equivalent to the hinge decomposition method. then  we give a precise characterization of the relationship between the treewidth notion applied to the hidden-variable encoding of a csp and the same notion applied to some optimal reduct of the dual constraint-graph. finally  we face the open problem of computing such an optimal reduct. we provide an algorithm that outputs an approximation of an optimal tree decomposition  and give a qualitative explanation of the difference between this graph-based method and more general hypergraph-based methods. 
1 introduction and summary of results 
constraint satisfaction is a central issue of al research and has an impressive spectrum of applications  see  e.g.   pearson and jeavons  1  . a constraint  con-
sists of a constraint scope si   i.e.  a list of variables and of an associated constraint relation  containing the legal combinations of values. a csp consists of a set  of constraints whose vari-
ables may overlap. a solution to a csp is an assignment of values to all variables such that all constraints are simultaneously satisfied. by solving a csp we mean determining whether the problem has a solution at all  i.e.  checking for constraint satisfiability   and  if so  compute one solution. 
　constraint satisfiability in its general form is well-known to be np-hard. much effort has been spent to identify tractable classes of csps  and deep and useful results have been achieved. the various successful approaches to obtain tractable csp classes can be divided into two main groups  pearson and jeavons  1 : the techniques that identify tractable classes of csps only on the base of the structure of the constraint scopes independently of the actual constraint relations and the techniques 
that identify tractable classes by exploiting particular properties of the constraint relations  in this paper  we will deal with this latter group of techniques  usually called structural decomposition methods. there are several papers proposing polynomially tractable classes of constraints based on different structural properties of constraint-scopes interactions  see  e.g.   dechter  1; dechter and pearl  1; gyssens et al  1; gottlob et al  1j . such a structure is best represented by the hypergraph ated to any csp instance 
and 	and var s  denotes the set of variables in the scope s of the constraint c. we often denote the set of vertices by n{h  and the set of hyperedges by 
　however  many interesting techniques for solving csps or for identifying tractable classes of csps have been designed for binary csps  i.e.  csp instances where each scope contains two variables at most. therefore  historically  the first attempts to deal with general  i.e.  non-binary  constraint problems try to exploit the existent methods  by representing any csp instance / by some graph  rather than by the hypergraph h{i . a first idea is to use the primal graph of h  i   whose edges connect each pair of variables occurring together in some constraint of /. clearly  there is an evident loss of information in using the primal graph instead of the hypergraph. for instance  each constraint-scope of / induces a clique in the primal graph  but if one looks at the graph only  there is no way to understand whether such a clique comes from a hyperedge of the hypergraph  or by some intricate interactions among scopes. in fact  in  gottlob et al  1   a deep comparison among various structural decomposition methods showed that some technique designed for hypergraphs is more powerful than all the  known  techniques working on the primal graphs. in this paper  we focus on the other two important graph-based representations of nonbinary constraints  described in the literature  only marginally considered in that work: 
dual-graph representation  dechter  1 . given a hypergraph h  its dual graph  denoted by dual 'h  = {n e   is the graph whose set of vertices iv is the set of hyperedges  and whose edges connect each pair of vertices 
 i.e.  hyperedges  having some variable in common  that is 

constraints 	1 hidden-variable representation fseidel  1; chekuri and rajaraman  1 . given a hypergraph h  we define its incidence graph as the bipartite graph inc h  =  at  e   

only if a is a node of h.  e.g.  figure 1 shows a constraint hypergraph  a  and its incidence graph  b  . 
　there is a great interest in comparing csp solving techniques based on these encodings of the structure  bacchus et al  1  and long standing questions about their relationships with hypergraph-based techniques  described below. 
　one of the major difficulties in doing precise and formal analysis of dual-graph based methods is due to an important feature of this encoding: some edges of the dual graph can be safely removed from this graph  making the evaluation of csps easier. indeed  even if dual  h  appears very intricate  sometimes is possible to find suitable simplifications that make it much more useful. such simplified graphs are called reducts of dual  h . for instance  if h. is acyclic  there is a polynomial time algorithm for making its dual graph acyclic  and in fact a join tree of h. an example is shown in figure 1.c  where the acyclic graph obtained by removing the dashed edges is a join tree of the given hypergraph. however  different removal choices may lead to different performances of evaluation algorithms. thus  the efficiency of any technique based on the dual graph depends crucially on the availability of a good algorithm for simplifying the dual graph. note that finding the  best reduct  is a difficult task and is currently not known whether it is feasible in polynomial time  in general. 
　on the other hand  the fact that effective dual graph representations are not unique made comparisons among different methods quite difficult. for instance  gyssens et al.  compared the notion of hinge decompositions  short: hinge  and the notion of biconnected components of the dual g r a p h i t turned out that hinge is a generalization and thus the hinge decomposition 
technique is not worse than the biconnected components technique. however  the precise relationship between these methods remained an open question  because biconnected components can perform very bad unless  clever simplifications  of the dual graph are chosen. 
the first contribution of this paper is solving this question. 
first we formally define  for each method d  the method 
doptdy that is  the method d applied to the best possible simplification of the dual graph with respect to d. indeed  in general  the notion of best simplification depends on the method d used for decomposing the graph. this way  methods applied to dual graph encodings are well-defined and can be compared with other methods. 
we formally prove that bic1mpoptd is equivalent to hinge. 
in fact  we show that any hinge decomposition corresponds to the biconnected-components tree of some reduct of the dual graph. it is worthwhile noting that  as a corollary of this result  we obtain that  for the  method  an optimal reduction of the dual graph can be computed in polynomial time  since any hinge decomposition can be computed in polynomial time. 
　then  we consider the powerful decomposition method for dealing with graphs: the tree decomposition method  robertson and seymour  1   which is equivalent to the treeclustering method  dechter and pearl  1 . it is known that any class of csp instances such that the treewidth of their incidence graph  respectively  of some reduct of their dual graphs  is bounded by some constant k is tractable. that is  all such instances may be evaluated in time  where n is the size of a csp instance and c is a constant that depends crucially on the bound a: on the decomposition width. 
　we perform a detailed comparison of the tree decomposition method applied to the incidence graph of the hypergraph  i.e.  on the hidden-variable encoding   denoted by treewidthin  and the tree decomposition method applied to some optimal reduct of the dual graph  denoted by treewidth1ptd. it turns out that every csp class that is tractable according to treewidth*  is tractable according to treewidthoptd  as well. moreover  there are csp classes that are tractable according to  but are not tractable according to treewidth  i.e.  their largest width is not bounded by any fixed number. however  we show that treewidthoptd does not strongly generalize treewidth 1. indeed  there are classes of csps whose incidence-graph treewidth is bounded by a constant k  but the largest width of some optimal reduct of the dual graph is much greater. thus  even if such classes are tractable  their evaluation can be much more efficient by using the  method. it follows that either of these methods may be useful for some kind of csp instances  and hence there is no definitely better choice between them. 
　finally  we focus on further interesting open questions about  define the optimal treewidth twoptd{h  of the dual graph of some hypergraph h as the minimum treewidth over all reducts of dual{h . kolaitis and vardi  observed that is not trivial to find a  good  reduct of the dual graph and defined the following problem k-opt  for any fixed constant k   1: given a hypergraph h  decide whether the optimal treewidth of dual h  is at most k. the question is whether k-opt is decidable in polynomial time or not  that is whether there is an efficient way for computing a reduct of the dual graph that have the minimum treewidth. moreover  even if it is known that treewidthoptd is strongly generalized by the hypertree decomposition method  gottlob et al  1   it is not clear why there is such a big difference between these methods. indeed  at a first glance the kind of tree labelling in these methods seems rather similar. 
　we face both the above questions. let k   1 be a fixed constant and h be a constraint hypergraph. we present a polynomial time algorithm k-tree-approx that  if the optimal treewidth of dual h  is at most k  outputs a tree decomposition of width at most 1k of some reduct of dual  h . thus  k-tree-approx provides a 
1-approximation of  note that the question whether k-opt is decidable in polynomial time remains open  because k-tree-approx can compute a tree decomposition of width at most 1k even if the optimal treewidth k' of dual  h  is greater than 
　moreover  our algorithm is also able to compute a new kind of structural decomposition that allows us to shed some light on the striking difference between treewidthoptd and the more general hypergraph-based notions of query decomposition and hypertree decomposition. 

1 	constraints 


constraints 	1 


1 	constraints 


constraints 	1 

remark. the results in this section shed some light on the difference between the  decomposition power  of treewidthoptd and the strictly more general methods of query and hypertree decompositions. note that the crucial condition to be maintained in all these tree-structured decompositions is the connectedness condition for the constraint variables  and looking at condition 1 and condition 1' above we can make the following observation: while in the weak query decompositions  and similarly in treewidthoptd each hypcredge in the labelling of a tree node plays an independent role  in query decompositions  and hypertree decompositions  all such edges contribute together to maintain the connectedness condition. that is  these hypergraph based notions exploit the union of the hyperedges labelling any tree-node  while the treewidth'optd and the weak query width methods exploit the power of each hyperedge separately. 
