
dynamic time warping is not suitable for on-line applications because it requires complete knowledge of both series before the alignment of the first elements can be computed. we present a novel online time warping algorithm which has linear time and space costs  and performs incremental alignment of two series as one is received in real time. this algorithm is applied to the alignment of audio signals in order to track musical performances.
1 on-line time warping
although efficiency and real-time concerns of dynamic time warping  dtw  have been addressed in the literature  we do not know of any work in which the real-time constraint involves a streamed sequence  so that the alignment must be calculated incrementally  in the forward direction  while one of the sequences is not known in entirety. in this work we present an on-line time warping  oltw  algorithm which is able to perform incremental alignment of arbitrarily long sequences in real time.
　dtw aligns time series u = u1 ... um and v = v1 ... vn by finding a minimum cost path w = w1 ... wl  where each wk is an ordered pair  ik jk   such that  i j  （ w means that the points ui and vj are aligned. the alignment is assessed with respect to a local cost function d i j   usually represented as an m 〜 n matrix  which assigns a match cost for aligning each pair  ui vj . the path cost is the sum of the local match costs along the path. several constraints are placed on w  namely that the path is bounded by the ends of both sequences  and it is monotonic and continuous. the minimum cost path can be calculated in quadratic time by dynamic programming  using the recursion:

where d i j  is the cost of the minimum cost path from  1  to  i j   and d 1  = d 1 . the path itself is obtained by tracing the recursion backwards from d m n .
　in the on-line case  the length of the incoming sequence is unknown  so one of the boundary conditions for the search

 
　　this work was supported by the vienna science and technology fund project ci1 interfaces to music and the eu-fp1-ist1 project simac. ofai acknowledges the financial support of： the austrian federal ministries bmbwk and bmvit.must be estimated along with the optimal path. also  in order to run in real time with arbitrarily long series  the complete algorithm must be linear in the length of the series  so that the incremental step is bounded by a constant. if u is the partially unknown sequence  then we seek at each time t the best alignment of the sequence u1 ... ut to some initial subsequence of v . this is performed with the oltw algorithm  figure 1   which we now explain.
　the variables t and j are pointers to the current positions in series u and v respectively. the main loop of the algorithm calculates a partial row or column of the path cost matrix. the calculation of the path cost uses the standard dtw recursion formula  restricted to use only the matrix entries which have already been calculated. the path cost is normalised by the path length  so that paths of varying lengths can be compared in the function getinc. the number of cells calculated is given by the search width parameter  c; e.g. for a new row  the row number is incremented  and the cells in the last c columns up to and including the current column are calculated.
　the function getinc selects whether to calculate a row  column  or both. if less than c elements of each series have been processed  new rows and columns are alternately calculated. if one sequence has been incremented successively maxruncount times  the other sequence is incremented. otherwise the minimum path cost for each cell in the current row and column is found. if this occurs in the current position  t j   then both the row and column counts are incremented; if it occurs elsewhere in row j  then the row count is incremented  otherwise the column count t is incremented. for each incoming data point ut  the minimum cost path calculated at time t is the same as that calculated by dtw  assuming the same path constraints  but the number of calculations performed by oltw is bounded by a constant. a further advantage of oltw is that the centre of the search band is adaptively adjusted to follow the best match.
1 tracking of musical performances
in music performance  high level information such as structure and emotion is communicated by the performer through parameters such as tempo  dynamics  articulation and vibrato. these parameters vary within a musical piece  between musical pieces and between performers. we use oltw to extract
this information directly from audio signals by aligning different performances of the same piece of music  enabling live tracking and visualisation of expressive parameters during a performance. this could be used to complement the listening
algorithm on-line time warping
t := 1; j := 1
previous := none
input u t 
evaluatepathcost t j 
loop
if getinc t j  != column t := t + 1
input u t 
for k := j - c + 1 to j
if k   1
evaluatepathcost t k 
if getinc t j  != row j := j + 1
for k := t - c + 1 to t
if k   1
evaluatepathcost k j 
if getinc t j  == previous runcount := runcount + 1
else runcount := 1
if getinc t j  != both previous := getinc t j 
end loop
function getinc t j 
if  t   c 
return both
if runcount   maxruncount
if previous == row return column
else return row
 x y  := argmin pathcost k l    where
 k == t  or  l == j 
if x   t
return row
else if y   j
return column
else return bothfigure 1: the on-line time warping  oltw  algorithm.
experience of concert-goers  to provide feedback to teachers and students  or to enable interactive performance and automatic accompaniment systems.
　the audio data is represented by the positive spectral difference between successive 1ms frames  that is  the increase in energy  if any  in each frequency bin. this emphasises the onsets of tones  the most important indicators of musical timing. the cost of matching two frames is given by the euclidean distance between their spectral difference vectors.
　since the slope of the path represents the relative tempo  it is reasonable to constrain it to a range between  and 1  maxruncount = 1    to allow for moderate but not arbitrary differences in tempo. in off-line tests with a search width of 1s  c = 1 frames  the program aligned each minute of music in about 1 seconds  1ghz pc . it also runs comfortably in real time with these parameters.
　quantitative testing was performed off-line with recordings of 1 pianists playing 1 excerpts of solo piano music table 1: alignment results shown as cumulative percentages of notes with an error up to the given value  see text .
by chopin  etude in e major  op.1  no.1  bars 1; and ballade op.1  bars 1   played on a computer-monitored grand piano. this provided precise measurements of the times and velocities of all notes  so that we had both the audio recordings and discrete measurements of each note.
error ＋percentage of notesframessecondson-lineoff-lineetudeballadeetudeballade1.1.1%1%1%1%1.1.1%1%1%1%1.1.1%1%1%1%1.1.1%1%1%1%1.1.1%1%1%1%1.1.1%1%1%1%1.1.1%1%1%1%1.1.1%1%1%1%　after aligning a pair of files  the error for each note or chord was calculated  using the manhattan distance between the point representing the onsets of the corresponding notes in the two performances and the nearest point on the time warping path. in table 1  we show the percentages of notes with errors less than or equal to 1 1 1 1 and 1 frames across the 1    pairs of performances of each piece. the results using the off-line version of the algorithm are also included in the table. the average error was 1ms for the on-line algorithm and 1ms for the off-line version; the worst errors were 1s  on-line  and 1s  off-line . the off-line algorithm performs better because it has the advantage of knowing the future evolution of the signal when calculating the alignment at a given point.
1 conclusion
we presented a new on-line time warping algorithm  which aligns a sequence arriving in real time with a stored sequence of arbitrary length. at each time frame  the calculated path is optimal with respect to the data computed up to that time  but this might not correspond to the optimal path calculated by an off-line algorithm with full knowledge of both sequences.
　oltw was used in implementing a musical performance alignment system  which was tested on several hundred pairs of performances with an average error of 1ms. the system can be used off-line for comparisons of performance interpretation  using unlabelled audio recordings  e.g. in a media player plug-in which  given a position in one audio file  automatically finds the corresponding position in other audio files of the same piece of music. an on-line application is automatic accompaniment: given an audio file with the soloist and accompaniment on separate tracks  alignment could be performed on the solo track while the accompaniment track is played back with corresponding accommodation of the dynamic and timing changes of the soloist. currently planned extensions of this work include a score following system and a range of visualisation tools for use in concerts  teaching and private rehearsal. at the conference we will demonstrate the system tracking tempo and dynamics in a live performance and displaying the data with an animation designed by musicologists for off-line performance visualisation.
