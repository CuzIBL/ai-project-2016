
recently  it has been shown that the small description logic  dl  el  which allows for conjunction and existential restrictions  has better algorithmic properties than its counterpart fl1  which allows for conjunction and value restrictions. whereas the subsumption problem in fl1 becomes already intractable in the presence of acyclic tboxes  it remains tractable in el even with general concept inclusion axioms  gcis . on the one hand  we extend the positive result for el by identifying a set of expressive means that can be added to el without sacrificing tractability. on the other hand  we show that basically all other additions of typical dl constructors to el with gcis make subsumption intractable  and in most cases even exptimecomplete. in addition  we show that subsumption in fl1 with gcis is exptime-complete.
1	introduction
the quest for tractable  i.e.  polynomial-time decidable  description logics  dls   which started in the 1s after the first intractability results for dls were shown  brachman and levesque  1; nebel  1   was until recently restricted to dls extending the basic language fl1  which allows for conjunction  u  and value restrictions   r.c . the main reason was that  when clarifying the logical status of property arcs in semantic networks and slots in frames  the decision was taken that arcs/slots should be read as value restrictions rather than existential restrictions   r.c .
　for subsumption between concept descriptions  the tractability barrier was investigated in detail in the early 1s  donini et al.  1 . however  as soon as terminologies  tboxes  were taken into consideration  tractability turned out to be unattainable: even with the simplest form of acyclic tboxes  subsumption in fl1  and thus in all languages extending it  is conp-hard  nebel  1 . subsumption in fl1 is pspace-complete w.r.t. cyclic tboxes  baader  1; kazakov and de nivelle  1   and we show in this paper that it becomes even exptime-complete in the presence of general concept inclusion axioms  gcis   which are supported by all modern dl systems.
　for these reasons  and also because of the need for expressive dls supporting gcis in applications  from the mid 1s on the dl community has mainly given up on the quest of finding tractable dls. instead  it investigated more and more expressive dls  for which reasoning is worst-case intractable. the goal was then to find practical subsumption algorithms  i.e.  algorithms that are easy to implement and optimize  and which-though worst-case exponential or even worse- behave well in practice  see  e.g.   horrocks et al.  1  . this line of research has resulted in the availability of highly optimized dl systems for expressive dls  horrocks  1; haarslev and moller  1：    and successful applications: most notably the recommendation by the w1c of the dlbased language owl  horrocks et al.  1  as the ontology language for the semantic web.
　recently  the choice of value restrictions as a sine qua non of dls has been reconsidered. on the one hand  it was shown that the dl el  which allows for conjunction and existential restrictions  has better algorithmic properties than fl1. subsumption in el stays tractable w.r.t. both acyclic and cyclic tboxes  baader  1b   and even in the presence of gcis  brandt  1 . on the other hand  there are applications where value restrictions are not needed  and where the expressive power of el or small extensions thereof appear to be sufficient. in fact  snomed  the systematized nomenclature of medicine  employs el  spackman  1  with an acyclic tbox. large parts of the galen medical knowledge base can also be expressed in el with gcis and transitive roles  rector and horrocks  1 . finally  the gene ontology  consortium  1  can be seen as an acyclic el tbox with one transitive role.
　motivated by the positive complexity results cited above and the use of extensions of el in applications  we start with the dl el with gcis  and investigate the effect on the complexity of the subsumption problem that is caused by the addition of standard dl constructors available in ontology languages like owl. we prove that the subsumption problem remains tractable when adding the bottom concept  and thus disjointness statements   nominals  i.e.  singleton concepts   a restricted form of concrete domains  e.g.  references to numbers and strings   and a restricted form1 of role-value maps
namesyntaxsemanticstop  ibottom〕 nominal{a}{ai}conjunctionc u dci ” diexistential restriction r.c{x （ i |  y （i …iy:（ ci}  x y  （ rconcrete domainp f1 ... fk  for p （ pdj{x （ i |  y1 ... yk （  dj : fii x  = yi for 1 ＋ i ＋ k …
	 y1 ... yk 	pdj	（	}
gcic v dci   dirir1	rk	rr1i	rkiri	  ，，，  	v	  ，，，  	 
table 1: syntax and semantics of el++.
 which can express transitivity and the right-identity rule required in medical applications  spackman  1  . we then prove that  basically  all other additions of standard dl constructors lead to intractability of the subsumption problem  and in most cases even to exptime-hardness. proofs and further technical details can by found in the accompanying technical report  baader et al.  1 .
1	the description logic el++
in dls  concept descriptions are inductively defined with the help of a set of constructors  starting with a set nc of concept names  a set nr of role names  and  possibly  a set ni of individual names. in this section  we introduce the extension
++
el of el  whose concept descriptions are formed using the constructors shown in the upper part of table 1. there and in general  we use a and b to denote individual names  r and s to denote role names  and c d to denote concept descriptions.
　the concrete domain constructor provides an interface to so-called concrete domains  which permits reference to  e.g.  strings and integers. formally  a concrete domain d is a pair   d pd  with  d a set and pd a set of predicate names. each p （ p is associated with an arity n   1 and an extension pd     d n. to provide a link between the dl and the concrete domain  we introduce a set of feature names nf. in table 1  p denotes a predicate of some concrete domain d and f1 ... fk are feature names. the dl el++ may be equipped with a number of concrete domainsi j d1 ... dn such that  d ”  d =   for 1 ＋ i   j ＋ n. if we want to stress the use of particular concrete domains d1 ... dn  we write el++ d1 ... dn  instead of el++.
　the semantics of el++ d1 ... dn -concept descriptions is defined in terms of an interpretation. the domain  i is a non-empty set of individuals and the interpretation function ，i maps each concept name a （ nc to a subset ai of  i  each role name r （ nr to a binary relation ri on  i  each individual name a （ ni to an individual ai （  i  and each feature namei f （ nf to a partial function fi from  i to s1＋i＋n  d . the extension of ，i to arbitrary concept descriptions is inductively defined as shown in the third column of table 1.
　an el++ constraint box  cbox  is a finite set of general concept inclusions  gcis  and role inclusions  ris   whose syntax can be found in the lower part of table 1. note that a finite set of gcis would commonly be called a general tbox. we use the term cbox due to the presence of ris. an interpretation i is a model of a cbox c if  for each gci and ri in c  the conditions given in the third column of table 1 are satisfied. in the definition of the semantics of ris  the symbol     denotes composition of binary relations.
　the main inference problem considered in this paper is subsumption. given two el++-concept descriptions c d we say that c is subsumed by d w.r.t. the cbox c  c vc d 
iff ci   di for all models i of c.	++
　some remarks regarding the expressivity of el are in order. first  though we restrict the attention to subsumption  el++ is expressive enough to reduce all other standard reasoning tasks  concept satisfiability  abox consistency  instance problem  to the subsumption problem and vice versa  baader et al.  1 . second  our ris generalize three means of expressivity important in ontology applications: role hierarchies r v s; transitive roles  which can be expressed by writing r   r v r; and so-called right-identity rules r   s v s  which are important in medical applications  spackman  1; horrocks and sattler  1 . third  the bottom concept in combination with gcis can be used to express disjointness of complex concept descriptions: c u d v 〕 says that c d are disjoint. finally  the unique name assumption for individual names can be enforced by writing {a} u {b} v 〕 for all relevant individual names a and b.
1	tractability of el++
before we can describe a polynomial-time subsumption algorithm for el++  we must introduce an appropriate normal form for cboxes. given a cbox c  we use bcc to denote the smallest set of concept descriptions that contains the top concept    all concept names used in c  and all concept descriptions of the form {a} or p f1 ... fk  appearing in c. then  c is in normal form if
1. all gcis have one of the following forms  wherec1 c1 （ bcc and d （ bcc “ {〕}:
     c1 v d  c1 v  r.c1  c1 u c1 v d   r.c1 v d.
1. all role inclusions are of the form r v s or r1   r1 v s.
by introducing new concept and role names  any cbox c can be turned into a normalized cbox c1 that is a conservative extension of c  i.e.  every model of c1 is also a model of c  and every model of c can be extended to a model of c1 by appropriately choosing the interpretations of the additional concept and role names. in  baader et al.  1  it shown that this transformation can actually be done in linear time  yielding a normalized cbox c1 whose size is linear in the
size of c.	++
lemma 1 subsumption w.r.t. cboxes in el can be reduced in linear time to subsumption w.r.t. normalized cboxes in el++.
in the following  all cboxes are assumed to be normalized.
when developing the subsumption algorithm for normalized el++ cboxes  we can restrict our attention to subsumption
cr1 if c1 （ s c   c1 v d （ c  and d 1（ s c  then s c  := s c  “ {d}
cr1 if c1 c1 （ s c   c1 u c1 v d （ c  and d 1（ s c  then s c  := s c  “ {d}
cr1 if c1 （ s c   c1 v  r.d （ c  and  c d  （/ r r  then r r  := r r  “ { c d }
cr1 if  c d  （ r r   d1 （ s d    r.d1 v e （ c  and e /（ s c 
then s c  := s c  “ {e}
cr1 if  c d  （ r r   〕 （ s d   and 〕 （/ s c   then s c  := s c  “ {〕}
cr1 if {a} （ s c  ” s d   c r d  and s d  1  s c  then s c  := s c  “ s d 
cr1 if conj s c   is unsatisfiable in dj and 〕 （/ s c   then s c  := s c  “ {〕}
cr1 if conj s c   implies p f1 ... fk  （ bcc in dj and p f1 ... fk  （/ s c  
then s c  := s c  “ {p f1 ... fk }
cr1 if 
 for some s t  and 〕 （/ s c   then s c  := s c  “ {〕}
cr1if  c d  （ r r   r v s （ c  and  c d  （/ r s  then r s  := r s  “ { c d }
cr1if  c d  （ r r1    d e  （ r r1   r1   r1 v r1 （ c  and  c e  （/ r r1 
then r r1  := ri r1  “ { c e }
table 1: completion rules
between concept names. in fact  c vc d iff a vc1 b  where c1 = c“{a v c d v b} with a and b new concept names.
our subsumption algorithm not only computes subsumption between two given concept names w.r.t. the normalized input cbox c; it rather classifies c  i.e.  it simultaneously computes the subsumption relationships between all pairs of concept names occurring in c.
　now  let c be a cbox in normal form that is to be classified. we use rc to denote the set of all role names used in c. the algorithm computes
  a mapping s from bcc to a subset of bcc “{  〕}  and
  a mapping r from rc to a binary relation on bcc.
the intuition is that these mappings make implicit subsumption relationships explicit in the following sense:
 i1  d （ s c  implies that c vc d 
 i1   c d  （ r r  implies that c vc  r.d.
in the algorithm  these mappings are initialized as follows:
  s c  := {c  } for each c （ bcc 
  r r  :=   for each r （ rc.
then the sets s c  and r r  are extended by applying the completion rules shown in table 1 until no more rule applies.
　some of the rules use abbreviations that still need to be introduced. first  cr1 uses the relation r   bcc 〜 bcc  which is defined as follows: c r d iff there are
c1 ... ck （ bcc such that
  c1 = c or c1 = {b} for some individual name b     cj cj+1  （ r rj  for some rj （ rc  1 ＋ j   k  
  ck = d.
　second  rules cr1 and cr1 use the notion conj si c    and satisfiability and implication in a concrete domain. if p is a predicate of the concrete domain dj  then the el++-concept description p f1 ... fn  can be viewed as an atomic firstorder formula with variables f1 ... fn. thus  it makes sense to consider boolean combinations of such atomic formulae  and to talk about whether such a formula is satisfiable in  the first-order interpretation  dj  or whether in dj one such formula implies another one. for a set Γ of el++ d1 ... dn concept descriptions and 1 ＋ j ＋ n  we define
	conj Γ  :=	 	p f1 ... fk .
p f1 ... fk （Γ with p（pdj
for the rules cr1 and cr1 to be executable in polynomial time  satisfiability and implication in the concrete domains d1 ... dn must be decidable in polynominal time. however  for our algorithm to be complete  we must impose an additional condition on the concrete domains. the concrete domain d is p-admissible iff
1. satisfiability and implication in d are decidable in polynominal time;
1. d is convex: if a conjunction of atoms of the form p f1 ... fk  implies a disjunction of such atoms  then it also implies one of its disjuncts.
let us now show that the rules of table 1 indeed yield a polynomial algorithm for subsumption in el++ d1 ... dn  provided that the concrete domains d1 ... dn are padmissible.
　the following lemma is an easy consequence of the facts that  i  each rule application adds an element to one of the sets s c    bcc “ {  〕} or r c d    bcc 〜 bcc 
 ii  the cardinality of bcc is polynomial in the size of c  and  iii  the relation r can be computed using  polytime  graph reachability  and  iv  the concrete domains are p-admissible.
lemma 1 for a normalized cbox c  the rules of table 1 can only be applied a polynomial number of times  and each rule application is polynomial.
　the next lemma shows how all subsumption relationships between concept names occurring in c can be determined once the completion algorithm has terminated.
lemma 1 let s be the mapping obtained after the application of the rules of table 1 for the normalized cbox c has terminated  and let a b be concept names occurring in c.
then a vc b iff one of the following two conditions holds:
  s a  ” {b 〕} 1=   
  there is an {a} （ bcc such that 〕 （ s {a} .
the if-direction of this lemma  soundness  immediately follows from the fact that  i1  and  i1  are satisfied for the initial definition of s r  and that application of the rules preserves  i1  and  i1 . this is trivial for most of the rules. we consider
cr1 in more detail. if {a} （ s c  ” s d   then c d vc {a}. now  c r d implies that c vc  r1.，，， rk 1.d or {b} vc  r1.，，， rk 1.d for some individual name b. in the second case  this implies that d cannot be empty in any model of c  and in the first case it implies that d is non-empty in any model of c for which c is non-empty. together with c d vc {a}  this implies that c vc d  which shows that the rule cr1 is sound since it preserves  i1 .
　to show the only-if-direction of the lemma  we assume that the two conditions do not hold  and then use the computed mappings s r to construct a model i of c such that ai 1  bi. basically  the domain  i of this model consists of all elements c （ bcc such that a r c. however  we identify elements c d of bcc if there is an individual name a such that {a} （ s c  ” s d . the interpretation of concept and role names is determined by s r: if d （ bcc is a concept name  then di = {c （（bcic iff| d c d（ s  c（ }r  and if r . finally r is a role name  then  c d  r
the interpretation of the feature names is determined by the the assignments satisfying the conjunctions conj s c    see  baader et al.  1  for a more detailed description of this construction  and a proof that it indeed yields a countermodel to the subsumption relationship a vc b .
to sum up  we have shown the following tractability result:
theorem 1 let d1 ... dn be p-admissible concrete domains. then subsumption in el++ d1 ... dn  w.r.t. cboxes can be decided in polynomial time.
p-admissibile and non-admissible concrete domains
in	order	to	obtain	concrete	dls	of	the	form
++
el  d1 ... dn  for n   1 to which theorem 1 applies  we need concrete domains that are p-admissible. in the following  we introduce two concrete domains that are p-admissible  and show that small extensions of them are no longer p-admissible.
　the concrete domain q =  q pq  has as its domain the set q of rational numbers  and its set of predicates pq consists of the following predicates:
  a unary predicate  q with   q q = q;
  unary predicates =q and  q for each q （ q;
  a binary predicate =;
  a binary predicate +q  for each q （ q  with  +q q = { q1 q1  （ q1 | q1 + q = q1}.
　the concrete domain s is defined as  Σ  ps   where Σ is the iso 1  latin-1  character set and ps consistes of the following predicates:
  a unary predicate  s with   s s = Σ ;
  a unary predicate =w  for each w （ Σ ;
  a binary predicate =;
  a binary predicate concw  for each w （ Σ   with concqw = { w1 w1  | w1 = w1w}.
polynomiality of reasoning in q can be shown by a reduction to linear programming  and polynomiality of reasoning in s
namesyntaxsemanticsnegation c i   cidisjunctionc t dci “ divalue restriction r.c{x |  y :  x y  （ ri ★ y （ ci}at-least restriction   n r {x | #{y （  i |  x y  （ ri} − n}at-most restriction 1 n r {x | #{y （  i |  x y  （ ri} ＋ n}inverse rolesr .cx	y :  y x 	ri	y	ci	 	{	|  	（	…	（	}
　　　　　table 1: the additional constructors. has been proved in  lutz  1 . moreover  we can show  baader et al.  1  that both q and s are convex.
proposition 1 q and s are p-admissible.
　both q and s are interesting concrete domains since they allow us to refer to concrete numbers and strings in concepts  and use the properties of the concrete predicates when reasoning. however  the predicates available in these concrete domains are rather restricted. unfortunately  p-admissibility is a fragile property  i.e.  we cannot extend q and s by other interesting predicates without losing p-admissibility. as an illustration  we consider one extension of q and one of s.
　the concrete domain q＋q  q extends q by the additional unary predicates1  implies the disjunction ＋q q（q. then the＋1 fq  ‥qq ＋1q   f q-without im-conjunction
 1 f plying one of its disjuncts. thus  q＋    is not convex.
　next  consider any concrete domain s  with domain Σ  for some finite alphabet Σ and  for every s （ Σ   the unary predicates prefs and suffs with the semantics
prefis a prefix of s1} suffis a suffix of s1}.
let Σ = {a1 ... an}. then the s -conjunction suffa1 f  implies the disjunction prefa1 f  ‥ ... ‥ prefan f  without implying any of its disjuncts.
1	intractable extensions of el with gcis
in this section we consider the sublanguage el of el++ and restrict the attention to general tboxes  i.e.  finite sets of gcis. recall that el is obtained from el++ by dropping all concept constructors except conjunction  existential restriction  and top. we will show that the extension of el with basically any typical dl constructor not present in el++ results in intractability of subsumption w.r.t. general tboxes. syntax and semantics of the additional constructors used in this section can be found in table 1  where #s denotes the cardinality of a set s.
　in addition to the subsumption problem  we will sometimes also consider the satisfiability problem: the concept description c is satisfiable w.r.t. the general tbox t iff there exists a model i of t with ci =1  . as in the previous section  we can restrict the attention to satisfiability/subsumption of concept names w.r.t. general tboxes.
atomic negation
let el  be the extension of el with negation  and let el    be obtained from el  by restricting the applicability of negation to concept names  atomic negation . since el  is a notational variant of the dl alc  exptime-completeness of satisfiability and subsumption in alc w.r.t. general tboxes  schild  1  carries over to el . exptime-completeness even carries over to el    since  c with c complex can be replaced with  a for a new concept name a if we add the two gcis a v c and c v a.
theorem 1 in el     satisfiability and subsumption w.r.t. general tboxes is exptime-complete.
disjunction
let elu be the extension of el with disjunction. subsumption in elu w.r.t. general tboxes is in exptime since elu is a fragment of alc. to obtain a matching exptime lower bound  we reduce satisfiability in el    w.r.t. general tboxes to subsumption in elu w.r.t. general tboxes. to this end  let a1 be a concept name and t a general el    tbox. for each concept name a occurring in t   we take a new concept name a1  i.e.  one not occurring in t  . also fix an additional new concept name l. then the general tbox t   is obtained from t by replacing each subconcept  a with a1  and then adding the following gcis:
    v a t a1 and a u a1 v l	for each a （ nc in t ;
   r.l v l.
note that  r.l v l is equivalent to  l v  r. l. it thus ensures that l acts as the bottom concept in connected countermodels of a1 vt   l. using this observation  it is not hard to verify that a1 is satisfiable w.r.t. t iff a1vt   l.
theorem 1 in elu  subsumption w.r.t. general tboxes is exptime-complete.
at-least restrictions
let el−1 be the extension of el with at-least restrictions1 of the form    1 r . subsumption in el− w.r.t. general tboxes is in exptime since el−1 is a fragment of alc extended with number restrictions  de giacomo and lenzerini  1 . we establish a matching lower bound by reducing subsumption in elu w.r.t. general tboxes. let a1 and b1 be concept names and t a general elu tbox. without loss of generality  we may assume that all concept inclusions in t have one of the following forms:
	c v d 	 r.c v d 	c v  r.d 
	c1 u c1 v c 	c v c1 t c1 
where c  d  c1  and c1 are concept names or 1 . call the resulting tbox t  . to convert t into an el− cbox  we simulate each gci c v c1 t c1 by introducing two new concept names a and b and a new role name r  and putting
c v  r.a u  r.b 
	c u  r. a u b  v c1 	c u    1 r  v c1.
it is easy to see that a1 vt b1 iff a1 vt   b1.
theorem 1 in el−1  subsumption w.r.t. general tboxes is exptime-complete.
the interested reader may note that similar reductions can be used to show exptime-completeness for el extended with one of the role constructors negation  union  and transitive closure.
non-p-admissible concrete domains
p-admissibility of the concrete domains is not only a sufficient condition for polynomiality of reasoning in el++  but also a necessary one: if d is a non-convex concrete domain  then subsumption in el d  is exptime-hard  where el d  is the extension of el with the concrete domain d. the proof uses a stronger version of theorem 1: we can show that subsumption of concept names w.r.t. restricted elu tboxes is exptime-complete  where a restricted elu tbox is a general el tbox extended with a single gci of the form a v b1 t b1  baader et al.  1 .
　the subsumption problem for such restricted elu tboxes can be reduced to subsumption in el++ d  as follows. let a1 and b1 be concept names and t a restricted elu tbox. since d is not convex  there is a satisfiable conjunction c of atoms of the form p f1 ... fk  that implies a disjunction a1 ‥ ... ‥ am of such atoms  but none of its disjuncts. if we assume that this is a minimal such counterexample  i.e.  m is minimal   then we also know that c does not imply a1 ‥ ... ‥ am  and that each of the ai is satifiable. then we have  i  each assignment of values from d that satisfies c satisfies a1 or a1‥...‥am;  ii  there is an assignment satisfying c and a1  but not a1‥...‥am;  iii  there is an assignment satisfying c and a1 ‥...‥am but not a1. now  let t   be obtained from t by replacing the single gci a v b t b1 by a v c  a1 v b  and ai v b1 for i = 1 ... m. it is easy to see that a1 vt b1 iff a1 vt   b1.
theorem 1 for any non-convex concrete domain d  subsumption in el d  w.r.t. general tboxes is exptime-hard.
for example  this theorem applies to the non-convex concrete domains introduced in section 1.
inverse roles
let eli be the extension of el with inverse roles. we show that subsumption in eli w.r.t. general tboxes is pspacehard by reducing satisfiability in ale w.r.t. primitive tboxes: ale extends el with value restrictions and atomic negation; primitive tboxes are finite sets of gcis whose left-hand side is a concept name. this satisfiability problem is known to be pspace-complete  calvanese  1 .
　let a1 be a concept name and t a primitive ale tbox. we assume without loss of generality that t contains only concept inclusions of the following forms:
	a v b 	a v  b 	a v  r.b 	a v  r.b 
where a  b  and b1 are concept names. we take a new concept name l and define the general eli tbox t   to consist of the following gcis:
  a v d for all a v d （ t
if d is a concept name or of the form  r.b;
   r .a v b for all a v  r.b （ t ;
  a u b v l for all a v  b （ t ;
   r.l v l.
as in the case of elu  the concept inclusion  r.l v l is equivalent to  l v  r. l and ensures that l acts as the bottom concept in connected countermodels of   .a v b is clearly equivalent toaa1 v  vt  r.bl..
additionally  r
thus  it is not hard to verify that a1 is satisfiable w.r.t. t iff a1 v1 t   l.
theorem 1 subsumption in eli w.r.t. general tboxes is pspace-hard.
the exact complexity of this problem is still open  the best upper bound we know of is exptime  stemming from results for the dl alci  de giacomo and lenzerini  1  .
at-most restrictions/functional roles/1	fl1
let el＋ be the extension of el with at-most restrictions1 of the forn  1 r . as in the case of el−   subsumption in el＋1 w.r.t. general tboxes is in exptime since el＋1 is a fragment of alc with number restrictions. we prove a matching lower bound by reducing subsumption in the dl  w.r.t. general tboxes.  offers only the concept constructors conjunction and value restriction and requires all roles to be interpreted as total functions. subsumption in this dl w.r.t. general tboxes was proved exptime-complete in  toman and weddell  1 . let a1 and b1 be concept names and t1 a general tbox. we convert t into a general el＋ tbox t   by replacing each subconcept  r.c with  r.c in gci left-hand sides  and with  1 r u r.c in gci right-hand sides. then
.
theorem 1 subsumption in el＋1 w.r.t. general tboxes is exptime-complete.
interestingly  the result of toman and weddell can also be used to prove exptime-completeness of subsumption in fl1 w.r.t. general tboxes. recall that without the restriction that roles be total functions. in  baader et al.  1  we show that a1 vt b1 in fl1 iff a1 vt b1 in   i.e.  subsumption incoincides.
theorem 1 subsumption in fl1 w.r.t. general tboxes is exptime-complete.
1	conclusion
we believe that the results of this paper show that-in contrast to the negative conclusions drawn from early complexity results in the area-the quest for tractable dls that are expressive enough to be useful in practice can be successful. our dl el++ is tractable even w.r.t. gcis  and it offers many constructors that are important in ontology applications.
　this is in strong contrast to its counterpart with value restrictions: fl1 is tractable without tboxes  brachman and levesque  1   co-np-complete for acyclic tboxes  nebel  1   pspace-complete for cyclic tboxes  baader  1; kazakov and de nivelle  1   and exptimecomplete for general tboxes  as shown above  and  independently  in  hofmann  1   .
