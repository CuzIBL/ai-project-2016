subgoal ordering and goal augmentation for heurila tic problem solving 
keki b. irani and jie cheng 
robot systems division 
center for research on integrated manufacturing 
department of electrical engineering and computer science 
the university of michigan  ann arbor  mi 1  usa 

a b s t r a c t : 
in order to improve the performance of heuristic search for finding optimal solutions  two high level problem solving strategies  namely  subgoal ordering and goal augmentation  have been developed. the essence of these two strategies is to make explicit the knowledge embedded in a general problem formulation which can be used to constrain the solution search space. these two strategies have been incorporated into a methodology which we previously developed for automatically generating admissible search heuristics. the effectiveness of these strategies is demonstrated by the application to robot optimal task planning problems. 
1. introduction 
     in previous papers  we have presented a general heuristic problem solving methodology. recently  this methodology is augmented by two systematic problem solving strategies  namely  problem subgoal ordering and goal augmentation. this paper reports on these two strategies. 
     problem subgoal ordering is an important strategy used to reduce problem space search. many different subgoal ordering strategies have been reported before  |erg1|   sus1j   tat1   fwal1l    sac1    das1  . however  in this paper we present a novel approach to subgoal ordering. in contrast to the previously proposed approaches  our approach is to preorder the problem subgoals systematically by reasoning on the problem formulation. the result of ordering is then imposed on the search control to constrain the search space. 
     goal augmentation is another problem solving strategy which systematically discovers goal information that is not explicitly represented but can be inferred from a given problem formulation. augmentation can often reduce theambiguity of the specified problem solving goals which enables more accurate estimation of the search heuristic. 
     our research on problem subgoal ordering and goal augmentation are both part of an effort to develop a general heuristic problem solving methodology. previously  we achieved methods for systematically modeling problems and automatically generating admissible heuristics for a*-like best-first search algorithms  see  iry1    iry1  . currently  the subgoal ordering and the goal augmentation strategies have been integrated with the heuristic generation to constrain search through improving the tightness of the heuris-
　　　' this work was supported in part by afosr under contract f j1-ss-c-1s and id part by src under con tract no-1 
1 	reasoning tie estimation. 
     the rest of the paper is organised in the following way. a simple robot planning problem is introduced in section 1. earlier problem subgoal ordering strategies are briefly reviewed in section 1. our approaches to subgoal ordering and to goal augmentation are then presented in section 1 and section 1 respectively. the integration of these problem solving approaches with the automatic search-heuristic generation is reported in section 1. a complete example is given in section 1 and the paper is finally summarised in section 1. 
1. a robot planning problem 
     to illustrate our ideas  we introduce a robot navigation planning problem in this section. in the problem  there are three problem objects  one robot and two boxes  see figure 1 . the robot is the only active agent which can change its own position as well as move other objects. the valid actions assumed in this problem setting are  l the robot going to an object in the same room;  1 the robot going into a connected room; and  1 the robot pushing an adjacent box to a connected room. 
     the problem's initial state and goal state are described in figure 1. the solution to be found is an optimal sequence of actions for the robot to perform so that the initial state can be transformed into a goal state with the least possible number of actions. using our formal problem model  this problem can be specified as follows: 
 1  three problem objects: robot  bozl and box1; 
 1  two problem attributes modeling relevant problem solving aspects  namely  the locations of problem objects in reference to the room configurations and the adjacency relations 
among problem objects; 


 1  functions which take an object and a state as parameter and return a value representing the status of the object in that state in certain aspects. this example uses two functions  inroom and nextto. inroom{objs  returns a room identifier indicating in which room the object is located in the state #  while neztto obj t  returns a set of objects adjacent to obj in the state s; 
 1  a goal formula specifying conditions which must be satisfied by any goal state  
  
 1  a set of problem rules modeling valid actions  the rules use the if   precondition   then   postcondition   format. the precondition specifies what must be true for the rule to be applicable. the postcondition specifies the effects of the application of a rule.  t and s1 are used to represent the states before and after the application of a rule. we assume that if the status of an object with respect to a certain problem aspect is not in the postcondition part of a rule  then it is unaffected by the application of the rule. 

     although this problem appears to be simple  a heuristic state space search without subgoal ordering is very inefficient. to illustrate this  we use the automatically generated admissible heuristic function  iry1|  to control the search in solving the problem. for this problem  1 nodes are produced and 1 nodes are expanded for deriving an optimal solution with a length of 1 rules. 
     on tracing the search tree generated in solving this problem  we find that the generated problem heuristic prefers to move the robot directly towards its own goal rather than moving the robot to first push the box  into room* this is due to the fact that the difference in the locations of the robot in any non-goal state and the goal state always dominates the similar difference for the boxx. the 
　　　* if  or by  and rz or ry  are variables which range over ors and room* respectively 
inherent ordering constraints between the two problem subgoals are not recognized and used in the heuristic estimation. consequently  the robot is misled into going into the roomi directly. it is not until the robot arrives at room1 that the task of moving the box{ is noticed. 
     the ineffectiveness of the heuristic in this problem is due to the lack of knowledge about subgoal ordering constraints and the incompleteness of the goal specification. this motivates us to develop a systematic subgoal ordering approach and a goal augmentation approach. these two approaches reveal implicit knowledge about a problem from its specification  and transform it into explicit problem control constraints to guide heuristic search. 
1  previous subgoal ordering strategies 
     subgoal ordering has been employed in many previous problem solving systems as a strategy for reducing search. these systems can be classified by the degree of commitment they make towards subgoal ordering  which reflects how early a decision is made on ordering problem subgoals  and 
how bold a hypothesis is made on the subgoal ordering constraints with a given amount of information. 
     among the early systems  gps  ern1  is the first to apply subgoal ordering to problem solving. in gps  subgoals are arranged as the row headings in the tabic of connection. the system does not start to achieve a subgoal heading for a certain row until all subgoals heading higher rows are achieved. a total ordering is thus imposed on all problem subgoals  which represents the highest possible commitment towards subgoal ordering. this ordering task needs to be carried out by a user. 
     many other systems are also over-committed to subgoal ordering  although they operate in quite a different way from that of gps. systems like hacker  sus1|  interplan  tat1|  warplan  war1   first order subgoals arbitrarily and perform a destructive re-ordering in case a protection constraint violation is detected. systems like strips |fin1j and abstrips  sac1  achieve subgoals in the order they are given and backtrack if the given order fails. waldinger's system  wal1l  proposes a goal regression strategy which amounts to  constructive subgoal re-ordering . 
     noah  sac1  is a system which makes  least commitment  towards subgoal ordering. it first attempts problem subgoals in parallel  unless a sequential order constraint is imposed beforehand in the  soup  code . several  critics  are then applied to detect and handle interactions among subgoals or to find and eliminate redundancies. 
     another distinctive approach is presented in  das1   in which a subgoal is chosen to be achieved next if it least interferes with the subgoals already achieved. 
     the subgoal ordering strategies of these systems either make too strong an initial commitment to subgoal ordering  without making use of the knowledge of the inter-subgoal constraints at all  or make a commitment to the ordering too late. the former results in too much backtracking while the latter results in much redundancy as well as conflicts in partial problem solutions. consequently  these strategies do not reduce search as effectively as expected. 
ernst et al.  erg1  developed a procedure  dgbs  to 
	irani and cheng 	1 
mechanize the gps approach. dgbs represents a reasonable commitment towards problem subgoal ordering. it tries to detect inherent problem subgoal ordering constraints so that they can be put in order properly before the problem solving actually starts. however  dgbs is very inefficient in its construction of the table of connection. the procedure has to process all the problem operator instances initially  instead of just considering problem operator schemes as usually 
given in a problem specification. this may cause dgbs to be computationally intractable when tackling a problem with a few operator schemes but a large number of operator instances. another problem with dgbs is that it cannot 
guarantee a correct ordering. when the 'superfluous operator constraint  is violated  and the table of connection is in a diagonal form  the system is unable to order subgoals properly. 
     the key weakness of all these previous subgoal ordering approaches is their inability to properly reveal and make use of the relationship between problem operator structures and problem subgoal orderings. as will be shown later  our research result presents an improvement on this issue over these approaches. 
1. a systematic approach to subgoal ordering 
     if a problem goal is represented by a predicate formula in a conjunctive normal form  then we can conceive every conjunct as a problem subgoal. there are usually interactions between such subgoals which determine the natural order of achieving them in solving a problem and these interactions are called subgoal ordering constraints. 
     many types of ordering constraints may exist among problem subgoals. we are mainly interested in one such type. however  we discuss two more types of constraints below to intuitively motivate the third type of constraint  which we use for ordering subgoals. 
      1  a subgoal g1 cannot be achieved before a subgoal g{ m any problem solution. there could be two possible situations. one is when  if g1 is satisfied first  then all those rules which can achieve g{ will not be applicable unless g1 is destroyed. the other is when  if g1 is satisfied first  then any rule which can achieve gl will force the violation of g1 as a 
side effect of that rule. 
　　　the subgoal ordering constraint in the robot planning example is an instance of the first situation; if we achieve the subgoal for the robot first  then when we turn to achieve the subgoal for boxu we will have to retract the established subgoal for the robot. 
an example of the second situation is the following. 
suppose our goal is to have clothes washed and dried. the actions we can use are 'wash clothes in a washer' and 'dry clothes in a dryer'. if we achieve the dry' subgoal first  then although we can still 'wash clothes in a washer' to satisfy the other subgoal  the 'dry' subgoal would be wiped out because the clothes become wet after washing. 
      1  subgoals g1 and g1 cannot be achieved simultaneously by the application of a single rule. for instance  in our robot planning example  the robot cannot get into rooma while the boz  is pushed into room1. 
      1 . a subgoal g1 must be achieved before a subgoal g1 in any problem solution in which both are satisfied. this con-
1 	reasoning 
straint is actually a conjunction of the constraints  1  and 
 1 . 
     these three subgoal ordering constraints are intuitively clear. however  it is not intuitively clear how one can systematically detect these constraints from a problem formulation. in order to automate the process of detecting these kinds of constraints from the basic problem formulation and to order problem subgoals systematically  we have developed relations and procedures. in the following  the proposed approach and the results are presented. first we introduce some notations: 
  g represents the goal condition formula which is a ground predicate formula specifying the desired state of affairs for a problem. gt represents a subgoal condition formula which is a conjunct in the goal condition formula. 
sg is the set of all subgoal condition formulas of g. 
is a subset of problem states satisfying g1. 
is used to denote the resulting state of the applica-
	tion of the rule 	to state s. 
 preck and postk are the precondition formulas and postcondition formulas for the rule rk respectively.  problem solution path: a sequence of states such that 1j is an initial state  sn is a goal state  and for every state  there is a rule which can transform s1  into s1. 
  o partial solution path in a problem solutton path 

     in order to explicitly represent the relation between the problem rule specifications and subgoal ordering constraints  we give the following definitions. 
definition: gt precedes g} m a problem solution path p iff there exists a partial solution path  in p which satisfies: 

definition: gt and g  are said to be both achieved in a problem solutton path p iff there is a partial solution path 

definition: u     is a binary relation over sg. g   g} iff 

　　 means that for any rule in the problem  if the rule can transform a state  say s  to a new state in which both g  and g  are true  then s must satisfy g . 
     the relation  appears to be complicated because of the quantifiers used. however  to construct *-   only pattern matching and variable binding are needed. a procedure called soc  subgoal ordering constraints  has been 
developed to construct  . a loose upper bound for the complexity of this procedure is    where m  n  and k are the cardinalities of the set of problem objects  the set of problem aspects and the set of rules  respectively. 


	irani and cheng 	1 

     in this algorithm  step  1  finds the first component goal which is not already satisfied in the initial state. the algorithm achieves the augmentation of each component goal gk mainly in steps  1 - 1 . for every subgoal g  in the component goal gk  every rule r} is checked to see whether it is applicable in a state in which the subgoal g  is not satisfied  and whether its application to such a state can satisfy gk and all those component goals preceding gk in the goal sequence. if rule  passes the test  then besides the component goal condition formula gk  all its preconditions which are unaffected by the application of the rule and all its postconditions are true in the state resulting from the application of r ;. these preconditions and postconditions are conjoined into aug;. if more than one rule passes the test  then the conditions derived from different rules are dis-
joined and stored in augt. the disjunction of all the aug 's is the total augmentation which is finally conjoined with the component goal gk in step  1 . a loose upper bound of the complexity of the procedure augment is  where m  n  and k are the cardinalities of the set of problem objects  set of problem aspects and set of rules. since usually only a few rule schemes are related with each possible subgoal in a problem  the computation of the goal augmentation is often very efficient. 
       we again use our robot planning problem to illustrate the algorithm. from the subgoal ordering  we derived a goal with two component goals  namely  
   integration of subgoal ordering  goal augmentation and heuristic estimation 
     in our previous research  we proposed a methodology for determining a general and admissible heuristic function h $  for best-first search  see  iry1    iry1  . according to this methodology  for each state s  h s  returns an underestimated minimum cost for the path from * to the goal set. in this section  we show that subgoal ordering and goal augmentation can be naturally incorporated into heuristic estimation. the new heuristic estimation is tighter than the original one while the admissibility and monotonicity is still preserved. we first explain the original heuristic function and then describe the integration of subgoal ordering  goal 
1 	reasoning 
augmentation and heuristic estimation. 
　　　the original heuristic function h s  is derived as follows: the problem is first transformed into k simplified problems  where k is the number of problem objects whose status in the state a is different from that in the goal state. each simplified problem contains only one object in its problem space  with all specifications concerning other objects suppressed. the minimum cost for the optimal path in each simplified problem is then either derived by conducting an exhaustive search in this small space  or simply retrieved from the store of previous derivation results. 
     although the derived cost in any simplified problem can be taken as the heuristic for the original problem  further derivations are made to get a tighter heuristic estimation. three functions are evaluated. the first gives the maximum value of all the minimum costs for solving the simplified problems. the second is the sum of all the minimum costs divided by the maximum number of objects affected by any operator in the original problem model. the third is the same as the second except that the objects which are affected by all operators are excluded from consideration. the maximum of the three computation results is taken to be the final value of h s  for the state s. 
     the search heuristic described above assures admissibility and monotonicity. however  the heuristic does not incorporate the knowledge of interactions among problem subgoals and is very sensitive to the completeness of the goal specification. in the following  we describe a a new heuristic function which incorporates subgoal ordering knowledge and goal augmentation. 
   we first denote the component goal sequence generated by subgoal ordering to be the sequence after the augmentation t o d the goal 
sequence for heuristic estimation to be 

     in the search process for the problem solution  for any state s being evaluated  we define an effective goal subse-
quence g  which is the remaining sequence of component 
goals to be fulfilled relative to state s. formally  

　　　the new heuristic function can now be informally defined. when a state  say s  is to be evaluated  the problem is decomposed into k simplified problems as before  where k is the number of problem objects which do not have the. same status in s and in all the component goals of the effective goal subsequence g. in the simplified problem for an object o  the effective goal subsequence is relaxed such that only the specification about the status of a is retained in each of the elements of the sequence. the cost of the optimal solution path passing through each of the elements of this simplified sequence is then determined. the final value of the new heuristic a+ s  is the maximum of the three values computed in the same way as before. 
     the heuristic function h+ $  is also admissible and monotonic. furthermore  it provides consistently tighter 

heuristic estimation than the original function h s . the proof is omitted. with the new heuristic function  the search becomes very efficient. as can be seen from figure 1 a   for the problem given in figure 1  without subgoal ordering and goal augmentation the search can go astray for a long time before it touches the right path. for this problem  1 nodes are produced and 1 nodes are expanded for deriving an optimal solution with length of 1 rules. however  as shown by figure 1 b   with subgoal ordering and goal augmentaion  the heuristic value discriminates against the misleading path at the very outset. the search tree generated for this problem contains only 1 nodes  of which 1 
modes are expanded. 
	irani and cheng 	1 

 sac1  sacerdoti  e. d.   a structure for plans and behavior   elsevier north-holland  new york  1. 
 sus1  sussman  g. j.  a computer model of skill acquisition  new york: american elsevier. 1. 
 tat1  tate  a.   interacting goals and their use   the proceeding of the 1th ijcai  1  pp. 1. 
 wal1  waldinger  r.   achieving several goals simultaneously . readings in ai r pp. 1.  1 . 
 war1  warren  david h.d.   warplan: a system for generating plans   department of computational logic memo 1  u. of edinburgh  july  1. 
     finally  we incorporate the above results into the heuristic generation and conduct the heuristic search to solve for the optimal solution path. the effectiveness of the search 
heuristic is greatly improved. using the original methodology without subgoal ordering and goal augmentation  1 nodes are generated and 1 nodes expanded. however  with the new methodology  1 nodes are generated and 1 nodes 
expanded. 
s. 	summary 
this paper is a contribution to the development of a general methodology for automated heuristic problem solving. we have presented an improved procedure for subgoal ordering and a novel procedure for goal augmentation. we then outlined a procedure to integrate these two strategies with our previous methodology of automatic generation of admissible 
search heuristic. the combined package is a new methodology of general problem solving. 
