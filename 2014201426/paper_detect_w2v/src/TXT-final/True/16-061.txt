	a r c h i t e c t u r e 	a n d 	a p p l i c a t i o n s 	o f dado: 
a l a r g e - s c a l e p a r a l l e l c o m p u t e r f o r a r t i f i c i a l i n t e l l i g e n c e * 
salvatore j. stolfo 
daniel miranker 
david elliot shaw 
columbia university 

a b s t r a c t 
as part of our research on very high performance parallel architectures  we have been investigating; machine architectures specially adapted to the highly efficient implementation of artificial intelligence  ai  software. in the course of our research we designed dado  a highly parallel  vlsi-based  tree-structured machine  and implemented a high-speed algorithm for production systems on a simulator for dado. subsequent research has convinced us that dado can support many other ai applications  including the very rapid execution of prolog programs  and a large share of the symbolic processing typical of contemporary knowledge-based systems. in this brief report  we outline the hardware design of a moderate size dado prototype  comprising 1 processing elements  which is currently under construction at columbia university. we then sketch the software base being implemented on a small 1 processing element prototype system including several applications written in ppl/m  a high-level language designed for specifying parallel computations on dado. 
1 . i n t r o d u c t i o n 
     as knowledge-based systems begin to grow in size and scope  they will begin to push conventional computing systems to their limits of operation. even for experimental systems  many researcher:: reportedly experience frustration based on the length of time required for their operation. for applications requiring real-time response from an expert system  for example  electronic warfare  conventional implementations may not be practical. recently  several ai researchers  see  nilsson 1   for example  have suggested that significant increases in the performance of contemporary 
　*this research was supported in part by the defense advanced research projects agency under contract 
nooo1-c-1  as well as intel corporation  digital 
equipment corporation. ibm corporation and valid logic systems we gratefully acknowledge their support. 
ai systems might be realized through distributed processing or the use of specialized parallel hardware. some attention has been given to issues of parallelism in system organizations for cooperating distributed ai subsystems  lesser and corkill 1 ; special hardware for high speed property inheritance and related operations in systems based on semantic network-like formalisms  fahlman 1  hillis 1 ; and the design of machines supporting the parallel execution of certain relational algebraic operations having practical importance in largescale knowledge-based systems  shaw et al. 1 . the potential applications of very large scale hardware parallelism to the execution of ai systems  however  has remained largely unexplored. 
in this paper  we describe dado  stolfo and shaw 
1   a tree-structured  multi-processor based architecture that utilizes the emerging technology of vlsi systems in support of the highly efficient parallel execution of large-scale ai systems. in  stolfo and shaw 
1   we reported a high-speed algorithm for production system programs  which has been implemented on a simulator for dado. production systems form the basis for a wide range of approaches to building knowledgebased expert systems. subsequent research has convinced us that dado may support many other ai applications including the very rapid execution of prolog programs and a large share of the symbolic processing typical of knowledge-based systems. a small  1 processor  prototype of the machine  constructed at columbia university from components supplied by intel 
corporation  is operational. based on our experiences with constructing this small prototype  we believe a larger prototype  dad1  comprising 1 processors and capable of significant performance improvements over implementations based on von neumann machines  to be technically and economically feasible for implementation using current technology. we believe that this experimental device will provide us with the vehicle for evaluating the performance  as well as the hardware design  of a full-scale version of dado implemented entirely with custom vlsi circuits. 
1 . 	t h e 	dado 	m a c h i n e a r c h i t e c t u r e 
     a full-scale production version of the dado machine would comprise a very large set  on the order of hundreds of thousands  of processing elements  pe's   

each containing its own processor  a  small amount  1k  ytes  in the current design of the full-scale version  of ocal random access memory  ham   and a specialized /   switch  which will he implemented using a custom integrated circuit. the pk's are interconnected to form a complete binary tree. 
　　　within the dado machine  each pk is capable of executing in either of two modes. in the first  which we will call simd mode  for .single instruction stream  mulltiple data stream   the pk executes instructions broadcast by some ancestor pk within the tree. in the 
second  which will be referred to as mimd mode  for 
//ultiple instruction stream  multiple data stream   each 
　k executes instructions stored in its own local ram  'ndependently of the other pk's. a single control processor  cp   adjacent to the root of the dado tree  controls the operation of the entire ensemble of pk's. 
　　　when a dado pk enters mimd mode  its logical state is changed in such a way as to effectively 
'disconnect  it and its descendants from all higher-level pe's in the tree. in particular  a pe in mimd mode does not receive any instructions that might be placed on the ＊ree-structured communication bus by one of its ancestors. such a pk may  however  broadcast instructions to be executed by its own descendants  providing all of these descendants have themselves been switched to simd mode. the dado machine can thus be configured in such a way that an arbitrary internal mode in the tree acts as the root of a tree-structured simd :levice in which all pk's execute a single instruction  on different data  at a given point in time.  a pk in simd mode may also be instructed to disable itself  in which  ase instructions placed on the broadcast bus will be ignored by the pk  while descendants of the pk who remain enabled will receive and execute such instructions.  thus  dado provides direct support for large-scale 
msimd  multiple simd  execution. this flexible architectural design supports the logical division of the machine into distinct partitions  each executing a distinct ask. 
     the dado i/o switch  which will be implemented n custom vlsi and incorporated within the 1 
processing element version of the machine  has been lesigned to support communication between physically djacent tree neighbors  as well as communication between pk's that are adjacent in a logical linear ordering  mbeddod within the tree. in addition  a specialized combinatorial circuit incorporated within the i/o switch vill allow for the very rapid selection of a single listinguished pk from a set of candidate pk's in the tree  'urrently  the 1 processing element version of dado performs these operations with the sequential logic mibodied in its off-the-shelf components. 
     in the following sections we outline the hardware esign of the dado prototypes and then describe 
s. stolfo et al. 1 
ppl/m  a variant of the pl/m language  providing several primitives for specifying parallel computation on dado. in the concluding sections we overview the applications currently under active investigation for implementation on dado. 
1. the dado prototypes 
　　　a 1-elemcnt dado prototype  constructed from  partially  donated parts supplied by intel corporation  is currently operational. the 1 pe's are integrated on two wire-wrap prototype boards supplied by valid logic systems. a much larger version  dado1  is under construction which will incorporate 1 pk's constructed from two commercially available intel chips. the dados prototype consists of 1 printed circuit boards  each containing 1 pk's  housed in a rack which can fit in either a dkc vax 1 cabinet  or an ibm series i cabinet. 
1. the prototype processing element 
kach vk in the prototype systems incorporate an 
intel 1 microcomputer chip  serving as the processor and an 1k x 1 intel 1 ram chip  serving as the local memory.  'two simple logic gates are used to properly integrate the ram and processor.  although the fullscale version of dado has been designed to incorporate a 1l  ram within each pk  an 1k ram was chosen for the prototype pk to allow a modest degree of flexibility in designing and implementing the software base for the full version of the machine. 
　　　the intel 1 is a powerful 1-bit microcomputer incorporating a ik eraseable programmable read only memory  kprom   and a 1-byte ram on a single silicon chip. one of the key features of the 1  processor is its i/o capability. the four parallel  1-bit ports provided in a 1o pin package has contributed substantially to the ease of implementing a binary tree interconnection between processors. 
　　　in the 1-element prototype design  the communication primitives and execution modes of a dado pk are implemented by a small kernel system resident within each processor kprom. the specialized i/o switch envisioned for dados is simulated in the smaller version by a short sequential computation. based on our estimates of minimum clock speed  dados will be capable of executing in excess of 1 million instructions per second  assuming inter-processor communication to be implemented with a combinational logic i/o switch. although pipelined communication is employed in the kernel design  it is expected that only 1 million instructions per second would be achieved using the current design. thus  the design and implementation of a 
1 s. stolfo et al. 
custom i/o chip forms a major part of our current research activities. 
1. the pe kernel 
     as noted  the 1k eprom of the intel 1 stores the system kernel of a pe  which includes code performing the most basic communication and synchronization functions as well as the simulation of simd and mimd modes of execution. the kernel system is designed in such a way as to logically divide the 1k ram space of the intel 1 chip into two portions for each of the execution modes. the initial ik portion  referred to as simd ram  is a reserved data space for variables and constants operated upon by a pe while in simd mode. the remaining 1k portion of ram is used for storage of code  as well as the local variables used during the mimd mode of operation. 
1 . p r o g r a m m i n g d a d o 
     pl/m  intel 1  is a high-level language designed by intel corporation as the host programming environment for applications using the full range of intel microcomputer and microcontroller chips. a superset of pl/m  which we call ppl/m  has been implemented as the system-level language for the dado prototypes. ppl/m provides a set of facilities to specify operations to be performed by independent pe's in parallel. 
     intel's pl/m language is a conventional blockoriented language providing a full range of data structures and high-level statements. the following two syntactic conventions have been added to pl/m for programming the simd mode of operation of d.ado. the design of these constructs was influenced by the methods employed in specifying parallel computation in the glypnir language  lowrie et al. 1  designed for the illiac iv parallel processor. the slice attribute defines variables and procedures that are resident within each pe. the second addition is a syntactic construct  the do simd block  which delimits ppl/m instructions broadcast to descendent simd pe's.  in the following definitions  optional syntactic constructs are represented within square brackets.  
the slice attribute: 
declare variable  dimension   type slice; 
name: procedure  params    type  slice; 
     each declaration of a sliced variable will cause an allocation of space for the variable to occur within the simd ram of each pe  the initial ik portion . sliced procedures are automatically loaded within the 1k mimd portion of ram  by an operating system executive resident in dado's cp . 
     within a ppl/m program  an assignment of a value to a sliced variable will cause the transfer to occur within each enabled simd pe concurrently. a constant appearing in the right hand side will be automatically broadcast to all enabled pe's. thus  the statement 
       x=1; where x is of type byte slice  will assign the value 1 to each occurrence of x in each enabled simd pe.  thus  at times it is convenient to think of sliced variables as vectors which may be operated upon  in whole or in part  in parallel.  however  statements which operate upon sliced variables can only be specified within the bounds of a do simd block. do simd block: 
do simd; 
r-statement 1 
 r-statement ; end; 
the r-statement is restricted to be any pl/m statement incorporating only sliced variables and constants. 
     in addition to the full range of instructions available in ppl/m  a dado pe in mimd mode will have available to it a set of built-in functions to perform the basic tree communication operations  in addition to functions controlling the various modes of execution. the interested reader is referred to  stolfo et al. 1  for the details of these primitives  as well as a complete specification of the ppl/m language. 
1 . a p p l i c a t i o n s 
     thus far  1 people have written ppl/m programs for dado. the applications that have been written  at various stages of completion  include system-level diagnostics  numeric processing and al applications. the largest share of our software effort  though  has concentrated on parallel implementations of various al applications. 
     the most important of these is an algorithm for the parallel execution of production system programs. a restricted model of production systems has been implemented in ppl/m using this algorithm and is currently being tested. 
     in its simplest form  the algorithm operates in the following way: 
j. by assigning a single rule to a unique pe at a fixed level within the tree  referred to as the pm-level   executing in mimi  mode  each rule in the system is matched concurrently. thus  the time to calculate the set of matching rules on each cycle is independent of the number of productions in the system. 
1. by assigning a data item in working memory  wm  to a single pe below the pm-level executing in s1  mode  wm is implemented as a true hardware content-addressable memory. thus  the time required to match a single pattern element is independent of the number of facts in wm. 
1. lastly  the selection of a single rule for execution from the conflict set is also performed in parallel. thus  the logarithmic time lower bound of comparing and selecting a single item from a collection of items is achievable on dado as well. 
     this algorithm offers a number of advantages over the highly efficient pete match algorithm reported by forgy  while maintaining much of its inheritently efficient capabilities. we quote from  porgy 1 : 
　...certainly the  rete  algorithm should not be used for all match problems; its use is indicated only if the following three conditions are satisfied. 
- the patterns must be compilable  to more primitive match tests  ... 
- the objects must be constant. they cannot contain variables or other nonconstants as patterns can. 
- the set of objects must change relatively slowly. since the algorithm maintains state between cycles  it is inefficient in situations where most of the data changes on each cycle. 
in its current form  the ixado algorithm does not provide a means to compile patterns into primitive match tests  although it does not directly exclude this possibility. however  the ability of a dado pe to execute code independently of other pe's permits pattern matching tests common to several rules to be performed in parallel  as well as a more powerful pattern match operation: unification. thus  data items within dado's wm may 
contain variables or other non-constants.  it is interesting to note that this capability forms the basis of the implementation of prolog on dado.  lastly  the dado algorithm does not restrict the amount or scope of 
wm modifications  	but rather permits large global 
s. stolfo et al. 1 
changes to be made to wm very efficiently  by broadcasting such changes from the root pe . however  the dado algorithm does not save state between cycles. rather  in situations in which few wm changes are made on each cycle  the dado algorithm recomputes much of its match results calculated on the previous cycle. we have recently discovered  though  that the basic dado algorithm can be easily extended to directly implement this temporal redundancy. 
     many problem solving tasks  though  are well suited to implementation using the rete algorithm. thus  we have also recently begun work on implementing the rete match algorithm directly on dado. it is too early in our investigations to make any precise claims about the performance of the retp  algorithm on dado. however  since the data-flow discrimination network compiled by the rete algorithm produces nodes with a maximum fan-in of two  it is our belief that the match network may be directly mapped onto the dado tree structure permitting massive parallelism to be directly exploited. the comparative evaluation of the two approaches forms a major part of our current research activities. 
     our plans include the completion of an interpreter for a more general version of production systems in the coming months. an improved algorithm for the rapid evaluation of hierarchical production systems  typified by a/ c//v-like systems  is being investigated for implementation on dado as well. 
lastly  we note the relationship of prolog and 
dado. since prolog may be considered as a special case of production systems  it is our belief that dado can quite naturally support performance improvements of prolog programs over von neumann implementations. 
some interesting work in this direction has been reported in  taylor et al. 1 . 
     by way of summary  it is our belief that dado can in fact support the high-speed execution of a very large class of al applications  in particular  the rapid execution of expert systems implemented in production system form. coupled with an efficient implementation in vlsi technology  the large-scale parallelism achievable on dado will indeed provide significant performance improvements over conventional machines at moderately low cost. indeed  our preliminary statistics suggest that dad1 is expected to execute rl/xoon  the digital 
equipment corporation vax configuration program reported by mcdermott   at an average rate in excess of 1 production system cycles per second! presently  rl/xoon executes on a vax 1  at a rate of 1 to 1 production system cycles per minute. it is interesting to note further that this larger prototype will be comparable in hardware complexity and cost to the dec- vax 1  a smaller  slower and much less expensive version of the vax 1. 

1 s. stolfo et al. 
1 . c o n c l u s i o n a n d f u t u r e r e s e a r c h 
     a large part of our work continues to involve the analytical investigation of new parallel algorithms and languages for ai applications. several researchers are actively investigating methods for the rapid execution of prog programs. a large share of our efforts  though  are devoted to the hardware design and implementation of a larger experimental device. although adequate for further development of the software base for dado  the j1-element system is too limited in storage capacity and processing power to demonstrate a significant performance improvement in the execution of al systems. thus  using the hardware design of the 1-clement system  we are currently implementing dad1  comprising 1 processing elements. dad1 will incorporate a custom vlsi chip  currently being designed at columbia university  to perform the most basic communicaton functions in combinational logic. 
     our future plans include the demonstration of the dado1 prototype using several existing large-scale expertsystems which use the production system paradigm. digital equipment corporation has expressed an interest in supplying a copy of rl/xcon for implementation on dad1. bell laboratories has also expressed a willingness to supply a copy of ace  an expert system that has been developed to perform telephone cable maintenance  stolfo and vesonder 1 . other systems are being actively sought from other sources in the artificial intelligence community. 
