 
　　　procedures for optimization and resource allocation in operations research f i r s t require a project network for the task to be specified. the specification of a project network is at present done in an i n t u i t i v e way. ai work in plan formation has developed formalisms for 
specifying primitive a c t i v i t i e s   and recent work by sacerdoti  1a  has developed a planner able to generate a plan as a p a r t i a l l y ordered network of actions. the  planning: a joint ai/or approach  project at edinburgh has extended such work and provided a hierarchic planner which can aid in the generation of project networks. this paper describes the planner  nonlin  and the task formalism  tf  used to hierarchically specify a domain. 
1. ai and or approaches to planning 
　　　the general problem of planning a task is one of very broad scope. current work in operations research  or  and a r t i f i c i a l intelligence  ai  has concentrated on different aspects of the problem. we have taken an interdisciplinary approach in the hope that this w i l l lead to a development of both these aspects. 
　　　in the or approach  the planning process f a l l s into two stages. 
1. the constituent  jobs  of a plan are specified together with their precedence relationships   i . e . requirements of the form that one job precede another  . this information defines a graph  termed a project network. 
1. various operations are performed on the project network to establish schedules and allocate resources  e.g. using c r i t i c a l path analysis . 
　　　or work has been concerned with the second stage of computational operations on a given project network. the preliminary stage is performed in an i n t u i t i v e   not well understood  and probably haphazard way. 
　　　it can be argued that the generation of a project network is important because of the structure it imposes on the task in hand. it forces component jobs to be isolated and necessary orderings between them considered. the project net-
work can be used not only for predictions of how the project w i l l be done  but also as a tool to aid in monitoring i t s progress and allowing bottlenecks to be identified. however  a considerable amount of effort is expended in the 
the author's present address i s : edinburgh regional computing centre  alison house  nicolson square  edinburgh  eh1bh  u.k. 
manual construction of project networks. 
　　　steps towards automating the process of specifying constituent jobs for some task and for giving the precedence relationships between jobs  have been developed for representing the data to the planning process  i.e. a description of the goals of the plan and the operations  jobs  of which it might consist  notably the representation of operator schemas to strips - fikes & nilsson  1 . the applicability of the ai work on plan formation to the generation of project networks has been restricted because most of the work has concentrated on the production of plans with t o t a l l y ordered sequences of primitive jobs rather than the networks needed for or analysis. avoiding as much unnecessary sequencing of primitive jobs as possible is important to permit effective scheduling by or techniques.. recently  sacerdoti  1a  has explored the use of a planner able to generate a plan as a p a r t i a l l y ordered network of actions. this work forms the basis of our approach to aiding a user to generate a project network for some task. sacerdoti's approach cannot be described here  so a reader unfamiliar with the work should see the reference cited above. 
1. an overview of the project 
　　　the  planning: a joint ai/or approach  project has been concerned with aiding a user in the 
process of constructing a project network. to do t h i s   as in the work of sacerdoti  we have been investigating the use of a p a r t i a l l y ordered network of actions to represent a plan  or project  at any stage of development. any ordering in the network results from the fact that either 
i  an action achieves a condition for a subsequent action  or 
i i   an action interferes with an important effect of another action and must be removed outside the effects'  range . 
range here is used to mean the time between when a goal is achieved and the point at which it was required to satisfy a condition on a later node. 
1 task formalism  tf  
　　　a formalism  tf  has been specified to enable actions in a domain to be described in a hierarchic fashion. sub-task descriptions can be written independently of their use at higher levels. the task formalism is intended to encourage the writing of modular job descriptions at various levels of d e t a i l . within the specification of each task w i l l be information about 
a  when to introduce an action in the plan 
b  the effects of an action 
c  what conditions must hold before an action can be performed 
d  how to expand an action to lower level actions. 

applications-1: tate 1 

we i l l u s t r a t e the form of tf by an  actschema  from a simple house b u i l d i n g task  the complete l i s t i n g i s given i n t a t e   1 . 
actschema decor 
pattern  decorate  
expansion 
1 action   fasten plaster and plaster board  
1 action  pour basement floor   
1 action   lay finished flooring  
1 action   finish carpentry   
1 action  sand and varnish floors   
1 action   p a i n t   
	orderings 1 	 1 	1 	 1 sequence 1 to 1 
conditions 
unsupervised  rough plumbing installed  at 1 
unsupervised  rough wiring installed  at 1 
unsupervised   a i r conditioning installed  at 1 
unsupervised  drains installed  at 1 unsupervised  plumbing finished  at 1 
supervised  plastering finished   at 1 from 1 
supervised   basement floor layed  at 1 from 1 
supervised  flooring finished  at 1 from 1 
supervised  carpentry finished  at 1 from 1 supervised   painted  at 1 from 1. 
end; 
this schema says t h a t an action node w i t h p a t t e r n   decorate  can be expanded i n t o 1 lower l e v e l a c t i o n s w i t h the f o l l o w i n g p a r t i a l o r d e r i n g : 

c o n d i t i o n s on nodes in the expansion are given t y p e s . supervised c o n d i t i o n s are made t r u e w i t h in the expansion of the task   e . g . the action  paint    1    achieves the supervised c o n d i t i o n   painted  on action 1   . unsupervised conditions are made t r u e by o t h e r experts  mainly here by an  install services  e x p e r t   . another c o n d i t i o n t y p e    usewhen   would say t h a t an actschema cont a i n i n g it should not be used unless the c o n d i t i o n was already t r u e . i t i s also p o s s i b l e t o s p e c i f y the effects on a node of t h e expansion. in the case of the decor schema these would be d e f i n e d by lower l e v e l a c t i o n s . 
1 the n o n - l i n e a r planner 	 nonlin  
       a p l a n n e r   nonlin  has been implemented which can generate plans from task d e s c r i p t i o n s given in the task formalism. it generates a plan at p r o g r e s s i v e l y g r e a t e r l e v e l s of d e t a i l and can handle i n t e r a c t i o n s between sub-plans to produce a p l a n as a p a r t i a l l y - o r d e r e d network of a c t i o n s . the a l g o r i t h m s employed in the planner have been designed so t h a t o r d e r i n g choices are avoided where 
p o s s i b l e . 	however  where a choice does become necessary a l l choice p o i n t s are kept f o r l a t e r a n a l y s i s or r e - p l a n n i n g . 	a simple c l e a r r e p r e s e n t a t i o n of the goal s t r u c t u r e 	 gost  	of a p l a n is kept 	 the c o n d i t i o n s on nodes of the network t o g e t h e r w i t h the p o i n t s where the c o n d i t i o n s are achieved . 	an example of a gost e n t r y d u r i n g a house b u i l d i n g task might be 
 supervised  scaffolding erected  true 1   w i t h value   1   . 
this would mean t h a t  scaffolding erected   had to be t r u e at node 1 and was made t r u e at node 1  nodes in a network are numbered . node 1 here w i l l be r e f e r r e d to as a   c o n t r i b u t o r   to s a t i s f y i n g the c o n d i t i o n . i t i s p o s s i b l e t o have several p o t e n t i a l c o n t r i b u t o r s . the gost thus s p e c i f i e s a set of  ranges  f o r which p a t t e r n s 
have a c e r t a i n v a l u e . 	goal s t r u c t u r e provides 
i n f o r m a t i o n about a p l a n which would be d i f f i c u l t t o e x t r a c t from the d e t a i l o f the plan i t s e l f . the use of goal s t r u c t u r e to d i r e c t search in a problem s o l v e r was f i r s t i n v e s t i g a t e d in tate 
  1 . the goal s t r u c t u r e of a p l a n not only provides i n f o r m a t i o n to a i d the search of the p l a n n e r   i t contains v a l u a b l e i n f o r m a t i o n f o r moni t o r i n g the execution of a p l a n . 
1 comparison w i t h noah 
       nonlin  as mentioned p r e v i o u s l y   is based upon the work of sacerdoti  1a  on the noah p l a n ner . we accept the concept of s a c e r d o t i ' s work: t h a t o r d e r i n g c o n s t r a i n t s should only be imposed between the a c t i o n s comprising a plan if these are necessary f o r the achievement of the o v e r a l l purpose of the p l a n . however  the noah program s t i l l had to make choices as to the order t h a t a c t i o n s were to be placed in a p l a n to c o r r e c t f o r i n t e r a c t i o n s . noah made t h i s choice in one p a r t i c u l a r way. it d i d not keep any backtrack choice points  so t h i s d e c i s i o n   once made  was i r r e v e r s i b l e . this leads to an incompleteness of the search space which can render some simple block pushing tasks unachieveable by noah  see s e c t i o n 1 of tate  1 f o r a f u l l account . nonlin is capable of c o r r e c t i n g f o r an i n t e r a c t i o n by suggesti n g two o r d e r i n g s  which are s u f f i c i e n t to ensure the incompleteness of noah mentioned above is avoided - see s e c t i o n 1 . 1   . other operations performed by noah d e t e r m i n i s t i c a l l y   i . e . w i t h o u t g e n e r a t i n g a l t e r n a t i v e courses of action  should also be considered as choice p o i n t s . two examples o f t h i s are 
a  the choice of which method to use to expand a node where a l t e r n a t i v e s e x i s t   and 
b  the d e c i s i o n to merge two nodes in a network. if such d e c i s i o n s cannot be undone some problems are unsolvable. nonlin keeps such choice p o i n t s . w e found i t i m p r a c t i c a l t o s t o r e a l l a l t e r n a t i v e s in a s i n g l e and/or network. i n s t e a d   we make choices as they become necessary but keep a l t e r n a t i v e s f o r l a t e r r e - u s e . as in noah  we expect t h a t the f i r s t choice taken should lead to a s o l u t i o n since many of the choices made by l i n e a r planners have been avoided. indeed  i f f a i l u r e occurs w i t h the f i r s t p l a n being considered  our experience i s t h a t b a c k t r a c k i n g can lead t o long searches since many consequent o r d e r i n g choices may have been made because of an i n a p p r o p r i a t e choice e a r l y in the generation of the p l a n . we are t a c k l i n g t h i s problem by the use of a  dec i s i o n graph   see d a n i e l   1 . 
noah had no way to d i s t i n g u i s h between ira-

applications-1: tate 1 

portant effects at nodes which achieved a condition on some later node and unimportant side-effects. if a node was introduced to achieve some goal for a later node  noah ensured that any effect at the introduced node was kept true up to the goal node. this can mean that no plan ordering may be found for problems to which solutions exist. nonlin distinguishes between an effect at a node which satisfies some condition at a later node and other unimportant effects. the goals structure information which nonlin keeps is used to enable nonlin to suggest the minimum of two alternative orderings to correct for interactions and to distinguish important effects. 
　　　we have given careful attention to the design of a question answering program which behaves correctly for queries in a p a r t i a l l y ordered network of nodes. this algorithm is f u l l y described later in this paper. the algorithms used in noah failed to take into account interference on the truth of some statements by the effects of actions in parallel with any path from a query node to the i n i t i a l situation in a plan network. 
1. task formalism for domain specifications 
　　　at the outset of this work the problem of straightforwardly specifying a domain to a problem solver in a hierarchic fashion was recognized as being of primary importance. we wish to allow high level definitions of a task to be given  each part of which can be expanded into lower level descriptions and so on down to some arbitrary level which the user of the program requires as output  or for which  libraries  of lower level plans are available. it should be possible for each component at lower levels to be specified in a modular way - not requiring knowledge of the exact form of other components. given any particular task  the planner must choose appropriate lower level actions so that each part of a plan can be performed successfully and so that the overall purpose of the plan is achieved. 
sub-task description - the use of condition types 
　　　when sub-tasks are being provided  the experts who produce them may know that the constituent jobs ought to be done in a particular order  or know that several jobs can be done together  in parallel . they know that certain conditions ought to hold before some jobs can proceed. for example  a carpet layer knows that before he does his job the floor boards ought to be layed  even though that i s n ' t part of his job. these conditions are not under the supervision of this expert and are the responsibility of others. they w i l l be termed unsupervised conditions. 
　　　experts also know that certain conditions must be made to hold under their supervision before their task can be completed. again  the carpet f i t t e r knows it is his responsibility to get the carpet to the s i t e   but the details of that task may be sub-contracted. such conditions w i l l be termed supervised condition. n.b. as we w i l l see these correspond to normal preconditions 
in means-end analysis driven systems such as 
strips  fikes and nilsson  1 . 
　　　there is a third type of condition which an expert may impose. conditions may be stated which must hold before this expert can be called into use at a l l . for example  consider a block stacking expert which knows how to clear blocks by moving a block on top of the block to be cleared to some other place. if a block cannot be found to be on top of the one to be cleared it is no use calling this expert at a l l . if the conditions were merely stated as a goal to be achieved before the movement of the upper block to somewhere else was done  we could get into a situation where we actually move some block onto the one to be cleared and then move it off again. such static conditions on the use of a particular ex-
pert w i l l be called usewhen conditions. usewhen conditions can be considered to be an extension to the check of relevancy of some schema which imposes them. 
　　　so  we can distinguish three different types of conditions: 
 a  	unsupervised conditions  b  	supervised conditions 
	 c  	usewhen c o n d i t i o n s 
making a d i s t i n c t i o n between them can be of great b e n e f i t in c o n t r o l l i n g the number of choice p o i n t s generated d u r i n g a search and in choosing an a l t e r n a t i v e a f t e r a f a i l u r e . 	only c o n d i t i o n s of type  b  	are allowed to cause f u r t h e r expansions to be made to the plan being generated  	i . e .   	a l l o w furt h e r experts to be c a l l e d in to plan to achieve the c o n d i t i o n s . 	this is why they correspond to normal p r e c o n d i t i o n s as s p e c i f i e d in strips. 	if expansions were allowed to achieve the unsuperv i s e d and usewhen c o n d i t i o n s   we could f i n d t h a t the net contained much redundancy which could be d i f f i c u l t t o r e s o l v e . 	i t seems b e t t e r t o a l l o cate jobs to a p p r o p r i a t e e x p e r t s . 
example of tf 
       tf is completely d e c l a r a t i v e and is based upon the operator schemas provided in strips  fikes and n i l s s o n   1 . a f u l l bnf d e s c r i p t i o n of the task formalism and f u r t h e r examples of i t s use are given in tate  1 . however  some idea of i t s form can be got from the l i s t i n g of one  actschema  from a small house b u i l d i n g domain in s e c t i o n 1. below we give a complete l i s t i n g of the block s t a c k i n g domain t r a n s l a t e d from sacerd o t i ' s  1a  soup code f o r comparison  $* is a v a r i a b l e p r e f i x   . 
actschema puton 
pattern   put $*x on top of $*y  
conditions usewhen  cleartop $ * x   at self 
usewhen   cleartop $*y   at self 
               usewhen   1 n $*x $*z   at self effects +   1 n $*x # * y   
-   cleartop # * y   -   on 	$*x 	$*z  
	+ 	  cleartop 	$*z  
vars x undef y undef z undef; 
end; 

applications-1: tate 1 

opschema makeon 
	pattern 	  on 	$*x 	$*y  
expansion 1 goal  cleartop 1 * x   1 goal  cleartop $ * y   
             1 action  put $*x on top of $ * y   orderings 1 - - -   1  1 
vars x undef y undef; 
end; 
opschema makeclear 
pattern   cleartop # * x   
expansion 1 goal  cleartop g*y   
　　　　　　　1   put #*y on top of # * z   orderings 1 	 1 
conditions usewhen   o n g*y g * x   at 1 
usewhen   cleartop 1*z  at 1 
vars x  :not table:  y undef 
           z  ;and  :not 1*x:   :not $*y:  	:   ; end; 
always  cleartop table ; 
       in the block s t a c k i n g d e s c r i p t i o n   	supervised c o n d i t i o n s are o m i t t e d . 	t f f i l l s these i n a u t o m a t i c a l l y f o r any goal nodes to the f o l l o w i n g node in an expansion. 	the puton schema does not speci f y an expansion and only gives f u r t h e r e f f e c t s and c o n d i t i o n s on the a c t i o n . 	the always s t a t e ment asserts t h a t   cleartop table   	is t r u e in any s i t u a t i o n . 	several schemas can be given which have the same pattern. 	these then being a l t e r n a t i v e methods of expanding a node w i t h the p a t t e r n . 	choices between a l t e r n a t i v e s are handled e x p l i c i t l y by the planner. 
	1. nonlin; 	the planner 
       nonlin s t a r t s w i t h a s i n g l e node r e p r e s e n t i n g the task to be planned. the s i m p l i f i e d c o n t r o l cycle is s i m i l a r to t h a t used in noah. 
1. expand a node in the network using the expansion from an a p p r o p r i a t e schema. 
1. correct f o r any i n t e r a c t i o n s i n t r o d u c e d . 
1. repeat from 1 u n t i l there are no f u r t h e r nodes to expand. 
       the system is run mostly   s t a n d - a l o n e   at p r e s e n t . however  it does support a simple i n t e r a c t i v e 'top-down' p l a n n i n g process  asking a user f o r i n f o r m a t i o n a s i t i s found t o b e l a c k i n g . 
1 . 1 representation of the network 
       the network is represented as a c o l l e c t i o n of nodes which are r e f e r r e d to v i a a s u b s c r i p t   e . g . node 1 . each node has associated w i t h it v a r ious components: 
nodenum i t s node s u b s c r i p t ' nodetype goal  action or phantom* p a t t e r n used to seek an expansion schema prenodes a l i s t of nodes l i n k e d immediately bef o r e t h i s one succnodes  a l i s t of nodes l i n k e d immediately a f t e r t h i s one nodectxt a c o n t e x t c o n t a i n i n g the e f f e c t s of t h i s node. the p a r t i a l l y ordered network of contexts is d e f i n e d by the *a phantom node is a goal node whose p a t t e r n was already t r u e i n the network a t the p o i n t where i t i s p l a c e d . 
nodectxts and the prenodes and 
succnodes 	l i n k s   parentnode the node was i n s e r t e d as a r e s u l t of the expansion of i t s parentnode nodemark a temporary marker used to record the 　　　　　　　　r e l a t i o n of t h i s node to some other node in the network 	  before   	 node    after  or  in parallel  . 	this is used d u r i n g question answering. other components can be ignored f o r the purposes of t h i s paper. 	the network thus described gives the o r d e r i n g c o n s t r a i n t s between the nodes in the network. 	1 other s t r u c t u r e s are used to r e p r e sent a p l a n   a tome and a gost. 
table of m u l t i p l e e f f e c t s 	 tome  
       as in sacerdoti  1a  we keep a record of what values are given to p a t t e r n s at each node. the tome is used d u r i n g question answering and to d e t e c t i n t e r a c t i o n s . 
goal s t r u c t u r e 	 gost  
       a c o n d i t i o n of any type on any node in a p l a n is stored in gost t o g e t h e r w i t h a l i s t of  cont r i b u t o r s   . c o n t r i b u t o r s are nodes  any one of which could make t h i s c o n d i t i o n h o l d . see section 1 f o r the method used to f i n d the c o n t r i b u t o r s f o r any p a t t e r n . 
       the goal s t r u c t u r e allows the purposes of any p a r t i c u l a r e f f e c t at any node to be determined   i f it has any . this allows i n t e r a c t i o n s to be det e c t e d and allows c o r r e c t i o n s  suggested l i n e a r i z a t i o n s   to be s e n s i t i v e to the important e f f e c t s of nodes  those which s a t i s f y some c o n d i t i o n   . unimportant e f f e c t s are t h e r e f o r e i g n o r e d . once the i n t e r a c t i n g e f f e c t s of nodes are determined and the goal s t r u c t u r e is a v a i l a b l e   simple l i n e a r i z a t i o n s can be suggested to remove the i n t e r a c t ions  as in interplan - tate 1 . 
1 expanding a node 
       a node is expanded to get more d e t a i l of how a task can be performed or a goal achieved. 
1  goal nodes a goal node is present to s t a t e t h a t the p a t t e r n of the node should be t r u e at the node. there are three ways t h i s could be achieved. 
a  if the p a t t e r n was already t r u e at t h a t p o i n t . 
b  if we could i n t r o d u c e l i n k s i n t o the n e t work to make the p a t t e r n t r u e at t h a t point. 
c  if we could make an expansion of the node which would make the p a t t e r n be t r u e . in cases  a  and   b     the goal node is r e t u r n e d w i t h a new type  phantom . a gost e n t r y w i t h a s p e c i a l c o n d i t i o n type  phantom  is made to show the c o n t r i b u t o r s which make the p a t t e r n t r u e at the node. links w i l l have been p u t in the network as a r e s u l t of   b   . 
　　　i n case   c     i t i s necessary t o f i n d a n expansion f o r the p a t t e r n and replace the goal node in the network by the expansion. one member of the l i s t of schemas which can be used to expand any p a t t e r n is chosen and a l t e r n a t i v e 
　　　ways to expand the p a t t e r n are kept as choice p o i n t s . 

a p o l   c a t   ons-1: tat* 
1 

1  action nodes an action node is present as a command to do something. no attempt is therefore made to see if i t s pattern is true or can be made true  by linking  as cases  a  and  b  for goal nodes. however  case  c  is performed exactly as for goal nodes. an expansion of the pattern is sought and used to replace the action node in the network. an action node is allowed to have a null expansion. this i n d i cates to the system that the action can be considered primitive and it should not be replaced in the network or expanded further. a shorthand tf form primitive . . . ; can be used to declare primitives. 
1 question answering in a p a r t i a l l y ordered network of contexts 
　　　current data base systems which provide a context mechanism  e.g. conniver  mcdermott and sussman  1   provide efficient f a c i l i t i e s for storing a changing data base by remembering the alterations made to an i n i t i a l situation. however  they only provide f a c i l i t i e s for the determination of the value of a pattern with respect to a given context in a f u l l y ordered tree of contexts. in a tree of contexts there is a s t r i c t time sequence along a single context path so answers are f u l l y determinate. in the partially-ordered network  answers w i l l depend on the nodes in parallel with a particular node as well as the answer got by retracing back through a network. this answer  got by retracing through the network  w i l l i t s e l f vary as nodes are linked earlier in the network. a f u l l world model kept at each context would have to be continuously updated. so  as for a tree of contexts  it is best to store only the changes to an i n i t i a l world model at each node. 
　　　we have provided a qa system for such a world model which can respond to two kinds of query:  a  does statement p have value v at node n in the current network  it could have value defini t e l y v  definitely not v  or be undecidable.  b  what links would have to be added to the network to make p have a certain value at n if it did not have this value in the given network  the system finds l i s t s of   c r i t i c a l   nodes in the network and uses these to give a truth result for requests of type  a . the l i s t s contain the i n formation needed to suggest links if a request of type  b  is given. . 
defns - p-node is a node which gives statement p a value. 
pv-node is a node which gives statement p a  value v. 
pv-node is a node which gives statement p a value other than v. 
a c r i t i c a l node for  p n  is a node which  in a possible linearization  gives a value to statement p which could be maintained up to node n. 
	n.b. 	the c r i t i c a l nodes for  p n  are 
	i  	the last p-node on each incoming branch 
to n  ignore p-nodes which are also 
predecessors of any other c r i t i c a l nodes since there may be redundant links in the network . 
i i   a l l p-nodes which are in parallel with 
n. 
qa  p v n  finds the l i s t s of c r i t i c a l p-nodes by marking the other nodes of the network with their position with respect to n and looking for tome entries for the statement p. 
p definitely has value v at node n if there is at least one c r i t i c a l pv-node before node n  and there are no c r i t i c a l pv-nodes.* p definitely does not have value v at node n if there is at least one c r i t i c a l pv-node and there are no c r i t i c a l pv-nodes. 
　　　if neither of these 1 definite cases arises then it may be possible to make p have value v at node n by making suitable links in the network if this is required. we must have at least one c r i t i c a l pv-node linked in before node n and link out a l l c r i t i c a l pv-nodes  both parallel to and before n   so that at least one path from a c r i t i c a l pv-node to n has no pv-node in  parallel with i t . since both the pv-nodes and pv-nodes involved may be contributors to conditions on later nodes  the suggestion of links must be sensitive to the goal structure. the process used to suggest compatible links for this scheme is very similar to the process which corrects for interactions in a network. the common procedure used is described next. it is provided with the l i s t s of c r i t i c a l nodes found during question answering. 
1 linking process for the network 
　　　there are 1 occasions on which it is necessary to suggest links in the network. 
a  to detect and remove interactions 
b  to make a statement have a particular value at some node. 
we use a common procedure for both these tasks. the overall idea is very simple. it relies on having the goal structure of a network available. goal structure gives a set of  ranges  for which a statement must have a particular value. a statement is given a value at a particular node and must retain this value up to a node which requires the statement as a condition. our process simply ensures that there is no overlap between any ranges for which a statement p must have value v and any ranges for which a sjtatement p must have a value other than v   i . e . v in our previous notation  . we take into account 1 facts 
i  where there are multiple contributors to a condition on any node  we are only constrained to maintain one of them as contributor  
i i   if the condition is only present to make a goal node a phantom node we can remove a l l i t s contributors if necessary and this w i l l merely force us to consider ways to achieve the goal. the detail of the operation is described in tate  1 . it emerges that once a pair of conf l i c t i n g ranges are identified it is necessary to suggest both putting a link from the end of one range to the beginning of the other and vice versa   i f this is compatible with the existing links in the network . this is needed to avoid the incompleteness mentioned in section 1. this process is a generalization of the interaction correction procedure f i r s t suggested for linear problem solvers in tate  1 . 
*the pv-nodes before node n are the  contributors . 

applications-1: tate 1 

　　　it is v i t a l that comparisons of a l l ranges specified in the goal structure are not being made continuously to check for interactions. our method ensures that only those ranges jeopardized by any operation on the network need to be checked. we outline below how this is done for the two d i f ferent uses to which the linking procedure is put. 
a  to detect and remove interactions 
　　　as effects are added to nodes in the network  they are also recorded in the table of multiple effects  tome . 	as they are added we can find if an interaction resulted by performing two checks  
i  	see if any parallel node has an opposite value for the statement  a check on the tome . 	the network w i l l already have been marked with respect to the node at which the effect was added  as a result of question answering  
i i   see if the node given the effect is in parallel with any range for which the statement must have a different value  a check on the gost . the linking procedure is only entered with any conflicting nodes or ranges  thus l i m i t i n g the computation needed. 
b  to make a statement p have a particular value v at some node n 
　　　we mentioned in section 1 that the qa routine can provide l i s t s of   c r i t i c a l   nodes which can be used to suggest links to make a statement have a particular value at some node. given these l i s t s   the operation can be performed by ensuring that there is at least one c r i t i c a l pv-node  linked-in  before node n. this may already be the case  but if not  a choice point is made and one of the c r i t i c a l pv-nodes is linked before node n. the linking procedure is then used to  link-out  a l l c r i t i c a l pv-nodes from the pv-range which establishes the condition on node n. so here again we drastically reduce the potential range conflicts which need to be compared by using the l i s t s of   c r i t i c a l   nodes provided by the question answering routine. 
1. summary 
　　　we have used recent work in ai aimed at generating plans as p a r t i a l l y ordered networks of actions to aid in project network construction. such networks are in a suitable form for the use of operations research optimization techniques. the present nonlin system is a development of noah  sacerdoti  1a . however  we have sought to improve over noah in several important ways. 
a  interactions are corrected for in a l l legal ways to avoid an incompleteness present in noah. in fact only 1 alternative orderings need be considered in order that this is achieved. 
b  interactions are corrected for only on the  important  effects of nodes  those which are required as the contributor to a condition on a later node . 
c  we use a question answering procedure which behaves correctly for queries in a p a r t i a l l y ordered network of nodes. 
d  a l l alternatives generated at choice points in 
the planner's search space are kept for backtracking. noah did not keep alternatives where it made arbitrary choices. 
　　　the provision of an explicit record of the conditions on any node together with the nodes which achieve those conditions  the goal structure of the network  has provided a simplified representation of the plan which is of benefit in d i recting the planner's search  e.g. for  a  or  b  above . more detail of the nonlin program and the procedures used can be found in tate  1 . this paper also gives examples of the use of the program. 
　　　we have developed a task formalism  tf  to enable a group of people to co-operatively describe a task to the system with the planner's aid. tf is completely declarative and this has aided us in providing the table of multiple effects  tome  and goal structure  gost . the declarative form of tf descriptions is also proving of use in the design of a  decision graph  to localize the alterations which need to be made to a network to recover from a search failure  see daniel  1 . 
　　　we are currently engaged on an investigation of project planning in the scheduling of generator maintenance in power stations. we hope to gain a better understanding of the formal channels of communication used between the planner in an organization  management who gives directives to the planner and people from whom the planner gets i n formation to enable him to plan a project. we hope to test our present ideas of how this process is performed  as modelled in nonlin and tf  on a r e a l i s t i c application in this domain. 
acknowledgements 
this research work was performed on a science 
research council grant held by professor b. meltzer  grant no. b/rg/1 . the work has benefited from discussions with gottfried eder and my coworker on the project  lesley daniel. 
