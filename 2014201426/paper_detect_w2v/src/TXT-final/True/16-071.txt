 
the markgraf karl refutation procedure  mkr-procedure  is an automated theorem prover for sorted logic  based on an extended clause graph calculus  currently under development at the university of karlsruhe. this paper describes the terminator module  a component of the mkr-procedure  which is essentially a very fast algorithm for the search for unit refutations. the terminator is used as a fast pre-theorem prover as well as an integral component of the system  and is called for different tasks during the search for a proof. 
introduction 
　　there are presently two main groups of theorem proving calculi: in those of the first kind the 
theorem prover starts with a given set of logical formulas and creates new formulas by the application 
of certain deduction rules as for example resolution  paramodulation  natural deduction rules etc  until the theorem or a refutation has been derived. 
recently new calculi like andrews' mating calculus  l  or bibel's matrix calculus  have been developed which initially do not deduce any new formulas  but only test certain path conditions ensuring satisfiability or unsatisfiability of the initial formula set. 

　　each box in fig. 1 represents a literal  a string of boxes is a clause  and complementary unifiable boxes  literals  are connected by a link. if all unifiers attached to the links in fig. 1 a  are compatible  this represents a one-level terminator situation  since it immediately allows for the derivation of the empty clause. similary fig. 1 b  represents a two-level terminator situation  a kernel which is connected to a one-level terminator situation  and fig. 1 c  a 1-level terminator situation if all unifiers are compatible. 
　　in general a connection graph is a refutation tree if: 
- every literal of a clause is attached to exactly one link. 
- the unifiers of the links are compatible. - the graph is cycle free. 
　　a unit refutable clause set s is unsatisfiable  iff there exists a refutation tree for the factored set s ! 

　　kowalski's connection graph proof procedure  in its original formulation is of the first kind: a connection graph consists of the nodes labeled by clauses in conjunctive normalform and links  connections  between complementary unifiable literals representing possible resolution steps. a deduction is performed by the selection of a link  creating the corresponding resolvent  inserting it into the graph and deleting the selected link  potentially causing further deletions of links and clauses. this proof procedure can be transformed into a calculus of the second kind: if the clause set is unit refutable  i.e. the empty clause can be derived by successive resolution steps with one-literal clauses  the clause graph has to contain a special subtree  refutation tree or terminator situation  which just represents this chain of unit resolutions. 
　　of course the knowledge of the existence of such a refutation tree is of little practical use unless a fast method for extracting it from a given graph is known. an exhaustive and unsophisticated search for such a terminator configuration is prohibitively 
expensive in large graphs  hence the task of the presented terminator algorithm is an efficient extraction of a refutation tree  if it exists  from a given clau.se graph. 
the algorithm 
　　the first attempt to implement an n-level terminator algorithm used a recursive technique: a non-
unitclause c was selected and examined for a onelevel situation. if this first test failed  the algorithm was called recursively for other nonunitclauses connected to c  trying to find a chain of unit resolutions which resolves away all literals except for that one connected to c  and the onelevel test for c was performed once again taking advantage of this new information. unfortunately the algorithm was rather inefficient because no results of former terminator calls had been stored  and therefore the same part of the clause graph had to be examined again and again. hence only the n = 1 case was within practical limits. 
   whereas the old algorithm worked from inside the refutation tree to the leaf nodes  unitclauses   our new algorithm works just in the opposite direction and stores all information it has generated for later use. we shall present the working of the algorithm using a few examples  and a full description is given in . 
g. antoniou and h. ohlbach 1 
vide the information to be able to attach all the new unitclauses to complementary literals in other clauses   or respectively other literals in the same clause  if it is selfresolving . 
   the clauses in non-units are examined several times  constantly producing new unitclauses  either until the proof is found or until a certain boundary value is exceeded. if a terminator situation is found  the datastructures we use to represent the 
units and the links allow for an immediate extraction of the refutation tree which is then used to generate an ordinary resolution proof. 

1 g. antoniou and h. ohlbach 
   the complexity of the merging algorithm is a function of the task of generating the links between unifiable terms  which can be further improved by 

   in this case it is easy to see that the unification of the corresponding terms in the table is sufficient to get a most general instance of the substitutions. in this example it is: 

   the main problem  however is the merging of two non-singleton sets a and b of substitutions. let us suppose we have two lists a and b with three ele-
ments in each list: 

   the representation is then changed a second time: equal terms occurring in different substitutions but in the same column of the t-representation are stored only once. the substitutions themselves are represented by pointers to their terms. these terms also have pointers back to the substitutions in which they occur; and from the terms of group a links to every unifiable term in the same position of group b are generated. in addition the unifiers for these single terms are attached to the links. we call this representation the p-representation. grouping the terms into lists of variables  constants  ground terms  without variables  and composed terms. then we can exploit the fact that some single-term-unifiers are trivial  variables with constants etc.  whereas others are impossible  constants with ground terms . 
   on the basis of the p-representation it is now easy to extract for a substitution a in group a all compatible ones in group b: 
for every term of o and every link attached to this term you attach the single-term-unificr corresponding to this link at every substitution of group b in which the term pointed to by the link occurs: 

all those substitutions in b with exactly p compatible single-term-unifiers are compatible with a  where p is the length of the t-representation 
 = number of variables in the non-unit clause .  in example 1:p=1.  for example 1 we obtain three compatible pairs of substitutions: 

although the generation of the single-term links is not linear in general  the algorithm shows a linear  ~n  behaviour in most practical examples  i.e. instead of n*m operations only n operations are generally performed. 

g. antoniou and h. ohlbach 1 
summary 	