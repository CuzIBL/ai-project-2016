 
we investigate interchangeability of values in 
csps  based on an approach where a single value in the domain of a variable can be treated as a combination of  sub-values . an algorithm for removing overlapping sub-values is presented. the resulting csps take less time to find all solutions and yield a more compactly-representable  but equivalent  solution set. experimental results show that  especially in loose problems with large numbers of solutions  dramatic savings in search cost are achieved. 
1 	introduction 
while most csp algorithm research is based on the assumption that only one solution to a csp need be found  the central idea in this paper is motivated by a requirement of certain interactive constraint-based applications: sometimes  before making his next interactive decision  the user needs to know all solutions to a sub-csp. thus  we need an approach which will reduce the search cost of finding all solutions to a  sub csp and which will enable a more compact representation of the complete solution set. neighbourhood interchangeability  ni   freuder  1  of domain values suggests itself  since merging ni values in a variable domain reduces both thrashing during search and the complexity of enumerating the solution set. without loss of generality  we restrict our attention here to binary csps  where the constraints involve two variables. 
　our idea is based on a new approach to ni. normally  each domain value is treated as atomic. our idea is to  split the atom  - a domain value can be split into several  sub-values  so that interchangeable fragments from other values can then be merged to avoid duplicate search effort during the solving process. 
　when the values in a domain have been split into fragments  interchangeable fragments of different values can be merged. figure  i  depicts a constraint network while  ii  shows the microstructure. figure  iii  shows the result of splitting and merging value fragments  resulting in smaller domains for x and y. 
　the approach subsumes ni  as can be seen in x where b and c  which are ni  are merged; similarly  d and g in y 

are merged because they  also  are ni. that the approach surpasses ni can be seen by considering values e and / in y. values e and / are not ni because  while both e and / support  1  h  and  c  h   / also supports  1  i  and  c  i . however  we can split / into two fragments  one of which supports  1  h  and  c  h   while the other supports  1  i  and  c  i . the first fragment can be merged with e and the second can remain isolated. 
1 background and definitions 
we will use a cross-product representation  cpr   hubbe and 
freuder  1  to denote sets of solutions to the star-graph csps that we must consider when transforming variable domains. for example  consider the star-graph centred at y in figure  ii . the set of solutions to this star-graph in which the centre variable  y  has the value can be represented by the following cpr:  
　we define an operator  called  commerge   commonality extraction and merge   on two cpr sets as follows. the operator extracts  from the two cpr sets  those solutions which have common values for the leaf variables and merges the values for the centre variable. to compute the commerge of two cpr sets  the sets of values for the leaf variables are combined using normal set intersection but the sets of values for the centre variable are combined using normal set union. 
we denote the commerge operator as 	thus  for example  
we define the  communion  of two cprs as follows. two 
cprs can be communioned only if the cprs differ from each other in at most one of the cross-multiplied sets  which cannot be the set for the centre variable. in the communion  all the common cross-multiplied sets are unchanged  but the differing leaf sets are subjected to ordinary set union. we denote the communion operator as for example  the two cprs can be communioned be-
1 	poster papers cause they differ only in the right-most subsets which do not correspond to the centre variable; the communion of these two cprs is  
　we also define a new form of subtraction  the  comminus  of two cprs  as follows. one cpr can be comminused from another only if they have a common set for the centre variable. given that provision  the comminus of two cprs  denoted by  is the same as subtraction. note that the operator can result in a set of cprs. consider  for example  the result of subtracting  which contains only one solution to a star-graph  from  which contains four solutions . the difference between these two cprs contains 

1 	transforming csps 
the procedure for transforming the domain of a single variable is stated in pseudocode below. 

　the size of r e s u l t could be very large if there are many fragments of cprs  making it unlikely that the resulting cprs can be compressed so that the resulting domain is smaller than the original. therefore we impose an upper 
bound on the size of if exceeds the upper bound  transformation of the variable's domain is aborted. this cutoff heuristic reduces the transformation time  making the algorithm practical even though the worst-case time complexity is exponential. 
　the overall transformation process involves transforming each variable domain  one by one  in some order. the order in which variables are processed affects the result. as a heuristic  we have chosen never to accept the result of transforming a variable's domain if the result of the transformation is that the number of members in the domain is increased  and choose the variable whose transformation leads to the maximum domain size reduction. 
1 convergence 
we only need to transform the domain of each variable once due to the following theorem: 

theorem 1 if  after the domain of variable v  has been transformed  the domain of a neighbouring variable  v1  is also transformed  any subsequent attempt to transform the domain ofv1 will result in no change. 
1 	experimental results 
we tested the algorithm over randomly generated csps with eight variables and six values in each domain  varying density from 1 to 1 with 1 increment step  while tightness ranges from 1 to 1 with the same increment. for each parameter point  the number of constraint checks required to compute all solutions and the number of representations needed to express these solutions are evaluated  averaged over 1 problem instances. the solver is based on mac-1 with dom/deg variable ordering. the upper bound of the r e s u l t is ten times the size of the variable's domain. 
　for the random problem generator  we use model b where density and tightness are fraction instead of probability. since the transformation process requires arc-consistent csps  wc also ensure that every problem is arc-consistent by linking each value to at least one value for every constraint in order to guarantee support. 
　the results are shown in the above graph. while the transformation cannot guarantee to reduce the number of constraint checks needed to compute all solutions to a csp  it can produce huge savings. from the graph  we can see the method works best for problems with low density or low tightness  as either case will lead to a lot of cpr combination. in these cases the work needed for transformed csps is less than 1% of the work needed for untransformed csps. in those problems where the transformation does not produce large savings  its effect is usually harmless. indeed  in the worst case we have seen in the experimental data  which occurred only at a few data points  the number of extra constraint checks for a transformed csp is around 1 % more than for the untransformed csp. 
