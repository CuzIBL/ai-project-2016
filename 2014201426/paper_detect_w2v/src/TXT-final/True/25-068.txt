 
	the system 	we 	have 	developed  	sycojet  
automatically builds test cases making use of specific expert knowledge. in our first version  it uses the internal structure of the knowledge base to be tested  and implicitly assumes that the inference engine derives all that can be derived from the knowledge base and the problem data. here we are concerned with how to take into account  in a second version of sycojet  the actual inference engine control strategy. this control strategy  included in the inference engine  is not in general explicited in a form accessible to the computer. in this paper  we investigate to what extent the knowledge of the control strategy of the system being tested can be used to improve the  quality  of the test cases generated by sycojet. 
1 introduction 
kbs-testing is a recent field of study  morell 1  miller 
1  ayel 1  gupta 1 . some execution monitoring tools  like witness  valid  1   provide information about the kbs running on a given problem. other tools exist to help in the evaluation of the kbs results  such as controller  valid  1  and vortex  cross et al  1 .sycojet is a different type of tool: it automatically builds test cases for a kbs; these test cases are then used to study the behaviour of the kbs  its performance and many other validation topics. other test case generators are described in  zlatareva et a/  1. 
to build test cases  sycojet first analyses the kb itself. 
this analysis is based on building atms-like labels; these labels arc an adaptation of de kleer's  de kleer  1 . 
　sycojet uses specific expert knowledge in order to propose pertinent test cases. to reinforce the pertinence of the test itself  sycojet may use different coverage criteria  freely chosen by the user. when the kbs inference engine exhaustively derives everything that can be derived  the required level of the chosen criteria will be reached when all the selected test cases have been run with the kbs. thus  when sycojet proposes a set of test cases  the level of the chosen criteria will be reached only with this hypothesis concerning kbs strategy. 
　if the kbs inference strategy can effectively be used in test case generation  the test cases will be of better  quality . moreover  it will ensure that the required level of the chosen 
ruddy lelouche 
departement d'informatique universite laval quebec g1p1 canada 
criteria will actually be reached when running the test cases with the kbs. in this paper  we propose two different approaches in order to account for the kbs strategy when selecting the test cases. 
the first section presents the basic principles behind 
sycojet  vignollet  1 . it shows why labels might be used to exhaustively  summarize  the deduction capabilities of a knowledge base  kb   and how these labels can be used in order to define test cases. finally  section 1 demonstrates how some knowledge of the inference engine strategy can be useful to guide the construction of test cases respecting the assigned criteria  and presents two approaches to taking this strategy into account  depending on whether it is formally described and accessible or not 
1 construction of test cases 
in this paper  we present simplified label building for kbss using a propositional formalism. however  the method can be generalized to kbss using a first order logic formalism  as can be seen in  ayel et al  1 . 
1 kbs formalism 
each kbs considered in this paper includes: 
  a factual part describing the domain  or domain fact base    a factual part describing the problem that the kbs has to solve  or problem fact base  
  a deductive part describing the expertise required to solve a problem. 
definitions  
  a fact is a proposition. 
  a fact is a problem fact if it may appear in a problem fact base. 
  the deductive part of the kbs is a set of monotonic rules 
of the form 
if condition part then consequent part1 which can only assert new facts. 
  a fact is terminal if it appears in a consequent part of a 
rule and if it does not appear in the condition part of any rule. 

1.1 test case building method 
　to build the test cases  the first step consists in constructing the deduction labels for each terminal fact of the kb as described above. in this way  we obtain all realistic problem fact bases of the kbs. 
　as a second step  the test cases are chosen from this set of problem fact bases. this choice is guided by the quality criteria retained but we still have to determine the contribution of each deduction environment to a given coverage criterion. 
definitions  
  the contribution of an environment to a coverage criterion is the number of kb components to be covered according to that criterion that have not yet been counted in the set of test cases under development 
  the contribution of a terminal fact to a coverage criterion is the maximum contribution of all the deduction environments in its deduction label. 
each newly chosen test case will be one for which the environment from which it is extracted yields a contribution that is maximal. 
example. - using the example in 1  if the quality criterion retained is rule coverage  the first deduction environment chosen will be  because it maximizes the number of rules fired. the corresponding test case is the set of problem facts in this environment  i. e. the set 
1. 	using inference engine strategy: two approaches 
there are many different possible strategies in the control mechanism of a kbs. j.p. laurent in  laurent 1j gives a general presentation  and we shall certainly not deal with all of them here. however  we can start investigating this field in a general manner. 
　since the assumption behind sycojet  i.e. that the kbs being tested exhaustively derives all that can be derived  vignollet  1   does not hold in general  it might be of interest to investigate the situations where the actual strategy can be used to prune the search trees while building deduction environments. in other words  it might not be necessary to construct environments that will never be used by the actual system when it is run. however  this possibility is kept as a longer term approach  and the remainder of this paper deals exclusively with what can be done when exhaustively constructing the kb labels  as done in sycojet. 
　in order to take into account the inference engine strategy when deriving test cases from the computed labels  one can distinguish two different approaches. in the first  1   the strategy is known  formally expressed  and can be exploited; in such a case it may be taken into account in the choice of test cases  as is shown with a particular strategy. in the second  1   the strategy is not known  or cannot be automatically exploited  and we use a more empirical approach. 
1 	knowledge base technology 
1 known and exploitable strategy 
the case wherein the inference engine strategy is known is intellectually more challenging  because it could possibly lead to some kind of automatic generation  i.e.  intelligent selection   of actual test cases. however  there are few chances indeed that it can actually be of general use  i.e. for all existing strategies. 
　still  for particular inference engine strategies  strategyspecific knowledge can sometimes be used and lead to interesting results independent from the domain knowledge or from the validation knowledge itself. that allows us to go beyond the sycojet case where all possible deductible facts are derived. such is the case  for example  when the conflicts are solved using weights on the deduction elements  e.g. rules  and the system stops as soon as the first terminal fact is reached  as we shall now demonstrate. 
1.1 strategy hypotheses 
　in order to simplify our discussion  we still assume that the kb deduction formalism is of the propositional logic type. moreover  we now also assume that we deal with a kbs where: 
  each rule is marked with some interest coefficient  or weight   and any conflict is solved by always firing the rule with the highest coefficient  note that the multiple maximum case is only theoretic  since either it is solved by executing some sub-procedure based on another condition  or the actual conflict resolution is implementation dependent1; we therefore assume that there is always only one highest coefficient rule1 ; 
  the system stops as soon as a terminal fact has been reached. 
　incidentally  let us remark that  under these assumptions  some satisfaction criteria may prove to be unattainable. 
　for example  if there are two rules in the kb with the same fact s  as premise s   the rule with the lower coefficient will never be fired. therefore a test criterion specifying  execute every rule at least once  cannot be met. the same holds true if the rule with the higher coefficient has the form 
 where sp1 is the set of premise facts and sci is the set of derived facts   and the rule with the lower coefficient has the form  for some non empty set of facts sf. with the test criterion above  in order to eliminate this problem  we would have to verify that the premise set of facts of any rule is never included in the premise set of facts of another rule with a lower coefficient.1  but this can be done automatically . 
1.1 a first result: potentially conflicting environments 
lemma. - under the strategy hypotheses in 1.1  when executing the kbs  the problem facts of an environment ex might lead to using another environment ey』 ex only if the problem facts of ey arc included in those of ex. 
actually  if no sub-procedure exists  the first - or the last rule with the highest coefficient will be fired  depending on the implementation. 
note that this assumption cannot be automatically verified. 
the above conclusion shows that  in spite of the distinction traditionally made between verification and testing  the two aspects may be inter-related. 

1 example 
this example illustrates our method used to build test cases with a prepositional formalism. let us assume that we have the following rule base: 

where the problem facts are italicized and the terminal facts are underlined1. 
　then  for each terminal fact tf  f1 and f1   we build the problem fact bases which can lead to tf deduction. furthermore to build test cases we need to associate to each problem fact base the rules used to deduce tf from it. the couple of the problem fact base and the rule list is called the deduction environment of tf. all the deduction environments of a terminal fact constitute its deduction label. for our example  we have: 

　if the user's objective is to use 1% of the rules when running test cases  we propose one test case which is: {f1  f1  f1  f1}. in this case  rules r1  r1 and r1 are supposed to be fired when the kbs runs. however  if the kbs inference engine uses a specific strategy  these rules might not be fired. 
　in the following sections we present the formalized method to build the deduction label of a terminal fact and to build test cases taking into account quality criteria. 
1 building atms-like labels 
the objective of label building is to make explicit all the problems  i.e. all the problem fact bases  through which the kb terminal facts can be derived. our building method is a variation of de kleer's atms labels  de kleer  1 ; in fact  we adapt the atms concepts to our problem by defining the deduction environments and the deduction label of a terminal fact. 
definitions. 
  a deduction environment of a terminal fact tf is a couple of the form where spf is a set of problem facts and sr a minimal set of rules used to derive tf from spf1. 
  a set of problem facts is also called a problem fact base  
  the deduction label of a terminal fact tf is the set of all its deduction environments. 
note that a derivable fact may also be a problem fact. 
the definitions of these special facts are given in the next section. 
note that spf has also to be sufficiently large to allow the deduction of tf  but such that withdrawing any facts from spf would no longer allow the deduction of tf. in other words  it constitutes a minimal problem fact base. 
　each terminal fact may have several deduction environments; the set of these environments is then the deduction label of the terminal fact 
　to construct the deduction label of a terminal fact tf  we have to build the search tree of tf  by backward chaining. we thus obtain all the potential problem fact bases allowing deduction of tf. 
　each of these potential problem fact bases docs not necessarily correspond to a real problem fact base. thus  the set of all real problem fact bases is included in the set of all potential problem fact bases. in order to refine this last set  the domain expert is asked to define constraints to reinforce the realism of its elements  in order to build a set of realistic problems1. we will not develop this aspect here but the reader may refer to  ayel & vignollet 1 . in the following  we suppose that the only deduction environments that are built are those containing a realistic problem fact base. 
　the next section shows how these deduction labels can be used to build pertinent test cases  i.e. test cases that detect a maximum number of errors  as implemented in sycojet. 
1 the construction 
the test cases are provided to verify correct system behaviour. whenever the results obtained by the kbs do not fit the results expected by the expert the presence of at least one error has been detected in tne kb. then the debugging task  under the expert's control  is responsible for locating and correcting this error  or these errors ; this last task is not our topic here. 
1.1 test quality criteria 
　as long as the kbs results are accepted by the expert  testing goes on  i.e. adequate test cases are fed into the system  until the latter is believed to have been sufficiently tested. this decision can be difficult to make and therefore  in order to help in decision-making  we propose using quality criteria. 
in general  these quality criteria are coverage criteria such as: 
  coverage of facts  like problem facts  terminal facts  etc.;   coverage of rules  or of groups of rules; 
  coverage of paths1. 
　note that coverage is not necessarily exhaustive  and that it may be of a mixed nature  e.g. coverage of 1% of the rules and 1% of the terminal facts . in any case  the retained criteria can then be used: 
  to chose the test cases  
  to assess the quality of any test case  according to the components of the kb that will be used during the execution of that test case by the kbs. 
the real problems are included in the realistic ones because we cannot be sure that the expert's constraints are sufficient to guaranty the realism of the askable fact bases. these constraints may greatly reduce the set of potential problem fact bases  but in general yield only a superset of real problems ; it is this superset that we call the set of realistic problems. 
at this stage of our research  we consider only monotonic kbss. that means that path coverage is the same as groups of rules coverage. 
	vignollet and lelouche 	1 

proof. - the proof is trivial considering the completeness of several rules can be fired  the one with the highest coefficient the labels. 	is fired first . 
facts needed to use the environment ey  executing the system with spfx will successively fire rules from srx and rules from sry  and possibly some other rules coming from other deduction environments  in a given order  according to the conflict resolution strategy given above  i.e. whenever 
1 	knowledge base technology 

the reasons are that: 

and  by the theorem above  e1 is used rather than e1  the conflict is effective . thus {f1  f1  f1  f1  should not be proposed as a test case since it would not yield its  theoretical  contribution to the quality criteria  rule coverage for instance . instead  one should look for another environment  i.e. the one giving the best theoretical contribution among the environments not already selected or marked as unattainable. 
　now suppose that the coefficient of r1 is 1 rather than 1  leaving the other coefficients unchanged. then the rules will be fired in the order r1  r1  r1  r1  and the system stops after reaching f1  i.e. after using e1. here: 

and  by the theorem above  e1 is used as expected and not e1  the conflict is not effective . 
　again note the generality of the above lemma and theorem: cither can be indistinctly applied for rule coverage or for terminal fact coverage  as has been shown above for the lemma 
　also note that  in the above theorem  nothing is asserted in a situation where several environments ey potentially conflict with a given environment ex. this is why the corollary below deals precisely with this point. 
1.1 using this result for choosing test cases. 
　as explained in 1  all test cases are chosen inside the set of realistic problem fact bases. at each choice point  i.e. whenever sycojet is to add a new test case to the set under construction  it selects the deduction environment with the maximal contribution. as already pointed out  this choice is made assuming that the kbs derives all that it can from a problem fact base. 
　however  when a test case is run by a kbs using a non exhaustive deduction strategy  the system might use a different environment  and therefore take a different derivation path than the one expected from the chosen environment  or reach a different terminal fact than the one corresponding to the chosen environment  etc. since this may happen at each choice point  the overall result might show a large gap between the criteria level actually reached in executing the set of test cases with the kbs and the sycojet-predicted level for the same criteria. 
　indeed  when choosing a test case  we must know whether the environment it comes from will be the one actually used when running it on the system. thus at each stage of test case building  we have to choose the environment which will actually be used and with the highest possible contribution. 
　if the kbs uses rule weights and stops at the first terminal fact encountered  strategy hypotheses 1.1   the lemma in 1 shows that  if sycojet selects an environment e  a degradation can only come from an environment potentially conflicting with e. moreover  the theorem in 1.1 gives a 
　necessary and sufficient condition for a potentially conflicting environment to yield an actual conflict  i.e. to prevent e from being actually used when running the system. 
　to be sure that a selected environment e would be effectively used in a running session  we have to find all environments actually conflicting with e. the following corollary to the theorem in 1 allows to decide if the selected environment e should be used. 
corollary. 	- 	let  be a deduction 
environment. let 

be the set of all deduction environments potentially conflicting with e. then  under the strategy hypotheses 1  
executing the kbs with spf as problem facts will use sr iff  for every 
proof. - if the system running spf actually uses e  then every environment ej potentially conflicting with e is not in actual conflict  and therefore  by the theorem in 1.1. 
conversely  if for every potentially conflicting with holds  then by the theorem in 
1 none of the ei will be used. since no other environment is potentially conflicting with e  e will be used.   
this corollary shows that if  for any deduction environment selected by sycojet  there exists one deduction environment 	potentially conflicting with e and such that mi   m  then we should not use spf as the next test case to be included in the set of test cases under construction. in other words  the existence of such an ej implies that e  which has been selected because of its potential contribution to the retained quality criteria  cannot actually yield this  theoretical  contribution to these criteria when running the system. 
1 the strategy is not known  or not exploitable 
the second approach deals with the situations in which nothing particular is known about the kbs inference strategy. in those situations  even though the inference engine strategy cannot be exploited as such  we still have some quality criteria  see 1.1  for defining a set of  good   or of  the best   test cases  with respect to these criteria. we then may define two procedures as follows. 
　the first procedure is an algorithm defined over the existing kb: 
1＜ compute the deduction labels as shown in section 1. 
1＜ define the criteria satisfaction indices  e.g. the various coverage counters  according to the retained test criteria and initialize them. 
1＜ while the criteria satisfaction indices are not satisfied and there are pertinent environments available in the labels: 
  choose a pertinent environment in the computed deduction labels  using the underlying test criteria as a guide for this choice  using the sycojet mechanism for choosing a test case . 
  define a test case from this environment  and execute it on the kbs. 
	vignollet and lelouche 	1 
  if the results are correct  i. e. agree with the expert's opinion or conclusion  then: 
- analyze the execution traces to update the criteria satisfaction indices. 
- mark any environment s  in the labels which become unnecessary  i.e. executing the corresponding test would not improve the criteria satisfaction indices . 
else  the expert disagree with the obtained results  
end the procedure  there is something wrong in the kb; procedure 1 must be performed next . 
  end while. 
1＜ if the criteria satisfaction indices arc satisfied then 
　　　the kbs has been successfully tested {the satisfaction criteria are met . 
else  there is no pertinent environment left in the labels  
　　　testing the kbs is impossible with respect to the defined test criteria. 
end of first procedure  over the existing kb . 
the second procedure takes place whenever the existing 
kb proves erroneous somewhere  i.e. when a test case uncovers an erroneous behavior of the kbs. it consists in correcting the kb with the help of the domain expert. this correction cannot be formalized without the adequate domain knowledge  and is therefore outside the scope of this article. once the kb has been modified  the first procedure above must be run again on the kbs with the new kb. 
conclusion 
in the area of test case generation for knowledge-based systems  sycojet is an automatic test case building system which has given significant results on several kbss1. the method it uses in this test case construction consists first in building the deduction label of each terminal fact of the knowledge base. these labels provide the set of all potential problem fact bases. then the actual test cases are extracted from this set  according to the coverage criteria chosen by the user. sycojet is operational for kbss using a first order formalism  ayel et al  1 . however  it makes the hypothesis that the inference engine of the kbs deduces all it can. if that is not the case  the criteria level obtained in executing the set of test cases proposed by sycojet might be significantly lower than the sycojet-predicted level for the same criteria. thus  taking into account the inference engine strategy will lead to better test case generation. 
　in this paper  we have proposed two approaches which take the inference engine strategy into account differently. 
　in the first approach  we suppose that the strategy is known and that it is used to help choose the test cases. this approach cannot actually concern all existing expressible strategies  but we have shown that it can work for some particular strategies. indeed  we have established some results for a kbs which uses rule weights and stops at the first terminal fact encountered. first  we have introduced the notion of a deduction environment that potentially conflicts with another. we have exhibited and proven a lemma which 
 one of them  called gibus  comes from the european spatial agency  in the scope of viva  esprit iii project  . 
1 	knowledge base technology 
shows that if an environment e is selected  a degradation can only come from an environment potentially conflicting with e. moreover  we have established a theorem which gives a necessary and sufficient condition for a potentially conflicting environment to yield an actual conflict  i.e. to prevent e from being used when running the system. these results can lead to more intelligent test case selection. 
　the second approach to the choice of test cases can always be taken  in particular when the strategy is not explicitly known  or when it is not exploitable. it is a more pragmatic one: a test case will be chosen according to the level of the required criteria already reached by the execution of previous test cases. 
　the first approach is intellectually more satisfactory but very limited in scope. our study has shown that  even for a kbs with a well defined but simple strategy  it requires a specific  fairly complex method. 
　one potentially interesting path for further research could be to examine some other strategies  and investigate whether strategy-specific procedures can be established. another one would be to try to adequately use the strategy-specific knowledge to prune the search trees used in deduction label construction. 
