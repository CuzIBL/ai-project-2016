 
fages showed that if a program is tight  then every propositional model of its completion is also its stable model. recently  babovich  erdem  and lifschitz generalized fages' result  and showed that this is also true if the program is tight on the given model of the completion. as it turned out  this is quite a general result. among the commonly known benchmark domains  only niemelii's normal logic program encoding of the hamiltonian circuit  hc  problem does not have this property. in this paper  we propose a new normal logic program for solving the hc problem  and show that the program is tight on every model of its completion. experimental results showed that for many graphs  this new encoding improves the performance of both smodels and assat chaff1   especially of the latter system which is based on the sat solver chaff1. we also propose a notion of inherently tight logic programs and show that for any program  it is inherently tight iff all its completion models are stable models. we then propose a polynomial transformation from a logic programs to one that is inherently tight  thus providing a reduction of stable model semantics to program completion semantics and sat. 
1 	introduction 
it is well-known that a stable model of a logic program is also a logical model of the completion of the logic program  but the converse is not true in general. however  fages   1 . showed that if the program is tight  i.e. it has no positive loops   then the converse is also true. recently  babovich  erdem  and lifschitz 1  generalized fages' result  and showed that the converse is also true if the program is tight on the given model of the completion. as it turned out  this is quite a general result as many interesting logic programs are indeed tight on every model of their completions. in fact  among the commonly known benchmark domains  only niemelii's normal logic program encoding of the hamiltonian circuit  hc  problem  niemela  
corresponding author 
nonmonotonic reasoning 
1  is not tight on its completion models. this leads naturally to the question: is there a normal logic program encoding of the hc problem that is tight on every model of its completion  at first glance  a positive answer seems easily followed from some known results. for instance  using any of the known transformation from logic programs to propositional theories  e.g.  ben-eliyahu and dechter  1; lin and zhao  1    one can translate a program to a set of clauses  and then back to a logic program that is tight  on every model of the program's completion . while this is certainly true  it is not really what we wanted. given a graph  a logic program for solving the hc problem for the graph normally should have two parts - a set of facts that defines the graph in terms of vertices and edges  and a set of general rules. while the above reasoning shows that it follows from the known results that for any given graph  a tight logic program can be found for solving the hc problem on the graph  it does not follow  although it is true as we shall show in this paper  that there is a set of general rules such that for any given graph  the logic program consisting of the set of general rules and the set of facts encoding the graph is always tight. 
　by modifying niemela's encoding  we propose a new normal logic program for solving the hc problem  and show that the program is tight on every model of its completion. compared with niemelii's encoding  our new encoding yields much larger programs - about twice more atoms and rules. surprisingly  despite its larger size  for both smodels  simons  1  and assat  lin and zhao  1   the new encoding performs better1 on many randomly generated graphs. for assat  it also performs better on complete graphs  which are hard for smodels and assat partly because of the sizes of the programs corresponding to these graphs. however  our new encoding is slower than niemelii's on some of the hand-coded hard graphs in  lin and zhao  1   which are constructed by taking a few copies of a graph and connecting these copies by some arcs. while these experimental results are mixed  they do suggest that it is worthwhile to try to encode a problem as a logic program whose stable models are the same as its completion models. 
this motivated us to investigate a sufficient and necessary 
　　all performances in this paper are about computing one stable model of a program. 
condition for a completion model to be a stable model. to this end  we generalize the notion of tight on a set of atoms into that of inherently tight on a set of atoms. specifically  we call a program p inherently tight on a set s of atoms if there is a subprogram such that s is a stable model of q and q is tight on s. we show that for any program  a completion model of this program is also its stable model iff the program is inherently tight on the model. 
　we then propose a polynomial transformation from any logic program to one that is inherently tight on all its completion models. this provides a reduction of stable model semantics to completion semantics and sat. compared to the one in  ben-eliyahu and dechter  1 which needs ri1 extra atoms and n1 new rules  and the one in  lin and zhao  1  which docs not introduce any new atom but in the worst case may add an exponential number of new rules  clauses   our transformation introduces  extra atoms and 
 extra rules in the worst case  where n is the num-
ber of atoms in the original program and m the number of rules. we have observed that in all of the benchmark logic programs  the number of rules in a program is smaller than n1. one useful feature of our transformation is that it is modular w.r.t adding new facts. 
　this paper is organized as follows. section 1 introduces some logical preliminaries. section 1 studies an encoding of the hc problem that is tight on every completion model of the program  and reports some experimental results using smodels and assat chaff1 . section 1 proposes a notion of inherent tightness and a translation from a logic program to one that is inherently tight. section 1 concludes this paper. due to space limitations  proofs  if given  are only sketched. 
1 	logical preliminaries 
logic programs a normal logic program is a set of rules of the following form: 

where a is either an atom or empty  1's  and c's are atoms. when a is empty  then the rule is a constraint  and when in = u = 1 and a is an atom  then the rule is a fact  asserting that a is true. given a rule r  in the following  we denote by hrad r  its head atom  and pos{r  and ncg r  the set of positive body literals and the set of atoms that occur under not in the body of rule r  respectively. for any set x of atoms  w e denote the s e y not x . s o a rule r can be represented as 

given a program p  in the following  we let atorn p  be the set of atoms in p. 
program completion given a logic program p  its completion  cornp p  is the union of the constraints in p and the clark completion  clark    of p with constraints deleted. in other words  it consists of the following sentences: 
  for any atom a  if are all the rules about a in p  then is in cornp p . 
here we abuse the notation and write g{ both as the 
body of a rule and a disjunct in a formula. its intended meaning is that when we write a body g in a formula  it stands for true if g is empty  it is the conjunction of literals in g with not replaced by  otherwise. notice here that when n - 1  the equivalence for a becomes a = false; 
  if  g is a constraint in p  then g is in comp p . 
　the stable model semantics given a logic program p without constraints  and a set s of atoms  the gelfondlifschitz transformation of p on 1  written as ps is obtained from p as follows: 
  for each atom q and any rule r in p  if q  necj r  and q  s  then delete the literal not q from the body of rule r. 
  in the resulted set of rules  delete all those rules that still contain a negative literal in their bodies  i.e.  for any rule  if there is a  such that  then delete this rule r. 
　it is clear that for any set of atoms 1  p$ is a set of rules without any negative literals. thus ps has a unique minimal model  which is the same as the set of atoms that can be derived from the program by resolution when rules are interpreted as implications. we denote this set as cons{p$ . a set s is a stable model igelfond and lifschitz  1  of p if and only if s = cons ps . 
　now let p be a program that may have constraints  and p' the result of deleting all constraints in p. then a set of atoms is a stable model of p iff it is a stable model of p' and satisfies all the constraints in p. 
dependency graph the predicate dependency graph  apt et ai  1 of a logic program p is a directed graph with signed edges. the vertices are atoms mentioned in p. there is a directed positive  resp. negative  edge from vertex to q if there is a rule r in p such that hcad r  - q and p pos r   resp. head r  - q and p  neg r  . informally  a positive  resp. negative  edge from ;; to q means that q depends positively  resp. negatively  on p. 
　for any two atoms and in p  there is a positive path from to if and only if there is a path from vertex  to vertex in the dependence graph gp and the path has no negative edges. 
1 tight logic programs and hamiltonian circuit problem 
a program p is tight llifschitz  1  if there exists a level mapping 
 1  
inp  
		 1  
here a level mapping is a function from literals to ordinals. 
　it is not hard to see that a program is tight iff its dependency graph has no positive cycles. for these programs  the program completion semantics under classical logic coincides with the stable model semantics. that is  if a program is tight  then a set of atoms is its stable model iff it is a classical propositional 

1 	nonmonotonic reasoning 

model of its completion  fages  1 . recently  babovich  erdcm  & lifschitz  generalized this result to  tight on a set of literals  by modifying the mapping  to a partial level mapping with respect to a set of literals. formally  a program p is tight on a set s of atoms if there exists a partial level mapping with the domain s such that  for every rule  1  in 
 1  
they showed that if a normal logic program is tight on a model of its completion  then this model is also a stable model. as a result  if the logic program is tight or tight on all models of its completion  to find stable models of this logic program  we can reduce it to sat by computing its completion. as it turned out  this is quite a general result as many interesting logic programs  including all constraint satisfaction problems and planning problems are indeed tight on every model of their completions. in fact  among the commonly known benchmark domains  only niemela's normal logic program encoding of the hamiltonian circuit  hc  problem  niemela  1  is not always tight on its completion models. 
　as the experimental results reported in  babovich et ah  1; huang et al  1; lin and zhao  1  showed  for problems like graph coloring and blocks world planning whose encodings in logic programs are either tight or tight on their completion models  computing a stable model of these programs using the state of art sat solvers on their completions is a lot faster than smodels  which is currently the state of art specialized stable model generator for normal logic programs. for hc problems  while ass at still outperforms smodels  the improvements are not as great as in other problems. one of the reasons is that when a completion model may not be a stable model  assat needs to repeatedly call a sat solver  and the total computation time is directly proportional to the number of times a sat solver is called. so to see if this was due to the inherent difficulty of the hc problem or because of the particularity of niemela's encoding  niemela  1   we came up with an encoding of the hc problem that is always tight on the completion models. 
　to motivate our new encoding  let's first look at niemela's given below: 

as one can see  rules  1  -  1  guess some paths with the property that for every vertex x  if x has at least one outgoing arcs  then exactly one of these arcs is chosen to be in the paths  and similarly if x has at least one incoming arcs  then exactly one is chosen to be in the paths. the 
nonmonotonic reasoning 
rest of the rules then make sure  especially by asserting that reached x  must be true for every vertex x  that these paths are in fact a single simple cycle that covers the whole graph. when grounded  this program is not tight because rule  1  would create cycles among reached x  atoms. 
　another way of solving the problem is to first guess some paths that must go through every vertex exactly once  and then make sure that when we do not count the outgoing arc from the starting vertex  these paths are in fact a single path that does not contain any cycles. this is the idea behind our program in figure 1 for solving the hc problem: 

figure 1: an encoding of the hc problem that is always tight on every model of its completion 
notice that rules  1  -  1  are the same as  1  -  1 ; rules 
 1  -  1  are needed to make sure that the chosen path must go through each vertex exactly once for the cases when a vertex has no outgoing  incoming  arcs in the graph; rules  1  -  1  use the binary predicate rcached x  y  to make sure that when we delete the chosen outgoing arc from the starting vertex  the chosen path has no cycles  thus must be a single path. formally  it can be shown that the program correctly solves the hc problem and is always tight on every completion model. 
proposition 1 let  be a graph. let p be the union of the rules in figure i and facts represented by the graph in terms of vertex x  and are x  y . if m is a stable model of p  then atoms of the form  in m correspond to an hc ofg. furthermore  p is tight on every model of its completion. 
　given a graph  compared with niemela's encoding  ours yields a larger program because reached in our program is a binary predicate. to evaluate the performance of this program  we tried smodels  version 1  and assat chaff1   version 1 with its simplification feature activated  on the same set of graphs1 used in  lin and zhao  
1
   these graphs can be downloaded from assat's web site http://www.cs.ust.hk/assat. 

1   which divided it into three categories: randomly generated graphs  hand-coded hard instances  and complete graphs. our experiments were done on sun ultra 1 machines with 1m memory running solaris. the times given below are in cpu seconds as reported by unix  time  command  and include the times for running iparse for grounding the input programs. for randomly generated graphs  see table 1   ass at clearly performs much better using our new encoding; smodels also seemed to behave better using the new encoding as the run times are more uniform now. however  for hand-coded graphs  see table 1   which are formed by first taking several copies of a small graph and then selectively adding some arcs to connect these components  the old encoding was clearly better for smodels. for assat  some of the graphs became easier with the new encoding  but many became harder. finally  for complete graphs  which are hard partly because they yield huge programs both for the new and old encodings  the new encoding turned out to be better for assat but a little worse for smodels. for instance  for the complete graph with 1 vertices  using the old encoding  assat returned with a solution in 1 seconds  and smodels in 1 seconds  but with the new encoding  assat took only 1 seconds  but smodels needed 1 seconds. 
　from these mixed results  it seems that both encodings have merits  especially if one uses smodels. but the experiments do suggest that the new encoding  being tight on every completion model  is better for sat-based stable model generators such as assat and cmodels1. we would not be surprised that with better and faster sat solvers  the new encoding would outperform in all cases. 
1 	inherently tight programs 
given the potential benefit of tight logic programs for satbased stable model generators  we now investigate a more general translation from an arbitrary logic program to one whose completion models are always stable models. to this end  we first define a notion of inherently tight on a set of atoms  and show that it is a sufficient and necessary condition for a program's completion model to be a stable model. 
definition 1 a program p is inherently tight on a set of atoms s if there is a program q such that  is a stable model ofq and q is tight on s. 
proposition 1 a normal logic program is inherently tight on all of its stable models. 
proof: suppose s is a stable model of p. notice first that each rule in ps has a corresponding one in p under gelfondlifschitz transformation. now define w  a set of rules  as follows: 
1. w is initially empty  and t initially ps; 
	we 	also 	ran 	experiments 	for 	cmodels 
 http://www.cs.utexas.edu/users/tag/cmodels.html . the results were very similar to the ones for assat. we did not include its data here because it is not guaranteed to work when the input program is not tight  like niemela's encoding of the hc problem here. 

table 1: randomly generated graphs: nvxay is a graph with x vertices and y arcs. 

table 1: hand-coded hard graphs: nxg.m is a graph with n copies of graph g and some arcs connecting the copies. 

1 	nonmonotonic reasoning 

1. choose a fact in t. suppose r is the corresponding rule in p. now let w be w r  and remove all rules about a from t  and delete a in the bodies of all other rules in t  
1. go back to step 1 until t is empty. 
it is clear that w is tight and s is one of its stable models. 
thus p is inherently tight on s.  
theorem 1 let p be a normal logic program  and s a set of atoms. then s is a stable model of p if and only if s is a model of the completion of p and p is inherently tight on s. 
proof: : by proposition 1 and the fact that a stable model is also a model of a program. 
: since s be a model of the completion of p  so s is closed under p. since p is inherently tight on 1  there is a q  p such that s is a stable model of q and q is tight on s. thus s is supported by q  hence also supported by p. now s is supported by and closed under p thus a stable model of p  by a theorem in  babovich et al  1  . ＊ 
　we say that a program is inherently tight if it is inherently tight on all models of its completion. clearly  a program that is tight on all its completion models is inherently tight. by theorem 1  if all models of its completion are also its stable model  then the program is inherently tight  and vice versa. 
　we now give a translation from an arbitrary logic progiam to one that is inherently tight. in the following  a set s of atoms in a program p is called a strongly connected com-
ponent  scc  if there is a path in gp from u to v for any 
  and s is not a subset of any other such set  where 

gp is the dependency graph of p. 
algorithm 1 let p be a normal logic program  the following algorithm transforms it to an inherently tight program q. let q be empty initially. 
1. for any rule 
tiated to all atoms a if a and a are in the same scc; 
1. if is a constraint  add rule r it into q. 
intuitively  if a set m is a stable model of q  then iff and the rule r in p contributes' to the calculation of coiis qm * meaning that rule r is actually used to derive a. right u  v  is used to record that atom u is used to prove v and this is needed to prevent loops. the following example illustrates the idea. 
nonmonotonic reasoning 
example 1 consider the program  
. it has two completion models {a  1} 
and   but only the first one is a stable model. for this program  there are two sccs: . algorithm j transforms it into the following program q: 

the completion of the program contains the following equiv-
alences  thus it entails 
model of the completion where a and b are true and c is false  which is also the only stable model of q. notice that in the stable model of p  a is established by the second rule about it. correspondingly  in the stable model of q  a1 is true while a  is not  andright a  b  is true while right b  a  is not  a is established first  and then b is derived from a . 
theorem 1 for any normal logic program p  the program q output by algorithm 1 is inherently tight. furthermore p and q are equivalent on atom p   that is  for any subset s of atoui p   s is a stable model of p iff there is exactly one stable model sf ofq such that such that  atom p . 
proof: we show only that q is inherently tight. the second part of the theorem is easier. 
　we only need to prove that all models of comp q  are its stable models. let tv be a model of the completion of q. we show that tv satisfies every loop formula of q  thus it must be a stable model of q  theorem 1 in  lin and zhao  1   suppose l is a positive loop in q. according to algorithm 1  either lisa loop that does not contain any atom of the form right or l is a set of atoms of the form right u  v . 
　if l is a loop that does not contain any atom of the form right   suppose v          va are all atoms in l. l has even number of atoms. atoms in atom p  and newly added atoms occur along the loop alternatively. suppose the loop is: 
	where 	are newly added atoms 
and x{ are atoms in atom p  	if all  
s  are in n  it is known that right are in n by rule 1. further considering rule 1  we have right n for some /  thus rule 1 can not be satisfied for some x  

in the loop. so not all atoms in the loop are in n. now that tv is a model of the completion  so the loop formula  lin and zhao  1  for loop l is satisfied. 
  if l is a loop and it contains a set of atoms right ai a 1   right a1 az        right{av a1 . suppose right  a  b  is an atom in l and it is deduced by the rule right a  b  blyright a1 c . suppose there is a rule r such that pos r  l - if dody r  is satisfied by tv  the loop formula of l is satisfied. if there is no such a r  then the rule right  a  b   - buright a  c  must be satisfied. thus bi tv. but there is only one rule about bi which requires right for some for it to be applicable. 
however from our assumption that l c tv  and l is a loop  it must be the case that right  for all  
this is a contradiction  thus there must be an r as above.  
　algorithm 1 effectively provides yet another reduction of answer set semantics to sat by calculating the completion of the translated program. compared with the mapping in fben-eliyahu and dechter  1   which always adds n1 extra atoms and n1 extra rules  the number of extra atoms and rules needed for our transformation depends on the number of rules whose heads and some of positive literals in their bodies belong to the same scc. in the worst case  it needs  extra atoms and  extra rules  where n is the number of atoms and m the number of rules in the input program. usually  m is a lot less than n1. for instance  for niemelii's encoding of the hc problem  given a graph with a: vertices  there are at most  atoms and  rules. 
　one interesting feature of algorithm 1 is that it is modular w.r.t. new facts. that is  if p' is a set of facts  then for any program p  the program returned by the algorithm on p' is the union of the programs returned by it on p and p'. 
this feature will be handy when we extend the algorithm to programs with variables as the instantiation of a program with variables can be thought of as the union of the program and a set of ground facts. 
we have implemented the algorithm and tried it on 
niemelii's encoding of the hc problem  and found that for 
smodels  the translated program is still better than the original one on randomly generated graphs. but on other types of graphs  the translated program is a lot worse. but for assat  the translated program was slower even on randomly generated programs. apparently  being  inherently  tight does not always guarantee better performance even for sat-based stable model generators. 
1 	conclusions and future work 
we have proposed a new solution to the hamiltonian circuit problem. for any given graph  the solution yields a program that is tight on every model of its completion. compared with niemela's encoding of the same problem  our new encoding performs better on both randomly generated graphs and complete graphs  but is slightly worse on a set of hand-coded graphs. while these results hold for both smodels  which is a specialized stable model generator  and assat  which makes use of sat solver chaff1  the performance gain seems greater for assat than for smodels. 
　we also defined a notion of inherent tightness that captures a sufficient and necessary condition for a program completion model to be its stable model  and proposed an algorithm for translating an arbitrary logic program into an inherently tight one  which provides a reduction of stable model semantics to completion semantics and sat. 
　in terms of future work  we are interested in finding out more about the relationships between stable model semantics and completion semantics  especially the kinds of features of an inherently tight logic program that would be particularly good for sat-based stable model generators like assat. 
acknowledgements 
we thank yuting zhao for useful discussions related to the topics of this paper  especially for his helps in using assat  and for providing some experimental data on assat. 
　this work was supported in part by the research grants council of hong kong under competitive earmarked research grant hkust1e. 
