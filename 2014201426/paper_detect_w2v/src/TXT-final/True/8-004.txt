a tablet input facility for an interactive graphics system 
james e. curry 
adams associates 
a division of 
keydata and adams associates incorporated 
watertown  massachusetts 

introduction 
     effective man-machine communication in an interactive graphics environment requires a natural and convenient way for the on-line user to input information and issue commands to the computer. several applications have been described1 1 in which such an interface has been achieved by allowing the user to draw symbols on a tablet. in order to make this mode of interaction generally available to users of the tx-1 graphics facility * we have augmented the tx-1 graphics programming language leap1 with constructs for handling tablet input and interfacing 
with a user-trainable symbol recognizer. these extensions to leap have made the incorporation of a flexible input technique into a graphics application program as straightforward for the program-
mer as typewriter input. experimentation with the man-machine interface has thereby been greatly simplified  resulting in the faster development of useful graphics applications. this paper illustrates an application which uses the symbol recognition facility  and describes the language extensions through which the interactive aspects of such an application are implemented. 
symbol recognition 
     since the symbol recognition facility is intended for a wide variety of graphics applications  it cannot be limited to a fixed symbol vocabulary. therefore  we provide a recognizer which can be trained by the individual user to 
accept whatever symbols he finds convenient. the recognition algorithm is similar to that described by teitelman.1 
     the recognizer is called from a user program whenever a symbol has been drawn. properties are extracted from the path of each stroke of the drawn symbol. these properties characterize where the path starts with respect to four overlapping regions of the rectangle enclosing the stroke  and how many times the path crosses the 
boundaries of these regions. the relative positioning of the strokes composing the symbol is also recorded. the properties extracted from the input symbol are compared to entries in the specified user-defined symbol dictionary  yielding an exact match  a conditional match  most properties of some entry match but not all   or no match  either there is no conditional match or two or more matches are equally close . if the symbol is recognized  either exactly or conditionally  the recognizer returns the character string associated with the matching dictionary entry  and the 
position and size of the symbol drawn. 
     this scheme has several deficiencies which stem from its insensitivity to properties such as curvature and occurrence of corners. however  we 
have found it more than adequate for any application we have attempted; we have used vocabularies of more than eighty symbols without difficulty. 
symbol definition 
     the user creates or modifies a named symbol dictionary with a special interactive training program. this program allows the user to enter symbols into a specified dictionary by   simply drawing examples of the symbols and indicating what their defining character strings are to be. for example  in order to define a symbol as 'trn'  for transistor   the user draws in the writing area of the training program display. 

     the trainer displays a scaled version of the drawn symbol on the left and calls the recognizer to analyze the symbol. 	if no match is found  the message      is displayed below the writing area. 
-1-　this work was performed under a subcontract of m.i.t. lincoln laboratory which is operated with support from the u.s. advanced research projects agency. 
     the user may now define this symbol by touching one of the character strings on the lower 
part of the screen  or by entering a string  in this case  tkn'  on the typewriter. this causes the properties of the drawn symbol to be entered in the dictionary and associated with  trn.' this is indicated by the message 'trn' displayed below the writing area. 

     if the user now draws a symbol with the same properties  it w i l l be recognized exactly  and the message 'trn' will be shown. 

     a somewhat different symbol might be a conditional match to this dictionary entry. in this case  the message 'ten ' appears  indicating conditional recognition. 
-1 

     the user may  if he wishes  define this to be a second version of the symbol by touching the  trn' target. from this point on  the recognizer will indicate exact recognition for either version.  however  it is usually sufficient to define only one version of a symbol  since application programs do not distinguish between exact and conditional recognition.  the user could instead have defined this symbol as a different string; the recognizer would then distinguish the 
two symbols. 
     the trainer allows the user to delete dictionary entries with the 'del' target appearing on the right of the screen. he can also step through the entries for a given character string with the 'find' and 'next' targets  and examine the properties recorded for each entry. these facilities provide the user with the ability to edit a symbol set. this would be done  for example  when the user wishes to replace the set of application-dependent symbols in an existing dictionary which contains symbols for the normal character set. 
     creating a typical dictionary of about forty symbols takes about one-half hour of console time. users feel that this minimal effort is a small price to pay for the ability to communicate with the computer in a way which is natural and convenient to them. 
an example 
     there are a number of graphics applications on tx-1 which use the symbol input facility as the primary user interface. these applications include a graphical  two-dimensional  programming language 1 a computer-aided logic design system e and a program to assist in the layout of the 
photo masks required for the diffusion and etching processes involved in the fabrication of integrated circuits.1 a description of the operation of the mask layout program will indicate some of the interactive techniques which users have found 
convenient  

　　　the mask designer must f i r s t create a dictionary of symbols for the commands accepted by the program. he decides what symbol he wants to draw to make a transistor appear  for example  and defines this symbol as the string 'trn.' the typical dictionary for this application contains about t h i r t y of these symbols. 
　　　the user begins layout out a mask with the placement of components on the screen. 	to place a transistor mask  he draws his 'ten' symbol where he wishes the transistor to be located. 

the symbol disappears and a transistor mask appears in i t s place. 

to attach a resistor to the right of this transistor  he draws a 'rres' symbol  for right-handed resistor . resistors are of variable length  so the length of the symbol determines the length of the resistor mask created. 
-1-

the resistor symbol is recognized  and a resistor mask of the designated length appears. 

various other types of components may be added to the picture in this way. 
　　　picture manipulations are also specified by drawing symbols. a component or group of neighboring components may be deleted by drawing a symbol defined as 'del' at the appropriate place on the screen. 

each component within the bounds of the symbol is marked to indicate that it w i l l be affected by the next command. 
the components appearing within the bounds of the symbol disappear with the symbol. 
　　　when a l l desired components have been selected  which may require several 'sel' symbols if 
these components are not adjacent   the user may draw a 	 mov' symbol to indicate the direction and extent of a translation operation. 
an existing component or group of components may be manipulated by f i r s t drawing a 'sel' symbol over the components to select them for some further operation. 
-1-

     the selected components are moved by the designated offset. 
more detailed work.      this symbol causes the enclosed portion of the picture to be scaled to f u l l screen size for 

     other available move commands specify movement to a designated point  and translation in the horizontal or vertical direction only  either through a designated distance or to a designated point. there are also commands for deleting all selected components and for placing a copy of the selected component set at a given point. 
     the user can also control how much of the mask being designed appears on the scope through 
commands for scaling and translating the entire 
picture. one useful command in this class is invoked by the 'fit' symbol. 
     other commands give the user the ability to name the current circuit and save it in his filing system  and to recover and merge named circuits. the circuit name may be drawn on the tablet with alphanumeric symbols. however  users generally find it more convenient to enter the name on the typewriter  
     it is often convenient to have a symbol which calls the trainer from the application program. the dictionary can be refined or augmented  and layout work then resumed using the new symbol set. 
language facilities 

　　most of the graphics programming on tx-1  including the application described above  is done in leap 1 an algol-based language to which constructs have been added for data structure 
manipulation  homogenous matrix operations  display output  file handling  and other facilities oriented to time-shared graphics. these con-
structs make the implementation of picture manip-
ulations such as those involved in the mask layout program straightforward for the programmer. leap has been further extended to allow simple but powerful language forms for monitoring interactive events and communicating with the symbol 
recognizer.  leap is implemented in vital n a compiler-writing system  permitting easy extension of the language.  the skeletion leap pro-
gram below illustrates the level of programmer effort required to incorporate sophisticated 
tablet input into an application program.  certain syntactic liberties have been taken in this example to make it more intelligible to the uninitiated reader.  
-1-
declare an input parameter r of data type ' f i l e name' which w i l l be typed when the program is called. 
store the f i l e name into the reserved variable recognizer to establish the f i l e as the symbol dictionary to be used by the recognition f a c i l i t y . 
request the interactive event monitoring system to display and buffer the pen track and push an event into the input queue when drawing is completed.  monitoring of other events such as button pushes  target h i t s   etc.  might also have been requested.  
pop an event from the input queue  pausing u n t i l an event occurs if the queue is empty  and set the reserved integer variable cause to the ident i f i c a t i o n number for the event. 
branch on the event number to the label of the appropriate processing section for the event. 
a tablet action has been completed. analyze the pen track using the symbol set named in recognizer. the reserved string variable symbol is set to the associated text string; xcen  ycen  width  hight indicate the center and dimensions of the drawn symbol. the buffer of tablet points is also available in the two dimensional array ink if additional information is needed  for example  the startpoint of the symbol . 
erase the drawn symbol. 
execute the code for the action indicated by symbol. 
the nullstring indicates the symbol was not recognized. typically a pattern is flashed on the screen or an audible signal given when this occurs. 
place a transistor mask at xcen  ycen. 
record and mark a l l components whose centers are within the rectangle described by xcen  ycen  width  hight. 
move a l l selected components through the distance indicated by the f i r s t and last points of the f i r s t stroke as recorded in the array ink. 
-1-

conclusion 
　　　we feel that the techniques described above are a significant improvement on conventionalinteractive input. in most instances  only gra-
phical information is drawn; text and commands must be specified through either targets on the screen  which clutter the picture and increase display load  or auxilliary keyboards or pushbutton arrays  which are distracting and have only limited mnemonic value . with a symbol recognition f a c i l i t y   the user can input graphical  textual  and command information with a single device which is natural and convenient to use. 
　　　the most beneficial result of adding these f a c i l i t i e s to the tx-1 graphics system has been that experimentation with the man-machine interface has been greatly simplified. experience has shown that a major obstacle in developing applications programs is getting a potential user to decide what he wants to say to the computer and how he wants to say i t . the f l e x i b i l i t y now 
provided in this area for both the programmer and the user has contributed significantly to the faster development of useful graphics applications. 
