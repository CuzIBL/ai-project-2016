
we consider the problem of identifying equivalence of two knowledge bases which are capable of abductive reasoning. here  a knowledge base is written in either first-order logic or nonmonotonic logic programming. in this work  we will give two definitions of abductive equivalence. the first one  explainable equivalence  requires that two abductive programs have the same explainability for any observation. another one  explanatory equivalence  guarantees that any observation has exactly the same explanations in each abductive framework. explanatory equivalence is a stronger notion than explainable equivalence. in first-order abduction  explainable equivalence can be verified by the notion of extensional equivalence in default theories. in nonmonotonic logic programs  explanatory equivalence can be checked by means of the notion of relative strong equivalence. we also show the complexity results for abductive equivalence.
1 introduction
nowadays  abduction is used in manyai applications  including diagnosis  design  updates  and discovery. abduction is an important paradigm for problem solving  and is incorporated in programming technologies  i.e.  abductive logic programming  alp  . automated abduction is also studied in the literature as an extension of deductive methods or a part of inductive systems  and its computational properties have also been studied  1; 1; 1; 1 .
　in this work  we are concerned with such computational issues on abductive reasoning. despite being a problemsolving paradigm  alp has a lot of issues which have not been fully understood yet. in particular  there are no concrete methods for  a  evaluation of abductive power in alp   b  measurement of efficiency in abductive reasoning   c  semantically correct simplification and optimization   d  debugging and verification in alp  and  e  standardization in alp. since all these topics are important for any programming paradigm  the lack of them is a serious drawback of alp. then  it can be recognized that all the above issues are related to different notions of identification or equivalence in alp. in particular  the item  c  is related to understanding the semantics of alp with respect to modularity and contexts.
　abduction can be formalized in various logics . then  we can consider several notions of equivalence in several logics for abduction. in this paper  we will give two definitions of abductive equivalence in two logical frameworks for abduction. two logics we consider here are first-order logic  fol  and abductive logic programming  alp . the first abductive equivalence  called explainable equivalence  requires that two abductive programs have the same explainability for any observation. another one  explanatory equivalence  guarantees that any observation has exactly the same explanations in each abductive framework. explanatory equivalence is stronger than explainable equivalence.
　in this paper  we characterize these two notions of abductive equivalence in terms of other well-known concepts in ai and logic programming. in abduction in first-order logic  we will see that explainable equivalence can be verified by the notion of equivalence in default logic   which is defined for the families of extensions of two default theories. on the other hand  abductive equivalence in alp is more complicated than in the case of fol due to the nonmonotonicity in logic programs. in fact  equivalence between two abductive logic programs has little been discussed in the literature except that effects of partial deduction in alp are analyzed in . here  we will see that explanatory equivalence in alp can be characterized by the notion of  relative  strong equivalence  1; 1; 1 .
　the rest of this paper is organized as follows. section 1 presents two definitions for abductive equivalence. section 1 considers first-order logic as the representation language  while section 1 considers nonmonotonic logic programming for alp. section 1 gives concluding remarks.
1 abductive equivalence
we start with the question as to when two abductive frameworks are equivalent. as far as the authors know  there is no answer for such a question in the literature of alp. there are many parameters which should be considered important in defining equivalence notions in abductive frameworks. in the world  both background knowledge and observations are surely essential. in an agent who performs abduction  on the other hand  her abductive power must depend on her logic  language  syntax  semantics  of background knowledge  observations and hypotheses. moreover  the quality of abduction is relevant to other parameters such as axioms  inference procedures  logics of explanations  and criteria of best explanations. if we would take all such parameters into account  the task of defining the equivalence notion might become combinatorial and too complex.
　in the following  we thus consider a rather simple framework for our problem while we try to hold the essence of equivalence notions as much as possible. first  logic  background knowledge and hypotheses are put as input parameters in each abductive framework. secondly  a logic of explanations is taken into account in a definition  but its diversity is reflected in different notions of abductive equivalence.
　the following definition of abductive frameworks is a standard one  1; 1; 1; 1 . as a notation  means that a formula is derived from a set of formulas in a logic .
definition 1 let and be sets of formulas in some underlying logic . an abductive framework is defined as a triple   where is called background knowledge and each element of is called a candidate hypothesis.
definition 1 let be an abductive framework  and a formula in   and a formula belonging to .
we define that	is an explanation of an observation	in if	and	is consistent in	. we say that	is explainable in	if it has an explanation in	.
　we now give two definitions for abductive equivalence. we assume that the underlying logic is common when two abductive theories are compared.
definition 1 two abductive frameworks	and
are explainably equivalent if  for any observation
　  there is an explanation of in iff there is an explanation of in .
　explainable equivalence requires that two abductive frameworks have the same explainability for any observation. explainable equivalence may reflect a situation that two programs have different knowledge to derive the same goals.
definition 1 two abductive frameworks	and
　　　　　are explanatorily equivalent if  for any observation	 	is an explanation of	in	iff	is an explanation of	in	.
　explanatory equivalence assures that two abductive frameworks have the same explanation power for any observation. explanatory equivalence is stronger than explainable equivalence as follows.
proposition 1 if abductive frameworks	and
are explanatorily equivalent  then they are ex-
plainably equivalent.
　for explanatory equivalence  we can assume that the hypotheses are common in two abductive frameworks in definition 1  as the following property holds.
proposition 1 if	and
are explanatorily equivalent  then	  where is consistent in	for	.
proof. assume that	. then  for a formula
        	is an explanation of	in	because is consistent in	. however 	is not an explanation of	in . hence 	and	are not explanatorily equivalent.
　note in proposition 1 that any hypothesis in cannot be added without violating the consistency of in . thus  is the set of hypotheses that can be actually used in explanations of some formulas.
example 1 suppose the abductive frameworks
fol	and	fol	.
then  and are explainably equivalent  but are not explanatorily equivalent. on the other hand 
 fol and fol are neither explainably equivalent nor explanatorily equivalent.
1 abduction in first-order logic
abduction is used in many ai applications  and classical firstorder logic is most often used as the underlying logic for abduction  1; 1; 1; 1 . when the underlying logic is fol  the relation becomes the usual entailment relation . in first-order abduction  explanations are usually defined as a set of ground instances from hypotheses . that is  a set of
ground instances of elements of	is an explanation of	in
fol	if	and	is consistent.
　in the following  denotes the set of logical consequences of a set of first-order formulas. that is 
             . the next definition is originally given for default logic by reiter .
definition 1  1; 1  let and be sets of first-order formulas. an extension of with respect to is where is a maximal subset of ground instances of elements from such that is consistent.
　using the notion of extensions  explainable equivalence can be characterized in first-order abduction.
theorem 1 two abductive frameworks fol	and
fol are explainably equivalent iff the extensions of with respect to coincide with the extensions of with
respect to	.
proof. first  we claim that the union of the extensions of with respect to are exactly the set of formulas explainable in fol . to see this  we can use a wellknown theorem  1; 1  that a formula can be explained in fol iff there is a consistent extension of with respect to such that contains . thus  the set of all explainable formulas are precisely those formulas contained in at least one extension of with respect to .
	now  let	fol	and	fol
be two abductive frameworks. suppose that the extensions of with respect to	coincide with those of	with respect
to . by the above claim  the set of formulas explainable in is equal to the set of formulas explainable in . this means that and are explainably equivalent.
　conversely  assume that there is an extension of with respect to which is not an extension of with respect to . let be a first-order formula which is logically equivalent to . such a formula actually exists because	holds for some maximally consistent subset	of	  and hence	is logically equivalent to
               . since	is consistent 	is consistent too. then 	is explainable in	because	is an explanation of	.
　now  if is not explainable in   then obviously and are not explainably equivalent. hence  there is an explanation of in . then  there is an extension of with respect to which contains . since is not an extension of with respect to   holds. then 
　　　　. let	be a formula which is logically equivalent to	. by the same argument as above 	is explainable in	. however  this	cannot be explained in	. this is because  if	were explained in	  there must be an extension	of	with respect to	such that	 
which is impossible because any extension is orthogonal to another extension in a default theory . in any case  and are not explainably equivalent.
	in   reiter's default theories	and
             are said to be equivalent if the extensions of are the same as the extensions of . when an abductive framework fol is given  we can associate a default theory where is the set of prerequisite-free normal defaults  such that there is a one-to-one correspondence between the extensions of and the extensions of with respect to .
corollary 1 two abductive frameworks fol and fol	are explainably equivalent iff the default theories	and	are equivalent where 	for	.
example 1 suppose two abductive frameworks 
fol	and	fol	  where
and
then  and are explainably equivalent. in fact  the two extensions of with respect to are and
  which are respectively equiva-
lent to the two extensions of	with respect to	  and	.
　it is interesting to see that we can transform any abductive framework to an explainably equivalent abductive framework whose background theory is empty. the next property is also derived by the representation theory for default logic .
corollary 1 for any abductive framework fol   there is an abductive framework fol which is ex-
plainably equivalent to fol.proof. put  where	.then  it holds for any	that 	iff	whereand.an abductive frameworkis called compatible if　　　is consistent. explainable equivalence can be easily verified for compatible frameworks.
corollary 1 two	compatible	abductive	frameworks
 fol and fol are explainably equivalent iff	.
　an abductive framework fol is called assumptionfree where is the set of all literals in the underlying language. it is known that the complexity of finding explanations in assumption-free abductive frameworks is not harder than that in assumption-based frameworks  1; 1 . explainable equivalence in the assumption-free case can also be simply characterized as follows.
corollary 1 two abductive frameworks fol and fol are explainably equivalent iff .
proof.	for	an	assumption-free	abductive	framework
 fol   each extension of with respect to is logically equivalent to a model of . hence  explainable equivalence implies that the models of coincide with the models of   and vice versa.
　for explanatory equivalence in first-order abduction  logical equivalence of background theories is necessary and sufficient.
theorem 1 two abductive frameworks fol and fol are explanatorily equivalent iff .
proof. if   then for any and any   it holds that  iff   and that  is consistent iff
　　　is consistent. hence  fol and fol are explanatorily equivalent.
	conversely  suppose that fol	and fol
are explanatorily equivalent. then  for any formula and any from   it holds that iff . then  for any   we have . that
is  holds for any . this implies when	.
　the complexity of abductive equivalence in the propositional case can be given as follows.
lemma 1  let be a prerequisite-free normal default theory. then  a formula is true in all extensions of iff and are equivalent.
theorem 1 deciding explainable equivalence in propositional abduction is -complete.
proof. by corollary 1 and lemma 1  cautious reasoning in default logic can be transformed to explainable equivalence via equivalence of default theories. this transformation is obviously feasible in polynomial time. because cautious reasoning from prerequisite-free normal default theories is -complete   the decision problem of explainable equivalence is -hard.
　we now prove membership in . two abductive frameworks fol and fol are
not explainably equivalent iff there is an extension of with respect to which is not an extension of with respect to . given a subset as a guess  deciding if is an extension of with respect to
can be checked by computing the  reduct 	of	by
and then checking if . here  computing the reduct requires satisfiability tests  and this computation as well as testing logical equivalence can be done in polynomial time with an np-oracle. once we know that is an extension of with respect to   we need to check if is not an extension of with respect to   which can also be done in the same way as the former test. thus  we can construct a polynomial-time nondeterministic turing machine with an np-oracle to decide if and are not explainably equivalent. hence  the original problem is the complement of this  and belongs to conpnp .
theorem 1 the following decision problems in propositional abduction are conp-complete.
 1  explainable equivalence of two compatible abductive frameworks.
 1  explainable equivalence of two assumption-free abductive frameworks.
 1  explanatory equivalence of two abductive frameworks.
proof. by corollaries 1 and 1 and theorem 1  these problems can be solved by checking logical equivalence of two propositional theories  which is conp-complete.
1 abductive logic programming
abductive logic programming  alp  is another popular formalization of abduction in ai  1; 1 . background knowledge in alp is called a logic program  and the candidate hypotheses are given as literals called abducibles. the most significant difference between abduction in fol and alp is that alp allows the nonmonotonic negation-as-failure operator in background knowledge. in abduction  addition of hypotheses may invalidate explanations of some observations if the background theory is nonmonotonic.
recall that a  logic  program is a set of rules of the form
where each	is a literal	  and
is negation as failure  naf . the symbol represents a disjunction. the left-hand side of the rule is the head  and the right-hand side is the body. a rule with variables stands for the set of its ground instances. in this paper  the semantics of a logic program is given by its answer sets  1; 1   while another semantics can be considered as well in alp  1; 1 . problem solving by representing knowledge as a logic program and then computing its answer sets is called answer set programming  asp .
definition 1 an abductive  logic  program is defined as a pair   where is a logic program and is a set of literals called abducibles. instead of using the notation
 alp   we also use to represent an abductive framework whose underlying logic is alp.
definition 1 let	be an abductive program  and
a conjunction of ground literals called observations. a set is a  credulous  explanation of in 1 if every ground literal in is true in a consistent answer set of .
　note that both abducibles and observations are restricted to ground literals in alp. however  it is known for this framework that rules can be allowed in abducibles and that observations can contain naf formulas as well as literals . definition 1 can also be represented in a different way as follows
. a belief set  with respect to   of an abductive program is a consistent answer set of a logic program
where . then  is an explanation of if is true in a belief set of with respect to .
definition 1 let and be abductive programs. and are explainably equivalent if  for any ground literal   is explainable in iff is explainable in . and are explanatorily equivalent if  for any conjunction of ground literals   is an explanation of in iff is an explanation of in .
　explainable equivalence in alp guarantees the same explainability for any ground literal as a single observation  but it does not matter how each observation is explained. hence  we do not have to care about whether multiple observations can be jointly explained by a common explanation. on the other hand  explanatory equivalence in alp guarantees that  any conjunction  or set  of observations 1 has exactly the same credulous explanations. hence  explanatory equivalence implies that any set of abducibles should explain the same set of observations in each abductive program. we now show that explainable equivalence in alp can be checked by comparing the belief sets of two abductive programs. because there exist several methods to compute belief sets using asp  1; 1; 1   checking explainable equivalence is also possible using such methods. in the following  we denote the set of all belief sets of as .
theorem 1 abductive programs and are explainably equivalent iff
proof. recall that is an explanation of a ground literal iff is true in a belief set of with respect to
　. then  the set of all explainable literals are precisely those literals contained in some belief sets of with respect to some . hence  the union of the belief sets of are exactly the set of literals explainable in . therefore  two abductive programs are explainably equivalent iff the unions of the belief sets of two abductive programs coincide.
　in some case of compatible problems  explanatory equivalence can be easily verified. here  a logic program is definite if every its rule is naf-free and has exactly one atom in the head and only atoms in the body. a definite program has a unique answer set that is equivalent to its least model. an abductive program is called definite if is a definite logic program and is a set of atoms.
corollary 1 two definite abductive programs and are explainably equivalent if the least model of coincides with that of .
example 1 given the common set of abducibles and three logic programs:
the three abductive programs  for   are all explainably equivalent  but none of them are explanatorily equivalent. in particular  the least model of is
           which is identical to that of	.	is not definite because of the third rule  but	has three belief sets:	  the union of which is equal to that of	for	.
　explanatory equivalence in alp  on the other hand  requires a more semantical notion of logic programming.1 for this purpose  we need to utilize the concept of equivalence in logic programming and asp.
　there are several notions for equivalence in logic programming  and weak equivalence and strong equivalence are most well known. we say that two programs are weakly equivalent if they simply agree with their answer sets. the notion of weak equivalence is similar to that of logical equivalence in fol and other classical logics. given two abductive programs and   however  weak equivalence of and is not a sufficient condition for explanatory equivalence of them  and is not even a sufficient condition for explainable equivalence. weak equivalence is meaningful only when the abducibles are empty.
proposition 1 abductive programs and are explanatorily equivalent iff and are weakly equivalent.
　on the other hand  strong equivalence  is a more context-sensitive notion for equivalence of logic programs. two logic programs and are said to be strongly equivalent if for any additional logic program   and
have the same answer sets. when we allow naf in logic programs  weak equivalence is too fragile as a criterion. for example  and are weakly equivalent with the same unique answer set   but adding to both results in the withdrawal of in the former. often  we can restrict the language for additional programs to some subset of the whole language of programs. then  two programs and are said to be strongly equivalent with respect to if and have the same answer sets for any program . the equivalence notion with such restriction is called relative strong equivalence  1; 1 . using this notion  explanatory equivalence can be characterized as follows.
theorem 1 two abductive programs	and
are explanatorily equivalent iff and are strongly equivalent with respect to .
proof. suppose that and are explanatorily equivalent. then  for any conjunction of literals and any

1
	explanatory equivalence of	and	implies
                         but the converse does not hold. for example  when	 
and  	. however  is an explanation of   and in   but is not in .
　　　  it holds that  is an explanation of in iff is an explanation of in . the latter equivalence then implies that  for any and any   we have that  is true in a belief set of with respect to iff is true in a belief set of with respect to . then  for any and any   is true in an answer set of iff is true in an answer set of . that is  for any and any set of literals  is an answer set of iff is an answer set of . hence  and are strongly equivalent with respect to . the converse direction can also be proved by tracing the above proof backward.
example 1 given the common set of abducibles   consider three programs
then  the three abductive programs for	 are explainably equivalent. althoughis explanato-rily equivalent to	  it is not to. in fact and are strongly equivalent with respect to   while and are not because the addition of derives in
but this is not the case in . this example shows that unfold/fold transformation  does not preserve explanatory equivalence in alp  even when and are definite.
　the complexity results of abductive equivalence in alp are given as follows.
theorem 1 deciding explainable equivalence in propositional alp is in .
proof. explanation-finding  i.e.  deciding if each literal has an explanation in an alp  is a -complete problem . to decide explainable equivalence  we need to check if explainability agrees in two abductive frameworks for each literal. thus we can construct a polynomial-time deterministic turing machine with an oracle for the explanation-finding problem in order to decide explainable equivalence. hence  the problem is in .
theorem 1 deciding explainable equivalence in propositional alp is -hard.
proof. the problem contains the case that the abducibles are empty. in this case  explainable equivalence and explanatory equivalence coincide. then  by proposition 1  the problem reduces to deciding weak equivalence of two logic programs  which is known to be -complete .
corollary 1 explainable equivalence of two definite abductive programs can be decided in polynomial time.
theorem 1 deciding explanatory equivalence in propositional alp is -complete.
proof. from a set	of literals  we construct a logic program
where is a new atom which is uniquely associated with . then  it can be shown that  and are strongly equivalent with respect to iff and are
weakly equivalent. by theorem 1  explanatory equivalence
of and reduces to weak equivalence of and   which is -complete .
1 conclusion
we have introduced the notion of abductive equivalence in this paper. we have considered two definitions of abductive equivalence in two logics. two important differences between fol and alp as the underlying logics are that  1  explainability is considered for all formulas in fol while only literals are considered as observations in alp  and that  1  nonmonotonicity by naf appears in alp while this is not the case in fol. intuitively  the restriction of observations to literals in alp gives more chances for two abductive programs to be equivalent  but the existence of nonmonotonicity in alp makes comparison of abductive programs more complicated. in each case  we can observe that explanatory equivalence is not computationally harder than explainable equivalence.
　in   the notion of abductive equivalence in this paper is further applied to extended abduction   where hypotheses can not only be added to a program but also be removed from the program to explain an observation. in extended abduction  explanatory equivalence can be characterized by the notion of update equivalence .
　we have observed that logical equivalence of background theories in fol or weak equivalence of logic programs does not simply imply abductive equivalence except for some very simple cases. that is why we need to characterize abductive equivalence in terms of other known concepts in classical or nonmonotonic logics. having such characterizations in this paper  the next target is to develop transformation techniques which preserve abductive equivalence. in another future work  we can consider other underlying logics for background theories  hypotheses and observations as well as the criteria of best explanations for abductive equivalence.
acknowledgment
we thank kazuhisa makino for his valuable comments.
