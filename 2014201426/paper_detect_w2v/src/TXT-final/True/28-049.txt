 
while the belief  desire  intention  bdi  framework is one of the most influential and appealing approaches to rational agent architectures  a gulf often exists between the high-level bdi model and its practical realisation. in contrast  the concurrent metatem language  being based upon executable formal specifications  presents a close link between the theory and implementation  yet lacks some of the features considered central to the representation of rational agents. in this paper  we introduce a hybrid approach combining the direct execution of concurrent metatem with elements of rationality from the bdi framework. we show how this system can capture a range of agent behaviours  while retaining many of the advantages of executable specifications. 
1 introduction 
the inability of traditional software to handle complex modern applications  together with the rapid expansion of infrastructure such as the internet  has led to the introduction of a new technology  termed agent-based systems. an agent is a semi-autonomous process  typically communicating via message-passing and cooperating with other agents in order to achieve common goals. this technology has been particularly successful in producing distributed information systems where centralised control is either impractical or undesirable. here  not only is the ability of agents to act autonomously vital  but such agents are often required to dynamically adapt to unforeseen circumstances and to work cooperatively with other agents in order to overcome problems. these facets make agent-based systems ideal for complex tasks in realworld applications and  consequently  this technology has been applied in a wide variety of areas  from industrial process control to cooperative information retrieval. 
　in spite of the rapid spread of agent technology  there are  as yet  relatively few high-level programming languages for agent-based systems. although considerable research 
1 	cognitive modeling 
has been carried out concerning the development of theories of agency and cooperation  the lack of appropriate highlevel logic-based programming languages often means that implemented systems have very little connection with these high-level theories  an exception to this is shoham's agentoriented programming work  shoham  1  . traditional programming languages typically lack the flexibility to handle high-level concepts such as an agent's dynamic control of its own behaviour. consequently  it is widely regarded as important that high-level languages be provided  which can support the principled development of multi-agent systems  from logical theory to implemented system. 
　in this paper  we consider two approaches to the highlevel representation of agent-based systems  namely rao and georgeff's bdi model  rao and georgeff  1  and fisher's 
concurrent metatem language  fisher  1 . in spite of their differing backgrounds we show that they have a great deal in common and introduce  in ′1  a hybrid approach. whilst not as general as the bdi model  nor as simple as the concurrent metatem language  this hybrid approach can capture a range of agent behaviours  while retaining many of the advantages of executable specifications. 
1 the bdi framework 
rao and georgeff  1   considered a particular agent framework whereby individual rational agents incorporate certain  mental attitudes  of belief  desire and intention  bdi . these are used to represent  respectively  the information  motivational and deliberative states of the agent  and together effectively determine the system's behaviour. this framework is both appealing and influential  being used in a number of practical systems  jennings and wooldridge  1 . 
1 agents 
the core components of the bdi framework are rational agents  wooldridge and jennings  1 . these are autonomous entities  which execute independently  and have complete control over their own internal behaviour. the core elements of bdi agents are as follows. beliefs correspond to the information that the agent has assimilated about the 
world; the set of beliefs is typically incomplete and may be incorrect with respect to the true situation. desires are the agent's high-level goals  which need not be achievable simultaneously  but are usually consistent. intentions essentially represent a subset of the agent's desires that it has committed to achieve. 
1 	executing agent descriptions 
the key process in executing bdi systems is deliberation. this consists of two aspects: 
  deciding which desires will become intentions; 
  deciding how to achieve those intentions. 
thus  an abstract execution cycle usually involves following steps  rao and georgeff  1 . 
1. update beliefs based upon observations and actions. 
1. based on these beliefs  generate new desires. 1. select a subset of desires to act as intentions. 
1. select a step to perform based upon intentions and the current state of the agent. 
thus  intentions are only completed one step at a time. the step selected corresponds either to performing an action  modifying a belief  or generating a subgoal and  once this step has been completed  the execution cycle begins again. 
1 	real bdi systems 
since its inception  many real-world agent-based systems have been based upon the bdi philosophy  most notably the procedural reasoning system  prs   georgeff and ingrand  
1   but also systems such as interrap  fischer et a/.  1. in the prs  the selection of a step to be performed involves searching a plan library for plans which can achieve the selected intention. this library consists of pre-constructed plans; planning from first principles is not undertaken. in the prs  intention structures  which are essentially partial orders of dependencies  provide linkage between all related intentions. for example  such structures record the fact that some intentions may be suspended  some may be deferred and some depend on further intentions. 
　although both prs and its successor  dmars  have been successfully used in a number of areas  such as air traffic control  rao and georgeff  1   the link between such systems and the bdi framework is often tenuous. in particular  while the practical systems incorporate elements termed beliefs and intentions  these are distinct from the formally defined beliefs and intentions of bdi model. 
　consequently  there is a requirement for mechanisms linking the high-level bdi model with its low-level realisation. several different approaches have been considered. for example  a number of bdi-based programming languages have been proposed  weerasooriya et al  1; rao  1a . however  these have either been too low-level or not expressive enough to capture the key elements of bdi systems. 
more recently  object-oriented development methodologies have been adapted in order to provide  through a form of agent-oriented development methodology  a closer link between the model and its realisation  kinny and georgeff  1 . since this practical development approach still does not consider the maintenance of formal properties  the need for high-level logic-based languages capturing the key components of the bdi model remains. 
1 the concurrent metatem framework 
fisher  introduced concurrent metatem  an agentbased programming language comprising two elements: 
1. the representation of each individual agent's behaviour using a temporal specification. 
1. an operational framework providing both asynchronous concurrency and broadcast message-passing. 
temporal logic provides a means of declaratively specifying agent behaviour. it not only represents the dynamic aspects of an execution  but also contains a mechanism for representing and manipulating the goals of the agent. the operational model of concurrent metatem is both general purpose and intuitively appealing. the use of broadcast message-passing provides both a general and flexible communication model for concurrent objects  birman  1  and a natural interpretation of distributed deduction  fisher  1b . these features together provide a coherent and consistent programming model within which a variety of agent applications can be represented  fisher  1 . 
1 agents 
as in the bdi framework  the basic elements of concurrent 
metatem are agents  although these need not necessarily be rational. there are two elements to each agent: its interface definition and its internal definition. 
　the definition of which messages an agent recognises  together with a definition of the messages that an agent may itself produce  is provided by the interface definition  which may be given as follows. 
car    
	in: 	go stop turn 
	out: 	empty overheat 
here  {go  stop  turn} is the set of messages the 'car' agent recognises  while the agent itself is able to produce the messages {empty  overheat}. 
the internal definition of each agent is given by a temporal logic specification  manna and pnueli  1 . temporal logic is seen as classical logic extended with various modalities for representing temporal aspects of logical formulae  emerson  1 . the temporal logic used here is based on a linear  discrete model of time. thus  time is modelled as an infinite sequence of discrete 'moments'  with an identified starting point  called 'the beginning of time'. classical formulae 
	fisher 	1 
are used to represent constraints within individual moments  while temporal formulae represent constraints between moments. examples of temporal operators are given below. is true now if  is true at some moment in the future. is true now if  is true always in the future. 
	is true now if 	is true from now until a future 
moment when is true.  is true now if is true at the next moment in time. start is only true at the beginning of time. 
as an agent's behaviour is represented by a temporal formula  this can be transformed into the temporal normal form  snf  fisher  1a   this process not only removes the majority of the temporal operators  but also translates the formula into a set of rules suitable for cither execution or verification. each of these rules is of one of the following varieties. 
where each is a literal. note that snf is just as expressive as the full temporal logic. this logical form provides the core elements for describing basic dynamic execution: 
  a description of the current moment; 
  a description of transitions that might occur between the current and the next moment; 
  a description of situations that will occur at some  un-specified  moment in the future. 
thus  using this approach  the behaviour of an agent can be represented now  in transition to the next moment in time and at some time in the future  fisher  1 . 
1 	executing agent descriptions 
an agent's temporal specification can be implemented in a number of ways  for example through refinement to traditional programming languages. however  since temporal logic represents a powerful  high-level notation  a viable alternative  at least for prototyping purposes if not for full implementation  is to animate the agent by directly executing its temporal specification  fisher  1 . 
　in the case of concurrent m e t a t e m   the set of snf rules is executed using the imperative future paradigm  barringer et al  1   here  a forward-chaining process is employed  using information about both the history of the agent and its current set of rules in order to constrain its future execution. 
1 	cognitive modeling 
　as an example of a simple set of rules which might be part of the car agent's description  consider the following. 

here  moving is false at the beginning of time and whenever go is true  for example  if a go message has just been received   a commitment to eventually make moving true is given. similarly  whenever both go and moving are true  then either overheat or empty will be made true in the next moment in time. 
　the operator used to represent basic temporal indeterminacy is the sometime operator   when a formula such as  is executed  the system must attempt to ensure that 
eventually becomes true. as such eventualities might not be able to be satisfied immediately  a record of the outstanding eventualities must be kept  so that they can be re-tried as execution proceeds. the standard heuristic used is to attempt to satisfy as many eventualities as possible  starting with the oldest outstanding eventuality  fisher and owens  1 . 
　an important consideration with respect to the practical implementation of concurrent m e t a t e m is that  although it can be made into a complete theorem-prover for temporal logic  at least in the propositional case   this is rarely done. thus  the complexity of full theorem-proving is usually avoided  fisher  1 . 
1 	concurrency  communication and grouping 
we note that such asynchronously executing agents  communicating via broadcast message-passing  are very useful for developing open systems  hewitt  1   while the notion of agent groups  maruichi et al.  1  is essential both for restricting the extent of broadcast messages and for structuring the agent space. 
1 	applications 
the combination of executable temporal logic  asynchronous message-passing and broadcast communication provides a powerful and flexible basis for the development of agentbased systems. consequently  concurrent m e t a t e m has been applied in a number of areas  including distributed artificial intelligence  concurrent theorem-proving  artificial agent societies and transport systems  fisher  1 . 
1 a hybrid approach 
in this section  we show how an extended version of concurrent m e t a t e m can be used to implement the core facets of the bdi model. as we are keen to represent only the fundamental elements  there are a variety of details that we ignore. for example  we will not consider real-time constraints  complex plan structures/libraries  or complex intention structures from the prs  nor will we consider first-order temporal specifications  concurrent actions  multiple threads  cloning 


figure 1: a comparison of interpreter cycles. 

or grouping from concurrent metatem. in spite of these restrictions  we will show that the key elements of simple bdi architectures can be concisely and consistently represented and implemented using extended concurrent metatem. 
1 	informational aspects 
as  in practical bdi architectures such as the prs  beliefs are usually coded by ground instances of first-order predicate calculus  then these can be represented directly as  internal agent  facts in concurrent metatem. however  as concurrent metatem does not incorporate persistence  then this necessitates the addition of meta-level frame axioms  such as 

thus  an alternative approach is to directly add a new modal operator for belief to the logic executed within concurrent metatem. as in bdi  this is a modal dimension satisfying the kd1 axioms and the execution mechanism itself is modified to handle the persistence of beliefs  i.e. both the above frame axiom and the kd1 axioms are 'built in' to the execution mechanism. 
　thus  this is the key logical extension provided to concurrent metatem. the logic executed is now a multimodal logic consisting of both temporal and doxastic dimensions. note that snf has been extended to such logics elsewhere  fisher et al  1   and rules now incorporate the new belief modality  'b'. 
1 	motivational aspects 
the key observation we use regarding the bdi framework is that  in practice  there is often little fundamental difference between desires and intentions. the former represent all the goals that the agent wishes to achieve; the latter represent those that it is actively pursuing at present. indeed  in the logical foundations of the bdi model  rao  1b   both desires and intentions are represented by the same type of modal logic  kd   while beliefs are represented by a different one  kd1 . thus  a very natural  although bratman  takes a different view  mechanism for representing both intentions and desires is to use temporal eventualities. in particular  these are required to be satisfied eventually  if consistent   can be conflicting and the system must choose between them in order to generate further execution. 
1 	deliberative/execution aspects 
before considering the detailed execution within our approach and its relationship to bdi architectures  it is useful to examine the basic interpretation cycles for both the prs  rao and georgeff  1  and core m e t a t e m execution  fisher and owens  1 . these are presented in fig. 1. note the close similarities  the main difference being the more complex  and stratified  deliberation phase in the prs. 
　thus  the key modification of the execution mechanism concerns the implementation of deliberation. the subset of eventualities selected  the order in which they are attempted  and the mechanism for achieving them  are all the concern of deliberation. if  for the moment  we assume that desires and intentions are trivially achievable  this restriction is considered further below   then we can describe the key decision mechanisms of the two approaches as follows. as deliberation is concerned with weighing up each of the possible choices and choosing a subset to actually undertake  then in concurrent metatem  the eventualities  desires/intentions  are simply ordered by age and the oldest one is attempted first  while in bdi systems  each is examined in turn and a specific cost function is used to generate an ordering. 
　in order to provide added flexibility within the language  we allow the user to redefine the priority functions used within deliberation. thus  the system requires a desire priority function  pd  which takes as arguments a list of eventualities  desires   and the history of the execution  and returns an ordered list of eventualities  intentions . this is then used to control the part of deliberation that extracts intentions from desires. in standard concurrent metatem  this would simply involve comparing the age of each eventuality; in the prs this function would typically be much more complex  incorporating a variety of aspects of the current and past state of the agent. 
　if we were to remove the above simplification whereby intentions are trivially achieved  we could also allow a user defined intention priority function  pi  which takes as arguments a list of eventualities  intentions   the history of the execution  and a list of plan definitions  and returns an ordered list of eventualities  intentions  to be executed immediately. in the prs  the list returned would typically only contain one element  as only one step is taken at each cycle   though this 
	fisher 	1 

framework can obviously accommodate more complex systems. 
thus  the simple deliberation mechanism in concurrent 
metatem  see fig. i  is replaced by a two stage process whereby the function pd is used to generate a list of intentions and the function pi is used to choose appropriate actions  based upon this intention list. the implementation of these priority functions may be carried out in a number of ways  for example via meta-level metatem rules  barringer 
et al 1  directly provided by the user. 
　in this way a language for implementing simple bdi-like systems can be provided by extending concurrent m e t a t e m with belief elements and user definable priority functions for use in deliberation. note that the more complex elements of practical bdi systems may also be represented in this language. for example  in  mulder et a/.  1   an implementation of a simplified version of the prs is provided  incorporating a range of low-level details  such as the manipulation and interpretation of plan components. simply  dependencies between plans can be provided by asserting that if any sub-plan has not been constructed  the plan itself can not be completed  e.g. 

however  motivation for the work described in this paper is provided by the observation that such a representation of the prs can be improved  simply by extending concurrent m e t a t e m with elements from the bdi model. 
1 	analysis 
there are five notable points to make regarding this hybrid approach of extending executable temporal logic with aspects of the bdi model. 
　firstly  since the key elements added are the kd1 belief modality and the user defined priority functions  the concurrent metatem execution mechanism remains relatively unchanged. the efficiency of such an approach depends primarily on the complexity of the priority functions provided. for example  if a simple age-ordering function is used  then the speed is comparable with that of concurrent metatem. 
　a variety of deliberation mechanisms can be represented by the use of user definable priority functions within the execution mechanism. the constraints upon this are the complexity of evaluating such functions and the expressive power of the logical notation. regarding the latter  the logical rule form is as expressive as full temporal logic and so a wide variety of functions can potentially be provided. 
　for this hybrid approach a formal semantics can be developed  though it would be parameterised by the semantics of the priority functions. if only sequences of actions undertaken are considered  then executions represent appropriate models for the bdi logics  rao  1b . 
1 	cognitive modeling 
　this approach provides increased expressive power. not only can a variety of priority functions be defined  but additional elements of concurrent m e t a t e m   such as multithreading and disjunctive rules  can potentially be incorporated. 
　finally  while there are no explicit axioms linking  say  beliefs and intentions  as are often found in theoretical works concerning bdi   rules in the program can be used to partially provide these  for example links beliefs and desires  eventualities . 
1 	conclusions and future work 
in this paper  we have described an extension to fisher's concurrent m e t a t e m language that presents the possibility of implementing bdi-like systems using a form of executable multi-modal logic. while we do not claim that all bdi systems can be implemented using this approach  we believe a significant range of applications can be  providing the priority functions defined are not excessively complex. 
　the key observations from this work are that  in bdi systems  beliefs are primitive and distinct  while desires and intentions can essentially be represented as the same kind of entities. this  together with the observation that desires/intentions correspond  in many respects  to eventualities in temporal logic  allows the definition of basic bdi entities within concurrent metatem. thus  this work separates the basic elements of the model  beliefs and desires  from the mechanisms for manipulating these and deciding how to act  deliberation . 
　while this approach will not be as efficient as directly implemented bdi systems  such as the prs  it provides the opportunity at least for prototyping of bdi systems. the execution of temporal logic through concurrent m e t a t e m is well understood and  although the extended language requires the execution of a multi-modal logic  it remains a relatively inexpensive extension. as execution at an attempt to construct a model  rather than a complete theorem-proving process  it represents a relatively cheap mechanism for animating a specification. at the other extreme  it is difficult to see how the multi-modal bdi logic from  rao  1b  could be directly executed. 
　our future work concerns three areas: extended languages; refined priority functions; and expanded formal semantics. as mentioned above  there are elements of concurrent m e t a t e m that are not required in the bdi model. it is thus interesting to consider how these elements could be used in the framework described here. also  once such a system is produced  it is relatively easy to extend it with the other elements of concurrent m e t a t e m   such as cloning and grouping. the definition of a range of detailed deliberation strategies  via appropriate priority functions  is another obvious direction. finally  the temporal semantics of concurrent m e t a t e m must be adapted to fully incorporate the above extensions. 
