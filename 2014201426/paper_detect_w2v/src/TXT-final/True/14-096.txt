ion from the procedures which handle the examples. further work proceeds by incrementally adding new cases  generalizing the results of each attempt. 
 supported by own contact w1-c-1. and darpa contract n1-
 1-c-1.  
tinker is my first attempt at building a complete programming environment which takes this examplebased methodology seriously. when you want to define a new procedure  you present examples of the data on which the procedure operates. as you perform each step of the procedure  tinker shows what happens on the particular examples  and remembers the steps to construct a generalized procedure. a set of several examples can be given  each illustrating an important case for the resulting program. with tinker  testing a program happens while you write it  rather than afterward. 
tinker does not do what is sometimes called programming by example  in the sense of trying to guess what the definition of a procedure is from a 
presentation of the input-output history of the procedure. currently  the user must direct tinker in performing each step of the procedure. tinker's value lies in showing the programmer the results of all the intermediate steps on examples  making it much easier to detect bugs and understand the program's performance. tinker also has the potential for supplying a friendly user interface for program understanding systems and intelligent program editors. 
tinker is implemented on the mit lisp machine  a personal computer with a high-resolution graphics display and pointing device tinker takes advantage of these capabilities to present a convenient interface to the user. multiple windows display a snapshot of the computation  source code for programs  typed input  error messages  printed output  and graphics. tinker interacts with the user primarily by using menus  requiring much less typing than conventional systems. 

1 
