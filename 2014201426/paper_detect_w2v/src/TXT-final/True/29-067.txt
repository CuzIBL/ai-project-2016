 
we propose a solution technique for scheduling and constraint satisfaction problems that combines backtracking-free constructive methods and local search techniques. our technique incrementally constructs the solution  performing a local search on partial solutions each time the construction reaches a dead-end. local search on the space of partial solutions is guided by a cost function based on three components: the distance to feasibility of the partial solution  a look-ahead factor  and  for optimization problems  a lower bound of the objective function. in order to improve search effectiveness  we make use of an adaptive relaxation of constraints and an interleaving of different lookahead factors. the new technique has been successfully experimented on two real-life problems: university course scheduling and sport tournament scheduling. 
1 	introduction 
the solution techniques for scheduling and constraint satisfaction problems appearing in the recent ai literature can be roughly divided into two main branches. on one side  constructive methods build the solution step by step by adding at each step a new piece to the partial solution constructed so far. each step generally consists in assigning a value to a variable out of its domain. on the other side  selective methods explore the search space composed only by complete solutions  in which all variables are assigned a value. 
　constructive algorithms usually involve some heuristics for making the most promising choice at each step; such heuristics generally include some form of look-ahead mechanism  which takes into account the possible repercussions of the current choice on future steps. if the construction reaches a dead-end  i.e. there is no possible value for the current variable  a different partial solution is considered. in particular  backtracking-based methods  e.g. forward checking and backjumping  prosser  
1   may involve the exhaustive exploration of the 
1 	planning and scheduling 
search space and are usually complete  that is  they always find a solution  if it exists  and they find the optimal one  for optimization problems. backtracking-free constructive algorithms instead make use only of some limited change in the partial solution  based on heuristics  in order to go around dead-end situations. 
　among selective methods  one main branch of investigation concerns local search techniques. a local search algorithm  starting from an initial solution  which can be obtained with some other technique or generated at random  enters in a loop that navigates the search space  stepping from one solution to one of its neighbors. the neighborhood is composed by the solutions that can be obtained by a local change from the current solution. changes  called moves  are selected based on the number of violated constraints  i.e. the so-called distance to feasibility  and -for optimization problems- based also on the objective function of the problem. the structure of moves depends on the specific problem; for example it can be the change of the value of one single variable or the swap of the values of two different variables. most common local search procedures are hill climbing  simulated annealing  and tabu search. 
　in this paper  we propose a technique that combines constructive backtracking-free algorithms and local search methods. our technique acts like a constructive one until a dead-end is reached. at this point  it performs a local search phase which makes local changes on the current partial solution. thereafter  the construction continues up to the next dead-end. the whole procedure stops either when a full solution is reached  positive answer  or when a predetermined number of local search phases have being accomplished  negative answer . 
　the idea of revising the solution while constructing it is definitively not new. in fact  it is both long-standing and well established; for example  it is known in expert system literature under the name of propose and revise. nevertheless  our approach differs from previous ones in at least two aspects: 
1. it revises the partial solution by making use of a full run of local search  instead of a fixed number of changes. in addition  it relies on well-studied search procedures  whose good behavior has been verified in various applications  rather than using only ad 
　
hoc rules  designed only for a specific problem. 
1. local changes are selected with the additional objective of improving the possibility of the partial solution to be completed. that is  local search is driven not only by the feasibility  and optimality  of the current partial solution  but also by what we call the look-ahead factor. furthermore  in order to make local search effective  the respective weight given to the three different components of the cost function that guides local search -feasibility  optimality  and look-ahead- is dynamically changed. 
　the paper is organized as follows. section 1 introduces our search technique and its relevant features. sections 1 and 1 illustrate our case studies  namely the course timetabling problem and the tournament scheduling problem; moreover  they discuss the application of the technique to these problems and the related experimental results. section 1 discusses related work. finally  conclusions are drawn in section 1. 
1 	the technique 
we assume  for simplicity  that the problem consists in assigning to a set of variables 
sociated domains 	 for 
i = 1   . . .   n   subject to a set of constraints. the problem may also include an objective function to minimize. thus  our technique is applicable to both search and optimization problems. 
　our algorithm is shown in figure 1. intuitively  it is a backtracking-free constructive method which performs a 
　local search whenever it reaches a dead-end. 
　a concrete form of the algorithm is obtained by specifying:  i  the variable ordering procedure  selectvariable    ii  the value selection procedure  assignvalue    iii  the local search procedure and the neighborhood relation  selectmove   and  iv  the score function that we use to drive the local search  selectmove and improves . 
　the choices involved at points  i - iv  depend on the problem under investigation. we now discuss some general guidelines which can be stated for all problems. 
1 	score function 
in general  local search techniques rely on a score function that assesses the quality of each solution. in search problems  such function counts the number of constraint violations  thus measuring the distance to feasibility. for optimization problems  it also takes into account the objective function of the problem. therefore  in the general case  the score function consists of a weighted sum of these two components. 
　in our case  the function also includes a look-ahead factor  see section 1 . furthermore  being computed on partial solutions  only constraints regarding the instantiated variables are taken into account. for the same reason  the objective function is not computed exactly  but it is generally estimated using a lower bound  in a similar way as branch-and-bound procedures . 

figure 1: the abstract algorithm 
　therefore  our score function is a weighted sum of three components: the number of violations of constraints associated with the instantiated variables  the upper bound of the objective function  and the lookahead factor. 
1 	adaptive relaxation of constraints 
the choice of the weights of the score function is crucial for the effectiveness of local search. for instance  the use of a very high weight for constraint violations ensures that the number of infeasibility is never increased. however  such a choice has the drawback of making the search to be easily trapped on local minima. to overcome this problem  gendreau et al.  employ an adaptive relaxation of constraints. that is  the weight of constraints is adjusted based on the number of their violations in the most recent iterations. more specifically  for each kind of constraints  if there are no violations of constraints of that kind for a given number of iterations its weight is reduced; conversely  if all solutions have that kind of infeasibility  then its weight is increased. 
　within our framework  assigning a fixed high value to feasibility would result in moving on feasible partial solutions  since search starts from a feasible one. experiments show that the navigation through only feasible partial solutions does not effectively visit the search space  and the problem on being trapped on local minima is extremely critical. therefore  we employ the above idea for our local search phase  and we dynamically adjust the weight of the constraint violations component of the score function. in details  if all solutions are feasible w.r.t. that component for k consecutive it-
	schaerf 	1 
　
erations  then the weight of the component is halved; conversely  if all k consecutive solutions are infeasible  then the weight is doubled  k = 1 in our experiments . 
1 	look-ahead factor 
many constructive techniques guide variable selection and/or value assignment by using a look-ahead mechanism which estimates the likelihood of the remaining subproblem to be solvable  see e.g.  gent et a/.  1  . 
　frost and dechter  experiment with four different look-ahead heuristics  and they show that minconflicts  mc  is the most effective one. mc consists in simply summing up the number of available values for all the uninstantiated variables. 
　we consider mc and a variant of it  in which the sum is not extended to all the remaining variables  but only to a limited number of them  specifically those that are going to be scheduled in the immediate future. we call this heuristics short-term min-conflicts  smc . 
we therefore consider two forms of look-ahead factor: 
mc and smc. our experiments in section 1 show that the interleaving of the two heuristics gives the most effective results. intuitively  we start each local search phase by using the  broad-minded  mc  and we move to the  narrow-minded  smc if the previous one does not succeed to find a value for the next variables to be scheduled. 
1 	course timetabling problem 
the course timetabling problem consists in the weekly scheduling for all the lectures of a set of university courses in a given set of classrooms  avoiding the overlaps of lectures having common students. we consider the basic search problem  see  schaerf  1   which has an integer programming formulation with linear constraints. many variants of this problem have been proposed in the literature  which involve more complex constraints and usually consider an objective function to minimize. 
1 	problem definition 
there are q courses k1  .. kq  and each course ki consists of ki lectures  and p periods l..p. for all 
all lectures  must be assigned to a period k in such a way that the following constraints are satisfied: 
conflicts: there are c curricula s1 ...  sc  which are groups of courses that have common students. lectures of courses in must be all scheduled at different times  for each 
availabilities: there is an availability binary matrix a of size q x p. if  =1 then lectures of course i cannot be scheduled at period j. 
rooms: there are r rooms available. at most r lectures can be scheduled at period k  for each 
　the problem can be shown np-complete through a simple reduction from the graph coloring problem. 
1 	planning and scheduling 
1 	application of the technique 
in order to apply our technique to this problem  we consider each lecture as a variable whose value represents the period at which the lecture takes place. the number of variables is therefore equal to  and they all have the same domain i..p. 
　each constructive step consists in assigning a lecture to a period. a local move consists in rescheduling a lecture in a different period to which no other lecture of the same course is assigned. during construction we enforce all constraints  whereas during search we include the count of all their violations in the score function. 
　courses are ordered statically based on predetermined criteria. in particular  they are grouped based on the curricula  and groups are ordered by their size and their number of availabilities. we do not use any specific strategy for value selection  but we simply assign the first feasible one  thus delegating all look-ahead activity to the local search phase. moreover  being a search problem  there is no objective function to minimize. 
　regarding the look-ahead factor  the mc heuristic results in counting the number of available periods for all unscheduled lectures  whereas smc counts them only for the next course to be scheduled. 
　in addition  if a lecture of a given course cannot be scheduled  all lectures of that course are removed and the search works on the partial solution made only by the lectures of the courses completely scheduled. 
1 	experimental results 
we experiment on problems of two different sizes. we created two test examples: test 1 has 1 courses  1 lectures   1 rooms and 1 periods; test 1 has 1 courses  1 lectures   1 rooms and 1 periods. conflicts among courses in the test examples are taken from real cases. in order to create different problem instances  availabilities and some other conflicts are assigned randomly  still keeping the problem solvable. 
　we have implemented three versions of our technique based on three different local search techniques: random hill climbing  rhc   steepest hill climbing  shc   and min-conflict hill climbing  mchc   minton et a/.  1 . 
　rhc draws at each iteration a random move  shc visits at each iteration the whole neighborhood looking for the move that gives the best improvement  arbitrarily breaking ties   mchc looks randomly for a lecture that causes at least one conflict and moves it to the period in which it creates the minimum number of conflicts  arbitrarily breaking ties . all three methods accept the selected move only if the cost function is improved or is left at the same value. this means that they never perform worsening moves  although they can perform sideways moves. therefore  they have the capability of navigating plateaus  whereas they are all trapped by strict local minima. for all three of them the stop criterion is based on the number of iterations without improving the value of the best solution. shc stops also when it reaches a strict local minimum  the other two methods don't do it because they do not recognize such a situation. 
　we experiment with both the pure local search methods and our technique that combines them with constructive methods. we make use of adaptive relaxation of constraints  in such a way that  the three types of constraints -availabilities  conflicts  and rooms- are associated with an independent dynamic weight which varies as explained in section 1. 
　more sophisticated local search techniques  like tabu search  schaerf  1b   also accept worsening moves and allow one to escape from local minima  without resorting to relaxation . we do not discuss their use in this paper because their study is still on-going; however  preliminary results with tabu search did not give any improvement on those presented in this section. 
　we have also implemented two complete backtracking methods: a basic chronological backtracking  cb  and a forward checking with dynamic variable selection mechanisms  fc . 
　we create 1 solvable instances for test 1 and 1 for test 1. we fix the running time  1 seconds for instances of test 1 and 1 seconds for instances of test 1   and we performe as many iterations as possible in that time-frame. 
　for the look-ahead factor  we use an interleaving of the two methods  as mentioned in section 1. in particular  we use mc for the first time the construction stops at a level; if after local search it is still not possible to schedule all lectures of the next course  for all the subsequent runs at the same level we use smc. 
　table 1 shows the percentage of the instances solved for each method. the results highlight a clear dominance of combined methods over pure local search ones. they also show that the  winning  algorithm for this problem among local search methods is mchc  and among combined ones is construction + mchc. it also shows that shc works quite well for the test 1  but not for test 1. this is due to the fact that for large instances the exploration of the full neighborhood is generally too time consuming. both of the backtracking-based methods weren't able to produce a solution even in 1 hours for some instances of test 1. 
　tables 1 and 1 focus on specific features of the technique  using construction + mchc . 
　table 1 illustrates the importance of two types of lookahead mechanisms. the first entry shows the resultwithout any look-ahead factor. the subsequent two entries regard each method used in isolation. the last line is repeated from table 1. it emerges that mc performances deteriorate increasing the size of the instance  whereas performances of smc are not negatively influenced by the number of courses. 
　table 1 focuses on the importance of adaptive relaxation. the first line shows the results without adaptive relaxation  with a fixed high weight for infeasibilities. the second line shows the results using one single dynamic weight instead of three independent ones. table 1 shows that adaptive relaxation is absolutely necessary  whereas for this specific problem  using independent weight gives only a limited advantage. 

table 1: general results 

table 1: look-ahead strategy results 
1 	tournament scheduling 
we consider the problem of scheduling the matches of a round robin tournament. the problem consists in assigning matches to rounds in such a way that every team matches every other one  all teams play every round with a different opponent  either home or away   and various other constraints are satisfied. 
　constraints involve the availability of stadia in given rounds  forbidden rounds for specific matches  and sharing of stadia. for the sake of brevity  we do not supply their complete definition  that can be found in ischreuder  1 . we just mention that constraints are split into hard  requirements  and soft  wishes  ones: the former ones must be necessarily satisfied by the solution  the latter ones instead can be violated  and they contribute  with their associated penalty  to the objective 
function to minimize. 
　this problem is tackled relying on a so-called tournament pattern  which is a complete tournament where teams are replaced by numbers. given a pattern  the problem consists in finding the assignment of real teams to distinct numbers in the pattern that satisfies hard constraints and minimizes the total penalty associated 

table 1: adaptive relaxation results 
	schaerf 	1 
with soft constraints. this problem has been proved np-complete in  schaerf  1a . 
　schreuder  developed an incomplete algorithm that solves an instance of this problem with 1 teams in about 1 minutes of cpu time. instances of the same size are solved optimally using a diagnostic system in  bakker et a/.  1  in 1 hours. using a specialized depth-first 
branch-and-bound algorithm  schaerf  1a  solves optimally instances of such size in about 1 minutes. 
　although each instance can be solved optimally in reasonable time  in order to solve a real case  the run must be repeated several times so as to get sensibility on constraints and penalties. therefore  it is necessary to have a fast method  that allows the user to play interactively with the constraints and the corresponding solutions. 
　a local search technique can be used to this aim. however  we notice that in real cases  there are a few teams that are highly constrained  and therefore a few assignments that are critical. the problem thus shows a highdegree of asymmetry. in asymmetric cases a constructive method that deals in the beginning with the most difficult assignments is more promising than a local search method. in fact  experiments in section 1 confirm that our technique outperforms hill climbing methods. 
1 	application 
given an instance with n teams  a solution to this problem is an assignment of a distinct number  i.e. a value  in l..n to each team  i.e. a variable . a constructive step consists in choosing a new team and assigning to it an unused number. numbers are assigned based on an upper bound of the objective function  which is obtained summing the penalty associated with the soft constraints on already scheduled teams and an estimation of the penalty of the other constraints. a local move on a complete solution consists in swapping the assignments given to two different teams. for partial solutions  a 
move consists in assigning a different unused number to the selected team. 
　regarding the look-ahead factor  the mc function is the sum of the available numbers among the unused ones for each of the remaining teams. the smc counts only the available numbers for the next team. the look-ahead factor is assigned a high weight w.r.t. soft constraints. 
　teams are statically split into two groups:  i  top teams: the strongest teams  upon whose matches var-
ious kinds of constraints exists;  ii  regular teams  upon which regular availability constraints are posed. inside each group  teams are also statically grouped based on the effective number of constraints in the instance under examination. 
1 	experimental results 
in the same way as section 1  we consider data from a real case  1 teams  to which we apply some random perturbations in order to obtain different instances. 
　table 1 shows the results for 1 instances. for each method parameters are set in such a way that each run lasts for 1 seconds on each instance. 
1 	planning and scheduling 

table 1: general results 
　these results show a clear dominance of our technique upon hill climbing methods for this problem. it also shows  however  that the constructive techniques do not necessarily find better solutions. this is due to the fact that they focus more on the look-ahead factor  rather then on the objective function. 
1 	related work 
zhang and zhang  combine constructive and local search methods in a different way. their method finds a partial solution using local search  and then explores all its possible completions using a backtracking-based algorithm. therefore  they also make use of local search on partial solutions  but they have no notion similar to our look-ahead factor. 
　glover et al.  use a similar approach to solve the graph coloring problem. their method starts with a complete solution  found with a high-quality heuristics. thereafter  it alternates a destructive phase  in which some nodes are uncolored  and a constructive one  in which nodes are colored. the uncoloring is guided by an estimation of the depth and the width of the current local minimum. 
　solotorevsky et al  employ a propose and revise rule-based approach to the course timetabling problem. when the construction reaches a dead-end  the so-called local-change rules come into play so as to find a possible assignment for the activity unscheduled. however  they perform only a single step before restarting the construction  and their aim is only to accommodate the pending activity  without any look-ahead mechanism. 
　a common approach is to use a heuristic constructive method for finding the initial solution and a local search technique to improve it. for example  yoshikawa et al.  solve a timetabling problem combining a constructive method based on arc-consistency with a min-conflict hill climbing phase. the construction goes all the way to the complete solution  accepting also constraint violations. the hill climbing phase improves the objective function of the problem reducing the overall penalty. 
　regarding the adaptive relaxation  selman and kautz  use a similar scheme for the satisfiability problem. in their work  an independent dynamic weight is given to each single clause in the formula. such 'fine grain weighting is necessary for dealing with problems with strong asymmetries. in our technique however  asymmetries are dealt with by variable ordering in the constructive phase. additional experiments show that if we distribute constraints in the course scheduling problem in an asymmetric way among different courses  performances of pure local search methods drastically deteriorate  whereas performances of combined methods remain  if courses are suitably ordered  at a comparable level. 
　morris  and yugami et al.   use local search techniques  relying on relaxing some constraints when a local minimum is reached. differently from their work  our adaptive relaxation scheme is not a method to deal with local minima  which are not necessarily perceived   but is a general search guide  which makes the overall search more effective. 
1 	discussion and conclusions 
we have proposed a solution technique for scheduling and constraint satisfaction problems based in the combination of backtracking-free construction and local search revision with look-ahead capabilities. our method arises from well-established and long-standing ideas  bringing them together in a principled way  in order to achieve a general purpose technique. the technique turned out to be very effective for two np-complete scheduling problems. in addition  it has shown a good behavior in highly asymmetric problem instances  which are generally difficult to solve for local search methods. 
　one of the main advantages of local search techniques is that  giving the possibility to start the search from any solution  they easily allow for interactive maintenance of solutions. in fact  once a solution as been generated  it can be used as the starting point for a new search after some constraints have been  manually  modified. in order to retain such capability  we have included in our technique the ability to run local search on complete solutions. for the course scheduling problem  we have also added the possibility to manually unschedule some lectures and restart the process from the such partial solution in the new constraint setting. 
　for the future  we plan to experiment our technique on other problems  in order to better validate the overall idea and to gain a clearer understanding on which local search strategies fit best within the construction process in our approach. 
acknowledgements 
i wish to thank bruno errico for useful comments on an earlier draft of the paper. 
　this paper has been supported by asi  italian space agency  and by esprit project n. 1  dwq  foundations of data warehouse quality . 
