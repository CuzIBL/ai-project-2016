 
in this paper we introduce regression-based pre- and postdiction procedures for pmon  a nonmonotonic logic for action and change with explicit time. we also provide an in depth analysis of problems with regression that occur when nondeterministic actions are introduced. we do this by employing dijkstra's weakest liberal precondition operator  wlp. the presented work is related to recent work by lin in the situation calculus  and we identify and deal with three problems with his approach. our conjecture is that our approach can be mapped back to the situation calculus. 
1 	introduction 
the contributions of this paper are the following: 
regression-based pre- and postdiction procedures for pmon with metric time  and an in depth analysis of problems with regression that occur when nondeterministic actions are introduced. we also identify and deal with problems in previous work by lin . 
　lin  proposes a causal minimization framework in sitcalc  situation calculus   where effects of nondeterministic actions can be specified. he then identifies a class of such actions for which regression can be used as a reasoning mechanism. within the constraints of the sitcalc formalism  lin provides an elegant extension to handle nondeterminism  but one can probably do somewhat better. we will show this  using pmon as a vehicle. 
　pmon is a logic for action and change proposed by sandewall . pmon is proven to be correctly applicable to problems involving explicit time  contextdependent actions  nondeterministic actions and actions with duration. doherty  gives a first-order formulation of pmon  with a second-order circumscription axiom and shows that it is always possible to reduce the second-order theory to first-order logic. in  gustafsson 
   *this research has been supported by the swedish research council for engineering sciences  tfr  grants 1 and 1. 
and doherty  1  pmon is further extended to handle causal constraints. in this paper we will use a subset of pmon with metric time  natural numbers  and propositional fluents. 
　there are three problems with lin's proposal: first  he needs to explicitly enumerate all nondeterministic effects of an action in syntax  thus encountering a possible combinatorial explosion. secondly  he has to introduce an  oracle  predicate case  which  knows  the outcome of a nondeterministic action before it has occurred. the intuitive meaning of this oracle is unclear. thirdly  the effects of nondeterministic actions are not allowed to depend on the situation in which the action is invoked  for regression to work properly. 
　in pmon  we deal with each of the three problems in the following manner: the first is taken care of by the formalism  since nondeterministic effects can be represented succinctly. for the the second and third problem we rely on our minimization of change policy  which only allows an action to have certain effects if the corresponding condition is satisfied. this behavior is similar to the behavior of conditional statements in programming languages  which enables us to use a classical computer science tool  dijkstra's weakest liberal precondition operator  wlp  for regression  which  as it turns out  deals with the problems. 
　the comparison between our and and lin's approach will be informal due to the use of different time structures. we will  however  let lin's work guide the development of the results presented in this paper. 
1 	goal regression in sitcalc and lin's proposal 
initially  goal regression was developed as a plan synthesis method   waldinger  1    pednault  1  . reiter  provided a situation calculus account for goal regression with a completeness proof. reiter relies on his solution to the frame problem  in particular the successor state axioms  which are biconditional relations between the values of a fluent after the execution of an action  and the states before the action. the general form of 

these axioms  for every fluent r  is 

where poss a  s  is true if the action a is possible to execute in situation s  and h r  s  denotes that the fluent r is true in situation s. the formula  denotes the conditions under which action a will make r true in situation s  and  the conditions that will make 
r false. 
　by substituting fluents in the goal with the right hand side of the biconditional in the successor state axioms  the nesting of the do function can be reduced until there finally is a formula only mentioning the situation so  on which a classical atemporal theorem prover can be used. for planning purposes  reiter's approach relies on completely specified initial states  and cannot handle nondeterministic actions. 
　lin introduces a predicate caused which  assigns  truth values to fluents. in the minimization policy  the extension of caused is minimized and a no change premise is added to the theory. to illustrate his approach lin uses the dropping-a-pin-on-a-checkerboard example: 
there are three fluents  white  to denote that the pin is partially or completely within a white square   black  and holding  to denote that the pin is not on the checkerboard . there are two actions  drop  the pin is drop onto the checkerboard  and pickup. in this paper we will only consider the drop action  which is the only one with nondeterministic effects   which is formalized as follows: 
		 1  
the poss predicate is defined  with an action precondition axiom  as 

a problem with this is that the effects of the action have to be explicitly enumerated in the action definition. the number of disjuncts will grow exponentially in the number of fluents  and may become problematic in implementations. 
1 	pmon 
in pmon it is possible to model nondeterminism in a more succinct manner. we will present the parts of pmon relevant for this paper. extensions and details can be found in  doherty  1   
　we will use the language c which is a many-sorted first-order language. for the purpose of this paper we assume two sorts: a sort 1 for time and a sort f for propositional fluents. the sort t will be the set of natural numbers. 
　the language includes two predicate symbols  and occlude  both of type t x f. the numerals 1 1 ... and the symbols s and t  possibly subscripted  denote natural numbers  i.e. constants of type t  time points . 
　pmon is based on action scenario descriptions  scenarios   which are narratives with three components: obs  a set of observations stating the values of fluents at particular time points  act  a set of action laws  and scd  a set of schedule statements that state which and when  in time  actions occur in the scenario. 
example 1 a scenario where the pin initially was held over the checkerboard  then dropped and finally observed to be on a white square  and not on a black  is formalized as 
below  in  1   we will show how in a succinct way. 
　in lin's formalism h holding s  is a qualification of the action drop. to illustrate conditions for the action to have effects  context depency   we introduce over board  that denotes that drop only has effects if the pin is dropped on the board. such conditions can be modelled in sitcalc  but not in lin's framework. this will be further discussed below. 
h formulae and observations 
 boolean combinations of h literals  i.e. possibly negated atomic formulae   where every literal mentions the same time point  are called h formulae. an h formula  1  where every literal only mentions time point s  will sometimes be written 

in  1 . 
an 



that no matter which of up in a state satisfying end in state  
the conjugate 
are admissible. 
proposition 1 corollary 1 
proposition 1 terministic actions 1. 
then 
for arbitrary formulae and corollary 1. ministic actions. 
1 	regression 
with our definition wlp we can now construct regression procedures for pre- and postdiction in pmon. one single procedure for both pre- and postdiction does not exist  and we will argue that wlp is applicable for prediction  while wlp* should be used for postdiction. the way in which observations are handled also differs between the two. 
　with prediction we mean that  given a scenario  we want to know if a formula   holds after the actions of the scenario are executed. for postdiction we want which is returned by the algorithm. 
　the returned formula is a contradiction  which tells us that the goal  h 1 white   is not a consequence of the scenario. if the returned formula is a tautology  the goal is a consequent. the third case  when the formula is neither a contradiction  nor a tautology  implies that the formula is a condition at the initial time point for the scenario to entail the goal. 
　for the postdiction case  we start by taking the last observation and regress back to the initial time point. we are now interested in regression results that are implied by the conditions after the action is performed  

which coincide with our intuition. 
　the intuition for the difference of how observations are handled by the algorithms is that for prediction  we want observations to verify the computation results  i.e. to described state sets that are subsets of the regression result  and  for postdiction  the observation should filter out all state not being consistent with it. 
1 	conclusion and future work 
we have presented a computational strategy for prediction and postdiction for a large subset of pmon. the strategy is based on dijkstra's weakest liberal precondition operator. we have shown that wlp and its conjugate wlp* have different properties for nondeterministic scenarios and that the former is applicable for prediction  and the latter for postdiction. for deterministic scenarios  the two operators coincide  thus providing a formal foundation for generating successor state axioms. 
　the formalism used and the results provided in this paper deals with three problems identified in recent work by fangzhen lin. first  the choice of pmon deals with the problem of explicit enumeration of effects of nondeterministic actions. secondly  wlp enables regression over nondeterministic actions without any oracle features or transformations to deterministic action. thirdly  wlp handles nondeterministic actions with conditional effects properly. 
　we think that this approach is promising  and we will use wlp for implementations of a pmon planner  soon to appear online. 
acknowledgements 
thanks to patrick doherty  thomas drakengren  silvia coradeschi  and joakim gustafsson for help and comments. 
