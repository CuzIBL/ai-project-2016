 
　　the test  troubleshooting expert system tool  architecture greatly aided the development of tde  test development environment . in particular  the choice of a schematic as opposed to rule-based representation led to a knowledge base characterized by the use of domain-familiar concepts  and sufficient conceptual structure to facilitate several tde features  including knowledge base development through both directecfinterviews and the direct manipulation of icons; multiple knowledge-based browsing strategies; heuristic error analysis; and easily-unaerstooa debugging techniques. 
1. introduction 
　　test1  troubleshooting expert system tool  is an application shell  providing a domain-independent diagnostic problem-solver together with a library of schematic prototypes. these prototypes constitute the object types and the structure required by each domainspecific test knowledge base. several test applications  including those aimed at diagnosing engine problems  vax/vms performance  and factory floor machine failures are currently in development or field test. 
　　application shells allow developers to focus on knowledge acquisition  rather than on knowledge base design and problem-solving control issues of typically greater complexity. however  it is still a time-consuming process to interview experts and code a knowledge base. for this reason  several systems  including roget   ets  1  and more recently  more   and salt   nave looked at ways to interrogate experts under the assumption that a chosen underlying architecture can solve the problems of interest. 
　　tde  test development environment  similarly enables knowledge engineers and trained domain experts to interactively build knowledge bases that can be used by test. tde provides several advantages in comparison to more. in particular  it uses a problemsolving strategy that is more comprehensible to troubleshooting technicians in the manufacturing and customer service domains. it also addresses the need for knowledge acquisition systems to conform to the domain expert's desire to provide information as it comes to mind. lacking this capability  more struck users as rigid and tedious in its interrogation technique. 
　　tde knowledge bases represent the causal consequences of component and functional failures  failure-modes   in a manner similar to heracles   as well as diagnostic methods  including the effective ordering of diagnostic tests. tde acquires knowledge through automated interviews with domain domain experts. however  as a mixed-initiative workbench  tde enables developers to provide information as they wish  while at the same time offering guidance and direction as it is needed. a number of other tools that aid in knowledge base development and modification are provided 
the following sections examine three facets of 
tde: first  core concepts and the way they are used to build a knowledge base; second  knowledge-base modification; and finally debugging support. each section shows how tde design ana development was facilitated by features of the test architecture. 
1. core concepts 
　　knowledge acquisition is largely a matter of mapping the knowledge which supports expert decision making into the representations required by a problemsolving system. when there is a conceptual correspondence between these representational units and the terms with which experts understand their task and domain  mapping becomes a straightforward operation. in addition  conceptual correspondence makes direct-manipulation techniques readily available  and permits the system to easily guide users engaged in knowledge base development. 
　　in the following  it is shown that test concepts  as well as conceptual relations  are familiar within the troubleshooting domain  and  as a result  communication between test and system developers is facilitated. 
1. test concepts 
　　unlike rule-based diagnostic systems that have evolved from the mycin perspective  test uses a semantic network of schematic objects  or frames  to represent its key concepts. an attempt has been made to match these concepts to the ones operative for most troubleshooting technicians and many design engineers. most critical is the failure-mode. a failuremode represents a deviation of the unit under test from its standard of correct performance. failure-modes are arranged in a hierarchy. at the top of the hierarchy are observable failures of the entire unit  e.g. hot air out of 
	kahn 	1 
　　
an air conditioner. at the bottom of the hierarchy are failure-modes of individual components  e.g. a broken cooling unit. intermediate failure-modes typically represent functional failures which are causal consequences of component failures. many levels of intermediate failure-modes are common. 
　　failure-modes can be confirmed or rejected based on particular outcomes of tests. tests are distinct nodes in the network. other conceptual objects within test are decision-points  test-procedures  repairprocedures  rules  and parts  among others.  each of these concepts has an obvious mapping into the troubleshooting domain. rules in test represent a variety of contingent actions rather than evidence/belief propositions alone  as is typical in mycin-like diagnostic systems. 
1. using direct manipulation 
　　tde provides a straightforward mechanism for creating knowledge bases. within a workbench environment  icons representing tests domain-familiar objects are easily moved into a representation of the knowledge base. a failure-mode icon  for instance  may be manually linked to another indicating that it is a cause of the latter problem. 
　　networks built in this way may also be edited as copy  move  and delete operations are available. icon placement invokes prompts from tde for information that requires keyboard entry  such as failure-modes names. icons representing failure-modes and other key objects are located along the right edge of editing windows  see figure 1 1 through which the knowledge base may be viewed. while experienced users tend to use direct manipulation of graphic items as the preferred method  novice users of tde rely heavily on system-directed interrogation techniques  described further below. developers may move freely between system- and user-directed modes of operation. 
　　since the mapping between information provided and the underlying representation is direct  the system avoids the difficult problem of interpreting user intent when a mapping is required between inputs and internal representations. as the objects manipulated are the very objects that will appear in the knowledge base  there is similarly no issue of the developer being mystified as to the results of providing information to 
　　a key problem for direct-manipulation techniques is that of determining and displaying relevant objects and object relations in a manner that s focused around the needs of the users task. within tde  test provides a natural tripartite representational structure for constraining the display and manipulation of the knowledge base. 
　　

figure 1: screen layout for tde 
1 	knowledge acquisition 
　　
　　primary  secondary  and tertiary information can be distinguished within a test knowledge base. the primary core of a test knowledge base is a failuremode tree  as described above. other secondary information in the knowledge base - including tests  repairs  and rules associated with the selected failuremode - is clustered around each failure-mode. at the tertiary level  each of these objects has itself numerous attributes providing further descriptive and control information. 
　　tde takes advantage of this tripartite division. a global view or window provides a filtered perspective of the knowledge base. here failure-modes and the causal relations between them are displayed. a second window gives the user a local perspective into the secondary nodes clustered around a selected failuremode. finally  objects selected within these windows can be displayed with their full attributive detail in a third window.  see figure 1  
　　figure 1 shows three views into a knowledge base regarding air condition failures. in the global view  the failure-mode hierarchy is displayed. the hot-air failure-mode is shown to be due-to low-freon or a broken-cooling-unit. the hot-air failure-mode has been selected for further examination. consequently  secondary information local to it is displayed in the lower right. it is shown to have an associated test. if other secondary information  such as repairs or rules  
had been associated with the failure-mode they would be displayed here as well. all attributes of the selected object are displayed in a structured text-editing window to the lower left. the knowledge base is extended simply by moving more icons into the appropriate window and/or by responding to prompts associated with attribute fields displayed in the text-editing object window. 
1. guiding novice users 
　　tde also exploits the inherent tripartite structure of a test knowledge base to provide guidance to developers. each perspective delineates a natural line of interrogation. before asking detailed questions  tde will first flesh out the overall structure of the knowledge base as reflected in the global window. it will then seek to fill in detail at the level reflected in the local view. finally  as necessary  tde will cycle through the attribute slots of each object  completing the full picture. 
for example  tde would have asked first about potentially observable air conditioner problems that would signify some kind of malfunction. for each of these  it would attempt to find out their possible causes  as they would be considered by a technician engaged in troubleshooting the initial concern. for each of these failure-modes tde would inquire about associated diagnostic tests and repairs. it would then attempt to get additional attributive information on the reported failure-modes  repairs  and tests  as required. 
as information is provided in response to prompts  
tde represents it graphically. thus  the user can both see the system's interpretation of the information provided and follow the developing context in which further questions are asked. 
1. knowledge-base modification 
　　in addition to facilities for building up a knowledge base  as described above  tde offers further editing support. as developers make enhancements to preexisting systems  they need special tools to help avoid errors which frequently lead to flawed knowledge bases. typical errors include redundancy  incompleteness  and inconsistency. tde helps by providing the user with the ability to browse quickly for information already in the knowledge base  and by detecting certain kinds of hard or suspected errors. 
　　the explicit representation of causal and classificatory information in test enables approaches that would be precluded by classical rule-based diagnostic systems. 
1. browsing 
　　object classification  relational networks  and the maintenance of back-pointers within test enables multiple search techniques as well as efficient retrieval. as a result  tde can offer developers string search  network browsing  and schematic pattern matching. browsing facilities  such as these  are required when the user wants to confirm that a new  to be added  failure-mode is not already in the knowledge base  find a similar failure-mode which can be copied and edited to create the new object  or simply understand the content of what is already there. in a large knowledge base  it is impractical to browse without a means of directing attention to relevant segments of data. 
　　within tde  string search is used to match against the names of knowledge base objects. search of this kind is constrained by allowing the user to specify the type  class  of object  failure-mode  test  etc. . network browsing is used to examine objects within the knowledge base that are in a specified relation to a specified object  e.g. 'has-test voltage-meter . pattern matching is used to find objects with attribute values specified in the search template. in addition  inverse links maintained in the knowledge base enable tde to quickly point users to parts of the knowledge base that may be impacted by their modifications. 
1. error warnings 
　　when developing a knowledge base  the user may unknowingly duplicate a failure-mode by using a different name to refer to one already known. while this can't be entirely prevented  the availability of richly structured information in a test knowledge base enables tde to use heuristics to identify suspects. tde  for instance  monitors for failure-modes which have similar causes and consequents  or those that share the same test and repair procedure. isomorphic nodes within the knowledge-base network are typically unexpected and thus constitute grounds for suspicion. 
　　tde monitors for several other kinds of errors  as well. of particular interest are objects that are not properly linked into the knowledge base. in addition  failure-modes without causal  test  or repair information are noticed. violations of type restrictions associated with the attribute slots of each test object are also flagged. 
	kahn 	1 
1. debugging support 
　　the test knowledge base is used directly by the diagnostic problem-solver  the test interpreter . as a result  debugging is facilitated. for one  it is easy to move between editing and execution  as it is unnecessary to compile the knowledge base into a 
　　special form. secondly  it is easier to step  trace  modify and explain the program in respect to the use of the knowledge base than it would be if compilation into a runtime representation had been required. 
　　in order to ease debugging by non-programmers  the test problem-solver is designed to use the knowledge base in much the way an informed technician would proceed with fault-isolation. this again is made possible by structuring problem-solving around the high-order concepts represented in the knowledge base. the troubleshooting task proceeds by focusing on an observed or suspected failure-mode. an attempt is made to determine whether the failure-mode has occurred in the unit under test. if the failure-mode has occurred  or if its status remains unknown  then the possible causes of the failure-mode are investigated to see if they have occurred. the search process is guided by an underlying representation of the order in 
which diagnostic experts explore possible causes for identified failure-modes. heuristic rules may be inserted in the knowledge base to modify search behavior as runtime information is acquired. 
1. debugging techniques 
　　in debugging knowledge-based systems  it is desirable to have access dunng execution to everything the system has already concluded or come to know  as well as to its current hypotheses  planned tests  and queries. this allows the developer to notice when the system failed to conclude inferable information  is preparing to determine needless information  or acted incorrectly on known information. the test interpreter can provide this information on demand as the entire knowledge base is at its disposal. 
　　in order to get at information at the right time  it is necessary to allow breakpoints at conceptually relevant junctures. within the tde environment  it is desirable to pause as particular failure-modes become the focus of attention. since the problem-solver uses the knowledge base directly  developers can set breakpoints simply by toggling desired failure-modes. 
1. conclusion 
　　the test architecture greatly aided the development of tde. in particular  the choice of a schematic as opposed to rule-based representation led to a knowledge base characterized by the use of domain-familiar concepts  and sufficient conceptual structure to facilitate several tde features. while much of tde has been implemented  there is still much to do. during its continued development  users will be evaluating evolving prototypes. because knowledgeengineering needs cannot be fully predicted  we expect to learn of many new requirements for tde and perhaps test. 
1 	knowledge acquisition 
1. acknowledgments 
　　edwin h. breaux  peter deklerk  robert l. joseph  al kepner  and jeff pepper contributed to the development of ideas presented in this paper. many others have also been involved in the implementation of test and tde. 
