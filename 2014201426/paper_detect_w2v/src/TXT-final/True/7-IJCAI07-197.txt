
we introduce a new type of combinatorial auction that allows agents to bid for goods to buy  for goods to sell  and for transformations of goods. one such transformation can be seen as a step in a production process  so solving the auction requires choosing the sequence in which the accepted bids should be implemented. we introduce a bidding language for this type of auction and analyse the corresponding winner determination problem.
1 introduction
a combinatorial auction is an auction where bidders can buy  or sell  entire bundles of goods in a single transaction. although computationally very complex  selling items in bundles has the great advantage of eliminating the risk for a bidder of not being able to obtain complementary items at a reasonable price in a follow-up auction  think of a combinatorial auction for a pair of shoes  as opposed to two consecutive single-item auctions for each of the individual shoes . the study of the mathematical  game-theoretical and algorithmic properties of combinatorial auctions has recently become a popular research topic in ai. this is due not only to their relevance to important application areas such as electronic commerce or supply chain management  but also to the range of deep research questionsraised by this auction model. this paper introduces a generalisation of the standard model of combinatorial auctions and discusses the issues of bidding and winner determination.
¡¡winner determination is the problem  faced by the auctioneer  of choosing which goods to award to which bidder so as to maximise its revenue. bidding is the process of transmitting one's valuation function over the set of goods on offer to the auctioneer. in principle  it does not matter how the valuation function is being encoded  as long as sender  bidder  and receiver  auctioneer  agree on the semantics of what is being transmitted  i.e. as long as the auctioneer can understand the message s  sent by the bidder. in practice  however  the choice of bidding language is of central importance. early work on combinatorial auctions has typically ignored the issue of bidding languages. the standard assumption used to be that if a particular bidder submits several atomic bids  a bundle together with a proposed price   then the auctioneer may accept any set of bids from that bidder for which the bundles do not overlap  and charge the sum of the specified prices. this is now sometimes called the or-language. but other interpretations of a set of atomic bids are possible. for instance  we may take it to mean that the auctioneer may accept at most one bid per bidder; this is now known as the xor-language.
¡¡nisan's survey article   the reference work in the field of bidding languages  covers languages for direct singleunit combinatorial auctions. that is  the auctioneer is selling  rather than buying  goods  and all goods are distinguishable. our first aim in this paper is to generalise this to multi-unit combinatorial auctions. as a second generalisation  we show how to integrate direct and reverse auctions  i.e. the auctioneer will be able to both sell and buy goods within a single auction. as a third and final generalisation  we are going to show how to integrate the idea of transformability relationships between goods into our auction model  giovannucci et al.  1 . for instance  if the auctioneer is interested in obtaining cars  but is also able to transform various components into a working car  at a certain cost   then it may solicit bids offering both ready-made cars and individual components. we further extend the idea of these transformability relationships by allowing agents to also bid for transformation services  i.e. an agent may submit a bid offering to transform a certain set of goods into another set of goods. we call the resulting auction model mixed multi-unit combinatorial auctions  mmuca . these are not to be confused with double auctions  wurman et al.  1 . in particular  the order in which agents consume and produce goods is of central importance in our model and affects the definition of the winner determination problem.
¡¡the paper is organised as follows. in section 1 we define the notions of transformation and valuation over  multisets of  transformations  and we define an expressive bidding language to represent such valuations. section 1 discusses the winner determination problem for mmucas  including its computational complexity. finally  section 1 concludes with a discussion of related work and an outlook on future work.
1 bidding languages
in this section  we first define the notions of transformation and valuation over transformations  and then define a bidding language that can be used to transmit an agent's valuation  which may or may not be their true valuation  to the auctioneer. we also formally define the semantics of the language and introduce a number of additional language constructs that allow for the concise encoding of typical features of valuation functions. finally  we discuss the expressive power of the language.
1 transformations
let g be the finite set of all the types of goods under consideration. a transformation is a pair of multisets over g:  i o  ¡Ê ng ¡Á ng. an agent offering the transformation  i o  declares that it can deliver o after having received i. in our setting  bidders can offer any number of such transformations  including several copies of the same transformation. that is  agents will be negotiating over multisets of transformations d ¡Ê n ng¡Áng .
¡¡for example  { {} {a}   {b} {c} } means that the agent in question is able to deliver a  no input required  and that it is able to deliver c if provided with b. note that this is not the same as { {b} {a c} }. in the former case  if another agent is able to produce b if provided with a  we can get c from nothing; in the latter case this would not work.
¡¡we define a subsumption relation  over transformations as follows: . intuitively  this means that the second transformation is at least as good as the first  for the bidder   because you receive more and have to give away less. the following definition extends this subsumption relation to multisets of transformations. it applies to multisets of the same cardinality  where for each transformation in the first set there exists a  distinct  transformation in the second set subsuming the former.
definition 1  subsumption  let. we say that d is subsumed by   iff:
have the same cardinality:.
 ii  there exists a surjective mappingsuch that  for all transformations t ¡Ê d  we have.
for instance  using a simplified notation for the innermost sets   we have.
1 valuations
in an mmuca  agents negotiate over bundles of transforma-
tions. hence  a valuation v : n ng¡Áng  ¡ú r is a  typically partial  mapping from multisets of transformations to the real numbers. intuitively  v d  = p means that the agent equipped with valuation v is willing to make a payment of p in return for being allocated all the transformations in d  in case p is a negative number  this means that the agent will accept the deal if it receives an amount of |p| . for instance  v { {oven dough} {oven cake} }  =  1 means that i can produce a cake for 1 rupees if given an oven and some dough  and that i will return the oven again afterwards we write v d  = ¡Í to express that v is undefined over the multiset d. again intuitively  this means the agent would be unable to accept the corresponding deal. valuation functions can often be assumed to be both normalised and monotonic:
definition 1  normalised valuation  a valuation v is normalised iff v d  = 1 whenever i = o for all  i o  ¡Ê d.
that is  a valuation is normalised iff exchanging a multiset of items for an identical multiset does not incur any costs  this includes the special case of i = o = {}  i.e. the case of not exchanging anything at all . the next definitions refer to our subsumption relation   cf. definition 1 .
definition 1  monotonic valuation  a valuation v is monotonic iff whenever.
that is  an agent with a monotonic valuation does not mind taking on more goods and giving fewer away. any given valuation function can be turned into a monotonic valuation:1
definition 1  monotonic closure  the monotonic closure v  of a valuation v is defined as.
observe that there could be infinitely many bundles an agent may want to assign a  defined  value to. as we shall see in section 1  our bidding languages can only express valuations that are finitely-peaked  or that are the monotonic closure of a finitely-peaked valuation :
definition 1  finitely-peaked val.  a valuation v is finitelypeaked iff v is only defined over finite multisets of pairs of finite multisets andis finite.
1 atomic bids
an atomic bid bid { i1 o1  ...  in on } p  specifies a finite multiset of finite transformations and a price. to make the semantics of such an atomic bid precise  we need to decide whether or not we want to make a free disposal assumption. we can distinguish two types of free disposal:
  free disposal at the bidder's side means that a bidder would always be prepared to accept more goods and give fewer goods away  without requiring a change in payment. this affects the definition of the valuation functions used by bidders.
  free disposal at the auctioneer'sside means that the auctioneer can freely dispose of additional goods  i.e. accept more and give away fewer of them. this affects the definition of what constitutes a valid solution to the winner determination problem  see section 1 .
under the assumption of free disposal at the bidder's side  the bid bid = bid d p  defines the following valuation:

to obtain the valuation function defined by the same bid without the free disposal assumption  simply replace  in the above definition by equality.
1 combinations of bids
a suitable bidding language should allow a bidder to encode choices between alternative bids and the like. to this end  several operators for combining bids have been introduced in the literature  nisan  1   which we are going to adapt to our purposes here. informally  an or-combination of several bids signifies that the bidder would be happy to accept any number of the sub-bids specified  if paid the sum of the associated prices. an xor-combination of bids expresses that the bidder is prepared to accept at most one of them. we also suggest the use of an implies-operator to express that accepting one bid forces the auctioneer to also take the second. we shall take an and-combination to mean that the bidder will only accept the respective sub-bids together.
¡¡as it turns out  while all these operators are very useful for specifying typical valuations in a concise manner  any complex bid can alternatively be represented by an xorcombination of atomic bids. to simplify presentation  rather than specifying the exact semantics of all of our operators directly  we are simply going to show how any bid can be translated into such a normal form. firstly  any occurrences of implies and or can be eliminated by applying the following rewrite rules:
x implies y   x and y   xor y x or y  x xor y xor  x and y  
note that for single-unit auctions  or cannot be translated into xor like this  if x and y overlap  then they cannot be accepted together; in an mmuca this depends on the supply of the auctioneer . next we show how to distribute and over xor  so as to push and-operatorsto the inside of a formula:
 x xor y   and z   x and z  xor  y and z 
finally  we need to define how to turn an and-combination of atomic bids into a single atomic bid:
bid d p  and bid  bid
it is not difficult to see that these rewrite rules together allow us to translate any expression of the bidding language into an equivalent xor-combination of atomic bids. we also call this the xor-language. to formally define the semantics of this language  it suffices to define the semantics of the xoroperator. suppose we are given n bids bidi  with i ¡Ê {1..n}. let bid = bid1 xor ¡¤¡¤¡¤ xor bidn. this bid defines the following valuation:
	vbid d 	=	max{vbidi d  | i ¡Ê {1..n}}
that is  xor simply selects the atomic bid corresponding to the valuation giving maximum profit for the auctioneer.
1 representing quantity ranges
as we are going to see in the next section  the xor-language is expressive enough to describe any  finitely-peaked  valuation. nevertheless  it may not be possible to express a given valuation in a succinct manner. from a practical point of view  it is therefore useful to introduce additional constructs that allow us to express typical features more succinctly. here we consider the case of quantity ranges: we want to be able to express that a certain number of copies of the same transformation are acceptable to a bidder.
¡¡let n ¡Ê n. to express that up to n copies of the same bid are acceptable  we use the following notation:
bid	bid or ¡¤¡¤¡¤ or bid  n times	
this allows us to express bundling constraints in a concise manner: the bid  {a a a b}  1 ¡Ü1 expresses that we can sell up to 1 packages containing three items of type a and one item of type b each  for 1 rupees a package  for simplicity  we omit o here . we also use the following shorthand:
bid	bid and ¡¤¡¤¡¤ and bid  
now we can express quantity ranges. let n1 n1 ¡Ê n with 1   n1   n1. the following expression says that we may accept between n1 and n1 copies of the same bid:
	bid n1 n1 	=	bid¡Ü n1 n1  implies bidn1
these constructs also allow us to express important concepts such as quantity discounts in a concise manner. for instance  the bid   a 1 ¡Ü1 implies  a 1  xor  a 1 ¡Ü1 says that we are prepared to buy up to 1 items of type a for 1 rupees each  and then up to 1 more for 1 rupees each.
1 expressive power
next we are going to settle the precise expressive power of the xor-language  and thereby of the full bidding language. we have to distinguish two cases  as we have defined the semantics of the language both with and without free disposal.
proposition 1 the xor-language without free disposal can represent all finitely-peaked valuations  and only those.
proof. let v be any finitely-peaked valuation. to express v in the xor-language  we first compose one atomic bid for each
d = { i1 o1  ...  in on } with:
bid
joining all these bids together in one large xor-combination yields a bid that expresses v. vice versa  it is clear that the xor-language cannot express any valuation that is not finitely-peaked.	
proposition 1 the xor-language with free disposal can represent all valuations that are the monotonic closure of a finitely-peaked valuation  and only those.
proof. the construction of a bid representing any given valuation works in analogy to the proof of proposition 1. note that for the semantics with free disposal we precisely obtain the monotonic closure of the valuation we would get if we were to drop the free disposal assumption. 
these results correspond to the expressive power results for the standard xor-language for direct single-unit combinatorial auctions. with free disposal  the standard assumption   the xor-language can express all monotonic valuations  nisan  1 ; and without that assumption it can represent the complete range of valuations  note that any valuation is finitely-peaked if we move from multisets to sets .
1 winner determination
in this section  we define the winner determination problem  wdp  for mmucas. for lack of space we only give the definition for the case of free disposal  at the side of the auctioneer   but this is easily adapted to the case without free disposal. we first give an informal outline of the definition  then a formal definition  and finally a formulation using integer programming  providing a basis for implementation. we also establish the computational complexity of the wdp and briefly comment on mechanism design issues.
1 informal definition
the input to the wdp consists of a complex bid expression for each bidder  a multiset uin of goods the auctioneer holds to begin with  and a multiset uout of goods the auctioneer expects to end up with.
¡¡in standard combinatorial auctions  a solution to the wdp is a set of atomic bids to accept. in our setting  however  the order in which the auctioneer  uses  the accepted transformations matters. for instance  if the auctioneer holds a to begin with  then checking whether accepting the two bids bid1 =  {a} {b} 1  and bid1 =  {b} {c} 1  is feasible involves realising that we have to use bid1 before bid1. thus  a solution to the wdp will be a sequence of transformations. a valid solution has to meet two conditions:
 1  bidder constraints: the multiset of transformations in the sequence has to respect the bids submitted by the bidders. this is a standard requirement. for instance  if a bidder submits an xor-combination of transformations  at most one of them may be accepted.
 1  auctioneer constraints: the sequence of transformations has to be implementable:  a  check that uin is a superset of the input set of the first transformation;  b  then update the set of goods held by the auctioneer after each transformation and check that it is a superset of the input set of the next transformation;  c  finally check that the set of items held by the auctioneerin the end is a superset of uout. this requirement is specific to mmucas.
an optimal solution is a valid solution that maximises the sum of prices associated with the atomic bids selected.
1 formal definition
for the formal definition of the wdp  we restrict ourselves to bids in the xor-language  which is known to be fully expressive  over finitely-peaked valuations . for each bidder i  let bidij be the jth atomic bid occurring within the xorbid submitted by i. recall that each atomic bid consists of a multiset of transformations and a price: bidij =  dij pij   where dij ¡Ê n ng¡Áng  and pij ¡Ê r. for each bidij  let tijk be a unique label for the kth transformation in dij  for some arbitrary but fixed ordering of dij . let  iijk oijk  be the actual transformation labelled by tijk. finally  let t be the set of all tijk; that is  |t| is the overall number of transformations mentioned anywhere in the bids.
¡¡the auctioneer has to decide which transformations to accept and in which order to implement them. thus  an allocation sequence ¦²  which will not necessarily be a valid solution  is a total ordering of a subset of t. we write tijk ¡Ê ¦² to say that the kth transformation in the jth atomic bid of bidder i has been selected. furthermore  let  be the mth transformation in the sequence ¦². that is  we have two ways of referring to a transformation: by its position in the collection of bids received  tijk  and by its position in the allocation sequence  if selected at all .
¡¡given ¦² we can obtain the set of goods held by the auctioneer after each transformation. for instance  say that the auctioneer begins with uin = {a a d d}. if we apply the first transformation  i1 o1  =  {a a} {c}   from two units of a produce one unit of c   the auctioneer ends up with m1 = {c d d}. formally  we can express this operation as an equation over multisets:
m1 g  = uin g  + o1 g    i1 g 
the application of the transformationis possible only because two units of good a are available. this condition maps to: uin g  ¡Ý i1 g 
let mm ¡Ê ng be the goods held by the auctioneer after applying the mth transformation. we can generalise the two equations above as follows  let m1 = uin :
mm g  = mm 1 g  + om g    im g  1 mm 1 g  ¡Ý im g  1 we are now ready to define under what circumstances a sequence of transformations constitutes a valid solution:
definition 1  valid solution  given a multiset uin of available goods and a multiset uout of required goods  an allocation sequence ¦² for a given set of xor-bids over transformations tijk is said to be a valid solution iff:
 1  ¦² either contains all or none of the transformations belonging to the same atomic bid. that is  the semantics of the bid-operator is being respected:

 1  ¦² does not contain two transformationsbelonging to different atomic bids by the same bidder. that is  the semantics of the xor-operator is being respected:

 1  equations  1  and  1  hold for each transformation  and each good g ¡Ê g. this condition ensures that all transformations have enough input goods available.
 1  the set of goods held by the auctioneer after implementing the transformation sequence is a superset of the goods the auctioneer is expected to end up with:
m|¦²| g  ¡Ý uout g 
the revenue for the auctioneer associated with a valid solution ¦² is the sum of the prices associated with the selected atomic bids:. we are now ready to define the wdp for xor-bids:
definition 1  wdp  given a set of xor-bids and multisets uin and uout of initial and final goods  respectively  the winner determination problem is the problem of finding a valid solution ¦² that maximises revenue for the auctioneer.
1 integer programming formulation
we now show how to map the wdp defined above into integer programming  ip . our aim is to find a solution sequence composed of transformations that leads from the initial goods to the final goods. note that the length of the solution sequence can be at most equal to the overall number of offered transformations. therefore  the issue is to decide for each transformation whether it is selected for the solution sequence  and if so  to choose its position in the solution sequence. thus  we define a set of binary decision variables xmijk ¡Ê {1}  where xmijk takes on value 1 if the transformation tijk is selected at the mth position of the solution sequence  and 1 otherwise. here and in what follows  m always ranges from 1 to the overall number of transformations |t|; i ranges over all bidders; j ranges for each bidder i from 1 to the number of atomic bids submitted by i; and k ranges for each atomic bid j of bidder i from 1 to the number of transformation in that atomic bid.
¡¡we also introduce several sets of auxiliary binary decision variables: xm takes on value 1 iff any transition at all is selected at the mth position of the solution sequence; xijk takes on value 1 iff transition tijk is present anywhere in the sequence; and xij takes on value 1 iff any of the transformations in the jth atomic bid of bidder i are selected.
¡¡in what follows  we define the set of constraints that the solution sequence must fulfil:
 1  since each atomic bid is a bundle of transformations  we want to ensure that if a transformation in an atomic bid is selected for the solution  so are the rest of the transformations in that bid  cf. condition  1  of definition 1 : xij = xijk   ijk   1 
 1  we enforce that the atomic bids submitted by each bidder are exclusive  xor . this amounts to satisfying the following constraints  cf. condition  1  of definition 1 :
		 1 
 1  we enforce that a transformation can be selected at most for a single position in the solution sequence:
		 1 
 1  we also impose that at most one transformation is selected at each position of the sequence:
		 1 
 1  furthermore  there should be no gaps in the sequence: xm ¡Ý xm+1   m   1 
 1  next  we capture condition  1  of definition 1. firstly  the multiset of goods held by the auctioneer after performing m steps of the transformation sequence can be computed recursively  by equation  1   as follows:

	  g ¡Ê g   m 	 1 
that is  we treat each mm g  as an integer decision variable. we can now formulate the constraint enforcing that enough goods must be available at step m to perform the next transformation  cf. equation  1  :

 1  and finally  after having performed all the selected transformations  the set of goods held by the auctioneer must be a superset of the final goods uout  cf. condition  1  of definition 1 :
	m|t| g  ¡Ý uout g    g ¡Ê g 	 1 
this works correctly  because m|t| g  = mm g  for the highest m with xm = 1  cf. equations  1  and  1  .
now solving the wdp for mmucas with xor-bids amounts to solving the following integer program:
		subject to constraints  1 - 1 
finally  a valid solution according to definition 1 is obtained from the solution of the ip by making transition tijk the mth element of the solution sequence ¦² iff xmijk = 1.
¡¡observe that our proposed implementation can easily be amended so as to directly encode the constraints imposed by languageconstructs other than the xor-operator. this would remove the need for translating into the xor-language first and thereby greatly improve efficiency.
1 computational complexity
the  decision problem underlying the  wdp for standard combinatorial auctions is known to be np-complete  with respect to the number of goods  rothkopf et al.  1 . nphardness can  for instance  be shown by reduction from the well-known set packing problem. as our mixed auction model generalises standard combinatorial auctions  winner determination remains np-hard also here. np-membership  and thereby np-completeness  of the problem of checking whether there exists a solution exceeding a given revenue  for finite bids  follows from the fact that a candidate solution provided by an oracle can always be verified in polynomial time. that is  despite of the generalisations we have introduced  the computational complexity of the wdp does not increase  at least not with respect to the polynomial hierarchy.
1 mechanism design
an important issue in auction design concerns their gametheoretical properties. we note here that the central result in mechanism design  on the incentive-compatibility of the vickrey-clarke-groves vcg  mechanism  carries over from standard combinatorial auctions to mmucas. recall that the vcg mechanism allocates goods in the most efficient manner and then determines the price to be paid by each bidder by subtracting from their offer the difference of the overall value of the winning bids and the overall value that would have been attainable without that bidder taking part. that is  this  discount  reflects the contribution to the overall production of value of the bidder in question. the vcg mechanism is strategy-proof: submitting their true valuation is a  weakly  dominant strategy for each bidder. as an inspection of standard proofs of this result reveals  mas-colell et al.  1   this does not depend on the internal structure of the agreements that agents make. hence  it also applies to mmucas.
1 conclusions and related work
our model of mixed multi-unit combinatorial auctions subsumes a range of combinatorial auction models discussed in the literature  see e.g.  sandholm et al.  1    in particular single-unit and multi-unit versions of the standard direct and reverse auctions  simply do not use either i or o . transformability relationships between goods  at the side of the auctioneer  as proposed by giovannucci et al.  can be modelled by allowing the auctioneer to submit bids representing those transformations to itself.
¡¡we should stress that there are important differences between our mixed auctions and models known as double auction  wurman et al.  1  or combinatorial exchanges  sandholm et al.  1 . the most important difference is that these models do not have the concept of a sequence of exchanges  which is required if the intention is to model some sort of production process. in the formulation of the wdp for combinatorialexchangesgiven by sandholmet al.   for instance  accepting  circular  bids such as bid a b 1  and bid b ac 1   to obtain c for 1 rupees  would be considered a solution. with our semantics in mind  however  this solution is not valid: the first agent needs to receive a before it can produce b  but the second agent needs to receive b before it can produce a and c. hence  no deal should be possible. in fact  the mmuca can be used to simulate combinatorial exchanges  and double auctions . for instance  the bid bid a b 1  can be rewritten as bid { a {}   {} b } 1  to express that i will only deliver b if i receive a  but that the order does not matter. of course  if no true transformations  imposing an order  are used  then the simpler model of combinatorial exchanges is to be preferred.
¡¡walsh and wellman  and babaioff and walsh  tackle a similar problem to ours  focussing on supply chain formation. although both contributions are very significant  they could be extended along three dimensions. firstly  they do not allow a provider to submit bids on combinations of transformations. secondly  they do not define a bidding language  in fact  their agents submit a bid with a single transformation each . finally  the transformation net that defines the supply chain has to fulfil strict criteria: acyclicity  transformations can only produce one output good  etc. both papers mainly adopt a game-theoretic perspective  and thus do not address either the wdp or bidding languages in depth.
¡¡the first systematic study of bidding languages is due to nisan   an early version appeared in 1 . nisan's paper provides an excellent introduction to the topic and has clarified a number of issues that have previously remained somewhat fuzzy. for mmucas  we have seen that the xorlanguage is fully expressive  over finitely-peaked valuations .
future work should also address the expressive power of different fragments of the bidding language and compare the succinctness of different fragments for certain classes of valuations: which languages can express what valuations  and which languages can do so using less space than others  for the case of direct single-unit combinatorial auctions  several such results are given by nisan   and some of these results may be relatively easy to transfer to our model.
¡¡another interesting question to consider in future work would be what exactly the auctioneer should announce when opening an mmuca. in the case of direct auctions this is the set of goods to be sold. if bidding for transformations is possible  however  it may be difficult to foresee what types of goods will be relevant to a solution  as this depends on the transformation capabilities of the bidders in the market. we also envision as a possible development the application of our model to supply chain formation. finally  our work also poses a computational challenge since the number of variables of our ip grows quadratically with the number of transformations mentioned in the bids. thus  we plan to investigate the use of special-purpose or local algorithms.
this work has been partially supported by the spanish ministry of education and science  grants 1-1i-1  tin1-c1 and tip-1-c1 .
