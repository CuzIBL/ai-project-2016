an improved filter for l i t e r a l indexing in resolution systems 
lawrence j. henschen 
northwestern university  evanston. il 
shamim a. naqvi 
bell laboratories  naperville  il 
1. introduction 
the more successful resolution programs today 	owe their 	power 	in 	part 	to 	efficient 	retrieval mechanisms 	for 	returning 	literals 	that 	are potentially 	unifiahle with or subsumed by a given l i t e r a l . 	for example  the 	efficient 	subsumption algorithms 	and 	the 	hack demodulation of  are based on 	one 	such 	scheme  	the 	fpa 	l i s t s . 	we propose a new technique that can be used to locate  compatible  literals for resolution  subsumption  etc. 	this 	new 	scheme 	has 	some advantages  and disadvantages  relative to fpa l i s t s . 
we make no distinction between atoms and nonvariable terms. we call predicate  function and constant symbols rigid and variables flexible. we are therefore interested in fast retrieval and comparison of formulas that start with a rigid symbol. 
1. formula outlines 
let t1 and t1 be two wffs. a necessary but not sufficient condition for t1 and t1 to unify is that t1 and t1 agree at every r i g i d - r i g i d position   i . e .   corresponding positions in which both t1 and t1 contain rigid symbols . a necessary but not sufficient condition for t1 to subsume t1 is that in addition to the above  t1 contains a rigid symbol in every position where t1 contains a rigid position. 
we make use of the above facts by grouping together wffs that have the same rigid symbols in the same positions. further  we associate with 
each such group an expression called the outline. these outlines can be easily compared to test for the above conditions. finally  such a comparison need be made only once for each pair of outlines. compatible outlines can be linked  giving immediate access to a l l groups of wffs that potentially unify  subsume  are subsumed by  a given wff or outline group. 
an outline consists of two byte strings  the symbol string and the indicator string  whose length depends on the depth of the atom. the f i r s t byte of each string contains information for the starting symbol of the wff  the next n bytes represent information for the starting symbols of the top level arguments of the wff  the next n**1 bytes represent information for the level 1 arguments in the wff  and so on. unfortunately  in order that corresponding positions for nested subarguments line up in separate outlines  we must allow for n arguments for every symbol  even variables  where n is the maximum number of 
1 


1. 	notes 
the f i r s t major difference between fpa and outlines is that with outlines one can get the appropriate l i s t of wffs directly by retrieving the compatible outline groups. briefly the fpa l i s t n1.n1. . . . nk.s contains a l l those formulas in which there occurs another formula starting with s in position n1 nk. if s is -1 then the term is a variable. for example  the atom in example 1 would be on the p l i s t   the 1 l i s t   etc. given a particular atom t  to find the atoms that may unify with  subsume  be subsumed by  t  it is necessary to take unions and intersections of appropriate fpa l i s t s . of course  in order to form new resolvents  one must find the clauses containing the literals in both schemes. 
several systems employ structure sharing. 	in 	the structure 	sharing 	scheme of boyer-moore   one would only need to store the 	outline 	string 	and then 	include for each wff in that outline group a means to t e l l which variables 	occurred 	in 	which zero 	positions. 	in the case of sharing as in the overbeek et. a l . program   one 	could 	use 	the outline 	group as an alternative to hashing terms. this would be less efficient in 	time  	but 	would not be as wasteful of permanent memory. 
we note that the expression i  -not i1 xor 1   can also be used to determine those positions within the two terms that actually need to be tested for unification. programs that can access subterms by position vectors can avoid the redundant checking of rigid-rigid pairs. 
there is considerable wasted space in an outline string for argument positions that are nonexistent. if the maximum number of arguments is big or the formulas are deep  the outlines can get very long. however  there is only one copy of each outline. in view of the possible computational advantages  it may not be out of line to use 1 to 1k bytes for these strings and the lists of compatible outlines. indeed  because a given atom or term can occur on many fpa l i s t s   it is not clear that outlines would require disproportionately more storage. in fact  the two schemes could be used together by cutting off the outlines at some level and using the fpa lists for terms deeper than the limit. the outlines would require very l i t t l e storage and would provide a very good f i r s t f i l t e r ; the deep fpa lists could be used as a secondary f i l t e r . 
1 
1. acknowledgements 
we with to thank dr. neil haller 	and 	mr. 	robert 
veroff for reading the original manuscript  and to 
ms. sherrie brown for helping in the preparation of the final copy. 
1.. 