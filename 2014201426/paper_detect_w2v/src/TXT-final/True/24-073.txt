

	n	a	t	u	r	a	l 	l	a	n	g	u	a	g	e 
	p a r s i n g 	a n d 	m o r p h o l o g y 

c o o r d i n a t e d 	m o r p h o l o g i c a l 	a n d 	s y n t a c t i c 	a n a l y s i s 
	o f 	j a p a n e s e 	l a n g u a g e 
t s u n e n o r i m i n e   r i n - i c h i r o t a n i g u c h i a n d m a k o t o a m a m i y a 
department of information systems  k y u s h u university 
1 - 1   kasuga-koen  kasuga-shi  fukuoka 1 j a p a n email: mine is.kyushu-u.ac.jp 

a b s t r a c t 
a method for parallel morphological and syntactic analysis of japanese language is proposed. parallel syntactic analysis is based on an efficient parallel lr parsing algorithm for general context-free grammars. it handles syntactic features as constraints. each syntactic feature is defined by a verbal subcategorization and attached to a special set of phrases called bunsetsu in japanese. the bunsetsu is used as a processing unit for both analyses. all processes act asynchronously  and are coordinated on a p-ram parallel random access machine . 
1 	i n t r o d u c t i o n 
   in order to speed up natural language processing  efficient parallel processing methods must be developed. recently  we have proposed an efficient parallel parsing algorithm for general context-free grammars which recognizes an input string of length n in o n  time with o n1  processors and memory spaces  mitaam1b  . this algorithm is optimal in the sense that  in general  almost 1 n1  steps are required to recognize a context-free language on a sequential machine  ear1  val1  . our algo-  rithm is based on an lr parsing scheme  knu1  . this scheme offers two advantages: high speed analysis due to the compiled lr parsing table and the additional capacity of left-to-right on-line parsing tom1  . however  pure context-free grammars are not enough for natural language processing. it is often desirable for each symbol in the grammar rule to have attributes tom1   and for each grammar rule to allow an unrestricted word order. particularly  in order to process a japanese sentence  a parser must be able to handle an unrestricted word order. 
　a morphological analysis  whose processes are themselves performed in parallel  must be performed in parallel with a syntactic analysis  and both analyses must be coordinated  so that the syntactic analysis may work up to capacity and they may perform together lexical disambiguations using bits of information provided by the syntactic analysis. 
   in this paper  a coordinated  parallel  morphological and syntactic analysis method is proposed. the parallel syntactic analysis performs a shift and a reducing action in parallel by using an lr transition diagram mitaam1b   which is derived from a pure context-free grammar and controls unrestricted word order by using syntactic features. the morphological analysis uses a finite state automaton called a morphological network. the morphological grammar and the syntactic grammar are integrated hierarchically. this integrated grammar is called a two-level grammar. by using this grammar  a terminal symbol of the syntactic grammar is used as a processing unit for both analyses. requests for constructing a terminal symbol are passed from a syntactic process to a morphological process  and constructed candidates of terminal symbols are returned to the syntactic process. the terminal symbol stands for a special set of words called bunsetsu in japanese  which can be regarded as a minimal semantic element in a japanese sentence. 
　section 1 describes the two-level grammar and its constituents: the syntactic grammar and the morphological grammar. section 1 describes the parallel morphological analysis method  and section 1 describes the parallel syntactic analysis method. 
1 t w o - l e v e l g r a m m a r 
1 notations of features 
  bs: bs stands for bunsetsu which can be re-garded as a minimal semantic element in a japanese sentence. bs is denoted as follows: 

n stands for a noun and nouns  v for a verb  verbs and an adjective  p for a postpositional particle  ac for an adverb and a conjunction  and ax for an auxiliary verb.  means 'or1  and '*' means more than 1 iterations. bs denotes relations of structural dependency: renyou 'dependent of v  rental 'dependent of n' and danshi 'governor of v' haga1 . 
  g r : gr stands for the grammatical relation of some of the postpositional phrases. the main particle of the phrases is called kakujoshi 'postpositions with a grammatical function'. 
  sc: sc stands for subcategorizations. each sc features can take a set of grs as its value. the value is a list of gks for which the verbal particle 
subcategorizes. 
  ps: ps stands for a part of speech. 
1 significance of the two-level g r a m m a r 
　the construction of our two-level grammar is shown in figure 1. 
   a two-level grammar is a grammar whose constituents  a morphological grammar and a syntactic grammar  are integrated in hierarchical structures. the syntactic grammar consists of context-free rules and the morphological grammar consists of regular rules. a terminal symbol of the syntactic grammar stands for bs and it is constructed by using the morphological grammar. since a morphological analysis can be performed by using a finite state automaton ama1    without stacks  this hierarchical construction is significant from a computational viewpoint. also  from a semantic viewpoint  this construction is important to describe and apply local constraints for each analysis. 
1 syntactic g r a m m a r 
the syntactic grammar consists of context-free rules. 
a terminal symbol in the grammar denotes a bs. the following is a subset of japanese grammar: 

　the suffixes yy t and d are connective forms between n and stands for renyou  t for rentai  d for danshi. 
　　　　　　　　 x stands for y  t or d  mean bs. figure 1 shows the lr otransition diagram derived from this syntactic grammar  si in the goto field of this diagram means 'shift and goto state i'  and ri means 'reduce and go to the state i' the rule field means a rule number of the syntactic grammar. the info field means information used by a shift or a reducing action. 
　our lr transition diagram is similar to the lr parsing table  ahu1   but with two additional advantages: 
figure 1: the lr transition diagram derived from a japanese grammar. 
it has a natural form as an automaton  and it can perform both a reducing action and a goto action as one action mitaam1b  . 
1 	morphological g r a m m a r 
　the morphological grammar consists of a set of regular rules producing bs. the grammar is transformed into a finite state automaton called a morphological network. a state of a morphological network denotes either a part of speech or a word itself. a link stands for a connective relation between words. the morphological network consists of two networks: a nominal network  which constructs and a verbal network  which constructs and the following is an example of production 
cle with a grammatical function. a  is a dependent of v. a  is a dependent of n. 
	mine  laniguchi  and amamiya 	1 


figure 1: the construction of a two-level grammar 

1 	p a r a l l e l m o r p h o l o g i c a l a n a l y s i s 
   the morphological analysis corresponds to a shift action of a syntactic analysis. in the morphological analysis  a process is created by a construction-request for bs issued from a parsing process. the request has the form  where tv is a state name of an lr transition diagram  and i is a pointer to an input symbol called an input pointer for short. extracting bs is performed simply by a process moving from the initial state to a final state in a morphological network. since a morphological network is  in general  a non-deterministic finite state automaton  when a morphological process arrives at a final state  but it can still go on to to other final states  then  it creates a new process that resumes the syntactic analysis and returns bs information to the parsing process which had requested the production of the bs. so  the morphological process proceeds from one final state to another. bs information has the form:  where word is a bs ex-
tracted from a given input string  gr is a gr. sera is an item of semantic information. both i and j are positions of the word in the input string. in order to avoid duplicated analysis  each word  which is extracted during the morphological analysis  is stored in a table  and its morphological information is accessed directly by using an input pointer. 
　the coordination mechanism for morphological and syntactic analyses is shown in figure 1. both processes with  access 1  then a morphological process is created and the morphological analysis begins  because the bs information has not been held as 
an entry  namely  the tag of the table is off. 
1 p a r a l l e l s y n t a c t i c a n a l y s i s 
1 parallel parsing model 
our parallel parsing model is called a dag directed 
acyclic graph  array parsing model mitaam1b  . this model has a crew  concurrent-read exclusive-write  type three dimensional shared memory  called a dag memory. a cell of the dag memory denotes an element of dag called a dag node. the dag node has the form:  each cell of a dag memory can be directly accessed by a dag node name used as an index. a processor is assigned to each dag node. all processors act asynchronously. the dag array parsing model is shown in figure 1. 

figure 1: dag array parsing model 
1 parallel parsing for context-free grammars 
　our parallel parsing method  is called a generalized parallel lr parsing scheme. it extends an lr parsing method for general context-free grammars by using a dag which allows multiple stack entries in-
stead of a conventional stack 
similar parallel parsing schemes have been proposed 	and 
   in our parsing method  parallel shift-reducing actions are controlled by means of an lr transition diagram  mitaam1b  . a dag node is produced by a shift or a reducing action  and then the processor  which is assigned to a newly produced dag node  is activated. the dag node is held as an entry in a dag memory cell to avoid producing the same dag nodes. if there are several conflicts between shift and reducing actions at any state  all those actions are performed in parallel  because one different processor is activated for each action. thus  all actions which can be performed at any state  do not have to be synchronized with an input symbol. in order to inhibit the exponential increase of activated processors  and to avoid redundant actions  we use the following strategy: 
  only processors assigned to a dag node  which has not been held in an dag memory entry  are activated. 


figure 1: coordination mechanism of both morphological and syntactic analyses 

  the results of shift/reducing actions performed by any processors are stored  so they can be shared by processors about to perform those actions. 
　according to this strategy  first  all parsing trees with the same top vertex are packed  and their vertices are unified into one vertex. this strategy is controlled by checking whether a dag node has been held as an entry in the dag memory or not. then  only one symbol for each grammar rule is assigned to each reducing action  which is therefore called a one-symbol reduction. the one symbol reduction consists of two actions: a reduce 1 and a reduce1 action. a reducel action is a one-symbol reduction for the rightmost symbol in a grammar rule  and a reduce1 action is for the other symbols  i.e.  for a reduction by  a reducel action performs a one-symbol reduction for c  making a rule-with-marker 
 a reduce1 action performs for b and completes the reduction. the result of each one-symbol reduction is called reduced information which has the form 	stands for reductions of from i is an input pointer. tv is a state where the reduction by was executed. a table in which reduced information is stored is called a reducing table. each consists of 1 tables: a reference table and an entry table  which are both crew type shared memories. a reference table has a field  which is used to check whether reduced information has been held as an entry or not. an entry table has a field used to store reduced information  which is written in the field from top to bottom. a reducing table is assigned to each dag node produced by a shift action. reduced information is passed through a reducing table between dag nodes. reduced information is then processed in pipeline-like processing through reducing tables. our parallel parsing method is described as follows: 
 parallel parsing method  1 
1. start: a processor assigned to the dag node  starts a shift action. 
1. activate a processor: if a processor produces  in a shift or a reducing  reducel/reduce1  action  a dag node dn  for which no entry exists  then the processor makes an entry dn and activates a new processor assigned to dn. 
1. execute a shift/reducel action: a newly activated processor performs shift and reducel actions. 
1. execute a reduce1 action: after performing a shift action  a processor p executes a reduce1 action. if there is no reduced information in a field accessed by p  p waits until some reduced information is put to an entry. then p reads it and performs a further one-symbol reduction according to it. p also activates a new processor p'  which is newly reassigned to the same dag node previously assigned to p and reads the next reduced information1. 
   1  for brevity's sake  the linkage of a dag node to reduced information  which is actually required  is not described. this linkage is performed by reducel/reduce1 actions. 
   1 this newly activated processor is necessary to link a dag node to reduced information. 
	mine  taniguchi  and amamiya 	1 

1. accept/reject: if the processor assigned to  and s are a start state and a start symbol  respectively.  is activated by a reducel or reduce1 action  and this processor reads the terminal symbol  the end mark   by a shift action  then the input string is accepted. if there are no processors performing a shift and a reducel action  the input string is rejected. 
1 	handling syntactic features 
　in order to extend the syntactic analysis method of 1 so that it can handle syntactic features  reduced information is improved as follows: 
  definition 1  reduced information: reduced information is defined as where sc 
means a list of sc features which has the form  

　the reducing table is also extended for the newly defined reduced information. table 1 shows the extended reducing table. by handling these syntactic features  a reduce1 action follows the constraints: 
constraints for a reduce1 action 
  inhibition of duplicated reference: in performing reduce1 actions  if an element of sc in reduced information is in agreement with the gr component of a dag node  the element is marked with v. if  during a reduce1 action  a gr component  which matches a marked element is found  the reduce1 action aborts. 
  inhibition of wrong type reference: if  dur-ing a reduce1 action  a gr component does not match any element of sc in reduced information  the reduce1 action aborts. 
　as mentioned above  the syntactic analysis is allowed to handle an unrestricted word order by using sc features as a list  since gr is not attached to ps. this method is also adopted by jpsg gun1  . 
　in figure 1  the parsing of japanese sentence watashi ha kare ni australia ni iku to itta i told him that i would go to australia.  is shown as an example. 
the form of the dag node used in this example is 
the fs has the form  where 
no marked sc feature means a 
gap missing constituent . in the figure  sbj which is a sc feature of the verb iku  stands for a gap. the reduction by 	and 
failed because 
obj1 is not in agreement with any subcategorization elements in the list  

entry table  
	i 	reduced information 

table 1: a reducing table assigned to a dag node dn 
1 conclusion 
　we proposed a coordinated parallel processing method for morphological and syntactic analyses of japanese language. the proposed parallel parser is extended from the previous parser mitaam1b   so that it can handle syntactic features. from the computational viewpoint  it is significant to use a two-level grammar with a morphological and a syntactic grammar integrated hierarchically  using bunsetsu as a processing unit for both analyses. we are now implementing this method on sequent symmetry s-1  a 1-cpu multi-processor system. 
　it must be noted that this method is not complete in the sense that it does not handle semantic features. this method  however  can be extended to include a semantic processing component  which performs  in coordination with morphological and syntactic analyses components  parallel semantic and pragmatic analyses on a semantic network  based on the situation semantics theory. 
