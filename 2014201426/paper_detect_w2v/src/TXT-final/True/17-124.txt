 
     this paper proposes a model of learning by discovery. the model consists of a program which discovers macro operators while conducting a best first heuristic search in the domain of puzzles. this work extends some recent work on permutation puzzles  korf  1  and operator-decomposable puzzles  korf  
1   and is related to the earlier work on macrops  fikes  hart  and nilsson  1 . this work is part of a doctoral dissertation currently in progress at mit  in which the model will be used to explore learning in conjunction with additional search paradigms and numerous alternative heuristics for macro generation and selection. the specific heuristic reported on here is that of using peaks of the evaluation function to segment the paths of the search tree in order to discover macros. the technique seems particularly valuable in difficult puzzles where only imperfect or approximate evaluation functions are available. 
introduction 
     this paper investigates a form of learning in the context of problem solving. a problem solving system  in this case a heuristic best-first search program  starts out with an initial set of operators  and learns by applying heuristic methods to discover a 
     more powerful set of operators  herein called macro-operators. the techniques are general and powerful  and show promise of extension to other search and problem solving paradigms. 
     macro-operators  or macros  are a kind of super-operator which is composed of  or defined in terms of  more elementary operators. the composition process  by which a macro is formed  abstracts the defining sequence so that the new macro-operator looks like just another operator to the problem solving system. thus a new macro enlarges the set of operators available during the search process. the fact that the new operator is defined in terms of other operators is incidental to the search process  and needs only to be invoked once a solution is found in order to convert the solution into its canonical form as a sequence of  primitive   or initial  operators. this can be done by a straightforward process of macro expansion. 
     the discovery of macro-operators is a very powerful technique in problem solving  as demonstrated by the strips system  fikes  hart  and nilsson  1   which learned a form of macros  macrops  in the format of a triangular table  and some recent work  korf  1   korf  1  in applying the learning of macros to the solution of a specific class of puzzles  operatordecomposable puzzles . 
     the sense of macro employed here is somewhat more general than that of korf  since it is applicable in any problem where operators are composable  i.e. where there exists a 
proceduro for abstracting a sequence of operator applications to form a macro-operator represented in a manner consistent with the previous operators. 
     to illustrate the concept of macro  the familiar class of pegjump solitaire puzzles will be employed. in these puzzles  legal operators consist of jumping a peg over another peg into a hole. movement is typically restricted to the horizontal and vertical directions. the peg jumped over is immediately removed. the goal is usually to reduce the number of pegs to exactly 1. a number of board shapes and starting configurations are possible  but perhaps the most famous is the hi-q puzzle  which has a board shaped like a plus sign  and starts out with a hole in the center  see diagram 1 . the goal is to end up with a single peg left in the center hole. 

     the basic operator can be represented in terms of the initial and final states of the 1 consecutive locations affected by the jump  see diagram 1a . similarly  a macro composed from a sequence of jumps can be represented in terms of the initial and final states of those locations affected at any point in the sequence. refer to diagram 1 for a set of particularly useful macros for this class of puzzles. by convention  o  represents a 
     peg   .  a hole  and     a don't care. don't care's can be bound to either holes or pegs  but the bindings must be consistent between initial and final states. in each macro it is possible to get from the initial state to the final state by a sequence of legal basic jumps  which form the  expansion  or proof of the macro. these macros are very similar to the packages presented in  berlekamp  conway  and guy  1 . it is interesting to note that essentially the same set of macros was discovered independently by different human problem solvers  suggesting that the discovery process may be convergent  and certainly is of psychological interest. 
     the work presented here represents the first step in a more ambitious project to investigate learning by discovery of macros in a variety of puzzle and related domains  e.g. concept learning  and mathematical theorem proving . the advantage of choosing puzzles as the initial domain is that there already exists a welldeveloped set of performance systems for carrying out search. the learning components are a natural extension of these performance systems. 
the power of macros 
     macros derive their power from their ability to shorten the search process. using macros it is possible to take  larger strides  through the search space  since applying a single macro may be equivalent to a large number of more primitive steps. the largest macros in diagram 1  d e  and f  are each equivalent to 1 primitive steps. the result is that a solution may be found in a significantly smaller number of search steps than would be required by a search using only the basic operator. 
     the macro notion is very similar to the well known chunking phenomena of psychology. chunks provide significant combinatorial benefits for representing knowledge and reducing memory burden. in an analogous manner  macros allow for more efficient search  as well as more economical representation and recall of solutions. 
     another aspect of macros is that they may be used to bundle up a lot of untidy details. in many puzzles  for example  it is necessary to pass through a number of  messy  states to get to the next  clean  state. illustrations of this occur in the 1 puzzle and the rubik's cube  where it is frequently necessary to  temporarily  undo already satisfied subgoals in order to achieve the next subgoal. macros provide a mechanism for getting through the mess to the next  good  state. with a macro  any messy intermediate states are hidden from the search process  since all that matters to it are the initial and final states of the macro. the obvious evaluation functions for puzzles such as these have the property that their values fluctuate up and down along a solution path. macros can work especially well in conjunction with such imperfect evaluation functions  because the macro can aid the search process by guiding it past the intermediate messy  locally lower valued  states to the next good state. this observation directly suggests the learning heuristic for proposing macros which this paper describes: the peak-to-peak heuristic  where operator subsequences bounded by peaks in the evaluation function are proposed as candidate macros. this will be described in detail in the next section. 
     as a concrete illustration of the power of macros  the hi-q puzzle  diagram 1   which is extremely difficult to solve by conventional search techniques  the final solution is 1 steps long   can be solved quite easily by applying the macros of diagram 1. the solution in this case is only 1  macro  steps long. 

to concretely make the comparison  a best-first search strategy was implemented using the following 1 element evaluation function: 
1. minus the number of connected components of pegs 
1. minus the number of connected components of holes 
g. iba 1 
where these 1 elements are strictly ordered  so that when comparing two evaluation vectors  any given element comes into play only when the prior elements are tied. the components of pegs  and holes  are computed assuming orthogonal adjacency  so that diagonal relationships do not connect components . the intent of these heuristics is to keep the pegs close together in a solid mass. the negations are used since for each of the three elements a smaller absolute value is better  thus the highest attainable value is  -1 -1 -1  when there is but one peg left. these heuristics were the first that were tried out  and they performed beyond expectations. although the problem was still intractable in terms of searching with the basic-jump alone  the same search process  using the macros of diagram 1  found the solution of diagram 1 which uses 1 macro steps and a basic-jump. the search process was almost a perfect straight line solution  with only one minor instance of backing upl thus the use of macros converted an essentially intractable problem into one that was easily solved. an interesting side note is that the solution found by the program was one  macro  step shorter than the best solution i had found using the same set of macros. 

discovery of macros 
     the model of learning driving this research is a simple but potentially powerful one. it is fundamentally a variant of generate and test  where macros are proposed  and subsequently filtered by both a static and a dynamic filtering process. it is expected that the proposing methods will generate too many macros  including some good ones along with many poor ones. the static filter will evaluate macros solely on the basis of their description  and discard those that fall below a threshold. the remaining macros will be tried out by the search process on a trial basis. statistics will be maintained on how well each macro performs dynamically  and periodically the underachievers will be purged. 
     this paper explores one approach to the proposal of macros  and tests the learning effect with a  null  filter  that is  all candidate macros get accepted. the approach used  as part of a best-first search paradigm  is an implementation of the  peak-topeak  heuristic. during the search process  all partial search paths are examined for peaks in the evaluation function. a peak occurs when a node of the search path has a higher value than both the immediately preceding and immediately following nodes. when a peak is encountered  the path is searched in the reverse 
direction until either a prior peak is detected  or the beginning of the path is reached. in either case the subsequence thus delimited  all operators after the starting peak node and preceding the terminal peak node  is proposed and converted into a macro by the following procedure: 
1. find the set of all locations used by any operator of the sequence. call these the support locations. 
     
1. minus the number of pegs remaining 
     
1. find the smallest rectangular window which contains all the support locations. 
     
1 g. iba 
1. using this window take a  snapshot  of the puzzle state at the start of the sequence. mark the nonsupport locations  the complement of the support set relative to the window  as don't cares. 
1. take a similar  snapshot  of the puzzle state at the end of the sequence  again marking  the same set  don't care's. 
1. form a macro using the first snapshot as the macro's initial state  and the second snapshot as the macro's final state. 
the snapshot process abstracts the macro away from the specific locations  and provides the possibility of the macro applying in a variety of positions and orientations  just like the basic-jump operator. note that the matcher automatically tries out all rotations and reflections of each macro  just as it does with the basic-jump. 
     the evaluation function used was the same one discussed in the previous section. the learning process was tested out on a 
     smaller version of the puzzle  see diagram 1 . this puzzle was solved in 1 steps using the basic-jump operator alone. during this search two macros were proposed and created  though they were not immediately incorporated in the search. a second pass was taken on the same puzzle  this time incorporating the new macros to study the effect of learning. the second solution was discovered in less time  with fewer nodes expanded. the solution used the three-in-a-row macro twice to find a 1  macro  step solution  diagram 1 . the comparison of the first and second passes is summarized in table 1. the two macros proposed during the first pass are listed in diagram 1. 

table 1 
runtime  sec  realtime 
 sec  | nodes expanded i nodes 
evaluated solution length  macros generated 1 1 1 1 1 1 1 1 1 1 1 ! 1 pass 
1 
pass 
1 
     the results indicate that interesting learning has taken place. performance was uniformly better on the second pass. moreover  at least one macro  threeina-row  has been learned which is known to be useful in solving related problems. for example  using the macros learned from the experience with this small problem  diagram 1   this same best-first search procedure could solve diagram 1 in a straight-line fashion  diagram 1   whereas without the macros  the problem remains combinatorially intractable. this is an interesting example of transfer learning. 

conclusion 
     macros are a powerful technique in problem solving  and the discovery of macros is an interesting form of learning worthy of additional study. the peak-to-peak heuristic for discovering macros has been successfully applied to small problems in the class of peg-jump puzzles  and generates some interesting and useful macros. further study is called for to gauge its usefulness on larger problems  and to determine the ratio of good to poor macros generated by this technique. 
     the major limitation of the technique is that increasing the number of operators will increase the branching factor of the tree  and thus tend to slow down the performance system in its search. it is not clear whether the benefits of new macros will normally compensate for the increased search cost. further work is required to evaluate this tradeoff. 
     future work will explore techniques for filtering macros so that only the most promising will be learned. additional experimentation will be carried out with related search paradigms such as gps to explore goal-related heuristics for generating macros. 
     to the extent that macros are strongly analogous with theorems in mathematics and concepts in concept learning  the success of this research effort may shed significant light on issues of learning in these domains. it may be the case that powerful general heuristics for learning and discovery of composite structures may apply equally well in all three areas. 
