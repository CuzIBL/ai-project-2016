 
　　　by placing various restrictions on the heuristic estimator it is possible to constrain the heuristic search process to f i t specific needs. this paper introduces a new r e s t r i c t i o n upon the heuristic  called the  bandwidth  condition  that enables the ordered search to better cope with time and space d i f f i c u l t i e s . in particular  the effect of error within the heuristic is considered in d e t a i l . 
　　　beyond this the bandwidth condition quite naturally allows for the extension of the heuristic search to min/max trees. the resulting game playing algorithm affords many desirable practical features not found in minimax based techniques  as well as maintaining the theoretical framework of ordered searchs. the development of this algorithm provides some additional insight to the general problem of searching game trees 
by showing that certain  somewhat surprising changes in the cost estimates are required to properly search the tree. furthermore  the use of an ordered search of min/max trees brings about a rather provocative departure from the conventional approach to computer 
game playing. 
ke/words: a r t i f i c i a l intelligence  tree searching  game playing  heuristic search  alpha-beta minimax  game trees  min/max trees. 
introduction 
　　　the heuristic search  hart1   nilsson   has become an important aspect of a r t i f i c i a l intelligence because of i t s wide area of 
　　　　　　　　　　　　　　　　　　1 application  nilsson   pohl   and because of the 	theoretical 	framework 	on 	which 	it is based. 	this 	framework 	is in large part due to 	various 	res trictions 	imposed 	upon 	the heuristic that 	guides 	the 	search 	and 	the resulting 	effect 	on 	the 	search 	algorithm i t s e l f . 
　　　in order to discuss some of these restrictions it is necessary to introduce the following notation. for a node n of a tree or graph  the following functions are defined as part of the problem. k m n  = the arc cost from node m to node n. 
g n  	= the minimum arc cost from the root to node n. 
h n  =the minimum arc cost from node n to a goal  
f n =g n +h n  	the minimum arc cost from the root to a goal via node n. 
* research p a r t i a l l y sponsored 	by office 	of 
naval research contract onr 	n1 1-a-1 since some of these functions are not known durinq the actual search  we must be guided by estimates of these functions. 
g* n  = an estimate of g n . note: g' n  g n  for a tree. 
h' n  = an estimate of h n . this is the  heuristic . f'  n =g'  n +h'  n  an estimate of f   n   . 
　　　at each step of the heuristic search the most promising node  the one with mimimum f '     value  is expanded. in this way the heuristic h' 1 orders the search. using nilsson's terminology any node which has beed expanded is called closed  and any node not yet expanded is labeled open. the open nodes are maintained on a l i s t called the open l i s t . with this notion of the heuristic search  we can see the effect of certain restrictions placed upon the heuristic. 
　　　the most important r e s t r i c t i o n on the heuristic h'o is the  admissibility  
	1
condition  hart   nilsson  : 
if h' n    h n  for a l l nodes n  then the h e u r i s t i c   search w i l l always find a minimal cost  optimal  goal. 
　　　another important restriction on the heuristic is the  consistency  condition 
 nilsson  : 
if h' m -h' n    k m n  then a l l nodes expanded by the heuris t i c search have g' n =g n  even if the graph is not a tree. this allows for considerable simplification of the algorithm. 
　　　this paper introduces another r e s t r i c t i o n on the heuristic  which allows the heuristic search to better cope with the 
practical problems of tine and space. 
the  bandwidth  condition 
　　　when using the heuristic search to solve complex problems  both time and space d i f f i c u l t i e s arise because the number of nodes in the search tree increases exponentially. the time required to search the tree or graph can be reduced only by using a heuristic that more closely estimates h     . it may be impractical to find such a heuristic that never violates the  admissibility  condition. for many problems  an example of which w i l l be given shortly  it is often easier to find a 
　　　heuristic that estimates the future cos t w e l l   but occasionally overestimates i t . in these cases it is reasonable to make use of this inadmissible heuristic to order the search and then to choose from one of two alternatives. 
1 
1  bound the extra cost of the resulting goal by the extra cos t in overestimating h     . we may consider accepting a non-optimal solution  if it is much easier to find than an optimal one. 
1  con tinue the search beyond the expansion of a goal  reducing the added cost bound u n t i l an optimal goal is found. 
in either case the search process w i l l run faster than an admissible search since the new heuristic is a more accurate estimator of h  . 
　　　the  bandwidth  condition requires that: h n -d   h'  n    h n +e the above 	constraints  	one- 	of 	which 	is 	a loosening of the admissibility condition  can be used 	to 	provide 	a 	theoretically 	sound method of coping with both the space and time di f f i c u l t i e s 	encountered 	in 	solving 	large problems. we also assume that 	the 	bandwidth heuristic is exact for any goal. 	it is clear that when e=1 and d h n  for a l l 	nodes 	that the 	bandwidth 	condition 	reduces 	to 	the admissibility 	condition. 	the 	bandwidth condition 	is 	similar 	to 	pohl's1 	 bounded error . however  	our 	approach 	w i l l 	be 	to study the relation 	between 	this error bound as applied to each node of the search and how it effects the cost of the goal found 	by the search. 	we 	w i l l 	also 	demonstrate 	that bandwidth heuristics can 	be used effectively to 	find 	optimal 	goals  	in 	spite 	of 	the 
possibility of over-evaluation. 
　　　the upper bound allows us to compute the extra cost of a non-optimal goal found by using h'   to guide the search. we can bound this added cost  harris 1  by noting that some node n* on the path to the optimal goal is open when the non-optimal goal p was selected for expansion. thus  
f' p    	f' n*  	p chosen before n* 
g p +h p    g n* +h' n*  d e f i n i t i o n of f '    g p +h p    - g n* +h' n*  since h' p =h p =1 q{p +h p    g n* +h n* +e bandwidth bound 
f p    f n* +e d e f i n i t i o n of f   f  p    f  p* +e n* on path to p* 
providing the desired bound on the added cost of goal p. such a goal is called e-optimal and the algorithm e-admissible. 
　　　knowing this bound allows us to use heuristics that may not satisfy the admissibility condition without fear of encountering some degenerate case that could add an arbitrary additional cost to the resulting goal. in this sense bandwidth heuris tics are easier to find than admissible heuristics since they are allowed to overestimate the true future cost. 
　　　the lower bound of the bandwidth condition allows us to save space by dropping nodes from the open l i s t without surrendering the admissibility of the algorithm. we can eliminate any nodes m from the search if there exists a node q that satisfies the cutoff condition: 
f  q  f'  m - e+d  . 
　　　it is clear from the bounding argument above that we must insure that the path to the optimal goal w i l l not be dropped from the search tree. assume that it i s ; then for some node q we have the following. 
f '  q    f'  n* - e+d  f q -d   f  n* +e- e+d  f q    f n*  f q    f p*  the drop c r i t e r i o n 
bandwidth bounds collect terms n* on path to p* yielding a contradiction since p* is an optimal goal. we can determine a bound on the extra cost for a goal p by comparing f p  to f'  s -e for a l l open nodes s  since one of these nodes is the n* used above. if we are not satisfied with this result  we can continue u n t i l the bound is lowered to a desirable l i m i t . 
　　　knowing this bound  we may be satisfied with the e-optimal goal  or we may wish to continue the search for the optimal goal. this can be done since a l l open nodes w i l l eventually have estimated cost greater than f p* +e where p* is the minimum cost goal expanded by the search. in either case the use of a bandwidth heuristic speeds the search by better estimating future cost  and allows the dropping of obviously bad open nodes to conserve storage. 
　　　for many problems it may be impractical to find a single heuristic that can adequa tely f u l f i 1 bo th of the bandwidth c r i t e r i a at one time. in these cases we can define two heuristics  one to satisfy each bound. 
	h n -d   h1' n  	& 	h1' 	 n    h n +e 
　　　for other cases we may wish e and d to themselves be functions of the node n. the extension to these other cases is straightforward. 
example: the traveling salesman problem 
　　　as an example of the practical value of bandwidth heuristics consider the traveling salesman problem of finding the minimum mileage tour of a set of c i t i e s . since the search tree for an n-city problem has {n-di nodes it is impractical to find the optimal tour for large n. recent ad hoc techniques {lin 1   f i n d  good  solutions but can estimate the error only empirically. 
　　　the following heuristics can be used to find  good   e-optimal  solutions. a l l of the heuristics make use of the reduced 
mileage matrix defined by the p a r t i a l tour representing a node. for this problem it is convenient to use two heuristics h1' & h1' to f u l f i l l the bandwidth condition. an admissible heuristic ho' w i l l be used to motivate the definitions of h i ' and h 1 ' . 
1 
for a 1-city problem 	partial tour: 1 
cities to leave: 1 1 1 cities to enter: 1 1 1 
reduced mileage matrix 
enter 
1 1 1 
l 1 1 1 x 
e 1 x 1 1 
	a 1 	1 x 1 1 
	v 1 	1 x 1 
	e 1 	1 1 x 1 
ho'-max 1+1+1+1+1 =1 
　　　an admissible heuristic ho' would be the maximum of the sums of the row and column minima. the heuristic ho' is admissible since any tour must use one element from each row and column and can do no better than the minimum element. thus ho1 n    h n  for a l l nodes n. a more accurate heuristic would be one that accounts for the likelihood that the minimum elements of a l l the rows cannot a l l be used to form a tour. this can be done by taking the weighted average of the two smallest elements in each row. 
hi'=w 1+1+1 + l-w  1+1+1  
　　　this heuristic gives some weight to the alterna tive choices. if it is indeed possible to use only the minimum elements  then this heuristic w i l l overestimate the true future cost. however for the majority of nodes it w i l l provide a much more accurate estimate of the future cost and thus provide a better guide for the search. it is because this heuristic provides a more r e a l i s t i c estimate of h   that the search algorithm runs faster than the admissible search. of course the resulting solution may be more costly  but we can bound this added cost by knowing how far we can overes timate a particular node. 
　　　the heuristic h1' is an estimate on how big h n  can get for a particular node n. for the traveling salesman problem  given any p a r t i a l tour  we need only estimate the cost of the rest of the tour from this point to calculate this bound. using the reduced cost matrix we could simply sum the major diagonal  or for a lower and therefore better estimate we could take the minimum choice from each c i t y u n t i l a tour is complete. each of these w i l l have d=1 since we know the minimum future cost must be lower than or equal to the cost of a particular tour. typically h1' is only calculated when there is a need to drop nodes. 
　　　thus for each node n  we know that we can do no worse than h 1 '   n   . knowing this we can drop any node m if there exists a node q such that f1*  qxfl' m - e+d  since any tour through m must cost more than a tour throuqh 
q. 
searching game trees 
　　　given the success of ordered searches in so many domains it seems reasonable to extend the heuristic search to game playing. the advantages of ordering the search should be as apparent in game playing as in the traveling salesman problem. unfortunately special problems occur which require significant changes in the cost functions in order to maintain certain desirable properties. 
　　　we would l i k e to be able to make the optimal move from a given board configuration. this would require being able to prove that we can win or t i e from an arbitrary board configuration  since someone must be able to force a win or t i e in a 1person 1-sum game. it is not that we cannot devise algorithms to perform this proof 
1
 nilsson    but that for any interesting game the algorithms are impractical. 
　　　if we develop admissible algorithms for game trees  such as nilsson's ordered search procedure for and/or trees  c r i t i c s respond that such an algorithm is impractical for any interesting game such as checkers or chess. on the other hand  algorithms that run in a reasonable amount of time are c r i t i c i z e d 
　　　because they don't always make the  best  move  and that they lack the theoretical framework of the admissible algorithms. 
　　　the use of a bandwidth heuristic allows us to work somewhere between these two extremes. we begin by reducing our aim in two ways; f i r s t   by looking for an  e+d optimal goal instead of an optimal one and second  by looking only for the f i r s t move towards such a goal. the bandwidth heuristic search can achieve these more modest goals. 
　　　the standard technique for finding a good move from a current board position in 1person games is the alpha-beta minimax  samuel1   and i t s variations  slagle1   nilsson 1  . it is helpful to note some of the possible shor tcominqs of minimaxing to motivate an improved technique. the following detrimental factors arise when 
minimaxing. 
　　　1  the minimax technique i m p l i c i t l y assumes that the opponent is using the same evaluation of board positions as the program when it minimizes on alternate ply levels. this assumption must be made in order to determine what move the opponent w i l l make at each of these levels. it is clear that this is an unwarranted assumption that can lead to serious errors in play. 
　　　1  related to this problem is the fact that minimaxing makes permanent decisions on the basis of comparing board evaluations. if the evaluator mis-orders two boards the minimax w i l l never recover. me are forced to admit that the evaluator must misorder some nodes or else we could play optimally with no tree search at a l l . in l i g h t of the inaccuracy of the board evaluator  it seems unwarranted to make irrevocable decisions 
based upon i t . 
1 
　　　1  minimaxing indicates what line of play looks most promising in a particular sub-tree  but does not provide an error estimate of how good the move is with respect to the entire move tree. it is desirable to 
provide such a d e f i n i t i o n of a  good  move. 
　　　1  since minimaxing regenerates a portion of the move tree each time the program is to move there is l i t t l e consistency in play from move to move. while substantial savings in computation can be obtained by ordering the generation of the tree  alpha-beta   there is l i t t l e tendency to continue a particular line of attack on the next move because the new search is based solely upon values generated from 1 levels deeper in the tree. since these values tend to vary somewhat from their ancestors the line of play suggested earlier may not be followed. 
　　　the bandwidth heuristic search provides a means of coping with each of these problems inherent to minimaxing. before presenting the algorithm in d e t a i l   some definitions are required. first we define the cost functions based upon one cost unit per move. for open nodes of the search tree: g' n =g n  cost from the root to node n 
h n -d 	h' 	 n   h n +e 	estimate of 	future cost 
f'  n =h' n +g*  n  total estimated cost via node n 
for terminal nodes of the search tree: h* win =1 & h' loss   n+ e+d  
from this it is clear that h'    estimates the number of moves to a win. note that this means a low value is good for the program  the opposite of the minimax evaluator. special care is taken when estimating losing nodes since h loss  cannot be bounded. the value of n is arbitrary. 
　　　for closed nodes of the search tree these functions are defined recursively. 
node n on a max l e v e l : 
define node m to be that son of n that is the best estimated move for the opponent. that i s   f m   f '   k   for a l l sons k of n. 
h'  n -h'  m  g'  n =g'  m  	f '  n =h'  n +g'  n  
node n on a min l e v e l : 
define node m as the best estimated move for the program. that i s   f' m   f'  k  for a l l 
sons k of n. 
h'  n -h'  m  	g'  n =g'  m  
this last d e f i n i t i o n requires further explanation but is absolutely required to extend one of the desirable features of regular heuristic searchs to min/max trees. a detailed discussion of this definition takes place in a following section. 
　　　a node n is said to be accessible if a l l the opponents moves on the path to n 
represent the best move for him in terms of true cost. that i s   for each min node m on the path to n  h m  h b  for a l l brothers b of m. 
the bandwidth heuristic search algorithm 
　　　a linked search tree is maintained using the following node specification. 

	closed 	nodes 	of 	the 	search 	tree 
typically contain the 1 pointers plus values for f '   n     g' n  and possibly h '   n   . typically the linked l i s t of brothers is sorted in increasing or decreasing order for max or min levels respectively. tip nodes of the search tree must also contain the board confiquration or a l i s t of moves from which the board can be constructed. 
　　　the bandwidth heuristic search proceeds as follows. 
1  select a node p for expansion by following the f i r s t son chain to a t i p 
node  the node p   . 
1  if p is a goal node  a win   stop and make the 1st move towards p. 
1  if p is a terminal node  a loss   resign or play towards p expecting to lose. 
1  double expand p  on both a min and max level  using the drop c r i t e r i o n to avoid the needless generation of the grandsons of p  similar to the alpha beta c u t o f f   . note: a check must be made that a terminal node is not generated on the f i r s t expansion of p. 
1  evaluate h'   and calculate f'    for a l l grandsons of p. add the generated nodes to the search tree. 
1  recalculate f' p  using recursive definition o f f '     . 
1  recalculate f '     for a l l ancestors of p and alter the brother l i s t s to maintain the order. 
1  drop a l l nodes 	n  and the subtree below 
　　n  if for b a brother of n n on a max level and f' b  f* n + e+d  n on a min level and f   b     f '   n   -   e + d   1  go to  1  
　　　the error of the final result can be bounded in a manner similar to our earlier 
　　　　　　　　　　　　　　1 argument  harris     f i r s t it is shown that the path to the optimal accessible goal is not dropped from the search tree. the proof indicates that it cannot be dropped on a max level because it is optimal  and it cannot be dropped from a min level because it is accessible. when a goal p is selected for expansion it was at some level compared to the optimal path. the maximum inaccuracy in this comparison is one bandwidth or  e+d . thus we can bound the added cost introduced by the imprecision within the heuristic. 
1 
alternating definition of f'    
　　　in the standard heuristic search bhe purpose of the cost function g'   is to add a breadth-first component to the search. a particular path in the tree w i l l continue to be expanded only if the decrease in h'   outweighs the increase in g ' . in order to keep this des irable tendency for the bandwidth search it is necessary to alter the common definitions for h'      g* {  and f'    for closed nodes. consider the following case. 
　　　if f'  n =g' n +h' tn  for a l l levels in the tree then the left-most path would be expanded ad infinitum even though there was not an improvement from the opponents point of view. we must force a breadth f i r s t component to the opponent's choices as well as the program's choices. to do this we must alter the fact that on min levels qoinq deeper in the tree makes the opponents moves look better instead of worse. this is clearly the opposite of the case for the program's choices  and of heuristic searches in general. in fact this breadth f i r s t tendency is c r i t i c a l to prove tha t any 
                                                                         1 heuristic search is admissible  nilsson  . the new definition f   =h'   -g' t  on min levels w i l l enable us to extend this needed tendency to the searching of min/max trees. the recursive definitions of h'   and g'   allow us to backup the knowledge gained at the t i p nodes to the middle of the tree where it can be compared with intersecting paths. if we do not use this alternating definition of f '     the search w i l l tend to investigate only 1 or 1 of the opponents moves at each l e v e l . given the inaccuracies inherent to the heuristic  it is clear that we must provide for a more conservative search. 
finding bandwidth heuristics 
　　　before considering the bandwidth heuristic search any further we must answer two questions which immediately come to mind. f i r s t   can we really find a bandwidth heuristic for a game such as chess or checkers  second  do we really expect the algorithm to halt by expanding a goal each time the computer is to make a move  
　　　the f i r s t question should be rephrased to ask  for what values of e & d can we find a bandwidth heuristic for a game such as chess   it is clear that for large e & d bandwidth heuristics can easily be found  and in fact the minimax board evaluators satisfy the conditions for some e & d. 
　　　for complex games such as chess it is unlikely that heuristics that can be proved to satisfy the bandwidth conditions can be found. in this case the e-admissibility of the algorithm becomes academic. however  the practical advantages of the bandwidth search process remain unaffected. the e and d then become parameters of the searh to vary the density of the search tree. 
　　　the loosening of the admissibility condi tion to the bandwidth condi tion was originally meant to simplify the task of finding a suitable heuristic for a specific problem  not make it more d i f f i c u l t . the main distinction made by the bandwidth search is that it readily admits that there are inaccuracies in the heuristic  and that we must cope with these in a more subtle way than a sinqle comparison of heuristic values. 
　　　the answer to the second question indicates the change in outlook implied by the bandwidth search. the algorithm is not meant to start and stop each move as is the case when minimaxing. the bandwidth heuristic search expands the move tree continuously  even while it is the opponent's turn to move. of course as actual moves are made the unused sections of the search tree can be discarded. the algorithm only suggests moves when it is forced to stop because of time or space constraints. under these conditions programs can play as well as current techniques with a  near zero response time  since much o  the tree search could' take place while the opponent is thinkingl the expansion of a goal must take place at some time during the game  but probably not before move decisions have to be made. 
　　　we mus t therefore devise a decision procedure for picking a move when the algorithm has not halted  but time or space constraints force us to make a move. the f i r s t quess one might have is to make the move towards the node to be expanded next. that i s   the accessible node with the minimum    value. however this is very dangerous since this node could be a misevaluated line of play that would be discarded immediately after i t s expansion  a safer technique would be to move towards the optimal accessible node as determined by h'   values. this gives a strong bias toward lines of play that have been looked into deeply  since no cost is assigned to a move. it also allows the program to save more of the move tree for use next move  as well as keeping the program from makinq serious mistakes. 
　　　let us now view the bandwidth search in l i g h t of our discussion of minimaxing. the bandwidth search  as would any ordered search  uses heuristic values as a means of guiding the search  not as an end in determining the best move. that is the error due to a misevaluation of two nodes is not c r i t i c a l   as with the minimax based algorithms  since the misevaluation can be corrected after further expansion. the 
1 
bandwidth search quite naturally follows forces or obvious lines of play to an arbitrary depth in the move tree. it is not restricted to an a p r i o r i depth bound. 
　　　since the accessibility of a node is defined in terms of true cost the bandwidth search does not assume the opponent evaluates boards in a manner similar to the program. the bandwidth search does assume that the opponent is trying to win the game in the fewest moves possible. this is a much more plausible assumption than the one mentioned above for minimaxing. 
　　　since the bandwidth search refines i t s estimate of accessibility as the tree is expanded the misordering of nodes by the heuristic is not c r i t i c a l . the search may expand along the wrong path for a time but is capable of returning to expand along the correct path. indeed it must return to examine the better line of play if the misordering is more than a bandwidth from the true values of the nodes. 
　　　a  good  move is defined as the f i r s t move towards an  e+d -optimal accessible goal. if the cost of this expanded goal is less than n then the program must win from this position. if the value is greater than n+ e+d  then the program can expect to lose. 
however  if the value is in the  uncertainty zone   n n+ e+d   as it w i l l be most of the time  then it is unknown who can win and the 
game should be continued. 
　　　in essence  we are saying that the heuristic should be accurate on a coarse scale  but may not necessarily be accurate on a fine scale. that i s   for h' 1 values s u f f i c i e n t l y far apart the ordering of the heuristic should be the same as the h   ordering. sufficiently far apart i s   of course  defined as one bandwidth  e+d . on a fine scale we admit the inaccuracy of the heuristic and reserve judgement u n t i l the nodes have been expanded further. thus  when h'   values appear in the  uncertainty zone   a l l is not l o s t   we must simply continue to expand the search tree u n t i l the heuristic values become more exact. 
empirical results 
　　　in order to better isolate the effect of the bandwidth search/ extensive tests were conducted using the games of chess and four score  an interesting variant of three dimensional t i c - t a c - t o e . in both cases existing programs that used a fixed ordered alpha-beta minimax were modified to use the bandwidth heuristic search. the new version then competed against the old program as well as human opponents. when two programs competed identical time and space constraints were imposed on each/ and both programs used the identical heuristic evaluator. since a l l the programs are deterministic it is only possible to play two unbiased games  one with each program going f i r s t . 
　　　for chess the bandwidth search noticeably improved the play of the program and easily won both games  playing white once and black once. at no time in either game did the minimax program mount a serious offensive attack although i t s defense was acceptable. in order to more accurately assess the improvement in chess play a local chess master  rated at 1  was asked to play each proqram u n t i l he had some feel for their ratings. his estimate was 1 for the mininax program  and 1 for the bandwidth search program. 
	the bandwidth search fared well in 	four 
score competition  winning while moving f i r s t and second. when playinq f i r s t it was able to effect an 1 move combination in the middle geane  which was beyond the horizon of the minimax  four score has no s tandardized rating scheme  thus no meaningful numeric comparison is possible. 
　　　since it is known that minimax chess proqrams can exceed the 1 rating of our program  it is clear that the chess heuristic used in this experiment is not the best possible. since the bandwidth search makes more extensive use of the heuristic than does minimaxing  it seems i n t u i t i v e   although unsupported  that the bandwidth search should improve at least as fast as the minimax search  for every improvement in the heuristic. 
double expansion 
　　　it is possible to define an ordered search along the sane lines as the bandwidth search without using double expansion. the following case demonstrates a more subtle effect that would cause a single expansion algorithm to order the search incorrectly. 

when the heuristic is overly sensitive to the last move  the sinqle expansion search can actually reverse the i n i t a l ordering of the nodes. move  w i l l be considered next since it was expanded l a s t   even though move  is the better play as i n i t i a l l y indicated by the heuris t i c . this problem 
becomes more acute as the number of possible moves increases  since the entire l i s t of moves can be reversed on a min level before progressing beyond the next max l e v e l . 


conclusion 