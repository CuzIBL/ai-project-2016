
we define a translation from weighted csp to signed max-sat  and a complete resolution-style calculus for solving signed max-sat. based on these results  we then describe an original exact algorithm for solving weighted csp. finally  we define several derived rules and prove that they enforce the main soft arc consistency defined in the literature when applied to weighted csp instances.
1 introduction
the weighted constraint satisfaction problem  wcsp  is a well known soft constraint framework for modelling overconstrained problems with practical applications in domains such as resource allocation  combinatorialauctions and bioinformatics. wcsp is an optimization version of the csp framework in which constraints are extended by associating costs to tuples. solving a wcsp instance  which is np-hard  consists in finding a complete assignment of minimal cost.
¡¡global consistency wcsp algorithms such as bucket elimination  dechter  1  solve wcsp instances without search. they obtain an optimal solution by applying  to the original instance  transformations that preserve cost distributions. on the other hand  wcsp branch and bound  bnb  based algorithms such as pfc  freuder and wallace  1   pfc-mrdac  larrosa and meseguer  1   russian doll search  verfaillie et al.  1   mac   larrosa and schiex  1   mfdac   larrosa and schiex  1  and medac   de givry et al.  1  perform a systematic search in the space of all possible assignments. they differ in the method of computing a lower bound at each node of the proof tree to prune some parts of the search space. modern algorithms such as mac   mfdac  and medac  enforce some extension of arc consistency  ac  to wcsp -soft ac  ac    full directional ac  fdac   or existential directional ac  edac  - when computing that lower bound. in this paper we relate ideas from three different research communities -multiple-valued logic  satisfiability and constraint processing- with the aim of describing the underlying logic of wcsp. first  we define an encoding  called signed encoding  that transforms any wcsp instance to a signed max-sat instance  where signed max-sat is the max-sat problem of the multiple-valued clausal forms known as signed cnf formulas  see  anso¡ätegui and many`a  1  and references therein . second  we define a complete resolution calculus for solving signed max-sat. third  we devise an exact algorithm for solving wcsp from the completeness proof of the resolution calculus. fourth  we define several sound inference rules for signed max-sat that enforce some known arc consistency properties when applied to the signed encoding of any binary wcsp instance.
¡¡the structure of the paper is as follows. section 1 contains preliminary definitions and the signed encoding. section 1 defines the inference rule for signed max-sat and proves its soundness and completeness. section 1 describes an exact algorithm for solving weighted csp. section 1 defines four derived rules that enforce soft local consistency properties. finally  section 1 presents the conclusions of our work.
1 preliminaries
definition 1 a truth value set  or domain  n is a non-empty finite set {i1 i1 ... in} where n denotes its cardinality. a sign is a subset s   n of truth values. a signed literal is an expression of the form s:p  where s is a sign and p is a propositional variable. the complement of a signed literal l

of the form s:p  denoted by l  is s:p =  n   s :p. a signed clause is a disjunction of signed literals. a signed cnf formula is a multiset of signed clauses.
definition 1 an assignment for a signed cnf formula is a mapping that assigns to every propositional variable an element of the truth value set. an assignment i satisfies a signed literal s:p iff i p  ¡Ê s  satisfies a signed clause c iff it satisfies at least one of the signed literals in c  and satisfies a signed cnf formula ¦£ iff it satisfies all clauses in ¦£. a signed cnf formula is satisfiable iff it is satisfied by at least one assignment; otherwise it is unsatisfiable.
definition 1 the signed max-sat problem for a signed cnf formula consists in finding an assignment that minimizes the number of falsified signed clauses.
definition 1 a constraint satisfaction problem  csp  instance is defined as a triple   where x = {x1 ... xn} is a set of variables  d = {d x1  ... d xn } is a set of domains containing the values the variables may take  and c = {c1 ... cm} is a set of constraints. each constraint is defined as a relation ri over a subset of variables si = {xi1 ... xik}  called the constraint
scope. the relation ri may be represented extensionally as a subset of the cartesian product d xi1  ¡Á ¡¤¡¤¡¤ ¡Á d xik .
definition 1 an assignment v for a csp instance is a mapping that assigns to every variable xi ¡Ê x an ele-
v satisfies a constraint
	i1	ik	i	iff	  i1 	  ik 	i.
definition 1 a weighted csp  wcsp  instance is defined as a triple  where x and d are variables and domains as in csp. a constraint ci is now defined as a pair
  where si = {xi1 ... xik} is the constraint scope and fi : d xi1  ¡Á ¡¤¡¤¡¤ ¡Á d xik  ¡ú n is a cost function. the cost of a constraint ci induced by an assignment v in which the variables of si = {xi1 ... xik} take values bi1 ... bik is fi bi1 ... bik . an optimal solution to a wcsp instance is a complete assignment in which the sum of the costs of the constraints is minimal.
definition 1 the weighted constraint satisfaction problem  wcsp  for a wcsp instance consists in finding an optimal solution for that instance.
definition 1 the signed encoding of a wcsp instance  is the signed cnf formula over the domain  that contains for every possible tuple  of every constraint  copies of the signed clause:
.
¡¡an alternative encoding is to consider signed clauses with weights instead of allowing multiple copies of a clause. for the sake of clarity we use unweighted clauses. nevertheless  any efficient implementation of the algorithms proposed should deal with weighted clauses. the extension of our theoretical results to weighted clauses is straightforward.
proposition 1 solving a wcsp instance p is equivalent to solving the signed max-sat problem of its signed encoding; i.e.  the optimal cost of p coincides with the minimal number of unsatisfied signed clauses of the signed encoding of p.
proof: for every combination of values to the variables of the scope of a constraint   the signed encoding contains as many clauses as the cost associated with that combination. if an assignment of the signed encoding restricted to the variables of si coincides with a combination of ci with cost 1  then all the clauses of the signed encoding introduced by ci are satisfied because there is no clause forbidding that combination. if an assignment of the signed encoding restricted to the variables of si coincides with a combinationwith cost u  where u   1  then  by construction of the signed encoding  only the u clauses of the form are falsified among the clauses introduced by ci.	

	x1	x1 : {a}:x1
1 : {a}:x1
1 : {b}:x1
1 : {b}:x1
1 : {c}:x1
1 : {c}:x1 ¡Å {a}:x1
1 : {c}:x1 ¡Å {b}:x1
1 : {a}:x1 ¡Å {c}:x1
1 : {b}:x1 ¡Å {c}:x1
1 : {b}:x1 ¡Å {c}:x1
1 : {c}:x1 ¡Å {c}:x1
figure 1: a wcsp instance and its signed encoding
example 1 figure 1 shows a wcsp instance and its signed encoding. the wcsp has the set of variables x = {x1 x1 x1} with domains d x1  = d x1  = d x1  = {a b c}. there is a binary constraint between variables x1 and x1  a binary constraint between variables x1 and x1  and a unary constraint for every variable. unary costs are depicted inside small circles. binary costs are depicted as labeled edges connecting the corresponding pair of values. the label of each edge is the corresponding cost. if two values are not connected  the binary cost between them is 1. in this instance  the optimal cost is 1.
1 the inference rule. soundness and completeness
we define a resolution rule for solving signed max-sat  called signed max-sat resolution  and prove its soundness and completeness. this rule was inspired by previous works  larrosa and heras  1; bonet et al.  1  for max-sat. the completeness proof for signed cnf formulas is technically more involved than the proof for boolean cnf formulas.
definition 1 the signed max-sat resolution rule is defined as follows

this inference rule is applied to multisets of clauses  and replaces the premises of the rule by its conclusions. we say that the rule resolves the variable x.
the tautologies concluded by the rule like n:x ¡Å a are removed from the resulting multiset. also we substitute clauses like  and clauses like  :x¡Åa by a.
¡¡we would like to emphasize that the rule does not add the conclusions to the premises. it replaces the clauses in the premises by the clauses in the conclusions.
definition 1 we write cd when the multiset of clauses d can be obtained from the multiset c applying the rule finitely many times. we write when this sequence of applications only resolves the variable x.
¡¡in the context of max-sat problems  an inference rule is sound iff the number of falsified clauses in the premises is equal to the number of falsified clauses in the conclusions for any assignment.
theorem 1  soundness  the signed max-sat resolution rule is sound.
proof: let i be an arbitrary assignment. there are four cases:
1. if i falsifies the two premises  then i also falsifies the first two conclusions  and only them.
1. if i satisfies the two premises  then it also trivially satisfies the last s+t clauses of the conclusion  because they are either implied by one or the other premise. the second clause of the conclusion is implied by each one of the premises. therefore  it is also satisfied by i.
¡¡the first clause of the conclusion is not implied by the premises. however  if both premises are satisfied then we have two cases. if s:x and are both satisfied  then so it is . otherwise  either some ai's or some bj's is satisfied  thus also the first clause of the conclusion.
1. if i satisfies the first premise  but not the second one  then the second clause of the conclusion as well as the t following clauses are satisfied  because all them are implied by the first premise.
¡¡for the rest of conclusions  there are two cases: if some of the ai's is satisfied  then let i be the index of such a. the assignment will satisfy the first clause of the conclusion and the last s conclusions  except
... ¡Å ai 1 ¡Å ai that is falsified. otherwise none of the ai's is satisfied  and therefore  s:x is satisfied. hence  the first conclusion is falsified  and the last s conclusions are satisfied. 1. if i satisfies the second premise  but not the first one  the situation is analogous to previous case. 
definition 1 a multiset of clauses c is said to be saturated w.r.t. x if  for every pair of clauses c1 = s:x ¡Å a and c1 =
 
i  there are literals s1:y in a and s1:y in b such that s1 ¡È s1 = n  or ii .
a multiset of clauses saturation of c w.r.t.  is saturated w.r.t.  i.e. c can be obtained from c applying the inference rule resolving x finitely many times.
¡¡we assign to every clause c a score s c  equal to the number of assignments to the variables that falsify c. the score of a multiset of clauses is the sum of scores of the clauses contained in it.
lemma 1 for every multiset of clauses c and variable x  there exists a multiset c such that c is a saturation of c
w.r.t. x.
proof: we proceed by applying nondeterministically the inference rule resolving x  until we obtain a saturated multiset. we only need to prove that this process terminates in finitely many inference steps  i.e that there does not exist infinite sequences  where at every inference we resolve the variable x and none of the sets ci are saturated. let m be the score of c.
¡¡let us partition the multiset c of clauses into n multisets  n is the size of the domain   {b1 b1 ... bn 1}  where bi contains the clauses where the cardinality of the support of x is i. notice that b1 is the multiset of clauses that do not contain the variable x. let us denote by s bi  the score of the multiset bi.
¡¡we will look at this n multisets as a word of length n and base m+1. so ourmultiset will be representedby the number s b1 s b1  ¡¤¡¤¡¤ s bn 1   taking s b1  as the most significant digit. since bi is a subset of c  for i = 1 ... n   1  s bi  ¡Ü m.
¡¡when we apply our inference rule  we take two clauses  say one from bi and one from bj and substitute them by a set of clauses that we will distribute among the different bk's. now we have a new multiset of clauses and by the soundness of our rule the score of the new multiset is the same. but  if we again look at the multiset as a number in base m  the number will be different. we will argue that for each inference step  the number increases. say that the clauses we do inference are. by the inference step we remove these clauses and add some clause
  and maybe also some clauses in and
. since  by definition of saturation
  we know that  hence the digit of  is more significant than the digits ofand . we have to conclude that the new m-base number after the inference step is larger than before. since the largest possible number we can obtain is the
one represented as s b1 s b1 ¡¤¡¤¡¤s bn 1  = m1¡¤¡¤¡¤1 the saturation procedure for x has to finish before mn steps. 
lemma 1 let e be a saturated multiset of clauses w.r.t. x. let e be the subset of clauses of e not containing x. then  any assignment i satisfying e  and not assigning x  can be extended to an assignment satisfying e.
proof: we have to extend i to satisfy the whole e. in fact we onlyneed to set the value of x. let us partition the multiset
   multiset of clauses that contain the variable x  into two multisets: the multiset already satisfied by i   the multiset such that the partial assignment i doesn't satisfy any of the clauses. our aim is to show that the intersection of all the supports of is nonempty. this way we will extend i by assigning x to a value in the intersection of all the supports.
¡¡since e is saturated  for every pair of clauses c1 = s:x¡Åa and either condition i  or ii  of the definition happens. condition i  cannot happen because
c1 and c1 cannot both be in . therefore  for every pair of clauses in
. now  we order all the
supports of x appearing in  in decreasing order of their cardinality. it is straightforward to see that every support is contained or equal to its predecessor. particularly  the last support is equal to the intersection of all the supports  and it is non-empty.	
theorem 1  completeness  for any multiset of clauses c  we have
c  ...   d  m 
where d is a satisfiable multiset of clauses  and m is the minimum number of unsatisfied clauses of c.
proof: let x1 ... xn be any list of the variables of c. we construct two sequences of multisets c1 ... cn and d1 ... dn such that
1. c = c1 
1. for i = 1 ... n  ci ¡Èdi is a saturation of ci 1 w.r.t. xi  and
1. for i = 1 ... n  ci is a multiset of clauses not containing x1 ... xi  and di is a multiset of clauses containing the variable xi.
¡¡by lemma 1  this sequences can effectively be computed: for i = 1 ... n  we saturate ci 1 w.r.t. xi  and then we partition the resulting multiset into a subset di containing xi  and another ci not containing this variable.
¡¡notice that  since cn does not contain any variable  it is either the empty multiset    or it only contains  some  empty clauses {  ...  }.
	now we are going to prove that the multiset	=1
is satisfiable by constructing an assignment satisfying it. for i = 1 ... n  let ei = di ¡È ... ¡È dn  and let en+1 =  .
notice that  for i = 1 ... n 
1. the multiset ei only contains the variables {xi ... xn}  1. ei is saturated w.r.t. xi  and
1. ei decomposes as ei = di ¡È ei+1  where all the clauses of di contain xi and none of ei+1 contains xi.
¡¡now  we construct a sequence of assignments i1 ... in+1  where in+1 is the empty assignment  hence satisfies en+1 =  . now  ii is constructed from ii+1 as follows. assume by induction hypothesis that ii+1 satisfies ei+1. since ei is saturated w.r.t. xi  and decomposes into di and ei+1  by lemma 1  we can extend ii+1 with an assignment for xi to obtain ii satisfy ei. iterating  we get that i1 satisfies n .
¡¡concluding  since by the soundness of the rule  theorem 1  the inference preserves the number of falsified clauses for every assignment  m = |cn| is the minimum number of unsatisfied clauses of c. 
1 global consistency in wcsp
from the proof of theorem 1  we can extract the following exact algorithm for solving wcsp.
input: a wcsp instance p c1 := signed encoding p  for
endfor
m := |ck| i :=   for i := k downto 1
       i	i	extension	 i d output:
¡¡given an initial wcsp instance p with k variables  this algorithm returns the minimal cost m of p and an optimal solution i.
¡¡the function saturation ci 1 xi  computes a saturation of ci 1 w.r.t. xi applying the resolution rule resolving x until it gets a saturated set. lemma 1 ensures that this process terminates  in particular that it does not cycle. as we have already said  the saturation of a multiset is not unique  but the proof of theorem 1 does not depend on which particular saturation we take.
¡¡the function partition c xi  computes a partition of c  already saturated  into the subset of clauses containing xi and the subset of clauses not containing xi.
¡¡the function extension xi i di  computes an assignment for xi extending the assignment i  to satisfy the clauses of di according to lemma 1. the function filters all clauses of di that are not satisfied by i. then it computes the intersection of the supports for xi of all of them  and returns one of the values of such an intersection. it returns a value from
¡É{s |s:xi ¡Å a ¡Ê di and i falsifies a}
the argumentationof the proof of lemma 1 ensures that this intersection is not empty.
¡¡the order on the saturation of the variables can be freely chosen  i.e. the sequence x1 ...xn can be any enumeration of the variables.
¡¡a similar approach to this algorithm was defined using bucket elimination  dechter  1 . even though both procedures have the same exponential worst-case complexity  we believe that our algorithm can give rise to a better performance profile  in the sense that our computation of the joint operation is incremental.
1 local consistency in wcsp
in wcsp a number of local consistency properties have been proposed. these local properties do not ensure the global consistency of a set of constraints. however  they can be enforced very efficiently and used to find a lower bound of the cost.
¡¡in this section we focus on binary wcsp instances as in  larrosa and schiex  1; de givry et al.  1 . we assume the existence of a unary constraint for every variable xi. if no such a constraint is defined  we can always define a dummy constraint as f ak  = 1 for every ak ¡Ê d xi . we will use the standard notation for binary wcsp in the literature: ci will denote a unary constraint over a variable xi  and cij will denote a binary constraint between variables xi and xj; ci ak   where ak ¡Ê d xi   will denote f ak   and   where ak ¡Ê d xi  and bl ¡Ê d xj   will denote
definition 1 variable xi is node consistent if there exists a value ak ¡Ê d xi  such that ci ak  = 1. a wcsp is node consistent  nc   if every variable is node consistent.
definition 1 given a binary constraint cij  the value b ¡Ê d xj  is a simple support for a ¡Ê d xi  if cij a b  = 1  and is a full support if cij a b  + cj b  = 1
definition 1 variable xi is arc consistent if every value a ¡Ê d xi  has a simple support in every constraint cij. a wcsp is arc consistent  ac   if every variable is node and arc consistent.
definition 1 variable xi is full arc consistent if every value a ¡Ê d xi  has a full support in every constraint cij. a wcsp is full arc consistent  fac   if every variable is node and full arc consistent.
definition 1 let   be a total ordering over the variables of a wcsp. variable xi is directional arc consistent  dac  if every value a ¡Ê d xi  has a full support in every constraint cij such that xj   xi. it is full directional arc consistent  fdac  if  in addition  every value a ¡Ê d xi  has a simple support in every constraint cij such that xj   xi. a wcsp is full directional arc consistent  fdac   if every variable is node and full directional arc consistent.
definition 1 let   be a total ordering over the variables of a wcsp. variable xi is existential arc consistent if there is at least one value a ¡Ê d xi  such that ci a  = 1 and has a full support in every constraint cij. a wcsp is existential arc consistent  eac   if every variable is node and existential arc consistent. a wcsp is existential directional arc consistent  edac   if it is fdac  and eac .
¡¡in what follows we define four sound inference rules for a sublanguage of signed formulas. we just consider clauses with at most two literals and whose signs are complements of singletons. this language captures binary wcsp instances. as we will see bellow  the rules enforce some known local consistency properties. for lack of space we do not show how these rules may be derived from the signed max-sat resolution rule.
in the next rules we assume that n = {i1 ... in} =
{j1 ... jn} and j ¡Ê n.rule 1:rule 1:
{i1}:x ¡¤¡¤¡¤{i1}:x ¡Å {j}:y
¡¤¡¤¡¤
	{in}:x	{in}:x ¡Å {j}:y
		{j}:y
rule 1:	rule 1:

{i1}:x ¡Å {j1}:y
¡¤¡¤¡¤
{is}:x ¡Å {j1}:y
{is+1}:x
¡¤¡¤¡¤
{in}:x
{j1}:y ¡¤¡¤¡¤
{jn}:y
{is+1}:x ¡Å {j1}:y
¡¤¡¤¡¤
{is+1}:x ¡Å {jn}:y
¡¤¡¤¡¤
{in}:x ¡Å {j1}:y
¡¤¡¤¡¤

{in}:x ¡Å {jn}:y
lemma 1 star node consistency  nc*  can be enforced applying rule 1.
proof: say xi is a variable of a wcsp that is not star node consistent. then for every j ¡Ê n  ci j    1. let be w = min{ci j |j ¡Ê n} and k such that ci k  = w. this means that in the corresponding signed encoding we have ci j  copies of   for all j ¡Ê n. rule 1 applied to the encoding w many times will remove w copies of   for all j ¡Ê n  hence all the copies of . therefore  the wcsp equivalent to the new encoding has the star node consistency property of the variable xi. 
lemma 1 arc consistency  ac*  can be enforced applying rule 1.
proof: say xi is a variable that is not arc consistent with respect to a constraint cij  for some variable xj. this means that there is a value a ¡Ê n such that for all b ¡Ê n  cij a b    1. let be w = min{cij a b |b ¡Ê n}. the constrain will generate among others cij a b  copies of
{a}:xi ¡Å {b}:xj  for every b ¡Ê n. applying rule 1 w many

times  we substitute these clauses by w copies of {a}:xi and

cij a b    w copies of {a}:xi ¡Å {b}:xj  for every b ¡Ê n. since there is one value k such that cij a k    w = 1  this new set of clauses indicates that now variable xi is arc consistent with respect to cij  for the value a. arc consistency for other values would be obtained in the same way. 
¡¡the previous two lemmas where proved for domains of size two in  larrosa and heras  1 .
lemma 1 fixed a total ordering   on the variables  directional arc consistency  dac  can be enforced from rule 1 applied with the restriction x   y.
proof: let   be a total ordering on the variables. say xi is a variable that is not directional arc consistent with respect to a restriction cij for some variable xj where

xj   xi. this means that there is a value a ¡Ê n such that for all b ¡Ê n  cij a b  + cj b    1. suppose that there is some b such that cij a b  = 1  otherwise we can use rule 1 to enforce arc consistency. w.l.o.g. suppose that  for s ¡Ê {k...n}  cij a s  = 1. so  for the same subdomain  cj s    1. this ensures

that we have the following subset of clauses {{a}:xi ¡Åthe sequence of transformations is: a  original formula  b  application of rule 1 to clauses 1  1 and 1  c  application of rule 1 substituting clauses 1  1 and 1 by clause 1  d  application of rule 1 substituting clauses 1  1 and 1 by 1  1 and 1  and e  application of rule 1 to clauses 1  1 and 1. the minimal cost is 1. the corresponding sequence of wcsp instances is: a  original instance  b  is nc* but not ac*  c  is.	ac* but not dac*  d  is dac* but not nc* and e  is dac*
rule 1 allows us to substitute this set of clauses by and nc*. . applying
rule 1 repeatedly the values {k...n} of xj become the full support for xi.	
rule 1 enforces dac   since it combines dac and nc .
¡¡rule 1 also enforces full arc consistency  fac    but then it must be applied without the limitation x   y.
¡¡existential arc consistency  eac   can also be obtained from rule 1 but with different limitations than dac   in order to avoid cycles .1	conclusions
we have proved that the logic of signed cnf formulas provides the underlying logic of wcsp. on the one hand  this language allows a compact and natural representation of wcsp with not only binary but n-ary constraints. on the other hand  the inference system captures and formalizes the algorithms for global as well as local consistency that have been described in the wcsp community.
we are currently investigating new derived rules that couldfigure 1: example of the application of the rules
example 1 figure 1 shows a sequence of equivalent signed max-sat instances obtained by applying rules 1  1 and 1. larrosa and schiex  1  j. larrosa and t. schiex. solving weighted csp by maintaining arc-consistency. artificial intelligence  1-1 :1  1.
 verfaillie et al.  1  g. verfaillie  m. lemaitre  and t. schiex. russian doll search. in proc. of aaai'1  pages 1  1.be applied in polynomial time and enforce stronger forms of
	a	soft local consistency.
b
	c	